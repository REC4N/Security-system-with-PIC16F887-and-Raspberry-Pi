

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Mar 07 12:20:45 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.05
    23                           ; Generated 20/12/2018 GMT
    24                           ; 
    25                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F887 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  008F                     	;# 
   101  0090                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0093                     	;# 
   106  0093                     	;# 
   107  0094                     	;# 
   108  0095                     	;# 
   109  0096                     	;# 
   110  0097                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009A                     	;# 
   114  009B                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  0105                     	;# 
   120  0107                     	;# 
   121  0108                     	;# 
   122  0109                     	;# 
   123  010C                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  010F                     	;# 
   128  0185                     	;# 
   129  0187                     	;# 
   130  0188                     	;# 
   131  0189                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0008                     	;# 
   143  0009                     	;# 
   144  000A                     	;# 
   145  000B                     	;# 
   146  000C                     	;# 
   147  000D                     	;# 
   148  000E                     	;# 
   149  000E                     	;# 
   150  000F                     	;# 
   151  0010                     	;# 
   152  0011                     	;# 
   153  0012                     	;# 
   154  0013                     	;# 
   155  0014                     	;# 
   156  0015                     	;# 
   157  0015                     	;# 
   158  0016                     	;# 
   159  0017                     	;# 
   160  0018                     	;# 
   161  0019                     	;# 
   162  001A                     	;# 
   163  001B                     	;# 
   164  001B                     	;# 
   165  001C                     	;# 
   166  001D                     	;# 
   167  001E                     	;# 
   168  001F                     	;# 
   169  0081                     	;# 
   170  0085                     	;# 
   171  0086                     	;# 
   172  0087                     	;# 
   173  0088                     	;# 
   174  0089                     	;# 
   175  008C                     	;# 
   176  008D                     	;# 
   177  008E                     	;# 
   178  008F                     	;# 
   179  0090                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0093                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0094                     	;# 
   186  0095                     	;# 
   187  0096                     	;# 
   188  0097                     	;# 
   189  0098                     	;# 
   190  0099                     	;# 
   191  009A                     	;# 
   192  009B                     	;# 
   193  009C                     	;# 
   194  009D                     	;# 
   195  009E                     	;# 
   196  009F                     	;# 
   197  0105                     	;# 
   198  0107                     	;# 
   199  0108                     	;# 
   200  0109                     	;# 
   201  010C                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  010F                     	;# 
   206  0185                     	;# 
   207  0187                     	;# 
   208  0188                     	;# 
   209  0189                     	;# 
   210  018C                     	;# 
   211  018D                     	;# 
   212  0000                     	;# 
   213  0001                     	;# 
   214  0002                     	;# 
   215  0003                     	;# 
   216  0004                     	;# 
   217  0005                     	;# 
   218  0006                     	;# 
   219  0007                     	;# 
   220  0008                     	;# 
   221  0009                     	;# 
   222  000A                     	;# 
   223  000B                     	;# 
   224  000C                     	;# 
   225  000D                     	;# 
   226  000E                     	;# 
   227  000E                     	;# 
   228  000F                     	;# 
   229  0010                     	;# 
   230  0011                     	;# 
   231  0012                     	;# 
   232  0013                     	;# 
   233  0014                     	;# 
   234  0015                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0017                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  001B                     	;# 
   242  001B                     	;# 
   243  001C                     	;# 
   244  001D                     	;# 
   245  001E                     	;# 
   246  001F                     	;# 
   247  0081                     	;# 
   248  0085                     	;# 
   249  0086                     	;# 
   250  0087                     	;# 
   251  0088                     	;# 
   252  0089                     	;# 
   253  008C                     	;# 
   254  008D                     	;# 
   255  008E                     	;# 
   256  008F                     	;# 
   257  0090                     	;# 
   258  0091                     	;# 
   259  0092                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0093                     	;# 
   263  0094                     	;# 
   264  0095                     	;# 
   265  0096                     	;# 
   266  0097                     	;# 
   267  0098                     	;# 
   268  0099                     	;# 
   269  009A                     	;# 
   270  009B                     	;# 
   271  009C                     	;# 
   272  009D                     	;# 
   273  009E                     	;# 
   274  009F                     	;# 
   275  0105                     	;# 
   276  0107                     	;# 
   277  0108                     	;# 
   278  0109                     	;# 
   279  010C                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010E                     	;# 
   283  010F                     	;# 
   284  0185                     	;# 
   285  0187                     	;# 
   286  0188                     	;# 
   287  0189                     	;# 
   288  018C                     	;# 
   289  018D                     	;# 
   290  000B                     _INTCONbits	set	11
   291  0008                     _PORTD	set	8
   292  0006                     _PORTB	set	6
   293  0008                     _PORTDbits	set	8
   294  0019                     _TXREG	set	25
   295  000C                     _PIR1bits	set	12
   296  001A                     _RCREG	set	26
   297  0013                     _SSPBUF	set	19
   298  0014                     _SSPCON	set	20
   299  0063                     _SSPIF	set	99
   300  0030                     _RB0	set	48
   301  0065                     _RCIF	set	101
   302  00C4                     _CREN	set	196
   303  00C7                     _SPEN	set	199
   304  008C                     _PIE1bits	set	140
   305  0087                     _TRISCbits	set	135
   306  0085                     _TRISAbits	set	133
   307  0088                     _TRISD	set	136
   308  0086                     _TRISB	set	134
   309  0099                     _SPBRG	set	153
   310  008F                     _OSCCONbits	set	143
   311  0094                     _SSPSTATbits	set	148
   312  0094                     _SSPSTAT	set	148
   313  04C1                     _TRMT	set	1217
   314  04C5                     _TXEN	set	1221
   315  043E                     _TRISC6	set	1086
   316  043F                     _TRISC7	set	1087
   317  04C4                     _SYNC	set	1220
   318  04C2                     _BRGH	set	1218
   319  043B                     _TRISC3	set	1083
   320  043D                     _TRISC5	set	1085
   321  0188                     _ANSEL	set	392
   322  0189                     _ANSELH	set	393
   323                           
   324                           ; #config settings
   325  0000                     
   326                           	psect	cinit
   327  0011                     start_initialization:	
   328  0011                     __initialization:	
   329                           
   330                           ; Clear objects allocated to COMMON
   331  0011  01F0               	clrf	__pbssCOMMON& (0+127)
   332  0012  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   333  0013  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   334  0014  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   335  0015  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   336                           
   337                           ; Clear objects allocated to BANK0
   338  0016  1283               	bcf	3,5	;RP0=0, select bank0
   339  0017  1303               	bcf	3,6	;RP1=0, select bank0
   340  0018  01C1               	clrf	__pbssBANK0& (0+127)
   341  0019  01C2               	clrf	(__pbssBANK0+1)& (0+127)
   342  001A  01C3               	clrf	(__pbssBANK0+2)& (0+127)
   343  001B  01C4               	clrf	(__pbssBANK0+3)& (0+127)
   344  001C  01C5               	clrf	(__pbssBANK0+4)& (0+127)
   345  001D  01C6               	clrf	(__pbssBANK0+5)& (0+127)
   346  001E  01C7               	clrf	(__pbssBANK0+6)& (0+127)
   347  001F  01C8               	clrf	(__pbssBANK0+7)& (0+127)
   348  0020  01C9               	clrf	(__pbssBANK0+8)& (0+127)
   349  0021  01CA               	clrf	(__pbssBANK0+9)& (0+127)
   350  0022  01CB               	clrf	(__pbssBANK0+10)& (0+127)
   351  0023  01CC               	clrf	(__pbssBANK0+11)& (0+127)
   352  0024  01CD               	clrf	(__pbssBANK0+12)& (0+127)
   353  0025  01CE               	clrf	(__pbssBANK0+13)& (0+127)
   354  0026  01CF               	clrf	(__pbssBANK0+14)& (0+127)
   355  0027                     end_of_initialization:	
   356                           ;End of C runtime variable initialization code
   357                           
   358  0027                     __end_of__initialization:	
   359  0027  0183               	clrf	3
   360  0028  120A  118A  2A49   	ljmp	_main	;jump to C main() function
   361                           
   362                           	psect	bssCOMMON
   363  0070                     __pbssCOMMON:	
   364  0070                     _j:	
   365  0070                     	ds	1
   366  0071                     _done:	
   367  0071                     	ds	1
   368  0072                     _i:	
   369  0072                     	ds	1
   370  0073                     _received:	
   371  0073                     	ds	1
   372  0074                     _val:	
   373  0074                     	ds	1
   374                           
   375                           	psect	bssBANK0
   376  0041                     __pbssBANK0:	
   377  0041                     _info:	
   378  0041                     	ds	15
   379                           
   380                           	psect	cstackCOMMON
   381  0075                     __pcstackCOMMON:	
   382  0075                     ?_setup:	
   383  0075                     ?_spiReceiveWait:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0075                     ??_spiReceiveWait:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0075                     ?_spiWrite:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0075                     ??_spiWrite:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0075                     ?_spiRead:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0075                     ??_spiRead:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0075                     ?_UART_Read:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0075                     ??_UART_Read:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0075                     ?_isr:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0075                     ?_main:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0075                     spiWrite@dat:	
   414                           ; 1 bytes @ 0x0
   415                           
   416                           
   417                           ; 1 bytes @ 0x0
   418  0075                     	ds	1
   419  0076                     ??_isr:	
   420                           
   421                           ; 1 bytes @ 0x1
   422  0076                     	ds	4
   423                           
   424                           	psect	cstackBANK0
   425  0020                     __pcstackBANK0:	
   426  0020                     ?_spiInit:	
   427  0020                     ?___aldiv:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0020                     spiInit@sDataSample:	
   431                           ; 4 bytes @ 0x0
   432                           
   433  0020                     ___aldiv@divisor:	
   434                           ; 1 bytes @ 0x0
   435                           
   436                           
   437                           ; 4 bytes @ 0x0
   438  0020                     	ds	1
   439  0021                     spiInit@sClockIdle:	
   440                           
   441                           ; 1 bytes @ 0x1
   442  0021                     	ds	1
   443  0022                     spiInit@sTransmitEdge:	
   444                           
   445                           ; 1 bytes @ 0x2
   446  0022                     	ds	1
   447  0023                     ??_spiInit:	
   448  0023                     spiInit@sType:	
   449                           ; 1 bytes @ 0x3
   450                           
   451                           
   452                           ; 1 bytes @ 0x3
   453  0023                     	ds	1
   454  0024                     ___aldiv@dividend:	
   455                           
   456                           ; 4 bytes @ 0x4
   457  0024                     	ds	4
   458  0028                     ??___aldiv:	
   459                           
   460                           ; 1 bytes @ 0x8
   461  0028                     	ds	1
   462  0029                     ___aldiv@counter:	
   463                           
   464                           ; 1 bytes @ 0x9
   465  0029                     	ds	1
   466  002A                     ___aldiv@sign:	
   467                           
   468                           ; 1 bytes @ 0xA
   469  002A                     	ds	1
   470  002B                     ___aldiv@quotient:	
   471                           
   472                           ; 4 bytes @ 0xB
   473  002B                     	ds	4
   474  002F                     ?_UART_Init:	
   475  002F                     UART_Init@baudrate:	
   476                           ; 1 bytes @ 0xF
   477                           
   478                           
   479                           ; 4 bytes @ 0xF
   480  002F                     	ds	4
   481  0033                     ??_UART_Init:	
   482                           
   483                           ; 1 bytes @ 0x13
   484  0033                     	ds	12
   485  003F                     UART_Init@x:	
   486                           
   487                           ; 2 bytes @ 0x1F
   488  003F                     	ds	2
   489  0041                     ??_setup:	
   490  0041                     ??_main:	
   491                           ; 1 bytes @ 0x21
   492                           
   493                           
   494                           	psect	maintext
   495  0249                     __pmaintext:	
   496                           ; 1 bytes @ 0x21
   497 ;;
   498 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   499 ;;
   500 ;; *************** function _main *****************
   501 ;; Defined at:
   502 ;;		line 56 in file "mainTraductor.c"
   503 ;; Parameters:    Size  Location     Type
   504 ;;		None
   505 ;; Auto vars:     Size  Location     Type
   506 ;;		None
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		wreg, status,2, status,0, pclath, cstack
   511 ;; Tracked objects:
   512 ;;		On entry : B00/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   516 ;;      Params:         0       0       0       0       0
   517 ;;      Locals:         0       0       0       0       0
   518 ;;      Temps:          0       0       0       0       0
   519 ;;      Totals:         0       0       0       0       0
   520 ;;Total ram usage:        0 bytes
   521 ;; Hardware stack levels required when called:    6
   522 ;; This function calls:
   523 ;;		_setup
   524 ;; This function is called by:
   525 ;;		Startup code after reset
   526 ;; This function uses a non-reentrant model
   527 ;;
   528                           
   529                           
   530                           ;psect for function _main
   531  0249                     _main:	
   532                           
   533                           ;mainTraductor.c: 57:     setup();
   534                           
   535                           ;incstack = 0
   536                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   537  0249  120A  118A  21E9  120A  118A  	fcall	_setup
   538  024E                     l1191:	
   539                           
   540                           ;mainTraductor.c: 59:         if (done == 1){
   541  024E  0371               	decf	_done,w
   542  024F  1D03               	btfss	3,2
   543  0250  2A4E               	goto	l1191
   544                           
   545                           ;mainTraductor.c: 75:             done = 0;
   546  0251  01F1               	clrf	_done
   547                           
   548                           ;mainTraductor.c: 76:             RB0 = 0;
   549  0252  1283               	bcf	3,5	;RP0=0, select bank0
   550  0253  1303               	bcf	3,6	;RP1=0, select bank0
   551  0254  1006               	bcf	6,0	;volatile
   552  0255  2A4E               	goto	l1191
   553  0256                     __end_of_main:	
   554                           
   555                           	psect	text1
   556  01E9                     __ptext1:	
   557 ;; *************** function _setup *****************
   558 ;; Defined at:
   559 ;;		line 81 in file "mainTraductor.c"
   560 ;; Parameters:    Size  Location     Type
   561 ;;		None
   562 ;; Auto vars:     Size  Location     Type
   563 ;;		None
   564 ;; Return value:  Size  Location     Type
   565 ;;                  1    wreg      void 
   566 ;; Registers used:
   567 ;;		wreg, status,2, status,0, pclath, cstack
   568 ;; Tracked objects:
   569 ;;		On entry : 0/0
   570 ;;		On exit  : 0/0
   571 ;;		Unchanged: 0/0
   572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   573 ;;      Params:         0       0       0       0       0
   574 ;;      Locals:         0       0       0       0       0
   575 ;;      Temps:          0       0       0       0       0
   576 ;;      Totals:         0       0       0       0       0
   577 ;;Total ram usage:        0 bytes
   578 ;; Hardware stack levels used:    1
   579 ;; Hardware stack levels required when called:    5
   580 ;; This function calls:
   581 ;;		_UART_Init
   582 ;;		_spiInit
   583 ;; This function is called by:
   584 ;;		_main
   585 ;; This function uses a non-reentrant model
   586 ;;
   587                           
   588                           
   589                           ;psect for function _setup
   590  01E9                     _setup:	
   591                           
   592                           ;mainTraductor.c: 82:     OSCCONbits.IRCF0 = 1;
   593                           
   594                           ;incstack = 0
   595                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   596  01E9  1683               	bsf	3,5	;RP0=1, select bank1
   597  01EA  1303               	bcf	3,6	;RP1=0, select bank1
   598  01EB  160F               	bsf	15,4	;volatile
   599                           
   600                           ;mainTraductor.c: 83:     OSCCONbits.IRCF1 = 1;
   601  01EC  168F               	bsf	15,5	;volatile
   602                           
   603                           ;mainTraductor.c: 84:     OSCCONbits.IRCF2 = 1;
   604  01ED  170F               	bsf	15,6	;volatile
   605                           
   606                           ;mainTraductor.c: 85:     OSCCONbits.SCS = 1;
   607  01EE  140F               	bsf	15,0	;volatile
   608                           
   609                           ;mainTraductor.c: 86:     val = 0;
   610  01EF  01F4               	clrf	_val
   611                           
   612                           ;mainTraductor.c: 87:     ANSELH = 0;
   613  01F0  1683               	bsf	3,5	;RP0=1, select bank3
   614  01F1  1703               	bsf	3,6	;RP1=1, select bank3
   615  01F2  0189               	clrf	9	;volatile
   616                           
   617                           ;mainTraductor.c: 88:     TRISB = 0;
   618  01F3  1683               	bsf	3,5	;RP0=1, select bank1
   619  01F4  1303               	bcf	3,6	;RP1=0, select bank1
   620  01F5  0186               	clrf	6	;volatile
   621                           
   622                           ;mainTraductor.c: 89:     PORTB = 0;
   623  01F6  1283               	bcf	3,5	;RP0=0, select bank0
   624  01F7  1303               	bcf	3,6	;RP1=0, select bank0
   625  01F8  0186               	clrf	6	;volatile
   626                           
   627                           ;mainTraductor.c: 90:     ANSEL = 0;
   628  01F9  1683               	bsf	3,5	;RP0=1, select bank3
   629  01FA  1703               	bsf	3,6	;RP1=1, select bank3
   630  01FB  0188               	clrf	8	;volatile
   631                           
   632                           ;mainTraductor.c: 91:     TRISD = 0;
   633  01FC  1683               	bsf	3,5	;RP0=1, select bank1
   634  01FD  1303               	bcf	3,6	;RP1=0, select bank1
   635  01FE  0188               	clrf	8	;volatile
   636                           
   637                           ;mainTraductor.c: 92:     PORTD = 0;
   638  01FF  1283               	bcf	3,5	;RP0=0, select bank0
   639  0200  1303               	bcf	3,6	;RP1=0, select bank0
   640  0201  0188               	clrf	8	;volatile
   641                           
   642                           ;mainTraductor.c: 93:     TRISAbits.TRISA5 = 1;
   643  0202  1683               	bsf	3,5	;RP0=1, select bank1
   644  0203  1303               	bcf	3,6	;RP1=0, select bank1
   645  0204  1685               	bsf	5,5	;volatile
   646                           
   647                           ;mainTraductor.c: 94:     TRISCbits.TRISC3 = 1;
   648  0205  1587               	bsf	7,3	;volatile
   649                           
   650                           ;mainTraductor.c: 95:     INTCONbits.GIE = 1;
   651  0206  178B               	bsf	11,7	;volatile
   652                           
   653                           ;mainTraductor.c: 96:     INTCONbits.PEIE = 1;
   654  0207  170B               	bsf	11,6	;volatile
   655                           
   656                           ;mainTraductor.c: 97:     PIR1bits.SSPIF = 0;
   657  0208  1283               	bcf	3,5	;RP0=0, select bank0
   658  0209  1303               	bcf	3,6	;RP1=0, select bank0
   659  020A  118C               	bcf	12,3	;volatile
   660                           
   661                           ;mainTraductor.c: 98:     PIE1bits.SSPIE = 1;
   662  020B  1683               	bsf	3,5	;RP0=1, select bank1
   663  020C  1303               	bcf	3,6	;RP1=0, select bank1
   664  020D  158C               	bsf	12,3	;volatile
   665                           
   666                           ;mainTraductor.c: 99:     PIR1bits.RCIF = 0;
   667  020E  1283               	bcf	3,5	;RP0=0, select bank0
   668  020F  1303               	bcf	3,6	;RP1=0, select bank0
   669  0210  128C               	bcf	12,5	;volatile
   670                           
   671                           ;mainTraductor.c: 100:     PIE1bits.RCIE = 1;
   672  0211  1683               	bsf	3,5	;RP0=1, select bank1
   673  0212  1303               	bcf	3,6	;RP1=0, select bank1
   674  0213  168C               	bsf	12,5	;volatile
   675                           
   676                           ;mainTraductor.c: 101:     UART_Init(9600);
   677  0214  3000               	movlw	0
   678  0215  1283               	bcf	3,5	;RP0=0, select bank0
   679  0216  1303               	bcf	3,6	;RP1=0, select bank0
   680  0217  00B2               	movwf	UART_Init@baudrate+3
   681  0218  3000               	movlw	0
   682  0219  00B1               	movwf	UART_Init@baudrate+2
   683  021A  3025               	movlw	37
   684  021B  00B0               	movwf	UART_Init@baudrate+1
   685  021C  3080               	movlw	128
   686  021D  00AF               	movwf	UART_Init@baudrate
   687  021E  120A  118A  202B  120A  118A  	fcall	_UART_Init
   688                           
   689                           ;mainTraductor.c: 102:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_ID
      +                          LE_LOW, SPI_IDLE_2_ACTIVE);
   690  0223  1283               	bcf	3,5	;RP0=0, select bank0
   691  0224  1303               	bcf	3,6	;RP1=0, select bank0
   692  0225  01A0               	clrf	spiInit@sDataSample
   693  0226  01A1               	clrf	spiInit@sClockIdle
   694  0227  01A2               	clrf	spiInit@sTransmitEdge
   695  0228  3024               	movlw	36
   696  0229  120A  118A  222D   	fcall	_spiInit
   697  022C  0008               	return
   698  022D                     __end_of_setup:	
   699                           
   700                           	psect	text2
   701  022D                     __ptext2:	
   702 ;; *************** function _spiInit *****************
   703 ;; Defined at:
   704 ;;		line 13 in file "SPI.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;  sType           1    wreg     enum E1264
   707 ;;  sDataSample     1    0[BANK0 ] enum E1272
   708 ;;  sClockIdle      1    1[BANK0 ] enum E1276
   709 ;;  sTransmitEdg    1    2[BANK0 ] enum E1280
   710 ;; Auto vars:     Size  Location     Type
   711 ;;  sType           1    3[BANK0 ] enum E1264
   712 ;; Return value:  Size  Location     Type
   713 ;;                  1    wreg      void 
   714 ;; Registers used:
   715 ;;		wreg, status,2, status,0
   716 ;; Tracked objects:
   717 ;;		On entry : 0/0
   718 ;;		On exit  : 0/0
   719 ;;		Unchanged: 0/0
   720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   721 ;;      Params:         0       3       0       0       0
   722 ;;      Locals:         0       1       0       0       0
   723 ;;      Temps:          0       0       0       0       0
   724 ;;      Totals:         0       4       0       0       0
   725 ;;Total ram usage:        4 bytes
   726 ;; Hardware stack levels used:    1
   727 ;; Hardware stack levels required when called:    3
   728 ;; This function calls:
   729 ;;		Nothing
   730 ;; This function is called by:
   731 ;;		_setup
   732 ;; This function uses a non-reentrant model
   733 ;;
   734                           
   735                           
   736                           ;psect for function _spiInit
   737  022D                     _spiInit:	
   738                           
   739                           ;incstack = 0
   740                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   741                           ;spiInit@sType stored from wreg
   742  022D  1283               	bcf	3,5	;RP0=0, select bank0
   743  022E  1303               	bcf	3,6	;RP1=0, select bank0
   744  022F  00A3               	movwf	spiInit@sType
   745                           
   746                           ;SPI.c: 13: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 14: {;SPI.c: 15:     TRISC5 = 0;
   747  0230  1683               	bsf	3,5	;RP0=1, select bank1
   748  0231  1303               	bcf	3,6	;RP1=0, select bank1
   749  0232  1287               	bcf	7,5	;volatile
   750                           
   751                           ;SPI.c: 16:     if(sType & 0b00000100)
   752  0233  1283               	bcf	3,5	;RP0=0, select bank0
   753  0234  1303               	bcf	3,6	;RP1=0, select bank0
   754  0235  1D23               	btfss	spiInit@sType,2
   755  0236  2A3D               	goto	l1135
   756                           
   757                           ;SPI.c: 17:     {;SPI.c: 18:         SSPSTAT = sTransmitEdge;
   758  0237  0822               	movf	spiInit@sTransmitEdge,w
   759  0238  1683               	bsf	3,5	;RP0=1, select bank1
   760  0239  1303               	bcf	3,6	;RP1=0, select bank1
   761  023A  0094               	movwf	20	;volatile
   762                           
   763                           ;SPI.c: 19:         TRISC3 = 1;
   764  023B  1587               	bsf	7,3	;volatile
   765                           
   766                           ;SPI.c: 20:     }
   767  023C  2A43               	goto	l16
   768  023D                     l1135:	
   769                           
   770                           ;SPI.c: 22:     {;SPI.c: 23:         SSPSTAT = sDataSample | sTransmitEdge;
   771  023D  0820               	movf	spiInit@sDataSample,w
   772  023E  0422               	iorwf	spiInit@sTransmitEdge,w
   773  023F  1683               	bsf	3,5	;RP0=1, select bank1
   774  0240  1303               	bcf	3,6	;RP1=0, select bank1
   775  0241  0094               	movwf	20	;volatile
   776                           
   777                           ;SPI.c: 24:         TRISC3 = 0;
   778  0242  1187               	bcf	7,3	;volatile
   779  0243                     l16:	
   780                           ;SPI.c: 25:     }
   781                           
   782                           
   783                           ;SPI.c: 27:     SSPCON = sType | sClockIdle;
   784  0243  1283               	bcf	3,5	;RP0=0, select bank0
   785  0244  1303               	bcf	3,6	;RP1=0, select bank0
   786  0245  0823               	movf	spiInit@sType,w
   787  0246  0421               	iorwf	spiInit@sClockIdle,w
   788  0247  0094               	movwf	20	;volatile
   789  0248  0008               	return
   790  0249                     __end_of_spiInit:	
   791                           
   792                           	psect	text3
   793  002B                     __ptext3:	
   794 ;; *************** function _UART_Init *****************
   795 ;; Defined at:
   796 ;;		line 8 in file "./UART.h"
   797 ;; Parameters:    Size  Location     Type
   798 ;;  baudrate        4   15[BANK0 ] const long 
   799 ;; Auto vars:     Size  Location     Type
   800 ;;  x               2   31[BANK0 ] unsigned int 
   801 ;; Return value:  Size  Location     Type
   802 ;;                  1    wreg      unsigned char 
   803 ;; Registers used:
   804 ;;		wreg, status,2, status,0, pclath, cstack
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   810 ;;      Params:         0       4       0       0       0
   811 ;;      Locals:         0       2       0       0       0
   812 ;;      Temps:          0      12       0       0       0
   813 ;;      Totals:         0      18       0       0       0
   814 ;;Total ram usage:       18 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; Hardware stack levels required when called:    4
   817 ;; This function calls:
   818 ;;		___aldiv
   819 ;; This function is called by:
   820 ;;		_setup
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           
   825                           ;psect for function _UART_Init
   826  002B                     _UART_Init:	
   827                           
   828                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
   829                           
   830                           ;incstack = 0
   831                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
   832  002B  1283               	bcf	3,5	;RP0=0, select bank0
   833  002C  1303               	bcf	3,6	;RP1=0, select bank0
   834  002D  082F               	movf	UART_Init@baudrate,w
   835  002E  00B3               	movwf	??_UART_Init
   836  002F  0830               	movf	UART_Init@baudrate+1,w
   837  0030  00B4               	movwf	??_UART_Init+1
   838  0031  0831               	movf	UART_Init@baudrate+2,w
   839  0032  00B5               	movwf	??_UART_Init+2
   840  0033  0832               	movf	UART_Init@baudrate+3,w
   841  0034  00B6               	movwf	??_UART_Init+3
   842  0035  3006               	movlw	6
   843  0036                     u635:	
   844  0036  1003               	clrc
   845  0037  0DB3               	rlf	??_UART_Init,f
   846  0038  0DB4               	rlf	??_UART_Init+1,f
   847  0039  0DB5               	rlf	??_UART_Init+2,f
   848  003A  0DB6               	rlf	??_UART_Init+3,f
   849  003B  3EFF               	addlw	-1
   850  003C  1D03               	skipz
   851  003D  2836               	goto	u635
   852  003E  0836               	movf	??_UART_Init+3,w
   853  003F  00A3               	movwf	___aldiv@divisor+3
   854  0040  0835               	movf	??_UART_Init+2,w
   855  0041  00A2               	movwf	___aldiv@divisor+2
   856  0042  0834               	movf	??_UART_Init+1,w
   857  0043  00A1               	movwf	___aldiv@divisor+1
   858  0044  0833               	movf	??_UART_Init,w
   859  0045  00A0               	movwf	___aldiv@divisor
   860  0046  082F               	movf	UART_Init@baudrate,w
   861  0047  00B7               	movwf	??_UART_Init+4
   862  0048  0830               	movf	UART_Init@baudrate+1,w
   863  0049  00B8               	movwf	??_UART_Init+5
   864  004A  0831               	movf	UART_Init@baudrate+2,w
   865  004B  00B9               	movwf	??_UART_Init+6
   866  004C  0832               	movf	UART_Init@baudrate+3,w
   867  004D  00BA               	movwf	??_UART_Init+7
   868  004E  3006               	movlw	6
   869  004F                     u645:	
   870  004F  1003               	clrc
   871  0050  0DB7               	rlf	??_UART_Init+4,f
   872  0051  0DB8               	rlf	??_UART_Init+5,f
   873  0052  0DB9               	rlf	??_UART_Init+6,f
   874  0053  0DBA               	rlf	??_UART_Init+7,f
   875  0054  3EFF               	addlw	-1
   876  0055  1D03               	skipz
   877  0056  284F               	goto	u645
   878  0057  3000               	movlw	0
   879  0058  00BB               	movwf	??_UART_Init+8
   880  0059  3012               	movlw	18
   881  005A  00BC               	movwf	??_UART_Init+9
   882  005B  307A               	movlw	122
   883  005C  00BD               	movwf	??_UART_Init+10
   884  005D  3000               	movlw	0
   885  005E  00BE               	movwf	??_UART_Init+11
   886  005F  0837               	movf	??_UART_Init+4,w
   887  0060  02BB               	subwf	??_UART_Init+8,f
   888  0061  0838               	movf	??_UART_Init+5,w
   889  0062  1C03               	skipc
   890  0063  0F38               	incfsz	??_UART_Init+5,w
   891  0064  2866               	goto	u651
   892  0065  2867               	goto	u652
   893  0066                     u651:	
   894  0066  02BC               	subwf	??_UART_Init+9,f
   895  0067                     u652:	
   896  0067  0839               	movf	??_UART_Init+6,w
   897  0068  1C03               	skipc
   898  0069  0F39               	incfsz	??_UART_Init+6,w
   899  006A  286C               	goto	u653
   900  006B  286D               	goto	u654
   901  006C                     u653:	
   902  006C  02BD               	subwf	??_UART_Init+10,f
   903  006D                     u654:	
   904  006D  083A               	movf	??_UART_Init+7,w
   905  006E  1C03               	skipc
   906  006F  0F3A               	incfsz	??_UART_Init+7,w
   907  0070  2872               	goto	u655
   908  0071  2873               	goto	u656
   909  0072                     u655:	
   910  0072  02BE               	subwf	??_UART_Init+11,f
   911  0073                     u656:	
   912  0073  083E               	movf	??_UART_Init+11,w
   913  0074  00A7               	movwf	___aldiv@dividend+3
   914  0075  083D               	movf	??_UART_Init+10,w
   915  0076  00A6               	movwf	___aldiv@dividend+2
   916  0077  083C               	movf	??_UART_Init+9,w
   917  0078  00A5               	movwf	___aldiv@dividend+1
   918  0079  083B               	movf	??_UART_Init+8,w
   919  007A  00A4               	movwf	___aldiv@dividend
   920  007B  120A  118A  2104  120A  118A  	fcall	___aldiv
   921  0080  1283               	bcf	3,5	;RP0=0, select bank0
   922  0081  1303               	bcf	3,6	;RP1=0, select bank0
   923  0082  0821               	movf	?___aldiv+1,w
   924  0083  00C0               	movwf	UART_Init@x+1
   925  0084  0820               	movf	?___aldiv,w
   926  0085  00BF               	movwf	UART_Init@x
   927                           
   928                           ;./UART.h: 12:  if(x>255)
   929  0086  3001               	movlw	1
   930  0087  0240               	subwf	UART_Init@x+1,w
   931  0088  3000               	movlw	0
   932  0089  1903               	skipnz
   933  008A  023F               	subwf	UART_Init@x,w
   934  008B  1C03               	skipc
   935  008C  28E9               	goto	l1147
   936                           
   937                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
   938  008D  082F               	movf	UART_Init@baudrate,w
   939  008E  00B3               	movwf	??_UART_Init
   940  008F  0830               	movf	UART_Init@baudrate+1,w
   941  0090  00B4               	movwf	??_UART_Init+1
   942  0091  0831               	movf	UART_Init@baudrate+2,w
   943  0092  00B5               	movwf	??_UART_Init+2
   944  0093  0832               	movf	UART_Init@baudrate+3,w
   945  0094  00B6               	movwf	??_UART_Init+3
   946  0095  3004               	movlw	4
   947  0096                     u675:	
   948  0096  1003               	clrc
   949  0097  0DB3               	rlf	??_UART_Init,f
   950  0098  0DB4               	rlf	??_UART_Init+1,f
   951  0099  0DB5               	rlf	??_UART_Init+2,f
   952  009A  0DB6               	rlf	??_UART_Init+3,f
   953  009B  3EFF               	addlw	-1
   954  009C  1D03               	skipz
   955  009D  2896               	goto	u675
   956  009E  0836               	movf	??_UART_Init+3,w
   957  009F  00A3               	movwf	___aldiv@divisor+3
   958  00A0  0835               	movf	??_UART_Init+2,w
   959  00A1  00A2               	movwf	___aldiv@divisor+2
   960  00A2  0834               	movf	??_UART_Init+1,w
   961  00A3  00A1               	movwf	___aldiv@divisor+1
   962  00A4  0833               	movf	??_UART_Init,w
   963  00A5  00A0               	movwf	___aldiv@divisor
   964  00A6  082F               	movf	UART_Init@baudrate,w
   965  00A7  00B7               	movwf	??_UART_Init+4
   966  00A8  0830               	movf	UART_Init@baudrate+1,w
   967  00A9  00B8               	movwf	??_UART_Init+5
   968  00AA  0831               	movf	UART_Init@baudrate+2,w
   969  00AB  00B9               	movwf	??_UART_Init+6
   970  00AC  0832               	movf	UART_Init@baudrate+3,w
   971  00AD  00BA               	movwf	??_UART_Init+7
   972  00AE  3004               	movlw	4
   973  00AF                     u685:	
   974  00AF  1003               	clrc
   975  00B0  0DB7               	rlf	??_UART_Init+4,f
   976  00B1  0DB8               	rlf	??_UART_Init+5,f
   977  00B2  0DB9               	rlf	??_UART_Init+6,f
   978  00B3  0DBA               	rlf	??_UART_Init+7,f
   979  00B4  3EFF               	addlw	-1
   980  00B5  1D03               	skipz
   981  00B6  28AF               	goto	u685
   982  00B7  3000               	movlw	0
   983  00B8  00BB               	movwf	??_UART_Init+8
   984  00B9  3012               	movlw	18
   985  00BA  00BC               	movwf	??_UART_Init+9
   986  00BB  307A               	movlw	122
   987  00BC  00BD               	movwf	??_UART_Init+10
   988  00BD  3000               	movlw	0
   989  00BE  00BE               	movwf	??_UART_Init+11
   990  00BF  0837               	movf	??_UART_Init+4,w
   991  00C0  02BB               	subwf	??_UART_Init+8,f
   992  00C1  0838               	movf	??_UART_Init+5,w
   993  00C2  1C03               	skipc
   994  00C3  0F38               	incfsz	??_UART_Init+5,w
   995  00C4  28C6               	goto	u691
   996  00C5  28C7               	goto	u692
   997  00C6                     u691:	
   998  00C6  02BC               	subwf	??_UART_Init+9,f
   999  00C7                     u692:	
  1000  00C7  0839               	movf	??_UART_Init+6,w
  1001  00C8  1C03               	skipc
  1002  00C9  0F39               	incfsz	??_UART_Init+6,w
  1003  00CA  28CC               	goto	u693
  1004  00CB  28CD               	goto	u694
  1005  00CC                     u693:	
  1006  00CC  02BD               	subwf	??_UART_Init+10,f
  1007  00CD                     u694:	
  1008  00CD  083A               	movf	??_UART_Init+7,w
  1009  00CE  1C03               	skipc
  1010  00CF  0F3A               	incfsz	??_UART_Init+7,w
  1011  00D0  28D2               	goto	u695
  1012  00D1  28D3               	goto	u696
  1013  00D2                     u695:	
  1014  00D2  02BE               	subwf	??_UART_Init+11,f
  1015  00D3                     u696:	
  1016  00D3  083E               	movf	??_UART_Init+11,w
  1017  00D4  00A7               	movwf	___aldiv@dividend+3
  1018  00D5  083D               	movf	??_UART_Init+10,w
  1019  00D6  00A6               	movwf	___aldiv@dividend+2
  1020  00D7  083C               	movf	??_UART_Init+9,w
  1021  00D8  00A5               	movwf	___aldiv@dividend+1
  1022  00D9  083B               	movf	??_UART_Init+8,w
  1023  00DA  00A4               	movwf	___aldiv@dividend
  1024  00DB  120A  118A  2104  120A  118A  	fcall	___aldiv
  1025  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1026  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1027  00E2  0821               	movf	?___aldiv+1,w
  1028  00E3  00C0               	movwf	UART_Init@x+1
  1029  00E4  0820               	movf	?___aldiv,w
  1030  00E5  00BF               	movwf	UART_Init@x
  1031                           
  1032                           ;./UART.h: 15:   BRGH = 1;
  1033  00E6  1683               	bsf	3,5	;RP0=1, select bank1
  1034  00E7  1303               	bcf	3,6	;RP1=0, select bank1
  1035  00E8  1518               	bsf	24,2	;volatile
  1036  00E9                     l1147:	
  1037                           
  1038                           ;./UART.h: 17:  if(x<256)
  1039  00E9  3001               	movlw	1
  1040  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  1041  00EB  0240               	subwf	UART_Init@x+1,w
  1042  00EC  3000               	movlw	0
  1043  00ED  1903               	skipnz
  1044  00EE  023F               	subwf	UART_Init@x,w
  1045  00EF  1803               	skipnc
  1046  00F0  0008               	return
  1047                           
  1048                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  1049  00F1  083F               	movf	UART_Init@x,w
  1050  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  1051  00F3  1303               	bcf	3,6	;RP1=0, select bank1
  1052  00F4  0099               	movwf	25	;volatile
  1053                           
  1054                           ;./UART.h: 20:    SYNC = 0;
  1055  00F5  1218               	bcf	24,4	;volatile
  1056                           
  1057                           ;./UART.h: 21:    SPEN = 1;
  1058  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  1059  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  1060  00F8  1798               	bsf	24,7	;volatile
  1061                           
  1062                           ;./UART.h: 22:       TRISC7 = 1;
  1063  00F9  1683               	bsf	3,5	;RP0=1, select bank1
  1064  00FA  1303               	bcf	3,6	;RP1=0, select bank1
  1065  00FB  1787               	bsf	7,7	;volatile
  1066                           
  1067                           ;./UART.h: 23:       TRISC6 = 1;
  1068  00FC  1707               	bsf	7,6	;volatile
  1069                           
  1070                           ;./UART.h: 24:       CREN = 1;
  1071  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  1072  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  1073  00FF  1618               	bsf	24,4	;volatile
  1074                           
  1075                           ;./UART.h: 25:       TXEN = 1;
  1076  0100  1683               	bsf	3,5	;RP0=1, select bank1
  1077  0101  1303               	bcf	3,6	;RP1=0, select bank1
  1078  0102  1698               	bsf	24,5	;volatile
  1079  0103  0008               	return
  1080  0104                     __end_of_UART_Init:	
  1081                           
  1082                           	psect	text4
  1083  0104                     __ptext4:	
  1084 ;; *************** function ___aldiv *****************
  1085 ;; Defined at:
  1086 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  1087 ;; Parameters:    Size  Location     Type
  1088 ;;  divisor         4    0[BANK0 ] long 
  1089 ;;  dividend        4    4[BANK0 ] long 
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;  quotient        4   11[BANK0 ] long 
  1092 ;;  sign            1   10[BANK0 ] unsigned char 
  1093 ;;  counter         1    9[BANK0 ] unsigned char 
  1094 ;; Return value:  Size  Location     Type
  1095 ;;                  4    0[BANK0 ] long 
  1096 ;; Registers used:
  1097 ;;		wreg, status,2, status,0
  1098 ;; Tracked objects:
  1099 ;;		On entry : 0/0
  1100 ;;		On exit  : 0/0
  1101 ;;		Unchanged: 0/0
  1102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1103 ;;      Params:         0       8       0       0       0
  1104 ;;      Locals:         0       6       0       0       0
  1105 ;;      Temps:          0       1       0       0       0
  1106 ;;      Totals:         0      15       0       0       0
  1107 ;;Total ram usage:       15 bytes
  1108 ;; Hardware stack levels used:    1
  1109 ;; Hardware stack levels required when called:    3
  1110 ;; This function calls:
  1111 ;;		Nothing
  1112 ;; This function is called by:
  1113 ;;		_UART_Init
  1114 ;; This function uses a non-reentrant model
  1115 ;;
  1116                           
  1117                           
  1118                           ;psect for function ___aldiv
  1119  0104                     ___aldiv:	
  1120                           
  1121                           ;incstack = 0
  1122                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1123  0104  1283               	bcf	3,5	;RP0=0, select bank0
  1124  0105  1303               	bcf	3,6	;RP1=0, select bank0
  1125  0106  01AA               	clrf	___aldiv@sign
  1126  0107  1FA3               	btfss	___aldiv@divisor+3,7
  1127  0108  2916               	goto	l330
  1128  0109  09A0               	comf	___aldiv@divisor,f
  1129  010A  09A1               	comf	___aldiv@divisor+1,f
  1130  010B  09A2               	comf	___aldiv@divisor+2,f
  1131  010C  09A3               	comf	___aldiv@divisor+3,f
  1132  010D  0AA0               	incf	___aldiv@divisor,f
  1133  010E  1903               	skipnz
  1134  010F  0AA1               	incf	___aldiv@divisor+1,f
  1135  0110  1903               	skipnz
  1136  0111  0AA2               	incf	___aldiv@divisor+2,f
  1137  0112  1903               	skipnz
  1138  0113  0AA3               	incf	___aldiv@divisor+3,f
  1139  0114  01AA               	clrf	___aldiv@sign
  1140  0115  0AAA               	incf	___aldiv@sign,f
  1141  0116                     l330:	
  1142  0116  1FA7               	btfss	___aldiv@dividend+3,7
  1143  0117  2927               	goto	l1099
  1144  0118  09A4               	comf	___aldiv@dividend,f
  1145  0119  09A5               	comf	___aldiv@dividend+1,f
  1146  011A  09A6               	comf	___aldiv@dividend+2,f
  1147  011B  09A7               	comf	___aldiv@dividend+3,f
  1148  011C  0AA4               	incf	___aldiv@dividend,f
  1149  011D  1903               	skipnz
  1150  011E  0AA5               	incf	___aldiv@dividend+1,f
  1151  011F  1903               	skipnz
  1152  0120  0AA6               	incf	___aldiv@dividend+2,f
  1153  0121  1903               	skipnz
  1154  0122  0AA7               	incf	___aldiv@dividend+3,f
  1155  0123  3001               	movlw	1
  1156  0124  00A8               	movwf	??___aldiv
  1157  0125  0828               	movf	??___aldiv,w
  1158  0126  06AA               	xorwf	___aldiv@sign,f
  1159  0127                     l1099:	
  1160  0127  3000               	movlw	0
  1161  0128  00AE               	movwf	___aldiv@quotient+3
  1162  0129  3000               	movlw	0
  1163  012A  00AD               	movwf	___aldiv@quotient+2
  1164  012B  3000               	movlw	0
  1165  012C  00AC               	movwf	___aldiv@quotient+1
  1166  012D  3000               	movlw	0
  1167  012E  00AB               	movwf	___aldiv@quotient
  1168  012F  0823               	movf	___aldiv@divisor+3,w
  1169  0130  0422               	iorwf	___aldiv@divisor+2,w
  1170  0131  0421               	iorwf	___aldiv@divisor+1,w
  1171  0132  0420               	iorwf	___aldiv@divisor,w
  1172  0133  1903               	skipnz
  1173  0134  297C               	goto	l1121
  1174  0135  01A9               	clrf	___aldiv@counter
  1175  0136  0AA9               	incf	___aldiv@counter,f
  1176  0137                     l1107:	
  1177  0137  1BA3               	btfsc	___aldiv@divisor+3,7
  1178  0138  2947               	goto	l1109
  1179  0139  3001               	movlw	1
  1180  013A  00A8               	movwf	??___aldiv
  1181  013B                     u555:	
  1182  013B  1003               	clrc
  1183  013C  0DA0               	rlf	___aldiv@divisor,f
  1184  013D  0DA1               	rlf	___aldiv@divisor+1,f
  1185  013E  0DA2               	rlf	___aldiv@divisor+2,f
  1186  013F  0DA3               	rlf	___aldiv@divisor+3,f
  1187  0140  0BA8               	decfsz	??___aldiv,f
  1188  0141  293B               	goto	u555
  1189  0142  3001               	movlw	1
  1190  0143  00A8               	movwf	??___aldiv
  1191  0144  0828               	movf	??___aldiv,w
  1192  0145  07A9               	addwf	___aldiv@counter,f
  1193  0146  2937               	goto	l1107
  1194  0147                     l1109:	
  1195  0147  3001               	movlw	1
  1196  0148  00A8               	movwf	??___aldiv
  1197  0149                     u575:	
  1198  0149  1003               	clrc
  1199  014A  0DAB               	rlf	___aldiv@quotient,f
  1200  014B  0DAC               	rlf	___aldiv@quotient+1,f
  1201  014C  0DAD               	rlf	___aldiv@quotient+2,f
  1202  014D  0DAE               	rlf	___aldiv@quotient+3,f
  1203  014E  0BA8               	decfsz	??___aldiv,f
  1204  014F  2949               	goto	u575
  1205  0150  0823               	movf	___aldiv@divisor+3,w
  1206  0151  0227               	subwf	___aldiv@dividend+3,w
  1207  0152  1D03               	skipz
  1208  0153  295E               	goto	u585
  1209  0154  0822               	movf	___aldiv@divisor+2,w
  1210  0155  0226               	subwf	___aldiv@dividend+2,w
  1211  0156  1D03               	skipz
  1212  0157  295E               	goto	u585
  1213  0158  0821               	movf	___aldiv@divisor+1,w
  1214  0159  0225               	subwf	___aldiv@dividend+1,w
  1215  015A  1D03               	skipz
  1216  015B  295E               	goto	u585
  1217  015C  0820               	movf	___aldiv@divisor,w
  1218  015D  0224               	subwf	___aldiv@dividend,w
  1219  015E                     u585:	
  1220  015E  1C03               	skipc
  1221  015F  296F               	goto	l1117
  1222  0160  0820               	movf	___aldiv@divisor,w
  1223  0161  02A4               	subwf	___aldiv@dividend,f
  1224  0162  0821               	movf	___aldiv@divisor+1,w
  1225  0163  1C03               	skipc
  1226  0164  0F21               	incfsz	___aldiv@divisor+1,w
  1227  0165  02A5               	subwf	___aldiv@dividend+1,f
  1228  0166  0822               	movf	___aldiv@divisor+2,w
  1229  0167  1C03               	skipc
  1230  0168  0F22               	incfsz	___aldiv@divisor+2,w
  1231  0169  02A6               	subwf	___aldiv@dividend+2,f
  1232  016A  0823               	movf	___aldiv@divisor+3,w
  1233  016B  1C03               	skipc
  1234  016C  0F23               	incfsz	___aldiv@divisor+3,w
  1235  016D  02A7               	subwf	___aldiv@dividend+3,f
  1236  016E  142B               	bsf	___aldiv@quotient,0
  1237  016F                     l1117:	
  1238  016F  3001               	movlw	1
  1239  0170                     u595:	
  1240  0170  1003               	clrc
  1241  0171  0CA3               	rrf	___aldiv@divisor+3,f
  1242  0172  0CA2               	rrf	___aldiv@divisor+2,f
  1243  0173  0CA1               	rrf	___aldiv@divisor+1,f
  1244  0174  0CA0               	rrf	___aldiv@divisor,f
  1245  0175  3EFF               	addlw	-1
  1246  0176  1D03               	skipz
  1247  0177  2970               	goto	u595
  1248  0178  3001               	movlw	1
  1249  0179  02A9               	subwf	___aldiv@counter,f
  1250  017A  1D03               	btfss	3,2
  1251  017B  2947               	goto	l1109
  1252  017C                     l1121:	
  1253  017C  082A               	movf	___aldiv@sign,w
  1254  017D  1903               	btfsc	3,2
  1255  017E  298A               	goto	l1125
  1256  017F  09AB               	comf	___aldiv@quotient,f
  1257  0180  09AC               	comf	___aldiv@quotient+1,f
  1258  0181  09AD               	comf	___aldiv@quotient+2,f
  1259  0182  09AE               	comf	___aldiv@quotient+3,f
  1260  0183  0AAB               	incf	___aldiv@quotient,f
  1261  0184  1903               	skipnz
  1262  0185  0AAC               	incf	___aldiv@quotient+1,f
  1263  0186  1903               	skipnz
  1264  0187  0AAD               	incf	___aldiv@quotient+2,f
  1265  0188  1903               	skipnz
  1266  0189  0AAE               	incf	___aldiv@quotient+3,f
  1267  018A                     l1125:	
  1268  018A  082E               	movf	___aldiv@quotient+3,w
  1269  018B  00A3               	movwf	?___aldiv+3
  1270  018C  082D               	movf	___aldiv@quotient+2,w
  1271  018D  00A2               	movwf	?___aldiv+2
  1272  018E  082C               	movf	___aldiv@quotient+1,w
  1273  018F  00A1               	movwf	?___aldiv+1
  1274  0190  082B               	movf	___aldiv@quotient,w
  1275  0191  00A0               	movwf	?___aldiv
  1276  0192  0008               	return
  1277  0193                     __end_of___aldiv:	
  1278                           
  1279                           	psect	text5
  1280  0193                     __ptext5:	
  1281 ;; *************** function _isr *****************
  1282 ;; Defined at:
  1283 ;;		line 34 in file "mainTraductor.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;		None
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;		None
  1288 ;; Return value:  Size  Location     Type
  1289 ;;                  1    wreg      void 
  1290 ;; Registers used:
  1291 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1297 ;;      Params:         0       0       0       0       0
  1298 ;;      Locals:         0       0       0       0       0
  1299 ;;      Temps:          4       0       0       0       0
  1300 ;;      Totals:         4       0       0       0       0
  1301 ;;Total ram usage:        4 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; Hardware stack levels required when called:    2
  1304 ;; This function calls:
  1305 ;;		_UART_Read
  1306 ;;		_spiRead
  1307 ;;		_spiWrite
  1308 ;; This function is called by:
  1309 ;;		Interrupt level 1
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313                           
  1314                           ;psect for function _isr
  1315  0193                     _isr:	
  1316                           
  1317                           ;mainTraductor.c: 35:     if (PIR1bits.RCIF == 1){
  1318  0193  1283               	bcf	3,5	;RP0=0, select bank0
  1319  0194  1303               	bcf	3,6	;RP1=0, select bank0
  1320  0195  1E8C               	btfss	12,5	;volatile
  1321  0196  29B5               	goto	i1l162
  1322                           
  1323                           ;mainTraductor.c: 36:         info[i] = UART_Read();
  1324  0197  120A  118A  2263  120A  118A  	fcall	_UART_Read
  1325  019C  00F6               	movwf	??_isr
  1326  019D  0872               	movf	_i,w
  1327  019E  3E41               	addlw	(low (_info| 0))& (0+255)
  1328  019F  0084               	movwf	4
  1329  01A0  0876               	movf	??_isr,w
  1330  01A1  1383               	bcf	3,7	;select IRP bank0
  1331  01A2  0080               	movwf	0
  1332                           
  1333                           ;mainTraductor.c: 37:         i++;
  1334  01A3  3001               	movlw	1
  1335  01A4  00F6               	movwf	??_isr
  1336  01A5  0876               	movf	??_isr,w
  1337  01A6  07F2               	addwf	_i,f
  1338                           
  1339                           ;mainTraductor.c: 38:         RB0 = 1;
  1340  01A7  1283               	bcf	3,5	;RP0=0, select bank0
  1341  01A8  1303               	bcf	3,6	;RP1=0, select bank0
  1342  01A9  1406               	bsf	6,0	;volatile
  1343                           
  1344                           ;mainTraductor.c: 39:         if (info[i-1] == 'A'){
  1345  01AA  0872               	movf	_i,w
  1346  01AB  3E40               	addlw	(low ((_info| 0+255)))& (0+255)
  1347  01AC  0084               	movwf	4
  1348  01AD  3041               	movlw	65
  1349  01AE  0600               	xorwf	0,w
  1350  01AF  1D03               	btfss	3,2
  1351  01B0  29E0               	goto	i1l167
  1352                           
  1353                           ;mainTraductor.c: 40:             done = 1;
  1354  01B1  01F1               	clrf	_done
  1355  01B2  0AF1               	incf	_done,f
  1356                           
  1357                           ;mainTraductor.c: 41:             i = 0;
  1358  01B3  01F2               	clrf	_i
  1359  01B4  29E0               	goto	i1l167
  1360  01B5                     i1l162:	
  1361  01B5  1D8C               	btfss	12,3	;volatile
  1362  01B6  29E0               	goto	i1l167
  1363                           
  1364                           ;mainTraductor.c: 44:         val = spiRead();
  1365  01B7  120A  118A  2256  120A  118A  	fcall	_spiRead
  1366  01BC  00F6               	movwf	??_isr
  1367  01BD  0876               	movf	??_isr,w
  1368  01BE  00F4               	movwf	_val
  1369                           
  1370                           ;mainTraductor.c: 45:         spiWrite(info[j]);
  1371  01BF  0870               	movf	_j,w
  1372  01C0  3E41               	addlw	(low (_info| 0))& (0+255)
  1373  01C1  0084               	movwf	4
  1374  01C2  1383               	bcf	3,7	;select IRP bank0
  1375  01C3  0800               	movf	0,w
  1376  01C4  120A  118A  225D  120A  118A  	fcall	_spiWrite
  1377                           
  1378                           ;mainTraductor.c: 46:         j++;
  1379  01C9  3001               	movlw	1
  1380  01CA  00F6               	movwf	??_isr
  1381  01CB  0876               	movf	??_isr,w
  1382  01CC  07F0               	addwf	_j,f
  1383                           
  1384                           ;mainTraductor.c: 48:         if (j == 15){
  1385  01CD  300F               	movlw	15
  1386  01CE  0670               	xorwf	_j,w
  1387  01CF  1903               	btfsc	3,2
  1388                           
  1389                           ;mainTraductor.c: 49:             j = 0;
  1390  01D0  01F0               	clrf	_j
  1391                           
  1392                           ;mainTraductor.c: 51:         PORTDbits.RD0 = ~PORTDbits.RD0;
  1393  01D1  1003               	clrc
  1394  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  1395  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  1396  01D4  1C08               	btfss	8,0	;volatile
  1397  01D5  1403               	setc
  1398  01D6  1C03               	btfss	3,0
  1399  01D7  29DC               	goto	u29_20
  1400  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  1401  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  1402  01DA  1408               	bsf	8,0	;volatile
  1403  01DB  29DF               	goto	i1l971
  1404  01DC                     u29_20:	
  1405  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  1406  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  1407  01DE  1008               	bcf	8,0	;volatile
  1408  01DF                     i1l971:	
  1409                           
  1410                           ;mainTraductor.c: 52:         SSPIF = 0;
  1411  01DF  118C               	bcf	12,3	;volatile
  1412  01E0                     i1l167:	
  1413  01E0  0879               	movf	??_isr+3,w
  1414  01E1  008A               	movwf	10
  1415  01E2  0878               	movf	??_isr+2,w
  1416  01E3  0084               	movwf	4
  1417  01E4  0E77               	swapf	(??_isr+1)^(0+4294967168),w
  1418  01E5  0083               	movwf	3
  1419  01E6  0EFE               	swapf	126,f
  1420  01E7  0E7E               	swapf	126,w
  1421  01E8  0009               	retfie
  1422  01E9                     __end_of_isr:	
  1423                           
  1424                           	psect	intentry
  1425  0004                     __pintentry:	
  1426                           ;incstack = 0
  1427                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1428                           
  1429  0004                     interrupt_function:	
  1430  007E                     saved_w	set	btemp
  1431  0004  00FE               	movwf	btemp
  1432  0005  0E03               	swapf	3,w
  1433  0006  00F7               	movwf	??_isr+1
  1434  0007  0804               	movf	4,w
  1435  0008  00F8               	movwf	??_isr+2
  1436  0009  080A               	movf	10,w
  1437  000A  00F9               	movwf	??_isr+3
  1438  000B  120A  118A  2993   	ljmp	_isr
  1439                           
  1440                           	psect	text6
  1441  025D                     __ptext6:	
  1442 ;; *************** function _spiWrite *****************
  1443 ;; Defined at:
  1444 ;;		line 35 in file "SPI.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;  dat             1    wreg     unsigned char 
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;  dat             1    0[COMMON] unsigned char 
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  1    wreg      void 
  1451 ;; Registers used:
  1452 ;;		wreg
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1458 ;;      Params:         0       0       0       0       0
  1459 ;;      Locals:         1       0       0       0       0
  1460 ;;      Temps:          0       0       0       0       0
  1461 ;;      Totals:         1       0       0       0       0
  1462 ;;Total ram usage:        1 bytes
  1463 ;; Hardware stack levels used:    1
  1464 ;; This function calls:
  1465 ;;		Nothing
  1466 ;; This function is called by:
  1467 ;;		_isr
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           
  1472                           ;psect for function _spiWrite
  1473  025D                     _spiWrite:	
  1474                           
  1475                           ;incstack = 0
  1476                           ; Regs used in _spiWrite: [wreg]
  1477                           ;spiWrite@dat stored from wreg
  1478  025D  00F5               	movwf	spiWrite@dat
  1479                           
  1480                           ;SPI.c: 35: void spiWrite(char dat);SPI.c: 36: {;SPI.c: 37:     SSPBUF = dat;
  1481  025E  0875               	movf	spiWrite@dat,w
  1482  025F  1283               	bcf	3,5	;RP0=0, select bank0
  1483  0260  1303               	bcf	3,6	;RP1=0, select bank0
  1484  0261  0093               	movwf	19	;volatile
  1485  0262  0008               	return
  1486  0263                     __end_of_spiWrite:	
  1487                           
  1488                           	psect	text7
  1489  0256                     __ptext7:	
  1490 ;; *************** function _spiRead *****************
  1491 ;; Defined at:
  1492 ;;		line 48 in file "SPI.c"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;		None
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;		None
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  1    wreg      unsigned char 
  1499 ;; Registers used:
  1500 ;;		wreg, status,2, status,0, pclath, cstack
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1506 ;;      Params:         0       0       0       0       0
  1507 ;;      Locals:         0       0       0       0       0
  1508 ;;      Temps:          0       0       0       0       0
  1509 ;;      Totals:         0       0       0       0       0
  1510 ;;Total ram usage:        0 bytes
  1511 ;; Hardware stack levels used:    1
  1512 ;; Hardware stack levels required when called:    1
  1513 ;; This function calls:
  1514 ;;		_spiReceiveWait
  1515 ;; This function is called by:
  1516 ;;		_isr
  1517 ;; This function uses a non-reentrant model
  1518 ;;
  1519                           
  1520                           
  1521                           ;psect for function _spiRead
  1522  0256                     _spiRead:	
  1523                           
  1524                           ;SPI.c: 50:     spiReceiveWait();
  1525                           
  1526                           ;incstack = 0
  1527                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1528  0256  120A  118A  2269   	fcall	_spiReceiveWait
  1529                           
  1530                           ;SPI.c: 51:     return(SSPBUF);
  1531  0259  1283               	bcf	3,5	;RP0=0, select bank0
  1532  025A  1303               	bcf	3,6	;RP1=0, select bank0
  1533  025B  0813               	movf	19,w	;volatile
  1534  025C  0008               	return
  1535  025D                     __end_of_spiRead:	
  1536                           
  1537                           	psect	text8
  1538  0269                     __ptext8:	
  1539 ;; *************** function _spiReceiveWait *****************
  1540 ;; Defined at:
  1541 ;;		line 30 in file "SPI.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;		None
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;		None
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      void 
  1548 ;; Registers used:
  1549 ;;		None
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1555 ;;      Params:         0       0       0       0       0
  1556 ;;      Locals:         0       0       0       0       0
  1557 ;;      Temps:          0       0       0       0       0
  1558 ;;      Totals:         0       0       0       0       0
  1559 ;;Total ram usage:        0 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; This function calls:
  1562 ;;		Nothing
  1563 ;; This function is called by:
  1564 ;;		_spiRead
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           
  1569                           ;psect for function _spiReceiveWait
  1570  0269                     _spiReceiveWait:	
  1571  0269                     i1l20:	
  1572                           ;SPI.c: 32:     while ( !SSPSTATbits.BF );
  1573                           
  1574                           ;incstack = 0
  1575                           ; Regs used in _spiReceiveWait: []
  1576                           
  1577  0269  1683               	bsf	3,5	;RP0=1, select bank1
  1578  026A  1303               	bcf	3,6	;RP1=0, select bank1
  1579  026B  1814               	btfsc	20,0	;volatile
  1580  026C  0008               	return
  1581  026D  2A69               	goto	i1l20
  1582  026E                     __end_of_spiReceiveWait:	
  1583                           
  1584                           	psect	text9
  1585  0263                     __ptext9:	
  1586 ;; *************** function _UART_Read *****************
  1587 ;; Defined at:
  1588 ;;		line 41 in file "./UART.h"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;		None
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;		None
  1593 ;; Return value:  Size  Location     Type
  1594 ;;                  1    wreg      unsigned char 
  1595 ;; Registers used:
  1596 ;;		wreg
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1602 ;;      Params:         0       0       0       0       0
  1603 ;;      Locals:         0       0       0       0       0
  1604 ;;      Temps:          0       0       0       0       0
  1605 ;;      Totals:         0       0       0       0       0
  1606 ;;Total ram usage:        0 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; This function calls:
  1609 ;;		Nothing
  1610 ;; This function is called by:
  1611 ;;		_isr
  1612 ;;		_UART_Read_Text
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           
  1617                           ;psect for function _UART_Read
  1618  0263                     _UART_Read:	
  1619  0263                     i1l124:	
  1620                           ;./UART.h: 43:   while(!RCIF);
  1621                           
  1622                           ;incstack = 0
  1623                           ; Regs used in _UART_Read: [wreg]
  1624                           
  1625  0263  1283               	bcf	3,5	;RP0=0, select bank0
  1626  0264  1303               	bcf	3,6	;RP1=0, select bank0
  1627  0265  1E8C               	btfss	12,5	;volatile
  1628  0266  2A63               	goto	i1l124
  1629                           
  1630                           ;./UART.h: 44:   return RCREG;
  1631  0267  081A               	movf	26,w	;volatile
  1632  0268  0008               	return
  1633  0269                     __end_of_UART_Read:	
  1634  007E                     btemp	set	126	;btemp
  1635  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     33      48
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_spiWrite

Critical Paths under _main in BANK0

    _setup->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1574
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1574
                          _UART_Init
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     456
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4    1118
                                             15 BANK0     18    14      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     805
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0      15
                                              1 COMMON     4     4      0
                          _UART_Read
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (5) _spiWrite                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (6) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _UART_Init
       ___aldiv
     _spiInit

 _isr (ROOT)
   _UART_Read
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     21      30       5       60.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3A      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Mar 07 12:20:45 2019

                       _i 0072                         _j 0070               __CFG_CP$OFF 0000  
             _SSPSTATbits 0094                        l16 0243                       l330 0116  
                     _RB0 0030              __CFG_CPD$OFF 0000                       u555 013B  
                     u651 0066                       u635 0036                       u652 0067  
                     u653 006C                       u645 004F                       u654 006D  
                     u575 0149                       u655 0072                       u656 0073  
                     u585 015E                       u595 0170                       u691 00C6  
                     u675 0096                       u692 00C7                       u693 00CC  
                     u685 00AF                       u694 00CD                       u695 00D2  
                     u696 00D3                       _isr 0193                       _val 0074  
                     fsr0 0004                       indf 0000              __CFG_LVP$OFF 0000  
                    l1121 017C                      l1107 0137                      l1125 018A  
                    l1117 016F                      l1109 0147                      l1135 023D  
                    l1147 00E9                      l1191 024E                      l1099 0127  
                    ?_isr 0075                      _BRGH 04C2                      _CREN 00C4  
                    i1l20 0269                      _RCIF 0065                      _SPEN 00C7  
                    _TRMT 04C1                      _TXEN 04C5                      _SYNC 04C4  
            __CFG_WRT$OFF 0000                      _done 0071                      _main 0249  
                    _info 0041                      btemp 007E                      start 000E  
           __CFG_IESO$OFF 0000             __CFG_MCLRE$ON 0000                     ??_isr 0076  
         __end_of___aldiv 0193                     ?_main 0075             __CFG_WDTE$OFF 0000  
                   _ANSEL 0188                     i1l124 0263                     i1l162 01B5  
                   i1l167 01E0                     i1l971 01DF                     _RCREG 001A  
                   _SPBRG 0099                     _PORTB 0006                     _PORTD 0008  
                   u29_20 01DC                     _TRISB 0086                     _TRISD 0088  
                   _SSPIF 0063                     _TXREG 0019            __CFG_FCMEN$OFF 0000  
      __size_of_UART_Init 00D9        __size_of_UART_Read 0006                     _setup 01E9  
          __CFG_BOREN$OFF 0000                     pclath 000A           __end_of_spiInit 0249  
         __end_of_spiRead 025D                     status 0003                     wtemp0 007E  
         __initialization 0011              __end_of_main 0256                    ??_main 0041  
                  ?_setup 0075                    _ANSELH 0189                    _TRISC3 043B  
                  _TRISC5 043D                    _TRISC6 043E                    _TRISC7 043F  
                  _SSPCON 0014                    _SSPBUF 0013            __CFG_PWRTE$OFF 0000  
       __end_of_UART_Init 0104         __end_of_UART_Read 0269                 ??___aldiv 0028  
                  saved_w 007E          __end_of_spiWrite 0263                 ??_spiInit 0023  
               ??_spiRead 0075   __end_of__initialization 0027            __pcstackCOMMON 0075  
           __end_of_setup 022D                   ??_setup 0041                __pbssBANK0 0041  
              __pmaintext 0249                __pintentry 0004   __size_of_spiReceiveWait 0005  
                 _SSPSTAT 0094                 ?_spiWrite 0075                   ___aldiv 0104  
                 __ptext1 01E9                   __ptext2 022D                   __ptext3 002B  
                 __ptext4 0104                   __ptext5 0193                   __ptext6 025D  
                 __ptext7 0256                   __ptext8 0269                   __ptext9 0263  
            __size_of_isr 0056          ___aldiv@dividend 0024                   _spiInit 022D  
                 _spiRead 0256      end_of_initialization 0027          ___aldiv@quotient 002B  
              ??_spiWrite 0075                 _UART_Init 002B                 _UART_Read 0263  
               _PORTDbits 0008                 _TRISAbits 0085                 _TRISCbits 0087  
             spiWrite@dat 0075            _spiReceiveWait 0269                ?_UART_Init 002F  
              ?_UART_Read 0075       start_initialization 0011               __end_of_isr 01E9  
__CFG_FOSC$INTRC_NOCLKOUT 0000    __end_of_spiReceiveWait 026E               __pbssCOMMON 0070  
               ___latbits 0002             __pcstackBANK0 0020           ?_spiReceiveWait 0075  
                ?___aldiv 0020               ??_UART_Init 0033               ??_UART_Read 0075  
       __size_of_spiWrite 0006                  ?_spiInit 0020                  ?_spiRead 0075  
              UART_Init@x 003F            __size_of_setup 0044           ___aldiv@divisor 0020  
    spiInit@sTransmitEdge 0022         interrupt_function 0004           ___aldiv@counter 0029  
                _PIE1bits 008C        spiInit@sDataSample 0020                  _PIR1bits 000C  
       UART_Init@baudrate 002F          __size_of___aldiv 008F          __size_of_spiInit 001C  
        __size_of_spiRead 0007         __CFG_BOR4V$BOR40V 0000             __size_of_main 000D  
                _received 0073                  _spiWrite 025D              spiInit@sType 0023  
       spiInit@sClockIdle 0021                _INTCONbits 000B                  intlevel1 0000  
        ??_spiReceiveWait 0075                _OSCCONbits 008F              ___aldiv@sign 002A  



Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Mar 07 16:10:47 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.05
    24                           ; Generated 20/12/2018 GMT
    25                           ; 
    26                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F887 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  008F                     	;# 
   102  0090                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0093                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0095                     	;# 
   110  0096                     	;# 
   111  0097                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009E                     	;# 
   119  009F                     	;# 
   120  0105                     	;# 
   121  0107                     	;# 
   122  0108                     	;# 
   123  0109                     	;# 
   124  010C                     	;# 
   125  010C                     	;# 
   126  010D                     	;# 
   127  010E                     	;# 
   128  010F                     	;# 
   129  0185                     	;# 
   130  0187                     	;# 
   131  0188                     	;# 
   132  0189                     	;# 
   133  018C                     	;# 
   134  018D                     	;# 
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  0007                     	;# 
   143  0008                     	;# 
   144  0009                     	;# 
   145  000A                     	;# 
   146  000B                     	;# 
   147  000C                     	;# 
   148  000D                     	;# 
   149  000E                     	;# 
   150  000E                     	;# 
   151  000F                     	;# 
   152  0010                     	;# 
   153  0011                     	;# 
   154  0012                     	;# 
   155  0013                     	;# 
   156  0014                     	;# 
   157  0015                     	;# 
   158  0015                     	;# 
   159  0016                     	;# 
   160  0017                     	;# 
   161  0018                     	;# 
   162  0019                     	;# 
   163  001A                     	;# 
   164  001B                     	;# 
   165  001B                     	;# 
   166  001C                     	;# 
   167  001D                     	;# 
   168  001E                     	;# 
   169  001F                     	;# 
   170  0081                     	;# 
   171  0085                     	;# 
   172  0086                     	;# 
   173  0087                     	;# 
   174  0088                     	;# 
   175  0089                     	;# 
   176  008C                     	;# 
   177  008D                     	;# 
   178  008E                     	;# 
   179  008F                     	;# 
   180  0090                     	;# 
   181  0091                     	;# 
   182  0092                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0098                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  009F                     	;# 
   198  0105                     	;# 
   199  0107                     	;# 
   200  0108                     	;# 
   201  0109                     	;# 
   202  010C                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  0185                     	;# 
   208  0187                     	;# 
   209  0188                     	;# 
   210  0189                     	;# 
   211  018C                     	;# 
   212  018D                     	;# 
   213  0000                     	;# 
   214  0001                     	;# 
   215  0002                     	;# 
   216  0003                     	;# 
   217  0004                     	;# 
   218  0005                     	;# 
   219  0006                     	;# 
   220  0007                     	;# 
   221  0008                     	;# 
   222  0009                     	;# 
   223  000A                     	;# 
   224  000B                     	;# 
   225  000C                     	;# 
   226  000D                     	;# 
   227  000E                     	;# 
   228  000E                     	;# 
   229  000F                     	;# 
   230  0010                     	;# 
   231  0011                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0014                     	;# 
   235  0015                     	;# 
   236  0015                     	;# 
   237  0016                     	;# 
   238  0017                     	;# 
   239  0018                     	;# 
   240  0019                     	;# 
   241  001A                     	;# 
   242  001B                     	;# 
   243  001B                     	;# 
   244  001C                     	;# 
   245  001D                     	;# 
   246  001E                     	;# 
   247  001F                     	;# 
   248  0081                     	;# 
   249  0085                     	;# 
   250  0086                     	;# 
   251  0087                     	;# 
   252  0088                     	;# 
   253  0089                     	;# 
   254  008C                     	;# 
   255  008D                     	;# 
   256  008E                     	;# 
   257  008F                     	;# 
   258  0090                     	;# 
   259  0091                     	;# 
   260  0092                     	;# 
   261  0093                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0094                     	;# 
   265  0095                     	;# 
   266  0096                     	;# 
   267  0097                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009A                     	;# 
   271  009B                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  009F                     	;# 
   276  0105                     	;# 
   277  0107                     	;# 
   278  0108                     	;# 
   279  0109                     	;# 
   280  010C                     	;# 
   281  010C                     	;# 
   282  010D                     	;# 
   283  010E                     	;# 
   284  010F                     	;# 
   285  0185                     	;# 
   286  0187                     	;# 
   287  0188                     	;# 
   288  0189                     	;# 
   289  018C                     	;# 
   290  018D                     	;# 
   291  000B                     _INTCONbits	set	11
   292  0008                     _PORTD	set	8
   293  0006                     _PORTB	set	6
   294  0008                     _PORTDbits	set	8
   295  0019                     _TXREG	set	25
   296  000C                     _PIR1bits	set	12
   297  001A                     _RCREG	set	26
   298  0013                     _SSPBUF	set	19
   299  0014                     _SSPCON	set	20
   300  0063                     _SSPIF	set	99
   301  0030                     _RB0	set	48
   302  0065                     _RCIF	set	101
   303  00C4                     _CREN	set	196
   304  00C7                     _SPEN	set	199
   305  008C                     _PIE1bits	set	140
   306  0087                     _TRISCbits	set	135
   307  0085                     _TRISAbits	set	133
   308  0088                     _TRISD	set	136
   309  0086                     _TRISB	set	134
   310  0099                     _SPBRG	set	153
   311  008F                     _OSCCONbits	set	143
   312  0094                     _SSPSTATbits	set	148
   313  0094                     _SSPSTAT	set	148
   314  04C1                     _TRMT	set	1217
   315  04C5                     _TXEN	set	1221
   316  043E                     _TRISC6	set	1086
   317  043F                     _TRISC7	set	1087
   318  04C4                     _SYNC	set	1220
   319  04C2                     _BRGH	set	1218
   320  043B                     _TRISC3	set	1083
   321  043D                     _TRISC5	set	1085
   322  0188                     _ANSEL	set	392
   323  0189                     _ANSELH	set	393
   324                           
   325                           ; #config settings
   326  0000                     
   327                           	psect	cinit
   328  0011                     start_initialization:	
   329  0011                     __initialization:	
   330                           
   331                           ; Clear objects allocated to COMMON
   332  0011  01F0               	clrf	__pbssCOMMON& (0+127)
   333  0012  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   334  0013  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   335  0014  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   336  0015  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   337                           
   338                           ; Clear objects allocated to BANK0
   339  0016  1283               	bcf	3,5	;RP0=0, select bank0
   340  0017  1303               	bcf	3,6	;RP1=0, select bank0
   341  0018  01C1               	clrf	__pbssBANK0& (0+127)
   342  0019  01C2               	clrf	(__pbssBANK0+1)& (0+127)
   343  001A  01C3               	clrf	(__pbssBANK0+2)& (0+127)
   344  001B  01C4               	clrf	(__pbssBANK0+3)& (0+127)
   345  001C  01C5               	clrf	(__pbssBANK0+4)& (0+127)
   346  001D  01C6               	clrf	(__pbssBANK0+5)& (0+127)
   347  001E  01C7               	clrf	(__pbssBANK0+6)& (0+127)
   348  001F  01C8               	clrf	(__pbssBANK0+7)& (0+127)
   349  0020  01C9               	clrf	(__pbssBANK0+8)& (0+127)
   350  0021  01CA               	clrf	(__pbssBANK0+9)& (0+127)
   351  0022  01CB               	clrf	(__pbssBANK0+10)& (0+127)
   352  0023  01CC               	clrf	(__pbssBANK0+11)& (0+127)
   353  0024  01CD               	clrf	(__pbssBANK0+12)& (0+127)
   354  0025  01CE               	clrf	(__pbssBANK0+13)& (0+127)
   355  0026  01CF               	clrf	(__pbssBANK0+14)& (0+127)
   356  0027                     end_of_initialization:	
   357                           ;End of C runtime variable initialization code
   358                           
   359  0027                     __end_of__initialization:	
   360  0027  0183               	clrf	3
   361  0028  120A  118A  2993   	ljmp	_main	;jump to C main() function
   362                           
   363                           	psect	bssCOMMON
   364  0070                     __pbssCOMMON:	
   365  0070                     _j:	
   366  0070                     	ds	1
   367  0071                     _done:	
   368  0071                     	ds	1
   369  0072                     _i:	
   370  0072                     	ds	1
   371  0073                     _received:	
   372  0073                     	ds	1
   373  0074                     _val:	
   374  0074                     	ds	1
   375                           
   376                           	psect	bssBANK0
   377  0041                     __pbssBANK0:	
   378  0041                     _info:	
   379  0041                     	ds	15
   380                           
   381                           	psect	cstackCOMMON
   382  0075                     __pcstackCOMMON:	
   383  0075                     ?_setup:	
   384  0075                     ?_spiReceiveWait:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0075                     ??_spiReceiveWait:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0075                     ?_spiWrite:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0075                     ??_spiWrite:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0075                     ?_spiRead:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0075                     ??_spiRead:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0075                     ?_UART_Read:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0075                     ??_UART_Read:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0075                     ?_UART_Write:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0075                     ?_isr:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0075                     ?_main:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0075                     spiWrite@dat:	
   418                           ; 1 bytes @ 0x0
   419                           
   420                           
   421                           ; 1 bytes @ 0x0
   422  0075                     	ds	1
   423  0076                     ??_isr:	
   424                           
   425                           ; 1 bytes @ 0x1
   426  0076                     	ds	4
   427                           
   428                           	psect	cstackBANK0
   429  0020                     __pcstackBANK0:	
   430  0020                     ?_spiInit:	
   431  0020                     ??_UART_Write:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0020                     ?___aldiv:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0020                     spiInit@sDataSample:	
   438                           ; 4 bytes @ 0x0
   439                           
   440  0020                     UART_Write@data:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0020                     ___aldiv@divisor:	
   444                           ; 1 bytes @ 0x0
   445                           
   446                           
   447                           ; 4 bytes @ 0x0
   448  0020                     	ds	1
   449  0021                     spiInit@sClockIdle:	
   450                           
   451                           ; 1 bytes @ 0x1
   452  0021                     	ds	1
   453  0022                     spiInit@sTransmitEdge:	
   454                           
   455                           ; 1 bytes @ 0x2
   456  0022                     	ds	1
   457  0023                     ??_spiInit:	
   458  0023                     spiInit@sType:	
   459                           ; 1 bytes @ 0x3
   460                           
   461                           
   462                           ; 1 bytes @ 0x3
   463  0023                     	ds	1
   464  0024                     ___aldiv@dividend:	
   465                           
   466                           ; 4 bytes @ 0x4
   467  0024                     	ds	4
   468  0028                     ??___aldiv:	
   469                           
   470                           ; 1 bytes @ 0x8
   471  0028                     	ds	1
   472  0029                     ___aldiv@counter:	
   473                           
   474                           ; 1 bytes @ 0x9
   475  0029                     	ds	1
   476  002A                     ___aldiv@sign:	
   477                           
   478                           ; 1 bytes @ 0xA
   479  002A                     	ds	1
   480  002B                     ___aldiv@quotient:	
   481                           
   482                           ; 4 bytes @ 0xB
   483  002B                     	ds	4
   484  002F                     ?_UART_Init:	
   485  002F                     UART_Init@baudrate:	
   486                           ; 1 bytes @ 0xF
   487                           
   488                           
   489                           ; 4 bytes @ 0xF
   490  002F                     	ds	4
   491  0033                     ??_UART_Init:	
   492                           
   493                           ; 1 bytes @ 0x13
   494  0033                     	ds	12
   495  003F                     UART_Init@x:	
   496                           
   497                           ; 2 bytes @ 0x1F
   498  003F                     	ds	2
   499  0041                     ??_setup:	
   500  0041                     ??_main:	
   501                           ; 1 bytes @ 0x21
   502                           
   503                           
   504                           	psect	maintext
   505  0193                     __pmaintext:	
   506                           ; 1 bytes @ 0x21
   507 ;;
   508 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   509 ;;
   510 ;; *************** function _main *****************
   511 ;; Defined at:
   512 ;;		line 56 in file "mainTraductor.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;		None
   515 ;; Auto vars:     Size  Location     Type
   516 ;;		None
   517 ;; Return value:  Size  Location     Type
   518 ;;                  1    wreg      void 
   519 ;; Registers used:
   520 ;;		wreg, status,2, status,0, pclath, cstack
   521 ;; Tracked objects:
   522 ;;		On entry : B00/0
   523 ;;		On exit  : 0/0
   524 ;;		Unchanged: 0/0
   525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   526 ;;      Params:         0       0       0       0       0
   527 ;;      Locals:         0       0       0       0       0
   528 ;;      Temps:          0       0       0       0       0
   529 ;;      Totals:         0       0       0       0       0
   530 ;;Total ram usage:        0 bytes
   531 ;; Hardware stack levels required when called:    6
   532 ;; This function calls:
   533 ;;		_UART_Write
   534 ;;		_setup
   535 ;; This function is called by:
   536 ;;		Startup code after reset
   537 ;; This function uses a non-reentrant model
   538 ;;
   539                           
   540                           
   541                           ;psect for function _main
   542  0193                     _main:	
   543                           
   544                           ;mainTraductor.c: 57:     setup();
   545                           
   546                           ;incstack = 0
   547                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   548  0193  120A  118A  226E  120A  118A  	fcall	_setup
   549  0198                     l1207:	
   550                           
   551                           ;mainTraductor.c: 59:         if (done == 1){
   552  0198  0371               	decf	_done,w
   553  0199  1D03               	btfss	3,2
   554  019A  2998               	goto	l1207
   555                           
   556                           ;mainTraductor.c: 60:             UART_Write(info[0]);
   557  019B  1283               	bcf	3,5	;RP0=0, select bank0
   558  019C  1303               	bcf	3,6	;RP1=0, select bank0
   559  019D  0841               	movf	_info,w
   560  019E  120A  118A  22CF  120A  118A  	fcall	_UART_Write
   561                           
   562                           ;mainTraductor.c: 61:             UART_Write(info[1]);
   563  01A3  1283               	bcf	3,5	;RP0=0, select bank0
   564  01A4  1303               	bcf	3,6	;RP1=0, select bank0
   565  01A5  0842               	movf	_info+1,w
   566  01A6  120A  118A  22CF  120A  118A  	fcall	_UART_Write
   567                           
   568                           ;mainTraductor.c: 62:             UART_Write(info[2]);
   569  01AB  1283               	bcf	3,5	;RP0=0, select bank0
   570  01AC  1303               	bcf	3,6	;RP1=0, select bank0
   571  01AD  0843               	movf	_info+2,w
   572  01AE  120A  118A  22CF  120A  118A  	fcall	_UART_Write
   573                           
   574                           ;mainTraductor.c: 63:             UART_Write(info[3]);
   575  01B3  1283               	bcf	3,5	;RP0=0, select bank0
   576  01B4  1303               	bcf	3,6	;RP1=0, select bank0
   577  01B5  0844               	movf	_info+3,w
   578  01B6  120A  118A  22CF  120A  118A  	fcall	_UART_Write
   579                           
   580                           ;mainTraductor.c: 64:             UART_Write(info[4]);
   581  01BB  1283               	bcf	3,5	;RP0=0, select bank0
   582  01BC  1303               	bcf	3,6	;RP1=0, select bank0
   583  01BD  0845               	movf	_info+4,w
   584  01BE  120A  118A  22CF  120A  118A  	fcall	_UART_Write
   585                           
   586                           ;mainTraductor.c: 65:             UART_Write(info[5]);
   587  01C3  1283               	bcf	3,5	;RP0=0, select bank0
   588  01C4  1303               	bcf	3,6	;RP1=0, select bank0
   589  01C5  0846               	movf	_info+5,w
   590  01C6  120A  118A  22CF  120A  118A  	fcall	_UART_Write
   591                           
   592                           ;mainTraductor.c: 66:             UART_Write(info[6]);
   593  01CB  1283               	bcf	3,5	;RP0=0, select bank0
   594  01CC  1303               	bcf	3,6	;RP1=0, select bank0
   595  01CD  0847               	movf	_info+6,w
   596  01CE  120A  118A  22CF  120A  118A  	fcall	_UART_Write
   597                           
   598                           ;mainTraductor.c: 67:             UART_Write(info[7]);
   599  01D3  1283               	bcf	3,5	;RP0=0, select bank0
   600  01D4  1303               	bcf	3,6	;RP1=0, select bank0
   601  01D5  0848               	movf	_info+7,w
   602  01D6  120A  118A  22CF  120A  118A  	fcall	_UART_Write
   603                           
   604                           ;mainTraductor.c: 68:             UART_Write(info[8]);
   605  01DB  1283               	bcf	3,5	;RP0=0, select bank0
   606  01DC  1303               	bcf	3,6	;RP1=0, select bank0
   607  01DD  0849               	movf	_info+8,w
   608  01DE  120A  118A  22CF  120A  118A  	fcall	_UART_Write
   609                           
   610                           ;mainTraductor.c: 69:             UART_Write(info[9]);
   611  01E3  1283               	bcf	3,5	;RP0=0, select bank0
   612  01E4  1303               	bcf	3,6	;RP1=0, select bank0
   613  01E5  084A               	movf	_info+9,w
   614  01E6  120A  118A  22CF  120A  118A  	fcall	_UART_Write
   615                           
   616                           ;mainTraductor.c: 70:             UART_Write(info[10]);
   617  01EB  1283               	bcf	3,5	;RP0=0, select bank0
   618  01EC  1303               	bcf	3,6	;RP1=0, select bank0
   619  01ED  084B               	movf	_info+10,w
   620  01EE  120A  118A  22CF  120A  118A  	fcall	_UART_Write
   621                           
   622                           ;mainTraductor.c: 71:             UART_Write(info[11]);
   623  01F3  1283               	bcf	3,5	;RP0=0, select bank0
   624  01F4  1303               	bcf	3,6	;RP1=0, select bank0
   625  01F5  084C               	movf	_info+11,w
   626  01F6  120A  118A  22CF  120A  118A  	fcall	_UART_Write
   627                           
   628                           ;mainTraductor.c: 72:             UART_Write(info[12]);
   629  01FB  1283               	bcf	3,5	;RP0=0, select bank0
   630  01FC  1303               	bcf	3,6	;RP1=0, select bank0
   631  01FD  084D               	movf	_info+12,w
   632  01FE  120A  118A  22CF  120A  118A  	fcall	_UART_Write
   633                           
   634                           ;mainTraductor.c: 73:             UART_Write(info[13]);
   635  0203  1283               	bcf	3,5	;RP0=0, select bank0
   636  0204  1303               	bcf	3,6	;RP1=0, select bank0
   637  0205  084E               	movf	_info+13,w
   638  0206  120A  118A  22CF  120A  118A  	fcall	_UART_Write
   639                           
   640                           ;mainTraductor.c: 74:             UART_Write(info[14]);
   641  020B  1283               	bcf	3,5	;RP0=0, select bank0
   642  020C  1303               	bcf	3,6	;RP1=0, select bank0
   643  020D  084F               	movf	_info+14,w
   644  020E  120A  118A  22CF  120A  118A  	fcall	_UART_Write
   645                           
   646                           ;mainTraductor.c: 75:             done = 0;
   647  0213  01F1               	clrf	_done
   648                           
   649                           ;mainTraductor.c: 76:             RB0 = 0;
   650  0214  1283               	bcf	3,5	;RP0=0, select bank0
   651  0215  1303               	bcf	3,6	;RP1=0, select bank0
   652  0216  1006               	bcf	6,0	;volatile
   653  0217  2998               	goto	l1207
   654  0218                     __end_of_main:	
   655                           
   656                           	psect	text1
   657  026E                     __ptext1:	
   658 ;; *************** function _setup *****************
   659 ;; Defined at:
   660 ;;		line 81 in file "mainTraductor.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;		None
   663 ;; Auto vars:     Size  Location     Type
   664 ;;		None
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		wreg, status,2, status,0, pclath, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   674 ;;      Params:         0       0       0       0       0
   675 ;;      Locals:         0       0       0       0       0
   676 ;;      Temps:          0       0       0       0       0
   677 ;;      Totals:         0       0       0       0       0
   678 ;;Total ram usage:        0 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; Hardware stack levels required when called:    5
   681 ;; This function calls:
   682 ;;		_UART_Init
   683 ;;		_spiInit
   684 ;; This function is called by:
   685 ;;		_main
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689                           
   690                           ;psect for function _setup
   691  026E                     _setup:	
   692                           
   693                           ;mainTraductor.c: 82:     OSCCONbits.IRCF0 = 1;
   694                           
   695                           ;incstack = 0
   696                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   697  026E  1683               	bsf	3,5	;RP0=1, select bank1
   698  026F  1303               	bcf	3,6	;RP1=0, select bank1
   699  0270  160F               	bsf	15,4	;volatile
   700                           
   701                           ;mainTraductor.c: 83:     OSCCONbits.IRCF1 = 1;
   702  0271  168F               	bsf	15,5	;volatile
   703                           
   704                           ;mainTraductor.c: 84:     OSCCONbits.IRCF2 = 1;
   705  0272  170F               	bsf	15,6	;volatile
   706                           
   707                           ;mainTraductor.c: 85:     OSCCONbits.SCS = 1;
   708  0273  140F               	bsf	15,0	;volatile
   709                           
   710                           ;mainTraductor.c: 86:     val = 0;
   711  0274  01F4               	clrf	_val
   712                           
   713                           ;mainTraductor.c: 87:     j = 0;
   714  0275  01F0               	clrf	_j
   715                           
   716                           ;mainTraductor.c: 88:     ANSELH = 0;
   717  0276  1683               	bsf	3,5	;RP0=1, select bank3
   718  0277  1703               	bsf	3,6	;RP1=1, select bank3
   719  0278  0189               	clrf	9	;volatile
   720                           
   721                           ;mainTraductor.c: 89:     TRISB = 0;
   722  0279  1683               	bsf	3,5	;RP0=1, select bank1
   723  027A  1303               	bcf	3,6	;RP1=0, select bank1
   724  027B  0186               	clrf	6	;volatile
   725                           
   726                           ;mainTraductor.c: 90:     PORTB = 0;
   727  027C  1283               	bcf	3,5	;RP0=0, select bank0
   728  027D  1303               	bcf	3,6	;RP1=0, select bank0
   729  027E  0186               	clrf	6	;volatile
   730                           
   731                           ;mainTraductor.c: 91:     ANSEL = 0;
   732  027F  1683               	bsf	3,5	;RP0=1, select bank3
   733  0280  1703               	bsf	3,6	;RP1=1, select bank3
   734  0281  0188               	clrf	8	;volatile
   735                           
   736                           ;mainTraductor.c: 92:     TRISD = 0;
   737  0282  1683               	bsf	3,5	;RP0=1, select bank1
   738  0283  1303               	bcf	3,6	;RP1=0, select bank1
   739  0284  0188               	clrf	8	;volatile
   740                           
   741                           ;mainTraductor.c: 93:     PORTD = 0;
   742  0285  1283               	bcf	3,5	;RP0=0, select bank0
   743  0286  1303               	bcf	3,6	;RP1=0, select bank0
   744  0287  0188               	clrf	8	;volatile
   745                           
   746                           ;mainTraductor.c: 94:     TRISAbits.TRISA5 = 1;
   747  0288  1683               	bsf	3,5	;RP0=1, select bank1
   748  0289  1303               	bcf	3,6	;RP1=0, select bank1
   749  028A  1685               	bsf	5,5	;volatile
   750                           
   751                           ;mainTraductor.c: 95:     TRISCbits.TRISC3 = 1;
   752  028B  1587               	bsf	7,3	;volatile
   753                           
   754                           ;mainTraductor.c: 96:     INTCONbits.GIE = 1;
   755  028C  178B               	bsf	11,7	;volatile
   756                           
   757                           ;mainTraductor.c: 97:     INTCONbits.PEIE = 1;
   758  028D  170B               	bsf	11,6	;volatile
   759                           
   760                           ;mainTraductor.c: 98:     PIR1bits.SSPIF = 0;
   761  028E  1283               	bcf	3,5	;RP0=0, select bank0
   762  028F  1303               	bcf	3,6	;RP1=0, select bank0
   763  0290  118C               	bcf	12,3	;volatile
   764                           
   765                           ;mainTraductor.c: 99:     PIE1bits.SSPIE = 1;
   766  0291  1683               	bsf	3,5	;RP0=1, select bank1
   767  0292  1303               	bcf	3,6	;RP1=0, select bank1
   768  0293  158C               	bsf	12,3	;volatile
   769                           
   770                           ;mainTraductor.c: 100:     PIR1bits.RCIF = 0;
   771  0294  1283               	bcf	3,5	;RP0=0, select bank0
   772  0295  1303               	bcf	3,6	;RP1=0, select bank0
   773  0296  128C               	bcf	12,5	;volatile
   774                           
   775                           ;mainTraductor.c: 101:     PIE1bits.RCIE = 1;
   776  0297  1683               	bsf	3,5	;RP0=1, select bank1
   777  0298  1303               	bcf	3,6	;RP1=0, select bank1
   778  0299  168C               	bsf	12,5	;volatile
   779                           
   780                           ;mainTraductor.c: 102:     UART_Init(9600);
   781  029A  3000               	movlw	0
   782  029B  1283               	bcf	3,5	;RP0=0, select bank0
   783  029C  1303               	bcf	3,6	;RP1=0, select bank0
   784  029D  00B2               	movwf	UART_Init@baudrate+3
   785  029E  3000               	movlw	0
   786  029F  00B1               	movwf	UART_Init@baudrate+2
   787  02A0  3025               	movlw	37
   788  02A1  00B0               	movwf	UART_Init@baudrate+1
   789  02A2  3080               	movlw	128
   790  02A3  00AF               	movwf	UART_Init@baudrate
   791  02A4  120A  118A  202B  120A  118A  	fcall	_UART_Init
   792                           
   793                           ;mainTraductor.c: 103:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_ID
      +                          LE_LOW, SPI_IDLE_2_ACTIVE);
   794  02A9  1283               	bcf	3,5	;RP0=0, select bank0
   795  02AA  1303               	bcf	3,6	;RP1=0, select bank0
   796  02AB  01A0               	clrf	spiInit@sDataSample
   797  02AC  01A1               	clrf	spiInit@sClockIdle
   798  02AD  01A2               	clrf	spiInit@sTransmitEdge
   799  02AE  3024               	movlw	36
   800  02AF  120A  118A  22B3   	fcall	_spiInit
   801  02B2  0008               	return
   802  02B3                     __end_of_setup:	
   803                           
   804                           	psect	text2
   805  02B3                     __ptext2:	
   806 ;; *************** function _spiInit *****************
   807 ;; Defined at:
   808 ;;		line 13 in file "SPI.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;  sType           1    wreg     enum E1264
   811 ;;  sDataSample     1    0[BANK0 ] enum E1272
   812 ;;  sClockIdle      1    1[BANK0 ] enum E1276
   813 ;;  sTransmitEdg    1    2[BANK0 ] enum E1280
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  sType           1    3[BANK0 ] enum E1264
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, status,2, status,0
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   825 ;;      Params:         0       3       0       0       0
   826 ;;      Locals:         0       1       0       0       0
   827 ;;      Temps:          0       0       0       0       0
   828 ;;      Totals:         0       4       0       0       0
   829 ;;Total ram usage:        4 bytes
   830 ;; Hardware stack levels used:    1
   831 ;; Hardware stack levels required when called:    3
   832 ;; This function calls:
   833 ;;		Nothing
   834 ;; This function is called by:
   835 ;;		_setup
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           
   840                           ;psect for function _spiInit
   841  02B3                     _spiInit:	
   842                           
   843                           ;incstack = 0
   844                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   845                           ;spiInit@sType stored from wreg
   846  02B3  1283               	bcf	3,5	;RP0=0, select bank0
   847  02B4  1303               	bcf	3,6	;RP1=0, select bank0
   848  02B5  00A3               	movwf	spiInit@sType
   849                           
   850                           ;SPI.c: 13: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 14: {;SPI.c: 15:     TRISC5 = 0;
   851  02B6  1683               	bsf	3,5	;RP0=1, select bank1
   852  02B7  1303               	bcf	3,6	;RP1=0, select bank1
   853  02B8  1287               	bcf	7,5	;volatile
   854                           
   855                           ;SPI.c: 16:     if(sType & 0b00000100)
   856  02B9  1283               	bcf	3,5	;RP0=0, select bank0
   857  02BA  1303               	bcf	3,6	;RP1=0, select bank0
   858  02BB  1D23               	btfss	spiInit@sType,2
   859  02BC  2AC3               	goto	l1139
   860                           
   861                           ;SPI.c: 17:     {;SPI.c: 18:         SSPSTAT = sTransmitEdge;
   862  02BD  0822               	movf	spiInit@sTransmitEdge,w
   863  02BE  1683               	bsf	3,5	;RP0=1, select bank1
   864  02BF  1303               	bcf	3,6	;RP1=0, select bank1
   865  02C0  0094               	movwf	20	;volatile
   866                           
   867                           ;SPI.c: 19:         TRISC3 = 1;
   868  02C1  1587               	bsf	7,3	;volatile
   869                           
   870                           ;SPI.c: 20:     }
   871  02C2  2AC9               	goto	l16
   872  02C3                     l1139:	
   873                           
   874                           ;SPI.c: 22:     {;SPI.c: 23:         SSPSTAT = sDataSample | sTransmitEdge;
   875  02C3  0820               	movf	spiInit@sDataSample,w
   876  02C4  0422               	iorwf	spiInit@sTransmitEdge,w
   877  02C5  1683               	bsf	3,5	;RP0=1, select bank1
   878  02C6  1303               	bcf	3,6	;RP1=0, select bank1
   879  02C7  0094               	movwf	20	;volatile
   880                           
   881                           ;SPI.c: 24:         TRISC3 = 0;
   882  02C8  1187               	bcf	7,3	;volatile
   883  02C9                     l16:	
   884                           ;SPI.c: 25:     }
   885                           
   886                           
   887                           ;SPI.c: 27:     SSPCON = sType | sClockIdle;
   888  02C9  1283               	bcf	3,5	;RP0=0, select bank0
   889  02CA  1303               	bcf	3,6	;RP1=0, select bank0
   890  02CB  0823               	movf	spiInit@sType,w
   891  02CC  0421               	iorwf	spiInit@sClockIdle,w
   892  02CD  0094               	movwf	20	;volatile
   893  02CE  0008               	return
   894  02CF                     __end_of_spiInit:	
   895                           
   896                           	psect	text3
   897  002B                     __ptext3:	
   898 ;; *************** function _UART_Init *****************
   899 ;; Defined at:
   900 ;;		line 8 in file "./UART.h"
   901 ;; Parameters:    Size  Location     Type
   902 ;;  baudrate        4   15[BANK0 ] const long 
   903 ;; Auto vars:     Size  Location     Type
   904 ;;  x               2   31[BANK0 ] unsigned int 
   905 ;; Return value:  Size  Location     Type
   906 ;;                  1    wreg      unsigned char 
   907 ;; Registers used:
   908 ;;		wreg, status,2, status,0, pclath, cstack
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   914 ;;      Params:         0       4       0       0       0
   915 ;;      Locals:         0       2       0       0       0
   916 ;;      Temps:          0      12       0       0       0
   917 ;;      Totals:         0      18       0       0       0
   918 ;;Total ram usage:       18 bytes
   919 ;; Hardware stack levels used:    1
   920 ;; Hardware stack levels required when called:    4
   921 ;; This function calls:
   922 ;;		___aldiv
   923 ;; This function is called by:
   924 ;;		_setup
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928                           
   929                           ;psect for function _UART_Init
   930  002B                     _UART_Init:	
   931                           
   932                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
   933                           
   934                           ;incstack = 0
   935                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
   936  002B  1283               	bcf	3,5	;RP0=0, select bank0
   937  002C  1303               	bcf	3,6	;RP1=0, select bank0
   938  002D  082F               	movf	UART_Init@baudrate,w
   939  002E  00B3               	movwf	??_UART_Init
   940  002F  0830               	movf	UART_Init@baudrate+1,w
   941  0030  00B4               	movwf	??_UART_Init+1
   942  0031  0831               	movf	UART_Init@baudrate+2,w
   943  0032  00B5               	movwf	??_UART_Init+2
   944  0033  0832               	movf	UART_Init@baudrate+3,w
   945  0034  00B6               	movwf	??_UART_Init+3
   946  0035  3006               	movlw	6
   947  0036                     u635:	
   948  0036  1003               	clrc
   949  0037  0DB3               	rlf	??_UART_Init,f
   950  0038  0DB4               	rlf	??_UART_Init+1,f
   951  0039  0DB5               	rlf	??_UART_Init+2,f
   952  003A  0DB6               	rlf	??_UART_Init+3,f
   953  003B  3EFF               	addlw	-1
   954  003C  1D03               	skipz
   955  003D  2836               	goto	u635
   956  003E  0836               	movf	??_UART_Init+3,w
   957  003F  00A3               	movwf	___aldiv@divisor+3
   958  0040  0835               	movf	??_UART_Init+2,w
   959  0041  00A2               	movwf	___aldiv@divisor+2
   960  0042  0834               	movf	??_UART_Init+1,w
   961  0043  00A1               	movwf	___aldiv@divisor+1
   962  0044  0833               	movf	??_UART_Init,w
   963  0045  00A0               	movwf	___aldiv@divisor
   964  0046  082F               	movf	UART_Init@baudrate,w
   965  0047  00B7               	movwf	??_UART_Init+4
   966  0048  0830               	movf	UART_Init@baudrate+1,w
   967  0049  00B8               	movwf	??_UART_Init+5
   968  004A  0831               	movf	UART_Init@baudrate+2,w
   969  004B  00B9               	movwf	??_UART_Init+6
   970  004C  0832               	movf	UART_Init@baudrate+3,w
   971  004D  00BA               	movwf	??_UART_Init+7
   972  004E  3006               	movlw	6
   973  004F                     u645:	
   974  004F  1003               	clrc
   975  0050  0DB7               	rlf	??_UART_Init+4,f
   976  0051  0DB8               	rlf	??_UART_Init+5,f
   977  0052  0DB9               	rlf	??_UART_Init+6,f
   978  0053  0DBA               	rlf	??_UART_Init+7,f
   979  0054  3EFF               	addlw	-1
   980  0055  1D03               	skipz
   981  0056  284F               	goto	u645
   982  0057  3000               	movlw	0
   983  0058  00BB               	movwf	??_UART_Init+8
   984  0059  3012               	movlw	18
   985  005A  00BC               	movwf	??_UART_Init+9
   986  005B  307A               	movlw	122
   987  005C  00BD               	movwf	??_UART_Init+10
   988  005D  3000               	movlw	0
   989  005E  00BE               	movwf	??_UART_Init+11
   990  005F  0837               	movf	??_UART_Init+4,w
   991  0060  02BB               	subwf	??_UART_Init+8,f
   992  0061  0838               	movf	??_UART_Init+5,w
   993  0062  1C03               	skipc
   994  0063  0F38               	incfsz	??_UART_Init+5,w
   995  0064  2866               	goto	u651
   996  0065  2867               	goto	u652
   997  0066                     u651:	
   998  0066  02BC               	subwf	??_UART_Init+9,f
   999  0067                     u652:	
  1000  0067  0839               	movf	??_UART_Init+6,w
  1001  0068  1C03               	skipc
  1002  0069  0F39               	incfsz	??_UART_Init+6,w
  1003  006A  286C               	goto	u653
  1004  006B  286D               	goto	u654
  1005  006C                     u653:	
  1006  006C  02BD               	subwf	??_UART_Init+10,f
  1007  006D                     u654:	
  1008  006D  083A               	movf	??_UART_Init+7,w
  1009  006E  1C03               	skipc
  1010  006F  0F3A               	incfsz	??_UART_Init+7,w
  1011  0070  2872               	goto	u655
  1012  0071  2873               	goto	u656
  1013  0072                     u655:	
  1014  0072  02BE               	subwf	??_UART_Init+11,f
  1015  0073                     u656:	
  1016  0073  083E               	movf	??_UART_Init+11,w
  1017  0074  00A7               	movwf	___aldiv@dividend+3
  1018  0075  083D               	movf	??_UART_Init+10,w
  1019  0076  00A6               	movwf	___aldiv@dividend+2
  1020  0077  083C               	movf	??_UART_Init+9,w
  1021  0078  00A5               	movwf	___aldiv@dividend+1
  1022  0079  083B               	movf	??_UART_Init+8,w
  1023  007A  00A4               	movwf	___aldiv@dividend
  1024  007B  120A  118A  2104  120A  118A  	fcall	___aldiv
  1025  0080  1283               	bcf	3,5	;RP0=0, select bank0
  1026  0081  1303               	bcf	3,6	;RP1=0, select bank0
  1027  0082  0821               	movf	?___aldiv+1,w
  1028  0083  00C0               	movwf	UART_Init@x+1
  1029  0084  0820               	movf	?___aldiv,w
  1030  0085  00BF               	movwf	UART_Init@x
  1031                           
  1032                           ;./UART.h: 12:  if(x>255)
  1033  0086  3001               	movlw	1
  1034  0087  0240               	subwf	UART_Init@x+1,w
  1035  0088  3000               	movlw	0
  1036  0089  1903               	skipnz
  1037  008A  023F               	subwf	UART_Init@x,w
  1038  008B  1C03               	skipc
  1039  008C  28E9               	goto	l1151
  1040                           
  1041                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  1042  008D  082F               	movf	UART_Init@baudrate,w
  1043  008E  00B3               	movwf	??_UART_Init
  1044  008F  0830               	movf	UART_Init@baudrate+1,w
  1045  0090  00B4               	movwf	??_UART_Init+1
  1046  0091  0831               	movf	UART_Init@baudrate+2,w
  1047  0092  00B5               	movwf	??_UART_Init+2
  1048  0093  0832               	movf	UART_Init@baudrate+3,w
  1049  0094  00B6               	movwf	??_UART_Init+3
  1050  0095  3004               	movlw	4
  1051  0096                     u675:	
  1052  0096  1003               	clrc
  1053  0097  0DB3               	rlf	??_UART_Init,f
  1054  0098  0DB4               	rlf	??_UART_Init+1,f
  1055  0099  0DB5               	rlf	??_UART_Init+2,f
  1056  009A  0DB6               	rlf	??_UART_Init+3,f
  1057  009B  3EFF               	addlw	-1
  1058  009C  1D03               	skipz
  1059  009D  2896               	goto	u675
  1060  009E  0836               	movf	??_UART_Init+3,w
  1061  009F  00A3               	movwf	___aldiv@divisor+3
  1062  00A0  0835               	movf	??_UART_Init+2,w
  1063  00A1  00A2               	movwf	___aldiv@divisor+2
  1064  00A2  0834               	movf	??_UART_Init+1,w
  1065  00A3  00A1               	movwf	___aldiv@divisor+1
  1066  00A4  0833               	movf	??_UART_Init,w
  1067  00A5  00A0               	movwf	___aldiv@divisor
  1068  00A6  082F               	movf	UART_Init@baudrate,w
  1069  00A7  00B7               	movwf	??_UART_Init+4
  1070  00A8  0830               	movf	UART_Init@baudrate+1,w
  1071  00A9  00B8               	movwf	??_UART_Init+5
  1072  00AA  0831               	movf	UART_Init@baudrate+2,w
  1073  00AB  00B9               	movwf	??_UART_Init+6
  1074  00AC  0832               	movf	UART_Init@baudrate+3,w
  1075  00AD  00BA               	movwf	??_UART_Init+7
  1076  00AE  3004               	movlw	4
  1077  00AF                     u685:	
  1078  00AF  1003               	clrc
  1079  00B0  0DB7               	rlf	??_UART_Init+4,f
  1080  00B1  0DB8               	rlf	??_UART_Init+5,f
  1081  00B2  0DB9               	rlf	??_UART_Init+6,f
  1082  00B3  0DBA               	rlf	??_UART_Init+7,f
  1083  00B4  3EFF               	addlw	-1
  1084  00B5  1D03               	skipz
  1085  00B6  28AF               	goto	u685
  1086  00B7  3000               	movlw	0
  1087  00B8  00BB               	movwf	??_UART_Init+8
  1088  00B9  3012               	movlw	18
  1089  00BA  00BC               	movwf	??_UART_Init+9
  1090  00BB  307A               	movlw	122
  1091  00BC  00BD               	movwf	??_UART_Init+10
  1092  00BD  3000               	movlw	0
  1093  00BE  00BE               	movwf	??_UART_Init+11
  1094  00BF  0837               	movf	??_UART_Init+4,w
  1095  00C0  02BB               	subwf	??_UART_Init+8,f
  1096  00C1  0838               	movf	??_UART_Init+5,w
  1097  00C2  1C03               	skipc
  1098  00C3  0F38               	incfsz	??_UART_Init+5,w
  1099  00C4  28C6               	goto	u691
  1100  00C5  28C7               	goto	u692
  1101  00C6                     u691:	
  1102  00C6  02BC               	subwf	??_UART_Init+9,f
  1103  00C7                     u692:	
  1104  00C7  0839               	movf	??_UART_Init+6,w
  1105  00C8  1C03               	skipc
  1106  00C9  0F39               	incfsz	??_UART_Init+6,w
  1107  00CA  28CC               	goto	u693
  1108  00CB  28CD               	goto	u694
  1109  00CC                     u693:	
  1110  00CC  02BD               	subwf	??_UART_Init+10,f
  1111  00CD                     u694:	
  1112  00CD  083A               	movf	??_UART_Init+7,w
  1113  00CE  1C03               	skipc
  1114  00CF  0F3A               	incfsz	??_UART_Init+7,w
  1115  00D0  28D2               	goto	u695
  1116  00D1  28D3               	goto	u696
  1117  00D2                     u695:	
  1118  00D2  02BE               	subwf	??_UART_Init+11,f
  1119  00D3                     u696:	
  1120  00D3  083E               	movf	??_UART_Init+11,w
  1121  00D4  00A7               	movwf	___aldiv@dividend+3
  1122  00D5  083D               	movf	??_UART_Init+10,w
  1123  00D6  00A6               	movwf	___aldiv@dividend+2
  1124  00D7  083C               	movf	??_UART_Init+9,w
  1125  00D8  00A5               	movwf	___aldiv@dividend+1
  1126  00D9  083B               	movf	??_UART_Init+8,w
  1127  00DA  00A4               	movwf	___aldiv@dividend
  1128  00DB  120A  118A  2104  120A  118A  	fcall	___aldiv
  1129  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1130  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1131  00E2  0821               	movf	?___aldiv+1,w
  1132  00E3  00C0               	movwf	UART_Init@x+1
  1133  00E4  0820               	movf	?___aldiv,w
  1134  00E5  00BF               	movwf	UART_Init@x
  1135                           
  1136                           ;./UART.h: 15:   BRGH = 1;
  1137  00E6  1683               	bsf	3,5	;RP0=1, select bank1
  1138  00E7  1303               	bcf	3,6	;RP1=0, select bank1
  1139  00E8  1518               	bsf	24,2	;volatile
  1140  00E9                     l1151:	
  1141                           
  1142                           ;./UART.h: 17:  if(x<256)
  1143  00E9  3001               	movlw	1
  1144  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  1145  00EB  0240               	subwf	UART_Init@x+1,w
  1146  00EC  3000               	movlw	0
  1147  00ED  1903               	skipnz
  1148  00EE  023F               	subwf	UART_Init@x,w
  1149  00EF  1803               	skipnc
  1150  00F0  0008               	return
  1151                           
  1152                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  1153  00F1  083F               	movf	UART_Init@x,w
  1154  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  1155  00F3  1303               	bcf	3,6	;RP1=0, select bank1
  1156  00F4  0099               	movwf	25	;volatile
  1157                           
  1158                           ;./UART.h: 20:    SYNC = 0;
  1159  00F5  1218               	bcf	24,4	;volatile
  1160                           
  1161                           ;./UART.h: 21:    SPEN = 1;
  1162  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  1163  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  1164  00F8  1798               	bsf	24,7	;volatile
  1165                           
  1166                           ;./UART.h: 22:       TRISC7 = 1;
  1167  00F9  1683               	bsf	3,5	;RP0=1, select bank1
  1168  00FA  1303               	bcf	3,6	;RP1=0, select bank1
  1169  00FB  1787               	bsf	7,7	;volatile
  1170                           
  1171                           ;./UART.h: 23:       TRISC6 = 1;
  1172  00FC  1707               	bsf	7,6	;volatile
  1173                           
  1174                           ;./UART.h: 24:       CREN = 1;
  1175  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  1176  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  1177  00FF  1618               	bsf	24,4	;volatile
  1178                           
  1179                           ;./UART.h: 25:       TXEN = 1;
  1180  0100  1683               	bsf	3,5	;RP0=1, select bank1
  1181  0101  1303               	bcf	3,6	;RP1=0, select bank1
  1182  0102  1698               	bsf	24,5	;volatile
  1183  0103  0008               	return
  1184  0104                     __end_of_UART_Init:	
  1185                           
  1186                           	psect	text4
  1187  0104                     __ptext4:	
  1188 ;; *************** function ___aldiv *****************
  1189 ;; Defined at:
  1190 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;  divisor         4    0[BANK0 ] long 
  1193 ;;  dividend        4    4[BANK0 ] long 
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;  quotient        4   11[BANK0 ] long 
  1196 ;;  sign            1   10[BANK0 ] unsigned char 
  1197 ;;  counter         1    9[BANK0 ] unsigned char 
  1198 ;; Return value:  Size  Location     Type
  1199 ;;                  4    0[BANK0 ] long 
  1200 ;; Registers used:
  1201 ;;		wreg, status,2, status,0
  1202 ;; Tracked objects:
  1203 ;;		On entry : 0/0
  1204 ;;		On exit  : 0/0
  1205 ;;		Unchanged: 0/0
  1206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1207 ;;      Params:         0       8       0       0       0
  1208 ;;      Locals:         0       6       0       0       0
  1209 ;;      Temps:          0       1       0       0       0
  1210 ;;      Totals:         0      15       0       0       0
  1211 ;;Total ram usage:       15 bytes
  1212 ;; Hardware stack levels used:    1
  1213 ;; Hardware stack levels required when called:    3
  1214 ;; This function calls:
  1215 ;;		Nothing
  1216 ;; This function is called by:
  1217 ;;		_UART_Init
  1218 ;; This function uses a non-reentrant model
  1219 ;;
  1220                           
  1221                           
  1222                           ;psect for function ___aldiv
  1223  0104                     ___aldiv:	
  1224                           
  1225                           ;incstack = 0
  1226                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1227  0104  1283               	bcf	3,5	;RP0=0, select bank0
  1228  0105  1303               	bcf	3,6	;RP1=0, select bank0
  1229  0106  01AA               	clrf	___aldiv@sign
  1230  0107  1FA3               	btfss	___aldiv@divisor+3,7
  1231  0108  2916               	goto	l330
  1232  0109  09A0               	comf	___aldiv@divisor,f
  1233  010A  09A1               	comf	___aldiv@divisor+1,f
  1234  010B  09A2               	comf	___aldiv@divisor+2,f
  1235  010C  09A3               	comf	___aldiv@divisor+3,f
  1236  010D  0AA0               	incf	___aldiv@divisor,f
  1237  010E  1903               	skipnz
  1238  010F  0AA1               	incf	___aldiv@divisor+1,f
  1239  0110  1903               	skipnz
  1240  0111  0AA2               	incf	___aldiv@divisor+2,f
  1241  0112  1903               	skipnz
  1242  0113  0AA3               	incf	___aldiv@divisor+3,f
  1243  0114  01AA               	clrf	___aldiv@sign
  1244  0115  0AAA               	incf	___aldiv@sign,f
  1245  0116                     l330:	
  1246  0116  1FA7               	btfss	___aldiv@dividend+3,7
  1247  0117  2927               	goto	l1103
  1248  0118  09A4               	comf	___aldiv@dividend,f
  1249  0119  09A5               	comf	___aldiv@dividend+1,f
  1250  011A  09A6               	comf	___aldiv@dividend+2,f
  1251  011B  09A7               	comf	___aldiv@dividend+3,f
  1252  011C  0AA4               	incf	___aldiv@dividend,f
  1253  011D  1903               	skipnz
  1254  011E  0AA5               	incf	___aldiv@dividend+1,f
  1255  011F  1903               	skipnz
  1256  0120  0AA6               	incf	___aldiv@dividend+2,f
  1257  0121  1903               	skipnz
  1258  0122  0AA7               	incf	___aldiv@dividend+3,f
  1259  0123  3001               	movlw	1
  1260  0124  00A8               	movwf	??___aldiv
  1261  0125  0828               	movf	??___aldiv,w
  1262  0126  06AA               	xorwf	___aldiv@sign,f
  1263  0127                     l1103:	
  1264  0127  3000               	movlw	0
  1265  0128  00AE               	movwf	___aldiv@quotient+3
  1266  0129  3000               	movlw	0
  1267  012A  00AD               	movwf	___aldiv@quotient+2
  1268  012B  3000               	movlw	0
  1269  012C  00AC               	movwf	___aldiv@quotient+1
  1270  012D  3000               	movlw	0
  1271  012E  00AB               	movwf	___aldiv@quotient
  1272  012F  0823               	movf	___aldiv@divisor+3,w
  1273  0130  0422               	iorwf	___aldiv@divisor+2,w
  1274  0131  0421               	iorwf	___aldiv@divisor+1,w
  1275  0132  0420               	iorwf	___aldiv@divisor,w
  1276  0133  1903               	skipnz
  1277  0134  297C               	goto	l1125
  1278  0135  01A9               	clrf	___aldiv@counter
  1279  0136  0AA9               	incf	___aldiv@counter,f
  1280  0137                     l1111:	
  1281  0137  1BA3               	btfsc	___aldiv@divisor+3,7
  1282  0138  2947               	goto	l1113
  1283  0139  3001               	movlw	1
  1284  013A  00A8               	movwf	??___aldiv
  1285  013B                     u555:	
  1286  013B  1003               	clrc
  1287  013C  0DA0               	rlf	___aldiv@divisor,f
  1288  013D  0DA1               	rlf	___aldiv@divisor+1,f
  1289  013E  0DA2               	rlf	___aldiv@divisor+2,f
  1290  013F  0DA3               	rlf	___aldiv@divisor+3,f
  1291  0140  0BA8               	decfsz	??___aldiv,f
  1292  0141  293B               	goto	u555
  1293  0142  3001               	movlw	1
  1294  0143  00A8               	movwf	??___aldiv
  1295  0144  0828               	movf	??___aldiv,w
  1296  0145  07A9               	addwf	___aldiv@counter,f
  1297  0146  2937               	goto	l1111
  1298  0147                     l1113:	
  1299  0147  3001               	movlw	1
  1300  0148  00A8               	movwf	??___aldiv
  1301  0149                     u575:	
  1302  0149  1003               	clrc
  1303  014A  0DAB               	rlf	___aldiv@quotient,f
  1304  014B  0DAC               	rlf	___aldiv@quotient+1,f
  1305  014C  0DAD               	rlf	___aldiv@quotient+2,f
  1306  014D  0DAE               	rlf	___aldiv@quotient+3,f
  1307  014E  0BA8               	decfsz	??___aldiv,f
  1308  014F  2949               	goto	u575
  1309  0150  0823               	movf	___aldiv@divisor+3,w
  1310  0151  0227               	subwf	___aldiv@dividend+3,w
  1311  0152  1D03               	skipz
  1312  0153  295E               	goto	u585
  1313  0154  0822               	movf	___aldiv@divisor+2,w
  1314  0155  0226               	subwf	___aldiv@dividend+2,w
  1315  0156  1D03               	skipz
  1316  0157  295E               	goto	u585
  1317  0158  0821               	movf	___aldiv@divisor+1,w
  1318  0159  0225               	subwf	___aldiv@dividend+1,w
  1319  015A  1D03               	skipz
  1320  015B  295E               	goto	u585
  1321  015C  0820               	movf	___aldiv@divisor,w
  1322  015D  0224               	subwf	___aldiv@dividend,w
  1323  015E                     u585:	
  1324  015E  1C03               	skipc
  1325  015F  296F               	goto	l1121
  1326  0160  0820               	movf	___aldiv@divisor,w
  1327  0161  02A4               	subwf	___aldiv@dividend,f
  1328  0162  0821               	movf	___aldiv@divisor+1,w
  1329  0163  1C03               	skipc
  1330  0164  0F21               	incfsz	___aldiv@divisor+1,w
  1331  0165  02A5               	subwf	___aldiv@dividend+1,f
  1332  0166  0822               	movf	___aldiv@divisor+2,w
  1333  0167  1C03               	skipc
  1334  0168  0F22               	incfsz	___aldiv@divisor+2,w
  1335  0169  02A6               	subwf	___aldiv@dividend+2,f
  1336  016A  0823               	movf	___aldiv@divisor+3,w
  1337  016B  1C03               	skipc
  1338  016C  0F23               	incfsz	___aldiv@divisor+3,w
  1339  016D  02A7               	subwf	___aldiv@dividend+3,f
  1340  016E  142B               	bsf	___aldiv@quotient,0
  1341  016F                     l1121:	
  1342  016F  3001               	movlw	1
  1343  0170                     u595:	
  1344  0170  1003               	clrc
  1345  0171  0CA3               	rrf	___aldiv@divisor+3,f
  1346  0172  0CA2               	rrf	___aldiv@divisor+2,f
  1347  0173  0CA1               	rrf	___aldiv@divisor+1,f
  1348  0174  0CA0               	rrf	___aldiv@divisor,f
  1349  0175  3EFF               	addlw	-1
  1350  0176  1D03               	skipz
  1351  0177  2970               	goto	u595
  1352  0178  3001               	movlw	1
  1353  0179  02A9               	subwf	___aldiv@counter,f
  1354  017A  1D03               	btfss	3,2
  1355  017B  2947               	goto	l1113
  1356  017C                     l1125:	
  1357  017C  082A               	movf	___aldiv@sign,w
  1358  017D  1903               	btfsc	3,2
  1359  017E  298A               	goto	l1129
  1360  017F  09AB               	comf	___aldiv@quotient,f
  1361  0180  09AC               	comf	___aldiv@quotient+1,f
  1362  0181  09AD               	comf	___aldiv@quotient+2,f
  1363  0182  09AE               	comf	___aldiv@quotient+3,f
  1364  0183  0AAB               	incf	___aldiv@quotient,f
  1365  0184  1903               	skipnz
  1366  0185  0AAC               	incf	___aldiv@quotient+1,f
  1367  0186  1903               	skipnz
  1368  0187  0AAD               	incf	___aldiv@quotient+2,f
  1369  0188  1903               	skipnz
  1370  0189  0AAE               	incf	___aldiv@quotient+3,f
  1371  018A                     l1129:	
  1372  018A  082E               	movf	___aldiv@quotient+3,w
  1373  018B  00A3               	movwf	?___aldiv+3
  1374  018C  082D               	movf	___aldiv@quotient+2,w
  1375  018D  00A2               	movwf	?___aldiv+2
  1376  018E  082C               	movf	___aldiv@quotient+1,w
  1377  018F  00A1               	movwf	?___aldiv+1
  1378  0190  082B               	movf	___aldiv@quotient,w
  1379  0191  00A0               	movwf	?___aldiv
  1380  0192  0008               	return
  1381  0193                     __end_of___aldiv:	
  1382                           
  1383                           	psect	text5
  1384  02CF                     __ptext5:	
  1385 ;; *************** function _UART_Write *****************
  1386 ;; Defined at:
  1387 ;;		line 54 in file "./UART.h"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;  data            1    wreg     unsigned char 
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;  data            1    0[BANK0 ] unsigned char 
  1392 ;; Return value:  Size  Location     Type
  1393 ;;                  1    wreg      void 
  1394 ;; Registers used:
  1395 ;;		wreg
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1401 ;;      Params:         0       0       0       0       0
  1402 ;;      Locals:         0       1       0       0       0
  1403 ;;      Temps:          0       0       0       0       0
  1404 ;;      Totals:         0       1       0       0       0
  1405 ;;Total ram usage:        1 bytes
  1406 ;; Hardware stack levels used:    1
  1407 ;; Hardware stack levels required when called:    3
  1408 ;; This function calls:
  1409 ;;		Nothing
  1410 ;; This function is called by:
  1411 ;;		_main
  1412 ;;		_UART_Write_Text
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           
  1417                           ;psect for function _UART_Write
  1418  02CF                     _UART_Write:	
  1419                           
  1420                           ;incstack = 0
  1421                           ; Regs used in _UART_Write: [wreg]
  1422                           ;UART_Write@data stored from wreg
  1423  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  1424  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  1425  02D1  00A0               	movwf	UART_Write@data
  1426  02D2                     l136:	
  1427                           ;./UART.h: 58:   };
  1428                           
  1429                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(PIR1bits
      +                          .TXIF == 0){
  1430                           
  1431                           
  1432                           ;./UART.h: 56:   while(PIR1bits.TXIF == 0){
  1433  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  1434  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  1435  02D4  1A0C               	btfsc	12,4	;volatile
  1436  02D5  2AD8               	goto	l1171
  1437  02D6  0000               	nop	;# 
  1438  02D7  2AD2               	goto	l136
  1439  02D8                     l1171:	
  1440                           
  1441                           ;./UART.h: 59:   TXREG = data;
  1442  02D8  0820               	movf	UART_Write@data,w
  1443  02D9  0099               	movwf	25	;volatile
  1444  02DA  0008               	return
  1445  02DB                     __end_of_UART_Write:	
  1446                           
  1447                           	psect	text6
  1448  0218                     __ptext6:	
  1449 ;; *************** function _isr *****************
  1450 ;; Defined at:
  1451 ;;		line 34 in file "mainTraductor.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;		None
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;		None
  1456 ;; Return value:  Size  Location     Type
  1457 ;;                  1    wreg      void 
  1458 ;; Registers used:
  1459 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1460 ;; Tracked objects:
  1461 ;;		On entry : 0/0
  1462 ;;		On exit  : 0/0
  1463 ;;		Unchanged: 0/0
  1464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1465 ;;      Params:         0       0       0       0       0
  1466 ;;      Locals:         0       0       0       0       0
  1467 ;;      Temps:          4       0       0       0       0
  1468 ;;      Totals:         4       0       0       0       0
  1469 ;;Total ram usage:        4 bytes
  1470 ;; Hardware stack levels used:    1
  1471 ;; Hardware stack levels required when called:    2
  1472 ;; This function calls:
  1473 ;;		_UART_Read
  1474 ;;		_spiRead
  1475 ;;		_spiWrite
  1476 ;; This function is called by:
  1477 ;;		Interrupt level 1
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481                           
  1482                           ;psect for function _isr
  1483  0218                     _isr:	
  1484                           
  1485                           ;mainTraductor.c: 35:     if (PIR1bits.RCIF == 1){
  1486  0218  1283               	bcf	3,5	;RP0=0, select bank0
  1487  0219  1303               	bcf	3,6	;RP1=0, select bank0
  1488  021A  1E8C               	btfss	12,5	;volatile
  1489  021B  2A3A               	goto	i1l162
  1490                           
  1491                           ;mainTraductor.c: 36:         info[i] = UART_Read();
  1492  021C  120A  118A  22E8  120A  118A  	fcall	_UART_Read
  1493  0221  00F6               	movwf	??_isr
  1494  0222  0872               	movf	_i,w
  1495  0223  3E41               	addlw	(low (_info| 0))& (0+255)
  1496  0224  0084               	movwf	4
  1497  0225  0876               	movf	??_isr,w
  1498  0226  1383               	bcf	3,7	;select IRP bank0
  1499  0227  0080               	movwf	0
  1500                           
  1501                           ;mainTraductor.c: 37:         i++;
  1502  0228  3001               	movlw	1
  1503  0229  00F6               	movwf	??_isr
  1504  022A  0876               	movf	??_isr,w
  1505  022B  07F2               	addwf	_i,f
  1506                           
  1507                           ;mainTraductor.c: 38:         RB0 = 1;
  1508  022C  1283               	bcf	3,5	;RP0=0, select bank0
  1509  022D  1303               	bcf	3,6	;RP1=0, select bank0
  1510  022E  1406               	bsf	6,0	;volatile
  1511                           
  1512                           ;mainTraductor.c: 39:         if (info[i-1] == 'A'){
  1513  022F  0872               	movf	_i,w
  1514  0230  3E40               	addlw	(low ((_info| 0+255)))& (0+255)
  1515  0231  0084               	movwf	4
  1516  0232  3041               	movlw	65
  1517  0233  0600               	xorwf	0,w
  1518  0234  1D03               	btfss	3,2
  1519  0235  2A65               	goto	i1l167
  1520                           
  1521                           ;mainTraductor.c: 40:             done = 1;
  1522  0236  01F1               	clrf	_done
  1523  0237  0AF1               	incf	_done,f
  1524                           
  1525                           ;mainTraductor.c: 41:             i = 0;
  1526  0238  01F2               	clrf	_i
  1527  0239  2A65               	goto	i1l167
  1528  023A                     i1l162:	
  1529  023A  1D8C               	btfss	12,3	;volatile
  1530  023B  2A65               	goto	i1l167
  1531                           
  1532                           ;mainTraductor.c: 44:         val = spiRead();
  1533  023C  120A  118A  22DB  120A  118A  	fcall	_spiRead
  1534  0241  00F6               	movwf	??_isr
  1535  0242  0876               	movf	??_isr,w
  1536  0243  00F4               	movwf	_val
  1537                           
  1538                           ;mainTraductor.c: 45:         spiWrite(info[j]);
  1539  0244  0870               	movf	_j,w
  1540  0245  3E41               	addlw	(low (_info| 0))& (0+255)
  1541  0246  0084               	movwf	4
  1542  0247  1383               	bcf	3,7	;select IRP bank0
  1543  0248  0800               	movf	0,w
  1544  0249  120A  118A  22E2  120A  118A  	fcall	_spiWrite
  1545                           
  1546                           ;mainTraductor.c: 46:         j++;
  1547  024E  3001               	movlw	1
  1548  024F  00F6               	movwf	??_isr
  1549  0250  0876               	movf	??_isr,w
  1550  0251  07F0               	addwf	_j,f
  1551                           
  1552                           ;mainTraductor.c: 48:         if (j == 15){
  1553  0252  300F               	movlw	15
  1554  0253  0670               	xorwf	_j,w
  1555  0254  1903               	btfsc	3,2
  1556                           
  1557                           ;mainTraductor.c: 49:             j = 0;
  1558  0255  01F0               	clrf	_j
  1559                           
  1560                           ;mainTraductor.c: 51:         PORTDbits.RD0 = ~PORTDbits.RD0;
  1561  0256  1003               	clrc
  1562  0257  1283               	bcf	3,5	;RP0=0, select bank0
  1563  0258  1303               	bcf	3,6	;RP1=0, select bank0
  1564  0259  1C08               	btfss	8,0	;volatile
  1565  025A  1403               	setc
  1566  025B  1C03               	btfss	3,0
  1567  025C  2A61               	goto	u29_20
  1568  025D  1283               	bcf	3,5	;RP0=0, select bank0
  1569  025E  1303               	bcf	3,6	;RP1=0, select bank0
  1570  025F  1408               	bsf	8,0	;volatile
  1571  0260  2A64               	goto	i1l971
  1572  0261                     u29_20:	
  1573  0261  1283               	bcf	3,5	;RP0=0, select bank0
  1574  0262  1303               	bcf	3,6	;RP1=0, select bank0
  1575  0263  1008               	bcf	8,0	;volatile
  1576  0264                     i1l971:	
  1577                           
  1578                           ;mainTraductor.c: 52:         SSPIF = 0;
  1579  0264  118C               	bcf	12,3	;volatile
  1580  0265                     i1l167:	
  1581  0265  0879               	movf	??_isr+3,w
  1582  0266  008A               	movwf	10
  1583  0267  0878               	movf	??_isr+2,w
  1584  0268  0084               	movwf	4
  1585  0269  0E77               	swapf	(??_isr+1)^(0+4294967168),w
  1586  026A  0083               	movwf	3
  1587  026B  0EFE               	swapf	126,f
  1588  026C  0E7E               	swapf	126,w
  1589  026D  0009               	retfie
  1590  026E                     __end_of_isr:	
  1591                           
  1592                           	psect	intentry
  1593  0004                     __pintentry:	
  1594                           ;incstack = 0
  1595                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1596                           
  1597  0004                     interrupt_function:	
  1598  007E                     saved_w	set	btemp
  1599  0004  00FE               	movwf	btemp
  1600  0005  0E03               	swapf	3,w
  1601  0006  00F7               	movwf	??_isr+1
  1602  0007  0804               	movf	4,w
  1603  0008  00F8               	movwf	??_isr+2
  1604  0009  080A               	movf	10,w
  1605  000A  00F9               	movwf	??_isr+3
  1606  000B  120A  118A  2A18   	ljmp	_isr
  1607                           
  1608                           	psect	text7
  1609  02E2                     __ptext7:	
  1610 ;; *************** function _spiWrite *****************
  1611 ;; Defined at:
  1612 ;;		line 35 in file "SPI.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;  dat             1    wreg     unsigned char 
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;  dat             1    0[COMMON] unsigned char 
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  1    wreg      void 
  1619 ;; Registers used:
  1620 ;;		wreg
  1621 ;; Tracked objects:
  1622 ;;		On entry : 0/0
  1623 ;;		On exit  : 0/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1626 ;;      Params:         0       0       0       0       0
  1627 ;;      Locals:         1       0       0       0       0
  1628 ;;      Temps:          0       0       0       0       0
  1629 ;;      Totals:         1       0       0       0       0
  1630 ;;Total ram usage:        1 bytes
  1631 ;; Hardware stack levels used:    1
  1632 ;; This function calls:
  1633 ;;		Nothing
  1634 ;; This function is called by:
  1635 ;;		_isr
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           
  1640                           ;psect for function _spiWrite
  1641  02E2                     _spiWrite:	
  1642                           
  1643                           ;incstack = 0
  1644                           ; Regs used in _spiWrite: [wreg]
  1645                           ;spiWrite@dat stored from wreg
  1646  02E2  00F5               	movwf	spiWrite@dat
  1647                           
  1648                           ;SPI.c: 35: void spiWrite(char dat);SPI.c: 36: {;SPI.c: 37:     SSPBUF = dat;
  1649  02E3  0875               	movf	spiWrite@dat,w
  1650  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  1651  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  1652  02E6  0093               	movwf	19	;volatile
  1653  02E7  0008               	return
  1654  02E8                     __end_of_spiWrite:	
  1655                           
  1656                           	psect	text8
  1657  02DB                     __ptext8:	
  1658 ;; *************** function _spiRead *****************
  1659 ;; Defined at:
  1660 ;;		line 48 in file "SPI.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;		None
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;		None
  1665 ;; Return value:  Size  Location     Type
  1666 ;;                  1    wreg      unsigned char 
  1667 ;; Registers used:
  1668 ;;		wreg, status,2, status,0, pclath, cstack
  1669 ;; Tracked objects:
  1670 ;;		On entry : 0/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: 0/0
  1673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1674 ;;      Params:         0       0       0       0       0
  1675 ;;      Locals:         0       0       0       0       0
  1676 ;;      Temps:          0       0       0       0       0
  1677 ;;      Totals:         0       0       0       0       0
  1678 ;;Total ram usage:        0 bytes
  1679 ;; Hardware stack levels used:    1
  1680 ;; Hardware stack levels required when called:    1
  1681 ;; This function calls:
  1682 ;;		_spiReceiveWait
  1683 ;; This function is called by:
  1684 ;;		_isr
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           
  1688                           
  1689                           ;psect for function _spiRead
  1690  02DB                     _spiRead:	
  1691                           
  1692                           ;SPI.c: 50:     spiReceiveWait();
  1693                           
  1694                           ;incstack = 0
  1695                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1696  02DB  120A  118A  22EE   	fcall	_spiReceiveWait
  1697                           
  1698                           ;SPI.c: 51:     return(SSPBUF);
  1699  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  1700  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  1701  02E0  0813               	movf	19,w	;volatile
  1702  02E1  0008               	return
  1703  02E2                     __end_of_spiRead:	
  1704                           
  1705                           	psect	text9
  1706  02EE                     __ptext9:	
  1707 ;; *************** function _spiReceiveWait *****************
  1708 ;; Defined at:
  1709 ;;		line 30 in file "SPI.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;		None
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;		None
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  1    wreg      void 
  1716 ;; Registers used:
  1717 ;;		None
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1723 ;;      Params:         0       0       0       0       0
  1724 ;;      Locals:         0       0       0       0       0
  1725 ;;      Temps:          0       0       0       0       0
  1726 ;;      Totals:         0       0       0       0       0
  1727 ;;Total ram usage:        0 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; This function calls:
  1730 ;;		Nothing
  1731 ;; This function is called by:
  1732 ;;		_spiRead
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           
  1737                           ;psect for function _spiReceiveWait
  1738  02EE                     _spiReceiveWait:	
  1739  02EE                     i1l20:	
  1740                           ;SPI.c: 32:     while ( !SSPSTATbits.BF );
  1741                           
  1742                           ;incstack = 0
  1743                           ; Regs used in _spiReceiveWait: []
  1744                           
  1745  02EE  1683               	bsf	3,5	;RP0=1, select bank1
  1746  02EF  1303               	bcf	3,6	;RP1=0, select bank1
  1747  02F0  1814               	btfsc	20,0	;volatile
  1748  02F1  0008               	return
  1749  02F2  2AEE               	goto	i1l20
  1750  02F3                     __end_of_spiReceiveWait:	
  1751                           
  1752                           	psect	text10
  1753  02E8                     __ptext10:	
  1754 ;; *************** function _UART_Read *****************
  1755 ;; Defined at:
  1756 ;;		line 41 in file "./UART.h"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;		None
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;		None
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  1    wreg      unsigned char 
  1763 ;; Registers used:
  1764 ;;		wreg
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 0/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1770 ;;      Params:         0       0       0       0       0
  1771 ;;      Locals:         0       0       0       0       0
  1772 ;;      Temps:          0       0       0       0       0
  1773 ;;      Totals:         0       0       0       0       0
  1774 ;;Total ram usage:        0 bytes
  1775 ;; Hardware stack levels used:    1
  1776 ;; This function calls:
  1777 ;;		Nothing
  1778 ;; This function is called by:
  1779 ;;		_isr
  1780 ;;		_UART_Read_Text
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           
  1785                           ;psect for function _UART_Read
  1786  02E8                     _UART_Read:	
  1787  02E8                     i1l124:	
  1788                           ;./UART.h: 43:   while(!RCIF);
  1789                           
  1790                           ;incstack = 0
  1791                           ; Regs used in _UART_Read: [wreg]
  1792                           
  1793  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  1794  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  1795  02EA  1E8C               	btfss	12,5	;volatile
  1796  02EB  2AE8               	goto	i1l124
  1797                           
  1798                           ;./UART.h: 44:   return RCREG;
  1799  02EC  081A               	movf	26,w	;volatile
  1800  02ED  0008               	return
  1801  02EE                     __end_of_UART_Read:	
  1802  007E                     btemp	set	126	;btemp
  1803  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     33      48
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_spiWrite

Critical Paths under _main in BANK0

    _setup->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1596
                         _UART_Write
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1574
                          _UART_Init
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     456
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4    1118
                                             15 BANK0     18    14      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     805
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0      15
                                              1 COMMON     4     4      0
                          _UART_Read
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (5) _spiWrite                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (6) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Write
   _setup
     _UART_Init
       ___aldiv
     _spiInit

 _isr (ROOT)
   _UART_Read
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     21      30       5       60.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3A      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Mar 07 16:10:47 2019

                       _i 0072                         _j 0070               __CFG_CP$OFF 0000  
             _SSPSTATbits 0094                        l16 02C9                       l136 02D2  
                     l330 0116                       _RB0 0030              __CFG_CPD$OFF 0000  
                     u555 013B                       u651 0066                       u635 0036  
                     u652 0067                       u653 006C                       u645 004F  
                     u654 006D                       u575 0149                       u655 0072  
                     u656 0073                       u585 015E                       u595 0170  
                     u691 00C6                       u675 0096                       u692 00C7  
                     u693 00CC                       u685 00AF                       u694 00CD  
                     u695 00D2                       u696 00D3                       _isr 0218  
                     _val 0074                       fsr0 0004                       indf 0000  
            __CFG_LVP$OFF 0000                      l1111 0137                      l1103 0127  
                    l1121 016F                      l1113 0147                      l1125 017C  
                    l1151 00E9                      l1207 0198                      l1129 018A  
                    l1171 02D8                      l1139 02C3                      ?_isr 0075  
                    _BRGH 04C2                      _CREN 00C4                      i1l20 02EE  
                    _RCIF 0065                      _SPEN 00C7                      _TRMT 04C1  
                    _TXEN 04C5                      _SYNC 04C4              __CFG_WRT$OFF 0000  
                    _done 0071                      _main 0193                      _info 0041  
                    btemp 007E                      start 000E             __CFG_IESO$OFF 0000  
           __CFG_MCLRE$ON 0000                     ??_isr 0076           __end_of___aldiv 0193  
                   ?_main 0075             __CFG_WDTE$OFF 0000                     _ANSEL 0188  
                   i1l124 02E8                     i1l162 023A                     i1l167 0265  
                   i1l971 0264                     _RCREG 001A                     _SPBRG 0099  
                   _PORTB 0006                     _PORTD 0008                     u29_20 0261  
                   _TRISB 0086                     _TRISD 0088                     _SSPIF 0063  
                   _TXREG 0019            __CFG_FCMEN$OFF 0000               ?_UART_Write 0075  
      __size_of_UART_Init 00D9        __size_of_UART_Read 0006                     _setup 026E  
          __CFG_BOREN$OFF 0000                     pclath 000A           __end_of_spiInit 02CF  
         __end_of_spiRead 02E2                     status 0003                     wtemp0 007E  
         __initialization 0011              __end_of_main 0218                    ??_main 0041  
                  ?_setup 0075                    _ANSELH 0189                    _TRISC3 043B  
                  _TRISC5 043D                    _TRISC6 043E                    _TRISC7 043F  
                  _SSPCON 0014                    _SSPBUF 0013            __CFG_PWRTE$OFF 0000  
       __end_of_UART_Init 0104         __end_of_UART_Read 02EE       __size_of_UART_Write 000C  
               ??___aldiv 0028                    saved_w 007E          __end_of_spiWrite 02E8  
               ??_spiInit 0023                 ??_spiRead 0075   __end_of__initialization 0027  
          __pcstackCOMMON 0075             __end_of_setup 02B3                   ??_setup 0041  
              __pbssBANK0 0041                __pmaintext 0193                __pintentry 0004  
 __size_of_spiReceiveWait 0005              ??_UART_Write 0020                   _SSPSTAT 0094  
               ?_spiWrite 0075                   ___aldiv 0104        __end_of_UART_Write 02DB  
                 __ptext1 026E                   __ptext2 02B3                   __ptext3 002B  
                 __ptext4 0104                   __ptext5 02CF                   __ptext6 0218  
                 __ptext7 02E2                   __ptext8 02DB                   __ptext9 02EE  
            __size_of_isr 0056          ___aldiv@dividend 0024                   _spiInit 02B3  
                 _spiRead 02DB      end_of_initialization 0027          ___aldiv@quotient 002B  
              ??_spiWrite 0075                 _UART_Init 002B                 _UART_Read 02E8  
               _PORTDbits 0008            UART_Write@data 0020                 _TRISAbits 0085  
               _TRISCbits 0087               spiWrite@dat 0075            _spiReceiveWait 02EE  
              ?_UART_Init 002F                ?_UART_Read 0075       start_initialization 0011  
             __end_of_isr 026E  __CFG_FOSC$INTRC_NOCLKOUT 0000    __end_of_spiReceiveWait 02F3  
             __pbssCOMMON 0070                 ___latbits 0002             __pcstackBANK0 0020  
         ?_spiReceiveWait 0075                  ?___aldiv 0020               ??_UART_Init 0033  
             ??_UART_Read 0075         __size_of_spiWrite 0006                  ?_spiInit 0020  
                ?_spiRead 0075                UART_Init@x 003F            __size_of_setup 0045  
         ___aldiv@divisor 0020      spiInit@sTransmitEdge 0022         interrupt_function 0004  
         ___aldiv@counter 0029                  _PIE1bits 008C        spiInit@sDataSample 0020  
                _PIR1bits 000C         UART_Init@baudrate 002F          __size_of___aldiv 008F  
                __ptext10 02E8          __size_of_spiInit 001C          __size_of_spiRead 0007  
       __CFG_BOR4V$BOR40V 0000             __size_of_main 0085                  _received 0073  
                _spiWrite 02E2              spiInit@sType 0023         spiInit@sClockIdle 0021  
              _INTCONbits 000B                  intlevel1 0000          ??_spiReceiveWait 0075  
              _OSCCONbits 008F              ___aldiv@sign 002A                _UART_Write 02CF  

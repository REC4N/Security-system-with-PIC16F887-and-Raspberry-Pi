

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Mar 03 12:37:13 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.05
    18                           ; Generated 20/12/2018 GMT
    19                           ; 
    20                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0097                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  0105                     	;# 
   115  0107                     	;# 
   116  0108                     	;# 
   117  0109                     	;# 
   118  010C                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  0185                     	;# 
   124  0187                     	;# 
   125  0188                     	;# 
   126  0189                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  0081                     	;# 
   165  0085                     	;# 
   166  0086                     	;# 
   167  0087                     	;# 
   168  0088                     	;# 
   169  0089                     	;# 
   170  008C                     	;# 
   171  008D                     	;# 
   172  008E                     	;# 
   173  008F                     	;# 
   174  0090                     	;# 
   175  0091                     	;# 
   176  0092                     	;# 
   177  0093                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0094                     	;# 
   181  0095                     	;# 
   182  0096                     	;# 
   183  0097                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009A                     	;# 
   187  009B                     	;# 
   188  009C                     	;# 
   189  009D                     	;# 
   190  009E                     	;# 
   191  009F                     	;# 
   192  0105                     	;# 
   193  0107                     	;# 
   194  0108                     	;# 
   195  0109                     	;# 
   196  010C                     	;# 
   197  010C                     	;# 
   198  010D                     	;# 
   199  010E                     	;# 
   200  010F                     	;# 
   201  0185                     	;# 
   202  0187                     	;# 
   203  0188                     	;# 
   204  0189                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  0000                     	;# 
   208  0001                     	;# 
   209  0002                     	;# 
   210  0003                     	;# 
   211  0004                     	;# 
   212  0005                     	;# 
   213  0006                     	;# 
   214  0007                     	;# 
   215  0008                     	;# 
   216  0009                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  000D                     	;# 
   221  000E                     	;# 
   222  000E                     	;# 
   223  000F                     	;# 
   224  0010                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0014                     	;# 
   229  0015                     	;# 
   230  0015                     	;# 
   231  0016                     	;# 
   232  0017                     	;# 
   233  0018                     	;# 
   234  0019                     	;# 
   235  001A                     	;# 
   236  001B                     	;# 
   237  001B                     	;# 
   238  001C                     	;# 
   239  001D                     	;# 
   240  001E                     	;# 
   241  001F                     	;# 
   242  0081                     	;# 
   243  0085                     	;# 
   244  0086                     	;# 
   245  0087                     	;# 
   246  0088                     	;# 
   247  0089                     	;# 
   248  008C                     	;# 
   249  008D                     	;# 
   250  008E                     	;# 
   251  008F                     	;# 
   252  0090                     	;# 
   253  0091                     	;# 
   254  0092                     	;# 
   255  0093                     	;# 
   256  0093                     	;# 
   257  0093                     	;# 
   258  0094                     	;# 
   259  0095                     	;# 
   260  0096                     	;# 
   261  0097                     	;# 
   262  0098                     	;# 
   263  0099                     	;# 
   264  009A                     	;# 
   265  009B                     	;# 
   266  009C                     	;# 
   267  009D                     	;# 
   268  009E                     	;# 
   269  009F                     	;# 
   270  0105                     	;# 
   271  0107                     	;# 
   272  0108                     	;# 
   273  0109                     	;# 
   274  010C                     	;# 
   275  010C                     	;# 
   276  010D                     	;# 
   277  010E                     	;# 
   278  010F                     	;# 
   279  0185                     	;# 
   280  0187                     	;# 
   281  0188                     	;# 
   282  0189                     	;# 
   283  018C                     	;# 
   284  018D                     	;# 
   285  000C                     _PIR1bits	set	12
   286  000B                     _INTCONbits	set	11
   287  0006                     _PORTB	set	6
   288  0009                     _PORTEbits	set	9
   289  0008                     _PORTD	set	8
   290  0013                     _SSPBUF	set	19
   291  0014                     _SSPCON	set	20
   292  0063                     _SSPIF	set	99
   293  008C                     _PIE1bits	set	140
   294  0088                     _TRISD	set	136
   295  0086                     _TRISB	set	134
   296  008F                     _OSCCONbits	set	143
   297  0094                     _SSPSTATbits	set	148
   298  0094                     _SSPSTAT	set	148
   299  0448                     _TRISE0	set	1096
   300  042D                     _TRISA5	set	1069
   301  043B                     _TRISC3	set	1083
   302  043D                     _TRISC5	set	1085
   303  0188                     _ANSEL	set	392
   304  0189                     _ANSELH	set	393
   305                           
   306                           ; #config settings
   307  0000                     
   308                           	psect	cinit
   309  000F                     start_initialization:	
   310  000F                     __initialization:	
   311  000F                     end_of_initialization:	
   312                           ;End of C runtime variable initialization code
   313                           
   314  000F                     __end_of__initialization:	
   315  000F  0183               	clrf	3
   316  0010  120A  118A  28BD   	ljmp	_main	;jump to C main() function
   317                           
   318                           	psect	cstackCOMMON
   319  0070                     __pcstackCOMMON:	
   320  0070                     ?_setup:	
   321  0070                     ?_spiReceiveWait:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ??_spiReceiveWait:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_spiWrite:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ??_spiWrite:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?_spiRead:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ??_spiRead:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_initOscilador:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_isr:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ?_main:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     spiWrite@dat:	
   349                           ; 1 bytes @ 0x0
   350                           
   351                           
   352                           ; 1 bytes @ 0x0
   353  0070                     	ds	1
   354  0071                     ??_isr:	
   355                           
   356                           ; 1 bytes @ 0x1
   357  0071                     	ds	2
   358  0073                     ?_spiInit:	
   359  0073                     ??_initOscilador:	
   360                           ; 1 bytes @ 0x3
   361                           
   362  0073                     spiInit@sDataSample:	
   363                           ; 1 bytes @ 0x3
   364                           
   365                           
   366                           ; 1 bytes @ 0x3
   367  0073                     	ds	1
   368  0074                     spiInit@sClockIdle:	
   369                           
   370                           ; 1 bytes @ 0x4
   371  0074                     	ds	1
   372  0075                     spiInit@sTransmitEdge:	
   373  0075                     initOscilador@option:	
   374                           ; 1 bytes @ 0x5
   375                           
   376                           
   377                           ; 1 bytes @ 0x5
   378  0075                     	ds	1
   379  0076                     ??_spiInit:	
   380  0076                     spiInit@sType:	
   381                           ; 1 bytes @ 0x6
   382                           
   383                           
   384                           ; 1 bytes @ 0x6
   385  0076                     	ds	1
   386  0077                     ??_setup:	
   387  0077                     ??_main:	
   388                           ; 1 bytes @ 0x7
   389                           
   390                           
   391                           ; 1 bytes @ 0x7
   392  0077                     	ds	3
   393                           
   394                           	psect	maintext
   395  00BD                     __pmaintext:	
   396 ;;
   397 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   398 ;;
   399 ;; *************** function _main *****************
   400 ;; Defined at:
   401 ;;		line 41 in file "mainTraductor.c"
   402 ;; Parameters:    Size  Location     Type
   403 ;;		None
   404 ;; Auto vars:     Size  Location     Type
   405 ;;		None
   406 ;; Return value:  Size  Location     Type
   407 ;;                  1    wreg      void 
   408 ;; Registers used:
   409 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   410 ;; Tracked objects:
   411 ;;		On entry : B00/0
   412 ;;		On exit  : 0/0
   413 ;;		Unchanged: 0/0
   414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   415 ;;      Params:         0       0       0       0       0
   416 ;;      Locals:         0       0       0       0       0
   417 ;;      Temps:          3       0       0       0       0
   418 ;;      Totals:         3       0       0       0       0
   419 ;;Total ram usage:        3 bytes
   420 ;; Hardware stack levels required when called:    5
   421 ;; This function calls:
   422 ;;		_setup
   423 ;; This function is called by:
   424 ;;		Startup code after reset
   425 ;; This function uses a non-reentrant model
   426 ;;
   427                           
   428                           
   429                           ;psect for function _main
   430  00BD                     _main:	
   431                           
   432                           ;mainTraductor.c: 42:     setup();
   433                           
   434                           ;incstack = 0
   435                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   436  00BD  120A  118A  2068  120A  118A  	fcall	_setup
   437  00C2                     l855:	
   438                           
   439                           ;mainTraductor.c: 44:         PORTB++;
   440  00C2  3001               	movlw	1
   441  00C3  00F7               	movwf	??_main
   442  00C4  0877               	movf	??_main,w
   443  00C5  1283               	bcf	3,5	;RP0=0, select bank0
   444  00C6  1303               	bcf	3,6	;RP1=0, select bank0
   445  00C7  0786               	addwf	6,f	;volatile
   446                           
   447                           ;mainTraductor.c: 45:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   448  00C8  300B               	movlw	11
   449  00C9  00F9               	movwf	??_main+2
   450  00CA  3026               	movlw	38
   451  00CB  00F8               	movwf	??_main+1
   452  00CC  305D               	movlw	93
   453  00CD  00F7               	movwf	??_main
   454  00CE                     u77:	
   455  00CE  0BF7               	decfsz	??_main,f
   456  00CF  28CE               	goto	u77
   457  00D0  0BF8               	decfsz	??_main+1,f
   458  00D1  28CE               	goto	u77
   459  00D2  0BF9               	decfsz	??_main+2,f
   460  00D3  28CE               	goto	u77
   461  00D4  28D5               	nop2
   462  00D5  28C2               	goto	l855
   463  00D6                     __end_of_main:	
   464                           
   465                           	psect	text1
   466  0068                     __ptext1:	
   467 ;; *************** function _setup *****************
   468 ;; Defined at:
   469 ;;		line 49 in file "mainTraductor.c"
   470 ;; Parameters:    Size  Location     Type
   471 ;;		None
   472 ;; Auto vars:     Size  Location     Type
   473 ;;		None
   474 ;; Return value:  Size  Location     Type
   475 ;;                  1    wreg      void 
   476 ;; Registers used:
   477 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   478 ;; Tracked objects:
   479 ;;		On entry : 0/0
   480 ;;		On exit  : 0/0
   481 ;;		Unchanged: 0/0
   482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   483 ;;      Params:         0       0       0       0       0
   484 ;;      Locals:         0       0       0       0       0
   485 ;;      Temps:          0       0       0       0       0
   486 ;;      Totals:         0       0       0       0       0
   487 ;;Total ram usage:        0 bytes
   488 ;; Hardware stack levels used:    1
   489 ;; Hardware stack levels required when called:    4
   490 ;; This function calls:
   491 ;;		_initOscilador
   492 ;;		_spiInit
   493 ;; This function is called by:
   494 ;;		_main
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498                           
   499                           ;psect for function _setup
   500  0068                     _setup:	
   501                           
   502                           ;mainTraductor.c: 50:     initOscilador(7);
   503                           
   504                           ;incstack = 0
   505                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   506  0068  3007               	movlw	7
   507  0069  120A  118A  2013  120A  118A  	fcall	_initOscilador
   508                           
   509                           ;mainTraductor.c: 51:     ANSELH = 0;
   510  006E  1683               	bsf	3,5	;RP0=1, select bank3
   511  006F  1703               	bsf	3,6	;RP1=1, select bank3
   512  0070  0189               	clrf	9	;volatile
   513                           
   514                           ;mainTraductor.c: 52:     TRISB = 0;
   515  0071  1683               	bsf	3,5	;RP0=1, select bank1
   516  0072  1303               	bcf	3,6	;RP1=0, select bank1
   517  0073  0186               	clrf	6	;volatile
   518                           
   519                           ;mainTraductor.c: 53:     PORTB = 0;
   520  0074  1283               	bcf	3,5	;RP0=0, select bank0
   521  0075  1303               	bcf	3,6	;RP1=0, select bank0
   522  0076  0186               	clrf	6	;volatile
   523                           
   524                           ;mainTraductor.c: 54:     ANSEL = 0;
   525  0077  1683               	bsf	3,5	;RP0=1, select bank3
   526  0078  1703               	bsf	3,6	;RP1=1, select bank3
   527  0079  0188               	clrf	8	;volatile
   528                           
   529                           ;mainTraductor.c: 55:     TRISD = 0;
   530  007A  1683               	bsf	3,5	;RP0=1, select bank1
   531  007B  1303               	bcf	3,6	;RP1=0, select bank1
   532  007C  0188               	clrf	8	;volatile
   533                           
   534                           ;mainTraductor.c: 56:     PORTD = 0;
   535  007D  1283               	bcf	3,5	;RP0=0, select bank0
   536  007E  1303               	bcf	3,6	;RP1=0, select bank0
   537  007F  0188               	clrf	8	;volatile
   538                           
   539                           ;mainTraductor.c: 57:     TRISA5 = 1;
   540  0080  1683               	bsf	3,5	;RP0=1, select bank1
   541  0081  1303               	bcf	3,6	;RP1=0, select bank1
   542  0082  1685               	bsf	5,5	;volatile
   543                           
   544                           ;mainTraductor.c: 58:     TRISE0 = 0;
   545  0083  1009               	bcf	9,0	;volatile
   546                           
   547                           ;mainTraductor.c: 59:     PORTEbits.RE0 = 0;
   548  0084  1283               	bcf	3,5	;RP0=0, select bank0
   549  0085  1303               	bcf	3,6	;RP1=0, select bank0
   550  0086  1009               	bcf	9,0	;volatile
   551                           
   552                           ;mainTraductor.c: 60:     INTCONbits.GIE = 1;
   553  0087  178B               	bsf	11,7	;volatile
   554                           
   555                           ;mainTraductor.c: 61:     INTCONbits.PEIE = 1;
   556  0088  170B               	bsf	11,6	;volatile
   557                           
   558                           ;mainTraductor.c: 62:     PIR1bits.SSPIF = 0;
   559  0089  118C               	bcf	12,3	;volatile
   560                           
   561                           ;mainTraductor.c: 63:     PIE1bits.SSPIE = 1;
   562  008A  1683               	bsf	3,5	;RP0=1, select bank1
   563  008B  1303               	bcf	3,6	;RP1=0, select bank1
   564  008C  158C               	bsf	12,3	;volatile
   565                           
   566                           ;mainTraductor.c: 64:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDL
      +                          E_LOW, SPI_IDLE_2_ACTIVE);
   567  008D  01F3               	clrf	spiInit@sDataSample
   568  008E  01F4               	clrf	spiInit@sClockIdle
   569  008F  01F5               	clrf	spiInit@sTransmitEdge
   570  0090  3024               	movlw	36
   571  0091  120A  118A  20D6   	fcall	_spiInit
   572  0094  0008               	return
   573  0095                     __end_of_setup:	
   574                           
   575                           	psect	text2
   576  00D6                     __ptext2:	
   577 ;; *************** function _spiInit *****************
   578 ;; Defined at:
   579 ;;		line 13 in file "SPI.c"
   580 ;; Parameters:    Size  Location     Type
   581 ;;  sType           1    wreg     enum E1264
   582 ;;  sDataSample     1    3[COMMON] enum E1272
   583 ;;  sClockIdle      1    4[COMMON] enum E1276
   584 ;;  sTransmitEdg    1    5[COMMON] enum E1280
   585 ;; Auto vars:     Size  Location     Type
   586 ;;  sType           1    6[COMMON] enum E1264
   587 ;; Return value:  Size  Location     Type
   588 ;;                  1    wreg      void 
   589 ;; Registers used:
   590 ;;		wreg, status,2, status,0
   591 ;; Tracked objects:
   592 ;;		On entry : 0/0
   593 ;;		On exit  : 0/0
   594 ;;		Unchanged: 0/0
   595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   596 ;;      Params:         3       0       0       0       0
   597 ;;      Locals:         1       0       0       0       0
   598 ;;      Temps:          0       0       0       0       0
   599 ;;      Totals:         4       0       0       0       0
   600 ;;Total ram usage:        4 bytes
   601 ;; Hardware stack levels used:    1
   602 ;; Hardware stack levels required when called:    3
   603 ;; This function calls:
   604 ;;		Nothing
   605 ;; This function is called by:
   606 ;;		_setup
   607 ;; This function uses a non-reentrant model
   608 ;;
   609                           
   610                           
   611                           ;psect for function _spiInit
   612  00D6                     _spiInit:	
   613                           
   614                           ;incstack = 0
   615                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   616                           ;spiInit@sType stored from wreg
   617  00D6  00F6               	movwf	spiInit@sType
   618                           
   619                           ;SPI.c: 13: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 14: {;SPI.c: 15:     TRISC5 = 0;
   620  00D7  1683               	bsf	3,5	;RP0=1, select bank1
   621  00D8  1303               	bcf	3,6	;RP1=0, select bank1
   622  00D9  1287               	bcf	7,5	;volatile
   623                           
   624                           ;SPI.c: 16:     if(sType & 0b00000100)
   625  00DA  1D76               	btfss	spiInit@sType,2
   626  00DB  28E0               	goto	l819
   627                           
   628                           ;SPI.c: 17:     {;SPI.c: 18:         SSPSTAT = sTransmitEdge;
   629  00DC  0875               	movf	spiInit@sTransmitEdge,w
   630  00DD  0094               	movwf	20	;volatile
   631                           
   632                           ;SPI.c: 19:         TRISC3 = 1;
   633  00DE  1587               	bsf	7,3	;volatile
   634                           
   635                           ;SPI.c: 20:     }
   636  00DF  28E4               	goto	l16
   637  00E0                     l819:	
   638                           
   639                           ;SPI.c: 22:     {;SPI.c: 23:         SSPSTAT = sDataSample | sTransmitEdge;
   640  00E0  0873               	movf	spiInit@sDataSample,w
   641  00E1  0475               	iorwf	spiInit@sTransmitEdge,w
   642  00E2  0094               	movwf	20	;volatile
   643                           
   644                           ;SPI.c: 24:         TRISC3 = 0;
   645  00E3  1187               	bcf	7,3	;volatile
   646  00E4                     l16:	
   647                           ;SPI.c: 25:     }
   648                           
   649                           
   650                           ;SPI.c: 27:     SSPCON = sType | sClockIdle;
   651  00E4  0876               	movf	spiInit@sType,w
   652  00E5  0474               	iorwf	spiInit@sClockIdle,w
   653  00E6  1283               	bcf	3,5	;RP0=0, select bank0
   654  00E7  1303               	bcf	3,6	;RP1=0, select bank0
   655  00E8  0094               	movwf	20	;volatile
   656  00E9  0008               	return
   657  00EA                     __end_of_spiInit:	
   658                           
   659                           	psect	text3
   660  0013                     __ptext3:	
   661 ;; *************** function _initOscilador *****************
   662 ;; Defined at:
   663 ;;		line 11 in file "./Oscilador.h"
   664 ;; Parameters:    Size  Location     Type
   665 ;;  option          1    wreg     unsigned char 
   666 ;; Auto vars:     Size  Location     Type
   667 ;;  option          1    5[COMMON] unsigned char 
   668 ;; Return value:  Size  Location     Type
   669 ;;                  1    wreg      void 
   670 ;; Registers used:
   671 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   672 ;; Tracked objects:
   673 ;;		On entry : 0/0
   674 ;;		On exit  : 0/0
   675 ;;		Unchanged: 0/0
   676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   677 ;;      Params:         0       0       0       0       0
   678 ;;      Locals:         1       0       0       0       0
   679 ;;      Temps:          2       0       0       0       0
   680 ;;      Totals:         3       0       0       0       0
   681 ;;Total ram usage:        3 bytes
   682 ;; Hardware stack levels used:    1
   683 ;; Hardware stack levels required when called:    3
   684 ;; This function calls:
   685 ;;		Nothing
   686 ;; This function is called by:
   687 ;;		_setup
   688 ;; This function uses a non-reentrant model
   689 ;;
   690                           
   691                           
   692                           ;psect for function _initOscilador
   693  0013                     _initOscilador:	
   694                           
   695                           ;incstack = 0
   696                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
   697                           ;initOscilador@option stored from wreg
   698  0013  00F5               	movwf	initOscilador@option
   699                           
   700                           ;./Oscilador.h: 13: 
   701  0014  2844               	goto	l729
   702  0015                     l709:	
   703                           
   704                           ;./Oscilador.h: 16:         case 3:
   705  0015  308F               	movlw	-113
   706  0016  1683               	bsf	3,5	;RP0=1, select bank1
   707  0017  1303               	bcf	3,6	;RP1=0, select bank1
   708  0018  058F               	andwf	15,f	;volatile
   709                           
   710                           ;./Oscilador.h: 17: 
   711  0019  2866               	goto	l77
   712  001A                     l711:	
   713                           
   714                           ;./Oscilador.h: 20:         case 4:
   715  001A  1683               	bsf	3,5	;RP0=1, select bank1
   716  001B  1303               	bcf	3,6	;RP1=0, select bank1
   717  001C  080F               	movf	15,w	;volatile
   718  001D  398F               	andlw	-113
   719  001E  3810               	iorlw	16
   720  001F  283D               	goto	L5
   721  0020                     l713:	
   722                           ;./Oscilador.h: 21: 
   723                           
   724                           
   725                           ;./Oscilador.h: 24:         case 5:
   726  0020  1683               	bsf	3,5	;RP0=1, select bank1
   727  0021  1303               	bcf	3,6	;RP1=0, select bank1
   728  0022  080F               	movf	15,w	;volatile
   729  0023  398F               	andlw	-113
   730  0024  3820               	iorlw	32
   731  0025  283D               	goto	L5
   732  0026                     l715:	
   733                           ;./Oscilador.h: 25: 
   734                           
   735                           
   736                           ;./Oscilador.h: 28:         case 6:
   737  0026  1683               	bsf	3,5	;RP0=1, select bank1
   738  0027  1303               	bcf	3,6	;RP1=0, select bank1
   739  0028  080F               	movf	15,w	;volatile
   740  0029  398F               	andlw	-113
   741  002A  3830               	iorlw	48
   742  002B  283D               	goto	L5
   743  002C                     l717:	
   744                           ;./Oscilador.h: 29: 
   745                           
   746                           
   747                           ;./Oscilador.h: 32:         case 7:
   748  002C  1683               	bsf	3,5	;RP0=1, select bank1
   749  002D  1303               	bcf	3,6	;RP1=0, select bank1
   750  002E  080F               	movf	15,w	;volatile
   751  002F  398F               	andlw	-113
   752  0030  3840               	iorlw	64
   753  0031  283D               	goto	L5
   754  0032                     l719:	
   755                           ;./Oscilador.h: 33: 
   756                           
   757                           
   758                           ;./Oscilador.h: 36:         default:
   759  0032  1683               	bsf	3,5	;RP0=1, select bank1
   760  0033  1303               	bcf	3,6	;RP1=0, select bank1
   761  0034  080F               	movf	15,w	;volatile
   762  0035  398F               	andlw	-113
   763  0036  3850               	iorlw	80
   764  0037  283D               	goto	L5
   765  0038                     l721:	
   766                           ;./Oscilador.h: 37: 
   767                           
   768                           
   769                           ;./Oscilador.h: 40:     }
   770  0038  1683               	bsf	3,5	;RP0=1, select bank1
   771  0039  1303               	bcf	3,6	;RP1=0, select bank1
   772  003A  080F               	movf	15,w	;volatile
   773  003B  398F               	andlw	-113
   774  003C  3860               	iorlw	96
   775  003D                     L5:	
   776  003D  008F               	movwf	15	;volatile
   777                           
   778                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
   779  003E  2866               	goto	l77
   780  003F                     l723:	
   781  003F                     l725:	
   782  003F  3070               	movlw	112
   783  0040  1683               	bsf	3,5	;RP0=1, select bank1
   784  0041  1303               	bcf	3,6	;RP1=0, select bank1
   785  0042  048F               	iorwf	15,f	;volatile
   786  0043  2866               	goto	l77
   787  0044                     l729:	
   788  0044  0875               	movf	initOscilador@option,w
   789  0045  00F3               	movwf	??_initOscilador
   790  0046  01F4               	clrf	??_initOscilador+1
   791                           
   792                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   793                           ; Switch size 1, requested type "simple"
   794                           ; Number of cases is 1, Range of values is 0 to 0
   795                           ; switch strategies available:
   796                           ; Name         Instructions Cycles
   797                           ; simple_byte            4     3 (average)
   798                           ; direct_byte           11     8 (fixed)
   799                           ; jumptable            260     6 (fixed)
   800                           ;	Chosen strategy is simple_byte
   801  0047  0874               	movf	??_initOscilador+1,w
   802  0048  3A00               	xorlw	0	; case 0
   803  0049  1903               	skipnz
   804  004A  284C               	goto	l879
   805  004B  283F               	goto	l725
   806  004C                     l879:	
   807                           
   808                           ; Switch size 1, requested type "simple"
   809                           ; Number of cases is 8, Range of values is 0 to 7
   810                           ; switch strategies available:
   811                           ; Name         Instructions Cycles
   812                           ; simple_byte           25    13 (average)
   813                           ; direct_byte           32     8 (fixed)
   814                           ; jumptable            260     6 (fixed)
   815                           ;	Chosen strategy is simple_byte
   816  004C  0873               	movf	??_initOscilador,w
   817  004D  3A00               	xorlw	0	; case 0
   818  004E  1903               	skipnz
   819  004F  2815               	goto	l709
   820  0050  3A01               	xorlw	1	; case 1
   821  0051  1903               	skipnz
   822  0052  281A               	goto	l711
   823  0053  3A03               	xorlw	3	; case 2
   824  0054  1903               	skipnz
   825  0055  2820               	goto	l713
   826  0056  3A01               	xorlw	1	; case 3
   827  0057  1903               	skipnz
   828  0058  2826               	goto	l715
   829  0059  3A07               	xorlw	7	; case 4
   830  005A  1903               	skipnz
   831  005B  282C               	goto	l717
   832  005C  3A01               	xorlw	1	; case 5
   833  005D  1903               	skipnz
   834  005E  2832               	goto	l719
   835  005F  3A03               	xorlw	3	; case 6
   836  0060  1903               	skipnz
   837  0061  2838               	goto	l721
   838  0062  3A01               	xorlw	1	; case 7
   839  0063  1903               	skipnz
   840  0064  283F               	goto	l723
   841  0065  283F               	goto	l725
   842  0066                     l77:	
   843  0066  140F               	bsf	15,0	;volatile
   844  0067  0008               	return
   845  0068                     __end_of_initOscilador:	
   846                           
   847                           	psect	text4
   848  0095                     __ptext4:	
   849 ;; *************** function _isr *****************
   850 ;; Defined at:
   851 ;;		line 32 in file "mainTraductor.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;		None
   854 ;; Auto vars:     Size  Location     Type
   855 ;;		None
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, status,2, status,0, pclath, cstack
   860 ;; Tracked objects:
   861 ;;		On entry : 0/0
   862 ;;		On exit  : 0/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   865 ;;      Params:         0       0       0       0       0
   866 ;;      Locals:         0       0       0       0       0
   867 ;;      Temps:          2       0       0       0       0
   868 ;;      Totals:         2       0       0       0       0
   869 ;;Total ram usage:        2 bytes
   870 ;; Hardware stack levels used:    1
   871 ;; Hardware stack levels required when called:    2
   872 ;; This function calls:
   873 ;;		_spiRead
   874 ;;		_spiWrite
   875 ;; This function is called by:
   876 ;;		Interrupt level 1
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880                           
   881                           ;psect for function _isr
   882  0095                     _isr:	
   883                           
   884                           ;mainTraductor.c: 33:    if(SSPIF == 1){
   885  0095  1283               	bcf	3,5	;RP0=0, select bank0
   886  0096  1303               	bcf	3,6	;RP1=0, select bank0
   887  0097  1D8C               	btfss	12,3	;volatile
   888  0098  28B6               	goto	i1l92
   889                           
   890                           ;mainTraductor.c: 34:         PORTD = spiRead();
   891  0099  120A  118A  20EA  120A  118A  	fcall	_spiRead
   892  009E  1283               	bcf	3,5	;RP0=0, select bank0
   893  009F  1303               	bcf	3,6	;RP1=0, select bank0
   894  00A0  0088               	movwf	8	;volatile
   895                           
   896                           ;mainTraductor.c: 35:         spiWrite(PORTD);
   897  00A1  0808               	movf	8,w	;volatile
   898  00A2  120A  118A  20F1  120A  118A  	fcall	_spiWrite
   899                           
   900                           ;mainTraductor.c: 36:         PORTEbits.RE0 = ~PORTEbits.RE0;
   901  00A7  1003               	clrc
   902  00A8  1283               	bcf	3,5	;RP0=0, select bank0
   903  00A9  1303               	bcf	3,6	;RP1=0, select bank0
   904  00AA  1C09               	btfss	9,0	;volatile
   905  00AB  1403               	setc
   906  00AC  1C03               	btfss	3,0
   907  00AD  28B2               	goto	u4_20
   908  00AE  1283               	bcf	3,5	;RP0=0, select bank0
   909  00AF  1303               	bcf	3,6	;RP1=0, select bank0
   910  00B0  1409               	bsf	9,0	;volatile
   911  00B1  28B5               	goto	i1l785
   912  00B2                     u4_20:	
   913  00B2  1283               	bcf	3,5	;RP0=0, select bank0
   914  00B3  1303               	bcf	3,6	;RP1=0, select bank0
   915  00B4  1009               	bcf	9,0	;volatile
   916  00B5                     i1l785:	
   917                           
   918                           ;mainTraductor.c: 37:         SSPIF = 0;
   919  00B5  118C               	bcf	12,3	;volatile
   920  00B6                     i1l92:	
   921  00B6  0872               	movf	??_isr+1,w
   922  00B7  008A               	movwf	10
   923  00B8  0E71               	swapf	??_isr^(0+4294967168),w
   924  00B9  0083               	movwf	3
   925  00BA  0EFE               	swapf	126,f
   926  00BB  0E7E               	swapf	126,w
   927  00BC  0009               	retfie
   928  00BD                     __end_of_isr:	
   929                           
   930                           	psect	intentry
   931  0004                     __pintentry:	
   932                           ;incstack = 0
   933                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
   934                           
   935  0004                     interrupt_function:	
   936  007E                     saved_w	set	btemp
   937  0004  00FE               	movwf	btemp
   938  0005  0E03               	swapf	3,w
   939  0006  00F1               	movwf	??_isr
   940  0007  080A               	movf	10,w
   941  0008  00F2               	movwf	??_isr+1
   942  0009  120A  118A  2895   	ljmp	_isr
   943                           
   944                           	psect	text5
   945  00F1                     __ptext5:	
   946 ;; *************** function _spiWrite *****************
   947 ;; Defined at:
   948 ;;		line 35 in file "SPI.c"
   949 ;; Parameters:    Size  Location     Type
   950 ;;  dat             1    wreg     unsigned char 
   951 ;; Auto vars:     Size  Location     Type
   952 ;;  dat             1    0[COMMON] unsigned char 
   953 ;; Return value:  Size  Location     Type
   954 ;;                  1    wreg      void 
   955 ;; Registers used:
   956 ;;		wreg
   957 ;; Tracked objects:
   958 ;;		On entry : 0/0
   959 ;;		On exit  : 0/0
   960 ;;		Unchanged: 0/0
   961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   962 ;;      Params:         0       0       0       0       0
   963 ;;      Locals:         1       0       0       0       0
   964 ;;      Temps:          0       0       0       0       0
   965 ;;      Totals:         1       0       0       0       0
   966 ;;Total ram usage:        1 bytes
   967 ;; Hardware stack levels used:    1
   968 ;; This function calls:
   969 ;;		Nothing
   970 ;; This function is called by:
   971 ;;		_isr
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           
   976                           ;psect for function _spiWrite
   977  00F1                     _spiWrite:	
   978                           
   979                           ;incstack = 0
   980                           ; Regs used in _spiWrite: [wreg]
   981                           ;spiWrite@dat stored from wreg
   982  00F1  00F0               	movwf	spiWrite@dat
   983                           
   984                           ;SPI.c: 35: void spiWrite(char dat);SPI.c: 36: {;SPI.c: 37:     SSPBUF = dat;
   985  00F2  0870               	movf	spiWrite@dat,w
   986  00F3  1283               	bcf	3,5	;RP0=0, select bank0
   987  00F4  1303               	bcf	3,6	;RP1=0, select bank0
   988  00F5  0093               	movwf	19	;volatile
   989  00F6  0008               	return
   990  00F7                     __end_of_spiWrite:	
   991                           
   992                           	psect	text6
   993  00EA                     __ptext6:	
   994 ;; *************** function _spiRead *****************
   995 ;; Defined at:
   996 ;;		line 48 in file "SPI.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;		None
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;		None
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      unsigned char 
  1003 ;; Registers used:
  1004 ;;		wreg, status,2, status,0, pclath, cstack
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1010 ;;      Params:         0       0       0       0       0
  1011 ;;      Locals:         0       0       0       0       0
  1012 ;;      Temps:          0       0       0       0       0
  1013 ;;      Totals:         0       0       0       0       0
  1014 ;;Total ram usage:        0 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; Hardware stack levels required when called:    1
  1017 ;; This function calls:
  1018 ;;		_spiReceiveWait
  1019 ;; This function is called by:
  1020 ;;		_isr
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           
  1025                           ;psect for function _spiRead
  1026  00EA                     _spiRead:	
  1027                           
  1028                           ;SPI.c: 50:     spiReceiveWait();
  1029                           
  1030                           ;incstack = 0
  1031                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1032  00EA  120A  118A  20F7   	fcall	_spiReceiveWait
  1033                           
  1034                           ;SPI.c: 51:     return(SSPBUF);
  1035  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  1036  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  1037  00EF  0813               	movf	19,w	;volatile
  1038  00F0  0008               	return
  1039  00F1                     __end_of_spiRead:	
  1040                           
  1041                           	psect	text7
  1042  00F7                     __ptext7:	
  1043 ;; *************** function _spiReceiveWait *****************
  1044 ;; Defined at:
  1045 ;;		line 30 in file "SPI.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;		None
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;		None
  1050 ;; Return value:  Size  Location     Type
  1051 ;;                  1    wreg      void 
  1052 ;; Registers used:
  1053 ;;		None
  1054 ;; Tracked objects:
  1055 ;;		On entry : 0/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1059 ;;      Params:         0       0       0       0       0
  1060 ;;      Locals:         0       0       0       0       0
  1061 ;;      Temps:          0       0       0       0       0
  1062 ;;      Totals:         0       0       0       0       0
  1063 ;;Total ram usage:        0 bytes
  1064 ;; Hardware stack levels used:    1
  1065 ;; This function calls:
  1066 ;;		Nothing
  1067 ;; This function is called by:
  1068 ;;		_spiRead
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           
  1073                           ;psect for function _spiReceiveWait
  1074  00F7                     _spiReceiveWait:	
  1075  00F7                     i1l20:	
  1076                           ;SPI.c: 32:     while ( !SSPSTATbits.BF );
  1077                           
  1078                           ;incstack = 0
  1079                           ; Regs used in _spiReceiveWait: []
  1080                           
  1081  00F7  1683               	bsf	3,5	;RP0=1, select bank1
  1082  00F8  1303               	bcf	3,6	;RP1=0, select bank1
  1083  00F9  1814               	btfsc	20,0	;volatile
  1084  00FA  0008               	return
  1085  00FB  28F7               	goto	i1l20
  1086  00FC                     __end_of_spiReceiveWait:	
  1087  007E                     btemp	set	126	;btemp
  1088  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _setup->_spiInit

Critical Paths under _isr in COMMON

    _isr->_spiWrite

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     375
                                              7 COMMON     3     3      0
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     375
                      _initOscilador
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     360
                                              3 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      15
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  2     2      0      15
                                              1 COMMON     2     2      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (4) _spiWrite                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (5) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _initOscilador
     _spiInit

 _isr (ROOT)
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Mar 03 12:37:13 2019

             __CFG_CP$OFF 0000               _SSPSTATbits 0094                        l16 00E4  
                      l77 0066                        u77 00CE                       l711 001A  
                     l721 0038                       l713 0020                       l723 003F  
                     l715 0026                       l725 003F                       l717 002C  
                     l709 0015                       l719 0032                       l729 0044  
                     l819 00E0                       l855 00C2                       l879 004C  
            __CFG_CPD$OFF 0000                       _isr 0095              __CFG_LVP$OFF 0000  
                    ?_isr 0070                      i1l20 00F7                      i1l92 00B6  
                    u4_20 00B2              __CFG_WRT$OFF 0000                      _main 00BD  
                    btemp 007E                      start 000C             __CFG_IESO$OFF 0000  
           __CFG_MCLRE$ON 0000                     ??_isr 0071                     ?_main 0070  
           __CFG_WDTE$OFF 0000                     _ANSEL 0188                     i1l785 00B5  
                   _PORTB 0006                     _PORTD 0008                     _TRISB 0086  
                   _TRISD 0088                     _SSPIF 0063            __CFG_FCMEN$OFF 0000  
                   _setup 0068            __CFG_BOREN$OFF 0000                     pclath 000A  
         __end_of_spiInit 00EA           __end_of_spiRead 00F1                     status 0003  
                   wtemp0 007E           __initialization 000F              __end_of_main 00D6  
  __size_of_initOscilador 0055                    ??_main 0077                    ?_setup 0070  
                  _ANSELH 0189                    _TRISA5 042D                    _TRISC3 043B  
                  _TRISE0 0448                    _TRISC5 043D                    _SSPCON 0014  
                  _SSPBUF 0013            __CFG_PWRTE$OFF 0000                    saved_w 007E  
        __end_of_spiWrite 00F7                 ??_spiInit 0076                 ??_spiRead 0070  
 __end_of__initialization 000F             _initOscilador 0013            __pcstackCOMMON 0070  
           __end_of_setup 0095                   ??_setup 0077            ?_initOscilador 0070  
              __pmaintext 00BD                __pintentry 0004   __size_of_spiReceiveWait 0005  
                 _SSPSTAT 0094       initOscilador@option 0075                 ?_spiWrite 0070  
                 __ptext1 0068                   __ptext2 00D6                   __ptext3 0013  
                 __ptext4 0095                   __ptext5 00F1                   __ptext6 00EA  
                 __ptext7 00F7              __size_of_isr 0028                   _spiInit 00D6  
                 _spiRead 00EA           ??_initOscilador 0073      end_of_initialization 000F  
              ??_spiWrite 0070                 _PORTEbits 0009               spiWrite@dat 0070  
          _spiReceiveWait 00F7       start_initialization 000F               __end_of_isr 00BD  
__CFG_FOSC$INTRC_NOCLKOUT 0000    __end_of_spiReceiveWait 00FC                 ___latbits 0002  
         ?_spiReceiveWait 0070         __size_of_spiWrite 0006                  ?_spiInit 0073  
                ?_spiRead 0070            __size_of_setup 002D      spiInit@sTransmitEdge 0075  
       interrupt_function 0004                  _PIE1bits 008C        spiInit@sDataSample 0073  
                _PIR1bits 000C     __end_of_initOscilador 0068          __size_of_spiInit 0014  
        __size_of_spiRead 0007         __CFG_BOR4V$BOR40V 0000             __size_of_main 0019  
                _spiWrite 00F1              spiInit@sType 0076         spiInit@sClockIdle 0074  
              _INTCONbits 000B                  intlevel1 0000          ??_spiReceiveWait 0070  
              _OSCCONbits 008F  

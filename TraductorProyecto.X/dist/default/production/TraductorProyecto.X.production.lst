

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Mar 09 20:20:18 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.05
    24                           ; Generated 20/12/2018 GMT
    25                           ; 
    26                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F887 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  008F                     	;# 
   102  0090                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0093                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0095                     	;# 
   110  0096                     	;# 
   111  0097                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009E                     	;# 
   119  009F                     	;# 
   120  0105                     	;# 
   121  0107                     	;# 
   122  0108                     	;# 
   123  0109                     	;# 
   124  010C                     	;# 
   125  010C                     	;# 
   126  010D                     	;# 
   127  010E                     	;# 
   128  010F                     	;# 
   129  0185                     	;# 
   130  0187                     	;# 
   131  0188                     	;# 
   132  0189                     	;# 
   133  018C                     	;# 
   134  018D                     	;# 
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  0007                     	;# 
   143  0008                     	;# 
   144  0009                     	;# 
   145  000A                     	;# 
   146  000B                     	;# 
   147  000C                     	;# 
   148  000D                     	;# 
   149  000E                     	;# 
   150  000E                     	;# 
   151  000F                     	;# 
   152  0010                     	;# 
   153  0011                     	;# 
   154  0012                     	;# 
   155  0013                     	;# 
   156  0014                     	;# 
   157  0015                     	;# 
   158  0015                     	;# 
   159  0016                     	;# 
   160  0017                     	;# 
   161  0018                     	;# 
   162  0019                     	;# 
   163  001A                     	;# 
   164  001B                     	;# 
   165  001B                     	;# 
   166  001C                     	;# 
   167  001D                     	;# 
   168  001E                     	;# 
   169  001F                     	;# 
   170  0081                     	;# 
   171  0085                     	;# 
   172  0086                     	;# 
   173  0087                     	;# 
   174  0088                     	;# 
   175  0089                     	;# 
   176  008C                     	;# 
   177  008D                     	;# 
   178  008E                     	;# 
   179  008F                     	;# 
   180  0090                     	;# 
   181  0091                     	;# 
   182  0092                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0098                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  009F                     	;# 
   198  0105                     	;# 
   199  0107                     	;# 
   200  0108                     	;# 
   201  0109                     	;# 
   202  010C                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  0185                     	;# 
   208  0187                     	;# 
   209  0188                     	;# 
   210  0189                     	;# 
   211  018C                     	;# 
   212  018D                     	;# 
   213  0000                     	;# 
   214  0001                     	;# 
   215  0002                     	;# 
   216  0003                     	;# 
   217  0004                     	;# 
   218  0005                     	;# 
   219  0006                     	;# 
   220  0007                     	;# 
   221  0008                     	;# 
   222  0009                     	;# 
   223  000A                     	;# 
   224  000B                     	;# 
   225  000C                     	;# 
   226  000D                     	;# 
   227  000E                     	;# 
   228  000E                     	;# 
   229  000F                     	;# 
   230  0010                     	;# 
   231  0011                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0014                     	;# 
   235  0015                     	;# 
   236  0015                     	;# 
   237  0016                     	;# 
   238  0017                     	;# 
   239  0018                     	;# 
   240  0019                     	;# 
   241  001A                     	;# 
   242  001B                     	;# 
   243  001B                     	;# 
   244  001C                     	;# 
   245  001D                     	;# 
   246  001E                     	;# 
   247  001F                     	;# 
   248  0081                     	;# 
   249  0085                     	;# 
   250  0086                     	;# 
   251  0087                     	;# 
   252  0088                     	;# 
   253  0089                     	;# 
   254  008C                     	;# 
   255  008D                     	;# 
   256  008E                     	;# 
   257  008F                     	;# 
   258  0090                     	;# 
   259  0091                     	;# 
   260  0092                     	;# 
   261  0093                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0094                     	;# 
   265  0095                     	;# 
   266  0096                     	;# 
   267  0097                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009A                     	;# 
   271  009B                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  009F                     	;# 
   276  0105                     	;# 
   277  0107                     	;# 
   278  0108                     	;# 
   279  0109                     	;# 
   280  010C                     	;# 
   281  010C                     	;# 
   282  010D                     	;# 
   283  010E                     	;# 
   284  010F                     	;# 
   285  0185                     	;# 
   286  0187                     	;# 
   287  0188                     	;# 
   288  0189                     	;# 
   289  018C                     	;# 
   290  018D                     	;# 
   291  000B                     _INTCONbits	set	11
   292  0008                     _PORTD	set	8
   293  0006                     _PORTB	set	6
   294  0008                     _PORTDbits	set	8
   295  0019                     _TXREG	set	25
   296  000C                     _PIR1bits	set	12
   297  001A                     _RCREG	set	26
   298  0013                     _SSPBUF	set	19
   299  0014                     _SSPCON	set	20
   300  0063                     _SSPIF	set	99
   301  0030                     _RB0	set	48
   302  0065                     _RCIF	set	101
   303  00C4                     _CREN	set	196
   304  00C7                     _SPEN	set	199
   305  008C                     _PIE1bits	set	140
   306  0087                     _TRISCbits	set	135
   307  0085                     _TRISAbits	set	133
   308  0088                     _TRISD	set	136
   309  0086                     _TRISB	set	134
   310  0099                     _SPBRG	set	153
   311  008F                     _OSCCONbits	set	143
   312  0094                     _SSPSTATbits	set	148
   313  0094                     _SSPSTAT	set	148
   314  04C1                     _TRMT	set	1217
   315  04C5                     _TXEN	set	1221
   316  043E                     _TRISC6	set	1086
   317  043F                     _TRISC7	set	1087
   318  04C4                     _SYNC	set	1220
   319  04C2                     _BRGH	set	1218
   320  043B                     _TRISC3	set	1083
   321  043D                     _TRISC5	set	1085
   322  0188                     _ANSEL	set	392
   323  0189                     _ANSELH	set	393
   324                           
   325                           ; #config settings
   326  0000                     
   327                           	psect	cinit
   328  0011                     start_initialization:	
   329  0011                     __initialization:	
   330                           
   331                           ; Clear objects allocated to COMMON
   332  0011  01F0               	clrf	__pbssCOMMON& (0+127)
   333  0012  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   334  0013  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   335  0014  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   336  0015  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   337                           
   338                           ; Clear objects allocated to BANK0
   339  0016  1283               	bcf	3,5	;RP0=0, select bank0
   340  0017  1303               	bcf	3,6	;RP1=0, select bank0
   341  0018  01C2               	clrf	__pbssBANK0& (0+127)
   342  0019  01C3               	clrf	(__pbssBANK0+1)& (0+127)
   343  001A  01C4               	clrf	(__pbssBANK0+2)& (0+127)
   344  001B  01C5               	clrf	(__pbssBANK0+3)& (0+127)
   345  001C  01C6               	clrf	(__pbssBANK0+4)& (0+127)
   346  001D  01C7               	clrf	(__pbssBANK0+5)& (0+127)
   347  001E  01C8               	clrf	(__pbssBANK0+6)& (0+127)
   348  001F  01C9               	clrf	(__pbssBANK0+7)& (0+127)
   349  0020  01CA               	clrf	(__pbssBANK0+8)& (0+127)
   350  0021  01CB               	clrf	(__pbssBANK0+9)& (0+127)
   351  0022                     end_of_initialization:	
   352                           ;End of C runtime variable initialization code
   353                           
   354  0022                     __end_of__initialization:	
   355  0022  0183               	clrf	3
   356  0023  120A  118A  298E   	ljmp	_main	;jump to C main() function
   357                           
   358                           	psect	bssCOMMON
   359  0070                     __pbssCOMMON:	
   360  0070                     _temp:	
   361  0070                     	ds	1
   362  0071                     _j:	
   363  0071                     	ds	1
   364  0072                     _done:	
   365  0072                     	ds	1
   366  0073                     _i:	
   367  0073                     	ds	1
   368  0074                     _val:	
   369  0074                     	ds	1
   370                           
   371                           	psect	bssBANK0
   372  0042                     __pbssBANK0:	
   373  0042                     _info:	
   374  0042                     	ds	9
   375  004B                     _received:	
   376  004B                     	ds	1
   377                           
   378                           	psect	cstackCOMMON
   379  0075                     __pcstackCOMMON:	
   380  0075                     ?_setup:	
   381  0075                     ?_spiReceiveWait:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0075                     ??_spiReceiveWait:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0075                     ?_spiWrite:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0075                     ??_spiWrite:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0075                     ?_spiRead:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0075                     ??_spiRead:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0075                     ?_UART_Read:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0075                     ??_UART_Read:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0075                     ?_UART_Write:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0075                     ?_isr:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0075                     ?_main:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0075                     spiWrite@dat:	
   415                           ; 1 bytes @ 0x0
   416                           
   417                           
   418                           ; 1 bytes @ 0x0
   419  0075                     	ds	1
   420  0076                     ??_isr:	
   421                           
   422                           ; 1 bytes @ 0x1
   423  0076                     	ds	4
   424                           
   425                           	psect	cstackBANK0
   426  0020                     __pcstackBANK0:	
   427  0020                     ?_spiInit:	
   428  0020                     ??_UART_Write:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0020                     ?___aldiv:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0020                     spiInit@sDataSample:	
   435                           ; 4 bytes @ 0x0
   436                           
   437  0020                     UART_Write@data:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0020                     ___aldiv@divisor:	
   441                           ; 1 bytes @ 0x0
   442                           
   443                           
   444                           ; 4 bytes @ 0x0
   445  0020                     	ds	1
   446  0021                     spiInit@sClockIdle:	
   447                           
   448                           ; 1 bytes @ 0x1
   449  0021                     	ds	1
   450  0022                     spiInit@sTransmitEdge:	
   451                           
   452                           ; 1 bytes @ 0x2
   453  0022                     	ds	1
   454  0023                     ??_spiInit:	
   455  0023                     spiInit@sType:	
   456                           ; 1 bytes @ 0x3
   457                           
   458                           
   459                           ; 1 bytes @ 0x3
   460  0023                     	ds	1
   461  0024                     ___aldiv@dividend:	
   462                           
   463                           ; 4 bytes @ 0x4
   464  0024                     	ds	4
   465  0028                     ??___aldiv:	
   466                           
   467                           ; 1 bytes @ 0x8
   468  0028                     	ds	1
   469  0029                     ___aldiv@counter:	
   470                           
   471                           ; 1 bytes @ 0x9
   472  0029                     	ds	1
   473  002A                     ___aldiv@sign:	
   474                           
   475                           ; 1 bytes @ 0xA
   476  002A                     	ds	1
   477  002B                     ___aldiv@quotient:	
   478                           
   479                           ; 4 bytes @ 0xB
   480  002B                     	ds	4
   481  002F                     ?_UART_Init:	
   482  002F                     UART_Init@baudrate:	
   483                           ; 1 bytes @ 0xF
   484                           
   485                           
   486                           ; 4 bytes @ 0xF
   487  002F                     	ds	4
   488  0033                     ??_UART_Init:	
   489                           
   490                           ; 1 bytes @ 0x13
   491  0033                     	ds	12
   492  003F                     UART_Init@x:	
   493                           
   494                           ; 2 bytes @ 0x1F
   495  003F                     	ds	2
   496  0041                     ??_setup:	
   497  0041                     ??_main:	
   498                           ; 1 bytes @ 0x21
   499                           
   500                           
   501                           ; 1 bytes @ 0x21
   502  0041                     	ds	1
   503                           
   504                           	psect	maintext
   505  018E                     __pmaintext:	
   506 ;;
   507 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   508 ;;
   509 ;; *************** function _main *****************
   510 ;; Defined at:
   511 ;;		line 56 in file "mainTraductor.c"
   512 ;; Parameters:    Size  Location     Type
   513 ;;		None
   514 ;; Auto vars:     Size  Location     Type
   515 ;;		None
   516 ;; Return value:  Size  Location     Type
   517 ;;                  1    wreg      void 
   518 ;; Registers used:
   519 ;;		wreg, status,2, status,0, pclath, cstack
   520 ;; Tracked objects:
   521 ;;		On entry : B00/0
   522 ;;		On exit  : 0/0
   523 ;;		Unchanged: 0/0
   524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   525 ;;      Params:         0       0       0       0       0
   526 ;;      Locals:         0       0       0       0       0
   527 ;;      Temps:          0       1       0       0       0
   528 ;;      Totals:         0       1       0       0       0
   529 ;;Total ram usage:        1 bytes
   530 ;; Hardware stack levels required when called:    6
   531 ;; This function calls:
   532 ;;		_UART_Write
   533 ;;		_setup
   534 ;; This function is called by:
   535 ;;		Startup code after reset
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539                           
   540                           ;psect for function _main
   541  018E                     _main:	
   542                           
   543                           ;mainTraductor.c: 57:     setup();
   544                           
   545                           ;incstack = 0
   546                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   547  018E  120A  118A  223E  120A  118A  	fcall	_setup
   548  0193                     l1313:	
   549                           
   550                           ;mainTraductor.c: 59:         if (done == 1){
   551  0193  0372               	decf	_done,w
   552  0194  1D03               	btfss	3,2
   553  0195  2993               	goto	l1313
   554                           
   555                           ;mainTraductor.c: 60:             info[8] = 'A';
   556  0196  3041               	movlw	65
   557  0197  1283               	bcf	3,5	;RP0=0, select bank0
   558  0198  1303               	bcf	3,6	;RP1=0, select bank0
   559  0199  00C1               	movwf	??_main
   560  019A  0841               	movf	??_main,w
   561  019B  00CA               	movwf	_info+8
   562                           
   563                           ;mainTraductor.c: 61:             UART_Write(info[0]);
   564  019C  0842               	movf	_info,w
   565  019D  120A  118A  22A0  120A  118A  	fcall	_UART_Write
   566                           
   567                           ;mainTraductor.c: 62:             UART_Write(info[1]);
   568  01A2  1283               	bcf	3,5	;RP0=0, select bank0
   569  01A3  1303               	bcf	3,6	;RP1=0, select bank0
   570  01A4  0843               	movf	_info+1,w
   571  01A5  120A  118A  22A0  120A  118A  	fcall	_UART_Write
   572                           
   573                           ;mainTraductor.c: 63:             UART_Write(info[2]);
   574  01AA  1283               	bcf	3,5	;RP0=0, select bank0
   575  01AB  1303               	bcf	3,6	;RP1=0, select bank0
   576  01AC  0844               	movf	_info+2,w
   577  01AD  120A  118A  22A0  120A  118A  	fcall	_UART_Write
   578                           
   579                           ;mainTraductor.c: 64:             UART_Write(info[3]);
   580  01B2  1283               	bcf	3,5	;RP0=0, select bank0
   581  01B3  1303               	bcf	3,6	;RP1=0, select bank0
   582  01B4  0845               	movf	_info+3,w
   583  01B5  120A  118A  22A0  120A  118A  	fcall	_UART_Write
   584                           
   585                           ;mainTraductor.c: 65:             UART_Write(info[4]);
   586  01BA  1283               	bcf	3,5	;RP0=0, select bank0
   587  01BB  1303               	bcf	3,6	;RP1=0, select bank0
   588  01BC  0846               	movf	_info+4,w
   589  01BD  120A  118A  22A0  120A  118A  	fcall	_UART_Write
   590                           
   591                           ;mainTraductor.c: 66:             UART_Write(info[5]);
   592  01C2  1283               	bcf	3,5	;RP0=0, select bank0
   593  01C3  1303               	bcf	3,6	;RP1=0, select bank0
   594  01C4  0847               	movf	_info+5,w
   595  01C5  120A  118A  22A0  120A  118A  	fcall	_UART_Write
   596                           
   597                           ;mainTraductor.c: 67:             UART_Write(info[6]);
   598  01CA  1283               	bcf	3,5	;RP0=0, select bank0
   599  01CB  1303               	bcf	3,6	;RP1=0, select bank0
   600  01CC  0848               	movf	_info+6,w
   601  01CD  120A  118A  22A0  120A  118A  	fcall	_UART_Write
   602                           
   603                           ;mainTraductor.c: 68:             UART_Write(info[7]);
   604  01D2  1283               	bcf	3,5	;RP0=0, select bank0
   605  01D3  1303               	bcf	3,6	;RP1=0, select bank0
   606  01D4  0849               	movf	_info+7,w
   607  01D5  120A  118A  22A0  120A  118A  	fcall	_UART_Write
   608                           
   609                           ;mainTraductor.c: 69:             UART_Write(info[8]);
   610  01DA  1283               	bcf	3,5	;RP0=0, select bank0
   611  01DB  1303               	bcf	3,6	;RP1=0, select bank0
   612  01DC  084A               	movf	_info+8,w
   613  01DD  120A  118A  22A0  120A  118A  	fcall	_UART_Write
   614                           
   615                           ;mainTraductor.c: 70:             done = 0;
   616  01E2  01F2               	clrf	_done
   617                           
   618                           ;mainTraductor.c: 71:             i = 0;
   619  01E3  01F3               	clrf	_i
   620                           
   621                           ;mainTraductor.c: 72:             RB0 = 0;
   622  01E4  1283               	bcf	3,5	;RP0=0, select bank0
   623  01E5  1303               	bcf	3,6	;RP1=0, select bank0
   624  01E6  1006               	bcf	6,0	;volatile
   625  01E7  2993               	goto	l1313
   626  01E8                     __end_of_main:	
   627                           
   628                           	psect	text1
   629  023E                     __ptext1:	
   630 ;; *************** function _setup *****************
   631 ;; Defined at:
   632 ;;		line 77 in file "mainTraductor.c"
   633 ;; Parameters:    Size  Location     Type
   634 ;;		None
   635 ;; Auto vars:     Size  Location     Type
   636 ;;		None
   637 ;; Return value:  Size  Location     Type
   638 ;;                  1    wreg      void 
   639 ;; Registers used:
   640 ;;		wreg, status,2, status,0, pclath, cstack
   641 ;; Tracked objects:
   642 ;;		On entry : 0/0
   643 ;;		On exit  : 0/0
   644 ;;		Unchanged: 0/0
   645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   646 ;;      Params:         0       0       0       0       0
   647 ;;      Locals:         0       0       0       0       0
   648 ;;      Temps:          0       0       0       0       0
   649 ;;      Totals:         0       0       0       0       0
   650 ;;Total ram usage:        0 bytes
   651 ;; Hardware stack levels used:    1
   652 ;; Hardware stack levels required when called:    5
   653 ;; This function calls:
   654 ;;		_UART_Init
   655 ;;		_spiInit
   656 ;; This function is called by:
   657 ;;		_main
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           
   662                           ;psect for function _setup
   663  023E                     _setup:	
   664                           
   665                           ;mainTraductor.c: 78:     OSCCONbits.IRCF0 = 1;
   666                           
   667                           ;incstack = 0
   668                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   669  023E  1683               	bsf	3,5	;RP0=1, select bank1
   670  023F  1303               	bcf	3,6	;RP1=0, select bank1
   671  0240  160F               	bsf	15,4	;volatile
   672                           
   673                           ;mainTraductor.c: 79:     OSCCONbits.IRCF1 = 1;
   674  0241  168F               	bsf	15,5	;volatile
   675                           
   676                           ;mainTraductor.c: 80:     OSCCONbits.IRCF2 = 1;
   677  0242  170F               	bsf	15,6	;volatile
   678                           
   679                           ;mainTraductor.c: 81:     OSCCONbits.SCS = 1;
   680  0243  140F               	bsf	15,0	;volatile
   681                           
   682                           ;mainTraductor.c: 82:     val = 0;
   683  0244  01F4               	clrf	_val
   684                           
   685                           ;mainTraductor.c: 83:     i = 0;
   686  0245  01F3               	clrf	_i
   687                           
   688                           ;mainTraductor.c: 84:     j = 0;
   689  0246  01F1               	clrf	_j
   690                           
   691                           ;mainTraductor.c: 85:     ANSELH = 0;
   692  0247  1683               	bsf	3,5	;RP0=1, select bank3
   693  0248  1703               	bsf	3,6	;RP1=1, select bank3
   694  0249  0189               	clrf	9	;volatile
   695                           
   696                           ;mainTraductor.c: 86:     TRISB = 0;
   697  024A  1683               	bsf	3,5	;RP0=1, select bank1
   698  024B  1303               	bcf	3,6	;RP1=0, select bank1
   699  024C  0186               	clrf	6	;volatile
   700                           
   701                           ;mainTraductor.c: 87:     PORTB = 0;
   702  024D  1283               	bcf	3,5	;RP0=0, select bank0
   703  024E  1303               	bcf	3,6	;RP1=0, select bank0
   704  024F  0186               	clrf	6	;volatile
   705                           
   706                           ;mainTraductor.c: 88:     ANSEL = 0;
   707  0250  1683               	bsf	3,5	;RP0=1, select bank3
   708  0251  1703               	bsf	3,6	;RP1=1, select bank3
   709  0252  0188               	clrf	8	;volatile
   710                           
   711                           ;mainTraductor.c: 89:     TRISD = 0;
   712  0253  1683               	bsf	3,5	;RP0=1, select bank1
   713  0254  1303               	bcf	3,6	;RP1=0, select bank1
   714  0255  0188               	clrf	8	;volatile
   715                           
   716                           ;mainTraductor.c: 90:     PORTD = 0;
   717  0256  1283               	bcf	3,5	;RP0=0, select bank0
   718  0257  1303               	bcf	3,6	;RP1=0, select bank0
   719  0258  0188               	clrf	8	;volatile
   720                           
   721                           ;mainTraductor.c: 91:     TRISAbits.TRISA5 = 1;
   722  0259  1683               	bsf	3,5	;RP0=1, select bank1
   723  025A  1303               	bcf	3,6	;RP1=0, select bank1
   724  025B  1685               	bsf	5,5	;volatile
   725                           
   726                           ;mainTraductor.c: 92:     TRISCbits.TRISC3 = 1;
   727  025C  1587               	bsf	7,3	;volatile
   728                           
   729                           ;mainTraductor.c: 93:     INTCONbits.GIE = 1;
   730  025D  178B               	bsf	11,7	;volatile
   731                           
   732                           ;mainTraductor.c: 94:     INTCONbits.PEIE = 1;
   733  025E  170B               	bsf	11,6	;volatile
   734                           
   735                           ;mainTraductor.c: 95:     PIR1bits.SSPIF = 0;
   736  025F  1283               	bcf	3,5	;RP0=0, select bank0
   737  0260  1303               	bcf	3,6	;RP1=0, select bank0
   738  0261  118C               	bcf	12,3	;volatile
   739                           
   740                           ;mainTraductor.c: 96:     PIE1bits.SSPIE = 1;
   741  0262  1683               	bsf	3,5	;RP0=1, select bank1
   742  0263  1303               	bcf	3,6	;RP1=0, select bank1
   743  0264  158C               	bsf	12,3	;volatile
   744                           
   745                           ;mainTraductor.c: 97:     PIR1bits.RCIF = 0;
   746  0265  1283               	bcf	3,5	;RP0=0, select bank0
   747  0266  1303               	bcf	3,6	;RP1=0, select bank0
   748  0267  128C               	bcf	12,5	;volatile
   749                           
   750                           ;mainTraductor.c: 98:     PIE1bits.RCIE = 1;
   751  0268  1683               	bsf	3,5	;RP0=1, select bank1
   752  0269  1303               	bcf	3,6	;RP1=0, select bank1
   753  026A  168C               	bsf	12,5	;volatile
   754                           
   755                           ;mainTraductor.c: 99:     UART_Init(9600);
   756  026B  3000               	movlw	0
   757  026C  1283               	bcf	3,5	;RP0=0, select bank0
   758  026D  1303               	bcf	3,6	;RP1=0, select bank0
   759  026E  00B2               	movwf	UART_Init@baudrate+3
   760  026F  3000               	movlw	0
   761  0270  00B1               	movwf	UART_Init@baudrate+2
   762  0271  3025               	movlw	37
   763  0272  00B0               	movwf	UART_Init@baudrate+1
   764  0273  3080               	movlw	128
   765  0274  00AF               	movwf	UART_Init@baudrate
   766  0275  120A  118A  2026  120A  118A  	fcall	_UART_Init
   767                           
   768                           ;mainTraductor.c: 100:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_ID
      +                          LE_LOW, SPI_IDLE_2_ACTIVE);
   769  027A  1283               	bcf	3,5	;RP0=0, select bank0
   770  027B  1303               	bcf	3,6	;RP1=0, select bank0
   771  027C  01A0               	clrf	spiInit@sDataSample
   772  027D  01A1               	clrf	spiInit@sClockIdle
   773  027E  01A2               	clrf	spiInit@sTransmitEdge
   774  027F  3024               	movlw	36
   775  0280  120A  118A  2284   	fcall	_spiInit
   776  0283  0008               	return
   777  0284                     __end_of_setup:	
   778                           
   779                           	psect	text2
   780  0284                     __ptext2:	
   781 ;; *************** function _spiInit *****************
   782 ;; Defined at:
   783 ;;		line 13 in file "SPI.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;  sType           1    wreg     enum E1264
   786 ;;  sDataSample     1    0[BANK0 ] enum E1272
   787 ;;  sClockIdle      1    1[BANK0 ] enum E1276
   788 ;;  sTransmitEdg    1    2[BANK0 ] enum E1280
   789 ;; Auto vars:     Size  Location     Type
   790 ;;  sType           1    3[BANK0 ] enum E1264
   791 ;; Return value:  Size  Location     Type
   792 ;;                  1    wreg      void 
   793 ;; Registers used:
   794 ;;		wreg, status,2, status,0
   795 ;; Tracked objects:
   796 ;;		On entry : 0/0
   797 ;;		On exit  : 0/0
   798 ;;		Unchanged: 0/0
   799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   800 ;;      Params:         0       3       0       0       0
   801 ;;      Locals:         0       1       0       0       0
   802 ;;      Temps:          0       0       0       0       0
   803 ;;      Totals:         0       4       0       0       0
   804 ;;Total ram usage:        4 bytes
   805 ;; Hardware stack levels used:    1
   806 ;; Hardware stack levels required when called:    3
   807 ;; This function calls:
   808 ;;		Nothing
   809 ;; This function is called by:
   810 ;;		_setup
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           
   815                           ;psect for function _spiInit
   816  0284                     _spiInit:	
   817                           
   818                           ;incstack = 0
   819                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   820                           ;spiInit@sType stored from wreg
   821  0284  1283               	bcf	3,5	;RP0=0, select bank0
   822  0285  1303               	bcf	3,6	;RP1=0, select bank0
   823  0286  00A3               	movwf	spiInit@sType
   824                           
   825                           ;SPI.c: 13: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 14: {;SPI.c: 15:     TRISC5 = 0;
   826  0287  1683               	bsf	3,5	;RP0=1, select bank1
   827  0288  1303               	bcf	3,6	;RP1=0, select bank1
   828  0289  1287               	bcf	7,5	;volatile
   829                           
   830                           ;SPI.c: 16:     if(sType & 0b00000100)
   831  028A  1283               	bcf	3,5	;RP0=0, select bank0
   832  028B  1303               	bcf	3,6	;RP1=0, select bank0
   833  028C  1D23               	btfss	spiInit@sType,2
   834  028D  2A94               	goto	l1245
   835                           
   836                           ;SPI.c: 17:     {;SPI.c: 18:         SSPSTAT = sTransmitEdge;
   837  028E  0822               	movf	spiInit@sTransmitEdge,w
   838  028F  1683               	bsf	3,5	;RP0=1, select bank1
   839  0290  1303               	bcf	3,6	;RP1=0, select bank1
   840  0291  0094               	movwf	20	;volatile
   841                           
   842                           ;SPI.c: 19:         TRISC3 = 1;
   843  0292  1587               	bsf	7,3	;volatile
   844                           
   845                           ;SPI.c: 20:     }
   846  0293  2A9A               	goto	l16
   847  0294                     l1245:	
   848                           
   849                           ;SPI.c: 22:     {;SPI.c: 23:         SSPSTAT = sDataSample | sTransmitEdge;
   850  0294  0820               	movf	spiInit@sDataSample,w
   851  0295  0422               	iorwf	spiInit@sTransmitEdge,w
   852  0296  1683               	bsf	3,5	;RP0=1, select bank1
   853  0297  1303               	bcf	3,6	;RP1=0, select bank1
   854  0298  0094               	movwf	20	;volatile
   855                           
   856                           ;SPI.c: 24:         TRISC3 = 0;
   857  0299  1187               	bcf	7,3	;volatile
   858  029A                     l16:	
   859                           ;SPI.c: 25:     }
   860                           
   861                           
   862                           ;SPI.c: 27:     SSPCON = sType | sClockIdle;
   863  029A  1283               	bcf	3,5	;RP0=0, select bank0
   864  029B  1303               	bcf	3,6	;RP1=0, select bank0
   865  029C  0823               	movf	spiInit@sType,w
   866  029D  0421               	iorwf	spiInit@sClockIdle,w
   867  029E  0094               	movwf	20	;volatile
   868  029F  0008               	return
   869  02A0                     __end_of_spiInit:	
   870                           
   871                           	psect	text3
   872  0026                     __ptext3:	
   873 ;; *************** function _UART_Init *****************
   874 ;; Defined at:
   875 ;;		line 8 in file "./UART.h"
   876 ;; Parameters:    Size  Location     Type
   877 ;;  baudrate        4   15[BANK0 ] const long 
   878 ;; Auto vars:     Size  Location     Type
   879 ;;  x               2   31[BANK0 ] unsigned int 
   880 ;; Return value:  Size  Location     Type
   881 ;;                  1    wreg      unsigned char 
   882 ;; Registers used:
   883 ;;		wreg, status,2, status,0, pclath, cstack
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   889 ;;      Params:         0       4       0       0       0
   890 ;;      Locals:         0       2       0       0       0
   891 ;;      Temps:          0      12       0       0       0
   892 ;;      Totals:         0      18       0       0       0
   893 ;;Total ram usage:       18 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; Hardware stack levels required when called:    4
   896 ;; This function calls:
   897 ;;		___aldiv
   898 ;; This function is called by:
   899 ;;		_setup
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           
   904                           ;psect for function _UART_Init
   905  0026                     _UART_Init:	
   906                           
   907                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
   908                           
   909                           ;incstack = 0
   910                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
   911  0026  1283               	bcf	3,5	;RP0=0, select bank0
   912  0027  1303               	bcf	3,6	;RP1=0, select bank0
   913  0028  082F               	movf	UART_Init@baudrate,w
   914  0029  00B3               	movwf	??_UART_Init
   915  002A  0830               	movf	UART_Init@baudrate+1,w
   916  002B  00B4               	movwf	??_UART_Init+1
   917  002C  0831               	movf	UART_Init@baudrate+2,w
   918  002D  00B5               	movwf	??_UART_Init+2
   919  002E  0832               	movf	UART_Init@baudrate+3,w
   920  002F  00B6               	movwf	??_UART_Init+3
   921  0030  3006               	movlw	6
   922  0031                     u745:	
   923  0031  1003               	clrc
   924  0032  0DB3               	rlf	??_UART_Init,f
   925  0033  0DB4               	rlf	??_UART_Init+1,f
   926  0034  0DB5               	rlf	??_UART_Init+2,f
   927  0035  0DB6               	rlf	??_UART_Init+3,f
   928  0036  3EFF               	addlw	-1
   929  0037  1D03               	skipz
   930  0038  2831               	goto	u745
   931  0039  0836               	movf	??_UART_Init+3,w
   932  003A  00A3               	movwf	___aldiv@divisor+3
   933  003B  0835               	movf	??_UART_Init+2,w
   934  003C  00A2               	movwf	___aldiv@divisor+2
   935  003D  0834               	movf	??_UART_Init+1,w
   936  003E  00A1               	movwf	___aldiv@divisor+1
   937  003F  0833               	movf	??_UART_Init,w
   938  0040  00A0               	movwf	___aldiv@divisor
   939  0041  082F               	movf	UART_Init@baudrate,w
   940  0042  00B7               	movwf	??_UART_Init+4
   941  0043  0830               	movf	UART_Init@baudrate+1,w
   942  0044  00B8               	movwf	??_UART_Init+5
   943  0045  0831               	movf	UART_Init@baudrate+2,w
   944  0046  00B9               	movwf	??_UART_Init+6
   945  0047  0832               	movf	UART_Init@baudrate+3,w
   946  0048  00BA               	movwf	??_UART_Init+7
   947  0049  3006               	movlw	6
   948  004A                     u755:	
   949  004A  1003               	clrc
   950  004B  0DB7               	rlf	??_UART_Init+4,f
   951  004C  0DB8               	rlf	??_UART_Init+5,f
   952  004D  0DB9               	rlf	??_UART_Init+6,f
   953  004E  0DBA               	rlf	??_UART_Init+7,f
   954  004F  3EFF               	addlw	-1
   955  0050  1D03               	skipz
   956  0051  284A               	goto	u755
   957  0052  3000               	movlw	0
   958  0053  00BB               	movwf	??_UART_Init+8
   959  0054  3012               	movlw	18
   960  0055  00BC               	movwf	??_UART_Init+9
   961  0056  307A               	movlw	122
   962  0057  00BD               	movwf	??_UART_Init+10
   963  0058  3000               	movlw	0
   964  0059  00BE               	movwf	??_UART_Init+11
   965  005A  0837               	movf	??_UART_Init+4,w
   966  005B  02BB               	subwf	??_UART_Init+8,f
   967  005C  0838               	movf	??_UART_Init+5,w
   968  005D  1C03               	skipc
   969  005E  0F38               	incfsz	??_UART_Init+5,w
   970  005F  2861               	goto	u761
   971  0060  2862               	goto	u762
   972  0061                     u761:	
   973  0061  02BC               	subwf	??_UART_Init+9,f
   974  0062                     u762:	
   975  0062  0839               	movf	??_UART_Init+6,w
   976  0063  1C03               	skipc
   977  0064  0F39               	incfsz	??_UART_Init+6,w
   978  0065  2867               	goto	u763
   979  0066  2868               	goto	u764
   980  0067                     u763:	
   981  0067  02BD               	subwf	??_UART_Init+10,f
   982  0068                     u764:	
   983  0068  083A               	movf	??_UART_Init+7,w
   984  0069  1C03               	skipc
   985  006A  0F3A               	incfsz	??_UART_Init+7,w
   986  006B  286D               	goto	u765
   987  006C  286E               	goto	u766
   988  006D                     u765:	
   989  006D  02BE               	subwf	??_UART_Init+11,f
   990  006E                     u766:	
   991  006E  083E               	movf	??_UART_Init+11,w
   992  006F  00A7               	movwf	___aldiv@dividend+3
   993  0070  083D               	movf	??_UART_Init+10,w
   994  0071  00A6               	movwf	___aldiv@dividend+2
   995  0072  083C               	movf	??_UART_Init+9,w
   996  0073  00A5               	movwf	___aldiv@dividend+1
   997  0074  083B               	movf	??_UART_Init+8,w
   998  0075  00A4               	movwf	___aldiv@dividend
   999  0076  120A  118A  20FF  120A  118A  	fcall	___aldiv
  1000  007B  1283               	bcf	3,5	;RP0=0, select bank0
  1001  007C  1303               	bcf	3,6	;RP1=0, select bank0
  1002  007D  0821               	movf	?___aldiv+1,w
  1003  007E  00C0               	movwf	UART_Init@x+1
  1004  007F  0820               	movf	?___aldiv,w
  1005  0080  00BF               	movwf	UART_Init@x
  1006                           
  1007                           ;./UART.h: 12:  if(x>255)
  1008  0081  3001               	movlw	1
  1009  0082  0240               	subwf	UART_Init@x+1,w
  1010  0083  3000               	movlw	0
  1011  0084  1903               	skipnz
  1012  0085  023F               	subwf	UART_Init@x,w
  1013  0086  1C03               	skipc
  1014  0087  28E4               	goto	l1257
  1015                           
  1016                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  1017  0088  082F               	movf	UART_Init@baudrate,w
  1018  0089  00B3               	movwf	??_UART_Init
  1019  008A  0830               	movf	UART_Init@baudrate+1,w
  1020  008B  00B4               	movwf	??_UART_Init+1
  1021  008C  0831               	movf	UART_Init@baudrate+2,w
  1022  008D  00B5               	movwf	??_UART_Init+2
  1023  008E  0832               	movf	UART_Init@baudrate+3,w
  1024  008F  00B6               	movwf	??_UART_Init+3
  1025  0090  3004               	movlw	4
  1026  0091                     u785:	
  1027  0091  1003               	clrc
  1028  0092  0DB3               	rlf	??_UART_Init,f
  1029  0093  0DB4               	rlf	??_UART_Init+1,f
  1030  0094  0DB5               	rlf	??_UART_Init+2,f
  1031  0095  0DB6               	rlf	??_UART_Init+3,f
  1032  0096  3EFF               	addlw	-1
  1033  0097  1D03               	skipz
  1034  0098  2891               	goto	u785
  1035  0099  0836               	movf	??_UART_Init+3,w
  1036  009A  00A3               	movwf	___aldiv@divisor+3
  1037  009B  0835               	movf	??_UART_Init+2,w
  1038  009C  00A2               	movwf	___aldiv@divisor+2
  1039  009D  0834               	movf	??_UART_Init+1,w
  1040  009E  00A1               	movwf	___aldiv@divisor+1
  1041  009F  0833               	movf	??_UART_Init,w
  1042  00A0  00A0               	movwf	___aldiv@divisor
  1043  00A1  082F               	movf	UART_Init@baudrate,w
  1044  00A2  00B7               	movwf	??_UART_Init+4
  1045  00A3  0830               	movf	UART_Init@baudrate+1,w
  1046  00A4  00B8               	movwf	??_UART_Init+5
  1047  00A5  0831               	movf	UART_Init@baudrate+2,w
  1048  00A6  00B9               	movwf	??_UART_Init+6
  1049  00A7  0832               	movf	UART_Init@baudrate+3,w
  1050  00A8  00BA               	movwf	??_UART_Init+7
  1051  00A9  3004               	movlw	4
  1052  00AA                     u795:	
  1053  00AA  1003               	clrc
  1054  00AB  0DB7               	rlf	??_UART_Init+4,f
  1055  00AC  0DB8               	rlf	??_UART_Init+5,f
  1056  00AD  0DB9               	rlf	??_UART_Init+6,f
  1057  00AE  0DBA               	rlf	??_UART_Init+7,f
  1058  00AF  3EFF               	addlw	-1
  1059  00B0  1D03               	skipz
  1060  00B1  28AA               	goto	u795
  1061  00B2  3000               	movlw	0
  1062  00B3  00BB               	movwf	??_UART_Init+8
  1063  00B4  3012               	movlw	18
  1064  00B5  00BC               	movwf	??_UART_Init+9
  1065  00B6  307A               	movlw	122
  1066  00B7  00BD               	movwf	??_UART_Init+10
  1067  00B8  3000               	movlw	0
  1068  00B9  00BE               	movwf	??_UART_Init+11
  1069  00BA  0837               	movf	??_UART_Init+4,w
  1070  00BB  02BB               	subwf	??_UART_Init+8,f
  1071  00BC  0838               	movf	??_UART_Init+5,w
  1072  00BD  1C03               	skipc
  1073  00BE  0F38               	incfsz	??_UART_Init+5,w
  1074  00BF  28C1               	goto	u801
  1075  00C0  28C2               	goto	u802
  1076  00C1                     u801:	
  1077  00C1  02BC               	subwf	??_UART_Init+9,f
  1078  00C2                     u802:	
  1079  00C2  0839               	movf	??_UART_Init+6,w
  1080  00C3  1C03               	skipc
  1081  00C4  0F39               	incfsz	??_UART_Init+6,w
  1082  00C5  28C7               	goto	u803
  1083  00C6  28C8               	goto	u804
  1084  00C7                     u803:	
  1085  00C7  02BD               	subwf	??_UART_Init+10,f
  1086  00C8                     u804:	
  1087  00C8  083A               	movf	??_UART_Init+7,w
  1088  00C9  1C03               	skipc
  1089  00CA  0F3A               	incfsz	??_UART_Init+7,w
  1090  00CB  28CD               	goto	u805
  1091  00CC  28CE               	goto	u806
  1092  00CD                     u805:	
  1093  00CD  02BE               	subwf	??_UART_Init+11,f
  1094  00CE                     u806:	
  1095  00CE  083E               	movf	??_UART_Init+11,w
  1096  00CF  00A7               	movwf	___aldiv@dividend+3
  1097  00D0  083D               	movf	??_UART_Init+10,w
  1098  00D1  00A6               	movwf	___aldiv@dividend+2
  1099  00D2  083C               	movf	??_UART_Init+9,w
  1100  00D3  00A5               	movwf	___aldiv@dividend+1
  1101  00D4  083B               	movf	??_UART_Init+8,w
  1102  00D5  00A4               	movwf	___aldiv@dividend
  1103  00D6  120A  118A  20FF  120A  118A  	fcall	___aldiv
  1104  00DB  1283               	bcf	3,5	;RP0=0, select bank0
  1105  00DC  1303               	bcf	3,6	;RP1=0, select bank0
  1106  00DD  0821               	movf	?___aldiv+1,w
  1107  00DE  00C0               	movwf	UART_Init@x+1
  1108  00DF  0820               	movf	?___aldiv,w
  1109  00E0  00BF               	movwf	UART_Init@x
  1110                           
  1111                           ;./UART.h: 15:   BRGH = 1;
  1112  00E1  1683               	bsf	3,5	;RP0=1, select bank1
  1113  00E2  1303               	bcf	3,6	;RP1=0, select bank1
  1114  00E3  1518               	bsf	24,2	;volatile
  1115  00E4                     l1257:	
  1116                           
  1117                           ;./UART.h: 17:  if(x<256)
  1118  00E4  3001               	movlw	1
  1119  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  1120  00E6  0240               	subwf	UART_Init@x+1,w
  1121  00E7  3000               	movlw	0
  1122  00E8  1903               	skipnz
  1123  00E9  023F               	subwf	UART_Init@x,w
  1124  00EA  1803               	skipnc
  1125  00EB  0008               	return
  1126                           
  1127                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  1128  00EC  083F               	movf	UART_Init@x,w
  1129  00ED  1683               	bsf	3,5	;RP0=1, select bank1
  1130  00EE  1303               	bcf	3,6	;RP1=0, select bank1
  1131  00EF  0099               	movwf	25	;volatile
  1132                           
  1133                           ;./UART.h: 20:    SYNC = 0;
  1134  00F0  1218               	bcf	24,4	;volatile
  1135                           
  1136                           ;./UART.h: 21:    SPEN = 1;
  1137  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  1138  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  1139  00F3  1798               	bsf	24,7	;volatile
  1140                           
  1141                           ;./UART.h: 22:       TRISC7 = 1;
  1142  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  1143  00F5  1303               	bcf	3,6	;RP1=0, select bank1
  1144  00F6  1787               	bsf	7,7	;volatile
  1145                           
  1146                           ;./UART.h: 23:       TRISC6 = 1;
  1147  00F7  1707               	bsf	7,6	;volatile
  1148                           
  1149                           ;./UART.h: 24:       CREN = 1;
  1150  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  1151  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  1152  00FA  1618               	bsf	24,4	;volatile
  1153                           
  1154                           ;./UART.h: 25:       TXEN = 1;
  1155  00FB  1683               	bsf	3,5	;RP0=1, select bank1
  1156  00FC  1303               	bcf	3,6	;RP1=0, select bank1
  1157  00FD  1698               	bsf	24,5	;volatile
  1158  00FE  0008               	return
  1159  00FF                     __end_of_UART_Init:	
  1160                           
  1161                           	psect	text4
  1162  00FF                     __ptext4:	
  1163 ;; *************** function ___aldiv *****************
  1164 ;; Defined at:
  1165 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;  divisor         4    0[BANK0 ] long 
  1168 ;;  dividend        4    4[BANK0 ] long 
  1169 ;; Auto vars:     Size  Location     Type
  1170 ;;  quotient        4   11[BANK0 ] long 
  1171 ;;  sign            1   10[BANK0 ] unsigned char 
  1172 ;;  counter         1    9[BANK0 ] unsigned char 
  1173 ;; Return value:  Size  Location     Type
  1174 ;;                  4    0[BANK0 ] long 
  1175 ;; Registers used:
  1176 ;;		wreg, status,2, status,0
  1177 ;; Tracked objects:
  1178 ;;		On entry : 0/0
  1179 ;;		On exit  : 0/0
  1180 ;;		Unchanged: 0/0
  1181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1182 ;;      Params:         0       8       0       0       0
  1183 ;;      Locals:         0       6       0       0       0
  1184 ;;      Temps:          0       1       0       0       0
  1185 ;;      Totals:         0      15       0       0       0
  1186 ;;Total ram usage:       15 bytes
  1187 ;; Hardware stack levels used:    1
  1188 ;; Hardware stack levels required when called:    3
  1189 ;; This function calls:
  1190 ;;		Nothing
  1191 ;; This function is called by:
  1192 ;;		_UART_Init
  1193 ;; This function uses a non-reentrant model
  1194 ;;
  1195                           
  1196                           
  1197                           ;psect for function ___aldiv
  1198  00FF                     ___aldiv:	
  1199                           
  1200                           ;incstack = 0
  1201                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1202  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  1203  0100  1303               	bcf	3,6	;RP1=0, select bank0
  1204  0101  01AA               	clrf	___aldiv@sign
  1205  0102  1FA3               	btfss	___aldiv@divisor+3,7
  1206  0103  2911               	goto	l332
  1207  0104  09A0               	comf	___aldiv@divisor,f
  1208  0105  09A1               	comf	___aldiv@divisor+1,f
  1209  0106  09A2               	comf	___aldiv@divisor+2,f
  1210  0107  09A3               	comf	___aldiv@divisor+3,f
  1211  0108  0AA0               	incf	___aldiv@divisor,f
  1212  0109  1903               	skipnz
  1213  010A  0AA1               	incf	___aldiv@divisor+1,f
  1214  010B  1903               	skipnz
  1215  010C  0AA2               	incf	___aldiv@divisor+2,f
  1216  010D  1903               	skipnz
  1217  010E  0AA3               	incf	___aldiv@divisor+3,f
  1218  010F  01AA               	clrf	___aldiv@sign
  1219  0110  0AAA               	incf	___aldiv@sign,f
  1220  0111                     l332:	
  1221  0111  1FA7               	btfss	___aldiv@dividend+3,7
  1222  0112  2922               	goto	l1209
  1223  0113  09A4               	comf	___aldiv@dividend,f
  1224  0114  09A5               	comf	___aldiv@dividend+1,f
  1225  0115  09A6               	comf	___aldiv@dividend+2,f
  1226  0116  09A7               	comf	___aldiv@dividend+3,f
  1227  0117  0AA4               	incf	___aldiv@dividend,f
  1228  0118  1903               	skipnz
  1229  0119  0AA5               	incf	___aldiv@dividend+1,f
  1230  011A  1903               	skipnz
  1231  011B  0AA6               	incf	___aldiv@dividend+2,f
  1232  011C  1903               	skipnz
  1233  011D  0AA7               	incf	___aldiv@dividend+3,f
  1234  011E  3001               	movlw	1
  1235  011F  00A8               	movwf	??___aldiv
  1236  0120  0828               	movf	??___aldiv,w
  1237  0121  06AA               	xorwf	___aldiv@sign,f
  1238  0122                     l1209:	
  1239  0122  3000               	movlw	0
  1240  0123  00AE               	movwf	___aldiv@quotient+3
  1241  0124  3000               	movlw	0
  1242  0125  00AD               	movwf	___aldiv@quotient+2
  1243  0126  3000               	movlw	0
  1244  0127  00AC               	movwf	___aldiv@quotient+1
  1245  0128  3000               	movlw	0
  1246  0129  00AB               	movwf	___aldiv@quotient
  1247  012A  0823               	movf	___aldiv@divisor+3,w
  1248  012B  0422               	iorwf	___aldiv@divisor+2,w
  1249  012C  0421               	iorwf	___aldiv@divisor+1,w
  1250  012D  0420               	iorwf	___aldiv@divisor,w
  1251  012E  1903               	skipnz
  1252  012F  2977               	goto	l1231
  1253  0130  01A9               	clrf	___aldiv@counter
  1254  0131  0AA9               	incf	___aldiv@counter,f
  1255  0132                     l1217:	
  1256  0132  1BA3               	btfsc	___aldiv@divisor+3,7
  1257  0133  2942               	goto	l1219
  1258  0134  3001               	movlw	1
  1259  0135  00A8               	movwf	??___aldiv
  1260  0136                     u665:	
  1261  0136  1003               	clrc
  1262  0137  0DA0               	rlf	___aldiv@divisor,f
  1263  0138  0DA1               	rlf	___aldiv@divisor+1,f
  1264  0139  0DA2               	rlf	___aldiv@divisor+2,f
  1265  013A  0DA3               	rlf	___aldiv@divisor+3,f
  1266  013B  0BA8               	decfsz	??___aldiv,f
  1267  013C  2936               	goto	u665
  1268  013D  3001               	movlw	1
  1269  013E  00A8               	movwf	??___aldiv
  1270  013F  0828               	movf	??___aldiv,w
  1271  0140  07A9               	addwf	___aldiv@counter,f
  1272  0141  2932               	goto	l1217
  1273  0142                     l1219:	
  1274  0142  3001               	movlw	1
  1275  0143  00A8               	movwf	??___aldiv
  1276  0144                     u685:	
  1277  0144  1003               	clrc
  1278  0145  0DAB               	rlf	___aldiv@quotient,f
  1279  0146  0DAC               	rlf	___aldiv@quotient+1,f
  1280  0147  0DAD               	rlf	___aldiv@quotient+2,f
  1281  0148  0DAE               	rlf	___aldiv@quotient+3,f
  1282  0149  0BA8               	decfsz	??___aldiv,f
  1283  014A  2944               	goto	u685
  1284  014B  0823               	movf	___aldiv@divisor+3,w
  1285  014C  0227               	subwf	___aldiv@dividend+3,w
  1286  014D  1D03               	skipz
  1287  014E  2959               	goto	u695
  1288  014F  0822               	movf	___aldiv@divisor+2,w
  1289  0150  0226               	subwf	___aldiv@dividend+2,w
  1290  0151  1D03               	skipz
  1291  0152  2959               	goto	u695
  1292  0153  0821               	movf	___aldiv@divisor+1,w
  1293  0154  0225               	subwf	___aldiv@dividend+1,w
  1294  0155  1D03               	skipz
  1295  0156  2959               	goto	u695
  1296  0157  0820               	movf	___aldiv@divisor,w
  1297  0158  0224               	subwf	___aldiv@dividend,w
  1298  0159                     u695:	
  1299  0159  1C03               	skipc
  1300  015A  296A               	goto	l1227
  1301  015B  0820               	movf	___aldiv@divisor,w
  1302  015C  02A4               	subwf	___aldiv@dividend,f
  1303  015D  0821               	movf	___aldiv@divisor+1,w
  1304  015E  1C03               	skipc
  1305  015F  0F21               	incfsz	___aldiv@divisor+1,w
  1306  0160  02A5               	subwf	___aldiv@dividend+1,f
  1307  0161  0822               	movf	___aldiv@divisor+2,w
  1308  0162  1C03               	skipc
  1309  0163  0F22               	incfsz	___aldiv@divisor+2,w
  1310  0164  02A6               	subwf	___aldiv@dividend+2,f
  1311  0165  0823               	movf	___aldiv@divisor+3,w
  1312  0166  1C03               	skipc
  1313  0167  0F23               	incfsz	___aldiv@divisor+3,w
  1314  0168  02A7               	subwf	___aldiv@dividend+3,f
  1315  0169  142B               	bsf	___aldiv@quotient,0
  1316  016A                     l1227:	
  1317  016A  3001               	movlw	1
  1318  016B                     u705:	
  1319  016B  1003               	clrc
  1320  016C  0CA3               	rrf	___aldiv@divisor+3,f
  1321  016D  0CA2               	rrf	___aldiv@divisor+2,f
  1322  016E  0CA1               	rrf	___aldiv@divisor+1,f
  1323  016F  0CA0               	rrf	___aldiv@divisor,f
  1324  0170  3EFF               	addlw	-1
  1325  0171  1D03               	skipz
  1326  0172  296B               	goto	u705
  1327  0173  3001               	movlw	1
  1328  0174  02A9               	subwf	___aldiv@counter,f
  1329  0175  1D03               	btfss	3,2
  1330  0176  2942               	goto	l1219
  1331  0177                     l1231:	
  1332  0177  082A               	movf	___aldiv@sign,w
  1333  0178  1903               	btfsc	3,2
  1334  0179  2985               	goto	l1235
  1335  017A  09AB               	comf	___aldiv@quotient,f
  1336  017B  09AC               	comf	___aldiv@quotient+1,f
  1337  017C  09AD               	comf	___aldiv@quotient+2,f
  1338  017D  09AE               	comf	___aldiv@quotient+3,f
  1339  017E  0AAB               	incf	___aldiv@quotient,f
  1340  017F  1903               	skipnz
  1341  0180  0AAC               	incf	___aldiv@quotient+1,f
  1342  0181  1903               	skipnz
  1343  0182  0AAD               	incf	___aldiv@quotient+2,f
  1344  0183  1903               	skipnz
  1345  0184  0AAE               	incf	___aldiv@quotient+3,f
  1346  0185                     l1235:	
  1347  0185  082E               	movf	___aldiv@quotient+3,w
  1348  0186  00A3               	movwf	?___aldiv+3
  1349  0187  082D               	movf	___aldiv@quotient+2,w
  1350  0188  00A2               	movwf	?___aldiv+2
  1351  0189  082C               	movf	___aldiv@quotient+1,w
  1352  018A  00A1               	movwf	?___aldiv+1
  1353  018B  082B               	movf	___aldiv@quotient,w
  1354  018C  00A0               	movwf	?___aldiv
  1355  018D  0008               	return
  1356  018E                     __end_of___aldiv:	
  1357                           
  1358                           	psect	text5
  1359  02A0                     __ptext5:	
  1360 ;; *************** function _UART_Write *****************
  1361 ;; Defined at:
  1362 ;;		line 54 in file "./UART.h"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;  data            1    wreg     unsigned char 
  1365 ;; Auto vars:     Size  Location     Type
  1366 ;;  data            1    0[BANK0 ] unsigned char 
  1367 ;; Return value:  Size  Location     Type
  1368 ;;                  1    wreg      void 
  1369 ;; Registers used:
  1370 ;;		wreg
  1371 ;; Tracked objects:
  1372 ;;		On entry : 0/0
  1373 ;;		On exit  : 0/0
  1374 ;;		Unchanged: 0/0
  1375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1376 ;;      Params:         0       0       0       0       0
  1377 ;;      Locals:         0       1       0       0       0
  1378 ;;      Temps:          0       0       0       0       0
  1379 ;;      Totals:         0       1       0       0       0
  1380 ;;Total ram usage:        1 bytes
  1381 ;; Hardware stack levels used:    1
  1382 ;; Hardware stack levels required when called:    3
  1383 ;; This function calls:
  1384 ;;		Nothing
  1385 ;; This function is called by:
  1386 ;;		_main
  1387 ;;		_UART_Write_Text
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           
  1392                           ;psect for function _UART_Write
  1393  02A0                     _UART_Write:	
  1394                           
  1395                           ;incstack = 0
  1396                           ; Regs used in _UART_Write: [wreg]
  1397                           ;UART_Write@data stored from wreg
  1398  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  1399  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  1400  02A2  00A0               	movwf	UART_Write@data
  1401  02A3                     l136:	
  1402                           ;./UART.h: 58:   };
  1403                           
  1404                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(PIR1bits
      +                          .TXIF == 0){
  1405                           
  1406                           
  1407                           ;./UART.h: 56:   while(PIR1bits.TXIF == 0){
  1408  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  1409  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  1410  02A5  1A0C               	btfsc	12,4	;volatile
  1411  02A6  2AA9               	goto	l1277
  1412  02A7  0000               	nop	;# 
  1413  02A8  2AA3               	goto	l136
  1414  02A9                     l1277:	
  1415                           
  1416                           ;./UART.h: 59:   TXREG = data;
  1417  02A9  0820               	movf	UART_Write@data,w
  1418  02AA  0099               	movwf	25	;volatile
  1419  02AB  0008               	return
  1420  02AC                     __end_of_UART_Write:	
  1421                           
  1422                           	psect	text6
  1423  01E8                     __ptext6:	
  1424 ;; *************** function _isr *****************
  1425 ;; Defined at:
  1426 ;;		line 34 in file "mainTraductor.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;		None
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;		None
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  1    wreg      void 
  1433 ;; Registers used:
  1434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1440 ;;      Params:         0       0       0       0       0
  1441 ;;      Locals:         0       0       0       0       0
  1442 ;;      Temps:          4       0       0       0       0
  1443 ;;      Totals:         4       0       0       0       0
  1444 ;;Total ram usage:        4 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:    2
  1447 ;; This function calls:
  1448 ;;		_UART_Read
  1449 ;;		_spiRead
  1450 ;;		_spiWrite
  1451 ;; This function is called by:
  1452 ;;		Interrupt level 1
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456                           
  1457                           ;psect for function _isr
  1458  01E8                     _isr:	
  1459                           
  1460                           ;mainTraductor.c: 35:     if (PIR1bits.RCIF == 1){
  1461  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1462  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  1463  01EA  1E8C               	btfss	12,5	;volatile
  1464  01EB  2A0A               	goto	i1l164
  1465                           
  1466                           ;mainTraductor.c: 36:         temp = UART_Read();
  1467  01EC  120A  118A  22B9  120A  118A  	fcall	_UART_Read
  1468  01F1  00F6               	movwf	??_isr
  1469  01F2  0876               	movf	??_isr,w
  1470  01F3  00F0               	movwf	_temp
  1471                           
  1472                           ;mainTraductor.c: 37:         info[i] = temp;
  1473  01F4  0870               	movf	_temp,w
  1474  01F5  00F6               	movwf	??_isr
  1475  01F6  0873               	movf	_i,w
  1476  01F7  3E42               	addlw	(low (_info| 0))& (0+255)
  1477  01F8  0084               	movwf	4
  1478  01F9  0876               	movf	??_isr,w
  1479  01FA  1383               	bcf	3,7	;select IRP bank0
  1480  01FB  0080               	movwf	0
  1481                           
  1482                           ;mainTraductor.c: 38:         i++;
  1483  01FC  3001               	movlw	1
  1484  01FD  00F6               	movwf	??_isr
  1485  01FE  0876               	movf	??_isr,w
  1486  01FF  07F3               	addwf	_i,f
  1487                           
  1488                           ;mainTraductor.c: 39:         RB0 = 1;
  1489  0200  1283               	bcf	3,5	;RP0=0, select bank0
  1490  0201  1303               	bcf	3,6	;RP1=0, select bank0
  1491  0202  1406               	bsf	6,0	;volatile
  1492                           
  1493                           ;mainTraductor.c: 40:         if (temp == 'A'){
  1494  0203  3041               	movlw	65
  1495  0204  0670               	xorwf	_temp,w
  1496  0205  1D03               	btfss	3,2
  1497  0206  2A35               	goto	i1l169
  1498                           
  1499                           ;mainTraductor.c: 41:             done = 1;
  1500  0207  01F2               	clrf	_done
  1501  0208  0AF2               	incf	_done,f
  1502  0209  2A35               	goto	i1l169
  1503  020A                     i1l164:	
  1504  020A  1D8C               	btfss	12,3	;volatile
  1505  020B  2A35               	goto	i1l169
  1506                           
  1507                           ;mainTraductor.c: 44:         val = spiRead();
  1508  020C  120A  118A  22AC  120A  118A  	fcall	_spiRead
  1509  0211  00F6               	movwf	??_isr
  1510  0212  0876               	movf	??_isr,w
  1511  0213  00F4               	movwf	_val
  1512                           
  1513                           ;mainTraductor.c: 45:         spiWrite(info[j]);
  1514  0214  0871               	movf	_j,w
  1515  0215  3E42               	addlw	(low (_info| 0))& (0+255)
  1516  0216  0084               	movwf	4
  1517  0217  1383               	bcf	3,7	;select IRP bank0
  1518  0218  0800               	movf	0,w
  1519  0219  120A  118A  22B3  120A  118A  	fcall	_spiWrite
  1520                           
  1521                           ;mainTraductor.c: 46:         j++;
  1522  021E  3001               	movlw	1
  1523  021F  00F6               	movwf	??_isr
  1524  0220  0876               	movf	??_isr,w
  1525  0221  07F1               	addwf	_j,f
  1526                           
  1527                           ;mainTraductor.c: 48:         if (j == 9){
  1528  0222  3009               	movlw	9
  1529  0223  0671               	xorwf	_j,w
  1530  0224  1903               	btfsc	3,2
  1531                           
  1532                           ;mainTraductor.c: 49:             j = 0;
  1533  0225  01F1               	clrf	_j
  1534                           
  1535                           ;mainTraductor.c: 51:         PORTDbits.RD0 = ~PORTDbits.RD0;
  1536  0226  1003               	clrc
  1537  0227  1283               	bcf	3,5	;RP0=0, select bank0
  1538  0228  1303               	bcf	3,6	;RP1=0, select bank0
  1539  0229  1C08               	btfss	8,0	;volatile
  1540  022A  1403               	setc
  1541  022B  1C03               	btfss	3,0
  1542  022C  2A31               	goto	u60_20
  1543  022D  1283               	bcf	3,5	;RP0=0, select bank0
  1544  022E  1303               	bcf	3,6	;RP1=0, select bank0
  1545  022F  1408               	bsf	8,0	;volatile
  1546  0230  2A34               	goto	i1l1167
  1547  0231                     u60_20:	
  1548  0231  1283               	bcf	3,5	;RP0=0, select bank0
  1549  0232  1303               	bcf	3,6	;RP1=0, select bank0
  1550  0233  1008               	bcf	8,0	;volatile
  1551  0234                     i1l1167:	
  1552                           
  1553                           ;mainTraductor.c: 52:         SSPIF = 0;
  1554  0234  118C               	bcf	12,3	;volatile
  1555  0235                     i1l169:	
  1556  0235  0879               	movf	??_isr+3,w
  1557  0236  008A               	movwf	10
  1558  0237  0878               	movf	??_isr+2,w
  1559  0238  0084               	movwf	4
  1560  0239  0E77               	swapf	(??_isr+1)^(0+4294967168),w
  1561  023A  0083               	movwf	3
  1562  023B  0EFE               	swapf	126,f
  1563  023C  0E7E               	swapf	126,w
  1564  023D  0009               	retfie
  1565  023E                     __end_of_isr:	
  1566                           
  1567                           	psect	intentry
  1568  0004                     __pintentry:	
  1569                           ;incstack = 0
  1570                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1571                           
  1572  0004                     interrupt_function:	
  1573  007E                     saved_w	set	btemp
  1574  0004  00FE               	movwf	btemp
  1575  0005  0E03               	swapf	3,w
  1576  0006  00F7               	movwf	??_isr+1
  1577  0007  0804               	movf	4,w
  1578  0008  00F8               	movwf	??_isr+2
  1579  0009  080A               	movf	10,w
  1580  000A  00F9               	movwf	??_isr+3
  1581  000B  120A  118A  29E8   	ljmp	_isr
  1582                           
  1583                           	psect	text7
  1584  02B3                     __ptext7:	
  1585 ;; *************** function _spiWrite *****************
  1586 ;; Defined at:
  1587 ;;		line 35 in file "SPI.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;  dat             1    wreg     unsigned char 
  1590 ;; Auto vars:     Size  Location     Type
  1591 ;;  dat             1    0[COMMON] unsigned char 
  1592 ;; Return value:  Size  Location     Type
  1593 ;;                  1    wreg      void 
  1594 ;; Registers used:
  1595 ;;		wreg
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1601 ;;      Params:         0       0       0       0       0
  1602 ;;      Locals:         1       0       0       0       0
  1603 ;;      Temps:          0       0       0       0       0
  1604 ;;      Totals:         1       0       0       0       0
  1605 ;;Total ram usage:        1 bytes
  1606 ;; Hardware stack levels used:    1
  1607 ;; This function calls:
  1608 ;;		Nothing
  1609 ;; This function is called by:
  1610 ;;		_isr
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           
  1615                           ;psect for function _spiWrite
  1616  02B3                     _spiWrite:	
  1617                           
  1618                           ;incstack = 0
  1619                           ; Regs used in _spiWrite: [wreg]
  1620                           ;spiWrite@dat stored from wreg
  1621  02B3  00F5               	movwf	spiWrite@dat
  1622                           
  1623                           ;SPI.c: 35: void spiWrite(char dat);SPI.c: 36: {;SPI.c: 37:     SSPBUF = dat;
  1624  02B4  0875               	movf	spiWrite@dat,w
  1625  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  1626  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  1627  02B7  0093               	movwf	19	;volatile
  1628  02B8  0008               	return
  1629  02B9                     __end_of_spiWrite:	
  1630                           
  1631                           	psect	text8
  1632  02AC                     __ptext8:	
  1633 ;; *************** function _spiRead *****************
  1634 ;; Defined at:
  1635 ;;		line 48 in file "SPI.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;		None
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;		None
  1640 ;; Return value:  Size  Location     Type
  1641 ;;                  1    wreg      unsigned char 
  1642 ;; Registers used:
  1643 ;;		wreg, status,2, status,0, pclath, cstack
  1644 ;; Tracked objects:
  1645 ;;		On entry : 0/0
  1646 ;;		On exit  : 0/0
  1647 ;;		Unchanged: 0/0
  1648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1649 ;;      Params:         0       0       0       0       0
  1650 ;;      Locals:         0       0       0       0       0
  1651 ;;      Temps:          0       0       0       0       0
  1652 ;;      Totals:         0       0       0       0       0
  1653 ;;Total ram usage:        0 bytes
  1654 ;; Hardware stack levels used:    1
  1655 ;; Hardware stack levels required when called:    1
  1656 ;; This function calls:
  1657 ;;		_spiReceiveWait
  1658 ;; This function is called by:
  1659 ;;		_isr
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           
  1664                           ;psect for function _spiRead
  1665  02AC                     _spiRead:	
  1666                           
  1667                           ;SPI.c: 50:     spiReceiveWait();
  1668                           
  1669                           ;incstack = 0
  1670                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1671  02AC  120A  118A  22BF   	fcall	_spiReceiveWait
  1672                           
  1673                           ;SPI.c: 51:     return(SSPBUF);
  1674  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  1675  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  1676  02B1  0813               	movf	19,w	;volatile
  1677  02B2  0008               	return
  1678  02B3                     __end_of_spiRead:	
  1679                           
  1680                           	psect	text9
  1681  02BF                     __ptext9:	
  1682 ;; *************** function _spiReceiveWait *****************
  1683 ;; Defined at:
  1684 ;;		line 30 in file "SPI.c"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;		None
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;		None
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      void 
  1691 ;; Registers used:
  1692 ;;		None
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1698 ;;      Params:         0       0       0       0       0
  1699 ;;      Locals:         0       0       0       0       0
  1700 ;;      Temps:          0       0       0       0       0
  1701 ;;      Totals:         0       0       0       0       0
  1702 ;;Total ram usage:        0 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; This function calls:
  1705 ;;		Nothing
  1706 ;; This function is called by:
  1707 ;;		_spiRead
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           
  1712                           ;psect for function _spiReceiveWait
  1713  02BF                     _spiReceiveWait:	
  1714  02BF                     i1l20:	
  1715                           ;SPI.c: 32:     while ( !SSPSTATbits.BF );
  1716                           
  1717                           ;incstack = 0
  1718                           ; Regs used in _spiReceiveWait: []
  1719                           
  1720  02BF  1683               	bsf	3,5	;RP0=1, select bank1
  1721  02C0  1303               	bcf	3,6	;RP1=0, select bank1
  1722  02C1  1814               	btfsc	20,0	;volatile
  1723  02C2  0008               	return
  1724  02C3  2ABF               	goto	i1l20
  1725  02C4                     __end_of_spiReceiveWait:	
  1726                           
  1727                           	psect	text10
  1728  02B9                     __ptext10:	
  1729 ;; *************** function _UART_Read *****************
  1730 ;; Defined at:
  1731 ;;		line 41 in file "./UART.h"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;		None
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;		None
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  1    wreg      unsigned char 
  1738 ;; Registers used:
  1739 ;;		wreg
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1745 ;;      Params:         0       0       0       0       0
  1746 ;;      Locals:         0       0       0       0       0
  1747 ;;      Temps:          0       0       0       0       0
  1748 ;;      Totals:         0       0       0       0       0
  1749 ;;Total ram usage:        0 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; This function calls:
  1752 ;;		Nothing
  1753 ;; This function is called by:
  1754 ;;		_isr
  1755 ;;		_UART_Read_Text
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           
  1760                           ;psect for function _UART_Read
  1761  02B9                     _UART_Read:	
  1762  02B9                     i1l124:	
  1763                           ;./UART.h: 43:   while(!RCIF);
  1764                           
  1765                           ;incstack = 0
  1766                           ; Regs used in _UART_Read: [wreg]
  1767                           
  1768  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  1769  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  1770  02BB  1E8C               	btfss	12,5	;volatile
  1771  02BC  2AB9               	goto	i1l124
  1772                           
  1773                           ;./UART.h: 44:   return RCREG;
  1774  02BD  081A               	movf	26,w	;volatile
  1775  02BE  0008               	return
  1776  02BF                     __end_of_UART_Read:	
  1777  007E                     btemp	set	126	;btemp
  1778  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     34      44
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_spiWrite

Critical Paths under _main in BANK0

    _setup->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1605
                                             33 BANK0      1     1      0
                         _UART_Write
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1574
                          _UART_Init
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     456
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4    1118
                                             15 BANK0     18    14      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     805
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0      22
                                              1 COMMON     4     4      0
                          _UART_Read
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (5) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (6) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Write
   _setup
     _UART_Init
       ___aldiv
     _spiInit

 _isr (ROOT)
   _UART_Read
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      36       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     22      2C       5       55.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      36      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Mar 09 20:20:18 2019

                       _i 0073                         _j 0071               __CFG_CP$OFF 0000  
             _SSPSTATbits 0094                        l16 029A                       l136 02A3  
                     l332 0111                       _RB0 0030              __CFG_CPD$OFF 0000  
                     u705 016B                       u801 00C1                       u802 00C2  
                     u803 00C7                       u804 00C8                       u805 00CD  
                     u806 00CE                       u665 0136                       u761 0061  
                     u745 0031                       u762 0062                       u763 0067  
                     u755 004A                       u764 0068                       u685 0144  
                     u765 006D                       u766 006E                       u695 0159  
                     u785 0091                       u795 00AA                       _isr 01E8  
                     _val 0074                       fsr0 0004                       indf 0000  
            __CFG_LVP$OFF 0000                      l1231 0177                      l1217 0132  
                    l1209 0122                      l1313 0193                      l1235 0185  
                    l1227 016A                      l1219 0142                      l1245 0294  
                    l1257 00E4                      l1277 02A9                      ?_isr 0075  
                    _BRGH 04C2                      _CREN 00C4                      i1l20 02BF  
                    _RCIF 0065                      _SPEN 00C7                      _TRMT 04C1  
                    _TXEN 04C5                      _SYNC 04C4              __CFG_WRT$OFF 0000  
                    _done 0072                      _main 018E                      _info 0042  
                    _temp 0070                      btemp 007E                      start 000E  
           __CFG_IESO$OFF 0000             __CFG_MCLRE$ON 0000                     ??_isr 0076  
         __end_of___aldiv 018E                     ?_main 0075             __CFG_WDTE$OFF 0000  
                   _ANSEL 0188                     i1l124 02B9                     i1l164 020A  
                   i1l169 0235                     _RCREG 001A                     _SPBRG 0099  
                   _PORTB 0006                     _PORTD 0008                     u60_20 0231  
                   _TRISB 0086                     _TRISD 0088                     _SSPIF 0063  
                   _TXREG 0019            __CFG_FCMEN$OFF 0000               ?_UART_Write 0075  
      __size_of_UART_Init 00D9        __size_of_UART_Read 0006                     _setup 023E  
          __CFG_BOREN$OFF 0000                     pclath 000A           __end_of_spiInit 02A0  
         __end_of_spiRead 02B3                     status 0003                     wtemp0 007E  
         __initialization 0011              __end_of_main 01E8                    ??_main 0041  
                  ?_setup 0075                    _ANSELH 0189                    i1l1167 0234  
                  _TRISC3 043B                    _TRISC5 043D                    _TRISC6 043E  
                  _TRISC7 043F                    _SSPCON 0014                    _SSPBUF 0013  
          __CFG_PWRTE$OFF 0000         __end_of_UART_Init 00FF         __end_of_UART_Read 02BF  
     __size_of_UART_Write 000C                 ??___aldiv 0028                    saved_w 007E  
        __end_of_spiWrite 02B9                 ??_spiInit 0023                 ??_spiRead 0075  
 __end_of__initialization 0022            __pcstackCOMMON 0075             __end_of_setup 0284  
                 ??_setup 0041                __pbssBANK0 0042                __pmaintext 018E  
              __pintentry 0004   __size_of_spiReceiveWait 0005              ??_UART_Write 0020  
                 _SSPSTAT 0094                 ?_spiWrite 0075                   ___aldiv 00FF  
      __end_of_UART_Write 02AC                   __ptext1 023E                   __ptext2 0284  
                 __ptext3 0026                   __ptext4 00FF                   __ptext5 02A0  
                 __ptext6 01E8                   __ptext7 02B3                   __ptext8 02AC  
                 __ptext9 02BF              __size_of_isr 0056          ___aldiv@dividend 0024  
                 _spiInit 0284                   _spiRead 02AC      end_of_initialization 0022  
        ___aldiv@quotient 002B                ??_spiWrite 0075                 _UART_Init 0026  
               _UART_Read 02B9                 _PORTDbits 0008            UART_Write@data 0020  
               _TRISAbits 0085                 _TRISCbits 0087               spiWrite@dat 0075  
          _spiReceiveWait 02BF                ?_UART_Init 002F                ?_UART_Read 0075  
     start_initialization 0011               __end_of_isr 023E  __CFG_FOSC$INTRC_NOCLKOUT 0000  
  __end_of_spiReceiveWait 02C4               __pbssCOMMON 0070                 ___latbits 0002  
           __pcstackBANK0 0020           ?_spiReceiveWait 0075                  ?___aldiv 0020  
             ??_UART_Init 0033               ??_UART_Read 0075         __size_of_spiWrite 0006  
                ?_spiInit 0020                  ?_spiRead 0075                UART_Init@x 003F  
          __size_of_setup 0046           ___aldiv@divisor 0020      spiInit@sTransmitEdge 0022  
       interrupt_function 0004           ___aldiv@counter 0029                  _PIE1bits 008C  
      spiInit@sDataSample 0020                  _PIR1bits 000C         UART_Init@baudrate 002F  
        __size_of___aldiv 008F                  __ptext10 02B9          __size_of_spiInit 001C  
        __size_of_spiRead 0007         __CFG_BOR4V$BOR40V 0000             __size_of_main 005A  
                _received 004B                  _spiWrite 02B3              spiInit@sType 0023  
       spiInit@sClockIdle 0021                _INTCONbits 000B                  intlevel1 0000  
        ??_spiReceiveWait 0075                _OSCCONbits 008F              ___aldiv@sign 002A  
              _UART_Write 02A0  

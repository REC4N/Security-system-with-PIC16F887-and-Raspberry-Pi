

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Mar 12 12:24:13 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.05
    25                           ; Generated 20/12/2018 GMT
    26                           ; 
    27                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F887 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0088                     	;# 
    98  0089                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  008F                     	;# 
   103  0090                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0093                     	;# 
   107  0093                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009A                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  009F                     	;# 
   121  0105                     	;# 
   122  0107                     	;# 
   123  0108                     	;# 
   124  0109                     	;# 
   125  010C                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010E                     	;# 
   129  010F                     	;# 
   130  0185                     	;# 
   131  0187                     	;# 
   132  0188                     	;# 
   133  0189                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0088                     	;# 
   176  0089                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  008F                     	;# 
   181  0090                     	;# 
   182  0091                     	;# 
   183  0092                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0093                     	;# 
   187  0094                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0098                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  009F                     	;# 
   199  0105                     	;# 
   200  0107                     	;# 
   201  0108                     	;# 
   202  0109                     	;# 
   203  010C                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  0185                     	;# 
   209  0187                     	;# 
   210  0188                     	;# 
   211  0189                     	;# 
   212  018C                     	;# 
   213  018D                     	;# 
   214  0000                     	;# 
   215  0001                     	;# 
   216  0002                     	;# 
   217  0003                     	;# 
   218  0004                     	;# 
   219  0005                     	;# 
   220  0006                     	;# 
   221  0007                     	;# 
   222  0008                     	;# 
   223  0009                     	;# 
   224  000A                     	;# 
   225  000B                     	;# 
   226  000C                     	;# 
   227  000D                     	;# 
   228  000E                     	;# 
   229  000E                     	;# 
   230  000F                     	;# 
   231  0010                     	;# 
   232  0011                     	;# 
   233  0012                     	;# 
   234  0013                     	;# 
   235  0014                     	;# 
   236  0015                     	;# 
   237  0015                     	;# 
   238  0016                     	;# 
   239  0017                     	;# 
   240  0018                     	;# 
   241  0019                     	;# 
   242  001A                     	;# 
   243  001B                     	;# 
   244  001B                     	;# 
   245  001C                     	;# 
   246  001D                     	;# 
   247  001E                     	;# 
   248  001F                     	;# 
   249  0081                     	;# 
   250  0085                     	;# 
   251  0086                     	;# 
   252  0087                     	;# 
   253  0088                     	;# 
   254  0089                     	;# 
   255  008C                     	;# 
   256  008D                     	;# 
   257  008E                     	;# 
   258  008F                     	;# 
   259  0090                     	;# 
   260  0091                     	;# 
   261  0092                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0093                     	;# 
   265  0094                     	;# 
   266  0095                     	;# 
   267  0096                     	;# 
   268  0097                     	;# 
   269  0098                     	;# 
   270  0099                     	;# 
   271  009A                     	;# 
   272  009B                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009E                     	;# 
   276  009F                     	;# 
   277  0105                     	;# 
   278  0107                     	;# 
   279  0108                     	;# 
   280  0109                     	;# 
   281  010C                     	;# 
   282  010C                     	;# 
   283  010D                     	;# 
   284  010E                     	;# 
   285  010F                     	;# 
   286  0185                     	;# 
   287  0187                     	;# 
   288  0188                     	;# 
   289  0189                     	;# 
   290  018C                     	;# 
   291  018D                     	;# 
   292  000B                     _INTCONbits	set	11
   293  0019                     _TXREG	set	25
   294  000C                     _PIR1bits	set	12
   295  001A                     _RCREG	set	26
   296  0013                     _SSPBUF	set	19
   297  0014                     _SSPCON	set	20
   298  0063                     _SSPIF	set	99
   299  0065                     _RCIF	set	101
   300  00C4                     _CREN	set	196
   301  00C7                     _SPEN	set	199
   302  008C                     _PIE1bits	set	140
   303  0087                     _TRISCbits	set	135
   304  0085                     _TRISAbits	set	133
   305  0099                     _SPBRG	set	153
   306  008F                     _OSCCONbits	set	143
   307  0094                     _SSPSTATbits	set	148
   308  0094                     _SSPSTAT	set	148
   309  04C1                     _TRMT	set	1217
   310  04C5                     _TXEN	set	1221
   311  043E                     _TRISC6	set	1086
   312  043F                     _TRISC7	set	1087
   313  04C4                     _SYNC	set	1220
   314  04C2                     _BRGH	set	1218
   315  043B                     _TRISC3	set	1083
   316  043D                     _TRISC5	set	1085
   317                           
   318                           ; #config settings
   319  0000                     
   320                           	psect	cinit
   321  0011                     start_initialization:	
   322  0011                     __initialization:	
   323                           
   324                           ; Clear objects allocated to COMMON
   325  0011  01F0               	clrf	__pbssCOMMON& (0+127)
   326  0012  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   327  0013  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   328  0014  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   329  0015  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   330                           
   331                           ; Clear objects allocated to BANK0
   332  0016  1383               	bcf	3,7	;select IRP bank0
   333  0017  3042               	movlw	low __pbssBANK0
   334  0018  0084               	movwf	4
   335  0019  3057               	movlw	low (__pbssBANK0+21)
   336  001A  120A  118A  22A5   	fcall	clear_ram0
   337  001D                     end_of_initialization:	
   338                           ;End of C runtime variable initialization code
   339                           
   340  001D                     __end_of__initialization:	
   341  001D  0183               	clrf	3
   342  001E  120A  118A  2989   	ljmp	_main	;jump to C main() function
   343                           
   344                           	psect	bssCOMMON
   345  0070                     __pbssCOMMON:	
   346  0070                     _k:	
   347  0070                     	ds	1
   348  0071                     _temp:	
   349  0071                     	ds	1
   350  0072                     _j:	
   351  0072                     	ds	1
   352  0073                     _done:	
   353  0073                     	ds	1
   354  0074                     _i:	
   355  0074                     	ds	1
   356                           
   357                           	psect	bssBANK0
   358  0042                     __pbssBANK0:	
   359  0042                     _info:	
   360  0042                     	ds	10
   361  004C                     _send:	
   362  004C                     	ds	10
   363  0056                     _val:	
   364  0056                     	ds	1
   365                           
   366                           	psect	clrtext
   367  02A5                     clear_ram0:	
   368                           ;	Called with FSR containing the base address, and
   369                           ;	W with the last address+1
   370                           
   371  02A5  0064               	clrwdt	;clear the watchdog before getting into this loop
   372  02A6                     clrloop0:	
   373  02A6  0180               	clrf	0	;clear RAM location pointed to by FSR
   374  02A7  0A84               	incf	4,f	;increment pointer
   375  02A8  0604               	xorwf	4,w	;XOR with final address
   376  02A9  1903               	btfsc	3,2	;have we reached the end yet?
   377  02AA  3400               	retlw	0	;all done for this memory range, return
   378  02AB  0604               	xorwf	4,w	;XOR again to restore value
   379  02AC  2AA6               	goto	clrloop0	;do the next byte
   380                           
   381                           	psect	cstackCOMMON
   382  0075                     __pcstackCOMMON:	
   383  0075                     ?_setup:	
   384  0075                     ?_spiReceiveWait:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0075                     ??_spiReceiveWait:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0075                     ?_spiWrite:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0075                     ??_spiWrite:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0075                     ?_spiRead:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0075                     ??_spiRead:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0075                     ?_UART_Read:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0075                     ??_UART_Read:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0075                     ?_UART_Write:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0075                     ?_isr:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0075                     ?_main:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0075                     spiWrite@dat:	
   418                           ; 1 bytes @ 0x0
   419                           
   420                           
   421                           ; 1 bytes @ 0x0
   422  0075                     	ds	1
   423  0076                     ??_isr:	
   424                           
   425                           ; 1 bytes @ 0x1
   426  0076                     	ds	4
   427                           
   428                           	psect	cstackBANK0
   429  0020                     __pcstackBANK0:	
   430  0020                     ?_spiInit:	
   431  0020                     ??_UART_Write:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0020                     ?___aldiv:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0020                     spiInit@sDataSample:	
   438                           ; 4 bytes @ 0x0
   439                           
   440  0020                     UART_Write@data:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0020                     ___aldiv@divisor:	
   444                           ; 1 bytes @ 0x0
   445                           
   446                           
   447                           ; 4 bytes @ 0x0
   448  0020                     	ds	1
   449  0021                     spiInit@sClockIdle:	
   450                           
   451                           ; 1 bytes @ 0x1
   452  0021                     	ds	1
   453  0022                     spiInit@sTransmitEdge:	
   454                           
   455                           ; 1 bytes @ 0x2
   456  0022                     	ds	1
   457  0023                     ??_spiInit:	
   458  0023                     spiInit@sType:	
   459                           ; 1 bytes @ 0x3
   460                           
   461                           
   462                           ; 1 bytes @ 0x3
   463  0023                     	ds	1
   464  0024                     ___aldiv@dividend:	
   465                           
   466                           ; 4 bytes @ 0x4
   467  0024                     	ds	4
   468  0028                     ??___aldiv:	
   469                           
   470                           ; 1 bytes @ 0x8
   471  0028                     	ds	1
   472  0029                     ___aldiv@counter:	
   473                           
   474                           ; 1 bytes @ 0x9
   475  0029                     	ds	1
   476  002A                     ___aldiv@sign:	
   477                           
   478                           ; 1 bytes @ 0xA
   479  002A                     	ds	1
   480  002B                     ___aldiv@quotient:	
   481                           
   482                           ; 4 bytes @ 0xB
   483  002B                     	ds	4
   484  002F                     ?_UART_Init:	
   485  002F                     UART_Init@baudrate:	
   486                           ; 1 bytes @ 0xF
   487                           
   488                           
   489                           ; 4 bytes @ 0xF
   490  002F                     	ds	4
   491  0033                     ??_UART_Init:	
   492                           
   493                           ; 1 bytes @ 0x13
   494  0033                     	ds	12
   495  003F                     UART_Init@x:	
   496                           
   497                           ; 2 bytes @ 0x1F
   498  003F                     	ds	2
   499  0041                     ??_setup:	
   500  0041                     ??_main:	
   501                           ; 1 bytes @ 0x21
   502                           
   503                           
   504                           ; 1 bytes @ 0x21
   505  0041                     	ds	1
   506                           
   507                           	psect	maintext
   508  0189                     __pmaintext:	
   509 ;;
   510 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   511 ;;
   512 ;; *************** function _main *****************
   513 ;; Defined at:
   514 ;;		line 55 in file "mainTraductor.c"
   515 ;; Parameters:    Size  Location     Type
   516 ;;		None
   517 ;; Auto vars:     Size  Location     Type
   518 ;;		None
   519 ;; Return value:  Size  Location     Type
   520 ;;                  1    wreg      void 
   521 ;; Registers used:
   522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   523 ;; Tracked objects:
   524 ;;		On entry : B00/0
   525 ;;		On exit  : 0/0
   526 ;;		Unchanged: 0/0
   527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   528 ;;      Params:         0       0       0       0       0
   529 ;;      Locals:         0       0       0       0       0
   530 ;;      Temps:          0       1       0       0       0
   531 ;;      Totals:         0       1       0       0       0
   532 ;;Total ram usage:        1 bytes
   533 ;; Hardware stack levels required when called:    6
   534 ;; This function calls:
   535 ;;		_UART_Write
   536 ;;		_setup
   537 ;; This function is called by:
   538 ;;		Startup code after reset
   539 ;; This function uses a non-reentrant model
   540 ;;
   541                           
   542                           
   543                           ;psect for function _main
   544  0189                     _main:	
   545                           
   546                           ;mainTraductor.c: 56:     setup();
   547                           
   548                           ;incstack = 0
   549                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   550  0189  120A  118A  2247  120A  118A  	fcall	_setup
   551  018E                     l1313:	
   552                           
   553                           ;mainTraductor.c: 59:         if (done == 1){
   554  018E  0373               	decf	_done,w
   555  018F  1D03               	btfss	3,2
   556  0190  298E               	goto	l1313
   557                           
   558                           ;mainTraductor.c: 60:             info[9] = 'A';
   559  0191  3041               	movlw	65
   560  0192  1283               	bcf	3,5	;RP0=0, select bank0
   561  0193  1303               	bcf	3,6	;RP1=0, select bank0
   562  0194  00C1               	movwf	??_main
   563  0195  0841               	movf	??_main,w
   564  0196  00CB               	movwf	_info+9
   565                           
   566                           ;mainTraductor.c: 61:             UART_Write(info[0]);
   567  0197  0842               	movf	_info,w
   568  0198  120A  118A  2299  120A  118A  	fcall	_UART_Write
   569                           
   570                           ;mainTraductor.c: 62:             UART_Write(info[1]);
   571  019D  1283               	bcf	3,5	;RP0=0, select bank0
   572  019E  1303               	bcf	3,6	;RP1=0, select bank0
   573  019F  0843               	movf	_info+1,w
   574  01A0  120A  118A  2299  120A  118A  	fcall	_UART_Write
   575                           
   576                           ;mainTraductor.c: 63:             UART_Write(info[2]);
   577  01A5  1283               	bcf	3,5	;RP0=0, select bank0
   578  01A6  1303               	bcf	3,6	;RP1=0, select bank0
   579  01A7  0844               	movf	_info+2,w
   580  01A8  120A  118A  2299  120A  118A  	fcall	_UART_Write
   581                           
   582                           ;mainTraductor.c: 64:             UART_Write(info[3]);
   583  01AD  1283               	bcf	3,5	;RP0=0, select bank0
   584  01AE  1303               	bcf	3,6	;RP1=0, select bank0
   585  01AF  0845               	movf	_info+3,w
   586  01B0  120A  118A  2299  120A  118A  	fcall	_UART_Write
   587                           
   588                           ;mainTraductor.c: 65:             UART_Write(info[4]);
   589  01B5  1283               	bcf	3,5	;RP0=0, select bank0
   590  01B6  1303               	bcf	3,6	;RP1=0, select bank0
   591  01B7  0846               	movf	_info+4,w
   592  01B8  120A  118A  2299  120A  118A  	fcall	_UART_Write
   593                           
   594                           ;mainTraductor.c: 66:             UART_Write(info[5]);
   595  01BD  1283               	bcf	3,5	;RP0=0, select bank0
   596  01BE  1303               	bcf	3,6	;RP1=0, select bank0
   597  01BF  0847               	movf	_info+5,w
   598  01C0  120A  118A  2299  120A  118A  	fcall	_UART_Write
   599                           
   600                           ;mainTraductor.c: 67:             UART_Write(info[6]);
   601  01C5  1283               	bcf	3,5	;RP0=0, select bank0
   602  01C6  1303               	bcf	3,6	;RP1=0, select bank0
   603  01C7  0848               	movf	_info+6,w
   604  01C8  120A  118A  2299  120A  118A  	fcall	_UART_Write
   605                           
   606                           ;mainTraductor.c: 68:             UART_Write(info[7]);
   607  01CD  1283               	bcf	3,5	;RP0=0, select bank0
   608  01CE  1303               	bcf	3,6	;RP1=0, select bank0
   609  01CF  0849               	movf	_info+7,w
   610  01D0  120A  118A  2299  120A  118A  	fcall	_UART_Write
   611                           
   612                           ;mainTraductor.c: 69:             UART_Write(info[8]);
   613  01D5  1283               	bcf	3,5	;RP0=0, select bank0
   614  01D6  1303               	bcf	3,6	;RP1=0, select bank0
   615  01D7  084A               	movf	_info+8,w
   616  01D8  120A  118A  2299  120A  118A  	fcall	_UART_Write
   617                           
   618                           ;mainTraductor.c: 70:             UART_Write(info[9]);
   619  01DD  1283               	bcf	3,5	;RP0=0, select bank0
   620  01DE  1303               	bcf	3,6	;RP1=0, select bank0
   621  01DF  084B               	movf	_info+9,w
   622  01E0  120A  118A  2299  120A  118A  	fcall	_UART_Write
   623                           
   624                           ;mainTraductor.c: 71:             for (k = 0; k < 10; k++){
   625  01E5  01F0               	clrf	_k
   626  01E6                     l1343:	
   627                           
   628                           ;mainTraductor.c: 72:                 send[k] = info[k];
   629  01E6  0870               	movf	_k,w
   630  01E7  3E42               	addlw	(low (_info| 0))& (0+255)
   631  01E8  0084               	movwf	4
   632  01E9  1383               	bcf	3,7	;select IRP bank0
   633  01EA  0800               	movf	0,w
   634  01EB  1283               	bcf	3,5	;RP0=0, select bank0
   635  01EC  1303               	bcf	3,6	;RP1=0, select bank0
   636  01ED  00C1               	movwf	??_main
   637  01EE  0870               	movf	_k,w
   638  01EF  3E4C               	addlw	(low (_send| 0))& (0+255)
   639  01F0  0084               	movwf	4
   640  01F1  0841               	movf	??_main,w
   641  01F2  0080               	movwf	0
   642                           
   643                           ;mainTraductor.c: 73:             }
   644  01F3  3001               	movlw	1
   645  01F4  00C1               	movwf	??_main
   646  01F5  0841               	movf	??_main,w
   647  01F6  07F0               	addwf	_k,f
   648  01F7  300A               	movlw	10
   649  01F8  0270               	subwf	_k,w
   650  01F9  1C03               	skipc
   651  01FA  29E6               	goto	l1343
   652                           
   653                           ;mainTraductor.c: 74:             done = 0;
   654  01FB  01F3               	clrf	_done
   655                           
   656                           ;mainTraductor.c: 75:             i = 0;
   657  01FC  01F4               	clrf	_i
   658  01FD  298E               	goto	l1313
   659  01FE                     __end_of_main:	
   660                           
   661                           	psect	text1
   662  0247                     __ptext1:	
   663 ;; *************** function _setup *****************
   664 ;; Defined at:
   665 ;;		line 80 in file "mainTraductor.c"
   666 ;; Parameters:    Size  Location     Type
   667 ;;		None
   668 ;; Auto vars:     Size  Location     Type
   669 ;;		None
   670 ;; Return value:  Size  Location     Type
   671 ;;                  1    wreg      void 
   672 ;; Registers used:
   673 ;;		wreg, status,2, status,0, pclath, cstack
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   679 ;;      Params:         0       0       0       0       0
   680 ;;      Locals:         0       0       0       0       0
   681 ;;      Temps:          0       0       0       0       0
   682 ;;      Totals:         0       0       0       0       0
   683 ;;Total ram usage:        0 bytes
   684 ;; Hardware stack levels used:    1
   685 ;; Hardware stack levels required when called:    5
   686 ;; This function calls:
   687 ;;		_UART_Init
   688 ;;		_spiInit
   689 ;; This function is called by:
   690 ;;		_main
   691 ;; This function uses a non-reentrant model
   692 ;;
   693                           
   694                           
   695                           ;psect for function _setup
   696  0247                     _setup:	
   697                           
   698                           ;mainTraductor.c: 81:     OSCCONbits.IRCF0 = 1;
   699                           
   700                           ;incstack = 0
   701                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   702  0247  1683               	bsf	3,5	;RP0=1, select bank1
   703  0248  1303               	bcf	3,6	;RP1=0, select bank1
   704  0249  160F               	bsf	15,4	;volatile
   705                           
   706                           ;mainTraductor.c: 82:     OSCCONbits.IRCF1 = 1;
   707  024A  168F               	bsf	15,5	;volatile
   708                           
   709                           ;mainTraductor.c: 83:     OSCCONbits.IRCF2 = 1;
   710  024B  170F               	bsf	15,6	;volatile
   711                           
   712                           ;mainTraductor.c: 84:     OSCCONbits.SCS = 1;
   713  024C  140F               	bsf	15,0	;volatile
   714                           
   715                           ;mainTraductor.c: 85:     val = 0;
   716  024D  1283               	bcf	3,5	;RP0=0, select bank0
   717  024E  1303               	bcf	3,6	;RP1=0, select bank0
   718  024F  01D6               	clrf	_val
   719                           
   720                           ;mainTraductor.c: 86:     i = 0;
   721  0250  01F4               	clrf	_i
   722                           
   723                           ;mainTraductor.c: 87:     j = 0;
   724  0251  01F2               	clrf	_j
   725                           
   726                           ;mainTraductor.c: 88:     TRISAbits.TRISA5 = 1;
   727  0252  1683               	bsf	3,5	;RP0=1, select bank1
   728  0253  1303               	bcf	3,6	;RP1=0, select bank1
   729  0254  1685               	bsf	5,5	;volatile
   730                           
   731                           ;mainTraductor.c: 89:     TRISCbits.TRISC3 = 1;
   732  0255  1587               	bsf	7,3	;volatile
   733                           
   734                           ;mainTraductor.c: 90:     INTCONbits.GIE = 1;
   735  0256  178B               	bsf	11,7	;volatile
   736                           
   737                           ;mainTraductor.c: 91:     INTCONbits.PEIE = 1;
   738  0257  170B               	bsf	11,6	;volatile
   739                           
   740                           ;mainTraductor.c: 92:     PIR1bits.SSPIF = 0;
   741  0258  1283               	bcf	3,5	;RP0=0, select bank0
   742  0259  1303               	bcf	3,6	;RP1=0, select bank0
   743  025A  118C               	bcf	12,3	;volatile
   744                           
   745                           ;mainTraductor.c: 93:     PIE1bits.SSPIE = 1;
   746  025B  1683               	bsf	3,5	;RP0=1, select bank1
   747  025C  1303               	bcf	3,6	;RP1=0, select bank1
   748  025D  158C               	bsf	12,3	;volatile
   749                           
   750                           ;mainTraductor.c: 94:     PIR1bits.RCIF = 0;
   751  025E  1283               	bcf	3,5	;RP0=0, select bank0
   752  025F  1303               	bcf	3,6	;RP1=0, select bank0
   753  0260  128C               	bcf	12,5	;volatile
   754                           
   755                           ;mainTraductor.c: 95:     PIE1bits.RCIE = 1;
   756  0261  1683               	bsf	3,5	;RP0=1, select bank1
   757  0262  1303               	bcf	3,6	;RP1=0, select bank1
   758  0263  168C               	bsf	12,5	;volatile
   759                           
   760                           ;mainTraductor.c: 96:     UART_Init(9600);
   761  0264  3000               	movlw	0
   762  0265  1283               	bcf	3,5	;RP0=0, select bank0
   763  0266  1303               	bcf	3,6	;RP1=0, select bank0
   764  0267  00B2               	movwf	UART_Init@baudrate+3
   765  0268  3000               	movlw	0
   766  0269  00B1               	movwf	UART_Init@baudrate+2
   767  026A  3025               	movlw	37
   768  026B  00B0               	movwf	UART_Init@baudrate+1
   769  026C  3080               	movlw	128
   770  026D  00AF               	movwf	UART_Init@baudrate
   771  026E  120A  118A  2021  120A  118A  	fcall	_UART_Init
   772                           
   773                           ;mainTraductor.c: 97:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDL
      +                          E_LOW, SPI_IDLE_2_ACTIVE);
   774  0273  1283               	bcf	3,5	;RP0=0, select bank0
   775  0274  1303               	bcf	3,6	;RP1=0, select bank0
   776  0275  01A0               	clrf	spiInit@sDataSample
   777  0276  01A1               	clrf	spiInit@sClockIdle
   778  0277  01A2               	clrf	spiInit@sTransmitEdge
   779  0278  3024               	movlw	36
   780  0279  120A  118A  227D   	fcall	_spiInit
   781  027C  0008               	return
   782  027D                     __end_of_setup:	
   783                           
   784                           	psect	text2
   785  027D                     __ptext2:	
   786 ;; *************** function _spiInit *****************
   787 ;; Defined at:
   788 ;;		line 13 in file "SPI.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;  sType           1    wreg     enum E1264
   791 ;;  sDataSample     1    0[BANK0 ] enum E1272
   792 ;;  sClockIdle      1    1[BANK0 ] enum E1276
   793 ;;  sTransmitEdg    1    2[BANK0 ] enum E1280
   794 ;; Auto vars:     Size  Location     Type
   795 ;;  sType           1    3[BANK0 ] enum E1264
   796 ;; Return value:  Size  Location     Type
   797 ;;                  1    wreg      void 
   798 ;; Registers used:
   799 ;;		wreg, status,2, status,0
   800 ;; Tracked objects:
   801 ;;		On entry : 0/0
   802 ;;		On exit  : 0/0
   803 ;;		Unchanged: 0/0
   804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   805 ;;      Params:         0       3       0       0       0
   806 ;;      Locals:         0       1       0       0       0
   807 ;;      Temps:          0       0       0       0       0
   808 ;;      Totals:         0       4       0       0       0
   809 ;;Total ram usage:        4 bytes
   810 ;; Hardware stack levels used:    1
   811 ;; Hardware stack levels required when called:    3
   812 ;; This function calls:
   813 ;;		Nothing
   814 ;; This function is called by:
   815 ;;		_setup
   816 ;; This function uses a non-reentrant model
   817 ;;
   818                           
   819                           
   820                           ;psect for function _spiInit
   821  027D                     _spiInit:	
   822                           
   823                           ;incstack = 0
   824                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   825                           ;spiInit@sType stored from wreg
   826  027D  1283               	bcf	3,5	;RP0=0, select bank0
   827  027E  1303               	bcf	3,6	;RP1=0, select bank0
   828  027F  00A3               	movwf	spiInit@sType
   829                           
   830                           ;SPI.c: 13: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 14: {;SPI.c: 15:     TRISC5 = 0;
   831  0280  1683               	bsf	3,5	;RP0=1, select bank1
   832  0281  1303               	bcf	3,6	;RP1=0, select bank1
   833  0282  1287               	bcf	7,5	;volatile
   834                           
   835                           ;SPI.c: 16:     if(sType & 0b00000100)
   836  0283  1283               	bcf	3,5	;RP0=0, select bank0
   837  0284  1303               	bcf	3,6	;RP1=0, select bank0
   838  0285  1D23               	btfss	spiInit@sType,2
   839  0286  2A8D               	goto	l1245
   840                           
   841                           ;SPI.c: 17:     {;SPI.c: 18:         SSPSTAT = sTransmitEdge;
   842  0287  0822               	movf	spiInit@sTransmitEdge,w
   843  0288  1683               	bsf	3,5	;RP0=1, select bank1
   844  0289  1303               	bcf	3,6	;RP1=0, select bank1
   845  028A  0094               	movwf	20	;volatile
   846                           
   847                           ;SPI.c: 19:         TRISC3 = 1;
   848  028B  1587               	bsf	7,3	;volatile
   849                           
   850                           ;SPI.c: 20:     }
   851  028C  2A93               	goto	l16
   852  028D                     l1245:	
   853                           
   854                           ;SPI.c: 22:     {;SPI.c: 23:         SSPSTAT = sDataSample | sTransmitEdge;
   855  028D  0820               	movf	spiInit@sDataSample,w
   856  028E  0422               	iorwf	spiInit@sTransmitEdge,w
   857  028F  1683               	bsf	3,5	;RP0=1, select bank1
   858  0290  1303               	bcf	3,6	;RP1=0, select bank1
   859  0291  0094               	movwf	20	;volatile
   860                           
   861                           ;SPI.c: 24:         TRISC3 = 0;
   862  0292  1187               	bcf	7,3	;volatile
   863  0293                     l16:	
   864                           ;SPI.c: 25:     }
   865                           
   866                           
   867                           ;SPI.c: 27:     SSPCON = sType | sClockIdle;
   868  0293  1283               	bcf	3,5	;RP0=0, select bank0
   869  0294  1303               	bcf	3,6	;RP1=0, select bank0
   870  0295  0823               	movf	spiInit@sType,w
   871  0296  0421               	iorwf	spiInit@sClockIdle,w
   872  0297  0094               	movwf	20	;volatile
   873  0298  0008               	return
   874  0299                     __end_of_spiInit:	
   875                           
   876                           	psect	text3
   877  0021                     __ptext3:	
   878 ;; *************** function _UART_Init *****************
   879 ;; Defined at:
   880 ;;		line 8 in file "./UART.h"
   881 ;; Parameters:    Size  Location     Type
   882 ;;  baudrate        4   15[BANK0 ] const long 
   883 ;; Auto vars:     Size  Location     Type
   884 ;;  x               2   31[BANK0 ] unsigned int 
   885 ;; Return value:  Size  Location     Type
   886 ;;                  1    wreg      unsigned char 
   887 ;; Registers used:
   888 ;;		wreg, status,2, status,0, pclath, cstack
   889 ;; Tracked objects:
   890 ;;		On entry : 0/0
   891 ;;		On exit  : 0/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   894 ;;      Params:         0       4       0       0       0
   895 ;;      Locals:         0       2       0       0       0
   896 ;;      Temps:          0      12       0       0       0
   897 ;;      Totals:         0      18       0       0       0
   898 ;;Total ram usage:       18 bytes
   899 ;; Hardware stack levels used:    1
   900 ;; Hardware stack levels required when called:    4
   901 ;; This function calls:
   902 ;;		___aldiv
   903 ;; This function is called by:
   904 ;;		_setup
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908                           
   909                           ;psect for function _UART_Init
   910  0021                     _UART_Init:	
   911                           
   912                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
   913                           
   914                           ;incstack = 0
   915                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
   916  0021  1283               	bcf	3,5	;RP0=0, select bank0
   917  0022  1303               	bcf	3,6	;RP1=0, select bank0
   918  0023  082F               	movf	UART_Init@baudrate,w
   919  0024  00B3               	movwf	??_UART_Init
   920  0025  0830               	movf	UART_Init@baudrate+1,w
   921  0026  00B4               	movwf	??_UART_Init+1
   922  0027  0831               	movf	UART_Init@baudrate+2,w
   923  0028  00B5               	movwf	??_UART_Init+2
   924  0029  0832               	movf	UART_Init@baudrate+3,w
   925  002A  00B6               	movwf	??_UART_Init+3
   926  002B  3006               	movlw	6
   927  002C                     u725:	
   928  002C  1003               	clrc
   929  002D  0DB3               	rlf	??_UART_Init,f
   930  002E  0DB4               	rlf	??_UART_Init+1,f
   931  002F  0DB5               	rlf	??_UART_Init+2,f
   932  0030  0DB6               	rlf	??_UART_Init+3,f
   933  0031  3EFF               	addlw	-1
   934  0032  1D03               	skipz
   935  0033  282C               	goto	u725
   936  0034  0836               	movf	??_UART_Init+3,w
   937  0035  00A3               	movwf	___aldiv@divisor+3
   938  0036  0835               	movf	??_UART_Init+2,w
   939  0037  00A2               	movwf	___aldiv@divisor+2
   940  0038  0834               	movf	??_UART_Init+1,w
   941  0039  00A1               	movwf	___aldiv@divisor+1
   942  003A  0833               	movf	??_UART_Init,w
   943  003B  00A0               	movwf	___aldiv@divisor
   944  003C  082F               	movf	UART_Init@baudrate,w
   945  003D  00B7               	movwf	??_UART_Init+4
   946  003E  0830               	movf	UART_Init@baudrate+1,w
   947  003F  00B8               	movwf	??_UART_Init+5
   948  0040  0831               	movf	UART_Init@baudrate+2,w
   949  0041  00B9               	movwf	??_UART_Init+6
   950  0042  0832               	movf	UART_Init@baudrate+3,w
   951  0043  00BA               	movwf	??_UART_Init+7
   952  0044  3006               	movlw	6
   953  0045                     u735:	
   954  0045  1003               	clrc
   955  0046  0DB7               	rlf	??_UART_Init+4,f
   956  0047  0DB8               	rlf	??_UART_Init+5,f
   957  0048  0DB9               	rlf	??_UART_Init+6,f
   958  0049  0DBA               	rlf	??_UART_Init+7,f
   959  004A  3EFF               	addlw	-1
   960  004B  1D03               	skipz
   961  004C  2845               	goto	u735
   962  004D  3000               	movlw	0
   963  004E  00BB               	movwf	??_UART_Init+8
   964  004F  3012               	movlw	18
   965  0050  00BC               	movwf	??_UART_Init+9
   966  0051  307A               	movlw	122
   967  0052  00BD               	movwf	??_UART_Init+10
   968  0053  3000               	movlw	0
   969  0054  00BE               	movwf	??_UART_Init+11
   970  0055  0837               	movf	??_UART_Init+4,w
   971  0056  02BB               	subwf	??_UART_Init+8,f
   972  0057  0838               	movf	??_UART_Init+5,w
   973  0058  1C03               	skipc
   974  0059  0F38               	incfsz	??_UART_Init+5,w
   975  005A  285C               	goto	u741
   976  005B  285D               	goto	u742
   977  005C                     u741:	
   978  005C  02BC               	subwf	??_UART_Init+9,f
   979  005D                     u742:	
   980  005D  0839               	movf	??_UART_Init+6,w
   981  005E  1C03               	skipc
   982  005F  0F39               	incfsz	??_UART_Init+6,w
   983  0060  2862               	goto	u743
   984  0061  2863               	goto	u744
   985  0062                     u743:	
   986  0062  02BD               	subwf	??_UART_Init+10,f
   987  0063                     u744:	
   988  0063  083A               	movf	??_UART_Init+7,w
   989  0064  1C03               	skipc
   990  0065  0F3A               	incfsz	??_UART_Init+7,w
   991  0066  2868               	goto	u745
   992  0067  2869               	goto	u746
   993  0068                     u745:	
   994  0068  02BE               	subwf	??_UART_Init+11,f
   995  0069                     u746:	
   996  0069  083E               	movf	??_UART_Init+11,w
   997  006A  00A7               	movwf	___aldiv@dividend+3
   998  006B  083D               	movf	??_UART_Init+10,w
   999  006C  00A6               	movwf	___aldiv@dividend+2
  1000  006D  083C               	movf	??_UART_Init+9,w
  1001  006E  00A5               	movwf	___aldiv@dividend+1
  1002  006F  083B               	movf	??_UART_Init+8,w
  1003  0070  00A4               	movwf	___aldiv@dividend
  1004  0071  120A  118A  20FA  120A  118A  	fcall	___aldiv
  1005  0076  1283               	bcf	3,5	;RP0=0, select bank0
  1006  0077  1303               	bcf	3,6	;RP1=0, select bank0
  1007  0078  0821               	movf	?___aldiv+1,w
  1008  0079  00C0               	movwf	UART_Init@x+1
  1009  007A  0820               	movf	?___aldiv,w
  1010  007B  00BF               	movwf	UART_Init@x
  1011                           
  1012                           ;./UART.h: 12:  if(x>255)
  1013  007C  3001               	movlw	1
  1014  007D  0240               	subwf	UART_Init@x+1,w
  1015  007E  3000               	movlw	0
  1016  007F  1903               	skipnz
  1017  0080  023F               	subwf	UART_Init@x,w
  1018  0081  1C03               	skipc
  1019  0082  28DF               	goto	l1257
  1020                           
  1021                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  1022  0083  082F               	movf	UART_Init@baudrate,w
  1023  0084  00B3               	movwf	??_UART_Init
  1024  0085  0830               	movf	UART_Init@baudrate+1,w
  1025  0086  00B4               	movwf	??_UART_Init+1
  1026  0087  0831               	movf	UART_Init@baudrate+2,w
  1027  0088  00B5               	movwf	??_UART_Init+2
  1028  0089  0832               	movf	UART_Init@baudrate+3,w
  1029  008A  00B6               	movwf	??_UART_Init+3
  1030  008B  3004               	movlw	4
  1031  008C                     u765:	
  1032  008C  1003               	clrc
  1033  008D  0DB3               	rlf	??_UART_Init,f
  1034  008E  0DB4               	rlf	??_UART_Init+1,f
  1035  008F  0DB5               	rlf	??_UART_Init+2,f
  1036  0090  0DB6               	rlf	??_UART_Init+3,f
  1037  0091  3EFF               	addlw	-1
  1038  0092  1D03               	skipz
  1039  0093  288C               	goto	u765
  1040  0094  0836               	movf	??_UART_Init+3,w
  1041  0095  00A3               	movwf	___aldiv@divisor+3
  1042  0096  0835               	movf	??_UART_Init+2,w
  1043  0097  00A2               	movwf	___aldiv@divisor+2
  1044  0098  0834               	movf	??_UART_Init+1,w
  1045  0099  00A1               	movwf	___aldiv@divisor+1
  1046  009A  0833               	movf	??_UART_Init,w
  1047  009B  00A0               	movwf	___aldiv@divisor
  1048  009C  082F               	movf	UART_Init@baudrate,w
  1049  009D  00B7               	movwf	??_UART_Init+4
  1050  009E  0830               	movf	UART_Init@baudrate+1,w
  1051  009F  00B8               	movwf	??_UART_Init+5
  1052  00A0  0831               	movf	UART_Init@baudrate+2,w
  1053  00A1  00B9               	movwf	??_UART_Init+6
  1054  00A2  0832               	movf	UART_Init@baudrate+3,w
  1055  00A3  00BA               	movwf	??_UART_Init+7
  1056  00A4  3004               	movlw	4
  1057  00A5                     u775:	
  1058  00A5  1003               	clrc
  1059  00A6  0DB7               	rlf	??_UART_Init+4,f
  1060  00A7  0DB8               	rlf	??_UART_Init+5,f
  1061  00A8  0DB9               	rlf	??_UART_Init+6,f
  1062  00A9  0DBA               	rlf	??_UART_Init+7,f
  1063  00AA  3EFF               	addlw	-1
  1064  00AB  1D03               	skipz
  1065  00AC  28A5               	goto	u775
  1066  00AD  3000               	movlw	0
  1067  00AE  00BB               	movwf	??_UART_Init+8
  1068  00AF  3012               	movlw	18
  1069  00B0  00BC               	movwf	??_UART_Init+9
  1070  00B1  307A               	movlw	122
  1071  00B2  00BD               	movwf	??_UART_Init+10
  1072  00B3  3000               	movlw	0
  1073  00B4  00BE               	movwf	??_UART_Init+11
  1074  00B5  0837               	movf	??_UART_Init+4,w
  1075  00B6  02BB               	subwf	??_UART_Init+8,f
  1076  00B7  0838               	movf	??_UART_Init+5,w
  1077  00B8  1C03               	skipc
  1078  00B9  0F38               	incfsz	??_UART_Init+5,w
  1079  00BA  28BC               	goto	u781
  1080  00BB  28BD               	goto	u782
  1081  00BC                     u781:	
  1082  00BC  02BC               	subwf	??_UART_Init+9,f
  1083  00BD                     u782:	
  1084  00BD  0839               	movf	??_UART_Init+6,w
  1085  00BE  1C03               	skipc
  1086  00BF  0F39               	incfsz	??_UART_Init+6,w
  1087  00C0  28C2               	goto	u783
  1088  00C1  28C3               	goto	u784
  1089  00C2                     u783:	
  1090  00C2  02BD               	subwf	??_UART_Init+10,f
  1091  00C3                     u784:	
  1092  00C3  083A               	movf	??_UART_Init+7,w
  1093  00C4  1C03               	skipc
  1094  00C5  0F3A               	incfsz	??_UART_Init+7,w
  1095  00C6  28C8               	goto	u785
  1096  00C7  28C9               	goto	u786
  1097  00C8                     u785:	
  1098  00C8  02BE               	subwf	??_UART_Init+11,f
  1099  00C9                     u786:	
  1100  00C9  083E               	movf	??_UART_Init+11,w
  1101  00CA  00A7               	movwf	___aldiv@dividend+3
  1102  00CB  083D               	movf	??_UART_Init+10,w
  1103  00CC  00A6               	movwf	___aldiv@dividend+2
  1104  00CD  083C               	movf	??_UART_Init+9,w
  1105  00CE  00A5               	movwf	___aldiv@dividend+1
  1106  00CF  083B               	movf	??_UART_Init+8,w
  1107  00D0  00A4               	movwf	___aldiv@dividend
  1108  00D1  120A  118A  20FA  120A  118A  	fcall	___aldiv
  1109  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  1110  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  1111  00D8  0821               	movf	?___aldiv+1,w
  1112  00D9  00C0               	movwf	UART_Init@x+1
  1113  00DA  0820               	movf	?___aldiv,w
  1114  00DB  00BF               	movwf	UART_Init@x
  1115                           
  1116                           ;./UART.h: 15:   BRGH = 1;
  1117  00DC  1683               	bsf	3,5	;RP0=1, select bank1
  1118  00DD  1303               	bcf	3,6	;RP1=0, select bank1
  1119  00DE  1518               	bsf	24,2	;volatile
  1120  00DF                     l1257:	
  1121                           
  1122                           ;./UART.h: 17:  if(x<256)
  1123  00DF  3001               	movlw	1
  1124  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1125  00E1  0240               	subwf	UART_Init@x+1,w
  1126  00E2  3000               	movlw	0
  1127  00E3  1903               	skipnz
  1128  00E4  023F               	subwf	UART_Init@x,w
  1129  00E5  1803               	skipnc
  1130  00E6  0008               	return
  1131                           
  1132                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  1133  00E7  083F               	movf	UART_Init@x,w
  1134  00E8  1683               	bsf	3,5	;RP0=1, select bank1
  1135  00E9  1303               	bcf	3,6	;RP1=0, select bank1
  1136  00EA  0099               	movwf	25	;volatile
  1137                           
  1138                           ;./UART.h: 20:    SYNC = 0;
  1139  00EB  1218               	bcf	24,4	;volatile
  1140                           
  1141                           ;./UART.h: 21:    SPEN = 1;
  1142  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  1143  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  1144  00EE  1798               	bsf	24,7	;volatile
  1145                           
  1146                           ;./UART.h: 22:       TRISC7 = 1;
  1147  00EF  1683               	bsf	3,5	;RP0=1, select bank1
  1148  00F0  1303               	bcf	3,6	;RP1=0, select bank1
  1149  00F1  1787               	bsf	7,7	;volatile
  1150                           
  1151                           ;./UART.h: 23:       TRISC6 = 1;
  1152  00F2  1707               	bsf	7,6	;volatile
  1153                           
  1154                           ;./UART.h: 24:       CREN = 1;
  1155  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1156  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1157  00F5  1618               	bsf	24,4	;volatile
  1158                           
  1159                           ;./UART.h: 25:       TXEN = 1;
  1160  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  1161  00F7  1303               	bcf	3,6	;RP1=0, select bank1
  1162  00F8  1698               	bsf	24,5	;volatile
  1163  00F9  0008               	return
  1164  00FA                     __end_of_UART_Init:	
  1165                           
  1166                           	psect	text4
  1167  00FA                     __ptext4:	
  1168 ;; *************** function ___aldiv *****************
  1169 ;; Defined at:
  1170 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;  divisor         4    0[BANK0 ] long 
  1173 ;;  dividend        4    4[BANK0 ] long 
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;  quotient        4   11[BANK0 ] long 
  1176 ;;  sign            1   10[BANK0 ] unsigned char 
  1177 ;;  counter         1    9[BANK0 ] unsigned char 
  1178 ;; Return value:  Size  Location     Type
  1179 ;;                  4    0[BANK0 ] long 
  1180 ;; Registers used:
  1181 ;;		wreg, status,2, status,0
  1182 ;; Tracked objects:
  1183 ;;		On entry : 0/0
  1184 ;;		On exit  : 0/0
  1185 ;;		Unchanged: 0/0
  1186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1187 ;;      Params:         0       8       0       0       0
  1188 ;;      Locals:         0       6       0       0       0
  1189 ;;      Temps:          0       1       0       0       0
  1190 ;;      Totals:         0      15       0       0       0
  1191 ;;Total ram usage:       15 bytes
  1192 ;; Hardware stack levels used:    1
  1193 ;; Hardware stack levels required when called:    3
  1194 ;; This function calls:
  1195 ;;		Nothing
  1196 ;; This function is called by:
  1197 ;;		_UART_Init
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           
  1202                           ;psect for function ___aldiv
  1203  00FA                     ___aldiv:	
  1204                           
  1205                           ;incstack = 0
  1206                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1207  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  1208  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  1209  00FC  01AA               	clrf	___aldiv@sign
  1210  00FD  1FA3               	btfss	___aldiv@divisor+3,7
  1211  00FE  290C               	goto	l320
  1212  00FF  09A0               	comf	___aldiv@divisor,f
  1213  0100  09A1               	comf	___aldiv@divisor+1,f
  1214  0101  09A2               	comf	___aldiv@divisor+2,f
  1215  0102  09A3               	comf	___aldiv@divisor+3,f
  1216  0103  0AA0               	incf	___aldiv@divisor,f
  1217  0104  1903               	skipnz
  1218  0105  0AA1               	incf	___aldiv@divisor+1,f
  1219  0106  1903               	skipnz
  1220  0107  0AA2               	incf	___aldiv@divisor+2,f
  1221  0108  1903               	skipnz
  1222  0109  0AA3               	incf	___aldiv@divisor+3,f
  1223  010A  01AA               	clrf	___aldiv@sign
  1224  010B  0AAA               	incf	___aldiv@sign,f
  1225  010C                     l320:	
  1226  010C  1FA7               	btfss	___aldiv@dividend+3,7
  1227  010D  291D               	goto	l1209
  1228  010E  09A4               	comf	___aldiv@dividend,f
  1229  010F  09A5               	comf	___aldiv@dividend+1,f
  1230  0110  09A6               	comf	___aldiv@dividend+2,f
  1231  0111  09A7               	comf	___aldiv@dividend+3,f
  1232  0112  0AA4               	incf	___aldiv@dividend,f
  1233  0113  1903               	skipnz
  1234  0114  0AA5               	incf	___aldiv@dividend+1,f
  1235  0115  1903               	skipnz
  1236  0116  0AA6               	incf	___aldiv@dividend+2,f
  1237  0117  1903               	skipnz
  1238  0118  0AA7               	incf	___aldiv@dividend+3,f
  1239  0119  3001               	movlw	1
  1240  011A  00A8               	movwf	??___aldiv
  1241  011B  0828               	movf	??___aldiv,w
  1242  011C  06AA               	xorwf	___aldiv@sign,f
  1243  011D                     l1209:	
  1244  011D  3000               	movlw	0
  1245  011E  00AE               	movwf	___aldiv@quotient+3
  1246  011F  3000               	movlw	0
  1247  0120  00AD               	movwf	___aldiv@quotient+2
  1248  0121  3000               	movlw	0
  1249  0122  00AC               	movwf	___aldiv@quotient+1
  1250  0123  3000               	movlw	0
  1251  0124  00AB               	movwf	___aldiv@quotient
  1252  0125  0823               	movf	___aldiv@divisor+3,w
  1253  0126  0422               	iorwf	___aldiv@divisor+2,w
  1254  0127  0421               	iorwf	___aldiv@divisor+1,w
  1255  0128  0420               	iorwf	___aldiv@divisor,w
  1256  0129  1903               	skipnz
  1257  012A  2972               	goto	l1231
  1258  012B  01A9               	clrf	___aldiv@counter
  1259  012C  0AA9               	incf	___aldiv@counter,f
  1260  012D                     l1217:	
  1261  012D  1BA3               	btfsc	___aldiv@divisor+3,7
  1262  012E  293D               	goto	l1219
  1263  012F  3001               	movlw	1
  1264  0130  00A8               	movwf	??___aldiv
  1265  0131                     u645:	
  1266  0131  1003               	clrc
  1267  0132  0DA0               	rlf	___aldiv@divisor,f
  1268  0133  0DA1               	rlf	___aldiv@divisor+1,f
  1269  0134  0DA2               	rlf	___aldiv@divisor+2,f
  1270  0135  0DA3               	rlf	___aldiv@divisor+3,f
  1271  0136  0BA8               	decfsz	??___aldiv,f
  1272  0137  2931               	goto	u645
  1273  0138  3001               	movlw	1
  1274  0139  00A8               	movwf	??___aldiv
  1275  013A  0828               	movf	??___aldiv,w
  1276  013B  07A9               	addwf	___aldiv@counter,f
  1277  013C  292D               	goto	l1217
  1278  013D                     l1219:	
  1279  013D  3001               	movlw	1
  1280  013E  00A8               	movwf	??___aldiv
  1281  013F                     u665:	
  1282  013F  1003               	clrc
  1283  0140  0DAB               	rlf	___aldiv@quotient,f
  1284  0141  0DAC               	rlf	___aldiv@quotient+1,f
  1285  0142  0DAD               	rlf	___aldiv@quotient+2,f
  1286  0143  0DAE               	rlf	___aldiv@quotient+3,f
  1287  0144  0BA8               	decfsz	??___aldiv,f
  1288  0145  293F               	goto	u665
  1289  0146  0823               	movf	___aldiv@divisor+3,w
  1290  0147  0227               	subwf	___aldiv@dividend+3,w
  1291  0148  1D03               	skipz
  1292  0149  2954               	goto	u675
  1293  014A  0822               	movf	___aldiv@divisor+2,w
  1294  014B  0226               	subwf	___aldiv@dividend+2,w
  1295  014C  1D03               	skipz
  1296  014D  2954               	goto	u675
  1297  014E  0821               	movf	___aldiv@divisor+1,w
  1298  014F  0225               	subwf	___aldiv@dividend+1,w
  1299  0150  1D03               	skipz
  1300  0151  2954               	goto	u675
  1301  0152  0820               	movf	___aldiv@divisor,w
  1302  0153  0224               	subwf	___aldiv@dividend,w
  1303  0154                     u675:	
  1304  0154  1C03               	skipc
  1305  0155  2965               	goto	l1227
  1306  0156  0820               	movf	___aldiv@divisor,w
  1307  0157  02A4               	subwf	___aldiv@dividend,f
  1308  0158  0821               	movf	___aldiv@divisor+1,w
  1309  0159  1C03               	skipc
  1310  015A  0F21               	incfsz	___aldiv@divisor+1,w
  1311  015B  02A5               	subwf	___aldiv@dividend+1,f
  1312  015C  0822               	movf	___aldiv@divisor+2,w
  1313  015D  1C03               	skipc
  1314  015E  0F22               	incfsz	___aldiv@divisor+2,w
  1315  015F  02A6               	subwf	___aldiv@dividend+2,f
  1316  0160  0823               	movf	___aldiv@divisor+3,w
  1317  0161  1C03               	skipc
  1318  0162  0F23               	incfsz	___aldiv@divisor+3,w
  1319  0163  02A7               	subwf	___aldiv@dividend+3,f
  1320  0164  142B               	bsf	___aldiv@quotient,0
  1321  0165                     l1227:	
  1322  0165  3001               	movlw	1
  1323  0166                     u685:	
  1324  0166  1003               	clrc
  1325  0167  0CA3               	rrf	___aldiv@divisor+3,f
  1326  0168  0CA2               	rrf	___aldiv@divisor+2,f
  1327  0169  0CA1               	rrf	___aldiv@divisor+1,f
  1328  016A  0CA0               	rrf	___aldiv@divisor,f
  1329  016B  3EFF               	addlw	-1
  1330  016C  1D03               	skipz
  1331  016D  2966               	goto	u685
  1332  016E  3001               	movlw	1
  1333  016F  02A9               	subwf	___aldiv@counter,f
  1334  0170  1D03               	btfss	3,2
  1335  0171  293D               	goto	l1219
  1336  0172                     l1231:	
  1337  0172  082A               	movf	___aldiv@sign,w
  1338  0173  1903               	btfsc	3,2
  1339  0174  2980               	goto	l1235
  1340  0175  09AB               	comf	___aldiv@quotient,f
  1341  0176  09AC               	comf	___aldiv@quotient+1,f
  1342  0177  09AD               	comf	___aldiv@quotient+2,f
  1343  0178  09AE               	comf	___aldiv@quotient+3,f
  1344  0179  0AAB               	incf	___aldiv@quotient,f
  1345  017A  1903               	skipnz
  1346  017B  0AAC               	incf	___aldiv@quotient+1,f
  1347  017C  1903               	skipnz
  1348  017D  0AAD               	incf	___aldiv@quotient+2,f
  1349  017E  1903               	skipnz
  1350  017F  0AAE               	incf	___aldiv@quotient+3,f
  1351  0180                     l1235:	
  1352  0180  082E               	movf	___aldiv@quotient+3,w
  1353  0181  00A3               	movwf	?___aldiv+3
  1354  0182  082D               	movf	___aldiv@quotient+2,w
  1355  0183  00A2               	movwf	?___aldiv+2
  1356  0184  082C               	movf	___aldiv@quotient+1,w
  1357  0185  00A1               	movwf	?___aldiv+1
  1358  0186  082B               	movf	___aldiv@quotient,w
  1359  0187  00A0               	movwf	?___aldiv
  1360  0188  0008               	return
  1361  0189                     __end_of___aldiv:	
  1362                           
  1363                           	psect	text5
  1364  0299                     __ptext5:	
  1365 ;; *************** function _UART_Write *****************
  1366 ;; Defined at:
  1367 ;;		line 54 in file "./UART.h"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  data            1    wreg     unsigned char 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  data            1    0[BANK0 ] unsigned char 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1381 ;;      Params:         0       0       0       0       0
  1382 ;;      Locals:         0       1       0       0       0
  1383 ;;      Temps:          0       0       0       0       0
  1384 ;;      Totals:         0       1       0       0       0
  1385 ;;Total ram usage:        1 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    3
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;;		_UART_Write_Text
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           
  1397                           ;psect for function _UART_Write
  1398  0299                     _UART_Write:	
  1399                           
  1400                           ;incstack = 0
  1401                           ; Regs used in _UART_Write: [wreg]
  1402                           ;UART_Write@data stored from wreg
  1403  0299  1283               	bcf	3,5	;RP0=0, select bank0
  1404  029A  1303               	bcf	3,6	;RP1=0, select bank0
  1405  029B  00A0               	movwf	UART_Write@data
  1406  029C                     l120:	
  1407                           ;./UART.h: 58:   };
  1408                           
  1409                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(PIR1bits
      +                          .TXIF == 0){
  1410                           
  1411                           
  1412                           ;./UART.h: 56:   while(PIR1bits.TXIF == 0){
  1413  029C  1283               	bcf	3,5	;RP0=0, select bank0
  1414  029D  1303               	bcf	3,6	;RP1=0, select bank0
  1415  029E  1A0C               	btfsc	12,4	;volatile
  1416  029F  2AA2               	goto	l1277
  1417  02A0  0000               	nop	;# 
  1418  02A1  2A9C               	goto	l120
  1419  02A2                     l1277:	
  1420                           
  1421                           ;./UART.h: 59:   TXREG = data;
  1422  02A2  0820               	movf	UART_Write@data,w
  1423  02A3  0099               	movwf	25	;volatile
  1424  02A4  0008               	return
  1425  02A5                     __end_of_UART_Write:	
  1426                           
  1427                           	psect	text6
  1428  01FE                     __ptext6:	
  1429 ;; *************** function _isr *****************
  1430 ;; Defined at:
  1431 ;;		line 34 in file "mainTraductor.c"
  1432 ;; Parameters:    Size  Location     Type
  1433 ;;		None
  1434 ;; Auto vars:     Size  Location     Type
  1435 ;;		None
  1436 ;; Return value:  Size  Location     Type
  1437 ;;                  1    wreg      void 
  1438 ;; Registers used:
  1439 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1440 ;; Tracked objects:
  1441 ;;		On entry : 0/0
  1442 ;;		On exit  : 0/0
  1443 ;;		Unchanged: 0/0
  1444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1445 ;;      Params:         0       0       0       0       0
  1446 ;;      Locals:         0       0       0       0       0
  1447 ;;      Temps:          4       0       0       0       0
  1448 ;;      Totals:         4       0       0       0       0
  1449 ;;Total ram usage:        4 bytes
  1450 ;; Hardware stack levels used:    1
  1451 ;; Hardware stack levels required when called:    2
  1452 ;; This function calls:
  1453 ;;		_UART_Read
  1454 ;;		_spiRead
  1455 ;;		_spiWrite
  1456 ;; This function is called by:
  1457 ;;		Interrupt level 1
  1458 ;; This function uses a non-reentrant model
  1459 ;;
  1460                           
  1461                           
  1462                           ;psect for function _isr
  1463  01FE                     _isr:	
  1464                           
  1465                           ;mainTraductor.c: 35:     if (PIR1bits.RCIF == 1){
  1466  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  1467  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  1468  0200  1E8C               	btfss	12,5	;volatile
  1469  0201  2A1D               	goto	i1l150
  1470                           
  1471                           ;mainTraductor.c: 37:         temp = UART_Read();
  1472  0202  120A  118A  22BA  120A  118A  	fcall	_UART_Read
  1473  0207  00F6               	movwf	??_isr
  1474  0208  0876               	movf	??_isr,w
  1475  0209  00F1               	movwf	_temp
  1476                           
  1477                           ;mainTraductor.c: 38:         info[i] = temp;
  1478  020A  0871               	movf	_temp,w
  1479  020B  00F6               	movwf	??_isr
  1480  020C  0874               	movf	_i,w
  1481  020D  3E42               	addlw	(low (_info| 0))& (0+255)
  1482  020E  0084               	movwf	4
  1483  020F  0876               	movf	??_isr,w
  1484  0210  1383               	bcf	3,7	;select IRP bank0
  1485  0211  0080               	movwf	0
  1486                           
  1487                           ;mainTraductor.c: 39:         i++;
  1488  0212  3001               	movlw	1
  1489  0213  00F6               	movwf	??_isr
  1490  0214  0876               	movf	??_isr,w
  1491  0215  07F4               	addwf	_i,f
  1492                           
  1493                           ;mainTraductor.c: 40:         if (temp == 'A'){
  1494  0216  3041               	movlw	65
  1495  0217  0671               	xorwf	_temp,w
  1496  0218  1D03               	btfss	3,2
  1497  0219  2A3E               	goto	i1l155
  1498                           
  1499                           ;mainTraductor.c: 41:             done = 1;
  1500  021A  01F3               	clrf	_done
  1501  021B  0AF3               	incf	_done,f
  1502  021C  2A3E               	goto	i1l155
  1503  021D                     i1l150:	
  1504  021D  1D8C               	btfss	12,3	;volatile
  1505  021E  2A3E               	goto	i1l155
  1506                           
  1507                           ;mainTraductor.c: 45:         val = spiRead();
  1508  021F  120A  118A  22AD  120A  118A  	fcall	_spiRead
  1509  0224  00F6               	movwf	??_isr
  1510  0225  0876               	movf	??_isr,w
  1511  0226  1283               	bcf	3,5	;RP0=0, select bank0
  1512  0227  1303               	bcf	3,6	;RP1=0, select bank0
  1513  0228  00D6               	movwf	_val
  1514                           
  1515                           ;mainTraductor.c: 46:         spiWrite(send[j]);
  1516  0229  0872               	movf	_j,w
  1517  022A  3E4C               	addlw	(low (_send| 0))& (0+255)
  1518  022B  0084               	movwf	4
  1519  022C  1383               	bcf	3,7	;select IRP bank0
  1520  022D  0800               	movf	0,w
  1521  022E  120A  118A  22B4  120A  118A  	fcall	_spiWrite
  1522                           
  1523                           ;mainTraductor.c: 47:         j++;
  1524  0233  3001               	movlw	1
  1525  0234  00F6               	movwf	??_isr
  1526  0235  0876               	movf	??_isr,w
  1527  0236  07F2               	addwf	_j,f
  1528                           
  1529                           ;mainTraductor.c: 48:         if (j == 10){
  1530  0237  300A               	movlw	10
  1531  0238  0672               	xorwf	_j,w
  1532  0239  1903               	btfsc	3,2
  1533                           
  1534                           ;mainTraductor.c: 49:             j = 0;
  1535  023A  01F2               	clrf	_j
  1536                           
  1537                           ;mainTraductor.c: 51:         SSPIF = 0;
  1538  023B  1283               	bcf	3,5	;RP0=0, select bank0
  1539  023C  1303               	bcf	3,6	;RP1=0, select bank0
  1540  023D  118C               	bcf	12,3	;volatile
  1541  023E                     i1l155:	
  1542  023E  0879               	movf	??_isr+3,w
  1543  023F  008A               	movwf	10
  1544  0240  0878               	movf	??_isr+2,w
  1545  0241  0084               	movwf	4
  1546  0242  0E77               	swapf	(??_isr+1)^(0+4294967168),w
  1547  0243  0083               	movwf	3
  1548  0244  0EFE               	swapf	126,f
  1549  0245  0E7E               	swapf	126,w
  1550  0246  0009               	retfie
  1551  0247                     __end_of_isr:	
  1552                           
  1553                           	psect	intentry
  1554  0004                     __pintentry:	
  1555                           ;incstack = 0
  1556                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1557                           
  1558  0004                     interrupt_function:	
  1559  007E                     saved_w	set	btemp
  1560  0004  00FE               	movwf	btemp
  1561  0005  0E03               	swapf	3,w
  1562  0006  00F7               	movwf	??_isr+1
  1563  0007  0804               	movf	4,w
  1564  0008  00F8               	movwf	??_isr+2
  1565  0009  080A               	movf	10,w
  1566  000A  00F9               	movwf	??_isr+3
  1567  000B  120A  118A  29FE   	ljmp	_isr
  1568                           
  1569                           	psect	text7
  1570  02B4                     __ptext7:	
  1571 ;; *************** function _spiWrite *****************
  1572 ;; Defined at:
  1573 ;;		line 35 in file "SPI.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;  dat             1    wreg     unsigned char 
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;  dat             1    0[COMMON] unsigned char 
  1578 ;; Return value:  Size  Location     Type
  1579 ;;                  1    wreg      void 
  1580 ;; Registers used:
  1581 ;;		wreg
  1582 ;; Tracked objects:
  1583 ;;		On entry : 0/0
  1584 ;;		On exit  : 0/0
  1585 ;;		Unchanged: 0/0
  1586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1587 ;;      Params:         0       0       0       0       0
  1588 ;;      Locals:         1       0       0       0       0
  1589 ;;      Temps:          0       0       0       0       0
  1590 ;;      Totals:         1       0       0       0       0
  1591 ;;Total ram usage:        1 bytes
  1592 ;; Hardware stack levels used:    1
  1593 ;; This function calls:
  1594 ;;		Nothing
  1595 ;; This function is called by:
  1596 ;;		_isr
  1597 ;; This function uses a non-reentrant model
  1598 ;;
  1599                           
  1600                           
  1601                           ;psect for function _spiWrite
  1602  02B4                     _spiWrite:	
  1603                           
  1604                           ;incstack = 0
  1605                           ; Regs used in _spiWrite: [wreg]
  1606                           ;spiWrite@dat stored from wreg
  1607  02B4  00F5               	movwf	spiWrite@dat
  1608                           
  1609                           ;SPI.c: 35: void spiWrite(char dat);SPI.c: 36: {;SPI.c: 37:     SSPBUF = dat;
  1610  02B5  0875               	movf	spiWrite@dat,w
  1611  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  1612  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  1613  02B8  0093               	movwf	19	;volatile
  1614  02B9  0008               	return
  1615  02BA                     __end_of_spiWrite:	
  1616                           
  1617                           	psect	text8
  1618  02AD                     __ptext8:	
  1619 ;; *************** function _spiRead *****************
  1620 ;; Defined at:
  1621 ;;		line 48 in file "SPI.c"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;		None
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;		None
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  1    wreg      unsigned char 
  1628 ;; Registers used:
  1629 ;;		wreg, status,2, status,0, pclath, cstack
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1635 ;;      Params:         0       0       0       0       0
  1636 ;;      Locals:         0       0       0       0       0
  1637 ;;      Temps:          0       0       0       0       0
  1638 ;;      Totals:         0       0       0       0       0
  1639 ;;Total ram usage:        0 bytes
  1640 ;; Hardware stack levels used:    1
  1641 ;; Hardware stack levels required when called:    1
  1642 ;; This function calls:
  1643 ;;		_spiReceiveWait
  1644 ;; This function is called by:
  1645 ;;		_isr
  1646 ;; This function uses a non-reentrant model
  1647 ;;
  1648                           
  1649                           
  1650                           ;psect for function _spiRead
  1651  02AD                     _spiRead:	
  1652                           
  1653                           ;SPI.c: 50:     spiReceiveWait();
  1654                           
  1655                           ;incstack = 0
  1656                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1657  02AD  120A  118A  22C0   	fcall	_spiReceiveWait
  1658                           
  1659                           ;SPI.c: 51:     return(SSPBUF);
  1660  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  1661  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  1662  02B2  0813               	movf	19,w	;volatile
  1663  02B3  0008               	return
  1664  02B4                     __end_of_spiRead:	
  1665                           
  1666                           	psect	text9
  1667  02C0                     __ptext9:	
  1668 ;; *************** function _spiReceiveWait *****************
  1669 ;; Defined at:
  1670 ;;		line 30 in file "SPI.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;		None
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;		None
  1675 ;; Return value:  Size  Location     Type
  1676 ;;                  1    wreg      void 
  1677 ;; Registers used:
  1678 ;;		None
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1684 ;;      Params:         0       0       0       0       0
  1685 ;;      Locals:         0       0       0       0       0
  1686 ;;      Temps:          0       0       0       0       0
  1687 ;;      Totals:         0       0       0       0       0
  1688 ;;Total ram usage:        0 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_spiRead
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           
  1698                           ;psect for function _spiReceiveWait
  1699  02C0                     _spiReceiveWait:	
  1700  02C0                     i1l20:	
  1701                           ;SPI.c: 32:     while ( !SSPSTATbits.BF );
  1702                           
  1703                           ;incstack = 0
  1704                           ; Regs used in _spiReceiveWait: []
  1705                           
  1706  02C0  1683               	bsf	3,5	;RP0=1, select bank1
  1707  02C1  1303               	bcf	3,6	;RP1=0, select bank1
  1708  02C2  1814               	btfsc	20,0	;volatile
  1709  02C3  0008               	return
  1710  02C4  2AC0               	goto	i1l20
  1711  02C5                     __end_of_spiReceiveWait:	
  1712                           
  1713                           	psect	text10
  1714  02BA                     __ptext10:	
  1715 ;; *************** function _UART_Read *****************
  1716 ;; Defined at:
  1717 ;;		line 41 in file "./UART.h"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;		None
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;		None
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      unsigned char 
  1724 ;; Registers used:
  1725 ;;		wreg
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1731 ;;      Params:         0       0       0       0       0
  1732 ;;      Locals:         0       0       0       0       0
  1733 ;;      Temps:          0       0       0       0       0
  1734 ;;      Totals:         0       0       0       0       0
  1735 ;;Total ram usage:        0 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; This function calls:
  1738 ;;		Nothing
  1739 ;; This function is called by:
  1740 ;;		_isr
  1741 ;;		_UART_Read_Text
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           
  1746                           ;psect for function _UART_Read
  1747  02BA                     _UART_Read:	
  1748  02BA                     i1l108:	
  1749                           ;./UART.h: 43:   while(!RCIF);
  1750                           
  1751                           ;incstack = 0
  1752                           ; Regs used in _UART_Read: [wreg]
  1753                           
  1754  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  1755  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  1756  02BC  1E8C               	btfss	12,5	;volatile
  1757  02BD  2ABA               	goto	i1l108
  1758                           
  1759                           ;./UART.h: 44:   return RCREG;
  1760  02BE  081A               	movf	26,w	;volatile
  1761  02BF  0008               	return
  1762  02C0                     __end_of_UART_Read:	
  1763  007E                     btemp	set	126	;btemp
  1764  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     34      55
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_spiWrite

Critical Paths under _main in BANK0

    _setup->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1605
                                             33 BANK0      1     1      0
                         _UART_Write
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1574
                          _UART_Init
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     456
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4    1118
                                             15 BANK0     18    14      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     805
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0      22
                                              1 COMMON     4     4      0
                          _UART_Read
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (5) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (6) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Write
   _setup
     _UART_Init
       ___aldiv
     _spiInit

 _isr (ROOT)
   _UART_Read
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      41       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     22      37       5       68.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      41      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Mar 12 12:24:13 2019

                       _i 0074                         _j 0072                         _k 0070  
             __CFG_CP$OFF 0000               _SSPSTATbits 0094                        l16 0293  
                      fsr 0004                       l120 029C                       l320 010C  
            __CFG_CPD$OFF 0000                       u645 0131                       u741 005C  
                     u725 002C                       u742 005D                       u743 0062  
                     u735 0045                       u744 0063                       u665 013F  
                     u745 0068                       u746 0069                       u675 0154  
                     u685 0166                       u781 00BC                       u765 008C  
                     u782 00BD                       u783 00C2                       u775 00A5  
                     u784 00C3                       u785 00C8                       u786 00C9  
                     _isr 01FE                       _val 0056                       fsr0 0004  
                     indf 0000              __CFG_LVP$OFF 0000                      l1231 0172  
                    l1217 012D                      l1209 011D                      l1313 018E  
                    l1235 0180                      l1227 0165                      l1219 013D  
                    l1245 028D                      l1343 01E6                      l1257 00DF  
                    l1277 02A2                      ?_isr 0075                      _BRGH 04C2  
                    _CREN 00C4                      i1l20 02C0                      _RCIF 0065  
                    _SPEN 00C7                      _TRMT 04C1                      _TXEN 04C5  
                    _SYNC 04C4              __CFG_WRT$OFF 0000                      _done 0073  
                    _main 0189                      _info 0042                      _send 004C  
                    _temp 0071                      btemp 007E                      start 000E  
           __CFG_IESO$OFF 0000             __CFG_MCLRE$ON 0000                     ??_isr 0076  
         __end_of___aldiv 0189                     ?_main 0075             __CFG_WDTE$OFF 0000  
                   i1l108 02BA                     i1l150 021D                     i1l155 023E  
                   _RCREG 001A                     _SPBRG 0099                     _SSPIF 0063  
                   _TXREG 0019            __CFG_FCMEN$OFF 0000               ?_UART_Write 0075  
      __size_of_UART_Init 00D9        __size_of_UART_Read 0006                     _setup 0247  
          __CFG_BOREN$OFF 0000                     pclath 000A           __end_of_spiInit 0299  
         __end_of_spiRead 02B4                     status 0003                     wtemp0 007E  
         __initialization 0011              __end_of_main 01FE                    ??_main 0041  
                  ?_setup 0075                    _TRISC3 043B                    _TRISC5 043D  
                  _TRISC6 043E                    _TRISC7 043F                    _SSPCON 0014  
                  _SSPBUF 0013            __CFG_PWRTE$OFF 0000         __end_of_UART_Init 00FA  
       __end_of_UART_Read 02C0       __size_of_UART_Write 000C                 ??___aldiv 0028  
                  saved_w 007E          __end_of_spiWrite 02BA                 ??_spiInit 0023  
               ??_spiRead 0075   __end_of__initialization 001D            __pcstackCOMMON 0075  
           __end_of_setup 027D                   ??_setup 0041                __pbssBANK0 0042  
              __pmaintext 0189                __pintentry 0004   __size_of_spiReceiveWait 0005  
            ??_UART_Write 0020                   _SSPSTAT 0094                 ?_spiWrite 0075  
                 ___aldiv 00FA        __end_of_UART_Write 02A5                   __ptext1 0247  
                 __ptext2 027D                   __ptext3 0021                   __ptext4 00FA  
                 __ptext5 0299                   __ptext6 01FE                   __ptext7 02B4  
                 __ptext8 02AD                   __ptext9 02C0              __size_of_isr 0049  
        ___aldiv@dividend 0024                   _spiInit 027D                   _spiRead 02AD  
                 clrloop0 02A6      end_of_initialization 001D          ___aldiv@quotient 002B  
              ??_spiWrite 0075                 _UART_Init 0021                 _UART_Read 02BA  
          UART_Write@data 0020                 _TRISAbits 0085                 _TRISCbits 0087  
             spiWrite@dat 0075            _spiReceiveWait 02C0                ?_UART_Init 002F  
              ?_UART_Read 0075       start_initialization 0011               __end_of_isr 0247  
__CFG_FOSC$INTRC_NOCLKOUT 0000    __end_of_spiReceiveWait 02C5               __pbssCOMMON 0070  
               ___latbits 0002             __pcstackBANK0 0020           ?_spiReceiveWait 0075  
                ?___aldiv 0020               ??_UART_Init 0033               ??_UART_Read 0075  
       __size_of_spiWrite 0006                  ?_spiInit 0020                  ?_spiRead 0075  
              UART_Init@x 003F            __size_of_setup 0036           ___aldiv@divisor 0020  
    spiInit@sTransmitEdge 0022         interrupt_function 0004           ___aldiv@counter 0029  
               clear_ram0 02A5                  _PIE1bits 008C        spiInit@sDataSample 0020  
                _PIR1bits 000C         UART_Init@baudrate 002F          __size_of___aldiv 008F  
                __ptext10 02BA          __size_of_spiInit 001C          __size_of_spiRead 0007  
       __CFG_BOR4V$BOR40V 0000             __size_of_main 0075                  _spiWrite 02B4  
            spiInit@sType 0023         spiInit@sClockIdle 0021                _INTCONbits 000B  
                intlevel1 0000          ??_spiReceiveWait 0075                _OSCCONbits 008F  
            ___aldiv@sign 002A                _UART_Write 0299  

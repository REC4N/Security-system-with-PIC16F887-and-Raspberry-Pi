

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 11 08:19:11 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.05
    24                           ; Generated 20/12/2018 GMT
    25                           ; 
    26                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F887 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  008F                     	;# 
   102  0090                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0093                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0095                     	;# 
   110  0096                     	;# 
   111  0097                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009E                     	;# 
   119  009F                     	;# 
   120  0105                     	;# 
   121  0107                     	;# 
   122  0108                     	;# 
   123  0109                     	;# 
   124  010C                     	;# 
   125  010C                     	;# 
   126  010D                     	;# 
   127  010E                     	;# 
   128  010F                     	;# 
   129  0185                     	;# 
   130  0187                     	;# 
   131  0188                     	;# 
   132  0189                     	;# 
   133  018C                     	;# 
   134  018D                     	;# 
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  0007                     	;# 
   143  0008                     	;# 
   144  0009                     	;# 
   145  000A                     	;# 
   146  000B                     	;# 
   147  000C                     	;# 
   148  000D                     	;# 
   149  000E                     	;# 
   150  000E                     	;# 
   151  000F                     	;# 
   152  0010                     	;# 
   153  0011                     	;# 
   154  0012                     	;# 
   155  0013                     	;# 
   156  0014                     	;# 
   157  0015                     	;# 
   158  0015                     	;# 
   159  0016                     	;# 
   160  0017                     	;# 
   161  0018                     	;# 
   162  0019                     	;# 
   163  001A                     	;# 
   164  001B                     	;# 
   165  001B                     	;# 
   166  001C                     	;# 
   167  001D                     	;# 
   168  001E                     	;# 
   169  001F                     	;# 
   170  0081                     	;# 
   171  0085                     	;# 
   172  0086                     	;# 
   173  0087                     	;# 
   174  0088                     	;# 
   175  0089                     	;# 
   176  008C                     	;# 
   177  008D                     	;# 
   178  008E                     	;# 
   179  008F                     	;# 
   180  0090                     	;# 
   181  0091                     	;# 
   182  0092                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0098                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  009F                     	;# 
   198  0105                     	;# 
   199  0107                     	;# 
   200  0108                     	;# 
   201  0109                     	;# 
   202  010C                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  0185                     	;# 
   208  0187                     	;# 
   209  0188                     	;# 
   210  0189                     	;# 
   211  018C                     	;# 
   212  018D                     	;# 
   213  0000                     	;# 
   214  0001                     	;# 
   215  0002                     	;# 
   216  0003                     	;# 
   217  0004                     	;# 
   218  0005                     	;# 
   219  0006                     	;# 
   220  0007                     	;# 
   221  0008                     	;# 
   222  0009                     	;# 
   223  000A                     	;# 
   224  000B                     	;# 
   225  000C                     	;# 
   226  000D                     	;# 
   227  000E                     	;# 
   228  000E                     	;# 
   229  000F                     	;# 
   230  0010                     	;# 
   231  0011                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0014                     	;# 
   235  0015                     	;# 
   236  0015                     	;# 
   237  0016                     	;# 
   238  0017                     	;# 
   239  0018                     	;# 
   240  0019                     	;# 
   241  001A                     	;# 
   242  001B                     	;# 
   243  001B                     	;# 
   244  001C                     	;# 
   245  001D                     	;# 
   246  001E                     	;# 
   247  001F                     	;# 
   248  0081                     	;# 
   249  0085                     	;# 
   250  0086                     	;# 
   251  0087                     	;# 
   252  0088                     	;# 
   253  0089                     	;# 
   254  008C                     	;# 
   255  008D                     	;# 
   256  008E                     	;# 
   257  008F                     	;# 
   258  0090                     	;# 
   259  0091                     	;# 
   260  0092                     	;# 
   261  0093                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0094                     	;# 
   265  0095                     	;# 
   266  0096                     	;# 
   267  0097                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009A                     	;# 
   271  009B                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  009F                     	;# 
   276  0105                     	;# 
   277  0107                     	;# 
   278  0108                     	;# 
   279  0109                     	;# 
   280  010C                     	;# 
   281  010C                     	;# 
   282  010D                     	;# 
   283  010E                     	;# 
   284  010F                     	;# 
   285  0185                     	;# 
   286  0187                     	;# 
   287  0188                     	;# 
   288  0189                     	;# 
   289  018C                     	;# 
   290  018D                     	;# 
   291  000B                     _INTCONbits	set	11
   292  0019                     _TXREG	set	25
   293  000C                     _PIR1bits	set	12
   294  001A                     _RCREG	set	26
   295  0013                     _SSPBUF	set	19
   296  0014                     _SSPCON	set	20
   297  0063                     _SSPIF	set	99
   298  0065                     _RCIF	set	101
   299  00C4                     _CREN	set	196
   300  00C7                     _SPEN	set	199
   301  008C                     _PIE1bits	set	140
   302  0087                     _TRISCbits	set	135
   303  0085                     _TRISAbits	set	133
   304  0099                     _SPBRG	set	153
   305  008F                     _OSCCONbits	set	143
   306  0094                     _SSPSTATbits	set	148
   307  0094                     _SSPSTAT	set	148
   308  04C1                     _TRMT	set	1217
   309  04C5                     _TXEN	set	1221
   310  043E                     _TRISC6	set	1086
   311  043F                     _TRISC7	set	1087
   312  04C4                     _SYNC	set	1220
   313  04C2                     _BRGH	set	1218
   314  043B                     _TRISC3	set	1083
   315  043D                     _TRISC5	set	1085
   316                           
   317                           ; #config settings
   318  0000                     
   319                           	psect	cinit
   320  0011                     start_initialization:	
   321  0011                     __initialization:	
   322                           
   323                           ; Clear objects allocated to COMMON
   324  0011  01F0               	clrf	__pbssCOMMON& (0+127)
   325  0012  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   326  0013  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   327  0014  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   328  0015  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   329                           
   330                           ; Clear objects allocated to BANK0
   331  0016  1383               	bcf	3,7	;select IRP bank0
   332  0017  3042               	movlw	low __pbssBANK0
   333  0018  0084               	movwf	4
   334  0019  3057               	movlw	low (__pbssBANK0+21)
   335  001A  120A  118A  2249   	fcall	clear_ram0
   336  001D                     end_of_initialization:	
   337                           ;End of C runtime variable initialization code
   338                           
   339  001D                     __end_of__initialization:	
   340  001D  0183               	clrf	3
   341  001E  120A  118A  2A08   	ljmp	_main	;jump to C main() function
   342                           
   343                           	psect	bssCOMMON
   344  0070                     __pbssCOMMON:	
   345  0070                     _k:	
   346  0070                     	ds	1
   347  0071                     _temp:	
   348  0071                     	ds	1
   349  0072                     _j:	
   350  0072                     	ds	1
   351  0073                     _done:	
   352  0073                     	ds	1
   353  0074                     _i:	
   354  0074                     	ds	1
   355                           
   356                           	psect	bssBANK0
   357  0042                     __pbssBANK0:	
   358  0042                     _info:	
   359  0042                     	ds	10
   360  004C                     _send:	
   361  004C                     	ds	10
   362  0056                     _val:	
   363  0056                     	ds	1
   364                           
   365                           	psect	clrtext
   366  0249                     clear_ram0:	
   367                           ;	Called with FSR containing the base address, and
   368                           ;	W with the last address+1
   369                           
   370  0249  0064               	clrwdt	;clear the watchdog before getting into this loop
   371  024A                     clrloop0:	
   372  024A  0180               	clrf	0	;clear RAM location pointed to by FSR
   373  024B  0A84               	incf	4,f	;increment pointer
   374  024C  0604               	xorwf	4,w	;XOR with final address
   375  024D  1903               	btfsc	3,2	;have we reached the end yet?
   376  024E  3400               	retlw	0	;all done for this memory range, return
   377  024F  0604               	xorwf	4,w	;XOR again to restore value
   378  0250  2A4A               	goto	clrloop0	;do the next byte
   379                           
   380                           	psect	cstackCOMMON
   381  0075                     __pcstackCOMMON:	
   382  0075                     ?_setup:	
   383  0075                     ?_spiReceiveWait:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0075                     ??_spiReceiveWait:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0075                     ?_spiWrite:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0075                     ??_spiWrite:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0075                     ?_spiRead:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0075                     ??_spiRead:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0075                     ?_UART_Read:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0075                     ??_UART_Read:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0075                     ?_isr:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0075                     ?_main:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0075                     spiWrite@dat:	
   414                           ; 1 bytes @ 0x0
   415                           
   416                           
   417                           ; 1 bytes @ 0x0
   418  0075                     	ds	1
   419  0076                     ??_isr:	
   420                           
   421                           ; 1 bytes @ 0x1
   422  0076                     	ds	4
   423                           
   424                           	psect	cstackBANK0
   425  0020                     __pcstackBANK0:	
   426  0020                     ?_spiInit:	
   427  0020                     ?___aldiv:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0020                     spiInit@sDataSample:	
   431                           ; 4 bytes @ 0x0
   432                           
   433  0020                     ___aldiv@divisor:	
   434                           ; 1 bytes @ 0x0
   435                           
   436                           
   437                           ; 4 bytes @ 0x0
   438  0020                     	ds	1
   439  0021                     spiInit@sClockIdle:	
   440                           
   441                           ; 1 bytes @ 0x1
   442  0021                     	ds	1
   443  0022                     spiInit@sTransmitEdge:	
   444                           
   445                           ; 1 bytes @ 0x2
   446  0022                     	ds	1
   447  0023                     ??_spiInit:	
   448  0023                     spiInit@sType:	
   449                           ; 1 bytes @ 0x3
   450                           
   451                           
   452                           ; 1 bytes @ 0x3
   453  0023                     	ds	1
   454  0024                     ___aldiv@dividend:	
   455                           
   456                           ; 4 bytes @ 0x4
   457  0024                     	ds	4
   458  0028                     ??___aldiv:	
   459                           
   460                           ; 1 bytes @ 0x8
   461  0028                     	ds	1
   462  0029                     ___aldiv@counter:	
   463                           
   464                           ; 1 bytes @ 0x9
   465  0029                     	ds	1
   466  002A                     ___aldiv@sign:	
   467                           
   468                           ; 1 bytes @ 0xA
   469  002A                     	ds	1
   470  002B                     ___aldiv@quotient:	
   471                           
   472                           ; 4 bytes @ 0xB
   473  002B                     	ds	4
   474  002F                     ?_UART_Init:	
   475  002F                     UART_Init@baudrate:	
   476                           ; 1 bytes @ 0xF
   477                           
   478                           
   479                           ; 4 bytes @ 0xF
   480  002F                     	ds	4
   481  0033                     ??_UART_Init:	
   482                           
   483                           ; 1 bytes @ 0x13
   484  0033                     	ds	12
   485  003F                     UART_Init@x:	
   486                           
   487                           ; 2 bytes @ 0x1F
   488  003F                     	ds	2
   489  0041                     ??_setup:	
   490  0041                     ??_main:	
   491                           ; 1 bytes @ 0x21
   492                           
   493                           
   494                           ; 1 bytes @ 0x21
   495  0041                     	ds	1
   496                           
   497                           	psect	maintext
   498  0208                     __pmaintext:	
   499 ;;
   500 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   501 ;;
   502 ;; *************** function _main *****************
   503 ;; Defined at:
   504 ;;		line 55 in file "mainTraductor.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;		None
   507 ;; Auto vars:     Size  Location     Type
   508 ;;		None
   509 ;; Return value:  Size  Location     Type
   510 ;;                  1    wreg      void 
   511 ;; Registers used:
   512 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   513 ;; Tracked objects:
   514 ;;		On entry : B00/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   518 ;;      Params:         0       0       0       0       0
   519 ;;      Locals:         0       0       0       0       0
   520 ;;      Temps:          0       1       0       0       0
   521 ;;      Totals:         0       1       0       0       0
   522 ;;Total ram usage:        1 bytes
   523 ;; Hardware stack levels required when called:    6
   524 ;; This function calls:
   525 ;;		_setup
   526 ;; This function is called by:
   527 ;;		Startup code after reset
   528 ;; This function uses a non-reentrant model
   529 ;;
   530                           
   531                           
   532                           ;psect for function _main
   533  0208                     _main:	
   534                           
   535                           ;mainTraductor.c: 56:     setup();
   536                           
   537                           ;incstack = 0
   538                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   539  0208  120A  118A  21D2  120A  118A  	fcall	_setup
   540  020D                     l1249:	
   541                           
   542                           ;mainTraductor.c: 59:         if (done == 1){
   543  020D  0373               	decf	_done,w
   544  020E  1D03               	btfss	3,2
   545  020F  2A0D               	goto	l1249
   546                           
   547                           ;mainTraductor.c: 60:             info[9] = 'A';
   548  0210  3041               	movlw	65
   549  0211  1283               	bcf	3,5	;RP0=0, select bank0
   550  0212  1303               	bcf	3,6	;RP1=0, select bank0
   551  0213  00C1               	movwf	??_main
   552  0214  0841               	movf	??_main,w
   553  0215  00CB               	movwf	_info+9
   554                           
   555                           ;mainTraductor.c: 61:             for (k = 0; k < 10; k++){
   556  0216  01F0               	clrf	_k
   557  0217                     l1259:	
   558                           
   559                           ;mainTraductor.c: 62:                 send[k] = info[k];
   560  0217  0870               	movf	_k,w
   561  0218  3E42               	addlw	(low (_info| 0))& (0+255)
   562  0219  0084               	movwf	4
   563  021A  1383               	bcf	3,7	;select IRP bank0
   564  021B  0800               	movf	0,w
   565  021C  00C1               	movwf	??_main
   566  021D  0870               	movf	_k,w
   567  021E  3E4C               	addlw	(low (_send| 0))& (0+255)
   568  021F  0084               	movwf	4
   569  0220  0841               	movf	??_main,w
   570  0221  0080               	movwf	0
   571                           
   572                           ;mainTraductor.c: 63:             }
   573  0222  3001               	movlw	1
   574  0223  00C1               	movwf	??_main
   575  0224  0841               	movf	??_main,w
   576  0225  07F0               	addwf	_k,f
   577  0226  300A               	movlw	10
   578  0227  0270               	subwf	_k,w
   579  0228  1C03               	skipc
   580  0229  2A17               	goto	l1259
   581                           
   582                           ;mainTraductor.c: 64:             done = 0;
   583  022A  01F3               	clrf	_done
   584                           
   585                           ;mainTraductor.c: 65:             i = 0;
   586  022B  01F4               	clrf	_i
   587  022C  2A0D               	goto	l1249
   588  022D                     __end_of_main:	
   589                           
   590                           	psect	text1
   591  01D2                     __ptext1:	
   592 ;; *************** function _setup *****************
   593 ;; Defined at:
   594 ;;		line 70 in file "mainTraductor.c"
   595 ;; Parameters:    Size  Location     Type
   596 ;;		None
   597 ;; Auto vars:     Size  Location     Type
   598 ;;		None
   599 ;; Return value:  Size  Location     Type
   600 ;;                  1    wreg      void 
   601 ;; Registers used:
   602 ;;		wreg, status,2, status,0, pclath, cstack
   603 ;; Tracked objects:
   604 ;;		On entry : 0/0
   605 ;;		On exit  : 0/0
   606 ;;		Unchanged: 0/0
   607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   608 ;;      Params:         0       0       0       0       0
   609 ;;      Locals:         0       0       0       0       0
   610 ;;      Temps:          0       0       0       0       0
   611 ;;      Totals:         0       0       0       0       0
   612 ;;Total ram usage:        0 bytes
   613 ;; Hardware stack levels used:    1
   614 ;; Hardware stack levels required when called:    5
   615 ;; This function calls:
   616 ;;		_UART_Init
   617 ;;		_spiInit
   618 ;; This function is called by:
   619 ;;		_main
   620 ;; This function uses a non-reentrant model
   621 ;;
   622                           
   623                           
   624                           ;psect for function _setup
   625  01D2                     _setup:	
   626                           
   627                           ;mainTraductor.c: 71:     OSCCONbits.IRCF0 = 1;
   628                           
   629                           ;incstack = 0
   630                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   631  01D2  1683               	bsf	3,5	;RP0=1, select bank1
   632  01D3  1303               	bcf	3,6	;RP1=0, select bank1
   633  01D4  160F               	bsf	15,4	;volatile
   634                           
   635                           ;mainTraductor.c: 72:     OSCCONbits.IRCF1 = 1;
   636  01D5  168F               	bsf	15,5	;volatile
   637                           
   638                           ;mainTraductor.c: 73:     OSCCONbits.IRCF2 = 1;
   639  01D6  170F               	bsf	15,6	;volatile
   640                           
   641                           ;mainTraductor.c: 74:     OSCCONbits.SCS = 1;
   642  01D7  140F               	bsf	15,0	;volatile
   643                           
   644                           ;mainTraductor.c: 75:     val = 0;
   645  01D8  1283               	bcf	3,5	;RP0=0, select bank0
   646  01D9  1303               	bcf	3,6	;RP1=0, select bank0
   647  01DA  01D6               	clrf	_val
   648                           
   649                           ;mainTraductor.c: 76:     i = 0;
   650  01DB  01F4               	clrf	_i
   651                           
   652                           ;mainTraductor.c: 77:     j = 0;
   653  01DC  01F2               	clrf	_j
   654                           
   655                           ;mainTraductor.c: 78:     TRISAbits.TRISA5 = 1;
   656  01DD  1683               	bsf	3,5	;RP0=1, select bank1
   657  01DE  1303               	bcf	3,6	;RP1=0, select bank1
   658  01DF  1685               	bsf	5,5	;volatile
   659                           
   660                           ;mainTraductor.c: 79:     TRISCbits.TRISC3 = 1;
   661  01E0  1587               	bsf	7,3	;volatile
   662                           
   663                           ;mainTraductor.c: 80:     INTCONbits.GIE = 1;
   664  01E1  178B               	bsf	11,7	;volatile
   665                           
   666                           ;mainTraductor.c: 81:     INTCONbits.PEIE = 1;
   667  01E2  170B               	bsf	11,6	;volatile
   668                           
   669                           ;mainTraductor.c: 82:     PIR1bits.SSPIF = 0;
   670  01E3  1283               	bcf	3,5	;RP0=0, select bank0
   671  01E4  1303               	bcf	3,6	;RP1=0, select bank0
   672  01E5  118C               	bcf	12,3	;volatile
   673                           
   674                           ;mainTraductor.c: 83:     PIE1bits.SSPIE = 1;
   675  01E6  1683               	bsf	3,5	;RP0=1, select bank1
   676  01E7  1303               	bcf	3,6	;RP1=0, select bank1
   677  01E8  158C               	bsf	12,3	;volatile
   678                           
   679                           ;mainTraductor.c: 84:     PIR1bits.RCIF = 0;
   680  01E9  1283               	bcf	3,5	;RP0=0, select bank0
   681  01EA  1303               	bcf	3,6	;RP1=0, select bank0
   682  01EB  128C               	bcf	12,5	;volatile
   683                           
   684                           ;mainTraductor.c: 85:     PIE1bits.RCIE = 1;
   685  01EC  1683               	bsf	3,5	;RP0=1, select bank1
   686  01ED  1303               	bcf	3,6	;RP1=0, select bank1
   687  01EE  168C               	bsf	12,5	;volatile
   688                           
   689                           ;mainTraductor.c: 86:     UART_Init(9600);
   690  01EF  3000               	movlw	0
   691  01F0  1283               	bcf	3,5	;RP0=0, select bank0
   692  01F1  1303               	bcf	3,6	;RP1=0, select bank0
   693  01F2  00B2               	movwf	UART_Init@baudrate+3
   694  01F3  3000               	movlw	0
   695  01F4  00B1               	movwf	UART_Init@baudrate+2
   696  01F5  3025               	movlw	37
   697  01F6  00B0               	movwf	UART_Init@baudrate+1
   698  01F7  3080               	movlw	128
   699  01F8  00AF               	movwf	UART_Init@baudrate
   700  01F9  120A  118A  2021  120A  118A  	fcall	_UART_Init
   701                           
   702                           ;mainTraductor.c: 87:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDL
      +                          E_LOW, SPI_IDLE_2_ACTIVE);
   703  01FE  1283               	bcf	3,5	;RP0=0, select bank0
   704  01FF  1303               	bcf	3,6	;RP1=0, select bank0
   705  0200  01A0               	clrf	spiInit@sDataSample
   706  0201  01A1               	clrf	spiInit@sClockIdle
   707  0202  01A2               	clrf	spiInit@sTransmitEdge
   708  0203  3024               	movlw	36
   709  0204  120A  118A  222D   	fcall	_spiInit
   710  0207  0008               	return
   711  0208                     __end_of_setup:	
   712                           
   713                           	psect	text2
   714  022D                     __ptext2:	
   715 ;; *************** function _spiInit *****************
   716 ;; Defined at:
   717 ;;		line 13 in file "SPI.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;  sType           1    wreg     enum E1264
   720 ;;  sDataSample     1    0[BANK0 ] enum E1272
   721 ;;  sClockIdle      1    1[BANK0 ] enum E1276
   722 ;;  sTransmitEdg    1    2[BANK0 ] enum E1280
   723 ;; Auto vars:     Size  Location     Type
   724 ;;  sType           1    3[BANK0 ] enum E1264
   725 ;; Return value:  Size  Location     Type
   726 ;;                  1    wreg      void 
   727 ;; Registers used:
   728 ;;		wreg, status,2, status,0
   729 ;; Tracked objects:
   730 ;;		On entry : 0/0
   731 ;;		On exit  : 0/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   734 ;;      Params:         0       3       0       0       0
   735 ;;      Locals:         0       1       0       0       0
   736 ;;      Temps:          0       0       0       0       0
   737 ;;      Totals:         0       4       0       0       0
   738 ;;Total ram usage:        4 bytes
   739 ;; Hardware stack levels used:    1
   740 ;; Hardware stack levels required when called:    3
   741 ;; This function calls:
   742 ;;		Nothing
   743 ;; This function is called by:
   744 ;;		_setup
   745 ;; This function uses a non-reentrant model
   746 ;;
   747                           
   748                           
   749                           ;psect for function _spiInit
   750  022D                     _spiInit:	
   751                           
   752                           ;incstack = 0
   753                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   754                           ;spiInit@sType stored from wreg
   755  022D  1283               	bcf	3,5	;RP0=0, select bank0
   756  022E  1303               	bcf	3,6	;RP1=0, select bank0
   757  022F  00A3               	movwf	spiInit@sType
   758                           
   759                           ;SPI.c: 13: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 14: {;SPI.c: 15:     TRISC5 = 0;
   760  0230  1683               	bsf	3,5	;RP0=1, select bank1
   761  0231  1303               	bcf	3,6	;RP1=0, select bank1
   762  0232  1287               	bcf	7,5	;volatile
   763                           
   764                           ;SPI.c: 16:     if(sType & 0b00000100)
   765  0233  1283               	bcf	3,5	;RP0=0, select bank0
   766  0234  1303               	bcf	3,6	;RP1=0, select bank0
   767  0235  1D23               	btfss	spiInit@sType,2
   768  0236  2A3D               	goto	l1193
   769                           
   770                           ;SPI.c: 17:     {;SPI.c: 18:         SSPSTAT = sTransmitEdge;
   771  0237  0822               	movf	spiInit@sTransmitEdge,w
   772  0238  1683               	bsf	3,5	;RP0=1, select bank1
   773  0239  1303               	bcf	3,6	;RP1=0, select bank1
   774  023A  0094               	movwf	20	;volatile
   775                           
   776                           ;SPI.c: 19:         TRISC3 = 1;
   777  023B  1587               	bsf	7,3	;volatile
   778                           
   779                           ;SPI.c: 20:     }
   780  023C  2A43               	goto	l16
   781  023D                     l1193:	
   782                           
   783                           ;SPI.c: 22:     {;SPI.c: 23:         SSPSTAT = sDataSample | sTransmitEdge;
   784  023D  0820               	movf	spiInit@sDataSample,w
   785  023E  0422               	iorwf	spiInit@sTransmitEdge,w
   786  023F  1683               	bsf	3,5	;RP0=1, select bank1
   787  0240  1303               	bcf	3,6	;RP1=0, select bank1
   788  0241  0094               	movwf	20	;volatile
   789                           
   790                           ;SPI.c: 24:         TRISC3 = 0;
   791  0242  1187               	bcf	7,3	;volatile
   792  0243                     l16:	
   793                           ;SPI.c: 25:     }
   794                           
   795                           
   796                           ;SPI.c: 27:     SSPCON = sType | sClockIdle;
   797  0243  1283               	bcf	3,5	;RP0=0, select bank0
   798  0244  1303               	bcf	3,6	;RP1=0, select bank0
   799  0245  0823               	movf	spiInit@sType,w
   800  0246  0421               	iorwf	spiInit@sClockIdle,w
   801  0247  0094               	movwf	20	;volatile
   802  0248  0008               	return
   803  0249                     __end_of_spiInit:	
   804                           
   805                           	psect	text3
   806  0021                     __ptext3:	
   807 ;; *************** function _UART_Init *****************
   808 ;; Defined at:
   809 ;;		line 8 in file "./UART.h"
   810 ;; Parameters:    Size  Location     Type
   811 ;;  baudrate        4   15[BANK0 ] const long 
   812 ;; Auto vars:     Size  Location     Type
   813 ;;  x               2   31[BANK0 ] unsigned int 
   814 ;; Return value:  Size  Location     Type
   815 ;;                  1    wreg      unsigned char 
   816 ;; Registers used:
   817 ;;		wreg, status,2, status,0, pclath, cstack
   818 ;; Tracked objects:
   819 ;;		On entry : 0/0
   820 ;;		On exit  : 0/0
   821 ;;		Unchanged: 0/0
   822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   823 ;;      Params:         0       4       0       0       0
   824 ;;      Locals:         0       2       0       0       0
   825 ;;      Temps:          0      12       0       0       0
   826 ;;      Totals:         0      18       0       0       0
   827 ;;Total ram usage:       18 bytes
   828 ;; Hardware stack levels used:    1
   829 ;; Hardware stack levels required when called:    4
   830 ;; This function calls:
   831 ;;		___aldiv
   832 ;; This function is called by:
   833 ;;		_setup
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837                           
   838                           ;psect for function _UART_Init
   839  0021                     _UART_Init:	
   840                           
   841                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
   842                           
   843                           ;incstack = 0
   844                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
   845  0021  1283               	bcf	3,5	;RP0=0, select bank0
   846  0022  1303               	bcf	3,6	;RP1=0, select bank0
   847  0023  082F               	movf	UART_Init@baudrate,w
   848  0024  00B3               	movwf	??_UART_Init
   849  0025  0830               	movf	UART_Init@baudrate+1,w
   850  0026  00B4               	movwf	??_UART_Init+1
   851  0027  0831               	movf	UART_Init@baudrate+2,w
   852  0028  00B5               	movwf	??_UART_Init+2
   853  0029  0832               	movf	UART_Init@baudrate+3,w
   854  002A  00B6               	movwf	??_UART_Init+3
   855  002B  3006               	movlw	6
   856  002C                     u705:	
   857  002C  1003               	clrc
   858  002D  0DB3               	rlf	??_UART_Init,f
   859  002E  0DB4               	rlf	??_UART_Init+1,f
   860  002F  0DB5               	rlf	??_UART_Init+2,f
   861  0030  0DB6               	rlf	??_UART_Init+3,f
   862  0031  3EFF               	addlw	-1
   863  0032  1D03               	skipz
   864  0033  282C               	goto	u705
   865  0034  0836               	movf	??_UART_Init+3,w
   866  0035  00A3               	movwf	___aldiv@divisor+3
   867  0036  0835               	movf	??_UART_Init+2,w
   868  0037  00A2               	movwf	___aldiv@divisor+2
   869  0038  0834               	movf	??_UART_Init+1,w
   870  0039  00A1               	movwf	___aldiv@divisor+1
   871  003A  0833               	movf	??_UART_Init,w
   872  003B  00A0               	movwf	___aldiv@divisor
   873  003C  082F               	movf	UART_Init@baudrate,w
   874  003D  00B7               	movwf	??_UART_Init+4
   875  003E  0830               	movf	UART_Init@baudrate+1,w
   876  003F  00B8               	movwf	??_UART_Init+5
   877  0040  0831               	movf	UART_Init@baudrate+2,w
   878  0041  00B9               	movwf	??_UART_Init+6
   879  0042  0832               	movf	UART_Init@baudrate+3,w
   880  0043  00BA               	movwf	??_UART_Init+7
   881  0044  3006               	movlw	6
   882  0045                     u715:	
   883  0045  1003               	clrc
   884  0046  0DB7               	rlf	??_UART_Init+4,f
   885  0047  0DB8               	rlf	??_UART_Init+5,f
   886  0048  0DB9               	rlf	??_UART_Init+6,f
   887  0049  0DBA               	rlf	??_UART_Init+7,f
   888  004A  3EFF               	addlw	-1
   889  004B  1D03               	skipz
   890  004C  2845               	goto	u715
   891  004D  3000               	movlw	0
   892  004E  00BB               	movwf	??_UART_Init+8
   893  004F  3012               	movlw	18
   894  0050  00BC               	movwf	??_UART_Init+9
   895  0051  307A               	movlw	122
   896  0052  00BD               	movwf	??_UART_Init+10
   897  0053  3000               	movlw	0
   898  0054  00BE               	movwf	??_UART_Init+11
   899  0055  0837               	movf	??_UART_Init+4,w
   900  0056  02BB               	subwf	??_UART_Init+8,f
   901  0057  0838               	movf	??_UART_Init+5,w
   902  0058  1C03               	skipc
   903  0059  0F38               	incfsz	??_UART_Init+5,w
   904  005A  285C               	goto	u721
   905  005B  285D               	goto	u722
   906  005C                     u721:	
   907  005C  02BC               	subwf	??_UART_Init+9,f
   908  005D                     u722:	
   909  005D  0839               	movf	??_UART_Init+6,w
   910  005E  1C03               	skipc
   911  005F  0F39               	incfsz	??_UART_Init+6,w
   912  0060  2862               	goto	u723
   913  0061  2863               	goto	u724
   914  0062                     u723:	
   915  0062  02BD               	subwf	??_UART_Init+10,f
   916  0063                     u724:	
   917  0063  083A               	movf	??_UART_Init+7,w
   918  0064  1C03               	skipc
   919  0065  0F3A               	incfsz	??_UART_Init+7,w
   920  0066  2868               	goto	u725
   921  0067  2869               	goto	u726
   922  0068                     u725:	
   923  0068  02BE               	subwf	??_UART_Init+11,f
   924  0069                     u726:	
   925  0069  083E               	movf	??_UART_Init+11,w
   926  006A  00A7               	movwf	___aldiv@dividend+3
   927  006B  083D               	movf	??_UART_Init+10,w
   928  006C  00A6               	movwf	___aldiv@dividend+2
   929  006D  083C               	movf	??_UART_Init+9,w
   930  006E  00A5               	movwf	___aldiv@dividend+1
   931  006F  083B               	movf	??_UART_Init+8,w
   932  0070  00A4               	movwf	___aldiv@dividend
   933  0071  120A  118A  20FA  120A  118A  	fcall	___aldiv
   934  0076  1283               	bcf	3,5	;RP0=0, select bank0
   935  0077  1303               	bcf	3,6	;RP1=0, select bank0
   936  0078  0821               	movf	?___aldiv+1,w
   937  0079  00C0               	movwf	UART_Init@x+1
   938  007A  0820               	movf	?___aldiv,w
   939  007B  00BF               	movwf	UART_Init@x
   940                           
   941                           ;./UART.h: 12:  if(x>255)
   942  007C  3001               	movlw	1
   943  007D  0240               	subwf	UART_Init@x+1,w
   944  007E  3000               	movlw	0
   945  007F  1903               	skipnz
   946  0080  023F               	subwf	UART_Init@x,w
   947  0081  1C03               	skipc
   948  0082  28DF               	goto	l1205
   949                           
   950                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
   951  0083  082F               	movf	UART_Init@baudrate,w
   952  0084  00B3               	movwf	??_UART_Init
   953  0085  0830               	movf	UART_Init@baudrate+1,w
   954  0086  00B4               	movwf	??_UART_Init+1
   955  0087  0831               	movf	UART_Init@baudrate+2,w
   956  0088  00B5               	movwf	??_UART_Init+2
   957  0089  0832               	movf	UART_Init@baudrate+3,w
   958  008A  00B6               	movwf	??_UART_Init+3
   959  008B  3004               	movlw	4
   960  008C                     u745:	
   961  008C  1003               	clrc
   962  008D  0DB3               	rlf	??_UART_Init,f
   963  008E  0DB4               	rlf	??_UART_Init+1,f
   964  008F  0DB5               	rlf	??_UART_Init+2,f
   965  0090  0DB6               	rlf	??_UART_Init+3,f
   966  0091  3EFF               	addlw	-1
   967  0092  1D03               	skipz
   968  0093  288C               	goto	u745
   969  0094  0836               	movf	??_UART_Init+3,w
   970  0095  00A3               	movwf	___aldiv@divisor+3
   971  0096  0835               	movf	??_UART_Init+2,w
   972  0097  00A2               	movwf	___aldiv@divisor+2
   973  0098  0834               	movf	??_UART_Init+1,w
   974  0099  00A1               	movwf	___aldiv@divisor+1
   975  009A  0833               	movf	??_UART_Init,w
   976  009B  00A0               	movwf	___aldiv@divisor
   977  009C  082F               	movf	UART_Init@baudrate,w
   978  009D  00B7               	movwf	??_UART_Init+4
   979  009E  0830               	movf	UART_Init@baudrate+1,w
   980  009F  00B8               	movwf	??_UART_Init+5
   981  00A0  0831               	movf	UART_Init@baudrate+2,w
   982  00A1  00B9               	movwf	??_UART_Init+6
   983  00A2  0832               	movf	UART_Init@baudrate+3,w
   984  00A3  00BA               	movwf	??_UART_Init+7
   985  00A4  3004               	movlw	4
   986  00A5                     u755:	
   987  00A5  1003               	clrc
   988  00A6  0DB7               	rlf	??_UART_Init+4,f
   989  00A7  0DB8               	rlf	??_UART_Init+5,f
   990  00A8  0DB9               	rlf	??_UART_Init+6,f
   991  00A9  0DBA               	rlf	??_UART_Init+7,f
   992  00AA  3EFF               	addlw	-1
   993  00AB  1D03               	skipz
   994  00AC  28A5               	goto	u755
   995  00AD  3000               	movlw	0
   996  00AE  00BB               	movwf	??_UART_Init+8
   997  00AF  3012               	movlw	18
   998  00B0  00BC               	movwf	??_UART_Init+9
   999  00B1  307A               	movlw	122
  1000  00B2  00BD               	movwf	??_UART_Init+10
  1001  00B3  3000               	movlw	0
  1002  00B4  00BE               	movwf	??_UART_Init+11
  1003  00B5  0837               	movf	??_UART_Init+4,w
  1004  00B6  02BB               	subwf	??_UART_Init+8,f
  1005  00B7  0838               	movf	??_UART_Init+5,w
  1006  00B8  1C03               	skipc
  1007  00B9  0F38               	incfsz	??_UART_Init+5,w
  1008  00BA  28BC               	goto	u761
  1009  00BB  28BD               	goto	u762
  1010  00BC                     u761:	
  1011  00BC  02BC               	subwf	??_UART_Init+9,f
  1012  00BD                     u762:	
  1013  00BD  0839               	movf	??_UART_Init+6,w
  1014  00BE  1C03               	skipc
  1015  00BF  0F39               	incfsz	??_UART_Init+6,w
  1016  00C0  28C2               	goto	u763
  1017  00C1  28C3               	goto	u764
  1018  00C2                     u763:	
  1019  00C2  02BD               	subwf	??_UART_Init+10,f
  1020  00C3                     u764:	
  1021  00C3  083A               	movf	??_UART_Init+7,w
  1022  00C4  1C03               	skipc
  1023  00C5  0F3A               	incfsz	??_UART_Init+7,w
  1024  00C6  28C8               	goto	u765
  1025  00C7  28C9               	goto	u766
  1026  00C8                     u765:	
  1027  00C8  02BE               	subwf	??_UART_Init+11,f
  1028  00C9                     u766:	
  1029  00C9  083E               	movf	??_UART_Init+11,w
  1030  00CA  00A7               	movwf	___aldiv@dividend+3
  1031  00CB  083D               	movf	??_UART_Init+10,w
  1032  00CC  00A6               	movwf	___aldiv@dividend+2
  1033  00CD  083C               	movf	??_UART_Init+9,w
  1034  00CE  00A5               	movwf	___aldiv@dividend+1
  1035  00CF  083B               	movf	??_UART_Init+8,w
  1036  00D0  00A4               	movwf	___aldiv@dividend
  1037  00D1  120A  118A  20FA  120A  118A  	fcall	___aldiv
  1038  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  1039  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  1040  00D8  0821               	movf	?___aldiv+1,w
  1041  00D9  00C0               	movwf	UART_Init@x+1
  1042  00DA  0820               	movf	?___aldiv,w
  1043  00DB  00BF               	movwf	UART_Init@x
  1044                           
  1045                           ;./UART.h: 15:   BRGH = 1;
  1046  00DC  1683               	bsf	3,5	;RP0=1, select bank1
  1047  00DD  1303               	bcf	3,6	;RP1=0, select bank1
  1048  00DE  1518               	bsf	24,2	;volatile
  1049  00DF                     l1205:	
  1050                           
  1051                           ;./UART.h: 17:  if(x<256)
  1052  00DF  3001               	movlw	1
  1053  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1054  00E1  0240               	subwf	UART_Init@x+1,w
  1055  00E2  3000               	movlw	0
  1056  00E3  1903               	skipnz
  1057  00E4  023F               	subwf	UART_Init@x,w
  1058  00E5  1803               	skipnc
  1059  00E6  0008               	return
  1060                           
  1061                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  1062  00E7  083F               	movf	UART_Init@x,w
  1063  00E8  1683               	bsf	3,5	;RP0=1, select bank1
  1064  00E9  1303               	bcf	3,6	;RP1=0, select bank1
  1065  00EA  0099               	movwf	25	;volatile
  1066                           
  1067                           ;./UART.h: 20:    SYNC = 0;
  1068  00EB  1218               	bcf	24,4	;volatile
  1069                           
  1070                           ;./UART.h: 21:    SPEN = 1;
  1071  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  1072  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  1073  00EE  1798               	bsf	24,7	;volatile
  1074                           
  1075                           ;./UART.h: 22:       TRISC7 = 1;
  1076  00EF  1683               	bsf	3,5	;RP0=1, select bank1
  1077  00F0  1303               	bcf	3,6	;RP1=0, select bank1
  1078  00F1  1787               	bsf	7,7	;volatile
  1079                           
  1080                           ;./UART.h: 23:       TRISC6 = 1;
  1081  00F2  1707               	bsf	7,6	;volatile
  1082                           
  1083                           ;./UART.h: 24:       CREN = 1;
  1084  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1085  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1086  00F5  1618               	bsf	24,4	;volatile
  1087                           
  1088                           ;./UART.h: 25:       TXEN = 1;
  1089  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  1090  00F7  1303               	bcf	3,6	;RP1=0, select bank1
  1091  00F8  1698               	bsf	24,5	;volatile
  1092  00F9  0008               	return
  1093  00FA                     __end_of_UART_Init:	
  1094                           
  1095                           	psect	text4
  1096  00FA                     __ptext4:	
  1097 ;; *************** function ___aldiv *****************
  1098 ;; Defined at:
  1099 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;  divisor         4    0[BANK0 ] long 
  1102 ;;  dividend        4    4[BANK0 ] long 
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;  quotient        4   11[BANK0 ] long 
  1105 ;;  sign            1   10[BANK0 ] unsigned char 
  1106 ;;  counter         1    9[BANK0 ] unsigned char 
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  4    0[BANK0 ] long 
  1109 ;; Registers used:
  1110 ;;		wreg, status,2, status,0
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1116 ;;      Params:         0       8       0       0       0
  1117 ;;      Locals:         0       6       0       0       0
  1118 ;;      Temps:          0       1       0       0       0
  1119 ;;      Totals:         0      15       0       0       0
  1120 ;;Total ram usage:       15 bytes
  1121 ;; Hardware stack levels used:    1
  1122 ;; Hardware stack levels required when called:    3
  1123 ;; This function calls:
  1124 ;;		Nothing
  1125 ;; This function is called by:
  1126 ;;		_UART_Init
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           
  1131                           ;psect for function ___aldiv
  1132  00FA                     ___aldiv:	
  1133                           
  1134                           ;incstack = 0
  1135                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1136  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  1137  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  1138  00FC  01AA               	clrf	___aldiv@sign
  1139  00FD  1FA3               	btfss	___aldiv@divisor+3,7
  1140  00FE  290C               	goto	l320
  1141  00FF  09A0               	comf	___aldiv@divisor,f
  1142  0100  09A1               	comf	___aldiv@divisor+1,f
  1143  0101  09A2               	comf	___aldiv@divisor+2,f
  1144  0102  09A3               	comf	___aldiv@divisor+3,f
  1145  0103  0AA0               	incf	___aldiv@divisor,f
  1146  0104  1903               	skipnz
  1147  0105  0AA1               	incf	___aldiv@divisor+1,f
  1148  0106  1903               	skipnz
  1149  0107  0AA2               	incf	___aldiv@divisor+2,f
  1150  0108  1903               	skipnz
  1151  0109  0AA3               	incf	___aldiv@divisor+3,f
  1152  010A  01AA               	clrf	___aldiv@sign
  1153  010B  0AAA               	incf	___aldiv@sign,f
  1154  010C                     l320:	
  1155  010C  1FA7               	btfss	___aldiv@dividend+3,7
  1156  010D  291D               	goto	l1157
  1157  010E  09A4               	comf	___aldiv@dividend,f
  1158  010F  09A5               	comf	___aldiv@dividend+1,f
  1159  0110  09A6               	comf	___aldiv@dividend+2,f
  1160  0111  09A7               	comf	___aldiv@dividend+3,f
  1161  0112  0AA4               	incf	___aldiv@dividend,f
  1162  0113  1903               	skipnz
  1163  0114  0AA5               	incf	___aldiv@dividend+1,f
  1164  0115  1903               	skipnz
  1165  0116  0AA6               	incf	___aldiv@dividend+2,f
  1166  0117  1903               	skipnz
  1167  0118  0AA7               	incf	___aldiv@dividend+3,f
  1168  0119  3001               	movlw	1
  1169  011A  00A8               	movwf	??___aldiv
  1170  011B  0828               	movf	??___aldiv,w
  1171  011C  06AA               	xorwf	___aldiv@sign,f
  1172  011D                     l1157:	
  1173  011D  3000               	movlw	0
  1174  011E  00AE               	movwf	___aldiv@quotient+3
  1175  011F  3000               	movlw	0
  1176  0120  00AD               	movwf	___aldiv@quotient+2
  1177  0121  3000               	movlw	0
  1178  0122  00AC               	movwf	___aldiv@quotient+1
  1179  0123  3000               	movlw	0
  1180  0124  00AB               	movwf	___aldiv@quotient
  1181  0125  0823               	movf	___aldiv@divisor+3,w
  1182  0126  0422               	iorwf	___aldiv@divisor+2,w
  1183  0127  0421               	iorwf	___aldiv@divisor+1,w
  1184  0128  0420               	iorwf	___aldiv@divisor,w
  1185  0129  1903               	skipnz
  1186  012A  2972               	goto	l1179
  1187  012B  01A9               	clrf	___aldiv@counter
  1188  012C  0AA9               	incf	___aldiv@counter,f
  1189  012D                     l1165:	
  1190  012D  1BA3               	btfsc	___aldiv@divisor+3,7
  1191  012E  293D               	goto	l1167
  1192  012F  3001               	movlw	1
  1193  0130  00A8               	movwf	??___aldiv
  1194  0131                     u625:	
  1195  0131  1003               	clrc
  1196  0132  0DA0               	rlf	___aldiv@divisor,f
  1197  0133  0DA1               	rlf	___aldiv@divisor+1,f
  1198  0134  0DA2               	rlf	___aldiv@divisor+2,f
  1199  0135  0DA3               	rlf	___aldiv@divisor+3,f
  1200  0136  0BA8               	decfsz	??___aldiv,f
  1201  0137  2931               	goto	u625
  1202  0138  3001               	movlw	1
  1203  0139  00A8               	movwf	??___aldiv
  1204  013A  0828               	movf	??___aldiv,w
  1205  013B  07A9               	addwf	___aldiv@counter,f
  1206  013C  292D               	goto	l1165
  1207  013D                     l1167:	
  1208  013D  3001               	movlw	1
  1209  013E  00A8               	movwf	??___aldiv
  1210  013F                     u645:	
  1211  013F  1003               	clrc
  1212  0140  0DAB               	rlf	___aldiv@quotient,f
  1213  0141  0DAC               	rlf	___aldiv@quotient+1,f
  1214  0142  0DAD               	rlf	___aldiv@quotient+2,f
  1215  0143  0DAE               	rlf	___aldiv@quotient+3,f
  1216  0144  0BA8               	decfsz	??___aldiv,f
  1217  0145  293F               	goto	u645
  1218  0146  0823               	movf	___aldiv@divisor+3,w
  1219  0147  0227               	subwf	___aldiv@dividend+3,w
  1220  0148  1D03               	skipz
  1221  0149  2954               	goto	u655
  1222  014A  0822               	movf	___aldiv@divisor+2,w
  1223  014B  0226               	subwf	___aldiv@dividend+2,w
  1224  014C  1D03               	skipz
  1225  014D  2954               	goto	u655
  1226  014E  0821               	movf	___aldiv@divisor+1,w
  1227  014F  0225               	subwf	___aldiv@dividend+1,w
  1228  0150  1D03               	skipz
  1229  0151  2954               	goto	u655
  1230  0152  0820               	movf	___aldiv@divisor,w
  1231  0153  0224               	subwf	___aldiv@dividend,w
  1232  0154                     u655:	
  1233  0154  1C03               	skipc
  1234  0155  2965               	goto	l1175
  1235  0156  0820               	movf	___aldiv@divisor,w
  1236  0157  02A4               	subwf	___aldiv@dividend,f
  1237  0158  0821               	movf	___aldiv@divisor+1,w
  1238  0159  1C03               	skipc
  1239  015A  0F21               	incfsz	___aldiv@divisor+1,w
  1240  015B  02A5               	subwf	___aldiv@dividend+1,f
  1241  015C  0822               	movf	___aldiv@divisor+2,w
  1242  015D  1C03               	skipc
  1243  015E  0F22               	incfsz	___aldiv@divisor+2,w
  1244  015F  02A6               	subwf	___aldiv@dividend+2,f
  1245  0160  0823               	movf	___aldiv@divisor+3,w
  1246  0161  1C03               	skipc
  1247  0162  0F23               	incfsz	___aldiv@divisor+3,w
  1248  0163  02A7               	subwf	___aldiv@dividend+3,f
  1249  0164  142B               	bsf	___aldiv@quotient,0
  1250  0165                     l1175:	
  1251  0165  3001               	movlw	1
  1252  0166                     u665:	
  1253  0166  1003               	clrc
  1254  0167  0CA3               	rrf	___aldiv@divisor+3,f
  1255  0168  0CA2               	rrf	___aldiv@divisor+2,f
  1256  0169  0CA1               	rrf	___aldiv@divisor+1,f
  1257  016A  0CA0               	rrf	___aldiv@divisor,f
  1258  016B  3EFF               	addlw	-1
  1259  016C  1D03               	skipz
  1260  016D  2966               	goto	u665
  1261  016E  3001               	movlw	1
  1262  016F  02A9               	subwf	___aldiv@counter,f
  1263  0170  1D03               	btfss	3,2
  1264  0171  293D               	goto	l1167
  1265  0172                     l1179:	
  1266  0172  082A               	movf	___aldiv@sign,w
  1267  0173  1903               	btfsc	3,2
  1268  0174  2980               	goto	l1183
  1269  0175  09AB               	comf	___aldiv@quotient,f
  1270  0176  09AC               	comf	___aldiv@quotient+1,f
  1271  0177  09AD               	comf	___aldiv@quotient+2,f
  1272  0178  09AE               	comf	___aldiv@quotient+3,f
  1273  0179  0AAB               	incf	___aldiv@quotient,f
  1274  017A  1903               	skipnz
  1275  017B  0AAC               	incf	___aldiv@quotient+1,f
  1276  017C  1903               	skipnz
  1277  017D  0AAD               	incf	___aldiv@quotient+2,f
  1278  017E  1903               	skipnz
  1279  017F  0AAE               	incf	___aldiv@quotient+3,f
  1280  0180                     l1183:	
  1281  0180  082E               	movf	___aldiv@quotient+3,w
  1282  0181  00A3               	movwf	?___aldiv+3
  1283  0182  082D               	movf	___aldiv@quotient+2,w
  1284  0183  00A2               	movwf	?___aldiv+2
  1285  0184  082C               	movf	___aldiv@quotient+1,w
  1286  0185  00A1               	movwf	?___aldiv+1
  1287  0186  082B               	movf	___aldiv@quotient,w
  1288  0187  00A0               	movwf	?___aldiv
  1289  0188  0008               	return
  1290  0189                     __end_of___aldiv:	
  1291                           
  1292                           	psect	text5
  1293  0189                     __ptext5:	
  1294 ;; *************** function _isr *****************
  1295 ;; Defined at:
  1296 ;;		line 34 in file "mainTraductor.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;		None
  1299 ;; Auto vars:     Size  Location     Type
  1300 ;;		None
  1301 ;; Return value:  Size  Location     Type
  1302 ;;                  1    wreg      void 
  1303 ;; Registers used:
  1304 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1310 ;;      Params:         0       0       0       0       0
  1311 ;;      Locals:         0       0       0       0       0
  1312 ;;      Temps:          4       0       0       0       0
  1313 ;;      Totals:         4       0       0       0       0
  1314 ;;Total ram usage:        4 bytes
  1315 ;; Hardware stack levels used:    1
  1316 ;; Hardware stack levels required when called:    2
  1317 ;; This function calls:
  1318 ;;		_UART_Read
  1319 ;;		_spiRead
  1320 ;;		_spiWrite
  1321 ;; This function is called by:
  1322 ;;		Interrupt level 1
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326                           
  1327                           ;psect for function _isr
  1328  0189                     _isr:	
  1329                           
  1330                           ;mainTraductor.c: 35:     if (PIR1bits.RCIF == 1){
  1331  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1332  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1333  018B  1E8C               	btfss	12,5	;volatile
  1334  018C  29A8               	goto	i1l150
  1335                           
  1336                           ;mainTraductor.c: 37:         temp = UART_Read();
  1337  018D  120A  118A  225E  120A  118A  	fcall	_UART_Read
  1338  0192  00F6               	movwf	??_isr
  1339  0193  0876               	movf	??_isr,w
  1340  0194  00F1               	movwf	_temp
  1341                           
  1342                           ;mainTraductor.c: 38:         info[i] = temp;
  1343  0195  0871               	movf	_temp,w
  1344  0196  00F6               	movwf	??_isr
  1345  0197  0874               	movf	_i,w
  1346  0198  3E42               	addlw	(low (_info| 0))& (0+255)
  1347  0199  0084               	movwf	4
  1348  019A  0876               	movf	??_isr,w
  1349  019B  1383               	bcf	3,7	;select IRP bank0
  1350  019C  0080               	movwf	0
  1351                           
  1352                           ;mainTraductor.c: 39:         i++;
  1353  019D  3001               	movlw	1
  1354  019E  00F6               	movwf	??_isr
  1355  019F  0876               	movf	??_isr,w
  1356  01A0  07F4               	addwf	_i,f
  1357                           
  1358                           ;mainTraductor.c: 40:         if (temp == 'A'){
  1359  01A1  3041               	movlw	65
  1360  01A2  0671               	xorwf	_temp,w
  1361  01A3  1D03               	btfss	3,2
  1362  01A4  29C9               	goto	i1l155
  1363                           
  1364                           ;mainTraductor.c: 41:             done = 1;
  1365  01A5  01F3               	clrf	_done
  1366  01A6  0AF3               	incf	_done,f
  1367  01A7  29C9               	goto	i1l155
  1368  01A8                     i1l150:	
  1369  01A8  1D8C               	btfss	12,3	;volatile
  1370  01A9  29C9               	goto	i1l155
  1371                           
  1372                           ;mainTraductor.c: 45:         val = spiRead();
  1373  01AA  120A  118A  2251  120A  118A  	fcall	_spiRead
  1374  01AF  00F6               	movwf	??_isr
  1375  01B0  0876               	movf	??_isr,w
  1376  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  1377  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  1378  01B3  00D6               	movwf	_val
  1379                           
  1380                           ;mainTraductor.c: 46:         spiWrite(send[j]);
  1381  01B4  0872               	movf	_j,w
  1382  01B5  3E4C               	addlw	(low (_send| 0))& (0+255)
  1383  01B6  0084               	movwf	4
  1384  01B7  1383               	bcf	3,7	;select IRP bank0
  1385  01B8  0800               	movf	0,w
  1386  01B9  120A  118A  2258  120A  118A  	fcall	_spiWrite
  1387                           
  1388                           ;mainTraductor.c: 47:         j++;
  1389  01BE  3001               	movlw	1
  1390  01BF  00F6               	movwf	??_isr
  1391  01C0  0876               	movf	??_isr,w
  1392  01C1  07F2               	addwf	_j,f
  1393                           
  1394                           ;mainTraductor.c: 48:         if (j == 10){
  1395  01C2  300A               	movlw	10
  1396  01C3  0672               	xorwf	_j,w
  1397  01C4  1903               	btfsc	3,2
  1398                           
  1399                           ;mainTraductor.c: 49:             j = 0;
  1400  01C5  01F2               	clrf	_j
  1401                           
  1402                           ;mainTraductor.c: 51:         SSPIF = 0;
  1403  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  1404  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  1405  01C8  118C               	bcf	12,3	;volatile
  1406  01C9                     i1l155:	
  1407  01C9  0879               	movf	??_isr+3,w
  1408  01CA  008A               	movwf	10
  1409  01CB  0878               	movf	??_isr+2,w
  1410  01CC  0084               	movwf	4
  1411  01CD  0E77               	swapf	(??_isr+1)^(0+4294967168),w
  1412  01CE  0083               	movwf	3
  1413  01CF  0EFE               	swapf	126,f
  1414  01D0  0E7E               	swapf	126,w
  1415  01D1  0009               	retfie
  1416  01D2                     __end_of_isr:	
  1417                           
  1418                           	psect	intentry
  1419  0004                     __pintentry:	
  1420                           ;incstack = 0
  1421                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1422                           
  1423  0004                     interrupt_function:	
  1424  007E                     saved_w	set	btemp
  1425  0004  00FE               	movwf	btemp
  1426  0005  0E03               	swapf	3,w
  1427  0006  00F7               	movwf	??_isr+1
  1428  0007  0804               	movf	4,w
  1429  0008  00F8               	movwf	??_isr+2
  1430  0009  080A               	movf	10,w
  1431  000A  00F9               	movwf	??_isr+3
  1432  000B  120A  118A  2989   	ljmp	_isr
  1433                           
  1434                           	psect	text6
  1435  0258                     __ptext6:	
  1436 ;; *************** function _spiWrite *****************
  1437 ;; Defined at:
  1438 ;;		line 35 in file "SPI.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;  dat             1    wreg     unsigned char 
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;  dat             1    0[COMMON] unsigned char 
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		wreg
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1452 ;;      Params:         0       0       0       0       0
  1453 ;;      Locals:         1       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0
  1455 ;;      Totals:         1       0       0       0       0
  1456 ;;Total ram usage:        1 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; This function calls:
  1459 ;;		Nothing
  1460 ;; This function is called by:
  1461 ;;		_isr
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465                           
  1466                           ;psect for function _spiWrite
  1467  0258                     _spiWrite:	
  1468                           
  1469                           ;incstack = 0
  1470                           ; Regs used in _spiWrite: [wreg]
  1471                           ;spiWrite@dat stored from wreg
  1472  0258  00F5               	movwf	spiWrite@dat
  1473                           
  1474                           ;SPI.c: 35: void spiWrite(char dat);SPI.c: 36: {;SPI.c: 37:     SSPBUF = dat;
  1475  0259  0875               	movf	spiWrite@dat,w
  1476  025A  1283               	bcf	3,5	;RP0=0, select bank0
  1477  025B  1303               	bcf	3,6	;RP1=0, select bank0
  1478  025C  0093               	movwf	19	;volatile
  1479  025D  0008               	return
  1480  025E                     __end_of_spiWrite:	
  1481                           
  1482                           	psect	text7
  1483  0251                     __ptext7:	
  1484 ;; *************** function _spiRead *****************
  1485 ;; Defined at:
  1486 ;;		line 48 in file "SPI.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;		None
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;		None
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  1    wreg      unsigned char 
  1493 ;; Registers used:
  1494 ;;		wreg, status,2, status,0, pclath, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1500 ;;      Params:         0       0       0       0       0
  1501 ;;      Locals:         0       0       0       0       0
  1502 ;;      Temps:          0       0       0       0       0
  1503 ;;      Totals:         0       0       0       0       0
  1504 ;;Total ram usage:        0 bytes
  1505 ;; Hardware stack levels used:    1
  1506 ;; Hardware stack levels required when called:    1
  1507 ;; This function calls:
  1508 ;;		_spiReceiveWait
  1509 ;; This function is called by:
  1510 ;;		_isr
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514                           
  1515                           ;psect for function _spiRead
  1516  0251                     _spiRead:	
  1517                           
  1518                           ;SPI.c: 50:     spiReceiveWait();
  1519                           
  1520                           ;incstack = 0
  1521                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1522  0251  120A  118A  2264   	fcall	_spiReceiveWait
  1523                           
  1524                           ;SPI.c: 51:     return(SSPBUF);
  1525  0254  1283               	bcf	3,5	;RP0=0, select bank0
  1526  0255  1303               	bcf	3,6	;RP1=0, select bank0
  1527  0256  0813               	movf	19,w	;volatile
  1528  0257  0008               	return
  1529  0258                     __end_of_spiRead:	
  1530                           
  1531                           	psect	text8
  1532  0264                     __ptext8:	
  1533 ;; *************** function _spiReceiveWait *****************
  1534 ;; Defined at:
  1535 ;;		line 30 in file "SPI.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;		None
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;		None
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  1    wreg      void 
  1542 ;; Registers used:
  1543 ;;		None
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1549 ;;      Params:         0       0       0       0       0
  1550 ;;      Locals:         0       0       0       0       0
  1551 ;;      Temps:          0       0       0       0       0
  1552 ;;      Totals:         0       0       0       0       0
  1553 ;;Total ram usage:        0 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; This function calls:
  1556 ;;		Nothing
  1557 ;; This function is called by:
  1558 ;;		_spiRead
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           
  1563                           ;psect for function _spiReceiveWait
  1564  0264                     _spiReceiveWait:	
  1565  0264                     i1l20:	
  1566                           ;SPI.c: 32:     while ( !SSPSTATbits.BF );
  1567                           
  1568                           ;incstack = 0
  1569                           ; Regs used in _spiReceiveWait: []
  1570                           
  1571  0264  1683               	bsf	3,5	;RP0=1, select bank1
  1572  0265  1303               	bcf	3,6	;RP1=0, select bank1
  1573  0266  1814               	btfsc	20,0	;volatile
  1574  0267  0008               	return
  1575  0268  2A64               	goto	i1l20
  1576  0269                     __end_of_spiReceiveWait:	
  1577                           
  1578                           	psect	text9
  1579  025E                     __ptext9:	
  1580 ;; *************** function _UART_Read *****************
  1581 ;; Defined at:
  1582 ;;		line 41 in file "./UART.h"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;		None
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;		None
  1587 ;; Return value:  Size  Location     Type
  1588 ;;                  1    wreg      unsigned char 
  1589 ;; Registers used:
  1590 ;;		wreg
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1596 ;;      Params:         0       0       0       0       0
  1597 ;;      Locals:         0       0       0       0       0
  1598 ;;      Temps:          0       0       0       0       0
  1599 ;;      Totals:         0       0       0       0       0
  1600 ;;Total ram usage:        0 bytes
  1601 ;; Hardware stack levels used:    1
  1602 ;; This function calls:
  1603 ;;		Nothing
  1604 ;; This function is called by:
  1605 ;;		_isr
  1606 ;;		_UART_Read_Text
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610                           
  1611                           ;psect for function _UART_Read
  1612  025E                     _UART_Read:	
  1613  025E                     i1l108:	
  1614                           ;./UART.h: 43:   while(!RCIF);
  1615                           
  1616                           ;incstack = 0
  1617                           ; Regs used in _UART_Read: [wreg]
  1618                           
  1619  025E  1283               	bcf	3,5	;RP0=0, select bank0
  1620  025F  1303               	bcf	3,6	;RP1=0, select bank0
  1621  0260  1E8C               	btfss	12,5	;volatile
  1622  0261  2A5E               	goto	i1l108
  1623                           
  1624                           ;./UART.h: 44:   return RCREG;
  1625  0262  081A               	movf	26,w	;volatile
  1626  0263  0008               	return
  1627  0264                     __end_of_UART_Read:	
  1628  007E                     btemp	set	126	;btemp
  1629  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     34      55
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_spiWrite

Critical Paths under _main in BANK0

    _setup->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1574
                                             33 BANK0      1     1      0
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1574
                          _UART_Init
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     456
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4    1118
                                             15 BANK0     18    14      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     805
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0      22
                                              1 COMMON     4     4      0
                          _UART_Read
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (5) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (6) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _UART_Init
       ___aldiv
     _spiInit

 _isr (ROOT)
   _UART_Read
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      41       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     22      37       5       68.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      41      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 11 08:19:11 2019

                       _i 0074                         _j 0072                         _k 0070  
             __CFG_CP$OFF 0000               _SSPSTATbits 0094                        l16 0243  
                      fsr 0004                       l320 010C              __CFG_CPD$OFF 0000  
                     u625 0131                       u721 005C                       u705 002C  
                     u722 005D                       u723 0062                       u715 0045  
                     u724 0063                       u645 013F                       u725 0068  
                     u726 0069                       u655 0154                       u665 0166  
                     u761 00BC                       u745 008C                       u762 00BD  
                     u763 00C2                       u755 00A5                       u764 00C3  
                     u765 00C8                       u766 00C9                       _isr 0189  
                     _val 0056                       fsr0 0004                       indf 0000  
            __CFG_LVP$OFF 0000                      l1205 00DF                      l1165 012D  
                    l1157 011D                      l1183 0180                      l1175 0165  
                    l1167 013D                      l1193 023D                      l1249 020D  
                    l1179 0172                      l1259 0217                      ?_isr 0075  
                    _BRGH 04C2                      _CREN 00C4                      i1l20 0264  
                    _RCIF 0065                      _SPEN 00C7                      _TRMT 04C1  
                    _TXEN 04C5                      _SYNC 04C4              __CFG_WRT$OFF 0000  
                    _done 0073                      _main 0208                      _info 0042  
                    _send 004C                      _temp 0071                      btemp 007E  
                    start 000E             __CFG_IESO$OFF 0000             __CFG_MCLRE$ON 0000  
                   ??_isr 0076           __end_of___aldiv 0189                     ?_main 0075  
           __CFG_WDTE$OFF 0000                     i1l108 025E                     i1l150 01A8  
                   i1l155 01C9                     _RCREG 001A                     _SPBRG 0099  
                   _SSPIF 0063                     _TXREG 0019            __CFG_FCMEN$OFF 0000  
      __size_of_UART_Init 00D9        __size_of_UART_Read 0006                     _setup 01D2  
          __CFG_BOREN$OFF 0000                     pclath 000A           __end_of_spiInit 0249  
         __end_of_spiRead 0258                     status 0003                     wtemp0 007E  
         __initialization 0011              __end_of_main 022D                    ??_main 0041  
                  ?_setup 0075                    _TRISC3 043B                    _TRISC5 043D  
                  _TRISC6 043E                    _TRISC7 043F                    _SSPCON 0014  
                  _SSPBUF 0013            __CFG_PWRTE$OFF 0000         __end_of_UART_Init 00FA  
       __end_of_UART_Read 0264                 ??___aldiv 0028                    saved_w 007E  
        __end_of_spiWrite 025E                 ??_spiInit 0023                 ??_spiRead 0075  
 __end_of__initialization 001D            __pcstackCOMMON 0075             __end_of_setup 0208  
                 ??_setup 0041                __pbssBANK0 0042                __pmaintext 0208  
              __pintentry 0004   __size_of_spiReceiveWait 0005                   _SSPSTAT 0094  
               ?_spiWrite 0075                   ___aldiv 00FA                   __ptext1 01D2  
                 __ptext2 022D                   __ptext3 0021                   __ptext4 00FA  
                 __ptext5 0189                   __ptext6 0258                   __ptext7 0251  
                 __ptext8 0264                   __ptext9 025E              __size_of_isr 0049  
        ___aldiv@dividend 0024                   _spiInit 022D                   _spiRead 0251  
                 clrloop0 024A      end_of_initialization 001D          ___aldiv@quotient 002B  
              ??_spiWrite 0075                 _UART_Init 0021                 _UART_Read 025E  
               _TRISAbits 0085                 _TRISCbits 0087               spiWrite@dat 0075  
          _spiReceiveWait 0264                ?_UART_Init 002F                ?_UART_Read 0075  
     start_initialization 0011               __end_of_isr 01D2  __CFG_FOSC$INTRC_NOCLKOUT 0000  
  __end_of_spiReceiveWait 0269               __pbssCOMMON 0070                 ___latbits 0002  
           __pcstackBANK0 0020           ?_spiReceiveWait 0075                  ?___aldiv 0020  
             ??_UART_Init 0033               ??_UART_Read 0075         __size_of_spiWrite 0006  
                ?_spiInit 0020                  ?_spiRead 0075                UART_Init@x 003F  
          __size_of_setup 0036           ___aldiv@divisor 0020      spiInit@sTransmitEdge 0022  
       interrupt_function 0004           ___aldiv@counter 0029                 clear_ram0 0249  
                _PIE1bits 008C        spiInit@sDataSample 0020                  _PIR1bits 000C  
       UART_Init@baudrate 002F          __size_of___aldiv 008F          __size_of_spiInit 001C  
        __size_of_spiRead 0007         __CFG_BOR4V$BOR40V 0000             __size_of_main 0025  
                _spiWrite 0258              spiInit@sType 0023         spiInit@sClockIdle 0021  
              _INTCONbits 000B                  intlevel1 0000          ??_spiReceiveWait 0075  
              _OSCCONbits 008F              ___aldiv@sign 002A  



Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Mar 07 12:07:31 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.05
    20                           ; Generated 20/12/2018 GMT
    21                           ; 
    22                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0005                     _PORTA	set	5
   210  0006                     _PORTB	set	6
   211  001E                     _ADRESH	set	30
   212  0001                     _TMR0	set	1
   213  0005                     _PORTAbits	set	5
   214  000B                     _INTCONbits	set	11
   215  0014                     _SSPCONbits	set	20
   216  000C                     _PIR1bits	set	12
   217  0013                     _SSPBUF	set	19
   218  0014                     _SSPCON	set	20
   219  001F                     _ADCON0bits	set	31
   220  0063                     _SSPIF	set	99
   221  005E                     _PEIE	set	94
   222  005F                     _GIE	set	95
   223  0081                     _OPTION_REGbits	set	129
   224  0086                     _TRISB	set	134
   225  0085                     _TRISA	set	133
   226  0094                     _SSPSTATbits	set	148
   227  008F                     _OSCCONbits	set	143
   228  0091                     _SSPCON2bits	set	145
   229  0094                     _SSPSTAT	set	148
   230  0093                     _SSPADD	set	147
   231  0091                     _SSPCON2	set	145
   232  009F                     _ADCON1bits	set	159
   233  0086                     _TRISBbits	set	134
   234  0089                     _TRISEbits	set	137
   235  0085                     _TRISAbits	set	133
   236  04A0                     _BF	set	1184
   237  0463                     _SSPIE	set	1123
   238  048B                     _RCEN	set	1163
   239  043C                     _TRISC4	set	1084
   240  043B                     _TRISC3	set	1083
   241  0189                     _ANSELH	set	393
   242  0188                     _ANSEL	set	392
   243  0189                     _ANSELHbits	set	393
   244  0188                     _ANSELbits	set	392
   245                           
   246                           ; #config settings
   247  0000                     
   248                           	psect	cinit
   249  000F                     start_initialization:	
   250  000F                     __initialization:	
   251                           
   252                           ; Clear objects allocated to COMMON
   253  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   254  0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   255  0011  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   256  0012  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   257                           
   258                           ; Clear objects allocated to BANK0
   259  0013  1283               	bcf	3,5	;RP0=0, select bank0
   260  0014  1303               	bcf	3,6	;RP1=0, select bank0
   261  0015  01A3               	clrf	__pbssBANK0& (0+127)
   262  0016  01A4               	clrf	(__pbssBANK0+1)& (0+127)
   263  0017                     end_of_initialization:	
   264                           ;End of C runtime variable initialization code
   265                           
   266  0017                     __end_of__initialization:	
   267  0017  0183               	clrf	3
   268  0018  120A  118A  292E   	ljmp	_main	;jump to C main() function
   269                           
   270                           	psect	bssCOMMON
   271  0077                     __pbssCOMMON:	
   272  0077                     _door:	
   273  0077                     	ds	1
   274  0078                     _cont:	
   275  0078                     	ds	1
   276  0079                     _ADC:	
   277  0079                     	ds	1
   278  007A                     _key:	
   279  007A                     	ds	1
   280                           
   281                           	psect	bssBANK0
   282  0023                     __pbssBANK0:	
   283  0023                     _val:	
   284  0023                     	ds	1
   285  0024                     _z:	
   286  0024                     	ds	1
   287                           
   288                           	psect	cstackCOMMON
   289  0070                     __pcstackCOMMON:	
   290  0070                     ?_setup:	
   291  0070                     ?_ADC_channel:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_initADC:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_initOscilador:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_isr:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ??_isr:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_main:	
   307                           ; 1 bytes @ 0x0
   308                           
   309                           
   310                           ; 1 bytes @ 0x0
   311  0070                     	ds	3
   312  0073                     ??_ADC_channel:	
   313  0073                     ??_initADC:	
   314                           ; 1 bytes @ 0x3
   315                           
   316  0073                     ?_I2C_Slave_Init:	
   317                           ; 1 bytes @ 0x3
   318                           
   319  0073                     ??_initOscilador:	
   320                           ; 1 bytes @ 0x3
   321                           
   322  0073                     I2C_Slave_Init@address:	
   323                           ; 1 bytes @ 0x3
   324                           
   325                           
   326                           ; 2 bytes @ 0x3
   327  0073                     	ds	1
   328  0074                     initADC@a:	
   329                           
   330                           ; 1 bytes @ 0x4
   331  0074                     	ds	1
   332  0075                     ??_I2C_Slave_Init:	
   333  0075                     ADC_channel@a:	
   334                           ; 1 bytes @ 0x5
   335                           
   336  0075                     initOscilador@option:	
   337                           ; 1 bytes @ 0x5
   338                           
   339                           
   340                           ; 1 bytes @ 0x5
   341  0075                     	ds	1
   342  0076                     ??_setup:	
   343                           
   344                           ; 1 bytes @ 0x6
   345  0076                     	ds	1
   346                           
   347                           	psect	cstackBANK0
   348  0020                     __pcstackBANK0:	
   349  0020                     ??_main:	
   350                           
   351                           ; 1 bytes @ 0x0
   352  0020                     	ds	3
   353                           
   354                           	psect	maintext
   355  012E                     __pmaintext:	
   356 ;;
   357 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   358 ;;
   359 ;; *************** function _main *****************
   360 ;; Defined at:
   361 ;;		line 86 in file "MainHall.c"
   362 ;; Parameters:    Size  Location     Type
   363 ;;		None
   364 ;; Auto vars:     Size  Location     Type
   365 ;;		None
   366 ;; Return value:  Size  Location     Type
   367 ;;                  1    wreg      void 
   368 ;; Registers used:
   369 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   370 ;; Tracked objects:
   371 ;;		On entry : B00/0
   372 ;;		On exit  : 0/0
   373 ;;		Unchanged: 0/0
   374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   375 ;;      Params:         0       0       0       0       0
   376 ;;      Locals:         0       0       0       0       0
   377 ;;      Temps:          0       3       0       0       0
   378 ;;      Totals:         0       3       0       0       0
   379 ;;Total ram usage:        3 bytes
   380 ;; Hardware stack levels required when called:    3
   381 ;; This function calls:
   382 ;;		_setup
   383 ;; This function is called by:
   384 ;;		Startup code after reset
   385 ;; This function uses a non-reentrant model
   386 ;;
   387                           
   388                           
   389                           ;psect for function _main
   390  012E                     _main:	
   391                           
   392                           ;MainHall.c: 87:     setup();
   393                           
   394                           ;incstack = 0
   395                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   396  012E  120A  118A  21DF  120A  118A  	fcall	_setup
   397  0133                     l1280:	
   398                           
   399                           ;MainHall.c: 89:         ADCON0bits.GO = 1;
   400  0133  1283               	bcf	3,5	;RP0=0, select bank0
   401  0134  1303               	bcf	3,6	;RP1=0, select bank0
   402  0135  149F               	bsf	31,1	;volatile
   403  0136                     l183:	
   404                           ;MainHall.c: 92:         }
   405                           
   406                           ;MainHall.c: 90:         while(ADCON0bits.GO == 1){
   407                           
   408                           
   409                           ;MainHall.c: 90:         while(ADCON0bits.GO == 1){
   410  0136  1283               	bcf	3,5	;RP0=0, select bank0
   411  0137  1303               	bcf	3,6	;RP1=0, select bank0
   412  0138  1C9F               	btfss	31,1	;volatile
   413  0139  293C               	goto	l1282
   414  013A  0000               	nop	;# 
   415  013B  2936               	goto	l183
   416  013C                     l1282:	
   417                           
   418                           ;MainHall.c: 93:         ADC = ADRESH;
   419  013C  081E               	movf	30,w	;volatile
   420  013D  00A0               	movwf	??_main
   421  013E  0820               	movf	??_main,w
   422  013F  00F9               	movwf	_ADC
   423                           
   424                           ;MainHall.c: 94:         PORTB = key;
   425  0140  087A               	movf	_key,w
   426  0141  0086               	movwf	6	;volatile
   427                           
   428                           ;MainHall.c: 95:         _delay((unsigned long)((200)*(8000000/4000.0)));
   429  0142  3003               	movlw	3
   430  0143  1283               	bcf	3,5	;RP0=0, select bank0
   431  0144  1303               	bcf	3,6	;RP1=0, select bank0
   432  0145  00A2               	movwf	??_main+2
   433  0146  3008               	movlw	8
   434  0147  00A1               	movwf	??_main+1
   435  0148  3076               	movlw	118
   436  0149  00A0               	movwf	??_main
   437  014A                     u627:	
   438  014A  0BA0               	decfsz	??_main,f
   439  014B  294A               	goto	u627
   440  014C  0BA1               	decfsz	??_main+1,f
   441  014D  294A               	goto	u627
   442  014E  0BA2               	decfsz	??_main+2,f
   443  014F  294A               	goto	u627
   444  0150  0000               	nop
   445                           
   446                           ;MainHall.c: 96:         if (ADC > 134 | ADC < 120){
   447  0151  3087               	movlw	135
   448  0152  0279               	subwf	_ADC,w
   449  0153  1803               	skipnc
   450  0154  2959               	goto	l188
   451  0155  3078               	movlw	120
   452  0156  0279               	subwf	_ADC,w
   453  0157  1803               	skipnc
   454  0158  295C               	goto	l1286
   455  0159                     l188:	
   456                           
   457                           ;MainHall.c: 97:             key = 1;
   458  0159  01FA               	clrf	_key
   459  015A  0AFA               	incf	_key,f
   460                           
   461                           ;MainHall.c: 98:         } else {
   462  015B  295D               	goto	l1288
   463  015C                     l1286:	
   464                           
   465                           ;MainHall.c: 99:             key = 0;
   466  015C  01FA               	clrf	_key
   467  015D                     l1288:	
   468                           
   469                           ;MainHall.c: 101:         if (door == 0){
   470  015D  0877               	movf	_door,w
   471  015E  1D03               	btfss	3,2
   472  015F  297B               	goto	l1296
   473                           
   474                           ;MainHall.c: 102:             if (key == 1 & PORTAbits.RA2 == 1){
   475  0160  1283               	bcf	3,5	;RP0=0, select bank0
   476  0161  1303               	bcf	3,6	;RP1=0, select bank0
   477  0162  1D05               	btfss	5,2	;volatile
   478  0163  2966               	goto	u550
   479  0164  3001               	movlw	1
   480  0165  2967               	goto	u552
   481  0166                     u550:	
   482  0166  3000               	movlw	0
   483  0167                     u552:	
   484  0167  00A0               	movwf	??_main
   485  0168  037A               	decf	_key,w
   486  0169  1D03               	btfss	3,2
   487  016A  296D               	goto	u560
   488  016B  3001               	movlw	1
   489  016C  296E               	goto	u562
   490  016D                     u560:	
   491  016D  3000               	movlw	0
   492  016E                     u562:	
   493  016E  0520               	andwf	??_main,w
   494  016F  3800               	iorlw	0
   495  0170  1903               	skipnz
   496  0171  2933               	goto	l1280
   497                           
   498                           ;MainHall.c: 103:                 val = 15;
   499  0172  300F               	movlw	15
   500  0173  00A0               	movwf	??_main
   501  0174  0820               	movf	??_main,w
   502  0175  00A3               	movwf	_val
   503                           
   504                           ;MainHall.c: 104:                 door = 1;
   505  0176  01F7               	clrf	_door
   506  0177  0AF7               	incf	_door,f
   507  0178                     l192:	
   508                           ;MainHall.c: 105:                 while(PORTAbits.RA2 == 1);
   509                           
   510  0178  1D05               	btfss	5,2	;volatile
   511  0179  2933               	goto	l1280
   512  017A  2978               	goto	l192
   513  017B                     l1296:	
   514  017B  0377               	decf	_door,w
   515  017C  1D03               	btfss	3,2
   516  017D  2933               	goto	l1280
   517                           
   518                           ;MainHall.c: 108:             if (PORTAbits.RA2 == 1){
   519  017E  1283               	bcf	3,5	;RP0=0, select bank0
   520  017F  1303               	bcf	3,6	;RP1=0, select bank0
   521  0180  1D05               	btfss	5,2	;volatile
   522  0181  2933               	goto	l1280
   523                           
   524                           ;MainHall.c: 109:                 val = 8;
   525  0182  3008               	movlw	8
   526  0183  00A0               	movwf	??_main
   527  0184  0820               	movf	??_main,w
   528  0185  00A3               	movwf	_val
   529                           
   530                           ;MainHall.c: 110:                 door = 0;
   531  0186  01F7               	clrf	_door
   532  0187                     l198:	
   533                           ;MainHall.c: 111:                 while(PORTAbits.RA2 == 1);
   534                           
   535  0187  1D05               	btfss	5,2	;volatile
   536  0188  2933               	goto	l1280
   537  0189  2987               	goto	l198
   538  018A                     __end_of_main:	
   539                           
   540                           	psect	text1
   541  01DF                     __ptext1:	
   542 ;; *************** function _setup *****************
   543 ;; Defined at:
   544 ;;		line 118 in file "MainHall.c"
   545 ;; Parameters:    Size  Location     Type
   546 ;;		None
   547 ;; Auto vars:     Size  Location     Type
   548 ;;		None
   549 ;; Return value:  Size  Location     Type
   550 ;;                  1    wreg      void 
   551 ;; Registers used:
   552 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   553 ;; Tracked objects:
   554 ;;		On entry : 0/0
   555 ;;		On exit  : 0/0
   556 ;;		Unchanged: 0/0
   557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   558 ;;      Params:         0       0       0       0       0
   559 ;;      Locals:         0       0       0       0       0
   560 ;;      Temps:          1       0       0       0       0
   561 ;;      Totals:         1       0       0       0       0
   562 ;;Total ram usage:        1 bytes
   563 ;; Hardware stack levels used:    1
   564 ;; Hardware stack levels required when called:    2
   565 ;; This function calls:
   566 ;;		_ADC_channel
   567 ;;		_I2C_Slave_Init
   568 ;;		_initADC
   569 ;;		_initOscilador
   570 ;; This function is called by:
   571 ;;		_main
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575                           
   576                           ;psect for function _setup
   577  01DF                     _setup:	
   578                           
   579                           ;MainHall.c: 119:     initOscilador(7);
   580                           
   581                           ;incstack = 0
   582                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   583  01DF  3007               	movlw	7
   584  01E0  120A  118A  218A  120A  118A  	fcall	_initOscilador
   585                           
   586                           ;MainHall.c: 120:     ANSEL = 0;
   587  01E5  1683               	bsf	3,5	;RP0=1, select bank3
   588  01E6  1703               	bsf	3,6	;RP1=1, select bank3
   589  01E7  0188               	clrf	8	;volatile
   590                           
   591                           ;MainHall.c: 121:     ANSELH = 0;
   592  01E8  0189               	clrf	9	;volatile
   593                           
   594                           ;MainHall.c: 122:     TRISA = 0;
   595  01E9  1683               	bsf	3,5	;RP0=1, select bank1
   596  01EA  1303               	bcf	3,6	;RP1=0, select bank1
   597  01EB  0185               	clrf	5	;volatile
   598                           
   599                           ;MainHall.c: 123:     TRISAbits.TRISA2 = 1;
   600  01EC  1505               	bsf	5,2	;volatile
   601                           
   602                           ;MainHall.c: 124:     TRISB = 0;
   603  01ED  0186               	clrf	6	;volatile
   604                           
   605                           ;MainHall.c: 125:     PORTA = 0;
   606  01EE  1283               	bcf	3,5	;RP0=0, select bank0
   607  01EF  1303               	bcf	3,6	;RP1=0, select bank0
   608  01F0  0185               	clrf	5	;volatile
   609                           
   610                           ;MainHall.c: 126:     PORTB = 0;
   611  01F1  0186               	clrf	6	;volatile
   612                           
   613                           ;MainHall.c: 127:     val = 8;
   614  01F2  3008               	movlw	8
   615  01F3  00F6               	movwf	??_setup
   616  01F4  0876               	movf	??_setup,w
   617  01F5  00A3               	movwf	_val
   618                           
   619                           ;MainHall.c: 128:     door = 0;
   620  01F6  01F7               	clrf	_door
   621                           
   622                           ;MainHall.c: 129:     ADC_channel(0);
   623  01F7  3000               	movlw	0
   624  01F8  120A  118A  201B  120A  118A  	fcall	_ADC_channel
   625                           
   626                           ;MainHall.c: 130:     initADC(2);
   627  01FD  3002               	movlw	2
   628  01FE  120A  118A  2233  120A  118A  	fcall	_initADC
   629                           
   630                           ;MainHall.c: 131:     OPTION_REGbits.T0CS = 0;
   631  0203  1683               	bsf	3,5	;RP0=1, select bank1
   632  0204  1303               	bcf	3,6	;RP1=0, select bank1
   633  0205  1281               	bcf	1,5	;volatile
   634                           
   635                           ;MainHall.c: 132:     OPTION_REGbits.T0SE = 0;
   636  0206  1201               	bcf	1,4	;volatile
   637                           
   638                           ;MainHall.c: 133:     OPTION_REGbits.PSA = 1;
   639  0207  1581               	bsf	1,3	;volatile
   640                           
   641                           ;MainHall.c: 134:     OPTION_REGbits.PS2 = 0;
   642  0208  1101               	bcf	1,2	;volatile
   643                           
   644                           ;MainHall.c: 135:     OPTION_REGbits.PS1 = 0;
   645  0209  1081               	bcf	1,1	;volatile
   646                           
   647                           ;MainHall.c: 136:     OPTION_REGbits.PS0 = 0;
   648  020A  1001               	bcf	1,0	;volatile
   649                           
   650                           ;MainHall.c: 137:     TMR0 = 56;
   651  020B  3038               	movlw	56
   652  020C  1283               	bcf	3,5	;RP0=0, select bank0
   653  020D  1303               	bcf	3,6	;RP1=0, select bank0
   654  020E  0081               	movwf	1	;volatile
   655                           
   656                           ;MainHall.c: 138:     INTCONbits.T0IF = 0;
   657  020F  110B               	bcf	11,2	;volatile
   658                           
   659                           ;MainHall.c: 139:     INTCONbits.T0IE = 1;
   660  0210  168B               	bsf	11,5	;volatile
   661                           
   662                           ;MainHall.c: 140:     INTCONbits.GIE = 1;
   663  0211  178B               	bsf	11,7	;volatile
   664                           
   665                           ;MainHall.c: 141:     I2C_Slave_Init(0x10);
   666  0212  3010               	movlw	16
   667  0213  00F3               	movwf	I2C_Slave_Init@address
   668  0214  3000               	movlw	0
   669  0215  00F4               	movwf	I2C_Slave_Init@address+1
   670  0216  120A  118A  221A   	fcall	_I2C_Slave_Init
   671  0219  0008               	return
   672  021A                     __end_of_setup:	
   673                           
   674                           	psect	text2
   675  018A                     __ptext2:	
   676 ;; *************** function _initOscilador *****************
   677 ;; Defined at:
   678 ;;		line 11 in file "./Oscilador.h"
   679 ;; Parameters:    Size  Location     Type
   680 ;;  option          1    wreg     unsigned char 
   681 ;; Auto vars:     Size  Location     Type
   682 ;;  option          1    5[COMMON] unsigned char 
   683 ;; Return value:  Size  Location     Type
   684 ;;                  1    wreg      void 
   685 ;; Registers used:
   686 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   687 ;; Tracked objects:
   688 ;;		On entry : 0/0
   689 ;;		On exit  : 0/0
   690 ;;		Unchanged: 0/0
   691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   692 ;;      Params:         0       0       0       0       0
   693 ;;      Locals:         1       0       0       0       0
   694 ;;      Temps:          2       0       0       0       0
   695 ;;      Totals:         3       0       0       0       0
   696 ;;Total ram usage:        3 bytes
   697 ;; Hardware stack levels used:    1
   698 ;; Hardware stack levels required when called:    1
   699 ;; This function calls:
   700 ;;		Nothing
   701 ;; This function is called by:
   702 ;;		_setup
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706                           
   707                           ;psect for function _initOscilador
   708  018A                     _initOscilador:	
   709                           
   710                           ;incstack = 0
   711                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
   712                           ;initOscilador@option stored from wreg
   713  018A  00F5               	movwf	initOscilador@option
   714                           
   715                           ;./Oscilador.h: 13: 
   716  018B  29BB               	goto	l1112
   717  018C                     l1092:	
   718                           
   719                           ;./Oscilador.h: 16:         case 3:
   720  018C  308F               	movlw	-113
   721  018D  1683               	bsf	3,5	;RP0=1, select bank1
   722  018E  1303               	bcf	3,6	;RP1=0, select bank1
   723  018F  058F               	andwf	15,f	;volatile
   724                           
   725                           ;./Oscilador.h: 17: 
   726  0190  29DD               	goto	l133
   727  0191                     l1094:	
   728                           
   729                           ;./Oscilador.h: 20:         case 4:
   730  0191  1683               	bsf	3,5	;RP0=1, select bank1
   731  0192  1303               	bcf	3,6	;RP1=0, select bank1
   732  0193  080F               	movf	15,w	;volatile
   733  0194  398F               	andlw	-113
   734  0195  3810               	iorlw	16
   735  0196  29B4               	goto	L5
   736  0197                     l1096:	
   737                           ;./Oscilador.h: 21: 
   738                           
   739                           
   740                           ;./Oscilador.h: 24:         case 5:
   741  0197  1683               	bsf	3,5	;RP0=1, select bank1
   742  0198  1303               	bcf	3,6	;RP1=0, select bank1
   743  0199  080F               	movf	15,w	;volatile
   744  019A  398F               	andlw	-113
   745  019B  3820               	iorlw	32
   746  019C  29B4               	goto	L5
   747  019D                     l1098:	
   748                           ;./Oscilador.h: 25: 
   749                           
   750                           
   751                           ;./Oscilador.h: 28:         case 6:
   752  019D  1683               	bsf	3,5	;RP0=1, select bank1
   753  019E  1303               	bcf	3,6	;RP1=0, select bank1
   754  019F  080F               	movf	15,w	;volatile
   755  01A0  398F               	andlw	-113
   756  01A1  3830               	iorlw	48
   757  01A2  29B4               	goto	L5
   758  01A3                     l1100:	
   759                           ;./Oscilador.h: 29: 
   760                           
   761                           
   762                           ;./Oscilador.h: 32:         case 7:
   763  01A3  1683               	bsf	3,5	;RP0=1, select bank1
   764  01A4  1303               	bcf	3,6	;RP1=0, select bank1
   765  01A5  080F               	movf	15,w	;volatile
   766  01A6  398F               	andlw	-113
   767  01A7  3840               	iorlw	64
   768  01A8  29B4               	goto	L5
   769  01A9                     l1102:	
   770                           ;./Oscilador.h: 33: 
   771                           
   772                           
   773                           ;./Oscilador.h: 36:         default:
   774  01A9  1683               	bsf	3,5	;RP0=1, select bank1
   775  01AA  1303               	bcf	3,6	;RP1=0, select bank1
   776  01AB  080F               	movf	15,w	;volatile
   777  01AC  398F               	andlw	-113
   778  01AD  3850               	iorlw	80
   779  01AE  29B4               	goto	L5
   780  01AF                     l1104:	
   781                           ;./Oscilador.h: 37: 
   782                           
   783                           
   784                           ;./Oscilador.h: 40:     }
   785  01AF  1683               	bsf	3,5	;RP0=1, select bank1
   786  01B0  1303               	bcf	3,6	;RP1=0, select bank1
   787  01B1  080F               	movf	15,w	;volatile
   788  01B2  398F               	andlw	-113
   789  01B3  3860               	iorlw	96
   790  01B4                     L5:	
   791  01B4  008F               	movwf	15	;volatile
   792                           
   793                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
   794  01B5  29DD               	goto	l133
   795  01B6                     l1106:	
   796  01B6                     l1108:	
   797  01B6  3070               	movlw	112
   798  01B7  1683               	bsf	3,5	;RP0=1, select bank1
   799  01B8  1303               	bcf	3,6	;RP1=0, select bank1
   800  01B9  048F               	iorwf	15,f	;volatile
   801  01BA  29DD               	goto	l133
   802  01BB                     l1112:	
   803  01BB  0875               	movf	initOscilador@option,w
   804  01BC  00F3               	movwf	??_initOscilador
   805  01BD  01F4               	clrf	??_initOscilador+1
   806                           
   807                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   808                           ; Switch size 1, requested type "simple"
   809                           ; Number of cases is 1, Range of values is 0 to 0
   810                           ; switch strategies available:
   811                           ; Name         Instructions Cycles
   812                           ; simple_byte            4     3 (average)
   813                           ; direct_byte           11     8 (fixed)
   814                           ; jumptable            260     6 (fixed)
   815                           ;	Chosen strategy is simple_byte
   816  01BE  0874               	movf	??_initOscilador+1,w
   817  01BF  3A00               	xorlw	0	; case 0
   818  01C0  1903               	skipnz
   819  01C1  29C3               	goto	l1344
   820  01C2  29B6               	goto	l1108
   821  01C3                     l1344:	
   822                           
   823                           ; Switch size 1, requested type "simple"
   824                           ; Number of cases is 8, Range of values is 0 to 7
   825                           ; switch strategies available:
   826                           ; Name         Instructions Cycles
   827                           ; simple_byte           25    13 (average)
   828                           ; direct_byte           32     8 (fixed)
   829                           ; jumptable            260     6 (fixed)
   830                           ;	Chosen strategy is simple_byte
   831  01C3  0873               	movf	??_initOscilador,w
   832  01C4  3A00               	xorlw	0	; case 0
   833  01C5  1903               	skipnz
   834  01C6  298C               	goto	l1092
   835  01C7  3A01               	xorlw	1	; case 1
   836  01C8  1903               	skipnz
   837  01C9  2991               	goto	l1094
   838  01CA  3A03               	xorlw	3	; case 2
   839  01CB  1903               	skipnz
   840  01CC  2997               	goto	l1096
   841  01CD  3A01               	xorlw	1	; case 3
   842  01CE  1903               	skipnz
   843  01CF  299D               	goto	l1098
   844  01D0  3A07               	xorlw	7	; case 4
   845  01D1  1903               	skipnz
   846  01D2  29A3               	goto	l1100
   847  01D3  3A01               	xorlw	1	; case 5
   848  01D4  1903               	skipnz
   849  01D5  29A9               	goto	l1102
   850  01D6  3A03               	xorlw	3	; case 6
   851  01D7  1903               	skipnz
   852  01D8  29AF               	goto	l1104
   853  01D9  3A01               	xorlw	1	; case 7
   854  01DA  1903               	skipnz
   855  01DB  29B6               	goto	l1106
   856  01DC  29B6               	goto	l1108
   857  01DD                     l133:	
   858  01DD  140F               	bsf	15,0	;volatile
   859  01DE  0008               	return
   860  01DF                     __end_of_initOscilador:	
   861                           
   862                           	psect	text3
   863  0233                     __ptext3:	
   864 ;; *************** function _initADC *****************
   865 ;; Defined at:
   866 ;;		line 75 in file "./ADC.h"
   867 ;; Parameters:    Size  Location     Type
   868 ;;  a               1    wreg     unsigned char 
   869 ;; Auto vars:     Size  Location     Type
   870 ;;  a               1    4[COMMON] unsigned char 
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      void 
   873 ;; Registers used:
   874 ;;		wreg, status,2, status,0
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   880 ;;      Params:         0       0       0       0       0
   881 ;;      Locals:         1       0       0       0       0
   882 ;;      Temps:          1       0       0       0       0
   883 ;;      Totals:         2       0       0       0       0
   884 ;;Total ram usage:        2 bytes
   885 ;; Hardware stack levels used:    1
   886 ;; Hardware stack levels required when called:    1
   887 ;; This function calls:
   888 ;;		Nothing
   889 ;; This function is called by:
   890 ;;		_setup
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           
   895                           ;psect for function _initADC
   896  0233                     _initADC:	
   897                           
   898                           ;incstack = 0
   899                           ; Regs used in _initADC: [wreg+status,2+status,0]
   900                           ;initADC@a stored from wreg
   901  0233  00F4               	movwf	initADC@a
   902                           
   903                           ;./ADC.h: 76:     ADCON1bits.ADFM = 0;
   904  0234  1683               	bsf	3,5	;RP0=1, select bank1
   905  0235  1303               	bcf	3,6	;RP1=0, select bank1
   906  0236  139F               	bcf	31,7	;volatile
   907                           
   908                           ;./ADC.h: 77:     ADCON1bits.VCFG0 = 0;
   909  0237  121F               	bcf	31,4	;volatile
   910                           
   911                           ;./ADC.h: 78:     ADCON1bits.VCFG1 = 0;
   912  0238  129F               	bcf	31,5	;volatile
   913                           
   914                           ;./ADC.h: 79:     ADCON0bits.ADCS = a;
   915  0239  0874               	movf	initADC@a,w
   916  023A  00F3               	movwf	??_initADC
   917  023B  0EF3               	swapf	??_initADC,f
   918  023C  0DF3               	rlf	??_initADC,f
   919  023D  0DF3               	rlf	??_initADC,f
   920  023E  1283               	bcf	3,5	;RP0=0, select bank0
   921  023F  1303               	bcf	3,6	;RP1=0, select bank0
   922  0240  081F               	movf	31,w	;volatile
   923  0241  0673               	xorwf	??_initADC,w
   924  0242  393F               	andlw	-193
   925  0243  0673               	xorwf	??_initADC,w
   926  0244  009F               	movwf	31	;volatile
   927                           
   928                           ;./ADC.h: 80:     ADCON0bits.ADON = 1;
   929  0245  141F               	bsf	31,0	;volatile
   930  0246  0008               	return
   931  0247                     __end_of_initADC:	
   932                           
   933                           	psect	text4
   934  021A                     __ptext4:	
   935 ;; *************** function _I2C_Slave_Init *****************
   936 ;; Defined at:
   937 ;;		line 94 in file "./I2C.h"
   938 ;; Parameters:    Size  Location     Type
   939 ;;  address         2    3[COMMON] short 
   940 ;; Auto vars:     Size  Location     Type
   941 ;;		None
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		wreg
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   951 ;;      Params:         2       0       0       0       0
   952 ;;      Locals:         0       0       0       0       0
   953 ;;      Temps:          0       0       0       0       0
   954 ;;      Totals:         2       0       0       0       0
   955 ;;Total ram usage:        2 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; Hardware stack levels required when called:    1
   958 ;; This function calls:
   959 ;;		Nothing
   960 ;; This function is called by:
   961 ;;		_setup
   962 ;; This function uses a non-reentrant model
   963 ;;
   964                           
   965                           
   966                           ;psect for function _I2C_Slave_Init
   967  021A                     _I2C_Slave_Init:	
   968                           
   969                           ;./I2C.h: 94: void I2C_Slave_Init(short address);./I2C.h: 95: {;./I2C.h: 96:     SSPADD 
      +                          = address;
   970                           
   971                           ;incstack = 0
   972                           ; Regs used in _I2C_Slave_Init: [wreg]
   973  021A  0873               	movf	I2C_Slave_Init@address,w
   974  021B  1683               	bsf	3,5	;RP0=1, select bank1
   975  021C  1303               	bcf	3,6	;RP1=0, select bank1
   976  021D  0093               	movwf	19	;volatile
   977                           
   978                           ;./I2C.h: 97:     SSPCON = 0x36;
   979  021E  3036               	movlw	54
   980  021F  1283               	bcf	3,5	;RP0=0, select bank0
   981  0220  1303               	bcf	3,6	;RP1=0, select bank0
   982  0221  0094               	movwf	20	;volatile
   983                           
   984                           ;./I2C.h: 98:     SSPSTAT = 0x80;
   985  0222  3080               	movlw	128
   986  0223  1683               	bsf	3,5	;RP0=1, select bank1
   987  0224  1303               	bcf	3,6	;RP1=0, select bank1
   988  0225  0094               	movwf	20	;volatile
   989                           
   990                           ;./I2C.h: 99:     SSPCON2 = 0x01;
   991  0226  3001               	movlw	1
   992  0227  0091               	movwf	17	;volatile
   993                           
   994                           ;./I2C.h: 100:     TRISC3 = 1;
   995  0228  1587               	bsf	7,3	;volatile
   996                           
   997                           ;./I2C.h: 101:     TRISC4 = 1;
   998  0229  1607               	bsf	7,4	;volatile
   999                           
  1000                           ;./I2C.h: 102:     GIE = 1;
  1001  022A  178B               	bsf	11,7	;volatile
  1002                           
  1003                           ;./I2C.h: 103:     PEIE = 1;
  1004  022B  170B               	bsf	11,6	;volatile
  1005                           
  1006                           ;./I2C.h: 104:     SSPIF = 0;
  1007  022C  1283               	bcf	3,5	;RP0=0, select bank0
  1008  022D  1303               	bcf	3,6	;RP1=0, select bank0
  1009  022E  118C               	bcf	12,3	;volatile
  1010                           
  1011                           ;./I2C.h: 105:     SSPIE = 1;
  1012  022F  1683               	bsf	3,5	;RP0=1, select bank1
  1013  0230  1303               	bcf	3,6	;RP1=0, select bank1
  1014  0231  158C               	bsf	12,3	;volatile
  1015  0232  0008               	return
  1016  0233                     __end_of_I2C_Slave_Init:	
  1017                           
  1018                           	psect	text5
  1019  001B                     __ptext5:	
  1020 ;; *************** function _ADC_channel *****************
  1021 ;; Defined at:
  1022 ;;		line 8 in file "./ADC.h"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;  a               1    wreg     unsigned char 
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;  a               1    5[COMMON] unsigned char 
  1027 ;; Return value:  Size  Location     Type
  1028 ;;                  1    wreg      void 
  1029 ;; Registers used:
  1030 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1031 ;; Tracked objects:
  1032 ;;		On entry : 0/0
  1033 ;;		On exit  : 0/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1036 ;;      Params:         0       0       0       0       0
  1037 ;;      Locals:         1       0       0       0       0
  1038 ;;      Temps:          2       0       0       0       0
  1039 ;;      Totals:         3       0       0       0       0
  1040 ;;Total ram usage:        3 bytes
  1041 ;; Hardware stack levels used:    1
  1042 ;; Hardware stack levels required when called:    1
  1043 ;; This function calls:
  1044 ;;		Nothing
  1045 ;; This function is called by:
  1046 ;;		_setup
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           
  1051                           ;psect for function _ADC_channel
  1052  001B                     _ADC_channel:	
  1053                           
  1054                           ;incstack = 0
  1055                           ; Regs used in _ADC_channel: [wreg-fsr0h+status,2+status,0]
  1056                           ;ADC_channel@a stored from wreg
  1057  001B  00F5               	movwf	ADC_channel@a
  1058                           
  1059                           ;./ADC.h: 10:     ADCON0bits.ADCS = a;
  1060  001C  0875               	movf	ADC_channel@a,w
  1061  001D  00F3               	movwf	??_ADC_channel
  1062  001E  0EF3               	swapf	??_ADC_channel,f
  1063  001F  0DF3               	rlf	??_ADC_channel,f
  1064  0020  0DF3               	rlf	??_ADC_channel,f
  1065  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1066  0022  1303               	bcf	3,6	;RP1=0, select bank0
  1067  0023  081F               	movf	31,w	;volatile
  1068  0024  0673               	xorwf	??_ADC_channel,w
  1069  0025  393F               	andlw	-193
  1070  0026  0673               	xorwf	??_ADC_channel,w
  1071  0027  009F               	movwf	31	;volatile
  1072                           
  1073                           ;./ADC.h: 11:     switch (a){
  1074  0028  2892               	goto	l1064
  1075  0029                     l80:	
  1076                           ;./ADC.h: 12:         case 0:
  1077                           
  1078                           
  1079                           ;./ADC.h: 13:             ANSELbits.ANS0 = 1;
  1080  0029  1683               	bsf	3,5	;RP0=1, select bank3
  1081  002A  1703               	bsf	3,6	;RP1=1, select bank3
  1082  002B  1408               	bsf	8,0	;volatile
  1083                           
  1084                           ;./ADC.h: 14:             TRISAbits.TRISA0 = 1;
  1085  002C  1683               	bsf	3,5	;RP0=1, select bank1
  1086  002D  1303               	bcf	3,6	;RP1=0, select bank1
  1087  002E  1405               	bsf	5,0	;volatile
  1088                           
  1089                           ;./ADC.h: 15:             break;
  1090  002F  0008               	return
  1091  0030                     l82:	
  1092                           ;./ADC.h: 16:         case 1:
  1093                           
  1094                           
  1095                           ;./ADC.h: 17:             ANSELbits.ANS1 = 1;
  1096  0030  1683               	bsf	3,5	;RP0=1, select bank3
  1097  0031  1703               	bsf	3,6	;RP1=1, select bank3
  1098  0032  1488               	bsf	8,1	;volatile
  1099                           
  1100                           ;./ADC.h: 18:             TRISAbits.TRISA1 = 1;
  1101  0033  1683               	bsf	3,5	;RP0=1, select bank1
  1102  0034  1303               	bcf	3,6	;RP1=0, select bank1
  1103  0035  1485               	bsf	5,1	;volatile
  1104                           
  1105                           ;./ADC.h: 19:             break;
  1106  0036  0008               	return
  1107  0037                     l83:	
  1108                           ;./ADC.h: 20:         case 2:
  1109                           
  1110                           
  1111                           ;./ADC.h: 21:             ANSELbits.ANS2 = 1;
  1112  0037  1683               	bsf	3,5	;RP0=1, select bank3
  1113  0038  1703               	bsf	3,6	;RP1=1, select bank3
  1114  0039  1508               	bsf	8,2	;volatile
  1115                           
  1116                           ;./ADC.h: 22:             TRISAbits.TRISA2 = 1;
  1117  003A  1683               	bsf	3,5	;RP0=1, select bank1
  1118  003B  1303               	bcf	3,6	;RP1=0, select bank1
  1119  003C  1505               	bsf	5,2	;volatile
  1120                           
  1121                           ;./ADC.h: 23:             break;
  1122  003D  0008               	return
  1123  003E                     l84:	
  1124                           ;./ADC.h: 24:         case 3:
  1125                           
  1126                           
  1127                           ;./ADC.h: 25:             ANSELbits.ANS3 = 1;
  1128  003E  1683               	bsf	3,5	;RP0=1, select bank3
  1129  003F  1703               	bsf	3,6	;RP1=1, select bank3
  1130  0040  1588               	bsf	8,3	;volatile
  1131                           
  1132                           ;./ADC.h: 26:             TRISAbits.TRISA3 = 1;
  1133  0041  1683               	bsf	3,5	;RP0=1, select bank1
  1134  0042  1303               	bcf	3,6	;RP1=0, select bank1
  1135  0043  1585               	bsf	5,3	;volatile
  1136                           
  1137                           ;./ADC.h: 27:             break;
  1138  0044  0008               	return
  1139  0045                     l85:	
  1140                           ;./ADC.h: 28:         case 4:
  1141                           
  1142                           
  1143                           ;./ADC.h: 29:             ANSELbits.ANS4 = 1;
  1144  0045  1683               	bsf	3,5	;RP0=1, select bank3
  1145  0046  1703               	bsf	3,6	;RP1=1, select bank3
  1146  0047  1608               	bsf	8,4	;volatile
  1147                           
  1148                           ;./ADC.h: 30:             TRISAbits.TRISA5 = 1;
  1149  0048  1683               	bsf	3,5	;RP0=1, select bank1
  1150  0049  1303               	bcf	3,6	;RP1=0, select bank1
  1151  004A  1685               	bsf	5,5	;volatile
  1152                           
  1153                           ;./ADC.h: 31:             break;
  1154  004B  0008               	return
  1155  004C                     l86:	
  1156                           ;./ADC.h: 32:         case 5:
  1157                           
  1158                           
  1159                           ;./ADC.h: 33:             ANSELbits.ANS5 = 1;
  1160  004C  1683               	bsf	3,5	;RP0=1, select bank3
  1161  004D  1703               	bsf	3,6	;RP1=1, select bank3
  1162  004E  1688               	bsf	8,5	;volatile
  1163                           
  1164                           ;./ADC.h: 34:             TRISEbits.TRISE0 = 1;
  1165  004F  1683               	bsf	3,5	;RP0=1, select bank1
  1166  0050  1303               	bcf	3,6	;RP1=0, select bank1
  1167  0051  1409               	bsf	9,0	;volatile
  1168                           
  1169                           ;./ADC.h: 35:             break;
  1170  0052  0008               	return
  1171  0053                     l87:	
  1172                           ;./ADC.h: 36:         case 6:
  1173                           
  1174                           
  1175                           ;./ADC.h: 37:             ANSELbits.ANS6 = 1;
  1176  0053  1683               	bsf	3,5	;RP0=1, select bank3
  1177  0054  1703               	bsf	3,6	;RP1=1, select bank3
  1178  0055  1708               	bsf	8,6	;volatile
  1179                           
  1180                           ;./ADC.h: 38:             TRISEbits.TRISE1 = 1;
  1181  0056  1683               	bsf	3,5	;RP0=1, select bank1
  1182  0057  1303               	bcf	3,6	;RP1=0, select bank1
  1183  0058  1489               	bsf	9,1	;volatile
  1184                           
  1185                           ;./ADC.h: 39:             break;
  1186  0059  0008               	return
  1187  005A                     l88:	
  1188                           ;./ADC.h: 40:         case 7:
  1189                           
  1190                           
  1191                           ;./ADC.h: 41:             ANSELbits.ANS7 = 1;
  1192  005A  1683               	bsf	3,5	;RP0=1, select bank3
  1193  005B  1703               	bsf	3,6	;RP1=1, select bank3
  1194  005C  1788               	bsf	8,7	;volatile
  1195                           
  1196                           ;./ADC.h: 42:             TRISEbits.TRISE2 = 1;
  1197  005D  1683               	bsf	3,5	;RP0=1, select bank1
  1198  005E  1303               	bcf	3,6	;RP1=0, select bank1
  1199  005F  1509               	bsf	9,2	;volatile
  1200                           
  1201                           ;./ADC.h: 43:             break;
  1202  0060  0008               	return
  1203  0061                     l89:	
  1204                           ;./ADC.h: 44:         case 8:
  1205                           
  1206                           
  1207                           ;./ADC.h: 45:             ANSELHbits.ANS8 = 1;
  1208  0061  1683               	bsf	3,5	;RP0=1, select bank3
  1209  0062  1703               	bsf	3,6	;RP1=1, select bank3
  1210  0063  1409               	bsf	9,0	;volatile
  1211                           
  1212                           ;./ADC.h: 46:             TRISBbits.TRISB2 = 1;
  1213  0064  1683               	bsf	3,5	;RP0=1, select bank1
  1214  0065  1303               	bcf	3,6	;RP1=0, select bank1
  1215  0066  1506               	bsf	6,2	;volatile
  1216                           
  1217                           ;./ADC.h: 47:             break;
  1218  0067  0008               	return
  1219  0068                     l90:	
  1220                           ;./ADC.h: 48:         case 9:
  1221                           
  1222                           
  1223                           ;./ADC.h: 49:             ANSELHbits.ANS9 = 1;
  1224  0068  1683               	bsf	3,5	;RP0=1, select bank3
  1225  0069  1703               	bsf	3,6	;RP1=1, select bank3
  1226  006A  1489               	bsf	9,1	;volatile
  1227                           
  1228                           ;./ADC.h: 50:             TRISBbits.TRISB3 = 1;
  1229  006B  1683               	bsf	3,5	;RP0=1, select bank1
  1230  006C  1303               	bcf	3,6	;RP1=0, select bank1
  1231  006D  1586               	bsf	6,3	;volatile
  1232                           
  1233                           ;./ADC.h: 51:             break;
  1234  006E  0008               	return
  1235  006F                     l91:	
  1236                           ;./ADC.h: 52:         case 10:
  1237                           
  1238                           
  1239                           ;./ADC.h: 53:             ANSELHbits.ANS10 = 1;
  1240  006F  1683               	bsf	3,5	;RP0=1, select bank3
  1241  0070  1703               	bsf	3,6	;RP1=1, select bank3
  1242  0071  1509               	bsf	9,2	;volatile
  1243                           
  1244                           ;./ADC.h: 54:             TRISBbits.TRISB1 = 1;
  1245  0072  1683               	bsf	3,5	;RP0=1, select bank1
  1246  0073  1303               	bcf	3,6	;RP1=0, select bank1
  1247  0074  1486               	bsf	6,1	;volatile
  1248                           
  1249                           ;./ADC.h: 55:             break;
  1250  0075  0008               	return
  1251  0076                     l92:	
  1252                           ;./ADC.h: 56:         case 11:
  1253                           
  1254                           
  1255                           ;./ADC.h: 57:             ANSELHbits.ANS11 = 1;
  1256  0076  1683               	bsf	3,5	;RP0=1, select bank3
  1257  0077  1703               	bsf	3,6	;RP1=1, select bank3
  1258  0078  1589               	bsf	9,3	;volatile
  1259                           
  1260                           ;./ADC.h: 58:             TRISBbits.TRISB4 = 1;
  1261  0079  1683               	bsf	3,5	;RP0=1, select bank1
  1262  007A  1303               	bcf	3,6	;RP1=0, select bank1
  1263  007B  1606               	bsf	6,4	;volatile
  1264                           
  1265                           ;./ADC.h: 59:             break;
  1266  007C  0008               	return
  1267  007D                     l93:	
  1268                           ;./ADC.h: 60:         case 12:
  1269                           
  1270                           
  1271                           ;./ADC.h: 61:             ANSELHbits.ANS12 = 1;
  1272  007D  1683               	bsf	3,5	;RP0=1, select bank3
  1273  007E  1703               	bsf	3,6	;RP1=1, select bank3
  1274  007F  1609               	bsf	9,4	;volatile
  1275                           
  1276                           ;./ADC.h: 62:             TRISBbits.TRISB0 = 1;
  1277  0080  1683               	bsf	3,5	;RP0=1, select bank1
  1278  0081  1303               	bcf	3,6	;RP1=0, select bank1
  1279  0082  1406               	bsf	6,0	;volatile
  1280                           
  1281                           ;./ADC.h: 63:             break;
  1282  0083  0008               	return
  1283  0084                     l94:	
  1284                           ;./ADC.h: 64:         case 13:
  1285                           
  1286                           
  1287                           ;./ADC.h: 65:             ANSELHbits.ANS13 = 1;
  1288  0084  1683               	bsf	3,5	;RP0=1, select bank3
  1289  0085  1703               	bsf	3,6	;RP1=1, select bank3
  1290  0086  1689               	bsf	9,5	;volatile
  1291                           
  1292                           ;./ADC.h: 66:             TRISBbits.TRISB5 = 1;
  1293  0087  1683               	bsf	3,5	;RP0=1, select bank1
  1294  0088  1303               	bcf	3,6	;RP1=0, select bank1
  1295  0089  1686               	bsf	6,5	;volatile
  1296                           
  1297                           ;./ADC.h: 67:             break;
  1298  008A  0008               	return
  1299  008B                     l95:	
  1300                           ;./ADC.h: 68:         default:
  1301                           
  1302                           
  1303                           ;./ADC.h: 69:             ANSELbits.ANS0 = 1;
  1304  008B  1683               	bsf	3,5	;RP0=1, select bank3
  1305  008C  1703               	bsf	3,6	;RP1=1, select bank3
  1306  008D  1408               	bsf	8,0	;volatile
  1307                           
  1308                           ;./ADC.h: 70:             TRISAbits.TRISA0 = 1;
  1309  008E  1683               	bsf	3,5	;RP0=1, select bank1
  1310  008F  1303               	bcf	3,6	;RP1=0, select bank1
  1311  0090  1405               	bsf	5,0	;volatile
  1312                           
  1313                           ;./ADC.h: 71:             break;
  1314  0091  0008               	return
  1315  0092                     l1064:	
  1316  0092  0875               	movf	ADC_channel@a,w
  1317  0093  00F3               	movwf	??_ADC_channel
  1318  0094  01F4               	clrf	??_ADC_channel+1
  1319                           
  1320                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1321                           ; Switch size 1, requested type "simple"
  1322                           ; Number of cases is 1, Range of values is 0 to 0
  1323                           ; switch strategies available:
  1324                           ; Name         Instructions Cycles
  1325                           ; simple_byte            4     3 (average)
  1326                           ; direct_byte           11     8 (fixed)
  1327                           ; jumptable            260     6 (fixed)
  1328                           ;	Chosen strategy is simple_byte
  1329  0095  0874               	movf	??_ADC_channel+1,w
  1330  0096  3A00               	xorlw	0	; case 0
  1331  0097  1903               	skipnz
  1332  0098  289A               	goto	l1346
  1333  0099  288B               	goto	l95
  1334  009A                     l1346:	
  1335                           
  1336                           ; Switch size 1, requested type "simple"
  1337                           ; Number of cases is 14, Range of values is 0 to 13
  1338                           ; switch strategies available:
  1339                           ; Name         Instructions Cycles
  1340                           ; simple_byte           43    22 (average)
  1341                           ; direct_byte           50     8 (fixed)
  1342                           ; jumptable            260     6 (fixed)
  1343                           ;	Chosen strategy is simple_byte
  1344  009A  0873               	movf	??_ADC_channel,w
  1345  009B  3A00               	xorlw	0	; case 0
  1346  009C  1903               	skipnz
  1347  009D  2829               	goto	l80
  1348  009E  3A01               	xorlw	1	; case 1
  1349  009F  1903               	skipnz
  1350  00A0  2830               	goto	l82
  1351  00A1  3A03               	xorlw	3	; case 2
  1352  00A2  1903               	skipnz
  1353  00A3  2837               	goto	l83
  1354  00A4  3A01               	xorlw	1	; case 3
  1355  00A5  1903               	skipnz
  1356  00A6  283E               	goto	l84
  1357  00A7  3A07               	xorlw	7	; case 4
  1358  00A8  1903               	skipnz
  1359  00A9  2845               	goto	l85
  1360  00AA  3A01               	xorlw	1	; case 5
  1361  00AB  1903               	skipnz
  1362  00AC  284C               	goto	l86
  1363  00AD  3A03               	xorlw	3	; case 6
  1364  00AE  1903               	skipnz
  1365  00AF  2853               	goto	l87
  1366  00B0  3A01               	xorlw	1	; case 7
  1367  00B1  1903               	skipnz
  1368  00B2  285A               	goto	l88
  1369  00B3  3A0F               	xorlw	15	; case 8
  1370  00B4  1903               	skipnz
  1371  00B5  2861               	goto	l89
  1372  00B6  3A01               	xorlw	1	; case 9
  1373  00B7  1903               	skipnz
  1374  00B8  2868               	goto	l90
  1375  00B9  3A03               	xorlw	3	; case 10
  1376  00BA  1903               	skipnz
  1377  00BB  286F               	goto	l91
  1378  00BC  3A01               	xorlw	1	; case 11
  1379  00BD  1903               	skipnz
  1380  00BE  2876               	goto	l92
  1381  00BF  3A07               	xorlw	7	; case 12
  1382  00C0  1903               	skipnz
  1383  00C1  287D               	goto	l93
  1384  00C2  3A01               	xorlw	1	; case 13
  1385  00C3  1903               	skipnz
  1386  00C4  2884               	goto	l94
  1387  00C5  288B               	goto	l95
  1388  00C6  0008               	return
  1389  00C7                     __end_of_ADC_channel:	
  1390                           
  1391                           	psect	text6
  1392  00C7                     __ptext6:	
  1393 ;; *************** function _isr *****************
  1394 ;; Defined at:
  1395 ;;		line 36 in file "MainHall.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;		None
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;		None
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  1    wreg      void 
  1402 ;; Registers used:
  1403 ;;		wreg, status,2, status,0
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1409 ;;      Params:         0       0       0       0       0
  1410 ;;      Locals:         0       0       0       0       0
  1411 ;;      Temps:          3       0       0       0       0
  1412 ;;      Totals:         3       0       0       0       0
  1413 ;;Total ram usage:        3 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; This function calls:
  1416 ;;		Nothing
  1417 ;; This function is called by:
  1418 ;;		Interrupt level 1
  1419 ;; This function uses a non-reentrant model
  1420 ;;
  1421                           
  1422                           
  1423                           ;psect for function _isr
  1424  00C7                     _isr:	
  1425                           
  1426                           ;MainHall.c: 37:     if(PIR1bits.SSPIF == 1){
  1427  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1428  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1429  00C9  1D8C               	btfss	12,3	;volatile
  1430  00CA  2911               	goto	i1l159
  1431                           
  1432                           ;MainHall.c: 39:         SSPCONbits.CKP = 0;
  1433  00CB  1214               	bcf	20,4	;volatile
  1434                           
  1435                           ;MainHall.c: 41:         if ((SSPCONbits.SSPOV) || (SSPCONbits.WCOL)){
  1436  00CC  1B14               	btfsc	20,6	;volatile
  1437  00CD  28D0               	goto	i1l1170
  1438  00CE  1F94               	btfss	20,7	;volatile
  1439  00CF  28D7               	goto	i1l1178
  1440  00D0                     i1l1170:	
  1441                           
  1442                           ;MainHall.c: 42:             z = SSPBUF;
  1443  00D0  0813               	movf	19,w	;volatile
  1444  00D1  00F0               	movwf	??_isr
  1445  00D2  0870               	movf	??_isr,w
  1446  00D3  00A4               	movwf	_z
  1447                           
  1448                           ;MainHall.c: 43:             SSPCONbits.SSPOV = 0;
  1449  00D4  1314               	bcf	20,6	;volatile
  1450                           
  1451                           ;MainHall.c: 44:             SSPCONbits.WCOL = 0;
  1452  00D5  1394               	bcf	20,7	;volatile
  1453                           
  1454                           ;MainHall.c: 45:             SSPCONbits.CKP = 1;
  1455  00D6  1614               	bsf	20,4	;volatile
  1456  00D7                     i1l1178:	
  1457                           
  1458                           ;MainHall.c: 48:         if(!SSPSTATbits.D_nA && !SSPSTATbits.R_nW) {
  1459  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  1460  00D8  1303               	bcf	3,6	;RP1=0, select bank1
  1461  00D9  1E94               	btfss	20,5	;volatile
  1462  00DA  1914               	btfsc	20,2	;volatile
  1463  00DB  28F4               	goto	i1l163
  1464                           
  1465                           ;MainHall.c: 50:             z = SSPBUF;
  1466  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1467  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  1468  00DE  0813               	movf	19,w	;volatile
  1469  00DF  00F0               	movwf	??_isr
  1470  00E0  0870               	movf	??_isr,w
  1471  00E1  00A4               	movwf	_z
  1472                           
  1473                           ;MainHall.c: 52:             PIR1bits.SSPIF = 0;
  1474  00E2  118C               	bcf	12,3	;volatile
  1475                           
  1476                           ;MainHall.c: 53:             SSPCONbits.CKP = 1;
  1477  00E3  1614               	bsf	20,4	;volatile
  1478  00E4                     i1l164:	
  1479                           ;MainHall.c: 54:             while(!SSPSTATbits.BF);
  1480                           
  1481  00E4  1683               	bsf	3,5	;RP0=1, select bank1
  1482  00E5  1303               	bcf	3,6	;RP1=0, select bank1
  1483  00E6  1C14               	btfss	20,0	;volatile
  1484  00E7  28E4               	goto	i1l164
  1485                           
  1486                           ;MainHall.c: 55:             z = SSPBUF;
  1487  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  1488  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  1489  00EA  0813               	movf	19,w	;volatile
  1490  00EB  00F0               	movwf	??_isr
  1491  00EC  0870               	movf	??_isr,w
  1492  00ED  00A4               	movwf	_z
  1493                           
  1494                           ;MainHall.c: 56:             _delay((unsigned long)((250)*(8000000/4000000.0)));
  1495  00EE  30A6               	movlw	166
  1496  00EF  00F0               	movwf	??_isr
  1497  00F0                     u63_27:	
  1498  00F0  0BF0               	decfsz	??_isr,f
  1499  00F1  28F0               	goto	u63_27
  1500  00F2  0000               	nop
  1501                           
  1502                           ;MainHall.c: 58:         }else if(!SSPSTATbits.D_nA && SSPSTATbits.R_nW){
  1503  00F3  290E               	goto	i1l167
  1504  00F4                     i1l163:	
  1505  00F4  1E94               	btfss	20,5	;volatile
  1506  00F5  1D14               	btfss	20,2	;volatile
  1507  00F6  290E               	goto	i1l167
  1508                           
  1509                           ;MainHall.c: 59:             z = SSPBUF;
  1510  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  1511  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  1512  00F9  0813               	movf	19,w	;volatile
  1513  00FA  00F0               	movwf	??_isr
  1514  00FB  0870               	movf	??_isr,w
  1515  00FC  00A4               	movwf	_z
  1516                           
  1517                           ;MainHall.c: 60:             BF = 0;
  1518  00FD  1683               	bsf	3,5	;RP0=1, select bank1
  1519  00FE  1303               	bcf	3,6	;RP1=0, select bank1
  1520  00FF  1014               	bcf	20,0	;volatile
  1521                           
  1522                           ;MainHall.c: 61:             SSPBUF = door;
  1523  0100  0877               	movf	_door,w
  1524  0101  1283               	bcf	3,5	;RP0=0, select bank0
  1525  0102  1303               	bcf	3,6	;RP1=0, select bank0
  1526  0103  0093               	movwf	19	;volatile
  1527                           
  1528                           ;MainHall.c: 62:             SSPCONbits.CKP = 1;
  1529  0104  1614               	bsf	20,4	;volatile
  1530                           
  1531                           ;MainHall.c: 63:             _delay((unsigned long)((250)*(8000000/4000000.0)));
  1532  0105  30A6               	movlw	166
  1533  0106  00F0               	movwf	??_isr
  1534  0107                     u64_27:	
  1535  0107  0BF0               	decfsz	??_isr,f
  1536  0108  2907               	goto	u64_27
  1537  0109  0000               	nop
  1538  010A                     i1l169:	
  1539                           ;MainHall.c: 64:             while(SSPSTATbits.BF);
  1540                           
  1541  010A  1683               	bsf	3,5	;RP0=1, select bank1
  1542  010B  1303               	bcf	3,6	;RP1=0, select bank1
  1543  010C  1814               	btfsc	20,0	;volatile
  1544  010D  290A               	goto	i1l169
  1545  010E                     i1l167:	
  1546                           
  1547                           ;MainHall.c: 67:         PIR1bits.SSPIF = 0;
  1548  010E  1283               	bcf	3,5	;RP0=0, select bank0
  1549  010F  1303               	bcf	3,6	;RP1=0, select bank0
  1550  0110  118C               	bcf	12,3	;volatile
  1551  0111                     i1l159:	
  1552                           ;MainHall.c: 68:     }
  1553                           
  1554                           
  1555                           ;MainHall.c: 70:     if (INTCONbits.T0IF == 1){
  1556  0111  1D0B               	btfss	11,2	;volatile
  1557  0112  2927               	goto	i1l177
  1558                           
  1559                           ;MainHall.c: 71:             cont++;
  1560  0113  3001               	movlw	1
  1561  0114  00F0               	movwf	??_isr
  1562  0115  0870               	movf	??_isr,w
  1563  0116  07F8               	addwf	_cont,f
  1564                           
  1565                           ;MainHall.c: 72:             if(cont <= 200){
  1566  0117  30C9               	movlw	201
  1567  0118  0278               	subwf	_cont,w
  1568  0119  1803               	skipnc
  1569  011A  2923               	goto	i1l1206
  1570                           
  1571                           ;MainHall.c: 73:                 if(cont <= val){
  1572  011B  0878               	movf	_cont,w
  1573  011C  0223               	subwf	_val,w
  1574  011D  1C03               	skipc
  1575  011E  2921               	goto	i1l174
  1576                           
  1577                           ;MainHall.c: 74:                     PORTAbits.RA1 = 1;
  1578  011F  1485               	bsf	5,1	;volatile
  1579                           
  1580                           ;MainHall.c: 75:                 }else{
  1581  0120  2924               	goto	i1l1208
  1582  0121                     i1l174:	
  1583                           
  1584                           ;MainHall.c: 76:                     PORTAbits.RA1 = 0;
  1585  0121  1085               	bcf	5,1	;volatile
  1586  0122  2924               	goto	i1l1208
  1587  0123                     i1l1206:	
  1588                           
  1589                           ;MainHall.c: 79:                 cont = 0;
  1590  0123  01F8               	clrf	_cont
  1591  0124                     i1l1208:	
  1592                           
  1593                           ;MainHall.c: 81:             TMR0 = 56;
  1594  0124  3038               	movlw	56
  1595  0125  0081               	movwf	1	;volatile
  1596                           
  1597                           ;MainHall.c: 82:             INTCONbits.T0IF = 0;
  1598  0126  110B               	bcf	11,2	;volatile
  1599  0127                     i1l177:	
  1600  0127  0872               	movf	??_isr+2,w
  1601  0128  008A               	movwf	10
  1602  0129  0E71               	swapf	(??_isr+1)^(0+4294967168),w
  1603  012A  0083               	movwf	3
  1604  012B  0EFE               	swapf	126,f
  1605  012C  0E7E               	swapf	126,w
  1606  012D  0009               	retfie
  1607  012E                     __end_of_isr:	
  1608  007E                     btemp	set	126	;btemp
  1609  007E                     wtemp0	set	126
  1610                           
  1611                           	psect	intentry
  1612  0004                     __pintentry:	
  1613                           ;incstack = 0
  1614                           ; Regs used in _isr: [wreg+status,2+status,0]
  1615                           
  1616  0004                     interrupt_function:	
  1617  007E                     saved_w	set	btemp
  1618  0004  00FE               	movwf	btemp
  1619  0005  0E03               	swapf	3,w
  1620  0006  00F1               	movwf	??_isr+1
  1621  0007  080A               	movf	10,w
  1622  0008  00F2               	movwf	??_isr+2
  1623  0009  120A  118A  28C7   	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80      3       5
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_setup
    _setup->_ADC_channel
    _setup->_initOscilador

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     186
                                              0 BANK0      3     3      0
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0     186
                                              6 COMMON     1     1      0
                        _ADC_channel
                     _I2C_Slave_Init
                            _initADC
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _initADC                                              2     2      0      22
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Slave_Init                                       2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_channel                                          3     3      0      44
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _ADC_channel
     _I2C_Slave_Init
     _initADC
     _initOscilador

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      10       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3       5       5        6.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      10      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Mar 07 12:07:31 2019

                       _z 0024               __CFG_CP$OFF 0000               _SSPSTATbits 0094  
                      _BF 04A0                        l80 0029                        l90 0068  
                      l82 0030                        l91 006F                        l83 0037  
                      l92 0076                        l84 003E                        l93 007D  
                      l85 0045                        l94 0084                        l86 004C  
                      l95 008B                        l87 0053                        l88 005A  
                      l89 0061                       l133 01DD                       l183 0136  
                     _ADC 0079                       l192 0178                       l188 0159  
                     l198 0187                       _GIE 005F              __CFG_CPD$OFF 0000  
                     u550 0166                       u560 016D                       u552 0167  
                     u562 016E                       u627 014A                       _key 007A  
                     _isr 00C7                       _val 0023              __CFG_LVP$OFF 0000  
                    l1100 01A3                      l1102 01A9                      l1104 01AF  
                    l1112 01BB                      l1106 01B6                      l1108 01B6  
                    l1064 0092                      l1092 018C                      l1094 0191  
                    l1344 01C3                      l1096 0197                      l1280 0133  
                    l1346 009A                      l1098 019D                      l1282 013C  
                    l1286 015C                      l1296 017B                      l1288 015D  
                    ?_isr 0070                      _PEIE 005E                      _RCEN 048B  
                    _TMR0 0001              __CFG_WRT$OFF 0000                      _cont 0078  
                    _door 0077                      _main 012E                      btemp 007E  
                    start 000C             __CFG_IESO$OFF 0000      __size_of_ADC_channel 00AC  
           __CFG_MCLRE$ON 0000                     ??_isr 0070                     ?_main 0070  
           __CFG_WDTE$OFF 0000                     _ANSEL 0188                     i1l163 00F4  
                   i1l164 00E4                     i1l174 0121                     i1l167 010E  
                   i1l159 0111                     i1l177 0127                     i1l169 010A  
                   _PORTA 0005                     _PORTB 0006                     u63_27 00F0  
                   u64_27 0107                     _TRISA 0085                     _TRISB 0086  
                   _SSPIE 0463                     _SSPIF 0063            __CFG_FCMEN$OFF 0000  
         __end_of_initADC 0247                     _setup 01DF            __CFG_BOREN$OFF 0000  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __initialization 000F              __end_of_main 018A    __size_of_initOscilador 0055  
                  ??_main 0020                    _ADRESH 001E                    ?_setup 0070  
                  _ANSELH 0189                    i1l1206 0123                    i1l1208 0124  
                  i1l1170 00D0                    i1l1178 00D7                    _SSPADD 0093  
                  _TRISC3 043B                    _TRISC4 043C                    _SSPCON 0014  
                  _SSPBUF 0013            __CFG_PWRTE$OFF 0000                 ??_initADC 0073  
                  saved_w 007E   __end_of__initialization 0017             _initOscilador 018A  
          __pcstackCOMMON 0070   __size_of_I2C_Slave_Init 0019             __end_of_setup 021A  
          _OPTION_REGbits 0081                   ??_setup 0076     I2C_Slave_Init@address 0073  
              __pbssBANK0 0023            ?_initOscilador 0070                __pmaintext 012E  
              __pintentry 0004                   _SSPCON2 0091                   _SSPSTAT 0094  
     initOscilador@option 0075             ??_ADC_channel 0073                 _ANSELbits 0188  
                 __ptext1 01DF                   __ptext2 018A                   __ptext3 0233  
                 __ptext4 021A                   __ptext5 001B                   __ptext6 00C7  
                 _initADC 0233              __size_of_isr 0067           ??_initOscilador 0073  
    end_of_initialization 0017            _I2C_Slave_Init 021A       __end_of_ADC_channel 00C7  
               _PORTAbits 0005              ADC_channel@a 0075                 _TRISAbits 0085  
               _TRISBbits 0086                 _TRISEbits 0089    __end_of_I2C_Slave_Init 0233  
     start_initialization 000F               __end_of_isr 012E               _ADC_channel 001B  
__CFG_FOSC$INTRC_NOCLKOUT 0000           ?_I2C_Slave_Init 0073               __pbssCOMMON 0077  
               ___latbits 0002             __pcstackBANK0 0020                  ?_initADC 0070  
          __size_of_setup 003B         interrupt_function 0004                  _PIR1bits 000C  
              _ADCON0bits 001F                _ADCON1bits 009F     __end_of_initOscilador 01DF  
              _ANSELHbits 0189          __size_of_initADC 0014         __CFG_BOR4V$BOR40V 0000  
        ??_I2C_Slave_Init 0075             __size_of_main 005C              ?_ADC_channel 0070  
                initADC@a 0074                _INTCONbits 000B                  intlevel1 0000  
              _OSCCONbits 008F               _SSPCON2bits 0091                _SSPCONbits 0014  

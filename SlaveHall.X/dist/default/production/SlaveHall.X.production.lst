

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Feb 26 13:07:03 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.05
    20                           ; Generated 20/12/2018 GMT
    21                           ; 
    22                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0001                     _TMR0	set	1
   210  0005                     _PORTA	set	5
   211  0006                     _PORTB	set	6
   212  001E                     _ADRESH	set	30
   213  0005                     _PORTAbits	set	5
   214  000B                     _INTCONbits	set	11
   215  0014                     _SSPCONbits	set	20
   216  000C                     _PIR1bits	set	12
   217  0013                     _SSPBUF	set	19
   218  0014                     _SSPCON	set	20
   219  001F                     _ADCON0bits	set	31
   220  0063                     _SSPIF	set	99
   221  005E                     _PEIE	set	94
   222  005F                     _GIE	set	95
   223  0081                     _OPTION_REGbits	set	129
   224  0086                     _TRISB	set	134
   225  0085                     _TRISA	set	133
   226  0094                     _SSPSTATbits	set	148
   227  008F                     _OSCCONbits	set	143
   228  0091                     _SSPCON2bits	set	145
   229  0094                     _SSPSTAT	set	148
   230  0093                     _SSPADD	set	147
   231  0091                     _SSPCON2	set	145
   232  009F                     _ADCON1bits	set	159
   233  0086                     _TRISBbits	set	134
   234  0089                     _TRISEbits	set	137
   235  0085                     _TRISAbits	set	133
   236  04A0                     _BF	set	1184
   237  0463                     _SSPIE	set	1123
   238  048B                     _RCEN	set	1163
   239  043C                     _TRISC4	set	1084
   240  043B                     _TRISC3	set	1083
   241  0189                     _ANSELH	set	393
   242  0188                     _ANSEL	set	392
   243  0189                     _ANSELHbits	set	393
   244  0188                     _ANSELbits	set	392
   245                           
   246                           ; #config settings
   247  0000                     
   248                           	psect	cinit
   249  000F                     start_initialization:	
   250  000F                     __initialization:	
   251                           
   252                           ; Clear objects allocated to COMMON
   253  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   254  0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   255  0011  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   256  0012  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   257                           
   258                           ; Clear objects allocated to BANK0
   259  0013  1283               	bcf	3,5	;RP0=0, select bank0
   260  0014  1303               	bcf	3,6	;RP1=0, select bank0
   261  0015  01A3               	clrf	__pbssBANK0& (0+127)
   262  0016                     end_of_initialization:	
   263                           ;End of C runtime variable initialization code
   264                           
   265  0016                     __end_of__initialization:	
   266  0016  0183               	clrf	3
   267  0017  120A  118A  29B9   	ljmp	_main	;jump to C main() function
   268                           
   269                           	psect	bssCOMMON
   270  0077                     __pbssCOMMON:	
   271  0077                     _val:	
   272  0077                     	ds	1
   273  0078                     _cont:	
   274  0078                     	ds	1
   275  0079                     _ADC:	
   276  0079                     	ds	1
   277  007A                     _key:	
   278  007A                     	ds	1
   279                           
   280                           	psect	bssBANK0
   281  0023                     __pbssBANK0:	
   282  0023                     _z:	
   283  0023                     	ds	1
   284                           
   285                           	psect	cstackCOMMON
   286  0070                     __pcstackCOMMON:	
   287  0070                     ?_setup:	
   288  0070                     ?_ADC_channel:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_initADC:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_initOscilador:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_isr:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ??_isr:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_main:	
   304                           ; 1 bytes @ 0x0
   305                           
   306                           
   307                           ; 1 bytes @ 0x0
   308  0070                     	ds	3
   309  0073                     ??_ADC_channel:	
   310  0073                     ??_initADC:	
   311                           ; 1 bytes @ 0x3
   312                           
   313  0073                     ?_I2C_Slave_Init:	
   314                           ; 1 bytes @ 0x3
   315                           
   316  0073                     ??_initOscilador:	
   317                           ; 1 bytes @ 0x3
   318                           
   319  0073                     I2C_Slave_Init@address:	
   320                           ; 1 bytes @ 0x3
   321                           
   322                           
   323                           ; 2 bytes @ 0x3
   324  0073                     	ds	1
   325  0074                     initADC@a:	
   326                           
   327                           ; 1 bytes @ 0x4
   328  0074                     	ds	1
   329  0075                     ??_I2C_Slave_Init:	
   330  0075                     ADC_channel@a:	
   331                           ; 1 bytes @ 0x5
   332                           
   333  0075                     initOscilador@option:	
   334                           ; 1 bytes @ 0x5
   335                           
   336                           
   337                           ; 1 bytes @ 0x5
   338  0075                     	ds	1
   339  0076                     ??_setup:	
   340                           
   341                           ; 1 bytes @ 0x6
   342  0076                     	ds	1
   343                           
   344                           	psect	cstackBANK0
   345  0020                     __pcstackBANK0:	
   346  0020                     ??_main:	
   347                           
   348                           ; 1 bytes @ 0x0
   349  0020                     	ds	3
   350                           
   351                           	psect	maintext
   352  01B9                     __pmaintext:	
   353 ;;
   354 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   355 ;;
   356 ;; *************** function _main *****************
   357 ;; Defined at:
   358 ;;		line 84 in file "MainHall.c"
   359 ;; Parameters:    Size  Location     Type
   360 ;;		None
   361 ;; Auto vars:     Size  Location     Type
   362 ;;		None
   363 ;; Return value:  Size  Location     Type
   364 ;;                  1    wreg      void 
   365 ;; Registers used:
   366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   367 ;; Tracked objects:
   368 ;;		On entry : B00/0
   369 ;;		On exit  : 0/0
   370 ;;		Unchanged: 0/0
   371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   372 ;;      Params:         0       0       0       0       0
   373 ;;      Locals:         0       0       0       0       0
   374 ;;      Temps:          0       3       0       0       0
   375 ;;      Totals:         0       3       0       0       0
   376 ;;Total ram usage:        3 bytes
   377 ;; Hardware stack levels required when called:    3
   378 ;; This function calls:
   379 ;;		_setup
   380 ;; This function is called by:
   381 ;;		Startup code after reset
   382 ;; This function uses a non-reentrant model
   383 ;;
   384                           
   385                           
   386                           ;psect for function _main
   387  01B9                     _main:	
   388                           
   389                           ;MainHall.c: 85:     setup();
   390                           
   391                           ;incstack = 0
   392                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   393  01B9  120A  118A  2180  120A  118A  	fcall	_setup
   394  01BE                     l1175:	
   395                           
   396                           ;MainHall.c: 87:         ADCON0bits.GO = 1;
   397  01BE  1283               	bcf	3,5	;RP0=0, select bank0
   398  01BF  1303               	bcf	3,6	;RP1=0, select bank0
   399  01C0  149F               	bsf	31,1	;volatile
   400  01C1                     l181:	
   401                           ;MainHall.c: 90:         }
   402                           
   403                           ;MainHall.c: 88:         while(ADCON0bits.GO == 1){
   404                           
   405                           
   406                           ;MainHall.c: 88:         while(ADCON0bits.GO == 1){
   407  01C1  1283               	bcf	3,5	;RP0=0, select bank0
   408  01C2  1303               	bcf	3,6	;RP1=0, select bank0
   409  01C3  1C9F               	btfss	31,1	;volatile
   410  01C4  29C7               	goto	l1177
   411  01C5  0000               	nop	;# 
   412  01C6  29C1               	goto	l181
   413  01C7                     l1177:	
   414                           
   415                           ;MainHall.c: 91:         ADC = ADRESH;
   416  01C7  081E               	movf	30,w	;volatile
   417  01C8  00A0               	movwf	??_main
   418  01C9  0820               	movf	??_main,w
   419  01CA  00F9               	movwf	_ADC
   420                           
   421                           ;MainHall.c: 92:         PORTB = key;
   422  01CB  087A               	movf	_key,w
   423  01CC  0086               	movwf	6	;volatile
   424                           
   425                           ;MainHall.c: 93:         _delay((unsigned long)((200)*(8000000/4000.0)));
   426  01CD  3003               	movlw	3
   427  01CE  1283               	bcf	3,5	;RP0=0, select bank0
   428  01CF  1303               	bcf	3,6	;RP1=0, select bank0
   429  01D0  00A2               	movwf	??_main+2
   430  01D1  3008               	movlw	8
   431  01D2  00A1               	movwf	??_main+1
   432  01D3  3076               	movlw	118
   433  01D4  00A0               	movwf	??_main
   434  01D5                     u387:	
   435  01D5  0BA0               	decfsz	??_main,f
   436  01D6  29D5               	goto	u387
   437  01D7  0BA1               	decfsz	??_main+1,f
   438  01D8  29D5               	goto	u387
   439  01D9  0BA2               	decfsz	??_main+2,f
   440  01DA  29D5               	goto	u387
   441  01DB  0000               	nop
   442                           
   443                           ;MainHall.c: 94:         if (ADC > 134 | ADC < 120){
   444  01DC  3087               	movlw	135
   445  01DD  0279               	subwf	_ADC,w
   446  01DE  1803               	skipnc
   447  01DF  29E4               	goto	l186
   448  01E0  3078               	movlw	120
   449  01E1  0279               	subwf	_ADC,w
   450  01E2  1803               	skipnc
   451  01E3  29E7               	goto	l1181
   452  01E4                     l186:	
   453                           
   454                           ;MainHall.c: 95:             key = 1;
   455  01E4  01FA               	clrf	_key
   456  01E5  0AFA               	incf	_key,f
   457                           
   458                           ;MainHall.c: 96:         } else {
   459  01E6  29BE               	goto	l1175
   460  01E7                     l1181:	
   461                           
   462                           ;MainHall.c: 97:             key = 0;
   463  01E7  01FA               	clrf	_key
   464  01E8  29BE               	goto	l1175
   465  01E9                     __end_of_main:	
   466                           
   467                           	psect	text1
   468  0180                     __ptext1:	
   469 ;; *************** function _setup *****************
   470 ;; Defined at:
   471 ;;		line 102 in file "MainHall.c"
   472 ;; Parameters:    Size  Location     Type
   473 ;;		None
   474 ;; Auto vars:     Size  Location     Type
   475 ;;		None
   476 ;; Return value:  Size  Location     Type
   477 ;;                  1    wreg      void 
   478 ;; Registers used:
   479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   480 ;; Tracked objects:
   481 ;;		On entry : 0/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   485 ;;      Params:         0       0       0       0       0
   486 ;;      Locals:         0       0       0       0       0
   487 ;;      Temps:          1       0       0       0       0
   488 ;;      Totals:         1       0       0       0       0
   489 ;;Total ram usage:        1 bytes
   490 ;; Hardware stack levels used:    1
   491 ;; Hardware stack levels required when called:    2
   492 ;; This function calls:
   493 ;;		_ADC_channel
   494 ;;		_I2C_Slave_Init
   495 ;;		_initADC
   496 ;;		_initOscilador
   497 ;; This function is called by:
   498 ;;		_main
   499 ;; This function uses a non-reentrant model
   500 ;;
   501                           
   502                           
   503                           ;psect for function _setup
   504  0180                     _setup:	
   505                           
   506                           ;MainHall.c: 103:     initOscilador(7);
   507                           
   508                           ;incstack = 0
   509                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   510  0180  3007               	movlw	7
   511  0181  120A  118A  212B  120A  118A  	fcall	_initOscilador
   512                           
   513                           ;MainHall.c: 104:     ANSEL = 0;
   514  0186  1683               	bsf	3,5	;RP0=1, select bank3
   515  0187  1703               	bsf	3,6	;RP1=1, select bank3
   516  0188  0188               	clrf	8	;volatile
   517                           
   518                           ;MainHall.c: 105:     ANSELH = 0;
   519  0189  0189               	clrf	9	;volatile
   520                           
   521                           ;MainHall.c: 106:     TRISA = 0;
   522  018A  1683               	bsf	3,5	;RP0=1, select bank1
   523  018B  1303               	bcf	3,6	;RP1=0, select bank1
   524  018C  0185               	clrf	5	;volatile
   525                           
   526                           ;MainHall.c: 107:     TRISB = 0;
   527  018D  0186               	clrf	6	;volatile
   528                           
   529                           ;MainHall.c: 108:     PORTA = 0;
   530  018E  1283               	bcf	3,5	;RP0=0, select bank0
   531  018F  1303               	bcf	3,6	;RP1=0, select bank0
   532  0190  0185               	clrf	5	;volatile
   533                           
   534                           ;MainHall.c: 109:     PORTB = 0;
   535  0191  0186               	clrf	6	;volatile
   536                           
   537                           ;MainHall.c: 110:     val = 8;
   538  0192  3008               	movlw	8
   539  0193  00F6               	movwf	??_setup
   540  0194  0876               	movf	??_setup,w
   541  0195  00F7               	movwf	_val
   542                           
   543                           ;MainHall.c: 111:     ADC_channel(0);
   544  0196  3000               	movlw	0
   545  0197  120A  118A  201A  120A  118A  	fcall	_ADC_channel
   546                           
   547                           ;MainHall.c: 112:     initADC(2);
   548  019C  3002               	movlw	2
   549  019D  120A  118A  2202  120A  118A  	fcall	_initADC
   550                           
   551                           ;MainHall.c: 113:     OPTION_REGbits.T0CS = 0;
   552  01A2  1683               	bsf	3,5	;RP0=1, select bank1
   553  01A3  1303               	bcf	3,6	;RP1=0, select bank1
   554  01A4  1281               	bcf	1,5	;volatile
   555                           
   556                           ;MainHall.c: 114:     OPTION_REGbits.T0SE = 0;
   557  01A5  1201               	bcf	1,4	;volatile
   558                           
   559                           ;MainHall.c: 115:     OPTION_REGbits.PSA = 1;
   560  01A6  1581               	bsf	1,3	;volatile
   561                           
   562                           ;MainHall.c: 116:     OPTION_REGbits.PS2 = 0;
   563  01A7  1101               	bcf	1,2	;volatile
   564                           
   565                           ;MainHall.c: 117:     OPTION_REGbits.PS1 = 0;
   566  01A8  1081               	bcf	1,1	;volatile
   567                           
   568                           ;MainHall.c: 118:     OPTION_REGbits.PS0 = 0;
   569  01A9  1001               	bcf	1,0	;volatile
   570                           
   571                           ;MainHall.c: 119:     TMR0 = 56;
   572  01AA  3038               	movlw	56
   573  01AB  1283               	bcf	3,5	;RP0=0, select bank0
   574  01AC  1303               	bcf	3,6	;RP1=0, select bank0
   575  01AD  0081               	movwf	1	;volatile
   576                           
   577                           ;MainHall.c: 120:     INTCONbits.T0IF = 0;
   578  01AE  110B               	bcf	11,2	;volatile
   579                           
   580                           ;MainHall.c: 121:     INTCONbits.T0IE = 1;
   581  01AF  168B               	bsf	11,5	;volatile
   582                           
   583                           ;MainHall.c: 122:     INTCONbits.GIE = 1;
   584  01B0  178B               	bsf	11,7	;volatile
   585                           
   586                           ;MainHall.c: 123:     I2C_Slave_Init(0x10);
   587  01B1  3010               	movlw	16
   588  01B2  00F3               	movwf	I2C_Slave_Init@address
   589  01B3  3000               	movlw	0
   590  01B4  00F4               	movwf	I2C_Slave_Init@address+1
   591  01B5  120A  118A  21E9   	fcall	_I2C_Slave_Init
   592  01B8  0008               	return
   593  01B9                     __end_of_setup:	
   594                           
   595                           	psect	text2
   596  012B                     __ptext2:	
   597 ;; *************** function _initOscilador *****************
   598 ;; Defined at:
   599 ;;		line 11 in file "./Oscilador.h"
   600 ;; Parameters:    Size  Location     Type
   601 ;;  option          1    wreg     unsigned char 
   602 ;; Auto vars:     Size  Location     Type
   603 ;;  option          1    5[COMMON] unsigned char 
   604 ;; Return value:  Size  Location     Type
   605 ;;                  1    wreg      void 
   606 ;; Registers used:
   607 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   613 ;;      Params:         0       0       0       0       0
   614 ;;      Locals:         1       0       0       0       0
   615 ;;      Temps:          2       0       0       0       0
   616 ;;      Totals:         3       0       0       0       0
   617 ;;Total ram usage:        3 bytes
   618 ;; Hardware stack levels used:    1
   619 ;; Hardware stack levels required when called:    1
   620 ;; This function calls:
   621 ;;		Nothing
   622 ;; This function is called by:
   623 ;;		_setup
   624 ;; This function uses a non-reentrant model
   625 ;;
   626                           
   627                           
   628                           ;psect for function _initOscilador
   629  012B                     _initOscilador:	
   630                           
   631                           ;incstack = 0
   632                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
   633                           ;initOscilador@option stored from wreg
   634  012B  00F5               	movwf	initOscilador@option
   635                           
   636                           ;./Oscilador.h: 13: 
   637  012C  295C               	goto	l837
   638  012D                     l817:	
   639                           
   640                           ;./Oscilador.h: 16:         case 3:
   641  012D  308F               	movlw	-113
   642  012E  1683               	bsf	3,5	;RP0=1, select bank1
   643  012F  1303               	bcf	3,6	;RP1=0, select bank1
   644  0130  058F               	andwf	15,f	;volatile
   645                           
   646                           ;./Oscilador.h: 17: 
   647  0131  297E               	goto	l133
   648  0132                     l819:	
   649                           
   650                           ;./Oscilador.h: 20:         case 4:
   651  0132  1683               	bsf	3,5	;RP0=1, select bank1
   652  0133  1303               	bcf	3,6	;RP1=0, select bank1
   653  0134  080F               	movf	15,w	;volatile
   654  0135  398F               	andlw	-113
   655  0136  3810               	iorlw	16
   656  0137  2955               	goto	L5
   657  0138                     l821:	
   658                           ;./Oscilador.h: 21: 
   659                           
   660                           
   661                           ;./Oscilador.h: 24:         case 5:
   662  0138  1683               	bsf	3,5	;RP0=1, select bank1
   663  0139  1303               	bcf	3,6	;RP1=0, select bank1
   664  013A  080F               	movf	15,w	;volatile
   665  013B  398F               	andlw	-113
   666  013C  3820               	iorlw	32
   667  013D  2955               	goto	L5
   668  013E                     l823:	
   669                           ;./Oscilador.h: 25: 
   670                           
   671                           
   672                           ;./Oscilador.h: 28:         case 6:
   673  013E  1683               	bsf	3,5	;RP0=1, select bank1
   674  013F  1303               	bcf	3,6	;RP1=0, select bank1
   675  0140  080F               	movf	15,w	;volatile
   676  0141  398F               	andlw	-113
   677  0142  3830               	iorlw	48
   678  0143  2955               	goto	L5
   679  0144                     l825:	
   680                           ;./Oscilador.h: 29: 
   681                           
   682                           
   683                           ;./Oscilador.h: 32:         case 7:
   684  0144  1683               	bsf	3,5	;RP0=1, select bank1
   685  0145  1303               	bcf	3,6	;RP1=0, select bank1
   686  0146  080F               	movf	15,w	;volatile
   687  0147  398F               	andlw	-113
   688  0148  3840               	iorlw	64
   689  0149  2955               	goto	L5
   690  014A                     l827:	
   691                           ;./Oscilador.h: 33: 
   692                           
   693                           
   694                           ;./Oscilador.h: 36:         default:
   695  014A  1683               	bsf	3,5	;RP0=1, select bank1
   696  014B  1303               	bcf	3,6	;RP1=0, select bank1
   697  014C  080F               	movf	15,w	;volatile
   698  014D  398F               	andlw	-113
   699  014E  3850               	iorlw	80
   700  014F  2955               	goto	L5
   701  0150                     l829:	
   702                           ;./Oscilador.h: 37: 
   703                           
   704                           
   705                           ;./Oscilador.h: 40:     }
   706  0150  1683               	bsf	3,5	;RP0=1, select bank1
   707  0151  1303               	bcf	3,6	;RP1=0, select bank1
   708  0152  080F               	movf	15,w	;volatile
   709  0153  398F               	andlw	-113
   710  0154  3860               	iorlw	96
   711  0155                     L5:	
   712  0155  008F               	movwf	15	;volatile
   713                           
   714                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
   715  0156  297E               	goto	l133
   716  0157                     l831:	
   717  0157                     l833:	
   718  0157  3070               	movlw	112
   719  0158  1683               	bsf	3,5	;RP0=1, select bank1
   720  0159  1303               	bcf	3,6	;RP1=0, select bank1
   721  015A  048F               	iorwf	15,f	;volatile
   722  015B  297E               	goto	l133
   723  015C                     l837:	
   724  015C  0875               	movf	initOscilador@option,w
   725  015D  00F3               	movwf	??_initOscilador
   726  015E  01F4               	clrf	??_initOscilador+1
   727                           
   728                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   729                           ; Switch size 1, requested type "simple"
   730                           ; Number of cases is 1, Range of values is 0 to 0
   731                           ; switch strategies available:
   732                           ; Name         Instructions Cycles
   733                           ; simple_byte            4     3 (average)
   734                           ; direct_byte           11     8 (fixed)
   735                           ; jumptable            260     6 (fixed)
   736                           ;	Chosen strategy is simple_byte
   737  015F  0874               	movf	??_initOscilador+1,w
   738  0160  3A00               	xorlw	0	; case 0
   739  0161  1903               	skipnz
   740  0162  2964               	goto	l1223
   741  0163  2957               	goto	l833
   742  0164                     l1223:	
   743                           
   744                           ; Switch size 1, requested type "simple"
   745                           ; Number of cases is 8, Range of values is 0 to 7
   746                           ; switch strategies available:
   747                           ; Name         Instructions Cycles
   748                           ; simple_byte           25    13 (average)
   749                           ; direct_byte           32     8 (fixed)
   750                           ; jumptable            260     6 (fixed)
   751                           ;	Chosen strategy is simple_byte
   752  0164  0873               	movf	??_initOscilador,w
   753  0165  3A00               	xorlw	0	; case 0
   754  0166  1903               	skipnz
   755  0167  292D               	goto	l817
   756  0168  3A01               	xorlw	1	; case 1
   757  0169  1903               	skipnz
   758  016A  2932               	goto	l819
   759  016B  3A03               	xorlw	3	; case 2
   760  016C  1903               	skipnz
   761  016D  2938               	goto	l821
   762  016E  3A01               	xorlw	1	; case 3
   763  016F  1903               	skipnz
   764  0170  293E               	goto	l823
   765  0171  3A07               	xorlw	7	; case 4
   766  0172  1903               	skipnz
   767  0173  2944               	goto	l825
   768  0174  3A01               	xorlw	1	; case 5
   769  0175  1903               	skipnz
   770  0176  294A               	goto	l827
   771  0177  3A03               	xorlw	3	; case 6
   772  0178  1903               	skipnz
   773  0179  2950               	goto	l829
   774  017A  3A01               	xorlw	1	; case 7
   775  017B  1903               	skipnz
   776  017C  2957               	goto	l831
   777  017D  2957               	goto	l833
   778  017E                     l133:	
   779  017E  140F               	bsf	15,0	;volatile
   780  017F  0008               	return
   781  0180                     __end_of_initOscilador:	
   782                           
   783                           	psect	text3
   784  0202                     __ptext3:	
   785 ;; *************** function _initADC *****************
   786 ;; Defined at:
   787 ;;		line 75 in file "./ADC.h"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  a               1    wreg     unsigned char 
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  a               1    4[COMMON] unsigned char 
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      void 
   794 ;; Registers used:
   795 ;;		wreg, status,2, status,0
   796 ;; Tracked objects:
   797 ;;		On entry : 0/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   801 ;;      Params:         0       0       0       0       0
   802 ;;      Locals:         1       0       0       0       0
   803 ;;      Temps:          1       0       0       0       0
   804 ;;      Totals:         2       0       0       0       0
   805 ;;Total ram usage:        2 bytes
   806 ;; Hardware stack levels used:    1
   807 ;; Hardware stack levels required when called:    1
   808 ;; This function calls:
   809 ;;		Nothing
   810 ;; This function is called by:
   811 ;;		_setup
   812 ;; This function uses a non-reentrant model
   813 ;;
   814                           
   815                           
   816                           ;psect for function _initADC
   817  0202                     _initADC:	
   818                           
   819                           ;incstack = 0
   820                           ; Regs used in _initADC: [wreg+status,2+status,0]
   821                           ;initADC@a stored from wreg
   822  0202  00F4               	movwf	initADC@a
   823                           
   824                           ;./ADC.h: 76:     ADCON1bits.ADFM = 0;
   825  0203  1683               	bsf	3,5	;RP0=1, select bank1
   826  0204  1303               	bcf	3,6	;RP1=0, select bank1
   827  0205  139F               	bcf	31,7	;volatile
   828                           
   829                           ;./ADC.h: 77:     ADCON1bits.VCFG0 = 0;
   830  0206  121F               	bcf	31,4	;volatile
   831                           
   832                           ;./ADC.h: 78:     ADCON1bits.VCFG1 = 0;
   833  0207  129F               	bcf	31,5	;volatile
   834                           
   835                           ;./ADC.h: 79:     ADCON0bits.ADCS = a;
   836  0208  0874               	movf	initADC@a,w
   837  0209  00F3               	movwf	??_initADC
   838  020A  0EF3               	swapf	??_initADC,f
   839  020B  0DF3               	rlf	??_initADC,f
   840  020C  0DF3               	rlf	??_initADC,f
   841  020D  1283               	bcf	3,5	;RP0=0, select bank0
   842  020E  1303               	bcf	3,6	;RP1=0, select bank0
   843  020F  081F               	movf	31,w	;volatile
   844  0210  0673               	xorwf	??_initADC,w
   845  0211  393F               	andlw	-193
   846  0212  0673               	xorwf	??_initADC,w
   847  0213  009F               	movwf	31	;volatile
   848                           
   849                           ;./ADC.h: 80:     ADCON0bits.ADON = 1;
   850  0214  141F               	bsf	31,0	;volatile
   851  0215  0008               	return
   852  0216                     __end_of_initADC:	
   853                           
   854                           	psect	text4
   855  01E9                     __ptext4:	
   856 ;; *************** function _I2C_Slave_Init *****************
   857 ;; Defined at:
   858 ;;		line 94 in file "./I2C.h"
   859 ;; Parameters:    Size  Location     Type
   860 ;;  address         2    3[COMMON] short 
   861 ;; Auto vars:     Size  Location     Type
   862 ;;		None
   863 ;; Return value:  Size  Location     Type
   864 ;;                  1    wreg      void 
   865 ;; Registers used:
   866 ;;		wreg
   867 ;; Tracked objects:
   868 ;;		On entry : 0/0
   869 ;;		On exit  : 0/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   872 ;;      Params:         2       0       0       0       0
   873 ;;      Locals:         0       0       0       0       0
   874 ;;      Temps:          0       0       0       0       0
   875 ;;      Totals:         2       0       0       0       0
   876 ;;Total ram usage:        2 bytes
   877 ;; Hardware stack levels used:    1
   878 ;; Hardware stack levels required when called:    1
   879 ;; This function calls:
   880 ;;		Nothing
   881 ;; This function is called by:
   882 ;;		_setup
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886                           
   887                           ;psect for function _I2C_Slave_Init
   888  01E9                     _I2C_Slave_Init:	
   889                           
   890                           ;./I2C.h: 94: void I2C_Slave_Init(short address);./I2C.h: 95: {;./I2C.h: 96:     SSPADD 
      +                          = address;
   891                           
   892                           ;incstack = 0
   893                           ; Regs used in _I2C_Slave_Init: [wreg]
   894  01E9  0873               	movf	I2C_Slave_Init@address,w
   895  01EA  1683               	bsf	3,5	;RP0=1, select bank1
   896  01EB  1303               	bcf	3,6	;RP1=0, select bank1
   897  01EC  0093               	movwf	19	;volatile
   898                           
   899                           ;./I2C.h: 97:     SSPCON = 0x36;
   900  01ED  3036               	movlw	54
   901  01EE  1283               	bcf	3,5	;RP0=0, select bank0
   902  01EF  1303               	bcf	3,6	;RP1=0, select bank0
   903  01F0  0094               	movwf	20	;volatile
   904                           
   905                           ;./I2C.h: 98:     SSPSTAT = 0x80;
   906  01F1  3080               	movlw	128
   907  01F2  1683               	bsf	3,5	;RP0=1, select bank1
   908  01F3  1303               	bcf	3,6	;RP1=0, select bank1
   909  01F4  0094               	movwf	20	;volatile
   910                           
   911                           ;./I2C.h: 99:     SSPCON2 = 0x01;
   912  01F5  3001               	movlw	1
   913  01F6  0091               	movwf	17	;volatile
   914                           
   915                           ;./I2C.h: 100:     TRISC3 = 1;
   916  01F7  1587               	bsf	7,3	;volatile
   917                           
   918                           ;./I2C.h: 101:     TRISC4 = 1;
   919  01F8  1607               	bsf	7,4	;volatile
   920                           
   921                           ;./I2C.h: 102:     GIE = 1;
   922  01F9  178B               	bsf	11,7	;volatile
   923                           
   924                           ;./I2C.h: 103:     PEIE = 1;
   925  01FA  170B               	bsf	11,6	;volatile
   926                           
   927                           ;./I2C.h: 104:     SSPIF = 0;
   928  01FB  1283               	bcf	3,5	;RP0=0, select bank0
   929  01FC  1303               	bcf	3,6	;RP1=0, select bank0
   930  01FD  118C               	bcf	12,3	;volatile
   931                           
   932                           ;./I2C.h: 105:     SSPIE = 1;
   933  01FE  1683               	bsf	3,5	;RP0=1, select bank1
   934  01FF  1303               	bcf	3,6	;RP1=0, select bank1
   935  0200  158C               	bsf	12,3	;volatile
   936  0201  0008               	return
   937  0202                     __end_of_I2C_Slave_Init:	
   938                           
   939                           	psect	text5
   940  001A                     __ptext5:	
   941 ;; *************** function _ADC_channel *****************
   942 ;; Defined at:
   943 ;;		line 8 in file "./ADC.h"
   944 ;; Parameters:    Size  Location     Type
   945 ;;  a               1    wreg     unsigned char 
   946 ;; Auto vars:     Size  Location     Type
   947 ;;  a               1    5[COMMON] unsigned char 
   948 ;; Return value:  Size  Location     Type
   949 ;;                  1    wreg      void 
   950 ;; Registers used:
   951 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   957 ;;      Params:         0       0       0       0       0
   958 ;;      Locals:         1       0       0       0       0
   959 ;;      Temps:          2       0       0       0       0
   960 ;;      Totals:         3       0       0       0       0
   961 ;;Total ram usage:        3 bytes
   962 ;; Hardware stack levels used:    1
   963 ;; Hardware stack levels required when called:    1
   964 ;; This function calls:
   965 ;;		Nothing
   966 ;; This function is called by:
   967 ;;		_setup
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           
   972                           ;psect for function _ADC_channel
   973  001A                     _ADC_channel:	
   974                           
   975                           ;incstack = 0
   976                           ; Regs used in _ADC_channel: [wreg-fsr0h+status,2+status,0]
   977                           ;ADC_channel@a stored from wreg
   978  001A  00F5               	movwf	ADC_channel@a
   979                           
   980                           ;./ADC.h: 10:     ADCON0bits.ADCS = a;
   981  001B  0875               	movf	ADC_channel@a,w
   982  001C  00F3               	movwf	??_ADC_channel
   983  001D  0EF3               	swapf	??_ADC_channel,f
   984  001E  0DF3               	rlf	??_ADC_channel,f
   985  001F  0DF3               	rlf	??_ADC_channel,f
   986  0020  1283               	bcf	3,5	;RP0=0, select bank0
   987  0021  1303               	bcf	3,6	;RP1=0, select bank0
   988  0022  081F               	movf	31,w	;volatile
   989  0023  0673               	xorwf	??_ADC_channel,w
   990  0024  393F               	andlw	-193
   991  0025  0673               	xorwf	??_ADC_channel,w
   992  0026  009F               	movwf	31	;volatile
   993                           
   994                           ;./ADC.h: 11:     switch (a){
   995  0027  2891               	goto	l789
   996  0028                     l80:	
   997                           ;./ADC.h: 12:         case 0:
   998                           
   999                           
  1000                           ;./ADC.h: 13:             ANSELbits.ANS0 = 1;
  1001  0028  1683               	bsf	3,5	;RP0=1, select bank3
  1002  0029  1703               	bsf	3,6	;RP1=1, select bank3
  1003  002A  1408               	bsf	8,0	;volatile
  1004                           
  1005                           ;./ADC.h: 14:             TRISAbits.TRISA0 = 1;
  1006  002B  1683               	bsf	3,5	;RP0=1, select bank1
  1007  002C  1303               	bcf	3,6	;RP1=0, select bank1
  1008  002D  1405               	bsf	5,0	;volatile
  1009                           
  1010                           ;./ADC.h: 15:             break;
  1011  002E  0008               	return
  1012  002F                     l82:	
  1013                           ;./ADC.h: 16:         case 1:
  1014                           
  1015                           
  1016                           ;./ADC.h: 17:             ANSELbits.ANS1 = 1;
  1017  002F  1683               	bsf	3,5	;RP0=1, select bank3
  1018  0030  1703               	bsf	3,6	;RP1=1, select bank3
  1019  0031  1488               	bsf	8,1	;volatile
  1020                           
  1021                           ;./ADC.h: 18:             TRISAbits.TRISA1 = 1;
  1022  0032  1683               	bsf	3,5	;RP0=1, select bank1
  1023  0033  1303               	bcf	3,6	;RP1=0, select bank1
  1024  0034  1485               	bsf	5,1	;volatile
  1025                           
  1026                           ;./ADC.h: 19:             break;
  1027  0035  0008               	return
  1028  0036                     l83:	
  1029                           ;./ADC.h: 20:         case 2:
  1030                           
  1031                           
  1032                           ;./ADC.h: 21:             ANSELbits.ANS2 = 1;
  1033  0036  1683               	bsf	3,5	;RP0=1, select bank3
  1034  0037  1703               	bsf	3,6	;RP1=1, select bank3
  1035  0038  1508               	bsf	8,2	;volatile
  1036                           
  1037                           ;./ADC.h: 22:             TRISAbits.TRISA2 = 1;
  1038  0039  1683               	bsf	3,5	;RP0=1, select bank1
  1039  003A  1303               	bcf	3,6	;RP1=0, select bank1
  1040  003B  1505               	bsf	5,2	;volatile
  1041                           
  1042                           ;./ADC.h: 23:             break;
  1043  003C  0008               	return
  1044  003D                     l84:	
  1045                           ;./ADC.h: 24:         case 3:
  1046                           
  1047                           
  1048                           ;./ADC.h: 25:             ANSELbits.ANS3 = 1;
  1049  003D  1683               	bsf	3,5	;RP0=1, select bank3
  1050  003E  1703               	bsf	3,6	;RP1=1, select bank3
  1051  003F  1588               	bsf	8,3	;volatile
  1052                           
  1053                           ;./ADC.h: 26:             TRISAbits.TRISA3 = 1;
  1054  0040  1683               	bsf	3,5	;RP0=1, select bank1
  1055  0041  1303               	bcf	3,6	;RP1=0, select bank1
  1056  0042  1585               	bsf	5,3	;volatile
  1057                           
  1058                           ;./ADC.h: 27:             break;
  1059  0043  0008               	return
  1060  0044                     l85:	
  1061                           ;./ADC.h: 28:         case 4:
  1062                           
  1063                           
  1064                           ;./ADC.h: 29:             ANSELbits.ANS4 = 1;
  1065  0044  1683               	bsf	3,5	;RP0=1, select bank3
  1066  0045  1703               	bsf	3,6	;RP1=1, select bank3
  1067  0046  1608               	bsf	8,4	;volatile
  1068                           
  1069                           ;./ADC.h: 30:             TRISAbits.TRISA5 = 1;
  1070  0047  1683               	bsf	3,5	;RP0=1, select bank1
  1071  0048  1303               	bcf	3,6	;RP1=0, select bank1
  1072  0049  1685               	bsf	5,5	;volatile
  1073                           
  1074                           ;./ADC.h: 31:             break;
  1075  004A  0008               	return
  1076  004B                     l86:	
  1077                           ;./ADC.h: 32:         case 5:
  1078                           
  1079                           
  1080                           ;./ADC.h: 33:             ANSELbits.ANS5 = 1;
  1081  004B  1683               	bsf	3,5	;RP0=1, select bank3
  1082  004C  1703               	bsf	3,6	;RP1=1, select bank3
  1083  004D  1688               	bsf	8,5	;volatile
  1084                           
  1085                           ;./ADC.h: 34:             TRISEbits.TRISE0 = 1;
  1086  004E  1683               	bsf	3,5	;RP0=1, select bank1
  1087  004F  1303               	bcf	3,6	;RP1=0, select bank1
  1088  0050  1409               	bsf	9,0	;volatile
  1089                           
  1090                           ;./ADC.h: 35:             break;
  1091  0051  0008               	return
  1092  0052                     l87:	
  1093                           ;./ADC.h: 36:         case 6:
  1094                           
  1095                           
  1096                           ;./ADC.h: 37:             ANSELbits.ANS6 = 1;
  1097  0052  1683               	bsf	3,5	;RP0=1, select bank3
  1098  0053  1703               	bsf	3,6	;RP1=1, select bank3
  1099  0054  1708               	bsf	8,6	;volatile
  1100                           
  1101                           ;./ADC.h: 38:             TRISEbits.TRISE1 = 1;
  1102  0055  1683               	bsf	3,5	;RP0=1, select bank1
  1103  0056  1303               	bcf	3,6	;RP1=0, select bank1
  1104  0057  1489               	bsf	9,1	;volatile
  1105                           
  1106                           ;./ADC.h: 39:             break;
  1107  0058  0008               	return
  1108  0059                     l88:	
  1109                           ;./ADC.h: 40:         case 7:
  1110                           
  1111                           
  1112                           ;./ADC.h: 41:             ANSELbits.ANS7 = 1;
  1113  0059  1683               	bsf	3,5	;RP0=1, select bank3
  1114  005A  1703               	bsf	3,6	;RP1=1, select bank3
  1115  005B  1788               	bsf	8,7	;volatile
  1116                           
  1117                           ;./ADC.h: 42:             TRISEbits.TRISE2 = 1;
  1118  005C  1683               	bsf	3,5	;RP0=1, select bank1
  1119  005D  1303               	bcf	3,6	;RP1=0, select bank1
  1120  005E  1509               	bsf	9,2	;volatile
  1121                           
  1122                           ;./ADC.h: 43:             break;
  1123  005F  0008               	return
  1124  0060                     l89:	
  1125                           ;./ADC.h: 44:         case 8:
  1126                           
  1127                           
  1128                           ;./ADC.h: 45:             ANSELHbits.ANS8 = 1;
  1129  0060  1683               	bsf	3,5	;RP0=1, select bank3
  1130  0061  1703               	bsf	3,6	;RP1=1, select bank3
  1131  0062  1409               	bsf	9,0	;volatile
  1132                           
  1133                           ;./ADC.h: 46:             TRISBbits.TRISB2 = 1;
  1134  0063  1683               	bsf	3,5	;RP0=1, select bank1
  1135  0064  1303               	bcf	3,6	;RP1=0, select bank1
  1136  0065  1506               	bsf	6,2	;volatile
  1137                           
  1138                           ;./ADC.h: 47:             break;
  1139  0066  0008               	return
  1140  0067                     l90:	
  1141                           ;./ADC.h: 48:         case 9:
  1142                           
  1143                           
  1144                           ;./ADC.h: 49:             ANSELHbits.ANS9 = 1;
  1145  0067  1683               	bsf	3,5	;RP0=1, select bank3
  1146  0068  1703               	bsf	3,6	;RP1=1, select bank3
  1147  0069  1489               	bsf	9,1	;volatile
  1148                           
  1149                           ;./ADC.h: 50:             TRISBbits.TRISB3 = 1;
  1150  006A  1683               	bsf	3,5	;RP0=1, select bank1
  1151  006B  1303               	bcf	3,6	;RP1=0, select bank1
  1152  006C  1586               	bsf	6,3	;volatile
  1153                           
  1154                           ;./ADC.h: 51:             break;
  1155  006D  0008               	return
  1156  006E                     l91:	
  1157                           ;./ADC.h: 52:         case 10:
  1158                           
  1159                           
  1160                           ;./ADC.h: 53:             ANSELHbits.ANS10 = 1;
  1161  006E  1683               	bsf	3,5	;RP0=1, select bank3
  1162  006F  1703               	bsf	3,6	;RP1=1, select bank3
  1163  0070  1509               	bsf	9,2	;volatile
  1164                           
  1165                           ;./ADC.h: 54:             TRISBbits.TRISB1 = 1;
  1166  0071  1683               	bsf	3,5	;RP0=1, select bank1
  1167  0072  1303               	bcf	3,6	;RP1=0, select bank1
  1168  0073  1486               	bsf	6,1	;volatile
  1169                           
  1170                           ;./ADC.h: 55:             break;
  1171  0074  0008               	return
  1172  0075                     l92:	
  1173                           ;./ADC.h: 56:         case 11:
  1174                           
  1175                           
  1176                           ;./ADC.h: 57:             ANSELHbits.ANS11 = 1;
  1177  0075  1683               	bsf	3,5	;RP0=1, select bank3
  1178  0076  1703               	bsf	3,6	;RP1=1, select bank3
  1179  0077  1589               	bsf	9,3	;volatile
  1180                           
  1181                           ;./ADC.h: 58:             TRISBbits.TRISB4 = 1;
  1182  0078  1683               	bsf	3,5	;RP0=1, select bank1
  1183  0079  1303               	bcf	3,6	;RP1=0, select bank1
  1184  007A  1606               	bsf	6,4	;volatile
  1185                           
  1186                           ;./ADC.h: 59:             break;
  1187  007B  0008               	return
  1188  007C                     l93:	
  1189                           ;./ADC.h: 60:         case 12:
  1190                           
  1191                           
  1192                           ;./ADC.h: 61:             ANSELHbits.ANS12 = 1;
  1193  007C  1683               	bsf	3,5	;RP0=1, select bank3
  1194  007D  1703               	bsf	3,6	;RP1=1, select bank3
  1195  007E  1609               	bsf	9,4	;volatile
  1196                           
  1197                           ;./ADC.h: 62:             TRISBbits.TRISB0 = 1;
  1198  007F  1683               	bsf	3,5	;RP0=1, select bank1
  1199  0080  1303               	bcf	3,6	;RP1=0, select bank1
  1200  0081  1406               	bsf	6,0	;volatile
  1201                           
  1202                           ;./ADC.h: 63:             break;
  1203  0082  0008               	return
  1204  0083                     l94:	
  1205                           ;./ADC.h: 64:         case 13:
  1206                           
  1207                           
  1208                           ;./ADC.h: 65:             ANSELHbits.ANS13 = 1;
  1209  0083  1683               	bsf	3,5	;RP0=1, select bank3
  1210  0084  1703               	bsf	3,6	;RP1=1, select bank3
  1211  0085  1689               	bsf	9,5	;volatile
  1212                           
  1213                           ;./ADC.h: 66:             TRISBbits.TRISB5 = 1;
  1214  0086  1683               	bsf	3,5	;RP0=1, select bank1
  1215  0087  1303               	bcf	3,6	;RP1=0, select bank1
  1216  0088  1686               	bsf	6,5	;volatile
  1217                           
  1218                           ;./ADC.h: 67:             break;
  1219  0089  0008               	return
  1220  008A                     l95:	
  1221                           ;./ADC.h: 68:         default:
  1222                           
  1223                           
  1224                           ;./ADC.h: 69:             ANSELbits.ANS0 = 1;
  1225  008A  1683               	bsf	3,5	;RP0=1, select bank3
  1226  008B  1703               	bsf	3,6	;RP1=1, select bank3
  1227  008C  1408               	bsf	8,0	;volatile
  1228                           
  1229                           ;./ADC.h: 70:             TRISAbits.TRISA0 = 1;
  1230  008D  1683               	bsf	3,5	;RP0=1, select bank1
  1231  008E  1303               	bcf	3,6	;RP1=0, select bank1
  1232  008F  1405               	bsf	5,0	;volatile
  1233                           
  1234                           ;./ADC.h: 71:             break;
  1235  0090  0008               	return
  1236  0091                     l789:	
  1237  0091  0875               	movf	ADC_channel@a,w
  1238  0092  00F3               	movwf	??_ADC_channel
  1239  0093  01F4               	clrf	??_ADC_channel+1
  1240                           
  1241                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1242                           ; Switch size 1, requested type "simple"
  1243                           ; Number of cases is 1, Range of values is 0 to 0
  1244                           ; switch strategies available:
  1245                           ; Name         Instructions Cycles
  1246                           ; simple_byte            4     3 (average)
  1247                           ; direct_byte           11     8 (fixed)
  1248                           ; jumptable            260     6 (fixed)
  1249                           ;	Chosen strategy is simple_byte
  1250  0094  0874               	movf	??_ADC_channel+1,w
  1251  0095  3A00               	xorlw	0	; case 0
  1252  0096  1903               	skipnz
  1253  0097  2899               	goto	l1225
  1254  0098  288A               	goto	l95
  1255  0099                     l1225:	
  1256                           
  1257                           ; Switch size 1, requested type "simple"
  1258                           ; Number of cases is 14, Range of values is 0 to 13
  1259                           ; switch strategies available:
  1260                           ; Name         Instructions Cycles
  1261                           ; simple_byte           43    22 (average)
  1262                           ; direct_byte           50     8 (fixed)
  1263                           ; jumptable            260     6 (fixed)
  1264                           ;	Chosen strategy is simple_byte
  1265  0099  0873               	movf	??_ADC_channel,w
  1266  009A  3A00               	xorlw	0	; case 0
  1267  009B  1903               	skipnz
  1268  009C  2828               	goto	l80
  1269  009D  3A01               	xorlw	1	; case 1
  1270  009E  1903               	skipnz
  1271  009F  282F               	goto	l82
  1272  00A0  3A03               	xorlw	3	; case 2
  1273  00A1  1903               	skipnz
  1274  00A2  2836               	goto	l83
  1275  00A3  3A01               	xorlw	1	; case 3
  1276  00A4  1903               	skipnz
  1277  00A5  283D               	goto	l84
  1278  00A6  3A07               	xorlw	7	; case 4
  1279  00A7  1903               	skipnz
  1280  00A8  2844               	goto	l85
  1281  00A9  3A01               	xorlw	1	; case 5
  1282  00AA  1903               	skipnz
  1283  00AB  284B               	goto	l86
  1284  00AC  3A03               	xorlw	3	; case 6
  1285  00AD  1903               	skipnz
  1286  00AE  2852               	goto	l87
  1287  00AF  3A01               	xorlw	1	; case 7
  1288  00B0  1903               	skipnz
  1289  00B1  2859               	goto	l88
  1290  00B2  3A0F               	xorlw	15	; case 8
  1291  00B3  1903               	skipnz
  1292  00B4  2860               	goto	l89
  1293  00B5  3A01               	xorlw	1	; case 9
  1294  00B6  1903               	skipnz
  1295  00B7  2867               	goto	l90
  1296  00B8  3A03               	xorlw	3	; case 10
  1297  00B9  1903               	skipnz
  1298  00BA  286E               	goto	l91
  1299  00BB  3A01               	xorlw	1	; case 11
  1300  00BC  1903               	skipnz
  1301  00BD  2875               	goto	l92
  1302  00BE  3A07               	xorlw	7	; case 12
  1303  00BF  1903               	skipnz
  1304  00C0  287C               	goto	l93
  1305  00C1  3A01               	xorlw	1	; case 13
  1306  00C2  1903               	skipnz
  1307  00C3  2883               	goto	l94
  1308  00C4  288A               	goto	l95
  1309  00C5  0008               	return
  1310  00C6                     __end_of_ADC_channel:	
  1311                           
  1312                           	psect	text6
  1313  00C6                     __ptext6:	
  1314 ;; *************** function _isr *****************
  1315 ;; Defined at:
  1316 ;;		line 35 in file "MainHall.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;		None
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;		None
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      void 
  1323 ;; Registers used:
  1324 ;;		wreg, status,2, status,0
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1330 ;;      Params:         0       0       0       0       0
  1331 ;;      Locals:         0       0       0       0       0
  1332 ;;      Temps:          3       0       0       0       0
  1333 ;;      Totals:         3       0       0       0       0
  1334 ;;Total ram usage:        3 bytes
  1335 ;; Hardware stack levels used:    1
  1336 ;; This function calls:
  1337 ;;		Nothing
  1338 ;; This function is called by:
  1339 ;;		Interrupt level 1
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           
  1344                           ;psect for function _isr
  1345  00C6                     _isr:	
  1346                           
  1347                           ;MainHall.c: 36:     if(PIR1bits.SSPIF == 1){
  1348  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  1349  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  1350  00C8  1D8C               	btfss	12,3	;volatile
  1351  00C9  2910               	goto	i1l157
  1352                           
  1353                           ;MainHall.c: 38:         SSPCONbits.CKP = 0;
  1354  00CA  1214               	bcf	20,4	;volatile
  1355                           
  1356                           ;MainHall.c: 40:         if ((SSPCONbits.SSPOV) || (SSPCONbits.WCOL)){
  1357  00CB  1B14               	btfsc	20,6	;volatile
  1358  00CC  28CF               	goto	i1l1083
  1359  00CD  1F94               	btfss	20,7	;volatile
  1360  00CE  28D6               	goto	i1l1091
  1361  00CF                     i1l1083:	
  1362                           
  1363                           ;MainHall.c: 41:             z = SSPBUF;
  1364  00CF  0813               	movf	19,w	;volatile
  1365  00D0  00F0               	movwf	??_isr
  1366  00D1  0870               	movf	??_isr,w
  1367  00D2  00A3               	movwf	_z
  1368                           
  1369                           ;MainHall.c: 42:             SSPCONbits.SSPOV = 0;
  1370  00D3  1314               	bcf	20,6	;volatile
  1371                           
  1372                           ;MainHall.c: 43:             SSPCONbits.WCOL = 0;
  1373  00D4  1394               	bcf	20,7	;volatile
  1374                           
  1375                           ;MainHall.c: 44:             SSPCONbits.CKP = 1;
  1376  00D5  1614               	bsf	20,4	;volatile
  1377  00D6                     i1l1091:	
  1378                           
  1379                           ;MainHall.c: 47:         if(!SSPSTATbits.D_nA && !SSPSTATbits.R_nW) {
  1380  00D6  1683               	bsf	3,5	;RP0=1, select bank1
  1381  00D7  1303               	bcf	3,6	;RP1=0, select bank1
  1382  00D8  1E94               	btfss	20,5	;volatile
  1383  00D9  1914               	btfsc	20,2	;volatile
  1384  00DA  28F3               	goto	i1l161
  1385                           
  1386                           ;MainHall.c: 49:             z = SSPBUF;
  1387  00DB  1283               	bcf	3,5	;RP0=0, select bank0
  1388  00DC  1303               	bcf	3,6	;RP1=0, select bank0
  1389  00DD  0813               	movf	19,w	;volatile
  1390  00DE  00F0               	movwf	??_isr
  1391  00DF  0870               	movf	??_isr,w
  1392  00E0  00A3               	movwf	_z
  1393                           
  1394                           ;MainHall.c: 51:             PIR1bits.SSPIF = 0;
  1395  00E1  118C               	bcf	12,3	;volatile
  1396                           
  1397                           ;MainHall.c: 52:             SSPCONbits.CKP = 1;
  1398  00E2  1614               	bsf	20,4	;volatile
  1399  00E3                     i1l162:	
  1400                           ;MainHall.c: 53:             while(!SSPSTATbits.BF);
  1401                           
  1402  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  1403  00E4  1303               	bcf	3,6	;RP1=0, select bank1
  1404  00E5  1C14               	btfss	20,0	;volatile
  1405  00E6  28E3               	goto	i1l162
  1406                           
  1407                           ;MainHall.c: 54:             val = SSPBUF;
  1408  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  1409  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  1410  00E9  0813               	movf	19,w	;volatile
  1411  00EA  00F0               	movwf	??_isr
  1412  00EB  0870               	movf	??_isr,w
  1413  00EC  00F7               	movwf	_val
  1414                           
  1415                           ;MainHall.c: 55:             _delay((unsigned long)((250)*(8000000/4000000.0)));
  1416  00ED  30A6               	movlw	166
  1417  00EE  00F0               	movwf	??_isr
  1418  00EF                     u39_27:	
  1419  00EF  0BF0               	decfsz	??_isr,f
  1420  00F0  28EF               	goto	u39_27
  1421  00F1  0000               	nop
  1422                           
  1423                           ;MainHall.c: 57:         }else if(!SSPSTATbits.D_nA && SSPSTATbits.R_nW){
  1424  00F2  290D               	goto	i1l165
  1425  00F3                     i1l161:	
  1426  00F3  1E94               	btfss	20,5	;volatile
  1427  00F4  1D14               	btfss	20,2	;volatile
  1428  00F5  290D               	goto	i1l165
  1429                           
  1430                           ;MainHall.c: 58:             z = SSPBUF;
  1431  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  1432  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  1433  00F8  0813               	movf	19,w	;volatile
  1434  00F9  00F0               	movwf	??_isr
  1435  00FA  0870               	movf	??_isr,w
  1436  00FB  00A3               	movwf	_z
  1437                           
  1438                           ;MainHall.c: 59:             BF = 0;
  1439  00FC  1683               	bsf	3,5	;RP0=1, select bank1
  1440  00FD  1303               	bcf	3,6	;RP1=0, select bank1
  1441  00FE  1014               	bcf	20,0	;volatile
  1442                           
  1443                           ;MainHall.c: 60:             SSPBUF = key;
  1444  00FF  087A               	movf	_key,w
  1445  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1446  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1447  0102  0093               	movwf	19	;volatile
  1448                           
  1449                           ;MainHall.c: 61:             SSPCONbits.CKP = 1;
  1450  0103  1614               	bsf	20,4	;volatile
  1451                           
  1452                           ;MainHall.c: 62:             _delay((unsigned long)((250)*(8000000/4000000.0)));
  1453  0104  30A6               	movlw	166
  1454  0105  00F0               	movwf	??_isr
  1455  0106                     u40_27:	
  1456  0106  0BF0               	decfsz	??_isr,f
  1457  0107  2906               	goto	u40_27
  1458  0108  0000               	nop
  1459  0109                     i1l167:	
  1460                           ;MainHall.c: 63:             while(SSPSTATbits.BF);
  1461                           
  1462  0109  1683               	bsf	3,5	;RP0=1, select bank1
  1463  010A  1303               	bcf	3,6	;RP1=0, select bank1
  1464  010B  1814               	btfsc	20,0	;volatile
  1465  010C  2909               	goto	i1l167
  1466  010D                     i1l165:	
  1467                           
  1468                           ;MainHall.c: 66:         PIR1bits.SSPIF = 0;
  1469  010D  1283               	bcf	3,5	;RP0=0, select bank0
  1470  010E  1303               	bcf	3,6	;RP1=0, select bank0
  1471  010F  118C               	bcf	12,3	;volatile
  1472  0110                     i1l157:	
  1473                           ;MainHall.c: 67:     }
  1474                           
  1475                           
  1476                           ;MainHall.c: 69:     if (INTCONbits.T0IF == 1){
  1477  0110  1D0B               	btfss	11,2	;volatile
  1478  0111  2924               	goto	i1l175
  1479                           
  1480                           ;MainHall.c: 70:             cont++;
  1481  0112  3001               	movlw	1
  1482  0113  00F0               	movwf	??_isr
  1483  0114  0870               	movf	??_isr,w
  1484  0115  07F8               	addwf	_cont,f
  1485                           
  1486                           ;MainHall.c: 71:             if(cont < 200){
  1487  0116  30C8               	movlw	200
  1488  0117  0278               	subwf	_cont,w
  1489  0118  1803               	skipnc
  1490  0119  2922               	goto	i1l1119
  1491                           
  1492                           ;MainHall.c: 72:                 if(cont < val){
  1493  011A  0877               	movf	_val,w
  1494  011B  0278               	subwf	_cont,w
  1495  011C  1803               	skipnc
  1496  011D  2920               	goto	i1l172
  1497                           
  1498                           ;MainHall.c: 73:                     PORTAbits.RA1 = 1;
  1499  011E  1485               	bsf	5,1	;volatile
  1500                           
  1501                           ;MainHall.c: 74:                 }else{
  1502  011F  2923               	goto	i1l1121
  1503  0120                     i1l172:	
  1504                           
  1505                           ;MainHall.c: 75:                     PORTAbits.RA1 = 0;
  1506  0120  1085               	bcf	5,1	;volatile
  1507  0121  2923               	goto	i1l1121
  1508  0122                     i1l1119:	
  1509                           
  1510                           ;MainHall.c: 78:                 cont = 0;
  1511  0122  01F8               	clrf	_cont
  1512  0123                     i1l1121:	
  1513                           
  1514                           ;MainHall.c: 80:             INTCONbits.T0IF = 0;
  1515  0123  110B               	bcf	11,2	;volatile
  1516  0124                     i1l175:	
  1517  0124  0872               	movf	??_isr+2,w
  1518  0125  008A               	movwf	10
  1519  0126  0E71               	swapf	(??_isr+1)^(0+4294967168),w
  1520  0127  0083               	movwf	3
  1521  0128  0EFE               	swapf	126,f
  1522  0129  0E7E               	swapf	126,w
  1523  012A  0009               	retfie
  1524  012B                     __end_of_isr:	
  1525  007E                     btemp	set	126	;btemp
  1526  007E                     wtemp0	set	126
  1527                           
  1528                           	psect	intentry
  1529  0004                     __pintentry:	
  1530                           ;incstack = 0
  1531                           ; Regs used in _isr: [wreg+status,2+status,0]
  1532                           
  1533  0004                     interrupt_function:	
  1534  007E                     saved_w	set	btemp
  1535  0004  00FE               	movwf	btemp
  1536  0005  0E03               	swapf	3,w
  1537  0006  00F1               	movwf	??_isr+1
  1538  0007  080A               	movf	10,w
  1539  0008  00F2               	movwf	??_isr+2
  1540  0009  120A  118A  28C6   	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80      3       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_setup
    _setup->_ADC_channel
    _setup->_initOscilador

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     158
                                              0 BANK0      3     3      0
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0     158
                                              6 COMMON     1     1      0
                        _ADC_channel
                     _I2C_Slave_Init
                            _initADC
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      15
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _initADC                                              2     2      0      15
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Slave_Init                                       2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_channel                                          3     3      0      30
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _ADC_channel
     _I2C_Slave_Init
     _initADC
     _initOscilador

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       F       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       F      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Feb 26 13:07:03 2019

                       _z 0023               __CFG_CP$OFF 0000               _SSPSTATbits 0094  
                      _BF 04A0                        l80 0028                        l90 0067  
                      l82 002F                        l91 006E                        l83 0036  
                      l92 0075                        l84 003D                        l93 007C  
                      l85 0044                        l94 0083                        l86 004B  
                      l95 008A                        l87 0052                        l88 0059  
                      l89 0060                       l133 017E                       l181 01C1  
                     _ADC 0079                       l186 01E4                       l821 0138  
                     l831 0157                       l823 013E                       l833 0157  
                     l825 0144                       l817 012D                       l827 014A  
                     l819 0132                       l829 0150                       l837 015C  
                     l789 0091                       _GIE 005F              __CFG_CPD$OFF 0000  
                     u387 01D5                       _key 007A                       _isr 00C6  
                     _val 0077              __CFG_LVP$OFF 0000                      l1223 0164  
                    l1225 0099                      l1181 01E7                      l1175 01BE  
                    l1177 01C7                      ?_isr 0070                      _PEIE 005E  
                    _RCEN 048B                      _TMR0 0001              __CFG_WRT$OFF 0000  
                    _cont 0078                      _main 01B9                      btemp 007E  
                    start 000C             __CFG_IESO$OFF 0000      __size_of_ADC_channel 00AC  
                   ??_isr 0070                     ?_main 0070             __CFG_WDTE$OFF 0000  
                   _ANSEL 0188                     i1l161 00F3                     i1l162 00E3  
                   i1l172 0120                     i1l165 010D                     i1l157 0110  
                   i1l175 0124                     i1l167 0109                     u40_27 0106  
                   _PORTA 0005                     _PORTB 0006                     u39_27 00EF  
                   _TRISA 0085                     _TRISB 0086                     _SSPIE 0463  
                   _SSPIF 0063            __CFG_FCMEN$OFF 0000           __end_of_initADC 0216  
                   _setup 0180            __CFG_BOREN$OFF 0000                     pclath 000A  
                   status 0003                     wtemp0 007E            __CFG_MCLRE$OFF 0000  
         __initialization 000F              __end_of_main 01E9    __size_of_initOscilador 0055  
                  ??_main 0020                    _ADRESH 001E                    ?_setup 0070  
                  _ANSELH 0189                    i1l1121 0123                    i1l1119 0122  
                  i1l1091 00D6                    i1l1083 00CF                    _SSPADD 0093  
                  _TRISC3 043B                    _TRISC4 043C                    _SSPCON 0014  
                  _SSPBUF 0013            __CFG_PWRTE$OFF 0000                 ??_initADC 0073  
                  saved_w 007E   __end_of__initialization 0016             _initOscilador 012B  
          __pcstackCOMMON 0070   __size_of_I2C_Slave_Init 0019             __end_of_setup 01B9  
          _OPTION_REGbits 0081                   ??_setup 0076     I2C_Slave_Init@address 0073  
              __pbssBANK0 0023            ?_initOscilador 0070                __pmaintext 01B9  
              __pintentry 0004                   _SSPCON2 0091                   _SSPSTAT 0094  
     initOscilador@option 0075             ??_ADC_channel 0073                 _ANSELbits 0188  
                 __ptext1 0180                   __ptext2 012B                   __ptext3 0202  
                 __ptext4 01E9                   __ptext5 001A                   __ptext6 00C6  
                 _initADC 0202              __size_of_isr 0065           ??_initOscilador 0073  
    end_of_initialization 0016            _I2C_Slave_Init 01E9       __end_of_ADC_channel 00C6  
               _PORTAbits 0005              ADC_channel@a 0075                 _TRISAbits 0085  
               _TRISBbits 0086                 _TRISEbits 0089    __end_of_I2C_Slave_Init 0202  
     start_initialization 000F               __end_of_isr 012B               _ADC_channel 001A  
__CFG_FOSC$INTRC_NOCLKOUT 0000           ?_I2C_Slave_Init 0073               __pbssCOMMON 0077  
               ___latbits 0002             __pcstackBANK0 0020                  ?_initADC 0070  
          __size_of_setup 0039         interrupt_function 0004                  _PIR1bits 000C  
              _ADCON0bits 001F                _ADCON1bits 009F     __end_of_initOscilador 0180  
              _ANSELHbits 0189          __size_of_initADC 0014         __CFG_BOR4V$BOR40V 0000  
        ??_I2C_Slave_Init 0075             __size_of_main 0030              ?_ADC_channel 0070  
                initADC@a 0074                _INTCONbits 000B                  intlevel1 0000  
              _OSCCONbits 008F               _SSPCON2bits 0091                _SSPCONbits 0014  

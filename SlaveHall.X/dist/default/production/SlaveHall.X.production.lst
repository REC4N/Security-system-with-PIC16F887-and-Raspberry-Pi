

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 11 08:18:47 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.05
    19                           ; Generated 20/12/2018 GMT
    20                           ; 
    21                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0005                     _PORTA	set	5
   209  0005                     _PORTAbits	set	5
   210  001E                     _ADRESH	set	30
   211  0014                     _SSPCONbits	set	20
   212  000C                     _PIR1bits	set	12
   213  0013                     _SSPBUF	set	19
   214  0014                     _SSPCON	set	20
   215  001F                     _ADCON0bits	set	31
   216  0063                     _SSPIF	set	99
   217  005E                     _PEIE	set	94
   218  005F                     _GIE	set	95
   219  0085                     _TRISA	set	133
   220  0094                     _SSPSTATbits	set	148
   221  008F                     _OSCCONbits	set	143
   222  0091                     _SSPCON2bits	set	145
   223  0094                     _SSPSTAT	set	148
   224  0093                     _SSPADD	set	147
   225  0091                     _SSPCON2	set	145
   226  009F                     _ADCON1bits	set	159
   227  0086                     _TRISBbits	set	134
   228  0089                     _TRISEbits	set	137
   229  0085                     _TRISAbits	set	133
   230  04A0                     _BF	set	1184
   231  0463                     _SSPIE	set	1123
   232  048B                     _RCEN	set	1163
   233  043C                     _TRISC4	set	1084
   234  043B                     _TRISC3	set	1083
   235  0188                     _ANSEL	set	392
   236  0189                     _ANSELHbits	set	393
   237  0188                     _ANSELbits	set	392
   238                           
   239                           ; #config settings
   240  0000                     
   241                           	psect	cinit
   242  000F                     start_initialization:	
   243  000F                     __initialization:	
   244                           
   245                           ; Clear objects allocated to COMMON
   246  000F  01F6               	clrf	__pbssCOMMON& (0+127)
   247  0010  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   248  0011  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   249  0012  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   250  0013                     end_of_initialization:	
   251                           ;End of C runtime variable initialization code
   252                           
   253  0013                     __end_of__initialization:	
   254  0013  0183               	clrf	3
   255  0014  120A  118A  2918   	ljmp	_main	;jump to C main() function
   256                           
   257                           	psect	bssCOMMON
   258  0076                     __pbssCOMMON:	
   259  0076                     _door:	
   260  0076                     	ds	1
   261  0077                     _ADC:	
   262  0077                     	ds	1
   263  0078                     _key:	
   264  0078                     	ds	1
   265  0079                     _z:	
   266  0079                     	ds	1
   267                           
   268                           	psect	cstackCOMMON
   269  0070                     __pcstackCOMMON:	
   270  0070                     ?_setup:	
   271  0070                     ?_ADC_channel:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_initADC:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_initOscilador:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_isr:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ??_isr:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ?_main:	
   287                           ; 1 bytes @ 0x0
   288                           
   289                           
   290                           ; 1 bytes @ 0x0
   291  0070                     	ds	3
   292  0073                     ??_ADC_channel:	
   293  0073                     ??_initADC:	
   294                           ; 1 bytes @ 0x3
   295                           
   296  0073                     ?_I2C_Slave_Init:	
   297                           ; 1 bytes @ 0x3
   298                           
   299  0073                     ??_initOscilador:	
   300                           ; 1 bytes @ 0x3
   301                           
   302  0073                     I2C_Slave_Init@address:	
   303                           ; 1 bytes @ 0x3
   304                           
   305                           
   306                           ; 2 bytes @ 0x3
   307  0073                     	ds	1
   308  0074                     initADC@a:	
   309                           
   310                           ; 1 bytes @ 0x4
   311  0074                     	ds	1
   312  0075                     ??_I2C_Slave_Init:	
   313  0075                     ADC_channel@a:	
   314                           ; 1 bytes @ 0x5
   315                           
   316  0075                     initOscilador@option:	
   317                           ; 1 bytes @ 0x5
   318                           
   319                           
   320                           ; 1 bytes @ 0x5
   321  0075                     	ds	1
   322  0076                     ??_setup:	
   323                           
   324                           	psect	cstackBANK0
   325  0020                     __pcstackBANK0:	
   326                           ; 1 bytes @ 0x6
   327                           
   328  0020                     ??_main:	
   329                           
   330                           ; 1 bytes @ 0x0
   331  0020                     	ds	3
   332                           
   333                           	psect	maintext
   334  0118                     __pmaintext:	
   335 ;;
   336 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   337 ;;
   338 ;; *************** function _main *****************
   339 ;; Defined at:
   340 ;;		line 71 in file "MainHall.c"
   341 ;; Parameters:    Size  Location     Type
   342 ;;		None
   343 ;; Auto vars:     Size  Location     Type
   344 ;;		None
   345 ;; Return value:  Size  Location     Type
   346 ;;                  1    wreg      void 
   347 ;; Registers used:
   348 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   349 ;; Tracked objects:
   350 ;;		On entry : B00/0
   351 ;;		On exit  : 0/0
   352 ;;		Unchanged: 0/0
   353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   354 ;;      Params:         0       0       0       0       0
   355 ;;      Locals:         0       0       0       0       0
   356 ;;      Temps:          0       3       0       0       0
   357 ;;      Totals:         0       3       0       0       0
   358 ;;Total ram usage:        3 bytes
   359 ;; Hardware stack levels required when called:    3
   360 ;; This function calls:
   361 ;;		_setup
   362 ;; This function is called by:
   363 ;;		Startup code after reset
   364 ;; This function uses a non-reentrant model
   365 ;;
   366                           
   367                           
   368                           ;psect for function _main
   369  0118                     _main:	
   370                           
   371                           ;MainHall.c: 72:     setup();
   372                           
   373                           ;incstack = 0
   374                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   375  0118  120A  118A  21BB  120A  118A  	fcall	_setup
   376  011D                     l1085:	
   377                           
   378                           ;MainHall.c: 74:         ADCON0bits.GO = 1;
   379  011D  1283               	bcf	3,5	;RP0=0, select bank0
   380  011E  1303               	bcf	3,6	;RP1=0, select bank0
   381  011F  149F               	bsf	31,1	;volatile
   382  0120                     l162:	
   383                           ;MainHall.c: 77:         }
   384                           
   385                           ;MainHall.c: 75:         while(ADCON0bits.GO == 1){
   386                           
   387                           
   388                           ;MainHall.c: 75:         while(ADCON0bits.GO == 1){
   389  0120  1283               	bcf	3,5	;RP0=0, select bank0
   390  0121  1303               	bcf	3,6	;RP1=0, select bank0
   391  0122  1C9F               	btfss	31,1	;volatile
   392  0123  2926               	goto	l1087
   393  0124  0000               	nop	;# 
   394  0125  2920               	goto	l162
   395  0126                     l1087:	
   396                           
   397                           ;MainHall.c: 78:         ADC = ADRESH;
   398  0126  081E               	movf	30,w	;volatile
   399  0127  00A0               	movwf	??_main
   400  0128  0820               	movf	??_main,w
   401  0129  00F7               	movwf	_ADC
   402                           
   403                           ;MainHall.c: 79:         _delay((unsigned long)((200)*(8000000/4000.0)));
   404  012A  3003               	movlw	3
   405  012B  1283               	bcf	3,5	;RP0=0, select bank0
   406  012C  1303               	bcf	3,6	;RP1=0, select bank0
   407  012D  00A2               	movwf	??_main+2
   408  012E  3008               	movlw	8
   409  012F  00A1               	movwf	??_main+1
   410  0130  3076               	movlw	118
   411  0131  00A0               	movwf	??_main
   412  0132                     u477:	
   413  0132  0BA0               	decfsz	??_main,f
   414  0133  2932               	goto	u477
   415  0134  0BA1               	decfsz	??_main+1,f
   416  0135  2932               	goto	u477
   417  0136  0BA2               	decfsz	??_main+2,f
   418  0137  2932               	goto	u477
   419  0138  0000               	nop
   420                           
   421                           ;MainHall.c: 80:         if (ADC > 134 | ADC < 120){
   422  0139  3087               	movlw	135
   423  013A  0277               	subwf	_ADC,w
   424  013B  1803               	skipnc
   425  013C  2941               	goto	l167
   426  013D  3078               	movlw	120
   427  013E  0277               	subwf	_ADC,w
   428  013F  1803               	skipnc
   429  0140  2944               	goto	l1091
   430  0141                     l167:	
   431                           
   432                           ;MainHall.c: 81:             key = 1;
   433  0141  01F8               	clrf	_key
   434  0142  0AF8               	incf	_key,f
   435                           
   436                           ;MainHall.c: 82:         } else {
   437  0143  2945               	goto	l1093
   438  0144                     l1091:	
   439                           
   440                           ;MainHall.c: 83:             key = 0;
   441  0144  01F8               	clrf	_key
   442  0145                     l1093:	
   443                           
   444                           ;MainHall.c: 85:         if (door == 0){
   445  0145  0876               	movf	_door,w
   446  0146  1D03               	btfss	3,2
   447  0147  295F               	goto	l1099
   448                           
   449                           ;MainHall.c: 86:             if (key == 1 & PORTAbits.RA2 == 1){
   450  0148  1283               	bcf	3,5	;RP0=0, select bank0
   451  0149  1303               	bcf	3,6	;RP1=0, select bank0
   452  014A  1D05               	btfss	5,2	;volatile
   453  014B  294E               	goto	u400
   454  014C  3001               	movlw	1
   455  014D  294F               	goto	u402
   456  014E                     u400:	
   457  014E  3000               	movlw	0
   458  014F                     u402:	
   459  014F  00A0               	movwf	??_main
   460  0150  0378               	decf	_key,w
   461  0151  1D03               	btfss	3,2
   462  0152  2955               	goto	u410
   463  0153  3001               	movlw	1
   464  0154  2956               	goto	u412
   465  0155                     u410:	
   466  0155  3000               	movlw	0
   467  0156                     u412:	
   468  0156  0520               	andwf	??_main,w
   469  0157  3800               	iorlw	0
   470  0158  1903               	skipnz
   471  0159  291D               	goto	l1085
   472                           
   473                           ;MainHall.c: 87:                 door = 1;
   474  015A  01F6               	clrf	_door
   475  015B  0AF6               	incf	_door,f
   476  015C                     l171:	
   477                           ;MainHall.c: 88:                 while(PORTAbits.RA2 == 1);
   478                           
   479  015C  1D05               	btfss	5,2	;volatile
   480  015D  291D               	goto	l1085
   481  015E  295C               	goto	l171
   482  015F                     l1099:	
   483  015F  0376               	decf	_door,w
   484  0160  1D03               	btfss	3,2
   485  0161  291D               	goto	l1085
   486                           
   487                           ;MainHall.c: 91:             if (PORTAbits.RA2 == 1){
   488  0162  1283               	bcf	3,5	;RP0=0, select bank0
   489  0163  1303               	bcf	3,6	;RP1=0, select bank0
   490  0164  1D05               	btfss	5,2	;volatile
   491  0165  291D               	goto	l1085
   492                           
   493                           ;MainHall.c: 92:                 door = 0;
   494  0166  01F6               	clrf	_door
   495  0167                     l177:	
   496                           ;MainHall.c: 93:                 while(PORTAbits.RA2 == 1);
   497                           
   498  0167  1D05               	btfss	5,2	;volatile
   499  0168  291D               	goto	l1085
   500  0169  2967               	goto	l177
   501  016A                     __end_of_main:	
   502                           
   503                           	psect	text1
   504  01BB                     __ptext1:	
   505 ;; *************** function _setup *****************
   506 ;; Defined at:
   507 ;;		line 100 in file "MainHall.c"
   508 ;; Parameters:    Size  Location     Type
   509 ;;		None
   510 ;; Auto vars:     Size  Location     Type
   511 ;;		None
   512 ;; Return value:  Size  Location     Type
   513 ;;                  1    wreg      void 
   514 ;; Registers used:
   515 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   516 ;; Tracked objects:
   517 ;;		On entry : 0/0
   518 ;;		On exit  : 0/0
   519 ;;		Unchanged: 0/0
   520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   521 ;;      Params:         0       0       0       0       0
   522 ;;      Locals:         0       0       0       0       0
   523 ;;      Temps:          0       0       0       0       0
   524 ;;      Totals:         0       0       0       0       0
   525 ;;Total ram usage:        0 bytes
   526 ;; Hardware stack levels used:    1
   527 ;; Hardware stack levels required when called:    2
   528 ;; This function calls:
   529 ;;		_ADC_channel
   530 ;;		_I2C_Slave_Init
   531 ;;		_initADC
   532 ;;		_initOscilador
   533 ;; This function is called by:
   534 ;;		_main
   535 ;; This function uses a non-reentrant model
   536 ;;
   537                           
   538                           
   539                           ;psect for function _setup
   540  01BB                     _setup:	
   541                           
   542                           ;MainHall.c: 101:     initOscilador(7);
   543                           
   544                           ;incstack = 0
   545                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   546  01BB  3007               	movlw	7
   547  01BC  120A  118A  20C3  120A  118A  	fcall	_initOscilador
   548                           
   549                           ;MainHall.c: 102:     ANSEL = 0;
   550  01C1  1683               	bsf	3,5	;RP0=1, select bank3
   551  01C2  1703               	bsf	3,6	;RP1=1, select bank3
   552  01C3  0188               	clrf	8	;volatile
   553                           
   554                           ;MainHall.c: 103:     TRISA = 0;
   555  01C4  1683               	bsf	3,5	;RP0=1, select bank1
   556  01C5  1303               	bcf	3,6	;RP1=0, select bank1
   557  01C6  0185               	clrf	5	;volatile
   558                           
   559                           ;MainHall.c: 104:     TRISAbits.TRISA2 = 1;
   560  01C7  1505               	bsf	5,2	;volatile
   561                           
   562                           ;MainHall.c: 105:     PORTA = 0;
   563  01C8  1283               	bcf	3,5	;RP0=0, select bank0
   564  01C9  1303               	bcf	3,6	;RP1=0, select bank0
   565  01CA  0185               	clrf	5	;volatile
   566                           
   567                           ;MainHall.c: 106:     door = 0;
   568  01CB  01F6               	clrf	_door
   569                           
   570                           ;MainHall.c: 107:     ADC_channel(0);
   571  01CC  3000               	movlw	0
   572  01CD  120A  118A  2017  120A  118A  	fcall	_ADC_channel
   573                           
   574                           ;MainHall.c: 108:     initADC(2);
   575  01D2  3002               	movlw	2
   576  01D3  120A  118A  21F9  120A  118A  	fcall	_initADC
   577                           
   578                           ;MainHall.c: 109:     I2C_Slave_Init(0x10);
   579  01D8  3010               	movlw	16
   580  01D9  00F3               	movwf	I2C_Slave_Init@address
   581  01DA  3000               	movlw	0
   582  01DB  00F4               	movwf	I2C_Slave_Init@address+1
   583  01DC  120A  118A  21E0   	fcall	_I2C_Slave_Init
   584  01DF  0008               	return
   585  01E0                     __end_of_setup:	
   586                           
   587                           	psect	text2
   588  00C3                     __ptext2:	
   589 ;; *************** function _initOscilador *****************
   590 ;; Defined at:
   591 ;;		line 11 in file "./Oscilador.h"
   592 ;; Parameters:    Size  Location     Type
   593 ;;  option          1    wreg     unsigned char 
   594 ;; Auto vars:     Size  Location     Type
   595 ;;  option          1    5[COMMON] unsigned char 
   596 ;; Return value:  Size  Location     Type
   597 ;;                  1    wreg      void 
   598 ;; Registers used:
   599 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   600 ;; Tracked objects:
   601 ;;		On entry : 0/0
   602 ;;		On exit  : 0/0
   603 ;;		Unchanged: 0/0
   604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   605 ;;      Params:         0       0       0       0       0
   606 ;;      Locals:         1       0       0       0       0
   607 ;;      Temps:          2       0       0       0       0
   608 ;;      Totals:         3       0       0       0       0
   609 ;;Total ram usage:        3 bytes
   610 ;; Hardware stack levels used:    1
   611 ;; Hardware stack levels required when called:    1
   612 ;; This function calls:
   613 ;;		Nothing
   614 ;; This function is called by:
   615 ;;		_setup
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           
   619                           
   620                           ;psect for function _initOscilador
   621  00C3                     _initOscilador:	
   622                           
   623                           ;incstack = 0
   624                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
   625                           ;initOscilador@option stored from wreg
   626  00C3  00F5               	movwf	initOscilador@option
   627                           
   628                           ;./Oscilador.h: 13: 
   629  00C4  28F4               	goto	l829
   630  00C5                     l809:	
   631                           
   632                           ;./Oscilador.h: 16:         case 3:
   633  00C5  308F               	movlw	-113
   634  00C6  1683               	bsf	3,5	;RP0=1, select bank1
   635  00C7  1303               	bcf	3,6	;RP1=0, select bank1
   636  00C8  058F               	andwf	15,f	;volatile
   637                           
   638                           ;./Oscilador.h: 17: 
   639  00C9  2916               	goto	l121
   640  00CA                     l811:	
   641                           
   642                           ;./Oscilador.h: 20:         case 4:
   643  00CA  1683               	bsf	3,5	;RP0=1, select bank1
   644  00CB  1303               	bcf	3,6	;RP1=0, select bank1
   645  00CC  080F               	movf	15,w	;volatile
   646  00CD  398F               	andlw	-113
   647  00CE  3810               	iorlw	16
   648  00CF  28ED               	goto	L5
   649  00D0                     l813:	
   650                           ;./Oscilador.h: 21: 
   651                           
   652                           
   653                           ;./Oscilador.h: 24:         case 5:
   654  00D0  1683               	bsf	3,5	;RP0=1, select bank1
   655  00D1  1303               	bcf	3,6	;RP1=0, select bank1
   656  00D2  080F               	movf	15,w	;volatile
   657  00D3  398F               	andlw	-113
   658  00D4  3820               	iorlw	32
   659  00D5  28ED               	goto	L5
   660  00D6                     l815:	
   661                           ;./Oscilador.h: 25: 
   662                           
   663                           
   664                           ;./Oscilador.h: 28:         case 6:
   665  00D6  1683               	bsf	3,5	;RP0=1, select bank1
   666  00D7  1303               	bcf	3,6	;RP1=0, select bank1
   667  00D8  080F               	movf	15,w	;volatile
   668  00D9  398F               	andlw	-113
   669  00DA  3830               	iorlw	48
   670  00DB  28ED               	goto	L5
   671  00DC                     l817:	
   672                           ;./Oscilador.h: 29: 
   673                           
   674                           
   675                           ;./Oscilador.h: 32:         case 7:
   676  00DC  1683               	bsf	3,5	;RP0=1, select bank1
   677  00DD  1303               	bcf	3,6	;RP1=0, select bank1
   678  00DE  080F               	movf	15,w	;volatile
   679  00DF  398F               	andlw	-113
   680  00E0  3840               	iorlw	64
   681  00E1  28ED               	goto	L5
   682  00E2                     l819:	
   683                           ;./Oscilador.h: 33: 
   684                           
   685                           
   686                           ;./Oscilador.h: 36:         default:
   687  00E2  1683               	bsf	3,5	;RP0=1, select bank1
   688  00E3  1303               	bcf	3,6	;RP1=0, select bank1
   689  00E4  080F               	movf	15,w	;volatile
   690  00E5  398F               	andlw	-113
   691  00E6  3850               	iorlw	80
   692  00E7  28ED               	goto	L5
   693  00E8                     l821:	
   694                           ;./Oscilador.h: 37: 
   695                           
   696                           
   697                           ;./Oscilador.h: 40:     }
   698  00E8  1683               	bsf	3,5	;RP0=1, select bank1
   699  00E9  1303               	bcf	3,6	;RP1=0, select bank1
   700  00EA  080F               	movf	15,w	;volatile
   701  00EB  398F               	andlw	-113
   702  00EC  3860               	iorlw	96
   703  00ED                     L5:	
   704  00ED  008F               	movwf	15	;volatile
   705                           
   706                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
   707  00EE  2916               	goto	l121
   708  00EF                     l823:	
   709  00EF                     l825:	
   710  00EF  3070               	movlw	112
   711  00F0  1683               	bsf	3,5	;RP0=1, select bank1
   712  00F1  1303               	bcf	3,6	;RP1=0, select bank1
   713  00F2  048F               	iorwf	15,f	;volatile
   714  00F3  2916               	goto	l121
   715  00F4                     l829:	
   716  00F4  0875               	movf	initOscilador@option,w
   717  00F5  00F3               	movwf	??_initOscilador
   718  00F6  01F4               	clrf	??_initOscilador+1
   719                           
   720                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   721                           ; Switch size 1, requested type "simple"
   722                           ; Number of cases is 1, Range of values is 0 to 0
   723                           ; switch strategies available:
   724                           ; Name         Instructions Cycles
   725                           ; simple_byte            4     3 (average)
   726                           ; direct_byte           11     8 (fixed)
   727                           ; jumptable            260     6 (fixed)
   728                           ;	Chosen strategy is simple_byte
   729  00F7  0874               	movf	??_initOscilador+1,w
   730  00F8  3A00               	xorlw	0	; case 0
   731  00F9  1903               	skipnz
   732  00FA  28FC               	goto	l1145
   733  00FB  28EF               	goto	l825
   734  00FC                     l1145:	
   735                           
   736                           ; Switch size 1, requested type "simple"
   737                           ; Number of cases is 8, Range of values is 0 to 7
   738                           ; switch strategies available:
   739                           ; Name         Instructions Cycles
   740                           ; simple_byte           25    13 (average)
   741                           ; direct_byte           32     8 (fixed)
   742                           ; jumptable            260     6 (fixed)
   743                           ;	Chosen strategy is simple_byte
   744  00FC  0873               	movf	??_initOscilador,w
   745  00FD  3A00               	xorlw	0	; case 0
   746  00FE  1903               	skipnz
   747  00FF  28C5               	goto	l809
   748  0100  3A01               	xorlw	1	; case 1
   749  0101  1903               	skipnz
   750  0102  28CA               	goto	l811
   751  0103  3A03               	xorlw	3	; case 2
   752  0104  1903               	skipnz
   753  0105  28D0               	goto	l813
   754  0106  3A01               	xorlw	1	; case 3
   755  0107  1903               	skipnz
   756  0108  28D6               	goto	l815
   757  0109  3A07               	xorlw	7	; case 4
   758  010A  1903               	skipnz
   759  010B  28DC               	goto	l817
   760  010C  3A01               	xorlw	1	; case 5
   761  010D  1903               	skipnz
   762  010E  28E2               	goto	l819
   763  010F  3A03               	xorlw	3	; case 6
   764  0110  1903               	skipnz
   765  0111  28E8               	goto	l821
   766  0112  3A01               	xorlw	1	; case 7
   767  0113  1903               	skipnz
   768  0114  28EF               	goto	l823
   769  0115  28EF               	goto	l825
   770  0116                     l121:	
   771  0116  140F               	bsf	15,0	;volatile
   772  0117  0008               	return
   773  0118                     __end_of_initOscilador:	
   774                           
   775                           	psect	text3
   776  01F9                     __ptext3:	
   777 ;; *************** function _initADC *****************
   778 ;; Defined at:
   779 ;;		line 75 in file "./ADC.h"
   780 ;; Parameters:    Size  Location     Type
   781 ;;  a               1    wreg     unsigned char 
   782 ;; Auto vars:     Size  Location     Type
   783 ;;  a               1    4[COMMON] unsigned char 
   784 ;; Return value:  Size  Location     Type
   785 ;;                  1    wreg      void 
   786 ;; Registers used:
   787 ;;		wreg, status,2, status,0
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   793 ;;      Params:         0       0       0       0       0
   794 ;;      Locals:         1       0       0       0       0
   795 ;;      Temps:          1       0       0       0       0
   796 ;;      Totals:         2       0       0       0       0
   797 ;;Total ram usage:        2 bytes
   798 ;; Hardware stack levels used:    1
   799 ;; Hardware stack levels required when called:    1
   800 ;; This function calls:
   801 ;;		Nothing
   802 ;; This function is called by:
   803 ;;		_setup
   804 ;; This function uses a non-reentrant model
   805 ;;
   806                           
   807                           
   808                           ;psect for function _initADC
   809  01F9                     _initADC:	
   810                           
   811                           ;incstack = 0
   812                           ; Regs used in _initADC: [wreg+status,2+status,0]
   813                           ;initADC@a stored from wreg
   814  01F9  00F4               	movwf	initADC@a
   815                           
   816                           ;./ADC.h: 76:     ADCON1bits.ADFM = 0;
   817  01FA  1683               	bsf	3,5	;RP0=1, select bank1
   818  01FB  1303               	bcf	3,6	;RP1=0, select bank1
   819  01FC  139F               	bcf	31,7	;volatile
   820                           
   821                           ;./ADC.h: 77:     ADCON1bits.VCFG0 = 0;
   822  01FD  121F               	bcf	31,4	;volatile
   823                           
   824                           ;./ADC.h: 78:     ADCON1bits.VCFG1 = 0;
   825  01FE  129F               	bcf	31,5	;volatile
   826                           
   827                           ;./ADC.h: 79:     ADCON0bits.ADCS = a;
   828  01FF  0874               	movf	initADC@a,w
   829  0200  00F3               	movwf	??_initADC
   830  0201  0EF3               	swapf	??_initADC,f
   831  0202  0DF3               	rlf	??_initADC,f
   832  0203  0DF3               	rlf	??_initADC,f
   833  0204  1283               	bcf	3,5	;RP0=0, select bank0
   834  0205  1303               	bcf	3,6	;RP1=0, select bank0
   835  0206  081F               	movf	31,w	;volatile
   836  0207  0673               	xorwf	??_initADC,w
   837  0208  393F               	andlw	-193
   838  0209  0673               	xorwf	??_initADC,w
   839  020A  009F               	movwf	31	;volatile
   840                           
   841                           ;./ADC.h: 80:     ADCON0bits.ADON = 1;
   842  020B  141F               	bsf	31,0	;volatile
   843  020C  0008               	return
   844  020D                     __end_of_initADC:	
   845                           
   846                           	psect	text4
   847  01E0                     __ptext4:	
   848 ;; *************** function _I2C_Slave_Init *****************
   849 ;; Defined at:
   850 ;;		line 94 in file "./I2C.h"
   851 ;; Parameters:    Size  Location     Type
   852 ;;  address         2    3[COMMON] short 
   853 ;; Auto vars:     Size  Location     Type
   854 ;;		None
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      void 
   857 ;; Registers used:
   858 ;;		wreg
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   864 ;;      Params:         2       0       0       0       0
   865 ;;      Locals:         0       0       0       0       0
   866 ;;      Temps:          0       0       0       0       0
   867 ;;      Totals:         2       0       0       0       0
   868 ;;Total ram usage:        2 bytes
   869 ;; Hardware stack levels used:    1
   870 ;; Hardware stack levels required when called:    1
   871 ;; This function calls:
   872 ;;		Nothing
   873 ;; This function is called by:
   874 ;;		_setup
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           
   879                           ;psect for function _I2C_Slave_Init
   880  01E0                     _I2C_Slave_Init:	
   881                           
   882                           ;./I2C.h: 94: void I2C_Slave_Init(short address);./I2C.h: 95: {;./I2C.h: 96:     SSPADD 
      +                          = address;
   883                           
   884                           ;incstack = 0
   885                           ; Regs used in _I2C_Slave_Init: [wreg]
   886  01E0  0873               	movf	I2C_Slave_Init@address,w
   887  01E1  1683               	bsf	3,5	;RP0=1, select bank1
   888  01E2  1303               	bcf	3,6	;RP1=0, select bank1
   889  01E3  0093               	movwf	19	;volatile
   890                           
   891                           ;./I2C.h: 97:     SSPCON = 0x36;
   892  01E4  3036               	movlw	54
   893  01E5  1283               	bcf	3,5	;RP0=0, select bank0
   894  01E6  1303               	bcf	3,6	;RP1=0, select bank0
   895  01E7  0094               	movwf	20	;volatile
   896                           
   897                           ;./I2C.h: 98:     SSPSTAT = 0x80;
   898  01E8  3080               	movlw	128
   899  01E9  1683               	bsf	3,5	;RP0=1, select bank1
   900  01EA  1303               	bcf	3,6	;RP1=0, select bank1
   901  01EB  0094               	movwf	20	;volatile
   902                           
   903                           ;./I2C.h: 99:     SSPCON2 = 0x01;
   904  01EC  3001               	movlw	1
   905  01ED  0091               	movwf	17	;volatile
   906                           
   907                           ;./I2C.h: 100:     TRISC3 = 1;
   908  01EE  1587               	bsf	7,3	;volatile
   909                           
   910                           ;./I2C.h: 101:     TRISC4 = 1;
   911  01EF  1607               	bsf	7,4	;volatile
   912                           
   913                           ;./I2C.h: 102:     GIE = 1;
   914  01F0  178B               	bsf	11,7	;volatile
   915                           
   916                           ;./I2C.h: 103:     PEIE = 1;
   917  01F1  170B               	bsf	11,6	;volatile
   918                           
   919                           ;./I2C.h: 104:     SSPIF = 0;
   920  01F2  1283               	bcf	3,5	;RP0=0, select bank0
   921  01F3  1303               	bcf	3,6	;RP1=0, select bank0
   922  01F4  118C               	bcf	12,3	;volatile
   923                           
   924                           ;./I2C.h: 105:     SSPIE = 1;
   925  01F5  1683               	bsf	3,5	;RP0=1, select bank1
   926  01F6  1303               	bcf	3,6	;RP1=0, select bank1
   927  01F7  158C               	bsf	12,3	;volatile
   928  01F8  0008               	return
   929  01F9                     __end_of_I2C_Slave_Init:	
   930                           
   931                           	psect	text5
   932  0017                     __ptext5:	
   933 ;; *************** function _ADC_channel *****************
   934 ;; Defined at:
   935 ;;		line 8 in file "./ADC.h"
   936 ;; Parameters:    Size  Location     Type
   937 ;;  a               1    wreg     unsigned char 
   938 ;; Auto vars:     Size  Location     Type
   939 ;;  a               1    5[COMMON] unsigned char 
   940 ;; Return value:  Size  Location     Type
   941 ;;                  1    wreg      void 
   942 ;; Registers used:
   943 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   944 ;; Tracked objects:
   945 ;;		On entry : 0/0
   946 ;;		On exit  : 0/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   949 ;;      Params:         0       0       0       0       0
   950 ;;      Locals:         1       0       0       0       0
   951 ;;      Temps:          2       0       0       0       0
   952 ;;      Totals:         3       0       0       0       0
   953 ;;Total ram usage:        3 bytes
   954 ;; Hardware stack levels used:    1
   955 ;; Hardware stack levels required when called:    1
   956 ;; This function calls:
   957 ;;		Nothing
   958 ;; This function is called by:
   959 ;;		_setup
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           
   964                           ;psect for function _ADC_channel
   965  0017                     _ADC_channel:	
   966                           
   967                           ;incstack = 0
   968                           ; Regs used in _ADC_channel: [wreg-fsr0h+status,2+status,0]
   969                           ;ADC_channel@a stored from wreg
   970  0017  00F5               	movwf	ADC_channel@a
   971                           
   972                           ;./ADC.h: 10:     ADCON0bits.ADCS = a;
   973  0018  0875               	movf	ADC_channel@a,w
   974  0019  00F3               	movwf	??_ADC_channel
   975  001A  0EF3               	swapf	??_ADC_channel,f
   976  001B  0DF3               	rlf	??_ADC_channel,f
   977  001C  0DF3               	rlf	??_ADC_channel,f
   978  001D  1283               	bcf	3,5	;RP0=0, select bank0
   979  001E  1303               	bcf	3,6	;RP1=0, select bank0
   980  001F  081F               	movf	31,w	;volatile
   981  0020  0673               	xorwf	??_ADC_channel,w
   982  0021  393F               	andlw	-193
   983  0022  0673               	xorwf	??_ADC_channel,w
   984  0023  009F               	movwf	31	;volatile
   985                           
   986                           ;./ADC.h: 11:     switch (a){
   987  0024  288E               	goto	l781
   988  0025                     l68:	
   989                           ;./ADC.h: 12:         case 0:
   990                           
   991                           
   992                           ;./ADC.h: 13:             ANSELbits.ANS0 = 1;
   993  0025  1683               	bsf	3,5	;RP0=1, select bank3
   994  0026  1703               	bsf	3,6	;RP1=1, select bank3
   995  0027  1408               	bsf	8,0	;volatile
   996                           
   997                           ;./ADC.h: 14:             TRISAbits.TRISA0 = 1;
   998  0028  1683               	bsf	3,5	;RP0=1, select bank1
   999  0029  1303               	bcf	3,6	;RP1=0, select bank1
  1000  002A  1405               	bsf	5,0	;volatile
  1001                           
  1002                           ;./ADC.h: 15:             break;
  1003  002B  0008               	return
  1004  002C                     l70:	
  1005                           ;./ADC.h: 16:         case 1:
  1006                           
  1007                           
  1008                           ;./ADC.h: 17:             ANSELbits.ANS1 = 1;
  1009  002C  1683               	bsf	3,5	;RP0=1, select bank3
  1010  002D  1703               	bsf	3,6	;RP1=1, select bank3
  1011  002E  1488               	bsf	8,1	;volatile
  1012                           
  1013                           ;./ADC.h: 18:             TRISAbits.TRISA1 = 1;
  1014  002F  1683               	bsf	3,5	;RP0=1, select bank1
  1015  0030  1303               	bcf	3,6	;RP1=0, select bank1
  1016  0031  1485               	bsf	5,1	;volatile
  1017                           
  1018                           ;./ADC.h: 19:             break;
  1019  0032  0008               	return
  1020  0033                     l71:	
  1021                           ;./ADC.h: 20:         case 2:
  1022                           
  1023                           
  1024                           ;./ADC.h: 21:             ANSELbits.ANS2 = 1;
  1025  0033  1683               	bsf	3,5	;RP0=1, select bank3
  1026  0034  1703               	bsf	3,6	;RP1=1, select bank3
  1027  0035  1508               	bsf	8,2	;volatile
  1028                           
  1029                           ;./ADC.h: 22:             TRISAbits.TRISA2 = 1;
  1030  0036  1683               	bsf	3,5	;RP0=1, select bank1
  1031  0037  1303               	bcf	3,6	;RP1=0, select bank1
  1032  0038  1505               	bsf	5,2	;volatile
  1033                           
  1034                           ;./ADC.h: 23:             break;
  1035  0039  0008               	return
  1036  003A                     l72:	
  1037                           ;./ADC.h: 24:         case 3:
  1038                           
  1039                           
  1040                           ;./ADC.h: 25:             ANSELbits.ANS3 = 1;
  1041  003A  1683               	bsf	3,5	;RP0=1, select bank3
  1042  003B  1703               	bsf	3,6	;RP1=1, select bank3
  1043  003C  1588               	bsf	8,3	;volatile
  1044                           
  1045                           ;./ADC.h: 26:             TRISAbits.TRISA3 = 1;
  1046  003D  1683               	bsf	3,5	;RP0=1, select bank1
  1047  003E  1303               	bcf	3,6	;RP1=0, select bank1
  1048  003F  1585               	bsf	5,3	;volatile
  1049                           
  1050                           ;./ADC.h: 27:             break;
  1051  0040  0008               	return
  1052  0041                     l73:	
  1053                           ;./ADC.h: 28:         case 4:
  1054                           
  1055                           
  1056                           ;./ADC.h: 29:             ANSELbits.ANS4 = 1;
  1057  0041  1683               	bsf	3,5	;RP0=1, select bank3
  1058  0042  1703               	bsf	3,6	;RP1=1, select bank3
  1059  0043  1608               	bsf	8,4	;volatile
  1060                           
  1061                           ;./ADC.h: 30:             TRISAbits.TRISA5 = 1;
  1062  0044  1683               	bsf	3,5	;RP0=1, select bank1
  1063  0045  1303               	bcf	3,6	;RP1=0, select bank1
  1064  0046  1685               	bsf	5,5	;volatile
  1065                           
  1066                           ;./ADC.h: 31:             break;
  1067  0047  0008               	return
  1068  0048                     l74:	
  1069                           ;./ADC.h: 32:         case 5:
  1070                           
  1071                           
  1072                           ;./ADC.h: 33:             ANSELbits.ANS5 = 1;
  1073  0048  1683               	bsf	3,5	;RP0=1, select bank3
  1074  0049  1703               	bsf	3,6	;RP1=1, select bank3
  1075  004A  1688               	bsf	8,5	;volatile
  1076                           
  1077                           ;./ADC.h: 34:             TRISEbits.TRISE0 = 1;
  1078  004B  1683               	bsf	3,5	;RP0=1, select bank1
  1079  004C  1303               	bcf	3,6	;RP1=0, select bank1
  1080  004D  1409               	bsf	9,0	;volatile
  1081                           
  1082                           ;./ADC.h: 35:             break;
  1083  004E  0008               	return
  1084  004F                     l75:	
  1085                           ;./ADC.h: 36:         case 6:
  1086                           
  1087                           
  1088                           ;./ADC.h: 37:             ANSELbits.ANS6 = 1;
  1089  004F  1683               	bsf	3,5	;RP0=1, select bank3
  1090  0050  1703               	bsf	3,6	;RP1=1, select bank3
  1091  0051  1708               	bsf	8,6	;volatile
  1092                           
  1093                           ;./ADC.h: 38:             TRISEbits.TRISE1 = 1;
  1094  0052  1683               	bsf	3,5	;RP0=1, select bank1
  1095  0053  1303               	bcf	3,6	;RP1=0, select bank1
  1096  0054  1489               	bsf	9,1	;volatile
  1097                           
  1098                           ;./ADC.h: 39:             break;
  1099  0055  0008               	return
  1100  0056                     l76:	
  1101                           ;./ADC.h: 40:         case 7:
  1102                           
  1103                           
  1104                           ;./ADC.h: 41:             ANSELbits.ANS7 = 1;
  1105  0056  1683               	bsf	3,5	;RP0=1, select bank3
  1106  0057  1703               	bsf	3,6	;RP1=1, select bank3
  1107  0058  1788               	bsf	8,7	;volatile
  1108                           
  1109                           ;./ADC.h: 42:             TRISEbits.TRISE2 = 1;
  1110  0059  1683               	bsf	3,5	;RP0=1, select bank1
  1111  005A  1303               	bcf	3,6	;RP1=0, select bank1
  1112  005B  1509               	bsf	9,2	;volatile
  1113                           
  1114                           ;./ADC.h: 43:             break;
  1115  005C  0008               	return
  1116  005D                     l77:	
  1117                           ;./ADC.h: 44:         case 8:
  1118                           
  1119                           
  1120                           ;./ADC.h: 45:             ANSELHbits.ANS8 = 1;
  1121  005D  1683               	bsf	3,5	;RP0=1, select bank3
  1122  005E  1703               	bsf	3,6	;RP1=1, select bank3
  1123  005F  1409               	bsf	9,0	;volatile
  1124                           
  1125                           ;./ADC.h: 46:             TRISBbits.TRISB2 = 1;
  1126  0060  1683               	bsf	3,5	;RP0=1, select bank1
  1127  0061  1303               	bcf	3,6	;RP1=0, select bank1
  1128  0062  1506               	bsf	6,2	;volatile
  1129                           
  1130                           ;./ADC.h: 47:             break;
  1131  0063  0008               	return
  1132  0064                     l78:	
  1133                           ;./ADC.h: 48:         case 9:
  1134                           
  1135                           
  1136                           ;./ADC.h: 49:             ANSELHbits.ANS9 = 1;
  1137  0064  1683               	bsf	3,5	;RP0=1, select bank3
  1138  0065  1703               	bsf	3,6	;RP1=1, select bank3
  1139  0066  1489               	bsf	9,1	;volatile
  1140                           
  1141                           ;./ADC.h: 50:             TRISBbits.TRISB3 = 1;
  1142  0067  1683               	bsf	3,5	;RP0=1, select bank1
  1143  0068  1303               	bcf	3,6	;RP1=0, select bank1
  1144  0069  1586               	bsf	6,3	;volatile
  1145                           
  1146                           ;./ADC.h: 51:             break;
  1147  006A  0008               	return
  1148  006B                     l79:	
  1149                           ;./ADC.h: 52:         case 10:
  1150                           
  1151                           
  1152                           ;./ADC.h: 53:             ANSELHbits.ANS10 = 1;
  1153  006B  1683               	bsf	3,5	;RP0=1, select bank3
  1154  006C  1703               	bsf	3,6	;RP1=1, select bank3
  1155  006D  1509               	bsf	9,2	;volatile
  1156                           
  1157                           ;./ADC.h: 54:             TRISBbits.TRISB1 = 1;
  1158  006E  1683               	bsf	3,5	;RP0=1, select bank1
  1159  006F  1303               	bcf	3,6	;RP1=0, select bank1
  1160  0070  1486               	bsf	6,1	;volatile
  1161                           
  1162                           ;./ADC.h: 55:             break;
  1163  0071  0008               	return
  1164  0072                     l80:	
  1165                           ;./ADC.h: 56:         case 11:
  1166                           
  1167                           
  1168                           ;./ADC.h: 57:             ANSELHbits.ANS11 = 1;
  1169  0072  1683               	bsf	3,5	;RP0=1, select bank3
  1170  0073  1703               	bsf	3,6	;RP1=1, select bank3
  1171  0074  1589               	bsf	9,3	;volatile
  1172                           
  1173                           ;./ADC.h: 58:             TRISBbits.TRISB4 = 1;
  1174  0075  1683               	bsf	3,5	;RP0=1, select bank1
  1175  0076  1303               	bcf	3,6	;RP1=0, select bank1
  1176  0077  1606               	bsf	6,4	;volatile
  1177                           
  1178                           ;./ADC.h: 59:             break;
  1179  0078  0008               	return
  1180  0079                     l81:	
  1181                           ;./ADC.h: 60:         case 12:
  1182                           
  1183                           
  1184                           ;./ADC.h: 61:             ANSELHbits.ANS12 = 1;
  1185  0079  1683               	bsf	3,5	;RP0=1, select bank3
  1186  007A  1703               	bsf	3,6	;RP1=1, select bank3
  1187  007B  1609               	bsf	9,4	;volatile
  1188                           
  1189                           ;./ADC.h: 62:             TRISBbits.TRISB0 = 1;
  1190  007C  1683               	bsf	3,5	;RP0=1, select bank1
  1191  007D  1303               	bcf	3,6	;RP1=0, select bank1
  1192  007E  1406               	bsf	6,0	;volatile
  1193                           
  1194                           ;./ADC.h: 63:             break;
  1195  007F  0008               	return
  1196  0080                     l82:	
  1197                           ;./ADC.h: 64:         case 13:
  1198                           
  1199                           
  1200                           ;./ADC.h: 65:             ANSELHbits.ANS13 = 1;
  1201  0080  1683               	bsf	3,5	;RP0=1, select bank3
  1202  0081  1703               	bsf	3,6	;RP1=1, select bank3
  1203  0082  1689               	bsf	9,5	;volatile
  1204                           
  1205                           ;./ADC.h: 66:             TRISBbits.TRISB5 = 1;
  1206  0083  1683               	bsf	3,5	;RP0=1, select bank1
  1207  0084  1303               	bcf	3,6	;RP1=0, select bank1
  1208  0085  1686               	bsf	6,5	;volatile
  1209                           
  1210                           ;./ADC.h: 67:             break;
  1211  0086  0008               	return
  1212  0087                     l83:	
  1213                           ;./ADC.h: 68:         default:
  1214                           
  1215                           
  1216                           ;./ADC.h: 69:             ANSELbits.ANS0 = 1;
  1217  0087  1683               	bsf	3,5	;RP0=1, select bank3
  1218  0088  1703               	bsf	3,6	;RP1=1, select bank3
  1219  0089  1408               	bsf	8,0	;volatile
  1220                           
  1221                           ;./ADC.h: 70:             TRISAbits.TRISA0 = 1;
  1222  008A  1683               	bsf	3,5	;RP0=1, select bank1
  1223  008B  1303               	bcf	3,6	;RP1=0, select bank1
  1224  008C  1405               	bsf	5,0	;volatile
  1225                           
  1226                           ;./ADC.h: 71:             break;
  1227  008D  0008               	return
  1228  008E                     l781:	
  1229  008E  0875               	movf	ADC_channel@a,w
  1230  008F  00F3               	movwf	??_ADC_channel
  1231  0090  01F4               	clrf	??_ADC_channel+1
  1232                           
  1233                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1234                           ; Switch size 1, requested type "simple"
  1235                           ; Number of cases is 1, Range of values is 0 to 0
  1236                           ; switch strategies available:
  1237                           ; Name         Instructions Cycles
  1238                           ; simple_byte            4     3 (average)
  1239                           ; direct_byte           11     8 (fixed)
  1240                           ; jumptable            260     6 (fixed)
  1241                           ;	Chosen strategy is simple_byte
  1242  0091  0874               	movf	??_ADC_channel+1,w
  1243  0092  3A00               	xorlw	0	; case 0
  1244  0093  1903               	skipnz
  1245  0094  2896               	goto	l1147
  1246  0095  2887               	goto	l83
  1247  0096                     l1147:	
  1248                           
  1249                           ; Switch size 1, requested type "simple"
  1250                           ; Number of cases is 14, Range of values is 0 to 13
  1251                           ; switch strategies available:
  1252                           ; Name         Instructions Cycles
  1253                           ; simple_byte           43    22 (average)
  1254                           ; direct_byte           50     8 (fixed)
  1255                           ; jumptable            260     6 (fixed)
  1256                           ;	Chosen strategy is simple_byte
  1257  0096  0873               	movf	??_ADC_channel,w
  1258  0097  3A00               	xorlw	0	; case 0
  1259  0098  1903               	skipnz
  1260  0099  2825               	goto	l68
  1261  009A  3A01               	xorlw	1	; case 1
  1262  009B  1903               	skipnz
  1263  009C  282C               	goto	l70
  1264  009D  3A03               	xorlw	3	; case 2
  1265  009E  1903               	skipnz
  1266  009F  2833               	goto	l71
  1267  00A0  3A01               	xorlw	1	; case 3
  1268  00A1  1903               	skipnz
  1269  00A2  283A               	goto	l72
  1270  00A3  3A07               	xorlw	7	; case 4
  1271  00A4  1903               	skipnz
  1272  00A5  2841               	goto	l73
  1273  00A6  3A01               	xorlw	1	; case 5
  1274  00A7  1903               	skipnz
  1275  00A8  2848               	goto	l74
  1276  00A9  3A03               	xorlw	3	; case 6
  1277  00AA  1903               	skipnz
  1278  00AB  284F               	goto	l75
  1279  00AC  3A01               	xorlw	1	; case 7
  1280  00AD  1903               	skipnz
  1281  00AE  2856               	goto	l76
  1282  00AF  3A0F               	xorlw	15	; case 8
  1283  00B0  1903               	skipnz
  1284  00B1  285D               	goto	l77
  1285  00B2  3A01               	xorlw	1	; case 9
  1286  00B3  1903               	skipnz
  1287  00B4  2864               	goto	l78
  1288  00B5  3A03               	xorlw	3	; case 10
  1289  00B6  1903               	skipnz
  1290  00B7  286B               	goto	l79
  1291  00B8  3A01               	xorlw	1	; case 11
  1292  00B9  1903               	skipnz
  1293  00BA  2872               	goto	l80
  1294  00BB  3A07               	xorlw	7	; case 12
  1295  00BC  1903               	skipnz
  1296  00BD  2879               	goto	l81
  1297  00BE  3A01               	xorlw	1	; case 13
  1298  00BF  1903               	skipnz
  1299  00C0  2880               	goto	l82
  1300  00C1  2887               	goto	l83
  1301  00C2  0008               	return
  1302  00C3                     __end_of_ADC_channel:	
  1303                           
  1304                           	psect	text6
  1305  016A                     __ptext6:	
  1306 ;; *************** function _isr *****************
  1307 ;; Defined at:
  1308 ;;		line 36 in file "MainHall.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;		None
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1322 ;;      Params:         0       0       0       0       0
  1323 ;;      Locals:         0       0       0       0       0
  1324 ;;      Temps:          3       0       0       0       0
  1325 ;;      Totals:         3       0       0       0       0
  1326 ;;Total ram usage:        3 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; This function calls:
  1329 ;;		Nothing
  1330 ;; This function is called by:
  1331 ;;		Interrupt level 1
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           
  1336                           ;psect for function _isr
  1337  016A                     _isr:	
  1338                           
  1339                           ;MainHall.c: 37:     if(PIR1bits.SSPIF == 1){
  1340  016A  1283               	bcf	3,5	;RP0=0, select bank0
  1341  016B  1303               	bcf	3,6	;RP1=0, select bank0
  1342  016C  1D8C               	btfss	12,3	;volatile
  1343  016D  29B4               	goto	i1l156
  1344                           
  1345                           ;MainHall.c: 39:         SSPCONbits.CKP = 0;
  1346  016E  1214               	bcf	20,4	;volatile
  1347                           
  1348                           ;MainHall.c: 41:         if ((SSPCONbits.SSPOV) || (SSPCONbits.WCOL)){
  1349  016F  1B14               	btfsc	20,6	;volatile
  1350  0170  2973               	goto	i1l901
  1351  0171  1F94               	btfss	20,7	;volatile
  1352  0172  297A               	goto	i1l909
  1353  0173                     i1l901:	
  1354                           
  1355                           ;MainHall.c: 42:             z = SSPBUF;
  1356  0173  0813               	movf	19,w	;volatile
  1357  0174  00F0               	movwf	??_isr
  1358  0175  0870               	movf	??_isr,w
  1359  0176  00F9               	movwf	_z
  1360                           
  1361                           ;MainHall.c: 43:             SSPCONbits.SSPOV = 0;
  1362  0177  1314               	bcf	20,6	;volatile
  1363                           
  1364                           ;MainHall.c: 44:             SSPCONbits.WCOL = 0;
  1365  0178  1394               	bcf	20,7	;volatile
  1366                           
  1367                           ;MainHall.c: 45:             SSPCONbits.CKP = 1;
  1368  0179  1614               	bsf	20,4	;volatile
  1369  017A                     i1l909:	
  1370                           
  1371                           ;MainHall.c: 48:         if(!SSPSTATbits.D_nA && !SSPSTATbits.R_nW) {
  1372  017A  1683               	bsf	3,5	;RP0=1, select bank1
  1373  017B  1303               	bcf	3,6	;RP1=0, select bank1
  1374  017C  1E94               	btfss	20,5	;volatile
  1375  017D  1914               	btfsc	20,2	;volatile
  1376  017E  2997               	goto	i1l147
  1377                           
  1378                           ;MainHall.c: 50:             z = SSPBUF;
  1379  017F  1283               	bcf	3,5	;RP0=0, select bank0
  1380  0180  1303               	bcf	3,6	;RP1=0, select bank0
  1381  0181  0813               	movf	19,w	;volatile
  1382  0182  00F0               	movwf	??_isr
  1383  0183  0870               	movf	??_isr,w
  1384  0184  00F9               	movwf	_z
  1385                           
  1386                           ;MainHall.c: 52:             PIR1bits.SSPIF = 0;
  1387  0185  118C               	bcf	12,3	;volatile
  1388                           
  1389                           ;MainHall.c: 53:             SSPCONbits.CKP = 1;
  1390  0186  1614               	bsf	20,4	;volatile
  1391  0187                     i1l148:	
  1392                           ;MainHall.c: 54:             while(!SSPSTATbits.BF);
  1393                           
  1394  0187  1683               	bsf	3,5	;RP0=1, select bank1
  1395  0188  1303               	bcf	3,6	;RP1=0, select bank1
  1396  0189  1C14               	btfss	20,0	;volatile
  1397  018A  2987               	goto	i1l148
  1398                           
  1399                           ;MainHall.c: 55:             z = SSPBUF;
  1400  018B  1283               	bcf	3,5	;RP0=0, select bank0
  1401  018C  1303               	bcf	3,6	;RP1=0, select bank0
  1402  018D  0813               	movf	19,w	;volatile
  1403  018E  00F0               	movwf	??_isr
  1404  018F  0870               	movf	??_isr,w
  1405  0190  00F9               	movwf	_z
  1406                           
  1407                           ;MainHall.c: 56:             _delay((unsigned long)((250)*(8000000/4000000.0)));
  1408  0191  30A6               	movlw	166
  1409  0192  00F0               	movwf	??_isr
  1410  0193                     u48_27:	
  1411  0193  0BF0               	decfsz	??_isr,f
  1412  0194  2993               	goto	u48_27
  1413  0195  0000               	nop
  1414                           
  1415                           ;MainHall.c: 58:         }else if(!SSPSTATbits.D_nA && SSPSTATbits.R_nW){
  1416  0196  29B1               	goto	i1l151
  1417  0197                     i1l147:	
  1418  0197  1E94               	btfss	20,5	;volatile
  1419  0198  1D14               	btfss	20,2	;volatile
  1420  0199  29B1               	goto	i1l151
  1421                           
  1422                           ;MainHall.c: 59:             z = SSPBUF;
  1423  019A  1283               	bcf	3,5	;RP0=0, select bank0
  1424  019B  1303               	bcf	3,6	;RP1=0, select bank0
  1425  019C  0813               	movf	19,w	;volatile
  1426  019D  00F0               	movwf	??_isr
  1427  019E  0870               	movf	??_isr,w
  1428  019F  00F9               	movwf	_z
  1429                           
  1430                           ;MainHall.c: 60:             BF = 0;
  1431  01A0  1683               	bsf	3,5	;RP0=1, select bank1
  1432  01A1  1303               	bcf	3,6	;RP1=0, select bank1
  1433  01A2  1014               	bcf	20,0	;volatile
  1434                           
  1435                           ;MainHall.c: 61:             SSPBUF = door;
  1436  01A3  0876               	movf	_door,w
  1437  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  1438  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  1439  01A6  0093               	movwf	19	;volatile
  1440                           
  1441                           ;MainHall.c: 62:             SSPCONbits.CKP = 1;
  1442  01A7  1614               	bsf	20,4	;volatile
  1443                           
  1444                           ;MainHall.c: 63:             _delay((unsigned long)((250)*(8000000/4000000.0)));
  1445  01A8  30A6               	movlw	166
  1446  01A9  00F0               	movwf	??_isr
  1447  01AA                     u49_27:	
  1448  01AA  0BF0               	decfsz	??_isr,f
  1449  01AB  29AA               	goto	u49_27
  1450  01AC  0000               	nop
  1451  01AD                     i1l153:	
  1452                           ;MainHall.c: 64:             while(SSPSTATbits.BF);
  1453                           
  1454  01AD  1683               	bsf	3,5	;RP0=1, select bank1
  1455  01AE  1303               	bcf	3,6	;RP1=0, select bank1
  1456  01AF  1814               	btfsc	20,0	;volatile
  1457  01B0  29AD               	goto	i1l153
  1458  01B1                     i1l151:	
  1459                           
  1460                           ;MainHall.c: 67:         PIR1bits.SSPIF = 0;
  1461  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  1462  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  1463  01B3  118C               	bcf	12,3	;volatile
  1464  01B4                     i1l156:	
  1465  01B4  0872               	movf	??_isr+2,w
  1466  01B5  008A               	movwf	10
  1467  01B6  0E71               	swapf	(??_isr+1)^(0+4294967168),w
  1468  01B7  0083               	movwf	3
  1469  01B8  0EFE               	swapf	126,f
  1470  01B9  0E7E               	swapf	126,w
  1471  01BA  0009               	retfie
  1472  01BB                     __end_of_isr:	
  1473  007E                     btemp	set	126	;btemp
  1474  007E                     wtemp0	set	126
  1475                           
  1476                           	psect	intentry
  1477  0004                     __pintentry:	
  1478                           ;incstack = 0
  1479                           ; Regs used in _isr: [wreg]
  1480                           
  1481  0004                     interrupt_function:	
  1482  007E                     saved_w	set	btemp
  1483  0004  00FE               	movwf	btemp
  1484  0005  0E03               	swapf	3,w
  1485  0006  00F1               	movwf	??_isr+1
  1486  0007  080A               	movf	10,w
  1487  0008  00F2               	movwf	??_isr+2
  1488  0009  120A  118A  296A   	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80      3       3
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _setup->_ADC_channel
    _setup->_initOscilador

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     158
                                              0 BANK0      3     3      0
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     158
                        _ADC_channel
                     _I2C_Slave_Init
                            _initADC
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      15
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _initADC                                              2     2      0      15
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Slave_Init                                       2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_channel                                          3     3      0      30
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _ADC_channel
     _I2C_Slave_Init
     _initADC
     _initOscilador

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3       3       5        3.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       D      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 11 08:18:47 2019

                       _z 0079               __CFG_CP$OFF 0000               _SSPSTATbits 0094  
                      _BF 04A0                        l70 002C                        l71 0033  
                      l80 0072                        l72 003A                        l81 0079  
                      l73 0041                        l82 0080                        l74 0048  
                      l83 0087                        l75 004F                        l76 0056  
                      l68 0025                        l77 005D                        l78 0064  
                      l79 006B                       l121 0116                       l162 0120  
                     l171 015C                       l167 0141                       _ADC 0077  
                     l177 0167                       l811 00CA                       l821 00E8  
                     l813 00D0                       l823 00EF                       l815 00D6  
                     l825 00EF                       l817 00DC                       l809 00C5  
                     l819 00E2                       l781 008E                       l829 00F4  
                     _GIE 005F                       u400 014E                       u410 0155  
                     u402 014F                       u412 0156              __CFG_CPD$OFF 0000  
                     u477 0132                       _key 0078                       _isr 016A  
            __CFG_LVP$OFF 0000                      l1145 00FC                      l1147 0096  
                    l1091 0144                      l1093 0145                      l1085 011D  
                    l1087 0126                      l1099 015F                      ?_isr 0070  
                    _PEIE 005E                      _RCEN 048B              __CFG_WRT$OFF 0000  
                    _door 0076                      _main 0118                      btemp 007E  
                    start 000C             __CFG_IESO$OFF 0000      __size_of_ADC_channel 00AC  
           __CFG_MCLRE$ON 0000                     ??_isr 0070                     ?_main 0070  
           __CFG_WDTE$OFF 0000                     _ANSEL 0188                     i1l151 01B1  
                   i1l153 01AD                     i1l147 0197                     i1l148 0187  
                   i1l156 01B4                     i1l901 0173                     i1l909 017A  
                   _PORTA 0005                     u48_27 0193                     _TRISA 0085  
                   u49_27 01AA                     _SSPIE 0463                     _SSPIF 0063  
          __CFG_FCMEN$OFF 0000           __end_of_initADC 020D                     _setup 01BB  
          __CFG_BOREN$OFF 0000                     pclath 000A                     status 0003  
                   wtemp0 007E           __initialization 000F              __end_of_main 016A  
  __size_of_initOscilador 0055                    ??_main 0020                    _ADRESH 001E  
                  ?_setup 0070                    _SSPADD 0093                    _TRISC3 043B  
                  _TRISC4 043C                    _SSPCON 0014                    _SSPBUF 0013  
          __CFG_PWRTE$OFF 0000                 ??_initADC 0073                    saved_w 007E  
 __end_of__initialization 0013             _initOscilador 00C3            __pcstackCOMMON 0070  
 __size_of_I2C_Slave_Init 0019             __end_of_setup 01E0                   ??_setup 0076  
   I2C_Slave_Init@address 0073            ?_initOscilador 0070                __pmaintext 0118  
              __pintentry 0004                   _SSPCON2 0091                   _SSPSTAT 0094  
     initOscilador@option 0075             ??_ADC_channel 0073                 _ANSELbits 0188  
                 __ptext1 01BB                   __ptext2 00C3                   __ptext3 01F9  
                 __ptext4 01E0                   __ptext5 0017                   __ptext6 016A  
                 _initADC 01F9              __size_of_isr 0051           ??_initOscilador 0073  
    end_of_initialization 0013            _I2C_Slave_Init 01E0       __end_of_ADC_channel 00C3  
               _PORTAbits 0005              ADC_channel@a 0075                 _TRISAbits 0085  
               _TRISBbits 0086                 _TRISEbits 0089    __end_of_I2C_Slave_Init 01F9  
     start_initialization 000F               __end_of_isr 01BB               _ADC_channel 0017  
__CFG_FOSC$INTRC_NOCLKOUT 0000           ?_I2C_Slave_Init 0073               __pbssCOMMON 0076  
               ___latbits 0002             __pcstackBANK0 0020                  ?_initADC 0070  
          __size_of_setup 0025         interrupt_function 0004                  _PIR1bits 000C  
              _ADCON0bits 001F                _ADCON1bits 009F     __end_of_initOscilador 0118  
              _ANSELHbits 0189          __size_of_initADC 0014         __CFG_BOR4V$BOR40V 0000  
        ??_I2C_Slave_Init 0075             __size_of_main 0052              ?_ADC_channel 0070  
                initADC@a 0074                  intlevel1 0000                _OSCCONbits 008F  
             _SSPCON2bits 0091                _SSPCONbits 0014  



Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Mar 07 23:03:54 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.05
    20                           ; Generated 20/12/2018 GMT
    21                           ; 
    22                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  000B                     _INTCONbits	set	11
   210  0005                     _PORTA	set	5
   211  0005                     _PORTAbits	set	5
   212  0006                     _PORTB	set	6
   213  001E                     _ADRESH	set	30
   214  0014                     _SSPCONbits	set	20
   215  000C                     _PIR1bits	set	12
   216  0013                     _SSPBUF	set	19
   217  0014                     _SSPCON	set	20
   218  001F                     _ADCON0bits	set	31
   219  0063                     _SSPIF	set	99
   220  005E                     _PEIE	set	94
   221  005F                     _GIE	set	95
   222  0086                     _TRISB	set	134
   223  0085                     _TRISA	set	133
   224  0094                     _SSPSTATbits	set	148
   225  008F                     _OSCCONbits	set	143
   226  0091                     _SSPCON2bits	set	145
   227  0094                     _SSPSTAT	set	148
   228  0093                     _SSPADD	set	147
   229  0091                     _SSPCON2	set	145
   230  009F                     _ADCON1bits	set	159
   231  0086                     _TRISBbits	set	134
   232  0089                     _TRISEbits	set	137
   233  0085                     _TRISAbits	set	133
   234  04A0                     _BF	set	1184
   235  0463                     _SSPIE	set	1123
   236  048B                     _RCEN	set	1163
   237  043C                     _TRISC4	set	1084
   238  043B                     _TRISC3	set	1083
   239  0189                     _ANSELH	set	393
   240  0188                     _ANSEL	set	392
   241  0189                     _ANSELHbits	set	393
   242  0188                     _ANSELbits	set	392
   243                           
   244                           ; #config settings
   245  0000                     
   246                           	psect	cinit
   247  000F                     start_initialization:	
   248  000F                     __initialization:	
   249                           
   250                           ; Clear objects allocated to COMMON
   251  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   252  0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   253  0011  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   254  0012  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   255                           
   256                           ; Clear objects allocated to BANK0
   257  0013  1283               	bcf	3,5	;RP0=0, select bank0
   258  0014  1303               	bcf	3,6	;RP1=0, select bank0
   259  0015  01A3               	clrf	__pbssBANK0& (0+127)
   260  0016  01A4               	clrf	(__pbssBANK0+1)& (0+127)
   261  0017                     end_of_initialization:	
   262                           ;End of C runtime variable initialization code
   263                           
   264  0017                     __end_of__initialization:	
   265  0017  0183               	clrf	3
   266  0018  120A  118A  291C   	ljmp	_main	;jump to C main() function
   267                           
   268                           	psect	bssCOMMON
   269  0077                     __pbssCOMMON:	
   270  0077                     _door:	
   271  0077                     	ds	1
   272  0078                     _ADC:	
   273  0078                     	ds	1
   274  0079                     _key:	
   275  0079                     	ds	1
   276  007A                     _z:	
   277  007A                     	ds	1
   278                           
   279                           	psect	bssBANK0
   280  0023                     __pbssBANK0:	
   281  0023                     _val:	
   282  0023                     	ds	1
   283  0024                     _cont:	
   284  0024                     	ds	1
   285                           
   286                           	psect	cstackCOMMON
   287  0070                     __pcstackCOMMON:	
   288  0070                     ?_setup:	
   289  0070                     ?_ADC_channel:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ?_initADC:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0070                     ?_initOscilador:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0070                     ?_isr:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ??_isr:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ?_main:	
   305                           ; 1 bytes @ 0x0
   306                           
   307                           
   308                           ; 1 bytes @ 0x0
   309  0070                     	ds	3
   310  0073                     ??_ADC_channel:	
   311  0073                     ??_initADC:	
   312                           ; 1 bytes @ 0x3
   313                           
   314  0073                     ?_I2C_Slave_Init:	
   315                           ; 1 bytes @ 0x3
   316                           
   317  0073                     ??_initOscilador:	
   318                           ; 1 bytes @ 0x3
   319                           
   320  0073                     I2C_Slave_Init@address:	
   321                           ; 1 bytes @ 0x3
   322                           
   323                           
   324                           ; 2 bytes @ 0x3
   325  0073                     	ds	1
   326  0074                     initADC@a:	
   327                           
   328                           ; 1 bytes @ 0x4
   329  0074                     	ds	1
   330  0075                     ??_I2C_Slave_Init:	
   331  0075                     ADC_channel@a:	
   332                           ; 1 bytes @ 0x5
   333                           
   334  0075                     initOscilador@option:	
   335                           ; 1 bytes @ 0x5
   336                           
   337                           
   338                           ; 1 bytes @ 0x5
   339  0075                     	ds	1
   340  0076                     ??_setup:	
   341                           
   342                           ; 1 bytes @ 0x6
   343  0076                     	ds	1
   344                           
   345                           	psect	cstackBANK0
   346  0020                     __pcstackBANK0:	
   347  0020                     ??_main:	
   348                           
   349                           ; 1 bytes @ 0x0
   350  0020                     	ds	3
   351                           
   352                           	psect	maintext
   353  011C                     __pmaintext:	
   354 ;;
   355 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   356 ;;
   357 ;; *************** function _main *****************
   358 ;; Defined at:
   359 ;;		line 86 in file "MainHall.c"
   360 ;; Parameters:    Size  Location     Type
   361 ;;		None
   362 ;; Auto vars:     Size  Location     Type
   363 ;;		None
   364 ;; Return value:  Size  Location     Type
   365 ;;                  1    wreg      void 
   366 ;; Registers used:
   367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   368 ;; Tracked objects:
   369 ;;		On entry : B00/0
   370 ;;		On exit  : 0/0
   371 ;;		Unchanged: 0/0
   372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   373 ;;      Params:         0       0       0       0       0
   374 ;;      Locals:         0       0       0       0       0
   375 ;;      Temps:          0       3       0       0       0
   376 ;;      Totals:         0       3       0       0       0
   377 ;;Total ram usage:        3 bytes
   378 ;; Hardware stack levels required when called:    3
   379 ;; This function calls:
   380 ;;		_setup
   381 ;; This function is called by:
   382 ;;		Startup code after reset
   383 ;; This function uses a non-reentrant model
   384 ;;
   385                           
   386                           
   387                           ;psect for function _main
   388  011C                     _main:	
   389                           
   390                           ;MainHall.c: 87:     setup();
   391                           
   392                           ;incstack = 0
   393                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   394  011C  120A  118A  21C1  120A  118A  	fcall	_setup
   395  0121                     l1165:	
   396                           
   397                           ;MainHall.c: 89:         ADCON0bits.GO = 1;
   398  0121  1283               	bcf	3,5	;RP0=0, select bank0
   399  0122  1303               	bcf	3,6	;RP1=0, select bank0
   400  0123  149F               	bsf	31,1	;volatile
   401  0124                     l174:	
   402                           ;MainHall.c: 92:         }
   403                           
   404                           ;MainHall.c: 90:         while(ADCON0bits.GO == 1){
   405                           
   406                           
   407                           ;MainHall.c: 90:         while(ADCON0bits.GO == 1){
   408  0124  1283               	bcf	3,5	;RP0=0, select bank0
   409  0125  1303               	bcf	3,6	;RP1=0, select bank0
   410  0126  1C9F               	btfss	31,1	;volatile
   411  0127  292A               	goto	l1167
   412  0128  0000               	nop	;# 
   413  0129  2924               	goto	l174
   414  012A                     l1167:	
   415                           
   416                           ;MainHall.c: 93:         ADC = ADRESH;
   417  012A  081E               	movf	30,w	;volatile
   418  012B  00A0               	movwf	??_main
   419  012C  0820               	movf	??_main,w
   420  012D  00F8               	movwf	_ADC
   421                           
   422                           ;MainHall.c: 94:         PORTB = key;
   423  012E  0879               	movf	_key,w
   424  012F  0086               	movwf	6	;volatile
   425                           
   426                           ;MainHall.c: 95:         _delay((unsigned long)((200)*(8000000/4000.0)));
   427  0130  3003               	movlw	3
   428  0131  1283               	bcf	3,5	;RP0=0, select bank0
   429  0132  1303               	bcf	3,6	;RP1=0, select bank0
   430  0133  00A2               	movwf	??_main+2
   431  0134  3008               	movlw	8
   432  0135  00A1               	movwf	??_main+1
   433  0136  3076               	movlw	118
   434  0137  00A0               	movwf	??_main
   435  0138                     u477:	
   436  0138  0BA0               	decfsz	??_main,f
   437  0139  2938               	goto	u477
   438  013A  0BA1               	decfsz	??_main+1,f
   439  013B  2938               	goto	u477
   440  013C  0BA2               	decfsz	??_main+2,f
   441  013D  2938               	goto	u477
   442  013E  0000               	nop
   443                           
   444                           ;MainHall.c: 96:         if (ADC > 134 | ADC < 120){
   445  013F  3087               	movlw	135
   446  0140  0278               	subwf	_ADC,w
   447  0141  1803               	skipnc
   448  0142  2947               	goto	l179
   449  0143  3078               	movlw	120
   450  0144  0278               	subwf	_ADC,w
   451  0145  1803               	skipnc
   452  0146  294A               	goto	l1171
   453  0147                     l179:	
   454                           
   455                           ;MainHall.c: 97:             key = 1;
   456  0147  01F9               	clrf	_key
   457  0148  0AF9               	incf	_key,f
   458                           
   459                           ;MainHall.c: 98:         } else {
   460  0149  294B               	goto	l1173
   461  014A                     l1171:	
   462                           
   463                           ;MainHall.c: 99:             key = 0;
   464  014A  01F9               	clrf	_key
   465  014B                     l1173:	
   466                           
   467                           ;MainHall.c: 101:         if (door == 0){
   468  014B  0877               	movf	_door,w
   469  014C  1D03               	btfss	3,2
   470  014D  2965               	goto	l1179
   471                           
   472                           ;MainHall.c: 102:             if (key == 1 & PORTAbits.RA2 == 1){
   473  014E  1283               	bcf	3,5	;RP0=0, select bank0
   474  014F  1303               	bcf	3,6	;RP1=0, select bank0
   475  0150  1D05               	btfss	5,2	;volatile
   476  0151  2954               	goto	u400
   477  0152  3001               	movlw	1
   478  0153  2955               	goto	u402
   479  0154                     u400:	
   480  0154  3000               	movlw	0
   481  0155                     u402:	
   482  0155  00A0               	movwf	??_main
   483  0156  0379               	decf	_key,w
   484  0157  1D03               	btfss	3,2
   485  0158  295B               	goto	u410
   486  0159  3001               	movlw	1
   487  015A  295C               	goto	u412
   488  015B                     u410:	
   489  015B  3000               	movlw	0
   490  015C                     u412:	
   491  015C  0520               	andwf	??_main,w
   492  015D  3800               	iorlw	0
   493  015E  1903               	skipnz
   494  015F  2921               	goto	l1165
   495                           
   496                           ;MainHall.c: 104:                 door = 1;
   497  0160  01F7               	clrf	_door
   498  0161  0AF7               	incf	_door,f
   499  0162                     l183:	
   500                           ;MainHall.c: 105:                 while(PORTAbits.RA2 == 1);
   501                           
   502  0162  1D05               	btfss	5,2	;volatile
   503  0163  2921               	goto	l1165
   504  0164  2962               	goto	l183
   505  0165                     l1179:	
   506  0165  0377               	decf	_door,w
   507  0166  1D03               	btfss	3,2
   508  0167  2921               	goto	l1165
   509                           
   510                           ;MainHall.c: 108:             if (PORTAbits.RA2 == 1){
   511  0168  1283               	bcf	3,5	;RP0=0, select bank0
   512  0169  1303               	bcf	3,6	;RP1=0, select bank0
   513  016A  1D05               	btfss	5,2	;volatile
   514  016B  2921               	goto	l1165
   515                           
   516                           ;MainHall.c: 110:                 door = 0;
   517  016C  01F7               	clrf	_door
   518  016D                     l189:	
   519                           ;MainHall.c: 111:                 while(PORTAbits.RA2 == 1);
   520                           
   521  016D  1D05               	btfss	5,2	;volatile
   522  016E  2921               	goto	l1165
   523  016F  296D               	goto	l189
   524  0170                     __end_of_main:	
   525                           
   526                           	psect	text1
   527  01C1                     __ptext1:	
   528 ;; *************** function _setup *****************
   529 ;; Defined at:
   530 ;;		line 118 in file "MainHall.c"
   531 ;; Parameters:    Size  Location     Type
   532 ;;		None
   533 ;; Auto vars:     Size  Location     Type
   534 ;;		None
   535 ;; Return value:  Size  Location     Type
   536 ;;                  1    wreg      void 
   537 ;; Registers used:
   538 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   539 ;; Tracked objects:
   540 ;;		On entry : 0/0
   541 ;;		On exit  : 0/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   544 ;;      Params:         0       0       0       0       0
   545 ;;      Locals:         0       0       0       0       0
   546 ;;      Temps:          1       0       0       0       0
   547 ;;      Totals:         1       0       0       0       0
   548 ;;Total ram usage:        1 bytes
   549 ;; Hardware stack levels used:    1
   550 ;; Hardware stack levels required when called:    2
   551 ;; This function calls:
   552 ;;		_ADC_channel
   553 ;;		_I2C_Slave_Init
   554 ;;		_initADC
   555 ;;		_initOscilador
   556 ;; This function is called by:
   557 ;;		_main
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561                           
   562                           ;psect for function _setup
   563  01C1                     _setup:	
   564                           
   565                           ;MainHall.c: 119:     initOscilador(7);
   566                           
   567                           ;incstack = 0
   568                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   569  01C1  3007               	movlw	7
   570  01C2  120A  118A  20C7  120A  118A  	fcall	_initOscilador
   571                           
   572                           ;MainHall.c: 120:     ANSEL = 0;
   573  01C7  1683               	bsf	3,5	;RP0=1, select bank3
   574  01C8  1703               	bsf	3,6	;RP1=1, select bank3
   575  01C9  0188               	clrf	8	;volatile
   576                           
   577                           ;MainHall.c: 121:     ANSELH = 0;
   578  01CA  0189               	clrf	9	;volatile
   579                           
   580                           ;MainHall.c: 122:     TRISA = 0;
   581  01CB  1683               	bsf	3,5	;RP0=1, select bank1
   582  01CC  1303               	bcf	3,6	;RP1=0, select bank1
   583  01CD  0185               	clrf	5	;volatile
   584                           
   585                           ;MainHall.c: 123:     TRISAbits.TRISA2 = 1;
   586  01CE  1505               	bsf	5,2	;volatile
   587                           
   588                           ;MainHall.c: 124:     TRISB = 0;
   589  01CF  0186               	clrf	6	;volatile
   590                           
   591                           ;MainHall.c: 125:     PORTA = 0;
   592  01D0  1283               	bcf	3,5	;RP0=0, select bank0
   593  01D1  1303               	bcf	3,6	;RP1=0, select bank0
   594  01D2  0185               	clrf	5	;volatile
   595                           
   596                           ;MainHall.c: 126:     PORTB = 0;
   597  01D3  0186               	clrf	6	;volatile
   598                           
   599                           ;MainHall.c: 127:     val = 8;
   600  01D4  3008               	movlw	8
   601  01D5  00F6               	movwf	??_setup
   602  01D6  0876               	movf	??_setup,w
   603  01D7  00A3               	movwf	_val
   604                           
   605                           ;MainHall.c: 128:     door = 0;
   606  01D8  01F7               	clrf	_door
   607                           
   608                           ;MainHall.c: 129:     ADC_channel(0);
   609  01D9  3000               	movlw	0
   610  01DA  120A  118A  201B  120A  118A  	fcall	_ADC_channel
   611                           
   612                           ;MainHall.c: 130:     initADC(2);
   613  01DF  3002               	movlw	2
   614  01E0  120A  118A  2207  120A  118A  	fcall	_initADC
   615                           
   616                           ;MainHall.c: 140:     INTCONbits.GIE = 1;
   617  01E5  178B               	bsf	11,7	;volatile
   618                           
   619                           ;MainHall.c: 141:     I2C_Slave_Init(0x10);
   620  01E6  3010               	movlw	16
   621  01E7  00F3               	movwf	I2C_Slave_Init@address
   622  01E8  3000               	movlw	0
   623  01E9  00F4               	movwf	I2C_Slave_Init@address+1
   624  01EA  120A  118A  21EE   	fcall	_I2C_Slave_Init
   625  01ED  0008               	return
   626  01EE                     __end_of_setup:	
   627                           
   628                           	psect	text2
   629  00C7                     __ptext2:	
   630 ;; *************** function _initOscilador *****************
   631 ;; Defined at:
   632 ;;		line 11 in file "./Oscilador.h"
   633 ;; Parameters:    Size  Location     Type
   634 ;;  option          1    wreg     unsigned char 
   635 ;; Auto vars:     Size  Location     Type
   636 ;;  option          1    5[COMMON] unsigned char 
   637 ;; Return value:  Size  Location     Type
   638 ;;                  1    wreg      void 
   639 ;; Registers used:
   640 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   641 ;; Tracked objects:
   642 ;;		On entry : 0/0
   643 ;;		On exit  : 0/0
   644 ;;		Unchanged: 0/0
   645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   646 ;;      Params:         0       0       0       0       0
   647 ;;      Locals:         1       0       0       0       0
   648 ;;      Temps:          2       0       0       0       0
   649 ;;      Totals:         3       0       0       0       0
   650 ;;Total ram usage:        3 bytes
   651 ;; Hardware stack levels used:    1
   652 ;; Hardware stack levels required when called:    1
   653 ;; This function calls:
   654 ;;		Nothing
   655 ;; This function is called by:
   656 ;;		_setup
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660                           
   661                           ;psect for function _initOscilador
   662  00C7                     _initOscilador:	
   663                           
   664                           ;incstack = 0
   665                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
   666                           ;initOscilador@option stored from wreg
   667  00C7  00F5               	movwf	initOscilador@option
   668                           
   669                           ;./Oscilador.h: 13: 
   670  00C8  28F8               	goto	l1067
   671  00C9                     l1047:	
   672                           
   673                           ;./Oscilador.h: 16:         case 3:
   674  00C9  308F               	movlw	-113
   675  00CA  1683               	bsf	3,5	;RP0=1, select bank1
   676  00CB  1303               	bcf	3,6	;RP1=0, select bank1
   677  00CC  058F               	andwf	15,f	;volatile
   678                           
   679                           ;./Oscilador.h: 17: 
   680  00CD  291A               	goto	l129
   681  00CE                     l1049:	
   682                           
   683                           ;./Oscilador.h: 20:         case 4:
   684  00CE  1683               	bsf	3,5	;RP0=1, select bank1
   685  00CF  1303               	bcf	3,6	;RP1=0, select bank1
   686  00D0  080F               	movf	15,w	;volatile
   687  00D1  398F               	andlw	-113
   688  00D2  3810               	iorlw	16
   689  00D3  28F1               	goto	L5
   690  00D4                     l1051:	
   691                           ;./Oscilador.h: 21: 
   692                           
   693                           
   694                           ;./Oscilador.h: 24:         case 5:
   695  00D4  1683               	bsf	3,5	;RP0=1, select bank1
   696  00D5  1303               	bcf	3,6	;RP1=0, select bank1
   697  00D6  080F               	movf	15,w	;volatile
   698  00D7  398F               	andlw	-113
   699  00D8  3820               	iorlw	32
   700  00D9  28F1               	goto	L5
   701  00DA                     l1053:	
   702                           ;./Oscilador.h: 25: 
   703                           
   704                           
   705                           ;./Oscilador.h: 28:         case 6:
   706  00DA  1683               	bsf	3,5	;RP0=1, select bank1
   707  00DB  1303               	bcf	3,6	;RP1=0, select bank1
   708  00DC  080F               	movf	15,w	;volatile
   709  00DD  398F               	andlw	-113
   710  00DE  3830               	iorlw	48
   711  00DF  28F1               	goto	L5
   712  00E0                     l1055:	
   713                           ;./Oscilador.h: 29: 
   714                           
   715                           
   716                           ;./Oscilador.h: 32:         case 7:
   717  00E0  1683               	bsf	3,5	;RP0=1, select bank1
   718  00E1  1303               	bcf	3,6	;RP1=0, select bank1
   719  00E2  080F               	movf	15,w	;volatile
   720  00E3  398F               	andlw	-113
   721  00E4  3840               	iorlw	64
   722  00E5  28F1               	goto	L5
   723  00E6                     l1057:	
   724                           ;./Oscilador.h: 33: 
   725                           
   726                           
   727                           ;./Oscilador.h: 36:         default:
   728  00E6  1683               	bsf	3,5	;RP0=1, select bank1
   729  00E7  1303               	bcf	3,6	;RP1=0, select bank1
   730  00E8  080F               	movf	15,w	;volatile
   731  00E9  398F               	andlw	-113
   732  00EA  3850               	iorlw	80
   733  00EB  28F1               	goto	L5
   734  00EC                     l1059:	
   735                           ;./Oscilador.h: 37: 
   736                           
   737                           
   738                           ;./Oscilador.h: 40:     }
   739  00EC  1683               	bsf	3,5	;RP0=1, select bank1
   740  00ED  1303               	bcf	3,6	;RP1=0, select bank1
   741  00EE  080F               	movf	15,w	;volatile
   742  00EF  398F               	andlw	-113
   743  00F0  3860               	iorlw	96
   744  00F1                     L5:	
   745  00F1  008F               	movwf	15	;volatile
   746                           
   747                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
   748  00F2  291A               	goto	l129
   749  00F3                     l1061:	
   750  00F3                     l1063:	
   751  00F3  3070               	movlw	112
   752  00F4  1683               	bsf	3,5	;RP0=1, select bank1
   753  00F5  1303               	bcf	3,6	;RP1=0, select bank1
   754  00F6  048F               	iorwf	15,f	;volatile
   755  00F7  291A               	goto	l129
   756  00F8                     l1067:	
   757  00F8  0875               	movf	initOscilador@option,w
   758  00F9  00F3               	movwf	??_initOscilador
   759  00FA  01F4               	clrf	??_initOscilador+1
   760                           
   761                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   762                           ; Switch size 1, requested type "simple"
   763                           ; Number of cases is 1, Range of values is 0 to 0
   764                           ; switch strategies available:
   765                           ; Name         Instructions Cycles
   766                           ; simple_byte            4     3 (average)
   767                           ; direct_byte           11     8 (fixed)
   768                           ; jumptable            260     6 (fixed)
   769                           ;	Chosen strategy is simple_byte
   770  00FB  0874               	movf	??_initOscilador+1,w
   771  00FC  3A00               	xorlw	0	; case 0
   772  00FD  1903               	skipnz
   773  00FE  2900               	goto	l1225
   774  00FF  28F3               	goto	l1063
   775  0100                     l1225:	
   776                           
   777                           ; Switch size 1, requested type "simple"
   778                           ; Number of cases is 8, Range of values is 0 to 7
   779                           ; switch strategies available:
   780                           ; Name         Instructions Cycles
   781                           ; simple_byte           25    13 (average)
   782                           ; direct_byte           32     8 (fixed)
   783                           ; jumptable            260     6 (fixed)
   784                           ;	Chosen strategy is simple_byte
   785  0100  0873               	movf	??_initOscilador,w
   786  0101  3A00               	xorlw	0	; case 0
   787  0102  1903               	skipnz
   788  0103  28C9               	goto	l1047
   789  0104  3A01               	xorlw	1	; case 1
   790  0105  1903               	skipnz
   791  0106  28CE               	goto	l1049
   792  0107  3A03               	xorlw	3	; case 2
   793  0108  1903               	skipnz
   794  0109  28D4               	goto	l1051
   795  010A  3A01               	xorlw	1	; case 3
   796  010B  1903               	skipnz
   797  010C  28DA               	goto	l1053
   798  010D  3A07               	xorlw	7	; case 4
   799  010E  1903               	skipnz
   800  010F  28E0               	goto	l1055
   801  0110  3A01               	xorlw	1	; case 5
   802  0111  1903               	skipnz
   803  0112  28E6               	goto	l1057
   804  0113  3A03               	xorlw	3	; case 6
   805  0114  1903               	skipnz
   806  0115  28EC               	goto	l1059
   807  0116  3A01               	xorlw	1	; case 7
   808  0117  1903               	skipnz
   809  0118  28F3               	goto	l1061
   810  0119  28F3               	goto	l1063
   811  011A                     l129:	
   812  011A  140F               	bsf	15,0	;volatile
   813  011B  0008               	return
   814  011C                     __end_of_initOscilador:	
   815                           
   816                           	psect	text3
   817  0207                     __ptext3:	
   818 ;; *************** function _initADC *****************
   819 ;; Defined at:
   820 ;;		line 75 in file "./ADC.h"
   821 ;; Parameters:    Size  Location     Type
   822 ;;  a               1    wreg     unsigned char 
   823 ;; Auto vars:     Size  Location     Type
   824 ;;  a               1    4[COMMON] unsigned char 
   825 ;; Return value:  Size  Location     Type
   826 ;;                  1    wreg      void 
   827 ;; Registers used:
   828 ;;		wreg, status,2, status,0
   829 ;; Tracked objects:
   830 ;;		On entry : 0/0
   831 ;;		On exit  : 0/0
   832 ;;		Unchanged: 0/0
   833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   834 ;;      Params:         0       0       0       0       0
   835 ;;      Locals:         1       0       0       0       0
   836 ;;      Temps:          1       0       0       0       0
   837 ;;      Totals:         2       0       0       0       0
   838 ;;Total ram usage:        2 bytes
   839 ;; Hardware stack levels used:    1
   840 ;; Hardware stack levels required when called:    1
   841 ;; This function calls:
   842 ;;		Nothing
   843 ;; This function is called by:
   844 ;;		_setup
   845 ;; This function uses a non-reentrant model
   846 ;;
   847                           
   848                           
   849                           ;psect for function _initADC
   850  0207                     _initADC:	
   851                           
   852                           ;incstack = 0
   853                           ; Regs used in _initADC: [wreg+status,2+status,0]
   854                           ;initADC@a stored from wreg
   855  0207  00F4               	movwf	initADC@a
   856                           
   857                           ;./ADC.h: 76:     ADCON1bits.ADFM = 0;
   858  0208  1683               	bsf	3,5	;RP0=1, select bank1
   859  0209  1303               	bcf	3,6	;RP1=0, select bank1
   860  020A  139F               	bcf	31,7	;volatile
   861                           
   862                           ;./ADC.h: 77:     ADCON1bits.VCFG0 = 0;
   863  020B  121F               	bcf	31,4	;volatile
   864                           
   865                           ;./ADC.h: 78:     ADCON1bits.VCFG1 = 0;
   866  020C  129F               	bcf	31,5	;volatile
   867                           
   868                           ;./ADC.h: 79:     ADCON0bits.ADCS = a;
   869  020D  0874               	movf	initADC@a,w
   870  020E  00F3               	movwf	??_initADC
   871  020F  0EF3               	swapf	??_initADC,f
   872  0210  0DF3               	rlf	??_initADC,f
   873  0211  0DF3               	rlf	??_initADC,f
   874  0212  1283               	bcf	3,5	;RP0=0, select bank0
   875  0213  1303               	bcf	3,6	;RP1=0, select bank0
   876  0214  081F               	movf	31,w	;volatile
   877  0215  0673               	xorwf	??_initADC,w
   878  0216  393F               	andlw	-193
   879  0217  0673               	xorwf	??_initADC,w
   880  0218  009F               	movwf	31	;volatile
   881                           
   882                           ;./ADC.h: 80:     ADCON0bits.ADON = 1;
   883  0219  141F               	bsf	31,0	;volatile
   884  021A  0008               	return
   885  021B                     __end_of_initADC:	
   886                           
   887                           	psect	text4
   888  01EE                     __ptext4:	
   889 ;; *************** function _I2C_Slave_Init *****************
   890 ;; Defined at:
   891 ;;		line 94 in file "./I2C.h"
   892 ;; Parameters:    Size  Location     Type
   893 ;;  address         2    3[COMMON] short 
   894 ;; Auto vars:     Size  Location     Type
   895 ;;		None
   896 ;; Return value:  Size  Location     Type
   897 ;;                  1    wreg      void 
   898 ;; Registers used:
   899 ;;		wreg
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   905 ;;      Params:         2       0       0       0       0
   906 ;;      Locals:         0       0       0       0       0
   907 ;;      Temps:          0       0       0       0       0
   908 ;;      Totals:         2       0       0       0       0
   909 ;;Total ram usage:        2 bytes
   910 ;; Hardware stack levels used:    1
   911 ;; Hardware stack levels required when called:    1
   912 ;; This function calls:
   913 ;;		Nothing
   914 ;; This function is called by:
   915 ;;		_setup
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919                           
   920                           ;psect for function _I2C_Slave_Init
   921  01EE                     _I2C_Slave_Init:	
   922                           
   923                           ;./I2C.h: 94: void I2C_Slave_Init(short address);./I2C.h: 95: {;./I2C.h: 96:     SSPADD 
      +                          = address;
   924                           
   925                           ;incstack = 0
   926                           ; Regs used in _I2C_Slave_Init: [wreg]
   927  01EE  0873               	movf	I2C_Slave_Init@address,w
   928  01EF  1683               	bsf	3,5	;RP0=1, select bank1
   929  01F0  1303               	bcf	3,6	;RP1=0, select bank1
   930  01F1  0093               	movwf	19	;volatile
   931                           
   932                           ;./I2C.h: 97:     SSPCON = 0x36;
   933  01F2  3036               	movlw	54
   934  01F3  1283               	bcf	3,5	;RP0=0, select bank0
   935  01F4  1303               	bcf	3,6	;RP1=0, select bank0
   936  01F5  0094               	movwf	20	;volatile
   937                           
   938                           ;./I2C.h: 98:     SSPSTAT = 0x80;
   939  01F6  3080               	movlw	128
   940  01F7  1683               	bsf	3,5	;RP0=1, select bank1
   941  01F8  1303               	bcf	3,6	;RP1=0, select bank1
   942  01F9  0094               	movwf	20	;volatile
   943                           
   944                           ;./I2C.h: 99:     SSPCON2 = 0x01;
   945  01FA  3001               	movlw	1
   946  01FB  0091               	movwf	17	;volatile
   947                           
   948                           ;./I2C.h: 100:     TRISC3 = 1;
   949  01FC  1587               	bsf	7,3	;volatile
   950                           
   951                           ;./I2C.h: 101:     TRISC4 = 1;
   952  01FD  1607               	bsf	7,4	;volatile
   953                           
   954                           ;./I2C.h: 102:     GIE = 1;
   955  01FE  178B               	bsf	11,7	;volatile
   956                           
   957                           ;./I2C.h: 103:     PEIE = 1;
   958  01FF  170B               	bsf	11,6	;volatile
   959                           
   960                           ;./I2C.h: 104:     SSPIF = 0;
   961  0200  1283               	bcf	3,5	;RP0=0, select bank0
   962  0201  1303               	bcf	3,6	;RP1=0, select bank0
   963  0202  118C               	bcf	12,3	;volatile
   964                           
   965                           ;./I2C.h: 105:     SSPIE = 1;
   966  0203  1683               	bsf	3,5	;RP0=1, select bank1
   967  0204  1303               	bcf	3,6	;RP1=0, select bank1
   968  0205  158C               	bsf	12,3	;volatile
   969  0206  0008               	return
   970  0207                     __end_of_I2C_Slave_Init:	
   971                           
   972                           	psect	text5
   973  001B                     __ptext5:	
   974 ;; *************** function _ADC_channel *****************
   975 ;; Defined at:
   976 ;;		line 8 in file "./ADC.h"
   977 ;; Parameters:    Size  Location     Type
   978 ;;  a               1    wreg     unsigned char 
   979 ;; Auto vars:     Size  Location     Type
   980 ;;  a               1    5[COMMON] unsigned char 
   981 ;; Return value:  Size  Location     Type
   982 ;;                  1    wreg      void 
   983 ;; Registers used:
   984 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   985 ;; Tracked objects:
   986 ;;		On entry : 0/0
   987 ;;		On exit  : 0/0
   988 ;;		Unchanged: 0/0
   989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   990 ;;      Params:         0       0       0       0       0
   991 ;;      Locals:         1       0       0       0       0
   992 ;;      Temps:          2       0       0       0       0
   993 ;;      Totals:         3       0       0       0       0
   994 ;;Total ram usage:        3 bytes
   995 ;; Hardware stack levels used:    1
   996 ;; Hardware stack levels required when called:    1
   997 ;; This function calls:
   998 ;;		Nothing
   999 ;; This function is called by:
  1000 ;;		_setup
  1001 ;; This function uses a non-reentrant model
  1002 ;;
  1003                           
  1004                           
  1005                           ;psect for function _ADC_channel
  1006  001B                     _ADC_channel:	
  1007                           
  1008                           ;incstack = 0
  1009                           ; Regs used in _ADC_channel: [wreg-fsr0h+status,2+status,0]
  1010                           ;ADC_channel@a stored from wreg
  1011  001B  00F5               	movwf	ADC_channel@a
  1012                           
  1013                           ;./ADC.h: 10:     ADCON0bits.ADCS = a;
  1014  001C  0875               	movf	ADC_channel@a,w
  1015  001D  00F3               	movwf	??_ADC_channel
  1016  001E  0EF3               	swapf	??_ADC_channel,f
  1017  001F  0DF3               	rlf	??_ADC_channel,f
  1018  0020  0DF3               	rlf	??_ADC_channel,f
  1019  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1020  0022  1303               	bcf	3,6	;RP1=0, select bank0
  1021  0023  081F               	movf	31,w	;volatile
  1022  0024  0673               	xorwf	??_ADC_channel,w
  1023  0025  393F               	andlw	-193
  1024  0026  0673               	xorwf	??_ADC_channel,w
  1025  0027  009F               	movwf	31	;volatile
  1026                           
  1027                           ;./ADC.h: 11:     switch (a){
  1028  0028  2892               	goto	l1019
  1029  0029                     l76:	
  1030                           ;./ADC.h: 12:         case 0:
  1031                           
  1032                           
  1033                           ;./ADC.h: 13:             ANSELbits.ANS0 = 1;
  1034  0029  1683               	bsf	3,5	;RP0=1, select bank3
  1035  002A  1703               	bsf	3,6	;RP1=1, select bank3
  1036  002B  1408               	bsf	8,0	;volatile
  1037                           
  1038                           ;./ADC.h: 14:             TRISAbits.TRISA0 = 1;
  1039  002C  1683               	bsf	3,5	;RP0=1, select bank1
  1040  002D  1303               	bcf	3,6	;RP1=0, select bank1
  1041  002E  1405               	bsf	5,0	;volatile
  1042                           
  1043                           ;./ADC.h: 15:             break;
  1044  002F  0008               	return
  1045  0030                     l78:	
  1046                           ;./ADC.h: 16:         case 1:
  1047                           
  1048                           
  1049                           ;./ADC.h: 17:             ANSELbits.ANS1 = 1;
  1050  0030  1683               	bsf	3,5	;RP0=1, select bank3
  1051  0031  1703               	bsf	3,6	;RP1=1, select bank3
  1052  0032  1488               	bsf	8,1	;volatile
  1053                           
  1054                           ;./ADC.h: 18:             TRISAbits.TRISA1 = 1;
  1055  0033  1683               	bsf	3,5	;RP0=1, select bank1
  1056  0034  1303               	bcf	3,6	;RP1=0, select bank1
  1057  0035  1485               	bsf	5,1	;volatile
  1058                           
  1059                           ;./ADC.h: 19:             break;
  1060  0036  0008               	return
  1061  0037                     l79:	
  1062                           ;./ADC.h: 20:         case 2:
  1063                           
  1064                           
  1065                           ;./ADC.h: 21:             ANSELbits.ANS2 = 1;
  1066  0037  1683               	bsf	3,5	;RP0=1, select bank3
  1067  0038  1703               	bsf	3,6	;RP1=1, select bank3
  1068  0039  1508               	bsf	8,2	;volatile
  1069                           
  1070                           ;./ADC.h: 22:             TRISAbits.TRISA2 = 1;
  1071  003A  1683               	bsf	3,5	;RP0=1, select bank1
  1072  003B  1303               	bcf	3,6	;RP1=0, select bank1
  1073  003C  1505               	bsf	5,2	;volatile
  1074                           
  1075                           ;./ADC.h: 23:             break;
  1076  003D  0008               	return
  1077  003E                     l80:	
  1078                           ;./ADC.h: 24:         case 3:
  1079                           
  1080                           
  1081                           ;./ADC.h: 25:             ANSELbits.ANS3 = 1;
  1082  003E  1683               	bsf	3,5	;RP0=1, select bank3
  1083  003F  1703               	bsf	3,6	;RP1=1, select bank3
  1084  0040  1588               	bsf	8,3	;volatile
  1085                           
  1086                           ;./ADC.h: 26:             TRISAbits.TRISA3 = 1;
  1087  0041  1683               	bsf	3,5	;RP0=1, select bank1
  1088  0042  1303               	bcf	3,6	;RP1=0, select bank1
  1089  0043  1585               	bsf	5,3	;volatile
  1090                           
  1091                           ;./ADC.h: 27:             break;
  1092  0044  0008               	return
  1093  0045                     l81:	
  1094                           ;./ADC.h: 28:         case 4:
  1095                           
  1096                           
  1097                           ;./ADC.h: 29:             ANSELbits.ANS4 = 1;
  1098  0045  1683               	bsf	3,5	;RP0=1, select bank3
  1099  0046  1703               	bsf	3,6	;RP1=1, select bank3
  1100  0047  1608               	bsf	8,4	;volatile
  1101                           
  1102                           ;./ADC.h: 30:             TRISAbits.TRISA5 = 1;
  1103  0048  1683               	bsf	3,5	;RP0=1, select bank1
  1104  0049  1303               	bcf	3,6	;RP1=0, select bank1
  1105  004A  1685               	bsf	5,5	;volatile
  1106                           
  1107                           ;./ADC.h: 31:             break;
  1108  004B  0008               	return
  1109  004C                     l82:	
  1110                           ;./ADC.h: 32:         case 5:
  1111                           
  1112                           
  1113                           ;./ADC.h: 33:             ANSELbits.ANS5 = 1;
  1114  004C  1683               	bsf	3,5	;RP0=1, select bank3
  1115  004D  1703               	bsf	3,6	;RP1=1, select bank3
  1116  004E  1688               	bsf	8,5	;volatile
  1117                           
  1118                           ;./ADC.h: 34:             TRISEbits.TRISE0 = 1;
  1119  004F  1683               	bsf	3,5	;RP0=1, select bank1
  1120  0050  1303               	bcf	3,6	;RP1=0, select bank1
  1121  0051  1409               	bsf	9,0	;volatile
  1122                           
  1123                           ;./ADC.h: 35:             break;
  1124  0052  0008               	return
  1125  0053                     l83:	
  1126                           ;./ADC.h: 36:         case 6:
  1127                           
  1128                           
  1129                           ;./ADC.h: 37:             ANSELbits.ANS6 = 1;
  1130  0053  1683               	bsf	3,5	;RP0=1, select bank3
  1131  0054  1703               	bsf	3,6	;RP1=1, select bank3
  1132  0055  1708               	bsf	8,6	;volatile
  1133                           
  1134                           ;./ADC.h: 38:             TRISEbits.TRISE1 = 1;
  1135  0056  1683               	bsf	3,5	;RP0=1, select bank1
  1136  0057  1303               	bcf	3,6	;RP1=0, select bank1
  1137  0058  1489               	bsf	9,1	;volatile
  1138                           
  1139                           ;./ADC.h: 39:             break;
  1140  0059  0008               	return
  1141  005A                     l84:	
  1142                           ;./ADC.h: 40:         case 7:
  1143                           
  1144                           
  1145                           ;./ADC.h: 41:             ANSELbits.ANS7 = 1;
  1146  005A  1683               	bsf	3,5	;RP0=1, select bank3
  1147  005B  1703               	bsf	3,6	;RP1=1, select bank3
  1148  005C  1788               	bsf	8,7	;volatile
  1149                           
  1150                           ;./ADC.h: 42:             TRISEbits.TRISE2 = 1;
  1151  005D  1683               	bsf	3,5	;RP0=1, select bank1
  1152  005E  1303               	bcf	3,6	;RP1=0, select bank1
  1153  005F  1509               	bsf	9,2	;volatile
  1154                           
  1155                           ;./ADC.h: 43:             break;
  1156  0060  0008               	return
  1157  0061                     l85:	
  1158                           ;./ADC.h: 44:         case 8:
  1159                           
  1160                           
  1161                           ;./ADC.h: 45:             ANSELHbits.ANS8 = 1;
  1162  0061  1683               	bsf	3,5	;RP0=1, select bank3
  1163  0062  1703               	bsf	3,6	;RP1=1, select bank3
  1164  0063  1409               	bsf	9,0	;volatile
  1165                           
  1166                           ;./ADC.h: 46:             TRISBbits.TRISB2 = 1;
  1167  0064  1683               	bsf	3,5	;RP0=1, select bank1
  1168  0065  1303               	bcf	3,6	;RP1=0, select bank1
  1169  0066  1506               	bsf	6,2	;volatile
  1170                           
  1171                           ;./ADC.h: 47:             break;
  1172  0067  0008               	return
  1173  0068                     l86:	
  1174                           ;./ADC.h: 48:         case 9:
  1175                           
  1176                           
  1177                           ;./ADC.h: 49:             ANSELHbits.ANS9 = 1;
  1178  0068  1683               	bsf	3,5	;RP0=1, select bank3
  1179  0069  1703               	bsf	3,6	;RP1=1, select bank3
  1180  006A  1489               	bsf	9,1	;volatile
  1181                           
  1182                           ;./ADC.h: 50:             TRISBbits.TRISB3 = 1;
  1183  006B  1683               	bsf	3,5	;RP0=1, select bank1
  1184  006C  1303               	bcf	3,6	;RP1=0, select bank1
  1185  006D  1586               	bsf	6,3	;volatile
  1186                           
  1187                           ;./ADC.h: 51:             break;
  1188  006E  0008               	return
  1189  006F                     l87:	
  1190                           ;./ADC.h: 52:         case 10:
  1191                           
  1192                           
  1193                           ;./ADC.h: 53:             ANSELHbits.ANS10 = 1;
  1194  006F  1683               	bsf	3,5	;RP0=1, select bank3
  1195  0070  1703               	bsf	3,6	;RP1=1, select bank3
  1196  0071  1509               	bsf	9,2	;volatile
  1197                           
  1198                           ;./ADC.h: 54:             TRISBbits.TRISB1 = 1;
  1199  0072  1683               	bsf	3,5	;RP0=1, select bank1
  1200  0073  1303               	bcf	3,6	;RP1=0, select bank1
  1201  0074  1486               	bsf	6,1	;volatile
  1202                           
  1203                           ;./ADC.h: 55:             break;
  1204  0075  0008               	return
  1205  0076                     l88:	
  1206                           ;./ADC.h: 56:         case 11:
  1207                           
  1208                           
  1209                           ;./ADC.h: 57:             ANSELHbits.ANS11 = 1;
  1210  0076  1683               	bsf	3,5	;RP0=1, select bank3
  1211  0077  1703               	bsf	3,6	;RP1=1, select bank3
  1212  0078  1589               	bsf	9,3	;volatile
  1213                           
  1214                           ;./ADC.h: 58:             TRISBbits.TRISB4 = 1;
  1215  0079  1683               	bsf	3,5	;RP0=1, select bank1
  1216  007A  1303               	bcf	3,6	;RP1=0, select bank1
  1217  007B  1606               	bsf	6,4	;volatile
  1218                           
  1219                           ;./ADC.h: 59:             break;
  1220  007C  0008               	return
  1221  007D                     l89:	
  1222                           ;./ADC.h: 60:         case 12:
  1223                           
  1224                           
  1225                           ;./ADC.h: 61:             ANSELHbits.ANS12 = 1;
  1226  007D  1683               	bsf	3,5	;RP0=1, select bank3
  1227  007E  1703               	bsf	3,6	;RP1=1, select bank3
  1228  007F  1609               	bsf	9,4	;volatile
  1229                           
  1230                           ;./ADC.h: 62:             TRISBbits.TRISB0 = 1;
  1231  0080  1683               	bsf	3,5	;RP0=1, select bank1
  1232  0081  1303               	bcf	3,6	;RP1=0, select bank1
  1233  0082  1406               	bsf	6,0	;volatile
  1234                           
  1235                           ;./ADC.h: 63:             break;
  1236  0083  0008               	return
  1237  0084                     l90:	
  1238                           ;./ADC.h: 64:         case 13:
  1239                           
  1240                           
  1241                           ;./ADC.h: 65:             ANSELHbits.ANS13 = 1;
  1242  0084  1683               	bsf	3,5	;RP0=1, select bank3
  1243  0085  1703               	bsf	3,6	;RP1=1, select bank3
  1244  0086  1689               	bsf	9,5	;volatile
  1245                           
  1246                           ;./ADC.h: 66:             TRISBbits.TRISB5 = 1;
  1247  0087  1683               	bsf	3,5	;RP0=1, select bank1
  1248  0088  1303               	bcf	3,6	;RP1=0, select bank1
  1249  0089  1686               	bsf	6,5	;volatile
  1250                           
  1251                           ;./ADC.h: 67:             break;
  1252  008A  0008               	return
  1253  008B                     l91:	
  1254                           ;./ADC.h: 68:         default:
  1255                           
  1256                           
  1257                           ;./ADC.h: 69:             ANSELbits.ANS0 = 1;
  1258  008B  1683               	bsf	3,5	;RP0=1, select bank3
  1259  008C  1703               	bsf	3,6	;RP1=1, select bank3
  1260  008D  1408               	bsf	8,0	;volatile
  1261                           
  1262                           ;./ADC.h: 70:             TRISAbits.TRISA0 = 1;
  1263  008E  1683               	bsf	3,5	;RP0=1, select bank1
  1264  008F  1303               	bcf	3,6	;RP1=0, select bank1
  1265  0090  1405               	bsf	5,0	;volatile
  1266                           
  1267                           ;./ADC.h: 71:             break;
  1268  0091  0008               	return
  1269  0092                     l1019:	
  1270  0092  0875               	movf	ADC_channel@a,w
  1271  0093  00F3               	movwf	??_ADC_channel
  1272  0094  01F4               	clrf	??_ADC_channel+1
  1273                           
  1274                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1275                           ; Switch size 1, requested type "simple"
  1276                           ; Number of cases is 1, Range of values is 0 to 0
  1277                           ; switch strategies available:
  1278                           ; Name         Instructions Cycles
  1279                           ; simple_byte            4     3 (average)
  1280                           ; direct_byte           11     8 (fixed)
  1281                           ; jumptable            260     6 (fixed)
  1282                           ;	Chosen strategy is simple_byte
  1283  0095  0874               	movf	??_ADC_channel+1,w
  1284  0096  3A00               	xorlw	0	; case 0
  1285  0097  1903               	skipnz
  1286  0098  289A               	goto	l1227
  1287  0099  288B               	goto	l91
  1288  009A                     l1227:	
  1289                           
  1290                           ; Switch size 1, requested type "simple"
  1291                           ; Number of cases is 14, Range of values is 0 to 13
  1292                           ; switch strategies available:
  1293                           ; Name         Instructions Cycles
  1294                           ; simple_byte           43    22 (average)
  1295                           ; direct_byte           50     8 (fixed)
  1296                           ; jumptable            260     6 (fixed)
  1297                           ;	Chosen strategy is simple_byte
  1298  009A  0873               	movf	??_ADC_channel,w
  1299  009B  3A00               	xorlw	0	; case 0
  1300  009C  1903               	skipnz
  1301  009D  2829               	goto	l76
  1302  009E  3A01               	xorlw	1	; case 1
  1303  009F  1903               	skipnz
  1304  00A0  2830               	goto	l78
  1305  00A1  3A03               	xorlw	3	; case 2
  1306  00A2  1903               	skipnz
  1307  00A3  2837               	goto	l79
  1308  00A4  3A01               	xorlw	1	; case 3
  1309  00A5  1903               	skipnz
  1310  00A6  283E               	goto	l80
  1311  00A7  3A07               	xorlw	7	; case 4
  1312  00A8  1903               	skipnz
  1313  00A9  2845               	goto	l81
  1314  00AA  3A01               	xorlw	1	; case 5
  1315  00AB  1903               	skipnz
  1316  00AC  284C               	goto	l82
  1317  00AD  3A03               	xorlw	3	; case 6
  1318  00AE  1903               	skipnz
  1319  00AF  2853               	goto	l83
  1320  00B0  3A01               	xorlw	1	; case 7
  1321  00B1  1903               	skipnz
  1322  00B2  285A               	goto	l84
  1323  00B3  3A0F               	xorlw	15	; case 8
  1324  00B4  1903               	skipnz
  1325  00B5  2861               	goto	l85
  1326  00B6  3A01               	xorlw	1	; case 9
  1327  00B7  1903               	skipnz
  1328  00B8  2868               	goto	l86
  1329  00B9  3A03               	xorlw	3	; case 10
  1330  00BA  1903               	skipnz
  1331  00BB  286F               	goto	l87
  1332  00BC  3A01               	xorlw	1	; case 11
  1333  00BD  1903               	skipnz
  1334  00BE  2876               	goto	l88
  1335  00BF  3A07               	xorlw	7	; case 12
  1336  00C0  1903               	skipnz
  1337  00C1  287D               	goto	l89
  1338  00C2  3A01               	xorlw	1	; case 13
  1339  00C3  1903               	skipnz
  1340  00C4  2884               	goto	l90
  1341  00C5  288B               	goto	l91
  1342  00C6  0008               	return
  1343  00C7                     __end_of_ADC_channel:	
  1344                           
  1345                           	psect	text6
  1346  0170                     __ptext6:	
  1347 ;; *************** function _isr *****************
  1348 ;; Defined at:
  1349 ;;		line 36 in file "MainHall.c"
  1350 ;; Parameters:    Size  Location     Type
  1351 ;;		None
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;		None
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  1    wreg      void 
  1356 ;; Registers used:
  1357 ;;		wreg
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1363 ;;      Params:         0       0       0       0       0
  1364 ;;      Locals:         0       0       0       0       0
  1365 ;;      Temps:          3       0       0       0       0
  1366 ;;      Totals:         3       0       0       0       0
  1367 ;;Total ram usage:        3 bytes
  1368 ;; Hardware stack levels used:    1
  1369 ;; This function calls:
  1370 ;;		Nothing
  1371 ;; This function is called by:
  1372 ;;		Interrupt level 1
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376                           
  1377                           ;psect for function _isr
  1378  0170                     _isr:	
  1379                           
  1380                           ;MainHall.c: 52:                  if(PIR1bits.SSPIF == 1){
  1381  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1382  0171  1303               	bcf	3,6	;RP1=0, select bank0
  1383  0172  1D8C               	btfss	12,3	;volatile
  1384  0173  29BA               	goto	i1l168
  1385                           
  1386                           ;MainHall.c: 54:             SSPCONbits.CKP = 0;
  1387  0174  1214               	bcf	20,4	;volatile
  1388                           
  1389                           ;MainHall.c: 56:             if ((SSPCONbits.SSPOV) || (SSPCONbits.WCOL)){
  1390  0175  1B14               	btfsc	20,6	;volatile
  1391  0176  2979               	goto	i1l925
  1392  0177  1F94               	btfss	20,7	;volatile
  1393  0178  2980               	goto	i1l933
  1394  0179                     i1l925:	
  1395                           
  1396                           ;MainHall.c: 57:                 z = SSPBUF;
  1397  0179  0813               	movf	19,w	;volatile
  1398  017A  00F0               	movwf	??_isr
  1399  017B  0870               	movf	??_isr,w
  1400  017C  00FA               	movwf	_z
  1401                           
  1402                           ;MainHall.c: 58:                 SSPCONbits.SSPOV = 0;
  1403  017D  1314               	bcf	20,6	;volatile
  1404                           
  1405                           ;MainHall.c: 59:                 SSPCONbits.WCOL = 0;
  1406  017E  1394               	bcf	20,7	;volatile
  1407                           
  1408                           ;MainHall.c: 60:                 SSPCONbits.CKP = 1;
  1409  017F  1614               	bsf	20,4	;volatile
  1410  0180                     i1l933:	
  1411                           
  1412                           ;MainHall.c: 63:             if(!SSPSTATbits.D_nA && !SSPSTATbits.R_nW) {
  1413  0180  1683               	bsf	3,5	;RP0=1, select bank1
  1414  0181  1303               	bcf	3,6	;RP1=0, select bank1
  1415  0182  1E94               	btfss	20,5	;volatile
  1416  0183  1914               	btfsc	20,2	;volatile
  1417  0184  299D               	goto	i1l159
  1418                           
  1419                           ;MainHall.c: 65:                 z = SSPBUF;
  1420  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1421  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1422  0187  0813               	movf	19,w	;volatile
  1423  0188  00F0               	movwf	??_isr
  1424  0189  0870               	movf	??_isr,w
  1425  018A  00FA               	movwf	_z
  1426                           
  1427                           ;MainHall.c: 67:                 PIR1bits.SSPIF = 0;
  1428  018B  118C               	bcf	12,3	;volatile
  1429                           
  1430                           ;MainHall.c: 68:                 SSPCONbits.CKP = 1;
  1431  018C  1614               	bsf	20,4	;volatile
  1432  018D                     i1l160:	
  1433                           ;MainHall.c: 69:                 while(!SSPSTATbits.BF);
  1434                           
  1435  018D  1683               	bsf	3,5	;RP0=1, select bank1
  1436  018E  1303               	bcf	3,6	;RP1=0, select bank1
  1437  018F  1C14               	btfss	20,0	;volatile
  1438  0190  298D               	goto	i1l160
  1439                           
  1440                           ;MainHall.c: 70:                 z = SSPBUF;
  1441  0191  1283               	bcf	3,5	;RP0=0, select bank0
  1442  0192  1303               	bcf	3,6	;RP1=0, select bank0
  1443  0193  0813               	movf	19,w	;volatile
  1444  0194  00F0               	movwf	??_isr
  1445  0195  0870               	movf	??_isr,w
  1446  0196  00FA               	movwf	_z
  1447                           
  1448                           ;MainHall.c: 71:                 _delay((unsigned long)((250)*(8000000/4000000.0)));
  1449  0197  30A6               	movlw	166
  1450  0198  00F0               	movwf	??_isr
  1451  0199                     u48_27:	
  1452  0199  0BF0               	decfsz	??_isr,f
  1453  019A  2999               	goto	u48_27
  1454  019B  0000               	nop
  1455                           
  1456                           ;MainHall.c: 73:             }else if(!SSPSTATbits.D_nA && SSPSTATbits.R_nW){
  1457  019C  29B7               	goto	i1l163
  1458  019D                     i1l159:	
  1459  019D  1E94               	btfss	20,5	;volatile
  1460  019E  1D14               	btfss	20,2	;volatile
  1461  019F  29B7               	goto	i1l163
  1462                           
  1463                           ;MainHall.c: 74:                 z = SSPBUF;
  1464  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  1465  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  1466  01A2  0813               	movf	19,w	;volatile
  1467  01A3  00F0               	movwf	??_isr
  1468  01A4  0870               	movf	??_isr,w
  1469  01A5  00FA               	movwf	_z
  1470                           
  1471                           ;MainHall.c: 75:                 BF = 0;
  1472  01A6  1683               	bsf	3,5	;RP0=1, select bank1
  1473  01A7  1303               	bcf	3,6	;RP1=0, select bank1
  1474  01A8  1014               	bcf	20,0	;volatile
  1475                           
  1476                           ;MainHall.c: 76:                 SSPBUF = door;
  1477  01A9  0877               	movf	_door,w
  1478  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  1479  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  1480  01AC  0093               	movwf	19	;volatile
  1481                           
  1482                           ;MainHall.c: 77:                 SSPCONbits.CKP = 1;
  1483  01AD  1614               	bsf	20,4	;volatile
  1484                           
  1485                           ;MainHall.c: 78:                 _delay((unsigned long)((250)*(8000000/4000000.0)));
  1486  01AE  30A6               	movlw	166
  1487  01AF  00F0               	movwf	??_isr
  1488  01B0                     u49_27:	
  1489  01B0  0BF0               	decfsz	??_isr,f
  1490  01B1  29B0               	goto	u49_27
  1491  01B2  0000               	nop
  1492  01B3                     i1l165:	
  1493                           ;MainHall.c: 79:                 while(SSPSTATbits.BF);
  1494                           
  1495  01B3  1683               	bsf	3,5	;RP0=1, select bank1
  1496  01B4  1303               	bcf	3,6	;RP1=0, select bank1
  1497  01B5  1814               	btfsc	20,0	;volatile
  1498  01B6  29B3               	goto	i1l165
  1499  01B7                     i1l163:	
  1500                           
  1501                           ;MainHall.c: 82:             PIR1bits.SSPIF = 0;
  1502  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  1503  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  1504  01B9  118C               	bcf	12,3	;volatile
  1505  01BA                     i1l168:	
  1506  01BA  0872               	movf	??_isr+2,w
  1507  01BB  008A               	movwf	10
  1508  01BC  0E71               	swapf	(??_isr+1)^(0+4294967168),w
  1509  01BD  0083               	movwf	3
  1510  01BE  0EFE               	swapf	126,f
  1511  01BF  0E7E               	swapf	126,w
  1512  01C0  0009               	retfie
  1513  01C1                     __end_of_isr:	
  1514  007E                     btemp	set	126	;btemp
  1515  007E                     wtemp0	set	126
  1516                           
  1517                           	psect	intentry
  1518  0004                     __pintentry:	
  1519                           ;incstack = 0
  1520                           ; Regs used in _isr: [wreg]
  1521                           
  1522  0004                     interrupt_function:	
  1523  007E                     saved_w	set	btemp
  1524  0004  00FE               	movwf	btemp
  1525  0005  0E03               	swapf	3,w
  1526  0006  00F1               	movwf	??_isr+1
  1527  0007  080A               	movf	10,w
  1528  0008  00F2               	movwf	??_isr+2
  1529  0009  120A  118A  2970   	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80      3       5
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_setup
    _setup->_ADC_channel
    _setup->_initOscilador

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     186
                                              0 BANK0      3     3      0
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0     186
                                              6 COMMON     1     1      0
                        _ADC_channel
                     _I2C_Slave_Init
                            _initADC
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _initADC                                              2     2      0      22
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Slave_Init                                       2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_channel                                          3     3      0      44
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _ADC_channel
     _I2C_Slave_Init
     _initADC
     _initOscilador

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      10       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3       5       5        6.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      10      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Mar 07 23:03:54 2019

                       _z 007A               __CFG_CP$OFF 0000               _SSPSTATbits 0094  
                      _BF 04A0                        l80 003E                        l81 0045  
                      l90 0084                        l82 004C                        l91 008B  
                      l83 0053                        l84 005A                        l76 0029  
                      l85 0061                        l86 0068                        l78 0030  
                      l87 006F                        l79 0037                        l88 0076  
                      l89 007D                       l129 011A                       l174 0124  
                     l183 0162                       _ADC 0078                       l179 0147  
                     l189 016D                       _GIE 005F                       u400 0154  
                     u410 015B                       u402 0155                       u412 015C  
            __CFG_CPD$OFF 0000                       u477 0138                       _key 0079  
                     _isr 0170                       _val 0023              __CFG_LVP$OFF 0000  
                    l1019 0092                      l1051 00D4                      l1061 00F3  
                    l1053 00DA                      l1063 00F3                      l1055 00E0  
                    l1047 00C9                      l1225 0100                      l1057 00E6  
                    l1049 00CE                      l1227 009A                      l1059 00EC  
                    l1067 00F8                      l1171 014A                      l1173 014B  
                    l1165 0121                      l1167 012A                      l1179 0165  
                    ?_isr 0070                      _PEIE 005E                      _RCEN 048B  
            __CFG_WRT$OFF 0000                      _cont 0024                      _door 0077  
                    _main 011C                      btemp 007E                      start 000C  
           __CFG_IESO$OFF 0000      __size_of_ADC_channel 00AC             __CFG_MCLRE$ON 0000  
                   ??_isr 0070                     ?_main 0070             __CFG_WDTE$OFF 0000  
                   _ANSEL 0188                     i1l160 018D                     i1l163 01B7  
                   i1l165 01B3                     i1l159 019D                     i1l168 01BA  
                   i1l933 0180                     i1l925 0179                     _PORTA 0005  
                   _PORTB 0006                     u48_27 0199                     _TRISA 0085  
                   _TRISB 0086                     u49_27 01B0                     _SSPIE 0463  
                   _SSPIF 0063            __CFG_FCMEN$OFF 0000           __end_of_initADC 021B  
                   _setup 01C1            __CFG_BOREN$OFF 0000                     pclath 000A  
                   status 0003                     wtemp0 007E           __initialization 000F  
            __end_of_main 0170    __size_of_initOscilador 0055                    ??_main 0020  
                  _ADRESH 001E                    ?_setup 0070                    _ANSELH 0189  
                  _SSPADD 0093                    _TRISC3 043B                    _TRISC4 043C  
                  _SSPCON 0014                    _SSPBUF 0013            __CFG_PWRTE$OFF 0000  
               ??_initADC 0073                    saved_w 007E   __end_of__initialization 0017  
           _initOscilador 00C7            __pcstackCOMMON 0070   __size_of_I2C_Slave_Init 0019  
           __end_of_setup 01EE                   ??_setup 0076     I2C_Slave_Init@address 0073  
              __pbssBANK0 0023            ?_initOscilador 0070                __pmaintext 011C  
              __pintentry 0004                   _SSPCON2 0091                   _SSPSTAT 0094  
     initOscilador@option 0075             ??_ADC_channel 0073                 _ANSELbits 0188  
                 __ptext1 01C1                   __ptext2 00C7                   __ptext3 0207  
                 __ptext4 01EE                   __ptext5 001B                   __ptext6 0170  
                 _initADC 0207              __size_of_isr 0051           ??_initOscilador 0073  
    end_of_initialization 0017            _I2C_Slave_Init 01EE       __end_of_ADC_channel 00C7  
               _PORTAbits 0005              ADC_channel@a 0075                 _TRISAbits 0085  
               _TRISBbits 0086                 _TRISEbits 0089    __end_of_I2C_Slave_Init 0207  
     start_initialization 000F               __end_of_isr 01C1               _ADC_channel 001B  
__CFG_FOSC$INTRC_NOCLKOUT 0000           ?_I2C_Slave_Init 0073               __pbssCOMMON 0077  
               ___latbits 0002             __pcstackBANK0 0020                  ?_initADC 0070  
          __size_of_setup 002D         interrupt_function 0004                  _PIR1bits 000C  
              _ADCON0bits 001F                _ADCON1bits 009F     __end_of_initOscilador 011C  
              _ANSELHbits 0189          __size_of_initADC 0014         __CFG_BOR4V$BOR40V 0000  
        ??_I2C_Slave_Init 0075             __size_of_main 0054              ?_ADC_channel 0070  
                initADC@a 0074                _INTCONbits 000B                  intlevel1 0000  
              _OSCCONbits 008F               _SSPCON2bits 0091                _SSPCONbits 0014  



Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Feb 28 15:45:30 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2
    26                           	psect	text17,local,class=CODE,merge=1,delta=2
    27                           	psect	text18,local,class=CODE,merge=1,delta=2
    28                           	psect	text19,local,class=CODE,merge=1,delta=2
    29                           	psect	text20,local,class=CODE,merge=1,delta=2
    30                           	psect	text21,local,class=CODE,merge=1,delta=2
    31                           	psect	text22,local,class=CODE,merge=1,delta=2
    32                           	psect	text23,local,class=CODE,merge=1,delta=2
    33                           	psect	text24,local,class=CODE,merge=1,delta=2
    34                           	psect	text25,local,class=CODE,merge=1,delta=2
    35                           	psect	text26,local,class=CODE,merge=1,delta=2
    36                           	psect	text27,local,class=CODE,merge=1,delta=2
    37                           	psect	text28,local,class=CODE,merge=1,delta=2
    38                           	psect	text29,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     
    41                           ; Version 2.05
    42                           ; Generated 20/12/2018 GMT
    43                           ; 
    44                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16F887 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0008                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  000E                     	;# 
    91  000F                     	;# 
    92  0010                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0013                     	;# 
    96  0014                     	;# 
    97  0015                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  001D                     	;# 
   108  001E                     	;# 
   109  001F                     	;# 
   110  0081                     	;# 
   111  0085                     	;# 
   112  0086                     	;# 
   113  0087                     	;# 
   114  0088                     	;# 
   115  0089                     	;# 
   116  008C                     	;# 
   117  008D                     	;# 
   118  008E                     	;# 
   119  008F                     	;# 
   120  0090                     	;# 
   121  0091                     	;# 
   122  0092                     	;# 
   123  0093                     	;# 
   124  0093                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0095                     	;# 
   128  0096                     	;# 
   129  0097                     	;# 
   130  0098                     	;# 
   131  0099                     	;# 
   132  009A                     	;# 
   133  009B                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  009F                     	;# 
   138  0105                     	;# 
   139  0107                     	;# 
   140  0108                     	;# 
   141  0109                     	;# 
   142  010C                     	;# 
   143  010C                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  0185                     	;# 
   148  0187                     	;# 
   149  0188                     	;# 
   150  0189                     	;# 
   151  018C                     	;# 
   152  018D                     	;# 
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0008                     	;# 
   162  0009                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  000E                     	;# 
   169  000F                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0013                     	;# 
   174  0014                     	;# 
   175  0015                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0017                     	;# 
   179  0018                     	;# 
   180  0019                     	;# 
   181  001A                     	;# 
   182  001B                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  001D                     	;# 
   186  001E                     	;# 
   187  001F                     	;# 
   188  0081                     	;# 
   189  0085                     	;# 
   190  0086                     	;# 
   191  0087                     	;# 
   192  0088                     	;# 
   193  0089                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  008F                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0093                     	;# 
   203  0093                     	;# 
   204  0094                     	;# 
   205  0095                     	;# 
   206  0096                     	;# 
   207  0097                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009C                     	;# 
   213  009D                     	;# 
   214  009E                     	;# 
   215  009F                     	;# 
   216  0105                     	;# 
   217  0107                     	;# 
   218  0108                     	;# 
   219  0109                     	;# 
   220  010C                     	;# 
   221  010C                     	;# 
   222  010D                     	;# 
   223  010E                     	;# 
   224  010F                     	;# 
   225  0185                     	;# 
   226  0187                     	;# 
   227  0188                     	;# 
   228  0189                     	;# 
   229  018C                     	;# 
   230  018D                     	;# 
   231                           
   232                           	psect	strings
   233  0003                     __pstrings:	
   234  0003                     stringtab:	
   235  0003                     __stringtab:	
   236                           
   237                           ;	String table - string pointers are 1 byte each
   238  0003  1BFF               	btfsc	btemp+1,7
   239  0004  280D               	ljmp	stringcode
   240  0005  1383               	bcf	3,7
   241  0006  187F               	btfsc	btemp+1,0
   242  0007  1783               	bsf	3,7
   243  0008  0800               	movf	0,w
   244  0009  0A84               	incf	4,f
   245  000A  1903               	skipnz
   246  000B  0AFF               	incf	btemp+1,f
   247  000C  0008               	return
   248  000D                     stringcode:	
   249  000D                     stringdir:	
   250  000D  3000               	movlw	high stringdir
   251  000E  008A               	movwf	10
   252  000F  0804               	movf	4,w
   253  0010  0A84               	incf	4,f
   254  0011  0782               	addwf	2,f
   255  0012                     __stringbase:	
   256  0012  3400               	retlw	0
   257  0013                     __end_of__stringtab:	
   258  0013                     _dpowers:	
   259  0013  3401               	retlw	1
   260  0014  3400               	retlw	0
   261  0015  340A               	retlw	10
   262  0016  3400               	retlw	0
   263  0017  3464               	retlw	100
   264  0018  3400               	retlw	0
   265  0019  34E8               	retlw	232
   266  001A  3403               	retlw	3
   267  001B  3410               	retlw	16
   268  001C  3427               	retlw	39
   269  001D                     __end_of_dpowers:	
   270  0005                     _PORTA	set	5
   271  0006                     _PORTB	set	6
   272  0007                     _PORTCbits	set	7
   273  0005                     _PORTAbits	set	5
   274  0006                     _PORTBbits	set	6
   275  0013                     _SSPBUF	set	19
   276  0014                     _SSPCON	set	20
   277  0063                     _SSPIF	set	99
   278  005E                     _PEIE	set	94
   279  005F                     _GIE	set	95
   280  0087                     _TRISC	set	135
   281  0085                     _TRISA	set	133
   282  0086                     _TRISB	set	134
   283  008F                     _OSCCONbits	set	143
   284  0091                     _SSPCON2bits	set	145
   285  0094                     _SSPSTAT	set	148
   286  0093                     _SSPADD	set	147
   287  0091                     _SSPCON2	set	145
   288  0463                     _SSPIE	set	1123
   289  048B                     _RCEN	set	1163
   290  043C                     _TRISC4	set	1084
   291  043B                     _TRISC3	set	1083
   292  0188                     _ANSEL	set	392
   293  0189                     _ANSELH	set	393
   294  001D                     STR_1:	
   295  001D  3444               	retlw	68	;'D'
   296  001E  346F               	retlw	111	;'o'
   297  001F  346F               	retlw	111	;'o'
   298  0020  3472               	retlw	114	;'r'
   299  0021  3420               	retlw	32	;' '
   300  0022  344F               	retlw	79	;'O'
   301  0023  3450               	retlw	80	;'P'
   302  0024  3445               	retlw	69	;'E'
   303  0025  344E               	retlw	78	;'N'
   304  0026  3420               	retlw	32	;' '
   305  0027  3420               	retlw	32	;' '
   306  0028  3400               	retlw	0
   307  0029                     STR_2:	
   308  0029  3444               	retlw	68	;'D'
   309  002A  346F               	retlw	111	;'o'
   310  002B  346F               	retlw	111	;'o'
   311  002C  3472               	retlw	114	;'r'
   312  002D  3420               	retlw	32	;' '
   313  002E  3443               	retlw	67	;'C'
   314  002F  344C               	retlw	76	;'L'
   315  0030  344F               	retlw	79	;'O'
   316  0031  3453               	retlw	83	;'S'
   317  0032  3445               	retlw	69	;'E'
   318  0033  3444               	retlw	68	;'D'
   319  0034  3400               	retlw	0
   320  0035                     STR_4:	
   321  0035  3454               	retlw	84	;'T'
   322  0036  3472               	retlw	114	;'r'
   323  0037  3469               	retlw	105	;'i'
   324  0038  3470               	retlw	112	;'p'
   325  0039  3420               	retlw	32	;' '
   326  003A  344F               	retlw	79	;'O'
   327  003B  344E               	retlw	78	;'N'
   328  003C  3420               	retlw	32	;' '
   329  003D  3400               	retlw	0
   330  003E                     STR_5:	
   331  003E  3454               	retlw	84	;'T'
   332  003F  3472               	retlw	114	;'r'
   333  0040  3469               	retlw	105	;'i'
   334  0041  3470               	retlw	112	;'p'
   335  0042  3420               	retlw	32	;' '
   336  0043  344F               	retlw	79	;'O'
   337  0044  3446               	retlw	70	;'F'
   338  0045  3446               	retlw	70	;'F'
   339  0046  3400               	retlw	0
   340  0047                     STR_6:	
   341  0047  3450               	retlw	80	;'P'
   342  0048  3449               	retlw	73	;'I'
   343  0049  3452               	retlw	82	;'R'
   344  004A  3420               	retlw	32	;' '
   345  004B  344F               	retlw	79	;'O'
   346  004C  344E               	retlw	78	;'N'
   347  004D  3420               	retlw	32	;' '
   348  004E  3400               	retlw	0
   349  004F                     STR_7:	
   350  004F  3450               	retlw	80	;'P'
   351  0050  3449               	retlw	73	;'I'
   352  0051  3452               	retlw	82	;'R'
   353  0052  3420               	retlw	32	;' '
   354  0053  344F               	retlw	79	;'O'
   355  0054  3446               	retlw	70	;'F'
   356  0055  3446               	retlw	70	;'F'
   357  0056  3400               	retlw	0
   358  0057                     STR_3:	
   359  0057  3432               	retlw	50	;'2'
   360  0058  3433               	retlw	51	;'3'
   361  0059  342E               	retlw	46	;'.'
   362  005A  3435               	retlw	53	;'5'
   363  005B  3430               	retlw	48	;'0'
   364  005C  3400               	retlw	0
   365  005D                     STR_11:	
   366  005D  342E               	retlw	46	;'.'
   367  005E  3425               	retlw	37	;'%'
   368  005F  3464               	retlw	100	;'d'
   369  0060  3430               	retlw	48	;'0'
   370  0061  3400               	retlw	0
   371  0062                     STR_12:	
   372  0062  342E               	retlw	46	;'.'
   373  0063  3425               	retlw	37	;'%'
   374  0064  3464               	retlw	100	;'d'
   375  0065  3400               	retlw	0
   376  0048                     
   377                           ; #config settings
   378  0000                     
   379                           	psect	cinit
   380  07F3                     start_initialization:	
   381  07F3                     __initialization:	
   382                           
   383                           ; Clear objects allocated to BANK0
   384  07F3  1283               	bcf	3,5	;RP0=0, select bank0
   385  07F4  1303               	bcf	3,6	;RP1=0, select bank0
   386  07F5  01BC               	clrf	__pbssBANK0& (0+127)
   387  07F6  01BD               	clrf	(__pbssBANK0+1)& (0+127)
   388  07F7  01BE               	clrf	(__pbssBANK0+2)& (0+127)
   389  07F8  01BF               	clrf	(__pbssBANK0+3)& (0+127)
   390  07F9  01C0               	clrf	(__pbssBANK0+4)& (0+127)
   391  07FA  01C1               	clrf	(__pbssBANK0+5)& (0+127)
   392  07FB  01C2               	clrf	(__pbssBANK0+6)& (0+127)
   393  07FC                     end_of_initialization:	
   394                           ;End of C runtime variable initialization code
   395                           
   396  07FC                     __end_of__initialization:	
   397  07FC  0183               	clrf	3
   398  07FD  120A  118A  2EEB   	ljmp	_main	;jump to C main() function
   399                           
   400                           	psect	bssBANK0
   401  003C                     __pbssBANK0:	
   402  003C                     _state:	
   403  003C                     	ds	1
   404  003D                     _IR:	
   405  003D                     	ds	1
   406  003E                     _PIR:	
   407  003E                     	ds	1
   408  003F                     _trip:	
   409  003F                     	ds	1
   410  0040                     _door:	
   411  0040                     	ds	1
   412  0041                     _temp:	
   413  0041                     	ds	1
   414  0042                     _time:	
   415  0042                     	ds	1
   416                           
   417                           	psect	cstackCOMMON
   418  0070                     __pcstackCOMMON:	
   419  0070                     ?_setup:	
   420  0070                     ?_get_time:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ?_get_temp:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     ?_get_hall:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ?_get_tripwire:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?_get_PIR:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     ?_get_IR:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0070                     ?_strcat:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0070                     ?_I2C_Master_Wait:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ??_I2C_Master_Wait:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ?_I2C_Master_Start:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0070                     ??_I2C_Master_Start:	
   451                           ; 1 bytes @ 0x0
   452                           
   453  0070                     ?_I2C_Master_RepeatedStart:	
   454                           ; 1 bytes @ 0x0
   455                           
   456  0070                     ??_I2C_Master_RepeatedStart:	
   457                           ; 1 bytes @ 0x0
   458                           
   459  0070                     ?_I2C_Master_Stop:	
   460                           ; 1 bytes @ 0x0
   461                           
   462  0070                     ??_I2C_Master_Stop:	
   463                           ; 1 bytes @ 0x0
   464                           
   465  0070                     ?_I2C_Master_Write:	
   466                           ; 1 bytes @ 0x0
   467                           
   468  0070                     ?_Lcd_Port:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  0070                     ??_Lcd_Port:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0070                     ?_Lcd_Cmd:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ?_Lcd_Clear:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     ?_Lcd_Init:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ?_Lcd_Write_Char:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0070                     ?_initOscilador:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     ??_initOscilador:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0070                     ?_main:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     ?___bmul:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ?_strcmp:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0070                     ?_I2C_Master_Read:	
   502                           ; 2 bytes @ 0x0
   503                           
   504  0070                     ?___lwdiv:	
   505                           ; 2 bytes @ 0x0
   506                           
   507  0070                     ?___lldiv:	
   508                           ; 2 bytes @ 0x0
   509                           
   510  0070                     Lcd_Port@a:	
   511                           ; 4 bytes @ 0x0
   512                           
   513  0070                     ___bmul@multiplicand:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0070                     strcat@from:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0070                     strcmp@s2:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0070                     I2C_Master_Write@d:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0070                     I2C_Master_Read@a:	
   526                           ; 2 bytes @ 0x0
   527                           
   528  0070                     ___lwdiv@divisor:	
   529                           ; 2 bytes @ 0x0
   530                           
   531  0070                     ___lldiv@divisor:	
   532                           ; 2 bytes @ 0x0
   533                           
   534                           
   535                           ; 4 bytes @ 0x0
   536  0070                     	ds	1
   537  0071                     ??_strcat:	
   538  0071                     ??_Lcd_Cmd:	
   539                           ; 1 bytes @ 0x1
   540                           
   541  0071                     ??_Lcd_Write_Char:	
   542                           ; 1 bytes @ 0x1
   543                           
   544  0071                     ??___bmul:	
   545                           ; 1 bytes @ 0x1
   546                           
   547                           
   548                           ; 1 bytes @ 0x1
   549  0071                     	ds	1
   550  0072                     ??_strcmp:	
   551  0072                     ??_I2C_Master_Write:	
   552                           ; 1 bytes @ 0x2
   553                           
   554  0072                     ??_I2C_Master_Read:	
   555                           ; 1 bytes @ 0x2
   556                           
   557  0072                     Lcd_Write_Char@temp:	
   558                           ; 1 bytes @ 0x2
   559                           
   560  0072                     initOscilador@option:	
   561                           ; 1 bytes @ 0x2
   562                           
   563  0072                     ___bmul@product:	
   564                           ; 1 bytes @ 0x2
   565                           
   566  0072                     strcat@to:	
   567                           ; 1 bytes @ 0x2
   568                           
   569  0072                     ___lwdiv@dividend:	
   570                           ; 1 bytes @ 0x2
   571                           
   572                           
   573                           ; 2 bytes @ 0x2
   574  0072                     	ds	1
   575  0073                     Lcd_Cmd@a:	
   576  0073                     Lcd_Write_Char@y:	
   577                           ; 1 bytes @ 0x3
   578                           
   579  0073                     ___bmul@multiplier:	
   580                           ; 1 bytes @ 0x3
   581                           
   582  0073                     strcat@cp:	
   583                           ; 1 bytes @ 0x3
   584                           
   585                           
   586                           ; 1 bytes @ 0x3
   587  0073                     	ds	1
   588  0074                     ??_Lcd_Clear:	
   589  0074                     ?_Lcd_Set_Cursor:	
   590                           ; 1 bytes @ 0x4
   591                           
   592  0074                     ??_Lcd_Init:	
   593                           ; 1 bytes @ 0x4
   594                           
   595  0074                     ??___lwdiv:	
   596                           ; 1 bytes @ 0x4
   597                           
   598  0074                     Lcd_Set_Cursor@b:	
   599                           ; 1 bytes @ 0x4
   600                           
   601  0074                     Lcd_Write_Char@a:	
   602                           ; 1 bytes @ 0x4
   603                           
   604  0074                     I2C_Master_Read@temp:	
   605                           ; 1 bytes @ 0x4
   606                           
   607  0074                     ___lldiv@dividend:	
   608                           ; 2 bytes @ 0x4
   609                           
   610                           
   611                           ; 4 bytes @ 0x4
   612  0074                     	ds	1
   613  0075                     ??_Lcd_Set_Cursor:	
   614  0075                     ?_Lcd_Write_String:	
   615                           ; 1 bytes @ 0x5
   616                           
   617  0075                     strcmp@r:	
   618                           ; 1 bytes @ 0x5
   619                           
   620  0075                     Lcd_Write_String@a:	
   621                           ; 1 bytes @ 0x5
   622                           
   623  0075                     ___lwdiv@quotient:	
   624                           ; 2 bytes @ 0x5
   625                           
   626                           
   627                           ; 2 bytes @ 0x5
   628  0075                     	ds	1
   629  0076                     ??_get_time:	
   630  0076                     ??_get_hall:	
   631                           ; 1 bytes @ 0x6
   632                           
   633  0076                     ??_get_tripwire:	
   634                           ; 1 bytes @ 0x6
   635                           
   636  0076                     ??_get_PIR:	
   637                           ; 1 bytes @ 0x6
   638                           
   639  0076                     ??_get_IR:	
   640                           ; 1 bytes @ 0x6
   641                           
   642  0076                     strcmp@s1:	
   643                           ; 1 bytes @ 0x6
   644                           
   645                           
   646                           ; 1 bytes @ 0x6
   647  0076                     	ds	1
   648  0077                     ??_Lcd_Write_String:	
   649  0077                     Lcd_Set_Cursor@a:	
   650                           ; 1 bytes @ 0x7
   651                           
   652  0077                     get_hall@key:	
   653                           ; 1 bytes @ 0x7
   654                           
   655  0077                     get_tripwire@trip:	
   656                           ; 1 bytes @ 0x7
   657                           
   658  0077                     get_PIR@PIR:	
   659                           ; 1 bytes @ 0x7
   660                           
   661  0077                     get_IR@IR:	
   662                           ; 1 bytes @ 0x7
   663                           
   664  0077                     ___lwdiv@counter:	
   665                           ; 1 bytes @ 0x7
   666                           
   667                           
   668                           ; 1 bytes @ 0x7
   669  0077                     	ds	1
   670  0078                     ??___lldiv:	
   671  0078                     ?___lwmod:	
   672                           ; 1 bytes @ 0x8
   673                           
   674  0078                     Lcd_Set_Cursor@z:	
   675                           ; 2 bytes @ 0x8
   676                           
   677  0078                     ___lwmod@divisor:	
   678                           ; 1 bytes @ 0x8
   679                           
   680                           
   681                           ; 2 bytes @ 0x8
   682  0078                     	ds	1
   683  0079                     Lcd_Set_Cursor@y:	
   684  0079                     ___lldiv@quotient:	
   685                           ; 1 bytes @ 0x9
   686                           
   687                           
   688                           ; 4 bytes @ 0x9
   689  0079                     	ds	1
   690  007A                     Lcd_Set_Cursor@temp:	
   691  007A                     Lcd_Write_String@i:	
   692                           ; 1 bytes @ 0xA
   693                           
   694  007A                     ___lwmod@dividend:	
   695                           ; 2 bytes @ 0xA
   696                           
   697                           
   698                           ; 2 bytes @ 0xA
   699  007A                     	ds	2
   700  007C                     ??___lwmod:	
   701                           
   702                           ; 1 bytes @ 0xC
   703  007C                     	ds	1
   704  007D                     ___lldiv@counter:	
   705  007D                     ___lwmod@counter:	
   706                           ; 1 bytes @ 0xD
   707                           
   708                           
   709                           ; 1 bytes @ 0xD
   710  007D                     	ds	1
   711  007E                     ??_setup:	
   712                           
   713                           	psect	cstackBANK0
   714  0020                     __pcstackBANK0:	
   715                           ; 1 bytes @ 0xE
   716                           
   717  0020                     ?_I2C_Master_Init:	
   718  0020                     ?_sprintf:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0020                     sprintf@f:	
   722                           ; 2 bytes @ 0x0
   723                           
   724  0020                     I2C_Master_Init@c:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0020                     get_time@string_time:	
   728                           ; 4 bytes @ 0x0
   729                           
   730                           
   731                           ; 6 bytes @ 0x0
   732  0020                     	ds	3
   733  0023                     ??_sprintf:	
   734                           
   735                           ; 1 bytes @ 0x3
   736  0023                     	ds	1
   737  0024                     ??_I2C_Master_Init:	
   738                           
   739                           ; 1 bytes @ 0x4
   740  0024                     	ds	2
   741  0026                     get_time@hour:	
   742  0026                     sprintf@ap:	
   743                           ; 1 bytes @ 0x6
   744                           
   745                           
   746                           ; 1 bytes @ 0x6
   747  0026                     	ds	1
   748  0027                     get_time@min:	
   749  0027                     sprintf@flag:	
   750                           ; 1 bytes @ 0x7
   751                           
   752                           
   753                           ; 1 bytes @ 0x7
   754  0027                     	ds	1
   755  0028                     sprintf@prec:	
   756                           
   757                           ; 1 bytes @ 0x8
   758  0028                     	ds	1
   759  0029                     sprintf@val:	
   760                           
   761                           ; 2 bytes @ 0x9
   762  0029                     	ds	2
   763  002B                     sprintf@sp:	
   764                           
   765                           ; 1 bytes @ 0xB
   766  002B                     	ds	1
   767  002C                     sprintf@c:	
   768                           
   769                           ; 1 bytes @ 0xC
   770  002C                     	ds	1
   771  002D                     ??_get_temp:	
   772                           
   773                           ; 1 bytes @ 0xD
   774  002D                     	ds	3
   775  0030                     get_temp@temperature:	
   776                           
   777                           ; 6 bytes @ 0x10
   778  0030                     	ds	6
   779  0036                     get_temp@decimal:	
   780                           
   781                           ; 3 bytes @ 0x16
   782  0036                     	ds	3
   783  0039                     get_temp@tempMSB:	
   784                           
   785                           ; 1 bytes @ 0x19
   786  0039                     	ds	1
   787  003A                     get_temp@tempLSB:	
   788                           
   789                           ; 1 bytes @ 0x1A
   790  003A                     	ds	1
   791  003B                     ??_main:	
   792                           
   793                           ; 1 bytes @ 0x1B
   794  003B                     	ds	1
   795                           
   796                           	psect	maintext
   797  06EB                     __pmaintext:	
   798 ;;
   799 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   800 ;;
   801 ;; *************** function _main *****************
   802 ;; Defined at:
   803 ;;		line 51 in file "mainMaster.c"
   804 ;; Parameters:    Size  Location     Type
   805 ;;		None
   806 ;; Auto vars:     Size  Location     Type
   807 ;;		None
   808 ;; Return value:  Size  Location     Type
   809 ;;                  1    wreg      void 
   810 ;; Registers used:
   811 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   812 ;; Tracked objects:
   813 ;;		On entry : B00/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   817 ;;      Params:         0       0       0       0       0
   818 ;;      Locals:         0       0       0       0       0
   819 ;;      Temps:          0       1       0       0       0
   820 ;;      Totals:         0       1       0       0       0
   821 ;;Total ram usage:        1 bytes
   822 ;; Hardware stack levels required when called:    4
   823 ;; This function calls:
   824 ;;		_Lcd_Clear
   825 ;;		_Lcd_Set_Cursor
   826 ;;		_Lcd_Write_Char
   827 ;;		_Lcd_Write_String
   828 ;;		_get_IR
   829 ;;		_get_PIR
   830 ;;		_get_hall
   831 ;;		_get_temp
   832 ;;		_get_time
   833 ;;		_get_tripwire
   834 ;;		_setup
   835 ;;		_strcmp
   836 ;; This function is called by:
   837 ;;		Startup code after reset
   838 ;; This function uses a non-reentrant model
   839 ;;
   840                           
   841                           
   842                           ;psect for function _main
   843  06EB                     _main:	
   844                           
   845                           ;mainMaster.c: 52:     setup();
   846                           
   847                           ;incstack = 0
   848                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   849  06EB  120A  118A  220F  120A  118A  	fcall	_setup
   850                           
   851                           ;mainMaster.c: 53:     state = 0;
   852  06F0  1283               	bcf	3,5	;RP0=0, select bank0
   853  06F1  1303               	bcf	3,6	;RP1=0, select bank0
   854  06F2  01BC               	clrf	_state
   855                           
   856                           ;mainMaster.c: 54:     Lcd_Clear();
   857  06F3  120A  118A  211D  120A  118A  	fcall	_Lcd_Clear
   858  06F8                     l1820:	
   859                           
   860                           ;mainMaster.c: 57:         if (state == 0){
   861  06F8  1283               	bcf	3,5	;RP0=0, select bank0
   862  06F9  1303               	bcf	3,6	;RP1=0, select bank0
   863  06FA  083C               	movf	_state,w
   864  06FB  1D03               	btfss	3,2
   865  06FC  2FA2               	goto	l1854
   866                           
   867                           ;mainMaster.c: 60:         time = get_time();
   868  06FD  120A  118A  2500  120A  118A  	fcall	_get_time
   869  0702  1283               	bcf	3,5	;RP0=0, select bank0
   870  0703  1303               	bcf	3,6	;RP1=0, select bank0
   871  0704  00BB               	movwf	??_main
   872  0705  083B               	movf	??_main,w
   873  0706  00C2               	movwf	_time
   874                           
   875                           ;mainMaster.c: 61:         Lcd_Set_Cursor(1,1);
   876  0707  01F4               	clrf	Lcd_Set_Cursor@b
   877  0708  0AF4               	incf	Lcd_Set_Cursor@b,f
   878  0709  3001               	movlw	1
   879  070A  120A  118A  23A8  120A  118A  	fcall	_Lcd_Set_Cursor
   880                           
   881                           ;mainMaster.c: 62:         Lcd_Write_String(time);
   882  070F  1283               	bcf	3,5	;RP0=0, select bank0
   883  0710  1303               	bcf	3,6	;RP1=0, select bank0
   884  0711  0842               	movf	_time,w
   885  0712  00F5               	movwf	Lcd_Write_String@a
   886  0713  3000               	movlw	0
   887  0714  00F6               	movwf	Lcd_Write_String@a+1
   888  0715  120A  118A  236B  120A  118A  	fcall	_Lcd_Write_String
   889                           
   890                           ;mainMaster.c: 63:         temp = get_temp();
   891  071A  120A  118A  2576  120A  118A  	fcall	_get_temp
   892  071F  1283               	bcf	3,5	;RP0=0, select bank0
   893  0720  1303               	bcf	3,6	;RP1=0, select bank0
   894  0721  00BB               	movwf	??_main
   895  0722  083B               	movf	??_main,w
   896  0723  00C1               	movwf	_temp
   897                           
   898                           ;mainMaster.c: 64:         Lcd_Set_Cursor(2,1);
   899  0724  01F4               	clrf	Lcd_Set_Cursor@b
   900  0725  0AF4               	incf	Lcd_Set_Cursor@b,f
   901  0726  3002               	movlw	2
   902  0727  120A  118A  23A8  120A  118A  	fcall	_Lcd_Set_Cursor
   903                           
   904                           ;mainMaster.c: 65:         Lcd_Write_String(temp);
   905  072C  1283               	bcf	3,5	;RP0=0, select bank0
   906  072D  1303               	bcf	3,6	;RP1=0, select bank0
   907  072E  0841               	movf	_temp,w
   908  072F  00F5               	movwf	Lcd_Write_String@a
   909  0730  3000               	movlw	0
   910  0731  00F6               	movwf	Lcd_Write_String@a+1
   911  0732  120A  118A  236B  120A  118A  	fcall	_Lcd_Write_String
   912                           
   913                           ;mainMaster.c: 66:         Lcd_Write_Char(223);
   914  0737  30DF               	movlw	223
   915  0738  120A  118A  22F6  120A  118A  	fcall	_Lcd_Write_Char
   916                           
   917                           ;mainMaster.c: 67:         Lcd_Write_Char('C');
   918  073D  3043               	movlw	67
   919  073E  120A  118A  22F6  120A  118A  	fcall	_Lcd_Write_Char
   920                           
   921                           ;mainMaster.c: 68:         door = get_hall();
   922  0743  120A  118A  218C  120A  118A  	fcall	_get_hall
   923  0748  1283               	bcf	3,5	;RP0=0, select bank0
   924  0749  1303               	bcf	3,6	;RP1=0, select bank0
   925  074A  00BB               	movwf	??_main
   926  074B  083B               	movf	??_main,w
   927  074C  00C0               	movwf	_door
   928                           
   929                           ;mainMaster.c: 69:         Lcd_Set_Cursor(1,7);
   930  074D  3007               	movlw	7
   931  074E  00BB               	movwf	??_main
   932  074F  083B               	movf	??_main,w
   933  0750  00F4               	movwf	Lcd_Set_Cursor@b
   934  0751  3001               	movlw	1
   935  0752  120A  118A  23A8  120A  118A  	fcall	_Lcd_Set_Cursor
   936                           
   937                           ;mainMaster.c: 70:         if (door == 1){
   938  0757  1283               	bcf	3,5	;RP0=0, select bank0
   939  0758  1303               	bcf	3,6	;RP1=0, select bank0
   940  0759  0340               	decf	_door,w
   941  075A  1D03               	btfss	3,2
   942  075B  2F5E               	goto	l1842
   943                           
   944                           ;mainMaster.c: 71:             Lcd_Write_String("Door OPEN  ");
   945  075C  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   946  075D  2F5F               	goto	L1
   947  075E                     l1842:	
   948                           ;mainMaster.c: 72:         } else {
   949                           
   950                           
   951                           ;mainMaster.c: 73:             Lcd_Write_String("Door CLOSED");
   952  075E  3017               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   953  075F                     L1:	
   954  075F  00F5               	movwf	Lcd_Write_String@a
   955  0760  3080               	movlw	128
   956  0761  00F6               	movwf	Lcd_Write_String@a+1
   957  0762  120A  118A  236B  120A  118A  	fcall	_Lcd_Write_String
   958                           
   959                           ;mainMaster.c: 76:         if (strcmp(temp,"23.50") > 0){
   960                           
   961                           ;mainMaster.c: 74:         }
   962  0767  3045               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   963  0768  1283               	bcf	3,5	;RP0=0, select bank0
   964  0769  1303               	bcf	3,6	;RP1=0, select bank0
   965  076A  00BB               	movwf	??_main
   966  076B  083B               	movf	??_main,w
   967  076C  00F0               	movwf	strcmp@s2
   968  076D  0841               	movf	_temp,w
   969  076E  120A  118A  2238  120A  118A  	fcall	_strcmp
   970  0773  0871               	movf	?_strcmp+1,w
   971  0774  3A80               	xorlw	128
   972  0775  00FF               	movwf	127
   973  0776  3080               	movlw	128
   974  0777  027F               	subwf	127,w
   975  0778  1D03               	skipz
   976  0779  2F7C               	goto	u1165
   977  077A  3001               	movlw	1
   978  077B  0270               	subwf	?_strcmp,w
   979  077C                     u1165:	
   980  077C  1C03               	skipc
   981  077D  2F82               	goto	l177
   982                           
   983                           ;mainMaster.c: 77:             PORTAbits.RA0 = 1;
   984  077E  1283               	bcf	3,5	;RP0=0, select bank0
   985  077F  1303               	bcf	3,6	;RP1=0, select bank0
   986  0780  1405               	bsf	5,0	;volatile
   987                           
   988                           ;mainMaster.c: 78:         } else {
   989  0781  2F85               	goto	l1846
   990  0782                     l177:	
   991                           
   992                           ;mainMaster.c: 79:             PORTAbits.RA0 = 0;
   993  0782  1283               	bcf	3,5	;RP0=0, select bank0
   994  0783  1303               	bcf	3,6	;RP1=0, select bank0
   995  0784  1005               	bcf	5,0	;volatile
   996  0785                     l1846:	
   997                           
   998                           ;mainMaster.c: 81:         trip = get_tripwire();
   999  0785  120A  118A  21AB  120A  118A  	fcall	_get_tripwire
  1000  078A  1283               	bcf	3,5	;RP0=0, select bank0
  1001  078B  1303               	bcf	3,6	;RP1=0, select bank0
  1002  078C  00BB               	movwf	??_main
  1003  078D  083B               	movf	??_main,w
  1004  078E  00BF               	movwf	_trip
  1005                           
  1006                           ;mainMaster.c: 82:         Lcd_Set_Cursor(2,9);
  1007  078F  3009               	movlw	9
  1008  0790  00BB               	movwf	??_main
  1009  0791  083B               	movf	??_main,w
  1010  0792  00F4               	movwf	Lcd_Set_Cursor@b
  1011  0793  3002               	movlw	2
  1012  0794  120A  118A  23A8  120A  118A  	fcall	_Lcd_Set_Cursor
  1013                           
  1014                           ;mainMaster.c: 83:         if (trip == 1){
  1015  0799  1283               	bcf	3,5	;RP0=0, select bank0
  1016  079A  1303               	bcf	3,6	;RP1=0, select bank0
  1017  079B  033F               	decf	_trip,w
  1018  079C  1D03               	btfss	3,2
  1019  079D  2FA0               	goto	l1852
  1020                           
  1021                           ;mainMaster.c: 84:             Lcd_Write_String("Trip ON ");
  1022  079E  3023               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1023  079F  2FDE               	goto	L2
  1024  07A0                     l1852:	
  1025                           ;mainMaster.c: 85:         } else {
  1026                           
  1027                           
  1028                           ;mainMaster.c: 86:             Lcd_Write_String("Trip OFF");
  1029  07A0  302C               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1030  07A1  2FDE               	goto	L2
  1031  07A2                     l1854:	
  1032                           
  1033                           ;mainMaster.c: 91:             PIR = get_PIR();
  1034  07A2  120A  118A  216D  120A  118A  	fcall	_get_PIR
  1035  07A7  1283               	bcf	3,5	;RP0=0, select bank0
  1036  07A8  1303               	bcf	3,6	;RP1=0, select bank0
  1037  07A9  00BB               	movwf	??_main
  1038  07AA  083B               	movf	??_main,w
  1039  07AB  00BE               	movwf	_PIR
  1040                           
  1041                           ;mainMaster.c: 92:             Lcd_Set_Cursor(1,1);
  1042  07AC  01F4               	clrf	Lcd_Set_Cursor@b
  1043  07AD  0AF4               	incf	Lcd_Set_Cursor@b,f
  1044  07AE  3001               	movlw	1
  1045  07AF  120A  118A  23A8  120A  118A  	fcall	_Lcd_Set_Cursor
  1046                           
  1047                           ;mainMaster.c: 93:         if (PIR == 1){
  1048  07B4  1283               	bcf	3,5	;RP0=0, select bank0
  1049  07B5  1303               	bcf	3,6	;RP1=0, select bank0
  1050  07B6  033E               	decf	_PIR,w
  1051  07B7  1D03               	btfss	3,2
  1052  07B8  2FBB               	goto	l1860
  1053                           
  1054                           ;mainMaster.c: 94:             Lcd_Write_String("PIR ON ");
  1055  07B9  3035               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1056  07BA  2FBC               	goto	L3
  1057  07BB                     l1860:	
  1058                           ;mainMaster.c: 95:         } else {
  1059                           
  1060                           
  1061                           ;mainMaster.c: 96:             Lcd_Write_String("PIR OFF");
  1062  07BB  303D               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1063  07BC                     L3:	
  1064  07BC  00F5               	movwf	Lcd_Write_String@a
  1065  07BD  3080               	movlw	128
  1066  07BE  00F6               	movwf	Lcd_Write_String@a+1
  1067  07BF  120A  118A  236B  120A  118A  	fcall	_Lcd_Write_String
  1068                           
  1069                           ;mainMaster.c: 98:             IR = get_IR();
  1070  07C4  120A  118A  21CA  120A  118A  	fcall	_get_IR
  1071  07C9  1283               	bcf	3,5	;RP0=0, select bank0
  1072  07CA  1303               	bcf	3,6	;RP1=0, select bank0
  1073  07CB  00BB               	movwf	??_main
  1074  07CC  083B               	movf	??_main,w
  1075  07CD  00BD               	movwf	_IR
  1076                           
  1077                           ;mainMaster.c: 99:             Lcd_Set_Cursor(2,1);
  1078  07CE  01F4               	clrf	Lcd_Set_Cursor@b
  1079  07CF  0AF4               	incf	Lcd_Set_Cursor@b,f
  1080  07D0  3002               	movlw	2
  1081  07D1  120A  118A  23A8  120A  118A  	fcall	_Lcd_Set_Cursor
  1082                           
  1083                           ;mainMaster.c: 100:             if (IR == 1){
  1084  07D6  1283               	bcf	3,5	;RP0=0, select bank0
  1085  07D7  1303               	bcf	3,6	;RP1=0, select bank0
  1086  07D8  033D               	decf	_IR,w
  1087  07D9  1D03               	btfss	3,2
  1088  07DA  2FDD               	goto	l1870
  1089                           
  1090                           ;mainMaster.c: 101:             Lcd_Write_String("IR ON ");
  1091  07DB  3036               	movlw	(low (((STR_6+1)-__stringbase)| (0+32768)))& (0+255)
  1092  07DC  2FDE               	goto	L2
  1093  07DD                     l1870:	
  1094                           ;mainMaster.c: 102:         } else {
  1095                           
  1096                           
  1097                           ;mainMaster.c: 103:             Lcd_Write_String("IR OFF");
  1098  07DD  303E               	movlw	(low (((STR_7+1)-__stringbase)| (0+32768)))& (0+255)
  1099  07DE                     L2:	
  1100  07DE  00F5               	movwf	Lcd_Write_String@a
  1101  07DF  3080               	movlw	128
  1102  07E0  00F6               	movwf	Lcd_Write_String@a+1
  1103  07E1  120A  118A  236B  120A  118A  	fcall	_Lcd_Write_String
  1104                           
  1105                           ;mainMaster.c: 106:         if(PORTCbits.RC0 == 0){
  1106  07E6  1283               	bcf	3,5	;RP0=0, select bank0
  1107  07E7  1303               	bcf	3,6	;RP1=0, select bank0
  1108  07E8  1807               	btfsc	7,0	;volatile
  1109  07E9  2FEE               	goto	l186
  1110                           
  1111                           ;mainMaster.c: 107:             state = 0;
  1112  07EA  01BC               	clrf	_state
  1113                           
  1114                           ;mainMaster.c: 108:             PORTAbits.RA6 = 1;
  1115  07EB  1705               	bsf	5,6	;volatile
  1116                           
  1117                           ;mainMaster.c: 109:             PORTAbits.RA7 = 0;
  1118  07EC  1385               	bcf	5,7	;volatile
  1119                           
  1120                           ;mainMaster.c: 110:         } else{
  1121  07ED  2EF8               	goto	l1820
  1122  07EE                     l186:	
  1123                           
  1124                           ;mainMaster.c: 111:             state = 1;
  1125  07EE  01BC               	clrf	_state
  1126  07EF  0ABC               	incf	_state,f
  1127                           
  1128                           ;mainMaster.c: 112:             PORTAbits.RA7 = 1;
  1129  07F0  1785               	bsf	5,7	;volatile
  1130                           
  1131                           ;mainMaster.c: 113:             PORTAbits.RA6 = 0;
  1132  07F1  1305               	bcf	5,6	;volatile
  1133  07F2  2EF8               	goto	l1820
  1134  07F3                     __end_of_main:	
  1135                           
  1136                           	psect	text1
  1137  0238                     __ptext1:	
  1138 ;; *************** function _strcmp *****************
  1139 ;; Defined at:
  1140 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;  s1              1    wreg     PTR const unsigned char 
  1143 ;;		 -> NULL(0), get_temp@temperature(6), 
  1144 ;;  s2              1    0[COMMON] PTR const unsigned char 
  1145 ;;		 -> STR_3(6), 
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;  s1              1    6[COMMON] PTR const unsigned char 
  1148 ;;		 -> NULL(0), get_temp@temperature(6), 
  1149 ;;  r               1    5[COMMON] char 
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  2    0[COMMON] int 
  1152 ;; Registers used:
  1153 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1159 ;;      Params:         2       0       0       0       0
  1160 ;;      Locals:         2       0       0       0       0
  1161 ;;      Temps:          3       0       0       0       0
  1162 ;;      Totals:         7       0       0       0       0
  1163 ;;Total ram usage:        7 bytes
  1164 ;; Hardware stack levels used:    2
  1165 ;; This function calls:
  1166 ;;		Nothing
  1167 ;; This function is called by:
  1168 ;;		_main
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           
  1173                           ;psect for function _strcmp
  1174  0238                     _strcmp:	
  1175                           
  1176                           ;incstack = 0
  1177                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  1178                           ;strcmp@s1 stored from wreg
  1179  0238  00F6               	movwf	strcmp@s1
  1180  0239  2A47               	goto	l1784
  1181  023A                     l1786:	
  1182  023A  0876               	movf	strcmp@s1,w
  1183  023B  0084               	movwf	4
  1184  023C  0800               	movf	0,w
  1185  023D  1903               	btfsc	3,2
  1186  023E  2A5C               	goto	l1788
  1187  023F  3001               	movlw	1
  1188  0240  00F2               	movwf	??_strcmp
  1189  0241  0872               	movf	??_strcmp,w
  1190  0242  07F6               	addwf	strcmp@s1,f
  1191  0243  3001               	movlw	1
  1192  0244  00F2               	movwf	??_strcmp
  1193  0245  0872               	movf	??_strcmp,w
  1194  0246  07F0               	addwf	strcmp@s2,f
  1195  0247                     l1784:	
  1196  0247  0870               	movf	strcmp@s2,w
  1197  0248  0084               	movwf	4
  1198  0249  120A  118A  200D  120A  118A  	fcall	stringdir
  1199  024E  00F2               	movwf	??_strcmp
  1200  024F  0876               	movf	strcmp@s1,w
  1201  0250  0084               	movwf	4
  1202  0251  1383               	bcf	3,7	;select IRP bank0
  1203  0252  0800               	movf	0,w
  1204  0253  00F3               	movwf	??_strcmp+1
  1205  0254  0872               	movf	??_strcmp,w
  1206  0255  0273               	subwf	??_strcmp+1,w
  1207  0256  00F4               	movwf	??_strcmp+2
  1208  0257  0874               	movf	??_strcmp+2,w
  1209  0258  00F5               	movwf	strcmp@r
  1210  0259  0875               	movf	strcmp@r,w
  1211  025A  1903               	btfsc	3,2
  1212  025B  2A3A               	goto	l1786
  1213  025C                     l1788:	
  1214  025C  0875               	movf	strcmp@r,w
  1215  025D  00F0               	movwf	?_strcmp
  1216  025E  01F1               	clrf	?_strcmp+1
  1217  025F  1BF0               	btfsc	?_strcmp,7
  1218  0260  03F1               	decf	?_strcmp+1,f
  1219  0261  0008               	return
  1220  0262                     __end_of_strcmp:	
  1221                           
  1222                           	psect	text2
  1223  020F                     __ptext2:	
  1224 ;; *************** function _setup *****************
  1225 ;; Defined at:
  1226 ;;		line 118 in file "mainMaster.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;		None
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;		None
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1240 ;;      Params:         0       0       0       0       0
  1241 ;;      Locals:         0       0       0       0       0
  1242 ;;      Temps:          0       0       0       0       0
  1243 ;;      Totals:         0       0       0       0       0
  1244 ;;Total ram usage:        0 bytes
  1245 ;; Hardware stack levels used:    1
  1246 ;; Hardware stack levels required when called:    3
  1247 ;; This function calls:
  1248 ;;		_I2C_Master_Init
  1249 ;;		_Lcd_Init
  1250 ;;		_initOscilador
  1251 ;; This function is called by:
  1252 ;;		_main
  1253 ;; This function uses a non-reentrant model
  1254 ;;
  1255                           
  1256                           
  1257                           ;psect for function _setup
  1258  020F                     _setup:	
  1259                           
  1260                           ;mainMaster.c: 119:     initOscilador(7);
  1261                           
  1262                           ;incstack = 0
  1263                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1264  020F  3007               	movlw	7
  1265  0210  120A  118A  23F2  120A  118A  	fcall	_initOscilador
  1266                           
  1267                           ;mainMaster.c: 120:     ANSELH = 0;
  1268  0215  1683               	bsf	3,5	;RP0=1, select bank3
  1269  0216  1703               	bsf	3,6	;RP1=1, select bank3
  1270  0217  0189               	clrf	9	;volatile
  1271                           
  1272                           ;mainMaster.c: 121:     ANSEL = 0;
  1273  0218  0188               	clrf	8	;volatile
  1274                           
  1275                           ;mainMaster.c: 122:     TRISB = 0;
  1276  0219  1683               	bsf	3,5	;RP0=1, select bank1
  1277  021A  1303               	bcf	3,6	;RP1=0, select bank1
  1278  021B  0186               	clrf	6	;volatile
  1279                           
  1280                           ;mainMaster.c: 123:     TRISA = 0;
  1281  021C  0185               	clrf	5	;volatile
  1282                           
  1283                           ;mainMaster.c: 124:     PORTB = 0;
  1284  021D  1283               	bcf	3,5	;RP0=0, select bank0
  1285  021E  1303               	bcf	3,6	;RP1=0, select bank0
  1286  021F  0186               	clrf	6	;volatile
  1287                           
  1288                           ;mainMaster.c: 125:     PORTA = 0;
  1289  0220  0185               	clrf	5	;volatile
  1290                           
  1291                           ;mainMaster.c: 127:     TRISC = 0x03;
  1292  0221  3003               	movlw	3
  1293  0222  1683               	bsf	3,5	;RP0=1, select bank1
  1294  0223  1303               	bcf	3,6	;RP1=0, select bank1
  1295  0224  0087               	movwf	7	;volatile
  1296                           
  1297                           ;mainMaster.c: 129:     Lcd_Init();
  1298  0225  120A  118A  2447  120A  118A  	fcall	_Lcd_Init
  1299                           
  1300                           ;mainMaster.c: 130:     I2C_Master_Init(100000);
  1301  022A  3000               	movlw	0
  1302  022B  1283               	bcf	3,5	;RP0=0, select bank0
  1303  022C  1303               	bcf	3,6	;RP1=0, select bank0
  1304  022D  00A3               	movwf	I2C_Master_Init@c+3
  1305  022E  3001               	movlw	1
  1306  022F  00A2               	movwf	I2C_Master_Init@c+2
  1307  0230  3086               	movlw	134
  1308  0231  00A1               	movwf	I2C_Master_Init@c+1
  1309  0232  30A0               	movlw	160
  1310  0233  00A0               	movwf	I2C_Master_Init@c
  1311  0234  120A  118A  22C0   	fcall	_I2C_Master_Init
  1312  0237  0008               	return
  1313  0238                     __end_of_setup:	
  1314                           
  1315                           	psect	text3
  1316  03F2                     __ptext3:	
  1317 ;; *************** function _initOscilador *****************
  1318 ;; Defined at:
  1319 ;;		line 11 in file "./Oscilador.h"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  option          1    wreg     unsigned char 
  1322 ;; Auto vars:     Size  Location     Type
  1323 ;;  option          1    2[COMMON] unsigned char 
  1324 ;; Return value:  Size  Location     Type
  1325 ;;                  1    wreg      void 
  1326 ;; Registers used:
  1327 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1328 ;; Tracked objects:
  1329 ;;		On entry : 0/0
  1330 ;;		On exit  : 0/0
  1331 ;;		Unchanged: 0/0
  1332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1333 ;;      Params:         0       0       0       0       0
  1334 ;;      Locals:         1       0       0       0       0
  1335 ;;      Temps:          2       0       0       0       0
  1336 ;;      Totals:         3       0       0       0       0
  1337 ;;Total ram usage:        3 bytes
  1338 ;; Hardware stack levels used:    1
  1339 ;; This function calls:
  1340 ;;		Nothing
  1341 ;; This function is called by:
  1342 ;;		_setup
  1343 ;; This function uses a non-reentrant model
  1344 ;;
  1345                           
  1346                           
  1347                           ;psect for function _initOscilador
  1348  03F2                     _initOscilador:	
  1349                           
  1350                           ;incstack = 0
  1351                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  1352                           ;initOscilador@option stored from wreg
  1353  03F2  00F2               	movwf	initOscilador@option
  1354                           
  1355                           ;./Oscilador.h: 13: 
  1356  03F3  2C23               	goto	l1590
  1357  03F4                     l1570:	
  1358                           
  1359                           ;./Oscilador.h: 16:         case 3:
  1360  03F4  308F               	movlw	-113
  1361  03F5  1683               	bsf	3,5	;RP0=1, select bank1
  1362  03F6  1303               	bcf	3,6	;RP1=0, select bank1
  1363  03F7  058F               	andwf	15,f	;volatile
  1364                           
  1365                           ;./Oscilador.h: 17: 
  1366  03F8  2C45               	goto	l145
  1367  03F9                     l1572:	
  1368                           
  1369                           ;./Oscilador.h: 20:         case 4:
  1370  03F9  1683               	bsf	3,5	;RP0=1, select bank1
  1371  03FA  1303               	bcf	3,6	;RP1=0, select bank1
  1372  03FB  080F               	movf	15,w	;volatile
  1373  03FC  398F               	andlw	-113
  1374  03FD  3810               	iorlw	16
  1375  03FE  2C1C               	goto	L8
  1376  03FF                     l1574:	
  1377                           ;./Oscilador.h: 21: 
  1378                           
  1379                           
  1380                           ;./Oscilador.h: 24:         case 5:
  1381  03FF  1683               	bsf	3,5	;RP0=1, select bank1
  1382  0400  1303               	bcf	3,6	;RP1=0, select bank1
  1383  0401  080F               	movf	15,w	;volatile
  1384  0402  398F               	andlw	-113
  1385  0403  3820               	iorlw	32
  1386  0404  2C1C               	goto	L8
  1387  0405                     l1576:	
  1388                           ;./Oscilador.h: 25: 
  1389                           
  1390                           
  1391                           ;./Oscilador.h: 28:         case 6:
  1392  0405  1683               	bsf	3,5	;RP0=1, select bank1
  1393  0406  1303               	bcf	3,6	;RP1=0, select bank1
  1394  0407  080F               	movf	15,w	;volatile
  1395  0408  398F               	andlw	-113
  1396  0409  3830               	iorlw	48
  1397  040A  2C1C               	goto	L8
  1398  040B                     l1578:	
  1399                           ;./Oscilador.h: 29: 
  1400                           
  1401                           
  1402                           ;./Oscilador.h: 32:         case 7:
  1403  040B  1683               	bsf	3,5	;RP0=1, select bank1
  1404  040C  1303               	bcf	3,6	;RP1=0, select bank1
  1405  040D  080F               	movf	15,w	;volatile
  1406  040E  398F               	andlw	-113
  1407  040F  3840               	iorlw	64
  1408  0410  2C1C               	goto	L8
  1409  0411                     l1580:	
  1410                           ;./Oscilador.h: 33: 
  1411                           
  1412                           
  1413                           ;./Oscilador.h: 36:         default:
  1414  0411  1683               	bsf	3,5	;RP0=1, select bank1
  1415  0412  1303               	bcf	3,6	;RP1=0, select bank1
  1416  0413  080F               	movf	15,w	;volatile
  1417  0414  398F               	andlw	-113
  1418  0415  3850               	iorlw	80
  1419  0416  2C1C               	goto	L8
  1420  0417                     l1582:	
  1421                           ;./Oscilador.h: 37: 
  1422                           
  1423                           
  1424                           ;./Oscilador.h: 40:     }
  1425  0417  1683               	bsf	3,5	;RP0=1, select bank1
  1426  0418  1303               	bcf	3,6	;RP1=0, select bank1
  1427  0419  080F               	movf	15,w	;volatile
  1428  041A  398F               	andlw	-113
  1429  041B  3860               	iorlw	96
  1430  041C                     L8:	
  1431  041C  008F               	movwf	15	;volatile
  1432                           
  1433                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  1434  041D  2C45               	goto	l145
  1435  041E                     l1584:	
  1436  041E                     l1586:	
  1437  041E  3070               	movlw	112
  1438  041F  1683               	bsf	3,5	;RP0=1, select bank1
  1439  0420  1303               	bcf	3,6	;RP1=0, select bank1
  1440  0421  048F               	iorwf	15,f	;volatile
  1441  0422  2C45               	goto	l145
  1442  0423                     l1590:	
  1443  0423  0872               	movf	initOscilador@option,w
  1444  0424  00F0               	movwf	??_initOscilador
  1445  0425  01F1               	clrf	??_initOscilador+1
  1446                           
  1447                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1448                           ; Switch size 1, requested type "simple"
  1449                           ; Number of cases is 1, Range of values is 0 to 0
  1450                           ; switch strategies available:
  1451                           ; Name         Instructions Cycles
  1452                           ; simple_byte            4     3 (average)
  1453                           ; direct_byte           11     8 (fixed)
  1454                           ; jumptable            260     6 (fixed)
  1455                           ;	Chosen strategy is simple_byte
  1456  0426  0871               	movf	??_initOscilador+1,w
  1457  0427  3A00               	xorlw	0	; case 0
  1458  0428  1903               	skipnz
  1459  0429  2C2B               	goto	l1926
  1460  042A  2C1E               	goto	l1586
  1461  042B                     l1926:	
  1462                           
  1463                           ; Switch size 1, requested type "simple"
  1464                           ; Number of cases is 8, Range of values is 0 to 7
  1465                           ; switch strategies available:
  1466                           ; Name         Instructions Cycles
  1467                           ; simple_byte           25    13 (average)
  1468                           ; direct_byte           32     8 (fixed)
  1469                           ; jumptable            260     6 (fixed)
  1470                           ;	Chosen strategy is simple_byte
  1471  042B  0870               	movf	??_initOscilador,w
  1472  042C  3A00               	xorlw	0	; case 0
  1473  042D  1903               	skipnz
  1474  042E  2BF4               	goto	l1570
  1475  042F  3A01               	xorlw	1	; case 1
  1476  0430  1903               	skipnz
  1477  0431  2BF9               	goto	l1572
  1478  0432  3A03               	xorlw	3	; case 2
  1479  0433  1903               	skipnz
  1480  0434  2BFF               	goto	l1574
  1481  0435  3A01               	xorlw	1	; case 3
  1482  0436  1903               	skipnz
  1483  0437  2C05               	goto	l1576
  1484  0438  3A07               	xorlw	7	; case 4
  1485  0439  1903               	skipnz
  1486  043A  2C0B               	goto	l1578
  1487  043B  3A01               	xorlw	1	; case 5
  1488  043C  1903               	skipnz
  1489  043D  2C11               	goto	l1580
  1490  043E  3A03               	xorlw	3	; case 6
  1491  043F  1903               	skipnz
  1492  0440  2C17               	goto	l1582
  1493  0441  3A01               	xorlw	1	; case 7
  1494  0442  1903               	skipnz
  1495  0443  2C1E               	goto	l1584
  1496  0444  2C1E               	goto	l1586
  1497  0445                     l145:	
  1498  0445  140F               	bsf	15,0	;volatile
  1499  0446  0008               	return
  1500  0447                     __end_of_initOscilador:	
  1501                           
  1502                           	psect	text4
  1503  0447                     __ptext4:	
  1504 ;; *************** function _Lcd_Init *****************
  1505 ;; Defined at:
  1506 ;;		line 65 in file "./LCD4bits.h"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;		None
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;		None
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  1    wreg      void 
  1513 ;; Registers used:
  1514 ;;		wreg, status,2, status,0, pclath, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1520 ;;      Params:         0       0       0       0       0
  1521 ;;      Locals:         0       0       0       0       0
  1522 ;;      Temps:          2       0       0       0       0
  1523 ;;      Totals:         2       0       0       0       0
  1524 ;;Total ram usage:        2 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; Hardware stack levels required when called:    2
  1527 ;; This function calls:
  1528 ;;		_Lcd_Cmd
  1529 ;;		_Lcd_Port
  1530 ;; This function is called by:
  1531 ;;		_setup
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535                           
  1536                           ;psect for function _Lcd_Init
  1537  0447                     _Lcd_Init:	
  1538                           
  1539                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  1540                           
  1541                           ;incstack = 0
  1542                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1543  0447  3000               	movlw	0
  1544  0448  120A  118A  2139  120A  118A  	fcall	_Lcd_Port
  1545                           
  1546                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  1547  044D  3034               	movlw	52
  1548  044E  00F5               	movwf	??_Lcd_Init+1
  1549  044F  30F1               	movlw	241
  1550  0450  00F4               	movwf	??_Lcd_Init
  1551  0451                     u1217:	
  1552  0451  0BF4               	decfsz	??_Lcd_Init,f
  1553  0452  2C51               	goto	u1217
  1554  0453  0BF5               	decfsz	??_Lcd_Init+1,f
  1555  0454  2C51               	goto	u1217
  1556  0455  2C56               	nop2
  1557                           
  1558                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  1559  0456  3003               	movlw	3
  1560  0457  120A  118A  2153  120A  118A  	fcall	_Lcd_Cmd
  1561                           
  1562                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1563  045C  300D               	movlw	13
  1564  045D  00F5               	movwf	??_Lcd_Init+1
  1565  045E  30FB               	movlw	251
  1566  045F  00F4               	movwf	??_Lcd_Init
  1567  0460                     u1227:	
  1568  0460  0BF4               	decfsz	??_Lcd_Init,f
  1569  0461  2C60               	goto	u1227
  1570  0462  0BF5               	decfsz	??_Lcd_Init+1,f
  1571  0463  2C60               	goto	u1227
  1572  0464  2C65               	nop2
  1573                           
  1574                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  1575  0465  3003               	movlw	3
  1576  0466  120A  118A  2153  120A  118A  	fcall	_Lcd_Cmd
  1577                           
  1578                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  1579  046B  301D               	movlw	29
  1580  046C  00F5               	movwf	??_Lcd_Init+1
  1581  046D  3091               	movlw	145
  1582  046E  00F4               	movwf	??_Lcd_Init
  1583  046F                     u1237:	
  1584  046F  0BF4               	decfsz	??_Lcd_Init,f
  1585  0470  2C6F               	goto	u1237
  1586  0471  0BF5               	decfsz	??_Lcd_Init+1,f
  1587  0472  2C6F               	goto	u1237
  1588                           
  1589                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  1590  0473  3003               	movlw	3
  1591  0474  120A  118A  2153  120A  118A  	fcall	_Lcd_Cmd
  1592                           
  1593                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  1594  0479  3002               	movlw	2
  1595  047A  120A  118A  2153  120A  118A  	fcall	_Lcd_Cmd
  1596                           
  1597                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  1598  047F  3002               	movlw	2
  1599  0480  120A  118A  2153  120A  118A  	fcall	_Lcd_Cmd
  1600                           
  1601                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  1602  0485  3008               	movlw	8
  1603  0486  120A  118A  2153  120A  118A  	fcall	_Lcd_Cmd
  1604                           
  1605                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  1606  048B  3000               	movlw	0
  1607  048C  120A  118A  2153  120A  118A  	fcall	_Lcd_Cmd
  1608                           
  1609                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  1610  0491  300C               	movlw	12
  1611  0492  120A  118A  2153  120A  118A  	fcall	_Lcd_Cmd
  1612                           
  1613                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  1614  0497  3000               	movlw	0
  1615  0498  120A  118A  2153  120A  118A  	fcall	_Lcd_Cmd
  1616                           
  1617                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  1618  049D  3006               	movlw	6
  1619  049E  120A  118A  2153   	fcall	_Lcd_Cmd
  1620  04A1  0008               	return
  1621  04A2                     __end_of_Lcd_Init:	
  1622                           
  1623                           	psect	text5
  1624  02C0                     __ptext5:	
  1625 ;; *************** function _I2C_Master_Init *****************
  1626 ;; Defined at:
  1627 ;;		line 16 in file "./I2C.h"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;  c               4    0[BANK0 ] const unsigned long 
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;		None
  1632 ;; Return value:  Size  Location     Type
  1633 ;;                  1    wreg      void 
  1634 ;; Registers used:
  1635 ;;		wreg, status,2, status,0, pclath, cstack
  1636 ;; Tracked objects:
  1637 ;;		On entry : 0/0
  1638 ;;		On exit  : 0/0
  1639 ;;		Unchanged: 0/0
  1640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1641 ;;      Params:         0       4       0       0       0
  1642 ;;      Locals:         0       0       0       0       0
  1643 ;;      Temps:          0       4       0       0       0
  1644 ;;      Totals:         0       8       0       0       0
  1645 ;;Total ram usage:        8 bytes
  1646 ;; Hardware stack levels used:    1
  1647 ;; Hardware stack levels required when called:    1
  1648 ;; This function calls:
  1649 ;;		___lldiv
  1650 ;; This function is called by:
  1651 ;;		_setup
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           
  1656                           ;psect for function _I2C_Master_Init
  1657  02C0                     _I2C_Master_Init:	
  1658                           
  1659                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  1660                           
  1661                           ;incstack = 0
  1662                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  1663  02C0  3028               	movlw	40
  1664  02C1  1283               	bcf	3,5	;RP0=0, select bank0
  1665  02C2  1303               	bcf	3,6	;RP1=0, select bank0
  1666  02C3  0094               	movwf	20	;volatile
  1667                           
  1668                           ;./I2C.h: 19:     SSPCON2 = 0;
  1669  02C4  1683               	bsf	3,5	;RP0=1, select bank1
  1670  02C5  1303               	bcf	3,6	;RP1=0, select bank1
  1671  02C6  0191               	clrf	17	;volatile
  1672                           
  1673                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  1674  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  1675  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  1676  02C9  0820               	movf	I2C_Master_Init@c,w
  1677  02CA  00A4               	movwf	??_I2C_Master_Init
  1678  02CB  0821               	movf	I2C_Master_Init@c+1,w
  1679  02CC  00A5               	movwf	??_I2C_Master_Init+1
  1680  02CD  0822               	movf	I2C_Master_Init@c+2,w
  1681  02CE  00A6               	movwf	??_I2C_Master_Init+2
  1682  02CF  0823               	movf	I2C_Master_Init@c+3,w
  1683  02D0  00A7               	movwf	??_I2C_Master_Init+3
  1684  02D1  3002               	movlw	2
  1685  02D2                     u875:	
  1686  02D2  1003               	clrc
  1687  02D3  0DA4               	rlf	??_I2C_Master_Init,f
  1688  02D4  0DA5               	rlf	??_I2C_Master_Init+1,f
  1689  02D5  0DA6               	rlf	??_I2C_Master_Init+2,f
  1690  02D6  0DA7               	rlf	??_I2C_Master_Init+3,f
  1691  02D7  3EFF               	addlw	-1
  1692  02D8  1D03               	skipz
  1693  02D9  2AD2               	goto	u875
  1694  02DA  0827               	movf	??_I2C_Master_Init+3,w
  1695  02DB  00F3               	movwf	___lldiv@divisor+3
  1696  02DC  0826               	movf	??_I2C_Master_Init+2,w
  1697  02DD  00F2               	movwf	___lldiv@divisor+2
  1698  02DE  0825               	movf	??_I2C_Master_Init+1,w
  1699  02DF  00F1               	movwf	___lldiv@divisor+1
  1700  02E0  0824               	movf	??_I2C_Master_Init,w
  1701  02E1  00F0               	movwf	___lldiv@divisor
  1702  02E2  3000               	movlw	0
  1703  02E3  00F7               	movwf	___lldiv@dividend+3
  1704  02E4  307A               	movlw	122
  1705  02E5  00F6               	movwf	___lldiv@dividend+2
  1706  02E6  3012               	movlw	18
  1707  02E7  00F5               	movwf	___lldiv@dividend+1
  1708  02E8  3000               	movlw	0
  1709  02E9  00F4               	movwf	___lldiv@dividend
  1710  02EA  120A  118A  24A2   	fcall	___lldiv
  1711  02ED  0870               	movf	?___lldiv,w
  1712  02EE  3EFF               	addlw	255
  1713  02EF  1683               	bsf	3,5	;RP0=1, select bank1
  1714  02F0  1303               	bcf	3,6	;RP1=0, select bank1
  1715  02F1  0093               	movwf	19	;volatile
  1716                           
  1717                           ;./I2C.h: 21:     SSPSTAT = 0;
  1718  02F2  0194               	clrf	20	;volatile
  1719                           
  1720                           ;./I2C.h: 22:     TRISC3 = 1;
  1721  02F3  1587               	bsf	7,3	;volatile
  1722                           
  1723                           ;./I2C.h: 23:     TRISC4 = 1;
  1724  02F4  1607               	bsf	7,4	;volatile
  1725  02F5  0008               	return
  1726  02F6                     __end_of_I2C_Master_Init:	
  1727                           
  1728                           	psect	text6
  1729  04A2                     __ptext6:	
  1730 ;; *************** function ___lldiv *****************
  1731 ;; Defined at:
  1732 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;  divisor         4    0[COMMON] unsigned long 
  1735 ;;  dividend        4    4[COMMON] unsigned long 
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;  quotient        4    9[COMMON] unsigned long 
  1738 ;;  counter         1   13[COMMON] unsigned char 
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  4    0[COMMON] unsigned long 
  1741 ;; Registers used:
  1742 ;;		wreg, status,2, status,0
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1748 ;;      Params:         8       0       0       0       0
  1749 ;;      Locals:         5       0       0       0       0
  1750 ;;      Temps:          1       0       0       0       0
  1751 ;;      Totals:        14       0       0       0       0
  1752 ;;Total ram usage:       14 bytes
  1753 ;; Hardware stack levels used:    1
  1754 ;; This function calls:
  1755 ;;		Nothing
  1756 ;; This function is called by:
  1757 ;;		_I2C_Master_Init
  1758 ;; This function uses a non-reentrant model
  1759 ;;
  1760                           
  1761                           
  1762                           ;psect for function ___lldiv
  1763  04A2                     ___lldiv:	
  1764                           
  1765                           ;incstack = 0
  1766                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  1767  04A2  3000               	movlw	0
  1768  04A3  00FC               	movwf	___lldiv@quotient+3
  1769  04A4  3000               	movlw	0
  1770  04A5  00FB               	movwf	___lldiv@quotient+2
  1771  04A6  3000               	movlw	0
  1772  04A7  00FA               	movwf	___lldiv@quotient+1
  1773  04A8  3000               	movlw	0
  1774  04A9  00F9               	movwf	___lldiv@quotient
  1775  04AA  0873               	movf	___lldiv@divisor+3,w
  1776  04AB  0472               	iorwf	___lldiv@divisor+2,w
  1777  04AC  0471               	iorwf	___lldiv@divisor+1,w
  1778  04AD  0470               	iorwf	___lldiv@divisor,w
  1779  04AE  1903               	skipnz
  1780  04AF  2CF7               	goto	l1442
  1781  04B0  01FD               	clrf	___lldiv@counter
  1782  04B1  0AFD               	incf	___lldiv@counter,f
  1783  04B2                     l1428:	
  1784  04B2  1BF3               	btfsc	___lldiv@divisor+3,7
  1785  04B3  2CC2               	goto	l1430
  1786  04B4  3001               	movlw	1
  1787  04B5  00F8               	movwf	??___lldiv
  1788  04B6                     u685:	
  1789  04B6  1003               	clrc
  1790  04B7  0DF0               	rlf	___lldiv@divisor,f
  1791  04B8  0DF1               	rlf	___lldiv@divisor+1,f
  1792  04B9  0DF2               	rlf	___lldiv@divisor+2,f
  1793  04BA  0DF3               	rlf	___lldiv@divisor+3,f
  1794  04BB  0BF8               	decfsz	??___lldiv,f
  1795  04BC  2CB6               	goto	u685
  1796  04BD  3001               	movlw	1
  1797  04BE  00F8               	movwf	??___lldiv
  1798  04BF  0878               	movf	??___lldiv,w
  1799  04C0  07FD               	addwf	___lldiv@counter,f
  1800  04C1  2CB2               	goto	l1428
  1801  04C2                     l1430:	
  1802  04C2  3001               	movlw	1
  1803  04C3  00F8               	movwf	??___lldiv
  1804  04C4                     u705:	
  1805  04C4  1003               	clrc
  1806  04C5  0DF9               	rlf	___lldiv@quotient,f
  1807  04C6  0DFA               	rlf	___lldiv@quotient+1,f
  1808  04C7  0DFB               	rlf	___lldiv@quotient+2,f
  1809  04C8  0DFC               	rlf	___lldiv@quotient+3,f
  1810  04C9  0BF8               	decfsz	??___lldiv,f
  1811  04CA  2CC4               	goto	u705
  1812  04CB  0873               	movf	___lldiv@divisor+3,w
  1813  04CC  0277               	subwf	___lldiv@dividend+3,w
  1814  04CD  1D03               	skipz
  1815  04CE  2CD9               	goto	u715
  1816  04CF  0872               	movf	___lldiv@divisor+2,w
  1817  04D0  0276               	subwf	___lldiv@dividend+2,w
  1818  04D1  1D03               	skipz
  1819  04D2  2CD9               	goto	u715
  1820  04D3  0871               	movf	___lldiv@divisor+1,w
  1821  04D4  0275               	subwf	___lldiv@dividend+1,w
  1822  04D5  1D03               	skipz
  1823  04D6  2CD9               	goto	u715
  1824  04D7  0870               	movf	___lldiv@divisor,w
  1825  04D8  0274               	subwf	___lldiv@dividend,w
  1826  04D9                     u715:	
  1827  04D9  1C03               	skipc
  1828  04DA  2CEA               	goto	l1438
  1829  04DB  0870               	movf	___lldiv@divisor,w
  1830  04DC  02F4               	subwf	___lldiv@dividend,f
  1831  04DD  0871               	movf	___lldiv@divisor+1,w
  1832  04DE  1C03               	skipc
  1833  04DF  0F71               	incfsz	___lldiv@divisor+1,w
  1834  04E0  02F5               	subwf	___lldiv@dividend+1,f
  1835  04E1  0872               	movf	___lldiv@divisor+2,w
  1836  04E2  1C03               	skipc
  1837  04E3  0F72               	incfsz	___lldiv@divisor+2,w
  1838  04E4  02F6               	subwf	___lldiv@dividend+2,f
  1839  04E5  0873               	movf	___lldiv@divisor+3,w
  1840  04E6  1C03               	skipc
  1841  04E7  0F73               	incfsz	___lldiv@divisor+3,w
  1842  04E8  02F7               	subwf	___lldiv@dividend+3,f
  1843  04E9  1479               	bsf	___lldiv@quotient,0
  1844  04EA                     l1438:	
  1845  04EA  3001               	movlw	1
  1846  04EB                     u725:	
  1847  04EB  1003               	clrc
  1848  04EC  0CF3               	rrf	___lldiv@divisor+3,f
  1849  04ED  0CF2               	rrf	___lldiv@divisor+2,f
  1850  04EE  0CF1               	rrf	___lldiv@divisor+1,f
  1851  04EF  0CF0               	rrf	___lldiv@divisor,f
  1852  04F0  3EFF               	addlw	-1
  1853  04F1  1D03               	skipz
  1854  04F2  2CEB               	goto	u725
  1855  04F3  3001               	movlw	1
  1856  04F4  02FD               	subwf	___lldiv@counter,f
  1857  04F5  1D03               	btfss	3,2
  1858  04F6  2CC2               	goto	l1430
  1859  04F7                     l1442:	
  1860  04F7  087C               	movf	___lldiv@quotient+3,w
  1861  04F8  00F3               	movwf	?___lldiv+3
  1862  04F9  087B               	movf	___lldiv@quotient+2,w
  1863  04FA  00F2               	movwf	?___lldiv+2
  1864  04FB  087A               	movf	___lldiv@quotient+1,w
  1865  04FC  00F1               	movwf	?___lldiv+1
  1866  04FD  0879               	movf	___lldiv@quotient,w
  1867  04FE  00F0               	movwf	?___lldiv
  1868  04FF  0008               	return
  1869  0500                     __end_of___lldiv:	
  1870                           
  1871                           	psect	text7
  1872  01AB                     __ptext7:	
  1873 ;; *************** function _get_tripwire *****************
  1874 ;; Defined at:
  1875 ;;		line 219 in file "mainMaster.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;		None
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;  trip            1    7[COMMON] unsigned char 
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  1    wreg      unsigned char 
  1882 ;; Registers used:
  1883 ;;		wreg, status,2, status,0, pclath, cstack
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1889 ;;      Params:         0       0       0       0       0
  1890 ;;      Locals:         1       0       0       0       0
  1891 ;;      Temps:          1       0       0       0       0
  1892 ;;      Totals:         2       0       0       0       0
  1893 ;;Total ram usage:        2 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; Hardware stack levels required when called:    2
  1896 ;; This function calls:
  1897 ;;		_I2C_Master_Read
  1898 ;;		_I2C_Master_Start
  1899 ;;		_I2C_Master_Stop
  1900 ;;		_I2C_Master_Write
  1901 ;; This function is called by:
  1902 ;;		_main
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           
  1907                           ;psect for function _get_tripwire
  1908  01AB                     _get_tripwire:	
  1909                           
  1910                           ;mainMaster.c: 220:     char trip;;mainMaster.c: 222:     I2C_Master_Start();
  1911                           
  1912                           ;incstack = 0
  1913                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  1914  01AB  120A  118A  20F7  120A  118A  	fcall	_I2C_Master_Start
  1915                           
  1916                           ;mainMaster.c: 223:     I2C_Master_Write(0x21);
  1917  01B0  3021               	movlw	33
  1918  01B1  00F0               	movwf	I2C_Master_Write@d
  1919  01B2  3000               	movlw	0
  1920  01B3  00F1               	movwf	I2C_Master_Write@d+1
  1921  01B4  120A  118A  210C  120A  118A  	fcall	_I2C_Master_Write
  1922                           
  1923                           ;mainMaster.c: 224:     trip = I2C_Master_Read(0);
  1924  01B9  3000               	movlw	0
  1925  01BA  00F0               	movwf	I2C_Master_Read@a
  1926  01BB  00F1               	movwf	I2C_Master_Read@a+1
  1927  01BC  120A  118A  2262  120A  118A  	fcall	_I2C_Master_Read
  1928  01C1  0870               	movf	?_I2C_Master_Read,w
  1929  01C2  00F6               	movwf	??_get_tripwire
  1930  01C3  0876               	movf	??_get_tripwire,w
  1931  01C4  00F7               	movwf	get_tripwire@trip
  1932                           
  1933                           ;mainMaster.c: 225:     I2C_Master_Stop();
  1934  01C5  120A  118A  20FE   	fcall	_I2C_Master_Stop
  1935                           
  1936                           ;mainMaster.c: 227:     return (trip);
  1937  01C8  0877               	movf	get_tripwire@trip,w
  1938  01C9  0008               	return
  1939  01CA                     __end_of_get_tripwire:	
  1940                           
  1941                           	psect	text8
  1942  0500                     __ptext8:	
  1943 ;; *************** function _get_time *****************
  1944 ;; Defined at:
  1945 ;;		line 144 in file "mainMaster.c"
  1946 ;; Parameters:    Size  Location     Type
  1947 ;;		None
  1948 ;; Auto vars:     Size  Location     Type
  1949 ;;  string_time     6    0[BANK0 ] unsigned char [6]
  1950 ;;  min             1    7[BANK0 ] unsigned char 
  1951 ;;  hour            1    6[BANK0 ] unsigned char 
  1952 ;; Return value:  Size  Location     Type
  1953 ;;                  1    wreg      PTR unsigned char 
  1954 ;; Registers used:
  1955 ;;		wreg, status,2, status,0, pclath, cstack
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1961 ;;      Params:         0       0       0       0       0
  1962 ;;      Locals:         0       8       0       0       0
  1963 ;;      Temps:          2       0       0       0       0
  1964 ;;      Totals:         2       8       0       0       0
  1965 ;;Total ram usage:       10 bytes
  1966 ;; Hardware stack levels used:    1
  1967 ;; Hardware stack levels required when called:    2
  1968 ;; This function calls:
  1969 ;;		_I2C_Master_Read
  1970 ;;		_I2C_Master_RepeatedStart
  1971 ;;		_I2C_Master_Start
  1972 ;;		_I2C_Master_Stop
  1973 ;;		_I2C_Master_Write
  1974 ;; This function is called by:
  1975 ;;		_main
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           
  1980                           ;psect for function _get_time
  1981  0500                     _get_time:	
  1982                           
  1983                           ;mainMaster.c: 145:     char hour, min;;mainMaster.c: 146:     char string_time[6];;main
      +                          Master.c: 148:     I2C_Master_Start();
  1984                           
  1985                           ;incstack = 0
  1986                           ; Regs used in _get_time: [wreg+status,2+status,0+pclath+cstack]
  1987  0500  120A  118A  20F7  120A  118A  	fcall	_I2C_Master_Start
  1988                           
  1989                           ;mainMaster.c: 149:     I2C_Master_Write(0xD0);
  1990  0505  30D0               	movlw	208
  1991  0506  00F0               	movwf	I2C_Master_Write@d
  1992  0507  3000               	movlw	0
  1993  0508  00F1               	movwf	I2C_Master_Write@d+1
  1994  0509  120A  118A  210C  120A  118A  	fcall	_I2C_Master_Write
  1995                           
  1996                           ;mainMaster.c: 150:     I2C_Master_Write(0x01);
  1997  050E  3001               	movlw	1
  1998  050F  00F0               	movwf	I2C_Master_Write@d
  1999  0510  3000               	movlw	0
  2000  0511  00F1               	movwf	I2C_Master_Write@d+1
  2001  0512  120A  118A  210C  120A  118A  	fcall	_I2C_Master_Write
  2002                           
  2003                           ;mainMaster.c: 151:     I2C_Master_RepeatedStart();
  2004  0517  120A  118A  2105  120A  118A  	fcall	_I2C_Master_RepeatedStart
  2005                           
  2006                           ;mainMaster.c: 152:     I2C_Master_Write(0xD1);
  2007  051C  30D1               	movlw	209
  2008  051D  00F0               	movwf	I2C_Master_Write@d
  2009  051E  3000               	movlw	0
  2010  051F  00F1               	movwf	I2C_Master_Write@d+1
  2011  0520  120A  118A  210C  120A  118A  	fcall	_I2C_Master_Write
  2012                           
  2013                           ;mainMaster.c: 153:     min = I2C_Master_Read(1);
  2014  0525  3001               	movlw	1
  2015  0526  00F0               	movwf	I2C_Master_Read@a
  2016  0527  3000               	movlw	0
  2017  0528  00F1               	movwf	I2C_Master_Read@a+1
  2018  0529  120A  118A  2262  120A  118A  	fcall	_I2C_Master_Read
  2019  052E  0870               	movf	?_I2C_Master_Read,w
  2020  052F  00F6               	movwf	??_get_time
  2021  0530  0876               	movf	??_get_time,w
  2022  0531  1283               	bcf	3,5	;RP0=0, select bank0
  2023  0532  1303               	bcf	3,6	;RP1=0, select bank0
  2024  0533  00A7               	movwf	get_time@min
  2025                           
  2026                           ;mainMaster.c: 154:     hour = I2C_Master_Read(0);
  2027  0534  3000               	movlw	0
  2028  0535  00F0               	movwf	I2C_Master_Read@a
  2029  0536  00F1               	movwf	I2C_Master_Read@a+1
  2030  0537  120A  118A  2262  120A  118A  	fcall	_I2C_Master_Read
  2031  053C  0870               	movf	?_I2C_Master_Read,w
  2032  053D  00F6               	movwf	??_get_time
  2033  053E  0876               	movf	??_get_time,w
  2034  053F  1283               	bcf	3,5	;RP0=0, select bank0
  2035  0540  1303               	bcf	3,6	;RP1=0, select bank0
  2036  0541  00A6               	movwf	get_time@hour
  2037                           
  2038                           ;mainMaster.c: 155:     I2C_Master_Stop();
  2039  0542  120A  118A  20FE  120A  118A  	fcall	_I2C_Master_Stop
  2040                           
  2041                           ;mainMaster.c: 157:     string_time[0] = (hour >> 4) + '0';
  2042  0547  1283               	bcf	3,5	;RP0=0, select bank0
  2043  0548  1303               	bcf	3,6	;RP1=0, select bank0
  2044  0549  0826               	movf	get_time@hour,w
  2045  054A  00F6               	movwf	??_get_time
  2046  054B  3004               	movlw	4
  2047  054C                     u1085:	
  2048  054C  1003               	clrc
  2049  054D  0CF6               	rrf	??_get_time,f
  2050  054E  3EFF               	addlw	-1
  2051  054F  1D03               	skipz
  2052  0550  2D4C               	goto	u1085
  2053  0551  0876               	movf	??_get_time,w
  2054  0552  3E30               	addlw	48
  2055  0553  00F7               	movwf	??_get_time+1
  2056  0554  0877               	movf	??_get_time+1,w
  2057  0555  00A0               	movwf	get_time@string_time
  2058                           
  2059                           ;mainMaster.c: 158:     string_time[1] = (hour & 0x0F) + '0';
  2060  0556  0826               	movf	get_time@hour,w
  2061  0557  390F               	andlw	15
  2062  0558  3E30               	addlw	48
  2063  0559  00F6               	movwf	??_get_time
  2064  055A  0876               	movf	??_get_time,w
  2065  055B  00A1               	movwf	get_time@string_time+1
  2066                           
  2067                           ;mainMaster.c: 159:     string_time[2] = ':';
  2068  055C  303A               	movlw	58
  2069  055D  00F6               	movwf	??_get_time
  2070  055E  0876               	movf	??_get_time,w
  2071  055F  00A2               	movwf	get_time@string_time+2
  2072                           
  2073                           ;mainMaster.c: 160:     string_time[3] = (min >> 4) + '0';
  2074  0560  0827               	movf	get_time@min,w
  2075  0561  00F6               	movwf	??_get_time
  2076  0562  3004               	movlw	4
  2077  0563                     u1095:	
  2078  0563  1003               	clrc
  2079  0564  0CF6               	rrf	??_get_time,f
  2080  0565  3EFF               	addlw	-1
  2081  0566  1D03               	skipz
  2082  0567  2D63               	goto	u1095
  2083  0568  0876               	movf	??_get_time,w
  2084  0569  3E30               	addlw	48
  2085  056A  00F7               	movwf	??_get_time+1
  2086  056B  0877               	movf	??_get_time+1,w
  2087  056C  00A3               	movwf	get_time@string_time+3
  2088                           
  2089                           ;mainMaster.c: 161:     string_time[4] = (min & 0x0F) + '0';
  2090  056D  0827               	movf	get_time@min,w
  2091  056E  390F               	andlw	15
  2092  056F  3E30               	addlw	48
  2093  0570  00F6               	movwf	??_get_time
  2094  0571  0876               	movf	??_get_time,w
  2095  0572  00A4               	movwf	get_time@string_time+4
  2096                           
  2097                           ;mainMaster.c: 162:     string_time[5] = '\0';
  2098  0573  01A5               	clrf	get_time@string_time+5
  2099                           
  2100                           ;mainMaster.c: 164:     return (string_time);
  2101  0574  3020               	movlw	(low (get_time@string_time| 0))& (0+255)
  2102  0575  0008               	return
  2103  0576                     __end_of_get_time:	
  2104                           
  2105                           	psect	text9
  2106  0576                     __ptext9:	
  2107 ;; *************** function _get_temp *****************
  2108 ;; Defined at:
  2109 ;;		line 181 in file "mainMaster.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;		None
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;  temperature     6   16[BANK0 ] unsigned char [6]
  2114 ;;  decimal         3   22[BANK0 ] unsigned char [3]
  2115 ;;  tempLSB         1   26[BANK0 ] unsigned char 
  2116 ;;  tempMSB         1   25[BANK0 ] unsigned char 
  2117 ;; Return value:  Size  Location     Type
  2118 ;;                  1    wreg      PTR unsigned char 
  2119 ;; Registers used:
  2120 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2126 ;;      Params:         0       0       0       0       0
  2127 ;;      Locals:         0      11       0       0       0
  2128 ;;      Temps:          0       3       0       0       0
  2129 ;;      Totals:         0      14       0       0       0
  2130 ;;Total ram usage:       14 bytes
  2131 ;; Hardware stack levels used:    1
  2132 ;; Hardware stack levels required when called:    2
  2133 ;; This function calls:
  2134 ;;		_I2C_Master_Read
  2135 ;;		_I2C_Master_RepeatedStart
  2136 ;;		_I2C_Master_Start
  2137 ;;		_I2C_Master_Stop
  2138 ;;		_I2C_Master_Write
  2139 ;;		___bmul
  2140 ;;		_sprintf
  2141 ;;		_strcat
  2142 ;; This function is called by:
  2143 ;;		_main
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147                           
  2148                           ;psect for function _get_temp
  2149  0576                     _get_temp:	
  2150                           
  2151                           ;mainMaster.c: 182:     char tempLSB, tempMSB;;mainMaster.c: 183:     char temperature[6
      +                          ], decimal[3];;mainMaster.c: 185:     I2C_Master_Start();
  2152                           
  2153                           ;incstack = 0
  2154                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2155  0576  120A  118A  20F7  120A  118A  	fcall	_I2C_Master_Start
  2156                           
  2157                           ;mainMaster.c: 186:     I2C_Master_Write(0xD0);
  2158  057B  30D0               	movlw	208
  2159  057C  00F0               	movwf	I2C_Master_Write@d
  2160  057D  3000               	movlw	0
  2161  057E  00F1               	movwf	I2C_Master_Write@d+1
  2162  057F  120A  118A  210C  120A  118A  	fcall	_I2C_Master_Write
  2163                           
  2164                           ;mainMaster.c: 187:     I2C_Master_Write(0x11);
  2165  0584  3011               	movlw	17
  2166  0585  00F0               	movwf	I2C_Master_Write@d
  2167  0586  3000               	movlw	0
  2168  0587  00F1               	movwf	I2C_Master_Write@d+1
  2169  0588  120A  118A  210C  120A  118A  	fcall	_I2C_Master_Write
  2170                           
  2171                           ;mainMaster.c: 188:     I2C_Master_RepeatedStart();
  2172  058D  120A  118A  2105  120A  118A  	fcall	_I2C_Master_RepeatedStart
  2173                           
  2174                           ;mainMaster.c: 189:     I2C_Master_Write(0xD1);
  2175  0592  30D1               	movlw	209
  2176  0593  00F0               	movwf	I2C_Master_Write@d
  2177  0594  3000               	movlw	0
  2178  0595  00F1               	movwf	I2C_Master_Write@d+1
  2179  0596  120A  118A  210C  120A  118A  	fcall	_I2C_Master_Write
  2180                           
  2181                           ;mainMaster.c: 190:     tempMSB = I2C_Master_Read(1);
  2182  059B  3001               	movlw	1
  2183  059C  00F0               	movwf	I2C_Master_Read@a
  2184  059D  3000               	movlw	0
  2185  059E  00F1               	movwf	I2C_Master_Read@a+1
  2186  059F  120A  118A  2262  120A  118A  	fcall	_I2C_Master_Read
  2187  05A4  0870               	movf	?_I2C_Master_Read,w
  2188  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  2189  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  2190  05A7  00AD               	movwf	??_get_temp
  2191  05A8  082D               	movf	??_get_temp,w
  2192  05A9  00B9               	movwf	get_temp@tempMSB
  2193                           
  2194                           ;mainMaster.c: 191:     tempLSB = I2C_Master_Read(0);
  2195  05AA  3000               	movlw	0
  2196  05AB  00F0               	movwf	I2C_Master_Read@a
  2197  05AC  00F1               	movwf	I2C_Master_Read@a+1
  2198  05AD  120A  118A  2262  120A  118A  	fcall	_I2C_Master_Read
  2199  05B2  0870               	movf	?_I2C_Master_Read,w
  2200  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  2201  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  2202  05B5  00AD               	movwf	??_get_temp
  2203  05B6  082D               	movf	??_get_temp,w
  2204  05B7  00BA               	movwf	get_temp@tempLSB
  2205                           
  2206                           ;mainMaster.c: 192:     I2C_Master_Stop();
  2207  05B8  120A  118A  20FE  120A  118A  	fcall	_I2C_Master_Stop
  2208                           
  2209                           ;mainMaster.c: 194:     tempMSB = tempMSB - 4;
  2210  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  2211  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  2212  05BF  0839               	movf	get_temp@tempMSB,w
  2213  05C0  3EFC               	addlw	252
  2214  05C1  00AD               	movwf	??_get_temp
  2215  05C2  082D               	movf	??_get_temp,w
  2216  05C3  00B9               	movwf	get_temp@tempMSB
  2217                           
  2218                           ;mainMaster.c: 195:     tempLSB = (tempLSB >> 6) * 25;
  2219  05C4  3019               	movlw	25
  2220  05C5  00AD               	movwf	??_get_temp
  2221  05C6  082D               	movf	??_get_temp,w
  2222  05C7  00F0               	movwf	___bmul@multiplicand
  2223  05C8  083A               	movf	get_temp@tempLSB,w
  2224  05C9  00AE               	movwf	??_get_temp+1
  2225  05CA  3006               	movlw	6
  2226  05CB                     u1105:	
  2227  05CB  1003               	clrc
  2228  05CC  0CAE               	rrf	??_get_temp+1,f
  2229  05CD  3EFF               	addlw	-1
  2230  05CE  1D03               	skipz
  2231  05CF  2DCB               	goto	u1105
  2232  05D0  082E               	movf	??_get_temp+1,w
  2233  05D1  120A  118A  2128  120A  118A  	fcall	___bmul
  2234  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  2235  05D7  1303               	bcf	3,6	;RP1=0, select bank0
  2236  05D8  00AF               	movwf	??_get_temp+2
  2237  05D9  082F               	movf	??_get_temp+2,w
  2238  05DA  00BA               	movwf	get_temp@tempLSB
  2239                           
  2240                           ;mainMaster.c: 196:     sprintf(temperature, "%d", tempMSB);
  2241  05DB  3051               	movlw	(low (((STR_12+1)-__stringbase)| (0+32768)))& (0+255)
  2242  05DC  00AD               	movwf	??_get_temp
  2243  05DD  082D               	movf	??_get_temp,w
  2244  05DE  00A0               	movwf	sprintf@f
  2245  05DF  0839               	movf	get_temp@tempMSB,w
  2246  05E0  00AE               	movwf	??_get_temp+1
  2247  05E1  01AF               	clrf	??_get_temp+2
  2248  05E2  082E               	movf	??_get_temp+1,w
  2249  05E3  00A1               	movwf	?_sprintf+1
  2250  05E4  082F               	movf	??_get_temp+2,w
  2251  05E5  00A2               	movwf	?_sprintf+2
  2252  05E6  3030               	movlw	(low (get_temp@temperature| 0))& (0+255)
  2253  05E7  120A  118A  2613  120A  118A  	fcall	_sprintf
  2254                           
  2255                           ;mainMaster.c: 197:     if (tempLSB == 0){
  2256  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  2257  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  2258  05EE  083A               	movf	get_temp@tempLSB,w
  2259  05EF  1D03               	btfss	3,2
  2260  05F0  2DF3               	goto	l1762
  2261                           
  2262                           ;mainMaster.c: 198:         sprintf(decimal, ".%d0", tempLSB);
  2263  05F1  304B               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2264  05F2  2DF4               	goto	L9
  2265  05F3                     l1762:	
  2266                           ;mainMaster.c: 199:     } else {
  2267                           
  2268                           
  2269                           ;mainMaster.c: 200:         sprintf(decimal, ".%d", tempLSB);
  2270  05F3  3050               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2271  05F4                     L9:	
  2272  05F4  00AD               	movwf	??_get_temp
  2273  05F5  082D               	movf	??_get_temp,w
  2274  05F6  00A0               	movwf	sprintf@f
  2275  05F7  083A               	movf	get_temp@tempLSB,w
  2276  05F8  00AE               	movwf	??_get_temp+1
  2277  05F9  01AF               	clrf	??_get_temp+2
  2278  05FA  082E               	movf	??_get_temp+1,w
  2279  05FB  00A1               	movwf	?_sprintf+1
  2280  05FC  082F               	movf	??_get_temp+2,w
  2281  05FD  00A2               	movwf	?_sprintf+2
  2282  05FE  3036               	movlw	(low (get_temp@decimal| 0))& (0+255)
  2283  05FF  120A  118A  2613  120A  118A  	fcall	_sprintf
  2284                           
  2285                           ;mainMaster.c: 202:     strcat(temperature, decimal);
  2286  0604  3036               	movlw	(low (get_temp@decimal| 0))& (0+255)
  2287  0605  1283               	bcf	3,5	;RP0=0, select bank0
  2288  0606  1303               	bcf	3,6	;RP1=0, select bank0
  2289  0607  00AD               	movwf	??_get_temp
  2290  0608  082D               	movf	??_get_temp,w
  2291  0609  00F0               	movwf	strcat@from
  2292  060A  3030               	movlw	(low (get_temp@temperature| 0))& (0+255)
  2293  060B  120A  118A  21EB   	fcall	_strcat
  2294                           
  2295                           ;mainMaster.c: 203:     temperature[5] = '\0';
  2296  060E  1283               	bcf	3,5	;RP0=0, select bank0
  2297  060F  1303               	bcf	3,6	;RP1=0, select bank0
  2298  0610  01B5               	clrf	get_temp@temperature+5
  2299                           
  2300                           ;mainMaster.c: 205:     return (temperature);
  2301  0611  3030               	movlw	(low (get_temp@temperature| 0))& (0+255)
  2302  0612  0008               	return
  2303  0613                     __end_of_get_temp:	
  2304                           
  2305                           	psect	text10
  2306  01EB                     __ptext10:	
  2307 ;; *************** function _strcat *****************
  2308 ;; Defined at:
  2309 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;  to              1    wreg     PTR unsigned char 
  2312 ;;		 -> get_temp@temperature(6), 
  2313 ;;  from            1    0[COMMON] PTR const unsigned char 
  2314 ;;		 -> get_temp@decimal(3), 
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;  to              1    2[COMMON] PTR unsigned char 
  2317 ;;		 -> get_temp@temperature(6), 
  2318 ;;  cp              1    3[COMMON] PTR unsigned char 
  2319 ;;		 -> get_temp@temperature(6), 
  2320 ;; Return value:  Size  Location     Type
  2321 ;;                  1    wreg      PTR unsigned char 
  2322 ;; Registers used:
  2323 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/0
  2326 ;;		On exit  : 0/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2329 ;;      Params:         1       0       0       0       0
  2330 ;;      Locals:         2       0       0       0       0
  2331 ;;      Temps:          1       0       0       0       0
  2332 ;;      Totals:         4       0       0       0       0
  2333 ;;Total ram usage:        4 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; This function calls:
  2336 ;;		Nothing
  2337 ;; This function is called by:
  2338 ;;		_get_temp
  2339 ;; This function uses a non-reentrant model
  2340 ;;
  2341                           
  2342                           
  2343                           ;psect for function _strcat
  2344  01EB                     _strcat:	
  2345                           
  2346                           ;incstack = 0
  2347                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  2348                           ;strcat@to stored from wreg
  2349  01EB  00F2               	movwf	strcat@to
  2350  01EC  0872               	movf	strcat@to,w
  2351  01ED  00F1               	movwf	??_strcat
  2352  01EE  0871               	movf	??_strcat,w
  2353  01EF  00F3               	movwf	strcat@cp
  2354  01F0                     l1662:	
  2355  01F0  0873               	movf	strcat@cp,w
  2356  01F1  0084               	movwf	4
  2357  01F2  1383               	bcf	3,7	;select IRP bank0
  2358  01F3  0800               	movf	0,w
  2359  01F4  1903               	btfsc	3,2
  2360  01F5  2A03               	goto	l1666
  2361  01F6  3001               	movlw	1
  2362  01F7  00F1               	movwf	??_strcat
  2363  01F8  0871               	movf	??_strcat,w
  2364  01F9  07F3               	addwf	strcat@cp,f
  2365  01FA  29F0               	goto	l1662
  2366  01FB                     l1664:	
  2367  01FB  3001               	movlw	1
  2368  01FC  00F1               	movwf	??_strcat
  2369  01FD  0871               	movf	??_strcat,w
  2370  01FE  07F3               	addwf	strcat@cp,f
  2371  01FF  3001               	movlw	1
  2372  0200  00F1               	movwf	??_strcat
  2373  0201  0871               	movf	??_strcat,w
  2374  0202  07F0               	addwf	strcat@from,f
  2375  0203                     l1666:	
  2376  0203  0870               	movf	strcat@from,w
  2377  0204  0084               	movwf	4
  2378  0205  0800               	movf	0,w
  2379  0206  00F1               	movwf	??_strcat
  2380  0207  0873               	movf	strcat@cp,w
  2381  0208  0084               	movwf	4
  2382  0209  0871               	movf	??_strcat,w
  2383  020A  0080               	movwf	0
  2384  020B  0800               	movf	0,w
  2385  020C  1903               	btfsc	3,2
  2386  020D  0008               	return
  2387  020E  29FB               	goto	l1664
  2388  020F                     __end_of_strcat:	
  2389                           
  2390                           	psect	text11
  2391  0613                     __ptext11:	
  2392 ;; *************** function _sprintf *****************
  2393 ;; Defined at:
  2394 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;  sp              1    wreg     PTR unsigned char 
  2397 ;;		 -> get_temp@decimal(3), get_temp@temperature(6), 
  2398 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  2399 ;;		 -> STR_12(4), STR_11(5), STR_10(3), 
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  2402 ;;		 -> get_temp@decimal(3), get_temp@temperature(6), 
  2403 ;;  tmpval          4    0        struct .
  2404 ;;  val             2    9[BANK0 ] unsigned int 
  2405 ;;  cp              2    0        PTR const unsigned char 
  2406 ;;  len             2    0        unsigned int 
  2407 ;;  c               1   12[BANK0 ] unsigned char 
  2408 ;;  prec            1    8[BANK0 ] char 
  2409 ;;  flag            1    7[BANK0 ] unsigned char 
  2410 ;;  ap              1    6[BANK0 ] PTR void [1]
  2411 ;;		 -> ?_sprintf(2), 
  2412 ;; Return value:  Size  Location     Type
  2413 ;;                  2    0[BANK0 ] int 
  2414 ;; Registers used:
  2415 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2421 ;;      Params:         0       3       0       0       0
  2422 ;;      Locals:         0       7       0       0       0
  2423 ;;      Temps:          0       3       0       0       0
  2424 ;;      Totals:         0      13       0       0       0
  2425 ;;Total ram usage:       13 bytes
  2426 ;; Hardware stack levels used:    1
  2427 ;; Hardware stack levels required when called:    1
  2428 ;; This function calls:
  2429 ;;		___lwdiv
  2430 ;;		___lwmod
  2431 ;; This function is called by:
  2432 ;;		_get_temp
  2433 ;; This function uses a non-reentrant model
  2434 ;;
  2435                           
  2436                           
  2437                           ;psect for function _sprintf
  2438  0613                     _sprintf:	
  2439                           
  2440                           ;incstack = 0
  2441                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2442                           ;sprintf@sp stored from wreg
  2443  0613  1283               	bcf	3,5	;RP0=0, select bank0
  2444  0614  1303               	bcf	3,6	;RP1=0, select bank0
  2445  0615  00AB               	movwf	sprintf@sp
  2446                           
  2447                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  2448  0616  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2449  0617  00A3               	movwf	??_sprintf
  2450  0618  0823               	movf	??_sprintf,w
  2451  0619  00A6               	movwf	sprintf@ap
  2452  061A                     l1648:	
  2453                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  2454                           
  2455                           
  2456                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  2457  061A  3001               	movlw	1
  2458  061B  07A0               	addwf	sprintf@f,f
  2459  061C  30FF               	movlw	-1
  2460  061D  0720               	addwf	sprintf@f,w
  2461  061E  0084               	movwf	4
  2462  061F  120A  118A  200D  120A  118A  	fcall	stringdir
  2463  0624  00A3               	movwf	??_sprintf
  2464  0625  0823               	movf	??_sprintf,w
  2465  0626  00AC               	movwf	sprintf@c
  2466  0627  082C               	movf	sprintf@c,w
  2467  0628  1903               	btfsc	3,2
  2468  0629  2EE6               	goto	l1650
  2469                           
  2470                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  2471  062A  3025               	movlw	37
  2472  062B  062C               	xorwf	sprintf@c,w
  2473  062C  1903               	btfsc	3,2
  2474  062D  2E3A               	goto	l1604
  2475                           
  2476                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  2477  062E  082C               	movf	sprintf@c,w
  2478  062F  00A3               	movwf	??_sprintf
  2479  0630  082B               	movf	sprintf@sp,w
  2480  0631  0084               	movwf	4
  2481  0632  0823               	movf	??_sprintf,w
  2482  0633  1383               	bcf	3,7	;select IRP bank0
  2483  0634  0080               	movwf	0
  2484  0635  3001               	movlw	1
  2485  0636  00A3               	movwf	??_sprintf
  2486  0637  0823               	movf	??_sprintf,w
  2487  0638  07AB               	addwf	sprintf@sp,f
  2488                           
  2489                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  2490  0639  2E1A               	goto	l1648
  2491  063A                     l1604:	
  2492                           
  2493                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  2494  063A  01A7               	clrf	sprintf@flag
  2495                           
  2496                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  2497  063B  3001               	movlw	1
  2498  063C  07A0               	addwf	sprintf@f,f
  2499  063D  30FF               	movlw	-1
  2500  063E  0720               	addwf	sprintf@f,w
  2501  063F  0084               	movwf	4
  2502  0640  120A  118A  200D  120A  118A  	fcall	stringdir
  2503  0645  00AC               	movwf	sprintf@c
  2504  0646  00A3               	movwf	??_sprintf
  2505  0647  01A4               	clrf	??_sprintf+1
  2506                           
  2507                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2508                           ; Switch size 1, requested type "simple"
  2509                           ; Number of cases is 1, Range of values is 0 to 0
  2510                           ; switch strategies available:
  2511                           ; Name         Instructions Cycles
  2512                           ; simple_byte            4     3 (average)
  2513                           ; direct_byte           11     8 (fixed)
  2514                           ; jumptable            260     6 (fixed)
  2515                           ;	Chosen strategy is simple_byte
  2516  0648  0824               	movf	??_sprintf+1,w
  2517  0649  3A00               	xorlw	0	; case 0
  2518  064A  1903               	skipnz
  2519  064B  2E4D               	goto	l1928
  2520  064C  2E1A               	goto	l1648
  2521  064D                     l1928:	
  2522                           
  2523                           ; Switch size 1, requested type "simple"
  2524                           ; Number of cases is 3, Range of values is 0 to 105
  2525                           ; switch strategies available:
  2526                           ; Name         Instructions Cycles
  2527                           ; simple_byte           10     6 (average)
  2528                           ; jumptable            260     6 (fixed)
  2529                           ;	Chosen strategy is simple_byte
  2530  064D  0823               	movf	??_sprintf,w
  2531  064E  3A00               	xorlw	0	; case 0
  2532  064F  1903               	skipnz
  2533  0650  2EE6               	goto	l1650
  2534  0651  3A64               	xorlw	100	; case 100
  2535  0652  1903               	skipnz
  2536  0653  2E58               	goto	l1610
  2537  0654  3A0D               	xorlw	13	; case 105
  2538  0655  1903               	skipnz
  2539  0656  2E58               	goto	l1610
  2540  0657  2E1A               	goto	l1648
  2541  0658                     l1610:	
  2542                           
  2543                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2544  0658  0826               	movf	sprintf@ap,w
  2545  0659  0084               	movwf	4
  2546  065A  1383               	bcf	3,7	;select IRP bank0
  2547  065B  0800               	movf	0,w
  2548  065C  00A9               	movwf	sprintf@val
  2549  065D  0A84               	incf	4,f
  2550  065E  0800               	movf	0,w
  2551  065F  00AA               	movwf	sprintf@val+1
  2552  0660  3002               	movlw	2
  2553  0661  00A3               	movwf	??_sprintf
  2554  0662  0823               	movf	??_sprintf,w
  2555  0663  07A6               	addwf	sprintf@ap,f
  2556                           
  2557                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  2558  0664  1FAA               	btfss	sprintf@val+1,7
  2559  0665  2E6F               	goto	l1620
  2560                           
  2561                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  2562  0666  3003               	movlw	3
  2563  0667  00A3               	movwf	??_sprintf
  2564  0668  0823               	movf	??_sprintf,w
  2565  0669  04A7               	iorwf	sprintf@flag,f
  2566                           
  2567                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  2568  066A  09A9               	comf	sprintf@val,f
  2569  066B  09AA               	comf	sprintf@val+1,f
  2570  066C  0AA9               	incf	sprintf@val,f
  2571  066D  1903               	skipnz
  2572  066E  0AAA               	incf	sprintf@val+1,f
  2573  066F                     l1620:	
  2574                           
  2575                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2576  066F  01AC               	clrf	sprintf@c
  2577  0670  0AAC               	incf	sprintf@c,f
  2578  0671                     l1626:	
  2579                           
  2580                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  2581  0671  082C               	movf	sprintf@c,w
  2582  0672  00A3               	movwf	??_sprintf
  2583  0673  0723               	addwf	??_sprintf,w
  2584  0674  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2585  0675  0084               	movwf	4
  2586  0676  120A  118A  200D  120A  118A  	fcall	stringdir
  2587  067B  00A4               	movwf	??_sprintf+1
  2588  067C  120A  118A  200D  120A  118A  	fcall	stringdir
  2589  0681  00A5               	movwf	??_sprintf+2
  2590  0682  0825               	movf	??_sprintf+2,w
  2591  0683  022A               	subwf	sprintf@val+1,w
  2592  0684  1D03               	skipz
  2593  0685  2E88               	goto	u925
  2594  0686  0824               	movf	??_sprintf+1,w
  2595  0687  0229               	subwf	sprintf@val,w
  2596  0688                     u925:	
  2597  0688  1C03               	btfss	3,0
  2598  0689  2E92               	goto	l1632
  2599  068A  3001               	movlw	1
  2600  068B  00A3               	movwf	??_sprintf
  2601  068C  0823               	movf	??_sprintf,w
  2602  068D  07AC               	addwf	sprintf@c,f
  2603  068E  3005               	movlw	5
  2604  068F  062C               	xorwf	sprintf@c,w
  2605  0690  1D03               	btfss	3,2
  2606  0691  2E71               	goto	l1626
  2607  0692                     l1632:	
  2608                           
  2609                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  2610  0692  0827               	movf	sprintf@flag,w
  2611  0693  3903               	andlw	3
  2612  0694  1903               	btfsc	3,2
  2613  0695  2EA1               	goto	l1638
  2614                           
  2615                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  2616  0696  302D               	movlw	45
  2617  0697  00A3               	movwf	??_sprintf
  2618  0698  082B               	movf	sprintf@sp,w
  2619  0699  0084               	movwf	4
  2620  069A  0823               	movf	??_sprintf,w
  2621  069B  1383               	bcf	3,7	;select IRP bank0
  2622  069C  0080               	movwf	0
  2623  069D  3001               	movlw	1
  2624  069E  00A3               	movwf	??_sprintf
  2625  069F  0823               	movf	??_sprintf,w
  2626  06A0  07AB               	addwf	sprintf@sp,f
  2627  06A1                     l1638:	
  2628                           
  2629                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  2630  06A1  082C               	movf	sprintf@c,w
  2631  06A2  00A3               	movwf	??_sprintf
  2632  06A3  0823               	movf	??_sprintf,w
  2633  06A4  00A8               	movwf	sprintf@prec
  2634  06A5                     l1646:	
  2635                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  2636                           
  2637                           
  2638                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  2639  06A5  30FF               	movlw	255
  2640  06A6  00A3               	movwf	??_sprintf
  2641  06A7  0823               	movf	??_sprintf,w
  2642  06A8  07A8               	addwf	sprintf@prec,f
  2643  06A9  0A28               	incf	sprintf@prec,w
  2644  06AA  1903               	btfsc	3,2
  2645  06AB  2E1A               	goto	l1648
  2646                           
  2647                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  2648  06AC  300A               	movlw	10
  2649  06AD  00F8               	movwf	___lwmod@divisor
  2650  06AE  3000               	movlw	0
  2651  06AF  00F9               	movwf	___lwmod@divisor+1
  2652  06B0  0828               	movf	sprintf@prec,w
  2653  06B1  00A3               	movwf	??_sprintf
  2654  06B2  0723               	addwf	??_sprintf,w
  2655  06B3  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2656  06B4  0084               	movwf	4
  2657  06B5  120A  118A  200D  120A  118A  	fcall	stringdir
  2658  06BA  00F0               	movwf	___lwdiv@divisor
  2659  06BB  120A  118A  200D  120A  118A  	fcall	stringdir
  2660  06C0  00F1               	movwf	___lwdiv@divisor+1
  2661  06C1  082A               	movf	sprintf@val+1,w
  2662  06C2  00F3               	movwf	___lwdiv@dividend+1
  2663  06C3  0829               	movf	sprintf@val,w
  2664  06C4  00F2               	movwf	___lwdiv@dividend
  2665  06C5  120A  118A  232F  120A  118A  	fcall	___lwdiv
  2666  06CA  0871               	movf	?___lwdiv+1,w
  2667  06CB  00FB               	movwf	___lwmod@dividend+1
  2668  06CC  0870               	movf	?___lwdiv,w
  2669  06CD  00FA               	movwf	___lwmod@dividend
  2670  06CE  120A  118A  228E  120A  118A  	fcall	___lwmod
  2671  06D3  0878               	movf	?___lwmod,w
  2672  06D4  3E30               	addlw	48
  2673  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  2674  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  2675  06D7  00A4               	movwf	??_sprintf+1
  2676  06D8  0824               	movf	??_sprintf+1,w
  2677  06D9  00AC               	movwf	sprintf@c
  2678                           
  2679                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  2680  06DA  082C               	movf	sprintf@c,w
  2681  06DB  00A3               	movwf	??_sprintf
  2682  06DC  082B               	movf	sprintf@sp,w
  2683  06DD  0084               	movwf	4
  2684  06DE  0823               	movf	??_sprintf,w
  2685  06DF  1383               	bcf	3,7	;select IRP bank0
  2686  06E0  0080               	movwf	0
  2687  06E1  3001               	movlw	1
  2688  06E2  00A3               	movwf	??_sprintf
  2689  06E3  0823               	movf	??_sprintf,w
  2690  06E4  07AB               	addwf	sprintf@sp,f
  2691  06E5  2EA5               	goto	l1646
  2692  06E6                     l1650:	
  2693                           
  2694                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  2695  06E6  082B               	movf	sprintf@sp,w
  2696  06E7  0084               	movwf	4
  2697  06E8  1383               	bcf	3,7	;select IRP bank0
  2698  06E9  0180               	clrf	0
  2699  06EA  0008               	return
  2700  06EB                     __end_of_sprintf:	
  2701                           
  2702                           	psect	text12
  2703  028E                     __ptext12:	
  2704 ;; *************** function ___lwmod *****************
  2705 ;; Defined at:
  2706 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  2707 ;; Parameters:    Size  Location     Type
  2708 ;;  divisor         2    8[COMMON] unsigned int 
  2709 ;;  dividend        2   10[COMMON] unsigned int 
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;  counter         1   13[COMMON] unsigned char 
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  2    8[COMMON] unsigned int 
  2714 ;; Registers used:
  2715 ;;		wreg, status,2, status,0
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2721 ;;      Params:         4       0       0       0       0
  2722 ;;      Locals:         1       0       0       0       0
  2723 ;;      Temps:          1       0       0       0       0
  2724 ;;      Totals:         6       0       0       0       0
  2725 ;;Total ram usage:        6 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; This function calls:
  2728 ;;		Nothing
  2729 ;; This function is called by:
  2730 ;;		_sprintf
  2731 ;; This function uses a non-reentrant model
  2732 ;;
  2733                           
  2734                           
  2735                           ;psect for function ___lwmod
  2736  028E                     ___lwmod:	
  2737                           
  2738                           ;incstack = 0
  2739                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2740  028E  0878               	movf	___lwmod@divisor,w
  2741  028F  0479               	iorwf	___lwmod@divisor+1,w
  2742  0290  1903               	btfsc	3,2
  2743  0291  2ABB               	goto	l1490
  2744  0292  01FD               	clrf	___lwmod@counter
  2745  0293  0AFD               	incf	___lwmod@counter,f
  2746  0294                     l1480:	
  2747  0294  1BF9               	btfsc	___lwmod@divisor+1,7
  2748  0295  2AA2               	goto	l1482
  2749  0296  3001               	movlw	1
  2750  0297                     u825:	
  2751  0297  1003               	clrc
  2752  0298  0DF8               	rlf	___lwmod@divisor,f
  2753  0299  0DF9               	rlf	___lwmod@divisor+1,f
  2754  029A  3EFF               	addlw	-1
  2755  029B  1D03               	skipz
  2756  029C  2A97               	goto	u825
  2757  029D  3001               	movlw	1
  2758  029E  00FC               	movwf	??___lwmod
  2759  029F  087C               	movf	??___lwmod,w
  2760  02A0  07FD               	addwf	___lwmod@counter,f
  2761  02A1  2A94               	goto	l1480
  2762  02A2                     l1482:	
  2763  02A2  0879               	movf	___lwmod@divisor+1,w
  2764  02A3  027B               	subwf	___lwmod@dividend+1,w
  2765  02A4  1D03               	skipz
  2766  02A5  2AA8               	goto	u845
  2767  02A6  0878               	movf	___lwmod@divisor,w
  2768  02A7  027A               	subwf	___lwmod@dividend,w
  2769  02A8                     u845:	
  2770  02A8  1C03               	skipc
  2771  02A9  2AB0               	goto	l1486
  2772  02AA  0878               	movf	___lwmod@divisor,w
  2773  02AB  02FA               	subwf	___lwmod@dividend,f
  2774  02AC  0879               	movf	___lwmod@divisor+1,w
  2775  02AD  1C03               	skipc
  2776  02AE  03FB               	decf	___lwmod@dividend+1,f
  2777  02AF  02FB               	subwf	___lwmod@dividend+1,f
  2778  02B0                     l1486:	
  2779  02B0  3001               	movlw	1
  2780  02B1                     u855:	
  2781  02B1  1003               	clrc
  2782  02B2  0CF9               	rrf	___lwmod@divisor+1,f
  2783  02B3  0CF8               	rrf	___lwmod@divisor,f
  2784  02B4  3EFF               	addlw	-1
  2785  02B5  1D03               	skipz
  2786  02B6  2AB1               	goto	u855
  2787  02B7  3001               	movlw	1
  2788  02B8  02FD               	subwf	___lwmod@counter,f
  2789  02B9  1D03               	btfss	3,2
  2790  02BA  2AA2               	goto	l1482
  2791  02BB                     l1490:	
  2792  02BB  087B               	movf	___lwmod@dividend+1,w
  2793  02BC  00F9               	movwf	?___lwmod+1
  2794  02BD  087A               	movf	___lwmod@dividend,w
  2795  02BE  00F8               	movwf	?___lwmod
  2796  02BF  0008               	return
  2797  02C0                     __end_of___lwmod:	
  2798                           
  2799                           	psect	text13
  2800  032F                     __ptext13:	
  2801 ;; *************** function ___lwdiv *****************
  2802 ;; Defined at:
  2803 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;  divisor         2    0[COMMON] unsigned int 
  2806 ;;  dividend        2    2[COMMON] unsigned int 
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;  quotient        2    5[COMMON] unsigned int 
  2809 ;;  counter         1    7[COMMON] unsigned char 
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  2    0[COMMON] unsigned int 
  2812 ;; Registers used:
  2813 ;;		wreg, status,2, status,0
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2819 ;;      Params:         4       0       0       0       0
  2820 ;;      Locals:         3       0       0       0       0
  2821 ;;      Temps:          1       0       0       0       0
  2822 ;;      Totals:         8       0       0       0       0
  2823 ;;Total ram usage:        8 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; This function calls:
  2826 ;;		Nothing
  2827 ;; This function is called by:
  2828 ;;		_sprintf
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           
  2833                           ;psect for function ___lwdiv
  2834  032F                     ___lwdiv:	
  2835                           
  2836                           ;incstack = 0
  2837                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2838  032F  01F5               	clrf	___lwdiv@quotient
  2839  0330  01F6               	clrf	___lwdiv@quotient+1
  2840  0331  0870               	movf	___lwdiv@divisor,w
  2841  0332  0471               	iorwf	___lwdiv@divisor+1,w
  2842  0333  1903               	btfsc	3,2
  2843  0334  2B66               	goto	l1468
  2844  0335  01F7               	clrf	___lwdiv@counter
  2845  0336  0AF7               	incf	___lwdiv@counter,f
  2846  0337                     l1456:	
  2847  0337  1BF1               	btfsc	___lwdiv@divisor+1,7
  2848  0338  2B45               	goto	l1458
  2849  0339  3001               	movlw	1
  2850  033A                     u755:	
  2851  033A  1003               	clrc
  2852  033B  0DF0               	rlf	___lwdiv@divisor,f
  2853  033C  0DF1               	rlf	___lwdiv@divisor+1,f
  2854  033D  3EFF               	addlw	-1
  2855  033E  1D03               	skipz
  2856  033F  2B3A               	goto	u755
  2857  0340  3001               	movlw	1
  2858  0341  00F4               	movwf	??___lwdiv
  2859  0342  0874               	movf	??___lwdiv,w
  2860  0343  07F7               	addwf	___lwdiv@counter,f
  2861  0344  2B37               	goto	l1456
  2862  0345                     l1458:	
  2863  0345  3001               	movlw	1
  2864  0346                     u775:	
  2865  0346  1003               	clrc
  2866  0347  0DF5               	rlf	___lwdiv@quotient,f
  2867  0348  0DF6               	rlf	___lwdiv@quotient+1,f
  2868  0349  3EFF               	addlw	-1
  2869  034A  1D03               	skipz
  2870  034B  2B46               	goto	u775
  2871  034C  0871               	movf	___lwdiv@divisor+1,w
  2872  034D  0273               	subwf	___lwdiv@dividend+1,w
  2873  034E  1D03               	skipz
  2874  034F  2B52               	goto	u785
  2875  0350  0870               	movf	___lwdiv@divisor,w
  2876  0351  0272               	subwf	___lwdiv@dividend,w
  2877  0352                     u785:	
  2878  0352  1C03               	skipc
  2879  0353  2B5B               	goto	l1464
  2880  0354  0870               	movf	___lwdiv@divisor,w
  2881  0355  02F2               	subwf	___lwdiv@dividend,f
  2882  0356  0871               	movf	___lwdiv@divisor+1,w
  2883  0357  1C03               	skipc
  2884  0358  03F3               	decf	___lwdiv@dividend+1,f
  2885  0359  02F3               	subwf	___lwdiv@dividend+1,f
  2886  035A  1475               	bsf	___lwdiv@quotient,0
  2887  035B                     l1464:	
  2888  035B  3001               	movlw	1
  2889  035C                     u795:	
  2890  035C  1003               	clrc
  2891  035D  0CF1               	rrf	___lwdiv@divisor+1,f
  2892  035E  0CF0               	rrf	___lwdiv@divisor,f
  2893  035F  3EFF               	addlw	-1
  2894  0360  1D03               	skipz
  2895  0361  2B5C               	goto	u795
  2896  0362  3001               	movlw	1
  2897  0363  02F7               	subwf	___lwdiv@counter,f
  2898  0364  1D03               	btfss	3,2
  2899  0365  2B45               	goto	l1458
  2900  0366                     l1468:	
  2901  0366  0876               	movf	___lwdiv@quotient+1,w
  2902  0367  00F1               	movwf	?___lwdiv+1
  2903  0368  0875               	movf	___lwdiv@quotient,w
  2904  0369  00F0               	movwf	?___lwdiv
  2905  036A  0008               	return
  2906  036B                     __end_of___lwdiv:	
  2907                           
  2908                           	psect	text14
  2909  0128                     __ptext14:	
  2910 ;; *************** function ___bmul *****************
  2911 ;; Defined at:
  2912 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;  multiplier      1    wreg     unsigned char 
  2915 ;;  multiplicand    1    0[COMMON] unsigned char 
  2916 ;; Auto vars:     Size  Location     Type
  2917 ;;  multiplier      1    3[COMMON] unsigned char 
  2918 ;;  product         1    2[COMMON] unsigned char 
  2919 ;; Return value:  Size  Location     Type
  2920 ;;                  1    wreg      unsigned char 
  2921 ;; Registers used:
  2922 ;;		wreg, status,2, status,0
  2923 ;; Tracked objects:
  2924 ;;		On entry : 0/0
  2925 ;;		On exit  : 0/0
  2926 ;;		Unchanged: 0/0
  2927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2928 ;;      Params:         1       0       0       0       0
  2929 ;;      Locals:         2       0       0       0       0
  2930 ;;      Temps:          1       0       0       0       0
  2931 ;;      Totals:         4       0       0       0       0
  2932 ;;Total ram usage:        4 bytes
  2933 ;; Hardware stack levels used:    1
  2934 ;; This function calls:
  2935 ;;		Nothing
  2936 ;; This function is called by:
  2937 ;;		_get_temp
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           
  2942                           ;psect for function ___bmul
  2943  0128                     ___bmul:	
  2944                           
  2945                           ;incstack = 0
  2946                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2947                           ;___bmul@multiplier stored from wreg
  2948  0128  00F3               	movwf	___bmul@multiplier
  2949  0129  01F2               	clrf	___bmul@product
  2950  012A                     l1670:	
  2951  012A  1C73               	btfss	___bmul@multiplier,0
  2952  012B  2930               	goto	l1674
  2953  012C  0870               	movf	___bmul@multiplicand,w
  2954  012D  00F1               	movwf	??___bmul
  2955  012E  0871               	movf	??___bmul,w
  2956  012F  07F2               	addwf	___bmul@product,f
  2957  0130                     l1674:	
  2958  0130  1003               	clrc
  2959  0131  0DF0               	rlf	___bmul@multiplicand,f
  2960  0132  1003               	clrc
  2961  0133  0CF3               	rrf	___bmul@multiplier,f
  2962  0134  0873               	movf	___bmul@multiplier,w
  2963  0135  1D03               	btfss	3,2
  2964  0136  292A               	goto	l1670
  2965  0137  0872               	movf	___bmul@product,w
  2966  0138  0008               	return
  2967  0139                     __end_of___bmul:	
  2968                           
  2969                           	psect	text15
  2970  0105                     __ptext15:	
  2971 ;; *************** function _I2C_Master_RepeatedStart *****************
  2972 ;; Defined at:
  2973 ;;		line 47 in file "./I2C.h"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;		None
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;		None
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  1    wreg      void 
  2980 ;; Registers used:
  2981 ;;		wreg, status,2, status,0, pclath, cstack
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2987 ;;      Params:         0       0       0       0       0
  2988 ;;      Locals:         0       0       0       0       0
  2989 ;;      Temps:          0       0       0       0       0
  2990 ;;      Totals:         0       0       0       0       0
  2991 ;;Total ram usage:        0 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:    1
  2994 ;; This function calls:
  2995 ;;		_I2C_Master_Wait
  2996 ;; This function is called by:
  2997 ;;		_get_time
  2998 ;;		_get_temp
  2999 ;;		_get_day
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           
  3004                           ;psect for function _I2C_Master_RepeatedStart
  3005  0105                     _I2C_Master_RepeatedStart:	
  3006                           
  3007                           ;./I2C.h: 49:     I2C_Master_Wait();
  3008                           
  3009                           ;incstack = 0
  3010                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  3011  0105  120A  118A  2114   	fcall	_I2C_Master_Wait
  3012                           
  3013                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  3014  0108  1683               	bsf	3,5	;RP0=1, select bank1
  3015  0109  1303               	bcf	3,6	;RP1=0, select bank1
  3016  010A  1491               	bsf	17,1	;volatile
  3017  010B  0008               	return
  3018  010C                     __end_of_I2C_Master_RepeatedStart:	
  3019                           
  3020                           	psect	text16
  3021  018C                     __ptext16:	
  3022 ;; *************** function _get_hall *****************
  3023 ;; Defined at:
  3024 ;;		line 208 in file "mainMaster.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;		None
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;  key             1    7[COMMON] unsigned char 
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      unsigned char 
  3031 ;; Registers used:
  3032 ;;		wreg, status,2, status,0, pclath, cstack
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3038 ;;      Params:         0       0       0       0       0
  3039 ;;      Locals:         1       0       0       0       0
  3040 ;;      Temps:          1       0       0       0       0
  3041 ;;      Totals:         2       0       0       0       0
  3042 ;;Total ram usage:        2 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    2
  3045 ;; This function calls:
  3046 ;;		_I2C_Master_Read
  3047 ;;		_I2C_Master_Start
  3048 ;;		_I2C_Master_Stop
  3049 ;;		_I2C_Master_Write
  3050 ;; This function is called by:
  3051 ;;		_main
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           
  3056                           ;psect for function _get_hall
  3057  018C                     _get_hall:	
  3058                           
  3059                           ;mainMaster.c: 209:     char key;;mainMaster.c: 211:     I2C_Master_Start();
  3060                           
  3061                           ;incstack = 0
  3062                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  3063  018C  120A  118A  20F7  120A  118A  	fcall	_I2C_Master_Start
  3064                           
  3065                           ;mainMaster.c: 212:     I2C_Master_Write(0x11);
  3066  0191  3011               	movlw	17
  3067  0192  00F0               	movwf	I2C_Master_Write@d
  3068  0193  3000               	movlw	0
  3069  0194  00F1               	movwf	I2C_Master_Write@d+1
  3070  0195  120A  118A  210C  120A  118A  	fcall	_I2C_Master_Write
  3071                           
  3072                           ;mainMaster.c: 213:     key = I2C_Master_Read(0);
  3073  019A  3000               	movlw	0
  3074  019B  00F0               	movwf	I2C_Master_Read@a
  3075  019C  00F1               	movwf	I2C_Master_Read@a+1
  3076  019D  120A  118A  2262  120A  118A  	fcall	_I2C_Master_Read
  3077  01A2  0870               	movf	?_I2C_Master_Read,w
  3078  01A3  00F6               	movwf	??_get_hall
  3079  01A4  0876               	movf	??_get_hall,w
  3080  01A5  00F7               	movwf	get_hall@key
  3081                           
  3082                           ;mainMaster.c: 214:     I2C_Master_Stop();
  3083  01A6  120A  118A  20FE   	fcall	_I2C_Master_Stop
  3084                           
  3085                           ;mainMaster.c: 216:     return (key);
  3086  01A9  0877               	movf	get_hall@key,w
  3087  01AA  0008               	return
  3088  01AB                     __end_of_get_hall:	
  3089                           
  3090                           	psect	text17
  3091  016D                     __ptext17:	
  3092 ;; *************** function _get_PIR *****************
  3093 ;; Defined at:
  3094 ;;		line 230 in file "mainMaster.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;		None
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;  PIR             1    7[COMMON] unsigned char 
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      unsigned char 
  3101 ;; Registers used:
  3102 ;;		wreg, status,2, status,0, pclath, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3108 ;;      Params:         0       0       0       0       0
  3109 ;;      Locals:         1       0       0       0       0
  3110 ;;      Temps:          1       0       0       0       0
  3111 ;;      Totals:         2       0       0       0       0
  3112 ;;Total ram usage:        2 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; Hardware stack levels required when called:    2
  3115 ;; This function calls:
  3116 ;;		_I2C_Master_Read
  3117 ;;		_I2C_Master_Start
  3118 ;;		_I2C_Master_Stop
  3119 ;;		_I2C_Master_Write
  3120 ;; This function is called by:
  3121 ;;		_main
  3122 ;; This function uses a non-reentrant model
  3123 ;;
  3124                           
  3125                           
  3126                           ;psect for function _get_PIR
  3127  016D                     _get_PIR:	
  3128                           
  3129                           ;mainMaster.c: 231:     char PIR;;mainMaster.c: 233:     I2C_Master_Start();
  3130                           
  3131                           ;incstack = 0
  3132                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  3133  016D  120A  118A  20F7  120A  118A  	fcall	_I2C_Master_Start
  3134                           
  3135                           ;mainMaster.c: 234:     I2C_Master_Write(0x41);
  3136  0172  3041               	movlw	65
  3137  0173  00F0               	movwf	I2C_Master_Write@d
  3138  0174  3000               	movlw	0
  3139  0175  00F1               	movwf	I2C_Master_Write@d+1
  3140  0176  120A  118A  210C  120A  118A  	fcall	_I2C_Master_Write
  3141                           
  3142                           ;mainMaster.c: 235:     PIR = I2C_Master_Read(0);
  3143  017B  3000               	movlw	0
  3144  017C  00F0               	movwf	I2C_Master_Read@a
  3145  017D  00F1               	movwf	I2C_Master_Read@a+1
  3146  017E  120A  118A  2262  120A  118A  	fcall	_I2C_Master_Read
  3147  0183  0870               	movf	?_I2C_Master_Read,w
  3148  0184  00F6               	movwf	??_get_PIR
  3149  0185  0876               	movf	??_get_PIR,w
  3150  0186  00F7               	movwf	get_PIR@PIR
  3151                           
  3152                           ;mainMaster.c: 236:     I2C_Master_Stop();
  3153  0187  120A  118A  20FE   	fcall	_I2C_Master_Stop
  3154                           
  3155                           ;mainMaster.c: 238:     return (PIR);
  3156  018A  0877               	movf	get_PIR@PIR,w
  3157  018B  0008               	return
  3158  018C                     __end_of_get_PIR:	
  3159                           
  3160                           	psect	text18
  3161  01CA                     __ptext18:	
  3162 ;; *************** function _get_IR *****************
  3163 ;; Defined at:
  3164 ;;		line 241 in file "mainMaster.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;		None
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  IR              1    7[COMMON] unsigned char 
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      unsigned char 
  3171 ;; Registers used:
  3172 ;;		wreg, status,2, status,0, pclath, cstack
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3178 ;;      Params:         0       0       0       0       0
  3179 ;;      Locals:         1       0       0       0       0
  3180 ;;      Temps:          1       0       0       0       0
  3181 ;;      Totals:         2       0       0       0       0
  3182 ;;Total ram usage:        2 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; Hardware stack levels required when called:    2
  3185 ;; This function calls:
  3186 ;;		_I2C_Master_Read
  3187 ;;		_I2C_Master_Start
  3188 ;;		_I2C_Master_Stop
  3189 ;;		_I2C_Master_Write
  3190 ;; This function is called by:
  3191 ;;		_main
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           
  3196                           ;psect for function _get_IR
  3197  01CA                     _get_IR:	
  3198                           
  3199                           ;mainMaster.c: 242:     char IR;;mainMaster.c: 244:     I2C_Master_Start();
  3200                           
  3201                           ;incstack = 0
  3202                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  3203  01CA  120A  118A  20F7  120A  118A  	fcall	_I2C_Master_Start
  3204                           
  3205                           ;mainMaster.c: 245:     I2C_Master_Write(0x31);
  3206  01CF  3031               	movlw	49
  3207  01D0  00F0               	movwf	I2C_Master_Write@d
  3208  01D1  3000               	movlw	0
  3209  01D2  00F1               	movwf	I2C_Master_Write@d+1
  3210  01D3  120A  118A  210C  120A  118A  	fcall	_I2C_Master_Write
  3211                           
  3212                           ;mainMaster.c: 246:     PIR = I2C_Master_Read(0);
  3213  01D8  3000               	movlw	0
  3214  01D9  00F0               	movwf	I2C_Master_Read@a
  3215  01DA  00F1               	movwf	I2C_Master_Read@a+1
  3216  01DB  120A  118A  2262  120A  118A  	fcall	_I2C_Master_Read
  3217  01E0  0870               	movf	?_I2C_Master_Read,w
  3218  01E1  00F6               	movwf	??_get_IR
  3219  01E2  0876               	movf	??_get_IR,w
  3220  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  3221  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  3222  01E5  00BE               	movwf	_PIR
  3223                           
  3224                           ;mainMaster.c: 247:     I2C_Master_Stop();
  3225  01E6  120A  118A  20FE   	fcall	_I2C_Master_Stop
  3226                           
  3227                           ;mainMaster.c: 249:     return (IR);
  3228  01E9  0877               	movf	get_IR@IR,w
  3229  01EA  0008               	return
  3230  01EB                     __end_of_get_IR:	
  3231                           
  3232                           	psect	text19
  3233  010C                     __ptext19:	
  3234 ;; *************** function _I2C_Master_Write *****************
  3235 ;; Defined at:
  3236 ;;		line 65 in file "./I2C.h"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;  d               2    0[COMMON] unsigned int 
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;		None
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  1    wreg      void 
  3243 ;; Registers used:
  3244 ;;		wreg, status,2, status,0, pclath, cstack
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3250 ;;      Params:         2       0       0       0       0
  3251 ;;      Locals:         0       0       0       0       0
  3252 ;;      Temps:          0       0       0       0       0
  3253 ;;      Totals:         2       0       0       0       0
  3254 ;;Total ram usage:        2 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; Hardware stack levels required when called:    1
  3257 ;; This function calls:
  3258 ;;		_I2C_Master_Wait
  3259 ;; This function is called by:
  3260 ;;		_get_time
  3261 ;;		_get_temp
  3262 ;;		_get_hall
  3263 ;;		_get_tripwire
  3264 ;;		_get_PIR
  3265 ;;		_get_IR
  3266 ;;		_write_RTC
  3267 ;;		_get_day
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           
  3272                           ;psect for function _I2C_Master_Write
  3273  010C                     _I2C_Master_Write:	
  3274                           
  3275                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  3276                           
  3277                           ;incstack = 0
  3278                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  3279  010C  120A  118A  2114   	fcall	_I2C_Master_Wait
  3280                           
  3281                           ;./I2C.h: 68:     SSPBUF = d;
  3282  010F  0870               	movf	I2C_Master_Write@d,w
  3283  0110  1283               	bcf	3,5	;RP0=0, select bank0
  3284  0111  1303               	bcf	3,6	;RP1=0, select bank0
  3285  0112  0093               	movwf	19	;volatile
  3286  0113  0008               	return
  3287  0114                     __end_of_I2C_Master_Write:	
  3288                           
  3289                           	psect	text20
  3290  00FE                     __ptext20:	
  3291 ;; *************** function _I2C_Master_Stop *****************
  3292 ;; Defined at:
  3293 ;;		line 55 in file "./I2C.h"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;		None
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;		None
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      void 
  3300 ;; Registers used:
  3301 ;;		wreg, status,2, status,0, pclath, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3307 ;;      Params:         0       0       0       0       0
  3308 ;;      Locals:         0       0       0       0       0
  3309 ;;      Temps:          0       0       0       0       0
  3310 ;;      Totals:         0       0       0       0       0
  3311 ;;Total ram usage:        0 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    1
  3314 ;; This function calls:
  3315 ;;		_I2C_Master_Wait
  3316 ;; This function is called by:
  3317 ;;		_get_time
  3318 ;;		_get_temp
  3319 ;;		_get_hall
  3320 ;;		_get_tripwire
  3321 ;;		_get_PIR
  3322 ;;		_get_IR
  3323 ;;		_write_RTC
  3324 ;;		_get_day
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           
  3329                           ;psect for function _I2C_Master_Stop
  3330  00FE                     _I2C_Master_Stop:	
  3331                           
  3332                           ;./I2C.h: 57:     I2C_Master_Wait();
  3333                           
  3334                           ;incstack = 0
  3335                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  3336  00FE  120A  118A  2114   	fcall	_I2C_Master_Wait
  3337                           
  3338                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  3339  0101  1683               	bsf	3,5	;RP0=1, select bank1
  3340  0102  1303               	bcf	3,6	;RP1=0, select bank1
  3341  0103  1511               	bsf	17,2	;volatile
  3342  0104  0008               	return
  3343  0105                     __end_of_I2C_Master_Stop:	
  3344                           
  3345                           	psect	text21
  3346  00F7                     __ptext21:	
  3347 ;; *************** function _I2C_Master_Start *****************
  3348 ;; Defined at:
  3349 ;;		line 39 in file "./I2C.h"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;		None
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;		None
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  1    wreg      void 
  3356 ;; Registers used:
  3357 ;;		wreg, status,2, status,0, pclath, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3363 ;;      Params:         0       0       0       0       0
  3364 ;;      Locals:         0       0       0       0       0
  3365 ;;      Temps:          0       0       0       0       0
  3366 ;;      Totals:         0       0       0       0       0
  3367 ;;Total ram usage:        0 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; Hardware stack levels required when called:    1
  3370 ;; This function calls:
  3371 ;;		_I2C_Master_Wait
  3372 ;; This function is called by:
  3373 ;;		_get_time
  3374 ;;		_get_temp
  3375 ;;		_get_hall
  3376 ;;		_get_tripwire
  3377 ;;		_get_PIR
  3378 ;;		_get_IR
  3379 ;;		_write_RTC
  3380 ;;		_get_day
  3381 ;; This function uses a non-reentrant model
  3382 ;;
  3383                           
  3384                           
  3385                           ;psect for function _I2C_Master_Start
  3386  00F7                     _I2C_Master_Start:	
  3387                           
  3388                           ;./I2C.h: 41:     I2C_Master_Wait();
  3389                           
  3390                           ;incstack = 0
  3391                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  3392  00F7  120A  118A  2114   	fcall	_I2C_Master_Wait
  3393                           
  3394                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  3395  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  3396  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  3397  00FC  1411               	bsf	17,0	;volatile
  3398  00FD  0008               	return
  3399  00FE                     __end_of_I2C_Master_Start:	
  3400                           
  3401                           	psect	text22
  3402  0262                     __ptext22:	
  3403 ;; *************** function _I2C_Master_Read *****************
  3404 ;; Defined at:
  3405 ;;		line 74 in file "./I2C.h"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;  a               2    0[COMMON] unsigned short 
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;  temp            2    4[COMMON] unsigned short 
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  2    0[COMMON] unsigned short 
  3412 ;; Registers used:
  3413 ;;		wreg, status,2, status,0, pclath, cstack
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3419 ;;      Params:         2       0       0       0       0
  3420 ;;      Locals:         2       0       0       0       0
  3421 ;;      Temps:          2       0       0       0       0
  3422 ;;      Totals:         6       0       0       0       0
  3423 ;;Total ram usage:        6 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:    1
  3426 ;; This function calls:
  3427 ;;		_I2C_Master_Wait
  3428 ;; This function is called by:
  3429 ;;		_get_time
  3430 ;;		_get_temp
  3431 ;;		_get_hall
  3432 ;;		_get_tripwire
  3433 ;;		_get_PIR
  3434 ;;		_get_IR
  3435 ;;		_get_day
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           
  3440                           ;psect for function _I2C_Master_Read
  3441  0262                     _I2C_Master_Read:	
  3442                           
  3443                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  3444                           
  3445                           ;incstack = 0
  3446                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  3447  0262  120A  118A  2114  120A  118A  	fcall	_I2C_Master_Wait
  3448                           
  3449                           ;./I2C.h: 78:     RCEN = 1;
  3450  0267  1683               	bsf	3,5	;RP0=1, select bank1
  3451  0268  1303               	bcf	3,6	;RP1=0, select bank1
  3452  0269  1591               	bsf	17,3	;volatile
  3453                           
  3454                           ;./I2C.h: 79:     I2C_Master_Wait();
  3455  026A  120A  118A  2114  120A  118A  	fcall	_I2C_Master_Wait
  3456                           
  3457                           ;./I2C.h: 80:     temp = SSPBUF;
  3458  026F  1283               	bcf	3,5	;RP0=0, select bank0
  3459  0270  1303               	bcf	3,6	;RP1=0, select bank0
  3460  0271  0813               	movf	19,w	;volatile
  3461  0272  00F2               	movwf	??_I2C_Master_Read
  3462  0273  01F3               	clrf	??_I2C_Master_Read+1
  3463  0274  0872               	movf	??_I2C_Master_Read,w
  3464  0275  00F4               	movwf	I2C_Master_Read@temp
  3465  0276  0873               	movf	??_I2C_Master_Read+1,w
  3466  0277  00F5               	movwf	I2C_Master_Read@temp+1
  3467                           
  3468                           ;./I2C.h: 81:     I2C_Master_Wait();
  3469  0278  120A  118A  2114  120A  118A  	fcall	_I2C_Master_Wait
  3470                           
  3471                           ;./I2C.h: 83:     if(a == 1){
  3472  027D  0370               	decf	I2C_Master_Read@a,w
  3473  027E  0471               	iorwf	I2C_Master_Read@a+1,w
  3474  027F  1D03               	btfss	3,2
  3475  0280  2A85               	goto	l94
  3476                           
  3477                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  3478  0281  1683               	bsf	3,5	;RP0=1, select bank1
  3479  0282  1303               	bcf	3,6	;RP1=0, select bank1
  3480  0283  1291               	bcf	17,5	;volatile
  3481                           
  3482                           ;./I2C.h: 85:     }else{
  3483  0284  2A88               	goto	l95
  3484  0285                     l94:	
  3485                           
  3486                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  3487  0285  1683               	bsf	3,5	;RP0=1, select bank1
  3488  0286  1303               	bcf	3,6	;RP1=0, select bank1
  3489  0287  1691               	bsf	17,5	;volatile
  3490  0288                     l95:	
  3491                           ;./I2C.h: 87:     }
  3492                           
  3493                           
  3494                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  3495  0288  1611               	bsf	17,4	;volatile
  3496                           
  3497                           ;./I2C.h: 89:     return temp;
  3498  0289  0875               	movf	I2C_Master_Read@temp+1,w
  3499  028A  00F1               	movwf	?_I2C_Master_Read+1
  3500  028B  0874               	movf	I2C_Master_Read@temp,w
  3501  028C  00F0               	movwf	?_I2C_Master_Read
  3502  028D  0008               	return
  3503  028E                     __end_of_I2C_Master_Read:	
  3504                           
  3505                           	psect	text23
  3506  0114                     __ptext23:	
  3507 ;; *************** function _I2C_Master_Wait *****************
  3508 ;; Defined at:
  3509 ;;		line 32 in file "./I2C.h"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;		None
  3512 ;; Auto vars:     Size  Location     Type
  3513 ;;		None
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  1    wreg      void 
  3516 ;; Registers used:
  3517 ;;		wreg, status,2
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3523 ;;      Params:         0       0       0       0       0
  3524 ;;      Locals:         0       0       0       0       0
  3525 ;;      Temps:          0       0       0       0       0
  3526 ;;      Totals:         0       0       0       0       0
  3527 ;;Total ram usage:        0 bytes
  3528 ;; Hardware stack levels used:    1
  3529 ;; This function calls:
  3530 ;;		Nothing
  3531 ;; This function is called by:
  3532 ;;		_I2C_Master_Start
  3533 ;;		_I2C_Master_RepeatedStart
  3534 ;;		_I2C_Master_Stop
  3535 ;;		_I2C_Master_Write
  3536 ;;		_I2C_Master_Read
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           
  3541                           ;psect for function _I2C_Master_Wait
  3542  0114                     _I2C_Master_Wait:	
  3543  0114                     l76:	
  3544                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  3545                           
  3546                           ;incstack = 0
  3547                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  3548                           
  3549  0114  1683               	bsf	3,5	;RP0=1, select bank1
  3550  0115  1303               	bcf	3,6	;RP1=0, select bank1
  3551  0116  1914               	btfsc	20,2	;volatile
  3552  0117  2914               	goto	l76
  3553  0118  0811               	movf	17,w	;volatile
  3554  0119  391F               	andlw	31
  3555  011A  1903               	btfsc	3,2
  3556  011B  0008               	return
  3557  011C  2914               	goto	l76
  3558  011D                     __end_of_I2C_Master_Wait:	
  3559                           
  3560                           	psect	text24
  3561  036B                     __ptext24:	
  3562 ;; *************** function _Lcd_Write_String *****************
  3563 ;; Defined at:
  3564 ;;		line 100 in file "./LCD4bits.h"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;  a               2    5[COMMON] PTR unsigned char 
  3567 ;;		 -> NULL(0), get_temp@temperature(6), get_time@string_time(6), STR_9(7), 
  3568 ;;		 -> STR_8(7), STR_7(8), STR_6(8), STR_5(9), 
  3569 ;;		 -> STR_4(9), STR_2(12), STR_1(12), 
  3570 ;; Auto vars:     Size  Location     Type
  3571 ;;  i               2   10[COMMON] int 
  3572 ;; Return value:  Size  Location     Type
  3573 ;;                  1    wreg      void 
  3574 ;; Registers used:
  3575 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3576 ;; Tracked objects:
  3577 ;;		On entry : 0/0
  3578 ;;		On exit  : 0/0
  3579 ;;		Unchanged: 0/0
  3580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3581 ;;      Params:         2       0       0       0       0
  3582 ;;      Locals:         2       0       0       0       0
  3583 ;;      Temps:          3       0       0       0       0
  3584 ;;      Totals:         7       0       0       0       0
  3585 ;;Total ram usage:        7 bytes
  3586 ;; Hardware stack levels used:    1
  3587 ;; Hardware stack levels required when called:    2
  3588 ;; This function calls:
  3589 ;;		_Lcd_Write_Char
  3590 ;; This function is called by:
  3591 ;;		_main
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           
  3596                           ;psect for function _Lcd_Write_String
  3597  036B                     _Lcd_Write_String:	
  3598                           
  3599                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  3600                           
  3601                           ;incstack = 0
  3602                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3603  036B  01FA               	clrf	Lcd_Write_String@i
  3604  036C  01FB               	clrf	Lcd_Write_String@i+1
  3605  036D                     l1710:	
  3606  036D  087A               	movf	Lcd_Write_String@i,w
  3607  036E  0775               	addwf	Lcd_Write_String@a,w
  3608  036F  00F8               	movwf	??_Lcd_Write_String+1
  3609  0370  0876               	movf	Lcd_Write_String@a+1,w
  3610  0371  00F7               	movwf	??_Lcd_Write_String
  3611  0372  1803               	skipnc
  3612  0373  0AF7               	incf	??_Lcd_Write_String,f
  3613  0374  1BFA               	btfsc	Lcd_Write_String@i,7
  3614  0375  03F7               	decf	??_Lcd_Write_String,f
  3615  0376  0877               	movf	??_Lcd_Write_String,w
  3616  0377  00F9               	movwf	??_Lcd_Write_String+2
  3617  0378  0879               	movf	??_Lcd_Write_String+2,w
  3618  0379  1283               	bcf	3,5	;RP0=0, select bank0
  3619  037A  1303               	bcf	3,6	;RP1=0, select bank0
  3620  037B  00FF               	movwf	127
  3621  037C  0878               	movf	??_Lcd_Write_String+1,w
  3622  037D  0084               	movwf	4
  3623  037E  120A  118A  2003  120A  118A  	fcall	stringtab
  3624  0383  3A00               	xorlw	0
  3625  0384  1903               	btfsc	3,2
  3626  0385  0008               	return
  3627                           
  3628                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  3629  0386  087A               	movf	Lcd_Write_String@i,w
  3630  0387  0775               	addwf	Lcd_Write_String@a,w
  3631  0388  00F8               	movwf	??_Lcd_Write_String+1
  3632  0389  0876               	movf	Lcd_Write_String@a+1,w
  3633  038A  00F7               	movwf	??_Lcd_Write_String
  3634  038B  1803               	skipnc
  3635  038C  0AF7               	incf	??_Lcd_Write_String,f
  3636  038D  1BFA               	btfsc	Lcd_Write_String@i,7
  3637  038E  03F7               	decf	??_Lcd_Write_String,f
  3638  038F  0877               	movf	??_Lcd_Write_String,w
  3639  0390  00F9               	movwf	??_Lcd_Write_String+2
  3640  0391  0879               	movf	??_Lcd_Write_String+2,w
  3641  0392  1283               	bcf	3,5	;RP0=0, select bank0
  3642  0393  1303               	bcf	3,6	;RP1=0, select bank0
  3643  0394  00FF               	movwf	127
  3644  0395  0878               	movf	??_Lcd_Write_String+1,w
  3645  0396  0084               	movwf	4
  3646  0397  120A  118A  2003  120A  118A  	fcall	stringtab
  3647  039C  120A  118A  22F6  120A  118A  	fcall	_Lcd_Write_Char
  3648  03A1  3001               	movlw	1
  3649  03A2  07FA               	addwf	Lcd_Write_String@i,f
  3650  03A3  1803               	skipnc
  3651  03A4  0AFB               	incf	Lcd_Write_String@i+1,f
  3652  03A5  3000               	movlw	0
  3653  03A6  07FB               	addwf	Lcd_Write_String@i+1,f
  3654  03A7  2B6D               	goto	l1710
  3655  03A8                     __end_of_Lcd_Write_String:	
  3656                           
  3657                           	psect	text25
  3658  02F6                     __ptext25:	
  3659 ;; *************** function _Lcd_Write_Char *****************
  3660 ;; Defined at:
  3661 ;;		line 84 in file "./LCD4bits.h"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;  a               1    wreg     unsigned char 
  3664 ;; Auto vars:     Size  Location     Type
  3665 ;;  a               1    4[COMMON] unsigned char 
  3666 ;;  y               1    3[COMMON] unsigned char 
  3667 ;;  temp            1    2[COMMON] unsigned char 
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  1    wreg      void 
  3670 ;; Registers used:
  3671 ;;		wreg, status,2, status,0, pclath, cstack
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3677 ;;      Params:         0       0       0       0       0
  3678 ;;      Locals:         3       0       0       0       0
  3679 ;;      Temps:          1       0       0       0       0
  3680 ;;      Totals:         4       0       0       0       0
  3681 ;;Total ram usage:        4 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    1
  3684 ;; This function calls:
  3685 ;;		_Lcd_Port
  3686 ;; This function is called by:
  3687 ;;		_Lcd_Write_String
  3688 ;;		_main
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           
  3693                           ;psect for function _Lcd_Write_Char
  3694  02F6                     _Lcd_Write_Char:	
  3695                           
  3696                           ;incstack = 0
  3697                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3698                           ;Lcd_Write_Char@a stored from wreg
  3699  02F6  00F4               	movwf	Lcd_Write_Char@a
  3700                           
  3701                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  3702  02F7  0874               	movf	Lcd_Write_Char@a,w
  3703  02F8  390F               	andlw	15
  3704  02F9  00F1               	movwf	??_Lcd_Write_Char
  3705  02FA  0871               	movf	??_Lcd_Write_Char,w
  3706  02FB  00F2               	movwf	Lcd_Write_Char@temp
  3707                           
  3708                           ;./LCD4bits.h: 88:    y = a&0xF0;
  3709  02FC  0874               	movf	Lcd_Write_Char@a,w
  3710  02FD  39F0               	andlw	240
  3711  02FE  00F1               	movwf	??_Lcd_Write_Char
  3712  02FF  0871               	movf	??_Lcd_Write_Char,w
  3713  0300  00F3               	movwf	Lcd_Write_Char@y
  3714                           
  3715                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  3716  0301  1283               	bcf	3,5	;RP0=0, select bank0
  3717  0302  1303               	bcf	3,6	;RP1=0, select bank0
  3718  0303  1606               	bsf	6,4	;volatile
  3719                           
  3720                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  3721  0304  0873               	movf	Lcd_Write_Char@y,w
  3722  0305  00F1               	movwf	??_Lcd_Write_Char
  3723  0306  3004               	movlw	4
  3724  0307                     u895:	
  3725  0307  1003               	clrc
  3726  0308  0CF1               	rrf	??_Lcd_Write_Char,f
  3727  0309  3EFF               	addlw	-1
  3728  030A  1D03               	skipz
  3729  030B  2B07               	goto	u895
  3730  030C  0871               	movf	??_Lcd_Write_Char,w
  3731  030D  120A  118A  2139  120A  118A  	fcall	_Lcd_Port
  3732                           
  3733                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  3734  0312  1283               	bcf	3,5	;RP0=0, select bank0
  3735  0313  1303               	bcf	3,6	;RP1=0, select bank0
  3736  0314  1686               	bsf	6,5	;volatile
  3737                           
  3738                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3739  0315  301A               	movlw	26
  3740  0316  00F1               	movwf	??_Lcd_Write_Char
  3741  0317                     u1247:	
  3742  0317  0BF1               	decfsz	??_Lcd_Write_Char,f
  3743  0318  2B17               	goto	u1247
  3744  0319  0000               	nop
  3745                           
  3746                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  3747  031A  1283               	bcf	3,5	;RP0=0, select bank0
  3748  031B  1303               	bcf	3,6	;RP1=0, select bank0
  3749  031C  1286               	bcf	6,5	;volatile
  3750                           
  3751                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  3752  031D  0872               	movf	Lcd_Write_Char@temp,w
  3753  031E  120A  118A  2139  120A  118A  	fcall	_Lcd_Port
  3754                           
  3755                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  3756  0323  1283               	bcf	3,5	;RP0=0, select bank0
  3757  0324  1303               	bcf	3,6	;RP1=0, select bank0
  3758  0325  1686               	bsf	6,5	;volatile
  3759                           
  3760                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3761  0326  301A               	movlw	26
  3762  0327  00F1               	movwf	??_Lcd_Write_Char
  3763  0328                     u1257:	
  3764  0328  0BF1               	decfsz	??_Lcd_Write_Char,f
  3765  0329  2B28               	goto	u1257
  3766  032A  0000               	nop
  3767                           
  3768                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  3769  032B  1283               	bcf	3,5	;RP0=0, select bank0
  3770  032C  1303               	bcf	3,6	;RP1=0, select bank0
  3771  032D  1286               	bcf	6,5	;volatile
  3772  032E  0008               	return
  3773  032F                     __end_of_Lcd_Write_Char:	
  3774                           
  3775                           	psect	text26
  3776  03A8                     __ptext26:	
  3777 ;; *************** function _Lcd_Set_Cursor *****************
  3778 ;; Defined at:
  3779 ;;		line 44 in file "./LCD4bits.h"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;  a               1    wreg     unsigned char 
  3782 ;;  b               1    4[COMMON] unsigned char 
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;  a               1    7[COMMON] unsigned char 
  3785 ;;  temp            1   10[COMMON] unsigned char 
  3786 ;;  y               1    9[COMMON] unsigned char 
  3787 ;;  z               1    8[COMMON] unsigned char 
  3788 ;; Return value:  Size  Location     Type
  3789 ;;                  1    wreg      void 
  3790 ;; Registers used:
  3791 ;;		wreg, status,2, status,0, pclath, cstack
  3792 ;; Tracked objects:
  3793 ;;		On entry : 0/0
  3794 ;;		On exit  : 0/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3797 ;;      Params:         1       0       0       0       0
  3798 ;;      Locals:         4       0       0       0       0
  3799 ;;      Temps:          2       0       0       0       0
  3800 ;;      Totals:         7       0       0       0       0
  3801 ;;Total ram usage:        7 bytes
  3802 ;; Hardware stack levels used:    1
  3803 ;; Hardware stack levels required when called:    2
  3804 ;; This function calls:
  3805 ;;		_Lcd_Cmd
  3806 ;; This function is called by:
  3807 ;;		_main
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           
  3812                           ;psect for function _Lcd_Set_Cursor
  3813  03A8                     _Lcd_Set_Cursor:	
  3814                           
  3815                           ;incstack = 0
  3816                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3817                           ;Lcd_Set_Cursor@a stored from wreg
  3818  03A8  00F7               	movwf	Lcd_Set_Cursor@a
  3819                           
  3820                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  3821  03A9  0377               	decf	Lcd_Set_Cursor@a,w
  3822  03AA  1D03               	btfss	3,2
  3823  03AB  2BCD               	goto	l1694
  3824                           
  3825                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  3826  03AC  0874               	movf	Lcd_Set_Cursor@b,w
  3827  03AD  3E7F               	addlw	127
  3828  03AE  00F5               	movwf	??_Lcd_Set_Cursor
  3829  03AF  0875               	movf	??_Lcd_Set_Cursor,w
  3830  03B0  00FA               	movwf	Lcd_Set_Cursor@temp
  3831                           
  3832                           ;./LCD4bits.h: 50:   z = temp>>4;
  3833  03B1  087A               	movf	Lcd_Set_Cursor@temp,w
  3834  03B2  00F5               	movwf	??_Lcd_Set_Cursor
  3835  03B3  3004               	movlw	4
  3836  03B4                     u1025:	
  3837  03B4  1003               	clrc
  3838  03B5  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3839  03B6  3EFF               	addlw	-1
  3840  03B7  1D03               	skipz
  3841  03B8  2BB4               	goto	u1025
  3842  03B9  0875               	movf	??_Lcd_Set_Cursor,w
  3843  03BA  00F6               	movwf	??_Lcd_Set_Cursor+1
  3844  03BB  0876               	movf	??_Lcd_Set_Cursor+1,w
  3845  03BC  00F8               	movwf	Lcd_Set_Cursor@z
  3846                           
  3847                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  3848  03BD  087A               	movf	Lcd_Set_Cursor@temp,w
  3849  03BE  390F               	andlw	15
  3850  03BF  00F5               	movwf	??_Lcd_Set_Cursor
  3851  03C0  0875               	movf	??_Lcd_Set_Cursor,w
  3852  03C1  00F9               	movwf	Lcd_Set_Cursor@y
  3853                           
  3854                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  3855  03C2  0878               	movf	Lcd_Set_Cursor@z,w
  3856  03C3  120A  118A  2153  120A  118A  	fcall	_Lcd_Cmd
  3857                           
  3858                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  3859  03C8  0879               	movf	Lcd_Set_Cursor@y,w
  3860  03C9  120A  118A  2153   	fcall	_Lcd_Cmd
  3861                           
  3862                           ;./LCD4bits.h: 54:  }
  3863  03CC  0008               	return
  3864  03CD                     l1694:	
  3865  03CD  3002               	movlw	2
  3866  03CE  0677               	xorwf	Lcd_Set_Cursor@a,w
  3867  03CF  1D03               	btfss	3,2
  3868  03D0  0008               	return
  3869                           
  3870                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  3871  03D1  0874               	movf	Lcd_Set_Cursor@b,w
  3872  03D2  3EBF               	addlw	191
  3873  03D3  00F5               	movwf	??_Lcd_Set_Cursor
  3874  03D4  0875               	movf	??_Lcd_Set_Cursor,w
  3875  03D5  00FA               	movwf	Lcd_Set_Cursor@temp
  3876                           
  3877                           ;./LCD4bits.h: 58:   z = temp>>4;
  3878  03D6  087A               	movf	Lcd_Set_Cursor@temp,w
  3879  03D7  00F5               	movwf	??_Lcd_Set_Cursor
  3880  03D8  3004               	movlw	4
  3881  03D9                     u1045:	
  3882  03D9  1003               	clrc
  3883  03DA  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3884  03DB  3EFF               	addlw	-1
  3885  03DC  1D03               	skipz
  3886  03DD  2BD9               	goto	u1045
  3887  03DE  0875               	movf	??_Lcd_Set_Cursor,w
  3888  03DF  00F6               	movwf	??_Lcd_Set_Cursor+1
  3889  03E0  0876               	movf	??_Lcd_Set_Cursor+1,w
  3890  03E1  00F8               	movwf	Lcd_Set_Cursor@z
  3891                           
  3892                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  3893  03E2  087A               	movf	Lcd_Set_Cursor@temp,w
  3894  03E3  390F               	andlw	15
  3895  03E4  00F5               	movwf	??_Lcd_Set_Cursor
  3896  03E5  0875               	movf	??_Lcd_Set_Cursor,w
  3897  03E6  00F9               	movwf	Lcd_Set_Cursor@y
  3898                           
  3899                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  3900  03E7  0878               	movf	Lcd_Set_Cursor@z,w
  3901  03E8  120A  118A  2153  120A  118A  	fcall	_Lcd_Cmd
  3902                           
  3903                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  3904  03ED  0879               	movf	Lcd_Set_Cursor@y,w
  3905  03EE  120A  118A  2153   	fcall	_Lcd_Cmd
  3906  03F1  0008               	return
  3907  03F2                     __end_of_Lcd_Set_Cursor:	
  3908                           
  3909                           	psect	text27
  3910  011D                     __ptext27:	
  3911 ;; *************** function _Lcd_Clear *****************
  3912 ;; Defined at:
  3913 ;;		line 38 in file "./LCD4bits.h"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;		None
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;		None
  3918 ;; Return value:  Size  Location     Type
  3919 ;;                  1    wreg      void 
  3920 ;; Registers used:
  3921 ;;		wreg, status,2, status,0, pclath, cstack
  3922 ;; Tracked objects:
  3923 ;;		On entry : 0/0
  3924 ;;		On exit  : 0/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3927 ;;      Params:         0       0       0       0       0
  3928 ;;      Locals:         0       0       0       0       0
  3929 ;;      Temps:          0       0       0       0       0
  3930 ;;      Totals:         0       0       0       0       0
  3931 ;;Total ram usage:        0 bytes
  3932 ;; Hardware stack levels used:    1
  3933 ;; Hardware stack levels required when called:    2
  3934 ;; This function calls:
  3935 ;;		_Lcd_Cmd
  3936 ;; This function is called by:
  3937 ;;		_main
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           
  3942                           ;psect for function _Lcd_Clear
  3943  011D                     _Lcd_Clear:	
  3944                           
  3945                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  3946                           
  3947                           ;incstack = 0
  3948                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3949  011D  3000               	movlw	0
  3950  011E  120A  118A  2153  120A  118A  	fcall	_Lcd_Cmd
  3951                           
  3952                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  3953  0123  3001               	movlw	1
  3954  0124  120A  118A  2153   	fcall	_Lcd_Cmd
  3955  0127  0008               	return
  3956  0128                     __end_of_Lcd_Clear:	
  3957                           
  3958                           	psect	text28
  3959  0153                     __ptext28:	
  3960 ;; *************** function _Lcd_Cmd *****************
  3961 ;; Defined at:
  3962 ;;		line 29 in file "./LCD4bits.h"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;  a               1    wreg     unsigned char 
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;  a               1    3[COMMON] unsigned char 
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  1    wreg      void 
  3969 ;; Registers used:
  3970 ;;		wreg, status,2, status,0, pclath, cstack
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3976 ;;      Params:         0       0       0       0       0
  3977 ;;      Locals:         1       0       0       0       0
  3978 ;;      Temps:          2       0       0       0       0
  3979 ;;      Totals:         3       0       0       0       0
  3980 ;;Total ram usage:        3 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    1
  3983 ;; This function calls:
  3984 ;;		_Lcd_Port
  3985 ;; This function is called by:
  3986 ;;		_Lcd_Clear
  3987 ;;		_Lcd_Set_Cursor
  3988 ;;		_Lcd_Init
  3989 ;;		_Lcd_Shift_Right
  3990 ;;		_Lcd_Shift_Left
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           
  3995                           ;psect for function _Lcd_Cmd
  3996  0153                     _Lcd_Cmd:	
  3997                           
  3998                           ;incstack = 0
  3999                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4000                           ;Lcd_Cmd@a stored from wreg
  4001  0153  00F3               	movwf	Lcd_Cmd@a
  4002                           
  4003                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  4004  0154  1283               	bcf	3,5	;RP0=0, select bank0
  4005  0155  1303               	bcf	3,6	;RP1=0, select bank0
  4006  0156  1206               	bcf	6,4	;volatile
  4007                           
  4008                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  4009  0157  0873               	movf	Lcd_Cmd@a,w
  4010  0158  120A  118A  2139  120A  118A  	fcall	_Lcd_Port
  4011                           
  4012                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  4013  015D  1283               	bcf	3,5	;RP0=0, select bank0
  4014  015E  1303               	bcf	3,6	;RP1=0, select bank0
  4015  015F  1686               	bsf	6,5	;volatile
  4016                           
  4017                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  4018  0160  300B               	movlw	11
  4019  0161  00F2               	movwf	??_Lcd_Cmd+1
  4020  0162  3062               	movlw	98
  4021  0163  00F1               	movwf	??_Lcd_Cmd
  4022  0164                     u1267:	
  4023  0164  0BF1               	decfsz	??_Lcd_Cmd,f
  4024  0165  2964               	goto	u1267
  4025  0166  0BF2               	decfsz	??_Lcd_Cmd+1,f
  4026  0167  2964               	goto	u1267
  4027  0168  0000               	nop
  4028                           
  4029                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  4030  0169  1283               	bcf	3,5	;RP0=0, select bank0
  4031  016A  1303               	bcf	3,6	;RP1=0, select bank0
  4032  016B  1286               	bcf	6,5	;volatile
  4033  016C  0008               	return
  4034  016D                     __end_of_Lcd_Cmd:	
  4035                           
  4036                           	psect	text29
  4037  0139                     __ptext29:	
  4038 ;; *************** function _Lcd_Port *****************
  4039 ;; Defined at:
  4040 ;;		line 7 in file "./LCD4bits.h"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;  a               1    wreg     unsigned char 
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;  a               1    0[COMMON] unsigned char 
  4045 ;; Return value:  Size  Location     Type
  4046 ;;                  1    wreg      void 
  4047 ;; Registers used:
  4048 ;;		wreg
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4054 ;;      Params:         0       0       0       0       0
  4055 ;;      Locals:         1       0       0       0       0
  4056 ;;      Temps:          0       0       0       0       0
  4057 ;;      Totals:         1       0       0       0       0
  4058 ;;Total ram usage:        1 bytes
  4059 ;; Hardware stack levels used:    1
  4060 ;; This function calls:
  4061 ;;		Nothing
  4062 ;; This function is called by:
  4063 ;;		_Lcd_Cmd
  4064 ;;		_Lcd_Init
  4065 ;;		_Lcd_Write_Char
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           
  4070                           ;psect for function _Lcd_Port
  4071  0139                     _Lcd_Port:	
  4072                           
  4073                           ;incstack = 0
  4074                           ; Regs used in _Lcd_Port: [wreg]
  4075                           ;Lcd_Port@a stored from wreg
  4076  0139  00F0               	movwf	Lcd_Port@a
  4077                           
  4078                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  4079  013A  1C70               	btfss	Lcd_Port@a,0
  4080  013B  2940               	goto	l102
  4081                           
  4082                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  4083  013C  1283               	bcf	3,5	;RP0=0, select bank0
  4084  013D  1303               	bcf	3,6	;RP1=0, select bank0
  4085  013E  1406               	bsf	6,0	;volatile
  4086  013F  2943               	goto	l103
  4087  0140                     l102:	
  4088                           ;./LCD4bits.h: 11:  else
  4089                           
  4090                           
  4091                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  4092  0140  1283               	bcf	3,5	;RP0=0, select bank0
  4093  0141  1303               	bcf	3,6	;RP1=0, select bank0
  4094  0142  1006               	bcf	6,0	;volatile
  4095  0143                     l103:	
  4096                           
  4097                           ;./LCD4bits.h: 14:  if(a & 2)
  4098  0143  1CF0               	btfss	Lcd_Port@a,1
  4099  0144  2947               	goto	l104
  4100                           
  4101                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  4102  0145  1486               	bsf	6,1	;volatile
  4103  0146  2948               	goto	l105
  4104  0147                     l104:	
  4105                           ;./LCD4bits.h: 16:  else
  4106                           
  4107                           
  4108                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  4109  0147  1086               	bcf	6,1	;volatile
  4110  0148                     l105:	
  4111                           
  4112                           ;./LCD4bits.h: 19:  if(a & 4)
  4113  0148  1D70               	btfss	Lcd_Port@a,2
  4114  0149  294C               	goto	l106
  4115                           
  4116                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  4117  014A  1506               	bsf	6,2	;volatile
  4118  014B  294D               	goto	l107
  4119  014C                     l106:	
  4120                           ;./LCD4bits.h: 21:  else
  4121                           
  4122                           
  4123                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  4124  014C  1106               	bcf	6,2	;volatile
  4125  014D                     l107:	
  4126                           
  4127                           ;./LCD4bits.h: 24:  if(a & 8)
  4128  014D  1DF0               	btfss	Lcd_Port@a,3
  4129  014E  2951               	goto	l108
  4130                           
  4131                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  4132  014F  1586               	bsf	6,3	;volatile
  4133  0150  0008               	return
  4134  0151                     l108:	
  4135                           ;./LCD4bits.h: 26:  else
  4136                           
  4137                           
  4138                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  4139  0151  1186               	bcf	6,3	;volatile
  4140  0152  0008               	return
  4141  0153                     __end_of_Lcd_Port:	
  4142  007E                     btemp	set	126	;btemp
  4143  007E                     wtemp0	set	126


Data Sizes:
    Strings     73
    Constant    10
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      35
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_3(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), get_temp@temperature(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_12(CODE[4]), STR_11(CODE[5]), STR_10(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), get_temp@temperature(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    sp__get_temp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    temp	PTR unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), get_temp@temperature(BANK0[6]), 

    sp__get_time	PTR unsigned char  size(1) Largest target is 6
		 -> get_time@string_time(BANK0[6]), 

    time	PTR unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), get_time@string_time(BANK0[6]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 12
		 -> NULL(NULL[0]), get_temp@temperature(BANK0[6]), get_time@string_time(BANK0[6]), STR_9(CODE[7]), 
		 -> STR_8(CODE[7]), STR_7(CODE[8]), STR_6(CODE[8]), STR_5(CODE[9]), 
		 -> STR_4(CODE[9]), STR_2(CODE[12]), STR_1(CODE[12]), 


Critical Paths under _main in COMMON

    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_I2C_Master_Init
    _get_temp->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   18600
                                             27 BANK0      1     1      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                             _get_IR
                            _get_PIR
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                              _setup
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     200
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     632
                    _I2C_Master_Init
                           _Lcd_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     412
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                            10    10      0    2430
                                              6 COMMON     2     2      0
                                              0 BANK0      8     8      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                            14    14      0    4315
                                             13 BANK0     14    14      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1429
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     168
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2217
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1466
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     729
                                              0 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1028
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     836
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _initOscilador
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      31       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1C      23       5       43.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      31      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Feb 28 15:45:30 2019

                                pc 0002                     ___bmul@product 0072  
                      __CFG_CP$OFF 0000                                 l76 0114  
                      get_hall@key 0077                                 l94 0285  
                               l95 0288                                 _IR 003D  
                               fsr 0004                                l102 0140  
                              l103 0143                                l104 0147  
                              l105 0148                                l106 014C  
                              l107 014D                                l108 0151  
                              l145 0445                                l177 0782  
                              l186 07EE                                _GIE 005F  
                     __CFG_CPD$OFF 0000                                u705 04C4  
                              u715 04D9                                _PIR 003E  
                              u725 04EB                                u825 0297  
                              u755 033A                                u845 02A8  
                              u925 0688                                u685 04B6  
                              u775 0346                                u855 02B1  
                              u785 0352                                u795 035C  
                              u875 02D2                                u895 0307  
                    ?_get_tripwire 0070                                fsr0 0004  
                              indf 0000                       __CFG_LVP$OFF 0000  
                             l1430 04C2                               l1610 0658  
                             l1442 04F7                               l1620 066F  
                             l1604 063A                               l1428 04B2  
                             l1710 036D                               l1438 04EA  
                             l1464 035B                               l1456 0337  
                             l1480 0294                               l1632 0692  
                             l1458 0345                               l1482 02A2  
                             l1490 02BB                               l1626 0671  
                             l1650 06E6                               l1570 03F4  
                             l1468 0366                               l1580 0411  
                             l1572 03F9                               l1820 06F8  
                             l1670 012A                               l1486 02B0  
                             l1646 06A5                               l1638 06A1  
                             l1662 01F0                               l1582 0417  
                             l1574 03FF                               l1590 0423  
                             l1648 061A                               l1664 01FB  
                             l1584 041E                               l1576 0405  
                             l1674 0130                               l1666 0203  
                             l1762 05F3                               l1586 041E  
                             l1578 040B                               l1842 075E  
                             l1860 07BB                               l1852 07A0  
                             l1694 03CD                               l1926 042B  
                             l1870 07DD                               l1846 0785  
                             l1854 07A2                               l1928 064D  
                             l1784 0247                               l1786 023A  
                             l1788 025C                               STR_1 001D  
                             STR_2 0029                        get_time@min 0027  
                             STR_3 0057                               STR_4 0035  
                             STR_5 003E                               STR_6 0047  
                             STR_7 004F                               STR_8 0048  
                             STR_9 0050                               u1025 03B4  
                             u1105 05CB                               u1045 03D9  
                             u1217 0451                               u1227 0460  
                             u1085 054C                               u1237 046F  
                             u1165 077C                               u1247 0317  
                             u1095 0563                               u1257 0328  
                             u1267 0164                               _PEIE 005E  
                             _RCEN 048B                       __CFG_WRT$OFF 0000  
                ?_Lcd_Write_String 0075   __end_of_I2C_Master_RepeatedStart 010C  
                             _door 0040                               _main 06EB  
                             _temp 0041                               _time 0042  
                             _trip 003F                               btemp 007E  
                             start 0000                 ??_Lcd_Write_String 0077  
                    __CFG_IESO$OFF 0000                    __end_of_Lcd_Cmd 016D  
                ___bmul@multiplier 0073                      __CFG_MCLRE$ON 0000  
              get_temp@temperature 0030                   ?_I2C_Master_Init 0020  
                 ?_I2C_Master_Read 0070                   ?_I2C_Master_Wait 0070  
                 ?_I2C_Master_Stop 0070                              ?_main 0070  
                            STR_10 0063                              STR_11 005D  
                            STR_12 0062                      __CFG_WDTE$OFF 0000  
                     get_time@hour 0026                              _ANSEL 0188  
                  __end_of___lldiv 0500                     ??_get_tripwire 0076  
                  __end_of___lwdiv 036B                    __end_of___lwmod 02C0  
                            _PORTA 0005                              _PORTB 0006  
          __size_of_Lcd_Set_Cursor 004A                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
                            _SSPIE 0463                              _SSPIF 0063  
                  __end_of_get_PIR 018C                     __CFG_FCMEN$OFF 0000  
                  __end_of_dpowers 001D                              _setup 020F  
                            _state 003C                     __CFG_BOREN$OFF 0000  
                            pclath 000A                              status 0003  
                            wtemp0 007E                    __end_of_sprintf 06EB  
                 __end_of_Lcd_Init 04A2                   __end_of_Lcd_Port 0153  
                  __initialization 07F3                       __end_of_main 07F3  
           __size_of_initOscilador 0055                             ??_main 003B  
               __size_of_Lcd_Clear 000B                  ?_I2C_Master_Start 0070  
                ?_I2C_Master_Write 0070                 ??_I2C_Master_Start 0070  
               ??_I2C_Master_Write 0072                             ?_setup 0070  
                           _ANSELH 0189                          ??_Lcd_Cmd 0071  
          __size_of_Lcd_Write_Char 0039                             _SSPADD 0093  
                           _TRISC3 043B                             _TRISC4 043C  
                           _SSPCON 0014                             _SSPBUF 0013  
                   __CFG_PWRTE$OFF 0000           _I2C_Master_RepeatedStart 0105  
                 __end_of_get_hall 01AB                   __end_of_get_temp 0613  
                 __end_of_get_time 0576                             ___bmul 0128  
                        ??___lldiv 0078                             _get_IR 01CA  
                        ??___lwdiv 0074                          ??___lwmod 007C  
                        ??_get_PIR 0076                             _strcat 01EB  
                           _strcmp 0238                          ??_sprintf 0023  
                  Lcd_Set_Cursor@a 0077                    Lcd_Set_Cursor@b 0074  
                  Lcd_Set_Cursor@y 0079                    Lcd_Set_Cursor@z 0078  
          __end_of__initialization 07FC                      _initOscilador 03F2  
                __end_of_Lcd_Clear 0128               __end_of_get_tripwire 01CA  
              ___bmul@multiplicand 0070                     __pcstackCOMMON 0070  
                    __end_of_setup 0238                     _Lcd_Set_Cursor 03A8  
                        ?_Lcd_Init 0070                          ?_Lcd_Port 0070  
                          ??_setup 007E                         __pbssBANK0 003C  
                   ?_initOscilador 0070                         __pmaintext 06EB  
                          ?___bmul 0070                            ?_get_IR 0070  
        __size_of_Lcd_Write_String 003D             __end_of_Lcd_Set_Cursor 03F2  
                          ?_strcat 0070                            ?_strcmp 0070  
                       ??_Lcd_Init 0074                         ??_Lcd_Port 0070  
                          _SSPCON2 0091                          ?_get_hall 0070  
                          _SSPSTAT 0094                          ?_get_temp 0070  
                        ?_get_time 0070                         __stringtab 0003  
              initOscilador@option 0072                     _Lcd_Write_Char 02F6  
                          _Lcd_Cmd 0153                    __size_of___bmul 0011  
                          ___lldiv 04A2                            ___lwdiv 032F  
                          ___lwmod 028E                    __size_of_get_IR 0021  
                  ?_Lcd_Set_Cursor 0074                            _get_PIR 016D  
                          __ptext1 0238                            __ptext2 020F  
                          __ptext3 03F2                            __ptext4 0447  
                          __ptext5 02C0                            __ptext6 04A2  
                          __ptext7 01AB                            __ptext8 0500  
                          __ptext9 0576                    __size_of_strcat 0024  
                  __size_of_strcmp 002A                            _dpowers 0013  
         __size_of_I2C_Master_Init 0036           __size_of_I2C_Master_Read 002C  
         __size_of_I2C_Master_Wait 0009           __size_of_I2C_Master_Stop 0007  
                  ??_initOscilador 0070                         ??_get_hall 0076  
                          _sprintf 0613             __end_of_Lcd_Write_Char 032F  
                       ??_get_temp 002D                         ??_get_time 0076  
             end_of_initialization 07FC              __size_of_get_tripwire 001F  
       ??_I2C_Master_RepeatedStart 0070                         get_PIR@PIR 0077  
        __size_of_I2C_Master_Start 0007          __size_of_I2C_Master_Write 0008  
                  ___lldiv@divisor 0070                    ___lldiv@counter 007D  
                 I2C_Master_Init@c 0020                   I2C_Master_Read@a 0070  
                        Lcd_Port@a 0070                            strcmp@r 0075  
                        _PORTAbits 0005                          _PORTBbits 0006  
                        _PORTCbits 0007                       _get_tripwire 01AB  
                  ?_Lcd_Write_Char 0070                  Lcd_Write_String@a 0075  
                Lcd_Write_String@i 007A                get_time@string_time 0020  
                        _Lcd_Clear 011D                     __end_of___bmul 0139  
                 _Lcd_Write_String 036B                     __end_of_get_IR 01EB  
                   __end_of_strcat 020F                     __end_of_strcmp 0262  
              start_initialization 07F3                  __size_of_Lcd_Init 005B  
                __size_of_Lcd_Port 001A                  ??_I2C_Master_Init 0024  
                ??_I2C_Master_Read 0072                  ??_I2C_Master_Wait 0070  
                ??_I2C_Master_Stop 0070           __CFG_FOSC$INTRC_NOCLKOUT 0000  
                       ?_Lcd_Clear 0070                           ??___bmul 0071  
                         ??_get_IR 0076                    Lcd_Write_Char@a 0074  
                  Lcd_Write_Char@y 0073                           ??_strcat 0071  
                         ??_strcmp 0072                          ___latbits 0002  
                    __pcstackBANK0 0020                  __size_of_get_hall 001F  
                         ?_Lcd_Cmd 0070                  __size_of_get_temp 009D  
                __size_of_get_time 0076                        sprintf@flag 0027  
                      sprintf@prec 0028                   _I2C_Master_Start 00F7  
                 _I2C_Master_Write 010C                   ___lwdiv@dividend 0072  
                 ??_Lcd_Set_Cursor 0075                    get_temp@decimal 0036  
                         ?___lldiv 0070                           ?___lwdiv 0070  
                         ?___lwmod 0078                           ?_get_PIR 0070  
                        __pstrings 0003                    get_temp@tempLSB 003A  
                  get_temp@tempMSB 0039                   ___lwdiv@quotient 0075  
                         ?_sprintf 0020                     __size_of_setup 0029  
                         Lcd_Cmd@a 0073                        ??_Lcd_Clear 0074  
                      __stringbase 0012                   ??_Lcd_Write_Char 0071  
                         _Lcd_Init 0447                           _Lcd_Port 0139  
              I2C_Master_Read@temp 0074              __end_of_initOscilador 0447  
         __end_of_Lcd_Write_String 03A8                   __size_of_Lcd_Cmd 001A  
__size_of_I2C_Master_RepeatedStart 0007          ?_I2C_Master_RepeatedStart 0070  
                 __size_of___lldiv 005E                   __size_of___lwdiv 003C  
                 __size_of___lwmod 0032                 __end_of__stringtab 0013  
                 __size_of_get_PIR 001F                         sprintf@val 0029  
                  _I2C_Master_Init 02C0                    _I2C_Master_Read 0262  
                  _I2C_Master_Wait 0114                         strcat@from 0070  
                  _I2C_Master_Stop 00FE                    ___lwdiv@divisor 0070  
                  ___lwdiv@counter 0077                           __ptext10 01EB  
                         __ptext11 0613                           __ptext20 00FE  
                         __ptext12 028E                           __ptext21 00F7  
                         __ptext13 032F                           __ptext22 0262  
                         __ptext14 0128                           __ptext23 0114  
                         __ptext15 0105                           __ptext24 036B  
                         __ptext16 018C                           __ptext25 02F6  
                         __ptext17 016D                           __ptext26 03A8  
                         __ptext18 01CA                           __ptext27 011D  
                         __ptext19 010C                           __ptext28 0153  
                         __ptext29 0139                  __CFG_BOR4V$BOR40V 0000  
                         _get_hall 018C                           _get_temp 0576  
                         _get_time 0500                   __size_of_sprintf 00D8  
                    __size_of_main 0108                           get_IR@IR 0077  
         __end_of_I2C_Master_Start 00FE           __end_of_I2C_Master_Write 0114  
               Lcd_Write_Char@temp 0072                          sprintf@ap 0026  
                        sprintf@sp 002B                   ___lwmod@dividend 007A  
                 ___lldiv@dividend 0074                          stringcode 000D  
                       _OSCCONbits 008F            __end_of_I2C_Master_Init 02F6  
          __end_of_I2C_Master_Read 028E            __end_of_I2C_Master_Wait 011D  
          __end_of_I2C_Master_Stop 0105                 Lcd_Set_Cursor@temp 007A  
                         sprintf@c 002C                           sprintf@f 0020  
                         strcat@cp 0073                           strcat@to 0072  
                         strcmp@s1 0076                           strcmp@s2 0070  
                 ___lldiv@quotient 0079                  I2C_Master_Write@d 0070  
                  ___lwmod@divisor 0078                    ___lwmod@counter 007D  
                         stringdir 000D                   get_tripwire@trip 0077  
                         stringtab 0003                        _SSPCON2bits 0091  

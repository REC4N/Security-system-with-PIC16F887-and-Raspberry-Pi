

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Mar 03 23:06:08 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	psect	text28,local,class=CODE,merge=1,delta=2
    39                           	psect	text29,local,class=CODE,merge=1,delta=2
    40                           	psect	text30,local,class=CODE,merge=1,delta=2
    41                           	psect	text31,local,class=CODE,merge=1,delta=2
    42                           	psect	text32,local,class=CODE,merge=1,delta=2
    43                           	psect	text33,local,class=CODE,merge=1,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 2.05
    47                           ; Generated 20/12/2018 GMT
    48                           ; 
    49                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F887 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  0087                     	;# 
   119  0088                     	;# 
   120  0089                     	;# 
   121  008C                     	;# 
   122  008D                     	;# 
   123  008E                     	;# 
   124  008F                     	;# 
   125  0090                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0093                     	;# 
   130  0093                     	;# 
   131  0094                     	;# 
   132  0095                     	;# 
   133  0096                     	;# 
   134  0097                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009A                     	;# 
   138  009B                     	;# 
   139  009C                     	;# 
   140  009D                     	;# 
   141  009E                     	;# 
   142  009F                     	;# 
   143  0105                     	;# 
   144  0107                     	;# 
   145  0108                     	;# 
   146  0109                     	;# 
   147  010C                     	;# 
   148  010C                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  0185                     	;# 
   153  0187                     	;# 
   154  0188                     	;# 
   155  0189                     	;# 
   156  018C                     	;# 
   157  018D                     	;# 
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  000E                     	;# 
   174  000F                     	;# 
   175  0010                     	;# 
   176  0011                     	;# 
   177  0012                     	;# 
   178  0013                     	;# 
   179  0014                     	;# 
   180  0015                     	;# 
   181  0015                     	;# 
   182  0016                     	;# 
   183  0017                     	;# 
   184  0018                     	;# 
   185  0019                     	;# 
   186  001A                     	;# 
   187  001B                     	;# 
   188  001B                     	;# 
   189  001C                     	;# 
   190  001D                     	;# 
   191  001E                     	;# 
   192  001F                     	;# 
   193  0081                     	;# 
   194  0085                     	;# 
   195  0086                     	;# 
   196  0087                     	;# 
   197  0088                     	;# 
   198  0089                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  008F                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0093                     	;# 
   208  0093                     	;# 
   209  0094                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0097                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009A                     	;# 
   216  009B                     	;# 
   217  009C                     	;# 
   218  009D                     	;# 
   219  009E                     	;# 
   220  009F                     	;# 
   221  0105                     	;# 
   222  0107                     	;# 
   223  0108                     	;# 
   224  0109                     	;# 
   225  010C                     	;# 
   226  010C                     	;# 
   227  010D                     	;# 
   228  010E                     	;# 
   229  010F                     	;# 
   230  0185                     	;# 
   231  0187                     	;# 
   232  0188                     	;# 
   233  0189                     	;# 
   234  018C                     	;# 
   235  018D                     	;# 
   236                           
   237                           	psect	strings
   238  0003                     __pstrings:	
   239  0003                     stringtab:	
   240  0003                     __stringtab:	
   241                           
   242                           ;	String table - string pointers are 1 byte each
   243  0003  1BFF               	btfsc	btemp+1,7
   244  0004  280D               	ljmp	stringcode
   245  0005  1383               	bcf	3,7
   246  0006  187F               	btfsc	btemp+1,0
   247  0007  1783               	bsf	3,7
   248  0008  0800               	movf	0,w
   249  0009  0A84               	incf	4,f
   250  000A  1903               	skipnz
   251  000B  0AFF               	incf	btemp+1,f
   252  000C  0008               	return
   253  000D                     stringcode:	
   254  000D                     stringdir:	
   255  000D  3000               	movlw	high stringdir
   256  000E  008A               	movwf	10
   257  000F  0804               	movf	4,w
   258  0010  0A84               	incf	4,f
   259  0011  0782               	addwf	2,f
   260  0012                     __stringbase:	
   261  0012  3400               	retlw	0
   262  0013                     __end_of__stringtab:	
   263  0013                     _dpowers:	
   264  0013  3401               	retlw	1
   265  0014  3400               	retlw	0
   266  0015  340A               	retlw	10
   267  0016  3400               	retlw	0
   268  0017  3464               	retlw	100
   269  0018  3400               	retlw	0
   270  0019  34E8               	retlw	232
   271  001A  3403               	retlw	3
   272  001B  3410               	retlw	16
   273  001C  3427               	retlw	39
   274  001D                     __end_of_dpowers:	
   275  0007                     _PORTC	set	7
   276  0005                     _PORTA	set	5
   277  0006                     _PORTB	set	6
   278  0007                     _PORTCbits	set	7
   279  0005                     _PORTAbits	set	5
   280  0019                     _TXREG	set	25
   281  001A                     _RCREG	set	26
   282  0006                     _PORTBbits	set	6
   283  0013                     _SSPBUF	set	19
   284  0014                     _SSPCON	set	20
   285  0065                     _RCIF	set	101
   286  00C4                     _CREN	set	196
   287  00C7                     _SPEN	set	199
   288  0063                     _SSPIF	set	99
   289  005E                     _PEIE	set	94
   290  005F                     _GIE	set	95
   291  0087                     _TRISC	set	135
   292  0085                     _TRISA	set	133
   293  0086                     _TRISB	set	134
   294  0099                     _SPBRG	set	153
   295  008F                     _OSCCONbits	set	143
   296  0091                     _SSPCON2bits	set	145
   297  0094                     _SSPSTAT	set	148
   298  0093                     _SSPADD	set	147
   299  0091                     _SSPCON2	set	145
   300  04C1                     _TRMT	set	1217
   301  04C5                     _TXEN	set	1221
   302  043E                     _TRISC6	set	1086
   303  043F                     _TRISC7	set	1087
   304  04C4                     _SYNC	set	1220
   305  04C2                     _BRGH	set	1218
   306  0463                     _SSPIE	set	1123
   307  048B                     _RCEN	set	1163
   308  043C                     _TRISC4	set	1084
   309  043B                     _TRISC3	set	1083
   310  0188                     _ANSEL	set	392
   311  0189                     _ANSELH	set	393
   312  001D                     STR_2:	
   313  001D  3444               	retlw	68	;'D'
   314  001E  346F               	retlw	111	;'o'
   315  001F  346F               	retlw	111	;'o'
   316  0020  3472               	retlw	114	;'r'
   317  0021  3420               	retlw	32	;' '
   318  0022  344F               	retlw	79	;'O'
   319  0023  3450               	retlw	80	;'P'
   320  0024  3445               	retlw	69	;'E'
   321  0025  344E               	retlw	78	;'N'
   322  0026  3420               	retlw	32	;' '
   323  0027  3420               	retlw	32	;' '
   324  0028  3400               	retlw	0
   325  0029                     STR_3:	
   326  0029  3444               	retlw	68	;'D'
   327  002A  346F               	retlw	111	;'o'
   328  002B  346F               	retlw	111	;'o'
   329  002C  3472               	retlw	114	;'r'
   330  002D  3420               	retlw	32	;' '
   331  002E  3443               	retlw	67	;'C'
   332  002F  344C               	retlw	76	;'L'
   333  0030  344F               	retlw	79	;'O'
   334  0031  3453               	retlw	83	;'S'
   335  0032  3445               	retlw	69	;'E'
   336  0033  3444               	retlw	68	;'D'
   337  0034  3400               	retlw	0
   338  0035                     STR_4:	
   339  0035  3454               	retlw	84	;'T'
   340  0036  3472               	retlw	114	;'r'
   341  0037  3469               	retlw	105	;'i'
   342  0038  3470               	retlw	112	;'p'
   343  0039  3420               	retlw	32	;' '
   344  003A  344F               	retlw	79	;'O'
   345  003B  344E               	retlw	78	;'N'
   346  003C  3420               	retlw	32	;' '
   347  003D  3400               	retlw	0
   348  003E                     STR_5:	
   349  003E  3454               	retlw	84	;'T'
   350  003F  3472               	retlw	114	;'r'
   351  0040  3469               	retlw	105	;'i'
   352  0041  3470               	retlw	112	;'p'
   353  0042  3420               	retlw	32	;' '
   354  0043  344F               	retlw	79	;'O'
   355  0044  3446               	retlw	70	;'F'
   356  0045  3446               	retlw	70	;'F'
   357  0046  3400               	retlw	0
   358  0047                     STR_6:	
   359  0047  3450               	retlw	80	;'P'
   360  0048  3449               	retlw	73	;'I'
   361  0049  3452               	retlw	82	;'R'
   362  004A  3420               	retlw	32	;' '
   363  004B  344F               	retlw	79	;'O'
   364  004C  344E               	retlw	78	;'N'
   365  004D  3420               	retlw	32	;' '
   366  004E  3400               	retlw	0
   367  004F                     STR_7:	
   368  004F  3450               	retlw	80	;'P'
   369  0050  3449               	retlw	73	;'I'
   370  0051  3452               	retlw	82	;'R'
   371  0052  3420               	retlw	32	;' '
   372  0053  344F               	retlw	79	;'O'
   373  0054  3446               	retlw	70	;'F'
   374  0055  3446               	retlw	70	;'F'
   375  0056  3400               	retlw	0
   376  0057                     STR_1:	
   377  0057  3432               	retlw	50	;'2'
   378  0058  3433               	retlw	51	;'3'
   379  0059  342E               	retlw	46	;'.'
   380  005A  3435               	retlw	53	;'5'
   381  005B  3430               	retlw	48	;'0'
   382  005C  3400               	retlw	0
   383  005D                     STR_11:	
   384  005D  342E               	retlw	46	;'.'
   385  005E  3425               	retlw	37	;'%'
   386  005F  3464               	retlw	100	;'d'
   387  0060  3430               	retlw	48	;'0'
   388  0061  3400               	retlw	0
   389  0062                     STR_12:	
   390  0062  342E               	retlw	46	;'.'
   391  0063  3425               	retlw	37	;'%'
   392  0064  3464               	retlw	100	;'d'
   393  0065  3400               	retlw	0
   394  0048                     
   395                           ; #config settings
   396  0000                     
   397                           	psect	cinit
   398  07F5                     start_initialization:	
   399  07F5                     __initialization:	
   400                           
   401                           ; Clear objects allocated to BANK0
   402  07F5  1383               	bcf	3,7	;select IRP bank0
   403  07F6  3037               	movlw	low __pbssBANK0
   404  07F7  0084               	movwf	4
   405  07F8  3048               	movlw	low (__pbssBANK0+17)
   406  07F9  120A  158A  26AD   	fcall	clear_ram0
   407  07FC                     end_of_initialization:	
   408                           ;End of C runtime variable initialization code
   409                           
   410  07FC                     __end_of__initialization:	
   411  07FC  0183               	clrf	3
   412  07FD  120A  118A  2EA6   	ljmp	_main	;jump to C main() function
   413                           
   414                           	psect	bssBANK0
   415  0037                     __pbssBANK0:	
   416  0037                     _state:	
   417  0037                     	ds	1
   418  0038                     _IR:	
   419  0038                     	ds	1
   420  0039                     _PIR:	
   421  0039                     	ds	1
   422  003A                     _trip:	
   423  003A                     	ds	1
   424  003B                     _door:	
   425  003B                     	ds	1
   426  003C                     _temp:	
   427  003C                     	ds	6
   428  0042                     _time:	
   429  0042                     	ds	6
   430                           
   431                           	psect	clrtext
   432  0EAD                     clear_ram0:	
   433                           ;	Called with FSR containing the base address, and
   434                           ;	W with the last address+1
   435                           
   436  0EAD  0064               	clrwdt	;clear the watchdog before getting into this loop
   437  0EAE                     clrloop0:	
   438  0EAE  0180               	clrf	0	;clear RAM location pointed to by FSR
   439  0EAF  0A84               	incf	4,f	;increment pointer
   440  0EB0  0604               	xorwf	4,w	;XOR with final address
   441  0EB1  1903               	btfsc	3,2	;have we reached the end yet?
   442  0EB2  3400               	retlw	0	;all done for this memory range, return
   443  0EB3  0604               	xorwf	4,w	;XOR again to restore value
   444  0EB4  2EAE               	goto	clrloop0	;do the next byte
   445                           
   446                           	psect	cstackCOMMON
   447  0070                     __pcstackCOMMON:	
   448  0070                     ?_setup:	
   449  0070                     ?_get_temp:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_get_hall:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_get_tripwire:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ?_get_PIR:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ?_get_IR:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ?_get_time:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_strcat:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_I2C_Master_Wait:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ??_I2C_Master_Wait:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ?_I2C_Master_Start:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ??_I2C_Master_Start:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ?_I2C_Master_RepeatedStart:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ??_I2C_Master_RepeatedStart:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ?_I2C_Master_Stop:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     ??_I2C_Master_Stop:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     ?_I2C_Master_Write:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     ?_Lcd_Port:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0070                     ??_Lcd_Port:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0070                     ?_Lcd_Cmd:	
   504                           ; 1 bytes @ 0x0
   505                           
   506  0070                     ?_Lcd_Clear:	
   507                           ; 1 bytes @ 0x0
   508                           
   509  0070                     ?_Lcd_Init:	
   510                           ; 1 bytes @ 0x0
   511                           
   512  0070                     ?_Lcd_Write_Char:	
   513                           ; 1 bytes @ 0x0
   514                           
   515  0070                     ?_initOscilador:	
   516                           ; 1 bytes @ 0x0
   517                           
   518  0070                     ??_initOscilador:	
   519                           ; 1 bytes @ 0x0
   520                           
   521  0070                     ?_UART_Write:	
   522                           ; 1 bytes @ 0x0
   523                           
   524  0070                     ??_UART_Write:	
   525                           ; 1 bytes @ 0x0
   526                           
   527  0070                     ?_UART_Write_Text:	
   528                           ; 1 bytes @ 0x0
   529                           
   530  0070                     ?_main:	
   531                           ; 1 bytes @ 0x0
   532                           
   533  0070                     ?___bmul:	
   534                           ; 1 bytes @ 0x0
   535                           
   536  0070                     ?_strcmp:	
   537                           ; 1 bytes @ 0x0
   538                           
   539  0070                     ?_I2C_Master_Read:	
   540                           ; 2 bytes @ 0x0
   541                           
   542  0070                     ?___lwdiv:	
   543                           ; 2 bytes @ 0x0
   544                           
   545  0070                     ?___lldiv:	
   546                           ; 2 bytes @ 0x0
   547                           
   548  0070                     ?___aldiv:	
   549                           ; 4 bytes @ 0x0
   550                           
   551  0070                     Lcd_Port@a:	
   552                           ; 4 bytes @ 0x0
   553                           
   554  0070                     UART_Write@data:	
   555                           ; 1 bytes @ 0x0
   556                           
   557  0070                     ___bmul@multiplicand:	
   558                           ; 1 bytes @ 0x0
   559                           
   560  0070                     strcat@from:	
   561                           ; 1 bytes @ 0x0
   562                           
   563  0070                     strcmp@s2:	
   564                           ; 1 bytes @ 0x0
   565                           
   566  0070                     I2C_Master_Write@d:	
   567                           ; 1 bytes @ 0x0
   568                           
   569  0070                     I2C_Master_Read@a:	
   570                           ; 2 bytes @ 0x0
   571                           
   572  0070                     ___lwdiv@divisor:	
   573                           ; 2 bytes @ 0x0
   574                           
   575  0070                     ___lldiv@divisor:	
   576                           ; 2 bytes @ 0x0
   577                           
   578  0070                     ___aldiv@divisor:	
   579                           ; 4 bytes @ 0x0
   580                           
   581                           
   582                           ; 4 bytes @ 0x0
   583  0070                     	ds	1
   584  0071                     ??_strcat:	
   585  0071                     ??_Lcd_Cmd:	
   586                           ; 1 bytes @ 0x1
   587                           
   588  0071                     ??_Lcd_Write_Char:	
   589                           ; 1 bytes @ 0x1
   590                           
   591  0071                     ??_UART_Write_Text:	
   592                           ; 1 bytes @ 0x1
   593                           
   594  0071                     ??___bmul:	
   595                           ; 1 bytes @ 0x1
   596                           
   597                           
   598                           ; 1 bytes @ 0x1
   599  0071                     	ds	1
   600  0072                     ??_strcmp:	
   601  0072                     ??_I2C_Master_Write:	
   602                           ; 1 bytes @ 0x2
   603                           
   604  0072                     ??_I2C_Master_Read:	
   605                           ; 1 bytes @ 0x2
   606                           
   607  0072                     Lcd_Write_Char@temp:	
   608                           ; 1 bytes @ 0x2
   609                           
   610  0072                     initOscilador@option:	
   611                           ; 1 bytes @ 0x2
   612                           
   613  0072                     ___bmul@product:	
   614                           ; 1 bytes @ 0x2
   615                           
   616  0072                     strcat@to:	
   617                           ; 1 bytes @ 0x2
   618                           
   619  0072                     UART_Write_Text@i:	
   620                           ; 1 bytes @ 0x2
   621                           
   622  0072                     ___lwdiv@dividend:	
   623                           ; 2 bytes @ 0x2
   624                           
   625                           
   626                           ; 2 bytes @ 0x2
   627  0072                     	ds	1
   628  0073                     Lcd_Cmd@a:	
   629  0073                     Lcd_Write_Char@y:	
   630                           ; 1 bytes @ 0x3
   631                           
   632  0073                     ___bmul@multiplier:	
   633                           ; 1 bytes @ 0x3
   634                           
   635  0073                     strcat@cp:	
   636                           ; 1 bytes @ 0x3
   637                           
   638                           
   639                           ; 1 bytes @ 0x3
   640  0073                     	ds	1
   641  0074                     ??_Lcd_Clear:	
   642  0074                     ?_Lcd_Set_Cursor:	
   643                           ; 1 bytes @ 0x4
   644                           
   645  0074                     ??_Lcd_Init:	
   646                           ; 1 bytes @ 0x4
   647                           
   648  0074                     ??___lwdiv:	
   649                           ; 1 bytes @ 0x4
   650                           
   651  0074                     Lcd_Set_Cursor@b:	
   652                           ; 1 bytes @ 0x4
   653                           
   654  0074                     Lcd_Write_Char@a:	
   655                           ; 1 bytes @ 0x4
   656                           
   657  0074                     UART_Write_Text@text:	
   658                           ; 1 bytes @ 0x4
   659                           
   660  0074                     I2C_Master_Read@temp:	
   661                           ; 1 bytes @ 0x4
   662                           
   663  0074                     ___lldiv@dividend:	
   664                           ; 2 bytes @ 0x4
   665                           
   666  0074                     ___aldiv@dividend:	
   667                           ; 4 bytes @ 0x4
   668                           
   669                           
   670                           ; 4 bytes @ 0x4
   671  0074                     	ds	1
   672  0075                     ??_Lcd_Set_Cursor:	
   673  0075                     ?_Lcd_Write_String:	
   674                           ; 1 bytes @ 0x5
   675                           
   676  0075                     strcmp@r:	
   677                           ; 1 bytes @ 0x5
   678                           
   679  0075                     Lcd_Write_String@a:	
   680                           ; 1 bytes @ 0x5
   681                           
   682  0075                     ___lwdiv@quotient:	
   683                           ; 2 bytes @ 0x5
   684                           
   685                           
   686                           ; 2 bytes @ 0x5
   687  0075                     	ds	1
   688  0076                     ??_get_hall:	
   689  0076                     ??_get_tripwire:	
   690                           ; 1 bytes @ 0x6
   691                           
   692  0076                     ??_get_PIR:	
   693                           ; 1 bytes @ 0x6
   694                           
   695  0076                     ??_get_IR:	
   696                           ; 1 bytes @ 0x6
   697                           
   698  0076                     ??_get_time:	
   699                           ; 1 bytes @ 0x6
   700                           
   701  0076                     strcmp@s1:	
   702                           ; 1 bytes @ 0x6
   703                           
   704                           
   705                           ; 1 bytes @ 0x6
   706  0076                     	ds	1
   707  0077                     ??_Lcd_Write_String:	
   708  0077                     Lcd_Set_Cursor@a:	
   709                           ; 1 bytes @ 0x7
   710                           
   711  0077                     get_hall@key:	
   712                           ; 1 bytes @ 0x7
   713                           
   714  0077                     get_tripwire@trip:	
   715                           ; 1 bytes @ 0x7
   716                           
   717  0077                     get_PIR@PIR:	
   718                           ; 1 bytes @ 0x7
   719                           
   720  0077                     get_IR@IR:	
   721                           ; 1 bytes @ 0x7
   722                           
   723  0077                     ___lwdiv@counter:	
   724                           ; 1 bytes @ 0x7
   725                           
   726                           
   727                           ; 1 bytes @ 0x7
   728  0077                     	ds	1
   729  0078                     ??___lldiv:	
   730  0078                     ??___aldiv:	
   731                           ; 1 bytes @ 0x8
   732                           
   733  0078                     ?___lwmod:	
   734                           ; 1 bytes @ 0x8
   735                           
   736  0078                     Lcd_Set_Cursor@z:	
   737                           ; 2 bytes @ 0x8
   738                           
   739  0078                     get_time@hour:	
   740                           ; 1 bytes @ 0x8
   741                           
   742  0078                     ___lwmod@divisor:	
   743                           ; 1 bytes @ 0x8
   744                           
   745                           
   746                           ; 2 bytes @ 0x8
   747  0078                     	ds	1
   748  0079                     Lcd_Set_Cursor@y:	
   749  0079                     get_time@min:	
   750                           ; 1 bytes @ 0x9
   751                           
   752  0079                     UART_Init@x:	
   753                           ; 1 bytes @ 0x9
   754                           
   755  0079                     ___lldiv@quotient:	
   756                           ; 2 bytes @ 0x9
   757                           
   758                           
   759                           ; 4 bytes @ 0x9
   760  0079                     	ds	1
   761  007A                     Lcd_Set_Cursor@temp:	
   762  007A                     get_time@time_string:	
   763                           ; 1 bytes @ 0xA
   764                           
   765  007A                     Lcd_Write_String@i:	
   766                           ; 1 bytes @ 0xA
   767                           
   768  007A                     ___lwmod@dividend:	
   769                           ; 2 bytes @ 0xA
   770                           
   771                           
   772                           ; 2 bytes @ 0xA
   773  007A                     	ds	2
   774  007C                     ??___lwmod:	
   775                           
   776                           ; 1 bytes @ 0xC
   777  007C                     	ds	1
   778  007D                     ___lldiv@counter:	
   779  007D                     ___lwmod@counter:	
   780                           ; 1 bytes @ 0xD
   781                           
   782                           
   783                           ; 1 bytes @ 0xD
   784  007D                     	ds	1
   785  007E                     ??_setup:	
   786                           
   787                           	psect	cstackBANK0
   788  0020                     __pcstackBANK0:	
   789                           ; 1 bytes @ 0xE
   790                           
   791  0020                     ?_I2C_Master_Init:	
   792  0020                     ?_sprintf:	
   793                           ; 1 bytes @ 0x0
   794                           
   795  0020                     sprintf@f:	
   796                           ; 2 bytes @ 0x0
   797                           
   798  0020                     ___aldiv@counter:	
   799                           ; 1 bytes @ 0x0
   800                           
   801  0020                     I2C_Master_Init@c:	
   802                           ; 1 bytes @ 0x0
   803                           
   804                           
   805                           ; 4 bytes @ 0x0
   806  0020                     	ds	1
   807  0021                     ___aldiv@sign:	
   808                           
   809                           ; 1 bytes @ 0x1
   810  0021                     	ds	1
   811  0022                     ___aldiv@quotient:	
   812                           
   813                           ; 4 bytes @ 0x2
   814  0022                     	ds	1
   815  0023                     ??_sprintf:	
   816                           
   817                           ; 1 bytes @ 0x3
   818  0023                     	ds	1
   819  0024                     ??_I2C_Master_Init:	
   820                           
   821                           ; 1 bytes @ 0x4
   822  0024                     	ds	2
   823  0026                     ?_UART_Init:	
   824  0026                     sprintf@ap:	
   825                           ; 1 bytes @ 0x6
   826                           
   827  0026                     UART_Init@baudrate:	
   828                           ; 1 bytes @ 0x6
   829                           
   830                           
   831                           ; 4 bytes @ 0x6
   832  0026                     	ds	1
   833  0027                     sprintf@flag:	
   834                           
   835                           ; 1 bytes @ 0x7
   836  0027                     	ds	1
   837  0028                     sprintf@prec:	
   838                           
   839                           ; 1 bytes @ 0x8
   840  0028                     	ds	1
   841  0029                     sprintf@val:	
   842                           
   843                           ; 2 bytes @ 0x9
   844  0029                     	ds	1
   845  002A                     ??_UART_Init:	
   846                           
   847                           ; 1 bytes @ 0xA
   848  002A                     	ds	1
   849  002B                     sprintf@sp:	
   850                           
   851                           ; 1 bytes @ 0xB
   852  002B                     	ds	1
   853  002C                     sprintf@c:	
   854                           
   855                           ; 1 bytes @ 0xC
   856  002C                     	ds	1
   857  002D                     ??_get_temp:	
   858                           
   859                           ; 1 bytes @ 0xD
   860  002D                     	ds	3
   861  0030                     get_temp@decimal:	
   862                           
   863                           ; 3 bytes @ 0x10
   864  0030                     	ds	3
   865  0033                     get_temp@tempMSB:	
   866                           
   867                           ; 1 bytes @ 0x13
   868  0033                     	ds	1
   869  0034                     get_temp@temp_string:	
   870                           
   871                           ; 1 bytes @ 0x14
   872  0034                     	ds	1
   873  0035                     get_temp@tempLSB:	
   874                           
   875                           ; 1 bytes @ 0x15
   876  0035                     	ds	1
   877  0036                     ??_main:	
   878                           
   879                           ; 1 bytes @ 0x16
   880  0036                     	ds	1
   881                           
   882                           	psect	maintext
   883  06A6                     __pmaintext:	
   884 ;;
   885 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   886 ;;
   887 ;; *************** function _main *****************
   888 ;; Defined at:
   889 ;;		line 52 in file "mainMaster.c"
   890 ;; Parameters:    Size  Location     Type
   891 ;;		None
   892 ;; Auto vars:     Size  Location     Type
   893 ;;		None
   894 ;; Return value:  Size  Location     Type
   895 ;;                  1    wreg      void 
   896 ;; Registers used:
   897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   898 ;; Tracked objects:
   899 ;;		On entry : B00/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   903 ;;      Params:         0       0       0       0       0
   904 ;;      Locals:         0       0       0       0       0
   905 ;;      Temps:          0       1       0       0       0
   906 ;;      Totals:         0       1       0       0       0
   907 ;;Total ram usage:        1 bytes
   908 ;; Hardware stack levels required when called:    4
   909 ;; This function calls:
   910 ;;		_Lcd_Clear
   911 ;;		_Lcd_Set_Cursor
   912 ;;		_Lcd_Write_Char
   913 ;;		_Lcd_Write_String
   914 ;;		_UART_Write
   915 ;;		_UART_Write_Text
   916 ;;		_get_IR
   917 ;;		_get_PIR
   918 ;;		_get_hall
   919 ;;		_get_temp
   920 ;;		_get_time
   921 ;;		_get_tripwire
   922 ;;		_setup
   923 ;;		_strcmp
   924 ;; This function is called by:
   925 ;;		Startup code after reset
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           
   930                           ;psect for function _main
   931  06A6                     _main:	
   932                           
   933                           ;mainMaster.c: 53:     setup();
   934                           
   935                           ;incstack = 0
   936                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   937  06A6  120A  118A  2139  120A  118A  	fcall	_setup
   938                           
   939                           ;mainMaster.c: 54:     state = 0;
   940  06AB  1283               	bcf	3,5	;RP0=0, select bank0
   941  06AC  1303               	bcf	3,6	;RP1=0, select bank0
   942  06AD  01B7               	clrf	_state
   943                           
   944                           ;mainMaster.c: 55:     Lcd_Clear();
   945  06AE  120A  158A  26C8  120A  118A  	fcall	_Lcd_Clear
   946  06B3                     l2079:	
   947                           
   948                           ;mainMaster.c: 59:         get_temp(temp);
   949  06B3  303C               	movlw	(low (_temp| 0))& (0+255)
   950  06B4  120A  118A  2455  120A  118A  	fcall	_get_temp
   951                           
   952                           ;mainMaster.c: 60:         door = get_hall();
   953  06B9  120A  158A  2774  120A  118A  	fcall	_get_hall
   954  06BE  1283               	bcf	3,5	;RP0=0, select bank0
   955  06BF  1303               	bcf	3,6	;RP1=0, select bank0
   956  06C0  00B6               	movwf	??_main
   957  06C1  0836               	movf	??_main,w
   958  06C2  00BB               	movwf	_door
   959                           
   960                           ;mainMaster.c: 61:         trip = get_tripwire();
   961  06C3  120A  158A  2793  120A  118A  	fcall	_get_tripwire
   962  06C8  1283               	bcf	3,5	;RP0=0, select bank0
   963  06C9  1303               	bcf	3,6	;RP1=0, select bank0
   964  06CA  00B6               	movwf	??_main
   965  06CB  0836               	movf	??_main,w
   966  06CC  00BA               	movwf	_trip
   967                           
   968                           ;mainMaster.c: 62:         PIR = get_PIR();
   969  06CD  120A  158A  2755  120A  118A  	fcall	_get_PIR
   970  06D2  1283               	bcf	3,5	;RP0=0, select bank0
   971  06D3  1303               	bcf	3,6	;RP1=0, select bank0
   972  06D4  00B6               	movwf	??_main
   973  06D5  0836               	movf	??_main,w
   974  06D6  00B9               	movwf	_PIR
   975                           
   976                           ;mainMaster.c: 63:         IR = get_IR();
   977  06D7  120A  158A  2736  120A  118A  	fcall	_get_IR
   978  06DC  1283               	bcf	3,5	;RP0=0, select bank0
   979  06DD  1303               	bcf	3,6	;RP1=0, select bank0
   980  06DE  00B6               	movwf	??_main
   981  06DF  0836               	movf	??_main,w
   982  06E0  00B8               	movwf	_IR
   983                           
   984                           ;mainMaster.c: 64:         get_time(time);
   985  06E1  3042               	movlw	(low (_time| 0))& (0+255)
   986  06E2  120A  118A  2345  120A  118A  	fcall	_get_time
   987                           
   988                           ;mainMaster.c: 66:         UART_Write_Text(temp);
   989  06E7  303C               	movlw	(low (_temp| 0))& (0+255)
   990  06E8  120A  158A  2718  120A  118A  	fcall	_UART_Write_Text
   991                           
   992                           ;mainMaster.c: 67:         UART_Write_Text(time);
   993  06ED  3042               	movlw	(low (_time| 0))& (0+255)
   994  06EE  120A  158A  2718  120A  118A  	fcall	_UART_Write_Text
   995                           
   996                           ;mainMaster.c: 68:         UART_Write(door);
   997  06F3  1283               	bcf	3,5	;RP0=0, select bank0
   998  06F4  1303               	bcf	3,6	;RP1=0, select bank0
   999  06F5  083B               	movf	_door,w
  1000  06F6  120A  158A  26BE  120A  118A  	fcall	_UART_Write
  1001                           
  1002                           ;mainMaster.c: 69:         UART_Write(trip);
  1003  06FB  1283               	bcf	3,5	;RP0=0, select bank0
  1004  06FC  1303               	bcf	3,6	;RP1=0, select bank0
  1005  06FD  083A               	movf	_trip,w
  1006  06FE  120A  158A  26BE  120A  118A  	fcall	_UART_Write
  1007                           
  1008                           ;mainMaster.c: 70:         UART_Write(PIR);
  1009  0703  1283               	bcf	3,5	;RP0=0, select bank0
  1010  0704  1303               	bcf	3,6	;RP1=0, select bank0
  1011  0705  0839               	movf	_PIR,w
  1012  0706  120A  158A  26BE  120A  118A  	fcall	_UART_Write
  1013                           
  1014                           ;mainMaster.c: 71:         UART_Write(IR);
  1015  070B  1283               	bcf	3,5	;RP0=0, select bank0
  1016  070C  1303               	bcf	3,6	;RP1=0, select bank0
  1017  070D  0838               	movf	_IR,w
  1018  070E  120A  158A  26BE  120A  118A  	fcall	_UART_Write
  1019                           
  1020                           ;mainMaster.c: 72:         UART_Write('A');
  1021  0713  3041               	movlw	65
  1022  0714  120A  158A  26BE  120A  118A  	fcall	_UART_Write
  1023                           
  1024                           ;mainMaster.c: 75:         if (strcmp(temp,"23.50") > 0){
  1025  0719  3045               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1026  071A  1283               	bcf	3,5	;RP0=0, select bank0
  1027  071B  1303               	bcf	3,6	;RP1=0, select bank0
  1028  071C  00B6               	movwf	??_main
  1029  071D  0836               	movf	??_main,w
  1030  071E  00F0               	movwf	strcmp@s2
  1031  071F  303C               	movlw	(low (_temp| 0))& (0+255)
  1032  0720  120A  158A  27D6  120A  118A  	fcall	_strcmp
  1033  0725  0871               	movf	?_strcmp+1,w
  1034  0726  3A80               	xorlw	128
  1035  0727  00FF               	movwf	127
  1036  0728  3080               	movlw	128
  1037  0729  027F               	subwf	127,w
  1038  072A  1D03               	skipz
  1039  072B  2F2E               	goto	u1605
  1040  072C  3001               	movlw	1
  1041  072D  0270               	subwf	?_strcmp,w
  1042  072E                     u1605:	
  1043  072E  1C03               	skipc
  1044  072F  2F34               	goto	l235
  1045                           
  1046                           ;mainMaster.c: 76:             PORTAbits.RA0 = 1;
  1047  0730  1283               	bcf	3,5	;RP0=0, select bank0
  1048  0731  1303               	bcf	3,6	;RP1=0, select bank0
  1049  0732  1405               	bsf	5,0	;volatile
  1050                           
  1051                           ;mainMaster.c: 77:         } else {
  1052  0733  2F37               	goto	l236
  1053  0734                     l235:	
  1054                           
  1055                           ;mainMaster.c: 78:             PORTAbits.RA0 = 0;
  1056  0734  1283               	bcf	3,5	;RP0=0, select bank0
  1057  0735  1303               	bcf	3,6	;RP1=0, select bank0
  1058  0736  1005               	bcf	5,0	;volatile
  1059  0737                     l236:	
  1060                           ;mainMaster.c: 79:         }
  1061                           
  1062                           
  1063                           ;mainMaster.c: 82:         if(PORTCbits.RC0 == 1){
  1064  0737  1C07               	btfss	7,0	;volatile
  1065  0738  2F4A               	goto	l2117
  1066                           
  1067                           ;mainMaster.c: 83:             state++;
  1068  0739  3001               	movlw	1
  1069  073A  00B6               	movwf	??_main
  1070  073B  0836               	movf	??_main,w
  1071  073C  07B7               	addwf	_state,f
  1072                           
  1073                           ;mainMaster.c: 84:             if (state > 2){
  1074  073D  3003               	movlw	3
  1075  073E  0237               	subwf	_state,w
  1076  073F  1803               	btfsc	3,0
  1077                           
  1078                           ;mainMaster.c: 85:                 state = 0;
  1079  0740  01B7               	clrf	_state
  1080                           
  1081                           ;mainMaster.c: 87:             Lcd_Clear();
  1082  0741  120A  158A  26C8  120A  118A  	fcall	_Lcd_Clear
  1083  0746                     l239:	
  1084                           ;mainMaster.c: 88:             while(PORTCbits.RC0 == 1);
  1085                           
  1086  0746  1283               	bcf	3,5	;RP0=0, select bank0
  1087  0747  1303               	bcf	3,6	;RP1=0, select bank0
  1088  0748  1807               	btfsc	7,0	;volatile
  1089  0749  2F46               	goto	l239
  1090  074A                     l2117:	
  1091                           
  1092                           ;mainMaster.c: 92:         if (state == 0){
  1093  074A  0837               	movf	_state,w
  1094  074B  1D03               	btfss	3,2
  1095  074C  2F7C               	goto	l2129
  1096                           
  1097                           ;mainMaster.c: 94:             Lcd_Set_Cursor(1,1);
  1098  074D  01F4               	clrf	Lcd_Set_Cursor@b
  1099  074E  0AF4               	incf	Lcd_Set_Cursor@b,f
  1100  074F  3001               	movlw	1
  1101  0750  120A  118A  21ED  120A  118A  	fcall	_Lcd_Set_Cursor
  1102                           
  1103                           ;mainMaster.c: 95:             Lcd_Write_String(time);
  1104  0755  3042               	movlw	(low (_time| 0))& (0+255)
  1105  0756  00F5               	movwf	Lcd_Write_String@a
  1106  0757  3000               	movlw	0
  1107  0758  00F6               	movwf	Lcd_Write_String@a+1
  1108  0759  120A  118A  21B0  120A  118A  	fcall	_Lcd_Write_String
  1109                           
  1110                           ;mainMaster.c: 97:             Lcd_Set_Cursor(2,1);
  1111  075E  01F4               	clrf	Lcd_Set_Cursor@b
  1112  075F  0AF4               	incf	Lcd_Set_Cursor@b,f
  1113  0760  3002               	movlw	2
  1114  0761  120A  118A  21ED  120A  118A  	fcall	_Lcd_Set_Cursor
  1115                           
  1116                           ;mainMaster.c: 98:             Lcd_Write_String(temp);
  1117  0766  303C               	movlw	(low (_temp| 0))& (0+255)
  1118  0767  00F5               	movwf	Lcd_Write_String@a
  1119  0768  3000               	movlw	0
  1120  0769  00F6               	movwf	Lcd_Write_String@a+1
  1121  076A  120A  118A  21B0  120A  118A  	fcall	_Lcd_Write_String
  1122                           
  1123                           ;mainMaster.c: 99:             Lcd_Write_Char(223);
  1124  076F  30DF               	movlw	223
  1125  0770  120A  118A  2100  120A  118A  	fcall	_Lcd_Write_Char
  1126                           
  1127                           ;mainMaster.c: 100:             Lcd_Write_Char('C');
  1128  0775  3043               	movlw	67
  1129  0776  120A  118A  2100  120A  118A  	fcall	_Lcd_Write_Char
  1130                           
  1131                           ;mainMaster.c: 102:         } else if (state == 1){
  1132  077B  2EB3               	goto	l2079
  1133  077C                     l2129:	
  1134  077C  0337               	decf	_state,w
  1135  077D  1D03               	btfss	3,2
  1136  077E  2FB8               	goto	l2147
  1137                           
  1138                           ;mainMaster.c: 104:             Lcd_Set_Cursor(1,1);
  1139  077F  01F4               	clrf	Lcd_Set_Cursor@b
  1140  0780  0AF4               	incf	Lcd_Set_Cursor@b,f
  1141  0781  3001               	movlw	1
  1142  0782  120A  118A  21ED  120A  118A  	fcall	_Lcd_Set_Cursor
  1143                           
  1144                           ;mainMaster.c: 105:             if (door == 1){
  1145  0787  1283               	bcf	3,5	;RP0=0, select bank0
  1146  0788  1303               	bcf	3,6	;RP1=0, select bank0
  1147  0789  033B               	decf	_door,w
  1148  078A  1D03               	btfss	3,2
  1149  078B  2F8E               	goto	l2137
  1150                           
  1151                           ;mainMaster.c: 106:                 Lcd_Write_String("Door OPEN  ");
  1152  078C  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1153  078D  2F8F               	goto	L1
  1154  078E                     l2137:	
  1155                           ;mainMaster.c: 107:             } else {
  1156                           
  1157                           
  1158                           ;mainMaster.c: 108:                 Lcd_Write_String("Door CLOSED");
  1159  078E  3017               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1160  078F                     L1:	
  1161  078F  00F5               	movwf	Lcd_Write_String@a
  1162  0790  3080               	movlw	128
  1163  0791  00F6               	movwf	Lcd_Write_String@a+1
  1164  0792  120A  118A  21B0  120A  118A  	fcall	_Lcd_Write_String
  1165                           
  1166                           ;mainMaster.c: 111:             Lcd_Set_Cursor(2,1);
  1167  0797  01F4               	clrf	Lcd_Set_Cursor@b
  1168  0798  0AF4               	incf	Lcd_Set_Cursor@b,f
  1169  0799  3002               	movlw	2
  1170  079A  120A  118A  21ED  120A  118A  	fcall	_Lcd_Set_Cursor
  1171                           
  1172                           ;mainMaster.c: 112:             if (trip == 1){
  1173  079F  1283               	bcf	3,5	;RP0=0, select bank0
  1174  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  1175  07A1  033A               	decf	_trip,w
  1176  07A2  1D03               	btfss	3,2
  1177  07A3  2FAE               	goto	l2145
  1178                           
  1179                           ;mainMaster.c: 113:                 Lcd_Write_String("Trip ON ");
  1180  07A4  3023               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1181  07A5  00F5               	movwf	Lcd_Write_String@a
  1182  07A6  3080               	movlw	128
  1183  07A7  00F6               	movwf	Lcd_Write_String@a+1
  1184  07A8  120A  118A  21B0  120A  118A  	fcall	_Lcd_Write_String
  1185                           
  1186                           ;mainMaster.c: 114:             } else {
  1187  07AD  2EB3               	goto	l2079
  1188  07AE                     l2145:	
  1189                           
  1190                           ;mainMaster.c: 115:                 Lcd_Write_String("Trip OFF");
  1191  07AE  302C               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1192  07AF  00F5               	movwf	Lcd_Write_String@a
  1193  07B0  3080               	movlw	128
  1194  07B1  00F6               	movwf	Lcd_Write_String@a+1
  1195  07B2  120A  118A  21B0  120A  118A  	fcall	_Lcd_Write_String
  1196  07B7  2EB3               	goto	l2079
  1197  07B8                     l2147:	
  1198  07B8  3002               	movlw	2
  1199  07B9  0637               	xorwf	_state,w
  1200  07BA  1D03               	btfss	3,2
  1201  07BB  2EB3               	goto	l2079
  1202                           
  1203                           ;mainMaster.c: 120:             Lcd_Set_Cursor(1,1);
  1204  07BC  01F4               	clrf	Lcd_Set_Cursor@b
  1205  07BD  0AF4               	incf	Lcd_Set_Cursor@b,f
  1206  07BE  3001               	movlw	1
  1207  07BF  120A  118A  21ED  120A  118A  	fcall	_Lcd_Set_Cursor
  1208                           
  1209                           ;mainMaster.c: 121:             if (PIR == 1){
  1210  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  1211  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  1212  07C6  0339               	decf	_PIR,w
  1213  07C7  1D03               	btfss	3,2
  1214  07C8  2FCB               	goto	l2155
  1215                           
  1216                           ;mainMaster.c: 122:                 Lcd_Write_String("PIR ON ");
  1217  07C9  3035               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1218  07CA  2FCC               	goto	L2
  1219  07CB                     l2155:	
  1220                           ;mainMaster.c: 123:             } else {
  1221                           
  1222                           
  1223                           ;mainMaster.c: 124:                 Lcd_Write_String("PIR OFF");
  1224  07CB  303D               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1225  07CC                     L2:	
  1226  07CC  00F5               	movwf	Lcd_Write_String@a
  1227  07CD  3080               	movlw	128
  1228  07CE  00F6               	movwf	Lcd_Write_String@a+1
  1229  07CF  120A  118A  21B0  120A  118A  	fcall	_Lcd_Write_String
  1230                           
  1231                           ;mainMaster.c: 127:             Lcd_Set_Cursor(2,1);
  1232  07D4  01F4               	clrf	Lcd_Set_Cursor@b
  1233  07D5  0AF4               	incf	Lcd_Set_Cursor@b,f
  1234  07D6  3002               	movlw	2
  1235  07D7  120A  118A  21ED  120A  118A  	fcall	_Lcd_Set_Cursor
  1236                           
  1237                           ;mainMaster.c: 128:             if (IR == 1){
  1238  07DC  1283               	bcf	3,5	;RP0=0, select bank0
  1239  07DD  1303               	bcf	3,6	;RP1=0, select bank0
  1240  07DE  0338               	decf	_IR,w
  1241  07DF  1D03               	btfss	3,2
  1242  07E0  2FEB               	goto	l2163
  1243                           
  1244                           ;mainMaster.c: 129:                 Lcd_Write_String("IR ON ");
  1245  07E1  3036               	movlw	(low (((STR_6+1)-__stringbase)| (0+32768)))& (0+255)
  1246  07E2  00F5               	movwf	Lcd_Write_String@a
  1247  07E3  3080               	movlw	128
  1248  07E4  00F6               	movwf	Lcd_Write_String@a+1
  1249  07E5  120A  118A  21B0  120A  118A  	fcall	_Lcd_Write_String
  1250                           
  1251                           ;mainMaster.c: 130:             } else {
  1252  07EA  2EB3               	goto	l2079
  1253  07EB                     l2163:	
  1254                           
  1255                           ;mainMaster.c: 131:                 Lcd_Write_String("IR OFF");
  1256  07EB  303E               	movlw	(low (((STR_7+1)-__stringbase)| (0+32768)))& (0+255)
  1257  07EC  00F5               	movwf	Lcd_Write_String@a
  1258  07ED  3080               	movlw	128
  1259  07EE  00F6               	movwf	Lcd_Write_String@a+1
  1260  07EF  120A  118A  21B0  120A  118A  	fcall	_Lcd_Write_String
  1261  07F4  2EB3               	goto	l2079
  1262  07F5                     __end_of_main:	
  1263                           
  1264                           	psect	text1
  1265  0FD6                     __ptext1:	
  1266 ;; *************** function _strcmp *****************
  1267 ;; Defined at:
  1268 ;;		line 33 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  1269 ;; Parameters:    Size  Location     Type
  1270 ;;  s1              1    wreg     PTR const unsigned char 
  1271 ;;		 -> temp(6), 
  1272 ;;  s2              1    0[COMMON] PTR const unsigned char 
  1273 ;;		 -> STR_1(6), 
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;  s1              1    6[COMMON] PTR const unsigned char 
  1276 ;;		 -> temp(6), 
  1277 ;;  r               1    5[COMMON] char 
  1278 ;; Return value:  Size  Location     Type
  1279 ;;                  2    0[COMMON] int 
  1280 ;; Registers used:
  1281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1282 ;; Tracked objects:
  1283 ;;		On entry : 0/0
  1284 ;;		On exit  : 0/0
  1285 ;;		Unchanged: 0/0
  1286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1287 ;;      Params:         2       0       0       0       0
  1288 ;;      Locals:         2       0       0       0       0
  1289 ;;      Temps:          3       0       0       0       0
  1290 ;;      Totals:         7       0       0       0       0
  1291 ;;Total ram usage:        7 bytes
  1292 ;; Hardware stack levels used:    2
  1293 ;; This function calls:
  1294 ;;		Nothing
  1295 ;; This function is called by:
  1296 ;;		_main
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           
  1301                           ;psect for function _strcmp
  1302  0FD6                     _strcmp:	
  1303                           
  1304                           ;incstack = 0
  1305                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  1306                           ;strcmp@s1 stored from wreg
  1307  0FD6  00F6               	movwf	strcmp@s1
  1308  0FD7  2FE5               	goto	l2061
  1309  0FD8                     l2063:	
  1310  0FD8  0876               	movf	strcmp@s1,w
  1311  0FD9  0084               	movwf	4
  1312  0FDA  0800               	movf	0,w
  1313  0FDB  1903               	btfsc	3,2
  1314  0FDC  2FFA               	goto	l2065
  1315  0FDD  3001               	movlw	1
  1316  0FDE  00F2               	movwf	??_strcmp
  1317  0FDF  0872               	movf	??_strcmp,w
  1318  0FE0  07F6               	addwf	strcmp@s1,f
  1319  0FE1  3001               	movlw	1
  1320  0FE2  00F2               	movwf	??_strcmp
  1321  0FE3  0872               	movf	??_strcmp,w
  1322  0FE4  07F0               	addwf	strcmp@s2,f
  1323  0FE5                     l2061:	
  1324  0FE5  0870               	movf	strcmp@s2,w
  1325  0FE6  0084               	movwf	4
  1326  0FE7  120A  118A  200D  120A  158A  	fcall	stringdir
  1327  0FEC  00F2               	movwf	??_strcmp
  1328  0FED  0876               	movf	strcmp@s1,w
  1329  0FEE  0084               	movwf	4
  1330  0FEF  1383               	bcf	3,7	;select IRP bank0
  1331  0FF0  0800               	movf	0,w
  1332  0FF1  00F3               	movwf	??_strcmp+1
  1333  0FF2  0872               	movf	??_strcmp,w
  1334  0FF3  0273               	subwf	??_strcmp+1,w
  1335  0FF4  00F4               	movwf	??_strcmp+2
  1336  0FF5  0874               	movf	??_strcmp+2,w
  1337  0FF6  00F5               	movwf	strcmp@r
  1338  0FF7  0875               	movf	strcmp@r,w
  1339  0FF8  1903               	btfsc	3,2
  1340  0FF9  2FD8               	goto	l2063
  1341  0FFA                     l2065:	
  1342  0FFA  0875               	movf	strcmp@r,w
  1343  0FFB  00F0               	movwf	?_strcmp
  1344  0FFC  01F1               	clrf	?_strcmp+1
  1345  0FFD  1BF0               	btfsc	?_strcmp,7
  1346  0FFE  03F1               	decf	?_strcmp+1,f
  1347  0FFF  0008               	return
  1348  1000                     __end_of_strcmp:	
  1349                           
  1350                           	psect	text2
  1351  0139                     __ptext2:	
  1352 ;; *************** function _setup *****************
  1353 ;; Defined at:
  1354 ;;		line 139 in file "mainMaster.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;		None
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;		None
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      void 
  1361 ;; Registers used:
  1362 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1368 ;;      Params:         0       0       0       0       0
  1369 ;;      Locals:         0       0       0       0       0
  1370 ;;      Temps:          0       0       0       0       0
  1371 ;;      Totals:         0       0       0       0       0
  1372 ;;Total ram usage:        0 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; Hardware stack levels required when called:    3
  1375 ;; This function calls:
  1376 ;;		_I2C_Master_Init
  1377 ;;		_Lcd_Init
  1378 ;;		_UART_Init
  1379 ;;		_initOscilador
  1380 ;; This function is called by:
  1381 ;;		_main
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           
  1386                           ;psect for function _setup
  1387  0139                     _setup:	
  1388                           
  1389                           ;mainMaster.c: 140:     initOscilador(7);
  1390                           
  1391                           ;incstack = 0
  1392                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1393  0139  3007               	movlw	7
  1394  013A  120A  118A  2237  120A  118A  	fcall	_initOscilador
  1395                           
  1396                           ;mainMaster.c: 141:     ANSELH = 0;
  1397  013F  1683               	bsf	3,5	;RP0=1, select bank3
  1398  0140  1703               	bsf	3,6	;RP1=1, select bank3
  1399  0141  0189               	clrf	9	;volatile
  1400                           
  1401                           ;mainMaster.c: 142:     ANSEL = 0;
  1402  0142  0188               	clrf	8	;volatile
  1403                           
  1404                           ;mainMaster.c: 143:     TRISB = 0;
  1405  0143  1683               	bsf	3,5	;RP0=1, select bank1
  1406  0144  1303               	bcf	3,6	;RP1=0, select bank1
  1407  0145  0186               	clrf	6	;volatile
  1408                           
  1409                           ;mainMaster.c: 144:     TRISA = 0;
  1410  0146  0185               	clrf	5	;volatile
  1411                           
  1412                           ;mainMaster.c: 145:     PORTB = 0;
  1413  0147  1283               	bcf	3,5	;RP0=0, select bank0
  1414  0148  1303               	bcf	3,6	;RP1=0, select bank0
  1415  0149  0186               	clrf	6	;volatile
  1416                           
  1417                           ;mainMaster.c: 146:     PORTA = 0;
  1418  014A  0185               	clrf	5	;volatile
  1419                           
  1420                           ;mainMaster.c: 147:     TRISC = 0x01;
  1421  014B  3001               	movlw	1
  1422  014C  1683               	bsf	3,5	;RP0=1, select bank1
  1423  014D  1303               	bcf	3,6	;RP1=0, select bank1
  1424  014E  0087               	movwf	7	;volatile
  1425                           
  1426                           ;mainMaster.c: 148:     PORTC = 0;
  1427  014F  1283               	bcf	3,5	;RP0=0, select bank0
  1428  0150  1303               	bcf	3,6	;RP1=0, select bank0
  1429  0151  0187               	clrf	7	;volatile
  1430                           
  1431                           ;mainMaster.c: 149:     Lcd_Init();
  1432  0152  120A  118A  228C  120A  118A  	fcall	_Lcd_Init
  1433                           
  1434                           ;mainMaster.c: 150:     UART_Init(9600);
  1435  0157  3000               	movlw	0
  1436  0158  1283               	bcf	3,5	;RP0=0, select bank0
  1437  0159  1303               	bcf	3,6	;RP1=0, select bank0
  1438  015A  00A9               	movwf	UART_Init@baudrate+3
  1439  015B  3000               	movlw	0
  1440  015C  00A8               	movwf	UART_Init@baudrate+2
  1441  015D  3025               	movlw	37
  1442  015E  00A7               	movwf	UART_Init@baudrate+1
  1443  015F  3080               	movlw	128
  1444  0160  00A6               	movwf	UART_Init@baudrate
  1445  0161  120A  118A  24F8  120A  118A  	fcall	_UART_Init
  1446                           
  1447                           ;mainMaster.c: 151:     I2C_Master_Init(100000);
  1448  0166  3000               	movlw	0
  1449  0167  1283               	bcf	3,5	;RP0=0, select bank0
  1450  0168  1303               	bcf	3,6	;RP1=0, select bank0
  1451  0169  00A3               	movwf	I2C_Master_Init@c+3
  1452  016A  3001               	movlw	1
  1453  016B  00A2               	movwf	I2C_Master_Init@c+2
  1454  016C  3086               	movlw	134
  1455  016D  00A1               	movwf	I2C_Master_Init@c+1
  1456  016E  30A0               	movlw	160
  1457  016F  00A0               	movwf	I2C_Master_Init@c
  1458  0170  120A  118A  20CA   	fcall	_I2C_Master_Init
  1459  0173  0008               	return
  1460  0174                     __end_of_setup:	
  1461                           
  1462                           	psect	text3
  1463  0237                     __ptext3:	
  1464 ;; *************** function _initOscilador *****************
  1465 ;; Defined at:
  1466 ;;		line 11 in file "./Oscilador.h"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  option          1    wreg     unsigned char 
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;  option          1    2[COMMON] unsigned char 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  1    wreg      void 
  1473 ;; Registers used:
  1474 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1480 ;;      Params:         0       0       0       0       0
  1481 ;;      Locals:         1       0       0       0       0
  1482 ;;      Temps:          2       0       0       0       0
  1483 ;;      Totals:         3       0       0       0       0
  1484 ;;Total ram usage:        3 bytes
  1485 ;; Hardware stack levels used:    1
  1486 ;; This function calls:
  1487 ;;		Nothing
  1488 ;; This function is called by:
  1489 ;;		_setup
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493                           
  1494                           ;psect for function _initOscilador
  1495  0237                     _initOscilador:	
  1496                           
  1497                           ;incstack = 0
  1498                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  1499                           ;initOscilador@option stored from wreg
  1500  0237  00F2               	movwf	initOscilador@option
  1501                           
  1502                           ;./Oscilador.h: 13: 
  1503  0238  2A68               	goto	l1815
  1504  0239                     l1795:	
  1505                           
  1506                           ;./Oscilador.h: 16:         case 3:
  1507  0239  308F               	movlw	-113
  1508  023A  1683               	bsf	3,5	;RP0=1, select bank1
  1509  023B  1303               	bcf	3,6	;RP1=0, select bank1
  1510  023C  058F               	andwf	15,f	;volatile
  1511                           
  1512                           ;./Oscilador.h: 17: 
  1513  023D  2A8A               	goto	l171
  1514  023E                     l1797:	
  1515                           
  1516                           ;./Oscilador.h: 20:         case 4:
  1517  023E  1683               	bsf	3,5	;RP0=1, select bank1
  1518  023F  1303               	bcf	3,6	;RP1=0, select bank1
  1519  0240  080F               	movf	15,w	;volatile
  1520  0241  398F               	andlw	-113
  1521  0242  3810               	iorlw	16
  1522  0243  2A61               	goto	L7
  1523  0244                     l1799:	
  1524                           ;./Oscilador.h: 21: 
  1525                           
  1526                           
  1527                           ;./Oscilador.h: 24:         case 5:
  1528  0244  1683               	bsf	3,5	;RP0=1, select bank1
  1529  0245  1303               	bcf	3,6	;RP1=0, select bank1
  1530  0246  080F               	movf	15,w	;volatile
  1531  0247  398F               	andlw	-113
  1532  0248  3820               	iorlw	32
  1533  0249  2A61               	goto	L7
  1534  024A                     l1801:	
  1535                           ;./Oscilador.h: 25: 
  1536                           
  1537                           
  1538                           ;./Oscilador.h: 28:         case 6:
  1539  024A  1683               	bsf	3,5	;RP0=1, select bank1
  1540  024B  1303               	bcf	3,6	;RP1=0, select bank1
  1541  024C  080F               	movf	15,w	;volatile
  1542  024D  398F               	andlw	-113
  1543  024E  3830               	iorlw	48
  1544  024F  2A61               	goto	L7
  1545  0250                     l1803:	
  1546                           ;./Oscilador.h: 29: 
  1547                           
  1548                           
  1549                           ;./Oscilador.h: 32:         case 7:
  1550  0250  1683               	bsf	3,5	;RP0=1, select bank1
  1551  0251  1303               	bcf	3,6	;RP1=0, select bank1
  1552  0252  080F               	movf	15,w	;volatile
  1553  0253  398F               	andlw	-113
  1554  0254  3840               	iorlw	64
  1555  0255  2A61               	goto	L7
  1556  0256                     l1805:	
  1557                           ;./Oscilador.h: 33: 
  1558                           
  1559                           
  1560                           ;./Oscilador.h: 36:         default:
  1561  0256  1683               	bsf	3,5	;RP0=1, select bank1
  1562  0257  1303               	bcf	3,6	;RP1=0, select bank1
  1563  0258  080F               	movf	15,w	;volatile
  1564  0259  398F               	andlw	-113
  1565  025A  3850               	iorlw	80
  1566  025B  2A61               	goto	L7
  1567  025C                     l1807:	
  1568                           ;./Oscilador.h: 37: 
  1569                           
  1570                           
  1571                           ;./Oscilador.h: 40:     }
  1572  025C  1683               	bsf	3,5	;RP0=1, select bank1
  1573  025D  1303               	bcf	3,6	;RP1=0, select bank1
  1574  025E  080F               	movf	15,w	;volatile
  1575  025F  398F               	andlw	-113
  1576  0260  3860               	iorlw	96
  1577  0261                     L7:	
  1578  0261  008F               	movwf	15	;volatile
  1579                           
  1580                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  1581  0262  2A8A               	goto	l171
  1582  0263                     l1809:	
  1583  0263                     l1811:	
  1584  0263  3070               	movlw	112
  1585  0264  1683               	bsf	3,5	;RP0=1, select bank1
  1586  0265  1303               	bcf	3,6	;RP1=0, select bank1
  1587  0266  048F               	iorwf	15,f	;volatile
  1588  0267  2A8A               	goto	l171
  1589  0268                     l1815:	
  1590  0268  0872               	movf	initOscilador@option,w
  1591  0269  00F0               	movwf	??_initOscilador
  1592  026A  01F1               	clrf	??_initOscilador+1
  1593                           
  1594                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1595                           ; Switch size 1, requested type "simple"
  1596                           ; Number of cases is 1, Range of values is 0 to 0
  1597                           ; switch strategies available:
  1598                           ; Name         Instructions Cycles
  1599                           ; simple_byte            4     3 (average)
  1600                           ; direct_byte           11     8 (fixed)
  1601                           ; jumptable            260     6 (fixed)
  1602                           ;	Chosen strategy is simple_byte
  1603  026B  0871               	movf	??_initOscilador+1,w
  1604  026C  3A00               	xorlw	0	; case 0
  1605  026D  1903               	skipnz
  1606  026E  2A70               	goto	l2211
  1607  026F  2A63               	goto	l1811
  1608  0270                     l2211:	
  1609                           
  1610                           ; Switch size 1, requested type "simple"
  1611                           ; Number of cases is 8, Range of values is 0 to 7
  1612                           ; switch strategies available:
  1613                           ; Name         Instructions Cycles
  1614                           ; simple_byte           25    13 (average)
  1615                           ; direct_byte           32     8 (fixed)
  1616                           ; jumptable            260     6 (fixed)
  1617                           ;	Chosen strategy is simple_byte
  1618  0270  0870               	movf	??_initOscilador,w
  1619  0271  3A00               	xorlw	0	; case 0
  1620  0272  1903               	skipnz
  1621  0273  2A39               	goto	l1795
  1622  0274  3A01               	xorlw	1	; case 1
  1623  0275  1903               	skipnz
  1624  0276  2A3E               	goto	l1797
  1625  0277  3A03               	xorlw	3	; case 2
  1626  0278  1903               	skipnz
  1627  0279  2A44               	goto	l1799
  1628  027A  3A01               	xorlw	1	; case 3
  1629  027B  1903               	skipnz
  1630  027C  2A4A               	goto	l1801
  1631  027D  3A07               	xorlw	7	; case 4
  1632  027E  1903               	skipnz
  1633  027F  2A50               	goto	l1803
  1634  0280  3A01               	xorlw	1	; case 5
  1635  0281  1903               	skipnz
  1636  0282  2A56               	goto	l1805
  1637  0283  3A03               	xorlw	3	; case 6
  1638  0284  1903               	skipnz
  1639  0285  2A5C               	goto	l1807
  1640  0286  3A01               	xorlw	1	; case 7
  1641  0287  1903               	skipnz
  1642  0288  2A63               	goto	l1809
  1643  0289  2A63               	goto	l1811
  1644  028A                     l171:	
  1645  028A  140F               	bsf	15,0	;volatile
  1646  028B  0008               	return
  1647  028C                     __end_of_initOscilador:	
  1648                           
  1649                           	psect	text4
  1650  04F8                     __ptext4:	
  1651 ;; *************** function _UART_Init *****************
  1652 ;; Defined at:
  1653 ;;		line 8 in file "./UART.h"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;  baudrate        4    6[BANK0 ] const long 
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;  x               2    9[COMMON] unsigned int 
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  1    wreg      unsigned char 
  1660 ;; Registers used:
  1661 ;;		wreg, status,2, status,0, pclath, cstack
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1667 ;;      Params:         0       4       0       0       0
  1668 ;;      Locals:         2       0       0       0       0
  1669 ;;      Temps:          0      12       0       0       0
  1670 ;;      Totals:         2      16       0       0       0
  1671 ;;Total ram usage:       18 bytes
  1672 ;; Hardware stack levels used:    1
  1673 ;; Hardware stack levels required when called:    1
  1674 ;; This function calls:
  1675 ;;		___aldiv
  1676 ;; This function is called by:
  1677 ;;		_setup
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           
  1682                           ;psect for function _UART_Init
  1683  04F8                     _UART_Init:	
  1684                           
  1685                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
  1686                           
  1687                           ;incstack = 0
  1688                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  1689  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  1690  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  1691  04FA  0826               	movf	UART_Init@baudrate,w
  1692  04FB  00AA               	movwf	??_UART_Init
  1693  04FC  0827               	movf	UART_Init@baudrate+1,w
  1694  04FD  00AB               	movwf	??_UART_Init+1
  1695  04FE  0828               	movf	UART_Init@baudrate+2,w
  1696  04FF  00AC               	movwf	??_UART_Init+2
  1697  0500  0829               	movf	UART_Init@baudrate+3,w
  1698  0501  00AD               	movwf	??_UART_Init+3
  1699  0502  3006               	movlw	6
  1700  0503                     u1265:	
  1701  0503  1003               	clrc
  1702  0504  0DAA               	rlf	??_UART_Init,f
  1703  0505  0DAB               	rlf	??_UART_Init+1,f
  1704  0506  0DAC               	rlf	??_UART_Init+2,f
  1705  0507  0DAD               	rlf	??_UART_Init+3,f
  1706  0508  3EFF               	addlw	-1
  1707  0509  1D03               	skipz
  1708  050A  2D03               	goto	u1265
  1709  050B  082D               	movf	??_UART_Init+3,w
  1710  050C  00F3               	movwf	___aldiv@divisor+3
  1711  050D  082C               	movf	??_UART_Init+2,w
  1712  050E  00F2               	movwf	___aldiv@divisor+2
  1713  050F  082B               	movf	??_UART_Init+1,w
  1714  0510  00F1               	movwf	___aldiv@divisor+1
  1715  0511  082A               	movf	??_UART_Init,w
  1716  0512  00F0               	movwf	___aldiv@divisor
  1717  0513  0826               	movf	UART_Init@baudrate,w
  1718  0514  00AE               	movwf	??_UART_Init+4
  1719  0515  0827               	movf	UART_Init@baudrate+1,w
  1720  0516  00AF               	movwf	??_UART_Init+5
  1721  0517  0828               	movf	UART_Init@baudrate+2,w
  1722  0518  00B0               	movwf	??_UART_Init+6
  1723  0519  0829               	movf	UART_Init@baudrate+3,w
  1724  051A  00B1               	movwf	??_UART_Init+7
  1725  051B  3006               	movlw	6
  1726  051C                     u1275:	
  1727  051C  1003               	clrc
  1728  051D  0DAE               	rlf	??_UART_Init+4,f
  1729  051E  0DAF               	rlf	??_UART_Init+5,f
  1730  051F  0DB0               	rlf	??_UART_Init+6,f
  1731  0520  0DB1               	rlf	??_UART_Init+7,f
  1732  0521  3EFF               	addlw	-1
  1733  0522  1D03               	skipz
  1734  0523  2D1C               	goto	u1275
  1735  0524  3000               	movlw	0
  1736  0525  00B2               	movwf	??_UART_Init+8
  1737  0526  3012               	movlw	18
  1738  0527  00B3               	movwf	??_UART_Init+9
  1739  0528  307A               	movlw	122
  1740  0529  00B4               	movwf	??_UART_Init+10
  1741  052A  3000               	movlw	0
  1742  052B  00B5               	movwf	??_UART_Init+11
  1743  052C  082E               	movf	??_UART_Init+4,w
  1744  052D  02B2               	subwf	??_UART_Init+8,f
  1745  052E  082F               	movf	??_UART_Init+5,w
  1746  052F  1C03               	skipc
  1747  0530  0F2F               	incfsz	??_UART_Init+5,w
  1748  0531  2D33               	goto	u1281
  1749  0532  2D34               	goto	u1282
  1750  0533                     u1281:	
  1751  0533  02B3               	subwf	??_UART_Init+9,f
  1752  0534                     u1282:	
  1753  0534  0830               	movf	??_UART_Init+6,w
  1754  0535  1C03               	skipc
  1755  0536  0F30               	incfsz	??_UART_Init+6,w
  1756  0537  2D39               	goto	u1283
  1757  0538  2D3A               	goto	u1284
  1758  0539                     u1283:	
  1759  0539  02B4               	subwf	??_UART_Init+10,f
  1760  053A                     u1284:	
  1761  053A  0831               	movf	??_UART_Init+7,w
  1762  053B  1C03               	skipc
  1763  053C  0F31               	incfsz	??_UART_Init+7,w
  1764  053D  2D3F               	goto	u1285
  1765  053E  2D40               	goto	u1286
  1766  053F                     u1285:	
  1767  053F  02B5               	subwf	??_UART_Init+11,f
  1768  0540                     u1286:	
  1769  0540  0835               	movf	??_UART_Init+11,w
  1770  0541  00F7               	movwf	___aldiv@dividend+3
  1771  0542  0834               	movf	??_UART_Init+10,w
  1772  0543  00F6               	movwf	___aldiv@dividend+2
  1773  0544  0833               	movf	??_UART_Init+9,w
  1774  0545  00F5               	movwf	___aldiv@dividend+1
  1775  0546  0832               	movf	??_UART_Init+8,w
  1776  0547  00F4               	movwf	___aldiv@dividend
  1777  0548  120A  118A  23C6  120A  118A  	fcall	___aldiv
  1778  054D  0871               	movf	?___aldiv+1,w
  1779  054E  00FA               	movwf	UART_Init@x+1
  1780  054F  0870               	movf	?___aldiv,w
  1781  0550  00F9               	movwf	UART_Init@x
  1782                           
  1783                           ;./UART.h: 12:  if(x>255)
  1784  0551  3001               	movlw	1
  1785  0552  027A               	subwf	UART_Init@x+1,w
  1786  0553  3000               	movlw	0
  1787  0554  1903               	skipnz
  1788  0555  0279               	subwf	UART_Init@x,w
  1789  0556  1C03               	skipc
  1790  0557  2DB4               	goto	l1829
  1791                           
  1792                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  1793  0558  1283               	bcf	3,5	;RP0=0, select bank0
  1794  0559  1303               	bcf	3,6	;RP1=0, select bank0
  1795  055A  0826               	movf	UART_Init@baudrate,w
  1796  055B  00AA               	movwf	??_UART_Init
  1797  055C  0827               	movf	UART_Init@baudrate+1,w
  1798  055D  00AB               	movwf	??_UART_Init+1
  1799  055E  0828               	movf	UART_Init@baudrate+2,w
  1800  055F  00AC               	movwf	??_UART_Init+2
  1801  0560  0829               	movf	UART_Init@baudrate+3,w
  1802  0561  00AD               	movwf	??_UART_Init+3
  1803  0562  3004               	movlw	4
  1804  0563                     u1305:	
  1805  0563  1003               	clrc
  1806  0564  0DAA               	rlf	??_UART_Init,f
  1807  0565  0DAB               	rlf	??_UART_Init+1,f
  1808  0566  0DAC               	rlf	??_UART_Init+2,f
  1809  0567  0DAD               	rlf	??_UART_Init+3,f
  1810  0568  3EFF               	addlw	-1
  1811  0569  1D03               	skipz
  1812  056A  2D63               	goto	u1305
  1813  056B  082D               	movf	??_UART_Init+3,w
  1814  056C  00F3               	movwf	___aldiv@divisor+3
  1815  056D  082C               	movf	??_UART_Init+2,w
  1816  056E  00F2               	movwf	___aldiv@divisor+2
  1817  056F  082B               	movf	??_UART_Init+1,w
  1818  0570  00F1               	movwf	___aldiv@divisor+1
  1819  0571  082A               	movf	??_UART_Init,w
  1820  0572  00F0               	movwf	___aldiv@divisor
  1821  0573  0826               	movf	UART_Init@baudrate,w
  1822  0574  00AE               	movwf	??_UART_Init+4
  1823  0575  0827               	movf	UART_Init@baudrate+1,w
  1824  0576  00AF               	movwf	??_UART_Init+5
  1825  0577  0828               	movf	UART_Init@baudrate+2,w
  1826  0578  00B0               	movwf	??_UART_Init+6
  1827  0579  0829               	movf	UART_Init@baudrate+3,w
  1828  057A  00B1               	movwf	??_UART_Init+7
  1829  057B  3004               	movlw	4
  1830  057C                     u1315:	
  1831  057C  1003               	clrc
  1832  057D  0DAE               	rlf	??_UART_Init+4,f
  1833  057E  0DAF               	rlf	??_UART_Init+5,f
  1834  057F  0DB0               	rlf	??_UART_Init+6,f
  1835  0580  0DB1               	rlf	??_UART_Init+7,f
  1836  0581  3EFF               	addlw	-1
  1837  0582  1D03               	skipz
  1838  0583  2D7C               	goto	u1315
  1839  0584  3000               	movlw	0
  1840  0585  00B2               	movwf	??_UART_Init+8
  1841  0586  3012               	movlw	18
  1842  0587  00B3               	movwf	??_UART_Init+9
  1843  0588  307A               	movlw	122
  1844  0589  00B4               	movwf	??_UART_Init+10
  1845  058A  3000               	movlw	0
  1846  058B  00B5               	movwf	??_UART_Init+11
  1847  058C  082E               	movf	??_UART_Init+4,w
  1848  058D  02B2               	subwf	??_UART_Init+8,f
  1849  058E  082F               	movf	??_UART_Init+5,w
  1850  058F  1C03               	skipc
  1851  0590  0F2F               	incfsz	??_UART_Init+5,w
  1852  0591  2D93               	goto	u1321
  1853  0592  2D94               	goto	u1322
  1854  0593                     u1321:	
  1855  0593  02B3               	subwf	??_UART_Init+9,f
  1856  0594                     u1322:	
  1857  0594  0830               	movf	??_UART_Init+6,w
  1858  0595  1C03               	skipc
  1859  0596  0F30               	incfsz	??_UART_Init+6,w
  1860  0597  2D99               	goto	u1323
  1861  0598  2D9A               	goto	u1324
  1862  0599                     u1323:	
  1863  0599  02B4               	subwf	??_UART_Init+10,f
  1864  059A                     u1324:	
  1865  059A  0831               	movf	??_UART_Init+7,w
  1866  059B  1C03               	skipc
  1867  059C  0F31               	incfsz	??_UART_Init+7,w
  1868  059D  2D9F               	goto	u1325
  1869  059E  2DA0               	goto	u1326
  1870  059F                     u1325:	
  1871  059F  02B5               	subwf	??_UART_Init+11,f
  1872  05A0                     u1326:	
  1873  05A0  0835               	movf	??_UART_Init+11,w
  1874  05A1  00F7               	movwf	___aldiv@dividend+3
  1875  05A2  0834               	movf	??_UART_Init+10,w
  1876  05A3  00F6               	movwf	___aldiv@dividend+2
  1877  05A4  0833               	movf	??_UART_Init+9,w
  1878  05A5  00F5               	movwf	___aldiv@dividend+1
  1879  05A6  0832               	movf	??_UART_Init+8,w
  1880  05A7  00F4               	movwf	___aldiv@dividend
  1881  05A8  120A  118A  23C6  120A  118A  	fcall	___aldiv
  1882  05AD  0871               	movf	?___aldiv+1,w
  1883  05AE  00FA               	movwf	UART_Init@x+1
  1884  05AF  0870               	movf	?___aldiv,w
  1885  05B0  00F9               	movwf	UART_Init@x
  1886                           
  1887                           ;./UART.h: 15:   BRGH = 1;
  1888  05B1  1683               	bsf	3,5	;RP0=1, select bank1
  1889  05B2  1303               	bcf	3,6	;RP1=0, select bank1
  1890  05B3  1518               	bsf	24,2	;volatile
  1891  05B4                     l1829:	
  1892                           
  1893                           ;./UART.h: 17:  if(x<256)
  1894  05B4  3001               	movlw	1
  1895  05B5  027A               	subwf	UART_Init@x+1,w
  1896  05B6  3000               	movlw	0
  1897  05B7  1903               	skipnz
  1898  05B8  0279               	subwf	UART_Init@x,w
  1899  05B9  1803               	skipnc
  1900  05BA  0008               	return
  1901                           
  1902                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  1903  05BB  0879               	movf	UART_Init@x,w
  1904  05BC  1683               	bsf	3,5	;RP0=1, select bank1
  1905  05BD  1303               	bcf	3,6	;RP1=0, select bank1
  1906  05BE  0099               	movwf	25	;volatile
  1907                           
  1908                           ;./UART.h: 20:    SYNC = 0;
  1909  05BF  1218               	bcf	24,4	;volatile
  1910                           
  1911                           ;./UART.h: 21:    SPEN = 1;
  1912  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  1913  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  1914  05C2  1798               	bsf	24,7	;volatile
  1915                           
  1916                           ;./UART.h: 22:           TRISC7 = 1;
  1917  05C3  1683               	bsf	3,5	;RP0=1, select bank1
  1918  05C4  1303               	bcf	3,6	;RP1=0, select bank1
  1919  05C5  1787               	bsf	7,7	;volatile
  1920                           
  1921                           ;./UART.h: 23:           TRISC6 = 1;
  1922  05C6  1707               	bsf	7,6	;volatile
  1923                           
  1924                           ;./UART.h: 24:           CREN = 1;
  1925  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  1926  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  1927  05C9  1618               	bsf	24,4	;volatile
  1928                           
  1929                           ;./UART.h: 25:           TXEN = 1;
  1930  05CA  1683               	bsf	3,5	;RP0=1, select bank1
  1931  05CB  1303               	bcf	3,6	;RP1=0, select bank1
  1932  05CC  1698               	bsf	24,5	;volatile
  1933  05CD  0008               	return
  1934  05CE                     __end_of_UART_Init:	
  1935                           
  1936                           	psect	text5
  1937  03C6                     __ptext5:	
  1938 ;; *************** function ___aldiv *****************
  1939 ;; Defined at:
  1940 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  1941 ;; Parameters:    Size  Location     Type
  1942 ;;  divisor         4    0[COMMON] long 
  1943 ;;  dividend        4    4[COMMON] long 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  quotient        4    2[BANK0 ] long 
  1946 ;;  sign            1    1[BANK0 ] unsigned char 
  1947 ;;  counter         1    0[BANK0 ] unsigned char 
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  4    0[COMMON] long 
  1950 ;; Registers used:
  1951 ;;		wreg, status,2, status,0
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1957 ;;      Params:         8       0       0       0       0
  1958 ;;      Locals:         0       6       0       0       0
  1959 ;;      Temps:          1       0       0       0       0
  1960 ;;      Totals:         9       6       0       0       0
  1961 ;;Total ram usage:       15 bytes
  1962 ;; Hardware stack levels used:    1
  1963 ;; This function calls:
  1964 ;;		Nothing
  1965 ;; This function is called by:
  1966 ;;		_UART_Init
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           
  1970                           
  1971                           ;psect for function ___aldiv
  1972  03C6                     ___aldiv:	
  1973                           
  1974                           ;incstack = 0
  1975                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1976  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  1977  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  1978  03C8  01A1               	clrf	___aldiv@sign
  1979  03C9  1FF3               	btfss	___aldiv@divisor+3,7
  1980  03CA  2BD8               	goto	l465
  1981  03CB  09F0               	comf	___aldiv@divisor,f
  1982  03CC  09F1               	comf	___aldiv@divisor+1,f
  1983  03CD  09F2               	comf	___aldiv@divisor+2,f
  1984  03CE  09F3               	comf	___aldiv@divisor+3,f
  1985  03CF  0AF0               	incf	___aldiv@divisor,f
  1986  03D0  1903               	skipnz
  1987  03D1  0AF1               	incf	___aldiv@divisor+1,f
  1988  03D2  1903               	skipnz
  1989  03D3  0AF2               	incf	___aldiv@divisor+2,f
  1990  03D4  1903               	skipnz
  1991  03D5  0AF3               	incf	___aldiv@divisor+3,f
  1992  03D6  01A1               	clrf	___aldiv@sign
  1993  03D7  0AA1               	incf	___aldiv@sign,f
  1994  03D8                     l465:	
  1995  03D8  1FF7               	btfss	___aldiv@dividend+3,7
  1996  03D9  2BE9               	goto	l1641
  1997  03DA  09F4               	comf	___aldiv@dividend,f
  1998  03DB  09F5               	comf	___aldiv@dividend+1,f
  1999  03DC  09F6               	comf	___aldiv@dividend+2,f
  2000  03DD  09F7               	comf	___aldiv@dividend+3,f
  2001  03DE  0AF4               	incf	___aldiv@dividend,f
  2002  03DF  1903               	skipnz
  2003  03E0  0AF5               	incf	___aldiv@dividend+1,f
  2004  03E1  1903               	skipnz
  2005  03E2  0AF6               	incf	___aldiv@dividend+2,f
  2006  03E3  1903               	skipnz
  2007  03E4  0AF7               	incf	___aldiv@dividend+3,f
  2008  03E5  3001               	movlw	1
  2009  03E6  00F8               	movwf	??___aldiv
  2010  03E7  0878               	movf	??___aldiv,w
  2011  03E8  06A1               	xorwf	___aldiv@sign,f
  2012  03E9                     l1641:	
  2013  03E9  3000               	movlw	0
  2014  03EA  00A5               	movwf	___aldiv@quotient+3
  2015  03EB  3000               	movlw	0
  2016  03EC  00A4               	movwf	___aldiv@quotient+2
  2017  03ED  3000               	movlw	0
  2018  03EE  00A3               	movwf	___aldiv@quotient+1
  2019  03EF  3000               	movlw	0
  2020  03F0  00A2               	movwf	___aldiv@quotient
  2021  03F1  0873               	movf	___aldiv@divisor+3,w
  2022  03F2  0472               	iorwf	___aldiv@divisor+2,w
  2023  03F3  0471               	iorwf	___aldiv@divisor+1,w
  2024  03F4  0470               	iorwf	___aldiv@divisor,w
  2025  03F5  1903               	skipnz
  2026  03F6  2C3E               	goto	l1663
  2027  03F7  01A0               	clrf	___aldiv@counter
  2028  03F8  0AA0               	incf	___aldiv@counter,f
  2029  03F9                     l1649:	
  2030  03F9  1BF3               	btfsc	___aldiv@divisor+3,7
  2031  03FA  2C09               	goto	l1651
  2032  03FB  3001               	movlw	1
  2033  03FC  00F8               	movwf	??___aldiv
  2034  03FD                     u1035:	
  2035  03FD  1003               	clrc
  2036  03FE  0DF0               	rlf	___aldiv@divisor,f
  2037  03FF  0DF1               	rlf	___aldiv@divisor+1,f
  2038  0400  0DF2               	rlf	___aldiv@divisor+2,f
  2039  0401  0DF3               	rlf	___aldiv@divisor+3,f
  2040  0402  0BF8               	decfsz	??___aldiv,f
  2041  0403  2BFD               	goto	u1035
  2042  0404  3001               	movlw	1
  2043  0405  00F8               	movwf	??___aldiv
  2044  0406  0878               	movf	??___aldiv,w
  2045  0407  07A0               	addwf	___aldiv@counter,f
  2046  0408  2BF9               	goto	l1649
  2047  0409                     l1651:	
  2048  0409  3001               	movlw	1
  2049  040A  00F8               	movwf	??___aldiv
  2050  040B                     u1055:	
  2051  040B  1003               	clrc
  2052  040C  0DA2               	rlf	___aldiv@quotient,f
  2053  040D  0DA3               	rlf	___aldiv@quotient+1,f
  2054  040E  0DA4               	rlf	___aldiv@quotient+2,f
  2055  040F  0DA5               	rlf	___aldiv@quotient+3,f
  2056  0410  0BF8               	decfsz	??___aldiv,f
  2057  0411  2C0B               	goto	u1055
  2058  0412  0873               	movf	___aldiv@divisor+3,w
  2059  0413  0277               	subwf	___aldiv@dividend+3,w
  2060  0414  1D03               	skipz
  2061  0415  2C20               	goto	u1065
  2062  0416  0872               	movf	___aldiv@divisor+2,w
  2063  0417  0276               	subwf	___aldiv@dividend+2,w
  2064  0418  1D03               	skipz
  2065  0419  2C20               	goto	u1065
  2066  041A  0871               	movf	___aldiv@divisor+1,w
  2067  041B  0275               	subwf	___aldiv@dividend+1,w
  2068  041C  1D03               	skipz
  2069  041D  2C20               	goto	u1065
  2070  041E  0870               	movf	___aldiv@divisor,w
  2071  041F  0274               	subwf	___aldiv@dividend,w
  2072  0420                     u1065:	
  2073  0420  1C03               	skipc
  2074  0421  2C31               	goto	l1659
  2075  0422  0870               	movf	___aldiv@divisor,w
  2076  0423  02F4               	subwf	___aldiv@dividend,f
  2077  0424  0871               	movf	___aldiv@divisor+1,w
  2078  0425  1C03               	skipc
  2079  0426  0F71               	incfsz	___aldiv@divisor+1,w
  2080  0427  02F5               	subwf	___aldiv@dividend+1,f
  2081  0428  0872               	movf	___aldiv@divisor+2,w
  2082  0429  1C03               	skipc
  2083  042A  0F72               	incfsz	___aldiv@divisor+2,w
  2084  042B  02F6               	subwf	___aldiv@dividend+2,f
  2085  042C  0873               	movf	___aldiv@divisor+3,w
  2086  042D  1C03               	skipc
  2087  042E  0F73               	incfsz	___aldiv@divisor+3,w
  2088  042F  02F7               	subwf	___aldiv@dividend+3,f
  2089  0430  1422               	bsf	___aldiv@quotient,0
  2090  0431                     l1659:	
  2091  0431  3001               	movlw	1
  2092  0432                     u1075:	
  2093  0432  1003               	clrc
  2094  0433  0CF3               	rrf	___aldiv@divisor+3,f
  2095  0434  0CF2               	rrf	___aldiv@divisor+2,f
  2096  0435  0CF1               	rrf	___aldiv@divisor+1,f
  2097  0436  0CF0               	rrf	___aldiv@divisor,f
  2098  0437  3EFF               	addlw	-1
  2099  0438  1D03               	skipz
  2100  0439  2C32               	goto	u1075
  2101  043A  3001               	movlw	1
  2102  043B  02A0               	subwf	___aldiv@counter,f
  2103  043C  1D03               	btfss	3,2
  2104  043D  2C09               	goto	l1651
  2105  043E                     l1663:	
  2106  043E  0821               	movf	___aldiv@sign,w
  2107  043F  1903               	btfsc	3,2
  2108  0440  2C4C               	goto	l1667
  2109  0441  09A2               	comf	___aldiv@quotient,f
  2110  0442  09A3               	comf	___aldiv@quotient+1,f
  2111  0443  09A4               	comf	___aldiv@quotient+2,f
  2112  0444  09A5               	comf	___aldiv@quotient+3,f
  2113  0445  0AA2               	incf	___aldiv@quotient,f
  2114  0446  1903               	skipnz
  2115  0447  0AA3               	incf	___aldiv@quotient+1,f
  2116  0448  1903               	skipnz
  2117  0449  0AA4               	incf	___aldiv@quotient+2,f
  2118  044A  1903               	skipnz
  2119  044B  0AA5               	incf	___aldiv@quotient+3,f
  2120  044C                     l1667:	
  2121  044C  0825               	movf	___aldiv@quotient+3,w
  2122  044D  00F3               	movwf	?___aldiv+3
  2123  044E  0824               	movf	___aldiv@quotient+2,w
  2124  044F  00F2               	movwf	?___aldiv+2
  2125  0450  0823               	movf	___aldiv@quotient+1,w
  2126  0451  00F1               	movwf	?___aldiv+1
  2127  0452  0822               	movf	___aldiv@quotient,w
  2128  0453  00F0               	movwf	?___aldiv
  2129  0454  0008               	return
  2130  0455                     __end_of___aldiv:	
  2131                           
  2132                           	psect	text6
  2133  028C                     __ptext6:	
  2134 ;; *************** function _Lcd_Init *****************
  2135 ;; Defined at:
  2136 ;;		line 65 in file "./LCD4bits.h"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;		None
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;		None
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  1    wreg      void 
  2143 ;; Registers used:
  2144 ;;		wreg, status,2, status,0, pclath, cstack
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2150 ;;      Params:         0       0       0       0       0
  2151 ;;      Locals:         0       0       0       0       0
  2152 ;;      Temps:          2       0       0       0       0
  2153 ;;      Totals:         2       0       0       0       0
  2154 ;;Total ram usage:        2 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    2
  2157 ;; This function calls:
  2158 ;;		_Lcd_Cmd
  2159 ;;		_Lcd_Port
  2160 ;; This function is called by:
  2161 ;;		_setup
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           
  2166                           ;psect for function _Lcd_Init
  2167  028C                     _Lcd_Init:	
  2168                           
  2169                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  2170                           
  2171                           ;incstack = 0
  2172                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2173  028C  3000               	movlw	0
  2174  028D  120A  158A  26E4  120A  118A  	fcall	_Lcd_Port
  2175                           
  2176                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  2177  0292  3034               	movlw	52
  2178  0293  00F5               	movwf	??_Lcd_Init+1
  2179  0294  30F1               	movlw	241
  2180  0295  00F4               	movwf	??_Lcd_Init
  2181  0296                     u1717:	
  2182  0296  0BF4               	decfsz	??_Lcd_Init,f
  2183  0297  2A96               	goto	u1717
  2184  0298  0BF5               	decfsz	??_Lcd_Init+1,f
  2185  0299  2A96               	goto	u1717
  2186  029A  2A9B               	nop2
  2187                           
  2188                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  2189  029B  3003               	movlw	3
  2190  029C  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2191                           
  2192                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2193  02A1  300D               	movlw	13
  2194  02A2  00F5               	movwf	??_Lcd_Init+1
  2195  02A3  30FB               	movlw	251
  2196  02A4  00F4               	movwf	??_Lcd_Init
  2197  02A5                     u1727:	
  2198  02A5  0BF4               	decfsz	??_Lcd_Init,f
  2199  02A6  2AA5               	goto	u1727
  2200  02A7  0BF5               	decfsz	??_Lcd_Init+1,f
  2201  02A8  2AA5               	goto	u1727
  2202  02A9  2AAA               	nop2
  2203                           
  2204                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  2205  02AA  3003               	movlw	3
  2206  02AB  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2207                           
  2208                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  2209  02B0  301D               	movlw	29
  2210  02B1  00F5               	movwf	??_Lcd_Init+1
  2211  02B2  3091               	movlw	145
  2212  02B3  00F4               	movwf	??_Lcd_Init
  2213  02B4                     u1737:	
  2214  02B4  0BF4               	decfsz	??_Lcd_Init,f
  2215  02B5  2AB4               	goto	u1737
  2216  02B6  0BF5               	decfsz	??_Lcd_Init+1,f
  2217  02B7  2AB4               	goto	u1737
  2218                           
  2219                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  2220  02B8  3003               	movlw	3
  2221  02B9  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2222                           
  2223                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  2224  02BE  3002               	movlw	2
  2225  02BF  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2226                           
  2227                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  2228  02C4  3002               	movlw	2
  2229  02C5  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2230                           
  2231                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  2232  02CA  3008               	movlw	8
  2233  02CB  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2234                           
  2235                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  2236  02D0  3000               	movlw	0
  2237  02D1  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2238                           
  2239                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  2240  02D6  300C               	movlw	12
  2241  02D7  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2242                           
  2243                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  2244  02DC  3000               	movlw	0
  2245  02DD  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2246                           
  2247                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  2248  02E2  3006               	movlw	6
  2249  02E3  120A  158A  26FE   	fcall	_Lcd_Cmd
  2250  02E6  0008               	return
  2251  02E7                     __end_of_Lcd_Init:	
  2252                           
  2253                           	psect	text7
  2254  00CA                     __ptext7:	
  2255 ;; *************** function _I2C_Master_Init *****************
  2256 ;; Defined at:
  2257 ;;		line 16 in file "./I2C.h"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;  c               4    0[BANK0 ] const unsigned long 
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;		None
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  1    wreg      void 
  2264 ;; Registers used:
  2265 ;;		wreg, status,2, status,0, pclath, cstack
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2271 ;;      Params:         0       4       0       0       0
  2272 ;;      Locals:         0       0       0       0       0
  2273 ;;      Temps:          0       4       0       0       0
  2274 ;;      Totals:         0       8       0       0       0
  2275 ;;Total ram usage:        8 bytes
  2276 ;; Hardware stack levels used:    1
  2277 ;; Hardware stack levels required when called:    1
  2278 ;; This function calls:
  2279 ;;		___lldiv
  2280 ;; This function is called by:
  2281 ;;		_setup
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           
  2286                           ;psect for function _I2C_Master_Init
  2287  00CA                     _I2C_Master_Init:	
  2288                           
  2289                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  2290                           
  2291                           ;incstack = 0
  2292                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  2293  00CA  3028               	movlw	40
  2294  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  2295  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  2296  00CD  0094               	movwf	20	;volatile
  2297                           
  2298                           ;./I2C.h: 19:     SSPCON2 = 0;
  2299  00CE  1683               	bsf	3,5	;RP0=1, select bank1
  2300  00CF  1303               	bcf	3,6	;RP1=0, select bank1
  2301  00D0  0191               	clrf	17	;volatile
  2302                           
  2303                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  2304  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  2305  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  2306  00D3  0820               	movf	I2C_Master_Init@c,w
  2307  00D4  00A4               	movwf	??_I2C_Master_Init
  2308  00D5  0821               	movf	I2C_Master_Init@c+1,w
  2309  00D6  00A5               	movwf	??_I2C_Master_Init+1
  2310  00D7  0822               	movf	I2C_Master_Init@c+2,w
  2311  00D8  00A6               	movwf	??_I2C_Master_Init+2
  2312  00D9  0823               	movf	I2C_Master_Init@c+3,w
  2313  00DA  00A7               	movwf	??_I2C_Master_Init+3
  2314  00DB  3002               	movlw	2
  2315  00DC                     u1235:	
  2316  00DC  1003               	clrc
  2317  00DD  0DA4               	rlf	??_I2C_Master_Init,f
  2318  00DE  0DA5               	rlf	??_I2C_Master_Init+1,f
  2319  00DF  0DA6               	rlf	??_I2C_Master_Init+2,f
  2320  00E0  0DA7               	rlf	??_I2C_Master_Init+3,f
  2321  00E1  3EFF               	addlw	-1
  2322  00E2  1D03               	skipz
  2323  00E3  28DC               	goto	u1235
  2324  00E4  0827               	movf	??_I2C_Master_Init+3,w
  2325  00E5  00F3               	movwf	___lldiv@divisor+3
  2326  00E6  0826               	movf	??_I2C_Master_Init+2,w
  2327  00E7  00F2               	movwf	___lldiv@divisor+2
  2328  00E8  0825               	movf	??_I2C_Master_Init+1,w
  2329  00E9  00F1               	movwf	___lldiv@divisor+1
  2330  00EA  0824               	movf	??_I2C_Master_Init,w
  2331  00EB  00F0               	movwf	___lldiv@divisor
  2332  00EC  3000               	movlw	0
  2333  00ED  00F7               	movwf	___lldiv@dividend+3
  2334  00EE  307A               	movlw	122
  2335  00EF  00F6               	movwf	___lldiv@dividend+2
  2336  00F0  3012               	movlw	18
  2337  00F1  00F5               	movwf	___lldiv@dividend+1
  2338  00F2  3000               	movlw	0
  2339  00F3  00F4               	movwf	___lldiv@dividend
  2340  00F4  120A  118A  22E7   	fcall	___lldiv
  2341  00F7  0870               	movf	?___lldiv,w
  2342  00F8  3EFF               	addlw	255
  2343  00F9  1683               	bsf	3,5	;RP0=1, select bank1
  2344  00FA  1303               	bcf	3,6	;RP1=0, select bank1
  2345  00FB  0093               	movwf	19	;volatile
  2346                           
  2347                           ;./I2C.h: 21:     SSPSTAT = 0;
  2348  00FC  0194               	clrf	20	;volatile
  2349                           
  2350                           ;./I2C.h: 22:     TRISC3 = 1;
  2351  00FD  1587               	bsf	7,3	;volatile
  2352                           
  2353                           ;./I2C.h: 23:     TRISC4 = 1;
  2354  00FE  1607               	bsf	7,4	;volatile
  2355  00FF  0008               	return
  2356  0100                     __end_of_I2C_Master_Init:	
  2357                           
  2358                           	psect	text8
  2359  02E7                     __ptext8:	
  2360 ;; *************** function ___lldiv *****************
  2361 ;; Defined at:
  2362 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;  divisor         4    0[COMMON] unsigned long 
  2365 ;;  dividend        4    4[COMMON] unsigned long 
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  quotient        4    9[COMMON] unsigned long 
  2368 ;;  counter         1   13[COMMON] unsigned char 
  2369 ;; Return value:  Size  Location     Type
  2370 ;;                  4    0[COMMON] unsigned long 
  2371 ;; Registers used:
  2372 ;;		wreg, status,2, status,0
  2373 ;; Tracked objects:
  2374 ;;		On entry : 0/0
  2375 ;;		On exit  : 0/0
  2376 ;;		Unchanged: 0/0
  2377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2378 ;;      Params:         8       0       0       0       0
  2379 ;;      Locals:         5       0       0       0       0
  2380 ;;      Temps:          1       0       0       0       0
  2381 ;;      Totals:        14       0       0       0       0
  2382 ;;Total ram usage:       14 bytes
  2383 ;; Hardware stack levels used:    1
  2384 ;; This function calls:
  2385 ;;		Nothing
  2386 ;; This function is called by:
  2387 ;;		_I2C_Master_Init
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391                           
  2392                           ;psect for function ___lldiv
  2393  02E7                     ___lldiv:	
  2394                           
  2395                           ;incstack = 0
  2396                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2397  02E7  3000               	movlw	0
  2398  02E8  00FC               	movwf	___lldiv@quotient+3
  2399  02E9  3000               	movlw	0
  2400  02EA  00FB               	movwf	___lldiv@quotient+2
  2401  02EB  3000               	movlw	0
  2402  02EC  00FA               	movwf	___lldiv@quotient+1
  2403  02ED  3000               	movlw	0
  2404  02EE  00F9               	movwf	___lldiv@quotient
  2405  02EF  0873               	movf	___lldiv@divisor+3,w
  2406  02F0  0472               	iorwf	___lldiv@divisor+2,w
  2407  02F1  0471               	iorwf	___lldiv@divisor+1,w
  2408  02F2  0470               	iorwf	___lldiv@divisor,w
  2409  02F3  1903               	skipnz
  2410  02F4  2B3C               	goto	l1627
  2411  02F5  01FD               	clrf	___lldiv@counter
  2412  02F6  0AFD               	incf	___lldiv@counter,f
  2413  02F7                     l1613:	
  2414  02F7  1BF3               	btfsc	___lldiv@divisor+3,7
  2415  02F8  2B07               	goto	l1615
  2416  02F9  3001               	movlw	1
  2417  02FA  00F8               	movwf	??___lldiv
  2418  02FB                     u945:	
  2419  02FB  1003               	clrc
  2420  02FC  0DF0               	rlf	___lldiv@divisor,f
  2421  02FD  0DF1               	rlf	___lldiv@divisor+1,f
  2422  02FE  0DF2               	rlf	___lldiv@divisor+2,f
  2423  02FF  0DF3               	rlf	___lldiv@divisor+3,f
  2424  0300  0BF8               	decfsz	??___lldiv,f
  2425  0301  2AFB               	goto	u945
  2426  0302  3001               	movlw	1
  2427  0303  00F8               	movwf	??___lldiv
  2428  0304  0878               	movf	??___lldiv,w
  2429  0305  07FD               	addwf	___lldiv@counter,f
  2430  0306  2AF7               	goto	l1613
  2431  0307                     l1615:	
  2432  0307  3001               	movlw	1
  2433  0308  00F8               	movwf	??___lldiv
  2434  0309                     u965:	
  2435  0309  1003               	clrc
  2436  030A  0DF9               	rlf	___lldiv@quotient,f
  2437  030B  0DFA               	rlf	___lldiv@quotient+1,f
  2438  030C  0DFB               	rlf	___lldiv@quotient+2,f
  2439  030D  0DFC               	rlf	___lldiv@quotient+3,f
  2440  030E  0BF8               	decfsz	??___lldiv,f
  2441  030F  2B09               	goto	u965
  2442  0310  0873               	movf	___lldiv@divisor+3,w
  2443  0311  0277               	subwf	___lldiv@dividend+3,w
  2444  0312  1D03               	skipz
  2445  0313  2B1E               	goto	u975
  2446  0314  0872               	movf	___lldiv@divisor+2,w
  2447  0315  0276               	subwf	___lldiv@dividend+2,w
  2448  0316  1D03               	skipz
  2449  0317  2B1E               	goto	u975
  2450  0318  0871               	movf	___lldiv@divisor+1,w
  2451  0319  0275               	subwf	___lldiv@dividend+1,w
  2452  031A  1D03               	skipz
  2453  031B  2B1E               	goto	u975
  2454  031C  0870               	movf	___lldiv@divisor,w
  2455  031D  0274               	subwf	___lldiv@dividend,w
  2456  031E                     u975:	
  2457  031E  1C03               	skipc
  2458  031F  2B2F               	goto	l1623
  2459  0320  0870               	movf	___lldiv@divisor,w
  2460  0321  02F4               	subwf	___lldiv@dividend,f
  2461  0322  0871               	movf	___lldiv@divisor+1,w
  2462  0323  1C03               	skipc
  2463  0324  0F71               	incfsz	___lldiv@divisor+1,w
  2464  0325  02F5               	subwf	___lldiv@dividend+1,f
  2465  0326  0872               	movf	___lldiv@divisor+2,w
  2466  0327  1C03               	skipc
  2467  0328  0F72               	incfsz	___lldiv@divisor+2,w
  2468  0329  02F6               	subwf	___lldiv@dividend+2,f
  2469  032A  0873               	movf	___lldiv@divisor+3,w
  2470  032B  1C03               	skipc
  2471  032C  0F73               	incfsz	___lldiv@divisor+3,w
  2472  032D  02F7               	subwf	___lldiv@dividend+3,f
  2473  032E  1479               	bsf	___lldiv@quotient,0
  2474  032F                     l1623:	
  2475  032F  3001               	movlw	1
  2476  0330                     u985:	
  2477  0330  1003               	clrc
  2478  0331  0CF3               	rrf	___lldiv@divisor+3,f
  2479  0332  0CF2               	rrf	___lldiv@divisor+2,f
  2480  0333  0CF1               	rrf	___lldiv@divisor+1,f
  2481  0334  0CF0               	rrf	___lldiv@divisor,f
  2482  0335  3EFF               	addlw	-1
  2483  0336  1D03               	skipz
  2484  0337  2B30               	goto	u985
  2485  0338  3001               	movlw	1
  2486  0339  02FD               	subwf	___lldiv@counter,f
  2487  033A  1D03               	btfss	3,2
  2488  033B  2B07               	goto	l1615
  2489  033C                     l1627:	
  2490  033C  087C               	movf	___lldiv@quotient+3,w
  2491  033D  00F3               	movwf	?___lldiv+3
  2492  033E  087B               	movf	___lldiv@quotient+2,w
  2493  033F  00F2               	movwf	?___lldiv+2
  2494  0340  087A               	movf	___lldiv@quotient+1,w
  2495  0341  00F1               	movwf	?___lldiv+1
  2496  0342  0879               	movf	___lldiv@quotient,w
  2497  0343  00F0               	movwf	?___lldiv
  2498  0344  0008               	return
  2499  0345                     __end_of___lldiv:	
  2500                           
  2501                           	psect	text9
  2502  0F93                     __ptext9:	
  2503 ;; *************** function _get_tripwire *****************
  2504 ;; Defined at:
  2505 ;;		line 241 in file "mainMaster.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;		None
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;  trip            1    7[COMMON] unsigned char 
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  1    wreg      unsigned char 
  2512 ;; Registers used:
  2513 ;;		wreg, status,2, status,0, pclath, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2519 ;;      Params:         0       0       0       0       0
  2520 ;;      Locals:         1       0       0       0       0
  2521 ;;      Temps:          1       0       0       0       0
  2522 ;;      Totals:         2       0       0       0       0
  2523 ;;Total ram usage:        2 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    2
  2526 ;; This function calls:
  2527 ;;		_I2C_Master_Read
  2528 ;;		_I2C_Master_Start
  2529 ;;		_I2C_Master_Stop
  2530 ;;		_I2C_Master_Write
  2531 ;; This function is called by:
  2532 ;;		_main
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           
  2537                           ;psect for function _get_tripwire
  2538  0F93                     _get_tripwire:	
  2539                           
  2540                           ;mainMaster.c: 243:     char trip;;mainMaster.c: 245:     I2C_Master_Start();
  2541                           
  2542                           ;incstack = 0
  2543                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  2544  0F93  120A  158A  2690  120A  158A  	fcall	_I2C_Master_Start
  2545                           
  2546                           ;mainMaster.c: 246:     I2C_Master_Write(0x21);
  2547  0F98  3021               	movlw	33
  2548  0F99  00F0               	movwf	I2C_Master_Write@d
  2549  0F9A  3000               	movlw	0
  2550  0F9B  00F1               	movwf	I2C_Master_Write@d+1
  2551  0F9C  120A  158A  26A5  120A  158A  	fcall	_I2C_Master_Write
  2552                           
  2553                           ;mainMaster.c: 247:     trip = I2C_Master_Read(0);
  2554  0FA1  3000               	movlw	0
  2555  0FA2  00F0               	movwf	I2C_Master_Read@a
  2556  0FA3  00F1               	movwf	I2C_Master_Read@a+1
  2557  0FA4  120A  118A  206C  120A  158A  	fcall	_I2C_Master_Read
  2558  0FA9  0870               	movf	?_I2C_Master_Read,w
  2559  0FAA  00F6               	movwf	??_get_tripwire
  2560  0FAB  0876               	movf	??_get_tripwire,w
  2561  0FAC  00F7               	movwf	get_tripwire@trip
  2562                           
  2563                           ;mainMaster.c: 248:     I2C_Master_Stop();
  2564  0FAD  120A  158A  2697   	fcall	_I2C_Master_Stop
  2565                           
  2566                           ;mainMaster.c: 250:     return (trip);
  2567  0FB0  0877               	movf	get_tripwire@trip,w
  2568  0FB1  0008               	return
  2569  0FB2                     __end_of_get_tripwire:	
  2570                           
  2571                           	psect	text10
  2572  0345                     __ptext10:	
  2573 ;; *************** function _get_time *****************
  2574 ;; Defined at:
  2575 ;;		line 166 in file "mainMaster.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;  time_string     1    wreg     PTR unsigned char 
  2578 ;;		 -> time(6), 
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;  time_string     1   10[COMMON] PTR unsigned char 
  2581 ;;		 -> time(6), 
  2582 ;;  min             1    9[COMMON] unsigned char 
  2583 ;;  hour            1    8[COMMON] unsigned char 
  2584 ;; Return value:  Size  Location     Type
  2585 ;;                  1    wreg      void 
  2586 ;; Registers used:
  2587 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2588 ;; Tracked objects:
  2589 ;;		On entry : 0/0
  2590 ;;		On exit  : 0/0
  2591 ;;		Unchanged: 0/0
  2592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2593 ;;      Params:         0       0       0       0       0
  2594 ;;      Locals:         3       0       0       0       0
  2595 ;;      Temps:          2       0       0       0       0
  2596 ;;      Totals:         5       0       0       0       0
  2597 ;;Total ram usage:        5 bytes
  2598 ;; Hardware stack levels used:    1
  2599 ;; Hardware stack levels required when called:    2
  2600 ;; This function calls:
  2601 ;;		_I2C_Master_Read
  2602 ;;		_I2C_Master_RepeatedStart
  2603 ;;		_I2C_Master_Start
  2604 ;;		_I2C_Master_Stop
  2605 ;;		_I2C_Master_Write
  2606 ;; This function is called by:
  2607 ;;		_main
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           
  2612                           ;psect for function _get_time
  2613  0345                     _get_time:	
  2614                           
  2615                           ;incstack = 0
  2616                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2617                           ;get_time@time_string stored from wreg
  2618  0345  00FA               	movwf	get_time@time_string
  2619                           
  2620                           ;mainMaster.c: 168:     char hour, min;;mainMaster.c: 170:     I2C_Master_Start();
  2621  0346  120A  158A  2690  120A  118A  	fcall	_I2C_Master_Start
  2622                           
  2623                           ;mainMaster.c: 171:     I2C_Master_Write(0xD0);
  2624  034B  30D0               	movlw	208
  2625  034C  00F0               	movwf	I2C_Master_Write@d
  2626  034D  3000               	movlw	0
  2627  034E  00F1               	movwf	I2C_Master_Write@d+1
  2628  034F  120A  158A  26A5  120A  118A  	fcall	_I2C_Master_Write
  2629                           
  2630                           ;mainMaster.c: 172:     I2C_Master_Write(0x01);
  2631  0354  3001               	movlw	1
  2632  0355  00F0               	movwf	I2C_Master_Write@d
  2633  0356  3000               	movlw	0
  2634  0357  00F1               	movwf	I2C_Master_Write@d+1
  2635  0358  120A  158A  26A5  120A  118A  	fcall	_I2C_Master_Write
  2636                           
  2637                           ;mainMaster.c: 173:     I2C_Master_RepeatedStart();
  2638  035D  120A  158A  269E  120A  118A  	fcall	_I2C_Master_RepeatedStart
  2639                           
  2640                           ;mainMaster.c: 174:     I2C_Master_Write(0xD1);
  2641  0362  30D1               	movlw	209
  2642  0363  00F0               	movwf	I2C_Master_Write@d
  2643  0364  3000               	movlw	0
  2644  0365  00F1               	movwf	I2C_Master_Write@d+1
  2645  0366  120A  158A  26A5  120A  118A  	fcall	_I2C_Master_Write
  2646                           
  2647                           ;mainMaster.c: 175:     min = I2C_Master_Read(1);
  2648  036B  3001               	movlw	1
  2649  036C  00F0               	movwf	I2C_Master_Read@a
  2650  036D  3000               	movlw	0
  2651  036E  00F1               	movwf	I2C_Master_Read@a+1
  2652  036F  120A  118A  206C  120A  118A  	fcall	_I2C_Master_Read
  2653  0374  0870               	movf	?_I2C_Master_Read,w
  2654  0375  00F6               	movwf	??_get_time
  2655  0376  0876               	movf	??_get_time,w
  2656  0377  00F9               	movwf	get_time@min
  2657                           
  2658                           ;mainMaster.c: 176:     hour = I2C_Master_Read(0);
  2659  0378  3000               	movlw	0
  2660  0379  00F0               	movwf	I2C_Master_Read@a
  2661  037A  00F1               	movwf	I2C_Master_Read@a+1
  2662  037B  120A  118A  206C  120A  118A  	fcall	_I2C_Master_Read
  2663  0380  0870               	movf	?_I2C_Master_Read,w
  2664  0381  00F6               	movwf	??_get_time
  2665  0382  0876               	movf	??_get_time,w
  2666  0383  00F8               	movwf	get_time@hour
  2667                           
  2668                           ;mainMaster.c: 177:     I2C_Master_Stop();
  2669  0384  120A  158A  2697  120A  118A  	fcall	_I2C_Master_Stop
  2670                           
  2671                           ;mainMaster.c: 179:     time_string[0] = (hour >> 4) + '0';
  2672  0389  0878               	movf	get_time@hour,w
  2673  038A  00F6               	movwf	??_get_time
  2674  038B  3004               	movlw	4
  2675  038C                     u1565:	
  2676  038C  1003               	clrc
  2677  038D  0CF6               	rrf	??_get_time,f
  2678  038E  3EFF               	addlw	-1
  2679  038F  1D03               	skipz
  2680  0390  2B8C               	goto	u1565
  2681  0391  0876               	movf	??_get_time,w
  2682  0392  3E30               	addlw	48
  2683  0393  00F7               	movwf	??_get_time+1
  2684  0394  087A               	movf	get_time@time_string,w
  2685  0395  0084               	movwf	4
  2686  0396  0877               	movf	??_get_time+1,w
  2687  0397  1383               	bcf	3,7	;select IRP bank0
  2688  0398  0080               	movwf	0
  2689                           
  2690                           ;mainMaster.c: 180:     time_string[1] = (hour & 0x0F) + '0';
  2691  0399  0878               	movf	get_time@hour,w
  2692  039A  390F               	andlw	15
  2693  039B  3E30               	addlw	48
  2694  039C  00F6               	movwf	??_get_time
  2695  039D  0A7A               	incf	get_time@time_string,w
  2696  039E  0084               	movwf	4
  2697  039F  0876               	movf	??_get_time,w
  2698  03A0  0080               	movwf	0
  2699                           
  2700                           ;mainMaster.c: 181:     time_string[2] = ':';
  2701  03A1  303A               	movlw	58
  2702  03A2  00F6               	movwf	??_get_time
  2703  03A3  087A               	movf	get_time@time_string,w
  2704  03A4  3E02               	addlw	2
  2705  03A5  0084               	movwf	4
  2706  03A6  0876               	movf	??_get_time,w
  2707  03A7  0080               	movwf	0
  2708                           
  2709                           ;mainMaster.c: 182:     time_string[3] = (min >> 4) + '0';
  2710  03A8  0879               	movf	get_time@min,w
  2711  03A9  00F6               	movwf	??_get_time
  2712  03AA  3004               	movlw	4
  2713  03AB                     u1575:	
  2714  03AB  1003               	clrc
  2715  03AC  0CF6               	rrf	??_get_time,f
  2716  03AD  3EFF               	addlw	-1
  2717  03AE  1D03               	skipz
  2718  03AF  2BAB               	goto	u1575
  2719  03B0  0876               	movf	??_get_time,w
  2720  03B1  3E30               	addlw	48
  2721  03B2  00F7               	movwf	??_get_time+1
  2722  03B3  087A               	movf	get_time@time_string,w
  2723  03B4  3E03               	addlw	3
  2724  03B5  0084               	movwf	4
  2725  03B6  0877               	movf	??_get_time+1,w
  2726  03B7  0080               	movwf	0
  2727                           
  2728                           ;mainMaster.c: 183:     time_string[4] = (min & 0x0F) + '0';
  2729  03B8  0879               	movf	get_time@min,w
  2730  03B9  390F               	andlw	15
  2731  03BA  3E30               	addlw	48
  2732  03BB  00F6               	movwf	??_get_time
  2733  03BC  087A               	movf	get_time@time_string,w
  2734  03BD  3E04               	addlw	4
  2735  03BE  0084               	movwf	4
  2736  03BF  0876               	movf	??_get_time,w
  2737  03C0  0080               	movwf	0
  2738                           
  2739                           ;mainMaster.c: 184:     time_string[5] = '\0';
  2740  03C1  087A               	movf	get_time@time_string,w
  2741  03C2  3E05               	addlw	5
  2742  03C3  0084               	movwf	4
  2743  03C4  0180               	clrf	0
  2744  03C5  0008               	return
  2745  03C6                     __end_of_get_time:	
  2746                           
  2747                           	psect	text11
  2748  0455                     __ptext11:	
  2749 ;; *************** function _get_temp *****************
  2750 ;; Defined at:
  2751 ;;		line 202 in file "mainMaster.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;  temp_string     1    wreg     PTR unsigned char 
  2754 ;;		 -> temp(6), 
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;  temp_string     1   20[BANK0 ] PTR unsigned char 
  2757 ;;		 -> temp(6), 
  2758 ;;  decimal         3   16[BANK0 ] unsigned char [3]
  2759 ;;  tempLSB         1   21[BANK0 ] unsigned char 
  2760 ;;  tempMSB         1   19[BANK0 ] unsigned char 
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  1    wreg      void 
  2763 ;; Registers used:
  2764 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2770 ;;      Params:         0       0       0       0       0
  2771 ;;      Locals:         0       6       0       0       0
  2772 ;;      Temps:          0       3       0       0       0
  2773 ;;      Totals:         0       9       0       0       0
  2774 ;;Total ram usage:        9 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    2
  2777 ;; This function calls:
  2778 ;;		_I2C_Master_Read
  2779 ;;		_I2C_Master_RepeatedStart
  2780 ;;		_I2C_Master_Start
  2781 ;;		_I2C_Master_Stop
  2782 ;;		_I2C_Master_Write
  2783 ;;		___bmul
  2784 ;;		_sprintf
  2785 ;;		_strcat
  2786 ;; This function is called by:
  2787 ;;		_main
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           
  2792                           ;psect for function _get_temp
  2793  0455                     _get_temp:	
  2794                           
  2795                           ;incstack = 0
  2796                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2797                           ;get_temp@temp_string stored from wreg
  2798  0455  1283               	bcf	3,5	;RP0=0, select bank0
  2799  0456  1303               	bcf	3,6	;RP1=0, select bank0
  2800  0457  00B4               	movwf	get_temp@temp_string
  2801                           
  2802                           ;mainMaster.c: 204:     char tempLSB, tempMSB;;mainMaster.c: 205:     char decimal[3];;m
      +                          ainMaster.c: 207:     I2C_Master_Start();
  2803  0458  120A  158A  2690  120A  118A  	fcall	_I2C_Master_Start
  2804                           
  2805                           ;mainMaster.c: 208:     I2C_Master_Write(0xD0);
  2806  045D  30D0               	movlw	208
  2807  045E  00F0               	movwf	I2C_Master_Write@d
  2808  045F  3000               	movlw	0
  2809  0460  00F1               	movwf	I2C_Master_Write@d+1
  2810  0461  120A  158A  26A5  120A  118A  	fcall	_I2C_Master_Write
  2811                           
  2812                           ;mainMaster.c: 209:     I2C_Master_Write(0x11);
  2813  0466  3011               	movlw	17
  2814  0467  00F0               	movwf	I2C_Master_Write@d
  2815  0468  3000               	movlw	0
  2816  0469  00F1               	movwf	I2C_Master_Write@d+1
  2817  046A  120A  158A  26A5  120A  118A  	fcall	_I2C_Master_Write
  2818                           
  2819                           ;mainMaster.c: 210:     I2C_Master_RepeatedStart();
  2820  046F  120A  158A  269E  120A  118A  	fcall	_I2C_Master_RepeatedStart
  2821                           
  2822                           ;mainMaster.c: 211:     I2C_Master_Write(0xD1);
  2823  0474  30D1               	movlw	209
  2824  0475  00F0               	movwf	I2C_Master_Write@d
  2825  0476  3000               	movlw	0
  2826  0477  00F1               	movwf	I2C_Master_Write@d+1
  2827  0478  120A  158A  26A5  120A  118A  	fcall	_I2C_Master_Write
  2828                           
  2829                           ;mainMaster.c: 212:     tempMSB = I2C_Master_Read(1);
  2830  047D  3001               	movlw	1
  2831  047E  00F0               	movwf	I2C_Master_Read@a
  2832  047F  3000               	movlw	0
  2833  0480  00F1               	movwf	I2C_Master_Read@a+1
  2834  0481  120A  118A  206C  120A  118A  	fcall	_I2C_Master_Read
  2835  0486  0870               	movf	?_I2C_Master_Read,w
  2836  0487  1283               	bcf	3,5	;RP0=0, select bank0
  2837  0488  1303               	bcf	3,6	;RP1=0, select bank0
  2838  0489  00AD               	movwf	??_get_temp
  2839  048A  082D               	movf	??_get_temp,w
  2840  048B  00B3               	movwf	get_temp@tempMSB
  2841                           
  2842                           ;mainMaster.c: 213:     tempLSB = I2C_Master_Read(0);
  2843  048C  3000               	movlw	0
  2844  048D  00F0               	movwf	I2C_Master_Read@a
  2845  048E  00F1               	movwf	I2C_Master_Read@a+1
  2846  048F  120A  118A  206C  120A  118A  	fcall	_I2C_Master_Read
  2847  0494  0870               	movf	?_I2C_Master_Read,w
  2848  0495  1283               	bcf	3,5	;RP0=0, select bank0
  2849  0496  1303               	bcf	3,6	;RP1=0, select bank0
  2850  0497  00AD               	movwf	??_get_temp
  2851  0498  082D               	movf	??_get_temp,w
  2852  0499  00B5               	movwf	get_temp@tempLSB
  2853                           
  2854                           ;mainMaster.c: 214:     I2C_Master_Stop();
  2855  049A  120A  158A  2697  120A  118A  	fcall	_I2C_Master_Stop
  2856                           
  2857                           ;mainMaster.c: 216:     tempMSB = tempMSB - 4;
  2858  049F  1283               	bcf	3,5	;RP0=0, select bank0
  2859  04A0  1303               	bcf	3,6	;RP1=0, select bank0
  2860  04A1  0833               	movf	get_temp@tempMSB,w
  2861  04A2  3EFC               	addlw	252
  2862  04A3  00AD               	movwf	??_get_temp
  2863  04A4  082D               	movf	??_get_temp,w
  2864  04A5  00B3               	movwf	get_temp@tempMSB
  2865                           
  2866                           ;mainMaster.c: 217:     tempLSB = (tempLSB >> 6) * 25;
  2867  04A6  3019               	movlw	25
  2868  04A7  00AD               	movwf	??_get_temp
  2869  04A8  082D               	movf	??_get_temp,w
  2870  04A9  00F0               	movwf	___bmul@multiplicand
  2871  04AA  0835               	movf	get_temp@tempLSB,w
  2872  04AB  00AE               	movwf	??_get_temp+1
  2873  04AC  3006               	movlw	6
  2874  04AD                     u1545:	
  2875  04AD  1003               	clrc
  2876  04AE  0CAE               	rrf	??_get_temp+1,f
  2877  04AF  3EFF               	addlw	-1
  2878  04B0  1D03               	skipz
  2879  04B1  2CAD               	goto	u1545
  2880  04B2  082E               	movf	??_get_temp+1,w
  2881  04B3  120A  158A  26D3  120A  118A  	fcall	___bmul
  2882  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  2883  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  2884  04BA  00AF               	movwf	??_get_temp+2
  2885  04BB  082F               	movf	??_get_temp+2,w
  2886  04BC  00B5               	movwf	get_temp@tempLSB
  2887                           
  2888                           ;mainMaster.c: 218:     sprintf(temp_string, "%d", tempMSB);
  2889  04BD  3051               	movlw	(low (((STR_12+1)-__stringbase)| (0+32768)))& (0+255)
  2890  04BE  00AD               	movwf	??_get_temp
  2891  04BF  082D               	movf	??_get_temp,w
  2892  04C0  00A0               	movwf	sprintf@f
  2893  04C1  0833               	movf	get_temp@tempMSB,w
  2894  04C2  00AE               	movwf	??_get_temp+1
  2895  04C3  01AF               	clrf	??_get_temp+2
  2896  04C4  082E               	movf	??_get_temp+1,w
  2897  04C5  00A1               	movwf	?_sprintf+1
  2898  04C6  082F               	movf	??_get_temp+2,w
  2899  04C7  00A2               	movwf	?_sprintf+2
  2900  04C8  0834               	movf	get_temp@temp_string,w
  2901  04C9  120A  118A  25CE  120A  118A  	fcall	_sprintf
  2902                           
  2903                           ;mainMaster.c: 219:     if (tempLSB == 0){
  2904  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  2905  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  2906  04D0  0835               	movf	get_temp@tempLSB,w
  2907  04D1  1D03               	btfss	3,2
  2908  04D2  2CD5               	goto	l2011
  2909                           
  2910                           ;mainMaster.c: 220:         sprintf(decimal, ".%d0", tempLSB);
  2911  04D3  304B               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2912  04D4  2CD6               	goto	L8
  2913  04D5                     l2011:	
  2914                           ;mainMaster.c: 221:     } else {
  2915                           
  2916                           
  2917                           ;mainMaster.c: 222:         sprintf(decimal, ".%d", tempLSB);
  2918  04D5  3050               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2919  04D6                     L8:	
  2920  04D6  00AD               	movwf	??_get_temp
  2921  04D7  082D               	movf	??_get_temp,w
  2922  04D8  00A0               	movwf	sprintf@f
  2923  04D9  0835               	movf	get_temp@tempLSB,w
  2924  04DA  00AE               	movwf	??_get_temp+1
  2925  04DB  01AF               	clrf	??_get_temp+2
  2926  04DC  082E               	movf	??_get_temp+1,w
  2927  04DD  00A1               	movwf	?_sprintf+1
  2928  04DE  082F               	movf	??_get_temp+2,w
  2929  04DF  00A2               	movwf	?_sprintf+2
  2930  04E0  3030               	movlw	(low (get_temp@decimal| 0))& (0+255)
  2931  04E1  120A  118A  25CE  120A  118A  	fcall	_sprintf
  2932                           
  2933                           ;mainMaster.c: 224:     strcat(temp_string, decimal);
  2934  04E6  3030               	movlw	(low (get_temp@decimal| 0))& (0+255)
  2935  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  2936  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  2937  04E9  00AD               	movwf	??_get_temp
  2938  04EA  082D               	movf	??_get_temp,w
  2939  04EB  00F0               	movwf	strcat@from
  2940  04EC  0834               	movf	get_temp@temp_string,w
  2941  04ED  120A  158A  27B2   	fcall	_strcat
  2942                           
  2943                           ;mainMaster.c: 225:     temp_string[5] = '\0';
  2944  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  2945  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  2946  04F2  0834               	movf	get_temp@temp_string,w
  2947  04F3  3E05               	addlw	5
  2948  04F4  0084               	movwf	4
  2949  04F5  1383               	bcf	3,7	;select IRP bank0
  2950  04F6  0180               	clrf	0
  2951  04F7  0008               	return
  2952  04F8                     __end_of_get_temp:	
  2953                           
  2954                           	psect	text12
  2955  0FB2                     __ptext12:	
  2956 ;; *************** function _strcat *****************
  2957 ;; Defined at:
  2958 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;  to              1    wreg     PTR unsigned char 
  2961 ;;		 -> temp(6), 
  2962 ;;  from            1    0[COMMON] PTR const unsigned char 
  2963 ;;		 -> get_temp@decimal(3), 
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;  to              1    2[COMMON] PTR unsigned char 
  2966 ;;		 -> temp(6), 
  2967 ;;  cp              1    3[COMMON] PTR unsigned char 
  2968 ;;		 -> temp(6), 
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  1    wreg      PTR unsigned char 
  2971 ;; Registers used:
  2972 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2978 ;;      Params:         1       0       0       0       0
  2979 ;;      Locals:         2       0       0       0       0
  2980 ;;      Temps:          1       0       0       0       0
  2981 ;;      Totals:         4       0       0       0       0
  2982 ;;Total ram usage:        4 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; This function calls:
  2985 ;;		Nothing
  2986 ;; This function is called by:
  2987 ;;		_get_temp
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           
  2992                           ;psect for function _strcat
  2993  0FB2                     _strcat:	
  2994                           
  2995                           ;incstack = 0
  2996                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  2997                           ;strcat@to stored from wreg
  2998  0FB2  00F2               	movwf	strcat@to
  2999  0FB3  0872               	movf	strcat@to,w
  3000  0FB4  00F1               	movwf	??_strcat
  3001  0FB5  0871               	movf	??_strcat,w
  3002  0FB6  00F3               	movwf	strcat@cp
  3003  0FB7                     l1917:	
  3004  0FB7  0873               	movf	strcat@cp,w
  3005  0FB8  0084               	movwf	4
  3006  0FB9  1383               	bcf	3,7	;select IRP bank0
  3007  0FBA  0800               	movf	0,w
  3008  0FBB  1903               	btfsc	3,2
  3009  0FBC  2FCA               	goto	l1921
  3010  0FBD  3001               	movlw	1
  3011  0FBE  00F1               	movwf	??_strcat
  3012  0FBF  0871               	movf	??_strcat,w
  3013  0FC0  07F3               	addwf	strcat@cp,f
  3014  0FC1  2FB7               	goto	l1917
  3015  0FC2                     l1919:	
  3016  0FC2  3001               	movlw	1
  3017  0FC3  00F1               	movwf	??_strcat
  3018  0FC4  0871               	movf	??_strcat,w
  3019  0FC5  07F3               	addwf	strcat@cp,f
  3020  0FC6  3001               	movlw	1
  3021  0FC7  00F1               	movwf	??_strcat
  3022  0FC8  0871               	movf	??_strcat,w
  3023  0FC9  07F0               	addwf	strcat@from,f
  3024  0FCA                     l1921:	
  3025  0FCA  0870               	movf	strcat@from,w
  3026  0FCB  0084               	movwf	4
  3027  0FCC  0800               	movf	0,w
  3028  0FCD  00F1               	movwf	??_strcat
  3029  0FCE  0873               	movf	strcat@cp,w
  3030  0FCF  0084               	movwf	4
  3031  0FD0  0871               	movf	??_strcat,w
  3032  0FD1  0080               	movwf	0
  3033  0FD2  0800               	movf	0,w
  3034  0FD3  1903               	btfsc	3,2
  3035  0FD4  0008               	return
  3036  0FD5  2FC2               	goto	l1919
  3037  0FD6                     __end_of_strcat:	
  3038                           
  3039                           	psect	text13
  3040  05CE                     __ptext13:	
  3041 ;; *************** function _sprintf *****************
  3042 ;; Defined at:
  3043 ;;		line 500 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;  sp              1    wreg     PTR unsigned char 
  3046 ;;		 -> get_temp@decimal(3), temp(6), 
  3047 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  3048 ;;		 -> STR_12(4), STR_11(5), STR_10(3), 
  3049 ;; Auto vars:     Size  Location     Type
  3050 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  3051 ;;		 -> get_temp@decimal(3), temp(6), 
  3052 ;;  tmpval          4    0        struct .
  3053 ;;  val             2    9[BANK0 ] unsigned int 
  3054 ;;  cp              2    0        PTR const unsigned char 
  3055 ;;  len             2    0        unsigned int 
  3056 ;;  c               1   12[BANK0 ] unsigned char 
  3057 ;;  prec            1    8[BANK0 ] char 
  3058 ;;  flag            1    7[BANK0 ] unsigned char 
  3059 ;;  ap              1    6[BANK0 ] PTR void [1]
  3060 ;;		 -> ?_sprintf(2), 
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  2    0[BANK0 ] int 
  3063 ;; Registers used:
  3064 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3070 ;;      Params:         0       3       0       0       0
  3071 ;;      Locals:         0       7       0       0       0
  3072 ;;      Temps:          0       3       0       0       0
  3073 ;;      Totals:         0      13       0       0       0
  3074 ;;Total ram usage:       13 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    1
  3077 ;; This function calls:
  3078 ;;		___lwdiv
  3079 ;;		___lwmod
  3080 ;; This function is called by:
  3081 ;;		_get_temp
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           
  3086                           ;psect for function _sprintf
  3087  05CE                     _sprintf:	
  3088                           
  3089                           ;incstack = 0
  3090                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3091                           ;sprintf@sp stored from wreg
  3092  05CE  1283               	bcf	3,5	;RP0=0, select bank0
  3093  05CF  1303               	bcf	3,6	;RP1=0, select bank0
  3094  05D0  00AB               	movwf	sprintf@sp
  3095                           
  3096                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;D:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  3097  05D1  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  3098  05D2  00A3               	movwf	??_sprintf
  3099  05D3  0823               	movf	??_sprintf,w
  3100  05D4  00A6               	movwf	sprintf@ap
  3101  05D5                     l1903:	
  3102                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  3103                           
  3104                           
  3105                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  3106  05D5  3001               	movlw	1
  3107  05D6  07A0               	addwf	sprintf@f,f
  3108  05D7  30FF               	movlw	-1
  3109  05D8  0720               	addwf	sprintf@f,w
  3110  05D9  0084               	movwf	4
  3111  05DA  120A  118A  200D  120A  118A  	fcall	stringdir
  3112  05DF  00A3               	movwf	??_sprintf
  3113  05E0  0823               	movf	??_sprintf,w
  3114  05E1  00AC               	movwf	sprintf@c
  3115  05E2  082C               	movf	sprintf@c,w
  3116  05E3  1903               	btfsc	3,2
  3117  05E4  2EA1               	goto	l1905
  3118                           
  3119                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  3120  05E5  3025               	movlw	37
  3121  05E6  062C               	xorwf	sprintf@c,w
  3122  05E7  1903               	btfsc	3,2
  3123  05E8  2DF5               	goto	l1859
  3124                           
  3125                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;D:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  3126  05E9  082C               	movf	sprintf@c,w
  3127  05EA  00A3               	movwf	??_sprintf
  3128  05EB  082B               	movf	sprintf@sp,w
  3129  05EC  0084               	movwf	4
  3130  05ED  0823               	movf	??_sprintf,w
  3131  05EE  1383               	bcf	3,7	;select IRP bank0
  3132  05EF  0080               	movwf	0
  3133  05F0  3001               	movlw	1
  3134  05F1  00A3               	movwf	??_sprintf
  3135  05F2  0823               	movf	??_sprintf,w
  3136  05F3  07AB               	addwf	sprintf@sp,f
  3137                           
  3138                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  3139  05F4  2DD5               	goto	l1903
  3140  05F5                     l1859:	
  3141                           
  3142                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  3143  05F5  01A7               	clrf	sprintf@flag
  3144                           
  3145                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  3146  05F6  3001               	movlw	1
  3147  05F7  07A0               	addwf	sprintf@f,f
  3148  05F8  30FF               	movlw	-1
  3149  05F9  0720               	addwf	sprintf@f,w
  3150  05FA  0084               	movwf	4
  3151  05FB  120A  118A  200D  120A  118A  	fcall	stringdir
  3152  0600  00AC               	movwf	sprintf@c
  3153  0601  00A3               	movwf	??_sprintf
  3154  0602  01A4               	clrf	??_sprintf+1
  3155                           
  3156                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3157                           ; Switch size 1, requested type "simple"
  3158                           ; Number of cases is 1, Range of values is 0 to 0
  3159                           ; switch strategies available:
  3160                           ; Name         Instructions Cycles
  3161                           ; simple_byte            4     3 (average)
  3162                           ; direct_byte           11     8 (fixed)
  3163                           ; jumptable            260     6 (fixed)
  3164                           ;	Chosen strategy is simple_byte
  3165  0603  0824               	movf	??_sprintf+1,w
  3166  0604  3A00               	xorlw	0	; case 0
  3167  0605  1903               	skipnz
  3168  0606  2E08               	goto	l2213
  3169  0607  2DD5               	goto	l1903
  3170  0608                     l2213:	
  3171                           
  3172                           ; Switch size 1, requested type "simple"
  3173                           ; Number of cases is 3, Range of values is 0 to 105
  3174                           ; switch strategies available:
  3175                           ; Name         Instructions Cycles
  3176                           ; simple_byte           10     6 (average)
  3177                           ; jumptable            260     6 (fixed)
  3178                           ;	Chosen strategy is simple_byte
  3179  0608  0823               	movf	??_sprintf,w
  3180  0609  3A00               	xorlw	0	; case 0
  3181  060A  1903               	skipnz
  3182  060B  2EA1               	goto	l1905
  3183  060C  3A64               	xorlw	100	; case 100
  3184  060D  1903               	skipnz
  3185  060E  2E13               	goto	l1865
  3186  060F  3A0D               	xorlw	13	; case 105
  3187  0610  1903               	skipnz
  3188  0611  2E13               	goto	l1865
  3189  0612  2DD5               	goto	l1903
  3190  0613                     l1865:	
  3191                           
  3192                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3193  0613  0826               	movf	sprintf@ap,w
  3194  0614  0084               	movwf	4
  3195  0615  1383               	bcf	3,7	;select IRP bank0
  3196  0616  0800               	movf	0,w
  3197  0617  00A9               	movwf	sprintf@val
  3198  0618  0A84               	incf	4,f
  3199  0619  0800               	movf	0,w
  3200  061A  00AA               	movwf	sprintf@val+1
  3201  061B  3002               	movlw	2
  3202  061C  00A3               	movwf	??_sprintf
  3203  061D  0823               	movf	??_sprintf,w
  3204  061E  07A6               	addwf	sprintf@ap,f
  3205                           
  3206                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  3207  061F  1FAA               	btfss	sprintf@val+1,7
  3208  0620  2E2A               	goto	l1875
  3209                           
  3210                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  3211  0621  3003               	movlw	3
  3212  0622  00A3               	movwf	??_sprintf
  3213  0623  0823               	movf	??_sprintf,w
  3214  0624  04A7               	iorwf	sprintf@flag,f
  3215                           
  3216                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  3217  0625  09A9               	comf	sprintf@val,f
  3218  0626  09AA               	comf	sprintf@val+1,f
  3219  0627  0AA9               	incf	sprintf@val,f
  3220  0628  1903               	skipnz
  3221  0629  0AAA               	incf	sprintf@val+1,f
  3222  062A                     l1875:	
  3223                           
  3224                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3225  062A  01AC               	clrf	sprintf@c
  3226  062B  0AAC               	incf	sprintf@c,f
  3227  062C                     l1881:	
  3228                           
  3229                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  3230  062C  082C               	movf	sprintf@c,w
  3231  062D  00A3               	movwf	??_sprintf
  3232  062E  0723               	addwf	??_sprintf,w
  3233  062F  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3234  0630  0084               	movwf	4
  3235  0631  120A  118A  200D  120A  118A  	fcall	stringdir
  3236  0636  00A4               	movwf	??_sprintf+1
  3237  0637  120A  118A  200D  120A  118A  	fcall	stringdir
  3238  063C  00A5               	movwf	??_sprintf+2
  3239  063D  0825               	movf	??_sprintf+2,w
  3240  063E  022A               	subwf	sprintf@val+1,w
  3241  063F  1D03               	skipz
  3242  0640  2E43               	goto	u1375
  3243  0641  0824               	movf	??_sprintf+1,w
  3244  0642  0229               	subwf	sprintf@val,w
  3245  0643                     u1375:	
  3246  0643  1C03               	btfss	3,0
  3247  0644  2E4D               	goto	l1887
  3248  0645  3001               	movlw	1
  3249  0646  00A3               	movwf	??_sprintf
  3250  0647  0823               	movf	??_sprintf,w
  3251  0648  07AC               	addwf	sprintf@c,f
  3252  0649  3005               	movlw	5
  3253  064A  062C               	xorwf	sprintf@c,w
  3254  064B  1D03               	btfss	3,2
  3255  064C  2E2C               	goto	l1881
  3256  064D                     l1887:	
  3257                           
  3258                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  3259  064D  0827               	movf	sprintf@flag,w
  3260  064E  3903               	andlw	3
  3261  064F  1903               	btfsc	3,2
  3262  0650  2E5C               	goto	l1893
  3263                           
  3264                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  3265  0651  302D               	movlw	45
  3266  0652  00A3               	movwf	??_sprintf
  3267  0653  082B               	movf	sprintf@sp,w
  3268  0654  0084               	movwf	4
  3269  0655  0823               	movf	??_sprintf,w
  3270  0656  1383               	bcf	3,7	;select IRP bank0
  3271  0657  0080               	movwf	0
  3272  0658  3001               	movlw	1
  3273  0659  00A3               	movwf	??_sprintf
  3274  065A  0823               	movf	??_sprintf,w
  3275  065B  07AB               	addwf	sprintf@sp,f
  3276  065C                     l1893:	
  3277                           
  3278                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  3279  065C  082C               	movf	sprintf@c,w
  3280  065D  00A3               	movwf	??_sprintf
  3281  065E  0823               	movf	??_sprintf,w
  3282  065F  00A8               	movwf	sprintf@prec
  3283  0660                     l1901:	
  3284                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  3285                           
  3286                           
  3287                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  3288  0660  30FF               	movlw	255
  3289  0661  00A3               	movwf	??_sprintf
  3290  0662  0823               	movf	??_sprintf,w
  3291  0663  07A8               	addwf	sprintf@prec,f
  3292  0664  0A28               	incf	sprintf@prec,w
  3293  0665  1903               	btfsc	3,2
  3294  0666  2DD5               	goto	l1903
  3295                           
  3296                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  3297  0667  300A               	movlw	10
  3298  0668  00F8               	movwf	___lwmod@divisor
  3299  0669  3000               	movlw	0
  3300  066A  00F9               	movwf	___lwmod@divisor+1
  3301  066B  0828               	movf	sprintf@prec,w
  3302  066C  00A3               	movwf	??_sprintf
  3303  066D  0723               	addwf	??_sprintf,w
  3304  066E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3305  066F  0084               	movwf	4
  3306  0670  120A  118A  200D  120A  118A  	fcall	stringdir
  3307  0675  00F0               	movwf	___lwdiv@divisor
  3308  0676  120A  118A  200D  120A  118A  	fcall	stringdir
  3309  067B  00F1               	movwf	___lwdiv@divisor+1
  3310  067C  082A               	movf	sprintf@val+1,w
  3311  067D  00F3               	movwf	___lwdiv@dividend+1
  3312  067E  0829               	movf	sprintf@val,w
  3313  067F  00F2               	movwf	___lwdiv@dividend
  3314  0680  120A  118A  2174  120A  118A  	fcall	___lwdiv
  3315  0685  0871               	movf	?___lwdiv+1,w
  3316  0686  00FB               	movwf	___lwmod@dividend+1
  3317  0687  0870               	movf	?___lwdiv,w
  3318  0688  00FA               	movwf	___lwmod@dividend
  3319  0689  120A  118A  2098  120A  118A  	fcall	___lwmod
  3320  068E  0878               	movf	?___lwmod,w
  3321  068F  3E30               	addlw	48
  3322  0690  1283               	bcf	3,5	;RP0=0, select bank0
  3323  0691  1303               	bcf	3,6	;RP1=0, select bank0
  3324  0692  00A4               	movwf	??_sprintf+1
  3325  0693  0824               	movf	??_sprintf+1,w
  3326  0694  00AC               	movwf	sprintf@c
  3327                           
  3328                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  3329  0695  082C               	movf	sprintf@c,w
  3330  0696  00A3               	movwf	??_sprintf
  3331  0697  082B               	movf	sprintf@sp,w
  3332  0698  0084               	movwf	4
  3333  0699  0823               	movf	??_sprintf,w
  3334  069A  1383               	bcf	3,7	;select IRP bank0
  3335  069B  0080               	movwf	0
  3336  069C  3001               	movlw	1
  3337  069D  00A3               	movwf	??_sprintf
  3338  069E  0823               	movf	??_sprintf,w
  3339  069F  07AB               	addwf	sprintf@sp,f
  3340  06A0  2E60               	goto	l1901
  3341  06A1                     l1905:	
  3342                           
  3343                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  3344  06A1  082B               	movf	sprintf@sp,w
  3345  06A2  0084               	movwf	4
  3346  06A3  1383               	bcf	3,7	;select IRP bank0
  3347  06A4  0180               	clrf	0
  3348  06A5  0008               	return
  3349  06A6                     __end_of_sprintf:	
  3350                           
  3351                           	psect	text14
  3352  0098                     __ptext14:	
  3353 ;; *************** function ___lwmod *****************
  3354 ;; Defined at:
  3355 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;  divisor         2    8[COMMON] unsigned int 
  3358 ;;  dividend        2   10[COMMON] unsigned int 
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;  counter         1   13[COMMON] unsigned char 
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  2    8[COMMON] unsigned int 
  3363 ;; Registers used:
  3364 ;;		wreg, status,2, status,0
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3370 ;;      Params:         4       0       0       0       0
  3371 ;;      Locals:         1       0       0       0       0
  3372 ;;      Temps:          1       0       0       0       0
  3373 ;;      Totals:         6       0       0       0       0
  3374 ;;Total ram usage:        6 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; This function calls:
  3377 ;;		Nothing
  3378 ;; This function is called by:
  3379 ;;		_sprintf
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           
  3384                           ;psect for function ___lwmod
  3385  0098                     ___lwmod:	
  3386                           
  3387                           ;incstack = 0
  3388                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3389  0098  0878               	movf	___lwmod@divisor,w
  3390  0099  0479               	iorwf	___lwmod@divisor+1,w
  3391  009A  1903               	btfsc	3,2
  3392  009B  28C5               	goto	l1715
  3393  009C  01FD               	clrf	___lwmod@counter
  3394  009D  0AFD               	incf	___lwmod@counter,f
  3395  009E                     l1705:	
  3396  009E  1BF9               	btfsc	___lwmod@divisor+1,7
  3397  009F  28AC               	goto	l1707
  3398  00A0  3001               	movlw	1
  3399  00A1                     u1185:	
  3400  00A1  1003               	clrc
  3401  00A2  0DF8               	rlf	___lwmod@divisor,f
  3402  00A3  0DF9               	rlf	___lwmod@divisor+1,f
  3403  00A4  3EFF               	addlw	-1
  3404  00A5  1D03               	skipz
  3405  00A6  28A1               	goto	u1185
  3406  00A7  3001               	movlw	1
  3407  00A8  00FC               	movwf	??___lwmod
  3408  00A9  087C               	movf	??___lwmod,w
  3409  00AA  07FD               	addwf	___lwmod@counter,f
  3410  00AB  289E               	goto	l1705
  3411  00AC                     l1707:	
  3412  00AC  0879               	movf	___lwmod@divisor+1,w
  3413  00AD  027B               	subwf	___lwmod@dividend+1,w
  3414  00AE  1D03               	skipz
  3415  00AF  28B2               	goto	u1205
  3416  00B0  0878               	movf	___lwmod@divisor,w
  3417  00B1  027A               	subwf	___lwmod@dividend,w
  3418  00B2                     u1205:	
  3419  00B2  1C03               	skipc
  3420  00B3  28BA               	goto	l1711
  3421  00B4  0878               	movf	___lwmod@divisor,w
  3422  00B5  02FA               	subwf	___lwmod@dividend,f
  3423  00B6  0879               	movf	___lwmod@divisor+1,w
  3424  00B7  1C03               	skipc
  3425  00B8  03FB               	decf	___lwmod@dividend+1,f
  3426  00B9  02FB               	subwf	___lwmod@dividend+1,f
  3427  00BA                     l1711:	
  3428  00BA  3001               	movlw	1
  3429  00BB                     u1215:	
  3430  00BB  1003               	clrc
  3431  00BC  0CF9               	rrf	___lwmod@divisor+1,f
  3432  00BD  0CF8               	rrf	___lwmod@divisor,f
  3433  00BE  3EFF               	addlw	-1
  3434  00BF  1D03               	skipz
  3435  00C0  28BB               	goto	u1215
  3436  00C1  3001               	movlw	1
  3437  00C2  02FD               	subwf	___lwmod@counter,f
  3438  00C3  1D03               	btfss	3,2
  3439  00C4  28AC               	goto	l1707
  3440  00C5                     l1715:	
  3441  00C5  087B               	movf	___lwmod@dividend+1,w
  3442  00C6  00F9               	movwf	?___lwmod+1
  3443  00C7  087A               	movf	___lwmod@dividend,w
  3444  00C8  00F8               	movwf	?___lwmod
  3445  00C9  0008               	return
  3446  00CA                     __end_of___lwmod:	
  3447                           
  3448                           	psect	text15
  3449  0174                     __ptext15:	
  3450 ;; *************** function ___lwdiv *****************
  3451 ;; Defined at:
  3452 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;  divisor         2    0[COMMON] unsigned int 
  3455 ;;  dividend        2    2[COMMON] unsigned int 
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;  quotient        2    5[COMMON] unsigned int 
  3458 ;;  counter         1    7[COMMON] unsigned char 
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  2    0[COMMON] unsigned int 
  3461 ;; Registers used:
  3462 ;;		wreg, status,2, status,0
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3468 ;;      Params:         4       0       0       0       0
  3469 ;;      Locals:         3       0       0       0       0
  3470 ;;      Temps:          1       0       0       0       0
  3471 ;;      Totals:         8       0       0       0       0
  3472 ;;Total ram usage:        8 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; This function calls:
  3475 ;;		Nothing
  3476 ;; This function is called by:
  3477 ;;		_sprintf
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           
  3482                           ;psect for function ___lwdiv
  3483  0174                     ___lwdiv:	
  3484                           
  3485                           ;incstack = 0
  3486                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3487  0174  01F5               	clrf	___lwdiv@quotient
  3488  0175  01F6               	clrf	___lwdiv@quotient+1
  3489  0176  0870               	movf	___lwdiv@divisor,w
  3490  0177  0471               	iorwf	___lwdiv@divisor+1,w
  3491  0178  1903               	btfsc	3,2
  3492  0179  29AB               	goto	l1693
  3493  017A  01F7               	clrf	___lwdiv@counter
  3494  017B  0AF7               	incf	___lwdiv@counter,f
  3495  017C                     l1681:	
  3496  017C  1BF1               	btfsc	___lwdiv@divisor+1,7
  3497  017D  298A               	goto	l1683
  3498  017E  3001               	movlw	1
  3499  017F                     u1115:	
  3500  017F  1003               	clrc
  3501  0180  0DF0               	rlf	___lwdiv@divisor,f
  3502  0181  0DF1               	rlf	___lwdiv@divisor+1,f
  3503  0182  3EFF               	addlw	-1
  3504  0183  1D03               	skipz
  3505  0184  297F               	goto	u1115
  3506  0185  3001               	movlw	1
  3507  0186  00F4               	movwf	??___lwdiv
  3508  0187  0874               	movf	??___lwdiv,w
  3509  0188  07F7               	addwf	___lwdiv@counter,f
  3510  0189  297C               	goto	l1681
  3511  018A                     l1683:	
  3512  018A  3001               	movlw	1
  3513  018B                     u1135:	
  3514  018B  1003               	clrc
  3515  018C  0DF5               	rlf	___lwdiv@quotient,f
  3516  018D  0DF6               	rlf	___lwdiv@quotient+1,f
  3517  018E  3EFF               	addlw	-1
  3518  018F  1D03               	skipz
  3519  0190  298B               	goto	u1135
  3520  0191  0871               	movf	___lwdiv@divisor+1,w
  3521  0192  0273               	subwf	___lwdiv@dividend+1,w
  3522  0193  1D03               	skipz
  3523  0194  2997               	goto	u1145
  3524  0195  0870               	movf	___lwdiv@divisor,w
  3525  0196  0272               	subwf	___lwdiv@dividend,w
  3526  0197                     u1145:	
  3527  0197  1C03               	skipc
  3528  0198  29A0               	goto	l1689
  3529  0199  0870               	movf	___lwdiv@divisor,w
  3530  019A  02F2               	subwf	___lwdiv@dividend,f
  3531  019B  0871               	movf	___lwdiv@divisor+1,w
  3532  019C  1C03               	skipc
  3533  019D  03F3               	decf	___lwdiv@dividend+1,f
  3534  019E  02F3               	subwf	___lwdiv@dividend+1,f
  3535  019F  1475               	bsf	___lwdiv@quotient,0
  3536  01A0                     l1689:	
  3537  01A0  3001               	movlw	1
  3538  01A1                     u1155:	
  3539  01A1  1003               	clrc
  3540  01A2  0CF1               	rrf	___lwdiv@divisor+1,f
  3541  01A3  0CF0               	rrf	___lwdiv@divisor,f
  3542  01A4  3EFF               	addlw	-1
  3543  01A5  1D03               	skipz
  3544  01A6  29A1               	goto	u1155
  3545  01A7  3001               	movlw	1
  3546  01A8  02F7               	subwf	___lwdiv@counter,f
  3547  01A9  1D03               	btfss	3,2
  3548  01AA  298A               	goto	l1683
  3549  01AB                     l1693:	
  3550  01AB  0876               	movf	___lwdiv@quotient+1,w
  3551  01AC  00F1               	movwf	?___lwdiv+1
  3552  01AD  0875               	movf	___lwdiv@quotient,w
  3553  01AE  00F0               	movwf	?___lwdiv
  3554  01AF  0008               	return
  3555  01B0                     __end_of___lwdiv:	
  3556                           
  3557                           	psect	text16
  3558  0ED3                     __ptext16:	
  3559 ;; *************** function ___bmul *****************
  3560 ;; Defined at:
  3561 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;  multiplier      1    wreg     unsigned char 
  3564 ;;  multiplicand    1    0[COMMON] unsigned char 
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;  multiplier      1    3[COMMON] unsigned char 
  3567 ;;  product         1    2[COMMON] unsigned char 
  3568 ;; Return value:  Size  Location     Type
  3569 ;;                  1    wreg      unsigned char 
  3570 ;; Registers used:
  3571 ;;		wreg, status,2, status,0
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3577 ;;      Params:         1       0       0       0       0
  3578 ;;      Locals:         2       0       0       0       0
  3579 ;;      Temps:          1       0       0       0       0
  3580 ;;      Totals:         4       0       0       0       0
  3581 ;;Total ram usage:        4 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; This function calls:
  3584 ;;		Nothing
  3585 ;; This function is called by:
  3586 ;;		_get_temp
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           
  3591                           ;psect for function ___bmul
  3592  0ED3                     ___bmul:	
  3593                           
  3594                           ;incstack = 0
  3595                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3596                           ;___bmul@multiplier stored from wreg
  3597  0ED3  00F3               	movwf	___bmul@multiplier
  3598  0ED4  01F2               	clrf	___bmul@product
  3599  0ED5                     l1925:	
  3600  0ED5  1C73               	btfss	___bmul@multiplier,0
  3601  0ED6  2EDB               	goto	l1929
  3602  0ED7  0870               	movf	___bmul@multiplicand,w
  3603  0ED8  00F1               	movwf	??___bmul
  3604  0ED9  0871               	movf	??___bmul,w
  3605  0EDA  07F2               	addwf	___bmul@product,f
  3606  0EDB                     l1929:	
  3607  0EDB  1003               	clrc
  3608  0EDC  0DF0               	rlf	___bmul@multiplicand,f
  3609  0EDD  1003               	clrc
  3610  0EDE  0CF3               	rrf	___bmul@multiplier,f
  3611  0EDF  0873               	movf	___bmul@multiplier,w
  3612  0EE0  1D03               	btfss	3,2
  3613  0EE1  2ED5               	goto	l1925
  3614  0EE2  0872               	movf	___bmul@product,w
  3615  0EE3  0008               	return
  3616  0EE4                     __end_of___bmul:	
  3617                           
  3618                           	psect	text17
  3619  0E9E                     __ptext17:	
  3620 ;; *************** function _I2C_Master_RepeatedStart *****************
  3621 ;; Defined at:
  3622 ;;		line 47 in file "./I2C.h"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;		None
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;		None
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      void 
  3629 ;; Registers used:
  3630 ;;		wreg, status,2, status,0, pclath, cstack
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3636 ;;      Params:         0       0       0       0       0
  3637 ;;      Locals:         0       0       0       0       0
  3638 ;;      Temps:          0       0       0       0       0
  3639 ;;      Totals:         0       0       0       0       0
  3640 ;;Total ram usage:        0 bytes
  3641 ;; Hardware stack levels used:    1
  3642 ;; Hardware stack levels required when called:    1
  3643 ;; This function calls:
  3644 ;;		_I2C_Master_Wait
  3645 ;; This function is called by:
  3646 ;;		_get_time
  3647 ;;		_get_temp
  3648 ;;		_get_day
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           
  3653                           ;psect for function _I2C_Master_RepeatedStart
  3654  0E9E                     _I2C_Master_RepeatedStart:	
  3655                           
  3656                           ;./I2C.h: 49:     I2C_Master_Wait();
  3657                           
  3658                           ;incstack = 0
  3659                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  3660  0E9E  120A  158A  26B5   	fcall	_I2C_Master_Wait
  3661                           
  3662                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  3663  0EA1  1683               	bsf	3,5	;RP0=1, select bank1
  3664  0EA2  1303               	bcf	3,6	;RP1=0, select bank1
  3665  0EA3  1491               	bsf	17,1	;volatile
  3666  0EA4  0008               	return
  3667  0EA5                     __end_of_I2C_Master_RepeatedStart:	
  3668                           
  3669                           	psect	text18
  3670  0F74                     __ptext18:	
  3671 ;; *************** function _get_hall *****************
  3672 ;; Defined at:
  3673 ;;		line 229 in file "mainMaster.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;		None
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;  key             1    7[COMMON] unsigned char 
  3678 ;; Return value:  Size  Location     Type
  3679 ;;                  1    wreg      unsigned char 
  3680 ;; Registers used:
  3681 ;;		wreg, status,2, status,0, pclath, cstack
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3687 ;;      Params:         0       0       0       0       0
  3688 ;;      Locals:         1       0       0       0       0
  3689 ;;      Temps:          1       0       0       0       0
  3690 ;;      Totals:         2       0       0       0       0
  3691 ;;Total ram usage:        2 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:    2
  3694 ;; This function calls:
  3695 ;;		_I2C_Master_Read
  3696 ;;		_I2C_Master_Start
  3697 ;;		_I2C_Master_Stop
  3698 ;;		_I2C_Master_Write
  3699 ;; This function is called by:
  3700 ;;		_main
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           
  3705                           ;psect for function _get_hall
  3706  0F74                     _get_hall:	
  3707                           
  3708                           ;mainMaster.c: 231:     char key;;mainMaster.c: 233:     I2C_Master_Start();
  3709                           
  3710                           ;incstack = 0
  3711                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  3712  0F74  120A  158A  2690  120A  158A  	fcall	_I2C_Master_Start
  3713                           
  3714                           ;mainMaster.c: 234:     I2C_Master_Write(0x11);
  3715  0F79  3011               	movlw	17
  3716  0F7A  00F0               	movwf	I2C_Master_Write@d
  3717  0F7B  3000               	movlw	0
  3718  0F7C  00F1               	movwf	I2C_Master_Write@d+1
  3719  0F7D  120A  158A  26A5  120A  158A  	fcall	_I2C_Master_Write
  3720                           
  3721                           ;mainMaster.c: 235:     key = I2C_Master_Read(0);
  3722  0F82  3000               	movlw	0
  3723  0F83  00F0               	movwf	I2C_Master_Read@a
  3724  0F84  00F1               	movwf	I2C_Master_Read@a+1
  3725  0F85  120A  118A  206C  120A  158A  	fcall	_I2C_Master_Read
  3726  0F8A  0870               	movf	?_I2C_Master_Read,w
  3727  0F8B  00F6               	movwf	??_get_hall
  3728  0F8C  0876               	movf	??_get_hall,w
  3729  0F8D  00F7               	movwf	get_hall@key
  3730                           
  3731                           ;mainMaster.c: 236:     I2C_Master_Stop();
  3732  0F8E  120A  158A  2697   	fcall	_I2C_Master_Stop
  3733                           
  3734                           ;mainMaster.c: 238:     return (key);
  3735  0F91  0877               	movf	get_hall@key,w
  3736  0F92  0008               	return
  3737  0F93                     __end_of_get_hall:	
  3738                           
  3739                           	psect	text19
  3740  0F55                     __ptext19:	
  3741 ;; *************** function _get_PIR *****************
  3742 ;; Defined at:
  3743 ;;		line 253 in file "mainMaster.c"
  3744 ;; Parameters:    Size  Location     Type
  3745 ;;		None
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;  PIR             1    7[COMMON] unsigned char 
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  1    wreg      unsigned char 
  3750 ;; Registers used:
  3751 ;;		wreg, status,2, status,0, pclath, cstack
  3752 ;; Tracked objects:
  3753 ;;		On entry : 0/0
  3754 ;;		On exit  : 0/0
  3755 ;;		Unchanged: 0/0
  3756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3757 ;;      Params:         0       0       0       0       0
  3758 ;;      Locals:         1       0       0       0       0
  3759 ;;      Temps:          1       0       0       0       0
  3760 ;;      Totals:         2       0       0       0       0
  3761 ;;Total ram usage:        2 bytes
  3762 ;; Hardware stack levels used:    1
  3763 ;; Hardware stack levels required when called:    2
  3764 ;; This function calls:
  3765 ;;		_I2C_Master_Read
  3766 ;;		_I2C_Master_Start
  3767 ;;		_I2C_Master_Stop
  3768 ;;		_I2C_Master_Write
  3769 ;; This function is called by:
  3770 ;;		_main
  3771 ;; This function uses a non-reentrant model
  3772 ;;
  3773                           
  3774                           
  3775                           ;psect for function _get_PIR
  3776  0F55                     _get_PIR:	
  3777                           
  3778                           ;mainMaster.c: 255:     char PIR;;mainMaster.c: 257:     I2C_Master_Start();
  3779                           
  3780                           ;incstack = 0
  3781                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  3782  0F55  120A  158A  2690  120A  158A  	fcall	_I2C_Master_Start
  3783                           
  3784                           ;mainMaster.c: 258:     I2C_Master_Write(0x41);
  3785  0F5A  3041               	movlw	65
  3786  0F5B  00F0               	movwf	I2C_Master_Write@d
  3787  0F5C  3000               	movlw	0
  3788  0F5D  00F1               	movwf	I2C_Master_Write@d+1
  3789  0F5E  120A  158A  26A5  120A  158A  	fcall	_I2C_Master_Write
  3790                           
  3791                           ;mainMaster.c: 259:     PIR = I2C_Master_Read(0);
  3792  0F63  3000               	movlw	0
  3793  0F64  00F0               	movwf	I2C_Master_Read@a
  3794  0F65  00F1               	movwf	I2C_Master_Read@a+1
  3795  0F66  120A  118A  206C  120A  158A  	fcall	_I2C_Master_Read
  3796  0F6B  0870               	movf	?_I2C_Master_Read,w
  3797  0F6C  00F6               	movwf	??_get_PIR
  3798  0F6D  0876               	movf	??_get_PIR,w
  3799  0F6E  00F7               	movwf	get_PIR@PIR
  3800                           
  3801                           ;mainMaster.c: 260:     I2C_Master_Stop();
  3802  0F6F  120A  158A  2697   	fcall	_I2C_Master_Stop
  3803                           
  3804                           ;mainMaster.c: 262:     return (PIR);
  3805  0F72  0877               	movf	get_PIR@PIR,w
  3806  0F73  0008               	return
  3807  0F74                     __end_of_get_PIR:	
  3808                           
  3809                           	psect	text20
  3810  0F36                     __ptext20:	
  3811 ;; *************** function _get_IR *****************
  3812 ;; Defined at:
  3813 ;;		line 265 in file "mainMaster.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;		None
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  IR              1    7[COMMON] unsigned char 
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      unsigned char 
  3820 ;; Registers used:
  3821 ;;		wreg, status,2, status,0, pclath, cstack
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3827 ;;      Params:         0       0       0       0       0
  3828 ;;      Locals:         1       0       0       0       0
  3829 ;;      Temps:          1       0       0       0       0
  3830 ;;      Totals:         2       0       0       0       0
  3831 ;;Total ram usage:        2 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    2
  3834 ;; This function calls:
  3835 ;;		_I2C_Master_Read
  3836 ;;		_I2C_Master_Start
  3837 ;;		_I2C_Master_Stop
  3838 ;;		_I2C_Master_Write
  3839 ;; This function is called by:
  3840 ;;		_main
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           
  3845                           ;psect for function _get_IR
  3846  0F36                     _get_IR:	
  3847                           
  3848                           ;mainMaster.c: 267:     char IR;;mainMaster.c: 269:     I2C_Master_Start();
  3849                           
  3850                           ;incstack = 0
  3851                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  3852  0F36  120A  158A  2690  120A  158A  	fcall	_I2C_Master_Start
  3853                           
  3854                           ;mainMaster.c: 270:     I2C_Master_Write(0x31);
  3855  0F3B  3031               	movlw	49
  3856  0F3C  00F0               	movwf	I2C_Master_Write@d
  3857  0F3D  3000               	movlw	0
  3858  0F3E  00F1               	movwf	I2C_Master_Write@d+1
  3859  0F3F  120A  158A  26A5  120A  158A  	fcall	_I2C_Master_Write
  3860                           
  3861                           ;mainMaster.c: 271:     IR = I2C_Master_Read(0);
  3862  0F44  3000               	movlw	0
  3863  0F45  00F0               	movwf	I2C_Master_Read@a
  3864  0F46  00F1               	movwf	I2C_Master_Read@a+1
  3865  0F47  120A  118A  206C  120A  158A  	fcall	_I2C_Master_Read
  3866  0F4C  0870               	movf	?_I2C_Master_Read,w
  3867  0F4D  00F6               	movwf	??_get_IR
  3868  0F4E  0876               	movf	??_get_IR,w
  3869  0F4F  00F7               	movwf	get_IR@IR
  3870                           
  3871                           ;mainMaster.c: 272:     I2C_Master_Stop();
  3872  0F50  120A  158A  2697   	fcall	_I2C_Master_Stop
  3873                           
  3874                           ;mainMaster.c: 274:     return (IR);
  3875  0F53  0877               	movf	get_IR@IR,w
  3876  0F54  0008               	return
  3877  0F55                     __end_of_get_IR:	
  3878                           
  3879                           	psect	text21
  3880  0EA5                     __ptext21:	
  3881 ;; *************** function _I2C_Master_Write *****************
  3882 ;; Defined at:
  3883 ;;		line 65 in file "./I2C.h"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  d               2    0[COMMON] unsigned int 
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;		None
  3888 ;; Return value:  Size  Location     Type
  3889 ;;                  1    wreg      void 
  3890 ;; Registers used:
  3891 ;;		wreg, status,2, status,0, pclath, cstack
  3892 ;; Tracked objects:
  3893 ;;		On entry : 0/0
  3894 ;;		On exit  : 0/0
  3895 ;;		Unchanged: 0/0
  3896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3897 ;;      Params:         2       0       0       0       0
  3898 ;;      Locals:         0       0       0       0       0
  3899 ;;      Temps:          0       0       0       0       0
  3900 ;;      Totals:         2       0       0       0       0
  3901 ;;Total ram usage:        2 bytes
  3902 ;; Hardware stack levels used:    1
  3903 ;; Hardware stack levels required when called:    1
  3904 ;; This function calls:
  3905 ;;		_I2C_Master_Wait
  3906 ;; This function is called by:
  3907 ;;		_get_time
  3908 ;;		_get_temp
  3909 ;;		_get_hall
  3910 ;;		_get_tripwire
  3911 ;;		_get_PIR
  3912 ;;		_get_IR
  3913 ;;		_write_RTC
  3914 ;;		_get_day
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           
  3919                           ;psect for function _I2C_Master_Write
  3920  0EA5                     _I2C_Master_Write:	
  3921                           
  3922                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  3923                           
  3924                           ;incstack = 0
  3925                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  3926  0EA5  120A  158A  26B5   	fcall	_I2C_Master_Wait
  3927                           
  3928                           ;./I2C.h: 68:     SSPBUF = d;
  3929  0EA8  0870               	movf	I2C_Master_Write@d,w
  3930  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
  3931  0EAA  1303               	bcf	3,6	;RP1=0, select bank0
  3932  0EAB  0093               	movwf	19	;volatile
  3933  0EAC  0008               	return
  3934  0EAD                     __end_of_I2C_Master_Write:	
  3935                           
  3936                           	psect	text22
  3937  0E97                     __ptext22:	
  3938 ;; *************** function _I2C_Master_Stop *****************
  3939 ;; Defined at:
  3940 ;;		line 55 in file "./I2C.h"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;		None
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;		None
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      void 
  3947 ;; Registers used:
  3948 ;;		wreg, status,2, status,0, pclath, cstack
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3954 ;;      Params:         0       0       0       0       0
  3955 ;;      Locals:         0       0       0       0       0
  3956 ;;      Temps:          0       0       0       0       0
  3957 ;;      Totals:         0       0       0       0       0
  3958 ;;Total ram usage:        0 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; Hardware stack levels required when called:    1
  3961 ;; This function calls:
  3962 ;;		_I2C_Master_Wait
  3963 ;; This function is called by:
  3964 ;;		_get_time
  3965 ;;		_get_temp
  3966 ;;		_get_hall
  3967 ;;		_get_tripwire
  3968 ;;		_get_PIR
  3969 ;;		_get_IR
  3970 ;;		_write_RTC
  3971 ;;		_get_day
  3972 ;; This function uses a non-reentrant model
  3973 ;;
  3974                           
  3975                           
  3976                           ;psect for function _I2C_Master_Stop
  3977  0E97                     _I2C_Master_Stop:	
  3978                           
  3979                           ;./I2C.h: 57:     I2C_Master_Wait();
  3980                           
  3981                           ;incstack = 0
  3982                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  3983  0E97  120A  158A  26B5   	fcall	_I2C_Master_Wait
  3984                           
  3985                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  3986  0E9A  1683               	bsf	3,5	;RP0=1, select bank1
  3987  0E9B  1303               	bcf	3,6	;RP1=0, select bank1
  3988  0E9C  1511               	bsf	17,2	;volatile
  3989  0E9D  0008               	return
  3990  0E9E                     __end_of_I2C_Master_Stop:	
  3991                           
  3992                           	psect	text23
  3993  0E90                     __ptext23:	
  3994 ;; *************** function _I2C_Master_Start *****************
  3995 ;; Defined at:
  3996 ;;		line 39 in file "./I2C.h"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;		None
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;		None
  4001 ;; Return value:  Size  Location     Type
  4002 ;;                  1    wreg      void 
  4003 ;; Registers used:
  4004 ;;		wreg, status,2, status,0, pclath, cstack
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4010 ;;      Params:         0       0       0       0       0
  4011 ;;      Locals:         0       0       0       0       0
  4012 ;;      Temps:          0       0       0       0       0
  4013 ;;      Totals:         0       0       0       0       0
  4014 ;;Total ram usage:        0 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; Hardware stack levels required when called:    1
  4017 ;; This function calls:
  4018 ;;		_I2C_Master_Wait
  4019 ;; This function is called by:
  4020 ;;		_get_time
  4021 ;;		_get_temp
  4022 ;;		_get_hall
  4023 ;;		_get_tripwire
  4024 ;;		_get_PIR
  4025 ;;		_get_IR
  4026 ;;		_write_RTC
  4027 ;;		_get_day
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           
  4032                           ;psect for function _I2C_Master_Start
  4033  0E90                     _I2C_Master_Start:	
  4034                           
  4035                           ;./I2C.h: 41:     I2C_Master_Wait();
  4036                           
  4037                           ;incstack = 0
  4038                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  4039  0E90  120A  158A  26B5   	fcall	_I2C_Master_Wait
  4040                           
  4041                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  4042  0E93  1683               	bsf	3,5	;RP0=1, select bank1
  4043  0E94  1303               	bcf	3,6	;RP1=0, select bank1
  4044  0E95  1411               	bsf	17,0	;volatile
  4045  0E96  0008               	return
  4046  0E97                     __end_of_I2C_Master_Start:	
  4047                           
  4048                           	psect	text24
  4049  006C                     __ptext24:	
  4050 ;; *************** function _I2C_Master_Read *****************
  4051 ;; Defined at:
  4052 ;;		line 74 in file "./I2C.h"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  a               2    0[COMMON] unsigned short 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  temp            2    4[COMMON] unsigned short 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  2    0[COMMON] unsigned short 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0, pclath, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4066 ;;      Params:         2       0       0       0       0
  4067 ;;      Locals:         2       0       0       0       0
  4068 ;;      Temps:          2       0       0       0       0
  4069 ;;      Totals:         6       0       0       0       0
  4070 ;;Total ram usage:        6 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    1
  4073 ;; This function calls:
  4074 ;;		_I2C_Master_Wait
  4075 ;; This function is called by:
  4076 ;;		_get_time
  4077 ;;		_get_temp
  4078 ;;		_get_hall
  4079 ;;		_get_tripwire
  4080 ;;		_get_PIR
  4081 ;;		_get_IR
  4082 ;;		_get_day
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085                           
  4086                           
  4087                           ;psect for function _I2C_Master_Read
  4088  006C                     _I2C_Master_Read:	
  4089                           
  4090                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  4091                           
  4092                           ;incstack = 0
  4093                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  4094  006C  120A  158A  26B5  120A  118A  	fcall	_I2C_Master_Wait
  4095                           
  4096                           ;./I2C.h: 78:     RCEN = 1;
  4097  0071  1683               	bsf	3,5	;RP0=1, select bank1
  4098  0072  1303               	bcf	3,6	;RP1=0, select bank1
  4099  0073  1591               	bsf	17,3	;volatile
  4100                           
  4101                           ;./I2C.h: 79:     I2C_Master_Wait();
  4102  0074  120A  158A  26B5  120A  118A  	fcall	_I2C_Master_Wait
  4103                           
  4104                           ;./I2C.h: 80:     temp = SSPBUF;
  4105  0079  1283               	bcf	3,5	;RP0=0, select bank0
  4106  007A  1303               	bcf	3,6	;RP1=0, select bank0
  4107  007B  0813               	movf	19,w	;volatile
  4108  007C  00F2               	movwf	??_I2C_Master_Read
  4109  007D  01F3               	clrf	??_I2C_Master_Read+1
  4110  007E  0872               	movf	??_I2C_Master_Read,w
  4111  007F  00F4               	movwf	I2C_Master_Read@temp
  4112  0080  0873               	movf	??_I2C_Master_Read+1,w
  4113  0081  00F5               	movwf	I2C_Master_Read@temp+1
  4114                           
  4115                           ;./I2C.h: 81:     I2C_Master_Wait();
  4116  0082  120A  158A  26B5  120A  118A  	fcall	_I2C_Master_Wait
  4117                           
  4118                           ;./I2C.h: 83:     if(a == 1){
  4119  0087  0370               	decf	I2C_Master_Read@a,w
  4120  0088  0471               	iorwf	I2C_Master_Read@a+1,w
  4121  0089  1D03               	btfss	3,2
  4122  008A  288F               	goto	l120
  4123                           
  4124                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  4125  008B  1683               	bsf	3,5	;RP0=1, select bank1
  4126  008C  1303               	bcf	3,6	;RP1=0, select bank1
  4127  008D  1291               	bcf	17,5	;volatile
  4128                           
  4129                           ;./I2C.h: 85:     }else{
  4130  008E  2892               	goto	l121
  4131  008F                     l120:	
  4132                           
  4133                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  4134  008F  1683               	bsf	3,5	;RP0=1, select bank1
  4135  0090  1303               	bcf	3,6	;RP1=0, select bank1
  4136  0091  1691               	bsf	17,5	;volatile
  4137  0092                     l121:	
  4138                           ;./I2C.h: 87:     }
  4139                           
  4140                           
  4141                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  4142  0092  1611               	bsf	17,4	;volatile
  4143                           
  4144                           ;./I2C.h: 89:     return temp;
  4145  0093  0875               	movf	I2C_Master_Read@temp+1,w
  4146  0094  00F1               	movwf	?_I2C_Master_Read+1
  4147  0095  0874               	movf	I2C_Master_Read@temp,w
  4148  0096  00F0               	movwf	?_I2C_Master_Read
  4149  0097  0008               	return
  4150  0098                     __end_of_I2C_Master_Read:	
  4151                           
  4152                           	psect	text25
  4153  0EB5                     __ptext25:	
  4154 ;; *************** function _I2C_Master_Wait *****************
  4155 ;; Defined at:
  4156 ;;		line 32 in file "./I2C.h"
  4157 ;; Parameters:    Size  Location     Type
  4158 ;;		None
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;		None
  4161 ;; Return value:  Size  Location     Type
  4162 ;;                  1    wreg      void 
  4163 ;; Registers used:
  4164 ;;		wreg, status,2
  4165 ;; Tracked objects:
  4166 ;;		On entry : 0/0
  4167 ;;		On exit  : 0/0
  4168 ;;		Unchanged: 0/0
  4169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4170 ;;      Params:         0       0       0       0       0
  4171 ;;      Locals:         0       0       0       0       0
  4172 ;;      Temps:          0       0       0       0       0
  4173 ;;      Totals:         0       0       0       0       0
  4174 ;;Total ram usage:        0 bytes
  4175 ;; Hardware stack levels used:    1
  4176 ;; This function calls:
  4177 ;;		Nothing
  4178 ;; This function is called by:
  4179 ;;		_I2C_Master_Start
  4180 ;;		_I2C_Master_RepeatedStart
  4181 ;;		_I2C_Master_Stop
  4182 ;;		_I2C_Master_Write
  4183 ;;		_I2C_Master_Read
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           
  4188                           ;psect for function _I2C_Master_Wait
  4189  0EB5                     _I2C_Master_Wait:	
  4190  0EB5                     l102:	
  4191                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  4192                           
  4193                           ;incstack = 0
  4194                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  4195                           
  4196  0EB5  1683               	bsf	3,5	;RP0=1, select bank1
  4197  0EB6  1303               	bcf	3,6	;RP1=0, select bank1
  4198  0EB7  1914               	btfsc	20,2	;volatile
  4199  0EB8  2EB5               	goto	l102
  4200  0EB9  0811               	movf	17,w	;volatile
  4201  0EBA  391F               	andlw	31
  4202  0EBB  1903               	btfsc	3,2
  4203  0EBC  0008               	return
  4204  0EBD  2EB5               	goto	l102
  4205  0EBE                     __end_of_I2C_Master_Wait:	
  4206                           
  4207                           	psect	text26
  4208  0F18                     __ptext26:	
  4209 ;; *************** function _UART_Write_Text *****************
  4210 ;; Defined at:
  4211 ;;		line 60 in file "./UART.h"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  text            1    wreg     PTR unsigned char 
  4214 ;;		 -> time(6), temp(6), 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  text            1    4[COMMON] PTR unsigned char 
  4217 ;;		 -> time(6), temp(6), 
  4218 ;;  i               2    2[COMMON] int 
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  1    wreg      void 
  4221 ;; Registers used:
  4222 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4228 ;;      Params:         0       0       0       0       0
  4229 ;;      Locals:         3       0       0       0       0
  4230 ;;      Temps:          1       0       0       0       0
  4231 ;;      Totals:         4       0       0       0       0
  4232 ;;Total ram usage:        4 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    1
  4235 ;; This function calls:
  4236 ;;		_UART_Write
  4237 ;; This function is called by:
  4238 ;;		_main
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           
  4243                           ;psect for function _UART_Write_Text
  4244  0F18                     _UART_Write_Text:	
  4245                           
  4246                           ;incstack = 0
  4247                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4248                           ;UART_Write_Text@text stored from wreg
  4249  0F18  00F4               	movwf	UART_Write_Text@text
  4250                           
  4251                           ;./UART.h: 60: void UART_Write_Text(char *text);./UART.h: 61: {;./UART.h: 62:   int i;;.
      +                          /UART.h: 63:   for(i=0;text[i]!='\0';i++)
  4252  0F19  01F2               	clrf	UART_Write_Text@i
  4253  0F1A  01F3               	clrf	UART_Write_Text@i+1
  4254  0F1B                     l1973:	
  4255  0F1B  0872               	movf	UART_Write_Text@i,w
  4256  0F1C  0774               	addwf	UART_Write_Text@text,w
  4257  0F1D  00F1               	movwf	??_UART_Write_Text
  4258  0F1E  0871               	movf	??_UART_Write_Text,w
  4259  0F1F  0084               	movwf	4
  4260  0F20  1383               	bcf	3,7	;select IRP bank0
  4261  0F21  0800               	movf	0,w
  4262  0F22  1903               	btfsc	3,2
  4263  0F23  0008               	return
  4264                           
  4265                           ;./UART.h: 64:    UART_Write(text[i]);
  4266  0F24  0872               	movf	UART_Write_Text@i,w
  4267  0F25  0774               	addwf	UART_Write_Text@text,w
  4268  0F26  00F1               	movwf	??_UART_Write_Text
  4269  0F27  0871               	movf	??_UART_Write_Text,w
  4270  0F28  0084               	movwf	4
  4271  0F29  0800               	movf	0,w
  4272  0F2A  120A  158A  26BE  120A  158A  	fcall	_UART_Write
  4273  0F2F  3001               	movlw	1
  4274  0F30  07F2               	addwf	UART_Write_Text@i,f
  4275  0F31  1803               	skipnc
  4276  0F32  0AF3               	incf	UART_Write_Text@i+1,f
  4277  0F33  3000               	movlw	0
  4278  0F34  07F3               	addwf	UART_Write_Text@i+1,f
  4279  0F35  2F1B               	goto	l1973
  4280  0F36                     __end_of_UART_Write_Text:	
  4281                           
  4282                           	psect	text27
  4283  0EBE                     __ptext27:	
  4284 ;; *************** function _UART_Write *****************
  4285 ;; Defined at:
  4286 ;;		line 54 in file "./UART.h"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;  data            1    wreg     unsigned char 
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;  data            1    0[COMMON] unsigned char 
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  1    wreg      void 
  4293 ;; Registers used:
  4294 ;;		wreg
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4300 ;;      Params:         0       0       0       0       0
  4301 ;;      Locals:         1       0       0       0       0
  4302 ;;      Temps:          0       0       0       0       0
  4303 ;;      Totals:         1       0       0       0       0
  4304 ;;Total ram usage:        1 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; This function calls:
  4307 ;;		Nothing
  4308 ;; This function is called by:
  4309 ;;		_UART_Write_Text
  4310 ;;		_main
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           
  4315                           ;psect for function _UART_Write
  4316  0EBE                     _UART_Write:	
  4317                           
  4318                           ;incstack = 0
  4319                           ; Regs used in _UART_Write: [wreg]
  4320                           ;UART_Write@data stored from wreg
  4321  0EBE  00F0               	movwf	UART_Write@data
  4322  0EBF                     l206:	
  4323                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(!TRMT);
  4324                           
  4325  0EBF  1683               	bsf	3,5	;RP0=1, select bank1
  4326  0EC0  1303               	bcf	3,6	;RP1=0, select bank1
  4327  0EC1  1C98               	btfss	24,1	;volatile
  4328  0EC2  2EBF               	goto	l206
  4329                           
  4330                           ;./UART.h: 57:   TXREG = data;
  4331  0EC3  0870               	movf	UART_Write@data,w
  4332  0EC4  1283               	bcf	3,5	;RP0=0, select bank0
  4333  0EC5  1303               	bcf	3,6	;RP1=0, select bank0
  4334  0EC6  0099               	movwf	25	;volatile
  4335  0EC7  0008               	return
  4336  0EC8                     __end_of_UART_Write:	
  4337                           
  4338                           	psect	text28
  4339  01B0                     __ptext28:	
  4340 ;; *************** function _Lcd_Write_String *****************
  4341 ;; Defined at:
  4342 ;;		line 100 in file "./LCD4bits.h"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;  a               2    5[COMMON] PTR unsigned char 
  4345 ;;		 -> STR_9(7), STR_8(7), STR_7(8), STR_6(8), 
  4346 ;;		 -> STR_5(9), STR_4(9), STR_3(12), STR_2(12), 
  4347 ;;		 -> time(6), temp(6), 
  4348 ;; Auto vars:     Size  Location     Type
  4349 ;;  i               2   10[COMMON] int 
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  1    wreg      void 
  4352 ;; Registers used:
  4353 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4359 ;;      Params:         2       0       0       0       0
  4360 ;;      Locals:         2       0       0       0       0
  4361 ;;      Temps:          3       0       0       0       0
  4362 ;;      Totals:         7       0       0       0       0
  4363 ;;Total ram usage:        7 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; Hardware stack levels required when called:    2
  4366 ;; This function calls:
  4367 ;;		_Lcd_Write_Char
  4368 ;; This function is called by:
  4369 ;;		_main
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           
  4374                           ;psect for function _Lcd_Write_String
  4375  01B0                     _Lcd_Write_String:	
  4376                           
  4377                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  4378                           
  4379                           ;incstack = 0
  4380                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4381  01B0  01FA               	clrf	Lcd_Write_String@i
  4382  01B1  01FB               	clrf	Lcd_Write_String@i+1
  4383  01B2                     l1965:	
  4384  01B2  087A               	movf	Lcd_Write_String@i,w
  4385  01B3  0775               	addwf	Lcd_Write_String@a,w
  4386  01B4  00F8               	movwf	??_Lcd_Write_String+1
  4387  01B5  0876               	movf	Lcd_Write_String@a+1,w
  4388  01B6  00F7               	movwf	??_Lcd_Write_String
  4389  01B7  1803               	skipnc
  4390  01B8  0AF7               	incf	??_Lcd_Write_String,f
  4391  01B9  1BFA               	btfsc	Lcd_Write_String@i,7
  4392  01BA  03F7               	decf	??_Lcd_Write_String,f
  4393  01BB  0877               	movf	??_Lcd_Write_String,w
  4394  01BC  00F9               	movwf	??_Lcd_Write_String+2
  4395  01BD  0879               	movf	??_Lcd_Write_String+2,w
  4396  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  4397  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  4398  01C0  00FF               	movwf	127
  4399  01C1  0878               	movf	??_Lcd_Write_String+1,w
  4400  01C2  0084               	movwf	4
  4401  01C3  120A  118A  2003  120A  118A  	fcall	stringtab
  4402  01C8  3A00               	xorlw	0
  4403  01C9  1903               	btfsc	3,2
  4404  01CA  0008               	return
  4405                           
  4406                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  4407  01CB  087A               	movf	Lcd_Write_String@i,w
  4408  01CC  0775               	addwf	Lcd_Write_String@a,w
  4409  01CD  00F8               	movwf	??_Lcd_Write_String+1
  4410  01CE  0876               	movf	Lcd_Write_String@a+1,w
  4411  01CF  00F7               	movwf	??_Lcd_Write_String
  4412  01D0  1803               	skipnc
  4413  01D1  0AF7               	incf	??_Lcd_Write_String,f
  4414  01D2  1BFA               	btfsc	Lcd_Write_String@i,7
  4415  01D3  03F7               	decf	??_Lcd_Write_String,f
  4416  01D4  0877               	movf	??_Lcd_Write_String,w
  4417  01D5  00F9               	movwf	??_Lcd_Write_String+2
  4418  01D6  0879               	movf	??_Lcd_Write_String+2,w
  4419  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  4420  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  4421  01D9  00FF               	movwf	127
  4422  01DA  0878               	movf	??_Lcd_Write_String+1,w
  4423  01DB  0084               	movwf	4
  4424  01DC  120A  118A  2003  120A  118A  	fcall	stringtab
  4425  01E1  120A  118A  2100  120A  118A  	fcall	_Lcd_Write_Char
  4426  01E6  3001               	movlw	1
  4427  01E7  07FA               	addwf	Lcd_Write_String@i,f
  4428  01E8  1803               	skipnc
  4429  01E9  0AFB               	incf	Lcd_Write_String@i+1,f
  4430  01EA  3000               	movlw	0
  4431  01EB  07FB               	addwf	Lcd_Write_String@i+1,f
  4432  01EC  29B2               	goto	l1965
  4433  01ED                     __end_of_Lcd_Write_String:	
  4434                           
  4435                           	psect	text29
  4436  0100                     __ptext29:	
  4437 ;; *************** function _Lcd_Write_Char *****************
  4438 ;; Defined at:
  4439 ;;		line 84 in file "./LCD4bits.h"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  a               1    wreg     unsigned char 
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;  a               1    4[COMMON] unsigned char 
  4444 ;;  y               1    3[COMMON] unsigned char 
  4445 ;;  temp            1    2[COMMON] unsigned char 
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  1    wreg      void 
  4448 ;; Registers used:
  4449 ;;		wreg, status,2, status,0, pclath, cstack
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4455 ;;      Params:         0       0       0       0       0
  4456 ;;      Locals:         3       0       0       0       0
  4457 ;;      Temps:          1       0       0       0       0
  4458 ;;      Totals:         4       0       0       0       0
  4459 ;;Total ram usage:        4 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    1
  4462 ;; This function calls:
  4463 ;;		_Lcd_Port
  4464 ;; This function is called by:
  4465 ;;		_Lcd_Write_String
  4466 ;;		_main
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470                           
  4471                           ;psect for function _Lcd_Write_Char
  4472  0100                     _Lcd_Write_Char:	
  4473                           
  4474                           ;incstack = 0
  4475                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  4476                           ;Lcd_Write_Char@a stored from wreg
  4477  0100  00F4               	movwf	Lcd_Write_Char@a
  4478                           
  4479                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  4480  0101  0874               	movf	Lcd_Write_Char@a,w
  4481  0102  390F               	andlw	15
  4482  0103  00F1               	movwf	??_Lcd_Write_Char
  4483  0104  0871               	movf	??_Lcd_Write_Char,w
  4484  0105  00F2               	movwf	Lcd_Write_Char@temp
  4485                           
  4486                           ;./LCD4bits.h: 88:    y = a&0xF0;
  4487  0106  0874               	movf	Lcd_Write_Char@a,w
  4488  0107  39F0               	andlw	240
  4489  0108  00F1               	movwf	??_Lcd_Write_Char
  4490  0109  0871               	movf	??_Lcd_Write_Char,w
  4491  010A  00F3               	movwf	Lcd_Write_Char@y
  4492                           
  4493                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  4494  010B  1283               	bcf	3,5	;RP0=0, select bank0
  4495  010C  1303               	bcf	3,6	;RP1=0, select bank0
  4496  010D  1606               	bsf	6,4	;volatile
  4497                           
  4498                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  4499  010E  0873               	movf	Lcd_Write_Char@y,w
  4500  010F  00F1               	movwf	??_Lcd_Write_Char
  4501  0110  3004               	movlw	4
  4502  0111                     u1255:	
  4503  0111  1003               	clrc
  4504  0112  0CF1               	rrf	??_Lcd_Write_Char,f
  4505  0113  3EFF               	addlw	-1
  4506  0114  1D03               	skipz
  4507  0115  2911               	goto	u1255
  4508  0116  0871               	movf	??_Lcd_Write_Char,w
  4509  0117  120A  158A  26E4  120A  118A  	fcall	_Lcd_Port
  4510                           
  4511                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  4512  011C  1283               	bcf	3,5	;RP0=0, select bank0
  4513  011D  1303               	bcf	3,6	;RP1=0, select bank0
  4514  011E  1686               	bsf	6,5	;volatile
  4515                           
  4516                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  4517  011F  301A               	movlw	26
  4518  0120  00F1               	movwf	??_Lcd_Write_Char
  4519  0121                     u1747:	
  4520  0121  0BF1               	decfsz	??_Lcd_Write_Char,f
  4521  0122  2921               	goto	u1747
  4522  0123  0000               	nop
  4523                           
  4524                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  4525  0124  1283               	bcf	3,5	;RP0=0, select bank0
  4526  0125  1303               	bcf	3,6	;RP1=0, select bank0
  4527  0126  1286               	bcf	6,5	;volatile
  4528                           
  4529                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  4530  0127  0872               	movf	Lcd_Write_Char@temp,w
  4531  0128  120A  158A  26E4  120A  118A  	fcall	_Lcd_Port
  4532                           
  4533                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  4534  012D  1283               	bcf	3,5	;RP0=0, select bank0
  4535  012E  1303               	bcf	3,6	;RP1=0, select bank0
  4536  012F  1686               	bsf	6,5	;volatile
  4537                           
  4538                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  4539  0130  301A               	movlw	26
  4540  0131  00F1               	movwf	??_Lcd_Write_Char
  4541  0132                     u1757:	
  4542  0132  0BF1               	decfsz	??_Lcd_Write_Char,f
  4543  0133  2932               	goto	u1757
  4544  0134  0000               	nop
  4545                           
  4546                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  4547  0135  1283               	bcf	3,5	;RP0=0, select bank0
  4548  0136  1303               	bcf	3,6	;RP1=0, select bank0
  4549  0137  1286               	bcf	6,5	;volatile
  4550  0138  0008               	return
  4551  0139                     __end_of_Lcd_Write_Char:	
  4552                           
  4553                           	psect	text30
  4554  01ED                     __ptext30:	
  4555 ;; *************** function _Lcd_Set_Cursor *****************
  4556 ;; Defined at:
  4557 ;;		line 44 in file "./LCD4bits.h"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;  a               1    wreg     unsigned char 
  4560 ;;  b               1    4[COMMON] unsigned char 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  a               1    7[COMMON] unsigned char 
  4563 ;;  temp            1   10[COMMON] unsigned char 
  4564 ;;  y               1    9[COMMON] unsigned char 
  4565 ;;  z               1    8[COMMON] unsigned char 
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  1    wreg      void 
  4568 ;; Registers used:
  4569 ;;		wreg, status,2, status,0, pclath, cstack
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4575 ;;      Params:         1       0       0       0       0
  4576 ;;      Locals:         4       0       0       0       0
  4577 ;;      Temps:          2       0       0       0       0
  4578 ;;      Totals:         7       0       0       0       0
  4579 ;;Total ram usage:        7 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    2
  4582 ;; This function calls:
  4583 ;;		_Lcd_Cmd
  4584 ;; This function is called by:
  4585 ;;		_main
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589                           
  4590                           ;psect for function _Lcd_Set_Cursor
  4591  01ED                     _Lcd_Set_Cursor:	
  4592                           
  4593                           ;incstack = 0
  4594                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  4595                           ;Lcd_Set_Cursor@a stored from wreg
  4596  01ED  00F7               	movwf	Lcd_Set_Cursor@a
  4597                           
  4598                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  4599  01EE  0377               	decf	Lcd_Set_Cursor@a,w
  4600  01EF  1D03               	btfss	3,2
  4601  01F0  2A12               	goto	l1949
  4602                           
  4603                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  4604  01F1  0874               	movf	Lcd_Set_Cursor@b,w
  4605  01F2  3E7F               	addlw	127
  4606  01F3  00F5               	movwf	??_Lcd_Set_Cursor
  4607  01F4  0875               	movf	??_Lcd_Set_Cursor,w
  4608  01F5  00FA               	movwf	Lcd_Set_Cursor@temp
  4609                           
  4610                           ;./LCD4bits.h: 50:   z = temp>>4;
  4611  01F6  087A               	movf	Lcd_Set_Cursor@temp,w
  4612  01F7  00F5               	movwf	??_Lcd_Set_Cursor
  4613  01F8  3004               	movlw	4
  4614  01F9                     u1475:	
  4615  01F9  1003               	clrc
  4616  01FA  0CF5               	rrf	??_Lcd_Set_Cursor,f
  4617  01FB  3EFF               	addlw	-1
  4618  01FC  1D03               	skipz
  4619  01FD  29F9               	goto	u1475
  4620  01FE  0875               	movf	??_Lcd_Set_Cursor,w
  4621  01FF  00F6               	movwf	??_Lcd_Set_Cursor+1
  4622  0200  0876               	movf	??_Lcd_Set_Cursor+1,w
  4623  0201  00F8               	movwf	Lcd_Set_Cursor@z
  4624                           
  4625                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  4626  0202  087A               	movf	Lcd_Set_Cursor@temp,w
  4627  0203  390F               	andlw	15
  4628  0204  00F5               	movwf	??_Lcd_Set_Cursor
  4629  0205  0875               	movf	??_Lcd_Set_Cursor,w
  4630  0206  00F9               	movwf	Lcd_Set_Cursor@y
  4631                           
  4632                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  4633  0207  0878               	movf	Lcd_Set_Cursor@z,w
  4634  0208  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  4635                           
  4636                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  4637  020D  0879               	movf	Lcd_Set_Cursor@y,w
  4638  020E  120A  158A  26FE   	fcall	_Lcd_Cmd
  4639                           
  4640                           ;./LCD4bits.h: 54:  }
  4641  0211  0008               	return
  4642  0212                     l1949:	
  4643  0212  3002               	movlw	2
  4644  0213  0677               	xorwf	Lcd_Set_Cursor@a,w
  4645  0214  1D03               	btfss	3,2
  4646  0215  0008               	return
  4647                           
  4648                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  4649  0216  0874               	movf	Lcd_Set_Cursor@b,w
  4650  0217  3EBF               	addlw	191
  4651  0218  00F5               	movwf	??_Lcd_Set_Cursor
  4652  0219  0875               	movf	??_Lcd_Set_Cursor,w
  4653  021A  00FA               	movwf	Lcd_Set_Cursor@temp
  4654                           
  4655                           ;./LCD4bits.h: 58:   z = temp>>4;
  4656  021B  087A               	movf	Lcd_Set_Cursor@temp,w
  4657  021C  00F5               	movwf	??_Lcd_Set_Cursor
  4658  021D  3004               	movlw	4
  4659  021E                     u1495:	
  4660  021E  1003               	clrc
  4661  021F  0CF5               	rrf	??_Lcd_Set_Cursor,f
  4662  0220  3EFF               	addlw	-1
  4663  0221  1D03               	skipz
  4664  0222  2A1E               	goto	u1495
  4665  0223  0875               	movf	??_Lcd_Set_Cursor,w
  4666  0224  00F6               	movwf	??_Lcd_Set_Cursor+1
  4667  0225  0876               	movf	??_Lcd_Set_Cursor+1,w
  4668  0226  00F8               	movwf	Lcd_Set_Cursor@z
  4669                           
  4670                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  4671  0227  087A               	movf	Lcd_Set_Cursor@temp,w
  4672  0228  390F               	andlw	15
  4673  0229  00F5               	movwf	??_Lcd_Set_Cursor
  4674  022A  0875               	movf	??_Lcd_Set_Cursor,w
  4675  022B  00F9               	movwf	Lcd_Set_Cursor@y
  4676                           
  4677                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  4678  022C  0878               	movf	Lcd_Set_Cursor@z,w
  4679  022D  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  4680                           
  4681                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  4682  0232  0879               	movf	Lcd_Set_Cursor@y,w
  4683  0233  120A  158A  26FE   	fcall	_Lcd_Cmd
  4684  0236  0008               	return
  4685  0237                     __end_of_Lcd_Set_Cursor:	
  4686                           
  4687                           	psect	text31
  4688  0EC8                     __ptext31:	
  4689 ;; *************** function _Lcd_Clear *****************
  4690 ;; Defined at:
  4691 ;;		line 38 in file "./LCD4bits.h"
  4692 ;; Parameters:    Size  Location     Type
  4693 ;;		None
  4694 ;; Auto vars:     Size  Location     Type
  4695 ;;		None
  4696 ;; Return value:  Size  Location     Type
  4697 ;;                  1    wreg      void 
  4698 ;; Registers used:
  4699 ;;		wreg, status,2, status,0, pclath, cstack
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4705 ;;      Params:         0       0       0       0       0
  4706 ;;      Locals:         0       0       0       0       0
  4707 ;;      Temps:          0       0       0       0       0
  4708 ;;      Totals:         0       0       0       0       0
  4709 ;;Total ram usage:        0 bytes
  4710 ;; Hardware stack levels used:    1
  4711 ;; Hardware stack levels required when called:    2
  4712 ;; This function calls:
  4713 ;;		_Lcd_Cmd
  4714 ;; This function is called by:
  4715 ;;		_main
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           
  4720                           ;psect for function _Lcd_Clear
  4721  0EC8                     _Lcd_Clear:	
  4722                           
  4723                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  4724                           
  4725                           ;incstack = 0
  4726                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  4727  0EC8  3000               	movlw	0
  4728  0EC9  120A  158A  26FE  120A  158A  	fcall	_Lcd_Cmd
  4729                           
  4730                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  4731  0ECE  3001               	movlw	1
  4732  0ECF  120A  158A  26FE   	fcall	_Lcd_Cmd
  4733  0ED2  0008               	return
  4734  0ED3                     __end_of_Lcd_Clear:	
  4735                           
  4736                           	psect	text32
  4737  0EFE                     __ptext32:	
  4738 ;; *************** function _Lcd_Cmd *****************
  4739 ;; Defined at:
  4740 ;;		line 29 in file "./LCD4bits.h"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;  a               1    wreg     unsigned char 
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;  a               1    3[COMMON] unsigned char 
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  1    wreg      void 
  4747 ;; Registers used:
  4748 ;;		wreg, status,2, status,0, pclath, cstack
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4754 ;;      Params:         0       0       0       0       0
  4755 ;;      Locals:         1       0       0       0       0
  4756 ;;      Temps:          2       0       0       0       0
  4757 ;;      Totals:         3       0       0       0       0
  4758 ;;Total ram usage:        3 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    1
  4761 ;; This function calls:
  4762 ;;		_Lcd_Port
  4763 ;; This function is called by:
  4764 ;;		_Lcd_Clear
  4765 ;;		_Lcd_Set_Cursor
  4766 ;;		_Lcd_Init
  4767 ;;		_Lcd_Shift_Right
  4768 ;;		_Lcd_Shift_Left
  4769 ;; This function uses a non-reentrant model
  4770 ;;
  4771                           
  4772                           
  4773                           ;psect for function _Lcd_Cmd
  4774  0EFE                     _Lcd_Cmd:	
  4775                           
  4776                           ;incstack = 0
  4777                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4778                           ;Lcd_Cmd@a stored from wreg
  4779  0EFE  00F3               	movwf	Lcd_Cmd@a
  4780                           
  4781                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  4782  0EFF  1283               	bcf	3,5	;RP0=0, select bank0
  4783  0F00  1303               	bcf	3,6	;RP1=0, select bank0
  4784  0F01  1206               	bcf	6,4	;volatile
  4785                           
  4786                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  4787  0F02  0873               	movf	Lcd_Cmd@a,w
  4788  0F03  120A  158A  26E4  120A  158A  	fcall	_Lcd_Port
  4789                           
  4790                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  4791  0F08  1283               	bcf	3,5	;RP0=0, select bank0
  4792  0F09  1303               	bcf	3,6	;RP1=0, select bank0
  4793  0F0A  1686               	bsf	6,5	;volatile
  4794                           
  4795                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  4796  0F0B  300B               	movlw	11
  4797  0F0C  00F2               	movwf	??_Lcd_Cmd+1
  4798  0F0D  3062               	movlw	98
  4799  0F0E  00F1               	movwf	??_Lcd_Cmd
  4800  0F0F                     u1767:	
  4801  0F0F  0BF1               	decfsz	??_Lcd_Cmd,f
  4802  0F10  2F0F               	goto	u1767
  4803  0F11  0BF2               	decfsz	??_Lcd_Cmd+1,f
  4804  0F12  2F0F               	goto	u1767
  4805  0F13  0000               	nop
  4806                           
  4807                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  4808  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  4809  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  4810  0F16  1286               	bcf	6,5	;volatile
  4811  0F17  0008               	return
  4812  0F18                     __end_of_Lcd_Cmd:	
  4813                           
  4814                           	psect	text33
  4815  0EE4                     __ptext33:	
  4816 ;; *************** function _Lcd_Port *****************
  4817 ;; Defined at:
  4818 ;;		line 7 in file "./LCD4bits.h"
  4819 ;; Parameters:    Size  Location     Type
  4820 ;;  a               1    wreg     unsigned char 
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  a               1    0[COMMON] unsigned char 
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  1    wreg      void 
  4825 ;; Registers used:
  4826 ;;		wreg
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4832 ;;      Params:         0       0       0       0       0
  4833 ;;      Locals:         1       0       0       0       0
  4834 ;;      Temps:          0       0       0       0       0
  4835 ;;      Totals:         1       0       0       0       0
  4836 ;;Total ram usage:        1 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; This function calls:
  4839 ;;		Nothing
  4840 ;; This function is called by:
  4841 ;;		_Lcd_Cmd
  4842 ;;		_Lcd_Init
  4843 ;;		_Lcd_Write_Char
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           
  4848                           ;psect for function _Lcd_Port
  4849  0EE4                     _Lcd_Port:	
  4850                           
  4851                           ;incstack = 0
  4852                           ; Regs used in _Lcd_Port: [wreg]
  4853                           ;Lcd_Port@a stored from wreg
  4854  0EE4  00F0               	movwf	Lcd_Port@a
  4855                           
  4856                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  4857  0EE5  1C70               	btfss	Lcd_Port@a,0
  4858  0EE6  2EEB               	goto	l128
  4859                           
  4860                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  4861  0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  4862  0EE8  1303               	bcf	3,6	;RP1=0, select bank0
  4863  0EE9  1406               	bsf	6,0	;volatile
  4864  0EEA  2EEE               	goto	l129
  4865  0EEB                     l128:	
  4866                           ;./LCD4bits.h: 11:  else
  4867                           
  4868                           
  4869                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  4870  0EEB  1283               	bcf	3,5	;RP0=0, select bank0
  4871  0EEC  1303               	bcf	3,6	;RP1=0, select bank0
  4872  0EED  1006               	bcf	6,0	;volatile
  4873  0EEE                     l129:	
  4874                           
  4875                           ;./LCD4bits.h: 14:  if(a & 2)
  4876  0EEE  1CF0               	btfss	Lcd_Port@a,1
  4877  0EEF  2EF2               	goto	l130
  4878                           
  4879                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  4880  0EF0  1486               	bsf	6,1	;volatile
  4881  0EF1  2EF3               	goto	l131
  4882  0EF2                     l130:	
  4883                           ;./LCD4bits.h: 16:  else
  4884                           
  4885                           
  4886                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  4887  0EF2  1086               	bcf	6,1	;volatile
  4888  0EF3                     l131:	
  4889                           
  4890                           ;./LCD4bits.h: 19:  if(a & 4)
  4891  0EF3  1D70               	btfss	Lcd_Port@a,2
  4892  0EF4  2EF7               	goto	l132
  4893                           
  4894                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  4895  0EF5  1506               	bsf	6,2	;volatile
  4896  0EF6  2EF8               	goto	l133
  4897  0EF7                     l132:	
  4898                           ;./LCD4bits.h: 21:  else
  4899                           
  4900                           
  4901                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  4902  0EF7  1106               	bcf	6,2	;volatile
  4903  0EF8                     l133:	
  4904                           
  4905                           ;./LCD4bits.h: 24:  if(a & 8)
  4906  0EF8  1DF0               	btfss	Lcd_Port@a,3
  4907  0EF9  2EFC               	goto	l134
  4908                           
  4909                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  4910  0EFA  1586               	bsf	6,3	;volatile
  4911  0EFB  0008               	return
  4912  0EFC                     l134:	
  4913                           ;./LCD4bits.h: 26:  else
  4914                           
  4915                           
  4916                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  4917  0EFC  1186               	bcf	6,3	;volatile
  4918  0EFD  0008               	return
  4919  0EFE                     __end_of_Lcd_Port:	
  4920  007E                     btemp	set	126	;btemp
  4921  007E                     wtemp0	set	126


Data Sizes:
    Strings     73
    Constant    10
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     23      40
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_12(CODE[4]), STR_11(CODE[5]), STR_10(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), temp(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_temp@temp_string	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_time@time_string	PTR unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), 

    UART_Write_Text@text	PTR unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), temp(BANK0[6]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 12
		 -> STR_9(CODE[7]), STR_8(CODE[7]), STR_7(CODE[8]), STR_6(CODE[8]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), STR_3(CODE[12]), STR_2(CODE[12]), 
		 -> time(BANK0[6]), temp(BANK0[6]), 


Critical Paths under _main in COMMON

    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _UART_Write_Text->_UART_Write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_UART_Init
    _UART_Init->___aldiv
    _get_temp->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   19651
                                             22 BANK0      1     1      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                         _UART_Write
                    _UART_Write_Text
                             _get_IR
                            _get_PIR
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                              _setup
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     200
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1468
                    _I2C_Master_Init
                           _Lcd_Init
                          _UART_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     412
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                             5     5      0    2450
                                              6 COMMON     5     5      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             9     9      0    4309
                                             13 BANK0      9     9      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1429
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     168
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1466
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     729
                                              0 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      4     4      0     178
                                              1 COMMON     4     4      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1028
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     836
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_Write
   _UART_Write_Text
     _UART_Write
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
     _initOscilador
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      36       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     17      28       5       50.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      36      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Mar 03 23:06:08 2019

                                pc 0002                     ___bmul@product 0072  
                      __CFG_CP$OFF 0000                        get_hall@key 0077  
                               _IR 0038                                 fsr 0004  
                              l102 0EB5                                l120 008F  
                              l121 0092                                l130 0EF2  
                              l131 0EF3                                l132 0EF7  
                              l133 0EF8                                l134 0EFC  
                              l206 0EBF                                l128 0EEB  
                              l129 0EEE                                l171 028A  
                              l235 0734                                l236 0737  
                              l239 0746                                l465 03D8  
                              _GIE 005F                       __CFG_CPD$OFF 0000  
                              _PIR 0039                                u945 02FB  
                              u965 0309                                u975 031E  
                              u985 0330                      ?_get_tripwire 0070  
                              fsr0 0004                                indf 0000  
                     __CFG_LVP$OFF 0000                               l2011 04D5  
                             l2211 0270                               l2213 0608  
                             l2061 0FE5                               l2117 074A  
                             l2063 0FD8                               l2065 0FFA  
                             l2145 07AE                               l2137 078E  
                             l2129 077C                               l2163 07EB  
                             l2155 07CB                               l2147 07B8  
                             l1613 02F7                               l1711 00BA  
                             l1623 032F                               l1615 0307  
                             l2079 06B3                               l1705 009E  
                             l1641 03E9                               l1801 024A  
                             l1707 00AC                               l1715 00C5  
                             l1627 033C                               l1651 0409  
                             l1811 0263                               l1803 0250  
                             l1901 0660                               l1805 0256  
                             l1903 05D5                               l1663 043E  
                             l1807 025C                               l1815 0268  
                             l1681 017C                               l1905 06A1  
                             l1921 0FCA                               l1649 03F9  
                             l1809 0263                               l1683 018A  
                             l1667 044C                               l1659 0431  
                             l1925 0ED5                               l1693 01AB  
                             l1917 0FB7                               l1829 05B4  
                             l1919 0FC2                               l1929 0EDB  
                             l1689 01A0                               l1881 062C  
                             l1865 0613                               l1875 062A  
                             l1859 05F5                               l1795 0239  
                             l1949 0212                               l1965 01B2  
                             l1973 0F1B                               l1893 065C  
                             l1797 023E                               l1887 064D  
                             l1799 0244                               STR_1 0057  
                             STR_2 001D                        get_time@min 0079  
                             STR_3 0029                               STR_4 0035  
                             STR_5 003E                               STR_6 0047  
                             STR_7 004F                               STR_8 0048  
                             STR_9 0050                               _BRGH 04C2  
                             _CREN 00C4                               u1115 017F  
                             u1035 03FD                               u1205 00B2  
                             u1135 018B                               u1215 00BB  
                             u1055 040B                               u1145 0197  
                             u1065 0420                               u1321 0593  
                             u1305 0563                               u1322 0594  
                             u1155 01A1                               u1235 00DC  
                             u1075 0432                               u1323 0599  
                             u1315 057C                               u1324 059A  
                             u1325 059F                               u1326 05A0  
                             u1255 0111                               u1185 00A1  
                             u1281 0533                               u1265 0503  
                             u1282 0534                               u1283 0539  
                             u1275 051C                               u1284 053A  
                             u1285 053F                               u1605 072E  
                             u1286 0540                               u1375 0643  
                             u1545 04AD                               u1475 01F9  
                             u1565 038C                               u1717 0296  
                             u1495 021E                               u1575 03AB  
                             u1727 02A5                               u1737 02B4  
                             u1747 0121                               u1757 0132  
                             u1767 0F0F                               _PEIE 005E  
                             _RCEN 048B                               _RCIF 0065  
                             _SPEN 00C7                               _TRMT 04C1  
                             _TXEN 04C5                               _SYNC 04C4  
                     __CFG_WRT$OFF 0000                  ?_Lcd_Write_String 0075  
 __end_of_I2C_Master_RepeatedStart 0EA5                               _door 003B  
                             _main 06A6                               _temp 003C  
                             _time 0042                               _trip 003A  
                             btemp 007E                               start 0000  
               ??_Lcd_Write_String 0077                      __CFG_IESO$OFF 0000  
                  __end_of_Lcd_Cmd 0F18                  ___bmul@multiplier 0073  
                    __CFG_MCLRE$ON 0000                get_temp@temp_string 0034  
          __end_of_UART_Write_Text 0F36                   ?_I2C_Master_Init 0020  
                 ?_I2C_Master_Read 0070                   ?_I2C_Master_Wait 0070  
                 ?_I2C_Master_Stop 0070                    __end_of___aldiv 0455  
                            ?_main 0070                              STR_10 0063  
                            STR_11 005D                              STR_12 0062  
                    __CFG_WDTE$OFF 0000                       get_time@hour 0078  
                            _ANSEL 0188                    __end_of___lldiv 0345  
                   ??_get_tripwire 0076                    __end_of___lwdiv 01B0  
                  __end_of___lwmod 00CA                              _RCREG 001A  
                            _SPBRG 0099                              _PORTA 0005  
                            _PORTB 0006                              _PORTC 0007  
          __size_of_Lcd_Set_Cursor 004A                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
                            _SSPIE 0463                              _SSPIF 0063  
                            _TXREG 0019                    __end_of_get_PIR 0F74  
                   __CFG_FCMEN$OFF 0000                        ?_UART_Write 0070  
               __size_of_UART_Init 00D6                    __end_of_dpowers 001D  
                            _setup 0139                              _state 0037  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 06A6                   __end_of_Lcd_Init 02E7  
                 __end_of_Lcd_Port 0EFE                    __initialization 07F5  
                     __end_of_main 07F5             __size_of_initOscilador 0055  
                           ??_main 0036                 __size_of_Lcd_Clear 000B  
                ?_I2C_Master_Start 0070                  ?_I2C_Master_Write 0070  
               ??_I2C_Master_Start 0070                 ??_I2C_Master_Write 0072  
                           ?_setup 0070                             _ANSELH 0189  
                        ??_Lcd_Cmd 0071            __size_of_Lcd_Write_Char 0039  
                           _SSPADD 0093                             _TRISC3 043B  
                           _TRISC4 043C                             _TRISC6 043E  
                           _TRISC7 043F                             _SSPCON 0014  
                           _SSPBUF 0013                     __CFG_PWRTE$OFF 0000  
         _I2C_Master_RepeatedStart 0E9E                   __end_of_get_hall 0F93  
                __end_of_UART_Init 05CE                   __end_of_get_temp 04F8  
                 __end_of_get_time 03C6                             ___bmul 0ED3  
              __size_of_UART_Write 000A                          ??___aldiv 0078  
                 ?_UART_Write_Text 0070                          ??___lldiv 0078  
                           _get_IR 0F36                          ??___lwdiv 0074  
                        ??___lwmod 007C                          ??_get_PIR 0076  
                           _strcat 0FB2                             _strcmp 0FD6  
                        ??_sprintf 0023                    Lcd_Set_Cursor@a 0077  
                  Lcd_Set_Cursor@b 0074                    Lcd_Set_Cursor@y 0079  
                  Lcd_Set_Cursor@z 0078            __end_of__initialization 07FC  
                    _initOscilador 0237                  __end_of_Lcd_Clear 0ED3  
             __end_of_get_tripwire 0FB2                ___bmul@multiplicand 0070  
                   __pcstackCOMMON 0070                      __end_of_setup 0174  
                   _Lcd_Set_Cursor 01ED                          ?_Lcd_Init 0070  
                        ?_Lcd_Port 0070                            ??_setup 007E  
                       __pbssBANK0 0037                     ?_initOscilador 0070  
                       __pmaintext 06A6                            ?___bmul 0070  
                          ?_get_IR 0070          __size_of_Lcd_Write_String 003D  
           __end_of_Lcd_Set_Cursor 0237                            ?_strcat 0070  
                          ?_strcmp 0070                       ??_UART_Write 0070  
                       ??_Lcd_Init 0074                         ??_Lcd_Port 0070  
                          _SSPCON2 0091                          ?_get_hall 0070  
                          _SSPSTAT 0094                          ?_get_temp 0070  
                        ?_get_time 0070                         __stringtab 0003  
              initOscilador@option 0072                     _Lcd_Write_Char 0100  
                          _Lcd_Cmd 0EFE                            ___aldiv 03C6  
                  __size_of___bmul 0011                            ___lldiv 02E7  
               __end_of_UART_Write 0EC8                            ___lwdiv 0174  
                          ___lwmod 0098                    __size_of_get_IR 001F  
                  ?_Lcd_Set_Cursor 0074                            _get_PIR 0F55  
                          __ptext1 0FD6                            __ptext2 0139  
                          __ptext3 0237                            __ptext4 04F8  
                          __ptext5 03C6                            __ptext6 028C  
                          __ptext7 00CA                            __ptext8 02E7  
                          __ptext9 0F93                get_time@time_string 007A  
                  __size_of_strcat 0024                    __size_of_strcmp 002A  
                          _dpowers 0013                   ___aldiv@dividend 0074  
         __size_of_I2C_Master_Init 0036           __size_of_I2C_Master_Read 002C  
         __size_of_I2C_Master_Wait 0009           __size_of_I2C_Master_Stop 0007  
                  ??_initOscilador 0070                         ??_get_hall 0076  
                          _sprintf 05CE                            clrloop0 0EAE  
           __end_of_Lcd_Write_Char 0139                         ??_get_temp 002D  
                       ??_get_time 0076               end_of_initialization 07FC  
            __size_of_get_tripwire 001F         ??_I2C_Master_RepeatedStart 0070  
                       get_PIR@PIR 0077          __size_of_I2C_Master_Start 0007  
        __size_of_I2C_Master_Write 0008                    ___lldiv@divisor 0070  
                  ___lldiv@counter 007D                   ___aldiv@quotient 0022  
                 I2C_Master_Init@c 0020                   I2C_Master_Read@a 0070  
                        Lcd_Port@a 0070                            strcmp@r 0075  
                        _UART_Init 04F8                          _PORTAbits 0005  
                        _PORTBbits 0006                          _PORTCbits 0007  
                   UART_Write@data 0070                       _get_tripwire 0F93  
                  ?_Lcd_Write_Char 0070                  Lcd_Write_String@a 0075  
                Lcd_Write_String@i 007A                          _Lcd_Clear 0EC8  
                   __end_of___bmul 0EE4                   _Lcd_Write_String 01B0  
                       ?_UART_Init 0026                     __end_of_get_IR 0F55  
                   __end_of_strcat 0FD6           __size_of_UART_Write_Text 001E  
                   __end_of_strcmp 1000                start_initialization 07F5  
                __size_of_Lcd_Init 005B                  __size_of_Lcd_Port 001A  
                ??_I2C_Master_Init 0024                  ??_I2C_Master_Read 0072  
                ??_I2C_Master_Wait 0070                  ??_I2C_Master_Stop 0070  
         __CFG_FOSC$INTRC_NOCLKOUT 0000                         ?_Lcd_Clear 0070  
                         ??___bmul 0071                           ??_get_IR 0076  
                  Lcd_Write_Char@a 0074                    Lcd_Write_Char@y 0073  
                         ??_strcat 0071                           ??_strcmp 0072  
                        ___latbits 0002                      __pcstackBANK0 0020  
                __size_of_get_hall 001F                           ?_Lcd_Cmd 0070  
                __size_of_get_temp 00A3                  __size_of_get_time 0081  
                      sprintf@flag 0027                        sprintf@prec 0028  
                 _I2C_Master_Start 0E90                   _I2C_Master_Write 0EA5  
                 ___lwdiv@dividend 0072                   ??_Lcd_Set_Cursor 0075  
                  get_temp@decimal 0030                           ?___aldiv 0070  
                         ?___lldiv 0070                           ?___lwdiv 0070  
                         ?___lwmod 0078                        ??_UART_Init 002A  
                         ?_get_PIR 0070                          __pstrings 0003  
                  get_temp@tempLSB 0035                    get_temp@tempMSB 0033  
                 ___lwdiv@quotient 0075                           ?_sprintf 0020  
                       UART_Init@x 0079                     __size_of_setup 003B  
                ??_UART_Write_Text 0071                    ___aldiv@divisor 0070  
                  ___aldiv@counter 0020                          clear_ram0 0EAD  
                         Lcd_Cmd@a 0073                        ??_Lcd_Clear 0074  
                UART_Init@baudrate 0026                        __stringbase 0012  
                 ??_Lcd_Write_Char 0071                           _Lcd_Init 028C  
                         _Lcd_Port 0EE4                I2C_Master_Read@temp 0074  
            __end_of_initOscilador 028C           __end_of_Lcd_Write_String 01ED  
                 __size_of_Lcd_Cmd 001A                   __size_of___aldiv 008F  
__size_of_I2C_Master_RepeatedStart 0007          ?_I2C_Master_RepeatedStart 0070  
                 __size_of___lldiv 005E                   __size_of___lwdiv 003C  
                 __size_of___lwmod 0032                 __end_of__stringtab 0013  
                 __size_of_get_PIR 001F                         sprintf@val 0029  
                  _I2C_Master_Init 00CA                    _I2C_Master_Read 006C  
                  _I2C_Master_Wait 0EB5                         strcat@from 0070  
                  _I2C_Master_Stop 0E97                    ___lwdiv@divisor 0070  
                  ___lwdiv@counter 0077                           __ptext10 0345  
                         __ptext11 0455                           __ptext20 0F36  
                         __ptext12 0FB2                           __ptext21 0EA5  
                         __ptext13 05CE                           __ptext30 01ED  
                         __ptext22 0E97                           __ptext14 0098  
                         __ptext31 0EC8                           __ptext23 0E90  
                         __ptext15 0174                           __ptext32 0EFE  
                         __ptext24 006C                           __ptext16 0ED3  
                         __ptext33 0EE4                           __ptext25 0EB5  
                         __ptext17 0E9E                           __ptext26 0F18  
                         __ptext18 0F74                           __ptext27 0EBE  
                         __ptext19 0F55                           __ptext28 01B0  
                         __ptext29 0100                  __CFG_BOR4V$BOR40V 0000  
                         _get_hall 0F74                           _get_temp 0455  
                         _get_time 0345                   __size_of_sprintf 00D8  
              UART_Write_Text@text 0074                      __size_of_main 014F  
                         get_IR@IR 0077           __end_of_I2C_Master_Start 0E97  
         __end_of_I2C_Master_Write 0EAD                 Lcd_Write_Char@temp 0072  
                        sprintf@ap 0026                          sprintf@sp 002B  
                 ___lwmod@dividend 007A                   ___lldiv@dividend 0074  
                        stringcode 000D                         _OSCCONbits 008F  
          __end_of_I2C_Master_Init 0100            __end_of_I2C_Master_Read 0098  
          __end_of_I2C_Master_Wait 0EBE            __end_of_I2C_Master_Stop 0E9E  
               Lcd_Set_Cursor@temp 007A                    _UART_Write_Text 0F18  
                         sprintf@c 002C                           sprintf@f 0020  
                         strcat@cp 0073                           strcat@to 0072  
                         strcmp@s1 0076                           strcmp@s2 0070  
                 ___lldiv@quotient 0079                  I2C_Master_Write@d 0070  
                  ___lwmod@divisor 0078                    ___lwmod@counter 007D  
                         stringdir 000D                   get_tripwire@trip 0077  
                         stringtab 0003                       ___aldiv@sign 0021  
                       _UART_Write 0EBE                        _SSPCON2bits 0091  
                 UART_Write_Text@i 0072  

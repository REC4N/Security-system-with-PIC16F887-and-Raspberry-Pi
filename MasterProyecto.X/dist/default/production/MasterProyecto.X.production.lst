

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Mar 09 21:54:33 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	intentry,global,class=CODE,delta=2
    58                           	dabs	1,0x7E,2
    59  0000                     
    60                           ; Version 2.05
    61                           ; Generated 20/12/2018 GMT
    62                           ; 
    63                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC16F887 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000D                     	;# 
   108  000E                     	;# 
   109  000E                     	;# 
   110  000F                     	;# 
   111  0010                     	;# 
   112  0011                     	;# 
   113  0012                     	;# 
   114  0013                     	;# 
   115  0014                     	;# 
   116  0015                     	;# 
   117  0015                     	;# 
   118  0016                     	;# 
   119  0017                     	;# 
   120  0018                     	;# 
   121  0019                     	;# 
   122  001A                     	;# 
   123  001B                     	;# 
   124  001B                     	;# 
   125  001C                     	;# 
   126  001D                     	;# 
   127  001E                     	;# 
   128  001F                     	;# 
   129  0081                     	;# 
   130  0085                     	;# 
   131  0086                     	;# 
   132  0087                     	;# 
   133  0088                     	;# 
   134  0089                     	;# 
   135  008C                     	;# 
   136  008D                     	;# 
   137  008E                     	;# 
   138  008F                     	;# 
   139  0090                     	;# 
   140  0091                     	;# 
   141  0092                     	;# 
   142  0093                     	;# 
   143  0093                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0097                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009A                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  0105                     	;# 
   158  0107                     	;# 
   159  0108                     	;# 
   160  0109                     	;# 
   161  010C                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  0185                     	;# 
   167  0187                     	;# 
   168  0188                     	;# 
   169  0189                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  0007                     	;# 
   180  0008                     	;# 
   181  0009                     	;# 
   182  000A                     	;# 
   183  000B                     	;# 
   184  000C                     	;# 
   185  000D                     	;# 
   186  000E                     	;# 
   187  000E                     	;# 
   188  000F                     	;# 
   189  0010                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0015                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0017                     	;# 
   198  0018                     	;# 
   199  0019                     	;# 
   200  001A                     	;# 
   201  001B                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  001D                     	;# 
   205  001E                     	;# 
   206  001F                     	;# 
   207  0081                     	;# 
   208  0085                     	;# 
   209  0086                     	;# 
   210  0087                     	;# 
   211  0088                     	;# 
   212  0089                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  008F                     	;# 
   217  0090                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0093                     	;# 
   222  0093                     	;# 
   223  0094                     	;# 
   224  0095                     	;# 
   225  0096                     	;# 
   226  0097                     	;# 
   227  0098                     	;# 
   228  0099                     	;# 
   229  009A                     	;# 
   230  009B                     	;# 
   231  009C                     	;# 
   232  009D                     	;# 
   233  009E                     	;# 
   234  009F                     	;# 
   235  0105                     	;# 
   236  0107                     	;# 
   237  0108                     	;# 
   238  0109                     	;# 
   239  010C                     	;# 
   240  010C                     	;# 
   241  010D                     	;# 
   242  010E                     	;# 
   243  010F                     	;# 
   244  0185                     	;# 
   245  0187                     	;# 
   246  0188                     	;# 
   247  0189                     	;# 
   248  018C                     	;# 
   249  018D                     	;# 
   250                           
   251                           	psect	idataBANK0
   252  1687                     __pidataBANK0:	
   253                           
   254                           ;initializer for _password
   255  1687  3401               	retlw	1
   256  1688  3405               	retlw	5
   257  1689  3401               	retlw	1
   258  168A  3400               	retlw	0
   259  168B  3403               	retlw	3
   260                           
   261                           	psect	stringtext
   262  0700                     __pstringtext:	
   263  0700                     stringtab:	
   264  0700                     __stringtab:	
   265                           
   266                           ;	String table - string pointers are 2 bytes each
   267  0700  1BFF               	btfsc	btemp+1,7
   268  0701  2F0A               	ljmp	stringcode
   269  0702  1383               	bcf	3,7
   270  0703  187F               	btfsc	btemp+1,0
   271  0704  1783               	bsf	3,7
   272  0705  0800               	movf	0,w
   273  0706  0A84               	incf	4,f
   274  0707  1903               	skipnz
   275  0708  0AFF               	incf	btemp+1,f
   276  0709  0008               	return
   277  070A                     stringcode:	
   278  070A  087F               	movf	btemp+1,w
   279  070B  397F               	andlw	127
   280  070C  008A               	movwf	10
   281  070D  0804               	movf	4,w
   282  070E  0A84               	incf	4,f
   283  070F  1903               	skipnz
   284  0710  0AFF               	incf	btemp+1,f
   285  0711  0082               	movwf	2
   286  0712                     __stringbase:	
   287  0712                     __end_of__stringtab:	
   288  0712                     _dpowers:	
   289  0712  3401               	retlw	1
   290  0713  3400               	retlw	0
   291  0714  340A               	retlw	10
   292  0715  3400               	retlw	0
   293  0716  3464               	retlw	100
   294  0717  3400               	retlw	0
   295  0718  34E8               	retlw	232
   296  0719  3403               	retlw	3
   297  071A  3410               	retlw	16
   298  071B  3427               	retlw	39
   299  071C                     __end_of_dpowers:	
   300  0009                     _PORTE	set	9
   301  0007                     _PORTC	set	7
   302  0005                     _PORTA	set	5
   303  0006                     _PORTB	set	6
   304  0009                     _PORTEbits	set	9
   305  0008                     _PORTD	set	8
   306  0007                     _PORTCbits	set	7
   307  0018                     _RCSTAbits	set	24
   308  0014                     _SSPCONbits	set	20
   309  0008                     _PORTDbits	set	8
   310  0001                     _TMR0	set	1
   311  0005                     _PORTAbits	set	5
   312  000B                     _INTCONbits	set	11
   313  0019                     _TXREG	set	25
   314  001A                     _RCREG	set	26
   315  0006                     _PORTBbits	set	6
   316  0013                     _SSPBUF	set	19
   317  0014                     _SSPCON	set	20
   318  0065                     _RCIF	set	101
   319  00C4                     _CREN	set	196
   320  00C7                     _SPEN	set	199
   321  0063                     _SSPIF	set	99
   322  005E                     _PEIE	set	94
   323  005F                     _GIE	set	95
   324  0081                     _OPTION_REGbits	set	129
   325  0089                     _TRISE	set	137
   326  0087                     _TRISC	set	135
   327  0088                     _TRISD	set	136
   328  0085                     _TRISA	set	133
   329  0086                     _TRISB	set	134
   330  0099                     _SPBRG	set	153
   331  008F                     _OSCCONbits	set	143
   332  0091                     _SSPCON2bits	set	145
   333  0087                     _TRISCbits	set	135
   334  0094                     _SSPSTAT	set	148
   335  0093                     _SSPADD	set	147
   336  0091                     _SSPCON2	set	145
   337  04C1                     _TRMT	set	1217
   338  04C5                     _TXEN	set	1221
   339  043E                     _TRISC6	set	1086
   340  043F                     _TRISC7	set	1087
   341  04C4                     _SYNC	set	1220
   342  04C2                     _BRGH	set	1218
   343  0463                     _SSPIE	set	1123
   344  043C                     _TRISC4	set	1084
   345  043B                     _TRISC3	set	1083
   346  048B                     _RCEN	set	1163
   347  0188                     _ANSEL	set	392
   348  0189                     _ANSELH	set	393
   349  071C                     STR_1:	
   350  071C  3449               	retlw	73	;'I'
   351  071D  346E               	retlw	110	;'n'
   352  071E  3469               	retlw	105	;'i'
   353  071F  3463               	retlw	99	;'c'
   354  0720  3469               	retlw	105	;'i'
   355  0721  3461               	retlw	97	;'a'
   356  0722  346E               	retlw	110	;'n'
   357  0723  3464               	retlw	100	;'d'
   358  0724  346F               	retlw	111	;'o'
   359  0725  3420               	retlw	32	;' '
   360  0726  3453               	retlw	83	;'S'
   361  0727  3469               	retlw	105	;'i'
   362  0728  3473               	retlw	115	;'s'
   363  0729  3474               	retlw	116	;'t'
   364  072A  3465               	retlw	101	;'e'
   365  072B  346D               	retlw	109	;'m'
   366  072C  3461               	retlw	97	;'a'
   367  072D  3420               	retlw	32	;' '
   368  072E  3464               	retlw	100	;'d'
   369  072F  3465               	retlw	101	;'e'
   370  0730  3420               	retlw	32	;' '
   371  0731  3453               	retlw	83	;'S'
   372  0732  3465               	retlw	101	;'e'
   373  0733  3467               	retlw	103	;'g'
   374  0734  3475               	retlw	117	;'u'
   375  0735  3472               	retlw	114	;'r'
   376  0736  3469               	retlw	105	;'i'
   377  0737  3464               	retlw	100	;'d'
   378  0738  3461               	retlw	97	;'a'
   379  0739  3464               	retlw	100	;'d'
   380  073A  3400               	retlw	0
   381  073B                     STR_29:	
   382  073B  3420               	retlw	32	;' '
   383  073C  3420               	retlw	32	;' '
   384  073D  3420               	retlw	32	;' '
   385  073E  3420               	retlw	32	;' '
   386  073F  3420               	retlw	32	;' '
   387  0740  3420               	retlw	32	;' '
   388  0741  3420               	retlw	32	;' '
   389  0742  3420               	retlw	32	;' '
   390  0743  3420               	retlw	32	;' '
   391  0744  3420               	retlw	32	;' '
   392  0745  3420               	retlw	32	;' '
   393  0746  3420               	retlw	32	;' '
   394  0747  3400               	retlw	0
   395  0748                     STR_27:	
   396  0748  3453               	retlw	83	;'S'
   397  0749  3465               	retlw	101	;'e'
   398  074A  3463               	retlw	99	;'c'
   399  074B  3475               	retlw	117	;'u'
   400  074C  3472               	retlw	114	;'r'
   401  074D  3469               	retlw	105	;'i'
   402  074E  3474               	retlw	116	;'t'
   403  074F  3479               	retlw	121	;'y'
   404  0750  3420               	retlw	32	;' '
   405  0751  344F               	retlw	79	;'O'
   406  0752  3446               	retlw	70	;'F'
   407  0753  3446               	retlw	70	;'F'
   408  0754  3400               	retlw	0
   409  0755                     STR_13:	
   410  0755  3444               	retlw	68	;'D'
   411  0756  344F               	retlw	79	;'O'
   412  0757  344F               	retlw	79	;'O'
   413  0758  3452               	retlw	82	;'R'
   414  0759  3420               	retlw	32	;' '
   415  075A  344F               	retlw	79	;'O'
   416  075B  3450               	retlw	80	;'P'
   417  075C  3445               	retlw	69	;'E'
   418  075D  344E               	retlw	78	;'N'
   419  075E  3420               	retlw	32	;' '
   420  075F  3420               	retlw	32	;' '
   421  0760  3400               	retlw	0
   422  0761                     STR_14:	
   423  0761  3444               	retlw	68	;'D'
   424  0762  344F               	retlw	79	;'O'
   425  0763  344F               	retlw	79	;'O'
   426  0764  3452               	retlw	82	;'R'
   427  0765  3420               	retlw	32	;' '
   428  0766  3443               	retlw	67	;'C'
   429  0767  344C               	retlw	76	;'L'
   430  0768  344F               	retlw	79	;'O'
   431  0769  3453               	retlw	83	;'S'
   432  076A  3445               	retlw	69	;'E'
   433  076B  3444               	retlw	68	;'D'
   434  076C  3400               	retlw	0
   435  076D                     STR_26:	
   436  076D  3453               	retlw	83	;'S'
   437  076E  3465               	retlw	101	;'e'
   438  076F  3463               	retlw	99	;'c'
   439  0770  3475               	retlw	117	;'u'
   440  0771  3472               	retlw	114	;'r'
   441  0772  3469               	retlw	105	;'i'
   442  0773  3474               	retlw	116	;'t'
   443  0774  3479               	retlw	121	;'y'
   444  0775  3420               	retlw	32	;' '
   445  0776  344F               	retlw	79	;'O'
   446  0777  344E               	retlw	78	;'N'
   447  0778  3400               	retlw	0
   448  0779                     STR_2:	
   449  0779  344C               	retlw	76	;'L'
   450  077A  3455               	retlw	85	;'U'
   451  077B  344E               	retlw	78	;'N'
   452  077C  3445               	retlw	69	;'E'
   453  077D  3453               	retlw	83	;'S'
   454  077E  3420               	retlw	32	;' '
   455  077F  3420               	retlw	32	;' '
   456  0780  3420               	retlw	32	;' '
   457  0781  3420               	retlw	32	;' '
   458  0782  3400               	retlw	0
   459  0783                     STR_7:	
   460  0783  3453               	retlw	83	;'S'
   461  0784  3441               	retlw	65	;'A'
   462  0785  3442               	retlw	66	;'B'
   463  0786  3441               	retlw	65	;'A'
   464  0787  3444               	retlw	68	;'D'
   465  0788  344F               	retlw	79	;'O'
   466  0789  3420               	retlw	32	;' '
   467  078A  3420               	retlw	32	;' '
   468  078B  3420               	retlw	32	;' '
   469  078C  3400               	retlw	0
   470  078D                     STR_3:	
   471  078D  344D               	retlw	77	;'M'
   472  078E  3441               	retlw	65	;'A'
   473  078F  3452               	retlw	82	;'R'
   474  0790  3454               	retlw	84	;'T'
   475  0791  3445               	retlw	69	;'E'
   476  0792  3453               	retlw	83	;'S'
   477  0793  3420               	retlw	32	;' '
   478  0794  3420               	retlw	32	;' '
   479  0795  3420               	retlw	32	;' '
   480  0796  3400               	retlw	0
   481  0797                     STR_5:	
   482  0797  344A               	retlw	74	;'J'
   483  0798  3455               	retlw	85	;'U'
   484  0799  3445               	retlw	69	;'E'
   485  079A  3456               	retlw	86	;'V'
   486  079B  3445               	retlw	69	;'E'
   487  079C  3453               	retlw	83	;'S'
   488  079D  3420               	retlw	32	;' '
   489  079E  3420               	retlw	32	;' '
   490  079F  3420               	retlw	32	;' '
   491  07A0  3400               	retlw	0
   492  07A1                     STR_8:	
   493  07A1  3444               	retlw	68	;'D'
   494  07A2  344F               	retlw	79	;'O'
   495  07A3  344D               	retlw	77	;'M'
   496  07A4  3449               	retlw	73	;'I'
   497  07A5  344E               	retlw	78	;'N'
   498  07A6  3447               	retlw	71	;'G'
   499  07A7  344F               	retlw	79	;'O'
   500  07A8  3420               	retlw	32	;' '
   501  07A9  3420               	retlw	32	;' '
   502  07AA  3400               	retlw	0
   503  07AB                     STR_6:	
   504  07AB  3456               	retlw	86	;'V'
   505  07AC  3449               	retlw	73	;'I'
   506  07AD  3445               	retlw	69	;'E'
   507  07AE  3452               	retlw	82	;'R'
   508  07AF  344E               	retlw	78	;'N'
   509  07B0  3445               	retlw	69	;'E'
   510  07B1  3453               	retlw	83	;'S'
   511  07B2  3420               	retlw	32	;' '
   512  07B3  3420               	retlw	32	;' '
   513  07B4  3400               	retlw	0
   514  07B5                     STR_25:	
   515  07B5  3450               	retlw	80	;'P'
   516  07B6  3441               	retlw	65	;'A'
   517  07B7  3453               	retlw	83	;'S'
   518  07B8  3453               	retlw	83	;'S'
   519  07B9  3457               	retlw	87	;'W'
   520  07BA  344F               	retlw	79	;'O'
   521  07BB  3452               	retlw	82	;'R'
   522  07BC  3444               	retlw	68	;'D'
   523  07BD  343A               	retlw	58	;':'
   524  07BE  3400               	retlw	0
   525  07BF                     STR_4:	
   526  07BF  344D               	retlw	77	;'M'
   527  07C0  3449               	retlw	73	;'I'
   528  07C1  3445               	retlw	69	;'E'
   529  07C2  3452               	retlw	82	;'R'
   530  07C3  3443               	retlw	67	;'C'
   531  07C4  344F               	retlw	79	;'O'
   532  07C5  344C               	retlw	76	;'L'
   533  07C6  3445               	retlw	69	;'E'
   534  07C7  3453               	retlw	83	;'S'
   535  07C8  3400               	retlw	0
   536  07C9                     STR_17:	
   537  07C9  3442               	retlw	66	;'B'
   538  07CA  3441               	retlw	65	;'A'
   539  07CB  344E               	retlw	78	;'N'
   540  07CC  344B               	retlw	75	;'K'
   541  07CD  3420               	retlw	32	;' '
   542  07CE  344F               	retlw	79	;'O'
   543  07CF  344E               	retlw	78	;'N'
   544  07D0  3420               	retlw	32	;' '
   545  07D1  3400               	retlw	0
   546  07D2                     STR_15:	
   547  07D2  3454               	retlw	84	;'T'
   548  07D3  3452               	retlw	82	;'R'
   549  07D4  3449               	retlw	73	;'I'
   550  07D5  3450               	retlw	80	;'P'
   551  07D6  3420               	retlw	32	;' '
   552  07D7  344F               	retlw	79	;'O'
   553  07D8  344E               	retlw	78	;'N'
   554  07D9  3420               	retlw	32	;' '
   555  07DA  3400               	retlw	0
   556  07DB                     STR_18:	
   557  07DB  3442               	retlw	66	;'B'
   558  07DC  3441               	retlw	65	;'A'
   559  07DD  344E               	retlw	78	;'N'
   560  07DE  344B               	retlw	75	;'K'
   561  07DF  3420               	retlw	32	;' '
   562  07E0  344F               	retlw	79	;'O'
   563  07E1  3446               	retlw	70	;'F'
   564  07E2  3446               	retlw	70	;'F'
   565  07E3  3400               	retlw	0
   566  07E4                     STR_16:	
   567  07E4  3454               	retlw	84	;'T'
   568  07E5  3452               	retlw	82	;'R'
   569  07E6  3449               	retlw	73	;'I'
   570  07E7  3450               	retlw	80	;'P'
   571  07E8  3420               	retlw	32	;' '
   572  07E9  344F               	retlw	79	;'O'
   573  07EA  3446               	retlw	70	;'F'
   574  07EB  3446               	retlw	70	;'F'
   575  07EC  3400               	retlw	0
   576  07ED                     STR_19:	
   577  07ED  3450               	retlw	80	;'P'
   578  07EE  3449               	retlw	73	;'I'
   579  07EF  3452               	retlw	82	;'R'
   580  07F0  3420               	retlw	32	;' '
   581  07F1  344F               	retlw	79	;'O'
   582  07F2  344E               	retlw	78	;'N'
   583  07F3  3420               	retlw	32	;' '
   584  07F4  3400               	retlw	0
   585  07F5                     STR_20:	
   586  07F5  3450               	retlw	80	;'P'
   587  07F6  3449               	retlw	73	;'I'
   588  07F7  3452               	retlw	82	;'R'
   589  07F8  3420               	retlw	32	;' '
   590  07F9  344F               	retlw	79	;'O'
   591  07FA  3446               	retlw	70	;'F'
   592  07FB  3446               	retlw	70	;'F'
   593  07FC  3400               	retlw	0
   594  07FD                     STR_23:	
   595  07FD  3454               	retlw	84	;'T'
   596  07FE  3449               	retlw	73	;'I'
   597  07FF  344D               	retlw	77	;'M'
   598  0800  3445               	retlw	69	;'E'
   599  0801  343A               	retlw	58	;':'
   600  0802  3420               	retlw	32	;' '
   601  0803  3400               	retlw	0
   602  0804                     STR_24:	
   603  0804  3444               	retlw	68	;'D'
   604  0805  3441               	retlw	65	;'A'
   605  0806  3459               	retlw	89	;'Y'
   606  0807  343A               	retlw	58	;':'
   607  0808  3420               	retlw	32	;' '
   608  0809  3400               	retlw	0
   609  080A                     STR_12:	
   610  080A  3432               	retlw	50	;'2'
   611  080B  3431               	retlw	49	;'1'
   612  080C  343A               	retlw	58	;':'
   613  080D  3430               	retlw	48	;'0'
   614  080E  3430               	retlw	48	;'0'
   615  080F  3400               	retlw	0
   616  0810                     STR_11:	
   617  0810  3432               	retlw	50	;'2'
   618  0811  3432               	retlw	50	;'2'
   619  0812  343A               	retlw	58	;':'
   620  0813  3430               	retlw	48	;'0'
   621  0814  3430               	retlw	48	;'0'
   622  0815  3400               	retlw	0
   623  0816                     STR_10:	
   624  0816  3432               	retlw	50	;'2'
   625  0817  3433               	retlw	51	;'3'
   626  0818  342E               	retlw	46	;'.'
   627  0819  3435               	retlw	53	;'5'
   628  081A  3430               	retlw	48	;'0'
   629  081B  3400               	retlw	0
   630  081C                     STR_28:	
   631  081C  3457               	retlw	87	;'W'
   632  081D  3452               	retlw	82	;'R'
   633  081E  344F               	retlw	79	;'O'
   634  081F  344E               	retlw	78	;'N'
   635  0820  3447               	retlw	71	;'G'
   636  0821  3400               	retlw	0
   637  0822                     STR_31:	
   638  0822  342E               	retlw	46	;'.'
   639  0823  3425               	retlw	37	;'%'
   640  0824  3464               	retlw	100	;'d'
   641  0825  3430               	retlw	48	;'0'
   642  0826  3400               	retlw	0
   643  0827                     STR_32:	
   644  0827  342E               	retlw	46	;'.'
   645  0828  3425               	retlw	37	;'%'
   646  0829  3464               	retlw	100	;'d'
   647  082A  3400               	retlw	0
   648  073E                     
   649                           ; #config settings
   650  0000                     
   651                           	psect	cinit
   652  000F                     start_initialization:	
   653  000F                     __initialization:	
   654                           
   655                           ; Initialize objects allocated to BANK0
   656  000F  160A  118A  2687  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   657  0014  00E8               	movwf	__pdataBANK0& (0+127)
   658  0015  160A  118A  2688  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   659  001A  00E9               	movwf	(__pdataBANK0+1)& (0+127)
   660  001B  160A  118A  2689  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   661  0020  00EA               	movwf	(__pdataBANK0+2)& (0+127)
   662  0021  160A  118A  268A  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   663  0026  00EB               	movwf	(__pdataBANK0+3)& (0+127)
   664  0027  160A  118A  268B  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   665  002C  00EC               	movwf	(__pdataBANK0+4)& (0+127)
   666                           
   667                           ; Clear objects allocated to BANK0
   668  002D  1383               	bcf	3,7	;select IRP bank0
   669  002E  3020               	movlw	low __pbssBANK0
   670  002F  0084               	movwf	4
   671  0030  3047               	movlw	low (__pbssBANK0+39)
   672  0031  160A  118A  26AF   	fcall	clear_ram0
   673                           
   674                           ; Clear objects allocated to COMMON
   675  0034  01F8               	clrf	__pbssCOMMON& (0+127)
   676  0035  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   677  0036  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   678  0037                     end_of_initialization:	
   679                           ;End of C runtime variable initialization code
   680                           
   681  0037                     __end_of__initialization:	
   682  0037  0183               	clrf	3
   683  0038  120A  118A  283B   	ljmp	_main	;jump to C main() function
   684                           
   685                           	psect	bssCOMMON
   686  0078                     __pbssCOMMON:	
   687  0078                     _k:	
   688  0078                     	ds	1
   689  0079                     _day1:	
   690  0079                     	ds	1
   691  007A                     _state:	
   692  007A                     	ds	1
   693                           
   694                           	psect	bssBANK0
   695  0020                     __pbssBANK0:	
   696  0020                     _passwordu:	
   697  0020                     	ds	5
   698  0025                     _day2:	
   699  0025                     	ds	2
   700  0027                     _newmin:	
   701  0027                     	ds	1
   702  0028                     _newhour:	
   703  0028                     	ds	1
   704  0029                     _seguridad:	
   705  0029                     	ds	1
   706  002A                     _min:	
   707  002A                     	ds	1
   708  002B                     _hour:	
   709  002B                     	ds	1
   710  002C                     _val:	
   711  002C                     	ds	1
   712  002D                     _cont:	
   713  002D                     	ds	1
   714  002E                     _bank:	
   715  002E                     	ds	1
   716  002F                     _alarm:	
   717  002F                     	ds	1
   718  0030                     _change4:	
   719  0030                     	ds	1
   720  0031                     _change3:	
   721  0031                     	ds	1
   722  0032                     _change2:	
   723  0032                     	ds	1
   724  0033                     _change1:	
   725  0033                     	ds	1
   726  0034                     _change:	
   727  0034                     	ds	1
   728  0035                     _j:	
   729  0035                     	ds	1
   730  0036                     _i:	
   731  0036                     	ds	1
   732  0037                     _IR:	
   733  0037                     	ds	1
   734  0038                     _PIR:	
   735  0038                     	ds	1
   736  0039                     _trip:	
   737  0039                     	ds	1
   738  003A                     _door:	
   739  003A                     	ds	1
   740  003B                     _temp:	
   741  003B                     	ds	6
   742  0041                     _time:	
   743  0041                     	ds	6
   744                           
   745                           	psect	dataBANK0
   746  0068                     __pdataBANK0:	
   747  0068                     _password:	
   748  0068                     	ds	5
   749                           
   750                           	psect	clrtext
   751  16AF                     clear_ram0:	
   752                           ;	Called with FSR containing the base address, and
   753                           ;	W with the last address+1
   754                           
   755  16AF  0064               	clrwdt	;clear the watchdog before getting into this loop
   756  16B0                     clrloop0:	
   757  16B0  0180               	clrf	0	;clear RAM location pointed to by FSR
   758  16B1  0A84               	incf	4,f	;increment pointer
   759  16B2  0604               	xorwf	4,w	;XOR with final address
   760  16B3  1903               	btfsc	3,2	;have we reached the end yet?
   761  16B4  3400               	retlw	0	;all done for this memory range, return
   762  16B5  0604               	xorwf	4,w	;XOR again to restore value
   763  16B6  2EB0               	goto	clrloop0	;do the next byte
   764                           
   765                           	psect	cstackBANK1
   766  00A0                     __pcstackBANK1:	
   767  00A0                     ??_main:	
   768                           
   769                           ; 1 bytes @ 0x0
   770  00A0                     	ds	6
   771                           
   772                           	psect	cstackCOMMON
   773  0070                     __pcstackCOMMON:	
   774  0070                     ?_setup:	
   775  0070                     ?_get_temp:	
   776                           ; 1 bytes @ 0x0
   777                           
   778  0070                     ?_get_hall:	
   779                           ; 1 bytes @ 0x0
   780                           
   781  0070                     ?_get_tripwire:	
   782                           ; 1 bytes @ 0x0
   783                           
   784  0070                     ?_get_PIR:	
   785                           ; 1 bytes @ 0x0
   786                           
   787  0070                     ?_get_IR:	
   788                           ; 1 bytes @ 0x0
   789                           
   790  0070                     ?_get_time:	
   791                           ; 1 bytes @ 0x0
   792                           
   793  0070                     ?_get_day:	
   794                           ; 1 bytes @ 0x0
   795                           
   796  0070                     ?_open_door:	
   797                           ; 1 bytes @ 0x0
   798                           
   799  0070                     ?_close_door:	
   800                           ; 1 bytes @ 0x0
   801                           
   802  0070                     ?_I2C_Master_Wait:	
   803                           ; 1 bytes @ 0x0
   804                           
   805  0070                     ?_I2C_Master_Start:	
   806                           ; 1 bytes @ 0x0
   807                           
   808  0070                     ?_I2C_Master_RepeatedStart:	
   809                           ; 1 bytes @ 0x0
   810                           
   811  0070                     ?_I2C_Master_Stop:	
   812                           ; 1 bytes @ 0x0
   813                           
   814  0070                     ?_Lcd_Port:	
   815                           ; 1 bytes @ 0x0
   816                           
   817  0070                     ?_Lcd_Cmd:	
   818                           ; 1 bytes @ 0x0
   819                           
   820  0070                     ?_Lcd_Clear:	
   821                           ; 1 bytes @ 0x0
   822                           
   823  0070                     ?_Lcd_Init:	
   824                           ; 1 bytes @ 0x0
   825                           
   826  0070                     ?_Lcd_Write_Char:	
   827                           ; 1 bytes @ 0x0
   828                           
   829  0070                     ?_Lcd_Shift_Right:	
   830                           ; 1 bytes @ 0x0
   831                           
   832  0070                     ?_Lcd_Shift_Left:	
   833                           ; 1 bytes @ 0x0
   834                           
   835  0070                     ?_initOscilador:	
   836                           ; 1 bytes @ 0x0
   837                           
   838  0070                     ?_UART_TX_Empty:	
   839                           ; 1 bytes @ 0x0
   840                           
   841  0070                     ?_UART_Write:	
   842                           ; 1 bytes @ 0x0
   843                           
   844  0070                     ?_manual_pwm:	
   845                           ; 1 bytes @ 0x0
   846                           
   847  0070                     ??_manual_pwm:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0070                     ?_main:	
   851                           ; 1 bytes @ 0x0
   852                           
   853                           
   854                           ; 1 bytes @ 0x0
   855  0070                     	ds	3
   856  0073                     ?_strcat:	
   857  0073                     ??_I2C_Master_Wait:	
   858                           ; 1 bytes @ 0x3
   859                           
   860  0073                     ??_I2C_Master_Start:	
   861                           ; 1 bytes @ 0x3
   862                           
   863  0073                     ??_I2C_Master_RepeatedStart:	
   864                           ; 1 bytes @ 0x3
   865                           
   866  0073                     ??_I2C_Master_Stop:	
   867                           ; 1 bytes @ 0x3
   868                           
   869  0073                     ?_I2C_Master_Write:	
   870                           ; 1 bytes @ 0x3
   871                           
   872  0073                     ??_Lcd_Port:	
   873                           ; 1 bytes @ 0x3
   874                           
   875  0073                     ??_initOscilador:	
   876                           ; 1 bytes @ 0x3
   877                           
   878  0073                     ??_UART_TX_Empty:	
   879                           ; 1 bytes @ 0x3
   880                           
   881  0073                     ??_UART_Write:	
   882                           ; 1 bytes @ 0x3
   883                           
   884  0073                     ?___bmul:	
   885                           ; 1 bytes @ 0x3
   886                           
   887  0073                     ??___lldiv:	
   888                           ; 1 bytes @ 0x3
   889                           
   890  0073                     ??___aldiv:	
   891                           ; 1 bytes @ 0x3
   892                           
   893  0073                     ?_strcmp:	
   894                           ; 1 bytes @ 0x3
   895                           
   896  0073                     ?_I2C_Master_Read:	
   897                           ; 2 bytes @ 0x3
   898                           
   899  0073                     ?___awdiv:	
   900                           ; 2 bytes @ 0x3
   901                           
   902  0073                     ?___awmod:	
   903                           ; 2 bytes @ 0x3
   904                           
   905  0073                     ?___lwdiv:	
   906                           ; 2 bytes @ 0x3
   907                           
   908  0073                     Lcd_Port@a:	
   909                           ; 2 bytes @ 0x3
   910                           
   911  0073                     UART_Write@data:	
   912                           ; 1 bytes @ 0x3
   913                           
   914  0073                     ___bmul@multiplicand:	
   915                           ; 1 bytes @ 0x3
   916                           
   917  0073                     strcat@from:	
   918                           ; 1 bytes @ 0x3
   919                           
   920  0073                     I2C_Master_Write@d:	
   921                           ; 1 bytes @ 0x3
   922                           
   923  0073                     I2C_Master_Read@a:	
   924                           ; 2 bytes @ 0x3
   925                           
   926  0073                     ___awdiv@divisor:	
   927                           ; 2 bytes @ 0x3
   928                           
   929  0073                     ___awmod@divisor:	
   930                           ; 2 bytes @ 0x3
   931                           
   932  0073                     ___lwdiv@divisor:	
   933                           ; 2 bytes @ 0x3
   934                           
   935  0073                     strcmp@s2:	
   936                           ; 2 bytes @ 0x3
   937                           
   938                           
   939                           ; 2 bytes @ 0x3
   940  0073                     	ds	1
   941  0074                     ??_strcat:	
   942  0074                     ??_I2C_Master_Init:	
   943                           ; 1 bytes @ 0x4
   944                           
   945  0074                     ??_Lcd_Cmd:	
   946                           ; 1 bytes @ 0x4
   947                           
   948  0074                     ??_Lcd_Write_Char:	
   949                           ; 1 bytes @ 0x4
   950                           
   951  0074                     ??___bmul:	
   952                           ; 1 bytes @ 0x4
   953                           
   954  0074                     UART_Init@x:	
   955                           ; 1 bytes @ 0x4
   956                           
   957                           
   958                           ; 2 bytes @ 0x4
   959  0074                     	ds	1
   960  0075                     ??_open_door:	
   961  0075                     ??_close_door:	
   962                           ; 1 bytes @ 0x5
   963                           
   964  0075                     ??_strcmp:	
   965                           ; 1 bytes @ 0x5
   966                           
   967  0075                     ?_write_RTC:	
   968                           ; 1 bytes @ 0x5
   969                           
   970  0075                     ??_I2C_Master_Write:	
   971                           ; 1 bytes @ 0x5
   972                           
   973  0075                     ??_I2C_Master_Read:	
   974                           ; 1 bytes @ 0x5
   975                           
   976  0075                     Lcd_Write_Char@temp:	
   977                           ; 1 bytes @ 0x5
   978                           
   979  0075                     initOscilador@option:	
   980                           ; 1 bytes @ 0x5
   981                           
   982  0075                     write_RTC@minutes:	
   983                           ; 1 bytes @ 0x5
   984                           
   985  0075                     ___bmul@product:	
   986                           ; 1 bytes @ 0x5
   987                           
   988  0075                     strcat@to:	
   989                           ; 1 bytes @ 0x5
   990                           
   991  0075                     ___awdiv@dividend:	
   992                           ; 1 bytes @ 0x5
   993                           
   994  0075                     ___awmod@dividend:	
   995                           ; 2 bytes @ 0x5
   996                           
   997  0075                     ___lwdiv@dividend:	
   998                           ; 2 bytes @ 0x5
   999                           
  1000                           
  1001                           ; 2 bytes @ 0x5
  1002  0075                     	ds	1
  1003  0076                     Lcd_Cmd@a:	
  1004  0076                     Lcd_Write_Char@y:	
  1005                           ; 1 bytes @ 0x6
  1006                           
  1007  0076                     write_RTC@day:	
  1008                           ; 1 bytes @ 0x6
  1009                           
  1010  0076                     ___bmul@multiplier:	
  1011                           ; 1 bytes @ 0x6
  1012                           
  1013  0076                     strcat@cp:	
  1014                           ; 1 bytes @ 0x6
  1015                           
  1016                           
  1017                           ; 1 bytes @ 0x6
  1018  0076                     	ds	1
  1019  0077                     ??_get_hall:	
  1020  0077                     ??_get_tripwire:	
  1021                           ; 1 bytes @ 0x7
  1022                           
  1023  0077                     ??_get_PIR:	
  1024                           ; 1 bytes @ 0x7
  1025                           
  1026  0077                     ??_get_IR:	
  1027                           ; 1 bytes @ 0x7
  1028                           
  1029  0077                     ??_get_day:	
  1030                           ; 1 bytes @ 0x7
  1031                           
  1032  0077                     ??_Lcd_Clear:	
  1033                           ; 1 bytes @ 0x7
  1034                           
  1035  0077                     ?_Lcd_Set_Cursor:	
  1036                           ; 1 bytes @ 0x7
  1037                           
  1038  0077                     ??_Lcd_Shift_Right:	
  1039                           ; 1 bytes @ 0x7
  1040                           
  1041  0077                     ??_Lcd_Shift_Left:	
  1042                           ; 1 bytes @ 0x7
  1043                           
  1044  0077                     ??___awdiv:	
  1045                           ; 1 bytes @ 0x7
  1046                           
  1047  0077                     ??___awmod:	
  1048                           ; 1 bytes @ 0x7
  1049                           
  1050  0077                     ??___lwdiv:	
  1051                           ; 1 bytes @ 0x7
  1052                           
  1053  0077                     Lcd_Set_Cursor@b:	
  1054                           ; 1 bytes @ 0x7
  1055                           
  1056  0077                     Lcd_Write_Char@a:	
  1057                           ; 1 bytes @ 0x7
  1058                           
  1059  0077                     write_RTC@hour:	
  1060                           ; 1 bytes @ 0x7
  1061                           
  1062                           
  1063                           ; 1 bytes @ 0x7
  1064  0077                     	ds	1
  1065  0078                     ??_setup:	
  1066                           
  1067                           	psect	cstackBANK0
  1068  0047                     __pcstackBANK0:	
  1069                           ; 1 bytes @ 0x8
  1070                           
  1071  0047                     ??_write_RTC:	
  1072  0047                     ??_Lcd_Set_Cursor:	
  1073                           ; 1 bytes @ 0x0
  1074                           
  1075  0047                     ??_Lcd_Init:	
  1076                           ; 1 bytes @ 0x0
  1077                           
  1078  0047                     ?_Lcd_Write_String:	
  1079                           ; 1 bytes @ 0x0
  1080                           
  1081  0047                     ?___lldiv:	
  1082                           ; 1 bytes @ 0x0
  1083                           
  1084  0047                     ?___aldiv:	
  1085                           ; 4 bytes @ 0x0
  1086                           
  1087  0047                     ___awdiv@counter:	
  1088                           ; 4 bytes @ 0x0
  1089                           
  1090  0047                     ___awmod@counter:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093  0047                     ___lwdiv@counter:	
  1094                           ; 1 bytes @ 0x0
  1095                           
  1096  0047                     strcmp@r:	
  1097                           ; 1 bytes @ 0x0
  1098                           
  1099  0047                     I2C_Master_Read@temp:	
  1100                           ; 1 bytes @ 0x0
  1101                           
  1102  0047                     Lcd_Write_String@a:	
  1103                           ; 2 bytes @ 0x0
  1104                           
  1105  0047                     ___lldiv@divisor:	
  1106                           ; 2 bytes @ 0x0
  1107                           
  1108  0047                     ___aldiv@divisor:	
  1109                           ; 4 bytes @ 0x0
  1110                           
  1111                           
  1112                           ; 4 bytes @ 0x0
  1113  0047                     	ds	1
  1114  0048                     ___awdiv@sign:	
  1115  0048                     ___awmod@sign:	
  1116                           ; 1 bytes @ 0x1
  1117                           
  1118  0048                     strcmp@s1:	
  1119                           ; 1 bytes @ 0x1
  1120                           
  1121  0048                     ___lwdiv@quotient:	
  1122                           ; 1 bytes @ 0x1
  1123                           
  1124                           
  1125                           ; 2 bytes @ 0x1
  1126  0048                     	ds	1
  1127  0049                     ??_get_time:	
  1128  0049                     ??_Lcd_Write_String:	
  1129                           ; 1 bytes @ 0x2
  1130                           
  1131  0049                     Lcd_Set_Cursor@a:	
  1132                           ; 1 bytes @ 0x2
  1133                           
  1134  0049                     get_day@d:	
  1135                           ; 1 bytes @ 0x2
  1136                           
  1137  0049                     get_hall@key:	
  1138                           ; 1 bytes @ 0x2
  1139                           
  1140  0049                     get_tripwire@trip:	
  1141                           ; 1 bytes @ 0x2
  1142                           
  1143  0049                     get_PIR@PIR:	
  1144                           ; 1 bytes @ 0x2
  1145                           
  1146  0049                     get_IR@IR:	
  1147                           ; 1 bytes @ 0x2
  1148                           
  1149  0049                     ___awdiv@quotient:	
  1150                           ; 1 bytes @ 0x2
  1151                           
  1152                           
  1153                           ; 2 bytes @ 0x2
  1154  0049                     	ds	1
  1155  004A                     ?___lwmod:	
  1156  004A                     Lcd_Set_Cursor@z:	
  1157                           ; 2 bytes @ 0x3
  1158                           
  1159  004A                     ___lwmod@divisor:	
  1160                           ; 1 bytes @ 0x3
  1161                           
  1162                           
  1163                           ; 2 bytes @ 0x3
  1164  004A                     	ds	1
  1165  004B                     Lcd_Set_Cursor@y:	
  1166  004B                     get_time@hour:	
  1167                           ; 1 bytes @ 0x4
  1168                           
  1169  004B                     ___lldiv@dividend:	
  1170                           ; 1 bytes @ 0x4
  1171                           
  1172  004B                     ___aldiv@dividend:	
  1173                           ; 4 bytes @ 0x4
  1174                           
  1175                           
  1176                           ; 4 bytes @ 0x4
  1177  004B                     	ds	1
  1178  004C                     Lcd_Set_Cursor@temp:	
  1179  004C                     get_time@min:	
  1180                           ; 1 bytes @ 0x5
  1181                           
  1182  004C                     Lcd_Write_String@i:	
  1183                           ; 1 bytes @ 0x5
  1184                           
  1185  004C                     ___lwmod@dividend:	
  1186                           ; 2 bytes @ 0x5
  1187                           
  1188                           
  1189                           ; 2 bytes @ 0x5
  1190  004C                     	ds	1
  1191  004D                     get_time@time_string:	
  1192                           
  1193                           ; 1 bytes @ 0x6
  1194  004D                     	ds	1
  1195  004E                     ??___lwmod:	
  1196                           
  1197                           ; 1 bytes @ 0x7
  1198  004E                     	ds	1
  1199  004F                     ___aldiv@counter:	
  1200  004F                     ___lwmod@counter:	
  1201                           ; 1 bytes @ 0x8
  1202                           
  1203  004F                     ___lldiv@quotient:	
  1204                           ; 1 bytes @ 0x8
  1205                           
  1206                           
  1207                           ; 4 bytes @ 0x8
  1208  004F                     	ds	1
  1209  0050                     ?_sprintf:	
  1210  0050                     ___aldiv@sign:	
  1211                           ; 2 bytes @ 0x9
  1212                           
  1213  0050                     sprintf@f:	
  1214                           ; 1 bytes @ 0x9
  1215                           
  1216                           
  1217                           ; 2 bytes @ 0x9
  1218  0050                     	ds	1
  1219  0051                     ___aldiv@quotient:	
  1220                           
  1221                           ; 4 bytes @ 0xA
  1222  0051                     	ds	2
  1223  0053                     ___lldiv@counter:	
  1224                           
  1225                           ; 1 bytes @ 0xC
  1226  0053                     	ds	1
  1227  0054                     ??_sprintf:	
  1228  0054                     ?_I2C_Master_Init:	
  1229                           ; 1 bytes @ 0xD
  1230                           
  1231  0054                     I2C_Master_Init@c:	
  1232                           ; 1 bytes @ 0xD
  1233                           
  1234                           
  1235                           ; 4 bytes @ 0xD
  1236  0054                     	ds	1
  1237  0055                     ?_UART_Init:	
  1238  0055                     UART_Init@baudrate:	
  1239                           ; 1 bytes @ 0xE
  1240                           
  1241                           
  1242                           ; 4 bytes @ 0xE
  1243  0055                     	ds	3
  1244  0058                     sprintf@ap:	
  1245                           
  1246                           ; 1 bytes @ 0x11
  1247  0058                     	ds	1
  1248  0059                     ??_UART_Init:	
  1249  0059                     sprintf@flag:	
  1250                           ; 1 bytes @ 0x12
  1251                           
  1252                           
  1253                           ; 1 bytes @ 0x12
  1254  0059                     	ds	1
  1255  005A                     sprintf@prec:	
  1256                           
  1257                           ; 1 bytes @ 0x13
  1258  005A                     	ds	1
  1259  005B                     sprintf@val:	
  1260                           
  1261                           ; 2 bytes @ 0x14
  1262  005B                     	ds	2
  1263  005D                     sprintf@sp:	
  1264                           
  1265                           ; 1 bytes @ 0x16
  1266  005D                     	ds	1
  1267  005E                     sprintf@c:	
  1268                           
  1269                           ; 1 bytes @ 0x17
  1270  005E                     	ds	1
  1271  005F                     ??_get_temp:	
  1272                           
  1273                           ; 1 bytes @ 0x18
  1274  005F                     	ds	3
  1275  0062                     get_temp@decimal:	
  1276                           
  1277                           ; 3 bytes @ 0x1B
  1278  0062                     	ds	3
  1279  0065                     get_temp@tempMSB:	
  1280                           
  1281                           ; 1 bytes @ 0x1E
  1282  0065                     	ds	1
  1283  0066                     get_temp@temp_string:	
  1284                           
  1285                           ; 1 bytes @ 0x1F
  1286  0066                     	ds	1
  1287  0067                     get_temp@tempLSB:	
  1288                           
  1289                           ; 1 bytes @ 0x20
  1290  0067                     	ds	1
  1291                           
  1292                           	psect	maintext
  1293  003B                     __pmaintext:	
  1294 ;;
  1295 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1296 ;;
  1297 ;; *************** function _main *****************
  1298 ;; Defined at:
  1299 ;;		line 77 in file "mainMaster.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : B00/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1313 ;;      Params:         0       0       0       0       0
  1314 ;;      Locals:         0       0       0       0       0
  1315 ;;      Temps:          0       0       6       0       0
  1316 ;;      Totals:         0       0       6       0       0
  1317 ;;Total ram usage:        6 bytes
  1318 ;; Hardware stack levels required when called:    5
  1319 ;; This function calls:
  1320 ;;		_Lcd_Clear
  1321 ;;		_Lcd_Set_Cursor
  1322 ;;		_Lcd_Shift_Left
  1323 ;;		_Lcd_Shift_Right
  1324 ;;		_Lcd_Write_Char
  1325 ;;		_Lcd_Write_String
  1326 ;;		_UART_TX_Empty
  1327 ;;		_UART_Write
  1328 ;;		___awdiv
  1329 ;;		___awmod
  1330 ;;		___bmul
  1331 ;;		_close_door
  1332 ;;		_get_IR
  1333 ;;		_get_PIR
  1334 ;;		_get_day
  1335 ;;		_get_hall
  1336 ;;		_get_temp
  1337 ;;		_get_time
  1338 ;;		_get_tripwire
  1339 ;;		_open_door
  1340 ;;		_setup
  1341 ;;		_strcmp
  1342 ;;		_write_RTC
  1343 ;; This function is called by:
  1344 ;;		Startup code after reset
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347                           
  1348                           
  1349                           ;psect for function _main
  1350  003B                     _main:	
  1351                           
  1352                           ;mainMaster.c: 78:     setup();
  1353                           
  1354                           ;incstack = 0
  1355                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1356  003B  120A  158A  2362  120A  118A  	fcall	_setup
  1357                           
  1358                           ;mainMaster.c: 79:     state = 0;
  1359  0040  01FA               	clrf	_state
  1360                           
  1361                           ;mainMaster.c: 80:     seguridad = 1;
  1362  0041  1283               	bcf	3,5	;RP0=0, select bank0
  1363  0042  1303               	bcf	3,6	;RP1=0, select bank0
  1364  0043  01A9               	clrf	_seguridad
  1365  0044  0AA9               	incf	_seguridad,f
  1366                           
  1367                           ;mainMaster.c: 81:     Lcd_Clear();
  1368  0045  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  1369                           
  1370                           ;mainMaster.c: 82:     PORTAbits.RA7 = 0;
  1371  004A  1283               	bcf	3,5	;RP0=0, select bank0
  1372  004B  1303               	bcf	3,6	;RP1=0, select bank0
  1373  004C  1385               	bcf	5,7	;volatile
  1374                           
  1375                           ;mainMaster.c: 83:     Lcd_Set_Cursor(1,1);
  1376  004D  01F7               	clrf	Lcd_Set_Cursor@b
  1377  004E  0AF7               	incf	Lcd_Set_Cursor@b,f
  1378  004F  3001               	movlw	1
  1379  0050  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  1380                           
  1381                           ;mainMaster.c: 84:     Lcd_Write_String("Iniciando Sistema de Seguridad");
  1382  0055  301C               	movlw	low (STR_1| (0+32768))
  1383  0056  1283               	bcf	3,5	;RP0=0, select bank0
  1384  0057  1303               	bcf	3,6	;RP1=0, select bank0
  1385  0058  00C7               	movwf	Lcd_Write_String@a
  1386  0059  3087               	movlw	high (STR_1| (0+32768))
  1387  005A  00C8               	movwf	Lcd_Write_String@a+1
  1388  005B  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  1389                           
  1390                           ;mainMaster.c: 85:     for (k = 0; k < 16; k++){
  1391  0060  01F8               	clrf	_k
  1392  0061                     l3970:	
  1393                           
  1394                           ;mainMaster.c: 86:         Lcd_Shift_Left();
  1395  0061  160A  118A  26D5  120A  118A  	fcall	_Lcd_Shift_Left
  1396                           
  1397                           ;mainMaster.c: 87:         _delay((unsigned long)((300)*(8000000/4000.0)));
  1398  0066  3004               	movlw	4
  1399  0067  1683               	bsf	3,5	;RP0=1, select bank1
  1400  0068  1303               	bcf	3,6	;RP1=0, select bank1
  1401  0069  00A2               	movwf	(??_main^(0+128)+2)
  1402  006A  300C               	movlw	12
  1403  006B  00A1               	movwf	(??_main^(0+128)+1)
  1404  006C  3033               	movlw	51
  1405  006D  00A0               	movwf	??_main^(0+128)
  1406  006E                     u4867:	
  1407  006E  0BA0               	decfsz	??_main^(0+128),f
  1408  006F  286E               	goto	u4867
  1409  0070  0BA1               	decfsz	(??_main^(0+128)+1),f
  1410  0071  286E               	goto	u4867
  1411  0072  0BA2               	decfsz	(??_main^(0+128)+2),f
  1412  0073  286E               	goto	u4867
  1413                           
  1414                           ;mainMaster.c: 88:     }
  1415  0074  3001               	movlw	1
  1416  0075  1683               	bsf	3,5	;RP0=1, select bank1
  1417  0076  1303               	bcf	3,6	;RP1=0, select bank1
  1418  0077  00A0               	movwf	??_main^(0+128)
  1419  0078  0820               	movf	??_main^(0+128),w
  1420  0079  07F8               	addwf	_k,f
  1421  007A  3010               	movlw	16
  1422  007B  0278               	subwf	_k,w
  1423  007C  1C03               	skipc
  1424  007D  2861               	goto	l3970
  1425                           
  1426                           ;mainMaster.c: 89:     for (k = 0; k < 14; k++){
  1427  007E  01F8               	clrf	_k
  1428  007F                     l3984:	
  1429                           
  1430                           ;mainMaster.c: 90:         Lcd_Shift_Right();
  1431  007F  160A  118A  26E0  120A  118A  	fcall	_Lcd_Shift_Right
  1432                           
  1433                           ;mainMaster.c: 91:         _delay((unsigned long)((300)*(8000000/4000.0)));
  1434  0084  3004               	movlw	4
  1435  0085  1683               	bsf	3,5	;RP0=1, select bank1
  1436  0086  1303               	bcf	3,6	;RP1=0, select bank1
  1437  0087  00A2               	movwf	(??_main^(0+128)+2)
  1438  0088  300C               	movlw	12
  1439  0089  00A1               	movwf	(??_main^(0+128)+1)
  1440  008A  3033               	movlw	51
  1441  008B  00A0               	movwf	??_main^(0+128)
  1442  008C                     u4877:	
  1443  008C  0BA0               	decfsz	??_main^(0+128),f
  1444  008D  288C               	goto	u4877
  1445  008E  0BA1               	decfsz	(??_main^(0+128)+1),f
  1446  008F  288C               	goto	u4877
  1447  0090  0BA2               	decfsz	(??_main^(0+128)+2),f
  1448  0091  288C               	goto	u4877
  1449                           
  1450                           ;mainMaster.c: 92:     }
  1451  0092  3001               	movlw	1
  1452  0093  1683               	bsf	3,5	;RP0=1, select bank1
  1453  0094  1303               	bcf	3,6	;RP1=0, select bank1
  1454  0095  00A0               	movwf	??_main^(0+128)
  1455  0096  0820               	movf	??_main^(0+128),w
  1456  0097  07F8               	addwf	_k,f
  1457  0098  300E               	movlw	14
  1458  0099  0278               	subwf	_k,w
  1459  009A  1C03               	skipc
  1460  009B  287F               	goto	l3984
  1461                           
  1462                           ;mainMaster.c: 93:     _delay((unsigned long)((5000)*(8000000/4000.0)));
  1463  009C  3033               	movlw	51
  1464  009D  1683               	bsf	3,5	;RP0=1, select bank1
  1465  009E  1303               	bcf	3,6	;RP1=0, select bank1
  1466  009F  00A2               	movwf	(??_main^(0+128)+2)
  1467  00A0  30BB               	movlw	187
  1468  00A1  00A1               	movwf	(??_main^(0+128)+1)
  1469  00A2  30DF               	movlw	223
  1470  00A3  00A0               	movwf	??_main^(0+128)
  1471  00A4                     u4887:	
  1472  00A4  0BA0               	decfsz	??_main^(0+128),f
  1473  00A5  28A4               	goto	u4887
  1474  00A6  0BA1               	decfsz	(??_main^(0+128)+1),f
  1475  00A7  28A4               	goto	u4887
  1476  00A8  0BA2               	decfsz	(??_main^(0+128)+2),f
  1477  00A9  28A4               	goto	u4887
  1478                           
  1479                           ;mainMaster.c: 94:     Lcd_Clear();
  1480  00AA  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  1481  00AF                     l3996:	
  1482                           
  1483                           ;mainMaster.c: 99:         get_temp(temp);
  1484  00AF  303B               	movlw	(low (_temp| 0))& (0+255)
  1485  00B0  120A  158A  2595  120A  118A  	fcall	_get_temp
  1486                           
  1487                           ;mainMaster.c: 100:         door = get_hall();
  1488  00B5  160A  118A  27BA  120A  118A  	fcall	_get_hall
  1489  00BA  1683               	bsf	3,5	;RP0=1, select bank1
  1490  00BB  1303               	bcf	3,6	;RP1=0, select bank1
  1491  00BC  00A0               	movwf	??_main^(0+128)
  1492  00BD  0820               	movf	??_main^(0+128),w
  1493  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  1494  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  1495  00C0  00BA               	movwf	_door
  1496                           
  1497                           ;mainMaster.c: 101:         trip = get_tripwire();
  1498  00C1  160A  118A  27DD  120A  118A  	fcall	_get_tripwire
  1499  00C6  1683               	bsf	3,5	;RP0=1, select bank1
  1500  00C7  1303               	bcf	3,6	;RP1=0, select bank1
  1501  00C8  00A0               	movwf	??_main^(0+128)
  1502  00C9  0820               	movf	??_main^(0+128),w
  1503  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  1504  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  1505  00CC  00B9               	movwf	_trip
  1506                           
  1507                           ;mainMaster.c: 103:         PIR = get_PIR();
  1508  00CD  160A  118A  2797  120A  118A  	fcall	_get_PIR
  1509  00D2  1683               	bsf	3,5	;RP0=1, select bank1
  1510  00D3  1303               	bcf	3,6	;RP1=0, select bank1
  1511  00D4  00A0               	movwf	??_main^(0+128)
  1512  00D5  0820               	movf	??_main^(0+128),w
  1513  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  1514  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  1515  00D8  00B8               	movwf	_PIR
  1516                           
  1517                           ;mainMaster.c: 104:         IR = get_IR();
  1518  00D9  160A  118A  2774  120A  118A  	fcall	_get_IR
  1519  00DE  1683               	bsf	3,5	;RP0=1, select bank1
  1520  00DF  1303               	bcf	3,6	;RP1=0, select bank1
  1521  00E0  00A0               	movwf	??_main^(0+128)
  1522  00E1  0820               	movf	??_main^(0+128),w
  1523  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1524  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1525  00E4  00B7               	movwf	_IR
  1526                           
  1527                           ;mainMaster.c: 105:         get_time(time);
  1528  00E5  3041               	movlw	(low (_time| 0))& (0+255)
  1529  00E6  120A  158A  247D  120A  118A  	fcall	_get_time
  1530                           
  1531                           ;mainMaster.c: 106:         day1 = get_day();
  1532  00EB  120A  158A  2163  120A  118A  	fcall	_get_day
  1533  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  1534  00F1  1303               	bcf	3,6	;RP1=0, select bank1
  1535  00F2  00A0               	movwf	??_main^(0+128)
  1536  00F3  0820               	movf	??_main^(0+128),w
  1537  00F4  00F9               	movwf	_day1
  1538                           
  1539                           ;mainMaster.c: 107:         bank = get_tripwire();
  1540  00F5  160A  118A  27DD  120A  118A  	fcall	_get_tripwire
  1541  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  1542  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  1543  00FC  00A0               	movwf	??_main^(0+128)
  1544  00FD  0820               	movf	??_main^(0+128),w
  1545  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  1546  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  1547  0100  00AE               	movwf	_bank
  1548                           
  1549                           ;mainMaster.c: 110:         if(PORTDbits.RD7 == 1){
  1550  0101  1F88               	btfss	8,7	;volatile
  1551  0102  293E               	goto	l323
  1552                           
  1553                           ;mainMaster.c: 111:             if (bank == 2){
  1554  0103  3002               	movlw	2
  1555  0104  062E               	xorwf	_bank,w
  1556  0105  1D03               	btfss	3,2
  1557  0106  2922               	goto	l4026
  1558                           
  1559                           ;mainMaster.c: 112:                 if (change1 == 0){
  1560  0107  0833               	movf	_change1,w
  1561  0108  1D03               	btfss	3,2
  1562  0109  2940               	goto	l4040
  1563                           
  1564                           ;mainMaster.c: 115:                     open_door();
  1565  010A  160A  118A  273A  120A  118A  	fcall	_open_door
  1566                           
  1567                           ;mainMaster.c: 116:                     j = 0;
  1568  010F  1283               	bcf	3,5	;RP0=0, select bank0
  1569  0110  1303               	bcf	3,6	;RP1=0, select bank0
  1570  0111  01B5               	clrf	_j
  1571  0112                     l4024:	
  1572                           ;mainMaster.c: 117:                     while(j < 50){
  1573                           
  1574                           
  1575                           ;mainMaster.c: 117:                     while(j < 50){
  1576  0112  3032               	movlw	50
  1577  0113  0235               	subwf	_j,w
  1578  0114  1803               	btfsc	3,0
  1579  0115  291F               	goto	l328
  1580                           
  1581                           ;mainMaster.c: 118:                         j++;
  1582  0116  3001               	movlw	1
  1583  0117  1683               	bsf	3,5	;RP0=1, select bank1
  1584  0118  1303               	bcf	3,6	;RP1=0, select bank1
  1585  0119  00A0               	movwf	??_main^(0+128)
  1586  011A  0820               	movf	??_main^(0+128),w
  1587  011B  1283               	bcf	3,5	;RP0=0, select bank0
  1588  011C  1303               	bcf	3,6	;RP1=0, select bank0
  1589  011D  07B5               	addwf	_j,f
  1590  011E  2912               	goto	l4024
  1591  011F                     l328:	
  1592                           
  1593                           ;mainMaster.c: 121:                     change1 = 1;
  1594  011F  01B3               	clrf	_change1
  1595  0120  0AB3               	incf	_change1,f
  1596  0121  2940               	goto	l4040
  1597  0122                     l4026:	
  1598  0122  3003               	movlw	3
  1599  0123  062E               	xorwf	_bank,w
  1600  0124  1D03               	btfss	3,2
  1601  0125  2940               	goto	l4040
  1602                           
  1603                           ;mainMaster.c: 124:                 if (change1 == 0){
  1604  0126  0833               	movf	_change1,w
  1605  0127  1D03               	btfss	3,2
  1606  0128  2940               	goto	l4040
  1607                           
  1608                           ;mainMaster.c: 127:                     close_door();
  1609  0129  160A  118A  271F  120A  118A  	fcall	_close_door
  1610                           
  1611                           ;mainMaster.c: 128:                     j = 0;
  1612  012E  1283               	bcf	3,5	;RP0=0, select bank0
  1613  012F  1303               	bcf	3,6	;RP1=0, select bank0
  1614  0130  01B5               	clrf	_j
  1615  0131                     l4036:	
  1616                           ;mainMaster.c: 129:                     while(j < 50){
  1617                           
  1618                           
  1619                           ;mainMaster.c: 129:                     while(j < 50){
  1620  0131  3032               	movlw	50
  1621  0132  0235               	subwf	_j,w
  1622  0133  1803               	btfsc	3,0
  1623  0134  291F               	goto	l328
  1624                           
  1625                           ;mainMaster.c: 130:                         j++;
  1626  0135  3001               	movlw	1
  1627  0136  1683               	bsf	3,5	;RP0=1, select bank1
  1628  0137  1303               	bcf	3,6	;RP1=0, select bank1
  1629  0138  00A0               	movwf	??_main^(0+128)
  1630  0139  0820               	movf	??_main^(0+128),w
  1631  013A  1283               	bcf	3,5	;RP0=0, select bank0
  1632  013B  1303               	bcf	3,6	;RP1=0, select bank0
  1633  013C  07B5               	addwf	_j,f
  1634  013D  2931               	goto	l4036
  1635  013E                     l323:	
  1636                           ;mainMaster.c: 136:         } else if(PORTDbits.RD7 == 0){
  1637                           
  1638  013E  1F88               	btfss	8,7	;volatile
  1639                           
  1640                           ;mainMaster.c: 137:             change1 = 0;
  1641  013F  01B3               	clrf	_change1
  1642  0140                     l4040:	
  1643                           
  1644                           ;mainMaster.c: 140:         if (alarm == 0 & seguridad == 1){
  1645  0140  082F               	movf	_alarm,w
  1646  0141  1D03               	btfss	3,2
  1647  0142  2950               	goto	l337
  1648  0143  0329               	decf	_seguridad,w
  1649  0144  1D03               	btfss	3,2
  1650  0145  2950               	goto	l337
  1651                           
  1652                           ;mainMaster.c: 141:             alarm = trip | PIR | IR;
  1653  0146  0839               	movf	_trip,w
  1654  0147  0438               	iorwf	_PIR,w
  1655  0148  0437               	iorwf	_IR,w
  1656  0149  1683               	bsf	3,5	;RP0=1, select bank1
  1657  014A  1303               	bcf	3,6	;RP1=0, select bank1
  1658  014B  00A0               	movwf	??_main^(0+128)
  1659  014C  0820               	movf	??_main^(0+128),w
  1660  014D  1283               	bcf	3,5	;RP0=0, select bank0
  1661  014E  1303               	bcf	3,6	;RP1=0, select bank0
  1662  014F  00AF               	movwf	_alarm
  1663  0150                     l337:	
  1664                           ;mainMaster.c: 142:         }
  1665                           
  1666                           
  1667                           ;mainMaster.c: 146:         if (alarm == 1){
  1668  0150  032F               	decf	_alarm,w
  1669  0151  1D03               	btfss	3,2
  1670  0152  2961               	goto	l338
  1671                           
  1672                           ;mainMaster.c: 148:             if (change2 == 0){
  1673  0153  0832               	movf	_change2,w
  1674  0154  1D03               	btfss	3,2
  1675  0155  2963               	goto	l4056
  1676                           
  1677                           ;mainMaster.c: 149:                 change2 = 1;
  1678  0156  01B2               	clrf	_change2
  1679  0157  0AB2               	incf	_change2,f
  1680                           
  1681                           ;mainMaster.c: 150:                 close_door();
  1682  0158  160A  118A  271F  120A  118A  	fcall	_close_door
  1683                           
  1684                           ;mainMaster.c: 151:                 PORTAbits.RA6 = 1;
  1685  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1686  015E  1303               	bcf	3,6	;RP1=0, select bank0
  1687  015F  1705               	bsf	5,6	;volatile
  1688  0160  2963               	goto	l4056
  1689  0161                     l338:	
  1690                           ;mainMaster.c: 155:         else {
  1691                           
  1692                           
  1693                           ;mainMaster.c: 156:             PORTAbits.RA6 = 0;
  1694  0161  1305               	bcf	5,6	;volatile
  1695                           
  1696                           ;mainMaster.c: 157:             change2 = 0;
  1697  0162  01B2               	clrf	_change2
  1698  0163                     l4056:	
  1699                           
  1700                           ;mainMaster.c: 161:         if (PORTDbits.RD6 == 1){
  1701  0163  1F08               	btfss	8,6	;volatile
  1702  0164  2972               	goto	l4068
  1703                           
  1704                           ;mainMaster.c: 162:             if (change3 == 0){
  1705  0165  0831               	movf	_change3,w
  1706  0166  1D03               	btfss	3,2
  1707  0167  2973               	goto	l4070
  1708                           
  1709                           ;mainMaster.c: 163:                 if (alarm == 0){
  1710  0168  082F               	movf	_alarm,w
  1711  0169  1D03               	btfss	3,2
  1712  016A  296E               	goto	l4064
  1713                           
  1714                           ;mainMaster.c: 164:                     alarm = 1;
  1715  016B  01AF               	clrf	_alarm
  1716  016C  0AAF               	incf	_alarm,f
  1717                           
  1718                           ;mainMaster.c: 165:                 }else {
  1719  016D  296F               	goto	l4066
  1720  016E                     l4064:	
  1721                           
  1722                           ;mainMaster.c: 166:                     alarm = 0;
  1723  016E  01AF               	clrf	_alarm
  1724  016F                     l4066:	
  1725                           
  1726                           ;mainMaster.c: 168:                 change3 = 1;
  1727  016F  01B1               	clrf	_change3
  1728  0170  0AB1               	incf	_change3,f
  1729  0171  2973               	goto	l4070
  1730  0172                     l4068:	
  1731                           
  1732                           ;mainMaster.c: 173:             change3 = 0;
  1733  0172  01B1               	clrf	_change3
  1734  0173                     l4070:	
  1735                           
  1736                           ;mainMaster.c: 177:         SSPCONbits.SSPEN = 0;
  1737  0173  1294               	bcf	20,5	;volatile
  1738                           
  1739                           ;mainMaster.c: 178:         RCSTAbits.SPEN = 1;
  1740  0174  1798               	bsf	24,7	;volatile
  1741                           
  1742                           ;mainMaster.c: 180:         if (UART_TX_Empty()){
  1743  0175  160A  118A  268C  120A  118A  	fcall	_UART_TX_Empty
  1744  017A  3A00               	xorlw	0
  1745  017B  1903               	skipnz
  1746  017C  2A2F               	goto	l4104
  1747                           
  1748                           ;mainMaster.c: 181:             UART_Write(temp[0]);
  1749  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1750  017E  1303               	bcf	3,6	;RP1=0, select bank0
  1751  017F  083B               	movf	_temp,w
  1752  0180  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1753                           
  1754                           ;mainMaster.c: 182:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1755  0185  3003               	movlw	3
  1756  0186  1683               	bsf	3,5	;RP0=1, select bank1
  1757  0187  1303               	bcf	3,6	;RP1=0, select bank1
  1758  0188  00A1               	movwf	(??_main^(0+128)+1)
  1759  0189  3097               	movlw	151
  1760  018A  00A0               	movwf	??_main^(0+128)
  1761  018B                     u4897:	
  1762  018B  0BA0               	decfsz	??_main^(0+128),f
  1763  018C  298B               	goto	u4897
  1764  018D  0BA1               	decfsz	(??_main^(0+128)+1),f
  1765  018E  298B               	goto	u4897
  1766                           
  1767                           ;mainMaster.c: 183:             UART_Write(temp[1]);
  1768  018F  1283               	bcf	3,5	;RP0=0, select bank0
  1769  0190  1303               	bcf	3,6	;RP1=0, select bank0
  1770  0191  083C               	movf	_temp+1,w
  1771  0192  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1772                           
  1773                           ;mainMaster.c: 184:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1774  0197  3003               	movlw	3
  1775  0198  1683               	bsf	3,5	;RP0=1, select bank1
  1776  0199  1303               	bcf	3,6	;RP1=0, select bank1
  1777  019A  00A1               	movwf	(??_main^(0+128)+1)
  1778  019B  3097               	movlw	151
  1779  019C  00A0               	movwf	??_main^(0+128)
  1780  019D                     u4907:	
  1781  019D  0BA0               	decfsz	??_main^(0+128),f
  1782  019E  299D               	goto	u4907
  1783  019F  0BA1               	decfsz	(??_main^(0+128)+1),f
  1784  01A0  299D               	goto	u4907
  1785                           
  1786                           ;mainMaster.c: 185:             UART_Write(temp[2]);
  1787  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  1788  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  1789  01A3  083D               	movf	_temp+2,w
  1790  01A4  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1791                           
  1792                           ;mainMaster.c: 186:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1793  01A9  3003               	movlw	3
  1794  01AA  1683               	bsf	3,5	;RP0=1, select bank1
  1795  01AB  1303               	bcf	3,6	;RP1=0, select bank1
  1796  01AC  00A1               	movwf	(??_main^(0+128)+1)
  1797  01AD  3097               	movlw	151
  1798  01AE  00A0               	movwf	??_main^(0+128)
  1799  01AF                     u4917:	
  1800  01AF  0BA0               	decfsz	??_main^(0+128),f
  1801  01B0  29AF               	goto	u4917
  1802  01B1  0BA1               	decfsz	(??_main^(0+128)+1),f
  1803  01B2  29AF               	goto	u4917
  1804                           
  1805                           ;mainMaster.c: 187:             UART_Write(temp[3]);
  1806  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  1807  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  1808  01B5  083E               	movf	_temp+3,w
  1809  01B6  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1810                           
  1811                           ;mainMaster.c: 188:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1812  01BB  3003               	movlw	3
  1813  01BC  1683               	bsf	3,5	;RP0=1, select bank1
  1814  01BD  1303               	bcf	3,6	;RP1=0, select bank1
  1815  01BE  00A1               	movwf	(??_main^(0+128)+1)
  1816  01BF  3097               	movlw	151
  1817  01C0  00A0               	movwf	??_main^(0+128)
  1818  01C1                     u4927:	
  1819  01C1  0BA0               	decfsz	??_main^(0+128),f
  1820  01C2  29C1               	goto	u4927
  1821  01C3  0BA1               	decfsz	(??_main^(0+128)+1),f
  1822  01C4  29C1               	goto	u4927
  1823                           
  1824                           ;mainMaster.c: 189:             UART_Write(temp[4]);
  1825  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  1826  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  1827  01C7  083F               	movf	_temp+4,w
  1828  01C8  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1829                           
  1830                           ;mainMaster.c: 190:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1831  01CD  3003               	movlw	3
  1832  01CE  1683               	bsf	3,5	;RP0=1, select bank1
  1833  01CF  1303               	bcf	3,6	;RP1=0, select bank1
  1834  01D0  00A1               	movwf	(??_main^(0+128)+1)
  1835  01D1  3097               	movlw	151
  1836  01D2  00A0               	movwf	??_main^(0+128)
  1837  01D3                     u4937:	
  1838  01D3  0BA0               	decfsz	??_main^(0+128),f
  1839  01D4  29D3               	goto	u4937
  1840  01D5  0BA1               	decfsz	(??_main^(0+128)+1),f
  1841  01D6  29D3               	goto	u4937
  1842                           
  1843                           ;mainMaster.c: 191:             UART_Write(door);
  1844  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  1845  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  1846  01D9  083A               	movf	_door,w
  1847  01DA  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1848                           
  1849                           ;mainMaster.c: 192:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1850  01DF  3003               	movlw	3
  1851  01E0  1683               	bsf	3,5	;RP0=1, select bank1
  1852  01E1  1303               	bcf	3,6	;RP1=0, select bank1
  1853  01E2  00A1               	movwf	(??_main^(0+128)+1)
  1854  01E3  3097               	movlw	151
  1855  01E4  00A0               	movwf	??_main^(0+128)
  1856  01E5                     u4947:	
  1857  01E5  0BA0               	decfsz	??_main^(0+128),f
  1858  01E6  29E5               	goto	u4947
  1859  01E7  0BA1               	decfsz	(??_main^(0+128)+1),f
  1860  01E8  29E5               	goto	u4947
  1861                           
  1862                           ;mainMaster.c: 193:             UART_Write(alarm);
  1863  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  1864  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  1865  01EB  082F               	movf	_alarm,w
  1866  01EC  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1867                           
  1868                           ;mainMaster.c: 194:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1869  01F1  3003               	movlw	3
  1870  01F2  1683               	bsf	3,5	;RP0=1, select bank1
  1871  01F3  1303               	bcf	3,6	;RP1=0, select bank1
  1872  01F4  00A1               	movwf	(??_main^(0+128)+1)
  1873  01F5  3097               	movlw	151
  1874  01F6  00A0               	movwf	??_main^(0+128)
  1875  01F7                     u4957:	
  1876  01F7  0BA0               	decfsz	??_main^(0+128),f
  1877  01F8  29F7               	goto	u4957
  1878  01F9  0BA1               	decfsz	(??_main^(0+128)+1),f
  1879  01FA  29F7               	goto	u4957
  1880                           
  1881                           ;mainMaster.c: 195:             UART_Write(bank);
  1882  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  1883  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  1884  01FD  082E               	movf	_bank,w
  1885  01FE  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1886                           
  1887                           ;mainMaster.c: 196:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1888  0203  3003               	movlw	3
  1889  0204  1683               	bsf	3,5	;RP0=1, select bank1
  1890  0205  1303               	bcf	3,6	;RP1=0, select bank1
  1891  0206  00A1               	movwf	(??_main^(0+128)+1)
  1892  0207  3097               	movlw	151
  1893  0208  00A0               	movwf	??_main^(0+128)
  1894  0209                     u4967:	
  1895  0209  0BA0               	decfsz	??_main^(0+128),f
  1896  020A  2A09               	goto	u4967
  1897  020B  0BA1               	decfsz	(??_main^(0+128)+1),f
  1898  020C  2A09               	goto	u4967
  1899                           
  1900                           ;mainMaster.c: 197:             UART_Write(seguridad);
  1901  020D  1283               	bcf	3,5	;RP0=0, select bank0
  1902  020E  1303               	bcf	3,6	;RP1=0, select bank0
  1903  020F  0829               	movf	_seguridad,w
  1904  0210  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1905                           
  1906                           ;mainMaster.c: 198:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1907  0215  3003               	movlw	3
  1908  0216  1683               	bsf	3,5	;RP0=1, select bank1
  1909  0217  1303               	bcf	3,6	;RP1=0, select bank1
  1910  0218  00A1               	movwf	(??_main^(0+128)+1)
  1911  0219  3097               	movlw	151
  1912  021A  00A0               	movwf	??_main^(0+128)
  1913  021B                     u4977:	
  1914  021B  0BA0               	decfsz	??_main^(0+128),f
  1915  021C  2A1B               	goto	u4977
  1916  021D  0BA1               	decfsz	(??_main^(0+128)+1),f
  1917  021E  2A1B               	goto	u4977
  1918                           
  1919                           ;mainMaster.c: 199:             UART_Write('A');
  1920  021F  3041               	movlw	65
  1921  0220  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1922                           
  1923                           ;mainMaster.c: 200:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1924  0225  3003               	movlw	3
  1925  0226  1683               	bsf	3,5	;RP0=1, select bank1
  1926  0227  1303               	bcf	3,6	;RP1=0, select bank1
  1927  0228  00A1               	movwf	(??_main^(0+128)+1)
  1928  0229  3097               	movlw	151
  1929  022A  00A0               	movwf	??_main^(0+128)
  1930  022B                     u4987:	
  1931  022B  0BA0               	decfsz	??_main^(0+128),f
  1932  022C  2A2B               	goto	u4987
  1933  022D  0BA1               	decfsz	(??_main^(0+128)+1),f
  1934  022E  2A2B               	goto	u4987
  1935  022F                     l4104:	
  1936                           
  1937                           ;mainMaster.c: 203:         RCSTAbits.SPEN = 0;
  1938  022F  1283               	bcf	3,5	;RP0=0, select bank0
  1939  0230  1303               	bcf	3,6	;RP1=0, select bank0
  1940  0231  1398               	bcf	24,7	;volatile
  1941                           
  1942                           ;mainMaster.c: 204:         SSPCONbits.SSPEN = 1;
  1943  0232  1694               	bsf	20,5	;volatile
  1944                           
  1945                           ;mainMaster.c: 206:         if (door == 1){
  1946  0233  033A               	decf	_door,w
  1947  0234  1D03               	btfss	3,2
  1948  0235  2A38               	goto	l4112
  1949                           
  1950                           ;mainMaster.c: 207:             val = 8;
  1951  0236  3008               	movlw	8
  1952  0237  2A3C               	goto	L1
  1953  0238                     l4112:	
  1954                           ;mainMaster.c: 208:         } else if (door == 0){
  1955                           
  1956  0238  083A               	movf	_door,w
  1957  0239  1D03               	btfss	3,2
  1958  023A  2A75               	goto	l4134
  1959                           
  1960                           ;mainMaster.c: 209:             val = 16;
  1961  023B  3010               	movlw	16
  1962  023C                     L1:	
  1963  023C  1683               	bsf	3,5	;RP0=1, select bank1
  1964  023D  1303               	bcf	3,6	;RP1=0, select bank1
  1965  023E  00A0               	movwf	??_main^(0+128)
  1966  023F  0820               	movf	??_main^(0+128),w
  1967  0240  1283               	bcf	3,5	;RP0=0, select bank0
  1968  0241  1303               	bcf	3,6	;RP1=0, select bank0
  1969  0242  00AC               	movwf	_val
  1970  0243  2A75               	goto	l4134
  1971  0244                     l4116:	
  1972                           
  1973                           ;mainMaster.c: 214:                 day2 = "LUNES    ";
  1974  0244  3079               	movlw	low (STR_2| (0+32768))
  1975  0245  1283               	bcf	3,5	;RP0=0, select bank0
  1976  0246  1303               	bcf	3,6	;RP1=0, select bank0
  1977  0247  00A5               	movwf	_day2
  1978  0248  3087               	movlw	high (STR_2| (0+32768))
  1979  0249  2A73               	goto	L8
  1980  024A                     l4118:	
  1981                           ;mainMaster.c: 215:                 break;
  1982                           
  1983                           
  1984                           ;mainMaster.c: 217:                 day2 = "MARTES   ";
  1985  024A  308D               	movlw	low (STR_3| (0+32768))
  1986  024B  1283               	bcf	3,5	;RP0=0, select bank0
  1987  024C  1303               	bcf	3,6	;RP1=0, select bank0
  1988  024D  00A5               	movwf	_day2
  1989  024E  3087               	movlw	high (STR_3| (0+32768))
  1990  024F  2A73               	goto	L8
  1991  0250                     l4120:	
  1992                           ;mainMaster.c: 218:                 break;
  1993                           
  1994                           
  1995                           ;mainMaster.c: 220:                 day2 = "MIERCOLES";
  1996  0250  30BF               	movlw	low (STR_4| (0+32768))
  1997  0251  1283               	bcf	3,5	;RP0=0, select bank0
  1998  0252  1303               	bcf	3,6	;RP1=0, select bank0
  1999  0253  00A5               	movwf	_day2
  2000  0254  3087               	movlw	high (STR_4| (0+32768))
  2001  0255  2A73               	goto	L8
  2002  0256                     l4122:	
  2003                           ;mainMaster.c: 221:                 break;
  2004                           
  2005                           
  2006                           ;mainMaster.c: 223:                 day2 = "JUEVES   ";
  2007  0256  3097               	movlw	low (STR_5| (0+32768))
  2008  0257  1283               	bcf	3,5	;RP0=0, select bank0
  2009  0258  1303               	bcf	3,6	;RP1=0, select bank0
  2010  0259  00A5               	movwf	_day2
  2011  025A  3087               	movlw	high (STR_5| (0+32768))
  2012  025B  2A73               	goto	L8
  2013  025C                     l4124:	
  2014                           ;mainMaster.c: 224:                 break;
  2015                           
  2016                           
  2017                           ;mainMaster.c: 226:                 day2 = "VIERNES  ";
  2018  025C  30AB               	movlw	low (STR_6| (0+32768))
  2019  025D  1283               	bcf	3,5	;RP0=0, select bank0
  2020  025E  1303               	bcf	3,6	;RP1=0, select bank0
  2021  025F  00A5               	movwf	_day2
  2022  0260  3087               	movlw	high (STR_6| (0+32768))
  2023  0261  2A73               	goto	L8
  2024  0262                     l4126:	
  2025                           ;mainMaster.c: 227:                 break;
  2026                           
  2027                           
  2028                           ;mainMaster.c: 229:                 day2 = "SABADO   ";
  2029  0262  3083               	movlw	low (STR_7| (0+32768))
  2030  0263  1283               	bcf	3,5	;RP0=0, select bank0
  2031  0264  1303               	bcf	3,6	;RP1=0, select bank0
  2032  0265  00A5               	movwf	_day2
  2033  0266  3087               	movlw	high (STR_7| (0+32768))
  2034  0267  2A73               	goto	L8
  2035  0268                     l4128:	
  2036                           ;mainMaster.c: 230:                 break;
  2037                           
  2038                           
  2039                           ;mainMaster.c: 232:                 day2 = "DOMINGO  ";
  2040  0268  30A1               	movlw	low (STR_8| (0+32768))
  2041  0269  1283               	bcf	3,5	;RP0=0, select bank0
  2042  026A  1303               	bcf	3,6	;RP1=0, select bank0
  2043  026B  00A5               	movwf	_day2
  2044  026C  3087               	movlw	high (STR_8| (0+32768))
  2045  026D  2A73               	goto	L8
  2046  026E                     l4130:	
  2047                           ;mainMaster.c: 233:                 break;
  2048                           
  2049                           
  2050                           ;mainMaster.c: 235:                 day2 = "         ";
  2051  026E  303E               	movlw	low ((STR_29+3)| (0+32768))
  2052  026F  1283               	bcf	3,5	;RP0=0, select bank0
  2053  0270  1303               	bcf	3,6	;RP1=0, select bank0
  2054  0271  00A5               	movwf	_day2
  2055  0272  3087               	movlw	high ((STR_29+3)| (0+32768))
  2056  0273                     L8:	
  2057  0273  00A6               	movwf	_day2+1
  2058                           
  2059                           ;mainMaster.c: 236:                 break;
  2060  0274  2A96               	goto	l4136
  2061  0275                     l4134:	
  2062  0275  0879               	movf	_day1,w
  2063  0276  1683               	bsf	3,5	;RP0=1, select bank1
  2064  0277  1303               	bcf	3,6	;RP1=0, select bank1
  2065  0278  00A0               	movwf	??_main^(0+128)
  2066  0279  01A1               	clrf	(??_main^(0+128)+1)
  2067                           
  2068                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2069                           ; Switch size 1, requested type "simple"
  2070                           ; Number of cases is 1, Range of values is 0 to 0
  2071                           ; switch strategies available:
  2072                           ; Name         Instructions Cycles
  2073                           ; simple_byte            4     3 (average)
  2074                           ; direct_byte           11     8 (fixed)
  2075                           ; jumptable            260     6 (fixed)
  2076                           ;	Chosen strategy is simple_byte
  2077  027A  0821               	movf	(??_main+1)^(0+128),w
  2078  027B  3A00               	xorlw	0	; case 0
  2079  027C  1903               	skipnz
  2080  027D  2A7F               	goto	l4486
  2081  027E  2A6E               	goto	l4130
  2082  027F                     l4486:	
  2083                           
  2084                           ; Switch size 1, requested type "simple"
  2085                           ; Number of cases is 7, Range of values is 1 to 7
  2086                           ; switch strategies available:
  2087                           ; Name         Instructions Cycles
  2088                           ; simple_byte           22    12 (average)
  2089                           ; direct_byte           32    11 (fixed)
  2090                           ; jumptable            263     9 (fixed)
  2091                           ;	Chosen strategy is simple_byte
  2092  027F  0820               	movf	??_main^(0+128),w
  2093  0280  3A01               	xorlw	1	; case 1
  2094  0281  1903               	skipnz
  2095  0282  2A44               	goto	l4116
  2096  0283  3A03               	xorlw	3	; case 2
  2097  0284  1903               	skipnz
  2098  0285  2A4A               	goto	l4118
  2099  0286  3A01               	xorlw	1	; case 3
  2100  0287  1903               	skipnz
  2101  0288  2A50               	goto	l4120
  2102  0289  3A07               	xorlw	7	; case 4
  2103  028A  1903               	skipnz
  2104  028B  2A56               	goto	l4122
  2105  028C  3A01               	xorlw	1	; case 5
  2106  028D  1903               	skipnz
  2107  028E  2A5C               	goto	l4124
  2108  028F  3A03               	xorlw	3	; case 6
  2109  0290  1903               	skipnz
  2110  0291  2A62               	goto	l4126
  2111  0292  3A01               	xorlw	1	; case 7
  2112  0293  1903               	skipnz
  2113  0294  2A68               	goto	l4128
  2114  0295  2A6E               	goto	l4130
  2115  0296                     l4136:	
  2116                           
  2117                           ;mainMaster.c: 240:         if (strcmp(temp,"23.50") > 0){
  2118  0296  3016               	movlw	low (STR_10| (0+32768))
  2119  0297  00F3               	movwf	strcmp@s2
  2120  0298  3088               	movlw	high (STR_10| (0+32768))
  2121  0299  00F4               	movwf	strcmp@s2+1
  2122  029A  303B               	movlw	(low (_temp| 0))& (0+255)
  2123  029B  120A  158A  208E  120A  118A  	fcall	_strcmp
  2124  02A0  0874               	movf	?_strcmp+1,w
  2125  02A1  3A80               	xorlw	128
  2126  02A2  00FF               	movwf	127
  2127  02A3  3080               	movlw	128
  2128  02A4  027F               	subwf	127,w
  2129  02A5  1D03               	skipz
  2130  02A6  2AA9               	goto	u4305
  2131  02A7  3001               	movlw	1
  2132  02A8  0273               	subwf	?_strcmp,w
  2133  02A9                     u4305:	
  2134  02A9  1C03               	skipc
  2135  02AA  2AAF               	goto	l360
  2136                           
  2137                           ;mainMaster.c: 241:             PORTAbits.RA0 = 1;
  2138  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  2139  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  2140  02AD  1405               	bsf	5,0	;volatile
  2141                           
  2142                           ;mainMaster.c: 242:         } else {
  2143  02AE  2AB2               	goto	l4140
  2144  02AF                     l360:	
  2145                           
  2146                           ;mainMaster.c: 243:             PORTAbits.RA0 = 0;
  2147  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  2148  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  2149  02B1  1005               	bcf	5,0	;volatile
  2150  02B2                     l4140:	
  2151                           
  2152                           ;mainMaster.c: 246:         if ((strcmp(time, "22:00") == 0) & ((day1 != 6) | (day1 != 7
      +                          ))){
  2153  02B2  3010               	movlw	low (STR_11| (0+32768))
  2154  02B3  00F3               	movwf	strcmp@s2
  2155  02B4  3088               	movlw	high (STR_11| (0+32768))
  2156  02B5  00F4               	movwf	strcmp@s2+1
  2157  02B6  3041               	movlw	(low (_time| 0))& (0+255)
  2158  02B7  120A  158A  208E  120A  118A  	fcall	_strcmp
  2159  02BC  0873               	movf	?_strcmp,w
  2160  02BD  0474               	iorwf	?_strcmp+1,w
  2161  02BE  1D03               	btfss	3,2
  2162  02BF  2AC8               	goto	l4148
  2163  02C0  3006               	movlw	6
  2164  02C1  0679               	xorwf	_day1,w
  2165  02C2  1D03               	btfss	3,2
  2166  02C3  2ADE               	goto	l4146
  2167  02C4  3007               	movlw	7
  2168  02C5  0679               	xorwf	_day1,w
  2169  02C6  1D03               	btfss	3,2
  2170  02C7  2ADE               	goto	l4146
  2171  02C8                     l4148:	
  2172                           ;mainMaster.c: 248:         } else if ((strcmp(time, "21:00") == 0) & ((day1 == 6) | (da
      +                          y1 == 7))){
  2173                           
  2174  02C8  300A               	movlw	low (STR_12| (0+32768))
  2175  02C9  00F3               	movwf	strcmp@s2
  2176  02CA  3088               	movlw	high (STR_12| (0+32768))
  2177  02CB  00F4               	movwf	strcmp@s2+1
  2178  02CC  3041               	movlw	(low (_time| 0))& (0+255)
  2179  02CD  120A  158A  208E  120A  118A  	fcall	_strcmp
  2180  02D2  0873               	movf	?_strcmp,w
  2181  02D3  0474               	iorwf	?_strcmp+1,w
  2182  02D4  1D03               	btfss	3,2
  2183  02D5  2AE3               	goto	l4156
  2184  02D6  3006               	movlw	6
  2185  02D7  0679               	xorwf	_day1,w
  2186  02D8  1903               	btfsc	3,2
  2187  02D9  2ADE               	goto	l4146
  2188  02DA  3007               	movlw	7
  2189  02DB  0679               	xorwf	_day1,w
  2190  02DC  1D03               	btfss	3,2
  2191  02DD  2AE3               	goto	l4156
  2192  02DE                     l4146:	
  2193                           
  2194                           ;mainMaster.c: 247:             close_door();
  2195  02DE  160A  118A  271F  120A  118A  	fcall	_close_door
  2196  02E3                     l4156:	
  2197                           
  2198                           ;mainMaster.c: 253:         if(PORTCbits.RC0 == 1){
  2199  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  2200  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  2201  02E5  1C07               	btfss	7,0	;volatile
  2202  02E6  2B10               	goto	l4174
  2203                           
  2204                           ;mainMaster.c: 254:             if (change == 0){
  2205  02E7  0834               	movf	_change,w
  2206  02E8  1D03               	btfss	3,2
  2207  02E9  2B11               	goto	l4176
  2208                           
  2209                           ;mainMaster.c: 255:                 state++;
  2210  02EA  3001               	movlw	1
  2211  02EB  1683               	bsf	3,5	;RP0=1, select bank1
  2212  02EC  1303               	bcf	3,6	;RP1=0, select bank1
  2213  02ED  00A0               	movwf	??_main^(0+128)
  2214  02EE  0820               	movf	??_main^(0+128),w
  2215  02EF  07FA               	addwf	_state,f
  2216                           
  2217                           ;mainMaster.c: 256:                 if (state == 4){
  2218  02F0  3004               	movlw	4
  2219  02F1  067A               	xorwf	_state,w
  2220  02F2  1903               	btfsc	3,2
  2221                           
  2222                           ;mainMaster.c: 257:                     k = 0;
  2223  02F3  01F8               	clrf	_k
  2224                           
  2225                           ;mainMaster.c: 259:                 Lcd_Clear();
  2226  02F4  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  2227                           
  2228                           ;mainMaster.c: 260:                 if (state > 4){
  2229  02F9  3005               	movlw	5
  2230  02FA  027A               	subwf	_state,w
  2231  02FB  1803               	btfsc	3,0
  2232                           
  2233                           ;mainMaster.c: 261:                     state = 0;
  2234  02FC  01FA               	clrf	_state
  2235                           
  2236                           ;mainMaster.c: 263:                 j = 0;
  2237                           
  2238                           ;mainMaster.c: 262:                 }
  2239  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  2240  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  2241  02FF  01B5               	clrf	_j
  2242  0300                     l4172:	
  2243                           ;mainMaster.c: 264:                 while(j < 50){
  2244                           
  2245                           
  2246                           ;mainMaster.c: 264:                 while(j < 50){
  2247  0300  3032               	movlw	50
  2248  0301  0235               	subwf	_j,w
  2249  0302  1803               	btfsc	3,0
  2250  0303  2B0D               	goto	l375
  2251                           
  2252                           ;mainMaster.c: 265:                     j++;
  2253  0304  3001               	movlw	1
  2254  0305  1683               	bsf	3,5	;RP0=1, select bank1
  2255  0306  1303               	bcf	3,6	;RP1=0, select bank1
  2256  0307  00A0               	movwf	??_main^(0+128)
  2257  0308  0820               	movf	??_main^(0+128),w
  2258  0309  1283               	bcf	3,5	;RP0=0, select bank0
  2259  030A  1303               	bcf	3,6	;RP1=0, select bank0
  2260  030B  07B5               	addwf	_j,f
  2261  030C  2B00               	goto	l4172
  2262  030D                     l375:	
  2263                           
  2264                           ;mainMaster.c: 268:                 change = 1;
  2265  030D  01B4               	clrf	_change
  2266  030E  0AB4               	incf	_change,f
  2267  030F  2B11               	goto	l4176
  2268  0310                     l4174:	
  2269                           
  2270                           ;mainMaster.c: 271:             change =0;
  2271  0310  01B4               	clrf	_change
  2272  0311                     l4176:	
  2273                           
  2274                           ;mainMaster.c: 274:         if (state == 0){
  2275  0311  087A               	movf	_state,w
  2276  0312  1D03               	btfss	3,2
  2277  0313  2B5E               	goto	l4188
  2278                           
  2279                           ;mainMaster.c: 276:             Lcd_Set_Cursor(1,1);
  2280  0314  01F7               	clrf	Lcd_Set_Cursor@b
  2281  0315  0AF7               	incf	Lcd_Set_Cursor@b,f
  2282  0316  3001               	movlw	1
  2283  0317  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2284                           
  2285                           ;mainMaster.c: 277:             Lcd_Write_String(time);
  2286  031C  3041               	movlw	(low (_time| 0))& (0+255)
  2287  031D  1283               	bcf	3,5	;RP0=0, select bank0
  2288  031E  1303               	bcf	3,6	;RP1=0, select bank0
  2289  031F  00C7               	movwf	Lcd_Write_String@a
  2290  0320  3000               	movlw	0
  2291  0321  00C8               	movwf	Lcd_Write_String@a+1
  2292  0322  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2293                           
  2294                           ;mainMaster.c: 279:             Lcd_Set_Cursor(1,7);
  2295  0327  3007               	movlw	7
  2296  0328  1683               	bsf	3,5	;RP0=1, select bank1
  2297  0329  1303               	bcf	3,6	;RP1=0, select bank1
  2298  032A  00A0               	movwf	??_main^(0+128)
  2299  032B  0820               	movf	??_main^(0+128),w
  2300  032C  00F7               	movwf	Lcd_Set_Cursor@b
  2301  032D  3001               	movlw	1
  2302  032E  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2303                           
  2304                           ;mainMaster.c: 280:             Lcd_Write_String(day2);
  2305  0333  1283               	bcf	3,5	;RP0=0, select bank0
  2306  0334  1303               	bcf	3,6	;RP1=0, select bank0
  2307  0335  0825               	movf	_day2,w
  2308  0336  00C7               	movwf	Lcd_Write_String@a
  2309  0337  0826               	movf	_day2+1,w
  2310  0338  00C8               	movwf	Lcd_Write_String@a+1
  2311  0339  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2312                           
  2313                           ;mainMaster.c: 282:             Lcd_Set_Cursor(2,1);
  2314  033E  01F7               	clrf	Lcd_Set_Cursor@b
  2315  033F  0AF7               	incf	Lcd_Set_Cursor@b,f
  2316  0340  3002               	movlw	2
  2317  0341  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2318                           
  2319                           ;mainMaster.c: 283:             Lcd_Write_String(temp);
  2320  0346  303B               	movlw	(low (_temp| 0))& (0+255)
  2321  0347  1283               	bcf	3,5	;RP0=0, select bank0
  2322  0348  1303               	bcf	3,6	;RP1=0, select bank0
  2323  0349  00C7               	movwf	Lcd_Write_String@a
  2324  034A  3000               	movlw	0
  2325  034B  00C8               	movwf	Lcd_Write_String@a+1
  2326  034C  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2327                           
  2328                           ;mainMaster.c: 284:             Lcd_Write_Char(223);
  2329  0351  30DF               	movlw	223
  2330  0352  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  2331                           
  2332                           ;mainMaster.c: 285:             Lcd_Write_Char('C');
  2333  0357  3043               	movlw	67
  2334  0358  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  2335                           
  2336                           ;mainMaster.c: 287:         } else if (state == 1){
  2337  035D  28AF               	goto	l3996
  2338  035E                     l4188:	
  2339  035E  037A               	decf	_state,w
  2340  035F  1D03               	btfss	3,2
  2341  0360  2BBB               	goto	l4214
  2342                           
  2343                           ;mainMaster.c: 289:             Lcd_Set_Cursor(1,1);
  2344  0361  01F7               	clrf	Lcd_Set_Cursor@b
  2345  0362  0AF7               	incf	Lcd_Set_Cursor@b,f
  2346  0363  3001               	movlw	1
  2347  0364  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2348                           
  2349                           ;mainMaster.c: 290:             if (door == 1){
  2350  0369  1283               	bcf	3,5	;RP0=0, select bank0
  2351  036A  1303               	bcf	3,6	;RP1=0, select bank0
  2352  036B  033A               	decf	_door,w
  2353  036C  1D03               	btfss	3,2
  2354  036D  2B72               	goto	l4196
  2355                           
  2356                           ;mainMaster.c: 291:                 Lcd_Write_String("DOOR OPEN  ");
  2357  036E  3055               	movlw	low (STR_13| (0+32768))
  2358  036F  00C7               	movwf	Lcd_Write_String@a
  2359  0370  3087               	movlw	high (STR_13| (0+32768))
  2360  0371  2B75               	goto	L9
  2361  0372                     l4196:	
  2362                           ;mainMaster.c: 292:             } else {
  2363                           
  2364                           
  2365                           ;mainMaster.c: 293:                 Lcd_Write_String("DOOR CLOSED");
  2366  0372  3061               	movlw	low (STR_14| (0+32768))
  2367  0373  00C7               	movwf	Lcd_Write_String@a
  2368  0374  3087               	movlw	high (STR_14| (0+32768))
  2369  0375                     L9:	
  2370  0375  00C8               	movwf	Lcd_Write_String@a+1
  2371  0376  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2372                           
  2373                           ;mainMaster.c: 296:             Lcd_Set_Cursor(2,1);
  2374  037B  01F7               	clrf	Lcd_Set_Cursor@b
  2375  037C  0AF7               	incf	Lcd_Set_Cursor@b,f
  2376  037D  3002               	movlw	2
  2377  037E  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2378                           
  2379                           ;mainMaster.c: 297:             if (trip == 1){
  2380  0383  1283               	bcf	3,5	;RP0=0, select bank0
  2381  0384  1303               	bcf	3,6	;RP1=0, select bank0
  2382  0385  0339               	decf	_trip,w
  2383  0386  1D03               	btfss	3,2
  2384  0387  2B8C               	goto	l4204
  2385                           
  2386                           ;mainMaster.c: 298:                 Lcd_Write_String("TRIP ON ");
  2387  0388  30D2               	movlw	low (STR_15| (0+32768))
  2388  0389  00C7               	movwf	Lcd_Write_String@a
  2389  038A  3087               	movlw	high (STR_15| (0+32768))
  2390  038B  2B8F               	goto	L10
  2391  038C                     l4204:	
  2392                           ;mainMaster.c: 299:             } else {
  2393                           
  2394                           
  2395                           ;mainMaster.c: 300:                 Lcd_Write_String("TRIP OFF");
  2396  038C  30E4               	movlw	low (STR_16| (0+32768))
  2397  038D  00C7               	movwf	Lcd_Write_String@a
  2398  038E  3087               	movlw	high (STR_16| (0+32768))
  2399  038F                     L10:	
  2400  038F  00C8               	movwf	Lcd_Write_String@a+1
  2401  0390  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2402                           
  2403                           ;mainMaster.c: 303:             Lcd_Set_Cursor(2,9);
  2404  0395  3009               	movlw	9
  2405  0396  1683               	bsf	3,5	;RP0=1, select bank1
  2406  0397  1303               	bcf	3,6	;RP1=0, select bank1
  2407  0398  00A0               	movwf	??_main^(0+128)
  2408  0399  0820               	movf	??_main^(0+128),w
  2409  039A  00F7               	movwf	Lcd_Set_Cursor@b
  2410  039B  3002               	movlw	2
  2411  039C  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2412                           
  2413                           ;mainMaster.c: 304:             if (bank == 3){
  2414  03A1  3003               	movlw	3
  2415  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  2416  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  2417  03A4  062E               	xorwf	_bank,w
  2418  03A5  1D03               	btfss	3,2
  2419  03A6  2BB1               	goto	l4212
  2420                           
  2421                           ;mainMaster.c: 305:                 Lcd_Write_String("BANK ON ");
  2422  03A7  30C9               	movlw	low (STR_17| (0+32768))
  2423  03A8  00C7               	movwf	Lcd_Write_String@a
  2424  03A9  3087               	movlw	high (STR_17| (0+32768))
  2425  03AA  00C8               	movwf	Lcd_Write_String@a+1
  2426  03AB  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2427                           
  2428                           ;mainMaster.c: 306:             } else {
  2429  03B0  28AF               	goto	l3996
  2430  03B1                     l4212:	
  2431                           
  2432                           ;mainMaster.c: 307:                 Lcd_Write_String("BANK OFF");
  2433  03B1  30DB               	movlw	low (STR_18| (0+32768))
  2434  03B2  00C7               	movwf	Lcd_Write_String@a
  2435  03B3  3087               	movlw	high (STR_18| (0+32768))
  2436  03B4  00C8               	movwf	Lcd_Write_String@a+1
  2437  03B5  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2438  03BA  28AF               	goto	l3996
  2439  03BB                     l4214:	
  2440  03BB  3002               	movlw	2
  2441  03BC  067A               	xorwf	_state,w
  2442  03BD  1D03               	btfss	3,2
  2443  03BE  2BFA               	goto	l4232
  2444                           
  2445                           ;mainMaster.c: 312:             Lcd_Set_Cursor(1,1);
  2446  03BF  01F7               	clrf	Lcd_Set_Cursor@b
  2447  03C0  0AF7               	incf	Lcd_Set_Cursor@b,f
  2448  03C1  3001               	movlw	1
  2449  03C2  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2450                           
  2451                           ;mainMaster.c: 313:             if (PIR == 1){
  2452  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  2453  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  2454  03C9  0338               	decf	_PIR,w
  2455  03CA  1D03               	btfss	3,2
  2456  03CB  2BD0               	goto	l4222
  2457                           
  2458                           ;mainMaster.c: 314:                 Lcd_Write_String("PIR ON ");
  2459  03CC  30ED               	movlw	low (STR_19| (0+32768))
  2460  03CD  00C7               	movwf	Lcd_Write_String@a
  2461  03CE  3087               	movlw	high (STR_19| (0+32768))
  2462  03CF  2BD3               	goto	L11
  2463  03D0                     l4222:	
  2464                           ;mainMaster.c: 315:             } else {
  2465                           
  2466                           
  2467                           ;mainMaster.c: 316:                 Lcd_Write_String("PIR OFF");
  2468  03D0  30F5               	movlw	low (STR_20| (0+32768))
  2469  03D1  00C7               	movwf	Lcd_Write_String@a
  2470  03D2  3087               	movlw	high (STR_20| (0+32768))
  2471  03D3                     L11:	
  2472  03D3  00C8               	movwf	Lcd_Write_String@a+1
  2473  03D4  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2474                           
  2475                           ;mainMaster.c: 319:             Lcd_Set_Cursor(2,1);
  2476  03D9  01F7               	clrf	Lcd_Set_Cursor@b
  2477  03DA  0AF7               	incf	Lcd_Set_Cursor@b,f
  2478  03DB  3002               	movlw	2
  2479  03DC  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2480                           
  2481                           ;mainMaster.c: 320:             if (IR == 1){
  2482  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  2483  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  2484  03E3  0337               	decf	_IR,w
  2485  03E4  1D03               	btfss	3,2
  2486  03E5  2BF0               	goto	l4230
  2487                           
  2488                           ;mainMaster.c: 321:                 Lcd_Write_String("IR ON ");
  2489  03E6  30EE               	movlw	low ((STR_19+1)| (0+32768))
  2490  03E7  00C7               	movwf	Lcd_Write_String@a
  2491  03E8  3087               	movlw	high ((STR_19+1)| (0+32768))
  2492  03E9  00C8               	movwf	Lcd_Write_String@a+1
  2493  03EA  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2494                           
  2495                           ;mainMaster.c: 322:             } else {
  2496  03EF  28AF               	goto	l3996
  2497  03F0                     l4230:	
  2498                           
  2499                           ;mainMaster.c: 323:                 Lcd_Write_String("IR OFF");
  2500  03F0  30F6               	movlw	low ((STR_20+1)| (0+32768))
  2501  03F1  00C7               	movwf	Lcd_Write_String@a
  2502  03F2  3087               	movlw	high ((STR_20+1)| (0+32768))
  2503  03F3  00C8               	movwf	Lcd_Write_String@a+1
  2504  03F4  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2505                           
  2506                           ;mainMaster.c: 325:         } else if (state == 3){
  2507                           
  2508                           ;mainMaster.c: 324:             }
  2509  03F9  28AF               	goto	l3996
  2510  03FA                     l4232:	
  2511  03FA  3003               	movlw	3
  2512  03FB  067A               	xorwf	_state,w
  2513  03FC  1D03               	btfss	3,2
  2514  03FD  2D50               	goto	l4284
  2515                           
  2516                           ;mainMaster.c: 326:             Lcd_Set_Cursor(1,1);
  2517  03FE  01F7               	clrf	Lcd_Set_Cursor@b
  2518  03FF  0AF7               	incf	Lcd_Set_Cursor@b,f
  2519  0400  3001               	movlw	1
  2520  0401  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2521                           
  2522                           ;mainMaster.c: 327:             Lcd_Write_String("TIME: ");
  2523  0406  30FD               	movlw	low (STR_23| (0+32768))
  2524  0407  1283               	bcf	3,5	;RP0=0, select bank0
  2525  0408  1303               	bcf	3,6	;RP1=0, select bank0
  2526  0409  00C7               	movwf	Lcd_Write_String@a
  2527  040A  3087               	movlw	high (STR_23| (0+32768))
  2528  040B  00C8               	movwf	Lcd_Write_String@a+1
  2529  040C  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2530                           
  2531                           ;mainMaster.c: 328:             Lcd_Write_String(time);
  2532  0411  3041               	movlw	(low (_time| 0))& (0+255)
  2533  0412  1283               	bcf	3,5	;RP0=0, select bank0
  2534  0413  1303               	bcf	3,6	;RP1=0, select bank0
  2535  0414  00C7               	movwf	Lcd_Write_String@a
  2536  0415  3000               	movlw	0
  2537  0416  00C8               	movwf	Lcd_Write_String@a+1
  2538  0417  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2539                           
  2540                           ;mainMaster.c: 330:             Lcd_Set_Cursor(2,1);
  2541  041C  01F7               	clrf	Lcd_Set_Cursor@b
  2542  041D  0AF7               	incf	Lcd_Set_Cursor@b,f
  2543  041E  3002               	movlw	2
  2544  041F  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2545                           
  2546                           ;mainMaster.c: 331:             Lcd_Write_String("DAY: ");
  2547  0424  3004               	movlw	low (STR_24| (0+32768))
  2548  0425  1283               	bcf	3,5	;RP0=0, select bank0
  2549  0426  1303               	bcf	3,6	;RP1=0, select bank0
  2550  0427  00C7               	movwf	Lcd_Write_String@a
  2551  0428  3088               	movlw	high (STR_24| (0+32768))
  2552  0429  00C8               	movwf	Lcd_Write_String@a+1
  2553  042A  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2554                           
  2555                           ;mainMaster.c: 332:             Lcd_Write_String(day2);
  2556  042F  1283               	bcf	3,5	;RP0=0, select bank0
  2557  0430  1303               	bcf	3,6	;RP1=0, select bank0
  2558  0431  0825               	movf	_day2,w
  2559  0432  00C7               	movwf	Lcd_Write_String@a
  2560  0433  0826               	movf	_day2+1,w
  2561  0434  00C8               	movwf	Lcd_Write_String@a+1
  2562  0435  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2563                           
  2564                           ;mainMaster.c: 334:             newhour = (time[0] - '0') * 10 + (time[1] - '0');
  2565  043A  300A               	movlw	10
  2566  043B  1683               	bsf	3,5	;RP0=1, select bank1
  2567  043C  1303               	bcf	3,6	;RP1=0, select bank1
  2568  043D  00A0               	movwf	??_main^(0+128)
  2569  043E  0820               	movf	??_main^(0+128),w
  2570  043F  00F3               	movwf	___bmul@multiplicand
  2571  0440  1283               	bcf	3,5	;RP0=0, select bank0
  2572  0441  1303               	bcf	3,6	;RP1=0, select bank0
  2573  0442  0841               	movf	_time,w
  2574  0443  120A  158A  202B  120A  118A  	fcall	___bmul
  2575  0448  1283               	bcf	3,5	;RP0=0, select bank0
  2576  0449  1303               	bcf	3,6	;RP1=0, select bank0
  2577  044A  0742               	addwf	_time+1,w
  2578  044B  3EF0               	addlw	240
  2579  044C  1683               	bsf	3,5	;RP0=1, select bank1
  2580  044D  1303               	bcf	3,6	;RP1=0, select bank1
  2581  044E  00A1               	movwf	(??_main+1)^(0+128)
  2582  044F  0821               	movf	(??_main+1)^(0+128),w
  2583  0450  1283               	bcf	3,5	;RP0=0, select bank0
  2584  0451  1303               	bcf	3,6	;RP1=0, select bank0
  2585  0452  00A8               	movwf	_newhour
  2586                           
  2587                           ;mainMaster.c: 335:             newmin = (time[3] - '0') * 10 + (time[4] - '0');
  2588  0453  300A               	movlw	10
  2589  0454  1683               	bsf	3,5	;RP0=1, select bank1
  2590  0455  1303               	bcf	3,6	;RP1=0, select bank1
  2591  0456  00A0               	movwf	??_main^(0+128)
  2592  0457  0820               	movf	??_main^(0+128),w
  2593  0458  00F3               	movwf	___bmul@multiplicand
  2594  0459  1283               	bcf	3,5	;RP0=0, select bank0
  2595  045A  1303               	bcf	3,6	;RP1=0, select bank0
  2596  045B  0844               	movf	_time+3,w
  2597  045C  120A  158A  202B  120A  118A  	fcall	___bmul
  2598  0461  1283               	bcf	3,5	;RP0=0, select bank0
  2599  0462  1303               	bcf	3,6	;RP1=0, select bank0
  2600  0463  0745               	addwf	_time+4,w
  2601  0464  3EF0               	addlw	240
  2602  0465  1683               	bsf	3,5	;RP0=1, select bank1
  2603  0466  1303               	bcf	3,6	;RP1=0, select bank1
  2604  0467  00A1               	movwf	(??_main+1)^(0+128)
  2605  0468  0821               	movf	(??_main+1)^(0+128),w
  2606  0469  1283               	bcf	3,5	;RP0=0, select bank0
  2607  046A  1303               	bcf	3,6	;RP1=0, select bank0
  2608  046B  00A7               	movwf	_newmin
  2609                           
  2610                           ;mainMaster.c: 337:             if (PORTDbits.RD4 == 1){
  2611  046C  1E08               	btfss	8,4	;volatile
  2612  046D  2C7C               	goto	l394
  2613                           
  2614                           ;mainMaster.c: 338:                 newhour++;
  2615  046E  3001               	movlw	1
  2616  046F  1683               	bsf	3,5	;RP0=1, select bank1
  2617  0470  1303               	bcf	3,6	;RP1=0, select bank1
  2618  0471  00A0               	movwf	??_main^(0+128)
  2619  0472  0820               	movf	??_main^(0+128),w
  2620  0473  1283               	bcf	3,5	;RP0=0, select bank0
  2621  0474  1303               	bcf	3,6	;RP1=0, select bank0
  2622  0475  07A8               	addwf	_newhour,f
  2623                           
  2624                           ;mainMaster.c: 339:                 if (newhour > 23){
  2625  0476  3018               	movlw	24
  2626  0477  0228               	subwf	_newhour,w
  2627  0478  1C03               	skipc
  2628  0479  2CBA               	goto	l4252
  2629                           
  2630                           ;mainMaster.c: 340:                     newhour = 0;
  2631  047A  01A8               	clrf	_newhour
  2632                           
  2633                           ;mainMaster.c: 343:             } else if (PORTDbits.RD3 == 1){
  2634  047B  2CBA               	goto	l4252
  2635  047C                     l394:	
  2636  047C  1D88               	btfss	8,3	;volatile
  2637  047D  2C8C               	goto	l397
  2638                           
  2639                           ;mainMaster.c: 344:                 newhour--;
  2640  047E  3001               	movlw	1
  2641  047F  02A8               	subwf	_newhour,f
  2642                           
  2643                           ;mainMaster.c: 345:                 if (newhour == 255){
  2644  0480  0A28               	incf	_newhour,w
  2645  0481  1D03               	btfss	3,2
  2646  0482  2CBA               	goto	l4252
  2647                           
  2648                           ;mainMaster.c: 346:                     newhour = 23;
  2649  0483  3017               	movlw	23
  2650  0484  1683               	bsf	3,5	;RP0=1, select bank1
  2651  0485  1303               	bcf	3,6	;RP1=0, select bank1
  2652  0486  00A0               	movwf	??_main^(0+128)
  2653  0487  0820               	movf	??_main^(0+128),w
  2654  0488  1283               	bcf	3,5	;RP0=0, select bank0
  2655  0489  1303               	bcf	3,6	;RP1=0, select bank0
  2656  048A  00A8               	movwf	_newhour
  2657  048B  2CBA               	goto	l4252
  2658  048C                     l397:	
  2659  048C  1D08               	btfss	8,2	;volatile
  2660  048D  2C9C               	goto	l400
  2661                           
  2662                           ;mainMaster.c: 350:                 newmin++;
  2663  048E  3001               	movlw	1
  2664  048F  1683               	bsf	3,5	;RP0=1, select bank1
  2665  0490  1303               	bcf	3,6	;RP1=0, select bank1
  2666  0491  00A0               	movwf	??_main^(0+128)
  2667  0492  0820               	movf	??_main^(0+128),w
  2668  0493  1283               	bcf	3,5	;RP0=0, select bank0
  2669  0494  1303               	bcf	3,6	;RP1=0, select bank0
  2670  0495  07A7               	addwf	_newmin,f
  2671                           
  2672                           ;mainMaster.c: 351:                 if (newmin > 59){
  2673  0496  303C               	movlw	60
  2674  0497  0227               	subwf	_newmin,w
  2675  0498  1C03               	skipc
  2676  0499  2CBA               	goto	l4252
  2677                           
  2678                           ;mainMaster.c: 352:                     newmin = 0;
  2679  049A  01A7               	clrf	_newmin
  2680  049B  2CBA               	goto	l4252
  2681  049C                     l400:	
  2682  049C  1C88               	btfss	8,1	;volatile
  2683  049D  2CAC               	goto	l403
  2684                           
  2685                           ;mainMaster.c: 356:                 newmin--;
  2686  049E  3001               	movlw	1
  2687  049F  02A7               	subwf	_newmin,f
  2688                           
  2689                           ;mainMaster.c: 357:                 if (newmin == 255){
  2690  04A0  0A27               	incf	_newmin,w
  2691  04A1  1D03               	btfss	3,2
  2692  04A2  2CBA               	goto	l4252
  2693                           
  2694                           ;mainMaster.c: 358:                     newmin = 59;
  2695  04A3  303B               	movlw	59
  2696  04A4  1683               	bsf	3,5	;RP0=1, select bank1
  2697  04A5  1303               	bcf	3,6	;RP1=0, select bank1
  2698  04A6  00A0               	movwf	??_main^(0+128)
  2699  04A7  0820               	movf	??_main^(0+128),w
  2700  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  2701  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  2702  04AA  00A7               	movwf	_newmin
  2703  04AB  2CBA               	goto	l4252
  2704  04AC                     l403:	
  2705  04AC  1C08               	btfss	8,0	;volatile
  2706  04AD  2CC9               	goto	l4278
  2707                           
  2708                           ;mainMaster.c: 362:                 day1++;
  2709  04AE  3001               	movlw	1
  2710  04AF  1683               	bsf	3,5	;RP0=1, select bank1
  2711  04B0  1303               	bcf	3,6	;RP1=0, select bank1
  2712  04B1  00A0               	movwf	??_main^(0+128)
  2713  04B2  0820               	movf	??_main^(0+128),w
  2714  04B3  07F9               	addwf	_day1,f
  2715                           
  2716                           ;mainMaster.c: 363:                 if (day1 > 7){
  2717  04B4  3008               	movlw	8
  2718  04B5  0279               	subwf	_day1,w
  2719  04B6  1C03               	skipc
  2720  04B7  2CBA               	goto	l4252
  2721                           
  2722                           ;mainMaster.c: 364:                     day1 = 1;
  2723  04B8  01F9               	clrf	_day1
  2724  04B9  0AF9               	incf	_day1,f
  2725  04BA                     l4252:	
  2726                           
  2727                           ;mainMaster.c: 342:                 _delay((unsigned long)((100)*(8000000/4000.0)));
  2728  04BA  3002               	movlw	2
  2729  04BB  1683               	bsf	3,5	;RP0=1, select bank1
  2730  04BC  1303               	bcf	3,6	;RP1=0, select bank1
  2731  04BD  00A2               	movwf	(??_main^(0+128)+2)
  2732  04BE  3004               	movlw	4
  2733  04BF  00A1               	movwf	(??_main^(0+128)+1)
  2734  04C0  30B9               	movlw	185
  2735  04C1  00A0               	movwf	??_main^(0+128)
  2736  04C2                     u4997:	
  2737  04C2  0BA0               	decfsz	??_main^(0+128),f
  2738  04C3  2CC2               	goto	u4997
  2739  04C4  0BA1               	decfsz	(??_main^(0+128)+1),f
  2740  04C5  2CC2               	goto	u4997
  2741  04C6  0BA2               	decfsz	(??_main^(0+128)+2),f
  2742  04C7  2CC2               	goto	u4997
  2743  04C8  2CC9               	nop2
  2744  04C9                     l4278:	
  2745                           
  2746                           ;mainMaster.c: 369:             hour = ((newhour / 10) << 4) + (newhour % 10);
  2747  04C9  300A               	movlw	10
  2748  04CA  00F3               	movwf	___awdiv@divisor
  2749  04CB  3000               	movlw	0
  2750  04CC  00F4               	movwf	___awdiv@divisor+1
  2751  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  2752  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  2753  04CF  0828               	movf	_newhour,w
  2754  04D0  1683               	bsf	3,5	;RP0=1, select bank1
  2755  04D1  1303               	bcf	3,6	;RP1=0, select bank1
  2756  04D2  00A0               	movwf	??_main^(0+128)
  2757  04D3  01A1               	clrf	(??_main^(0+128)+1)
  2758  04D4  0820               	movf	??_main^(0+128),w
  2759  04D5  00F5               	movwf	___awdiv@dividend
  2760  04D6  0821               	movf	(??_main+1)^(0+128),w
  2761  04D7  00F6               	movwf	___awdiv@dividend+1
  2762  04D8  120A  158A  2307  120A  118A  	fcall	___awdiv
  2763  04DD  0873               	movf	?___awdiv,w
  2764  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  2765  04DF  1303               	bcf	3,6	;RP1=0, select bank1
  2766  04E0  00A2               	movwf	(??_main+2)^(0+128)
  2767  04E1  3004               	movlw	4
  2768  04E2                     u4615:	
  2769  04E2  1003               	clrc
  2770  04E3  0DA2               	rlf	(??_main+2)^(0+128),f
  2771  04E4  3EFF               	addlw	-1
  2772  04E5  1D03               	skipz
  2773  04E6  2CE2               	goto	u4615
  2774  04E7  300A               	movlw	10
  2775  04E8  00F3               	movwf	___awmod@divisor
  2776  04E9  3000               	movlw	0
  2777  04EA  00F4               	movwf	___awmod@divisor+1
  2778  04EB  1283               	bcf	3,5	;RP0=0, select bank0
  2779  04EC  1303               	bcf	3,6	;RP1=0, select bank0
  2780  04ED  0828               	movf	_newhour,w
  2781  04EE  1683               	bsf	3,5	;RP0=1, select bank1
  2782  04EF  1303               	bcf	3,6	;RP1=0, select bank1
  2783  04F0  00A3               	movwf	(??_main+3)^(0+128)
  2784  04F1  01A4               	clrf	((??_main+3)^(0+128)+1)
  2785  04F2  0823               	movf	(??_main+3)^(0+128),w
  2786  04F3  00F5               	movwf	___awmod@dividend
  2787  04F4  0824               	movf	(??_main+4)^(0+128),w
  2788  04F5  00F6               	movwf	___awmod@dividend+1
  2789  04F6  120A  118A  26B2  120A  118A  	fcall	___awmod
  2790  04FB  0873               	movf	?___awmod,w
  2791  04FC  1683               	bsf	3,5	;RP0=1, select bank1
  2792  04FD  1303               	bcf	3,6	;RP1=0, select bank1
  2793  04FE  0722               	addwf	(??_main+2)^(0+128),w
  2794  04FF  00A5               	movwf	(??_main+5)^(0+128)
  2795  0500  0825               	movf	(??_main+5)^(0+128),w
  2796  0501  1283               	bcf	3,5	;RP0=0, select bank0
  2797  0502  1303               	bcf	3,6	;RP1=0, select bank0
  2798  0503  00AB               	movwf	_hour
  2799                           
  2800                           ;mainMaster.c: 370:             min = ((newmin / 10) << 4) + (newmin % 10);
  2801  0504  300A               	movlw	10
  2802  0505  00F3               	movwf	___awdiv@divisor
  2803  0506  3000               	movlw	0
  2804  0507  00F4               	movwf	___awdiv@divisor+1
  2805  0508  0827               	movf	_newmin,w
  2806  0509  1683               	bsf	3,5	;RP0=1, select bank1
  2807  050A  1303               	bcf	3,6	;RP1=0, select bank1
  2808  050B  00A0               	movwf	??_main^(0+128)
  2809  050C  01A1               	clrf	(??_main^(0+128)+1)
  2810  050D  0820               	movf	??_main^(0+128),w
  2811  050E  00F5               	movwf	___awdiv@dividend
  2812  050F  0821               	movf	(??_main+1)^(0+128),w
  2813  0510  00F6               	movwf	___awdiv@dividend+1
  2814  0511  120A  158A  2307  120A  118A  	fcall	___awdiv
  2815  0516  0873               	movf	?___awdiv,w
  2816  0517  1683               	bsf	3,5	;RP0=1, select bank1
  2817  0518  1303               	bcf	3,6	;RP1=0, select bank1
  2818  0519  00A2               	movwf	(??_main+2)^(0+128)
  2819  051A  3004               	movlw	4
  2820  051B                     u4625:	
  2821  051B  1003               	clrc
  2822  051C  0DA2               	rlf	(??_main+2)^(0+128),f
  2823  051D  3EFF               	addlw	-1
  2824  051E  1D03               	skipz
  2825  051F  2D1B               	goto	u4625
  2826  0520  300A               	movlw	10
  2827  0521  00F3               	movwf	___awmod@divisor
  2828  0522  3000               	movlw	0
  2829  0523  00F4               	movwf	___awmod@divisor+1
  2830  0524  1283               	bcf	3,5	;RP0=0, select bank0
  2831  0525  1303               	bcf	3,6	;RP1=0, select bank0
  2832  0526  0827               	movf	_newmin,w
  2833  0527  1683               	bsf	3,5	;RP0=1, select bank1
  2834  0528  1303               	bcf	3,6	;RP1=0, select bank1
  2835  0529  00A3               	movwf	(??_main+3)^(0+128)
  2836  052A  01A4               	clrf	((??_main+3)^(0+128)+1)
  2837  052B  0823               	movf	(??_main+3)^(0+128),w
  2838  052C  00F5               	movwf	___awmod@dividend
  2839  052D  0824               	movf	(??_main+4)^(0+128),w
  2840  052E  00F6               	movwf	___awmod@dividend+1
  2841  052F  120A  118A  26B2  120A  118A  	fcall	___awmod
  2842  0534  0873               	movf	?___awmod,w
  2843  0535  1683               	bsf	3,5	;RP0=1, select bank1
  2844  0536  1303               	bcf	3,6	;RP1=0, select bank1
  2845  0537  0722               	addwf	(??_main+2)^(0+128),w
  2846  0538  00A5               	movwf	(??_main+5)^(0+128)
  2847  0539  0825               	movf	(??_main+5)^(0+128),w
  2848  053A  1283               	bcf	3,5	;RP0=0, select bank0
  2849  053B  1303               	bcf	3,6	;RP1=0, select bank0
  2850  053C  00AA               	movwf	_min
  2851                           
  2852                           ;mainMaster.c: 371:             write_RTC(hour, min, day1);
  2853  053D  082A               	movf	_min,w
  2854  053E  1683               	bsf	3,5	;RP0=1, select bank1
  2855  053F  1303               	bcf	3,6	;RP1=0, select bank1
  2856  0540  00A0               	movwf	??_main^(0+128)
  2857  0541  0820               	movf	??_main^(0+128),w
  2858  0542  00F5               	movwf	write_RTC@minutes
  2859  0543  0879               	movf	_day1,w
  2860  0544  00A1               	movwf	(??_main+1)^(0+128)
  2861  0545  0821               	movf	(??_main+1)^(0+128),w
  2862  0546  00F6               	movwf	write_RTC@day
  2863  0547  1283               	bcf	3,5	;RP0=0, select bank0
  2864  0548  1303               	bcf	3,6	;RP1=0, select bank0
  2865  0549  082B               	movf	_hour,w
  2866  054A  120A  158A  221C  120A  118A  	fcall	_write_RTC
  2867                           
  2868                           ;mainMaster.c: 372:         } else if (state == 4){
  2869  054F  28AF               	goto	l3996
  2870  0550                     l4284:	
  2871  0550  3004               	movlw	4
  2872  0551  067A               	xorwf	_state,w
  2873  0552  1D03               	btfss	3,2
  2874  0553  28AF               	goto	l3996
  2875                           
  2876                           ;mainMaster.c: 373:             Lcd_Set_Cursor(1,1);
  2877  0554  01F7               	clrf	Lcd_Set_Cursor@b
  2878  0555  0AF7               	incf	Lcd_Set_Cursor@b,f
  2879  0556  3001               	movlw	1
  2880  0557  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2881                           
  2882                           ;mainMaster.c: 374:             Lcd_Write_String("PASSWORD:");
  2883  055C  30B5               	movlw	low (STR_25| (0+32768))
  2884  055D  1283               	bcf	3,5	;RP0=0, select bank0
  2885  055E  1303               	bcf	3,6	;RP1=0, select bank0
  2886  055F  00C7               	movwf	Lcd_Write_String@a
  2887  0560  3087               	movlw	high (STR_25| (0+32768))
  2888  0561  00C8               	movwf	Lcd_Write_String@a+1
  2889  0562  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2890                           
  2891                           ;mainMaster.c: 375:             Lcd_Set_Cursor(2,k + 1);
  2892  0567  0878               	movf	_k,w
  2893  0568  3E01               	addlw	1
  2894  0569  1683               	bsf	3,5	;RP0=1, select bank1
  2895  056A  1303               	bcf	3,6	;RP1=0, select bank1
  2896  056B  00A0               	movwf	??_main^(0+128)
  2897  056C  0820               	movf	??_main^(0+128),w
  2898  056D  00F7               	movwf	Lcd_Set_Cursor@b
  2899  056E  3002               	movlw	2
  2900  056F  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2901                           
  2902                           ;mainMaster.c: 377:             if (k < 5) {
  2903  0574  3005               	movlw	5
  2904  0575  0278               	subwf	_k,w
  2905  0576  1803               	skipnc
  2906  0577  28AF               	goto	l3996
  2907                           
  2908                           ;mainMaster.c: 378:                 if (PORTDbits.RD0 == 1){
  2909  0578  1283               	bcf	3,5	;RP0=0, select bank0
  2910  0579  1303               	bcf	3,6	;RP1=0, select bank0
  2911  057A  1C08               	btfss	8,0	;volatile
  2912  057B  2D95               	goto	l411
  2913                           
  2914                           ;mainMaster.c: 379:                     if (change4 == 0){
  2915  057C  0830               	movf	_change4,w
  2916  057D  1D03               	btfss	3,2
  2917  057E  28AF               	goto	l3996
  2918                           
  2919                           ;mainMaster.c: 380:                         passwordu[k] = 0;
  2920  057F  0878               	movf	_k,w
  2921  0580  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  2922  0581  0084               	movwf	4
  2923  0582  1383               	bcf	3,7	;select IRP bank0
  2924  0583  0180               	clrf	0
  2925                           
  2926                           ;mainMaster.c: 381:                         k++;
  2927  0584  3001               	movlw	1
  2928  0585  1683               	bsf	3,5	;RP0=1, select bank1
  2929  0586  1303               	bcf	3,6	;RP1=0, select bank1
  2930  0587  00A0               	movwf	??_main^(0+128)
  2931  0588  0820               	movf	??_main^(0+128),w
  2932  0589  07F8               	addwf	_k,f
  2933                           
  2934                           ;mainMaster.c: 382:                         change4 = 1;
  2935  058A  1283               	bcf	3,5	;RP0=0, select bank0
  2936  058B  1303               	bcf	3,6	;RP1=0, select bank0
  2937  058C  01B0               	clrf	_change4
  2938  058D  0AB0               	incf	_change4,f
  2939                           
  2940                           ;mainMaster.c: 383:                         Lcd_Write_Char('*');
  2941  058E  302A               	movlw	42
  2942  058F  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  2943  0594  28AF               	goto	l3996
  2944  0595                     l411:	
  2945  0595  1C88               	btfss	8,1	;volatile
  2946  0596  2DB1               	goto	l414
  2947                           
  2948                           ;mainMaster.c: 386:                     if (change4 == 0){
  2949  0597  0830               	movf	_change4,w
  2950  0598  1D03               	btfss	3,2
  2951  0599  28AF               	goto	l3996
  2952                           
  2953                           ;mainMaster.c: 387:                         passwordu[k] = 1;
  2954  059A  0878               	movf	_k,w
  2955  059B  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  2956  059C  0084               	movwf	4
  2957  059D  1383               	bcf	3,7	;select IRP bank0
  2958  059E  0180               	clrf	0
  2959  059F  0A80               	incf	0,f
  2960                           
  2961                           ;mainMaster.c: 388:                         k++;
  2962  05A0  3001               	movlw	1
  2963  05A1  1683               	bsf	3,5	;RP0=1, select bank1
  2964  05A2  1303               	bcf	3,6	;RP1=0, select bank1
  2965  05A3  00A0               	movwf	??_main^(0+128)
  2966  05A4  0820               	movf	??_main^(0+128),w
  2967  05A5  07F8               	addwf	_k,f
  2968                           
  2969                           ;mainMaster.c: 389:                         change4 = 1;
  2970  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  2971  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  2972  05A8  01B0               	clrf	_change4
  2973  05A9  0AB0               	incf	_change4,f
  2974                           
  2975                           ;mainMaster.c: 390:                         Lcd_Write_Char('*');
  2976  05AA  302A               	movlw	42
  2977  05AB  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  2978  05B0  28AF               	goto	l3996
  2979  05B1                     l414:	
  2980  05B1  1D08               	btfss	8,2	;volatile
  2981  05B2  2DCF               	goto	l417
  2982                           
  2983                           ;mainMaster.c: 393:                     if (change4 == 0){
  2984  05B3  0830               	movf	_change4,w
  2985  05B4  1D03               	btfss	3,2
  2986  05B5  28AF               	goto	l3996
  2987                           
  2988                           ;mainMaster.c: 394:                         passwordu[k] = 2;
  2989  05B6  3002               	movlw	2
  2990  05B7  1683               	bsf	3,5	;RP0=1, select bank1
  2991  05B8  1303               	bcf	3,6	;RP1=0, select bank1
  2992  05B9  00A0               	movwf	??_main^(0+128)
  2993  05BA  0878               	movf	_k,w
  2994  05BB  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  2995  05BC  0084               	movwf	4
  2996  05BD  0820               	movf	??_main^(0+128),w
  2997  05BE  1383               	bcf	3,7	;select IRP bank0
  2998  05BF  0080               	movwf	0
  2999                           
  3000                           ;mainMaster.c: 395:                         k++;
  3001  05C0  3001               	movlw	1
  3002  05C1  00A0               	movwf	??_main^(0+128)
  3003  05C2  0820               	movf	??_main^(0+128),w
  3004  05C3  07F8               	addwf	_k,f
  3005                           
  3006                           ;mainMaster.c: 396:                         change4 = 1;
  3007  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  3008  05C5  1303               	bcf	3,6	;RP1=0, select bank0
  3009  05C6  01B0               	clrf	_change4
  3010  05C7  0AB0               	incf	_change4,f
  3011                           
  3012                           ;mainMaster.c: 397:                         Lcd_Write_Char('*');
  3013  05C8  302A               	movlw	42
  3014  05C9  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  3015  05CE  28AF               	goto	l3996
  3016  05CF                     l417:	
  3017  05CF  1D88               	btfss	8,3	;volatile
  3018  05D0  2DED               	goto	l420
  3019                           
  3020                           ;mainMaster.c: 400:                     if (change4 == 0){
  3021  05D1  0830               	movf	_change4,w
  3022  05D2  1D03               	btfss	3,2
  3023  05D3  28AF               	goto	l3996
  3024                           
  3025                           ;mainMaster.c: 401:                         passwordu[k] = 3;
  3026  05D4  3003               	movlw	3
  3027  05D5  1683               	bsf	3,5	;RP0=1, select bank1
  3028  05D6  1303               	bcf	3,6	;RP1=0, select bank1
  3029  05D7  00A0               	movwf	??_main^(0+128)
  3030  05D8  0878               	movf	_k,w
  3031  05D9  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3032  05DA  0084               	movwf	4
  3033  05DB  0820               	movf	??_main^(0+128),w
  3034  05DC  1383               	bcf	3,7	;select IRP bank0
  3035  05DD  0080               	movwf	0
  3036                           
  3037                           ;mainMaster.c: 402:                         k++;
  3038  05DE  3001               	movlw	1
  3039  05DF  00A0               	movwf	??_main^(0+128)
  3040  05E0  0820               	movf	??_main^(0+128),w
  3041  05E1  07F8               	addwf	_k,f
  3042                           
  3043                           ;mainMaster.c: 403:                         change4 = 1;
  3044  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  3045  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  3046  05E4  01B0               	clrf	_change4
  3047  05E5  0AB0               	incf	_change4,f
  3048                           
  3049                           ;mainMaster.c: 404:                         Lcd_Write_Char('*');
  3050  05E6  302A               	movlw	42
  3051  05E7  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  3052  05EC  28AF               	goto	l3996
  3053  05ED                     l420:	
  3054  05ED  1E08               	btfss	8,4	;volatile
  3055  05EE  2E0B               	goto	l423
  3056                           
  3057                           ;mainMaster.c: 407:                     if (change4 == 0){
  3058  05EF  0830               	movf	_change4,w
  3059  05F0  1D03               	btfss	3,2
  3060  05F1  28AF               	goto	l3996
  3061                           
  3062                           ;mainMaster.c: 408:                         passwordu[k] = 4;
  3063  05F2  3004               	movlw	4
  3064  05F3  1683               	bsf	3,5	;RP0=1, select bank1
  3065  05F4  1303               	bcf	3,6	;RP1=0, select bank1
  3066  05F5  00A0               	movwf	??_main^(0+128)
  3067  05F6  0878               	movf	_k,w
  3068  05F7  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3069  05F8  0084               	movwf	4
  3070  05F9  0820               	movf	??_main^(0+128),w
  3071  05FA  1383               	bcf	3,7	;select IRP bank0
  3072  05FB  0080               	movwf	0
  3073                           
  3074                           ;mainMaster.c: 409:                         k++;
  3075  05FC  3001               	movlw	1
  3076  05FD  00A0               	movwf	??_main^(0+128)
  3077  05FE  0820               	movf	??_main^(0+128),w
  3078  05FF  07F8               	addwf	_k,f
  3079                           
  3080                           ;mainMaster.c: 410:                         change4 = 1;
  3081  0600  1283               	bcf	3,5	;RP0=0, select bank0
  3082  0601  1303               	bcf	3,6	;RP1=0, select bank0
  3083  0602  01B0               	clrf	_change4
  3084  0603  0AB0               	incf	_change4,f
  3085                           
  3086                           ;mainMaster.c: 411:                         Lcd_Write_Char('*');
  3087  0604  302A               	movlw	42
  3088  0605  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  3089  060A  28AF               	goto	l3996
  3090  060B                     l423:	
  3091  060B  1E88               	btfss	8,5	;volatile
  3092  060C  2E29               	goto	l4356
  3093                           
  3094                           ;mainMaster.c: 414:                     if (change4 == 0){
  3095  060D  0830               	movf	_change4,w
  3096  060E  1D03               	btfss	3,2
  3097  060F  28AF               	goto	l3996
  3098                           
  3099                           ;mainMaster.c: 415:                         passwordu[k] = 5;
  3100  0610  3005               	movlw	5
  3101  0611  1683               	bsf	3,5	;RP0=1, select bank1
  3102  0612  1303               	bcf	3,6	;RP1=0, select bank1
  3103  0613  00A0               	movwf	??_main^(0+128)
  3104  0614  0878               	movf	_k,w
  3105  0615  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3106  0616  0084               	movwf	4
  3107  0617  0820               	movf	??_main^(0+128),w
  3108  0618  1383               	bcf	3,7	;select IRP bank0
  3109  0619  0080               	movwf	0
  3110                           
  3111                           ;mainMaster.c: 416:                         k++;
  3112  061A  3001               	movlw	1
  3113  061B  00A0               	movwf	??_main^(0+128)
  3114  061C  0820               	movf	??_main^(0+128),w
  3115  061D  07F8               	addwf	_k,f
  3116                           
  3117                           ;mainMaster.c: 417:                         change4 = 1;
  3118  061E  1283               	bcf	3,5	;RP0=0, select bank0
  3119  061F  1303               	bcf	3,6	;RP1=0, select bank0
  3120  0620  01B0               	clrf	_change4
  3121  0621  0AB0               	incf	_change4,f
  3122                           
  3123                           ;mainMaster.c: 418:                         Lcd_Write_Char('*');
  3124  0622  302A               	movlw	42
  3125  0623  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  3126  0628  28AF               	goto	l3996
  3127  0629                     l4356:	
  3128  0629  0808               	movf	8,w	;volatile
  3129  062A  1D03               	btfss	3,2
  3130  062B  2E2E               	goto	l429
  3131                           
  3132                           ;mainMaster.c: 421:                         change4 = 0;
  3133  062C  01B0               	clrf	_change4
  3134                           
  3135                           ;mainMaster.c: 422:                 } else if (PORTEbits.RE0 == 1){
  3136  062D  28AF               	goto	l3996
  3137  062E                     l429:	
  3138  062E  1C09               	btfss	9,0	;volatile
  3139  062F  2E9B               	goto	l431
  3140                           
  3141                           ;mainMaster.c: 423:                     if (passwordu[0] == password[0] & passwordu[1] =
      +                          = password[1] & passwordu[2] == password[2] & passwordu[3] == password[3] & passwordu[4]
      +                           == password[4]){
  3142  0630  0820               	movf	_passwordu,w
  3143  0631  0668               	xorwf	_password,w
  3144  0632  1D03               	skipz
  3145  0633  2E87               	goto	l4394
  3146  0634  0821               	movf	_passwordu+1,w
  3147  0635  0669               	xorwf	_password+1,w
  3148  0636  1D03               	skipz
  3149  0637  2E87               	goto	l4394
  3150  0638  0822               	movf	_passwordu+2,w
  3151  0639  066A               	xorwf	_password+2,w
  3152  063A  1D03               	skipz
  3153  063B  2E87               	goto	l4394
  3154  063C  0823               	movf	_passwordu+3,w
  3155  063D  066B               	xorwf	_password+3,w
  3156  063E  1D03               	skipz
  3157  063F  2E87               	goto	l4394
  3158  0640  0824               	movf	_passwordu+4,w
  3159  0641  066C               	xorwf	_password+4,w
  3160  0642  1D03               	skipz
  3161  0643  2E87               	goto	l4394
  3162                           
  3163                           ;mainMaster.c: 424:                         if (seguridad == 0){
  3164  0644  0829               	movf	_seguridad,w
  3165  0645  1D03               	btfss	3,2
  3166  0646  2E72               	goto	l4384
  3167                           
  3168                           ;mainMaster.c: 425:                             seguridad = 1;
  3169  0647  01A9               	clrf	_seguridad
  3170  0648  0AA9               	incf	_seguridad,f
  3171                           
  3172                           ;mainMaster.c: 426:                             k = 0;
  3173  0649  01F8               	clrf	_k
  3174                           
  3175                           ;mainMaster.c: 427:                             Lcd_Clear();
  3176  064A  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  3177                           
  3178                           ;mainMaster.c: 428:                             Lcd_Set_Cursor(1,1);
  3179  064F  01F7               	clrf	Lcd_Set_Cursor@b
  3180  0650  0AF7               	incf	Lcd_Set_Cursor@b,f
  3181  0651  3001               	movlw	1
  3182  0652  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3183                           
  3184                           ;mainMaster.c: 429:                             Lcd_Write_String("Security ON");
  3185  0657  306D               	movlw	low (STR_26| (0+32768))
  3186  0658  1283               	bcf	3,5	;RP0=0, select bank0
  3187  0659  1303               	bcf	3,6	;RP1=0, select bank0
  3188  065A  00C7               	movwf	Lcd_Write_String@a
  3189  065B  3087               	movlw	high (STR_26| (0+32768))
  3190  065C                     L12:	
  3191  065C  00C8               	movwf	Lcd_Write_String@a+1
  3192  065D  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  3193                           
  3194                           ;mainMaster.c: 430:                             _delay((unsigned long)((2000)*(8000000/4
      +                          000.0)));
  3195  0662  3015               	movlw	21
  3196  0663  1683               	bsf	3,5	;RP0=1, select bank1
  3197  0664  1303               	bcf	3,6	;RP1=0, select bank1
  3198  0665  00A2               	movwf	(??_main^(0+128)+2)
  3199  0666  304B               	movlw	75
  3200  0667  00A1               	movwf	(??_main^(0+128)+1)
  3201  0668  30BD               	movlw	189
  3202  0669  00A0               	movwf	??_main^(0+128)
  3203  066A                     u5007:	
  3204  066A  0BA0               	decfsz	??_main^(0+128),f
  3205  066B  2E6A               	goto	u5007
  3206  066C  0BA1               	decfsz	(??_main^(0+128)+1),f
  3207  066D  2E6A               	goto	u5007
  3208  066E  0BA2               	decfsz	(??_main^(0+128)+2),f
  3209  066F  2E6A               	goto	u5007
  3210  0670  2E71               	nop2
  3211                           
  3212                           ;mainMaster.c: 431:                         } else {
  3213  0671  28AF               	goto	l3996
  3214  0672                     l4384:	
  3215                           
  3216                           ;mainMaster.c: 432:                             seguridad = 0;
  3217  0672  01A9               	clrf	_seguridad
  3218                           
  3219                           ;mainMaster.c: 433:                             k = 0;
  3220  0673  01F8               	clrf	_k
  3221                           
  3222                           ;mainMaster.c: 434:                             Lcd_Clear();
  3223  0674  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  3224                           
  3225                           ;mainMaster.c: 435:                             Lcd_Set_Cursor(1,1);
  3226  0679  01F7               	clrf	Lcd_Set_Cursor@b
  3227  067A  0AF7               	incf	Lcd_Set_Cursor@b,f
  3228  067B  3001               	movlw	1
  3229  067C  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3230                           
  3231                           ;mainMaster.c: 436:                             Lcd_Write_String("Security OFF");
  3232  0681  3048               	movlw	low (STR_27| (0+32768))
  3233  0682  1283               	bcf	3,5	;RP0=0, select bank0
  3234  0683  1303               	bcf	3,6	;RP1=0, select bank0
  3235  0684  00C7               	movwf	Lcd_Write_String@a
  3236  0685  3087               	movlw	high (STR_27| (0+32768))
  3237  0686  2E5C               	goto	L12
  3238  0687                     l4394:	
  3239                           
  3240                           ;mainMaster.c: 440:                         Lcd_Clear();
  3241  0687  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  3242                           
  3243                           ;mainMaster.c: 441:                         k = 0;
  3244  068C  01F8               	clrf	_k
  3245                           
  3246                           ;mainMaster.c: 442:                         Lcd_Set_Cursor(1,1);
  3247  068D  01F7               	clrf	Lcd_Set_Cursor@b
  3248  068E  0AF7               	incf	Lcd_Set_Cursor@b,f
  3249  068F  3001               	movlw	1
  3250  0690  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3251                           
  3252                           ;mainMaster.c: 443:                         Lcd_Write_String("WRONG");
  3253  0695  301C               	movlw	low (STR_28| (0+32768))
  3254  0696  1283               	bcf	3,5	;RP0=0, select bank0
  3255  0697  1303               	bcf	3,6	;RP1=0, select bank0
  3256  0698  00C7               	movwf	Lcd_Write_String@a
  3257  0699  3088               	movlw	high (STR_28| (0+32768))
  3258  069A  2E5C               	goto	L12
  3259  069B                     l431:	
  3260  069B  1C89               	btfss	9,1	;volatile
  3261  069C  28AF               	goto	l3996
  3262                           
  3263                           ;mainMaster.c: 447:                     Lcd_Set_Cursor(2,1);
  3264  069D  01F7               	clrf	Lcd_Set_Cursor@b
  3265  069E  0AF7               	incf	Lcd_Set_Cursor@b,f
  3266  069F  3002               	movlw	2
  3267  06A0  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3268                           
  3269                           ;mainMaster.c: 448:                     Lcd_Write_String("            ");
  3270  06A5  303B               	movlw	low (STR_29| (0+32768))
  3271  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  3272  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  3273  06A8  00C7               	movwf	Lcd_Write_String@a
  3274  06A9  3087               	movlw	high (STR_29| (0+32768))
  3275  06AA  00C8               	movwf	Lcd_Write_String@a+1
  3276  06AB  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  3277                           
  3278                           ;mainMaster.c: 449:                     k = 0;
  3279  06B0  01F8               	clrf	_k
  3280  06B1  28AF               	goto	l3996
  3281  06B2                     __end_of_main:	
  3282                           
  3283                           	psect	text1
  3284  0A1C                     __ptext1:	
  3285 ;; *************** function _write_RTC *****************
  3286 ;; Defined at:
  3287 ;;		line 493 in file "mainMaster.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  hour            1    wreg     unsigned char 
  3290 ;;  minutes         1    5[COMMON] unsigned char 
  3291 ;;  day             1    6[COMMON] unsigned char 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;  hour            1    7[COMMON] unsigned char 
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      void 
  3296 ;; Registers used:
  3297 ;;		wreg, status,2, status,0, pclath, cstack
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3303 ;;      Params:         2       0       0       0       0
  3304 ;;      Locals:         1       0       0       0       0
  3305 ;;      Temps:          0       2       0       0       0
  3306 ;;      Totals:         3       2       0       0       0
  3307 ;;Total ram usage:        5 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    3
  3310 ;; This function calls:
  3311 ;;		_I2C_Master_Start
  3312 ;;		_I2C_Master_Stop
  3313 ;;		_I2C_Master_Write
  3314 ;; This function is called by:
  3315 ;;		_main
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           
  3320                           ;psect for function _write_RTC
  3321  0A1C                     _write_RTC:	
  3322                           
  3323                           ;incstack = 0
  3324                           ; Regs used in _write_RTC: [wreg+status,2+status,0+pclath+cstack]
  3325                           ;write_RTC@hour stored from wreg
  3326  0A1C  00F7               	movwf	write_RTC@hour
  3327                           
  3328                           ;mainMaster.c: 495:     I2C_Master_Start();
  3329  0A1D  160A  118A  2692  120A  158A  	fcall	_I2C_Master_Start
  3330                           
  3331                           ;mainMaster.c: 496:     I2C_Master_Write(0xD0);
  3332  0A22  30D0               	movlw	208
  3333  0A23  00F3               	movwf	I2C_Master_Write@d
  3334  0A24  3000               	movlw	0
  3335  0A25  00F4               	movwf	I2C_Master_Write@d+1
  3336  0A26  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  3337                           
  3338                           ;mainMaster.c: 497:     I2C_Master_Write(0x01);
  3339  0A2B  3001               	movlw	1
  3340  0A2C  00F3               	movwf	I2C_Master_Write@d
  3341  0A2D  3000               	movlw	0
  3342  0A2E  00F4               	movwf	I2C_Master_Write@d+1
  3343  0A2F  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  3344                           
  3345                           ;mainMaster.c: 498:     I2C_Master_Write(minutes);
  3346  0A34  0875               	movf	write_RTC@minutes,w
  3347  0A35  1283               	bcf	3,5	;RP0=0, select bank0
  3348  0A36  1303               	bcf	3,6	;RP1=0, select bank0
  3349  0A37  00C7               	movwf	??_write_RTC
  3350  0A38  01C8               	clrf	??_write_RTC+1
  3351  0A39  0847               	movf	??_write_RTC,w
  3352  0A3A  00F3               	movwf	I2C_Master_Write@d
  3353  0A3B  0848               	movf	??_write_RTC+1,w
  3354  0A3C  00F4               	movwf	I2C_Master_Write@d+1
  3355  0A3D  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  3356                           
  3357                           ;mainMaster.c: 499:     I2C_Master_Write(hour);
  3358  0A42  0877               	movf	write_RTC@hour,w
  3359  0A43  1283               	bcf	3,5	;RP0=0, select bank0
  3360  0A44  1303               	bcf	3,6	;RP1=0, select bank0
  3361  0A45  00C7               	movwf	??_write_RTC
  3362  0A46  01C8               	clrf	??_write_RTC+1
  3363  0A47  0847               	movf	??_write_RTC,w
  3364  0A48  00F3               	movwf	I2C_Master_Write@d
  3365  0A49  0848               	movf	??_write_RTC+1,w
  3366  0A4A  00F4               	movwf	I2C_Master_Write@d+1
  3367  0A4B  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  3368                           
  3369                           ;mainMaster.c: 500:     I2C_Master_Write(day);
  3370  0A50  0876               	movf	write_RTC@day,w
  3371  0A51  1283               	bcf	3,5	;RP0=0, select bank0
  3372  0A52  1303               	bcf	3,6	;RP1=0, select bank0
  3373  0A53  00C7               	movwf	??_write_RTC
  3374  0A54  01C8               	clrf	??_write_RTC+1
  3375  0A55  0847               	movf	??_write_RTC,w
  3376  0A56  00F3               	movwf	I2C_Master_Write@d
  3377  0A57  0848               	movf	??_write_RTC+1,w
  3378  0A58  00F4               	movwf	I2C_Master_Write@d+1
  3379  0A59  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  3380                           
  3381                           ;mainMaster.c: 501:     I2C_Master_Stop();
  3382  0A5E  160A  118A  2699   	fcall	_I2C_Master_Stop
  3383  0A61  0008               	return
  3384  0A62                     __end_of_write_RTC:	
  3385                           
  3386                           	psect	text2
  3387  088E                     __ptext2:	
  3388 ;; *************** function _strcmp *****************
  3389 ;; Defined at:
  3390 ;;		line 33 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;  s1              1    wreg     PTR const unsigned char 
  3393 ;;		 -> time(6), temp(6), 
  3394 ;;  s2              2    3[COMMON] PTR const unsigned char 
  3395 ;;		 -> STR_12(6), STR_11(6), STR_10(6), 
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;  s1              1    1[BANK0 ] PTR const unsigned char 
  3398 ;;		 -> time(6), temp(6), 
  3399 ;;  r               1    0[BANK0 ] char 
  3400 ;; Return value:  Size  Location     Type
  3401 ;;                  2    3[COMMON] int 
  3402 ;; Registers used:
  3403 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3409 ;;      Params:         2       0       0       0       0
  3410 ;;      Locals:         0       2       0       0       0
  3411 ;;      Temps:          3       0       0       0       0
  3412 ;;      Totals:         5       2       0       0       0
  3413 ;;Total ram usage:        7 bytes
  3414 ;; Hardware stack levels used:    2
  3415 ;; Hardware stack levels required when called:    1
  3416 ;; This function calls:
  3417 ;;		Nothing
  3418 ;; This function is called by:
  3419 ;;		_main
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           
  3424                           ;psect for function _strcmp
  3425  088E                     _strcmp:	
  3426                           
  3427                           ;incstack = 0
  3428                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3429                           ;strcmp@s1 stored from wreg
  3430  088E  1283               	bcf	3,5	;RP0=0, select bank0
  3431  088F  1303               	bcf	3,6	;RP1=0, select bank0
  3432  0890  00C8               	movwf	strcmp@s1
  3433  0891  28A1               	goto	l3902
  3434  0892                     l3904:	
  3435  0892  0848               	movf	strcmp@s1,w
  3436  0893  0084               	movwf	4
  3437  0894  0800               	movf	0,w
  3438  0895  1903               	btfsc	3,2
  3439  0896  28B8               	goto	l3906
  3440  0897  3001               	movlw	1
  3441  0898  00F5               	movwf	??_strcmp
  3442  0899  0875               	movf	??_strcmp,w
  3443  089A  07C8               	addwf	strcmp@s1,f
  3444  089B  3001               	movlw	1
  3445  089C  07F3               	addwf	strcmp@s2,f
  3446  089D  1803               	skipnc
  3447  089E  0AF4               	incf	strcmp@s2+1,f
  3448  089F  3000               	movlw	0
  3449  08A0  07F4               	addwf	strcmp@s2+1,f
  3450  08A1                     l3902:	
  3451  08A1  0874               	movf	strcmp@s2+1,w
  3452  08A2  00FF               	movwf	127
  3453  08A3  0873               	movf	strcmp@s2,w
  3454  08A4  0084               	movwf	4
  3455  08A5  120A  118A  2700  120A  158A  	fcall	stringtab
  3456  08AA  00F5               	movwf	??_strcmp
  3457  08AB  0848               	movf	strcmp@s1,w
  3458  08AC  0084               	movwf	4
  3459  08AD  1383               	bcf	3,7	;select IRP bank0
  3460  08AE  0800               	movf	0,w
  3461  08AF  00F6               	movwf	??_strcmp+1
  3462  08B0  0875               	movf	??_strcmp,w
  3463  08B1  0276               	subwf	??_strcmp+1,w
  3464  08B2  00F7               	movwf	??_strcmp+2
  3465  08B3  0877               	movf	??_strcmp+2,w
  3466  08B4  00C7               	movwf	strcmp@r
  3467  08B5  0847               	movf	strcmp@r,w
  3468  08B6  1903               	btfsc	3,2
  3469  08B7  2892               	goto	l3904
  3470  08B8                     l3906:	
  3471  08B8  0847               	movf	strcmp@r,w
  3472  08B9  00F3               	movwf	?_strcmp
  3473  08BA  01F4               	clrf	?_strcmp+1
  3474  08BB  1BF3               	btfsc	?_strcmp,7
  3475  08BC  03F4               	decf	?_strcmp+1,f
  3476  08BD  0008               	return
  3477  08BE                     __end_of_strcmp:	
  3478                           
  3479                           	psect	text3
  3480  0B62                     __ptext3:	
  3481 ;; *************** function _setup *****************
  3482 ;; Defined at:
  3483 ;;		line 457 in file "mainMaster.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;		None
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;		None
  3488 ;; Return value:  Size  Location     Type
  3489 ;;                  1    wreg      void 
  3490 ;; Registers used:
  3491 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3492 ;; Tracked objects:
  3493 ;;		On entry : 0/0
  3494 ;;		On exit  : 0/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3497 ;;      Params:         0       0       0       0       0
  3498 ;;      Locals:         0       0       0       0       0
  3499 ;;      Temps:          0       0       0       0       0
  3500 ;;      Totals:         0       0       0       0       0
  3501 ;;Total ram usage:        0 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; Hardware stack levels required when called:    4
  3504 ;; This function calls:
  3505 ;;		_I2C_Master_Init
  3506 ;;		_Lcd_Init
  3507 ;;		_UART_Init
  3508 ;;		_initOscilador
  3509 ;; This function is called by:
  3510 ;;		_main
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514                           
  3515                           ;psect for function _setup
  3516  0B62                     _setup:	
  3517                           
  3518                           ;mainMaster.c: 458:     initOscilador(7);
  3519                           
  3520                           ;incstack = 0
  3521                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3522  0B62  3007               	movlw	7
  3523  0B63  120A  158A  22B2  120A  158A  	fcall	_initOscilador
  3524                           
  3525                           ;mainMaster.c: 459:     ANSELH = 0;
  3526  0B68  1683               	bsf	3,5	;RP0=1, select bank3
  3527  0B69  1703               	bsf	3,6	;RP1=1, select bank3
  3528  0B6A  0189               	clrf	9	;volatile
  3529                           
  3530                           ;mainMaster.c: 460:     ANSEL = 0;
  3531  0B6B  0188               	clrf	8	;volatile
  3532                           
  3533                           ;mainMaster.c: 461:     TRISB = 0;
  3534  0B6C  1683               	bsf	3,5	;RP0=1, select bank1
  3535  0B6D  1303               	bcf	3,6	;RP1=0, select bank1
  3536  0B6E  0186               	clrf	6	;volatile
  3537                           
  3538                           ;mainMaster.c: 462:     TRISA = 0;
  3539  0B6F  0185               	clrf	5	;volatile
  3540                           
  3541                           ;mainMaster.c: 463:     TRISD = 0xFF;
  3542  0B70  30FF               	movlw	255
  3543  0B71  0088               	movwf	8	;volatile
  3544                           
  3545                           ;mainMaster.c: 464:     PORTB = 0;
  3546  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  3547  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  3548  0B74  0186               	clrf	6	;volatile
  3549                           
  3550                           ;mainMaster.c: 465:     PORTA = 0;
  3551  0B75  0185               	clrf	5	;volatile
  3552                           
  3553                           ;mainMaster.c: 466:     TRISC = 0x01;
  3554  0B76  3001               	movlw	1
  3555  0B77  1683               	bsf	3,5	;RP0=1, select bank1
  3556  0B78  1303               	bcf	3,6	;RP1=0, select bank1
  3557  0B79  0087               	movwf	7	;volatile
  3558                           
  3559                           ;mainMaster.c: 467:     PORTC = 0;
  3560  0B7A  1283               	bcf	3,5	;RP0=0, select bank0
  3561  0B7B  1303               	bcf	3,6	;RP1=0, select bank0
  3562  0B7C  0187               	clrf	7	;volatile
  3563                           
  3564                           ;mainMaster.c: 468:     PORTE = 0;
  3565  0B7D  0189               	clrf	9	;volatile
  3566                           
  3567                           ;mainMaster.c: 469:     TRISE = 0xFF;
  3568  0B7E  30FF               	movlw	255
  3569  0B7F  1683               	bsf	3,5	;RP0=1, select bank1
  3570  0B80  1303               	bcf	3,6	;RP1=0, select bank1
  3571  0B81  0089               	movwf	9	;volatile
  3572                           
  3573                           ;mainMaster.c: 470:     i = 0;
  3574  0B82  1283               	bcf	3,5	;RP0=0, select bank0
  3575  0B83  1303               	bcf	3,6	;RP1=0, select bank0
  3576  0B84  01B6               	clrf	_i
  3577                           
  3578                           ;mainMaster.c: 471:     door = 0;
  3579  0B85  01BA               	clrf	_door
  3580                           
  3581                           ;mainMaster.c: 472:     trip = 0;
  3582  0B86  01B9               	clrf	_trip
  3583                           
  3584                           ;mainMaster.c: 473:     alarm = 0;
  3585  0B87  01AF               	clrf	_alarm
  3586                           
  3587                           ;mainMaster.c: 474:     change2 = 0;
  3588  0B88  01B2               	clrf	_change2
  3589                           
  3590                           ;mainMaster.c: 475:     change3 = 0;
  3591  0B89  01B1               	clrf	_change3
  3592                           
  3593                           ;mainMaster.c: 476:     IR = 0;
  3594  0B8A  01B7               	clrf	_IR
  3595                           
  3596                           ;mainMaster.c: 477:     PIR = 0;
  3597  0B8B  01B8               	clrf	_PIR
  3598                           
  3599                           ;mainMaster.c: 478:     OPTION_REGbits.T0CS = 0;
  3600  0B8C  1683               	bsf	3,5	;RP0=1, select bank1
  3601  0B8D  1303               	bcf	3,6	;RP1=0, select bank1
  3602  0B8E  1281               	bcf	1,5	;volatile
  3603                           
  3604                           ;mainMaster.c: 479:     OPTION_REGbits.T0SE = 0;
  3605  0B8F  1201               	bcf	1,4	;volatile
  3606                           
  3607                           ;mainMaster.c: 480:     OPTION_REGbits.PSA = 1;
  3608  0B90  1581               	bsf	1,3	;volatile
  3609                           
  3610                           ;mainMaster.c: 481:     OPTION_REGbits.PS2 = 0;
  3611  0B91  1101               	bcf	1,2	;volatile
  3612                           
  3613                           ;mainMaster.c: 482:     OPTION_REGbits.PS1 = 0;
  3614  0B92  1081               	bcf	1,1	;volatile
  3615                           
  3616                           ;mainMaster.c: 483:     OPTION_REGbits.PS0 = 0;
  3617  0B93  1001               	bcf	1,0	;volatile
  3618                           
  3619                           ;mainMaster.c: 484:     TMR0 = 56;
  3620  0B94  3038               	movlw	56
  3621  0B95  1283               	bcf	3,5	;RP0=0, select bank0
  3622  0B96  1303               	bcf	3,6	;RP1=0, select bank0
  3623  0B97  0081               	movwf	1	;volatile
  3624                           
  3625                           ;mainMaster.c: 485:     INTCONbits.T0IF = 0;
  3626  0B98  110B               	bcf	11,2	;volatile
  3627                           
  3628                           ;mainMaster.c: 486:     INTCONbits.T0IE = 1;
  3629  0B99  168B               	bsf	11,5	;volatile
  3630                           
  3631                           ;mainMaster.c: 487:     INTCONbits.GIE = 1;
  3632  0B9A  178B               	bsf	11,7	;volatile
  3633                           
  3634                           ;mainMaster.c: 488:     Lcd_Init();
  3635  0B9B  120A  158A  241D  120A  158A  	fcall	_Lcd_Init
  3636                           
  3637                           ;mainMaster.c: 489:     UART_Init(9600);
  3638  0BA0  3000               	movlw	0
  3639  0BA1  1283               	bcf	3,5	;RP0=0, select bank0
  3640  0BA2  1303               	bcf	3,6	;RP1=0, select bank0
  3641  0BA3  00D8               	movwf	UART_Init@baudrate+3
  3642  0BA4  3000               	movlw	0
  3643  0BA5  00D7               	movwf	UART_Init@baudrate+2
  3644  0BA6  3025               	movlw	37
  3645  0BA7  00D6               	movwf	UART_Init@baudrate+1
  3646  0BA8  3080               	movlw	128
  3647  0BA9  00D5               	movwf	UART_Init@baudrate
  3648  0BAA  120A  158A  263A  120A  158A  	fcall	_UART_Init
  3649                           
  3650                           ;mainMaster.c: 490:     I2C_Master_Init(100000);
  3651  0BAF  3000               	movlw	0
  3652  0BB0  1283               	bcf	3,5	;RP0=0, select bank0
  3653  0BB1  1303               	bcf	3,6	;RP1=0, select bank0
  3654  0BB2  00D7               	movwf	I2C_Master_Init@c+3
  3655  0BB3  3001               	movlw	1
  3656  0BB4  00D6               	movwf	I2C_Master_Init@c+2
  3657  0BB5  3086               	movlw	134
  3658  0BB6  00D5               	movwf	I2C_Master_Init@c+1
  3659  0BB7  30A0               	movlw	160
  3660  0BB8  00D4               	movwf	I2C_Master_Init@c
  3661  0BB9  120A  158A  20F2   	fcall	_I2C_Master_Init
  3662  0BBC  0008               	return
  3663  0BBD                     __end_of_setup:	
  3664                           
  3665                           	psect	text4
  3666  0AB2                     __ptext4:	
  3667 ;; *************** function _initOscilador *****************
  3668 ;; Defined at:
  3669 ;;		line 11 in file "./Oscilador.h"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  option          1    wreg     unsigned char 
  3672 ;; Auto vars:     Size  Location     Type
  3673 ;;  option          1    5[COMMON] unsigned char 
  3674 ;; Return value:  Size  Location     Type
  3675 ;;                  1    wreg      void 
  3676 ;; Registers used:
  3677 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3678 ;; Tracked objects:
  3679 ;;		On entry : 0/0
  3680 ;;		On exit  : 0/0
  3681 ;;		Unchanged: 0/0
  3682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3683 ;;      Params:         0       0       0       0       0
  3684 ;;      Locals:         1       0       0       0       0
  3685 ;;      Temps:          2       0       0       0       0
  3686 ;;      Totals:         3       0       0       0       0
  3687 ;;Total ram usage:        3 bytes
  3688 ;; Hardware stack levels used:    1
  3689 ;; Hardware stack levels required when called:    1
  3690 ;; This function calls:
  3691 ;;		Nothing
  3692 ;; This function is called by:
  3693 ;;		_setup
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           
  3698                           ;psect for function _initOscilador
  3699  0AB2                     _initOscilador:	
  3700                           
  3701                           ;incstack = 0
  3702                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  3703                           ;initOscilador@option stored from wreg
  3704  0AB2  00F5               	movwf	initOscilador@option
  3705                           
  3706                           ;./Oscilador.h: 13: 
  3707  0AB3  2AE3               	goto	l2554
  3708  0AB4                     l2534:	
  3709                           
  3710                           ;./Oscilador.h: 16:         case 3:
  3711  0AB4  308F               	movlw	-113
  3712  0AB5  1683               	bsf	3,5	;RP0=1, select bank1
  3713  0AB6  1303               	bcf	3,6	;RP1=0, select bank1
  3714  0AB7  058F               	andwf	15,f	;volatile
  3715                           
  3716                           ;./Oscilador.h: 17: 
  3717  0AB8  2B05               	goto	l203
  3718  0AB9                     l2536:	
  3719                           
  3720                           ;./Oscilador.h: 20:         case 4:
  3721  0AB9  1683               	bsf	3,5	;RP0=1, select bank1
  3722  0ABA  1303               	bcf	3,6	;RP1=0, select bank1
  3723  0ABB  080F               	movf	15,w	;volatile
  3724  0ABC  398F               	andlw	-113
  3725  0ABD  3810               	iorlw	16
  3726  0ABE  2ADC               	goto	L17
  3727  0ABF                     l2538:	
  3728                           ;./Oscilador.h: 21: 
  3729                           
  3730                           
  3731                           ;./Oscilador.h: 24:         case 5:
  3732  0ABF  1683               	bsf	3,5	;RP0=1, select bank1
  3733  0AC0  1303               	bcf	3,6	;RP1=0, select bank1
  3734  0AC1  080F               	movf	15,w	;volatile
  3735  0AC2  398F               	andlw	-113
  3736  0AC3  3820               	iorlw	32
  3737  0AC4  2ADC               	goto	L17
  3738  0AC5                     l2540:	
  3739                           ;./Oscilador.h: 25: 
  3740                           
  3741                           
  3742                           ;./Oscilador.h: 28:         case 6:
  3743  0AC5  1683               	bsf	3,5	;RP0=1, select bank1
  3744  0AC6  1303               	bcf	3,6	;RP1=0, select bank1
  3745  0AC7  080F               	movf	15,w	;volatile
  3746  0AC8  398F               	andlw	-113
  3747  0AC9  3830               	iorlw	48
  3748  0ACA  2ADC               	goto	L17
  3749  0ACB                     l2542:	
  3750                           ;./Oscilador.h: 29: 
  3751                           
  3752                           
  3753                           ;./Oscilador.h: 32:         case 7:
  3754  0ACB  1683               	bsf	3,5	;RP0=1, select bank1
  3755  0ACC  1303               	bcf	3,6	;RP1=0, select bank1
  3756  0ACD  080F               	movf	15,w	;volatile
  3757  0ACE  398F               	andlw	-113
  3758  0ACF  3840               	iorlw	64
  3759  0AD0  2ADC               	goto	L17
  3760  0AD1                     l2544:	
  3761                           ;./Oscilador.h: 33: 
  3762                           
  3763                           
  3764                           ;./Oscilador.h: 36:         default:
  3765  0AD1  1683               	bsf	3,5	;RP0=1, select bank1
  3766  0AD2  1303               	bcf	3,6	;RP1=0, select bank1
  3767  0AD3  080F               	movf	15,w	;volatile
  3768  0AD4  398F               	andlw	-113
  3769  0AD5  3850               	iorlw	80
  3770  0AD6  2ADC               	goto	L17
  3771  0AD7                     l2546:	
  3772                           ;./Oscilador.h: 37: 
  3773                           
  3774                           
  3775                           ;./Oscilador.h: 40:     }
  3776  0AD7  1683               	bsf	3,5	;RP0=1, select bank1
  3777  0AD8  1303               	bcf	3,6	;RP1=0, select bank1
  3778  0AD9  080F               	movf	15,w	;volatile
  3779  0ADA  398F               	andlw	-113
  3780  0ADB  3860               	iorlw	96
  3781  0ADC                     L17:	
  3782  0ADC  008F               	movwf	15	;volatile
  3783                           
  3784                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  3785  0ADD  2B05               	goto	l203
  3786  0ADE                     l2548:	
  3787  0ADE                     l2550:	
  3788  0ADE  3070               	movlw	112
  3789  0ADF  1683               	bsf	3,5	;RP0=1, select bank1
  3790  0AE0  1303               	bcf	3,6	;RP1=0, select bank1
  3791  0AE1  048F               	iorwf	15,f	;volatile
  3792  0AE2  2B05               	goto	l203
  3793  0AE3                     l2554:	
  3794  0AE3  0875               	movf	initOscilador@option,w
  3795  0AE4  00F3               	movwf	??_initOscilador
  3796  0AE5  01F4               	clrf	??_initOscilador+1
  3797                           
  3798                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3799                           ; Switch size 1, requested type "simple"
  3800                           ; Number of cases is 1, Range of values is 0 to 0
  3801                           ; switch strategies available:
  3802                           ; Name         Instructions Cycles
  3803                           ; simple_byte            4     3 (average)
  3804                           ; direct_byte           11     8 (fixed)
  3805                           ; jumptable            260     6 (fixed)
  3806                           ;	Chosen strategy is simple_byte
  3807  0AE6  0874               	movf	??_initOscilador+1,w
  3808  0AE7  3A00               	xorlw	0	; case 0
  3809  0AE8  1903               	skipnz
  3810  0AE9  2AEB               	goto	l4488
  3811  0AEA  2ADE               	goto	l2550
  3812  0AEB                     l4488:	
  3813                           
  3814                           ; Switch size 1, requested type "simple"
  3815                           ; Number of cases is 8, Range of values is 0 to 7
  3816                           ; switch strategies available:
  3817                           ; Name         Instructions Cycles
  3818                           ; simple_byte           25    13 (average)
  3819                           ; direct_byte           32     8 (fixed)
  3820                           ; jumptable            260     6 (fixed)
  3821                           ;	Chosen strategy is simple_byte
  3822  0AEB  0873               	movf	??_initOscilador,w
  3823  0AEC  3A00               	xorlw	0	; case 0
  3824  0AED  1903               	skipnz
  3825  0AEE  2AB4               	goto	l2534
  3826  0AEF  3A01               	xorlw	1	; case 1
  3827  0AF0  1903               	skipnz
  3828  0AF1  2AB9               	goto	l2536
  3829  0AF2  3A03               	xorlw	3	; case 2
  3830  0AF3  1903               	skipnz
  3831  0AF4  2ABF               	goto	l2538
  3832  0AF5  3A01               	xorlw	1	; case 3
  3833  0AF6  1903               	skipnz
  3834  0AF7  2AC5               	goto	l2540
  3835  0AF8  3A07               	xorlw	7	; case 4
  3836  0AF9  1903               	skipnz
  3837  0AFA  2ACB               	goto	l2542
  3838  0AFB  3A01               	xorlw	1	; case 5
  3839  0AFC  1903               	skipnz
  3840  0AFD  2AD1               	goto	l2544
  3841  0AFE  3A03               	xorlw	3	; case 6
  3842  0AFF  1903               	skipnz
  3843  0B00  2AD7               	goto	l2546
  3844  0B01  3A01               	xorlw	1	; case 7
  3845  0B02  1903               	skipnz
  3846  0B03  2ADE               	goto	l2548
  3847  0B04  2ADE               	goto	l2550
  3848  0B05                     l203:	
  3849  0B05  140F               	bsf	15,0	;volatile
  3850  0B06  0008               	return
  3851  0B07                     __end_of_initOscilador:	
  3852                           
  3853                           	psect	text5
  3854  0E3A                     __ptext5:	
  3855 ;; *************** function _UART_Init *****************
  3856 ;; Defined at:
  3857 ;;		line 8 in file "./UART.h"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;  baudrate        4   14[BANK0 ] const long 
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;  x               2    4[COMMON] unsigned int 
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      unsigned char 
  3864 ;; Registers used:
  3865 ;;		wreg, status,2, status,0, pclath, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3871 ;;      Params:         0       4       0       0       0
  3872 ;;      Locals:         2       0       0       0       0
  3873 ;;      Temps:          0      12       0       0       0
  3874 ;;      Totals:         2      16       0       0       0
  3875 ;;Total ram usage:       18 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    2
  3878 ;; This function calls:
  3879 ;;		___aldiv
  3880 ;; This function is called by:
  3881 ;;		_setup
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           
  3886                           ;psect for function _UART_Init
  3887  0E3A                     _UART_Init:	
  3888                           
  3889                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
  3890                           
  3891                           ;incstack = 0
  3892                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  3893  0E3A  1283               	bcf	3,5	;RP0=0, select bank0
  3894  0E3B  1303               	bcf	3,6	;RP1=0, select bank0
  3895  0E3C  0855               	movf	UART_Init@baudrate,w
  3896  0E3D  00D9               	movwf	??_UART_Init
  3897  0E3E  0856               	movf	UART_Init@baudrate+1,w
  3898  0E3F  00DA               	movwf	??_UART_Init+1
  3899  0E40  0857               	movf	UART_Init@baudrate+2,w
  3900  0E41  00DB               	movwf	??_UART_Init+2
  3901  0E42  0858               	movf	UART_Init@baudrate+3,w
  3902  0E43  00DC               	movwf	??_UART_Init+3
  3903  0E44  3006               	movlw	6
  3904  0E45                     u3735:	
  3905  0E45  1003               	clrc
  3906  0E46  0DD9               	rlf	??_UART_Init,f
  3907  0E47  0DDA               	rlf	??_UART_Init+1,f
  3908  0E48  0DDB               	rlf	??_UART_Init+2,f
  3909  0E49  0DDC               	rlf	??_UART_Init+3,f
  3910  0E4A  3EFF               	addlw	-1
  3911  0E4B  1D03               	skipz
  3912  0E4C  2E45               	goto	u3735
  3913  0E4D  085C               	movf	??_UART_Init+3,w
  3914  0E4E  00CA               	movwf	___aldiv@divisor+3
  3915  0E4F  085B               	movf	??_UART_Init+2,w
  3916  0E50  00C9               	movwf	___aldiv@divisor+2
  3917  0E51  085A               	movf	??_UART_Init+1,w
  3918  0E52  00C8               	movwf	___aldiv@divisor+1
  3919  0E53  0859               	movf	??_UART_Init,w
  3920  0E54  00C7               	movwf	___aldiv@divisor
  3921  0E55  0855               	movf	UART_Init@baudrate,w
  3922  0E56  00DD               	movwf	??_UART_Init+4
  3923  0E57  0856               	movf	UART_Init@baudrate+1,w
  3924  0E58  00DE               	movwf	??_UART_Init+5
  3925  0E59  0857               	movf	UART_Init@baudrate+2,w
  3926  0E5A  00DF               	movwf	??_UART_Init+6
  3927  0E5B  0858               	movf	UART_Init@baudrate+3,w
  3928  0E5C  00E0               	movwf	??_UART_Init+7
  3929  0E5D  3006               	movlw	6
  3930  0E5E                     u3745:	
  3931  0E5E  1003               	clrc
  3932  0E5F  0DDD               	rlf	??_UART_Init+4,f
  3933  0E60  0DDE               	rlf	??_UART_Init+5,f
  3934  0E61  0DDF               	rlf	??_UART_Init+6,f
  3935  0E62  0DE0               	rlf	??_UART_Init+7,f
  3936  0E63  3EFF               	addlw	-1
  3937  0E64  1D03               	skipz
  3938  0E65  2E5E               	goto	u3745
  3939  0E66  3000               	movlw	0
  3940  0E67  00E1               	movwf	??_UART_Init+8
  3941  0E68  3012               	movlw	18
  3942  0E69  00E2               	movwf	??_UART_Init+9
  3943  0E6A  307A               	movlw	122
  3944  0E6B  00E3               	movwf	??_UART_Init+10
  3945  0E6C  3000               	movlw	0
  3946  0E6D  00E4               	movwf	??_UART_Init+11
  3947  0E6E  085D               	movf	??_UART_Init+4,w
  3948  0E6F  02E1               	subwf	??_UART_Init+8,f
  3949  0E70  085E               	movf	??_UART_Init+5,w
  3950  0E71  1C03               	skipc
  3951  0E72  0F5E               	incfsz	??_UART_Init+5,w
  3952  0E73  2E75               	goto	u3751
  3953  0E74  2E76               	goto	u3752
  3954  0E75                     u3751:	
  3955  0E75  02E2               	subwf	??_UART_Init+9,f
  3956  0E76                     u3752:	
  3957  0E76  085F               	movf	??_UART_Init+6,w
  3958  0E77  1C03               	skipc
  3959  0E78  0F5F               	incfsz	??_UART_Init+6,w
  3960  0E79  2E7B               	goto	u3753
  3961  0E7A  2E7C               	goto	u3754
  3962  0E7B                     u3753:	
  3963  0E7B  02E3               	subwf	??_UART_Init+10,f
  3964  0E7C                     u3754:	
  3965  0E7C  0860               	movf	??_UART_Init+7,w
  3966  0E7D  1C03               	skipc
  3967  0E7E  0F60               	incfsz	??_UART_Init+7,w
  3968  0E7F  2E81               	goto	u3755
  3969  0E80  2E82               	goto	u3756
  3970  0E81                     u3755:	
  3971  0E81  02E4               	subwf	??_UART_Init+11,f
  3972  0E82                     u3756:	
  3973  0E82  0864               	movf	??_UART_Init+11,w
  3974  0E83  00CE               	movwf	___aldiv@dividend+3
  3975  0E84  0863               	movf	??_UART_Init+10,w
  3976  0E85  00CD               	movwf	___aldiv@dividend+2
  3977  0E86  0862               	movf	??_UART_Init+9,w
  3978  0E87  00CC               	movwf	___aldiv@dividend+1
  3979  0E88  0861               	movf	??_UART_Init+8,w
  3980  0E89  00CB               	movwf	___aldiv@dividend
  3981  0E8A  120A  158A  2506  120A  158A  	fcall	___aldiv
  3982  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  3983  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  3984  0E91  0848               	movf	?___aldiv+1,w
  3985  0E92  00F5               	movwf	UART_Init@x+1
  3986  0E93  0847               	movf	?___aldiv,w
  3987  0E94  00F4               	movwf	UART_Init@x
  3988                           
  3989                           ;./UART.h: 12:  if(x>255)
  3990  0E95  3001               	movlw	1
  3991  0E96  0275               	subwf	UART_Init@x+1,w
  3992  0E97  3000               	movlw	0
  3993  0E98  1903               	skipnz
  3994  0E99  0274               	subwf	UART_Init@x,w
  3995  0E9A  1C03               	skipc
  3996  0E9B  2EF8               	goto	l3658
  3997                           
  3998                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  3999  0E9C  0855               	movf	UART_Init@baudrate,w
  4000  0E9D  00D9               	movwf	??_UART_Init
  4001  0E9E  0856               	movf	UART_Init@baudrate+1,w
  4002  0E9F  00DA               	movwf	??_UART_Init+1
  4003  0EA0  0857               	movf	UART_Init@baudrate+2,w
  4004  0EA1  00DB               	movwf	??_UART_Init+2
  4005  0EA2  0858               	movf	UART_Init@baudrate+3,w
  4006  0EA3  00DC               	movwf	??_UART_Init+3
  4007  0EA4  3004               	movlw	4
  4008  0EA5                     u3775:	
  4009  0EA5  1003               	clrc
  4010  0EA6  0DD9               	rlf	??_UART_Init,f
  4011  0EA7  0DDA               	rlf	??_UART_Init+1,f
  4012  0EA8  0DDB               	rlf	??_UART_Init+2,f
  4013  0EA9  0DDC               	rlf	??_UART_Init+3,f
  4014  0EAA  3EFF               	addlw	-1
  4015  0EAB  1D03               	skipz
  4016  0EAC  2EA5               	goto	u3775
  4017  0EAD  085C               	movf	??_UART_Init+3,w
  4018  0EAE  00CA               	movwf	___aldiv@divisor+3
  4019  0EAF  085B               	movf	??_UART_Init+2,w
  4020  0EB0  00C9               	movwf	___aldiv@divisor+2
  4021  0EB1  085A               	movf	??_UART_Init+1,w
  4022  0EB2  00C8               	movwf	___aldiv@divisor+1
  4023  0EB3  0859               	movf	??_UART_Init,w
  4024  0EB4  00C7               	movwf	___aldiv@divisor
  4025  0EB5  0855               	movf	UART_Init@baudrate,w
  4026  0EB6  00DD               	movwf	??_UART_Init+4
  4027  0EB7  0856               	movf	UART_Init@baudrate+1,w
  4028  0EB8  00DE               	movwf	??_UART_Init+5
  4029  0EB9  0857               	movf	UART_Init@baudrate+2,w
  4030  0EBA  00DF               	movwf	??_UART_Init+6
  4031  0EBB  0858               	movf	UART_Init@baudrate+3,w
  4032  0EBC  00E0               	movwf	??_UART_Init+7
  4033  0EBD  3004               	movlw	4
  4034  0EBE                     u3785:	
  4035  0EBE  1003               	clrc
  4036  0EBF  0DDD               	rlf	??_UART_Init+4,f
  4037  0EC0  0DDE               	rlf	??_UART_Init+5,f
  4038  0EC1  0DDF               	rlf	??_UART_Init+6,f
  4039  0EC2  0DE0               	rlf	??_UART_Init+7,f
  4040  0EC3  3EFF               	addlw	-1
  4041  0EC4  1D03               	skipz
  4042  0EC5  2EBE               	goto	u3785
  4043  0EC6  3000               	movlw	0
  4044  0EC7  00E1               	movwf	??_UART_Init+8
  4045  0EC8  3012               	movlw	18
  4046  0EC9  00E2               	movwf	??_UART_Init+9
  4047  0ECA  307A               	movlw	122
  4048  0ECB  00E3               	movwf	??_UART_Init+10
  4049  0ECC  3000               	movlw	0
  4050  0ECD  00E4               	movwf	??_UART_Init+11
  4051  0ECE  085D               	movf	??_UART_Init+4,w
  4052  0ECF  02E1               	subwf	??_UART_Init+8,f
  4053  0ED0  085E               	movf	??_UART_Init+5,w
  4054  0ED1  1C03               	skipc
  4055  0ED2  0F5E               	incfsz	??_UART_Init+5,w
  4056  0ED3  2ED5               	goto	u3791
  4057  0ED4  2ED6               	goto	u3792
  4058  0ED5                     u3791:	
  4059  0ED5  02E2               	subwf	??_UART_Init+9,f
  4060  0ED6                     u3792:	
  4061  0ED6  085F               	movf	??_UART_Init+6,w
  4062  0ED7  1C03               	skipc
  4063  0ED8  0F5F               	incfsz	??_UART_Init+6,w
  4064  0ED9  2EDB               	goto	u3793
  4065  0EDA  2EDC               	goto	u3794
  4066  0EDB                     u3793:	
  4067  0EDB  02E3               	subwf	??_UART_Init+10,f
  4068  0EDC                     u3794:	
  4069  0EDC  0860               	movf	??_UART_Init+7,w
  4070  0EDD  1C03               	skipc
  4071  0EDE  0F60               	incfsz	??_UART_Init+7,w
  4072  0EDF  2EE1               	goto	u3795
  4073  0EE0  2EE2               	goto	u3796
  4074  0EE1                     u3795:	
  4075  0EE1  02E4               	subwf	??_UART_Init+11,f
  4076  0EE2                     u3796:	
  4077  0EE2  0864               	movf	??_UART_Init+11,w
  4078  0EE3  00CE               	movwf	___aldiv@dividend+3
  4079  0EE4  0863               	movf	??_UART_Init+10,w
  4080  0EE5  00CD               	movwf	___aldiv@dividend+2
  4081  0EE6  0862               	movf	??_UART_Init+9,w
  4082  0EE7  00CC               	movwf	___aldiv@dividend+1
  4083  0EE8  0861               	movf	??_UART_Init+8,w
  4084  0EE9  00CB               	movwf	___aldiv@dividend
  4085  0EEA  120A  158A  2506  120A  158A  	fcall	___aldiv
  4086  0EEF  1283               	bcf	3,5	;RP0=0, select bank0
  4087  0EF0  1303               	bcf	3,6	;RP1=0, select bank0
  4088  0EF1  0848               	movf	?___aldiv+1,w
  4089  0EF2  00F5               	movwf	UART_Init@x+1
  4090  0EF3  0847               	movf	?___aldiv,w
  4091  0EF4  00F4               	movwf	UART_Init@x
  4092                           
  4093                           ;./UART.h: 15:   BRGH = 1;
  4094  0EF5  1683               	bsf	3,5	;RP0=1, select bank1
  4095  0EF6  1303               	bcf	3,6	;RP1=0, select bank1
  4096  0EF7  1518               	bsf	24,2	;volatile
  4097  0EF8                     l3658:	
  4098                           
  4099                           ;./UART.h: 17:  if(x<256)
  4100  0EF8  3001               	movlw	1
  4101  0EF9  0275               	subwf	UART_Init@x+1,w
  4102  0EFA  3000               	movlw	0
  4103  0EFB  1903               	skipnz
  4104  0EFC  0274               	subwf	UART_Init@x,w
  4105  0EFD  1803               	skipnc
  4106  0EFE  0008               	return
  4107                           
  4108                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  4109  0EFF  0874               	movf	UART_Init@x,w
  4110  0F00  1683               	bsf	3,5	;RP0=1, select bank1
  4111  0F01  1303               	bcf	3,6	;RP1=0, select bank1
  4112  0F02  0099               	movwf	25	;volatile
  4113                           
  4114                           ;./UART.h: 20:    SYNC = 0;
  4115  0F03  1218               	bcf	24,4	;volatile
  4116                           
  4117                           ;./UART.h: 21:    SPEN = 1;
  4118  0F04  1283               	bcf	3,5	;RP0=0, select bank0
  4119  0F05  1303               	bcf	3,6	;RP1=0, select bank0
  4120  0F06  1798               	bsf	24,7	;volatile
  4121                           
  4122                           ;./UART.h: 22:           TRISC7 = 1;
  4123  0F07  1683               	bsf	3,5	;RP0=1, select bank1
  4124  0F08  1303               	bcf	3,6	;RP1=0, select bank1
  4125  0F09  1787               	bsf	7,7	;volatile
  4126                           
  4127                           ;./UART.h: 23:           TRISC6 = 1;
  4128  0F0A  1707               	bsf	7,6	;volatile
  4129                           
  4130                           ;./UART.h: 24:           CREN = 1;
  4131  0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  4132  0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  4133  0F0D  1618               	bsf	24,4	;volatile
  4134                           
  4135                           ;./UART.h: 25:           TXEN = 1;
  4136  0F0E  1683               	bsf	3,5	;RP0=1, select bank1
  4137  0F0F  1303               	bcf	3,6	;RP1=0, select bank1
  4138  0F10  1698               	bsf	24,5	;volatile
  4139  0F11  0008               	return
  4140  0F12                     __end_of_UART_Init:	
  4141                           
  4142                           	psect	text6
  4143  0D06                     __ptext6:	
  4144 ;; *************** function ___aldiv *****************
  4145 ;; Defined at:
  4146 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;  divisor         4    0[BANK0 ] long 
  4149 ;;  dividend        4    4[BANK0 ] long 
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;  quotient        4   10[BANK0 ] long 
  4152 ;;  sign            1    9[BANK0 ] unsigned char 
  4153 ;;  counter         1    8[BANK0 ] unsigned char 
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  4    0[BANK0 ] long 
  4156 ;; Registers used:
  4157 ;;		wreg, status,2, status,0
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4163 ;;      Params:         0       8       0       0       0
  4164 ;;      Locals:         0       6       0       0       0
  4165 ;;      Temps:          1       0       0       0       0
  4166 ;;      Totals:         1      14       0       0       0
  4167 ;;Total ram usage:       15 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:    1
  4170 ;; This function calls:
  4171 ;;		Nothing
  4172 ;; This function is called by:
  4173 ;;		_UART_Init
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           
  4178                           ;psect for function ___aldiv
  4179  0D06                     ___aldiv:	
  4180                           
  4181                           ;incstack = 0
  4182                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4183  0D06  1283               	bcf	3,5	;RP0=0, select bank0
  4184  0D07  1303               	bcf	3,6	;RP1=0, select bank0
  4185  0D08  01D0               	clrf	___aldiv@sign
  4186  0D09  1FCA               	btfss	___aldiv@divisor+3,7
  4187  0D0A  2D18               	goto	l654
  4188  0D0B  09C7               	comf	___aldiv@divisor,f
  4189  0D0C  09C8               	comf	___aldiv@divisor+1,f
  4190  0D0D  09C9               	comf	___aldiv@divisor+2,f
  4191  0D0E  09CA               	comf	___aldiv@divisor+3,f
  4192  0D0F  0AC7               	incf	___aldiv@divisor,f
  4193  0D10  1903               	skipnz
  4194  0D11  0AC8               	incf	___aldiv@divisor+1,f
  4195  0D12  1903               	skipnz
  4196  0D13  0AC9               	incf	___aldiv@divisor+2,f
  4197  0D14  1903               	skipnz
  4198  0D15  0ACA               	incf	___aldiv@divisor+3,f
  4199  0D16  01D0               	clrf	___aldiv@sign
  4200  0D17  0AD0               	incf	___aldiv@sign,f
  4201  0D18                     l654:	
  4202  0D18  1FCE               	btfss	___aldiv@dividend+3,7
  4203  0D19  2D29               	goto	l3540
  4204  0D1A  09CB               	comf	___aldiv@dividend,f
  4205  0D1B  09CC               	comf	___aldiv@dividend+1,f
  4206  0D1C  09CD               	comf	___aldiv@dividend+2,f
  4207  0D1D  09CE               	comf	___aldiv@dividend+3,f
  4208  0D1E  0ACB               	incf	___aldiv@dividend,f
  4209  0D1F  1903               	skipnz
  4210  0D20  0ACC               	incf	___aldiv@dividend+1,f
  4211  0D21  1903               	skipnz
  4212  0D22  0ACD               	incf	___aldiv@dividend+2,f
  4213  0D23  1903               	skipnz
  4214  0D24  0ACE               	incf	___aldiv@dividend+3,f
  4215  0D25  3001               	movlw	1
  4216  0D26  00F3               	movwf	??___aldiv
  4217  0D27  0873               	movf	??___aldiv,w
  4218  0D28  06D0               	xorwf	___aldiv@sign,f
  4219  0D29                     l3540:	
  4220  0D29  3000               	movlw	0
  4221  0D2A  00D4               	movwf	___aldiv@quotient+3
  4222  0D2B  3000               	movlw	0
  4223  0D2C  00D3               	movwf	___aldiv@quotient+2
  4224  0D2D  3000               	movlw	0
  4225  0D2E  00D2               	movwf	___aldiv@quotient+1
  4226  0D2F  3000               	movlw	0
  4227  0D30  00D1               	movwf	___aldiv@quotient
  4228  0D31  084A               	movf	___aldiv@divisor+3,w
  4229  0D32  0449               	iorwf	___aldiv@divisor+2,w
  4230  0D33  0448               	iorwf	___aldiv@divisor+1,w
  4231  0D34  0447               	iorwf	___aldiv@divisor,w
  4232  0D35  1903               	skipnz
  4233  0D36  2D7E               	goto	l3562
  4234  0D37  01CF               	clrf	___aldiv@counter
  4235  0D38  0ACF               	incf	___aldiv@counter,f
  4236  0D39                     l3548:	
  4237  0D39  1BCA               	btfsc	___aldiv@divisor+3,7
  4238  0D3A  2D49               	goto	l3550
  4239  0D3B  3001               	movlw	1
  4240  0D3C  00F3               	movwf	??___aldiv
  4241  0D3D                     u3575:	
  4242  0D3D  1003               	clrc
  4243  0D3E  0DC7               	rlf	___aldiv@divisor,f
  4244  0D3F  0DC8               	rlf	___aldiv@divisor+1,f
  4245  0D40  0DC9               	rlf	___aldiv@divisor+2,f
  4246  0D41  0DCA               	rlf	___aldiv@divisor+3,f
  4247  0D42  0BF3               	decfsz	??___aldiv,f
  4248  0D43  2D3D               	goto	u3575
  4249  0D44  3001               	movlw	1
  4250  0D45  00F3               	movwf	??___aldiv
  4251  0D46  0873               	movf	??___aldiv,w
  4252  0D47  07CF               	addwf	___aldiv@counter,f
  4253  0D48  2D39               	goto	l3548
  4254  0D49                     l3550:	
  4255  0D49  3001               	movlw	1
  4256  0D4A  00F3               	movwf	??___aldiv
  4257  0D4B                     u3595:	
  4258  0D4B  1003               	clrc
  4259  0D4C  0DD1               	rlf	___aldiv@quotient,f
  4260  0D4D  0DD2               	rlf	___aldiv@quotient+1,f
  4261  0D4E  0DD3               	rlf	___aldiv@quotient+2,f
  4262  0D4F  0DD4               	rlf	___aldiv@quotient+3,f
  4263  0D50  0BF3               	decfsz	??___aldiv,f
  4264  0D51  2D4B               	goto	u3595
  4265  0D52  084A               	movf	___aldiv@divisor+3,w
  4266  0D53  024E               	subwf	___aldiv@dividend+3,w
  4267  0D54  1D03               	skipz
  4268  0D55  2D60               	goto	u3605
  4269  0D56  0849               	movf	___aldiv@divisor+2,w
  4270  0D57  024D               	subwf	___aldiv@dividend+2,w
  4271  0D58  1D03               	skipz
  4272  0D59  2D60               	goto	u3605
  4273  0D5A  0848               	movf	___aldiv@divisor+1,w
  4274  0D5B  024C               	subwf	___aldiv@dividend+1,w
  4275  0D5C  1D03               	skipz
  4276  0D5D  2D60               	goto	u3605
  4277  0D5E  0847               	movf	___aldiv@divisor,w
  4278  0D5F  024B               	subwf	___aldiv@dividend,w
  4279  0D60                     u3605:	
  4280  0D60  1C03               	skipc
  4281  0D61  2D71               	goto	l3558
  4282  0D62  0847               	movf	___aldiv@divisor,w
  4283  0D63  02CB               	subwf	___aldiv@dividend,f
  4284  0D64  0848               	movf	___aldiv@divisor+1,w
  4285  0D65  1C03               	skipc
  4286  0D66  0F48               	incfsz	___aldiv@divisor+1,w
  4287  0D67  02CC               	subwf	___aldiv@dividend+1,f
  4288  0D68  0849               	movf	___aldiv@divisor+2,w
  4289  0D69  1C03               	skipc
  4290  0D6A  0F49               	incfsz	___aldiv@divisor+2,w
  4291  0D6B  02CD               	subwf	___aldiv@dividend+2,f
  4292  0D6C  084A               	movf	___aldiv@divisor+3,w
  4293  0D6D  1C03               	skipc
  4294  0D6E  0F4A               	incfsz	___aldiv@divisor+3,w
  4295  0D6F  02CE               	subwf	___aldiv@dividend+3,f
  4296  0D70  1451               	bsf	___aldiv@quotient,0
  4297  0D71                     l3558:	
  4298  0D71  3001               	movlw	1
  4299  0D72                     u3615:	
  4300  0D72  1003               	clrc
  4301  0D73  0CCA               	rrf	___aldiv@divisor+3,f
  4302  0D74  0CC9               	rrf	___aldiv@divisor+2,f
  4303  0D75  0CC8               	rrf	___aldiv@divisor+1,f
  4304  0D76  0CC7               	rrf	___aldiv@divisor,f
  4305  0D77  3EFF               	addlw	-1
  4306  0D78  1D03               	skipz
  4307  0D79  2D72               	goto	u3615
  4308  0D7A  3001               	movlw	1
  4309  0D7B  02CF               	subwf	___aldiv@counter,f
  4310  0D7C  1D03               	btfss	3,2
  4311  0D7D  2D49               	goto	l3550
  4312  0D7E                     l3562:	
  4313  0D7E  0850               	movf	___aldiv@sign,w
  4314  0D7F  1903               	btfsc	3,2
  4315  0D80  2D8C               	goto	l3566
  4316  0D81  09D1               	comf	___aldiv@quotient,f
  4317  0D82  09D2               	comf	___aldiv@quotient+1,f
  4318  0D83  09D3               	comf	___aldiv@quotient+2,f
  4319  0D84  09D4               	comf	___aldiv@quotient+3,f
  4320  0D85  0AD1               	incf	___aldiv@quotient,f
  4321  0D86  1903               	skipnz
  4322  0D87  0AD2               	incf	___aldiv@quotient+1,f
  4323  0D88  1903               	skipnz
  4324  0D89  0AD3               	incf	___aldiv@quotient+2,f
  4325  0D8A  1903               	skipnz
  4326  0D8B  0AD4               	incf	___aldiv@quotient+3,f
  4327  0D8C                     l3566:	
  4328  0D8C  0854               	movf	___aldiv@quotient+3,w
  4329  0D8D  00CA               	movwf	?___aldiv+3
  4330  0D8E  0853               	movf	___aldiv@quotient+2,w
  4331  0D8F  00C9               	movwf	?___aldiv+2
  4332  0D90  0852               	movf	___aldiv@quotient+1,w
  4333  0D91  00C8               	movwf	?___aldiv+1
  4334  0D92  0851               	movf	___aldiv@quotient,w
  4335  0D93  00C7               	movwf	?___aldiv
  4336  0D94  0008               	return
  4337  0D95                     __end_of___aldiv:	
  4338                           
  4339                           	psect	text7
  4340  0C1D                     __ptext7:	
  4341 ;; *************** function _Lcd_Init *****************
  4342 ;; Defined at:
  4343 ;;		line 65 in file "./LCD4bits.h"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;		None
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;		None
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  1    wreg      void 
  4350 ;; Registers used:
  4351 ;;		wreg, status,2, status,0, pclath, cstack
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4357 ;;      Params:         0       0       0       0       0
  4358 ;;      Locals:         0       0       0       0       0
  4359 ;;      Temps:          0       2       0       0       0
  4360 ;;      Totals:         0       2       0       0       0
  4361 ;;Total ram usage:        2 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:    3
  4364 ;; This function calls:
  4365 ;;		_Lcd_Cmd
  4366 ;;		_Lcd_Port
  4367 ;; This function is called by:
  4368 ;;		_setup
  4369 ;; This function uses a non-reentrant model
  4370 ;;
  4371                           
  4372                           
  4373                           ;psect for function _Lcd_Init
  4374  0C1D                     _Lcd_Init:	
  4375                           
  4376                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  4377                           
  4378                           ;incstack = 0
  4379                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  4380  0C1D  3000               	movlw	0
  4381  0C1E  160A  118A  26EB  120A  158A  	fcall	_Lcd_Port
  4382                           
  4383                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  4384  0C23  3034               	movlw	52
  4385  0C24  1283               	bcf	3,5	;RP0=0, select bank0
  4386  0C25  1303               	bcf	3,6	;RP1=0, select bank0
  4387  0C26  00C8               	movwf	??_Lcd_Init+1
  4388  0C27  30F1               	movlw	241
  4389  0C28  00C7               	movwf	??_Lcd_Init
  4390  0C29                     u5017:	
  4391  0C29  0BC7               	decfsz	??_Lcd_Init,f
  4392  0C2A  2C29               	goto	u5017
  4393  0C2B  0BC8               	decfsz	??_Lcd_Init+1,f
  4394  0C2C  2C29               	goto	u5017
  4395                           
  4396                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  4397  0C2D  3003               	movlw	3
  4398  0C2E  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4399                           
  4400                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  4401  0C33  300D               	movlw	13
  4402  0C34  1283               	bcf	3,5	;RP0=0, select bank0
  4403  0C35  1303               	bcf	3,6	;RP1=0, select bank0
  4404  0C36  00C8               	movwf	??_Lcd_Init+1
  4405  0C37  30FB               	movlw	251
  4406  0C38  00C7               	movwf	??_Lcd_Init
  4407  0C39                     u5027:	
  4408  0C39  0BC7               	decfsz	??_Lcd_Init,f
  4409  0C3A  2C39               	goto	u5027
  4410  0C3B  0BC8               	decfsz	??_Lcd_Init+1,f
  4411  0C3C  2C39               	goto	u5027
  4412                           
  4413                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  4414  0C3D  3003               	movlw	3
  4415  0C3E  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4416                           
  4417                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  4418  0C43  301D               	movlw	29
  4419  0C44  1283               	bcf	3,5	;RP0=0, select bank0
  4420  0C45  1303               	bcf	3,6	;RP1=0, select bank0
  4421  0C46  00C8               	movwf	??_Lcd_Init+1
  4422  0C47  3090               	movlw	144
  4423  0C48  00C7               	movwf	??_Lcd_Init
  4424  0C49                     u5037:	
  4425  0C49  0BC7               	decfsz	??_Lcd_Init,f
  4426  0C4A  2C49               	goto	u5037
  4427  0C4B  0BC8               	decfsz	??_Lcd_Init+1,f
  4428  0C4C  2C49               	goto	u5037
  4429  0C4D  0000               	nop
  4430                           
  4431                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  4432  0C4E  3003               	movlw	3
  4433  0C4F  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4434                           
  4435                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  4436  0C54  3002               	movlw	2
  4437  0C55  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4438                           
  4439                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  4440  0C5A  3002               	movlw	2
  4441  0C5B  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4442                           
  4443                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  4444  0C60  3008               	movlw	8
  4445  0C61  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4446                           
  4447                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  4448  0C66  3000               	movlw	0
  4449  0C67  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4450                           
  4451                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  4452  0C6C  300C               	movlw	12
  4453  0C6D  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4454                           
  4455                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  4456  0C72  3000               	movlw	0
  4457  0C73  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4458                           
  4459                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  4460  0C78  3006               	movlw	6
  4461  0C79  160A  118A  2705   	fcall	_Lcd_Cmd
  4462  0C7C  0008               	return
  4463  0C7D                     __end_of_Lcd_Init:	
  4464                           
  4465                           	psect	text8
  4466  08F2                     __ptext8:	
  4467 ;; *************** function _I2C_Master_Init *****************
  4468 ;; Defined at:
  4469 ;;		line 16 in file "./I2C.h"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;  c               4   13[BANK0 ] const unsigned long 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;		None
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      void 
  4476 ;; Registers used:
  4477 ;;		wreg, status,2, status,0, pclath, cstack
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4483 ;;      Params:         0       4       0       0       0
  4484 ;;      Locals:         0       0       0       0       0
  4485 ;;      Temps:          4       0       0       0       0
  4486 ;;      Totals:         4       4       0       0       0
  4487 ;;Total ram usage:        8 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    2
  4490 ;; This function calls:
  4491 ;;		___lldiv
  4492 ;; This function is called by:
  4493 ;;		_setup
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           
  4498                           ;psect for function _I2C_Master_Init
  4499  08F2                     _I2C_Master_Init:	
  4500                           
  4501                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  4502                           
  4503                           ;incstack = 0
  4504                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  4505  08F2  3028               	movlw	40
  4506  08F3  1283               	bcf	3,5	;RP0=0, select bank0
  4507  08F4  1303               	bcf	3,6	;RP1=0, select bank0
  4508  08F5  0094               	movwf	20	;volatile
  4509                           
  4510                           ;./I2C.h: 19:     SSPCON2 = 0;
  4511  08F6  1683               	bsf	3,5	;RP0=1, select bank1
  4512  08F7  1303               	bcf	3,6	;RP1=0, select bank1
  4513  08F8  0191               	clrf	17	;volatile
  4514                           
  4515                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  4516  08F9  1283               	bcf	3,5	;RP0=0, select bank0
  4517  08FA  1303               	bcf	3,6	;RP1=0, select bank0
  4518  08FB  0854               	movf	I2C_Master_Init@c,w
  4519  08FC  00F4               	movwf	??_I2C_Master_Init
  4520  08FD  0855               	movf	I2C_Master_Init@c+1,w
  4521  08FE  00F5               	movwf	??_I2C_Master_Init+1
  4522  08FF  0856               	movf	I2C_Master_Init@c+2,w
  4523  0900  00F6               	movwf	??_I2C_Master_Init+2
  4524  0901  0857               	movf	I2C_Master_Init@c+3,w
  4525  0902  00F7               	movwf	??_I2C_Master_Init+3
  4526  0903  3002               	movlw	2
  4527  0904                     u3715:	
  4528  0904  1003               	clrc
  4529  0905  0DF4               	rlf	??_I2C_Master_Init,f
  4530  0906  0DF5               	rlf	??_I2C_Master_Init+1,f
  4531  0907  0DF6               	rlf	??_I2C_Master_Init+2,f
  4532  0908  0DF7               	rlf	??_I2C_Master_Init+3,f
  4533  0909  3EFF               	addlw	-1
  4534  090A  1D03               	skipz
  4535  090B  2904               	goto	u3715
  4536  090C  0877               	movf	??_I2C_Master_Init+3,w
  4537  090D  00CA               	movwf	___lldiv@divisor+3
  4538  090E  0876               	movf	??_I2C_Master_Init+2,w
  4539  090F  00C9               	movwf	___lldiv@divisor+2
  4540  0910  0875               	movf	??_I2C_Master_Init+1,w
  4541  0911  00C8               	movwf	___lldiv@divisor+1
  4542  0912  0874               	movf	??_I2C_Master_Init,w
  4543  0913  00C7               	movwf	___lldiv@divisor
  4544  0914  3000               	movlw	0
  4545  0915  00CE               	movwf	___lldiv@dividend+3
  4546  0916  307A               	movlw	122
  4547  0917  00CD               	movwf	___lldiv@dividend+2
  4548  0918  3012               	movlw	18
  4549  0919  00CC               	movwf	___lldiv@dividend+1
  4550  091A  3000               	movlw	0
  4551  091B  00CB               	movwf	___lldiv@dividend
  4552  091C  120A  158A  23BD   	fcall	___lldiv
  4553  091F  1283               	bcf	3,5	;RP0=0, select bank0
  4554  0920  1303               	bcf	3,6	;RP1=0, select bank0
  4555  0921  0847               	movf	?___lldiv,w
  4556  0922  3EFF               	addlw	255
  4557  0923  1683               	bsf	3,5	;RP0=1, select bank1
  4558  0924  1303               	bcf	3,6	;RP1=0, select bank1
  4559  0925  0093               	movwf	19	;volatile
  4560                           
  4561                           ;./I2C.h: 21:     SSPSTAT = 0;
  4562  0926  0194               	clrf	20	;volatile
  4563                           
  4564                           ;./I2C.h: 22:     TRISCbits.TRISC3 = 1;
  4565  0927  1587               	bsf	7,3	;volatile
  4566                           
  4567                           ;./I2C.h: 23:     TRISCbits.TRISC4 = 1;
  4568  0928  1607               	bsf	7,4	;volatile
  4569  0929  0008               	return
  4570  092A                     __end_of_I2C_Master_Init:	
  4571                           
  4572                           	psect	text9
  4573  0BBD                     __ptext9:	
  4574 ;; *************** function ___lldiv *****************
  4575 ;; Defined at:
  4576 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;  divisor         4    0[BANK0 ] unsigned long 
  4579 ;;  dividend        4    4[BANK0 ] unsigned long 
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;  quotient        4    8[BANK0 ] unsigned long 
  4582 ;;  counter         1   12[BANK0 ] unsigned char 
  4583 ;; Return value:  Size  Location     Type
  4584 ;;                  4    0[BANK0 ] unsigned long 
  4585 ;; Registers used:
  4586 ;;		wreg, status,2, status,0
  4587 ;; Tracked objects:
  4588 ;;		On entry : 0/0
  4589 ;;		On exit  : 0/0
  4590 ;;		Unchanged: 0/0
  4591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4592 ;;      Params:         0       8       0       0       0
  4593 ;;      Locals:         0       5       0       0       0
  4594 ;;      Temps:          1       0       0       0       0
  4595 ;;      Totals:         1      13       0       0       0
  4596 ;;Total ram usage:       14 bytes
  4597 ;; Hardware stack levels used:    1
  4598 ;; Hardware stack levels required when called:    1
  4599 ;; This function calls:
  4600 ;;		Nothing
  4601 ;; This function is called by:
  4602 ;;		_I2C_Master_Init
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           
  4607                           ;psect for function ___lldiv
  4608  0BBD                     ___lldiv:	
  4609                           
  4610                           ;incstack = 0
  4611                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4612  0BBD  3000               	movlw	0
  4613  0BBE  1283               	bcf	3,5	;RP0=0, select bank0
  4614  0BBF  1303               	bcf	3,6	;RP1=0, select bank0
  4615  0BC0  00D2               	movwf	___lldiv@quotient+3
  4616  0BC1  3000               	movlw	0
  4617  0BC2  00D1               	movwf	___lldiv@quotient+2
  4618  0BC3  3000               	movlw	0
  4619  0BC4  00D0               	movwf	___lldiv@quotient+1
  4620  0BC5  3000               	movlw	0
  4621  0BC6  00CF               	movwf	___lldiv@quotient
  4622  0BC7  084A               	movf	___lldiv@divisor+3,w
  4623  0BC8  0449               	iorwf	___lldiv@divisor+2,w
  4624  0BC9  0448               	iorwf	___lldiv@divisor+1,w
  4625  0BCA  0447               	iorwf	___lldiv@divisor,w
  4626  0BCB  1903               	skipnz
  4627  0BCC  2C14               	goto	l3526
  4628  0BCD  01D3               	clrf	___lldiv@counter
  4629  0BCE  0AD3               	incf	___lldiv@counter,f
  4630  0BCF                     l3512:	
  4631  0BCF  1BCA               	btfsc	___lldiv@divisor+3,7
  4632  0BD0  2BDF               	goto	l3514
  4633  0BD1  3001               	movlw	1
  4634  0BD2  00F3               	movwf	??___lldiv
  4635  0BD3                     u3485:	
  4636  0BD3  1003               	clrc
  4637  0BD4  0DC7               	rlf	___lldiv@divisor,f
  4638  0BD5  0DC8               	rlf	___lldiv@divisor+1,f
  4639  0BD6  0DC9               	rlf	___lldiv@divisor+2,f
  4640  0BD7  0DCA               	rlf	___lldiv@divisor+3,f
  4641  0BD8  0BF3               	decfsz	??___lldiv,f
  4642  0BD9  2BD3               	goto	u3485
  4643  0BDA  3001               	movlw	1
  4644  0BDB  00F3               	movwf	??___lldiv
  4645  0BDC  0873               	movf	??___lldiv,w
  4646  0BDD  07D3               	addwf	___lldiv@counter,f
  4647  0BDE  2BCF               	goto	l3512
  4648  0BDF                     l3514:	
  4649  0BDF  3001               	movlw	1
  4650  0BE0  00F3               	movwf	??___lldiv
  4651  0BE1                     u3505:	
  4652  0BE1  1003               	clrc
  4653  0BE2  0DCF               	rlf	___lldiv@quotient,f
  4654  0BE3  0DD0               	rlf	___lldiv@quotient+1,f
  4655  0BE4  0DD1               	rlf	___lldiv@quotient+2,f
  4656  0BE5  0DD2               	rlf	___lldiv@quotient+3,f
  4657  0BE6  0BF3               	decfsz	??___lldiv,f
  4658  0BE7  2BE1               	goto	u3505
  4659  0BE8  084A               	movf	___lldiv@divisor+3,w
  4660  0BE9  024E               	subwf	___lldiv@dividend+3,w
  4661  0BEA  1D03               	skipz
  4662  0BEB  2BF6               	goto	u3515
  4663  0BEC  0849               	movf	___lldiv@divisor+2,w
  4664  0BED  024D               	subwf	___lldiv@dividend+2,w
  4665  0BEE  1D03               	skipz
  4666  0BEF  2BF6               	goto	u3515
  4667  0BF0  0848               	movf	___lldiv@divisor+1,w
  4668  0BF1  024C               	subwf	___lldiv@dividend+1,w
  4669  0BF2  1D03               	skipz
  4670  0BF3  2BF6               	goto	u3515
  4671  0BF4  0847               	movf	___lldiv@divisor,w
  4672  0BF5  024B               	subwf	___lldiv@dividend,w
  4673  0BF6                     u3515:	
  4674  0BF6  1C03               	skipc
  4675  0BF7  2C07               	goto	l3522
  4676  0BF8  0847               	movf	___lldiv@divisor,w
  4677  0BF9  02CB               	subwf	___lldiv@dividend,f
  4678  0BFA  0848               	movf	___lldiv@divisor+1,w
  4679  0BFB  1C03               	skipc
  4680  0BFC  0F48               	incfsz	___lldiv@divisor+1,w
  4681  0BFD  02CC               	subwf	___lldiv@dividend+1,f
  4682  0BFE  0849               	movf	___lldiv@divisor+2,w
  4683  0BFF  1C03               	skipc
  4684  0C00  0F49               	incfsz	___lldiv@divisor+2,w
  4685  0C01  02CD               	subwf	___lldiv@dividend+2,f
  4686  0C02  084A               	movf	___lldiv@divisor+3,w
  4687  0C03  1C03               	skipc
  4688  0C04  0F4A               	incfsz	___lldiv@divisor+3,w
  4689  0C05  02CE               	subwf	___lldiv@dividend+3,f
  4690  0C06  144F               	bsf	___lldiv@quotient,0
  4691  0C07                     l3522:	
  4692  0C07  3001               	movlw	1
  4693  0C08                     u3525:	
  4694  0C08  1003               	clrc
  4695  0C09  0CCA               	rrf	___lldiv@divisor+3,f
  4696  0C0A  0CC9               	rrf	___lldiv@divisor+2,f
  4697  0C0B  0CC8               	rrf	___lldiv@divisor+1,f
  4698  0C0C  0CC7               	rrf	___lldiv@divisor,f
  4699  0C0D  3EFF               	addlw	-1
  4700  0C0E  1D03               	skipz
  4701  0C0F  2C08               	goto	u3525
  4702  0C10  3001               	movlw	1
  4703  0C11  02D3               	subwf	___lldiv@counter,f
  4704  0C12  1D03               	btfss	3,2
  4705  0C13  2BDF               	goto	l3514
  4706  0C14                     l3526:	
  4707  0C14  0852               	movf	___lldiv@quotient+3,w
  4708  0C15  00CA               	movwf	?___lldiv+3
  4709  0C16  0851               	movf	___lldiv@quotient+2,w
  4710  0C17  00C9               	movwf	?___lldiv+2
  4711  0C18  0850               	movf	___lldiv@quotient+1,w
  4712  0C19  00C8               	movwf	?___lldiv+1
  4713  0C1A  084F               	movf	___lldiv@quotient,w
  4714  0C1B  00C7               	movwf	?___lldiv
  4715  0C1C  0008               	return
  4716  0C1D                     __end_of___lldiv:	
  4717                           
  4718                           	psect	text10
  4719  173A                     __ptext10:	
  4720 ;; *************** function _open_door *****************
  4721 ;; Defined at:
  4722 ;;		line 615 in file "mainMaster.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;		None
  4725 ;; Auto vars:     Size  Location     Type
  4726 ;;		None
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      void 
  4729 ;; Registers used:
  4730 ;;		wreg, status,2, status,0, pclath, cstack
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4736 ;;      Params:         0       0       0       0       0
  4737 ;;      Locals:         0       0       0       0       0
  4738 ;;      Temps:          0       0       0       0       0
  4739 ;;      Totals:         0       0       0       0       0
  4740 ;;Total ram usage:        0 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:    3
  4743 ;; This function calls:
  4744 ;;		_I2C_Master_Start
  4745 ;;		_I2C_Master_Stop
  4746 ;;		_I2C_Master_Write
  4747 ;; This function is called by:
  4748 ;;		_main
  4749 ;; This function uses a non-reentrant model
  4750 ;;
  4751                           
  4752                           
  4753                           ;psect for function _open_door
  4754  173A                     _open_door:	
  4755                           
  4756                           ;mainMaster.c: 617:     I2C_Master_Start();
  4757                           
  4758                           ;incstack = 0
  4759                           ; Regs used in _open_door: [wreg+status,2+status,0+pclath+cstack]
  4760  173A  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  4761                           
  4762                           ;mainMaster.c: 618:     I2C_Master_Write(0x20);
  4763  173F  3020               	movlw	32
  4764  1740  00F3               	movwf	I2C_Master_Write@d
  4765  1741  3000               	movlw	0
  4766  1742  00F4               	movwf	I2C_Master_Write@d+1
  4767  1743  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  4768                           
  4769                           ;mainMaster.c: 619:     I2C_Master_Write(0xFF);
  4770  1748  30FF               	movlw	255
  4771  1749  00F3               	movwf	I2C_Master_Write@d
  4772  174A  3000               	movlw	0
  4773  174B  00F4               	movwf	I2C_Master_Write@d+1
  4774  174C  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  4775                           
  4776                           ;mainMaster.c: 620:     I2C_Master_Stop();
  4777  1751  160A  118A  2699   	fcall	_I2C_Master_Stop
  4778  1754  0008               	return
  4779  1755                     __end_of_open_door:	
  4780                           
  4781                           	psect	text11
  4782  17DD                     __ptext11:	
  4783 ;; *************** function _get_tripwire *****************
  4784 ;; Defined at:
  4785 ;;		line 579 in file "mainMaster.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;		None
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  trip            1    2[BANK0 ] unsigned char 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  1    wreg      unsigned char 
  4792 ;; Registers used:
  4793 ;;		wreg, status,2, status,0, pclath, cstack
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4799 ;;      Params:         0       0       0       0       0
  4800 ;;      Locals:         0       1       0       0       0
  4801 ;;      Temps:          1       0       0       0       0
  4802 ;;      Totals:         1       1       0       0       0
  4803 ;;Total ram usage:        2 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    3
  4806 ;; This function calls:
  4807 ;;		_I2C_Master_Read
  4808 ;;		_I2C_Master_Start
  4809 ;;		_I2C_Master_Stop
  4810 ;;		_I2C_Master_Write
  4811 ;; This function is called by:
  4812 ;;		_main
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           
  4817                           ;psect for function _get_tripwire
  4818  17DD                     _get_tripwire:	
  4819                           
  4820                           ;mainMaster.c: 581:     char trip;;mainMaster.c: 583:     I2C_Master_Start();
  4821                           
  4822                           ;incstack = 0
  4823                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  4824  17DD  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  4825                           
  4826                           ;mainMaster.c: 584:     I2C_Master_Write(0x21);
  4827  17E2  3021               	movlw	33
  4828  17E3  00F3               	movwf	I2C_Master_Write@d
  4829  17E4  3000               	movlw	0
  4830  17E5  00F4               	movwf	I2C_Master_Write@d+1
  4831  17E6  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  4832                           
  4833                           ;mainMaster.c: 585:     trip = I2C_Master_Read(0);
  4834  17EB  3000               	movlw	0
  4835  17EC  00F3               	movwf	I2C_Master_Read@a
  4836  17ED  00F4               	movwf	I2C_Master_Read@a+1
  4837  17EE  120A  158A  2060  160A  118A  	fcall	_I2C_Master_Read
  4838  17F3  0873               	movf	?_I2C_Master_Read,w
  4839  17F4  00F7               	movwf	??_get_tripwire
  4840  17F5  0877               	movf	??_get_tripwire,w
  4841  17F6  1283               	bcf	3,5	;RP0=0, select bank0
  4842  17F7  1303               	bcf	3,6	;RP1=0, select bank0
  4843  17F8  00C9               	movwf	get_tripwire@trip
  4844                           
  4845                           ;mainMaster.c: 586:     I2C_Master_Stop();
  4846  17F9  160A  118A  2699   	fcall	_I2C_Master_Stop
  4847                           
  4848                           ;mainMaster.c: 588:     return (trip);
  4849  17FC  1283               	bcf	3,5	;RP0=0, select bank0
  4850  17FD  1303               	bcf	3,6	;RP1=0, select bank0
  4851  17FE  0849               	movf	get_tripwire@trip,w
  4852  17FF  0008               	return
  4853  1800                     __end_of_get_tripwire:	
  4854                           
  4855                           	psect	text12
  4856  0C7D                     __ptext12:	
  4857 ;; *************** function _get_time *****************
  4858 ;; Defined at:
  4859 ;;		line 504 in file "mainMaster.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  time_string     1    wreg     PTR unsigned char 
  4862 ;;		 -> time(6), 
  4863 ;; Auto vars:     Size  Location     Type
  4864 ;;  time_string     1    6[BANK0 ] PTR unsigned char 
  4865 ;;		 -> time(6), 
  4866 ;;  min             1    5[BANK0 ] unsigned char 
  4867 ;;  hour            1    4[BANK0 ] unsigned char 
  4868 ;; Return value:  Size  Location     Type
  4869 ;;                  1    wreg      void 
  4870 ;; Registers used:
  4871 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4872 ;; Tracked objects:
  4873 ;;		On entry : 0/0
  4874 ;;		On exit  : 0/0
  4875 ;;		Unchanged: 0/0
  4876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4877 ;;      Params:         0       0       0       0       0
  4878 ;;      Locals:         0       3       0       0       0
  4879 ;;      Temps:          0       2       0       0       0
  4880 ;;      Totals:         0       5       0       0       0
  4881 ;;Total ram usage:        5 bytes
  4882 ;; Hardware stack levels used:    1
  4883 ;; Hardware stack levels required when called:    3
  4884 ;; This function calls:
  4885 ;;		_I2C_Master_Read
  4886 ;;		_I2C_Master_RepeatedStart
  4887 ;;		_I2C_Master_Start
  4888 ;;		_I2C_Master_Stop
  4889 ;;		_I2C_Master_Write
  4890 ;; This function is called by:
  4891 ;;		_main
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           
  4896                           ;psect for function _get_time
  4897  0C7D                     _get_time:	
  4898                           
  4899                           ;incstack = 0
  4900                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4901                           ;get_time@time_string stored from wreg
  4902  0C7D  1283               	bcf	3,5	;RP0=0, select bank0
  4903  0C7E  1303               	bcf	3,6	;RP1=0, select bank0
  4904  0C7F  00CD               	movwf	get_time@time_string
  4905                           
  4906                           ;mainMaster.c: 506:     char hour, min;;mainMaster.c: 508:     I2C_Master_Start();
  4907  0C80  160A  118A  2692  120A  158A  	fcall	_I2C_Master_Start
  4908                           
  4909                           ;mainMaster.c: 509:     I2C_Master_Write(0xD0);
  4910  0C85  30D0               	movlw	208
  4911  0C86  00F3               	movwf	I2C_Master_Write@d
  4912  0C87  3000               	movlw	0
  4913  0C88  00F4               	movwf	I2C_Master_Write@d+1
  4914  0C89  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  4915                           
  4916                           ;mainMaster.c: 510:     I2C_Master_Write(0x01);
  4917  0C8E  3001               	movlw	1
  4918  0C8F  00F3               	movwf	I2C_Master_Write@d
  4919  0C90  3000               	movlw	0
  4920  0C91  00F4               	movwf	I2C_Master_Write@d+1
  4921  0C92  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  4922                           
  4923                           ;mainMaster.c: 511:     I2C_Master_RepeatedStart();
  4924  0C97  160A  118A  26A0  120A  158A  	fcall	_I2C_Master_RepeatedStart
  4925                           
  4926                           ;mainMaster.c: 512:     I2C_Master_Write(0xD1);
  4927  0C9C  30D1               	movlw	209
  4928  0C9D  00F3               	movwf	I2C_Master_Write@d
  4929  0C9E  3000               	movlw	0
  4930  0C9F  00F4               	movwf	I2C_Master_Write@d+1
  4931  0CA0  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  4932                           
  4933                           ;mainMaster.c: 513:     min = I2C_Master_Read(1);
  4934  0CA5  3001               	movlw	1
  4935  0CA6  00F3               	movwf	I2C_Master_Read@a
  4936  0CA7  3000               	movlw	0
  4937  0CA8  00F4               	movwf	I2C_Master_Read@a+1
  4938  0CA9  120A  158A  2060  120A  158A  	fcall	_I2C_Master_Read
  4939  0CAE  0873               	movf	?_I2C_Master_Read,w
  4940  0CAF  1283               	bcf	3,5	;RP0=0, select bank0
  4941  0CB0  1303               	bcf	3,6	;RP1=0, select bank0
  4942  0CB1  00C9               	movwf	??_get_time
  4943  0CB2  0849               	movf	??_get_time,w
  4944  0CB3  00CC               	movwf	get_time@min
  4945                           
  4946                           ;mainMaster.c: 514:     hour = I2C_Master_Read(0);
  4947  0CB4  3000               	movlw	0
  4948  0CB5  00F3               	movwf	I2C_Master_Read@a
  4949  0CB6  00F4               	movwf	I2C_Master_Read@a+1
  4950  0CB7  120A  158A  2060  120A  158A  	fcall	_I2C_Master_Read
  4951  0CBC  0873               	movf	?_I2C_Master_Read,w
  4952  0CBD  1283               	bcf	3,5	;RP0=0, select bank0
  4953  0CBE  1303               	bcf	3,6	;RP1=0, select bank0
  4954  0CBF  00C9               	movwf	??_get_time
  4955  0CC0  0849               	movf	??_get_time,w
  4956  0CC1  00CB               	movwf	get_time@hour
  4957                           
  4958                           ;mainMaster.c: 515:     I2C_Master_Stop();
  4959  0CC2  160A  118A  2699  120A  158A  	fcall	_I2C_Master_Stop
  4960                           
  4961                           ;mainMaster.c: 517:     time_string[0] = (hour >> 4) + '0';
  4962  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  4963  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  4964  0CC9  084B               	movf	get_time@hour,w
  4965  0CCA  00C9               	movwf	??_get_time
  4966  0CCB  3004               	movlw	4
  4967  0CCC                     u3975:	
  4968  0CCC  1003               	clrc
  4969  0CCD  0CC9               	rrf	??_get_time,f
  4970  0CCE  3EFF               	addlw	-1
  4971  0CCF  1D03               	skipz
  4972  0CD0  2CCC               	goto	u3975
  4973  0CD1  0849               	movf	??_get_time,w
  4974  0CD2  3E30               	addlw	48
  4975  0CD3  00CA               	movwf	??_get_time+1
  4976  0CD4  084D               	movf	get_time@time_string,w
  4977  0CD5  0084               	movwf	4
  4978  0CD6  084A               	movf	??_get_time+1,w
  4979  0CD7  1383               	bcf	3,7	;select IRP bank0
  4980  0CD8  0080               	movwf	0
  4981                           
  4982                           ;mainMaster.c: 518:     time_string[1] = (hour & 0x0F) + '0';
  4983  0CD9  084B               	movf	get_time@hour,w
  4984  0CDA  390F               	andlw	15
  4985  0CDB  3E30               	addlw	48
  4986  0CDC  00C9               	movwf	??_get_time
  4987  0CDD  0A4D               	incf	get_time@time_string,w
  4988  0CDE  0084               	movwf	4
  4989  0CDF  0849               	movf	??_get_time,w
  4990  0CE0  0080               	movwf	0
  4991                           
  4992                           ;mainMaster.c: 519:     time_string[2] = ':';
  4993  0CE1  303A               	movlw	58
  4994  0CE2  00C9               	movwf	??_get_time
  4995  0CE3  084D               	movf	get_time@time_string,w
  4996  0CE4  3E02               	addlw	2
  4997  0CE5  0084               	movwf	4
  4998  0CE6  0849               	movf	??_get_time,w
  4999  0CE7  0080               	movwf	0
  5000                           
  5001                           ;mainMaster.c: 520:     time_string[3] = (min >> 4) + '0';
  5002  0CE8  084C               	movf	get_time@min,w
  5003  0CE9  00C9               	movwf	??_get_time
  5004  0CEA  3004               	movlw	4
  5005  0CEB                     u3985:	
  5006  0CEB  1003               	clrc
  5007  0CEC  0CC9               	rrf	??_get_time,f
  5008  0CED  3EFF               	addlw	-1
  5009  0CEE  1D03               	skipz
  5010  0CEF  2CEB               	goto	u3985
  5011  0CF0  0849               	movf	??_get_time,w
  5012  0CF1  3E30               	addlw	48
  5013  0CF2  00CA               	movwf	??_get_time+1
  5014  0CF3  084D               	movf	get_time@time_string,w
  5015  0CF4  3E03               	addlw	3
  5016  0CF5  0084               	movwf	4
  5017  0CF6  084A               	movf	??_get_time+1,w
  5018  0CF7  0080               	movwf	0
  5019                           
  5020                           ;mainMaster.c: 521:     time_string[4] = (min & 0x0F) + '0';
  5021  0CF8  084C               	movf	get_time@min,w
  5022  0CF9  390F               	andlw	15
  5023  0CFA  3E30               	addlw	48
  5024  0CFB  00C9               	movwf	??_get_time
  5025  0CFC  084D               	movf	get_time@time_string,w
  5026  0CFD  3E04               	addlw	4
  5027  0CFE  0084               	movwf	4
  5028  0CFF  0849               	movf	??_get_time,w
  5029  0D00  0080               	movwf	0
  5030                           
  5031                           ;mainMaster.c: 522:     time_string[5] = '\0';
  5032  0D01  084D               	movf	get_time@time_string,w
  5033  0D02  3E05               	addlw	5
  5034  0D03  0084               	movwf	4
  5035  0D04  0180               	clrf	0
  5036  0D05  0008               	return
  5037  0D06                     __end_of_get_time:	
  5038                           
  5039                           	psect	text13
  5040  0D95                     __ptext13:	
  5041 ;; *************** function _get_temp *****************
  5042 ;; Defined at:
  5043 ;;		line 540 in file "mainMaster.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;  temp_string     1    wreg     PTR unsigned char 
  5046 ;;		 -> temp(6), 
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;  temp_string     1   31[BANK0 ] PTR unsigned char 
  5049 ;;		 -> temp(6), 
  5050 ;;  decimal         3   27[BANK0 ] unsigned char [3]
  5051 ;;  tempLSB         1   32[BANK0 ] unsigned char 
  5052 ;;  tempMSB         1   30[BANK0 ] unsigned char 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  1    wreg      void 
  5055 ;; Registers used:
  5056 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5062 ;;      Params:         0       0       0       0       0
  5063 ;;      Locals:         0       6       0       0       0
  5064 ;;      Temps:          0       3       0       0       0
  5065 ;;      Totals:         0       9       0       0       0
  5066 ;;Total ram usage:        9 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    3
  5069 ;; This function calls:
  5070 ;;		_I2C_Master_Read
  5071 ;;		_I2C_Master_RepeatedStart
  5072 ;;		_I2C_Master_Start
  5073 ;;		_I2C_Master_Stop
  5074 ;;		_I2C_Master_Write
  5075 ;;		___bmul
  5076 ;;		_sprintf
  5077 ;;		_strcat
  5078 ;; This function is called by:
  5079 ;;		_main
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           
  5084                           ;psect for function _get_temp
  5085  0D95                     _get_temp:	
  5086                           
  5087                           ;incstack = 0
  5088                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5089                           ;get_temp@temp_string stored from wreg
  5090  0D95  1283               	bcf	3,5	;RP0=0, select bank0
  5091  0D96  1303               	bcf	3,6	;RP1=0, select bank0
  5092  0D97  00E6               	movwf	get_temp@temp_string
  5093                           
  5094                           ;mainMaster.c: 542:     char tempLSB, tempMSB;;mainMaster.c: 543:     char decimal[3];;m
      +                          ainMaster.c: 545:     I2C_Master_Start();
  5095  0D98  160A  118A  2692  120A  158A  	fcall	_I2C_Master_Start
  5096                           
  5097                           ;mainMaster.c: 546:     I2C_Master_Write(0xD0);
  5098  0D9D  30D0               	movlw	208
  5099  0D9E  00F3               	movwf	I2C_Master_Write@d
  5100  0D9F  3000               	movlw	0
  5101  0DA0  00F4               	movwf	I2C_Master_Write@d+1
  5102  0DA1  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  5103                           
  5104                           ;mainMaster.c: 547:     I2C_Master_Write(0x11);
  5105  0DA6  3011               	movlw	17
  5106  0DA7  00F3               	movwf	I2C_Master_Write@d
  5107  0DA8  3000               	movlw	0
  5108  0DA9  00F4               	movwf	I2C_Master_Write@d+1
  5109  0DAA  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  5110                           
  5111                           ;mainMaster.c: 548:     I2C_Master_RepeatedStart();
  5112  0DAF  160A  118A  26A0  120A  158A  	fcall	_I2C_Master_RepeatedStart
  5113                           
  5114                           ;mainMaster.c: 549:     I2C_Master_Write(0xD1);
  5115  0DB4  30D1               	movlw	209
  5116  0DB5  00F3               	movwf	I2C_Master_Write@d
  5117  0DB6  3000               	movlw	0
  5118  0DB7  00F4               	movwf	I2C_Master_Write@d+1
  5119  0DB8  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  5120                           
  5121                           ;mainMaster.c: 550:     tempMSB = I2C_Master_Read(1);
  5122  0DBD  3001               	movlw	1
  5123  0DBE  00F3               	movwf	I2C_Master_Read@a
  5124  0DBF  3000               	movlw	0
  5125  0DC0  00F4               	movwf	I2C_Master_Read@a+1
  5126  0DC1  120A  158A  2060  120A  158A  	fcall	_I2C_Master_Read
  5127  0DC6  0873               	movf	?_I2C_Master_Read,w
  5128  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  5129  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  5130  0DC9  00DF               	movwf	??_get_temp
  5131  0DCA  085F               	movf	??_get_temp,w
  5132  0DCB  00E5               	movwf	get_temp@tempMSB
  5133                           
  5134                           ;mainMaster.c: 551:     tempLSB = I2C_Master_Read(0);
  5135  0DCC  3000               	movlw	0
  5136  0DCD  00F3               	movwf	I2C_Master_Read@a
  5137  0DCE  00F4               	movwf	I2C_Master_Read@a+1
  5138  0DCF  120A  158A  2060  120A  158A  	fcall	_I2C_Master_Read
  5139  0DD4  0873               	movf	?_I2C_Master_Read,w
  5140  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  5141  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  5142  0DD7  00DF               	movwf	??_get_temp
  5143  0DD8  085F               	movf	??_get_temp,w
  5144  0DD9  00E7               	movwf	get_temp@tempLSB
  5145                           
  5146                           ;mainMaster.c: 552:     I2C_Master_Stop();
  5147  0DDA  160A  118A  2699  120A  158A  	fcall	_I2C_Master_Stop
  5148                           
  5149                           ;mainMaster.c: 554:     tempMSB = tempMSB - 4;
  5150  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  5151  0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  5152  0DE1  0865               	movf	get_temp@tempMSB,w
  5153  0DE2  3EFC               	addlw	252
  5154  0DE3  00DF               	movwf	??_get_temp
  5155  0DE4  085F               	movf	??_get_temp,w
  5156  0DE5  00E5               	movwf	get_temp@tempMSB
  5157                           
  5158                           ;mainMaster.c: 555:     tempLSB = (tempLSB >> 6) * 25;
  5159  0DE6  3019               	movlw	25
  5160  0DE7  00DF               	movwf	??_get_temp
  5161  0DE8  085F               	movf	??_get_temp,w
  5162  0DE9  00F3               	movwf	___bmul@multiplicand
  5163  0DEA  0867               	movf	get_temp@tempLSB,w
  5164  0DEB  00E0               	movwf	??_get_temp+1
  5165  0DEC  3006               	movlw	6
  5166  0DED                     u3955:	
  5167  0DED  1003               	clrc
  5168  0DEE  0CE0               	rrf	??_get_temp+1,f
  5169  0DEF  3EFF               	addlw	-1
  5170  0DF0  1D03               	skipz
  5171  0DF1  2DED               	goto	u3955
  5172  0DF2  0860               	movf	??_get_temp+1,w
  5173  0DF3  120A  158A  202B  120A  158A  	fcall	___bmul
  5174  0DF8  1283               	bcf	3,5	;RP0=0, select bank0
  5175  0DF9  1303               	bcf	3,6	;RP1=0, select bank0
  5176  0DFA  00E1               	movwf	??_get_temp+2
  5177  0DFB  0861               	movf	??_get_temp+2,w
  5178  0DFC  00E7               	movwf	get_temp@tempLSB
  5179                           
  5180                           ;mainMaster.c: 556:     sprintf(temp_string, "%d", tempMSB);
  5181  0DFD  3028               	movlw	low ((STR_32+1)| (0+32768))
  5182  0DFE  00D0               	movwf	sprintf@f
  5183  0DFF  3088               	movlw	high ((STR_32+1)| (0+32768))
  5184  0E00  00D1               	movwf	sprintf@f+1
  5185  0E01  0865               	movf	get_temp@tempMSB,w
  5186  0E02  00DF               	movwf	??_get_temp
  5187  0E03  01E0               	clrf	??_get_temp+1
  5188  0E04  085F               	movf	??_get_temp,w
  5189  0E05  00D2               	movwf	?_sprintf+2
  5190  0E06  0860               	movf	??_get_temp+1,w
  5191  0E07  00D3               	movwf	?_sprintf+3
  5192  0E08  0866               	movf	get_temp@temp_string,w
  5193  0E09  120A  158A  2712  120A  158A  	fcall	_sprintf
  5194                           
  5195                           ;mainMaster.c: 557:     if (tempLSB == 0){
  5196  0E0E  1283               	bcf	3,5	;RP0=0, select bank0
  5197  0E0F  1303               	bcf	3,6	;RP1=0, select bank0
  5198  0E10  0867               	movf	get_temp@tempLSB,w
  5199  0E11  1D03               	btfss	3,2
  5200  0E12  2E17               	goto	l3844
  5201                           
  5202                           ;mainMaster.c: 558:         sprintf(decimal, ".%d0", tempLSB);
  5203  0E13  3022               	movlw	low (STR_31| (0+32768))
  5204  0E14  00D0               	movwf	sprintf@f
  5205  0E15  3088               	movlw	high (STR_31| (0+32768))
  5206  0E16  2E1A               	goto	L18
  5207  0E17                     l3844:	
  5208                           ;mainMaster.c: 559:     } else {
  5209                           
  5210                           
  5211                           ;mainMaster.c: 560:         sprintf(decimal, ".%d", tempLSB);
  5212  0E17  3027               	movlw	low (STR_32| (0+32768))
  5213  0E18  00D0               	movwf	sprintf@f
  5214  0E19  3088               	movlw	high (STR_32| (0+32768))
  5215  0E1A                     L18:	
  5216  0E1A  00D1               	movwf	sprintf@f+1
  5217  0E1B  0867               	movf	get_temp@tempLSB,w
  5218  0E1C  00DF               	movwf	??_get_temp
  5219  0E1D  01E0               	clrf	??_get_temp+1
  5220  0E1E  085F               	movf	??_get_temp,w
  5221  0E1F  00D2               	movwf	?_sprintf+2
  5222  0E20  0860               	movf	??_get_temp+1,w
  5223  0E21  00D3               	movwf	?_sprintf+3
  5224  0E22  3062               	movlw	(low (get_temp@decimal| 0))& (0+255)
  5225  0E23  120A  158A  2712  120A  158A  	fcall	_sprintf
  5226                           
  5227                           ;mainMaster.c: 562:     strcat(temp_string, decimal);
  5228  0E28  3062               	movlw	(low (get_temp@decimal| 0))& (0+255)
  5229  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  5230  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  5231  0E2B  00DF               	movwf	??_get_temp
  5232  0E2C  085F               	movf	??_get_temp,w
  5233  0E2D  00F3               	movwf	strcat@from
  5234  0E2E  0866               	movf	get_temp@temp_string,w
  5235  0E2F  120A  158A  203C   	fcall	_strcat
  5236                           
  5237                           ;mainMaster.c: 563:     temp_string[5] = '\0';
  5238  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  5239  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  5240  0E34  0866               	movf	get_temp@temp_string,w
  5241  0E35  3E05               	addlw	5
  5242  0E36  0084               	movwf	4
  5243  0E37  1383               	bcf	3,7	;select IRP bank0
  5244  0E38  0180               	clrf	0
  5245  0E39  0008               	return
  5246  0E3A                     __end_of_get_temp:	
  5247                           
  5248                           	psect	text14
  5249  083C                     __ptext14:	
  5250 ;; *************** function _strcat *****************
  5251 ;; Defined at:
  5252 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;  to              1    wreg     PTR unsigned char 
  5255 ;;		 -> temp(6), 
  5256 ;;  from            1    3[COMMON] PTR const unsigned char 
  5257 ;;		 -> get_temp@decimal(3), 
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;  to              1    5[COMMON] PTR unsigned char 
  5260 ;;		 -> temp(6), 
  5261 ;;  cp              1    6[COMMON] PTR unsigned char 
  5262 ;;		 -> temp(6), 
  5263 ;; Return value:  Size  Location     Type
  5264 ;;                  1    wreg      PTR unsigned char 
  5265 ;; Registers used:
  5266 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5272 ;;      Params:         1       0       0       0       0
  5273 ;;      Locals:         2       0       0       0       0
  5274 ;;      Temps:          1       0       0       0       0
  5275 ;;      Totals:         4       0       0       0       0
  5276 ;;Total ram usage:        4 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; Hardware stack levels required when called:    1
  5279 ;; This function calls:
  5280 ;;		Nothing
  5281 ;; This function is called by:
  5282 ;;		_get_temp
  5283 ;; This function uses a non-reentrant model
  5284 ;;
  5285                           
  5286                           
  5287                           ;psect for function _strcat
  5288  083C                     _strcat:	
  5289                           
  5290                           ;incstack = 0
  5291                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  5292                           ;strcat@to stored from wreg
  5293  083C  00F5               	movwf	strcat@to
  5294  083D  0875               	movf	strcat@to,w
  5295  083E  00F4               	movwf	??_strcat
  5296  083F  0874               	movf	??_strcat,w
  5297  0840  00F6               	movwf	strcat@cp
  5298  0841                     l2652:	
  5299  0841  0876               	movf	strcat@cp,w
  5300  0842  0084               	movwf	4
  5301  0843  1383               	bcf	3,7	;select IRP bank0
  5302  0844  0800               	movf	0,w
  5303  0845  1903               	btfsc	3,2
  5304  0846  2854               	goto	l2656
  5305  0847  3001               	movlw	1
  5306  0848  00F4               	movwf	??_strcat
  5307  0849  0874               	movf	??_strcat,w
  5308  084A  07F6               	addwf	strcat@cp,f
  5309  084B  2841               	goto	l2652
  5310  084C                     l2654:	
  5311  084C  3001               	movlw	1
  5312  084D  00F4               	movwf	??_strcat
  5313  084E  0874               	movf	??_strcat,w
  5314  084F  07F6               	addwf	strcat@cp,f
  5315  0850  3001               	movlw	1
  5316  0851  00F4               	movwf	??_strcat
  5317  0852  0874               	movf	??_strcat,w
  5318  0853  07F3               	addwf	strcat@from,f
  5319  0854                     l2656:	
  5320  0854  0873               	movf	strcat@from,w
  5321  0855  0084               	movwf	4
  5322  0856  0800               	movf	0,w
  5323  0857  00F4               	movwf	??_strcat
  5324  0858  0876               	movf	strcat@cp,w
  5325  0859  0084               	movwf	4
  5326  085A  0874               	movf	??_strcat,w
  5327  085B  0080               	movwf	0
  5328  085C  0800               	movf	0,w
  5329  085D  1903               	btfsc	3,2
  5330  085E  0008               	return
  5331  085F  284C               	goto	l2654
  5332  0860                     __end_of_strcat:	
  5333                           
  5334                           	psect	text15
  5335  0F12                     __ptext15:	
  5336 ;; *************** function _sprintf *****************
  5337 ;; Defined at:
  5338 ;;		line 500 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;  sp              1    wreg     PTR unsigned char 
  5341 ;;		 -> get_temp@decimal(3), temp(6), 
  5342 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  5343 ;;		 -> STR_32(4), STR_31(5), STR_30(3), 
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;  sp              1   22[BANK0 ] PTR unsigned char 
  5346 ;;		 -> get_temp@decimal(3), temp(6), 
  5347 ;;  tmpval          4    0        struct .
  5348 ;;  val             2   20[BANK0 ] unsigned int 
  5349 ;;  cp              2    0        PTR const unsigned char 
  5350 ;;  len             2    0        unsigned int 
  5351 ;;  c               1   23[BANK0 ] unsigned char 
  5352 ;;  prec            1   19[BANK0 ] char 
  5353 ;;  flag            1   18[BANK0 ] unsigned char 
  5354 ;;  ap              1   17[BANK0 ] PTR void [1]
  5355 ;;		 -> ?_sprintf(2), 
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  2    9[BANK0 ] int 
  5358 ;; Registers used:
  5359 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5365 ;;      Params:         0       4       0       0       0
  5366 ;;      Locals:         0       7       0       0       0
  5367 ;;      Temps:          0       4       0       0       0
  5368 ;;      Totals:         0      15       0       0       0
  5369 ;;Total ram usage:       15 bytes
  5370 ;; Hardware stack levels used:    1
  5371 ;; Hardware stack levels required when called:    2
  5372 ;; This function calls:
  5373 ;;		___lwdiv
  5374 ;;		___lwmod
  5375 ;; This function is called by:
  5376 ;;		_get_temp
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           
  5381                           ;psect for function _sprintf
  5382  0F12                     _sprintf:	
  5383                           
  5384                           ;incstack = 0
  5385                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5386                           ;sprintf@sp stored from wreg
  5387  0F12  1283               	bcf	3,5	;RP0=0, select bank0
  5388  0F13  1303               	bcf	3,6	;RP1=0, select bank0
  5389  0F14  00DD               	movwf	sprintf@sp
  5390                           
  5391                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;D:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  5392  0F15  3052               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5393  0F16  00D4               	movwf	??_sprintf
  5394  0F17  0854               	movf	??_sprintf,w
  5395  0F18  00D8               	movwf	sprintf@ap
  5396  0F19                     l3728:	
  5397                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5398                           
  5399                           
  5400                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5401  0F19  0851               	movf	sprintf@f+1,w
  5402  0F1A  00D5               	movwf	??_sprintf+1
  5403  0F1B  0850               	movf	sprintf@f,w
  5404  0F1C  00D4               	movwf	??_sprintf
  5405  0F1D  0AD0               	incf	sprintf@f,f
  5406  0F1E  1903               	skipnz
  5407  0F1F  0AD1               	incf	sprintf@f+1,f
  5408  0F20  0855               	movf	??_sprintf+1,w
  5409  0F21  00FF               	movwf	127
  5410  0F22  0854               	movf	??_sprintf,w
  5411  0F23  0084               	movwf	4
  5412  0F24  120A  118A  2700  120A  158A  	fcall	stringtab
  5413  0F29  00D6               	movwf	??_sprintf+2
  5414  0F2A  0856               	movf	??_sprintf+2,w
  5415  0F2B  00DE               	movwf	sprintf@c
  5416  0F2C  085E               	movf	sprintf@c,w
  5417  0F2D  1903               	btfsc	3,2
  5418  0F2E  2FFB               	goto	l3730
  5419                           
  5420                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  5421  0F2F  3025               	movlw	37
  5422  0F30  065E               	xorwf	sprintf@c,w
  5423  0F31  1903               	btfsc	3,2
  5424  0F32  2F3F               	goto	l3684
  5425                           
  5426                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;D:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  5427  0F33  085E               	movf	sprintf@c,w
  5428  0F34  00D4               	movwf	??_sprintf
  5429  0F35  085D               	movf	sprintf@sp,w
  5430  0F36  0084               	movwf	4
  5431  0F37  0854               	movf	??_sprintf,w
  5432  0F38  1383               	bcf	3,7	;select IRP bank0
  5433  0F39  0080               	movwf	0
  5434  0F3A  3001               	movlw	1
  5435  0F3B  00D4               	movwf	??_sprintf
  5436  0F3C  0854               	movf	??_sprintf,w
  5437  0F3D  07DD               	addwf	sprintf@sp,f
  5438                           
  5439                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  5440  0F3E  2F19               	goto	l3728
  5441  0F3F                     l3684:	
  5442                           
  5443                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  5444  0F3F  01D9               	clrf	sprintf@flag
  5445                           
  5446                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  5447  0F40  0851               	movf	sprintf@f+1,w
  5448  0F41  00D5               	movwf	??_sprintf+1
  5449  0F42  0850               	movf	sprintf@f,w
  5450  0F43  00D4               	movwf	??_sprintf
  5451  0F44  0AD0               	incf	sprintf@f,f
  5452  0F45  1903               	skipnz
  5453  0F46  0AD1               	incf	sprintf@f+1,f
  5454  0F47  0855               	movf	??_sprintf+1,w
  5455  0F48  00FF               	movwf	127
  5456  0F49  0854               	movf	??_sprintf,w
  5457  0F4A  0084               	movwf	4
  5458  0F4B  120A  118A  2700  120A  158A  	fcall	stringtab
  5459  0F50  00DE               	movwf	sprintf@c
  5460  0F51  00D6               	movwf	??_sprintf+2
  5461  0F52  01D7               	clrf	??_sprintf+3
  5462                           
  5463                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5464                           ; Switch size 1, requested type "simple"
  5465                           ; Number of cases is 1, Range of values is 0 to 0
  5466                           ; switch strategies available:
  5467                           ; Name         Instructions Cycles
  5468                           ; simple_byte            4     3 (average)
  5469                           ; direct_byte           11     8 (fixed)
  5470                           ; jumptable            260     6 (fixed)
  5471                           ;	Chosen strategy is simple_byte
  5472  0F53  0857               	movf	??_sprintf+3,w
  5473  0F54  3A00               	xorlw	0	; case 0
  5474  0F55  1903               	skipnz
  5475  0F56  2F58               	goto	l4490
  5476  0F57  2F19               	goto	l3728
  5477  0F58                     l4490:	
  5478                           
  5479                           ; Switch size 1, requested type "simple"
  5480                           ; Number of cases is 3, Range of values is 0 to 105
  5481                           ; switch strategies available:
  5482                           ; Name         Instructions Cycles
  5483                           ; simple_byte           10     6 (average)
  5484                           ; jumptable            260     6 (fixed)
  5485                           ;	Chosen strategy is simple_byte
  5486  0F58  0856               	movf	??_sprintf+2,w
  5487  0F59  3A00               	xorlw	0	; case 0
  5488  0F5A  1903               	skipnz
  5489  0F5B  2FFB               	goto	l3730
  5490  0F5C  3A64               	xorlw	100	; case 100
  5491  0F5D  1903               	skipnz
  5492  0F5E  2F63               	goto	l3690
  5493  0F5F  3A0D               	xorlw	13	; case 105
  5494  0F60  1903               	skipnz
  5495  0F61  2F63               	goto	l3690
  5496  0F62  2F19               	goto	l3728
  5497  0F63                     l3690:	
  5498                           
  5499                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5500  0F63  0858               	movf	sprintf@ap,w
  5501  0F64  0084               	movwf	4
  5502  0F65  1383               	bcf	3,7	;select IRP bank0
  5503  0F66  0800               	movf	0,w
  5504  0F67  00DB               	movwf	sprintf@val
  5505  0F68  0A84               	incf	4,f
  5506  0F69  0800               	movf	0,w
  5507  0F6A  00DC               	movwf	sprintf@val+1
  5508  0F6B  3002               	movlw	2
  5509  0F6C  00D4               	movwf	??_sprintf
  5510  0F6D  0854               	movf	??_sprintf,w
  5511  0F6E  07D8               	addwf	sprintf@ap,f
  5512                           
  5513                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  5514  0F6F  1FDC               	btfss	sprintf@val+1,7
  5515  0F70  2F7A               	goto	l3700
  5516                           
  5517                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  5518  0F71  3003               	movlw	3
  5519  0F72  00D4               	movwf	??_sprintf
  5520  0F73  0854               	movf	??_sprintf,w
  5521  0F74  04D9               	iorwf	sprintf@flag,f
  5522                           
  5523                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  5524  0F75  09DB               	comf	sprintf@val,f
  5525  0F76  09DC               	comf	sprintf@val+1,f
  5526  0F77  0ADB               	incf	sprintf@val,f
  5527  0F78  1903               	skipnz
  5528  0F79  0ADC               	incf	sprintf@val+1,f
  5529  0F7A                     l3700:	
  5530                           
  5531                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5532  0F7A  01DE               	clrf	sprintf@c
  5533  0F7B  0ADE               	incf	sprintf@c,f
  5534  0F7C                     l3706:	
  5535                           
  5536                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  5537  0F7C  085E               	movf	sprintf@c,w
  5538  0F7D  00D4               	movwf	??_sprintf
  5539  0F7E  0754               	addwf	??_sprintf,w
  5540  0F7F  3E12               	addlw	low (_dpowers| (0+32768))
  5541  0F80  0084               	movwf	4
  5542  0F81  3087               	movlw	high (_dpowers| (0+32768))
  5543  0F82  1803               	skipnc
  5544  0F83  3E01               	addlw	1
  5545  0F84  00FF               	movwf	127
  5546  0F85  120A  118A  2700  120A  158A  	fcall	stringtab
  5547  0F8A  00D5               	movwf	??_sprintf+1
  5548  0F8B  120A  118A  2700  120A  158A  	fcall	stringtab
  5549  0F90  00D6               	movwf	??_sprintf+2
  5550  0F91  0856               	movf	??_sprintf+2,w
  5551  0F92  025C               	subwf	sprintf@val+1,w
  5552  0F93  1D03               	skipz
  5553  0F94  2F97               	goto	u3835
  5554  0F95  0855               	movf	??_sprintf+1,w
  5555  0F96  025B               	subwf	sprintf@val,w
  5556  0F97                     u3835:	
  5557  0F97  1C03               	btfss	3,0
  5558  0F98  2FA1               	goto	l3712
  5559  0F99  3001               	movlw	1
  5560  0F9A  00D4               	movwf	??_sprintf
  5561  0F9B  0854               	movf	??_sprintf,w
  5562  0F9C  07DE               	addwf	sprintf@c,f
  5563  0F9D  3005               	movlw	5
  5564  0F9E  065E               	xorwf	sprintf@c,w
  5565  0F9F  1D03               	btfss	3,2
  5566  0FA0  2F7C               	goto	l3706
  5567  0FA1                     l3712:	
  5568                           
  5569                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  5570  0FA1  0859               	movf	sprintf@flag,w
  5571  0FA2  3903               	andlw	3
  5572  0FA3  1903               	btfsc	3,2
  5573  0FA4  2FB0               	goto	l3718
  5574                           
  5575                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  5576  0FA5  302D               	movlw	45
  5577  0FA6  00D4               	movwf	??_sprintf
  5578  0FA7  085D               	movf	sprintf@sp,w
  5579  0FA8  0084               	movwf	4
  5580  0FA9  0854               	movf	??_sprintf,w
  5581  0FAA  1383               	bcf	3,7	;select IRP bank0
  5582  0FAB  0080               	movwf	0
  5583  0FAC  3001               	movlw	1
  5584  0FAD  00D4               	movwf	??_sprintf
  5585  0FAE  0854               	movf	??_sprintf,w
  5586  0FAF  07DD               	addwf	sprintf@sp,f
  5587  0FB0                     l3718:	
  5588                           
  5589                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  5590  0FB0  085E               	movf	sprintf@c,w
  5591  0FB1  00D4               	movwf	??_sprintf
  5592  0FB2  0854               	movf	??_sprintf,w
  5593  0FB3  00DA               	movwf	sprintf@prec
  5594  0FB4                     l3726:	
  5595                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5596                           
  5597                           
  5598                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5599  0FB4  30FF               	movlw	255
  5600  0FB5  00D4               	movwf	??_sprintf
  5601  0FB6  0854               	movf	??_sprintf,w
  5602  0FB7  07DA               	addwf	sprintf@prec,f
  5603  0FB8  0A5A               	incf	sprintf@prec,w
  5604  0FB9  1903               	btfsc	3,2
  5605  0FBA  2F19               	goto	l3728
  5606                           
  5607                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  5608  0FBB  300A               	movlw	10
  5609  0FBC  00CA               	movwf	___lwmod@divisor
  5610  0FBD  3000               	movlw	0
  5611  0FBE  00CB               	movwf	___lwmod@divisor+1
  5612  0FBF  085A               	movf	sprintf@prec,w
  5613  0FC0  00D4               	movwf	??_sprintf
  5614  0FC1  0754               	addwf	??_sprintf,w
  5615  0FC2  3E12               	addlw	low (_dpowers| (0+32768))
  5616  0FC3  0084               	movwf	4
  5617  0FC4  3087               	movlw	high (_dpowers| (0+32768))
  5618  0FC5  1803               	skipnc
  5619  0FC6  3E01               	addlw	1
  5620  0FC7  00FF               	movwf	127
  5621  0FC8  120A  118A  2700  120A  158A  	fcall	stringtab
  5622  0FCD  00F3               	movwf	___lwdiv@divisor
  5623  0FCE  120A  118A  2700  120A  158A  	fcall	stringtab
  5624  0FD3  00F4               	movwf	___lwdiv@divisor+1
  5625  0FD4  085C               	movf	sprintf@val+1,w
  5626  0FD5  00F6               	movwf	___lwdiv@dividend+1
  5627  0FD6  085B               	movf	sprintf@val,w
  5628  0FD7  00F5               	movwf	___lwdiv@dividend
  5629  0FD8  120A  158A  219D  120A  158A  	fcall	___lwdiv
  5630  0FDD  0874               	movf	?___lwdiv+1,w
  5631  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  5632  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  5633  0FE0  00CD               	movwf	___lwmod@dividend+1
  5634  0FE1  0873               	movf	?___lwdiv,w
  5635  0FE2  00CC               	movwf	___lwmod@dividend
  5636  0FE3  120A  158A  20BE  120A  158A  	fcall	___lwmod
  5637  0FE8  1283               	bcf	3,5	;RP0=0, select bank0
  5638  0FE9  1303               	bcf	3,6	;RP1=0, select bank0
  5639  0FEA  084A               	movf	?___lwmod,w
  5640  0FEB  3E30               	addlw	48
  5641  0FEC  00D5               	movwf	??_sprintf+1
  5642  0FED  0855               	movf	??_sprintf+1,w
  5643  0FEE  00DE               	movwf	sprintf@c
  5644                           
  5645                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  5646  0FEF  085E               	movf	sprintf@c,w
  5647  0FF0  00D4               	movwf	??_sprintf
  5648  0FF1  085D               	movf	sprintf@sp,w
  5649  0FF2  0084               	movwf	4
  5650  0FF3  0854               	movf	??_sprintf,w
  5651  0FF4  1383               	bcf	3,7	;select IRP bank0
  5652  0FF5  0080               	movwf	0
  5653  0FF6  3001               	movlw	1
  5654  0FF7  00D4               	movwf	??_sprintf
  5655  0FF8  0854               	movf	??_sprintf,w
  5656  0FF9  07DD               	addwf	sprintf@sp,f
  5657  0FFA  2FB4               	goto	l3726
  5658  0FFB                     l3730:	
  5659                           
  5660                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  5661  0FFB  085D               	movf	sprintf@sp,w
  5662  0FFC  0084               	movwf	4
  5663  0FFD  1383               	bcf	3,7	;select IRP bank0
  5664  0FFE  0180               	clrf	0
  5665  0FFF  0008               	return
  5666  1000                     __end_of_sprintf:	
  5667                           
  5668                           	psect	text16
  5669  08BE                     __ptext16:	
  5670 ;; *************** function ___lwmod *****************
  5671 ;; Defined at:
  5672 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  5673 ;; Parameters:    Size  Location     Type
  5674 ;;  divisor         2    3[BANK0 ] unsigned int 
  5675 ;;  dividend        2    5[BANK0 ] unsigned int 
  5676 ;; Auto vars:     Size  Location     Type
  5677 ;;  counter         1    8[BANK0 ] unsigned char 
  5678 ;; Return value:  Size  Location     Type
  5679 ;;                  2    3[BANK0 ] unsigned int 
  5680 ;; Registers used:
  5681 ;;		wreg, status,2, status,0
  5682 ;; Tracked objects:
  5683 ;;		On entry : 0/0
  5684 ;;		On exit  : 0/0
  5685 ;;		Unchanged: 0/0
  5686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5687 ;;      Params:         0       4       0       0       0
  5688 ;;      Locals:         0       1       0       0       0
  5689 ;;      Temps:          0       1       0       0       0
  5690 ;;      Totals:         0       6       0       0       0
  5691 ;;Total ram usage:        6 bytes
  5692 ;; Hardware stack levels used:    1
  5693 ;; Hardware stack levels required when called:    1
  5694 ;; This function calls:
  5695 ;;		Nothing
  5696 ;; This function is called by:
  5697 ;;		_sprintf
  5698 ;; This function uses a non-reentrant model
  5699 ;;
  5700                           
  5701                           
  5702                           ;psect for function ___lwmod
  5703  08BE                     ___lwmod:	
  5704                           
  5705                           ;incstack = 0
  5706                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5707  08BE  1283               	bcf	3,5	;RP0=0, select bank0
  5708  08BF  1303               	bcf	3,6	;RP1=0, select bank0
  5709  08C0  084A               	movf	___lwmod@divisor,w
  5710  08C1  044B               	iorwf	___lwmod@divisor+1,w
  5711  08C2  1903               	btfsc	3,2
  5712  08C3  28ED               	goto	l2454
  5713  08C4  01CF               	clrf	___lwmod@counter
  5714  08C5  0ACF               	incf	___lwmod@counter,f
  5715  08C6                     l2444:	
  5716  08C6  1BCB               	btfsc	___lwmod@divisor+1,7
  5717  08C7  28D4               	goto	l2446
  5718  08C8  3001               	movlw	1
  5719  08C9                     u2055:	
  5720  08C9  1003               	clrc
  5721  08CA  0DCA               	rlf	___lwmod@divisor,f
  5722  08CB  0DCB               	rlf	___lwmod@divisor+1,f
  5723  08CC  3EFF               	addlw	-1
  5724  08CD  1D03               	skipz
  5725  08CE  28C9               	goto	u2055
  5726  08CF  3001               	movlw	1
  5727  08D0  00CE               	movwf	??___lwmod
  5728  08D1  084E               	movf	??___lwmod,w
  5729  08D2  07CF               	addwf	___lwmod@counter,f
  5730  08D3  28C6               	goto	l2444
  5731  08D4                     l2446:	
  5732  08D4  084B               	movf	___lwmod@divisor+1,w
  5733  08D5  024D               	subwf	___lwmod@dividend+1,w
  5734  08D6  1D03               	skipz
  5735  08D7  28DA               	goto	u2075
  5736  08D8  084A               	movf	___lwmod@divisor,w
  5737  08D9  024C               	subwf	___lwmod@dividend,w
  5738  08DA                     u2075:	
  5739  08DA  1C03               	skipc
  5740  08DB  28E2               	goto	l2450
  5741  08DC  084A               	movf	___lwmod@divisor,w
  5742  08DD  02CC               	subwf	___lwmod@dividend,f
  5743  08DE  084B               	movf	___lwmod@divisor+1,w
  5744  08DF  1C03               	skipc
  5745  08E0  03CD               	decf	___lwmod@dividend+1,f
  5746  08E1  02CD               	subwf	___lwmod@dividend+1,f
  5747  08E2                     l2450:	
  5748  08E2  3001               	movlw	1
  5749  08E3                     u2085:	
  5750  08E3  1003               	clrc
  5751  08E4  0CCB               	rrf	___lwmod@divisor+1,f
  5752  08E5  0CCA               	rrf	___lwmod@divisor,f
  5753  08E6  3EFF               	addlw	-1
  5754  08E7  1D03               	skipz
  5755  08E8  28E3               	goto	u2085
  5756  08E9  3001               	movlw	1
  5757  08EA  02CF               	subwf	___lwmod@counter,f
  5758  08EB  1D03               	btfss	3,2
  5759  08EC  28D4               	goto	l2446
  5760  08ED                     l2454:	
  5761  08ED  084D               	movf	___lwmod@dividend+1,w
  5762  08EE  00CB               	movwf	?___lwmod+1
  5763  08EF  084C               	movf	___lwmod@dividend,w
  5764  08F0  00CA               	movwf	?___lwmod
  5765  08F1  0008               	return
  5766  08F2                     __end_of___lwmod:	
  5767                           
  5768                           	psect	text17
  5769  099D                     __ptext17:	
  5770 ;; *************** function ___lwdiv *****************
  5771 ;; Defined at:
  5772 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;  divisor         2    3[COMMON] unsigned int 
  5775 ;;  dividend        2    5[COMMON] unsigned int 
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;  quotient        2    1[BANK0 ] unsigned int 
  5778 ;;  counter         1    0[BANK0 ] unsigned char 
  5779 ;; Return value:  Size  Location     Type
  5780 ;;                  2    3[COMMON] unsigned int 
  5781 ;; Registers used:
  5782 ;;		wreg, status,2, status,0
  5783 ;; Tracked objects:
  5784 ;;		On entry : 0/0
  5785 ;;		On exit  : 0/0
  5786 ;;		Unchanged: 0/0
  5787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5788 ;;      Params:         4       0       0       0       0
  5789 ;;      Locals:         0       3       0       0       0
  5790 ;;      Temps:          1       0       0       0       0
  5791 ;;      Totals:         5       3       0       0       0
  5792 ;;Total ram usage:        8 bytes
  5793 ;; Hardware stack levels used:    1
  5794 ;; Hardware stack levels required when called:    1
  5795 ;; This function calls:
  5796 ;;		Nothing
  5797 ;; This function is called by:
  5798 ;;		_sprintf
  5799 ;; This function uses a non-reentrant model
  5800 ;;
  5801                           
  5802                           
  5803                           ;psect for function ___lwdiv
  5804  099D                     ___lwdiv:	
  5805                           
  5806                           ;incstack = 0
  5807                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5808  099D  1283               	bcf	3,5	;RP0=0, select bank0
  5809  099E  1303               	bcf	3,6	;RP1=0, select bank0
  5810  099F  01C8               	clrf	___lwdiv@quotient
  5811  09A0  01C9               	clrf	___lwdiv@quotient+1
  5812  09A1  0873               	movf	___lwdiv@divisor,w
  5813  09A2  0474               	iorwf	___lwdiv@divisor+1,w
  5814  09A3  1903               	btfsc	3,2
  5815  09A4  29D6               	goto	l3592
  5816  09A5  01C7               	clrf	___lwdiv@counter
  5817  09A6  0AC7               	incf	___lwdiv@counter,f
  5818  09A7                     l3580:	
  5819  09A7  1BF4               	btfsc	___lwdiv@divisor+1,7
  5820  09A8  29B5               	goto	l3582
  5821  09A9  3001               	movlw	1
  5822  09AA                     u3655:	
  5823  09AA  1003               	clrc
  5824  09AB  0DF3               	rlf	___lwdiv@divisor,f
  5825  09AC  0DF4               	rlf	___lwdiv@divisor+1,f
  5826  09AD  3EFF               	addlw	-1
  5827  09AE  1D03               	skipz
  5828  09AF  29AA               	goto	u3655
  5829  09B0  3001               	movlw	1
  5830  09B1  00F7               	movwf	??___lwdiv
  5831  09B2  0877               	movf	??___lwdiv,w
  5832  09B3  07C7               	addwf	___lwdiv@counter,f
  5833  09B4  29A7               	goto	l3580
  5834  09B5                     l3582:	
  5835  09B5  3001               	movlw	1
  5836  09B6                     u3675:	
  5837  09B6  1003               	clrc
  5838  09B7  0DC8               	rlf	___lwdiv@quotient,f
  5839  09B8  0DC9               	rlf	___lwdiv@quotient+1,f
  5840  09B9  3EFF               	addlw	-1
  5841  09BA  1D03               	skipz
  5842  09BB  29B6               	goto	u3675
  5843  09BC  0874               	movf	___lwdiv@divisor+1,w
  5844  09BD  0276               	subwf	___lwdiv@dividend+1,w
  5845  09BE  1D03               	skipz
  5846  09BF  29C2               	goto	u3685
  5847  09C0  0873               	movf	___lwdiv@divisor,w
  5848  09C1  0275               	subwf	___lwdiv@dividend,w
  5849  09C2                     u3685:	
  5850  09C2  1C03               	skipc
  5851  09C3  29CB               	goto	l3588
  5852  09C4  0873               	movf	___lwdiv@divisor,w
  5853  09C5  02F5               	subwf	___lwdiv@dividend,f
  5854  09C6  0874               	movf	___lwdiv@divisor+1,w
  5855  09C7  1C03               	skipc
  5856  09C8  03F6               	decf	___lwdiv@dividend+1,f
  5857  09C9  02F6               	subwf	___lwdiv@dividend+1,f
  5858  09CA  1448               	bsf	___lwdiv@quotient,0
  5859  09CB                     l3588:	
  5860  09CB  3001               	movlw	1
  5861  09CC                     u3695:	
  5862  09CC  1003               	clrc
  5863  09CD  0CF4               	rrf	___lwdiv@divisor+1,f
  5864  09CE  0CF3               	rrf	___lwdiv@divisor,f
  5865  09CF  3EFF               	addlw	-1
  5866  09D0  1D03               	skipz
  5867  09D1  29CC               	goto	u3695
  5868  09D2  3001               	movlw	1
  5869  09D3  02C7               	subwf	___lwdiv@counter,f
  5870  09D4  1D03               	btfss	3,2
  5871  09D5  29B5               	goto	l3582
  5872  09D6                     l3592:	
  5873  09D6  0849               	movf	___lwdiv@quotient+1,w
  5874  09D7  00F4               	movwf	?___lwdiv+1
  5875  09D8  0848               	movf	___lwdiv@quotient,w
  5876  09D9  00F3               	movwf	?___lwdiv
  5877  09DA  0008               	return
  5878  09DB                     __end_of___lwdiv:	
  5879                           
  5880                           	psect	text18
  5881  082B                     __ptext18:	
  5882 ;; *************** function ___bmul *****************
  5883 ;; Defined at:
  5884 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  multiplier      1    wreg     unsigned char 
  5887 ;;  multiplicand    1    3[COMMON] unsigned char 
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;  multiplier      1    6[COMMON] unsigned char 
  5890 ;;  product         1    5[COMMON] unsigned char 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1    wreg      unsigned char 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2, status,0
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5900 ;;      Params:         1       0       0       0       0
  5901 ;;      Locals:         2       0       0       0       0
  5902 ;;      Temps:          1       0       0       0       0
  5903 ;;      Totals:         4       0       0       0       0
  5904 ;;Total ram usage:        4 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    1
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		_main
  5911 ;;		_get_temp
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           
  5916                           ;psect for function ___bmul
  5917  082B                     ___bmul:	
  5918                           
  5919                           ;incstack = 0
  5920                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5921                           ;___bmul@multiplier stored from wreg
  5922  082B  00F6               	movwf	___bmul@multiplier
  5923  082C  01F5               	clrf	___bmul@product
  5924  082D                     l2660:	
  5925  082D  1C76               	btfss	___bmul@multiplier,0
  5926  082E  2833               	goto	l2664
  5927  082F  0873               	movf	___bmul@multiplicand,w
  5928  0830  00F4               	movwf	??___bmul
  5929  0831  0874               	movf	??___bmul,w
  5930  0832  07F5               	addwf	___bmul@product,f
  5931  0833                     l2664:	
  5932  0833  1003               	clrc
  5933  0834  0DF3               	rlf	___bmul@multiplicand,f
  5934  0835  1003               	clrc
  5935  0836  0CF6               	rrf	___bmul@multiplier,f
  5936  0837  0876               	movf	___bmul@multiplier,w
  5937  0838  1D03               	btfss	3,2
  5938  0839  282D               	goto	l2660
  5939  083A  0875               	movf	___bmul@product,w
  5940  083B  0008               	return
  5941  083C                     __end_of___bmul:	
  5942                           
  5943                           	psect	text19
  5944  17BA                     __ptext19:	
  5945 ;; *************** function _get_hall *****************
  5946 ;; Defined at:
  5947 ;;		line 567 in file "mainMaster.c"
  5948 ;; Parameters:    Size  Location     Type
  5949 ;;		None
  5950 ;; Auto vars:     Size  Location     Type
  5951 ;;  key             1    2[BANK0 ] unsigned char 
  5952 ;; Return value:  Size  Location     Type
  5953 ;;                  1    wreg      unsigned char 
  5954 ;; Registers used:
  5955 ;;		wreg, status,2, status,0, pclath, cstack
  5956 ;; Tracked objects:
  5957 ;;		On entry : 0/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5961 ;;      Params:         0       0       0       0       0
  5962 ;;      Locals:         0       1       0       0       0
  5963 ;;      Temps:          1       0       0       0       0
  5964 ;;      Totals:         1       1       0       0       0
  5965 ;;Total ram usage:        2 bytes
  5966 ;; Hardware stack levels used:    1
  5967 ;; Hardware stack levels required when called:    3
  5968 ;; This function calls:
  5969 ;;		_I2C_Master_Read
  5970 ;;		_I2C_Master_Start
  5971 ;;		_I2C_Master_Stop
  5972 ;;		_I2C_Master_Write
  5973 ;; This function is called by:
  5974 ;;		_main
  5975 ;; This function uses a non-reentrant model
  5976 ;;
  5977                           
  5978                           
  5979                           ;psect for function _get_hall
  5980  17BA                     _get_hall:	
  5981                           
  5982                           ;mainMaster.c: 569:     char key;;mainMaster.c: 571:     I2C_Master_Start();
  5983                           
  5984                           ;incstack = 0
  5985                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  5986  17BA  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  5987                           
  5988                           ;mainMaster.c: 572:     I2C_Master_Write(0x11);
  5989  17BF  3011               	movlw	17
  5990  17C0  00F3               	movwf	I2C_Master_Write@d
  5991  17C1  3000               	movlw	0
  5992  17C2  00F4               	movwf	I2C_Master_Write@d+1
  5993  17C3  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  5994                           
  5995                           ;mainMaster.c: 573:     key = I2C_Master_Read(0);
  5996  17C8  3000               	movlw	0
  5997  17C9  00F3               	movwf	I2C_Master_Read@a
  5998  17CA  00F4               	movwf	I2C_Master_Read@a+1
  5999  17CB  120A  158A  2060  160A  118A  	fcall	_I2C_Master_Read
  6000  17D0  0873               	movf	?_I2C_Master_Read,w
  6001  17D1  00F7               	movwf	??_get_hall
  6002  17D2  0877               	movf	??_get_hall,w
  6003  17D3  1283               	bcf	3,5	;RP0=0, select bank0
  6004  17D4  1303               	bcf	3,6	;RP1=0, select bank0
  6005  17D5  00C9               	movwf	get_hall@key
  6006                           
  6007                           ;mainMaster.c: 574:     I2C_Master_Stop();
  6008  17D6  160A  118A  2699   	fcall	_I2C_Master_Stop
  6009                           
  6010                           ;mainMaster.c: 576:     return (key);
  6011  17D9  1283               	bcf	3,5	;RP0=0, select bank0
  6012  17DA  1303               	bcf	3,6	;RP1=0, select bank0
  6013  17DB  0849               	movf	get_hall@key,w
  6014  17DC  0008               	return
  6015  17DD                     __end_of_get_hall:	
  6016                           
  6017                           	psect	text20
  6018  0963                     __ptext20:	
  6019 ;; *************** function _get_day *****************
  6020 ;; Defined at:
  6021 ;;		line 525 in file "mainMaster.c"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;		None
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;  d               1    2[BANK0 ] unsigned char 
  6026 ;; Return value:  Size  Location     Type
  6027 ;;                  1    wreg      unsigned char 
  6028 ;; Registers used:
  6029 ;;		wreg, status,2, status,0, pclath, cstack
  6030 ;; Tracked objects:
  6031 ;;		On entry : 0/0
  6032 ;;		On exit  : 0/0
  6033 ;;		Unchanged: 0/0
  6034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6035 ;;      Params:         0       0       0       0       0
  6036 ;;      Locals:         0       1       0       0       0
  6037 ;;      Temps:          1       0       0       0       0
  6038 ;;      Totals:         1       1       0       0       0
  6039 ;;Total ram usage:        2 bytes
  6040 ;; Hardware stack levels used:    1
  6041 ;; Hardware stack levels required when called:    3
  6042 ;; This function calls:
  6043 ;;		_I2C_Master_Read
  6044 ;;		_I2C_Master_RepeatedStart
  6045 ;;		_I2C_Master_Start
  6046 ;;		_I2C_Master_Stop
  6047 ;;		_I2C_Master_Write
  6048 ;; This function is called by:
  6049 ;;		_main
  6050 ;; This function uses a non-reentrant model
  6051 ;;
  6052                           
  6053                           
  6054                           ;psect for function _get_day
  6055  0963                     _get_day:	
  6056                           
  6057                           ;mainMaster.c: 527:     char d;;mainMaster.c: 529:     I2C_Master_Start();
  6058                           
  6059                           ;incstack = 0
  6060                           ; Regs used in _get_day: [wreg+status,2+status,0+pclath+cstack]
  6061  0963  160A  118A  2692  120A  158A  	fcall	_I2C_Master_Start
  6062                           
  6063                           ;mainMaster.c: 530:     I2C_Master_Write(0xD0);
  6064  0968  30D0               	movlw	208
  6065  0969  00F3               	movwf	I2C_Master_Write@d
  6066  096A  3000               	movlw	0
  6067  096B  00F4               	movwf	I2C_Master_Write@d+1
  6068  096C  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  6069                           
  6070                           ;mainMaster.c: 531:     I2C_Master_Write(0x03);
  6071  0971  3003               	movlw	3
  6072  0972  00F3               	movwf	I2C_Master_Write@d
  6073  0973  3000               	movlw	0
  6074  0974  00F4               	movwf	I2C_Master_Write@d+1
  6075  0975  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  6076                           
  6077                           ;mainMaster.c: 532:     I2C_Master_RepeatedStart();
  6078  097A  160A  118A  26A0  120A  158A  	fcall	_I2C_Master_RepeatedStart
  6079                           
  6080                           ;mainMaster.c: 533:     I2C_Master_Write(0xD1);
  6081  097F  30D1               	movlw	209
  6082  0980  00F3               	movwf	I2C_Master_Write@d
  6083  0981  3000               	movlw	0
  6084  0982  00F4               	movwf	I2C_Master_Write@d+1
  6085  0983  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  6086                           
  6087                           ;mainMaster.c: 534:     d = I2C_Master_Read(0);
  6088  0988  3000               	movlw	0
  6089  0989  00F3               	movwf	I2C_Master_Read@a
  6090  098A  00F4               	movwf	I2C_Master_Read@a+1
  6091  098B  120A  158A  2060  120A  158A  	fcall	_I2C_Master_Read
  6092  0990  0873               	movf	?_I2C_Master_Read,w
  6093  0991  00F7               	movwf	??_get_day
  6094  0992  0877               	movf	??_get_day,w
  6095  0993  1283               	bcf	3,5	;RP0=0, select bank0
  6096  0994  1303               	bcf	3,6	;RP1=0, select bank0
  6097  0995  00C9               	movwf	get_day@d
  6098                           
  6099                           ;mainMaster.c: 535:     I2C_Master_Stop();
  6100  0996  160A  118A  2699   	fcall	_I2C_Master_Stop
  6101                           
  6102                           ;mainMaster.c: 537:     return d;
  6103  0999  1283               	bcf	3,5	;RP0=0, select bank0
  6104  099A  1303               	bcf	3,6	;RP1=0, select bank0
  6105  099B  0849               	movf	get_day@d,w
  6106  099C  0008               	return
  6107  099D                     __end_of_get_day:	
  6108                           
  6109                           	psect	text21
  6110  16A0                     __ptext21:	
  6111 ;; *************** function _I2C_Master_RepeatedStart *****************
  6112 ;; Defined at:
  6113 ;;		line 47 in file "./I2C.h"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;		None
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;		None
  6118 ;; Return value:  Size  Location     Type
  6119 ;;                  1    wreg      void 
  6120 ;; Registers used:
  6121 ;;		wreg, status,2, status,0, pclath, cstack
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6127 ;;      Params:         0       0       0       0       0
  6128 ;;      Locals:         0       0       0       0       0
  6129 ;;      Temps:          0       0       0       0       0
  6130 ;;      Totals:         0       0       0       0       0
  6131 ;;Total ram usage:        0 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    2
  6134 ;; This function calls:
  6135 ;;		_I2C_Master_Wait
  6136 ;; This function is called by:
  6137 ;;		_get_time
  6138 ;;		_get_day
  6139 ;;		_get_temp
  6140 ;; This function uses a non-reentrant model
  6141 ;;
  6142                           
  6143                           
  6144                           ;psect for function _I2C_Master_RepeatedStart
  6145  16A0                     _I2C_Master_RepeatedStart:	
  6146                           
  6147                           ;./I2C.h: 49:     I2C_Master_Wait();
  6148                           
  6149                           ;incstack = 0
  6150                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  6151  16A0  160A  118A  26B7   	fcall	_I2C_Master_Wait
  6152                           
  6153                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  6154  16A3  1683               	bsf	3,5	;RP0=1, select bank1
  6155  16A4  1303               	bcf	3,6	;RP1=0, select bank1
  6156  16A5  1491               	bsf	17,1	;volatile
  6157  16A6  0008               	return
  6158  16A7                     __end_of_I2C_Master_RepeatedStart:	
  6159                           
  6160                           	psect	text22
  6161  1797                     __ptext22:	
  6162 ;; *************** function _get_PIR *****************
  6163 ;; Defined at:
  6164 ;;		line 591 in file "mainMaster.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;		None
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;  PIR             1    2[BANK0 ] unsigned char 
  6169 ;; Return value:  Size  Location     Type
  6170 ;;                  1    wreg      unsigned char 
  6171 ;; Registers used:
  6172 ;;		wreg, status,2, status,0, pclath, cstack
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6178 ;;      Params:         0       0       0       0       0
  6179 ;;      Locals:         0       1       0       0       0
  6180 ;;      Temps:          1       0       0       0       0
  6181 ;;      Totals:         1       1       0       0       0
  6182 ;;Total ram usage:        2 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; Hardware stack levels required when called:    3
  6185 ;; This function calls:
  6186 ;;		_I2C_Master_Read
  6187 ;;		_I2C_Master_Start
  6188 ;;		_I2C_Master_Stop
  6189 ;;		_I2C_Master_Write
  6190 ;; This function is called by:
  6191 ;;		_main
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           
  6196                           ;psect for function _get_PIR
  6197  1797                     _get_PIR:	
  6198                           
  6199                           ;mainMaster.c: 593:     char PIR;;mainMaster.c: 595:     I2C_Master_Start();
  6200                           
  6201                           ;incstack = 0
  6202                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  6203  1797  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  6204                           
  6205                           ;mainMaster.c: 596:     I2C_Master_Write(0x41);
  6206  179C  3041               	movlw	65
  6207  179D  00F3               	movwf	I2C_Master_Write@d
  6208  179E  3000               	movlw	0
  6209  179F  00F4               	movwf	I2C_Master_Write@d+1
  6210  17A0  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  6211                           
  6212                           ;mainMaster.c: 597:     PIR = I2C_Master_Read(0);
  6213  17A5  3000               	movlw	0
  6214  17A6  00F3               	movwf	I2C_Master_Read@a
  6215  17A7  00F4               	movwf	I2C_Master_Read@a+1
  6216  17A8  120A  158A  2060  160A  118A  	fcall	_I2C_Master_Read
  6217  17AD  0873               	movf	?_I2C_Master_Read,w
  6218  17AE  00F7               	movwf	??_get_PIR
  6219  17AF  0877               	movf	??_get_PIR,w
  6220  17B0  1283               	bcf	3,5	;RP0=0, select bank0
  6221  17B1  1303               	bcf	3,6	;RP1=0, select bank0
  6222  17B2  00C9               	movwf	get_PIR@PIR
  6223                           
  6224                           ;mainMaster.c: 598:     I2C_Master_Stop();
  6225  17B3  160A  118A  2699   	fcall	_I2C_Master_Stop
  6226                           
  6227                           ;mainMaster.c: 600:     return (PIR);
  6228  17B6  1283               	bcf	3,5	;RP0=0, select bank0
  6229  17B7  1303               	bcf	3,6	;RP1=0, select bank0
  6230  17B8  0849               	movf	get_PIR@PIR,w
  6231  17B9  0008               	return
  6232  17BA                     __end_of_get_PIR:	
  6233                           
  6234                           	psect	text23
  6235  1774                     __ptext23:	
  6236 ;; *************** function _get_IR *****************
  6237 ;; Defined at:
  6238 ;;		line 603 in file "mainMaster.c"
  6239 ;; Parameters:    Size  Location     Type
  6240 ;;		None
  6241 ;; Auto vars:     Size  Location     Type
  6242 ;;  IR              1    2[BANK0 ] unsigned char 
  6243 ;; Return value:  Size  Location     Type
  6244 ;;                  1    wreg      unsigned char 
  6245 ;; Registers used:
  6246 ;;		wreg, status,2, status,0, pclath, cstack
  6247 ;; Tracked objects:
  6248 ;;		On entry : 0/0
  6249 ;;		On exit  : 0/0
  6250 ;;		Unchanged: 0/0
  6251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6252 ;;      Params:         0       0       0       0       0
  6253 ;;      Locals:         0       1       0       0       0
  6254 ;;      Temps:          1       0       0       0       0
  6255 ;;      Totals:         1       1       0       0       0
  6256 ;;Total ram usage:        2 bytes
  6257 ;; Hardware stack levels used:    1
  6258 ;; Hardware stack levels required when called:    3
  6259 ;; This function calls:
  6260 ;;		_I2C_Master_Read
  6261 ;;		_I2C_Master_Start
  6262 ;;		_I2C_Master_Stop
  6263 ;;		_I2C_Master_Write
  6264 ;; This function is called by:
  6265 ;;		_main
  6266 ;; This function uses a non-reentrant model
  6267 ;;
  6268                           
  6269                           
  6270                           ;psect for function _get_IR
  6271  1774                     _get_IR:	
  6272                           
  6273                           ;mainMaster.c: 605:     char IR;;mainMaster.c: 607:     I2C_Master_Start();
  6274                           
  6275                           ;incstack = 0
  6276                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  6277  1774  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  6278                           
  6279                           ;mainMaster.c: 608:     I2C_Master_Write(0x31);
  6280  1779  3031               	movlw	49
  6281  177A  00F3               	movwf	I2C_Master_Write@d
  6282  177B  3000               	movlw	0
  6283  177C  00F4               	movwf	I2C_Master_Write@d+1
  6284  177D  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  6285                           
  6286                           ;mainMaster.c: 609:     IR = I2C_Master_Read(0);
  6287  1782  3000               	movlw	0
  6288  1783  00F3               	movwf	I2C_Master_Read@a
  6289  1784  00F4               	movwf	I2C_Master_Read@a+1
  6290  1785  120A  158A  2060  160A  118A  	fcall	_I2C_Master_Read
  6291  178A  0873               	movf	?_I2C_Master_Read,w
  6292  178B  00F7               	movwf	??_get_IR
  6293  178C  0877               	movf	??_get_IR,w
  6294  178D  1283               	bcf	3,5	;RP0=0, select bank0
  6295  178E  1303               	bcf	3,6	;RP1=0, select bank0
  6296  178F  00C9               	movwf	get_IR@IR
  6297                           
  6298                           ;mainMaster.c: 610:     I2C_Master_Stop();
  6299  1790  160A  118A  2699   	fcall	_I2C_Master_Stop
  6300                           
  6301                           ;mainMaster.c: 612:     return (IR);
  6302  1793  1283               	bcf	3,5	;RP0=0, select bank0
  6303  1794  1303               	bcf	3,6	;RP1=0, select bank0
  6304  1795  0849               	movf	get_IR@IR,w
  6305  1796  0008               	return
  6306  1797                     __end_of_get_IR:	
  6307                           
  6308                           	psect	text24
  6309  0860                     __ptext24:	
  6310 ;; *************** function _I2C_Master_Read *****************
  6311 ;; Defined at:
  6312 ;;		line 74 in file "./I2C.h"
  6313 ;; Parameters:    Size  Location     Type
  6314 ;;  a               2    3[COMMON] unsigned short 
  6315 ;; Auto vars:     Size  Location     Type
  6316 ;;  temp            2    0[BANK0 ] unsigned short 
  6317 ;; Return value:  Size  Location     Type
  6318 ;;                  2    3[COMMON] unsigned short 
  6319 ;; Registers used:
  6320 ;;		wreg, status,2, status,0, pclath, cstack
  6321 ;; Tracked objects:
  6322 ;;		On entry : 0/0
  6323 ;;		On exit  : 0/0
  6324 ;;		Unchanged: 0/0
  6325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6326 ;;      Params:         2       0       0       0       0
  6327 ;;      Locals:         0       2       0       0       0
  6328 ;;      Temps:          2       0       0       0       0
  6329 ;;      Totals:         4       2       0       0       0
  6330 ;;Total ram usage:        6 bytes
  6331 ;; Hardware stack levels used:    1
  6332 ;; Hardware stack levels required when called:    2
  6333 ;; This function calls:
  6334 ;;		_I2C_Master_Wait
  6335 ;; This function is called by:
  6336 ;;		_get_time
  6337 ;;		_get_day
  6338 ;;		_get_temp
  6339 ;;		_get_hall
  6340 ;;		_get_tripwire
  6341 ;;		_get_PIR
  6342 ;;		_get_IR
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           
  6347                           ;psect for function _I2C_Master_Read
  6348  0860                     _I2C_Master_Read:	
  6349                           
  6350                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  6351                           
  6352                           ;incstack = 0
  6353                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  6354  0860  160A  118A  26B7  120A  158A  	fcall	_I2C_Master_Wait
  6355                           
  6356                           ;./I2C.h: 78:     RCEN = 1;
  6357  0865  1683               	bsf	3,5	;RP0=1, select bank1
  6358  0866  1303               	bcf	3,6	;RP1=0, select bank1
  6359  0867  1591               	bsf	17,3	;volatile
  6360                           
  6361                           ;./I2C.h: 79:     I2C_Master_Wait();
  6362  0868  160A  118A  26B7  120A  158A  	fcall	_I2C_Master_Wait
  6363                           
  6364                           ;./I2C.h: 80:     temp = SSPBUF;
  6365  086D  1283               	bcf	3,5	;RP0=0, select bank0
  6366  086E  1303               	bcf	3,6	;RP1=0, select bank0
  6367  086F  0813               	movf	19,w	;volatile
  6368  0870  00F5               	movwf	??_I2C_Master_Read
  6369  0871  01F6               	clrf	??_I2C_Master_Read+1
  6370  0872  0875               	movf	??_I2C_Master_Read,w
  6371  0873  00C7               	movwf	I2C_Master_Read@temp
  6372  0874  0876               	movf	??_I2C_Master_Read+1,w
  6373  0875  00C8               	movwf	I2C_Master_Read@temp+1
  6374                           
  6375                           ;./I2C.h: 81:     I2C_Master_Wait();
  6376  0876  160A  118A  26B7  120A  158A  	fcall	_I2C_Master_Wait
  6377                           
  6378                           ;./I2C.h: 83:     if(a == 1){
  6379  087B  0373               	decf	I2C_Master_Read@a,w
  6380  087C  0474               	iorwf	I2C_Master_Read@a+1,w
  6381  087D  1D03               	btfss	3,2
  6382  087E  2883               	goto	l152
  6383                           
  6384                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  6385  087F  1683               	bsf	3,5	;RP0=1, select bank1
  6386  0880  1303               	bcf	3,6	;RP1=0, select bank1
  6387  0881  1291               	bcf	17,5	;volatile
  6388                           
  6389                           ;./I2C.h: 85:     }else{
  6390  0882  2886               	goto	l153
  6391  0883                     l152:	
  6392                           
  6393                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  6394  0883  1683               	bsf	3,5	;RP0=1, select bank1
  6395  0884  1303               	bcf	3,6	;RP1=0, select bank1
  6396  0885  1691               	bsf	17,5	;volatile
  6397  0886                     l153:	
  6398                           ;./I2C.h: 87:     }
  6399                           
  6400                           
  6401                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  6402  0886  1611               	bsf	17,4	;volatile
  6403                           
  6404                           ;./I2C.h: 89:     return temp;
  6405  0887  1283               	bcf	3,5	;RP0=0, select bank0
  6406  0888  1303               	bcf	3,6	;RP1=0, select bank0
  6407  0889  0848               	movf	I2C_Master_Read@temp+1,w
  6408  088A  00F4               	movwf	?_I2C_Master_Read+1
  6409  088B  0847               	movf	I2C_Master_Read@temp,w
  6410  088C  00F3               	movwf	?_I2C_Master_Read
  6411  088D  0008               	return
  6412  088E                     __end_of_I2C_Master_Read:	
  6413                           
  6414                           	psect	text25
  6415  171F                     __ptext25:	
  6416 ;; *************** function _close_door *****************
  6417 ;; Defined at:
  6418 ;;		line 624 in file "mainMaster.c"
  6419 ;; Parameters:    Size  Location     Type
  6420 ;;		None
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;		None
  6423 ;; Return value:  Size  Location     Type
  6424 ;;                  1    wreg      void 
  6425 ;; Registers used:
  6426 ;;		wreg, status,2, status,0, pclath, cstack
  6427 ;; Tracked objects:
  6428 ;;		On entry : 0/0
  6429 ;;		On exit  : 0/0
  6430 ;;		Unchanged: 0/0
  6431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6432 ;;      Params:         0       0       0       0       0
  6433 ;;      Locals:         0       0       0       0       0
  6434 ;;      Temps:          0       0       0       0       0
  6435 ;;      Totals:         0       0       0       0       0
  6436 ;;Total ram usage:        0 bytes
  6437 ;; Hardware stack levels used:    1
  6438 ;; Hardware stack levels required when called:    3
  6439 ;; This function calls:
  6440 ;;		_I2C_Master_Start
  6441 ;;		_I2C_Master_Stop
  6442 ;;		_I2C_Master_Write
  6443 ;; This function is called by:
  6444 ;;		_main
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           
  6449                           ;psect for function _close_door
  6450  171F                     _close_door:	
  6451                           
  6452                           ;mainMaster.c: 626:     I2C_Master_Start();
  6453                           
  6454                           ;incstack = 0
  6455                           ; Regs used in _close_door: [wreg+status,2+status,0+pclath+cstack]
  6456  171F  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  6457                           
  6458                           ;mainMaster.c: 627:     I2C_Master_Write(0x20);
  6459  1724  3020               	movlw	32
  6460  1725  00F3               	movwf	I2C_Master_Write@d
  6461  1726  3000               	movlw	0
  6462  1727  00F4               	movwf	I2C_Master_Write@d+1
  6463  1728  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  6464                           
  6465                           ;mainMaster.c: 628:     I2C_Master_Write(0xF0);
  6466  172D  30F0               	movlw	240
  6467  172E  00F3               	movwf	I2C_Master_Write@d
  6468  172F  3000               	movlw	0
  6469  1730  00F4               	movwf	I2C_Master_Write@d+1
  6470  1731  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  6471                           
  6472                           ;mainMaster.c: 629:     I2C_Master_Stop();
  6473  1736  160A  118A  2699   	fcall	_I2C_Master_Stop
  6474  1739  0008               	return
  6475  173A                     __end_of_close_door:	
  6476                           
  6477                           	psect	text26
  6478  16A7                     __ptext26:	
  6479 ;; *************** function _I2C_Master_Write *****************
  6480 ;; Defined at:
  6481 ;;		line 65 in file "./I2C.h"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;  d               2    3[COMMON] unsigned int 
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;		None
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  1    wreg      void 
  6488 ;; Registers used:
  6489 ;;		wreg, status,2, status,0, pclath, cstack
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6495 ;;      Params:         2       0       0       0       0
  6496 ;;      Locals:         0       0       0       0       0
  6497 ;;      Temps:          0       0       0       0       0
  6498 ;;      Totals:         2       0       0       0       0
  6499 ;;Total ram usage:        2 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    2
  6502 ;; This function calls:
  6503 ;;		_I2C_Master_Wait
  6504 ;; This function is called by:
  6505 ;;		_write_RTC
  6506 ;;		_get_time
  6507 ;;		_get_day
  6508 ;;		_get_temp
  6509 ;;		_get_hall
  6510 ;;		_get_tripwire
  6511 ;;		_get_PIR
  6512 ;;		_get_IR
  6513 ;;		_open_door
  6514 ;;		_close_door
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518                           
  6519                           ;psect for function _I2C_Master_Write
  6520  16A7                     _I2C_Master_Write:	
  6521                           
  6522                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  6523                           
  6524                           ;incstack = 0
  6525                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  6526  16A7  160A  118A  26B7   	fcall	_I2C_Master_Wait
  6527                           
  6528                           ;./I2C.h: 68:     SSPBUF = d;
  6529  16AA  0873               	movf	I2C_Master_Write@d,w
  6530  16AB  1283               	bcf	3,5	;RP0=0, select bank0
  6531  16AC  1303               	bcf	3,6	;RP1=0, select bank0
  6532  16AD  0093               	movwf	19	;volatile
  6533  16AE  0008               	return
  6534  16AF                     __end_of_I2C_Master_Write:	
  6535                           
  6536                           	psect	text27
  6537  1699                     __ptext27:	
  6538 ;; *************** function _I2C_Master_Stop *****************
  6539 ;; Defined at:
  6540 ;;		line 55 in file "./I2C.h"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;		None
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;		None
  6545 ;; Return value:  Size  Location     Type
  6546 ;;                  1    wreg      void 
  6547 ;; Registers used:
  6548 ;;		wreg, status,2, status,0, pclath, cstack
  6549 ;; Tracked objects:
  6550 ;;		On entry : 0/0
  6551 ;;		On exit  : 0/0
  6552 ;;		Unchanged: 0/0
  6553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6554 ;;      Params:         0       0       0       0       0
  6555 ;;      Locals:         0       0       0       0       0
  6556 ;;      Temps:          0       0       0       0       0
  6557 ;;      Totals:         0       0       0       0       0
  6558 ;;Total ram usage:        0 bytes
  6559 ;; Hardware stack levels used:    1
  6560 ;; Hardware stack levels required when called:    2
  6561 ;; This function calls:
  6562 ;;		_I2C_Master_Wait
  6563 ;; This function is called by:
  6564 ;;		_write_RTC
  6565 ;;		_get_time
  6566 ;;		_get_day
  6567 ;;		_get_temp
  6568 ;;		_get_hall
  6569 ;;		_get_tripwire
  6570 ;;		_get_PIR
  6571 ;;		_get_IR
  6572 ;;		_open_door
  6573 ;;		_close_door
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           
  6578                           ;psect for function _I2C_Master_Stop
  6579  1699                     _I2C_Master_Stop:	
  6580                           
  6581                           ;./I2C.h: 57:     I2C_Master_Wait();
  6582                           
  6583                           ;incstack = 0
  6584                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  6585  1699  160A  118A  26B7   	fcall	_I2C_Master_Wait
  6586                           
  6587                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  6588  169C  1683               	bsf	3,5	;RP0=1, select bank1
  6589  169D  1303               	bcf	3,6	;RP1=0, select bank1
  6590  169E  1511               	bsf	17,2	;volatile
  6591  169F  0008               	return
  6592  16A0                     __end_of_I2C_Master_Stop:	
  6593                           
  6594                           	psect	text28
  6595  1692                     __ptext28:	
  6596 ;; *************** function _I2C_Master_Start *****************
  6597 ;; Defined at:
  6598 ;;		line 39 in file "./I2C.h"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;		None
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;		None
  6603 ;; Return value:  Size  Location     Type
  6604 ;;                  1    wreg      void 
  6605 ;; Registers used:
  6606 ;;		wreg, status,2, status,0, pclath, cstack
  6607 ;; Tracked objects:
  6608 ;;		On entry : 0/0
  6609 ;;		On exit  : 0/0
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6612 ;;      Params:         0       0       0       0       0
  6613 ;;      Locals:         0       0       0       0       0
  6614 ;;      Temps:          0       0       0       0       0
  6615 ;;      Totals:         0       0       0       0       0
  6616 ;;Total ram usage:        0 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; Hardware stack levels required when called:    2
  6619 ;; This function calls:
  6620 ;;		_I2C_Master_Wait
  6621 ;; This function is called by:
  6622 ;;		_write_RTC
  6623 ;;		_get_time
  6624 ;;		_get_day
  6625 ;;		_get_temp
  6626 ;;		_get_hall
  6627 ;;		_get_tripwire
  6628 ;;		_get_PIR
  6629 ;;		_get_IR
  6630 ;;		_open_door
  6631 ;;		_close_door
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           
  6636                           ;psect for function _I2C_Master_Start
  6637  1692                     _I2C_Master_Start:	
  6638                           
  6639                           ;./I2C.h: 41:     I2C_Master_Wait();
  6640                           
  6641                           ;incstack = 0
  6642                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  6643  1692  160A  118A  26B7   	fcall	_I2C_Master_Wait
  6644                           
  6645                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  6646  1695  1683               	bsf	3,5	;RP0=1, select bank1
  6647  1696  1303               	bcf	3,6	;RP1=0, select bank1
  6648  1697  1411               	bsf	17,0	;volatile
  6649  1698  0008               	return
  6650  1699                     __end_of_I2C_Master_Start:	
  6651                           
  6652                           	psect	text29
  6653  16B7                     __ptext29:	
  6654 ;; *************** function _I2C_Master_Wait *****************
  6655 ;; Defined at:
  6656 ;;		line 32 in file "./I2C.h"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;		None
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;		None
  6661 ;; Return value:  Size  Location     Type
  6662 ;;                  1    wreg      void 
  6663 ;; Registers used:
  6664 ;;		wreg, status,2
  6665 ;; Tracked objects:
  6666 ;;		On entry : 0/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6670 ;;      Params:         0       0       0       0       0
  6671 ;;      Locals:         0       0       0       0       0
  6672 ;;      Temps:          0       0       0       0       0
  6673 ;;      Totals:         0       0       0       0       0
  6674 ;;Total ram usage:        0 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    1
  6677 ;; This function calls:
  6678 ;;		Nothing
  6679 ;; This function is called by:
  6680 ;;		_I2C_Master_Start
  6681 ;;		_I2C_Master_RepeatedStart
  6682 ;;		_I2C_Master_Stop
  6683 ;;		_I2C_Master_Write
  6684 ;;		_I2C_Master_Read
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           
  6689                           ;psect for function _I2C_Master_Wait
  6690  16B7                     _I2C_Master_Wait:	
  6691  16B7                     l134:	
  6692                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  6693                           
  6694                           ;incstack = 0
  6695                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  6696                           
  6697  16B7  1683               	bsf	3,5	;RP0=1, select bank1
  6698  16B8  1303               	bcf	3,6	;RP1=0, select bank1
  6699  16B9  1914               	btfsc	20,2	;volatile
  6700  16BA  2EB7               	goto	l134
  6701  16BB  0811               	movf	17,w	;volatile
  6702  16BC  391F               	andlw	31
  6703  16BD  1903               	btfsc	3,2
  6704  16BE  0008               	return
  6705  16BF  2EB7               	goto	l134
  6706  16C0                     __end_of_I2C_Master_Wait:	
  6707                           
  6708                           	psect	text30
  6709  06B2                     __ptext30:	
  6710 ;; *************** function ___awmod *****************
  6711 ;; Defined at:
  6712 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;  divisor         2    3[COMMON] int 
  6715 ;;  dividend        2    5[COMMON] int 
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;  sign            1    1[BANK0 ] unsigned char 
  6718 ;;  counter         1    0[BANK0 ] unsigned char 
  6719 ;; Return value:  Size  Location     Type
  6720 ;;                  2    3[COMMON] int 
  6721 ;; Registers used:
  6722 ;;		wreg, status,2, status,0
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6728 ;;      Params:         4       0       0       0       0
  6729 ;;      Locals:         0       2       0       0       0
  6730 ;;      Temps:          1       0       0       0       0
  6731 ;;      Totals:         5       2       0       0       0
  6732 ;;Total ram usage:        7 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; Hardware stack levels required when called:    1
  6735 ;; This function calls:
  6736 ;;		Nothing
  6737 ;; This function is called by:
  6738 ;;		_main
  6739 ;; This function uses a non-reentrant model
  6740 ;;
  6741                           
  6742                           
  6743                           ;psect for function ___awmod
  6744  06B2                     ___awmod:	
  6745                           
  6746                           ;incstack = 0
  6747                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6748  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  6749  06B3  1303               	bcf	3,6	;RP1=0, select bank0
  6750  06B4  01C8               	clrf	___awmod@sign
  6751  06B5  1FF6               	btfss	___awmod@dividend+1,7
  6752  06B6  2EBE               	goto	l3920
  6753  06B7  09F5               	comf	___awmod@dividend,f
  6754  06B8  09F6               	comf	___awmod@dividend+1,f
  6755  06B9  0AF5               	incf	___awmod@dividend,f
  6756  06BA  1903               	skipnz
  6757  06BB  0AF6               	incf	___awmod@dividend+1,f
  6758  06BC  01C8               	clrf	___awmod@sign
  6759  06BD  0AC8               	incf	___awmod@sign,f
  6760  06BE                     l3920:	
  6761  06BE  1FF4               	btfss	___awmod@divisor+1,7
  6762  06BF  2EC5               	goto	l3924
  6763  06C0  09F3               	comf	___awmod@divisor,f
  6764  06C1  09F4               	comf	___awmod@divisor+1,f
  6765  06C2  0AF3               	incf	___awmod@divisor,f
  6766  06C3  1903               	skipnz
  6767  06C4  0AF4               	incf	___awmod@divisor+1,f
  6768  06C5                     l3924:	
  6769  06C5  0873               	movf	___awmod@divisor,w
  6770  06C6  0474               	iorwf	___awmod@divisor+1,w
  6771  06C7  1903               	btfsc	3,2
  6772  06C8  2EF2               	goto	l3942
  6773  06C9  01C7               	clrf	___awmod@counter
  6774  06CA  0AC7               	incf	___awmod@counter,f
  6775  06CB                     l3932:	
  6776  06CB  1BF4               	btfsc	___awmod@divisor+1,7
  6777  06CC  2ED9               	goto	l3934
  6778  06CD  3001               	movlw	1
  6779  06CE                     u4045:	
  6780  06CE  1003               	clrc
  6781  06CF  0DF3               	rlf	___awmod@divisor,f
  6782  06D0  0DF4               	rlf	___awmod@divisor+1,f
  6783  06D1  3EFF               	addlw	-1
  6784  06D2  1D03               	skipz
  6785  06D3  2ECE               	goto	u4045
  6786  06D4  3001               	movlw	1
  6787  06D5  00F7               	movwf	??___awmod
  6788  06D6  0877               	movf	??___awmod,w
  6789  06D7  07C7               	addwf	___awmod@counter,f
  6790  06D8  2ECB               	goto	l3932
  6791  06D9                     l3934:	
  6792  06D9  0874               	movf	___awmod@divisor+1,w
  6793  06DA  0276               	subwf	___awmod@dividend+1,w
  6794  06DB  1D03               	skipz
  6795  06DC  2EDF               	goto	u4065
  6796  06DD  0873               	movf	___awmod@divisor,w
  6797  06DE  0275               	subwf	___awmod@dividend,w
  6798  06DF                     u4065:	
  6799  06DF  1C03               	skipc
  6800  06E0  2EE7               	goto	l3938
  6801  06E1  0873               	movf	___awmod@divisor,w
  6802  06E2  02F5               	subwf	___awmod@dividend,f
  6803  06E3  0874               	movf	___awmod@divisor+1,w
  6804  06E4  1C03               	skipc
  6805  06E5  03F6               	decf	___awmod@dividend+1,f
  6806  06E6  02F6               	subwf	___awmod@dividend+1,f
  6807  06E7                     l3938:	
  6808  06E7  3001               	movlw	1
  6809  06E8                     u4075:	
  6810  06E8  1003               	clrc
  6811  06E9  0CF4               	rrf	___awmod@divisor+1,f
  6812  06EA  0CF3               	rrf	___awmod@divisor,f
  6813  06EB  3EFF               	addlw	-1
  6814  06EC  1D03               	skipz
  6815  06ED  2EE8               	goto	u4075
  6816  06EE  3001               	movlw	1
  6817  06EF  02C7               	subwf	___awmod@counter,f
  6818  06F0  1D03               	btfss	3,2
  6819  06F1  2ED9               	goto	l3934
  6820  06F2                     l3942:	
  6821  06F2  0848               	movf	___awmod@sign,w
  6822  06F3  1903               	btfsc	3,2
  6823  06F4  2EFA               	goto	l3946
  6824  06F5  09F5               	comf	___awmod@dividend,f
  6825  06F6  09F6               	comf	___awmod@dividend+1,f
  6826  06F7  0AF5               	incf	___awmod@dividend,f
  6827  06F8  1903               	skipnz
  6828  06F9  0AF6               	incf	___awmod@dividend+1,f
  6829  06FA                     l3946:	
  6830  06FA  0876               	movf	___awmod@dividend+1,w
  6831  06FB  00F4               	movwf	?___awmod+1
  6832  06FC  0875               	movf	___awmod@dividend,w
  6833  06FD  00F3               	movwf	?___awmod
  6834  06FE  0008               	return
  6835  06FF                     __end_of___awmod:	
  6836                           
  6837                           	psect	text31
  6838  0B07                     __ptext31:	
  6839 ;; *************** function ___awdiv *****************
  6840 ;; Defined at:
  6841 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  6842 ;; Parameters:    Size  Location     Type
  6843 ;;  divisor         2    3[COMMON] int 
  6844 ;;  dividend        2    5[COMMON] int 
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;  quotient        2    2[BANK0 ] int 
  6847 ;;  sign            1    1[BANK0 ] unsigned char 
  6848 ;;  counter         1    0[BANK0 ] unsigned char 
  6849 ;; Return value:  Size  Location     Type
  6850 ;;                  2    3[COMMON] int 
  6851 ;; Registers used:
  6852 ;;		wreg, status,2, status,0
  6853 ;; Tracked objects:
  6854 ;;		On entry : 0/0
  6855 ;;		On exit  : 0/0
  6856 ;;		Unchanged: 0/0
  6857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6858 ;;      Params:         4       0       0       0       0
  6859 ;;      Locals:         0       4       0       0       0
  6860 ;;      Temps:          1       0       0       0       0
  6861 ;;      Totals:         5       4       0       0       0
  6862 ;;Total ram usage:        9 bytes
  6863 ;; Hardware stack levels used:    1
  6864 ;; Hardware stack levels required when called:    1
  6865 ;; This function calls:
  6866 ;;		Nothing
  6867 ;; This function is called by:
  6868 ;;		_main
  6869 ;; This function uses a non-reentrant model
  6870 ;;
  6871                           
  6872                           
  6873                           ;psect for function ___awdiv
  6874  0B07                     ___awdiv:	
  6875                           
  6876                           ;incstack = 0
  6877                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6878  0B07  1283               	bcf	3,5	;RP0=0, select bank0
  6879  0B08  1303               	bcf	3,6	;RP1=0, select bank0
  6880  0B09  01C8               	clrf	___awdiv@sign
  6881  0B0A  1FF4               	btfss	___awdiv@divisor+1,7
  6882  0B0B  2B13               	goto	l2868
  6883  0B0C  09F3               	comf	___awdiv@divisor,f
  6884  0B0D  09F4               	comf	___awdiv@divisor+1,f
  6885  0B0E  0AF3               	incf	___awdiv@divisor,f
  6886  0B0F  1903               	skipnz
  6887  0B10  0AF4               	incf	___awdiv@divisor+1,f
  6888  0B11  01C8               	clrf	___awdiv@sign
  6889  0B12  0AC8               	incf	___awdiv@sign,f
  6890  0B13                     l2868:	
  6891  0B13  1FF6               	btfss	___awdiv@dividend+1,7
  6892  0B14  2B1E               	goto	l2874
  6893  0B15  09F5               	comf	___awdiv@dividend,f
  6894  0B16  09F6               	comf	___awdiv@dividend+1,f
  6895  0B17  0AF5               	incf	___awdiv@dividend,f
  6896  0B18  1903               	skipnz
  6897  0B19  0AF6               	incf	___awdiv@dividend+1,f
  6898  0B1A  3001               	movlw	1
  6899  0B1B  00F7               	movwf	??___awdiv
  6900  0B1C  0877               	movf	??___awdiv,w
  6901  0B1D  06C8               	xorwf	___awdiv@sign,f
  6902  0B1E                     l2874:	
  6903  0B1E  01C9               	clrf	___awdiv@quotient
  6904  0B1F  01CA               	clrf	___awdiv@quotient+1
  6905  0B20  0873               	movf	___awdiv@divisor,w
  6906  0B21  0474               	iorwf	___awdiv@divisor+1,w
  6907  0B22  1903               	btfsc	3,2
  6908  0B23  2B55               	goto	l2896
  6909  0B24  01C7               	clrf	___awdiv@counter
  6910  0B25  0AC7               	incf	___awdiv@counter,f
  6911  0B26                     l2884:	
  6912  0B26  1BF4               	btfsc	___awdiv@divisor+1,7
  6913  0B27  2B34               	goto	l2886
  6914  0B28  3001               	movlw	1
  6915  0B29                     u2495:	
  6916  0B29  1003               	clrc
  6917  0B2A  0DF3               	rlf	___awdiv@divisor,f
  6918  0B2B  0DF4               	rlf	___awdiv@divisor+1,f
  6919  0B2C  3EFF               	addlw	-1
  6920  0B2D  1D03               	skipz
  6921  0B2E  2B29               	goto	u2495
  6922  0B2F  3001               	movlw	1
  6923  0B30  00F7               	movwf	??___awdiv
  6924  0B31  0877               	movf	??___awdiv,w
  6925  0B32  07C7               	addwf	___awdiv@counter,f
  6926  0B33  2B26               	goto	l2884
  6927  0B34                     l2886:	
  6928  0B34  3001               	movlw	1
  6929  0B35                     u2515:	
  6930  0B35  1003               	clrc
  6931  0B36  0DC9               	rlf	___awdiv@quotient,f
  6932  0B37  0DCA               	rlf	___awdiv@quotient+1,f
  6933  0B38  3EFF               	addlw	-1
  6934  0B39  1D03               	skipz
  6935  0B3A  2B35               	goto	u2515
  6936  0B3B  0874               	movf	___awdiv@divisor+1,w
  6937  0B3C  0276               	subwf	___awdiv@dividend+1,w
  6938  0B3D  1D03               	skipz
  6939  0B3E  2B41               	goto	u2525
  6940  0B3F  0873               	movf	___awdiv@divisor,w
  6941  0B40  0275               	subwf	___awdiv@dividend,w
  6942  0B41                     u2525:	
  6943  0B41  1C03               	skipc
  6944  0B42  2B4A               	goto	l2892
  6945  0B43  0873               	movf	___awdiv@divisor,w
  6946  0B44  02F5               	subwf	___awdiv@dividend,f
  6947  0B45  0874               	movf	___awdiv@divisor+1,w
  6948  0B46  1C03               	skipc
  6949  0B47  03F6               	decf	___awdiv@dividend+1,f
  6950  0B48  02F6               	subwf	___awdiv@dividend+1,f
  6951  0B49  1449               	bsf	___awdiv@quotient,0
  6952  0B4A                     l2892:	
  6953  0B4A  3001               	movlw	1
  6954  0B4B                     u2535:	
  6955  0B4B  1003               	clrc
  6956  0B4C  0CF4               	rrf	___awdiv@divisor+1,f
  6957  0B4D  0CF3               	rrf	___awdiv@divisor,f
  6958  0B4E  3EFF               	addlw	-1
  6959  0B4F  1D03               	skipz
  6960  0B50  2B4B               	goto	u2535
  6961  0B51  3001               	movlw	1
  6962  0B52  02C7               	subwf	___awdiv@counter,f
  6963  0B53  1D03               	btfss	3,2
  6964  0B54  2B34               	goto	l2886
  6965  0B55                     l2896:	
  6966  0B55  0848               	movf	___awdiv@sign,w
  6967  0B56  1903               	btfsc	3,2
  6968  0B57  2B5D               	goto	l2900
  6969  0B58  09C9               	comf	___awdiv@quotient,f
  6970  0B59  09CA               	comf	___awdiv@quotient+1,f
  6971  0B5A  0AC9               	incf	___awdiv@quotient,f
  6972  0B5B  1903               	skipnz
  6973  0B5C  0ACA               	incf	___awdiv@quotient+1,f
  6974  0B5D                     l2900:	
  6975  0B5D  084A               	movf	___awdiv@quotient+1,w
  6976  0B5E  00F4               	movwf	?___awdiv+1
  6977  0B5F  0849               	movf	___awdiv@quotient,w
  6978  0B60  00F3               	movwf	?___awdiv
  6979  0B61  0008               	return
  6980  0B62                     __end_of___awdiv:	
  6981                           
  6982                           	psect	text32
  6983  16C0                     __ptext32:	
  6984 ;; *************** function _UART_Write *****************
  6985 ;; Defined at:
  6986 ;;		line 54 in file "./UART.h"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;  data            1    wreg     unsigned char 
  6989 ;; Auto vars:     Size  Location     Type
  6990 ;;  data            1    3[COMMON] unsigned char 
  6991 ;; Return value:  Size  Location     Type
  6992 ;;                  1    wreg      void 
  6993 ;; Registers used:
  6994 ;;		wreg
  6995 ;; Tracked objects:
  6996 ;;		On entry : 0/0
  6997 ;;		On exit  : 0/0
  6998 ;;		Unchanged: 0/0
  6999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7000 ;;      Params:         0       0       0       0       0
  7001 ;;      Locals:         1       0       0       0       0
  7002 ;;      Temps:          0       0       0       0       0
  7003 ;;      Totals:         1       0       0       0       0
  7004 ;;Total ram usage:        1 bytes
  7005 ;; Hardware stack levels used:    1
  7006 ;; Hardware stack levels required when called:    1
  7007 ;; This function calls:
  7008 ;;		Nothing
  7009 ;; This function is called by:
  7010 ;;		_main
  7011 ;;		_UART_Write_Text
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           
  7016                           ;psect for function _UART_Write
  7017  16C0                     _UART_Write:	
  7018                           
  7019                           ;incstack = 0
  7020                           ; Regs used in _UART_Write: [wreg]
  7021                           ;UART_Write@data stored from wreg
  7022  16C0  00F3               	movwf	UART_Write@data
  7023  16C1                     l238:	
  7024                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(!TRMT);
  7025                           
  7026  16C1  1683               	bsf	3,5	;RP0=1, select bank1
  7027  16C2  1303               	bcf	3,6	;RP1=0, select bank1
  7028  16C3  1C98               	btfss	24,1	;volatile
  7029  16C4  2EC1               	goto	l238
  7030                           
  7031                           ;./UART.h: 57:   TXREG = data;
  7032  16C5  0873               	movf	UART_Write@data,w
  7033  16C6  1283               	bcf	3,5	;RP0=0, select bank0
  7034  16C7  1303               	bcf	3,6	;RP1=0, select bank0
  7035  16C8  0099               	movwf	25	;volatile
  7036  16C9  0008               	return
  7037  16CA                     __end_of_UART_Write:	
  7038                           
  7039                           	psect	text33
  7040  168C                     __ptext33:	
  7041 ;; *************** function _UART_TX_Empty *****************
  7042 ;; Defined at:
  7043 ;;		line 31 in file "./UART.h"
  7044 ;; Parameters:    Size  Location     Type
  7045 ;;		None
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;		None
  7048 ;; Return value:  Size  Location     Type
  7049 ;;                  1    wreg      unsigned char 
  7050 ;; Registers used:
  7051 ;;		wreg
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7057 ;;      Params:         0       0       0       0       0
  7058 ;;      Locals:         0       0       0       0       0
  7059 ;;      Temps:          0       0       0       0       0
  7060 ;;      Totals:         0       0       0       0       0
  7061 ;;Total ram usage:        0 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; Hardware stack levels required when called:    1
  7064 ;; This function calls:
  7065 ;;		Nothing
  7066 ;; This function is called by:
  7067 ;;		_main
  7068 ;; This function uses a non-reentrant model
  7069 ;;
  7070                           
  7071                           
  7072                           ;psect for function _UART_TX_Empty
  7073  168C                     _UART_TX_Empty:	
  7074                           
  7075                           ;./UART.h: 33:   return TRMT;
  7076                           
  7077                           ;incstack = 0
  7078                           ; Regs used in _UART_TX_Empty: [wreg]
  7079  168C  3000               	movlw	0
  7080  168D  1683               	bsf	3,5	;RP0=1, select bank1
  7081  168E  1303               	bcf	3,6	;RP1=0, select bank1
  7082  168F  1898               	btfsc	24,1	;volatile
  7083  1690  3001               	movlw	1
  7084  1691  0008               	return
  7085  1692                     __end_of_UART_TX_Empty:	
  7086                           
  7087                           	psect	text34
  7088  09DB                     __ptext34:	
  7089 ;; *************** function _Lcd_Write_String *****************
  7090 ;; Defined at:
  7091 ;;		line 100 in file "./LCD4bits.h"
  7092 ;; Parameters:    Size  Location     Type
  7093 ;;  a               2    0[BANK0 ] PTR unsigned char 
  7094 ;;		 -> NULL(0), STR_29(13), STR_28(6), STR_27(13), 
  7095 ;;		 -> STR_26(12), STR_25(10), STR_24(6), STR_23(7), 
  7096 ;;		 -> STR_22(7), STR_21(7), STR_20(8), STR_19(8), 
  7097 ;;		 -> STR_18(9), STR_17(9), STR_16(9), STR_15(9), 
  7098 ;;		 -> STR_14(12), STR_13(12), STR_9(10), STR_8(10), 
  7099 ;;		 -> STR_7(10), STR_6(10), STR_5(10), STR_4(10), 
  7100 ;;		 -> STR_3(10), STR_2(10), time(6), temp(6), 
  7101 ;;		 -> STR_1(31), 
  7102 ;; Auto vars:     Size  Location     Type
  7103 ;;  i               2    5[BANK0 ] int 
  7104 ;; Return value:  Size  Location     Type
  7105 ;;                  1    wreg      void 
  7106 ;; Registers used:
  7107 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7108 ;; Tracked objects:
  7109 ;;		On entry : 0/0
  7110 ;;		On exit  : 0/0
  7111 ;;		Unchanged: 0/0
  7112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7113 ;;      Params:         0       2       0       0       0
  7114 ;;      Locals:         0       2       0       0       0
  7115 ;;      Temps:          0       3       0       0       0
  7116 ;;      Totals:         0       7       0       0       0
  7117 ;;Total ram usage:        7 bytes
  7118 ;; Hardware stack levels used:    1
  7119 ;; Hardware stack levels required when called:    3
  7120 ;; This function calls:
  7121 ;;		_Lcd_Write_Char
  7122 ;; This function is called by:
  7123 ;;		_main
  7124 ;; This function uses a non-reentrant model
  7125 ;;
  7126                           
  7127                           
  7128                           ;psect for function _Lcd_Write_String
  7129  09DB                     _Lcd_Write_String:	
  7130                           
  7131                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  7132                           
  7133                           ;incstack = 0
  7134                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7135  09DB  1283               	bcf	3,5	;RP0=0, select bank0
  7136  09DC  1303               	bcf	3,6	;RP1=0, select bank0
  7137  09DD  01CC               	clrf	Lcd_Write_String@i
  7138  09DE  01CD               	clrf	Lcd_Write_String@i+1
  7139  09DF                     l3764:	
  7140  09DF  084C               	movf	Lcd_Write_String@i,w
  7141  09E0  0747               	addwf	Lcd_Write_String@a,w
  7142  09E1  00CA               	movwf	??_Lcd_Write_String+1
  7143  09E2  0848               	movf	Lcd_Write_String@a+1,w
  7144  09E3  00C9               	movwf	??_Lcd_Write_String
  7145  09E4  1803               	skipnc
  7146  09E5  0AC9               	incf	??_Lcd_Write_String,f
  7147  09E6  1BCC               	btfsc	Lcd_Write_String@i,7
  7148  09E7  03C9               	decf	??_Lcd_Write_String,f
  7149  09E8  1283               	bcf	3,5	;RP0=0, select bank0
  7150  09E9  1303               	bcf	3,6	;RP1=0, select bank0
  7151  09EA  0849               	movf	??_Lcd_Write_String,w
  7152  09EB  00CB               	movwf	??_Lcd_Write_String+2
  7153  09EC  084B               	movf	??_Lcd_Write_String+2,w
  7154  09ED  00FF               	movwf	127
  7155  09EE  084A               	movf	??_Lcd_Write_String+1,w
  7156  09EF  0084               	movwf	4
  7157  09F0  120A  118A  2700  120A  158A  	fcall	stringtab
  7158  09F5  3A00               	xorlw	0
  7159  09F6  1903               	btfsc	3,2
  7160  09F7  0008               	return
  7161                           
  7162                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  7163  09F8  084C               	movf	Lcd_Write_String@i,w
  7164  09F9  0747               	addwf	Lcd_Write_String@a,w
  7165  09FA  00CA               	movwf	??_Lcd_Write_String+1
  7166  09FB  0848               	movf	Lcd_Write_String@a+1,w
  7167  09FC  00C9               	movwf	??_Lcd_Write_String
  7168  09FD  1803               	skipnc
  7169  09FE  0AC9               	incf	??_Lcd_Write_String,f
  7170  09FF  1BCC               	btfsc	Lcd_Write_String@i,7
  7171  0A00  03C9               	decf	??_Lcd_Write_String,f
  7172  0A01  1283               	bcf	3,5	;RP0=0, select bank0
  7173  0A02  1303               	bcf	3,6	;RP1=0, select bank0
  7174  0A03  0849               	movf	??_Lcd_Write_String,w
  7175  0A04  00CB               	movwf	??_Lcd_Write_String+2
  7176  0A05  084B               	movf	??_Lcd_Write_String+2,w
  7177  0A06  00FF               	movwf	127
  7178  0A07  084A               	movf	??_Lcd_Write_String+1,w
  7179  0A08  0084               	movwf	4
  7180  0A09  120A  118A  2700  120A  158A  	fcall	stringtab
  7181  0A0E  120A  158A  212A  120A  158A  	fcall	_Lcd_Write_Char
  7182  0A13  3001               	movlw	1
  7183  0A14  1283               	bcf	3,5	;RP0=0, select bank0
  7184  0A15  1303               	bcf	3,6	;RP1=0, select bank0
  7185  0A16  07CC               	addwf	Lcd_Write_String@i,f
  7186  0A17  1803               	skipnc
  7187  0A18  0ACD               	incf	Lcd_Write_String@i+1,f
  7188  0A19  3000               	movlw	0
  7189  0A1A  07CD               	addwf	Lcd_Write_String@i+1,f
  7190  0A1B  29DF               	goto	l3764
  7191  0A1C                     __end_of_Lcd_Write_String:	
  7192                           
  7193                           	psect	text35
  7194  092A                     __ptext35:	
  7195 ;; *************** function _Lcd_Write_Char *****************
  7196 ;; Defined at:
  7197 ;;		line 84 in file "./LCD4bits.h"
  7198 ;; Parameters:    Size  Location     Type
  7199 ;;  a               1    wreg     unsigned char 
  7200 ;; Auto vars:     Size  Location     Type
  7201 ;;  a               1    7[COMMON] unsigned char 
  7202 ;;  y               1    6[COMMON] unsigned char 
  7203 ;;  temp            1    5[COMMON] unsigned char 
  7204 ;; Return value:  Size  Location     Type
  7205 ;;                  1    wreg      void 
  7206 ;; Registers used:
  7207 ;;		wreg, status,2, status,0, pclath, cstack
  7208 ;; Tracked objects:
  7209 ;;		On entry : 0/0
  7210 ;;		On exit  : 0/0
  7211 ;;		Unchanged: 0/0
  7212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7213 ;;      Params:         0       0       0       0       0
  7214 ;;      Locals:         3       0       0       0       0
  7215 ;;      Temps:          1       0       0       0       0
  7216 ;;      Totals:         4       0       0       0       0
  7217 ;;Total ram usage:        4 bytes
  7218 ;; Hardware stack levels used:    1
  7219 ;; Hardware stack levels required when called:    2
  7220 ;; This function calls:
  7221 ;;		_Lcd_Port
  7222 ;; This function is called by:
  7223 ;;		_Lcd_Write_String
  7224 ;;		_main
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           
  7229                           ;psect for function _Lcd_Write_Char
  7230  092A                     _Lcd_Write_Char:	
  7231                           
  7232                           ;incstack = 0
  7233                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  7234                           ;Lcd_Write_Char@a stored from wreg
  7235  092A  00F7               	movwf	Lcd_Write_Char@a
  7236                           
  7237                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  7238  092B  0877               	movf	Lcd_Write_Char@a,w
  7239  092C  390F               	andlw	15
  7240  092D  00F4               	movwf	??_Lcd_Write_Char
  7241  092E  0874               	movf	??_Lcd_Write_Char,w
  7242  092F  00F5               	movwf	Lcd_Write_Char@temp
  7243                           
  7244                           ;./LCD4bits.h: 88:    y = a&0xF0;
  7245  0930  0877               	movf	Lcd_Write_Char@a,w
  7246  0931  39F0               	andlw	240
  7247  0932  00F4               	movwf	??_Lcd_Write_Char
  7248  0933  0874               	movf	??_Lcd_Write_Char,w
  7249  0934  00F6               	movwf	Lcd_Write_Char@y
  7250                           
  7251                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  7252  0935  1283               	bcf	3,5	;RP0=0, select bank0
  7253  0936  1303               	bcf	3,6	;RP1=0, select bank0
  7254  0937  1606               	bsf	6,4	;volatile
  7255                           
  7256                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  7257  0938  0876               	movf	Lcd_Write_Char@y,w
  7258  0939  00F4               	movwf	??_Lcd_Write_Char
  7259  093A  3004               	movlw	4
  7260  093B                     u2125:	
  7261  093B  1003               	clrc
  7262  093C  0CF4               	rrf	??_Lcd_Write_Char,f
  7263  093D  3EFF               	addlw	-1
  7264  093E  1D03               	skipz
  7265  093F  293B               	goto	u2125
  7266  0940  0874               	movf	??_Lcd_Write_Char,w
  7267  0941  160A  118A  26EB  120A  158A  	fcall	_Lcd_Port
  7268                           
  7269                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  7270  0946  1283               	bcf	3,5	;RP0=0, select bank0
  7271  0947  1303               	bcf	3,6	;RP1=0, select bank0
  7272  0948  1686               	bsf	6,5	;volatile
  7273                           
  7274                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  7275  0949  301A               	movlw	26
  7276  094A  00F4               	movwf	??_Lcd_Write_Char
  7277  094B                     u5047:	
  7278  094B  0BF4               	decfsz	??_Lcd_Write_Char,f
  7279  094C  294B               	goto	u5047
  7280  094D  0000               	nop
  7281                           
  7282                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  7283  094E  1283               	bcf	3,5	;RP0=0, select bank0
  7284  094F  1303               	bcf	3,6	;RP1=0, select bank0
  7285  0950  1286               	bcf	6,5	;volatile
  7286                           
  7287                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  7288  0951  0875               	movf	Lcd_Write_Char@temp,w
  7289  0952  160A  118A  26EB  120A  158A  	fcall	_Lcd_Port
  7290                           
  7291                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  7292  0957  1283               	bcf	3,5	;RP0=0, select bank0
  7293  0958  1303               	bcf	3,6	;RP1=0, select bank0
  7294  0959  1686               	bsf	6,5	;volatile
  7295                           
  7296                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  7297  095A  301A               	movlw	26
  7298  095B  00F4               	movwf	??_Lcd_Write_Char
  7299  095C                     u5057:	
  7300  095C  0BF4               	decfsz	??_Lcd_Write_Char,f
  7301  095D  295C               	goto	u5057
  7302  095E  0000               	nop
  7303                           
  7304                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  7305  095F  1283               	bcf	3,5	;RP0=0, select bank0
  7306  0960  1303               	bcf	3,6	;RP1=0, select bank0
  7307  0961  1286               	bcf	6,5	;volatile
  7308  0962  0008               	return
  7309  0963                     __end_of_Lcd_Write_Char:	
  7310                           
  7311                           	psect	text36
  7312  16E0                     __ptext36:	
  7313 ;; *************** function _Lcd_Shift_Right *****************
  7314 ;; Defined at:
  7315 ;;		line 107 in file "./LCD4bits.h"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;		None
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;		None
  7320 ;; Return value:  Size  Location     Type
  7321 ;;                  1    wreg      void 
  7322 ;; Registers used:
  7323 ;;		wreg, status,2, status,0, pclath, cstack
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 0/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7329 ;;      Params:         0       0       0       0       0
  7330 ;;      Locals:         0       0       0       0       0
  7331 ;;      Temps:          0       0       0       0       0
  7332 ;;      Totals:         0       0       0       0       0
  7333 ;;Total ram usage:        0 bytes
  7334 ;; Hardware stack levels used:    1
  7335 ;; Hardware stack levels required when called:    3
  7336 ;; This function calls:
  7337 ;;		_Lcd_Cmd
  7338 ;; This function is called by:
  7339 ;;		_main
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           
  7344                           ;psect for function _Lcd_Shift_Right
  7345  16E0                     _Lcd_Shift_Right:	
  7346                           
  7347                           ;./LCD4bits.h: 109:  Lcd_Cmd(0x01);
  7348                           
  7349                           ;incstack = 0
  7350                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
  7351  16E0  3001               	movlw	1
  7352  16E1  160A  118A  2705  160A  118A  	fcall	_Lcd_Cmd
  7353                           
  7354                           ;./LCD4bits.h: 110:  Lcd_Cmd(0x0C);
  7355  16E6  300C               	movlw	12
  7356  16E7  160A  118A  2705   	fcall	_Lcd_Cmd
  7357  16EA  0008               	return
  7358  16EB                     __end_of_Lcd_Shift_Right:	
  7359                           
  7360                           	psect	text37
  7361  16D5                     __ptext37:	
  7362 ;; *************** function _Lcd_Shift_Left *****************
  7363 ;; Defined at:
  7364 ;;		line 113 in file "./LCD4bits.h"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;		None
  7367 ;; Auto vars:     Size  Location     Type
  7368 ;;		None
  7369 ;; Return value:  Size  Location     Type
  7370 ;;                  1    wreg      void 
  7371 ;; Registers used:
  7372 ;;		wreg, status,2, status,0, pclath, cstack
  7373 ;; Tracked objects:
  7374 ;;		On entry : 0/0
  7375 ;;		On exit  : 0/0
  7376 ;;		Unchanged: 0/0
  7377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7378 ;;      Params:         0       0       0       0       0
  7379 ;;      Locals:         0       0       0       0       0
  7380 ;;      Temps:          0       0       0       0       0
  7381 ;;      Totals:         0       0       0       0       0
  7382 ;;Total ram usage:        0 bytes
  7383 ;; Hardware stack levels used:    1
  7384 ;; Hardware stack levels required when called:    3
  7385 ;; This function calls:
  7386 ;;		_Lcd_Cmd
  7387 ;; This function is called by:
  7388 ;;		_main
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           
  7393                           ;psect for function _Lcd_Shift_Left
  7394  16D5                     _Lcd_Shift_Left:	
  7395                           
  7396                           ;./LCD4bits.h: 115:  Lcd_Cmd(0x01);
  7397                           
  7398                           ;incstack = 0
  7399                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  7400  16D5  3001               	movlw	1
  7401  16D6  160A  118A  2705  160A  118A  	fcall	_Lcd_Cmd
  7402                           
  7403                           ;./LCD4bits.h: 116:  Lcd_Cmd(0x08);
  7404  16DB  3008               	movlw	8
  7405  16DC  160A  118A  2705   	fcall	_Lcd_Cmd
  7406  16DF  0008               	return
  7407  16E0                     __end_of_Lcd_Shift_Left:	
  7408                           
  7409                           	psect	text38
  7410  0A62                     __ptext38:	
  7411 ;; *************** function _Lcd_Set_Cursor *****************
  7412 ;; Defined at:
  7413 ;;		line 44 in file "./LCD4bits.h"
  7414 ;; Parameters:    Size  Location     Type
  7415 ;;  a               1    wreg     unsigned char 
  7416 ;;  b               1    7[COMMON] unsigned char 
  7417 ;; Auto vars:     Size  Location     Type
  7418 ;;  a               1    2[BANK0 ] unsigned char 
  7419 ;;  temp            1    5[BANK0 ] unsigned char 
  7420 ;;  y               1    4[BANK0 ] unsigned char 
  7421 ;;  z               1    3[BANK0 ] unsigned char 
  7422 ;; Return value:  Size  Location     Type
  7423 ;;                  1    wreg      void 
  7424 ;; Registers used:
  7425 ;;		wreg, status,2, status,0, pclath, cstack
  7426 ;; Tracked objects:
  7427 ;;		On entry : 0/0
  7428 ;;		On exit  : 0/0
  7429 ;;		Unchanged: 0/0
  7430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7431 ;;      Params:         1       0       0       0       0
  7432 ;;      Locals:         0       4       0       0       0
  7433 ;;      Temps:          0       2       0       0       0
  7434 ;;      Totals:         1       6       0       0       0
  7435 ;;Total ram usage:        7 bytes
  7436 ;; Hardware stack levels used:    1
  7437 ;; Hardware stack levels required when called:    3
  7438 ;; This function calls:
  7439 ;;		_Lcd_Cmd
  7440 ;; This function is called by:
  7441 ;;		_main
  7442 ;; This function uses a non-reentrant model
  7443 ;;
  7444                           
  7445                           
  7446                           ;psect for function _Lcd_Set_Cursor
  7447  0A62                     _Lcd_Set_Cursor:	
  7448                           
  7449                           ;incstack = 0
  7450                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  7451                           ;Lcd_Set_Cursor@a stored from wreg
  7452  0A62  1283               	bcf	3,5	;RP0=0, select bank0
  7453  0A63  1303               	bcf	3,6	;RP1=0, select bank0
  7454  0A64  00C9               	movwf	Lcd_Set_Cursor@a
  7455                           
  7456                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  7457  0A65  0349               	decf	Lcd_Set_Cursor@a,w
  7458  0A66  1D03               	btfss	3,2
  7459  0A67  2A8B               	goto	l3748
  7460                           
  7461                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  7462  0A68  0877               	movf	Lcd_Set_Cursor@b,w
  7463  0A69  3E7F               	addlw	127
  7464  0A6A  00C7               	movwf	??_Lcd_Set_Cursor
  7465  0A6B  0847               	movf	??_Lcd_Set_Cursor,w
  7466  0A6C  00CC               	movwf	Lcd_Set_Cursor@temp
  7467                           
  7468                           ;./LCD4bits.h: 50:   z = temp>>4;
  7469  0A6D  084C               	movf	Lcd_Set_Cursor@temp,w
  7470  0A6E  00C7               	movwf	??_Lcd_Set_Cursor
  7471  0A6F  3004               	movlw	4
  7472  0A70                     u3895:	
  7473  0A70  1003               	clrc
  7474  0A71  0CC7               	rrf	??_Lcd_Set_Cursor,f
  7475  0A72  3EFF               	addlw	-1
  7476  0A73  1D03               	skipz
  7477  0A74  2A70               	goto	u3895
  7478  0A75  0847               	movf	??_Lcd_Set_Cursor,w
  7479  0A76  00C8               	movwf	??_Lcd_Set_Cursor+1
  7480  0A77  0848               	movf	??_Lcd_Set_Cursor+1,w
  7481  0A78  00CA               	movwf	Lcd_Set_Cursor@z
  7482                           
  7483                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  7484  0A79  084C               	movf	Lcd_Set_Cursor@temp,w
  7485  0A7A  390F               	andlw	15
  7486  0A7B  00C7               	movwf	??_Lcd_Set_Cursor
  7487  0A7C  0847               	movf	??_Lcd_Set_Cursor,w
  7488  0A7D  00CB               	movwf	Lcd_Set_Cursor@y
  7489                           
  7490                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  7491  0A7E  084A               	movf	Lcd_Set_Cursor@z,w
  7492  0A7F  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  7493                           
  7494                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  7495  0A84  1283               	bcf	3,5	;RP0=0, select bank0
  7496  0A85  1303               	bcf	3,6	;RP1=0, select bank0
  7497  0A86  084B               	movf	Lcd_Set_Cursor@y,w
  7498  0A87  160A  118A  2705   	fcall	_Lcd_Cmd
  7499                           
  7500                           ;./LCD4bits.h: 54:  }
  7501  0A8A  0008               	return
  7502  0A8B                     l3748:	
  7503  0A8B  3002               	movlw	2
  7504  0A8C  0649               	xorwf	Lcd_Set_Cursor@a,w
  7505  0A8D  1D03               	btfss	3,2
  7506  0A8E  0008               	return
  7507                           
  7508                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  7509  0A8F  0877               	movf	Lcd_Set_Cursor@b,w
  7510  0A90  3EBF               	addlw	191
  7511  0A91  00C7               	movwf	??_Lcd_Set_Cursor
  7512  0A92  0847               	movf	??_Lcd_Set_Cursor,w
  7513  0A93  00CC               	movwf	Lcd_Set_Cursor@temp
  7514                           
  7515                           ;./LCD4bits.h: 58:   z = temp>>4;
  7516  0A94  084C               	movf	Lcd_Set_Cursor@temp,w
  7517  0A95  00C7               	movwf	??_Lcd_Set_Cursor
  7518  0A96  3004               	movlw	4
  7519  0A97                     u3915:	
  7520  0A97  1003               	clrc
  7521  0A98  0CC7               	rrf	??_Lcd_Set_Cursor,f
  7522  0A99  3EFF               	addlw	-1
  7523  0A9A  1D03               	skipz
  7524  0A9B  2A97               	goto	u3915
  7525  0A9C  0847               	movf	??_Lcd_Set_Cursor,w
  7526  0A9D  00C8               	movwf	??_Lcd_Set_Cursor+1
  7527  0A9E  0848               	movf	??_Lcd_Set_Cursor+1,w
  7528  0A9F  00CA               	movwf	Lcd_Set_Cursor@z
  7529                           
  7530                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  7531  0AA0  084C               	movf	Lcd_Set_Cursor@temp,w
  7532  0AA1  390F               	andlw	15
  7533  0AA2  00C7               	movwf	??_Lcd_Set_Cursor
  7534  0AA3  0847               	movf	??_Lcd_Set_Cursor,w
  7535  0AA4  00CB               	movwf	Lcd_Set_Cursor@y
  7536                           
  7537                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  7538  0AA5  084A               	movf	Lcd_Set_Cursor@z,w
  7539  0AA6  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  7540                           
  7541                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  7542  0AAB  1283               	bcf	3,5	;RP0=0, select bank0
  7543  0AAC  1303               	bcf	3,6	;RP1=0, select bank0
  7544  0AAD  084B               	movf	Lcd_Set_Cursor@y,w
  7545  0AAE  160A  118A  2705   	fcall	_Lcd_Cmd
  7546  0AB1  0008               	return
  7547  0AB2                     __end_of_Lcd_Set_Cursor:	
  7548                           
  7549                           	psect	text39
  7550  16CA                     __ptext39:	
  7551 ;; *************** function _Lcd_Clear *****************
  7552 ;; Defined at:
  7553 ;;		line 38 in file "./LCD4bits.h"
  7554 ;; Parameters:    Size  Location     Type
  7555 ;;		None
  7556 ;; Auto vars:     Size  Location     Type
  7557 ;;		None
  7558 ;; Return value:  Size  Location     Type
  7559 ;;                  1    wreg      void 
  7560 ;; Registers used:
  7561 ;;		wreg, status,2, status,0, pclath, cstack
  7562 ;; Tracked objects:
  7563 ;;		On entry : 0/0
  7564 ;;		On exit  : 0/0
  7565 ;;		Unchanged: 0/0
  7566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7567 ;;      Params:         0       0       0       0       0
  7568 ;;      Locals:         0       0       0       0       0
  7569 ;;      Temps:          0       0       0       0       0
  7570 ;;      Totals:         0       0       0       0       0
  7571 ;;Total ram usage:        0 bytes
  7572 ;; Hardware stack levels used:    1
  7573 ;; Hardware stack levels required when called:    3
  7574 ;; This function calls:
  7575 ;;		_Lcd_Cmd
  7576 ;; This function is called by:
  7577 ;;		_main
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           
  7582                           ;psect for function _Lcd_Clear
  7583  16CA                     _Lcd_Clear:	
  7584                           
  7585                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  7586                           
  7587                           ;incstack = 0
  7588                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  7589  16CA  3000               	movlw	0
  7590  16CB  160A  118A  2705  160A  118A  	fcall	_Lcd_Cmd
  7591                           
  7592                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  7593  16D0  3001               	movlw	1
  7594  16D1  160A  118A  2705   	fcall	_Lcd_Cmd
  7595  16D4  0008               	return
  7596  16D5                     __end_of_Lcd_Clear:	
  7597                           
  7598                           	psect	text40
  7599  1705                     __ptext40:	
  7600 ;; *************** function _Lcd_Cmd *****************
  7601 ;; Defined at:
  7602 ;;		line 29 in file "./LCD4bits.h"
  7603 ;; Parameters:    Size  Location     Type
  7604 ;;  a               1    wreg     unsigned char 
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;  a               1    6[COMMON] unsigned char 
  7607 ;; Return value:  Size  Location     Type
  7608 ;;                  1    wreg      void 
  7609 ;; Registers used:
  7610 ;;		wreg, status,2, status,0, pclath, cstack
  7611 ;; Tracked objects:
  7612 ;;		On entry : 0/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7616 ;;      Params:         0       0       0       0       0
  7617 ;;      Locals:         1       0       0       0       0
  7618 ;;      Temps:          2       0       0       0       0
  7619 ;;      Totals:         3       0       0       0       0
  7620 ;;Total ram usage:        3 bytes
  7621 ;; Hardware stack levels used:    1
  7622 ;; Hardware stack levels required when called:    2
  7623 ;; This function calls:
  7624 ;;		_Lcd_Port
  7625 ;; This function is called by:
  7626 ;;		_Lcd_Clear
  7627 ;;		_Lcd_Set_Cursor
  7628 ;;		_Lcd_Init
  7629 ;;		_Lcd_Shift_Right
  7630 ;;		_Lcd_Shift_Left
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634                           
  7635                           ;psect for function _Lcd_Cmd
  7636  1705                     _Lcd_Cmd:	
  7637                           
  7638                           ;incstack = 0
  7639                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  7640                           ;Lcd_Cmd@a stored from wreg
  7641  1705  00F6               	movwf	Lcd_Cmd@a
  7642                           
  7643                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  7644  1706  1283               	bcf	3,5	;RP0=0, select bank0
  7645  1707  1303               	bcf	3,6	;RP1=0, select bank0
  7646  1708  1206               	bcf	6,4	;volatile
  7647                           
  7648                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  7649  1709  0876               	movf	Lcd_Cmd@a,w
  7650  170A  160A  118A  26EB  160A  118A  	fcall	_Lcd_Port
  7651                           
  7652                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  7653  170F  1283               	bcf	3,5	;RP0=0, select bank0
  7654  1710  1303               	bcf	3,6	;RP1=0, select bank0
  7655  1711  1686               	bsf	6,5	;volatile
  7656                           
  7657                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  7658  1712  300B               	movlw	11
  7659  1713  00F5               	movwf	??_Lcd_Cmd+1
  7660  1714  3062               	movlw	98
  7661  1715  00F4               	movwf	??_Lcd_Cmd
  7662  1716                     u5067:	
  7663  1716  0BF4               	decfsz	??_Lcd_Cmd,f
  7664  1717  2F16               	goto	u5067
  7665  1718  0BF5               	decfsz	??_Lcd_Cmd+1,f
  7666  1719  2F16               	goto	u5067
  7667  171A  0000               	nop
  7668                           
  7669                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  7670  171B  1283               	bcf	3,5	;RP0=0, select bank0
  7671  171C  1303               	bcf	3,6	;RP1=0, select bank0
  7672  171D  1286               	bcf	6,5	;volatile
  7673  171E  0008               	return
  7674  171F                     __end_of_Lcd_Cmd:	
  7675                           
  7676                           	psect	text41
  7677  16EB                     __ptext41:	
  7678 ;; *************** function _Lcd_Port *****************
  7679 ;; Defined at:
  7680 ;;		line 7 in file "./LCD4bits.h"
  7681 ;; Parameters:    Size  Location     Type
  7682 ;;  a               1    wreg     unsigned char 
  7683 ;; Auto vars:     Size  Location     Type
  7684 ;;  a               1    3[COMMON] unsigned char 
  7685 ;; Return value:  Size  Location     Type
  7686 ;;                  1    wreg      void 
  7687 ;; Registers used:
  7688 ;;		wreg
  7689 ;; Tracked objects:
  7690 ;;		On entry : 0/0
  7691 ;;		On exit  : 0/0
  7692 ;;		Unchanged: 0/0
  7693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7694 ;;      Params:         0       0       0       0       0
  7695 ;;      Locals:         1       0       0       0       0
  7696 ;;      Temps:          0       0       0       0       0
  7697 ;;      Totals:         1       0       0       0       0
  7698 ;;Total ram usage:        1 bytes
  7699 ;; Hardware stack levels used:    1
  7700 ;; Hardware stack levels required when called:    1
  7701 ;; This function calls:
  7702 ;;		Nothing
  7703 ;; This function is called by:
  7704 ;;		_Lcd_Cmd
  7705 ;;		_Lcd_Init
  7706 ;;		_Lcd_Write_Char
  7707 ;; This function uses a non-reentrant model
  7708 ;;
  7709                           
  7710                           
  7711                           ;psect for function _Lcd_Port
  7712  16EB                     _Lcd_Port:	
  7713                           
  7714                           ;incstack = 0
  7715                           ; Regs used in _Lcd_Port: [wreg]
  7716                           ;Lcd_Port@a stored from wreg
  7717  16EB  00F3               	movwf	Lcd_Port@a
  7718                           
  7719                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  7720  16EC  1C73               	btfss	Lcd_Port@a,0
  7721  16ED  2EF2               	goto	l160
  7722                           
  7723                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  7724  16EE  1283               	bcf	3,5	;RP0=0, select bank0
  7725  16EF  1303               	bcf	3,6	;RP1=0, select bank0
  7726  16F0  1406               	bsf	6,0	;volatile
  7727  16F1  2EF5               	goto	l161
  7728  16F2                     l160:	
  7729                           ;./LCD4bits.h: 11:  else
  7730                           
  7731                           
  7732                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  7733  16F2  1283               	bcf	3,5	;RP0=0, select bank0
  7734  16F3  1303               	bcf	3,6	;RP1=0, select bank0
  7735  16F4  1006               	bcf	6,0	;volatile
  7736  16F5                     l161:	
  7737                           
  7738                           ;./LCD4bits.h: 14:  if(a & 2)
  7739  16F5  1CF3               	btfss	Lcd_Port@a,1
  7740  16F6  2EF9               	goto	l162
  7741                           
  7742                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  7743  16F7  1486               	bsf	6,1	;volatile
  7744  16F8  2EFA               	goto	l163
  7745  16F9                     l162:	
  7746                           ;./LCD4bits.h: 16:  else
  7747                           
  7748                           
  7749                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  7750  16F9  1086               	bcf	6,1	;volatile
  7751  16FA                     l163:	
  7752                           
  7753                           ;./LCD4bits.h: 19:  if(a & 4)
  7754  16FA  1D73               	btfss	Lcd_Port@a,2
  7755  16FB  2EFE               	goto	l164
  7756                           
  7757                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  7758  16FC  1506               	bsf	6,2	;volatile
  7759  16FD  2EFF               	goto	l165
  7760  16FE                     l164:	
  7761                           ;./LCD4bits.h: 21:  else
  7762                           
  7763                           
  7764                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  7765  16FE  1106               	bcf	6,2	;volatile
  7766  16FF                     l165:	
  7767                           
  7768                           ;./LCD4bits.h: 24:  if(a & 8)
  7769  16FF  1DF3               	btfss	Lcd_Port@a,3
  7770  1700  2F03               	goto	l166
  7771                           
  7772                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  7773  1701  1586               	bsf	6,3	;volatile
  7774  1702  0008               	return
  7775  1703                     l166:	
  7776                           ;./LCD4bits.h: 26:  else
  7777                           
  7778                           
  7779                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  7780  1703  1186               	bcf	6,3	;volatile
  7781  1704  0008               	return
  7782  1705                     __end_of_Lcd_Port:	
  7783                           
  7784                           	psect	text42
  7785  1755                     __ptext42:	
  7786 ;; *************** function _manual_pwm *****************
  7787 ;; Defined at:
  7788 ;;		line 58 in file "mainMaster.c"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;		None
  7791 ;; Auto vars:     Size  Location     Type
  7792 ;;		None
  7793 ;; Return value:  Size  Location     Type
  7794 ;;                  1    wreg      void 
  7795 ;; Registers used:
  7796 ;;		wreg, status,2, status,0
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 0/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7802 ;;      Params:         0       0       0       0       0
  7803 ;;      Locals:         0       0       0       0       0
  7804 ;;      Temps:          3       0       0       0       0
  7805 ;;      Totals:         3       0       0       0       0
  7806 ;;Total ram usage:        3 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; This function calls:
  7809 ;;		Nothing
  7810 ;; This function is called by:
  7811 ;;		Interrupt level 1
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           
  7816                           ;psect for function _manual_pwm
  7817  1755                     _manual_pwm:	
  7818                           
  7819                           ;mainMaster.c: 59:     if (INTCONbits.T0IF == 1){
  7820  1755  1D0B               	btfss	11,2	;volatile
  7821  1756  2F6D               	goto	i1l313
  7822                           
  7823                           ;mainMaster.c: 61:         cont++;
  7824  1757  3001               	movlw	1
  7825  1758  00F0               	movwf	??_manual_pwm
  7826  1759  0870               	movf	??_manual_pwm,w
  7827  175A  1283               	bcf	3,5	;RP0=0, select bank0
  7828  175B  1303               	bcf	3,6	;RP1=0, select bank0
  7829  175C  07AD               	addwf	_cont,f
  7830                           
  7831                           ;mainMaster.c: 62:             if(cont < 200){
  7832  175D  30C8               	movlw	200
  7833  175E  022D               	subwf	_cont,w
  7834  175F  1803               	skipnc
  7835  1760  2F69               	goto	i1l2960
  7836                           
  7837                           ;mainMaster.c: 63:                 if(cont < val){
  7838  1761  082C               	movf	_val,w
  7839  1762  022D               	subwf	_cont,w
  7840  1763  1803               	skipnc
  7841  1764  2F67               	goto	i1l310
  7842                           
  7843                           ;mainMaster.c: 64:                     PORTAbits.RA1 = 1;
  7844  1765  1485               	bsf	5,1	;volatile
  7845                           
  7846                           ;mainMaster.c: 65:                 }else{
  7847  1766  2F6A               	goto	i1l2962
  7848  1767                     i1l310:	
  7849                           
  7850                           ;mainMaster.c: 66:                     PORTAbits.RA1 = 0;
  7851  1767  1085               	bcf	5,1	;volatile
  7852  1768  2F6A               	goto	i1l2962
  7853  1769                     i1l2960:	
  7854                           
  7855                           ;mainMaster.c: 69:                 cont = 0;
  7856  1769  01AD               	clrf	_cont
  7857  176A                     i1l2962:	
  7858                           
  7859                           ;mainMaster.c: 71:             TMR0 = 56;
  7860  176A  3038               	movlw	56
  7861  176B  0081               	movwf	1	;volatile
  7862                           
  7863                           ;mainMaster.c: 72:             INTCONbits.T0IF = 0;
  7864  176C  110B               	bcf	11,2	;volatile
  7865  176D                     i1l313:	
  7866  176D  0872               	movf	??_manual_pwm+2,w
  7867  176E  008A               	movwf	10
  7868  176F  0E71               	swapf	(??_manual_pwm+1)^(0+4294967168),w
  7869  1770  0083               	movwf	3
  7870  1771  0EFE               	swapf	126,f
  7871  1772  0E7E               	swapf	126,w
  7872  1773  0009               	retfie
  7873  1774                     __end_of_manual_pwm:	
  7874  007E                     btemp	set	126	;btemp
  7875  007E                     wtemp0	set	126
  7876                           
  7877                           	psect	intentry
  7878  0004                     __pintentry:	
  7879                           ;incstack = 0
  7880                           ; Regs used in _manual_pwm: [wreg+status,2+status,0]
  7881                           
  7882  0004                     interrupt_function:	
  7883  007E                     saved_w	set	btemp
  7884  0004  00FE               	movwf	btemp
  7885  0005  0E03               	swapf	3,w
  7886  0006  00F1               	movwf	??_manual_pwm+1
  7887  0007  080A               	movf	10,w
  7888  0008  00F2               	movwf	??_manual_pwm+2
  7889  0009  160A  118A  2F55   	ljmp	_manual_pwm


Data Sizes:
    Strings     271
    Constant    10
    Data        5
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     33      77
    BANK1            80      6       6
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_12(CODE[6]), STR_11(CODE[6]), STR_10(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), temp(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_32(CODE[4]), STR_31(CODE[5]), STR_30(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), temp(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_temp@temp_string	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_time@time_string	PTR unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), 

    day2	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), STR_9(CODE[10]), STR_8(CODE[10]), STR_7(CODE[10]), 
		 -> STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), 
		 -> STR_2(CODE[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), STR_29(CODE[13]), STR_28(CODE[6]), STR_27(CODE[13]), 
		 -> STR_26(CODE[12]), STR_25(CODE[10]), STR_24(CODE[6]), STR_23(CODE[7]), 
		 -> STR_22(CODE[7]), STR_21(CODE[7]), STR_20(CODE[8]), STR_19(CODE[8]), 
		 -> STR_18(CODE[9]), STR_17(CODE[9]), STR_16(CODE[9]), STR_15(CODE[9]), 
		 -> STR_14(CODE[12]), STR_13(CODE[12]), STR_9(CODE[10]), STR_8(CODE[10]), 
		 -> STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), 
		 -> STR_3(CODE[10]), STR_2(CODE[10]), time(BANK0[6]), temp(BANK0[6]), 
		 -> STR_1(CODE[31]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_Char
    _main->___awdiv
    _main->___awmod
    _main->_get_IR
    _main->_get_PIR
    _main->_get_day
    _main->_get_hall
    _main->_get_tripwire
    _main->_strcmp
    _main->_write_RTC
    _write_RTC->_I2C_Master_Write
    _setup->_I2C_Master_Init
    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _open_door->_I2C_Master_Write
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _close_door->_I2C_Master_Write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _manual_pwm in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_UART_Init
    _UART_Init->___aldiv
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _get_temp->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read

Critical Paths under _manual_pwm in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _manual_pwm in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _manual_pwm in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _manual_pwm in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   38856
                                              0 BANK1      6     6      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                     _Lcd_Write_Char
                   _Lcd_Write_String
                      _UART_TX_Empty
                         _UART_Write
                            ___awdiv
                            ___awmod
                             ___bmul
                         _close_door
                             _get_IR
                            _get_PIR
                            _get_day
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                          _open_door
                              _setup
                             _strcmp
                          _write_RTC
 ---------------------------------------------------------------------------------
 (1) _write_RTC                                            5     3      2    2284
                                              5 COMMON     3     1      2
                                              0 BANK0      2     2      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     511
                                              3 COMMON     5     3      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1880
                    _I2C_Master_Init
                           _Lcd_Init
                          _UART_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4    1118
                                              4 COMMON     2     2      0
                                             14 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     805
                                              3 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              0 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     542
                                              4 COMMON     4     4      0
                                             13 BANK0      4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     421
                                              3 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _open_door                                            0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                             5     5      0    3238
                                              2 BANK0      5     5      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             9     9      0    5666
                                             24 BANK0      9     9      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    19      4    1806
                                              9 BANK0     15    11      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     320
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     875
                                              3 COMMON     4     2      2
                                              0 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _close_door                                           0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2011
                                              3 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     793
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     604
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Empty                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    2378
                                              0 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              4 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    2030
                                              7 COMMON     1     0      1
                                              0 BANK0      6     6      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              4 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _manual_pwm                                           3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_TX_Empty
   _UART_Write
   ___awdiv
   ___awmod
   ___bmul
   _close_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_day
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _open_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
     _initOscilador
   _strcmp
   _write_RTC
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _manual_pwm (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      6       6       7        7.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     21      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5E      12        0.0%
ABS                  0      0      5E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Mar 09 21:54:33 2019

                                _i 0036                                  _j 0035  
                                _k 0078                                  pc 0002  
                   ___bmul@product 0075                        __CFG_CP$OFF 0000  
                      get_hall@key 0049                                 _IR 0037  
                     ___awdiv@sign 0048                                 fsr 0004  
                              l203 0B05                                l134 16B7  
                              l160 16F2                                l152 0883  
                              l400 049C                                l161 16F5  
                              l153 0886                                l162 16F9  
                              l163 16FA                                l411 0595  
                              l403 04AC                                l323 013E  
                              l164 16FE                                l420 05ED  
                              l165 16FF                                l166 1703  
                              l238 16C1                                l414 05B1  
                              l431 069B                                l423 060B  
                              l360 02AF                                l328 011F  
                              l417 05CF                                l337 0150  
                              l338 0161                                l429 062E  
                              l375 030D                                l394 047C  
                              l397 048C                                l654 0D18  
                              _GIE 005F                       __CFG_CPD$OFF 0000  
                              _PIR 0038                      ?_get_tripwire 0070  
                              _min 002A                                _val 002C  
                              fsr0 0004                                indf 0000  
                     ___awmod@sign 0048                       __CFG_LVP$OFF 0000  
                             l4120 0250                               l4112 0238  
                             l4104 022F                               l4024 0112  
                             l4040 0140                               l2450 08E2  
                             l4130 026E                               l4122 0256  
                             l4026 0122                               l2444 08C6  
                             l2540 0AC5                               l4212 03B1  
                             l4204 038C                               l4140 02B2  
                             l4124 025C                               l4116 0244  
                             l4036 0131                               l2446 08D4  
                             l2454 08ED                               l2550 0ADE  
                             l2542 0ACB                               l2534 0AB4  
                             l4230 03F0                               l4222 03D0  
                             l4214 03BB                               l4126 0262  
                             l4118 024A                               l4134 0275  
                             l4070 0173                               l3512 0BCF  
                             l2544 0AD1                               l2536 0AB9  
                             l4232 03FA                               l4128 0268  
                             l4136 0296                               l4064 016E  
                             l4056 0163                               l3522 0C07  
                             l3514 0BDF                               l2546 0AD7  
                             l2538 0ABF                               l2554 0AE3  
                             l4146 02DE                               l4066 016F  
                             l2900 0B5D                               l2660 082D  
                             l3700 0F7A                               l2652 0841  
                             l3540 0D29                               l2548 0ADE  
                             l4252 04BA                               l4172 0300  
                             l4156 02E3                               l4148 02C8  
                             l4068 0172                               l2654 084C  
                             l3526 0C14                               l3550 0D49  
                             l4174 0310                               l2664 0833  
                             l3712 0FA1                               l2656 0854  
                             l4176 0311                               l3706 0F7C  
                             l3730 0FFB                               l3562 0D7E  
                             l3580 09A7                               l3548 0D39  
                             l4356 0629                               l4284 0550  
                             l4196 0372                               l4188 035E  
                             l3582 09B5                               l3726 0FB4  
                             l3718 0FB0                               l3566 0D8C  
                             l3558 0D71                               l3902 08A1  
                             l4278 04C9                               l3920 06BE  
                             l3592 09D6                               l3728 0F19  
                             l3904 0892                               l4384 0672  
                             l2874 0B1E                               l3690 0F63  
                             l4490 0F58                               l3658 0EF8  
                             l3906 08B8                               l4394 0687  
                             l3748 0A8B                               l3764 09DF  
                             l2892 0B4A                               l2884 0B26  
                             l2868 0B13                               l3932 06CB  
                             l3924 06C5                               l3588 09CB  
                             l3684 0F3F                               l3844 0E17  
                             l2886 0B34                               l3934 06D9  
                             l3942 06F2                               l4486 027F  
                             l2896 0B55                               l4488 0AEB  
                             l3946 06FA                               l3938 06E7  
                             l3970 0061                               l3984 007F  
                             l3996 00AF                               STR_1 071C  
                             STR_2 0779                        get_time@min 004C  
                             STR_3 078D                               STR_4 07BF  
                             STR_5 0797                               STR_6 07AB  
                             STR_7 0783                               STR_8 07A1  
                             STR_9 073E                               _BRGH 04C2  
                             _CREN 00C4                               u2125 093B  
                             u2055 08C9                               u2075 08DA  
                             u2085 08E3                               u2515 0B35  
                             u2525 0B41                               u4045 06CE  
                             u2535 0B4B                               u5007 066A  
                             u4065 06DF                               u3505 0BE1  
                             u5017 0C29                               u4305 02A9  
                             u4075 06E8                               u3515 0BF6  
                             u5027 0C39                               u3525 0C08  
                             u5037 0C49                               u3605 0D60  
                             u5047 094B                               u2495 0B29  
                             u3615 0D72                               u5057 095C  
                             u5067 1716                               u3715 0904  
                             _PEIE 005E                               u3485 0BD3  
                             u3655 09AA                               u3575 0D3D  
                             u3751 0E75                               u3735 0E45  
                             u4615 04E2                               u3752 0E76  
                             u3753 0E7B                               u3745 0E5E  
                             u4625 051B                               u3754 0E7C  
                             u3915 0A97                               u3675 09B6  
                             u3835 0F97                               u3595 0D4B  
                             u3755 0E81                               u3756 0E82  
                             _RCEN 048B                               _RCIF 0065  
                             u3685 09C2                               u3695 09CC  
                             u3791 0ED5                               u3775 0EA5  
                             u3792 0ED6                               u3793 0EDB  
                             u3785 0EBE                               u3794 0EDC  
                             u3955 0DED                               u3795 0EE1  
                             u4907 019D                               u3796 0EE2  
                             u4917 01AF                               u3895 0A70  
                             u3975 0CCC                               u4927 01C1  
                             u3985 0CEB                               u4937 01D3  
                             u4947 01E5                               u4867 006E  
                             u4957 01F7                               u4877 008C  
                             u4967 0209                               u4887 00A4  
                             u4977 021B                               u4897 018B  
                             u4987 022B                               u4997 04C2  
                             _TMR0 0001                               _SPEN 00C7  
                             _TRMT 04C1                               _TXEN 04C5  
                             _SYNC 04C4                       __CFG_WRT$OFF 0000  
                             _day1 0079                               _day2 0025  
                             _bank 002E                  ?_Lcd_Write_String 0047  
 __end_of_I2C_Master_RepeatedStart 16A7                               _cont 002D  
                             _door 003A                               _main 003B  
                             _hour 002B                               _temp 003B  
                             _time 0041                               _trip 0039  
                             btemp 007E                               start 000C  
               ??_Lcd_Write_String 0049                      __CFG_IESO$OFF 0000  
                  __end_of_Lcd_Cmd 171F                  ___bmul@multiplier 0076  
                    __CFG_MCLRE$ON 0000                get_temp@temp_string 0066  
                 ?_I2C_Master_Init 0054                   ?_I2C_Master_Read 0073  
                 ?_I2C_Master_Wait 0070                   ?_I2C_Master_Stop 0070  
                  __end_of___aldiv 0D95                              ?_main 0070  
                  __end_of___awdiv 0B62                              STR_10 0816  
                            STR_11 0810                              STR_12 080A  
                            STR_20 07F5                              STR_21 07EE  
                            STR_13 0755                              STR_22 07F6  
                            STR_30 0828                              STR_14 0761  
                            STR_31 0822                              STR_23 07FD  
                            STR_15 07D2                              STR_32 0827  
                            STR_24 0804                              STR_16 07E4  
                            STR_17 07C9                              STR_25 07B5  
                    __CFG_WDTE$OFF 0000                              STR_18 07DB  
                            STR_26 076D                              STR_19 07ED  
                            STR_27 0748                              STR_28 081C  
                  __end_of___awmod 06FF                              STR_29 073B  
                     get_time@hour 004B                              _ANSEL 0188  
                  __end_of___lldiv 0C1D                     ??_get_tripwire 0077  
                  ___awdiv@divisor 0073                    __end_of___lwdiv 09DB  
                            i1l310 1767                              i1l313 176D  
                  __end_of___lwmod 08F2                    ___awdiv@counter 0047  
                            _RCREG 001A                              _SPBRG 0099  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                              _PORTD 0008  
                            _PORTE 0009            __size_of_Lcd_Set_Cursor 0050  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087                              _TRISD 0088  
                            _SSPIE 0463                              _TRISE 0089  
                            _SSPIF 0063                              _TXREG 0019  
                  __end_of_get_PIR 17BA                     __CFG_FCMEN$OFF 0000  
                  __end_of_get_day 099D                        ?_UART_Write 0070  
               __size_of_UART_Init 00D8                              _alarm 002F  
          __size_of_Lcd_Shift_Left 000B                    __end_of_dpowers 071C  
                            _setup 0B62                              _state 007A  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 1000                   __end_of_Lcd_Init 0C7D  
                 __end_of_Lcd_Port 1705                    __initialization 000F  
                     __end_of_main 06B2             __size_of_initOscilador 0055  
                           ??_main 00A0                 __size_of_Lcd_Clear 000B  
                ?_I2C_Master_Start 0070                  ?_I2C_Master_Write 0073  
               ??_I2C_Master_Start 0073                 ??_I2C_Master_Write 0075  
                 ___awdiv@dividend 0075                             ?_setup 0070  
                           _ANSELH 0189                             i1l2960 1769  
                           i1l2962 176A                          ??_Lcd_Cmd 0074  
          __size_of_Lcd_Write_Char 0039                             _SSPADD 0093  
                           _TRISC3 043B                             _TRISC4 043C  
                           _TRISC6 043E                             _TRISC7 043F  
                           _SSPCON 0014                             _SSPBUF 0013  
                   __CFG_PWRTE$OFF 0000           _I2C_Master_RepeatedStart 16A0  
                 __end_of_get_hall 17DD                  __end_of_UART_Init 0F12  
                 __end_of_get_temp 0E3A                   __end_of_get_time 0D06  
                           ___bmul 082B                __size_of_UART_Write 000A  
                        ??___aldiv 0073                          ??___awdiv 0077  
                        ??___awmod 0077                             _change 0034  
                        ??___lldiv 0073                             _get_IR 1774  
                        ??___lwdiv 0077                          ??___lwmod 004E  
         __size_of_Lcd_Shift_Right 000B                   ___awdiv@quotient 0049  
                           _newmin 0027                    ___awmod@divisor 0073  
                        ??_get_PIR 0077                    ___awmod@counter 0047  
            __end_of_UART_TX_Empty 1692                          ??_get_day 0077  
                           _strcat 083C                             _strcmp 088E  
                           saved_w 007E                          ??_sprintf 0054  
                  Lcd_Set_Cursor@a 0049                    Lcd_Set_Cursor@b 0077  
                  Lcd_Set_Cursor@y 004B                    Lcd_Set_Cursor@z 004A  
          __end_of__initialization 0037                      _initOscilador 0AB2  
                __end_of_Lcd_Clear 16D5               __end_of_get_tripwire 1800  
              ___bmul@multiplicand 0073                     __pcstackCOMMON 0070  
                     __pidataBANK0 1687                      __end_of_setup 0BBD  
                   _Lcd_Set_Cursor 0A62                     _OPTION_REGbits 0081  
                   _Lcd_Shift_Left 16D5                          ?_Lcd_Init 0070  
                        ?_Lcd_Port 0070                            ??_setup 0078  
                       __pbssBANK0 0020                     ?_initOscilador 0070  
                       __pmaintext 003B                            ?___bmul 0073  
                          ?_get_IR 0070                         __pintentry 0004  
               __size_of_open_door 001B          __size_of_Lcd_Write_String 0041  
           __end_of_Lcd_Set_Cursor 0AB2                            ?_strcat 0073  
                          ?_strcmp 0073             __end_of_Lcd_Shift_Left 16E0  
                ??_Lcd_Shift_Right 0077                         _close_door 171F  
                     ??_UART_Write 0073                         ??_Lcd_Init 0047  
                       ??_Lcd_Port 0073                            _SSPCON2 0091  
                        ?_get_hall 0070                            _SSPSTAT 0094  
                        ?_get_temp 0070                          ?_get_time 0070  
                       __stringtab 0700                initOscilador@option 0075  
                   _Lcd_Write_Char 092A                            _Lcd_Cmd 1705  
               __size_of_write_RTC 0046                         _manual_pwm 1755  
                          ___aldiv 0D06                    __size_of___bmul 0011  
                          ___awdiv 0B07                            ___awmod 06B2  
                          ___lldiv 0BBD                 __end_of_UART_Write 16CA  
                          ___lwdiv 099D                            ___lwmod 08BE  
                  __size_of_get_IR 0023                            _change1 0033  
                          _change2 0032                            _change3 0031  
                          _change4 0030                    ?_Lcd_Set_Cursor 0077  
                          _get_PIR 1797                            __ptext1 0A1C  
                          __ptext2 088E                            __ptext3 0B62  
                          __ptext4 0AB2                            __ptext5 0E3A  
                          __ptext6 0D06                            __ptext7 0C1D  
                          __ptext8 08F2                            __ptext9 0BBD  
                          _get_day 0963                get_time@time_string 004D  
                  __size_of_strcat 0024                    __size_of_strcmp 0030  
                          _dpowers 0712                    ?_Lcd_Shift_Left 0070  
                 ___awmod@dividend 0075                   ___aldiv@dividend 004B  
                          _newhour 0028           __size_of_I2C_Master_Init 0038  
         __size_of_I2C_Master_Read 002E           __size_of_I2C_Master_Wait 0009  
         __size_of_I2C_Master_Stop 0007                    ??_initOscilador 0073  
                       ??_get_hall 0077                            _sprintf 0F12  
                          clrloop0 16B0             __end_of_Lcd_Write_Char 0963  
                       ??_get_temp 005F                         ??_get_time 0049  
             end_of_initialization 0037              __size_of_get_tripwire 0023  
       ??_I2C_Master_RepeatedStart 0073                  __end_of_open_door 1755  
                       get_PIR@PIR 0049          __size_of_I2C_Master_Start 0007  
        __size_of_I2C_Master_Write 0008                    ___lldiv@divisor 0047  
                  ___lldiv@counter 0053                          _RCSTAbits 0018  
                 ___aldiv@quotient 0051                   I2C_Master_Init@c 0054  
                 I2C_Master_Read@a 0073                          Lcd_Port@a 0073  
                     write_RTC@day 0076                       __pstringtext 0700  
                          strcmp@r 0047                          _UART_Init 0E3A  
                        _PORTAbits 0005                          _PORTBbits 0006  
                        _PORTCbits 0007                          _PORTDbits 0008  
                        _PORTEbits 0009                     UART_Write@data 0073  
                __end_of_write_RTC 0A62                       _get_tripwire 17DD  
                      ?_close_door 0070                          _TRISCbits 0087  
                  ?_Lcd_Write_Char 0070                  Lcd_Write_String@a 0047  
                Lcd_Write_String@i 004C                          _Lcd_Clear 16CA  
                      ?_manual_pwm 0070                     __end_of___bmul 083C  
                 _Lcd_Write_String 09DB                         ?_UART_Init 0055  
                   __end_of_get_IR 1797                     __end_of_strcat 0860  
                   __end_of_strcmp 08BE                start_initialization 000F  
                __size_of_Lcd_Init 0060                  __size_of_Lcd_Port 001A  
                ??_I2C_Master_Init 0074                  ??_I2C_Master_Read 0075  
                ??_I2C_Master_Wait 0073                  ??_I2C_Master_Stop 0073  
           __size_of_UART_TX_Empty 0006           __CFG_FOSC$INTRC_NOCLKOUT 0000  
                       ?_Lcd_Clear 0070                           ??___bmul 0074  
              __size_of_close_door 001B                    _Lcd_Shift_Right 16E0  
                         ??_get_IR 0077                        __pdataBANK0 0068  
                  Lcd_Write_Char@a 0077                    Lcd_Write_Char@y 0076  
                         ??_strcat 0074                           ??_strcmp 0075  
                 write_RTC@minutes 0075                        __pbssCOMMON 0078  
                        ___latbits 0002                      __pcstackBANK0 0047  
                    __pcstackBANK1 00A0                __size_of_manual_pwm 001F  
                __size_of_get_hall 0023                           ?_Lcd_Cmd 0070  
                __size_of_get_temp 00A5                  __size_of_get_time 0089  
                      sprintf@flag 0059                        sprintf@prec 005A  
                 _I2C_Master_Start 1692                   _I2C_Master_Write 16A7  
                 ___lwdiv@dividend 0075                   ??_Lcd_Set_Cursor 0047  
                  get_temp@decimal 0062                           ?___aldiv 0047  
                         ?___awdiv 0073                           ?___awmod 0073  
                         ?___lldiv 0047                           ?___lwdiv 0073  
                         ?___lwmod 004A                   ??_Lcd_Shift_Left 0077  
                      ??_UART_Init 0059                           ?_get_PIR 0070  
                         ?_get_day 0070                    get_temp@tempLSB 0067  
                  get_temp@tempMSB 0065                      _UART_TX_Empty 168C  
                 ___lwdiv@quotient 0048                           ?_sprintf 0050  
                       UART_Init@x 0074                     __size_of_setup 005B  
                  ___aldiv@divisor 0047                  interrupt_function 0004  
                  ___aldiv@counter 004F            __end_of_Lcd_Shift_Right 16EB  
                        clear_ram0 16AF                          _passwordu 0020  
                        _open_door 173A                           Lcd_Cmd@a 0076  
                        _seguridad 0029                        ??_Lcd_Clear 0077  
                UART_Init@baudrate 0055                        __stringbase 0712  
                   ?_UART_TX_Empty 0070                   ??_Lcd_Write_Char 0074  
                     ??_close_door 0075                           _Lcd_Init 0C1D  
                         _Lcd_Port 16EB                          _write_RTC 0A1C  
              I2C_Master_Read@temp 0047              __end_of_initOscilador 0B07  
         __end_of_Lcd_Write_String 0A1C                   __size_of_Lcd_Cmd 001A  
                       ?_open_door 0070                       ??_manual_pwm 0070  
               __end_of_close_door 173A                   __size_of___aldiv 008F  
__size_of_I2C_Master_RepeatedStart 0007                   __size_of___awdiv 005B  
                 __size_of___awmod 004D          ?_I2C_Master_RepeatedStart 0070  
                 __size_of___lldiv 0060                   __size_of___lwdiv 003E  
                 __size_of___lwmod 0034                 __end_of__stringtab 0712  
                 __size_of_get_PIR 0023                   __size_of_get_day 003A  
                       sprintf@val 005B                    _I2C_Master_Init 08F2  
                  _I2C_Master_Read 0860                    _I2C_Master_Wait 16B7  
                       strcat@from 0073                    _I2C_Master_Stop 1699  
                  ___lwdiv@divisor 0073                    ___lwdiv@counter 0047  
                         __ptext10 173A                           __ptext11 17DD  
                         __ptext20 0963                           __ptext12 0C7D  
                         __ptext21 16A0                           __ptext13 0D95  
                         __ptext30 06B2                           __ptext22 1797  
                         __ptext14 083C                           __ptext31 0B07  
                         __ptext23 1774                           __ptext15 0F12  
                         __ptext40 1705                           __ptext32 16C0  
                         __ptext24 0860                           __ptext16 08BE  
                         __ptext41 16EB                           __ptext33 168C  
                         __ptext25 171F                           __ptext17 099D  
                         __ptext42 1755                           __ptext34 09DB  
                         __ptext26 16A7                           __ptext18 082B  
                         __ptext35 092A                           __ptext27 1699  
                         __ptext19 17BA                           __ptext36 16E0  
                         __ptext28 1692                           __ptext37 16D5  
                         __ptext29 16B7                           __ptext38 0A62  
                         __ptext39 16CA                         ?_write_RTC 0075  
                __CFG_BOR4V$BOR40V 0000                           _get_hall 17BA  
                         _get_temp 0D95                           _get_time 0C7D  
                 __size_of_sprintf 00EE                 __end_of_manual_pwm 1774  
                    __size_of_main 0677                   ?_Lcd_Shift_Right 0070  
                         get_IR@IR 0049                           _password 0068  
                         get_day@d 0049                    ??_UART_TX_Empty 0073  
         __end_of_I2C_Master_Start 1699           __end_of_I2C_Master_Write 16AF  
                       _INTCONbits 000B                 Lcd_Write_Char@temp 0075  
                         intlevel1 0000                          sprintf@ap 0058  
                        sprintf@sp 005D                   ___lwmod@dividend 004C  
                 ___lldiv@dividend 004B                        ??_open_door 0075  
                        stringcode 070A                         _OSCCONbits 008F  
          __end_of_I2C_Master_Init 092A            __end_of_I2C_Master_Read 088E  
          __end_of_I2C_Master_Wait 16C0            __end_of_I2C_Master_Stop 16A0  
               Lcd_Set_Cursor@temp 004C                      write_RTC@hour 0077  
                         sprintf@c 005E                           sprintf@f 0050  
                         strcat@cp 0076                           strcat@to 0075  
                         strcmp@s1 0048                           strcmp@s2 0073  
                 ___lldiv@quotient 004F                  I2C_Master_Write@d 0073  
                  ___lwmod@divisor 004A                    ___lwmod@counter 004F  
                 get_tripwire@trip 0049                           stringtab 0700  
                     ___aldiv@sign 0050                         _UART_Write 16C0  
                      _SSPCON2bits 0091                        ??_write_RTC 0047  
                       _SSPCONbits 0014  



Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Mar 12 12:24:10 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	intentry,global,class=CODE,delta=2
    58                           	dabs	1,0x7E,2
    59  0000                     
    60                           ; Version 2.05
    61                           ; Generated 20/12/2018 GMT
    62                           ; 
    63                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC16F887 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000D                     	;# 
   108  000E                     	;# 
   109  000E                     	;# 
   110  000F                     	;# 
   111  0010                     	;# 
   112  0011                     	;# 
   113  0012                     	;# 
   114  0013                     	;# 
   115  0014                     	;# 
   116  0015                     	;# 
   117  0015                     	;# 
   118  0016                     	;# 
   119  0017                     	;# 
   120  0018                     	;# 
   121  0019                     	;# 
   122  001A                     	;# 
   123  001B                     	;# 
   124  001B                     	;# 
   125  001C                     	;# 
   126  001D                     	;# 
   127  001E                     	;# 
   128  001F                     	;# 
   129  0081                     	;# 
   130  0085                     	;# 
   131  0086                     	;# 
   132  0087                     	;# 
   133  0088                     	;# 
   134  0089                     	;# 
   135  008C                     	;# 
   136  008D                     	;# 
   137  008E                     	;# 
   138  008F                     	;# 
   139  0090                     	;# 
   140  0091                     	;# 
   141  0092                     	;# 
   142  0093                     	;# 
   143  0093                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0097                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009A                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  0105                     	;# 
   158  0107                     	;# 
   159  0108                     	;# 
   160  0109                     	;# 
   161  010C                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  0185                     	;# 
   167  0187                     	;# 
   168  0188                     	;# 
   169  0189                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  0007                     	;# 
   180  0008                     	;# 
   181  0009                     	;# 
   182  000A                     	;# 
   183  000B                     	;# 
   184  000C                     	;# 
   185  000D                     	;# 
   186  000E                     	;# 
   187  000E                     	;# 
   188  000F                     	;# 
   189  0010                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0015                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0017                     	;# 
   198  0018                     	;# 
   199  0019                     	;# 
   200  001A                     	;# 
   201  001B                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  001D                     	;# 
   205  001E                     	;# 
   206  001F                     	;# 
   207  0081                     	;# 
   208  0085                     	;# 
   209  0086                     	;# 
   210  0087                     	;# 
   211  0088                     	;# 
   212  0089                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  008F                     	;# 
   217  0090                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0093                     	;# 
   222  0093                     	;# 
   223  0094                     	;# 
   224  0095                     	;# 
   225  0096                     	;# 
   226  0097                     	;# 
   227  0098                     	;# 
   228  0099                     	;# 
   229  009A                     	;# 
   230  009B                     	;# 
   231  009C                     	;# 
   232  009D                     	;# 
   233  009E                     	;# 
   234  009F                     	;# 
   235  0105                     	;# 
   236  0107                     	;# 
   237  0108                     	;# 
   238  0109                     	;# 
   239  010C                     	;# 
   240  010C                     	;# 
   241  010D                     	;# 
   242  010E                     	;# 
   243  010F                     	;# 
   244  0185                     	;# 
   245  0187                     	;# 
   246  0188                     	;# 
   247  0189                     	;# 
   248  018C                     	;# 
   249  018D                     	;# 
   250                           
   251                           	psect	idataBANK0
   252  15ED                     __pidataBANK0:	
   253                           
   254                           ;initializer for _password
   255  15ED  3401               	retlw	1
   256  15EE  3405               	retlw	5
   257  15EF  3401               	retlw	1
   258  15F0  3400               	retlw	0
   259  15F1  3403               	retlw	3
   260                           
   261                           	psect	stringtext
   262  0700                     __pstringtext:	
   263  0700                     stringtab:	
   264  0700                     __stringtab:	
   265                           
   266                           ;	String table - string pointers are 2 bytes each
   267  0700  1BFF               	btfsc	btemp+1,7
   268  0701  2F0A               	ljmp	stringcode
   269  0702  1383               	bcf	3,7
   270  0703  187F               	btfsc	btemp+1,0
   271  0704  1783               	bsf	3,7
   272  0705  0800               	movf	0,w
   273  0706  0A84               	incf	4,f
   274  0707  1903               	skipnz
   275  0708  0AFF               	incf	btemp+1,f
   276  0709  0008               	return
   277  070A                     stringcode:	
   278  070A  087F               	movf	btemp+1,w
   279  070B  397F               	andlw	127
   280  070C  008A               	movwf	10
   281  070D  0804               	movf	4,w
   282  070E  0A84               	incf	4,f
   283  070F  1903               	skipnz
   284  0710  0AFF               	incf	btemp+1,f
   285  0711  0082               	movwf	2
   286  0712                     __stringbase:	
   287  0712                     __end_of__stringtab:	
   288  0712                     _dpowers:	
   289  0712  3401               	retlw	1
   290  0713  3400               	retlw	0
   291  0714  340A               	retlw	10
   292  0715  3400               	retlw	0
   293  0716  3464               	retlw	100
   294  0717  3400               	retlw	0
   295  0718  34E8               	retlw	232
   296  0719  3403               	retlw	3
   297  071A  3410               	retlw	16
   298  071B  3427               	retlw	39
   299  071C                     __end_of_dpowers:	
   300  0009                     _PORTE	set	9
   301  0007                     _PORTC	set	7
   302  0005                     _PORTA	set	5
   303  0006                     _PORTB	set	6
   304  0009                     _PORTEbits	set	9
   305  0008                     _PORTD	set	8
   306  0007                     _PORTCbits	set	7
   307  0018                     _RCSTAbits	set	24
   308  0014                     _SSPCONbits	set	20
   309  0008                     _PORTDbits	set	8
   310  0001                     _TMR0	set	1
   311  0005                     _PORTAbits	set	5
   312  000B                     _INTCONbits	set	11
   313  0019                     _TXREG	set	25
   314  001A                     _RCREG	set	26
   315  0006                     _PORTBbits	set	6
   316  0013                     _SSPBUF	set	19
   317  0014                     _SSPCON	set	20
   318  0065                     _RCIF	set	101
   319  00C4                     _CREN	set	196
   320  00C7                     _SPEN	set	199
   321  0063                     _SSPIF	set	99
   322  005E                     _PEIE	set	94
   323  005F                     _GIE	set	95
   324  0081                     _OPTION_REGbits	set	129
   325  0087                     _TRISC	set	135
   326  0089                     _TRISE	set	137
   327  0088                     _TRISD	set	136
   328  0085                     _TRISA	set	133
   329  0086                     _TRISB	set	134
   330  0099                     _SPBRG	set	153
   331  008F                     _OSCCONbits	set	143
   332  0091                     _SSPCON2bits	set	145
   333  0087                     _TRISCbits	set	135
   334  0094                     _SSPSTAT	set	148
   335  0093                     _SSPADD	set	147
   336  0091                     _SSPCON2	set	145
   337  04C1                     _TRMT	set	1217
   338  04C5                     _TXEN	set	1221
   339  043E                     _TRISC6	set	1086
   340  043F                     _TRISC7	set	1087
   341  04C4                     _SYNC	set	1220
   342  04C2                     _BRGH	set	1218
   343  0463                     _SSPIE	set	1123
   344  043C                     _TRISC4	set	1084
   345  043B                     _TRISC3	set	1083
   346  048B                     _RCEN	set	1163
   347  0188                     _ANSEL	set	392
   348  0189                     _ANSELH	set	393
   349  071C                     STR_1:	
   350  071C  3449               	retlw	73	;'I'
   351  071D  346E               	retlw	110	;'n'
   352  071E  3469               	retlw	105	;'i'
   353  071F  3463               	retlw	99	;'c'
   354  0720  3469               	retlw	105	;'i'
   355  0721  3461               	retlw	97	;'a'
   356  0722  346E               	retlw	110	;'n'
   357  0723  3464               	retlw	100	;'d'
   358  0724  346F               	retlw	111	;'o'
   359  0725  3420               	retlw	32	;' '
   360  0726  3453               	retlw	83	;'S'
   361  0727  3469               	retlw	105	;'i'
   362  0728  3473               	retlw	115	;'s'
   363  0729  3474               	retlw	116	;'t'
   364  072A  3465               	retlw	101	;'e'
   365  072B  346D               	retlw	109	;'m'
   366  072C  3461               	retlw	97	;'a'
   367  072D  3420               	retlw	32	;' '
   368  072E  3464               	retlw	100	;'d'
   369  072F  3465               	retlw	101	;'e'
   370  0730  3420               	retlw	32	;' '
   371  0731  3453               	retlw	83	;'S'
   372  0732  3465               	retlw	101	;'e'
   373  0733  3467               	retlw	103	;'g'
   374  0734  3475               	retlw	117	;'u'
   375  0735  3472               	retlw	114	;'r'
   376  0736  3469               	retlw	105	;'i'
   377  0737  3464               	retlw	100	;'d'
   378  0738  3461               	retlw	97	;'a'
   379  0739  3464               	retlw	100	;'d'
   380  073A  3400               	retlw	0
   381  073B                     STR_25:	
   382  073B  3450               	retlw	80	;'P'
   383  073C  3441               	retlw	65	;'A'
   384  073D  3453               	retlw	83	;'S'
   385  073E  3453               	retlw	83	;'S'
   386  073F  3457               	retlw	87	;'W'
   387  0740  344F               	retlw	79	;'O'
   388  0741  3452               	retlw	82	;'R'
   389  0742  3444               	retlw	68	;'D'
   390  0743  343A               	retlw	58	;':'
   391  0744  3420               	retlw	32	;' '
   392  0745  3420               	retlw	32	;' '
   393  0746  3420               	retlw	32	;' '
   394  0747  3420               	retlw	32	;' '
   395  0748  3420               	retlw	32	;' '
   396  0749  3420               	retlw	32	;' '
   397  074A  3420               	retlw	32	;' '
   398  074B  3400               	retlw	0
   399  074C                     STR_17:	
   400  074C  3454               	retlw	84	;'T'
   401  074D  3452               	retlw	82	;'R'
   402  074E  3449               	retlw	73	;'I'
   403  074F  3450               	retlw	80	;'P'
   404  0750  3420               	retlw	32	;' '
   405  0751  3441               	retlw	65	;'A'
   406  0752  3443               	retlw	67	;'C'
   407  0753  3454               	retlw	84	;'T'
   408  0754  3449               	retlw	73	;'I'
   409  0755  3456               	retlw	86	;'V'
   410  0756  3441               	retlw	65	;'A'
   411  0757  3444               	retlw	68	;'D'
   412  0758  344F               	retlw	79	;'O'
   413  0759  3420               	retlw	32	;' '
   414  075A  3420               	retlw	32	;' '
   415  075B  3420               	retlw	32	;' '
   416  075C  3400               	retlw	0
   417  075D                     STR_18:	
   418  075D  3454               	retlw	84	;'T'
   419  075E  3452               	retlw	82	;'R'
   420  075F  3449               	retlw	73	;'I'
   421  0760  3450               	retlw	80	;'P'
   422  0761  3420               	retlw	32	;' '
   423  0762  3444               	retlw	68	;'D'
   424  0763  3445               	retlw	69	;'E'
   425  0764  3453               	retlw	83	;'S'
   426  0765  3441               	retlw	65	;'A'
   427  0766  3443               	retlw	67	;'C'
   428  0767  3454               	retlw	84	;'T'
   429  0768  3449               	retlw	73	;'I'
   430  0769  3456               	retlw	86	;'V'
   431  076A  3441               	retlw	65	;'A'
   432  076B  3444               	retlw	68	;'D'
   433  076C  344F               	retlw	79	;'O'
   434  076D  3400               	retlw	0
   435  076E                     STR_19:	
   436  076E  3450               	retlw	80	;'P'
   437  076F  3449               	retlw	73	;'I'
   438  0770  3452               	retlw	82	;'R'
   439  0771  3420               	retlw	32	;' '
   440  0772  3441               	retlw	65	;'A'
   441  0773  3443               	retlw	67	;'C'
   442  0774  3454               	retlw	84	;'T'
   443  0775  3449               	retlw	73	;'I'
   444  0776  3456               	retlw	86	;'V'
   445  0777  3441               	retlw	65	;'A'
   446  0778  3444               	retlw	68	;'D'
   447  0779  344F               	retlw	79	;'O'
   448  077A  3420               	retlw	32	;' '
   449  077B  3420               	retlw	32	;' '
   450  077C  3420               	retlw	32	;' '
   451  077D  3400               	retlw	0
   452  077E                     STR_16:	
   453  077E  3442               	retlw	66	;'B'
   454  077F  344F               	retlw	79	;'O'
   455  0780  3456               	retlw	86	;'V'
   456  0781  3445               	retlw	69	;'E'
   457  0782  3444               	retlw	68	;'D'
   458  0783  3441               	retlw	65	;'A'
   459  0784  3420               	retlw	32	;' '
   460  0785  3443               	retlw	67	;'C'
   461  0786  3445               	retlw	69	;'E'
   462  0787  3452               	retlw	82	;'R'
   463  0788  3452               	retlw	82	;'R'
   464  0789  3441               	retlw	65	;'A'
   465  078A  3444               	retlw	68	;'D'
   466  078B  3441               	retlw	65	;'A'
   467  078C  3420               	retlw	32	;' '
   468  078D  3400               	retlw	0
   469  078E                     STR_15:	
   470  078E  3442               	retlw	66	;'B'
   471  078F  344F               	retlw	79	;'O'
   472  0790  3456               	retlw	86	;'V'
   473  0791  3445               	retlw	69	;'E'
   474  0792  3444               	retlw	68	;'D'
   475  0793  3441               	retlw	65	;'A'
   476  0794  3420               	retlw	32	;' '
   477  0795  3441               	retlw	65	;'A'
   478  0796  3442               	retlw	66	;'B'
   479  0797  3449               	retlw	73	;'I'
   480  0798  3445               	retlw	69	;'E'
   481  0799  3452               	retlw	82	;'R'
   482  079A  3454               	retlw	84	;'T'
   483  079B  3441               	retlw	65	;'A'
   484  079C  3420               	retlw	32	;' '
   485  079D  3400               	retlw	0
   486  079E                     STR_20:	
   487  079E  3450               	retlw	80	;'P'
   488  079F  3449               	retlw	73	;'I'
   489  07A0  3452               	retlw	82	;'R'
   490  07A1  3420               	retlw	32	;' '
   491  07A2  3444               	retlw	68	;'D'
   492  07A3  3445               	retlw	69	;'E'
   493  07A4  3453               	retlw	83	;'S'
   494  07A5  3441               	retlw	65	;'A'
   495  07A6  3443               	retlw	67	;'C'
   496  07A7  3454               	retlw	84	;'T'
   497  07A8  3449               	retlw	73	;'I'
   498  07A9  3456               	retlw	86	;'V'
   499  07AA  3441               	retlw	65	;'A'
   500  07AB  3444               	retlw	68	;'D'
   501  07AC  344F               	retlw	79	;'O'
   502  07AD  3400               	retlw	0
   503  07AE                     STR_27:	
   504  07AE  3453               	retlw	83	;'S'
   505  07AF  3445               	retlw	69	;'E'
   506  07B0  3447               	retlw	71	;'G'
   507  07B1  3455               	retlw	85	;'U'
   508  07B2  3452               	retlw	82	;'R'
   509  07B3  3449               	retlw	73	;'I'
   510  07B4  3444               	retlw	68	;'D'
   511  07B5  3441               	retlw	65	;'A'
   512  07B6  3444               	retlw	68	;'D'
   513  07B7  3420               	retlw	32	;' '
   514  07B8  344F               	retlw	79	;'O'
   515  07B9  3446               	retlw	70	;'F'
   516  07BA  3446               	retlw	70	;'F'
   517  07BB  3400               	retlw	0
   518  07BC                     STR_31:	
   519  07BC  3442               	retlw	66	;'B'
   520  07BD  3441               	retlw	65	;'A'
   521  07BE  344E               	retlw	78	;'N'
   522  07BF  3443               	retlw	67	;'C'
   523  07C0  344F               	retlw	79	;'O'
   524  07C1  3420               	retlw	32	;' '
   525  07C2  3443               	retlw	67	;'C'
   526  07C3  3445               	retlw	69	;'E'
   527  07C4  3452               	retlw	82	;'R'
   528  07C5  3452               	retlw	82	;'R'
   529  07C6  3441               	retlw	65	;'A'
   530  07C7  3444               	retlw	68	;'D'
   531  07C8  344F               	retlw	79	;'O'
   532  07C9  3400               	retlw	0
   533  07CA                     STR_30:	
   534  07CA  3442               	retlw	66	;'B'
   535  07CB  3441               	retlw	65	;'A'
   536  07CC  344E               	retlw	78	;'N'
   537  07CD  3443               	retlw	67	;'C'
   538  07CE  344F               	retlw	79	;'O'
   539  07CF  3420               	retlw	32	;' '
   540  07D0  3441               	retlw	65	;'A'
   541  07D1  3442               	retlw	66	;'B'
   542  07D2  3449               	retlw	73	;'I'
   543  07D3  3445               	retlw	69	;'E'
   544  07D4  3452               	retlw	82	;'R'
   545  07D5  3454               	retlw	84	;'T'
   546  07D6  344F               	retlw	79	;'O'
   547  07D7  3400               	retlw	0
   548  07D8                     STR_29:	
   549  07D8  3420               	retlw	32	;' '
   550  07D9  3420               	retlw	32	;' '
   551  07DA  3420               	retlw	32	;' '
   552  07DB  3420               	retlw	32	;' '
   553  07DC  3420               	retlw	32	;' '
   554  07DD  3420               	retlw	32	;' '
   555  07DE  3420               	retlw	32	;' '
   556  07DF  3420               	retlw	32	;' '
   557  07E0  3420               	retlw	32	;' '
   558  07E1  3420               	retlw	32	;' '
   559  07E2  3420               	retlw	32	;' '
   560  07E3  3420               	retlw	32	;' '
   561  07E4  3400               	retlw	0
   562  07E5                     STR_26:	
   563  07E5  3453               	retlw	83	;'S'
   564  07E6  3445               	retlw	69	;'E'
   565  07E7  3447               	retlw	71	;'G'
   566  07E8  3455               	retlw	85	;'U'
   567  07E9  3452               	retlw	82	;'R'
   568  07EA  3449               	retlw	73	;'I'
   569  07EB  3444               	retlw	68	;'D'
   570  07EC  3441               	retlw	65	;'A'
   571  07ED  3444               	retlw	68	;'D'
   572  07EE  3420               	retlw	32	;' '
   573  07EF  344F               	retlw	79	;'O'
   574  07F0  344E               	retlw	78	;'N'
   575  07F1  3400               	retlw	0
   576  07F2                     STR_28:	
   577  07F2  3449               	retlw	73	;'I'
   578  07F3  344E               	retlw	78	;'N'
   579  07F4  3443               	retlw	67	;'C'
   580  07F5  344F               	retlw	79	;'O'
   581  07F6  3452               	retlw	82	;'R'
   582  07F7  3452               	retlw	82	;'R'
   583  07F8  3445               	retlw	69	;'E'
   584  07F9  3443               	retlw	67	;'C'
   585  07FA  3454               	retlw	84	;'T'
   586  07FB  344F               	retlw	79	;'O'
   587  07FC  3400               	retlw	0
   588  07FD                     STR_3:	
   589  07FD  3475               	retlw	117	;'u'
   590  07FE  346E               	retlw	110	;'n'
   591  07FF  3420               	retlw	32	;' '
   592  0800  346D               	retlw	109	;'m'
   593  0801  346F               	retlw	111	;'o'
   594  0802  346D               	retlw	109	;'m'
   595  0803  3465               	retlw	101	;'e'
   596  0804  346E               	retlw	110	;'n'
   597  0805  3474               	retlw	116	;'t'
   598  0806  346F               	retlw	111	;'o'
   599  0807  3400               	retlw	0
   600  0808                     STR_4:	
   601  0808  344C               	retlw	76	;'L'
   602  0809  3455               	retlw	85	;'U'
   603  080A  344E               	retlw	78	;'N'
   604  080B  3445               	retlw	69	;'E'
   605  080C  3453               	retlw	83	;'S'
   606  080D  3420               	retlw	32	;' '
   607  080E  3420               	retlw	32	;' '
   608  080F  3420               	retlw	32	;' '
   609  0810  3420               	retlw	32	;' '
   610  0811  3400               	retlw	0
   611  0812                     STR_9:	
   612  0812  3453               	retlw	83	;'S'
   613  0813  3441               	retlw	65	;'A'
   614  0814  3442               	retlw	66	;'B'
   615  0815  3441               	retlw	65	;'A'
   616  0816  3444               	retlw	68	;'D'
   617  0817  344F               	retlw	79	;'O'
   618  0818  3420               	retlw	32	;' '
   619  0819  3420               	retlw	32	;' '
   620  081A  3420               	retlw	32	;' '
   621  081B  3400               	retlw	0
   622  081C                     STR_5:	
   623  081C  344D               	retlw	77	;'M'
   624  081D  3441               	retlw	65	;'A'
   625  081E  3452               	retlw	82	;'R'
   626  081F  3454               	retlw	84	;'T'
   627  0820  3445               	retlw	69	;'E'
   628  0821  3453               	retlw	83	;'S'
   629  0822  3420               	retlw	32	;' '
   630  0823  3420               	retlw	32	;' '
   631  0824  3420               	retlw	32	;' '
   632  0825  3400               	retlw	0
   633  0826                     STR_7:	
   634  0826  344A               	retlw	74	;'J'
   635  0827  3455               	retlw	85	;'U'
   636  0828  3445               	retlw	69	;'E'
   637  0829  3456               	retlw	86	;'V'
   638  082A  3445               	retlw	69	;'E'
   639  082B  3453               	retlw	83	;'S'
   640  082C  3420               	retlw	32	;' '
   641  082D  3420               	retlw	32	;' '
   642  082E  3420               	retlw	32	;' '
   643  082F  3400               	retlw	0
   644  0830                     STR_10:	
   645  0830  3444               	retlw	68	;'D'
   646  0831  344F               	retlw	79	;'O'
   647  0832  344D               	retlw	77	;'M'
   648  0833  3449               	retlw	73	;'I'
   649  0834  344E               	retlw	78	;'N'
   650  0835  3447               	retlw	71	;'G'
   651  0836  344F               	retlw	79	;'O'
   652  0837  3420               	retlw	32	;' '
   653  0838  3420               	retlw	32	;' '
   654  0839  3400               	retlw	0
   655  083A                     STR_8:	
   656  083A  3456               	retlw	86	;'V'
   657  083B  3449               	retlw	73	;'I'
   658  083C  3445               	retlw	69	;'E'
   659  083D  3452               	retlw	82	;'R'
   660  083E  344E               	retlw	78	;'N'
   661  083F  3445               	retlw	69	;'E'
   662  0840  3453               	retlw	83	;'S'
   663  0841  3420               	retlw	32	;' '
   664  0842  3420               	retlw	32	;' '
   665  0843  3400               	retlw	0
   666  0844                     STR_6:	
   667  0844  344D               	retlw	77	;'M'
   668  0845  3449               	retlw	73	;'I'
   669  0846  3445               	retlw	69	;'E'
   670  0847  3452               	retlw	82	;'R'
   671  0848  3443               	retlw	67	;'C'
   672  0849  344F               	retlw	79	;'O'
   673  084A  344C               	retlw	76	;'L'
   674  084B  3445               	retlw	69	;'E'
   675  084C  3453               	retlw	83	;'S'
   676  084D  3400               	retlw	0
   677  084E                     STR_23:	
   678  084E  3448               	retlw	72	;'H'
   679  084F  344F               	retlw	79	;'O'
   680  0850  3452               	retlw	82	;'R'
   681  0851  3441               	retlw	65	;'A'
   682  0852  343A               	retlw	58	;':'
   683  0853  3420               	retlw	32	;' '
   684  0854  3400               	retlw	0
   685  0855                     STR_2:	
   686  0855  3445               	retlw	69	;'E'
   687  0856  3473               	retlw	115	;'s'
   688  0857  3470               	retlw	112	;'p'
   689  0858  3465               	retlw	101	;'e'
   690  0859  3472               	retlw	114	;'r'
   691  085A  3465               	retlw	101	;'e'
   692  085B  3400               	retlw	0
   693  085C                     STR_24:	
   694  085C  3444               	retlw	68	;'D'
   695  085D  3449               	retlw	73	;'I'
   696  085E  3441               	retlw	65	;'A'
   697  085F  343A               	retlw	58	;':'
   698  0860  3420               	retlw	32	;' '
   699  0861  3400               	retlw	0
   700  0862                     STR_14:	
   701  0862  3432               	retlw	50	;'2'
   702  0863  3431               	retlw	49	;'1'
   703  0864  343A               	retlw	58	;':'
   704  0865  3430               	retlw	48	;'0'
   705  0866  3430               	retlw	48	;'0'
   706  0867  3400               	retlw	0
   707  0868                     STR_13:	
   708  0868  3432               	retlw	50	;'2'
   709  0869  3432               	retlw	50	;'2'
   710  086A  343A               	retlw	58	;':'
   711  086B  3430               	retlw	48	;'0'
   712  086C  3430               	retlw	48	;'0'
   713  086D  3400               	retlw	0
   714  086E                     STR_12:	
   715  086E  3432               	retlw	50	;'2'
   716  086F  3433               	retlw	51	;'3'
   717  0870  342E               	retlw	46	;'.'
   718  0871  3435               	retlw	53	;'5'
   719  0872  3430               	retlw	48	;'0'
   720  0873  3400               	retlw	0
   721  0874                     STR_35:	
   722  0874  342E               	retlw	46	;'.'
   723  0875  3425               	retlw	37	;'%'
   724  0876  3464               	retlw	100	;'d'
   725  0877  3430               	retlw	48	;'0'
   726  0878  3400               	retlw	0
   727  0879                     STR_36:	
   728  0879  342E               	retlw	46	;'.'
   729  087A  3425               	retlw	37	;'%'
   730  087B  3464               	retlw	100	;'d'
   731  087C  3400               	retlw	0
   732  07DB                     
   733                           ; #config settings
   734  0000                     
   735                           	psect	cinit
   736  000F                     start_initialization:	
   737  000F                     __initialization:	
   738                           
   739                           ; Initialize objects allocated to BANK0
   740  000F  160A  118A  25ED  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   741  0014  00E8               	movwf	__pdataBANK0& (0+127)
   742  0015  160A  118A  25EE  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   743  001A  00E9               	movwf	(__pdataBANK0+1)& (0+127)
   744  001B  160A  118A  25EF  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   745  0020  00EA               	movwf	(__pdataBANK0+2)& (0+127)
   746  0021  160A  118A  25F0  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   747  0026  00EB               	movwf	(__pdataBANK0+3)& (0+127)
   748  0027  160A  118A  25F1  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   749  002C  00EC               	movwf	(__pdataBANK0+4)& (0+127)
   750                           
   751                           ; Clear objects allocated to BANK0
   752  002D  1383               	bcf	3,7	;select IRP bank0
   753  002E  3020               	movlw	low __pbssBANK0
   754  002F  0084               	movwf	4
   755  0030  3047               	movlw	low (__pbssBANK0+39)
   756  0031  160A  118A  2615   	fcall	clear_ram0
   757                           
   758                           ; Clear objects allocated to COMMON
   759  0034  01F8               	clrf	__pbssCOMMON& (0+127)
   760  0035  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   761  0036  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   762  0037                     end_of_initialization:	
   763                           ;End of C runtime variable initialization code
   764                           
   765  0037                     __end_of__initialization:	
   766  0037  0183               	clrf	3
   767  0038  120A  118A  283B   	ljmp	_main	;jump to C main() function
   768                           
   769                           	psect	bssCOMMON
   770  0078                     __pbssCOMMON:	
   771  0078                     _k:	
   772  0078                     	ds	1
   773  0079                     _day1:	
   774  0079                     	ds	1
   775  007A                     _state:	
   776  007A                     	ds	1
   777                           
   778                           	psect	bssBANK0
   779  0020                     __pbssBANK0:	
   780  0020                     _passwordu:	
   781  0020                     	ds	5
   782  0025                     _day2:	
   783  0025                     	ds	2
   784  0027                     _newmin:	
   785  0027                     	ds	1
   786  0028                     _newhour:	
   787  0028                     	ds	1
   788  0029                     _seguridad:	
   789  0029                     	ds	1
   790  002A                     _min:	
   791  002A                     	ds	1
   792  002B                     _hour:	
   793  002B                     	ds	1
   794  002C                     _val:	
   795  002C                     	ds	1
   796  002D                     _cont:	
   797  002D                     	ds	1
   798  002E                     _bank:	
   799  002E                     	ds	1
   800  002F                     _alarm:	
   801  002F                     	ds	1
   802  0030                     _change4:	
   803  0030                     	ds	1
   804  0031                     _change3:	
   805  0031                     	ds	1
   806  0032                     _change2:	
   807  0032                     	ds	1
   808  0033                     _change1:	
   809  0033                     	ds	1
   810  0034                     _change:	
   811  0034                     	ds	1
   812  0035                     _j:	
   813  0035                     	ds	1
   814  0036                     _i:	
   815  0036                     	ds	1
   816  0037                     _IR:	
   817  0037                     	ds	1
   818  0038                     _PIR:	
   819  0038                     	ds	1
   820  0039                     _trip:	
   821  0039                     	ds	1
   822  003A                     _door:	
   823  003A                     	ds	1
   824  003B                     _temp:	
   825  003B                     	ds	6
   826  0041                     _time:	
   827  0041                     	ds	6
   828                           
   829                           	psect	dataBANK0
   830  0068                     __pdataBANK0:	
   831  0068                     _password:	
   832  0068                     	ds	5
   833                           
   834                           	psect	clrtext
   835  1615                     clear_ram0:	
   836                           ;	Called with FSR containing the base address, and
   837                           ;	W with the last address+1
   838                           
   839  1615  0064               	clrwdt	;clear the watchdog before getting into this loop
   840  1616                     clrloop0:	
   841  1616  0180               	clrf	0	;clear RAM location pointed to by FSR
   842  1617  0A84               	incf	4,f	;increment pointer
   843  1618  0604               	xorwf	4,w	;XOR with final address
   844  1619  1903               	btfsc	3,2	;have we reached the end yet?
   845  161A  3400               	retlw	0	;all done for this memory range, return
   846  161B  0604               	xorwf	4,w	;XOR again to restore value
   847  161C  2E16               	goto	clrloop0	;do the next byte
   848                           
   849                           	psect	cstackBANK1
   850  00A0                     __pcstackBANK1:	
   851  00A0                     ??_main:	
   852                           
   853                           ; 1 bytes @ 0x0
   854  00A0                     	ds	6
   855                           
   856                           	psect	cstackCOMMON
   857  0070                     __pcstackCOMMON:	
   858  0070                     ?_setup:	
   859  0070                     ?_get_temp:	
   860                           ; 1 bytes @ 0x0
   861                           
   862  0070                     ?_get_hall:	
   863                           ; 1 bytes @ 0x0
   864                           
   865  0070                     ?_get_tripwire:	
   866                           ; 1 bytes @ 0x0
   867                           
   868  0070                     ?_get_PIR:	
   869                           ; 1 bytes @ 0x0
   870                           
   871  0070                     ?_get_IR:	
   872                           ; 1 bytes @ 0x0
   873                           
   874  0070                     ?_get_time:	
   875                           ; 1 bytes @ 0x0
   876                           
   877  0070                     ?_get_day:	
   878                           ; 1 bytes @ 0x0
   879                           
   880  0070                     ?_open_door:	
   881                           ; 1 bytes @ 0x0
   882                           
   883  0070                     ?_close_door:	
   884                           ; 1 bytes @ 0x0
   885                           
   886  0070                     ?_I2C_Master_Wait:	
   887                           ; 1 bytes @ 0x0
   888                           
   889  0070                     ?_I2C_Master_Start:	
   890                           ; 1 bytes @ 0x0
   891                           
   892  0070                     ?_I2C_Master_RepeatedStart:	
   893                           ; 1 bytes @ 0x0
   894                           
   895  0070                     ?_I2C_Master_Stop:	
   896                           ; 1 bytes @ 0x0
   897                           
   898  0070                     ?_Lcd_Port:	
   899                           ; 1 bytes @ 0x0
   900                           
   901  0070                     ?_Lcd_Cmd:	
   902                           ; 1 bytes @ 0x0
   903                           
   904  0070                     ?_Lcd_Clear:	
   905                           ; 1 bytes @ 0x0
   906                           
   907  0070                     ?_Lcd_Init:	
   908                           ; 1 bytes @ 0x0
   909                           
   910  0070                     ?_Lcd_Write_Char:	
   911                           ; 1 bytes @ 0x0
   912                           
   913  0070                     ?_Lcd_Shift_Right:	
   914                           ; 1 bytes @ 0x0
   915                           
   916  0070                     ?_Lcd_Shift_Left:	
   917                           ; 1 bytes @ 0x0
   918                           
   919  0070                     ?_initOscilador:	
   920                           ; 1 bytes @ 0x0
   921                           
   922  0070                     ?_UART_TX_Empty:	
   923                           ; 1 bytes @ 0x0
   924                           
   925  0070                     ?_UART_Write:	
   926                           ; 1 bytes @ 0x0
   927                           
   928  0070                     ?_manual_pwm:	
   929                           ; 1 bytes @ 0x0
   930                           
   931  0070                     ??_manual_pwm:	
   932                           ; 1 bytes @ 0x0
   933                           
   934  0070                     ?_main:	
   935                           ; 1 bytes @ 0x0
   936                           
   937                           
   938                           ; 1 bytes @ 0x0
   939  0070                     	ds	3
   940  0073                     ?_strcat:	
   941  0073                     ??_I2C_Master_Wait:	
   942                           ; 1 bytes @ 0x3
   943                           
   944  0073                     ??_I2C_Master_Start:	
   945                           ; 1 bytes @ 0x3
   946                           
   947  0073                     ??_I2C_Master_RepeatedStart:	
   948                           ; 1 bytes @ 0x3
   949                           
   950  0073                     ??_I2C_Master_Stop:	
   951                           ; 1 bytes @ 0x3
   952                           
   953  0073                     ?_I2C_Master_Write:	
   954                           ; 1 bytes @ 0x3
   955                           
   956  0073                     ??_Lcd_Port:	
   957                           ; 1 bytes @ 0x3
   958                           
   959  0073                     ??_initOscilador:	
   960                           ; 1 bytes @ 0x3
   961                           
   962  0073                     ??_UART_TX_Empty:	
   963                           ; 1 bytes @ 0x3
   964                           
   965  0073                     ??_UART_Write:	
   966                           ; 1 bytes @ 0x3
   967                           
   968  0073                     ?___bmul:	
   969                           ; 1 bytes @ 0x3
   970                           
   971  0073                     ??___lldiv:	
   972                           ; 1 bytes @ 0x3
   973                           
   974  0073                     ??___aldiv:	
   975                           ; 1 bytes @ 0x3
   976                           
   977  0073                     ?_strcmp:	
   978                           ; 1 bytes @ 0x3
   979                           
   980  0073                     ?_I2C_Master_Read:	
   981                           ; 2 bytes @ 0x3
   982                           
   983  0073                     ?___awdiv:	
   984                           ; 2 bytes @ 0x3
   985                           
   986  0073                     ?___awmod:	
   987                           ; 2 bytes @ 0x3
   988                           
   989  0073                     ?___lwdiv:	
   990                           ; 2 bytes @ 0x3
   991                           
   992  0073                     Lcd_Port@a:	
   993                           ; 2 bytes @ 0x3
   994                           
   995  0073                     UART_Write@data:	
   996                           ; 1 bytes @ 0x3
   997                           
   998  0073                     ___bmul@multiplicand:	
   999                           ; 1 bytes @ 0x3
  1000                           
  1001  0073                     strcat@from:	
  1002                           ; 1 bytes @ 0x3
  1003                           
  1004  0073                     I2C_Master_Write@d:	
  1005                           ; 1 bytes @ 0x3
  1006                           
  1007  0073                     I2C_Master_Read@a:	
  1008                           ; 2 bytes @ 0x3
  1009                           
  1010  0073                     ___awdiv@divisor:	
  1011                           ; 2 bytes @ 0x3
  1012                           
  1013  0073                     ___awmod@divisor:	
  1014                           ; 2 bytes @ 0x3
  1015                           
  1016  0073                     ___lwdiv@divisor:	
  1017                           ; 2 bytes @ 0x3
  1018                           
  1019  0073                     strcmp@s2:	
  1020                           ; 2 bytes @ 0x3
  1021                           
  1022                           
  1023                           ; 2 bytes @ 0x3
  1024  0073                     	ds	1
  1025  0074                     ??_strcat:	
  1026  0074                     ??_I2C_Master_Init:	
  1027                           ; 1 bytes @ 0x4
  1028                           
  1029  0074                     ??_Lcd_Cmd:	
  1030                           ; 1 bytes @ 0x4
  1031                           
  1032  0074                     ??_Lcd_Write_Char:	
  1033                           ; 1 bytes @ 0x4
  1034                           
  1035  0074                     ??___bmul:	
  1036                           ; 1 bytes @ 0x4
  1037                           
  1038  0074                     UART_Init@x:	
  1039                           ; 1 bytes @ 0x4
  1040                           
  1041                           
  1042                           ; 2 bytes @ 0x4
  1043  0074                     	ds	1
  1044  0075                     ??_open_door:	
  1045  0075                     ??_close_door:	
  1046                           ; 1 bytes @ 0x5
  1047                           
  1048  0075                     ??_strcmp:	
  1049                           ; 1 bytes @ 0x5
  1050                           
  1051  0075                     ?_write_RTC:	
  1052                           ; 1 bytes @ 0x5
  1053                           
  1054  0075                     ??_I2C_Master_Write:	
  1055                           ; 1 bytes @ 0x5
  1056                           
  1057  0075                     ??_I2C_Master_Read:	
  1058                           ; 1 bytes @ 0x5
  1059                           
  1060  0075                     Lcd_Write_Char@temp:	
  1061                           ; 1 bytes @ 0x5
  1062                           
  1063  0075                     initOscilador@option:	
  1064                           ; 1 bytes @ 0x5
  1065                           
  1066  0075                     write_RTC@minutes:	
  1067                           ; 1 bytes @ 0x5
  1068                           
  1069  0075                     ___bmul@product:	
  1070                           ; 1 bytes @ 0x5
  1071                           
  1072  0075                     strcat@to:	
  1073                           ; 1 bytes @ 0x5
  1074                           
  1075  0075                     ___awdiv@dividend:	
  1076                           ; 1 bytes @ 0x5
  1077                           
  1078  0075                     ___awmod@dividend:	
  1079                           ; 2 bytes @ 0x5
  1080                           
  1081  0075                     ___lwdiv@dividend:	
  1082                           ; 2 bytes @ 0x5
  1083                           
  1084                           
  1085                           ; 2 bytes @ 0x5
  1086  0075                     	ds	1
  1087  0076                     Lcd_Cmd@a:	
  1088  0076                     Lcd_Write_Char@y:	
  1089                           ; 1 bytes @ 0x6
  1090                           
  1091  0076                     write_RTC@day:	
  1092                           ; 1 bytes @ 0x6
  1093                           
  1094  0076                     ___bmul@multiplier:	
  1095                           ; 1 bytes @ 0x6
  1096                           
  1097  0076                     strcat@cp:	
  1098                           ; 1 bytes @ 0x6
  1099                           
  1100                           
  1101                           ; 1 bytes @ 0x6
  1102  0076                     	ds	1
  1103  0077                     ??_get_hall:	
  1104  0077                     ??_get_tripwire:	
  1105                           ; 1 bytes @ 0x7
  1106                           
  1107  0077                     ??_get_PIR:	
  1108                           ; 1 bytes @ 0x7
  1109                           
  1110  0077                     ??_get_IR:	
  1111                           ; 1 bytes @ 0x7
  1112                           
  1113  0077                     ??_get_day:	
  1114                           ; 1 bytes @ 0x7
  1115                           
  1116  0077                     ??_Lcd_Clear:	
  1117                           ; 1 bytes @ 0x7
  1118                           
  1119  0077                     ?_Lcd_Set_Cursor:	
  1120                           ; 1 bytes @ 0x7
  1121                           
  1122  0077                     ??_Lcd_Shift_Right:	
  1123                           ; 1 bytes @ 0x7
  1124                           
  1125  0077                     ??_Lcd_Shift_Left:	
  1126                           ; 1 bytes @ 0x7
  1127                           
  1128  0077                     ??___awdiv:	
  1129                           ; 1 bytes @ 0x7
  1130                           
  1131  0077                     ??___awmod:	
  1132                           ; 1 bytes @ 0x7
  1133                           
  1134  0077                     ??___lwdiv:	
  1135                           ; 1 bytes @ 0x7
  1136                           
  1137  0077                     Lcd_Set_Cursor@b:	
  1138                           ; 1 bytes @ 0x7
  1139                           
  1140  0077                     Lcd_Write_Char@a:	
  1141                           ; 1 bytes @ 0x7
  1142                           
  1143  0077                     write_RTC@hour:	
  1144                           ; 1 bytes @ 0x7
  1145                           
  1146                           
  1147                           ; 1 bytes @ 0x7
  1148  0077                     	ds	1
  1149  0078                     ??_setup:	
  1150                           
  1151                           	psect	cstackBANK0
  1152  0047                     __pcstackBANK0:	
  1153                           ; 1 bytes @ 0x8
  1154                           
  1155  0047                     ??_write_RTC:	
  1156  0047                     ??_Lcd_Set_Cursor:	
  1157                           ; 1 bytes @ 0x0
  1158                           
  1159  0047                     ??_Lcd_Init:	
  1160                           ; 1 bytes @ 0x0
  1161                           
  1162  0047                     ?_Lcd_Write_String:	
  1163                           ; 1 bytes @ 0x0
  1164                           
  1165  0047                     ?___lldiv:	
  1166                           ; 1 bytes @ 0x0
  1167                           
  1168  0047                     ?___aldiv:	
  1169                           ; 4 bytes @ 0x0
  1170                           
  1171  0047                     ___awdiv@counter:	
  1172                           ; 4 bytes @ 0x0
  1173                           
  1174  0047                     ___awmod@counter:	
  1175                           ; 1 bytes @ 0x0
  1176                           
  1177  0047                     ___lwdiv@counter:	
  1178                           ; 1 bytes @ 0x0
  1179                           
  1180  0047                     strcmp@r:	
  1181                           ; 1 bytes @ 0x0
  1182                           
  1183  0047                     I2C_Master_Read@temp:	
  1184                           ; 1 bytes @ 0x0
  1185                           
  1186  0047                     Lcd_Write_String@a:	
  1187                           ; 2 bytes @ 0x0
  1188                           
  1189  0047                     ___lldiv@divisor:	
  1190                           ; 2 bytes @ 0x0
  1191                           
  1192  0047                     ___aldiv@divisor:	
  1193                           ; 4 bytes @ 0x0
  1194                           
  1195                           
  1196                           ; 4 bytes @ 0x0
  1197  0047                     	ds	1
  1198  0048                     ___awdiv@sign:	
  1199  0048                     ___awmod@sign:	
  1200                           ; 1 bytes @ 0x1
  1201                           
  1202  0048                     strcmp@s1:	
  1203                           ; 1 bytes @ 0x1
  1204                           
  1205  0048                     ___lwdiv@quotient:	
  1206                           ; 1 bytes @ 0x1
  1207                           
  1208                           
  1209                           ; 2 bytes @ 0x1
  1210  0048                     	ds	1
  1211  0049                     ??_get_time:	
  1212  0049                     ??_Lcd_Write_String:	
  1213                           ; 1 bytes @ 0x2
  1214                           
  1215  0049                     Lcd_Set_Cursor@a:	
  1216                           ; 1 bytes @ 0x2
  1217                           
  1218  0049                     get_day@d:	
  1219                           ; 1 bytes @ 0x2
  1220                           
  1221  0049                     get_hall@key:	
  1222                           ; 1 bytes @ 0x2
  1223                           
  1224  0049                     get_tripwire@trip:	
  1225                           ; 1 bytes @ 0x2
  1226                           
  1227  0049                     get_PIR@PIR:	
  1228                           ; 1 bytes @ 0x2
  1229                           
  1230  0049                     get_IR@IR:	
  1231                           ; 1 bytes @ 0x2
  1232                           
  1233  0049                     ___awdiv@quotient:	
  1234                           ; 1 bytes @ 0x2
  1235                           
  1236                           
  1237                           ; 2 bytes @ 0x2
  1238  0049                     	ds	1
  1239  004A                     ?___lwmod:	
  1240  004A                     Lcd_Set_Cursor@z:	
  1241                           ; 2 bytes @ 0x3
  1242                           
  1243  004A                     ___lwmod@divisor:	
  1244                           ; 1 bytes @ 0x3
  1245                           
  1246                           
  1247                           ; 2 bytes @ 0x3
  1248  004A                     	ds	1
  1249  004B                     Lcd_Set_Cursor@y:	
  1250  004B                     get_time@hour:	
  1251                           ; 1 bytes @ 0x4
  1252                           
  1253  004B                     ___lldiv@dividend:	
  1254                           ; 1 bytes @ 0x4
  1255                           
  1256  004B                     ___aldiv@dividend:	
  1257                           ; 4 bytes @ 0x4
  1258                           
  1259                           
  1260                           ; 4 bytes @ 0x4
  1261  004B                     	ds	1
  1262  004C                     Lcd_Set_Cursor@temp:	
  1263  004C                     get_time@min:	
  1264                           ; 1 bytes @ 0x5
  1265                           
  1266  004C                     Lcd_Write_String@i:	
  1267                           ; 1 bytes @ 0x5
  1268                           
  1269  004C                     ___lwmod@dividend:	
  1270                           ; 2 bytes @ 0x5
  1271                           
  1272                           
  1273                           ; 2 bytes @ 0x5
  1274  004C                     	ds	1
  1275  004D                     get_time@time_string:	
  1276                           
  1277                           ; 1 bytes @ 0x6
  1278  004D                     	ds	1
  1279  004E                     ??___lwmod:	
  1280                           
  1281                           ; 1 bytes @ 0x7
  1282  004E                     	ds	1
  1283  004F                     ___aldiv@counter:	
  1284  004F                     ___lwmod@counter:	
  1285                           ; 1 bytes @ 0x8
  1286                           
  1287  004F                     ___lldiv@quotient:	
  1288                           ; 1 bytes @ 0x8
  1289                           
  1290                           
  1291                           ; 4 bytes @ 0x8
  1292  004F                     	ds	1
  1293  0050                     ?_sprintf:	
  1294  0050                     ___aldiv@sign:	
  1295                           ; 2 bytes @ 0x9
  1296                           
  1297  0050                     sprintf@f:	
  1298                           ; 1 bytes @ 0x9
  1299                           
  1300                           
  1301                           ; 2 bytes @ 0x9
  1302  0050                     	ds	1
  1303  0051                     ___aldiv@quotient:	
  1304                           
  1305                           ; 4 bytes @ 0xA
  1306  0051                     	ds	2
  1307  0053                     ___lldiv@counter:	
  1308                           
  1309                           ; 1 bytes @ 0xC
  1310  0053                     	ds	1
  1311  0054                     ??_sprintf:	
  1312  0054                     ?_I2C_Master_Init:	
  1313                           ; 1 bytes @ 0xD
  1314                           
  1315  0054                     I2C_Master_Init@c:	
  1316                           ; 1 bytes @ 0xD
  1317                           
  1318                           
  1319                           ; 4 bytes @ 0xD
  1320  0054                     	ds	1
  1321  0055                     ?_UART_Init:	
  1322  0055                     UART_Init@baudrate:	
  1323                           ; 1 bytes @ 0xE
  1324                           
  1325                           
  1326                           ; 4 bytes @ 0xE
  1327  0055                     	ds	3
  1328  0058                     sprintf@ap:	
  1329                           
  1330                           ; 1 bytes @ 0x11
  1331  0058                     	ds	1
  1332  0059                     ??_UART_Init:	
  1333  0059                     sprintf@flag:	
  1334                           ; 1 bytes @ 0x12
  1335                           
  1336                           
  1337                           ; 1 bytes @ 0x12
  1338  0059                     	ds	1
  1339  005A                     sprintf@prec:	
  1340                           
  1341                           ; 1 bytes @ 0x13
  1342  005A                     	ds	1
  1343  005B                     sprintf@val:	
  1344                           
  1345                           ; 2 bytes @ 0x14
  1346  005B                     	ds	2
  1347  005D                     sprintf@sp:	
  1348                           
  1349                           ; 1 bytes @ 0x16
  1350  005D                     	ds	1
  1351  005E                     sprintf@c:	
  1352                           
  1353                           ; 1 bytes @ 0x17
  1354  005E                     	ds	1
  1355  005F                     ??_get_temp:	
  1356                           
  1357                           ; 1 bytes @ 0x18
  1358  005F                     	ds	3
  1359  0062                     get_temp@decimal:	
  1360                           
  1361                           ; 3 bytes @ 0x1B
  1362  0062                     	ds	3
  1363  0065                     get_temp@tempMSB:	
  1364                           
  1365                           ; 1 bytes @ 0x1E
  1366  0065                     	ds	1
  1367  0066                     get_temp@temp_string:	
  1368                           
  1369                           ; 1 bytes @ 0x1F
  1370  0066                     	ds	1
  1371  0067                     get_temp@tempLSB:	
  1372                           
  1373                           ; 1 bytes @ 0x20
  1374  0067                     	ds	1
  1375                           
  1376                           	psect	maintext
  1377  003B                     __pmaintext:	
  1378 ;;
  1379 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1380 ;;
  1381 ;; *************** function _main *****************
  1382 ;; Defined at:
  1383 ;;		line 75 in file "mainMaster.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;		None
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;		None
  1388 ;; Return value:  Size  Location     Type
  1389 ;;                  1    wreg      void 
  1390 ;; Registers used:
  1391 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1392 ;; Tracked objects:
  1393 ;;		On entry : B00/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1397 ;;      Params:         0       0       0       0       0
  1398 ;;      Locals:         0       0       0       0       0
  1399 ;;      Temps:          0       0       6       0       0
  1400 ;;      Totals:         0       0       6       0       0
  1401 ;;Total ram usage:        6 bytes
  1402 ;; Hardware stack levels required when called:    5
  1403 ;; This function calls:
  1404 ;;		_Lcd_Clear
  1405 ;;		_Lcd_Set_Cursor
  1406 ;;		_Lcd_Shift_Left
  1407 ;;		_Lcd_Shift_Right
  1408 ;;		_Lcd_Write_Char
  1409 ;;		_Lcd_Write_String
  1410 ;;		_UART_TX_Empty
  1411 ;;		_UART_Write
  1412 ;;		___awdiv
  1413 ;;		___awmod
  1414 ;;		___bmul
  1415 ;;		_close_door
  1416 ;;		_get_IR
  1417 ;;		_get_PIR
  1418 ;;		_get_day
  1419 ;;		_get_hall
  1420 ;;		_get_temp
  1421 ;;		_get_time
  1422 ;;		_get_tripwire
  1423 ;;		_open_door
  1424 ;;		_setup
  1425 ;;		_strcmp
  1426 ;;		_write_RTC
  1427 ;; This function is called by:
  1428 ;;		Startup code after reset
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           
  1433                           ;psect for function _main
  1434  003B                     _main:	
  1435                           
  1436                           ;mainMaster.c: 76:     setup();
  1437                           
  1438                           ;incstack = 0
  1439                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1440  003B  120A  158A  230C  120A  118A  	fcall	_setup
  1441                           
  1442                           ;mainMaster.c: 77:     Lcd_Clear();
  1443  0040  160A  118A  2627  120A  118A  	fcall	_Lcd_Clear
  1444                           
  1445                           ;mainMaster.c: 78:     Lcd_Set_Cursor(1,1);
  1446  0045  01F7               	clrf	Lcd_Set_Cursor@b
  1447  0046  0AF7               	incf	Lcd_Set_Cursor@b,f
  1448  0047  3001               	movlw	1
  1449  0048  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  1450                           
  1451                           ;mainMaster.c: 80:     Lcd_Write_String("Iniciando Sistema de Seguridad");
  1452  004D  301C               	movlw	low (STR_1| (0+32768))
  1453  004E  1283               	bcf	3,5	;RP0=0, select bank0
  1454  004F  1303               	bcf	3,6	;RP1=0, select bank0
  1455  0050  00C7               	movwf	Lcd_Write_String@a
  1456  0051  3087               	movlw	high (STR_1| (0+32768))
  1457  0052  00C8               	movwf	Lcd_Write_String@a+1
  1458  0053  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  1459                           
  1460                           ;mainMaster.c: 81:     for (k = 0; k < 16; k++){
  1461  0058  01F8               	clrf	_k
  1462  0059                     l4008:	
  1463                           
  1464                           ;mainMaster.c: 82:         Lcd_Shift_Left();
  1465  0059  160A  118A  2632  120A  118A  	fcall	_Lcd_Shift_Left
  1466                           
  1467                           ;mainMaster.c: 83:         _delay((unsigned long)((300)*(8000000/4000.0)));
  1468  005E  3004               	movlw	4
  1469  005F  1683               	bsf	3,5	;RP0=1, select bank1
  1470  0060  1303               	bcf	3,6	;RP1=0, select bank1
  1471  0061  00A2               	movwf	(??_main^(0+128)+2)
  1472  0062  300C               	movlw	12
  1473  0063  00A1               	movwf	(??_main^(0+128)+1)
  1474  0064  3033               	movlw	51
  1475  0065  00A0               	movwf	??_main^(0+128)
  1476  0066                     u4957:	
  1477  0066  0BA0               	decfsz	??_main^(0+128),f
  1478  0067  2866               	goto	u4957
  1479  0068  0BA1               	decfsz	(??_main^(0+128)+1),f
  1480  0069  2866               	goto	u4957
  1481  006A  0BA2               	decfsz	(??_main^(0+128)+2),f
  1482  006B  2866               	goto	u4957
  1483                           
  1484                           ;mainMaster.c: 84:     }
  1485  006C  3001               	movlw	1
  1486  006D  1683               	bsf	3,5	;RP0=1, select bank1
  1487  006E  1303               	bcf	3,6	;RP1=0, select bank1
  1488  006F  00A0               	movwf	??_main^(0+128)
  1489  0070  0820               	movf	??_main^(0+128),w
  1490  0071  07F8               	addwf	_k,f
  1491  0072  3010               	movlw	16
  1492  0073  0278               	subwf	_k,w
  1493  0074  1C03               	skipc
  1494  0075  2859               	goto	l4008
  1495                           
  1496                           ;mainMaster.c: 85:     for (k = 0; k < 16; k++){
  1497  0076  01F8               	clrf	_k
  1498  0077                     l4022:	
  1499                           
  1500                           ;mainMaster.c: 86:         Lcd_Shift_Right();
  1501  0077  160A  118A  263D  120A  118A  	fcall	_Lcd_Shift_Right
  1502                           
  1503                           ;mainMaster.c: 87:         _delay((unsigned long)((300)*(8000000/4000.0)));
  1504  007C  3004               	movlw	4
  1505  007D  1683               	bsf	3,5	;RP0=1, select bank1
  1506  007E  1303               	bcf	3,6	;RP1=0, select bank1
  1507  007F  00A2               	movwf	(??_main^(0+128)+2)
  1508  0080  300C               	movlw	12
  1509  0081  00A1               	movwf	(??_main^(0+128)+1)
  1510  0082  3033               	movlw	51
  1511  0083  00A0               	movwf	??_main^(0+128)
  1512  0084                     u4967:	
  1513  0084  0BA0               	decfsz	??_main^(0+128),f
  1514  0085  2884               	goto	u4967
  1515  0086  0BA1               	decfsz	(??_main^(0+128)+1),f
  1516  0087  2884               	goto	u4967
  1517  0088  0BA2               	decfsz	(??_main^(0+128)+2),f
  1518  0089  2884               	goto	u4967
  1519                           
  1520                           ;mainMaster.c: 88:     }
  1521  008A  3001               	movlw	1
  1522  008B  1683               	bsf	3,5	;RP0=1, select bank1
  1523  008C  1303               	bcf	3,6	;RP1=0, select bank1
  1524  008D  00A0               	movwf	??_main^(0+128)
  1525  008E  0820               	movf	??_main^(0+128),w
  1526  008F  07F8               	addwf	_k,f
  1527  0090  3010               	movlw	16
  1528  0091  0278               	subwf	_k,w
  1529  0092  1C03               	skipc
  1530  0093  2877               	goto	l4022
  1531                           
  1532                           ;mainMaster.c: 89:     Lcd_Clear();
  1533  0094  160A  118A  2627  120A  118A  	fcall	_Lcd_Clear
  1534                           
  1535                           ;mainMaster.c: 90:     Lcd_Set_Cursor(1,1);
  1536  0099  01F7               	clrf	Lcd_Set_Cursor@b
  1537  009A  0AF7               	incf	Lcd_Set_Cursor@b,f
  1538  009B  3001               	movlw	1
  1539  009C  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  1540                           
  1541                           ;mainMaster.c: 92:     Lcd_Write_String("Espere");
  1542  00A1  3055               	movlw	low (STR_2| (0+32768))
  1543  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  1544  00A3  1303               	bcf	3,6	;RP1=0, select bank0
  1545  00A4  00C7               	movwf	Lcd_Write_String@a
  1546  00A5  3088               	movlw	high (STR_2| (0+32768))
  1547  00A6  00C8               	movwf	Lcd_Write_String@a+1
  1548  00A7  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  1549                           
  1550                           ;mainMaster.c: 93:     Lcd_Set_Cursor(2,1);
  1551  00AC  01F7               	clrf	Lcd_Set_Cursor@b
  1552  00AD  0AF7               	incf	Lcd_Set_Cursor@b,f
  1553  00AE  3002               	movlw	2
  1554  00AF  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  1555                           
  1556                           ;mainMaster.c: 94:     Lcd_Write_String("un momento");
  1557  00B4  30FD               	movlw	low (STR_3| (0+32768))
  1558  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  1559  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  1560  00B7  00C7               	movwf	Lcd_Write_String@a
  1561  00B8  3087               	movlw	high (STR_3| (0+32768))
  1562  00B9  00C8               	movwf	Lcd_Write_String@a+1
  1563  00BA  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  1564                           
  1565                           ;mainMaster.c: 95:     _delay((unsigned long)((4000)*(8000000/4000.0)));
  1566  00BF  3029               	movlw	41
  1567  00C0  1683               	bsf	3,5	;RP0=1, select bank1
  1568  00C1  1303               	bcf	3,6	;RP1=0, select bank1
  1569  00C2  00A2               	movwf	(??_main^(0+128)+2)
  1570  00C3  3096               	movlw	150
  1571  00C4  00A1               	movwf	(??_main^(0+128)+1)
  1572  00C5  307E               	movlw	126
  1573  00C6  00A0               	movwf	??_main^(0+128)
  1574  00C7                     u4977:	
  1575  00C7  0BA0               	decfsz	??_main^(0+128),f
  1576  00C8  28C7               	goto	u4977
  1577  00C9  0BA1               	decfsz	(??_main^(0+128)+1),f
  1578  00CA  28C7               	goto	u4977
  1579  00CB  0BA2               	decfsz	(??_main^(0+128)+2),f
  1580  00CC  28C7               	goto	u4977
  1581  00CD  0000               	nop
  1582                           
  1583                           ;mainMaster.c: 96:     Lcd_Clear();
  1584  00CE  160A  118A  2627  120A  118A  	fcall	_Lcd_Clear
  1585  00D3                     l4040:	
  1586                           
  1587                           ;mainMaster.c: 103:         get_temp(temp);
  1588  00D3  303B               	movlw	(low (_temp| 0))& (0+255)
  1589  00D4  120A  158A  2595  120A  118A  	fcall	_get_temp
  1590                           
  1591                           ;mainMaster.c: 104:         door = get_hall();
  1592  00D9  160A  118A  2728  120A  118A  	fcall	_get_hall
  1593  00DE  1683               	bsf	3,5	;RP0=1, select bank1
  1594  00DF  1303               	bcf	3,6	;RP1=0, select bank1
  1595  00E0  00A0               	movwf	??_main^(0+128)
  1596  00E1  0820               	movf	??_main^(0+128),w
  1597  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1598  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1599  00E4  00BA               	movwf	_door
  1600                           
  1601                           ;mainMaster.c: 105:         trip = get_tripwire();
  1602  00E5  160A  118A  274B  120A  118A  	fcall	_get_tripwire
  1603  00EA  1683               	bsf	3,5	;RP0=1, select bank1
  1604  00EB  1303               	bcf	3,6	;RP1=0, select bank1
  1605  00EC  00A0               	movwf	??_main^(0+128)
  1606  00ED  0820               	movf	??_main^(0+128),w
  1607  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  1608  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  1609  00F0  00B9               	movwf	_trip
  1610                           
  1611                           ;mainMaster.c: 106:         PIR = get_PIR();
  1612  00F1  160A  118A  2705  120A  118A  	fcall	_get_PIR
  1613  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  1614  00F7  1303               	bcf	3,6	;RP1=0, select bank1
  1615  00F8  00A0               	movwf	??_main^(0+128)
  1616  00F9  0820               	movf	??_main^(0+128),w
  1617  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  1618  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  1619  00FC  00B8               	movwf	_PIR
  1620                           
  1621                           ;mainMaster.c: 107:         IR = get_IR();
  1622  00FD  160A  118A  26E2  120A  118A  	fcall	_get_IR
  1623  0102  1683               	bsf	3,5	;RP0=1, select bank1
  1624  0103  1303               	bcf	3,6	;RP1=0, select bank1
  1625  0104  00A0               	movwf	??_main^(0+128)
  1626  0105  0820               	movf	??_main^(0+128),w
  1627  0106  1283               	bcf	3,5	;RP0=0, select bank0
  1628  0107  1303               	bcf	3,6	;RP1=0, select bank0
  1629  0108  00B7               	movwf	_IR
  1630                           
  1631                           ;mainMaster.c: 108:         get_time(time);
  1632  0109  3041               	movlw	(low (_time| 0))& (0+255)
  1633  010A  120A  158A  247D  120A  118A  	fcall	_get_time
  1634                           
  1635                           ;mainMaster.c: 109:         day1 = get_day();
  1636  010F  120A  158A  211B  120A  118A  	fcall	_get_day
  1637  0114  1683               	bsf	3,5	;RP0=1, select bank1
  1638  0115  1303               	bcf	3,6	;RP1=0, select bank1
  1639  0116  00A0               	movwf	??_main^(0+128)
  1640  0117  0820               	movf	??_main^(0+128),w
  1641  0118  00F9               	movwf	_day1
  1642                           
  1643                           ;mainMaster.c: 110:         bank = get_tripwire();
  1644  0119  160A  118A  274B  120A  118A  	fcall	_get_tripwire
  1645  011E  1683               	bsf	3,5	;RP0=1, select bank1
  1646  011F  1303               	bcf	3,6	;RP1=0, select bank1
  1647  0120  00A0               	movwf	??_main^(0+128)
  1648  0121  0820               	movf	??_main^(0+128),w
  1649  0122  1283               	bcf	3,5	;RP0=0, select bank0
  1650  0123  1303               	bcf	3,6	;RP1=0, select bank0
  1651  0124  00AE               	movwf	_bank
  1652                           
  1653                           ;mainMaster.c: 116:         if(PORTDbits.RD7 == 1){
  1654  0125  1F88               	btfss	8,7	;volatile
  1655  0126  2962               	goto	l323
  1656                           
  1657                           ;mainMaster.c: 118:             if (bank == 2){
  1658  0127  3002               	movlw	2
  1659  0128  062E               	xorwf	_bank,w
  1660  0129  1D03               	btfss	3,2
  1661  012A  2946               	goto	l4070
  1662                           
  1663                           ;mainMaster.c: 120:                 if (change1 == 0){
  1664  012B  0833               	movf	_change1,w
  1665  012C  1D03               	btfss	3,2
  1666  012D  2964               	goto	l4084
  1667                           
  1668                           ;mainMaster.c: 121:                     open_door();
  1669  012E  160A  118A  26A8  120A  118A  	fcall	_open_door
  1670                           
  1671                           ;mainMaster.c: 122:                     j = 0;
  1672  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1673  0134  1303               	bcf	3,6	;RP1=0, select bank0
  1674  0135  01B5               	clrf	_j
  1675  0136                     l4068:	
  1676                           ;mainMaster.c: 123:                     while(j < 50){
  1677                           
  1678                           
  1679                           ;mainMaster.c: 123:                     while(j < 50){
  1680  0136  3032               	movlw	50
  1681  0137  0235               	subwf	_j,w
  1682  0138  1803               	btfsc	3,0
  1683  0139  2943               	goto	l328
  1684                           
  1685                           ;mainMaster.c: 124:                         j++;
  1686  013A  3001               	movlw	1
  1687  013B  1683               	bsf	3,5	;RP0=1, select bank1
  1688  013C  1303               	bcf	3,6	;RP1=0, select bank1
  1689  013D  00A0               	movwf	??_main^(0+128)
  1690  013E  0820               	movf	??_main^(0+128),w
  1691  013F  1283               	bcf	3,5	;RP0=0, select bank0
  1692  0140  1303               	bcf	3,6	;RP1=0, select bank0
  1693  0141  07B5               	addwf	_j,f
  1694  0142  2936               	goto	l4068
  1695  0143                     l328:	
  1696                           
  1697                           ;mainMaster.c: 126:                     change1 = 1;
  1698  0143  01B3               	clrf	_change1
  1699  0144  0AB3               	incf	_change1,f
  1700  0145  2964               	goto	l4084
  1701  0146                     l4070:	
  1702  0146  3003               	movlw	3
  1703  0147  062E               	xorwf	_bank,w
  1704  0148  1D03               	btfss	3,2
  1705  0149  2964               	goto	l4084
  1706                           
  1707                           ;mainMaster.c: 130:                 if (change1 == 0){
  1708  014A  0833               	movf	_change1,w
  1709  014B  1D03               	btfss	3,2
  1710  014C  2964               	goto	l4084
  1711                           
  1712                           ;mainMaster.c: 131:                     close_door();
  1713  014D  160A  118A  268D  120A  118A  	fcall	_close_door
  1714                           
  1715                           ;mainMaster.c: 132:                     j = 0;
  1716  0152  1283               	bcf	3,5	;RP0=0, select bank0
  1717  0153  1303               	bcf	3,6	;RP1=0, select bank0
  1718  0154  01B5               	clrf	_j
  1719  0155                     l4080:	
  1720                           ;mainMaster.c: 133:                     while(j < 50){
  1721                           
  1722                           
  1723                           ;mainMaster.c: 133:                     while(j < 50){
  1724  0155  3032               	movlw	50
  1725  0156  0235               	subwf	_j,w
  1726  0157  1803               	btfsc	3,0
  1727  0158  2943               	goto	l328
  1728                           
  1729                           ;mainMaster.c: 134:                         j++;
  1730  0159  3001               	movlw	1
  1731  015A  1683               	bsf	3,5	;RP0=1, select bank1
  1732  015B  1303               	bcf	3,6	;RP1=0, select bank1
  1733  015C  00A0               	movwf	??_main^(0+128)
  1734  015D  0820               	movf	??_main^(0+128),w
  1735  015E  1283               	bcf	3,5	;RP0=0, select bank0
  1736  015F  1303               	bcf	3,6	;RP1=0, select bank0
  1737  0160  07B5               	addwf	_j,f
  1738  0161  2955               	goto	l4080
  1739  0162                     l323:	
  1740                           ;mainMaster.c: 139:         } else if(PORTDbits.RD7 == 0){
  1741                           
  1742  0162  1F88               	btfss	8,7	;volatile
  1743                           
  1744                           ;mainMaster.c: 140:             change1 = 0;
  1745  0163  01B3               	clrf	_change1
  1746  0164                     l4084:	
  1747                           
  1748                           ;mainMaster.c: 148:         if (alarm == 0 & seguridad == 1){
  1749  0164  082F               	movf	_alarm,w
  1750  0165  1D03               	btfss	3,2
  1751  0166  2974               	goto	l337
  1752  0167  0329               	decf	_seguridad,w
  1753  0168  1D03               	btfss	3,2
  1754  0169  2974               	goto	l337
  1755                           
  1756                           ;mainMaster.c: 149:             alarm = trip | PIR | IR;
  1757  016A  0839               	movf	_trip,w
  1758  016B  0438               	iorwf	_PIR,w
  1759  016C  0437               	iorwf	_IR,w
  1760  016D  1683               	bsf	3,5	;RP0=1, select bank1
  1761  016E  1303               	bcf	3,6	;RP1=0, select bank1
  1762  016F  00A0               	movwf	??_main^(0+128)
  1763  0170  0820               	movf	??_main^(0+128),w
  1764  0171  1283               	bcf	3,5	;RP0=0, select bank0
  1765  0172  1303               	bcf	3,6	;RP1=0, select bank0
  1766  0173  00AF               	movwf	_alarm
  1767  0174                     l337:	
  1768                           ;mainMaster.c: 150:         }
  1769                           
  1770                           
  1771                           ;mainMaster.c: 153:         if (alarm == 1){
  1772  0174  032F               	decf	_alarm,w
  1773  0175  1D03               	btfss	3,2
  1774  0176  2985               	goto	l338
  1775                           
  1776                           ;mainMaster.c: 154:             if (change2 == 0){
  1777  0177  0832               	movf	_change2,w
  1778  0178  1D03               	btfss	3,2
  1779  0179  2987               	goto	l4100
  1780                           
  1781                           ;mainMaster.c: 155:                 change2 = 1;
  1782  017A  01B2               	clrf	_change2
  1783  017B  0AB2               	incf	_change2,f
  1784                           
  1785                           ;mainMaster.c: 156:                 close_door();
  1786  017C  160A  118A  268D  120A  118A  	fcall	_close_door
  1787                           
  1788                           ;mainMaster.c: 157:                 PORTAbits.RA6 = 1;
  1789  0181  1283               	bcf	3,5	;RP0=0, select bank0
  1790  0182  1303               	bcf	3,6	;RP1=0, select bank0
  1791  0183  1705               	bsf	5,6	;volatile
  1792  0184  2987               	goto	l4100
  1793  0185                     l338:	
  1794                           
  1795                           ;mainMaster.c: 160:             PORTAbits.RA6 = 0;
  1796  0185  1305               	bcf	5,6	;volatile
  1797                           
  1798                           ;mainMaster.c: 161:             change2 = 0;
  1799  0186  01B2               	clrf	_change2
  1800  0187                     l4100:	
  1801                           
  1802                           ;mainMaster.c: 165:         if (seguridad == 1){
  1803  0187  0329               	decf	_seguridad,w
  1804  0188  1D03               	btfss	3,2
  1805  0189  299A               	goto	l4116
  1806                           
  1807                           ;mainMaster.c: 167:             if (PORTDbits.RD6 == 1){
  1808  018A  1F08               	btfss	8,6	;volatile
  1809  018B  2999               	goto	l4114
  1810                           
  1811                           ;mainMaster.c: 169:                 if (change3 == 0){
  1812  018C  0831               	movf	_change3,w
  1813  018D  1D03               	btfss	3,2
  1814  018E  299A               	goto	l4116
  1815                           
  1816                           ;mainMaster.c: 170:                     if (alarm == 0){
  1817  018F  082F               	movf	_alarm,w
  1818  0190  1D03               	btfss	3,2
  1819  0191  2995               	goto	l4110
  1820                           
  1821                           ;mainMaster.c: 171:                         alarm = 1;
  1822  0192  01AF               	clrf	_alarm
  1823  0193  0AAF               	incf	_alarm,f
  1824                           
  1825                           ;mainMaster.c: 172:                     }else {
  1826  0194  2996               	goto	l4112
  1827  0195                     l4110:	
  1828                           
  1829                           ;mainMaster.c: 173:                         alarm = 0;
  1830  0195  01AF               	clrf	_alarm
  1831  0196                     l4112:	
  1832                           
  1833                           ;mainMaster.c: 175:                     change3 = 1;
  1834  0196  01B1               	clrf	_change3
  1835  0197  0AB1               	incf	_change3,f
  1836  0198  299A               	goto	l4116
  1837  0199                     l4114:	
  1838                           
  1839                           ;mainMaster.c: 179:                 change3 = 0;
  1840  0199  01B1               	clrf	_change3
  1841  019A                     l4116:	
  1842                           
  1843                           ;mainMaster.c: 186:         SSPCONbits.SSPEN = 0;
  1844  019A  1294               	bcf	20,5	;volatile
  1845                           
  1846                           ;mainMaster.c: 187:         RCSTAbits.SPEN = 1;
  1847  019B  1798               	bsf	24,7	;volatile
  1848                           
  1849                           ;mainMaster.c: 190:         if (UART_TX_Empty()){
  1850  019C  160A  118A  25F2  120A  118A  	fcall	_UART_TX_Empty
  1851  01A1  3A00               	xorlw	0
  1852  01A2  1903               	skipnz
  1853  01A3  2A56               	goto	l4150
  1854                           
  1855                           ;mainMaster.c: 193:             UART_Write(temp[0]);
  1856  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  1857  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  1858  01A6  083B               	movf	_temp,w
  1859  01A7  160A  118A  261D  120A  118A  	fcall	_UART_Write
  1860                           
  1861                           ;mainMaster.c: 194:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1862  01AC  3003               	movlw	3
  1863  01AD  1683               	bsf	3,5	;RP0=1, select bank1
  1864  01AE  1303               	bcf	3,6	;RP1=0, select bank1
  1865  01AF  00A1               	movwf	(??_main^(0+128)+1)
  1866  01B0  3097               	movlw	151
  1867  01B1  00A0               	movwf	??_main^(0+128)
  1868  01B2                     u4987:	
  1869  01B2  0BA0               	decfsz	??_main^(0+128),f
  1870  01B3  29B2               	goto	u4987
  1871  01B4  0BA1               	decfsz	(??_main^(0+128)+1),f
  1872  01B5  29B2               	goto	u4987
  1873                           
  1874                           ;mainMaster.c: 195:             UART_Write(temp[1]);
  1875  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1876  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1877  01B8  083C               	movf	_temp+1,w
  1878  01B9  160A  118A  261D  120A  118A  	fcall	_UART_Write
  1879                           
  1880                           ;mainMaster.c: 196:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1881  01BE  3003               	movlw	3
  1882  01BF  1683               	bsf	3,5	;RP0=1, select bank1
  1883  01C0  1303               	bcf	3,6	;RP1=0, select bank1
  1884  01C1  00A1               	movwf	(??_main^(0+128)+1)
  1885  01C2  3097               	movlw	151
  1886  01C3  00A0               	movwf	??_main^(0+128)
  1887  01C4                     u4997:	
  1888  01C4  0BA0               	decfsz	??_main^(0+128),f
  1889  01C5  29C4               	goto	u4997
  1890  01C6  0BA1               	decfsz	(??_main^(0+128)+1),f
  1891  01C7  29C4               	goto	u4997
  1892                           
  1893                           ;mainMaster.c: 197:             UART_Write(temp[2]);
  1894  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  1895  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  1896  01CA  083D               	movf	_temp+2,w
  1897  01CB  160A  118A  261D  120A  118A  	fcall	_UART_Write
  1898                           
  1899                           ;mainMaster.c: 198:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1900  01D0  3003               	movlw	3
  1901  01D1  1683               	bsf	3,5	;RP0=1, select bank1
  1902  01D2  1303               	bcf	3,6	;RP1=0, select bank1
  1903  01D3  00A1               	movwf	(??_main^(0+128)+1)
  1904  01D4  3097               	movlw	151
  1905  01D5  00A0               	movwf	??_main^(0+128)
  1906  01D6                     u5007:	
  1907  01D6  0BA0               	decfsz	??_main^(0+128),f
  1908  01D7  29D6               	goto	u5007
  1909  01D8  0BA1               	decfsz	(??_main^(0+128)+1),f
  1910  01D9  29D6               	goto	u5007
  1911                           
  1912                           ;mainMaster.c: 199:             UART_Write(temp[3]);
  1913  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  1914  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  1915  01DC  083E               	movf	_temp+3,w
  1916  01DD  160A  118A  261D  120A  118A  	fcall	_UART_Write
  1917                           
  1918                           ;mainMaster.c: 200:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1919  01E2  3003               	movlw	3
  1920  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  1921  01E4  1303               	bcf	3,6	;RP1=0, select bank1
  1922  01E5  00A1               	movwf	(??_main^(0+128)+1)
  1923  01E6  3097               	movlw	151
  1924  01E7  00A0               	movwf	??_main^(0+128)
  1925  01E8                     u5017:	
  1926  01E8  0BA0               	decfsz	??_main^(0+128),f
  1927  01E9  29E8               	goto	u5017
  1928  01EA  0BA1               	decfsz	(??_main^(0+128)+1),f
  1929  01EB  29E8               	goto	u5017
  1930                           
  1931                           ;mainMaster.c: 201:             UART_Write(temp[4]);
  1932  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  1933  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  1934  01EE  083F               	movf	_temp+4,w
  1935  01EF  160A  118A  261D  120A  118A  	fcall	_UART_Write
  1936                           
  1937                           ;mainMaster.c: 202:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1938  01F4  3003               	movlw	3
  1939  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1940  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1941  01F7  00A1               	movwf	(??_main^(0+128)+1)
  1942  01F8  3097               	movlw	151
  1943  01F9  00A0               	movwf	??_main^(0+128)
  1944  01FA                     u5027:	
  1945  01FA  0BA0               	decfsz	??_main^(0+128),f
  1946  01FB  29FA               	goto	u5027
  1947  01FC  0BA1               	decfsz	(??_main^(0+128)+1),f
  1948  01FD  29FA               	goto	u5027
  1949                           
  1950                           ;mainMaster.c: 203:             UART_Write(door);
  1951  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  1952  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  1953  0200  083A               	movf	_door,w
  1954  0201  160A  118A  261D  120A  118A  	fcall	_UART_Write
  1955                           
  1956                           ;mainMaster.c: 204:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1957  0206  3003               	movlw	3
  1958  0207  1683               	bsf	3,5	;RP0=1, select bank1
  1959  0208  1303               	bcf	3,6	;RP1=0, select bank1
  1960  0209  00A1               	movwf	(??_main^(0+128)+1)
  1961  020A  3097               	movlw	151
  1962  020B  00A0               	movwf	??_main^(0+128)
  1963  020C                     u5037:	
  1964  020C  0BA0               	decfsz	??_main^(0+128),f
  1965  020D  2A0C               	goto	u5037
  1966  020E  0BA1               	decfsz	(??_main^(0+128)+1),f
  1967  020F  2A0C               	goto	u5037
  1968                           
  1969                           ;mainMaster.c: 205:             UART_Write(alarm);
  1970  0210  1283               	bcf	3,5	;RP0=0, select bank0
  1971  0211  1303               	bcf	3,6	;RP1=0, select bank0
  1972  0212  082F               	movf	_alarm,w
  1973  0213  160A  118A  261D  120A  118A  	fcall	_UART_Write
  1974                           
  1975                           ;mainMaster.c: 206:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1976  0218  3003               	movlw	3
  1977  0219  1683               	bsf	3,5	;RP0=1, select bank1
  1978  021A  1303               	bcf	3,6	;RP1=0, select bank1
  1979  021B  00A1               	movwf	(??_main^(0+128)+1)
  1980  021C  3097               	movlw	151
  1981  021D  00A0               	movwf	??_main^(0+128)
  1982  021E                     u5047:	
  1983  021E  0BA0               	decfsz	??_main^(0+128),f
  1984  021F  2A1E               	goto	u5047
  1985  0220  0BA1               	decfsz	(??_main^(0+128)+1),f
  1986  0221  2A1E               	goto	u5047
  1987                           
  1988                           ;mainMaster.c: 207:             UART_Write(bank);
  1989  0222  1283               	bcf	3,5	;RP0=0, select bank0
  1990  0223  1303               	bcf	3,6	;RP1=0, select bank0
  1991  0224  082E               	movf	_bank,w
  1992  0225  160A  118A  261D  120A  118A  	fcall	_UART_Write
  1993                           
  1994                           ;mainMaster.c: 208:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1995  022A  3003               	movlw	3
  1996  022B  1683               	bsf	3,5	;RP0=1, select bank1
  1997  022C  1303               	bcf	3,6	;RP1=0, select bank1
  1998  022D  00A1               	movwf	(??_main^(0+128)+1)
  1999  022E  3097               	movlw	151
  2000  022F  00A0               	movwf	??_main^(0+128)
  2001  0230                     u5057:	
  2002  0230  0BA0               	decfsz	??_main^(0+128),f
  2003  0231  2A30               	goto	u5057
  2004  0232  0BA1               	decfsz	(??_main^(0+128)+1),f
  2005  0233  2A30               	goto	u5057
  2006                           
  2007                           ;mainMaster.c: 209:             UART_Write(seguridad);
  2008  0234  1283               	bcf	3,5	;RP0=0, select bank0
  2009  0235  1303               	bcf	3,6	;RP1=0, select bank0
  2010  0236  0829               	movf	_seguridad,w
  2011  0237  160A  118A  261D  120A  118A  	fcall	_UART_Write
  2012                           
  2013                           ;mainMaster.c: 210:             _delay((unsigned long)((1)*(8000000/4000.0)));
  2014  023C  3003               	movlw	3
  2015  023D  1683               	bsf	3,5	;RP0=1, select bank1
  2016  023E  1303               	bcf	3,6	;RP1=0, select bank1
  2017  023F  00A1               	movwf	(??_main^(0+128)+1)
  2018  0240  3097               	movlw	151
  2019  0241  00A0               	movwf	??_main^(0+128)
  2020  0242                     u5067:	
  2021  0242  0BA0               	decfsz	??_main^(0+128),f
  2022  0243  2A42               	goto	u5067
  2023  0244  0BA1               	decfsz	(??_main^(0+128)+1),f
  2024  0245  2A42               	goto	u5067
  2025                           
  2026                           ;mainMaster.c: 211:             UART_Write('A');
  2027  0246  3041               	movlw	65
  2028  0247  160A  118A  261D  120A  118A  	fcall	_UART_Write
  2029                           
  2030                           ;mainMaster.c: 212:             _delay((unsigned long)((1)*(8000000/4000.0)));
  2031  024C  3003               	movlw	3
  2032  024D  1683               	bsf	3,5	;RP0=1, select bank1
  2033  024E  1303               	bcf	3,6	;RP1=0, select bank1
  2034  024F  00A1               	movwf	(??_main^(0+128)+1)
  2035  0250  3097               	movlw	151
  2036  0251  00A0               	movwf	??_main^(0+128)
  2037  0252                     u5077:	
  2038  0252  0BA0               	decfsz	??_main^(0+128),f
  2039  0253  2A52               	goto	u5077
  2040  0254  0BA1               	decfsz	(??_main^(0+128)+1),f
  2041  0255  2A52               	goto	u5077
  2042  0256                     l4150:	
  2043                           
  2044                           ;mainMaster.c: 216:         RCSTAbits.SPEN = 0;
  2045  0256  1283               	bcf	3,5	;RP0=0, select bank0
  2046  0257  1303               	bcf	3,6	;RP1=0, select bank0
  2047  0258  1398               	bcf	24,7	;volatile
  2048                           
  2049                           ;mainMaster.c: 217:         SSPCONbits.SSPEN = 1;
  2050  0259  1694               	bsf	20,5	;volatile
  2051                           
  2052                           ;mainMaster.c: 224:         if (door == 1){
  2053  025A  033A               	decf	_door,w
  2054  025B  1D03               	btfss	3,2
  2055  025C  2A5F               	goto	l4158
  2056                           
  2057                           ;mainMaster.c: 225:             val = 8;
  2058  025D  3008               	movlw	8
  2059  025E  2A63               	goto	L1
  2060  025F                     l4158:	
  2061                           ;mainMaster.c: 226:         } else if (door == 0){
  2062                           
  2063  025F  083A               	movf	_door,w
  2064  0260  1D03               	btfss	3,2
  2065  0261  2A9C               	goto	l4180
  2066                           
  2067                           ;mainMaster.c: 227:             val = 16;
  2068  0262  3010               	movlw	16
  2069  0263                     L1:	
  2070  0263  1683               	bsf	3,5	;RP0=1, select bank1
  2071  0264  1303               	bcf	3,6	;RP1=0, select bank1
  2072  0265  00A0               	movwf	??_main^(0+128)
  2073  0266  0820               	movf	??_main^(0+128),w
  2074  0267  1283               	bcf	3,5	;RP0=0, select bank0
  2075  0268  1303               	bcf	3,6	;RP1=0, select bank0
  2076  0269  00AC               	movwf	_val
  2077  026A  2A9C               	goto	l4180
  2078  026B                     l4162:	
  2079                           
  2080                           ;mainMaster.c: 234:                 day2 = "LUNES    ";
  2081  026B  3008               	movlw	low (STR_4| (0+32768))
  2082  026C  1283               	bcf	3,5	;RP0=0, select bank0
  2083  026D  1303               	bcf	3,6	;RP1=0, select bank0
  2084  026E  00A5               	movwf	_day2
  2085  026F  3088               	movlw	high (STR_4| (0+32768))
  2086  0270  2A9A               	goto	L8
  2087  0271                     l4164:	
  2088                           ;mainMaster.c: 235:                 break;
  2089                           
  2090                           
  2091                           ;mainMaster.c: 237:                 day2 = "MARTES   ";
  2092  0271  301C               	movlw	low (STR_5| (0+32768))
  2093  0272  1283               	bcf	3,5	;RP0=0, select bank0
  2094  0273  1303               	bcf	3,6	;RP1=0, select bank0
  2095  0274  00A5               	movwf	_day2
  2096  0275  3088               	movlw	high (STR_5| (0+32768))
  2097  0276  2A9A               	goto	L8
  2098  0277                     l4166:	
  2099                           ;mainMaster.c: 238:                 break;
  2100                           
  2101                           
  2102                           ;mainMaster.c: 240:                 day2 = "MIERCOLES";
  2103  0277  3044               	movlw	low (STR_6| (0+32768))
  2104  0278  1283               	bcf	3,5	;RP0=0, select bank0
  2105  0279  1303               	bcf	3,6	;RP1=0, select bank0
  2106  027A  00A5               	movwf	_day2
  2107  027B  3088               	movlw	high (STR_6| (0+32768))
  2108  027C  2A9A               	goto	L8
  2109  027D                     l4168:	
  2110                           ;mainMaster.c: 241:                 break;
  2111                           
  2112                           
  2113                           ;mainMaster.c: 243:                 day2 = "JUEVES   ";
  2114  027D  3026               	movlw	low (STR_7| (0+32768))
  2115  027E  1283               	bcf	3,5	;RP0=0, select bank0
  2116  027F  1303               	bcf	3,6	;RP1=0, select bank0
  2117  0280  00A5               	movwf	_day2
  2118  0281  3088               	movlw	high (STR_7| (0+32768))
  2119  0282  2A9A               	goto	L8
  2120  0283                     l4170:	
  2121                           ;mainMaster.c: 244:                 break;
  2122                           
  2123                           
  2124                           ;mainMaster.c: 246:                 day2 = "VIERNES  ";
  2125  0283  303A               	movlw	low (STR_8| (0+32768))
  2126  0284  1283               	bcf	3,5	;RP0=0, select bank0
  2127  0285  1303               	bcf	3,6	;RP1=0, select bank0
  2128  0286  00A5               	movwf	_day2
  2129  0287  3088               	movlw	high (STR_8| (0+32768))
  2130  0288  2A9A               	goto	L8
  2131  0289                     l4172:	
  2132                           ;mainMaster.c: 247:                 break;
  2133                           
  2134                           
  2135                           ;mainMaster.c: 249:                 day2 = "SABADO   ";
  2136  0289  3012               	movlw	low (STR_9| (0+32768))
  2137  028A  1283               	bcf	3,5	;RP0=0, select bank0
  2138  028B  1303               	bcf	3,6	;RP1=0, select bank0
  2139  028C  00A5               	movwf	_day2
  2140  028D  3088               	movlw	high (STR_9| (0+32768))
  2141  028E  2A9A               	goto	L8
  2142  028F                     l4174:	
  2143                           ;mainMaster.c: 250:                 break;
  2144                           
  2145                           
  2146                           ;mainMaster.c: 252:                 day2 = "DOMINGO  ";
  2147  028F  3030               	movlw	low (STR_10| (0+32768))
  2148  0290  1283               	bcf	3,5	;RP0=0, select bank0
  2149  0291  1303               	bcf	3,6	;RP1=0, select bank0
  2150  0292  00A5               	movwf	_day2
  2151  0293  3088               	movlw	high (STR_10| (0+32768))
  2152  0294  2A9A               	goto	L8
  2153  0295                     l4176:	
  2154                           ;mainMaster.c: 253:                 break;
  2155                           
  2156                           
  2157                           ;mainMaster.c: 255:                 day2 = "         ";
  2158  0295  30DB               	movlw	low ((STR_29+3)| (0+32768))
  2159  0296  1283               	bcf	3,5	;RP0=0, select bank0
  2160  0297  1303               	bcf	3,6	;RP1=0, select bank0
  2161  0298  00A5               	movwf	_day2
  2162  0299  3087               	movlw	high ((STR_29+3)| (0+32768))
  2163  029A                     L8:	
  2164  029A  00A6               	movwf	_day2+1
  2165                           
  2166                           ;mainMaster.c: 256:                 break;
  2167  029B  2ABD               	goto	l4182
  2168  029C                     l4180:	
  2169  029C  0879               	movf	_day1,w
  2170  029D  1683               	bsf	3,5	;RP0=1, select bank1
  2171  029E  1303               	bcf	3,6	;RP1=0, select bank1
  2172  029F  00A0               	movwf	??_main^(0+128)
  2173  02A0  01A1               	clrf	(??_main^(0+128)+1)
  2174                           
  2175                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2176                           ; Switch size 1, requested type "simple"
  2177                           ; Number of cases is 1, Range of values is 0 to 0
  2178                           ; switch strategies available:
  2179                           ; Name         Instructions Cycles
  2180                           ; simple_byte            4     3 (average)
  2181                           ; direct_byte           11     8 (fixed)
  2182                           ; jumptable            260     6 (fixed)
  2183                           ;	Chosen strategy is simple_byte
  2184  02A1  0821               	movf	(??_main+1)^(0+128),w
  2185  02A2  3A00               	xorlw	0	; case 0
  2186  02A3  1903               	skipnz
  2187  02A4  2AA6               	goto	l4544
  2188  02A5  2A95               	goto	l4176
  2189  02A6                     l4544:	
  2190                           
  2191                           ; Switch size 1, requested type "simple"
  2192                           ; Number of cases is 7, Range of values is 1 to 7
  2193                           ; switch strategies available:
  2194                           ; Name         Instructions Cycles
  2195                           ; simple_byte           22    12 (average)
  2196                           ; direct_byte           32    11 (fixed)
  2197                           ; jumptable            263     9 (fixed)
  2198                           ;	Chosen strategy is simple_byte
  2199  02A6  0820               	movf	??_main^(0+128),w
  2200  02A7  3A01               	xorlw	1	; case 1
  2201  02A8  1903               	skipnz
  2202  02A9  2A6B               	goto	l4162
  2203  02AA  3A03               	xorlw	3	; case 2
  2204  02AB  1903               	skipnz
  2205  02AC  2A71               	goto	l4164
  2206  02AD  3A01               	xorlw	1	; case 3
  2207  02AE  1903               	skipnz
  2208  02AF  2A77               	goto	l4166
  2209  02B0  3A07               	xorlw	7	; case 4
  2210  02B1  1903               	skipnz
  2211  02B2  2A7D               	goto	l4168
  2212  02B3  3A01               	xorlw	1	; case 5
  2213  02B4  1903               	skipnz
  2214  02B5  2A83               	goto	l4170
  2215  02B6  3A03               	xorlw	3	; case 6
  2216  02B7  1903               	skipnz
  2217  02B8  2A89               	goto	l4172
  2218  02B9  3A01               	xorlw	1	; case 7
  2219  02BA  1903               	skipnz
  2220  02BB  2A8F               	goto	l4174
  2221  02BC  2A95               	goto	l4176
  2222  02BD                     l4182:	
  2223                           
  2224                           ;mainMaster.c: 260:         if (strcmp(temp,"23.50") > 0){
  2225  02BD  306E               	movlw	low (STR_12| (0+32768))
  2226  02BE  00F3               	movwf	strcmp@s2
  2227  02BF  3088               	movlw	high (STR_12| (0+32768))
  2228  02C0  00F4               	movwf	strcmp@s2+1
  2229  02C1  303B               	movlw	(low (_temp| 0))& (0+255)
  2230  02C2  160A  118A  279C  120A  118A  	fcall	_strcmp
  2231  02C7  0874               	movf	?_strcmp+1,w
  2232  02C8  3A80               	xorlw	128
  2233  02C9  00FF               	movwf	127
  2234  02CA  3080               	movlw	128
  2235  02CB  027F               	subwf	127,w
  2236  02CC  1D03               	skipz
  2237  02CD  2AD0               	goto	u4375
  2238  02CE  3001               	movlw	1
  2239  02CF  0273               	subwf	?_strcmp,w
  2240  02D0                     u4375:	
  2241  02D0  1C03               	skipc
  2242  02D1  2AD6               	goto	l361
  2243                           
  2244                           ;mainMaster.c: 261:             PORTAbits.RA0 = 1;
  2245  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  2246  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  2247  02D4  1405               	bsf	5,0	;volatile
  2248                           
  2249                           ;mainMaster.c: 262:         } else {
  2250  02D5  2AD9               	goto	l4186
  2251  02D6                     l361:	
  2252                           
  2253                           ;mainMaster.c: 263:             PORTAbits.RA0 = 0;
  2254  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  2255  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  2256  02D8  1005               	bcf	5,0	;volatile
  2257  02D9                     l4186:	
  2258                           
  2259                           ;mainMaster.c: 268:         if ((strcmp(time, "22:00") == 0) & ((day1 != 6) | (day1 != 7
      +                          ))){
  2260  02D9  3068               	movlw	low (STR_13| (0+32768))
  2261  02DA  00F3               	movwf	strcmp@s2
  2262  02DB  3088               	movlw	high (STR_13| (0+32768))
  2263  02DC  00F4               	movwf	strcmp@s2+1
  2264  02DD  3041               	movlw	(low (_time| 0))& (0+255)
  2265  02DE  160A  118A  279C  120A  118A  	fcall	_strcmp
  2266  02E3  0873               	movf	?_strcmp,w
  2267  02E4  0474               	iorwf	?_strcmp+1,w
  2268  02E5  1D03               	btfss	3,2
  2269  02E6  2AEF               	goto	l4194
  2270  02E7  3006               	movlw	6
  2271  02E8  0679               	xorwf	_day1,w
  2272  02E9  1D03               	btfss	3,2
  2273  02EA  2B05               	goto	l4192
  2274  02EB  3007               	movlw	7
  2275  02EC  0679               	xorwf	_day1,w
  2276  02ED  1D03               	btfss	3,2
  2277  02EE  2B05               	goto	l4192
  2278  02EF                     l4194:	
  2279                           ;mainMaster.c: 271:         } else if ((strcmp(time, "21:00") == 0) & ((day1 == 6) | (da
      +                          y1 == 7))){
  2280                           
  2281  02EF  3062               	movlw	low (STR_14| (0+32768))
  2282  02F0  00F3               	movwf	strcmp@s2
  2283  02F1  3088               	movlw	high (STR_14| (0+32768))
  2284  02F2  00F4               	movwf	strcmp@s2+1
  2285  02F3  3041               	movlw	(low (_time| 0))& (0+255)
  2286  02F4  160A  118A  279C  120A  118A  	fcall	_strcmp
  2287  02F9  0873               	movf	?_strcmp,w
  2288  02FA  0474               	iorwf	?_strcmp+1,w
  2289  02FB  1D03               	btfss	3,2
  2290  02FC  2B0A               	goto	l4202
  2291  02FD  3006               	movlw	6
  2292  02FE  0679               	xorwf	_day1,w
  2293  02FF  1903               	btfsc	3,2
  2294  0300  2B05               	goto	l4192
  2295  0301  3007               	movlw	7
  2296  0302  0679               	xorwf	_day1,w
  2297  0303  1D03               	btfss	3,2
  2298  0304  2B0A               	goto	l4202
  2299  0305                     l4192:	
  2300                           
  2301                           ;mainMaster.c: 269:             close_door();
  2302  0305  160A  118A  268D  120A  118A  	fcall	_close_door
  2303  030A                     l4202:	
  2304                           
  2305                           ;mainMaster.c: 280:         if(PORTCbits.RC0 == 1){
  2306  030A  1283               	bcf	3,5	;RP0=0, select bank0
  2307  030B  1303               	bcf	3,6	;RP1=0, select bank0
  2308  030C  1C07               	btfss	7,0	;volatile
  2309  030D  2B37               	goto	l4220
  2310                           
  2311                           ;mainMaster.c: 281:             if (change == 0){
  2312  030E  0834               	movf	_change,w
  2313  030F  1D03               	btfss	3,2
  2314  0310  2B38               	goto	l4222
  2315                           
  2316                           ;mainMaster.c: 283:                 state++;
  2317  0311  3001               	movlw	1
  2318  0312  1683               	bsf	3,5	;RP0=1, select bank1
  2319  0313  1303               	bcf	3,6	;RP1=0, select bank1
  2320  0314  00A0               	movwf	??_main^(0+128)
  2321  0315  0820               	movf	??_main^(0+128),w
  2322  0316  07FA               	addwf	_state,f
  2323                           
  2324                           ;mainMaster.c: 284:                 if (state == 4){
  2325  0317  3004               	movlw	4
  2326  0318  067A               	xorwf	_state,w
  2327  0319  1903               	btfsc	3,2
  2328                           
  2329                           ;mainMaster.c: 285:                     k = 0;
  2330  031A  01F8               	clrf	_k
  2331                           
  2332                           ;mainMaster.c: 287:                 Lcd_Clear();
  2333  031B  160A  118A  2627  120A  118A  	fcall	_Lcd_Clear
  2334                           
  2335                           ;mainMaster.c: 288:                 if (state > 5){
  2336  0320  3006               	movlw	6
  2337  0321  027A               	subwf	_state,w
  2338  0322  1803               	btfsc	3,0
  2339                           
  2340                           ;mainMaster.c: 289:                     state = 0;
  2341  0323  01FA               	clrf	_state
  2342                           
  2343                           ;mainMaster.c: 291:                 j = 0;
  2344                           
  2345                           ;mainMaster.c: 290:                 }
  2346  0324  1283               	bcf	3,5	;RP0=0, select bank0
  2347  0325  1303               	bcf	3,6	;RP1=0, select bank0
  2348  0326  01B5               	clrf	_j
  2349  0327                     l4218:	
  2350                           ;mainMaster.c: 292:                 while(j < 50){
  2351                           
  2352                           
  2353                           ;mainMaster.c: 292:                 while(j < 50){
  2354  0327  3032               	movlw	50
  2355  0328  0235               	subwf	_j,w
  2356  0329  1803               	btfsc	3,0
  2357  032A  2B34               	goto	l376
  2358                           
  2359                           ;mainMaster.c: 293:                     j++;
  2360  032B  3001               	movlw	1
  2361  032C  1683               	bsf	3,5	;RP0=1, select bank1
  2362  032D  1303               	bcf	3,6	;RP1=0, select bank1
  2363  032E  00A0               	movwf	??_main^(0+128)
  2364  032F  0820               	movf	??_main^(0+128),w
  2365  0330  1283               	bcf	3,5	;RP0=0, select bank0
  2366  0331  1303               	bcf	3,6	;RP1=0, select bank0
  2367  0332  07B5               	addwf	_j,f
  2368  0333  2B27               	goto	l4218
  2369  0334                     l376:	
  2370                           
  2371                           ;mainMaster.c: 295:                 change = 1;
  2372  0334  01B4               	clrf	_change
  2373  0335  0AB4               	incf	_change,f
  2374  0336  2B38               	goto	l4222
  2375  0337                     l4220:	
  2376                           
  2377                           ;mainMaster.c: 298:             change = 0;
  2378  0337  01B4               	clrf	_change
  2379  0338                     l4222:	
  2380                           
  2381                           ;mainMaster.c: 301:         if (state == 0){
  2382  0338  087A               	movf	_state,w
  2383  0339  1D03               	btfss	3,2
  2384  033A  2B85               	goto	l4234
  2385                           
  2386                           ;mainMaster.c: 303:             Lcd_Set_Cursor(1,1);
  2387  033B  01F7               	clrf	Lcd_Set_Cursor@b
  2388  033C  0AF7               	incf	Lcd_Set_Cursor@b,f
  2389  033D  3001               	movlw	1
  2390  033E  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  2391                           
  2392                           ;mainMaster.c: 304:             Lcd_Write_String(time);
  2393  0343  3041               	movlw	(low (_time| 0))& (0+255)
  2394  0344  1283               	bcf	3,5	;RP0=0, select bank0
  2395  0345  1303               	bcf	3,6	;RP1=0, select bank0
  2396  0346  00C7               	movwf	Lcd_Write_String@a
  2397  0347  3000               	movlw	0
  2398  0348  00C8               	movwf	Lcd_Write_String@a+1
  2399  0349  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  2400                           
  2401                           ;mainMaster.c: 306:             Lcd_Set_Cursor(1,7);
  2402  034E  3007               	movlw	7
  2403  034F  1683               	bsf	3,5	;RP0=1, select bank1
  2404  0350  1303               	bcf	3,6	;RP1=0, select bank1
  2405  0351  00A0               	movwf	??_main^(0+128)
  2406  0352  0820               	movf	??_main^(0+128),w
  2407  0353  00F7               	movwf	Lcd_Set_Cursor@b
  2408  0354  3001               	movlw	1
  2409  0355  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  2410                           
  2411                           ;mainMaster.c: 307:             Lcd_Write_String(day2);
  2412  035A  1283               	bcf	3,5	;RP0=0, select bank0
  2413  035B  1303               	bcf	3,6	;RP1=0, select bank0
  2414  035C  0825               	movf	_day2,w
  2415  035D  00C7               	movwf	Lcd_Write_String@a
  2416  035E  0826               	movf	_day2+1,w
  2417  035F  00C8               	movwf	Lcd_Write_String@a+1
  2418  0360  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  2419                           
  2420                           ;mainMaster.c: 309:             Lcd_Set_Cursor(2,1);
  2421  0365  01F7               	clrf	Lcd_Set_Cursor@b
  2422  0366  0AF7               	incf	Lcd_Set_Cursor@b,f
  2423  0367  3002               	movlw	2
  2424  0368  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  2425                           
  2426                           ;mainMaster.c: 310:             Lcd_Write_String(temp);
  2427  036D  303B               	movlw	(low (_temp| 0))& (0+255)
  2428  036E  1283               	bcf	3,5	;RP0=0, select bank0
  2429  036F  1303               	bcf	3,6	;RP1=0, select bank0
  2430  0370  00C7               	movwf	Lcd_Write_String@a
  2431  0371  3000               	movlw	0
  2432  0372  00C8               	movwf	Lcd_Write_String@a+1
  2433  0373  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  2434                           
  2435                           ;mainMaster.c: 311:             Lcd_Write_Char(223);
  2436  0378  30DF               	movlw	223
  2437  0379  120A  158A  20E2  120A  118A  	fcall	_Lcd_Write_Char
  2438                           
  2439                           ;mainMaster.c: 312:             Lcd_Write_Char('C');
  2440  037E  3043               	movlw	67
  2441  037F  120A  158A  20E2  120A  118A  	fcall	_Lcd_Write_Char
  2442                           
  2443                           ;mainMaster.c: 314:         } else if (state == 1){
  2444  0384  28D3               	goto	l4040
  2445  0385                     l4234:	
  2446  0385  037A               	decf	_state,w
  2447  0386  1D03               	btfss	3,2
  2448  0387  2BC3               	goto	l4252
  2449                           
  2450                           ;mainMaster.c: 316:             Lcd_Set_Cursor(1,1);
  2451  0388  01F7               	clrf	Lcd_Set_Cursor@b
  2452  0389  0AF7               	incf	Lcd_Set_Cursor@b,f
  2453  038A  3001               	movlw	1
  2454  038B  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  2455                           
  2456                           ;mainMaster.c: 317:             if (door == 1){
  2457  0390  1283               	bcf	3,5	;RP0=0, select bank0
  2458  0391  1303               	bcf	3,6	;RP1=0, select bank0
  2459  0392  033A               	decf	_door,w
  2460  0393  1D03               	btfss	3,2
  2461  0394  2B99               	goto	l4242
  2462                           
  2463                           ;mainMaster.c: 318:                 Lcd_Write_String("BOVEDA ABIERTA ");
  2464  0395  308E               	movlw	low (STR_15| (0+32768))
  2465  0396  00C7               	movwf	Lcd_Write_String@a
  2466  0397  3087               	movlw	high (STR_15| (0+32768))
  2467  0398  2B9C               	goto	L9
  2468  0399                     l4242:	
  2469                           ;mainMaster.c: 319:             } else {
  2470                           
  2471                           
  2472                           ;mainMaster.c: 320:                 Lcd_Write_String("BOVEDA CERRADA ");
  2473  0399  307E               	movlw	low (STR_16| (0+32768))
  2474  039A  00C7               	movwf	Lcd_Write_String@a
  2475  039B  3087               	movlw	high (STR_16| (0+32768))
  2476  039C                     L9:	
  2477  039C  00C8               	movwf	Lcd_Write_String@a+1
  2478  039D  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  2479                           
  2480                           ;mainMaster.c: 323:             Lcd_Set_Cursor(2,1);
  2481  03A2  01F7               	clrf	Lcd_Set_Cursor@b
  2482  03A3  0AF7               	incf	Lcd_Set_Cursor@b,f
  2483  03A4  3002               	movlw	2
  2484  03A5  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  2485                           
  2486                           ;mainMaster.c: 324:             if (trip == 1){
  2487  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  2488  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  2489  03AC  0339               	decf	_trip,w
  2490  03AD  1D03               	btfss	3,2
  2491  03AE  2BB9               	goto	l4250
  2492                           
  2493                           ;mainMaster.c: 325:                 Lcd_Write_String("TRIP ACTIVADO   ");
  2494  03AF  304C               	movlw	low (STR_17| (0+32768))
  2495  03B0  00C7               	movwf	Lcd_Write_String@a
  2496  03B1  3087               	movlw	high (STR_17| (0+32768))
  2497  03B2  00C8               	movwf	Lcd_Write_String@a+1
  2498  03B3  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  2499                           
  2500                           ;mainMaster.c: 326:             } else {
  2501  03B8  28D3               	goto	l4040
  2502  03B9                     l4250:	
  2503                           
  2504                           ;mainMaster.c: 327:                 Lcd_Write_String("TRIP DESACTIVADO");
  2505  03B9  305D               	movlw	low (STR_18| (0+32768))
  2506  03BA  00C7               	movwf	Lcd_Write_String@a
  2507  03BB  3087               	movlw	high (STR_18| (0+32768))
  2508  03BC  00C8               	movwf	Lcd_Write_String@a+1
  2509  03BD  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  2510  03C2  28D3               	goto	l4040
  2511  03C3                     l4252:	
  2512  03C3  3002               	movlw	2
  2513  03C4  067A               	xorwf	_state,w
  2514  03C5  1D03               	btfss	3,2
  2515  03C6  2C02               	goto	l4270
  2516                           
  2517                           ;mainMaster.c: 332:             Lcd_Set_Cursor(1,1);
  2518  03C7  01F7               	clrf	Lcd_Set_Cursor@b
  2519  03C8  0AF7               	incf	Lcd_Set_Cursor@b,f
  2520  03C9  3001               	movlw	1
  2521  03CA  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  2522                           
  2523                           ;mainMaster.c: 333:             if (PIR == 1){
  2524  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  2525  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  2526  03D1  0338               	decf	_PIR,w
  2527  03D2  1D03               	btfss	3,2
  2528  03D3  2BD8               	goto	l4260
  2529                           
  2530                           ;mainMaster.c: 334:                 Lcd_Write_String("PIR ACTIVADO   ");
  2531  03D4  306E               	movlw	low (STR_19| (0+32768))
  2532  03D5  00C7               	movwf	Lcd_Write_String@a
  2533  03D6  3087               	movlw	high (STR_19| (0+32768))
  2534  03D7  2BDB               	goto	L10
  2535  03D8                     l4260:	
  2536                           ;mainMaster.c: 335:             } else {
  2537                           
  2538                           
  2539                           ;mainMaster.c: 336:                 Lcd_Write_String("PIR DESACTIVADO");
  2540  03D8  309E               	movlw	low (STR_20| (0+32768))
  2541  03D9  00C7               	movwf	Lcd_Write_String@a
  2542  03DA  3087               	movlw	high (STR_20| (0+32768))
  2543  03DB                     L10:	
  2544  03DB  00C8               	movwf	Lcd_Write_String@a+1
  2545  03DC  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  2546                           
  2547                           ;mainMaster.c: 339:             Lcd_Set_Cursor(2,1);
  2548  03E1  01F7               	clrf	Lcd_Set_Cursor@b
  2549  03E2  0AF7               	incf	Lcd_Set_Cursor@b,f
  2550  03E3  3002               	movlw	2
  2551  03E4  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  2552                           
  2553                           ;mainMaster.c: 340:             if (IR == 1){
  2554  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  2555  03EA  1303               	bcf	3,6	;RP1=0, select bank0
  2556  03EB  0337               	decf	_IR,w
  2557  03EC  1D03               	btfss	3,2
  2558  03ED  2BF8               	goto	l4268
  2559                           
  2560                           ;mainMaster.c: 341:                 Lcd_Write_String("IR ACTIVADO   ");
  2561  03EE  306F               	movlw	low ((STR_19+1)| (0+32768))
  2562  03EF  00C7               	movwf	Lcd_Write_String@a
  2563  03F0  3087               	movlw	high ((STR_19+1)| (0+32768))
  2564  03F1  00C8               	movwf	Lcd_Write_String@a+1
  2565  03F2  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  2566                           
  2567                           ;mainMaster.c: 342:             } else {
  2568  03F7  28D3               	goto	l4040
  2569  03F8                     l4268:	
  2570                           
  2571                           ;mainMaster.c: 343:                 Lcd_Write_String("IR DESACTIVADO");
  2572  03F8  309F               	movlw	low ((STR_20+1)| (0+32768))
  2573  03F9  00C7               	movwf	Lcd_Write_String@a
  2574  03FA  3087               	movlw	high ((STR_20+1)| (0+32768))
  2575  03FB  00C8               	movwf	Lcd_Write_String@a+1
  2576  03FC  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  2577                           
  2578                           ;mainMaster.c: 345:         } else if (state == 3){
  2579                           
  2580                           ;mainMaster.c: 344:             }
  2581  0401  28D3               	goto	l4040
  2582  0402                     l4270:	
  2583  0402  3003               	movlw	3
  2584  0403  067A               	xorwf	_state,w
  2585  0404  1D03               	btfss	3,2
  2586  0405  2D58               	goto	l4322
  2587                           
  2588                           ;mainMaster.c: 347:             Lcd_Set_Cursor(1,1);
  2589  0406  01F7               	clrf	Lcd_Set_Cursor@b
  2590  0407  0AF7               	incf	Lcd_Set_Cursor@b,f
  2591  0408  3001               	movlw	1
  2592  0409  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  2593                           
  2594                           ;mainMaster.c: 348:             Lcd_Write_String("HORA: ");
  2595  040E  304E               	movlw	low (STR_23| (0+32768))
  2596  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2597  0410  1303               	bcf	3,6	;RP1=0, select bank0
  2598  0411  00C7               	movwf	Lcd_Write_String@a
  2599  0412  3088               	movlw	high (STR_23| (0+32768))
  2600  0413  00C8               	movwf	Lcd_Write_String@a+1
  2601  0414  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  2602                           
  2603                           ;mainMaster.c: 349:             Lcd_Write_String(time);
  2604  0419  3041               	movlw	(low (_time| 0))& (0+255)
  2605  041A  1283               	bcf	3,5	;RP0=0, select bank0
  2606  041B  1303               	bcf	3,6	;RP1=0, select bank0
  2607  041C  00C7               	movwf	Lcd_Write_String@a
  2608  041D  3000               	movlw	0
  2609  041E  00C8               	movwf	Lcd_Write_String@a+1
  2610  041F  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  2611                           
  2612                           ;mainMaster.c: 351:             Lcd_Set_Cursor(2,1);
  2613  0424  01F7               	clrf	Lcd_Set_Cursor@b
  2614  0425  0AF7               	incf	Lcd_Set_Cursor@b,f
  2615  0426  3002               	movlw	2
  2616  0427  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  2617                           
  2618                           ;mainMaster.c: 352:             Lcd_Write_String("DIA: ");
  2619  042C  305C               	movlw	low (STR_24| (0+32768))
  2620  042D  1283               	bcf	3,5	;RP0=0, select bank0
  2621  042E  1303               	bcf	3,6	;RP1=0, select bank0
  2622  042F  00C7               	movwf	Lcd_Write_String@a
  2623  0430  3088               	movlw	high (STR_24| (0+32768))
  2624  0431  00C8               	movwf	Lcd_Write_String@a+1
  2625  0432  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  2626                           
  2627                           ;mainMaster.c: 353:             Lcd_Write_String(day2);
  2628  0437  1283               	bcf	3,5	;RP0=0, select bank0
  2629  0438  1303               	bcf	3,6	;RP1=0, select bank0
  2630  0439  0825               	movf	_day2,w
  2631  043A  00C7               	movwf	Lcd_Write_String@a
  2632  043B  0826               	movf	_day2+1,w
  2633  043C  00C8               	movwf	Lcd_Write_String@a+1
  2634  043D  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  2635                           
  2636                           ;mainMaster.c: 356:             newhour = (time[0] - '0') * 10 + (time[1] - '0');
  2637  0442  300A               	movlw	10
  2638  0443  1683               	bsf	3,5	;RP0=1, select bank1
  2639  0444  1303               	bcf	3,6	;RP1=0, select bank1
  2640  0445  00A0               	movwf	??_main^(0+128)
  2641  0446  0820               	movf	??_main^(0+128),w
  2642  0447  00F3               	movwf	___bmul@multiplicand
  2643  0448  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0449  1303               	bcf	3,6	;RP1=0, select bank0
  2645  044A  0841               	movf	_time,w
  2646  044B  160A  118A  2648  120A  118A  	fcall	___bmul
  2647  0450  1283               	bcf	3,5	;RP0=0, select bank0
  2648  0451  1303               	bcf	3,6	;RP1=0, select bank0
  2649  0452  0742               	addwf	_time+1,w
  2650  0453  3EF0               	addlw	240
  2651  0454  1683               	bsf	3,5	;RP0=1, select bank1
  2652  0455  1303               	bcf	3,6	;RP1=0, select bank1
  2653  0456  00A1               	movwf	(??_main+1)^(0+128)
  2654  0457  0821               	movf	(??_main+1)^(0+128),w
  2655  0458  1283               	bcf	3,5	;RP0=0, select bank0
  2656  0459  1303               	bcf	3,6	;RP1=0, select bank0
  2657  045A  00A8               	movwf	_newhour
  2658                           
  2659                           ;mainMaster.c: 357:             newmin = (time[3] - '0') * 10 + (time[4] - '0');
  2660  045B  300A               	movlw	10
  2661  045C  1683               	bsf	3,5	;RP0=1, select bank1
  2662  045D  1303               	bcf	3,6	;RP1=0, select bank1
  2663  045E  00A0               	movwf	??_main^(0+128)
  2664  045F  0820               	movf	??_main^(0+128),w
  2665  0460  00F3               	movwf	___bmul@multiplicand
  2666  0461  1283               	bcf	3,5	;RP0=0, select bank0
  2667  0462  1303               	bcf	3,6	;RP1=0, select bank0
  2668  0463  0844               	movf	_time+3,w
  2669  0464  160A  118A  2648  120A  118A  	fcall	___bmul
  2670  0469  1283               	bcf	3,5	;RP0=0, select bank0
  2671  046A  1303               	bcf	3,6	;RP1=0, select bank0
  2672  046B  0745               	addwf	_time+4,w
  2673  046C  3EF0               	addlw	240
  2674  046D  1683               	bsf	3,5	;RP0=1, select bank1
  2675  046E  1303               	bcf	3,6	;RP1=0, select bank1
  2676  046F  00A1               	movwf	(??_main+1)^(0+128)
  2677  0470  0821               	movf	(??_main+1)^(0+128),w
  2678  0471  1283               	bcf	3,5	;RP0=0, select bank0
  2679  0472  1303               	bcf	3,6	;RP1=0, select bank0
  2680  0473  00A7               	movwf	_newmin
  2681                           
  2682                           ;mainMaster.c: 359:             if (PORTDbits.RD4 == 1){
  2683  0474  1E08               	btfss	8,4	;volatile
  2684  0475  2C84               	goto	l393
  2685                           
  2686                           ;mainMaster.c: 361:                 newhour++;
  2687  0476  3001               	movlw	1
  2688  0477  1683               	bsf	3,5	;RP0=1, select bank1
  2689  0478  1303               	bcf	3,6	;RP1=0, select bank1
  2690  0479  00A0               	movwf	??_main^(0+128)
  2691  047A  0820               	movf	??_main^(0+128),w
  2692  047B  1283               	bcf	3,5	;RP0=0, select bank0
  2693  047C  1303               	bcf	3,6	;RP1=0, select bank0
  2694  047D  07A8               	addwf	_newhour,f
  2695                           
  2696                           ;mainMaster.c: 362:                 if (newhour > 23){
  2697  047E  3018               	movlw	24
  2698  047F  0228               	subwf	_newhour,w
  2699  0480  1C03               	skipc
  2700  0481  2CC2               	goto	l4290
  2701                           
  2702                           ;mainMaster.c: 363:                     newhour = 0;
  2703  0482  01A8               	clrf	_newhour
  2704                           
  2705                           ;mainMaster.c: 366:             } else if (PORTDbits.RD3 == 1){
  2706  0483  2CC2               	goto	l4290
  2707  0484                     l393:	
  2708  0484  1D88               	btfss	8,3	;volatile
  2709  0485  2C94               	goto	l396
  2710                           
  2711                           ;mainMaster.c: 368:                 newhour--;
  2712  0486  3001               	movlw	1
  2713  0487  02A8               	subwf	_newhour,f
  2714                           
  2715                           ;mainMaster.c: 369:                 if (newhour == 255){
  2716  0488  0A28               	incf	_newhour,w
  2717  0489  1D03               	btfss	3,2
  2718  048A  2CC2               	goto	l4290
  2719                           
  2720                           ;mainMaster.c: 370:                     newhour = 23;
  2721  048B  3017               	movlw	23
  2722  048C  1683               	bsf	3,5	;RP0=1, select bank1
  2723  048D  1303               	bcf	3,6	;RP1=0, select bank1
  2724  048E  00A0               	movwf	??_main^(0+128)
  2725  048F  0820               	movf	??_main^(0+128),w
  2726  0490  1283               	bcf	3,5	;RP0=0, select bank0
  2727  0491  1303               	bcf	3,6	;RP1=0, select bank0
  2728  0492  00A8               	movwf	_newhour
  2729  0493  2CC2               	goto	l4290
  2730  0494                     l396:	
  2731  0494  1D08               	btfss	8,2	;volatile
  2732  0495  2CA4               	goto	l399
  2733                           
  2734                           ;mainMaster.c: 375:                 newmin++;
  2735  0496  3001               	movlw	1
  2736  0497  1683               	bsf	3,5	;RP0=1, select bank1
  2737  0498  1303               	bcf	3,6	;RP1=0, select bank1
  2738  0499  00A0               	movwf	??_main^(0+128)
  2739  049A  0820               	movf	??_main^(0+128),w
  2740  049B  1283               	bcf	3,5	;RP0=0, select bank0
  2741  049C  1303               	bcf	3,6	;RP1=0, select bank0
  2742  049D  07A7               	addwf	_newmin,f
  2743                           
  2744                           ;mainMaster.c: 376:                 if (newmin > 59){
  2745  049E  303C               	movlw	60
  2746  049F  0227               	subwf	_newmin,w
  2747  04A0  1C03               	skipc
  2748  04A1  2CC2               	goto	l4290
  2749                           
  2750                           ;mainMaster.c: 377:                     newmin = 0;
  2751  04A2  01A7               	clrf	_newmin
  2752  04A3  2CC2               	goto	l4290
  2753  04A4                     l399:	
  2754  04A4  1C88               	btfss	8,1	;volatile
  2755  04A5  2CB4               	goto	l402
  2756                           
  2757                           ;mainMaster.c: 382:                 newmin--;
  2758  04A6  3001               	movlw	1
  2759  04A7  02A7               	subwf	_newmin,f
  2760                           
  2761                           ;mainMaster.c: 383:                 if (newmin == 255){
  2762  04A8  0A27               	incf	_newmin,w
  2763  04A9  1D03               	btfss	3,2
  2764  04AA  2CC2               	goto	l4290
  2765                           
  2766                           ;mainMaster.c: 384:                     newmin = 59;
  2767  04AB  303B               	movlw	59
  2768  04AC  1683               	bsf	3,5	;RP0=1, select bank1
  2769  04AD  1303               	bcf	3,6	;RP1=0, select bank1
  2770  04AE  00A0               	movwf	??_main^(0+128)
  2771  04AF  0820               	movf	??_main^(0+128),w
  2772  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  2773  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  2774  04B2  00A7               	movwf	_newmin
  2775  04B3  2CC2               	goto	l4290
  2776  04B4                     l402:	
  2777  04B4  1C08               	btfss	8,0	;volatile
  2778  04B5  2CD1               	goto	l4316
  2779                           
  2780                           ;mainMaster.c: 388:                 day1++;
  2781  04B6  3001               	movlw	1
  2782  04B7  1683               	bsf	3,5	;RP0=1, select bank1
  2783  04B8  1303               	bcf	3,6	;RP1=0, select bank1
  2784  04B9  00A0               	movwf	??_main^(0+128)
  2785  04BA  0820               	movf	??_main^(0+128),w
  2786  04BB  07F9               	addwf	_day1,f
  2787                           
  2788                           ;mainMaster.c: 389:                 if (day1 > 7){
  2789  04BC  3008               	movlw	8
  2790  04BD  0279               	subwf	_day1,w
  2791  04BE  1C03               	skipc
  2792  04BF  2CC2               	goto	l4290
  2793                           
  2794                           ;mainMaster.c: 390:                     day1 = 1;
  2795  04C0  01F9               	clrf	_day1
  2796  04C1  0AF9               	incf	_day1,f
  2797  04C2                     l4290:	
  2798                           
  2799                           ;mainMaster.c: 365:                 _delay((unsigned long)((100)*(8000000/4000.0)));
  2800  04C2  3002               	movlw	2
  2801  04C3  1683               	bsf	3,5	;RP0=1, select bank1
  2802  04C4  1303               	bcf	3,6	;RP1=0, select bank1
  2803  04C5  00A2               	movwf	(??_main^(0+128)+2)
  2804  04C6  3004               	movlw	4
  2805  04C7  00A1               	movwf	(??_main^(0+128)+1)
  2806  04C8  30B9               	movlw	185
  2807  04C9  00A0               	movwf	??_main^(0+128)
  2808  04CA                     u5087:	
  2809  04CA  0BA0               	decfsz	??_main^(0+128),f
  2810  04CB  2CCA               	goto	u5087
  2811  04CC  0BA1               	decfsz	(??_main^(0+128)+1),f
  2812  04CD  2CCA               	goto	u5087
  2813  04CE  0BA2               	decfsz	(??_main^(0+128)+2),f
  2814  04CF  2CCA               	goto	u5087
  2815  04D0  2CD1               	nop2
  2816  04D1                     l4316:	
  2817                           
  2818                           ;mainMaster.c: 396:             hour = ((newhour / 10) << 4) + (newhour % 10);
  2819  04D1  300A               	movlw	10
  2820  04D2  00F3               	movwf	___awdiv@divisor
  2821  04D3  3000               	movlw	0
  2822  04D4  00F4               	movwf	___awdiv@divisor+1
  2823  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  2824  04D6  1303               	bcf	3,6	;RP1=0, select bank0
  2825  04D7  0828               	movf	_newhour,w
  2826  04D8  1683               	bsf	3,5	;RP0=1, select bank1
  2827  04D9  1303               	bcf	3,6	;RP1=0, select bank1
  2828  04DA  00A0               	movwf	??_main^(0+128)
  2829  04DB  01A1               	clrf	(??_main^(0+128)+1)
  2830  04DC  0820               	movf	??_main^(0+128),w
  2831  04DD  00F5               	movwf	___awdiv@dividend
  2832  04DE  0821               	movf	(??_main+1)^(0+128),w
  2833  04DF  00F6               	movwf	___awdiv@dividend+1
  2834  04E0  120A  158A  2362  120A  118A  	fcall	___awdiv
  2835  04E5  0873               	movf	?___awdiv,w
  2836  04E6  1683               	bsf	3,5	;RP0=1, select bank1
  2837  04E7  1303               	bcf	3,6	;RP1=0, select bank1
  2838  04E8  00A2               	movwf	(??_main+2)^(0+128)
  2839  04E9  3004               	movlw	4
  2840  04EA                     u4675:	
  2841  04EA  1003               	clrc
  2842  04EB  0DA2               	rlf	(??_main+2)^(0+128),f
  2843  04EC  3EFF               	addlw	-1
  2844  04ED  1D03               	skipz
  2845  04EE  2CEA               	goto	u4675
  2846  04EF  300A               	movlw	10
  2847  04F0  00F3               	movwf	___awmod@divisor
  2848  04F1  3000               	movlw	0
  2849  04F2  00F4               	movwf	___awmod@divisor+1
  2850  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  2851  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  2852  04F5  0828               	movf	_newhour,w
  2853  04F6  1683               	bsf	3,5	;RP0=1, select bank1
  2854  04F7  1303               	bcf	3,6	;RP1=0, select bank1
  2855  04F8  00A3               	movwf	(??_main+3)^(0+128)
  2856  04F9  01A4               	clrf	((??_main+3)^(0+128)+1)
  2857  04FA  0823               	movf	(??_main+3)^(0+128),w
  2858  04FB  00F5               	movwf	___awmod@dividend
  2859  04FC  0824               	movf	(??_main+4)^(0+128),w
  2860  04FD  00F6               	movwf	___awmod@dividend+1
  2861  04FE  120A  158A  221A  120A  118A  	fcall	___awmod
  2862  0503  0873               	movf	?___awmod,w
  2863  0504  1683               	bsf	3,5	;RP0=1, select bank1
  2864  0505  1303               	bcf	3,6	;RP1=0, select bank1
  2865  0506  0722               	addwf	(??_main+2)^(0+128),w
  2866  0507  00A5               	movwf	(??_main+5)^(0+128)
  2867  0508  0825               	movf	(??_main+5)^(0+128),w
  2868  0509  1283               	bcf	3,5	;RP0=0, select bank0
  2869  050A  1303               	bcf	3,6	;RP1=0, select bank0
  2870  050B  00AB               	movwf	_hour
  2871                           
  2872                           ;mainMaster.c: 397:             min = ((newmin / 10) << 4) + (newmin % 10);
  2873  050C  300A               	movlw	10
  2874  050D  00F3               	movwf	___awdiv@divisor
  2875  050E  3000               	movlw	0
  2876  050F  00F4               	movwf	___awdiv@divisor+1
  2877  0510  0827               	movf	_newmin,w
  2878  0511  1683               	bsf	3,5	;RP0=1, select bank1
  2879  0512  1303               	bcf	3,6	;RP1=0, select bank1
  2880  0513  00A0               	movwf	??_main^(0+128)
  2881  0514  01A1               	clrf	(??_main^(0+128)+1)
  2882  0515  0820               	movf	??_main^(0+128),w
  2883  0516  00F5               	movwf	___awdiv@dividend
  2884  0517  0821               	movf	(??_main+1)^(0+128),w
  2885  0518  00F6               	movwf	___awdiv@dividend+1
  2886  0519  120A  158A  2362  120A  118A  	fcall	___awdiv
  2887  051E  0873               	movf	?___awdiv,w
  2888  051F  1683               	bsf	3,5	;RP0=1, select bank1
  2889  0520  1303               	bcf	3,6	;RP1=0, select bank1
  2890  0521  00A2               	movwf	(??_main+2)^(0+128)
  2891  0522  3004               	movlw	4
  2892  0523                     u4685:	
  2893  0523  1003               	clrc
  2894  0524  0DA2               	rlf	(??_main+2)^(0+128),f
  2895  0525  3EFF               	addlw	-1
  2896  0526  1D03               	skipz
  2897  0527  2D23               	goto	u4685
  2898  0528  300A               	movlw	10
  2899  0529  00F3               	movwf	___awmod@divisor
  2900  052A  3000               	movlw	0
  2901  052B  00F4               	movwf	___awmod@divisor+1
  2902  052C  1283               	bcf	3,5	;RP0=0, select bank0
  2903  052D  1303               	bcf	3,6	;RP1=0, select bank0
  2904  052E  0827               	movf	_newmin,w
  2905  052F  1683               	bsf	3,5	;RP0=1, select bank1
  2906  0530  1303               	bcf	3,6	;RP1=0, select bank1
  2907  0531  00A3               	movwf	(??_main+3)^(0+128)
  2908  0532  01A4               	clrf	((??_main+3)^(0+128)+1)
  2909  0533  0823               	movf	(??_main+3)^(0+128),w
  2910  0534  00F5               	movwf	___awmod@dividend
  2911  0535  0824               	movf	(??_main+4)^(0+128),w
  2912  0536  00F6               	movwf	___awmod@dividend+1
  2913  0537  120A  158A  221A  120A  118A  	fcall	___awmod
  2914  053C  0873               	movf	?___awmod,w
  2915  053D  1683               	bsf	3,5	;RP0=1, select bank1
  2916  053E  1303               	bcf	3,6	;RP1=0, select bank1
  2917  053F  0722               	addwf	(??_main+2)^(0+128),w
  2918  0540  00A5               	movwf	(??_main+5)^(0+128)
  2919  0541  0825               	movf	(??_main+5)^(0+128),w
  2920  0542  1283               	bcf	3,5	;RP0=0, select bank0
  2921  0543  1303               	bcf	3,6	;RP1=0, select bank0
  2922  0544  00AA               	movwf	_min
  2923                           
  2924                           ;mainMaster.c: 400:             write_RTC(hour, min, day1);
  2925  0545  082A               	movf	_min,w
  2926  0546  1683               	bsf	3,5	;RP0=1, select bank1
  2927  0547  1303               	bcf	3,6	;RP1=0, select bank1
  2928  0548  00A0               	movwf	??_main^(0+128)
  2929  0549  0820               	movf	??_main^(0+128),w
  2930  054A  00F5               	movwf	write_RTC@minutes
  2931  054B  0879               	movf	_day1,w
  2932  054C  00A1               	movwf	(??_main+1)^(0+128)
  2933  054D  0821               	movf	(??_main+1)^(0+128),w
  2934  054E  00F6               	movwf	write_RTC@day
  2935  054F  1283               	bcf	3,5	;RP0=0, select bank0
  2936  0550  1303               	bcf	3,6	;RP1=0, select bank0
  2937  0551  082B               	movf	_hour,w
  2938  0552  120A  158A  21D4  120A  118A  	fcall	_write_RTC
  2939                           
  2940                           ;mainMaster.c: 401:         } else if (state == 4){
  2941  0557  28D3               	goto	l4040
  2942  0558                     l4322:	
  2943  0558  3004               	movlw	4
  2944  0559  067A               	xorwf	_state,w
  2945  055A  1D03               	btfss	3,2
  2946  055B  2EBC               	goto	l4450
  2947                           
  2948                           ;mainMaster.c: 403:             Lcd_Set_Cursor(1,1);
  2949  055C  01F7               	clrf	Lcd_Set_Cursor@b
  2950  055D  0AF7               	incf	Lcd_Set_Cursor@b,f
  2951  055E  3001               	movlw	1
  2952  055F  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  2953                           
  2954                           ;mainMaster.c: 404:             Lcd_Write_String("PASSWORD:       ");
  2955  0564  303B               	movlw	low (STR_25| (0+32768))
  2956  0565  1283               	bcf	3,5	;RP0=0, select bank0
  2957  0566  1303               	bcf	3,6	;RP1=0, select bank0
  2958  0567  00C7               	movwf	Lcd_Write_String@a
  2959  0568  3087               	movlw	high (STR_25| (0+32768))
  2960  0569  00C8               	movwf	Lcd_Write_String@a+1
  2961  056A  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  2962                           
  2963                           ;mainMaster.c: 406:             Lcd_Set_Cursor(2,k + 1);
  2964  056F  0878               	movf	_k,w
  2965  0570  3E01               	addlw	1
  2966  0571  1683               	bsf	3,5	;RP0=1, select bank1
  2967  0572  1303               	bcf	3,6	;RP1=0, select bank1
  2968  0573  00A0               	movwf	??_main^(0+128)
  2969  0574  0820               	movf	??_main^(0+128),w
  2970  0575  00F7               	movwf	Lcd_Set_Cursor@b
  2971  0576  3002               	movlw	2
  2972  0577  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  2973                           
  2974                           ;mainMaster.c: 409:             if (k < 5) {
  2975  057C  3005               	movlw	5
  2976  057D  0278               	subwf	_k,w
  2977  057E  1803               	skipnc
  2978  057F  2E35               	goto	l4398
  2979                           
  2980                           ;mainMaster.c: 410:                 if (PORTDbits.RD0 == 1){
  2981  0580  1283               	bcf	3,5	;RP0=0, select bank0
  2982  0581  1303               	bcf	3,6	;RP1=0, select bank0
  2983  0582  1C08               	btfss	8,0	;volatile
  2984  0583  2D9D               	goto	l410
  2985                           
  2986                           ;mainMaster.c: 412:                     if (change4 == 0){
  2987  0584  0830               	movf	_change4,w
  2988  0585  1D03               	btfss	3,2
  2989  0586  2E35               	goto	l4398
  2990                           
  2991                           ;mainMaster.c: 413:                         passwordu[k] = 0;
  2992  0587  0878               	movf	_k,w
  2993  0588  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  2994  0589  0084               	movwf	4
  2995  058A  1383               	bcf	3,7	;select IRP bank0
  2996  058B  0180               	clrf	0
  2997                           
  2998                           ;mainMaster.c: 414:                         k++;
  2999  058C  3001               	movlw	1
  3000  058D  1683               	bsf	3,5	;RP0=1, select bank1
  3001  058E  1303               	bcf	3,6	;RP1=0, select bank1
  3002  058F  00A0               	movwf	??_main^(0+128)
  3003  0590  0820               	movf	??_main^(0+128),w
  3004  0591  07F8               	addwf	_k,f
  3005                           
  3006                           ;mainMaster.c: 415:                         change4 = 1;
  3007  0592  1283               	bcf	3,5	;RP0=0, select bank0
  3008  0593  1303               	bcf	3,6	;RP1=0, select bank0
  3009  0594  01B0               	clrf	_change4
  3010  0595  0AB0               	incf	_change4,f
  3011                           
  3012                           ;mainMaster.c: 416:                         Lcd_Write_Char('*');
  3013  0596  302A               	movlw	42
  3014  0597  120A  158A  20E2  120A  118A  	fcall	_Lcd_Write_Char
  3015  059C  2E35               	goto	l4398
  3016  059D                     l410:	
  3017  059D  1C88               	btfss	8,1	;volatile
  3018  059E  2DB9               	goto	l413
  3019                           
  3020                           ;mainMaster.c: 419:                     if (change4 == 0){
  3021  059F  0830               	movf	_change4,w
  3022  05A0  1D03               	btfss	3,2
  3023  05A1  2E35               	goto	l4398
  3024                           
  3025                           ;mainMaster.c: 420:                         passwordu[k] = 1;
  3026  05A2  0878               	movf	_k,w
  3027  05A3  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3028  05A4  0084               	movwf	4
  3029  05A5  1383               	bcf	3,7	;select IRP bank0
  3030  05A6  0180               	clrf	0
  3031  05A7  0A80               	incf	0,f
  3032                           
  3033                           ;mainMaster.c: 421:                         k++;
  3034  05A8  3001               	movlw	1
  3035  05A9  1683               	bsf	3,5	;RP0=1, select bank1
  3036  05AA  1303               	bcf	3,6	;RP1=0, select bank1
  3037  05AB  00A0               	movwf	??_main^(0+128)
  3038  05AC  0820               	movf	??_main^(0+128),w
  3039  05AD  07F8               	addwf	_k,f
  3040                           
  3041                           ;mainMaster.c: 422:                         change4 = 1;
  3042  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  3043  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  3044  05B0  01B0               	clrf	_change4
  3045  05B1  0AB0               	incf	_change4,f
  3046                           
  3047                           ;mainMaster.c: 423:                         Lcd_Write_Char('*');
  3048  05B2  302A               	movlw	42
  3049  05B3  120A  158A  20E2  120A  118A  	fcall	_Lcd_Write_Char
  3050  05B8  2E35               	goto	l4398
  3051  05B9                     l413:	
  3052  05B9  1D08               	btfss	8,2	;volatile
  3053  05BA  2DD7               	goto	l416
  3054                           
  3055                           ;mainMaster.c: 426:                     if (change4 == 0){
  3056  05BB  0830               	movf	_change4,w
  3057  05BC  1D03               	btfss	3,2
  3058  05BD  2E35               	goto	l4398
  3059                           
  3060                           ;mainMaster.c: 427:                         passwordu[k] = 2;
  3061  05BE  3002               	movlw	2
  3062  05BF  1683               	bsf	3,5	;RP0=1, select bank1
  3063  05C0  1303               	bcf	3,6	;RP1=0, select bank1
  3064  05C1  00A0               	movwf	??_main^(0+128)
  3065  05C2  0878               	movf	_k,w
  3066  05C3  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3067  05C4  0084               	movwf	4
  3068  05C5  0820               	movf	??_main^(0+128),w
  3069  05C6  1383               	bcf	3,7	;select IRP bank0
  3070  05C7  0080               	movwf	0
  3071                           
  3072                           ;mainMaster.c: 428:                         k++;
  3073  05C8  3001               	movlw	1
  3074  05C9  00A0               	movwf	??_main^(0+128)
  3075  05CA  0820               	movf	??_main^(0+128),w
  3076  05CB  07F8               	addwf	_k,f
  3077                           
  3078                           ;mainMaster.c: 429:                         change4 = 1;
  3079  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  3080  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  3081  05CE  01B0               	clrf	_change4
  3082  05CF  0AB0               	incf	_change4,f
  3083                           
  3084                           ;mainMaster.c: 430:                         Lcd_Write_Char('*');
  3085  05D0  302A               	movlw	42
  3086  05D1  120A  158A  20E2  120A  118A  	fcall	_Lcd_Write_Char
  3087  05D6  2E35               	goto	l4398
  3088  05D7                     l416:	
  3089  05D7  1D88               	btfss	8,3	;volatile
  3090  05D8  2DF5               	goto	l419
  3091                           
  3092                           ;mainMaster.c: 433:                     if (change4 == 0){
  3093  05D9  0830               	movf	_change4,w
  3094  05DA  1D03               	btfss	3,2
  3095  05DB  2E35               	goto	l4398
  3096                           
  3097                           ;mainMaster.c: 434:                         passwordu[k] = 3;
  3098  05DC  3003               	movlw	3
  3099  05DD  1683               	bsf	3,5	;RP0=1, select bank1
  3100  05DE  1303               	bcf	3,6	;RP1=0, select bank1
  3101  05DF  00A0               	movwf	??_main^(0+128)
  3102  05E0  0878               	movf	_k,w
  3103  05E1  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3104  05E2  0084               	movwf	4
  3105  05E3  0820               	movf	??_main^(0+128),w
  3106  05E4  1383               	bcf	3,7	;select IRP bank0
  3107  05E5  0080               	movwf	0
  3108                           
  3109                           ;mainMaster.c: 435:                         k++;
  3110  05E6  3001               	movlw	1
  3111  05E7  00A0               	movwf	??_main^(0+128)
  3112  05E8  0820               	movf	??_main^(0+128),w
  3113  05E9  07F8               	addwf	_k,f
  3114                           
  3115                           ;mainMaster.c: 436:                         change4 = 1;
  3116  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  3117  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  3118  05EC  01B0               	clrf	_change4
  3119  05ED  0AB0               	incf	_change4,f
  3120                           
  3121                           ;mainMaster.c: 437:                         Lcd_Write_Char('*');
  3122  05EE  302A               	movlw	42
  3123  05EF  120A  158A  20E2  120A  118A  	fcall	_Lcd_Write_Char
  3124  05F4  2E35               	goto	l4398
  3125  05F5                     l419:	
  3126  05F5  1E08               	btfss	8,4	;volatile
  3127  05F6  2E13               	goto	l422
  3128                           
  3129                           ;mainMaster.c: 440:                     if (change4 == 0){
  3130  05F7  0830               	movf	_change4,w
  3131  05F8  1D03               	btfss	3,2
  3132  05F9  2E35               	goto	l4398
  3133                           
  3134                           ;mainMaster.c: 441:                         passwordu[k] = 4;
  3135  05FA  3004               	movlw	4
  3136  05FB  1683               	bsf	3,5	;RP0=1, select bank1
  3137  05FC  1303               	bcf	3,6	;RP1=0, select bank1
  3138  05FD  00A0               	movwf	??_main^(0+128)
  3139  05FE  0878               	movf	_k,w
  3140  05FF  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3141  0600  0084               	movwf	4
  3142  0601  0820               	movf	??_main^(0+128),w
  3143  0602  1383               	bcf	3,7	;select IRP bank0
  3144  0603  0080               	movwf	0
  3145                           
  3146                           ;mainMaster.c: 442:                         k++;
  3147  0604  3001               	movlw	1
  3148  0605  00A0               	movwf	??_main^(0+128)
  3149  0606  0820               	movf	??_main^(0+128),w
  3150  0607  07F8               	addwf	_k,f
  3151                           
  3152                           ;mainMaster.c: 443:                         change4 = 1;
  3153  0608  1283               	bcf	3,5	;RP0=0, select bank0
  3154  0609  1303               	bcf	3,6	;RP1=0, select bank0
  3155  060A  01B0               	clrf	_change4
  3156  060B  0AB0               	incf	_change4,f
  3157                           
  3158                           ;mainMaster.c: 444:                         Lcd_Write_Char('*');
  3159  060C  302A               	movlw	42
  3160  060D  120A  158A  20E2  120A  118A  	fcall	_Lcd_Write_Char
  3161  0612  2E35               	goto	l4398
  3162  0613                     l422:	
  3163  0613  1E88               	btfss	8,5	;volatile
  3164  0614  2E31               	goto	l4394
  3165                           
  3166                           ;mainMaster.c: 447:                     if (change4 == 0){
  3167  0615  0830               	movf	_change4,w
  3168  0616  1D03               	btfss	3,2
  3169  0617  2E35               	goto	l4398
  3170                           
  3171                           ;mainMaster.c: 448:                         passwordu[k] = 5;
  3172  0618  3005               	movlw	5
  3173  0619  1683               	bsf	3,5	;RP0=1, select bank1
  3174  061A  1303               	bcf	3,6	;RP1=0, select bank1
  3175  061B  00A0               	movwf	??_main^(0+128)
  3176  061C  0878               	movf	_k,w
  3177  061D  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3178  061E  0084               	movwf	4
  3179  061F  0820               	movf	??_main^(0+128),w
  3180  0620  1383               	bcf	3,7	;select IRP bank0
  3181  0621  0080               	movwf	0
  3182                           
  3183                           ;mainMaster.c: 449:                         k++;
  3184  0622  3001               	movlw	1
  3185  0623  00A0               	movwf	??_main^(0+128)
  3186  0624  0820               	movf	??_main^(0+128),w
  3187  0625  07F8               	addwf	_k,f
  3188                           
  3189                           ;mainMaster.c: 450:                         change4 = 1;
  3190  0626  1283               	bcf	3,5	;RP0=0, select bank0
  3191  0627  1303               	bcf	3,6	;RP1=0, select bank0
  3192  0628  01B0               	clrf	_change4
  3193  0629  0AB0               	incf	_change4,f
  3194                           
  3195                           ;mainMaster.c: 451:                         Lcd_Write_Char('*');
  3196  062A  302A               	movlw	42
  3197  062B  120A  158A  20E2  120A  118A  	fcall	_Lcd_Write_Char
  3198  0630  2E35               	goto	l4398
  3199  0631                     l4394:	
  3200  0631  0808               	movf	8,w	;volatile
  3201  0632  1D03               	btfss	3,2
  3202  0633  2E35               	goto	l4398
  3203                           
  3204                           ;mainMaster.c: 454:                         change4 = 0;
  3205  0634  01B0               	clrf	_change4
  3206  0635                     l4398:	
  3207                           
  3208                           ;mainMaster.c: 459:             if (PORTEbits.RE0 == 1){
  3209  0635  1283               	bcf	3,5	;RP0=0, select bank0
  3210  0636  1303               	bcf	3,6	;RP1=0, select bank0
  3211  0637  1C09               	btfss	9,0	;volatile
  3212  0638  2EA5               	goto	l429
  3213                           
  3214                           ;mainMaster.c: 460:                     if (passwordu[0] == password[0] & passwordu[1] =
      +                          = password[1] & passwordu[2] == password[2] & passwordu[3] == password[3] & passwordu[4]
      +                           == password[4]){
  3215  0639  0820               	movf	_passwordu,w
  3216  063A  0668               	xorwf	_password,w
  3217  063B  1D03               	skipz
  3218  063C  2E91               	goto	l4434
  3219  063D  0821               	movf	_passwordu+1,w
  3220  063E  0669               	xorwf	_password+1,w
  3221  063F  1D03               	skipz
  3222  0640  2E91               	goto	l4434
  3223  0641  0822               	movf	_passwordu+2,w
  3224  0642  066A               	xorwf	_password+2,w
  3225  0643  1D03               	skipz
  3226  0644  2E91               	goto	l4434
  3227  0645  0823               	movf	_passwordu+3,w
  3228  0646  066B               	xorwf	_password+3,w
  3229  0647  1D03               	skipz
  3230  0648  2E91               	goto	l4434
  3231  0649  0824               	movf	_passwordu+4,w
  3232  064A  066C               	xorwf	_password+4,w
  3233  064B  1D03               	skipz
  3234  064C  2E91               	goto	l4434
  3235                           
  3236                           ;mainMaster.c: 462:                         if (seguridad == 0){
  3237  064D  0829               	movf	_seguridad,w
  3238  064E  1D03               	btfss	3,2
  3239  064F  2E7B               	goto	l4424
  3240                           
  3241                           ;mainMaster.c: 463:                             seguridad = 1;
  3242  0650  01A9               	clrf	_seguridad
  3243  0651  0AA9               	incf	_seguridad,f
  3244                           
  3245                           ;mainMaster.c: 464:                             k = 0;
  3246  0652  01F8               	clrf	_k
  3247                           
  3248                           ;mainMaster.c: 465:                             Lcd_Clear();
  3249  0653  160A  118A  2627  120A  118A  	fcall	_Lcd_Clear
  3250                           
  3251                           ;mainMaster.c: 466:                             Lcd_Set_Cursor(1,1);
  3252  0658  01F7               	clrf	Lcd_Set_Cursor@b
  3253  0659  0AF7               	incf	Lcd_Set_Cursor@b,f
  3254  065A  3001               	movlw	1
  3255  065B  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  3256                           
  3257                           ;mainMaster.c: 467:                             Lcd_Write_String("SEGURIDAD ON");
  3258  0660  30E5               	movlw	low (STR_26| (0+32768))
  3259  0661  1283               	bcf	3,5	;RP0=0, select bank0
  3260  0662  1303               	bcf	3,6	;RP1=0, select bank0
  3261  0663  00C7               	movwf	Lcd_Write_String@a
  3262  0664  3087               	movlw	high (STR_26| (0+32768))
  3263  0665                     L11:	
  3264  0665  00C8               	movwf	Lcd_Write_String@a+1
  3265  0666  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  3266                           
  3267                           ;mainMaster.c: 468:                             _delay((unsigned long)((2000)*(8000000/4
      +                          000.0)));
  3268  066B  3015               	movlw	21
  3269  066C  1683               	bsf	3,5	;RP0=1, select bank1
  3270  066D  1303               	bcf	3,6	;RP1=0, select bank1
  3271  066E  00A2               	movwf	(??_main^(0+128)+2)
  3272  066F  304B               	movlw	75
  3273  0670  00A1               	movwf	(??_main^(0+128)+1)
  3274  0671  30BD               	movlw	189
  3275  0672  00A0               	movwf	??_main^(0+128)
  3276  0673                     u5097:	
  3277  0673  0BA0               	decfsz	??_main^(0+128),f
  3278  0674  2E73               	goto	u5097
  3279  0675  0BA1               	decfsz	(??_main^(0+128)+1),f
  3280  0676  2E73               	goto	u5097
  3281  0677  0BA2               	decfsz	(??_main^(0+128)+2),f
  3282  0678  2E73               	goto	u5097
  3283  0679  2E7A               	nop2
  3284                           
  3285                           ;mainMaster.c: 469:                         } else {
  3286  067A  28D3               	goto	l4040
  3287  067B                     l4424:	
  3288                           
  3289                           ;mainMaster.c: 470:                             seguridad = 0;
  3290  067B  01A9               	clrf	_seguridad
  3291                           
  3292                           ;mainMaster.c: 471:                             k = 0;
  3293  067C  01F8               	clrf	_k
  3294                           
  3295                           ;mainMaster.c: 472:                             alarm = 0;
  3296  067D  01AF               	clrf	_alarm
  3297                           
  3298                           ;mainMaster.c: 473:                             Lcd_Clear();
  3299  067E  160A  118A  2627  120A  118A  	fcall	_Lcd_Clear
  3300                           
  3301                           ;mainMaster.c: 474:                             Lcd_Set_Cursor(1,1);
  3302  0683  01F7               	clrf	Lcd_Set_Cursor@b
  3303  0684  0AF7               	incf	Lcd_Set_Cursor@b,f
  3304  0685  3001               	movlw	1
  3305  0686  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  3306                           
  3307                           ;mainMaster.c: 475:                             Lcd_Write_String("SEGURIDAD OFF");
  3308  068B  30AE               	movlw	low (STR_27| (0+32768))
  3309  068C  1283               	bcf	3,5	;RP0=0, select bank0
  3310  068D  1303               	bcf	3,6	;RP1=0, select bank0
  3311  068E  00C7               	movwf	Lcd_Write_String@a
  3312  068F  3087               	movlw	high (STR_27| (0+32768))
  3313  0690  2E65               	goto	L11
  3314  0691                     l4434:	
  3315                           
  3316                           ;mainMaster.c: 480:                         Lcd_Clear();
  3317  0691  160A  118A  2627  120A  118A  	fcall	_Lcd_Clear
  3318                           
  3319                           ;mainMaster.c: 481:                         k = 0;
  3320  0696  01F8               	clrf	_k
  3321                           
  3322                           ;mainMaster.c: 482:                         Lcd_Set_Cursor(1,1);
  3323  0697  01F7               	clrf	Lcd_Set_Cursor@b
  3324  0698  0AF7               	incf	Lcd_Set_Cursor@b,f
  3325  0699  3001               	movlw	1
  3326  069A  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  3327                           
  3328                           ;mainMaster.c: 483:                         Lcd_Write_String("INCORRECTO");
  3329  069F  30F2               	movlw	low (STR_28| (0+32768))
  3330  06A0  1283               	bcf	3,5	;RP0=0, select bank0
  3331  06A1  1303               	bcf	3,6	;RP1=0, select bank0
  3332  06A2  00C7               	movwf	Lcd_Write_String@a
  3333  06A3  3087               	movlw	high (STR_28| (0+32768))
  3334  06A4  2E65               	goto	L11
  3335  06A5                     l429:	
  3336  06A5  1C89               	btfss	9,1	;volatile
  3337  06A6  28D3               	goto	l4040
  3338                           
  3339                           ;mainMaster.c: 488:                 Lcd_Set_Cursor(2,1);
  3340  06A7  01F7               	clrf	Lcd_Set_Cursor@b
  3341  06A8  0AF7               	incf	Lcd_Set_Cursor@b,f
  3342  06A9  3002               	movlw	2
  3343  06AA  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  3344                           
  3345                           ;mainMaster.c: 489:                 Lcd_Write_String("            ");
  3346  06AF  30D8               	movlw	low (STR_29| (0+32768))
  3347  06B0  1283               	bcf	3,5	;RP0=0, select bank0
  3348  06B1  1303               	bcf	3,6	;RP1=0, select bank0
  3349  06B2  00C7               	movwf	Lcd_Write_String@a
  3350  06B3  3087               	movlw	high (STR_29| (0+32768))
  3351  06B4  00C8               	movwf	Lcd_Write_String@a+1
  3352  06B5  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  3353                           
  3354                           ;mainMaster.c: 490:                 k = 0;
  3355  06BA  01F8               	clrf	_k
  3356  06BB  28D3               	goto	l4040
  3357  06BC                     l4450:	
  3358  06BC  3005               	movlw	5
  3359  06BD  067A               	xorwf	_state,w
  3360  06BE  1D03               	btfss	3,2
  3361  06BF  28D3               	goto	l4040
  3362                           
  3363                           ;mainMaster.c: 494:             Lcd_Set_Cursor(1,1);
  3364  06C0  01F7               	clrf	Lcd_Set_Cursor@b
  3365  06C1  0AF7               	incf	Lcd_Set_Cursor@b,f
  3366  06C2  3001               	movlw	1
  3367  06C3  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  3368                           
  3369                           ;mainMaster.c: 495:             if (bank == 3){
  3370  06C8  3003               	movlw	3
  3371  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  3372  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  3373  06CB  062E               	xorwf	_bank,w
  3374  06CC  1D03               	btfss	3,2
  3375  06CD  2ED2               	goto	l4458
  3376                           
  3377                           ;mainMaster.c: 496:                 Lcd_Write_String("BANCO ABIERTO");
  3378  06CE  30CA               	movlw	low (STR_30| (0+32768))
  3379  06CF  00C7               	movwf	Lcd_Write_String@a
  3380  06D0  3087               	movlw	high (STR_30| (0+32768))
  3381  06D1  2ED5               	goto	L12
  3382  06D2                     l4458:	
  3383                           ;mainMaster.c: 497:             } else {
  3384                           
  3385                           
  3386                           ;mainMaster.c: 498:                 Lcd_Write_String("BANCO CERRADO");
  3387  06D2  30BC               	movlw	low (STR_31| (0+32768))
  3388  06D3  00C7               	movwf	Lcd_Write_String@a
  3389  06D4  3087               	movlw	high (STR_31| (0+32768))
  3390  06D5                     L12:	
  3391  06D5  00C8               	movwf	Lcd_Write_String@a+1
  3392  06D6  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  3393                           
  3394                           ;mainMaster.c: 501:             Lcd_Set_Cursor(2,1);
  3395  06DB  01F7               	clrf	Lcd_Set_Cursor@b
  3396  06DC  0AF7               	incf	Lcd_Set_Cursor@b,f
  3397  06DD  3002               	movlw	2
  3398  06DE  120A  158A  2267  120A  118A  	fcall	_Lcd_Set_Cursor
  3399                           
  3400                           ;mainMaster.c: 502:             if (seguridad == 1){
  3401  06E3  1283               	bcf	3,5	;RP0=0, select bank0
  3402  06E4  1303               	bcf	3,6	;RP1=0, select bank0
  3403  06E5  0329               	decf	_seguridad,w
  3404  06E6  1D03               	btfss	3,2
  3405  06E7  2EF2               	goto	l4466
  3406                           
  3407                           ;mainMaster.c: 503:                 Lcd_Write_String("SEGURIDAD ON");
  3408  06E8  30E5               	movlw	low (STR_26| (0+32768))
  3409  06E9  00C7               	movwf	Lcd_Write_String@a
  3410  06EA  3087               	movlw	high (STR_26| (0+32768))
  3411  06EB  00C8               	movwf	Lcd_Write_String@a+1
  3412  06EC  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  3413                           
  3414                           ;mainMaster.c: 504:             } else {
  3415  06F1  28D3               	goto	l4040
  3416  06F2                     l4466:	
  3417                           
  3418                           ;mainMaster.c: 505:                 Lcd_Write_String("SEGURIDAD OFF");
  3419  06F2  30AE               	movlw	low (STR_27| (0+32768))
  3420  06F3  00C7               	movwf	Lcd_Write_String@a
  3421  06F4  3087               	movlw	high (STR_27| (0+32768))
  3422  06F5  00C8               	movwf	Lcd_Write_String@a+1
  3423  06F6  120A  158A  2193  120A  118A  	fcall	_Lcd_Write_String
  3424  06FB  28D3               	goto	l4040
  3425  06FC                     __end_of_main:	
  3426                           
  3427                           	psect	text1
  3428  09D4                     __ptext1:	
  3429 ;; *************** function _write_RTC *****************
  3430 ;; Defined at:
  3431 ;;		line 555 in file "mainMaster.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;  hour            1    wreg     unsigned char 
  3434 ;;  minutes         1    5[COMMON] unsigned char 
  3435 ;;  day             1    6[COMMON] unsigned char 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  hour            1    7[COMMON] unsigned char 
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  1    wreg      void 
  3440 ;; Registers used:
  3441 ;;		wreg, status,2, status,0, pclath, cstack
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3447 ;;      Params:         2       0       0       0       0
  3448 ;;      Locals:         1       0       0       0       0
  3449 ;;      Temps:          0       2       0       0       0
  3450 ;;      Totals:         3       2       0       0       0
  3451 ;;Total ram usage:        5 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; Hardware stack levels required when called:    3
  3454 ;; This function calls:
  3455 ;;		_I2C_Master_Start
  3456 ;;		_I2C_Master_Stop
  3457 ;;		_I2C_Master_Write
  3458 ;; This function is called by:
  3459 ;;		_main
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           
  3464                           ;psect for function _write_RTC
  3465  09D4                     _write_RTC:	
  3466                           
  3467                           ;incstack = 0
  3468                           ; Regs used in _write_RTC: [wreg+status,2+status,0+pclath+cstack]
  3469                           ;write_RTC@hour stored from wreg
  3470  09D4  00F7               	movwf	write_RTC@hour
  3471                           
  3472                           ;mainMaster.c: 557:     I2C_Master_Start();
  3473  09D5  160A  118A  25F8  120A  158A  	fcall	_I2C_Master_Start
  3474                           
  3475                           ;mainMaster.c: 558:     I2C_Master_Write(0xD0);
  3476  09DA  30D0               	movlw	208
  3477  09DB  00F3               	movwf	I2C_Master_Write@d
  3478  09DC  3000               	movlw	0
  3479  09DD  00F4               	movwf	I2C_Master_Write@d+1
  3480  09DE  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Write
  3481                           
  3482                           ;mainMaster.c: 559:     I2C_Master_Write(0x01);
  3483  09E3  3001               	movlw	1
  3484  09E4  00F3               	movwf	I2C_Master_Write@d
  3485  09E5  3000               	movlw	0
  3486  09E6  00F4               	movwf	I2C_Master_Write@d+1
  3487  09E7  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Write
  3488                           
  3489                           ;mainMaster.c: 560:     I2C_Master_Write(minutes);
  3490  09EC  0875               	movf	write_RTC@minutes,w
  3491  09ED  1283               	bcf	3,5	;RP0=0, select bank0
  3492  09EE  1303               	bcf	3,6	;RP1=0, select bank0
  3493  09EF  00C7               	movwf	??_write_RTC
  3494  09F0  01C8               	clrf	??_write_RTC+1
  3495  09F1  0847               	movf	??_write_RTC,w
  3496  09F2  00F3               	movwf	I2C_Master_Write@d
  3497  09F3  0848               	movf	??_write_RTC+1,w
  3498  09F4  00F4               	movwf	I2C_Master_Write@d+1
  3499  09F5  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Write
  3500                           
  3501                           ;mainMaster.c: 561:     I2C_Master_Write(hour);
  3502  09FA  0877               	movf	write_RTC@hour,w
  3503  09FB  1283               	bcf	3,5	;RP0=0, select bank0
  3504  09FC  1303               	bcf	3,6	;RP1=0, select bank0
  3505  09FD  00C7               	movwf	??_write_RTC
  3506  09FE  01C8               	clrf	??_write_RTC+1
  3507  09FF  0847               	movf	??_write_RTC,w
  3508  0A00  00F3               	movwf	I2C_Master_Write@d
  3509  0A01  0848               	movf	??_write_RTC+1,w
  3510  0A02  00F4               	movwf	I2C_Master_Write@d+1
  3511  0A03  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Write
  3512                           
  3513                           ;mainMaster.c: 562:     I2C_Master_Write(day);
  3514  0A08  0876               	movf	write_RTC@day,w
  3515  0A09  1283               	bcf	3,5	;RP0=0, select bank0
  3516  0A0A  1303               	bcf	3,6	;RP1=0, select bank0
  3517  0A0B  00C7               	movwf	??_write_RTC
  3518  0A0C  01C8               	clrf	??_write_RTC+1
  3519  0A0D  0847               	movf	??_write_RTC,w
  3520  0A0E  00F3               	movwf	I2C_Master_Write@d
  3521  0A0F  0848               	movf	??_write_RTC+1,w
  3522  0A10  00F4               	movwf	I2C_Master_Write@d+1
  3523  0A11  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Write
  3524                           
  3525                           ;mainMaster.c: 563:     I2C_Master_Stop();
  3526  0A16  160A  118A  25FF   	fcall	_I2C_Master_Stop
  3527  0A19  0008               	return
  3528  0A1A                     __end_of_write_RTC:	
  3529                           
  3530                           	psect	text2
  3531  179C                     __ptext2:	
  3532 ;; *************** function _strcmp *****************
  3533 ;; Defined at:
  3534 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  s1              1    wreg     PTR const unsigned char 
  3537 ;;		 -> time(6), temp(6), 
  3538 ;;  s2              2    3[COMMON] PTR const unsigned char 
  3539 ;;		 -> STR_14(6), STR_13(6), STR_12(6), 
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;  s1              1    1[BANK0 ] PTR const unsigned char 
  3542 ;;		 -> time(6), temp(6), 
  3543 ;;  r               1    0[BANK0 ] char 
  3544 ;; Return value:  Size  Location     Type
  3545 ;;                  2    3[COMMON] int 
  3546 ;; Registers used:
  3547 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3548 ;; Tracked objects:
  3549 ;;		On entry : 0/0
  3550 ;;		On exit  : 0/0
  3551 ;;		Unchanged: 0/0
  3552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3553 ;;      Params:         2       0       0       0       0
  3554 ;;      Locals:         0       2       0       0       0
  3555 ;;      Temps:          3       0       0       0       0
  3556 ;;      Totals:         5       2       0       0       0
  3557 ;;Total ram usage:        7 bytes
  3558 ;; Hardware stack levels used:    2
  3559 ;; Hardware stack levels required when called:    1
  3560 ;; This function calls:
  3561 ;;		Nothing
  3562 ;; This function is called by:
  3563 ;;		_main
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           
  3568                           ;psect for function _strcmp
  3569  179C                     _strcmp:	
  3570                           
  3571                           ;incstack = 0
  3572                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3573                           ;strcmp@s1 stored from wreg
  3574  179C  1283               	bcf	3,5	;RP0=0, select bank0
  3575  179D  1303               	bcf	3,6	;RP1=0, select bank0
  3576  179E  00C8               	movwf	strcmp@s1
  3577  179F  2FAF               	goto	l3946
  3578  17A0                     l3948:	
  3579  17A0  0848               	movf	strcmp@s1,w
  3580  17A1  0084               	movwf	4
  3581  17A2  0800               	movf	0,w
  3582  17A3  1903               	btfsc	3,2
  3583  17A4  2FC6               	goto	l3950
  3584  17A5  3001               	movlw	1
  3585  17A6  00F5               	movwf	??_strcmp
  3586  17A7  0875               	movf	??_strcmp,w
  3587  17A8  07C8               	addwf	strcmp@s1,f
  3588  17A9  3001               	movlw	1
  3589  17AA  07F3               	addwf	strcmp@s2,f
  3590  17AB  1803               	skipnc
  3591  17AC  0AF4               	incf	strcmp@s2+1,f
  3592  17AD  3000               	movlw	0
  3593  17AE  07F4               	addwf	strcmp@s2+1,f
  3594  17AF                     l3946:	
  3595  17AF  0874               	movf	strcmp@s2+1,w
  3596  17B0  00FF               	movwf	127
  3597  17B1  0873               	movf	strcmp@s2,w
  3598  17B2  0084               	movwf	4
  3599  17B3  120A  118A  2700  160A  118A  	fcall	stringtab
  3600  17B8  00F5               	movwf	??_strcmp
  3601  17B9  0848               	movf	strcmp@s1,w
  3602  17BA  0084               	movwf	4
  3603  17BB  1383               	bcf	3,7	;select IRP bank0
  3604  17BC  0800               	movf	0,w
  3605  17BD  00F6               	movwf	??_strcmp+1
  3606  17BE  0875               	movf	??_strcmp,w
  3607  17BF  0276               	subwf	??_strcmp+1,w
  3608  17C0  00F7               	movwf	??_strcmp+2
  3609  17C1  0877               	movf	??_strcmp+2,w
  3610  17C2  00C7               	movwf	strcmp@r
  3611  17C3  0847               	movf	strcmp@r,w
  3612  17C4  1903               	btfsc	3,2
  3613  17C5  2FA0               	goto	l3948
  3614  17C6                     l3950:	
  3615  17C6  0847               	movf	strcmp@r,w
  3616  17C7  00F3               	movwf	?_strcmp
  3617  17C8  01F4               	clrf	?_strcmp+1
  3618  17C9  1BF3               	btfsc	?_strcmp,7
  3619  17CA  03F4               	decf	?_strcmp+1,f
  3620  17CB  0008               	return
  3621  17CC                     __end_of_strcmp:	
  3622                           
  3623                           	psect	text3
  3624  0B0C                     __ptext3:	
  3625 ;; *************** function _setup *****************
  3626 ;; Defined at:
  3627 ;;		line 515 in file "mainMaster.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;		None
  3630 ;; Auto vars:     Size  Location     Type
  3631 ;;		None
  3632 ;; Return value:  Size  Location     Type
  3633 ;;                  1    wreg      void 
  3634 ;; Registers used:
  3635 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3641 ;;      Params:         0       0       0       0       0
  3642 ;;      Locals:         0       0       0       0       0
  3643 ;;      Temps:          0       0       0       0       0
  3644 ;;      Totals:         0       0       0       0       0
  3645 ;;Total ram usage:        0 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:    4
  3648 ;; This function calls:
  3649 ;;		_I2C_Master_Init
  3650 ;;		_Lcd_Init
  3651 ;;		_UART_Init
  3652 ;;		_initOscilador
  3653 ;; This function is called by:
  3654 ;;		_main
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           
  3659                           ;psect for function _setup
  3660  0B0C                     _setup:	
  3661                           
  3662                           ;mainMaster.c: 516:     initOscilador(7);
  3663                           
  3664                           ;incstack = 0
  3665                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3666  0B0C  3007               	movlw	7
  3667  0B0D  120A  158A  22B7  120A  158A  	fcall	_initOscilador
  3668                           
  3669                           ;mainMaster.c: 517:     ANSELH = 0;
  3670  0B12  1683               	bsf	3,5	;RP0=1, select bank3
  3671  0B13  1703               	bsf	3,6	;RP1=1, select bank3
  3672  0B14  0189               	clrf	9	;volatile
  3673                           
  3674                           ;mainMaster.c: 518:     ANSEL = 0;
  3675  0B15  0188               	clrf	8	;volatile
  3676                           
  3677                           ;mainMaster.c: 519:     TRISB = 0;
  3678  0B16  1683               	bsf	3,5	;RP0=1, select bank1
  3679  0B17  1303               	bcf	3,6	;RP1=0, select bank1
  3680  0B18  0186               	clrf	6	;volatile
  3681                           
  3682                           ;mainMaster.c: 520:     TRISA = 0;
  3683  0B19  0185               	clrf	5	;volatile
  3684                           
  3685                           ;mainMaster.c: 521:     TRISD = 0xFF;
  3686  0B1A  30FF               	movlw	255
  3687  0B1B  0088               	movwf	8	;volatile
  3688                           
  3689                           ;mainMaster.c: 522:     TRISE = 0xFF;
  3690  0B1C  30FF               	movlw	255
  3691  0B1D  0089               	movwf	9	;volatile
  3692                           
  3693                           ;mainMaster.c: 523:     TRISC = 0x01;
  3694  0B1E  3001               	movlw	1
  3695  0B1F  0087               	movwf	7	;volatile
  3696                           
  3697                           ;mainMaster.c: 524:     PORTB = 0;
  3698  0B20  1283               	bcf	3,5	;RP0=0, select bank0
  3699  0B21  1303               	bcf	3,6	;RP1=0, select bank0
  3700  0B22  0186               	clrf	6	;volatile
  3701                           
  3702                           ;mainMaster.c: 525:     PORTA = 0;
  3703  0B23  0185               	clrf	5	;volatile
  3704                           
  3705                           ;mainMaster.c: 526:     PORTC = 0;
  3706  0B24  0187               	clrf	7	;volatile
  3707                           
  3708                           ;mainMaster.c: 527:     PORTE = 0;
  3709  0B25  0189               	clrf	9	;volatile
  3710                           
  3711                           ;mainMaster.c: 529:     state = 0;
  3712  0B26  01FA               	clrf	_state
  3713                           
  3714                           ;mainMaster.c: 530:     seguridad = 1;
  3715  0B27  01A9               	clrf	_seguridad
  3716  0B28  0AA9               	incf	_seguridad,f
  3717                           
  3718                           ;mainMaster.c: 531:     i = 0;
  3719  0B29  01B6               	clrf	_i
  3720                           
  3721                           ;mainMaster.c: 532:     door = 0;
  3722  0B2A  01BA               	clrf	_door
  3723                           
  3724                           ;mainMaster.c: 533:     trip = 0;
  3725  0B2B  01B9               	clrf	_trip
  3726                           
  3727                           ;mainMaster.c: 534:     alarm = 0;
  3728  0B2C  01AF               	clrf	_alarm
  3729                           
  3730                           ;mainMaster.c: 535:     change2 = 0;
  3731  0B2D  01B2               	clrf	_change2
  3732                           
  3733                           ;mainMaster.c: 536:     change3 = 0;
  3734  0B2E  01B1               	clrf	_change3
  3735                           
  3736                           ;mainMaster.c: 537:     IR = 0;
  3737  0B2F  01B7               	clrf	_IR
  3738                           
  3739                           ;mainMaster.c: 538:     PIR = 0;
  3740  0B30  01B8               	clrf	_PIR
  3741                           
  3742                           ;mainMaster.c: 540:     OPTION_REGbits.T0CS = 0;
  3743  0B31  1683               	bsf	3,5	;RP0=1, select bank1
  3744  0B32  1303               	bcf	3,6	;RP1=0, select bank1
  3745  0B33  1281               	bcf	1,5	;volatile
  3746                           
  3747                           ;mainMaster.c: 541:     OPTION_REGbits.T0SE = 0;
  3748  0B34  1201               	bcf	1,4	;volatile
  3749                           
  3750                           ;mainMaster.c: 542:     OPTION_REGbits.PSA = 1;
  3751  0B35  1581               	bsf	1,3	;volatile
  3752                           
  3753                           ;mainMaster.c: 543:     OPTION_REGbits.PS2 = 0;
  3754  0B36  1101               	bcf	1,2	;volatile
  3755                           
  3756                           ;mainMaster.c: 544:     OPTION_REGbits.PS1 = 0;
  3757  0B37  1081               	bcf	1,1	;volatile
  3758                           
  3759                           ;mainMaster.c: 545:     OPTION_REGbits.PS0 = 0;
  3760  0B38  1001               	bcf	1,0	;volatile
  3761                           
  3762                           ;mainMaster.c: 546:     TMR0 = 56;
  3763  0B39  3038               	movlw	56
  3764  0B3A  1283               	bcf	3,5	;RP0=0, select bank0
  3765  0B3B  1303               	bcf	3,6	;RP1=0, select bank0
  3766  0B3C  0081               	movwf	1	;volatile
  3767                           
  3768                           ;mainMaster.c: 547:     INTCONbits.T0IF = 0;
  3769  0B3D  110B               	bcf	11,2	;volatile
  3770                           
  3771                           ;mainMaster.c: 548:     INTCONbits.T0IE = 1;
  3772  0B3E  168B               	bsf	11,5	;volatile
  3773                           
  3774                           ;mainMaster.c: 549:     INTCONbits.GIE = 1;
  3775  0B3F  178B               	bsf	11,7	;volatile
  3776                           
  3777                           ;mainMaster.c: 550:     Lcd_Init();
  3778  0B40  120A  158A  241D  120A  158A  	fcall	_Lcd_Init
  3779                           
  3780                           ;mainMaster.c: 551:     UART_Init(9600);
  3781  0B45  3000               	movlw	0
  3782  0B46  1283               	bcf	3,5	;RP0=0, select bank0
  3783  0B47  1303               	bcf	3,6	;RP1=0, select bank0
  3784  0B48  00D8               	movwf	UART_Init@baudrate+3
  3785  0B49  3000               	movlw	0
  3786  0B4A  00D7               	movwf	UART_Init@baudrate+2
  3787  0B4B  3025               	movlw	37
  3788  0B4C  00D6               	movwf	UART_Init@baudrate+1
  3789  0B4D  3080               	movlw	128
  3790  0B4E  00D5               	movwf	UART_Init@baudrate
  3791  0B4F  120A  158A  263A  120A  158A  	fcall	_UART_Init
  3792                           
  3793                           ;mainMaster.c: 552:     I2C_Master_Init(100000);
  3794  0B54  3000               	movlw	0
  3795  0B55  1283               	bcf	3,5	;RP0=0, select bank0
  3796  0B56  1303               	bcf	3,6	;RP1=0, select bank0
  3797  0B57  00D7               	movwf	I2C_Master_Init@c+3
  3798  0B58  3001               	movlw	1
  3799  0B59  00D6               	movwf	I2C_Master_Init@c+2
  3800  0B5A  3086               	movlw	134
  3801  0B5B  00D5               	movwf	I2C_Master_Init@c+1
  3802  0B5C  30A0               	movlw	160
  3803  0B5D  00D4               	movwf	I2C_Master_Init@c
  3804  0B5E  120A  158A  20AA   	fcall	_I2C_Master_Init
  3805  0B61  0008               	return
  3806  0B62                     __end_of_setup:	
  3807                           
  3808                           	psect	text4
  3809  0AB7                     __ptext4:	
  3810 ;; *************** function _initOscilador *****************
  3811 ;; Defined at:
  3812 ;;		line 11 in file "./Oscilador.h"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;  option          1    wreg     unsigned char 
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;  option          1    5[COMMON] unsigned char 
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  1    wreg      void 
  3819 ;; Registers used:
  3820 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3826 ;;      Params:         0       0       0       0       0
  3827 ;;      Locals:         1       0       0       0       0
  3828 ;;      Temps:          2       0       0       0       0
  3829 ;;      Totals:         3       0       0       0       0
  3830 ;;Total ram usage:        3 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; Hardware stack levels required when called:    1
  3833 ;; This function calls:
  3834 ;;		Nothing
  3835 ;; This function is called by:
  3836 ;;		_setup
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           
  3841                           ;psect for function _initOscilador
  3842  0AB7                     _initOscilador:	
  3843                           
  3844                           ;incstack = 0
  3845                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  3846                           ;initOscilador@option stored from wreg
  3847  0AB7  00F5               	movwf	initOscilador@option
  3848                           
  3849                           ;./Oscilador.h: 13: 
  3850  0AB8  2AE8               	goto	l2576
  3851  0AB9                     l2556:	
  3852                           
  3853                           ;./Oscilador.h: 16:         case 3:
  3854  0AB9  308F               	movlw	-113
  3855  0ABA  1683               	bsf	3,5	;RP0=1, select bank1
  3856  0ABB  1303               	bcf	3,6	;RP1=0, select bank1
  3857  0ABC  058F               	andwf	15,f	;volatile
  3858                           
  3859                           ;./Oscilador.h: 17: 
  3860  0ABD  2B0A               	goto	l203
  3861  0ABE                     l2558:	
  3862                           
  3863                           ;./Oscilador.h: 20:         case 4:
  3864  0ABE  1683               	bsf	3,5	;RP0=1, select bank1
  3865  0ABF  1303               	bcf	3,6	;RP1=0, select bank1
  3866  0AC0  080F               	movf	15,w	;volatile
  3867  0AC1  398F               	andlw	-113
  3868  0AC2  3810               	iorlw	16
  3869  0AC3  2AE1               	goto	L17
  3870  0AC4                     l2560:	
  3871                           ;./Oscilador.h: 21: 
  3872                           
  3873                           
  3874                           ;./Oscilador.h: 24:         case 5:
  3875  0AC4  1683               	bsf	3,5	;RP0=1, select bank1
  3876  0AC5  1303               	bcf	3,6	;RP1=0, select bank1
  3877  0AC6  080F               	movf	15,w	;volatile
  3878  0AC7  398F               	andlw	-113
  3879  0AC8  3820               	iorlw	32
  3880  0AC9  2AE1               	goto	L17
  3881  0ACA                     l2562:	
  3882                           ;./Oscilador.h: 25: 
  3883                           
  3884                           
  3885                           ;./Oscilador.h: 28:         case 6:
  3886  0ACA  1683               	bsf	3,5	;RP0=1, select bank1
  3887  0ACB  1303               	bcf	3,6	;RP1=0, select bank1
  3888  0ACC  080F               	movf	15,w	;volatile
  3889  0ACD  398F               	andlw	-113
  3890  0ACE  3830               	iorlw	48
  3891  0ACF  2AE1               	goto	L17
  3892  0AD0                     l2564:	
  3893                           ;./Oscilador.h: 29: 
  3894                           
  3895                           
  3896                           ;./Oscilador.h: 32:         case 7:
  3897  0AD0  1683               	bsf	3,5	;RP0=1, select bank1
  3898  0AD1  1303               	bcf	3,6	;RP1=0, select bank1
  3899  0AD2  080F               	movf	15,w	;volatile
  3900  0AD3  398F               	andlw	-113
  3901  0AD4  3840               	iorlw	64
  3902  0AD5  2AE1               	goto	L17
  3903  0AD6                     l2566:	
  3904                           ;./Oscilador.h: 33: 
  3905                           
  3906                           
  3907                           ;./Oscilador.h: 36:         default:
  3908  0AD6  1683               	bsf	3,5	;RP0=1, select bank1
  3909  0AD7  1303               	bcf	3,6	;RP1=0, select bank1
  3910  0AD8  080F               	movf	15,w	;volatile
  3911  0AD9  398F               	andlw	-113
  3912  0ADA  3850               	iorlw	80
  3913  0ADB  2AE1               	goto	L17
  3914  0ADC                     l2568:	
  3915                           ;./Oscilador.h: 37: 
  3916                           
  3917                           
  3918                           ;./Oscilador.h: 40:     }
  3919  0ADC  1683               	bsf	3,5	;RP0=1, select bank1
  3920  0ADD  1303               	bcf	3,6	;RP1=0, select bank1
  3921  0ADE  080F               	movf	15,w	;volatile
  3922  0ADF  398F               	andlw	-113
  3923  0AE0  3860               	iorlw	96
  3924  0AE1                     L17:	
  3925  0AE1  008F               	movwf	15	;volatile
  3926                           
  3927                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  3928  0AE2  2B0A               	goto	l203
  3929  0AE3                     l2570:	
  3930  0AE3                     l2572:	
  3931  0AE3  3070               	movlw	112
  3932  0AE4  1683               	bsf	3,5	;RP0=1, select bank1
  3933  0AE5  1303               	bcf	3,6	;RP1=0, select bank1
  3934  0AE6  048F               	iorwf	15,f	;volatile
  3935  0AE7  2B0A               	goto	l203
  3936  0AE8                     l2576:	
  3937  0AE8  0875               	movf	initOscilador@option,w
  3938  0AE9  00F3               	movwf	??_initOscilador
  3939  0AEA  01F4               	clrf	??_initOscilador+1
  3940                           
  3941                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3942                           ; Switch size 1, requested type "simple"
  3943                           ; Number of cases is 1, Range of values is 0 to 0
  3944                           ; switch strategies available:
  3945                           ; Name         Instructions Cycles
  3946                           ; simple_byte            4     3 (average)
  3947                           ; direct_byte           11     8 (fixed)
  3948                           ; jumptable            260     6 (fixed)
  3949                           ;	Chosen strategy is simple_byte
  3950  0AEB  0874               	movf	??_initOscilador+1,w
  3951  0AEC  3A00               	xorlw	0	; case 0
  3952  0AED  1903               	skipnz
  3953  0AEE  2AF0               	goto	l4546
  3954  0AEF  2AE3               	goto	l2572
  3955  0AF0                     l4546:	
  3956                           
  3957                           ; Switch size 1, requested type "simple"
  3958                           ; Number of cases is 8, Range of values is 0 to 7
  3959                           ; switch strategies available:
  3960                           ; Name         Instructions Cycles
  3961                           ; simple_byte           25    13 (average)
  3962                           ; direct_byte           32     8 (fixed)
  3963                           ; jumptable            260     6 (fixed)
  3964                           ;	Chosen strategy is simple_byte
  3965  0AF0  0873               	movf	??_initOscilador,w
  3966  0AF1  3A00               	xorlw	0	; case 0
  3967  0AF2  1903               	skipnz
  3968  0AF3  2AB9               	goto	l2556
  3969  0AF4  3A01               	xorlw	1	; case 1
  3970  0AF5  1903               	skipnz
  3971  0AF6  2ABE               	goto	l2558
  3972  0AF7  3A03               	xorlw	3	; case 2
  3973  0AF8  1903               	skipnz
  3974  0AF9  2AC4               	goto	l2560
  3975  0AFA  3A01               	xorlw	1	; case 3
  3976  0AFB  1903               	skipnz
  3977  0AFC  2ACA               	goto	l2562
  3978  0AFD  3A07               	xorlw	7	; case 4
  3979  0AFE  1903               	skipnz
  3980  0AFF  2AD0               	goto	l2564
  3981  0B00  3A01               	xorlw	1	; case 5
  3982  0B01  1903               	skipnz
  3983  0B02  2AD6               	goto	l2566
  3984  0B03  3A03               	xorlw	3	; case 6
  3985  0B04  1903               	skipnz
  3986  0B05  2ADC               	goto	l2568
  3987  0B06  3A01               	xorlw	1	; case 7
  3988  0B07  1903               	skipnz
  3989  0B08  2AE3               	goto	l2570
  3990  0B09  2AE3               	goto	l2572
  3991  0B0A                     l203:	
  3992  0B0A  140F               	bsf	15,0	;volatile
  3993  0B0B  0008               	return
  3994  0B0C                     __end_of_initOscilador:	
  3995                           
  3996                           	psect	text5
  3997  0E3A                     __ptext5:	
  3998 ;; *************** function _UART_Init *****************
  3999 ;; Defined at:
  4000 ;;		line 8 in file "./UART.h"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;  baudrate        4   14[BANK0 ] const long 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;  x               2    4[COMMON] unsigned int 
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  1    wreg      unsigned char 
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0, pclath, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4014 ;;      Params:         0       4       0       0       0
  4015 ;;      Locals:         2       0       0       0       0
  4016 ;;      Temps:          0      12       0       0       0
  4017 ;;      Totals:         2      16       0       0       0
  4018 ;;Total ram usage:       18 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    2
  4021 ;; This function calls:
  4022 ;;		___aldiv
  4023 ;; This function is called by:
  4024 ;;		_setup
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           
  4029                           ;psect for function _UART_Init
  4030  0E3A                     _UART_Init:	
  4031                           
  4032                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
  4033                           
  4034                           ;incstack = 0
  4035                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  4036  0E3A  1283               	bcf	3,5	;RP0=0, select bank0
  4037  0E3B  1303               	bcf	3,6	;RP1=0, select bank0
  4038  0E3C  0855               	movf	UART_Init@baudrate,w
  4039  0E3D  00D9               	movwf	??_UART_Init
  4040  0E3E  0856               	movf	UART_Init@baudrate+1,w
  4041  0E3F  00DA               	movwf	??_UART_Init+1
  4042  0E40  0857               	movf	UART_Init@baudrate+2,w
  4043  0E41  00DB               	movwf	??_UART_Init+2
  4044  0E42  0858               	movf	UART_Init@baudrate+3,w
  4045  0E43  00DC               	movwf	??_UART_Init+3
  4046  0E44  3006               	movlw	6
  4047  0E45                     u3795:	
  4048  0E45  1003               	clrc
  4049  0E46  0DD9               	rlf	??_UART_Init,f
  4050  0E47  0DDA               	rlf	??_UART_Init+1,f
  4051  0E48  0DDB               	rlf	??_UART_Init+2,f
  4052  0E49  0DDC               	rlf	??_UART_Init+3,f
  4053  0E4A  3EFF               	addlw	-1
  4054  0E4B  1D03               	skipz
  4055  0E4C  2E45               	goto	u3795
  4056  0E4D  085C               	movf	??_UART_Init+3,w
  4057  0E4E  00CA               	movwf	___aldiv@divisor+3
  4058  0E4F  085B               	movf	??_UART_Init+2,w
  4059  0E50  00C9               	movwf	___aldiv@divisor+2
  4060  0E51  085A               	movf	??_UART_Init+1,w
  4061  0E52  00C8               	movwf	___aldiv@divisor+1
  4062  0E53  0859               	movf	??_UART_Init,w
  4063  0E54  00C7               	movwf	___aldiv@divisor
  4064  0E55  0855               	movf	UART_Init@baudrate,w
  4065  0E56  00DD               	movwf	??_UART_Init+4
  4066  0E57  0856               	movf	UART_Init@baudrate+1,w
  4067  0E58  00DE               	movwf	??_UART_Init+5
  4068  0E59  0857               	movf	UART_Init@baudrate+2,w
  4069  0E5A  00DF               	movwf	??_UART_Init+6
  4070  0E5B  0858               	movf	UART_Init@baudrate+3,w
  4071  0E5C  00E0               	movwf	??_UART_Init+7
  4072  0E5D  3006               	movlw	6
  4073  0E5E                     u3805:	
  4074  0E5E  1003               	clrc
  4075  0E5F  0DDD               	rlf	??_UART_Init+4,f
  4076  0E60  0DDE               	rlf	??_UART_Init+5,f
  4077  0E61  0DDF               	rlf	??_UART_Init+6,f
  4078  0E62  0DE0               	rlf	??_UART_Init+7,f
  4079  0E63  3EFF               	addlw	-1
  4080  0E64  1D03               	skipz
  4081  0E65  2E5E               	goto	u3805
  4082  0E66  3000               	movlw	0
  4083  0E67  00E1               	movwf	??_UART_Init+8
  4084  0E68  3012               	movlw	18
  4085  0E69  00E2               	movwf	??_UART_Init+9
  4086  0E6A  307A               	movlw	122
  4087  0E6B  00E3               	movwf	??_UART_Init+10
  4088  0E6C  3000               	movlw	0
  4089  0E6D  00E4               	movwf	??_UART_Init+11
  4090  0E6E  085D               	movf	??_UART_Init+4,w
  4091  0E6F  02E1               	subwf	??_UART_Init+8,f
  4092  0E70  085E               	movf	??_UART_Init+5,w
  4093  0E71  1C03               	skipc
  4094  0E72  0F5E               	incfsz	??_UART_Init+5,w
  4095  0E73  2E75               	goto	u3811
  4096  0E74  2E76               	goto	u3812
  4097  0E75                     u3811:	
  4098  0E75  02E2               	subwf	??_UART_Init+9,f
  4099  0E76                     u3812:	
  4100  0E76  085F               	movf	??_UART_Init+6,w
  4101  0E77  1C03               	skipc
  4102  0E78  0F5F               	incfsz	??_UART_Init+6,w
  4103  0E79  2E7B               	goto	u3813
  4104  0E7A  2E7C               	goto	u3814
  4105  0E7B                     u3813:	
  4106  0E7B  02E3               	subwf	??_UART_Init+10,f
  4107  0E7C                     u3814:	
  4108  0E7C  0860               	movf	??_UART_Init+7,w
  4109  0E7D  1C03               	skipc
  4110  0E7E  0F60               	incfsz	??_UART_Init+7,w
  4111  0E7F  2E81               	goto	u3815
  4112  0E80  2E82               	goto	u3816
  4113  0E81                     u3815:	
  4114  0E81  02E4               	subwf	??_UART_Init+11,f
  4115  0E82                     u3816:	
  4116  0E82  0864               	movf	??_UART_Init+11,w
  4117  0E83  00CE               	movwf	___aldiv@dividend+3
  4118  0E84  0863               	movf	??_UART_Init+10,w
  4119  0E85  00CD               	movwf	___aldiv@dividend+2
  4120  0E86  0862               	movf	??_UART_Init+9,w
  4121  0E87  00CC               	movwf	___aldiv@dividend+1
  4122  0E88  0861               	movf	??_UART_Init+8,w
  4123  0E89  00CB               	movwf	___aldiv@dividend
  4124  0E8A  120A  158A  2506  120A  158A  	fcall	___aldiv
  4125  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  4126  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  4127  0E91  0848               	movf	?___aldiv+1,w
  4128  0E92  00F5               	movwf	UART_Init@x+1
  4129  0E93  0847               	movf	?___aldiv,w
  4130  0E94  00F4               	movwf	UART_Init@x
  4131                           
  4132                           ;./UART.h: 12:  if(x>255)
  4133  0E95  3001               	movlw	1
  4134  0E96  0275               	subwf	UART_Init@x+1,w
  4135  0E97  3000               	movlw	0
  4136  0E98  1903               	skipnz
  4137  0E99  0274               	subwf	UART_Init@x,w
  4138  0E9A  1C03               	skipc
  4139  0E9B  2EF8               	goto	l3698
  4140                           
  4141                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  4142  0E9C  0855               	movf	UART_Init@baudrate,w
  4143  0E9D  00D9               	movwf	??_UART_Init
  4144  0E9E  0856               	movf	UART_Init@baudrate+1,w
  4145  0E9F  00DA               	movwf	??_UART_Init+1
  4146  0EA0  0857               	movf	UART_Init@baudrate+2,w
  4147  0EA1  00DB               	movwf	??_UART_Init+2
  4148  0EA2  0858               	movf	UART_Init@baudrate+3,w
  4149  0EA3  00DC               	movwf	??_UART_Init+3
  4150  0EA4  3004               	movlw	4
  4151  0EA5                     u3835:	
  4152  0EA5  1003               	clrc
  4153  0EA6  0DD9               	rlf	??_UART_Init,f
  4154  0EA7  0DDA               	rlf	??_UART_Init+1,f
  4155  0EA8  0DDB               	rlf	??_UART_Init+2,f
  4156  0EA9  0DDC               	rlf	??_UART_Init+3,f
  4157  0EAA  3EFF               	addlw	-1
  4158  0EAB  1D03               	skipz
  4159  0EAC  2EA5               	goto	u3835
  4160  0EAD  085C               	movf	??_UART_Init+3,w
  4161  0EAE  00CA               	movwf	___aldiv@divisor+3
  4162  0EAF  085B               	movf	??_UART_Init+2,w
  4163  0EB0  00C9               	movwf	___aldiv@divisor+2
  4164  0EB1  085A               	movf	??_UART_Init+1,w
  4165  0EB2  00C8               	movwf	___aldiv@divisor+1
  4166  0EB3  0859               	movf	??_UART_Init,w
  4167  0EB4  00C7               	movwf	___aldiv@divisor
  4168  0EB5  0855               	movf	UART_Init@baudrate,w
  4169  0EB6  00DD               	movwf	??_UART_Init+4
  4170  0EB7  0856               	movf	UART_Init@baudrate+1,w
  4171  0EB8  00DE               	movwf	??_UART_Init+5
  4172  0EB9  0857               	movf	UART_Init@baudrate+2,w
  4173  0EBA  00DF               	movwf	??_UART_Init+6
  4174  0EBB  0858               	movf	UART_Init@baudrate+3,w
  4175  0EBC  00E0               	movwf	??_UART_Init+7
  4176  0EBD  3004               	movlw	4
  4177  0EBE                     u3845:	
  4178  0EBE  1003               	clrc
  4179  0EBF  0DDD               	rlf	??_UART_Init+4,f
  4180  0EC0  0DDE               	rlf	??_UART_Init+5,f
  4181  0EC1  0DDF               	rlf	??_UART_Init+6,f
  4182  0EC2  0DE0               	rlf	??_UART_Init+7,f
  4183  0EC3  3EFF               	addlw	-1
  4184  0EC4  1D03               	skipz
  4185  0EC5  2EBE               	goto	u3845
  4186  0EC6  3000               	movlw	0
  4187  0EC7  00E1               	movwf	??_UART_Init+8
  4188  0EC8  3012               	movlw	18
  4189  0EC9  00E2               	movwf	??_UART_Init+9
  4190  0ECA  307A               	movlw	122
  4191  0ECB  00E3               	movwf	??_UART_Init+10
  4192  0ECC  3000               	movlw	0
  4193  0ECD  00E4               	movwf	??_UART_Init+11
  4194  0ECE  085D               	movf	??_UART_Init+4,w
  4195  0ECF  02E1               	subwf	??_UART_Init+8,f
  4196  0ED0  085E               	movf	??_UART_Init+5,w
  4197  0ED1  1C03               	skipc
  4198  0ED2  0F5E               	incfsz	??_UART_Init+5,w
  4199  0ED3  2ED5               	goto	u3851
  4200  0ED4  2ED6               	goto	u3852
  4201  0ED5                     u3851:	
  4202  0ED5  02E2               	subwf	??_UART_Init+9,f
  4203  0ED6                     u3852:	
  4204  0ED6  085F               	movf	??_UART_Init+6,w
  4205  0ED7  1C03               	skipc
  4206  0ED8  0F5F               	incfsz	??_UART_Init+6,w
  4207  0ED9  2EDB               	goto	u3853
  4208  0EDA  2EDC               	goto	u3854
  4209  0EDB                     u3853:	
  4210  0EDB  02E3               	subwf	??_UART_Init+10,f
  4211  0EDC                     u3854:	
  4212  0EDC  0860               	movf	??_UART_Init+7,w
  4213  0EDD  1C03               	skipc
  4214  0EDE  0F60               	incfsz	??_UART_Init+7,w
  4215  0EDF  2EE1               	goto	u3855
  4216  0EE0  2EE2               	goto	u3856
  4217  0EE1                     u3855:	
  4218  0EE1  02E4               	subwf	??_UART_Init+11,f
  4219  0EE2                     u3856:	
  4220  0EE2  0864               	movf	??_UART_Init+11,w
  4221  0EE3  00CE               	movwf	___aldiv@dividend+3
  4222  0EE4  0863               	movf	??_UART_Init+10,w
  4223  0EE5  00CD               	movwf	___aldiv@dividend+2
  4224  0EE6  0862               	movf	??_UART_Init+9,w
  4225  0EE7  00CC               	movwf	___aldiv@dividend+1
  4226  0EE8  0861               	movf	??_UART_Init+8,w
  4227  0EE9  00CB               	movwf	___aldiv@dividend
  4228  0EEA  120A  158A  2506  120A  158A  	fcall	___aldiv
  4229  0EEF  1283               	bcf	3,5	;RP0=0, select bank0
  4230  0EF0  1303               	bcf	3,6	;RP1=0, select bank0
  4231  0EF1  0848               	movf	?___aldiv+1,w
  4232  0EF2  00F5               	movwf	UART_Init@x+1
  4233  0EF3  0847               	movf	?___aldiv,w
  4234  0EF4  00F4               	movwf	UART_Init@x
  4235                           
  4236                           ;./UART.h: 15:   BRGH = 1;
  4237  0EF5  1683               	bsf	3,5	;RP0=1, select bank1
  4238  0EF6  1303               	bcf	3,6	;RP1=0, select bank1
  4239  0EF7  1518               	bsf	24,2	;volatile
  4240  0EF8                     l3698:	
  4241                           
  4242                           ;./UART.h: 17:  if(x<256)
  4243  0EF8  3001               	movlw	1
  4244  0EF9  0275               	subwf	UART_Init@x+1,w
  4245  0EFA  3000               	movlw	0
  4246  0EFB  1903               	skipnz
  4247  0EFC  0274               	subwf	UART_Init@x,w
  4248  0EFD  1803               	skipnc
  4249  0EFE  0008               	return
  4250                           
  4251                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  4252  0EFF  0874               	movf	UART_Init@x,w
  4253  0F00  1683               	bsf	3,5	;RP0=1, select bank1
  4254  0F01  1303               	bcf	3,6	;RP1=0, select bank1
  4255  0F02  0099               	movwf	25	;volatile
  4256                           
  4257                           ;./UART.h: 20:    SYNC = 0;
  4258  0F03  1218               	bcf	24,4	;volatile
  4259                           
  4260                           ;./UART.h: 21:    SPEN = 1;
  4261  0F04  1283               	bcf	3,5	;RP0=0, select bank0
  4262  0F05  1303               	bcf	3,6	;RP1=0, select bank0
  4263  0F06  1798               	bsf	24,7	;volatile
  4264                           
  4265                           ;./UART.h: 22:           TRISC7 = 1;
  4266  0F07  1683               	bsf	3,5	;RP0=1, select bank1
  4267  0F08  1303               	bcf	3,6	;RP1=0, select bank1
  4268  0F09  1787               	bsf	7,7	;volatile
  4269                           
  4270                           ;./UART.h: 23:           TRISC6 = 1;
  4271  0F0A  1707               	bsf	7,6	;volatile
  4272                           
  4273                           ;./UART.h: 24:           CREN = 1;
  4274  0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  4275  0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  4276  0F0D  1618               	bsf	24,4	;volatile
  4277                           
  4278                           ;./UART.h: 25:           TXEN = 1;
  4279  0F0E  1683               	bsf	3,5	;RP0=1, select bank1
  4280  0F0F  1303               	bcf	3,6	;RP1=0, select bank1
  4281  0F10  1698               	bsf	24,5	;volatile
  4282  0F11  0008               	return
  4283  0F12                     __end_of_UART_Init:	
  4284                           
  4285                           	psect	text6
  4286  0D06                     __ptext6:	
  4287 ;; *************** function ___aldiv *****************
  4288 ;; Defined at:
  4289 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;  divisor         4    0[BANK0 ] long 
  4292 ;;  dividend        4    4[BANK0 ] long 
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;  quotient        4   10[BANK0 ] long 
  4295 ;;  sign            1    9[BANK0 ] unsigned char 
  4296 ;;  counter         1    8[BANK0 ] unsigned char 
  4297 ;; Return value:  Size  Location     Type
  4298 ;;                  4    0[BANK0 ] long 
  4299 ;; Registers used:
  4300 ;;		wreg, status,2, status,0
  4301 ;; Tracked objects:
  4302 ;;		On entry : 0/0
  4303 ;;		On exit  : 0/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4306 ;;      Params:         0       8       0       0       0
  4307 ;;      Locals:         0       6       0       0       0
  4308 ;;      Temps:          1       0       0       0       0
  4309 ;;      Totals:         1      14       0       0       0
  4310 ;;Total ram usage:       15 bytes
  4311 ;; Hardware stack levels used:    1
  4312 ;; Hardware stack levels required when called:    1
  4313 ;; This function calls:
  4314 ;;		Nothing
  4315 ;; This function is called by:
  4316 ;;		_UART_Init
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           
  4321                           ;psect for function ___aldiv
  4322  0D06                     ___aldiv:	
  4323                           
  4324                           ;incstack = 0
  4325                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4326  0D06  1283               	bcf	3,5	;RP0=0, select bank0
  4327  0D07  1303               	bcf	3,6	;RP1=0, select bank0
  4328  0D08  01D0               	clrf	___aldiv@sign
  4329  0D09  1FCA               	btfss	___aldiv@divisor+3,7
  4330  0D0A  2D18               	goto	l658
  4331  0D0B  09C7               	comf	___aldiv@divisor,f
  4332  0D0C  09C8               	comf	___aldiv@divisor+1,f
  4333  0D0D  09C9               	comf	___aldiv@divisor+2,f
  4334  0D0E  09CA               	comf	___aldiv@divisor+3,f
  4335  0D0F  0AC7               	incf	___aldiv@divisor,f
  4336  0D10  1903               	skipnz
  4337  0D11  0AC8               	incf	___aldiv@divisor+1,f
  4338  0D12  1903               	skipnz
  4339  0D13  0AC9               	incf	___aldiv@divisor+2,f
  4340  0D14  1903               	skipnz
  4341  0D15  0ACA               	incf	___aldiv@divisor+3,f
  4342  0D16  01D0               	clrf	___aldiv@sign
  4343  0D17  0AD0               	incf	___aldiv@sign,f
  4344  0D18                     l658:	
  4345  0D18  1FCE               	btfss	___aldiv@dividend+3,7
  4346  0D19  2D29               	goto	l3580
  4347  0D1A  09CB               	comf	___aldiv@dividend,f
  4348  0D1B  09CC               	comf	___aldiv@dividend+1,f
  4349  0D1C  09CD               	comf	___aldiv@dividend+2,f
  4350  0D1D  09CE               	comf	___aldiv@dividend+3,f
  4351  0D1E  0ACB               	incf	___aldiv@dividend,f
  4352  0D1F  1903               	skipnz
  4353  0D20  0ACC               	incf	___aldiv@dividend+1,f
  4354  0D21  1903               	skipnz
  4355  0D22  0ACD               	incf	___aldiv@dividend+2,f
  4356  0D23  1903               	skipnz
  4357  0D24  0ACE               	incf	___aldiv@dividend+3,f
  4358  0D25  3001               	movlw	1
  4359  0D26  00F3               	movwf	??___aldiv
  4360  0D27  0873               	movf	??___aldiv,w
  4361  0D28  06D0               	xorwf	___aldiv@sign,f
  4362  0D29                     l3580:	
  4363  0D29  3000               	movlw	0
  4364  0D2A  00D4               	movwf	___aldiv@quotient+3
  4365  0D2B  3000               	movlw	0
  4366  0D2C  00D3               	movwf	___aldiv@quotient+2
  4367  0D2D  3000               	movlw	0
  4368  0D2E  00D2               	movwf	___aldiv@quotient+1
  4369  0D2F  3000               	movlw	0
  4370  0D30  00D1               	movwf	___aldiv@quotient
  4371  0D31  084A               	movf	___aldiv@divisor+3,w
  4372  0D32  0449               	iorwf	___aldiv@divisor+2,w
  4373  0D33  0448               	iorwf	___aldiv@divisor+1,w
  4374  0D34  0447               	iorwf	___aldiv@divisor,w
  4375  0D35  1903               	skipnz
  4376  0D36  2D7E               	goto	l3602
  4377  0D37  01CF               	clrf	___aldiv@counter
  4378  0D38  0ACF               	incf	___aldiv@counter,f
  4379  0D39                     l3588:	
  4380  0D39  1BCA               	btfsc	___aldiv@divisor+3,7
  4381  0D3A  2D49               	goto	l3590
  4382  0D3B  3001               	movlw	1
  4383  0D3C  00F3               	movwf	??___aldiv
  4384  0D3D                     u3635:	
  4385  0D3D  1003               	clrc
  4386  0D3E  0DC7               	rlf	___aldiv@divisor,f
  4387  0D3F  0DC8               	rlf	___aldiv@divisor+1,f
  4388  0D40  0DC9               	rlf	___aldiv@divisor+2,f
  4389  0D41  0DCA               	rlf	___aldiv@divisor+3,f
  4390  0D42  0BF3               	decfsz	??___aldiv,f
  4391  0D43  2D3D               	goto	u3635
  4392  0D44  3001               	movlw	1
  4393  0D45  00F3               	movwf	??___aldiv
  4394  0D46  0873               	movf	??___aldiv,w
  4395  0D47  07CF               	addwf	___aldiv@counter,f
  4396  0D48  2D39               	goto	l3588
  4397  0D49                     l3590:	
  4398  0D49  3001               	movlw	1
  4399  0D4A  00F3               	movwf	??___aldiv
  4400  0D4B                     u3655:	
  4401  0D4B  1003               	clrc
  4402  0D4C  0DD1               	rlf	___aldiv@quotient,f
  4403  0D4D  0DD2               	rlf	___aldiv@quotient+1,f
  4404  0D4E  0DD3               	rlf	___aldiv@quotient+2,f
  4405  0D4F  0DD4               	rlf	___aldiv@quotient+3,f
  4406  0D50  0BF3               	decfsz	??___aldiv,f
  4407  0D51  2D4B               	goto	u3655
  4408  0D52  084A               	movf	___aldiv@divisor+3,w
  4409  0D53  024E               	subwf	___aldiv@dividend+3,w
  4410  0D54  1D03               	skipz
  4411  0D55  2D60               	goto	u3665
  4412  0D56  0849               	movf	___aldiv@divisor+2,w
  4413  0D57  024D               	subwf	___aldiv@dividend+2,w
  4414  0D58  1D03               	skipz
  4415  0D59  2D60               	goto	u3665
  4416  0D5A  0848               	movf	___aldiv@divisor+1,w
  4417  0D5B  024C               	subwf	___aldiv@dividend+1,w
  4418  0D5C  1D03               	skipz
  4419  0D5D  2D60               	goto	u3665
  4420  0D5E  0847               	movf	___aldiv@divisor,w
  4421  0D5F  024B               	subwf	___aldiv@dividend,w
  4422  0D60                     u3665:	
  4423  0D60  1C03               	skipc
  4424  0D61  2D71               	goto	l3598
  4425  0D62  0847               	movf	___aldiv@divisor,w
  4426  0D63  02CB               	subwf	___aldiv@dividend,f
  4427  0D64  0848               	movf	___aldiv@divisor+1,w
  4428  0D65  1C03               	skipc
  4429  0D66  0F48               	incfsz	___aldiv@divisor+1,w
  4430  0D67  02CC               	subwf	___aldiv@dividend+1,f
  4431  0D68  0849               	movf	___aldiv@divisor+2,w
  4432  0D69  1C03               	skipc
  4433  0D6A  0F49               	incfsz	___aldiv@divisor+2,w
  4434  0D6B  02CD               	subwf	___aldiv@dividend+2,f
  4435  0D6C  084A               	movf	___aldiv@divisor+3,w
  4436  0D6D  1C03               	skipc
  4437  0D6E  0F4A               	incfsz	___aldiv@divisor+3,w
  4438  0D6F  02CE               	subwf	___aldiv@dividend+3,f
  4439  0D70  1451               	bsf	___aldiv@quotient,0
  4440  0D71                     l3598:	
  4441  0D71  3001               	movlw	1
  4442  0D72                     u3675:	
  4443  0D72  1003               	clrc
  4444  0D73  0CCA               	rrf	___aldiv@divisor+3,f
  4445  0D74  0CC9               	rrf	___aldiv@divisor+2,f
  4446  0D75  0CC8               	rrf	___aldiv@divisor+1,f
  4447  0D76  0CC7               	rrf	___aldiv@divisor,f
  4448  0D77  3EFF               	addlw	-1
  4449  0D78  1D03               	skipz
  4450  0D79  2D72               	goto	u3675
  4451  0D7A  3001               	movlw	1
  4452  0D7B  02CF               	subwf	___aldiv@counter,f
  4453  0D7C  1D03               	btfss	3,2
  4454  0D7D  2D49               	goto	l3590
  4455  0D7E                     l3602:	
  4456  0D7E  0850               	movf	___aldiv@sign,w
  4457  0D7F  1903               	btfsc	3,2
  4458  0D80  2D8C               	goto	l3606
  4459  0D81  09D1               	comf	___aldiv@quotient,f
  4460  0D82  09D2               	comf	___aldiv@quotient+1,f
  4461  0D83  09D3               	comf	___aldiv@quotient+2,f
  4462  0D84  09D4               	comf	___aldiv@quotient+3,f
  4463  0D85  0AD1               	incf	___aldiv@quotient,f
  4464  0D86  1903               	skipnz
  4465  0D87  0AD2               	incf	___aldiv@quotient+1,f
  4466  0D88  1903               	skipnz
  4467  0D89  0AD3               	incf	___aldiv@quotient+2,f
  4468  0D8A  1903               	skipnz
  4469  0D8B  0AD4               	incf	___aldiv@quotient+3,f
  4470  0D8C                     l3606:	
  4471  0D8C  0854               	movf	___aldiv@quotient+3,w
  4472  0D8D  00CA               	movwf	?___aldiv+3
  4473  0D8E  0853               	movf	___aldiv@quotient+2,w
  4474  0D8F  00C9               	movwf	?___aldiv+2
  4475  0D90  0852               	movf	___aldiv@quotient+1,w
  4476  0D91  00C8               	movwf	?___aldiv+1
  4477  0D92  0851               	movf	___aldiv@quotient,w
  4478  0D93  00C7               	movwf	?___aldiv
  4479  0D94  0008               	return
  4480  0D95                     __end_of___aldiv:	
  4481                           
  4482                           	psect	text7
  4483  0C1D                     __ptext7:	
  4484 ;; *************** function _Lcd_Init *****************
  4485 ;; Defined at:
  4486 ;;		line 65 in file "./LCD4bits.h"
  4487 ;; Parameters:    Size  Location     Type
  4488 ;;		None
  4489 ;; Auto vars:     Size  Location     Type
  4490 ;;		None
  4491 ;; Return value:  Size  Location     Type
  4492 ;;                  1    wreg      void 
  4493 ;; Registers used:
  4494 ;;		wreg, status,2, status,0, pclath, cstack
  4495 ;; Tracked objects:
  4496 ;;		On entry : 0/0
  4497 ;;		On exit  : 0/0
  4498 ;;		Unchanged: 0/0
  4499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4500 ;;      Params:         0       0       0       0       0
  4501 ;;      Locals:         0       0       0       0       0
  4502 ;;      Temps:          0       2       0       0       0
  4503 ;;      Totals:         0       2       0       0       0
  4504 ;;Total ram usage:        2 bytes
  4505 ;; Hardware stack levels used:    1
  4506 ;; Hardware stack levels required when called:    3
  4507 ;; This function calls:
  4508 ;;		_Lcd_Cmd
  4509 ;;		_Lcd_Port
  4510 ;; This function is called by:
  4511 ;;		_setup
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           
  4516                           ;psect for function _Lcd_Init
  4517  0C1D                     _Lcd_Init:	
  4518                           
  4519                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  4520                           
  4521                           ;incstack = 0
  4522                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  4523  0C1D  3000               	movlw	0
  4524  0C1E  160A  118A  2659  120A  158A  	fcall	_Lcd_Port
  4525                           
  4526                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  4527  0C23  3034               	movlw	52
  4528  0C24  1283               	bcf	3,5	;RP0=0, select bank0
  4529  0C25  1303               	bcf	3,6	;RP1=0, select bank0
  4530  0C26  00C8               	movwf	??_Lcd_Init+1
  4531  0C27  30F1               	movlw	241
  4532  0C28  00C7               	movwf	??_Lcd_Init
  4533  0C29                     u5107:	
  4534  0C29  0BC7               	decfsz	??_Lcd_Init,f
  4535  0C2A  2C29               	goto	u5107
  4536  0C2B  0BC8               	decfsz	??_Lcd_Init+1,f
  4537  0C2C  2C29               	goto	u5107
  4538                           
  4539                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  4540  0C2D  3003               	movlw	3
  4541  0C2E  160A  118A  2673  120A  158A  	fcall	_Lcd_Cmd
  4542                           
  4543                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  4544  0C33  300D               	movlw	13
  4545  0C34  1283               	bcf	3,5	;RP0=0, select bank0
  4546  0C35  1303               	bcf	3,6	;RP1=0, select bank0
  4547  0C36  00C8               	movwf	??_Lcd_Init+1
  4548  0C37  30FB               	movlw	251
  4549  0C38  00C7               	movwf	??_Lcd_Init
  4550  0C39                     u5117:	
  4551  0C39  0BC7               	decfsz	??_Lcd_Init,f
  4552  0C3A  2C39               	goto	u5117
  4553  0C3B  0BC8               	decfsz	??_Lcd_Init+1,f
  4554  0C3C  2C39               	goto	u5117
  4555                           
  4556                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  4557  0C3D  3003               	movlw	3
  4558  0C3E  160A  118A  2673  120A  158A  	fcall	_Lcd_Cmd
  4559                           
  4560                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  4561  0C43  301D               	movlw	29
  4562  0C44  1283               	bcf	3,5	;RP0=0, select bank0
  4563  0C45  1303               	bcf	3,6	;RP1=0, select bank0
  4564  0C46  00C8               	movwf	??_Lcd_Init+1
  4565  0C47  3090               	movlw	144
  4566  0C48  00C7               	movwf	??_Lcd_Init
  4567  0C49                     u5127:	
  4568  0C49  0BC7               	decfsz	??_Lcd_Init,f
  4569  0C4A  2C49               	goto	u5127
  4570  0C4B  0BC8               	decfsz	??_Lcd_Init+1,f
  4571  0C4C  2C49               	goto	u5127
  4572  0C4D  0000               	nop
  4573                           
  4574                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  4575  0C4E  3003               	movlw	3
  4576  0C4F  160A  118A  2673  120A  158A  	fcall	_Lcd_Cmd
  4577                           
  4578                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  4579  0C54  3002               	movlw	2
  4580  0C55  160A  118A  2673  120A  158A  	fcall	_Lcd_Cmd
  4581                           
  4582                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  4583  0C5A  3002               	movlw	2
  4584  0C5B  160A  118A  2673  120A  158A  	fcall	_Lcd_Cmd
  4585                           
  4586                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  4587  0C60  3008               	movlw	8
  4588  0C61  160A  118A  2673  120A  158A  	fcall	_Lcd_Cmd
  4589                           
  4590                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  4591  0C66  3000               	movlw	0
  4592  0C67  160A  118A  2673  120A  158A  	fcall	_Lcd_Cmd
  4593                           
  4594                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  4595  0C6C  300C               	movlw	12
  4596  0C6D  160A  118A  2673  120A  158A  	fcall	_Lcd_Cmd
  4597                           
  4598                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  4599  0C72  3000               	movlw	0
  4600  0C73  160A  118A  2673  120A  158A  	fcall	_Lcd_Cmd
  4601                           
  4602                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  4603  0C78  3006               	movlw	6
  4604  0C79  160A  118A  2673   	fcall	_Lcd_Cmd
  4605  0C7C  0008               	return
  4606  0C7D                     __end_of_Lcd_Init:	
  4607                           
  4608                           	psect	text8
  4609  08AA                     __ptext8:	
  4610 ;; *************** function _I2C_Master_Init *****************
  4611 ;; Defined at:
  4612 ;;		line 16 in file "./I2C.h"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;  c               4   13[BANK0 ] const unsigned long 
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;		None
  4617 ;; Return value:  Size  Location     Type
  4618 ;;                  1    wreg      void 
  4619 ;; Registers used:
  4620 ;;		wreg, status,2, status,0, pclath, cstack
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4626 ;;      Params:         0       4       0       0       0
  4627 ;;      Locals:         0       0       0       0       0
  4628 ;;      Temps:          4       0       0       0       0
  4629 ;;      Totals:         4       4       0       0       0
  4630 ;;Total ram usage:        8 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; Hardware stack levels required when called:    2
  4633 ;; This function calls:
  4634 ;;		___lldiv
  4635 ;; This function is called by:
  4636 ;;		_setup
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           
  4641                           ;psect for function _I2C_Master_Init
  4642  08AA                     _I2C_Master_Init:	
  4643                           
  4644                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  4645                           
  4646                           ;incstack = 0
  4647                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  4648  08AA  3028               	movlw	40
  4649  08AB  1283               	bcf	3,5	;RP0=0, select bank0
  4650  08AC  1303               	bcf	3,6	;RP1=0, select bank0
  4651  08AD  0094               	movwf	20	;volatile
  4652                           
  4653                           ;./I2C.h: 19:     SSPCON2 = 0;
  4654  08AE  1683               	bsf	3,5	;RP0=1, select bank1
  4655  08AF  1303               	bcf	3,6	;RP1=0, select bank1
  4656  08B0  0191               	clrf	17	;volatile
  4657                           
  4658                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  4659  08B1  1283               	bcf	3,5	;RP0=0, select bank0
  4660  08B2  1303               	bcf	3,6	;RP1=0, select bank0
  4661  08B3  0854               	movf	I2C_Master_Init@c,w
  4662  08B4  00F4               	movwf	??_I2C_Master_Init
  4663  08B5  0855               	movf	I2C_Master_Init@c+1,w
  4664  08B6  00F5               	movwf	??_I2C_Master_Init+1
  4665  08B7  0856               	movf	I2C_Master_Init@c+2,w
  4666  08B8  00F6               	movwf	??_I2C_Master_Init+2
  4667  08B9  0857               	movf	I2C_Master_Init@c+3,w
  4668  08BA  00F7               	movwf	??_I2C_Master_Init+3
  4669  08BB  3002               	movlw	2
  4670  08BC                     u3775:	
  4671  08BC  1003               	clrc
  4672  08BD  0DF4               	rlf	??_I2C_Master_Init,f
  4673  08BE  0DF5               	rlf	??_I2C_Master_Init+1,f
  4674  08BF  0DF6               	rlf	??_I2C_Master_Init+2,f
  4675  08C0  0DF7               	rlf	??_I2C_Master_Init+3,f
  4676  08C1  3EFF               	addlw	-1
  4677  08C2  1D03               	skipz
  4678  08C3  28BC               	goto	u3775
  4679  08C4  0877               	movf	??_I2C_Master_Init+3,w
  4680  08C5  00CA               	movwf	___lldiv@divisor+3
  4681  08C6  0876               	movf	??_I2C_Master_Init+2,w
  4682  08C7  00C9               	movwf	___lldiv@divisor+2
  4683  08C8  0875               	movf	??_I2C_Master_Init+1,w
  4684  08C9  00C8               	movwf	___lldiv@divisor+1
  4685  08CA  0874               	movf	??_I2C_Master_Init,w
  4686  08CB  00C7               	movwf	___lldiv@divisor
  4687  08CC  3000               	movlw	0
  4688  08CD  00CE               	movwf	___lldiv@dividend+3
  4689  08CE  307A               	movlw	122
  4690  08CF  00CD               	movwf	___lldiv@dividend+2
  4691  08D0  3012               	movlw	18
  4692  08D1  00CC               	movwf	___lldiv@dividend+1
  4693  08D2  3000               	movlw	0
  4694  08D3  00CB               	movwf	___lldiv@dividend
  4695  08D4  120A  158A  23BD   	fcall	___lldiv
  4696  08D7  1283               	bcf	3,5	;RP0=0, select bank0
  4697  08D8  1303               	bcf	3,6	;RP1=0, select bank0
  4698  08D9  0847               	movf	?___lldiv,w
  4699  08DA  3EFF               	addlw	255
  4700  08DB  1683               	bsf	3,5	;RP0=1, select bank1
  4701  08DC  1303               	bcf	3,6	;RP1=0, select bank1
  4702  08DD  0093               	movwf	19	;volatile
  4703                           
  4704                           ;./I2C.h: 21:     SSPSTAT = 0;
  4705  08DE  0194               	clrf	20	;volatile
  4706                           
  4707                           ;./I2C.h: 22:     TRISCbits.TRISC3 = 1;
  4708  08DF  1587               	bsf	7,3	;volatile
  4709                           
  4710                           ;./I2C.h: 23:     TRISCbits.TRISC4 = 1;
  4711  08E0  1607               	bsf	7,4	;volatile
  4712  08E1  0008               	return
  4713  08E2                     __end_of_I2C_Master_Init:	
  4714                           
  4715                           	psect	text9
  4716  0BBD                     __ptext9:	
  4717 ;; *************** function ___lldiv *****************
  4718 ;; Defined at:
  4719 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  divisor         4    0[BANK0 ] unsigned long 
  4722 ;;  dividend        4    4[BANK0 ] unsigned long 
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  quotient        4    8[BANK0 ] unsigned long 
  4725 ;;  counter         1   12[BANK0 ] unsigned char 
  4726 ;; Return value:  Size  Location     Type
  4727 ;;                  4    0[BANK0 ] unsigned long 
  4728 ;; Registers used:
  4729 ;;		wreg, status,2, status,0
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4735 ;;      Params:         0       8       0       0       0
  4736 ;;      Locals:         0       5       0       0       0
  4737 ;;      Temps:          1       0       0       0       0
  4738 ;;      Totals:         1      13       0       0       0
  4739 ;;Total ram usage:       14 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; Hardware stack levels required when called:    1
  4742 ;; This function calls:
  4743 ;;		Nothing
  4744 ;; This function is called by:
  4745 ;;		_I2C_Master_Init
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           
  4750                           ;psect for function ___lldiv
  4751  0BBD                     ___lldiv:	
  4752                           
  4753                           ;incstack = 0
  4754                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4755  0BBD  3000               	movlw	0
  4756  0BBE  1283               	bcf	3,5	;RP0=0, select bank0
  4757  0BBF  1303               	bcf	3,6	;RP1=0, select bank0
  4758  0BC0  00D2               	movwf	___lldiv@quotient+3
  4759  0BC1  3000               	movlw	0
  4760  0BC2  00D1               	movwf	___lldiv@quotient+2
  4761  0BC3  3000               	movlw	0
  4762  0BC4  00D0               	movwf	___lldiv@quotient+1
  4763  0BC5  3000               	movlw	0
  4764  0BC6  00CF               	movwf	___lldiv@quotient
  4765  0BC7  084A               	movf	___lldiv@divisor+3,w
  4766  0BC8  0449               	iorwf	___lldiv@divisor+2,w
  4767  0BC9  0448               	iorwf	___lldiv@divisor+1,w
  4768  0BCA  0447               	iorwf	___lldiv@divisor,w
  4769  0BCB  1903               	skipnz
  4770  0BCC  2C14               	goto	l3566
  4771  0BCD  01D3               	clrf	___lldiv@counter
  4772  0BCE  0AD3               	incf	___lldiv@counter,f
  4773  0BCF                     l3552:	
  4774  0BCF  1BCA               	btfsc	___lldiv@divisor+3,7
  4775  0BD0  2BDF               	goto	l3554
  4776  0BD1  3001               	movlw	1
  4777  0BD2  00F3               	movwf	??___lldiv
  4778  0BD3                     u3545:	
  4779  0BD3  1003               	clrc
  4780  0BD4  0DC7               	rlf	___lldiv@divisor,f
  4781  0BD5  0DC8               	rlf	___lldiv@divisor+1,f
  4782  0BD6  0DC9               	rlf	___lldiv@divisor+2,f
  4783  0BD7  0DCA               	rlf	___lldiv@divisor+3,f
  4784  0BD8  0BF3               	decfsz	??___lldiv,f
  4785  0BD9  2BD3               	goto	u3545
  4786  0BDA  3001               	movlw	1
  4787  0BDB  00F3               	movwf	??___lldiv
  4788  0BDC  0873               	movf	??___lldiv,w
  4789  0BDD  07D3               	addwf	___lldiv@counter,f
  4790  0BDE  2BCF               	goto	l3552
  4791  0BDF                     l3554:	
  4792  0BDF  3001               	movlw	1
  4793  0BE0  00F3               	movwf	??___lldiv
  4794  0BE1                     u3565:	
  4795  0BE1  1003               	clrc
  4796  0BE2  0DCF               	rlf	___lldiv@quotient,f
  4797  0BE3  0DD0               	rlf	___lldiv@quotient+1,f
  4798  0BE4  0DD1               	rlf	___lldiv@quotient+2,f
  4799  0BE5  0DD2               	rlf	___lldiv@quotient+3,f
  4800  0BE6  0BF3               	decfsz	??___lldiv,f
  4801  0BE7  2BE1               	goto	u3565
  4802  0BE8  084A               	movf	___lldiv@divisor+3,w
  4803  0BE9  024E               	subwf	___lldiv@dividend+3,w
  4804  0BEA  1D03               	skipz
  4805  0BEB  2BF6               	goto	u3575
  4806  0BEC  0849               	movf	___lldiv@divisor+2,w
  4807  0BED  024D               	subwf	___lldiv@dividend+2,w
  4808  0BEE  1D03               	skipz
  4809  0BEF  2BF6               	goto	u3575
  4810  0BF0  0848               	movf	___lldiv@divisor+1,w
  4811  0BF1  024C               	subwf	___lldiv@dividend+1,w
  4812  0BF2  1D03               	skipz
  4813  0BF3  2BF6               	goto	u3575
  4814  0BF4  0847               	movf	___lldiv@divisor,w
  4815  0BF5  024B               	subwf	___lldiv@dividend,w
  4816  0BF6                     u3575:	
  4817  0BF6  1C03               	skipc
  4818  0BF7  2C07               	goto	l3562
  4819  0BF8  0847               	movf	___lldiv@divisor,w
  4820  0BF9  02CB               	subwf	___lldiv@dividend,f
  4821  0BFA  0848               	movf	___lldiv@divisor+1,w
  4822  0BFB  1C03               	skipc
  4823  0BFC  0F48               	incfsz	___lldiv@divisor+1,w
  4824  0BFD  02CC               	subwf	___lldiv@dividend+1,f
  4825  0BFE  0849               	movf	___lldiv@divisor+2,w
  4826  0BFF  1C03               	skipc
  4827  0C00  0F49               	incfsz	___lldiv@divisor+2,w
  4828  0C01  02CD               	subwf	___lldiv@dividend+2,f
  4829  0C02  084A               	movf	___lldiv@divisor+3,w
  4830  0C03  1C03               	skipc
  4831  0C04  0F4A               	incfsz	___lldiv@divisor+3,w
  4832  0C05  02CE               	subwf	___lldiv@dividend+3,f
  4833  0C06  144F               	bsf	___lldiv@quotient,0
  4834  0C07                     l3562:	
  4835  0C07  3001               	movlw	1
  4836  0C08                     u3585:	
  4837  0C08  1003               	clrc
  4838  0C09  0CCA               	rrf	___lldiv@divisor+3,f
  4839  0C0A  0CC9               	rrf	___lldiv@divisor+2,f
  4840  0C0B  0CC8               	rrf	___lldiv@divisor+1,f
  4841  0C0C  0CC7               	rrf	___lldiv@divisor,f
  4842  0C0D  3EFF               	addlw	-1
  4843  0C0E  1D03               	skipz
  4844  0C0F  2C08               	goto	u3585
  4845  0C10  3001               	movlw	1
  4846  0C11  02D3               	subwf	___lldiv@counter,f
  4847  0C12  1D03               	btfss	3,2
  4848  0C13  2BDF               	goto	l3554
  4849  0C14                     l3566:	
  4850  0C14  0852               	movf	___lldiv@quotient+3,w
  4851  0C15  00CA               	movwf	?___lldiv+3
  4852  0C16  0851               	movf	___lldiv@quotient+2,w
  4853  0C17  00C9               	movwf	?___lldiv+2
  4854  0C18  0850               	movf	___lldiv@quotient+1,w
  4855  0C19  00C8               	movwf	?___lldiv+1
  4856  0C1A  084F               	movf	___lldiv@quotient,w
  4857  0C1B  00C7               	movwf	?___lldiv
  4858  0C1C  0008               	return
  4859  0C1D                     __end_of___lldiv:	
  4860                           
  4861                           	psect	text10
  4862  16A8                     __ptext10:	
  4863 ;; *************** function _open_door *****************
  4864 ;; Defined at:
  4865 ;;		line 679 in file "mainMaster.c"
  4866 ;; Parameters:    Size  Location     Type
  4867 ;;		None
  4868 ;; Auto vars:     Size  Location     Type
  4869 ;;		None
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  1    wreg      void 
  4872 ;; Registers used:
  4873 ;;		wreg, status,2, status,0, pclath, cstack
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4879 ;;      Params:         0       0       0       0       0
  4880 ;;      Locals:         0       0       0       0       0
  4881 ;;      Temps:          0       0       0       0       0
  4882 ;;      Totals:         0       0       0       0       0
  4883 ;;Total ram usage:        0 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; Hardware stack levels required when called:    3
  4886 ;; This function calls:
  4887 ;;		_I2C_Master_Start
  4888 ;;		_I2C_Master_Stop
  4889 ;;		_I2C_Master_Write
  4890 ;; This function is called by:
  4891 ;;		_main
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           
  4896                           ;psect for function _open_door
  4897  16A8                     _open_door:	
  4898                           
  4899                           ;mainMaster.c: 682:     I2C_Master_Start();
  4900                           
  4901                           ;incstack = 0
  4902                           ; Regs used in _open_door: [wreg+status,2+status,0+pclath+cstack]
  4903  16A8  160A  118A  25F8  160A  118A  	fcall	_I2C_Master_Start
  4904                           
  4905                           ;mainMaster.c: 683:     I2C_Master_Write(0x20);
  4906  16AD  3020               	movlw	32
  4907  16AE  00F3               	movwf	I2C_Master_Write@d
  4908  16AF  3000               	movlw	0
  4909  16B0  00F4               	movwf	I2C_Master_Write@d+1
  4910  16B1  160A  118A  260D  160A  118A  	fcall	_I2C_Master_Write
  4911                           
  4912                           ;mainMaster.c: 684:     I2C_Master_Write(0xFF);
  4913  16B6  30FF               	movlw	255
  4914  16B7  00F3               	movwf	I2C_Master_Write@d
  4915  16B8  3000               	movlw	0
  4916  16B9  00F4               	movwf	I2C_Master_Write@d+1
  4917  16BA  160A  118A  260D  160A  118A  	fcall	_I2C_Master_Write
  4918                           
  4919                           ;mainMaster.c: 685:     I2C_Master_Stop();
  4920  16BF  160A  118A  25FF   	fcall	_I2C_Master_Stop
  4921  16C2  0008               	return
  4922  16C3                     __end_of_open_door:	
  4923                           
  4924                           	psect	text11
  4925  174B                     __ptext11:	
  4926 ;; *************** function _get_tripwire *****************
  4927 ;; Defined at:
  4928 ;;		line 643 in file "mainMaster.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;		None
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;  trip            1    2[BANK0 ] unsigned char 
  4933 ;; Return value:  Size  Location     Type
  4934 ;;                  1    wreg      unsigned char 
  4935 ;; Registers used:
  4936 ;;		wreg, status,2, status,0, pclath, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4942 ;;      Params:         0       0       0       0       0
  4943 ;;      Locals:         0       1       0       0       0
  4944 ;;      Temps:          1       0       0       0       0
  4945 ;;      Totals:         1       1       0       0       0
  4946 ;;Total ram usage:        2 bytes
  4947 ;; Hardware stack levels used:    1
  4948 ;; Hardware stack levels required when called:    3
  4949 ;; This function calls:
  4950 ;;		_I2C_Master_Read
  4951 ;;		_I2C_Master_Start
  4952 ;;		_I2C_Master_Stop
  4953 ;;		_I2C_Master_Write
  4954 ;; This function is called by:
  4955 ;;		_main
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           
  4960                           ;psect for function _get_tripwire
  4961  174B                     _get_tripwire:	
  4962                           
  4963                           ;mainMaster.c: 645:     char trip;;mainMaster.c: 647:     I2C_Master_Start();
  4964                           
  4965                           ;incstack = 0
  4966                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  4967  174B  160A  118A  25F8  160A  118A  	fcall	_I2C_Master_Start
  4968                           
  4969                           ;mainMaster.c: 648:     I2C_Master_Write(0x21);
  4970  1750  3021               	movlw	33
  4971  1751  00F3               	movwf	I2C_Master_Write@d
  4972  1752  3000               	movlw	0
  4973  1753  00F4               	movwf	I2C_Master_Write@d+1
  4974  1754  160A  118A  260D  160A  118A  	fcall	_I2C_Master_Write
  4975                           
  4976                           ;mainMaster.c: 649:     trip = I2C_Master_Read(0);
  4977  1759  3000               	movlw	0
  4978  175A  00F3               	movwf	I2C_Master_Read@a
  4979  175B  00F4               	movwf	I2C_Master_Read@a+1
  4980  175C  160A  118A  276E  160A  118A  	fcall	_I2C_Master_Read
  4981  1761  0873               	movf	?_I2C_Master_Read,w
  4982  1762  00F7               	movwf	??_get_tripwire
  4983  1763  0877               	movf	??_get_tripwire,w
  4984  1764  1283               	bcf	3,5	;RP0=0, select bank0
  4985  1765  1303               	bcf	3,6	;RP1=0, select bank0
  4986  1766  00C9               	movwf	get_tripwire@trip
  4987                           
  4988                           ;mainMaster.c: 650:     I2C_Master_Stop();
  4989  1767  160A  118A  25FF   	fcall	_I2C_Master_Stop
  4990                           
  4991                           ;mainMaster.c: 652:     return (trip);
  4992  176A  1283               	bcf	3,5	;RP0=0, select bank0
  4993  176B  1303               	bcf	3,6	;RP1=0, select bank0
  4994  176C  0849               	movf	get_tripwire@trip,w
  4995  176D  0008               	return
  4996  176E                     __end_of_get_tripwire:	
  4997                           
  4998                           	psect	text12
  4999  0C7D                     __ptext12:	
  5000 ;; *************** function _get_time *****************
  5001 ;; Defined at:
  5002 ;;		line 566 in file "mainMaster.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;  time_string     1    wreg     PTR unsigned char 
  5005 ;;		 -> time(6), 
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;  time_string     1    6[BANK0 ] PTR unsigned char 
  5008 ;;		 -> time(6), 
  5009 ;;  min             1    5[BANK0 ] unsigned char 
  5010 ;;  hour            1    4[BANK0 ] unsigned char 
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  1    wreg      void 
  5013 ;; Registers used:
  5014 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5020 ;;      Params:         0       0       0       0       0
  5021 ;;      Locals:         0       3       0       0       0
  5022 ;;      Temps:          0       2       0       0       0
  5023 ;;      Totals:         0       5       0       0       0
  5024 ;;Total ram usage:        5 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    3
  5027 ;; This function calls:
  5028 ;;		_I2C_Master_Read
  5029 ;;		_I2C_Master_RepeatedStart
  5030 ;;		_I2C_Master_Start
  5031 ;;		_I2C_Master_Stop
  5032 ;;		_I2C_Master_Write
  5033 ;; This function is called by:
  5034 ;;		_main
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           
  5039                           ;psect for function _get_time
  5040  0C7D                     _get_time:	
  5041                           
  5042                           ;incstack = 0
  5043                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5044                           ;get_time@time_string stored from wreg
  5045  0C7D  1283               	bcf	3,5	;RP0=0, select bank0
  5046  0C7E  1303               	bcf	3,6	;RP1=0, select bank0
  5047  0C7F  00CD               	movwf	get_time@time_string
  5048                           
  5049                           ;mainMaster.c: 568:     char hour, min;;mainMaster.c: 570:     I2C_Master_Start();
  5050  0C80  160A  118A  25F8  120A  158A  	fcall	_I2C_Master_Start
  5051                           
  5052                           ;mainMaster.c: 571:     I2C_Master_Write(0xD0);
  5053  0C85  30D0               	movlw	208
  5054  0C86  00F3               	movwf	I2C_Master_Write@d
  5055  0C87  3000               	movlw	0
  5056  0C88  00F4               	movwf	I2C_Master_Write@d+1
  5057  0C89  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Write
  5058                           
  5059                           ;mainMaster.c: 572:     I2C_Master_Write(0x01);
  5060  0C8E  3001               	movlw	1
  5061  0C8F  00F3               	movwf	I2C_Master_Write@d
  5062  0C90  3000               	movlw	0
  5063  0C91  00F4               	movwf	I2C_Master_Write@d+1
  5064  0C92  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Write
  5065                           
  5066                           ;mainMaster.c: 573:     I2C_Master_RepeatedStart();
  5067  0C97  160A  118A  2606  120A  158A  	fcall	_I2C_Master_RepeatedStart
  5068                           
  5069                           ;mainMaster.c: 574:     I2C_Master_Write(0xD1);
  5070  0C9C  30D1               	movlw	209
  5071  0C9D  00F3               	movwf	I2C_Master_Write@d
  5072  0C9E  3000               	movlw	0
  5073  0C9F  00F4               	movwf	I2C_Master_Write@d+1
  5074  0CA0  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Write
  5075                           
  5076                           ;mainMaster.c: 575:     min = I2C_Master_Read(1);
  5077  0CA5  3001               	movlw	1
  5078  0CA6  00F3               	movwf	I2C_Master_Read@a
  5079  0CA7  3000               	movlw	0
  5080  0CA8  00F4               	movwf	I2C_Master_Read@a+1
  5081  0CA9  160A  118A  276E  120A  158A  	fcall	_I2C_Master_Read
  5082  0CAE  0873               	movf	?_I2C_Master_Read,w
  5083  0CAF  1283               	bcf	3,5	;RP0=0, select bank0
  5084  0CB0  1303               	bcf	3,6	;RP1=0, select bank0
  5085  0CB1  00C9               	movwf	??_get_time
  5086  0CB2  0849               	movf	??_get_time,w
  5087  0CB3  00CC               	movwf	get_time@min
  5088                           
  5089                           ;mainMaster.c: 576:     hour = I2C_Master_Read(0);
  5090  0CB4  3000               	movlw	0
  5091  0CB5  00F3               	movwf	I2C_Master_Read@a
  5092  0CB6  00F4               	movwf	I2C_Master_Read@a+1
  5093  0CB7  160A  118A  276E  120A  158A  	fcall	_I2C_Master_Read
  5094  0CBC  0873               	movf	?_I2C_Master_Read,w
  5095  0CBD  1283               	bcf	3,5	;RP0=0, select bank0
  5096  0CBE  1303               	bcf	3,6	;RP1=0, select bank0
  5097  0CBF  00C9               	movwf	??_get_time
  5098  0CC0  0849               	movf	??_get_time,w
  5099  0CC1  00CB               	movwf	get_time@hour
  5100                           
  5101                           ;mainMaster.c: 577:     I2C_Master_Stop();
  5102  0CC2  160A  118A  25FF  120A  158A  	fcall	_I2C_Master_Stop
  5103                           
  5104                           ;mainMaster.c: 580:     time_string[0] = (hour >> 4) + '0';
  5105  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  5106  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  5107  0CC9  084B               	movf	get_time@hour,w
  5108  0CCA  00C9               	movwf	??_get_time
  5109  0CCB  3004               	movlw	4
  5110  0CCC                     u4035:	
  5111  0CCC  1003               	clrc
  5112  0CCD  0CC9               	rrf	??_get_time,f
  5113  0CCE  3EFF               	addlw	-1
  5114  0CCF  1D03               	skipz
  5115  0CD0  2CCC               	goto	u4035
  5116  0CD1  0849               	movf	??_get_time,w
  5117  0CD2  3E30               	addlw	48
  5118  0CD3  00CA               	movwf	??_get_time+1
  5119  0CD4  084D               	movf	get_time@time_string,w
  5120  0CD5  0084               	movwf	4
  5121  0CD6  084A               	movf	??_get_time+1,w
  5122  0CD7  1383               	bcf	3,7	;select IRP bank0
  5123  0CD8  0080               	movwf	0
  5124                           
  5125                           ;mainMaster.c: 581:     time_string[1] = (hour & 0x0F) + '0';
  5126  0CD9  084B               	movf	get_time@hour,w
  5127  0CDA  390F               	andlw	15
  5128  0CDB  3E30               	addlw	48
  5129  0CDC  00C9               	movwf	??_get_time
  5130  0CDD  0A4D               	incf	get_time@time_string,w
  5131  0CDE  0084               	movwf	4
  5132  0CDF  0849               	movf	??_get_time,w
  5133  0CE0  0080               	movwf	0
  5134                           
  5135                           ;mainMaster.c: 582:     time_string[2] = ':';
  5136  0CE1  303A               	movlw	58
  5137  0CE2  00C9               	movwf	??_get_time
  5138  0CE3  084D               	movf	get_time@time_string,w
  5139  0CE4  3E02               	addlw	2
  5140  0CE5  0084               	movwf	4
  5141  0CE6  0849               	movf	??_get_time,w
  5142  0CE7  0080               	movwf	0
  5143                           
  5144                           ;mainMaster.c: 583:     time_string[3] = (min >> 4) + '0';
  5145  0CE8  084C               	movf	get_time@min,w
  5146  0CE9  00C9               	movwf	??_get_time
  5147  0CEA  3004               	movlw	4
  5148  0CEB                     u4045:	
  5149  0CEB  1003               	clrc
  5150  0CEC  0CC9               	rrf	??_get_time,f
  5151  0CED  3EFF               	addlw	-1
  5152  0CEE  1D03               	skipz
  5153  0CEF  2CEB               	goto	u4045
  5154  0CF0  0849               	movf	??_get_time,w
  5155  0CF1  3E30               	addlw	48
  5156  0CF2  00CA               	movwf	??_get_time+1
  5157  0CF3  084D               	movf	get_time@time_string,w
  5158  0CF4  3E03               	addlw	3
  5159  0CF5  0084               	movwf	4
  5160  0CF6  084A               	movf	??_get_time+1,w
  5161  0CF7  0080               	movwf	0
  5162                           
  5163                           ;mainMaster.c: 584:     time_string[4] = (min & 0x0F) + '0';
  5164  0CF8  084C               	movf	get_time@min,w
  5165  0CF9  390F               	andlw	15
  5166  0CFA  3E30               	addlw	48
  5167  0CFB  00C9               	movwf	??_get_time
  5168  0CFC  084D               	movf	get_time@time_string,w
  5169  0CFD  3E04               	addlw	4
  5170  0CFE  0084               	movwf	4
  5171  0CFF  0849               	movf	??_get_time,w
  5172  0D00  0080               	movwf	0
  5173                           
  5174                           ;mainMaster.c: 585:     time_string[5] = '\0';
  5175  0D01  084D               	movf	get_time@time_string,w
  5176  0D02  3E05               	addlw	5
  5177  0D03  0084               	movwf	4
  5178  0D04  0180               	clrf	0
  5179  0D05  0008               	return
  5180  0D06                     __end_of_get_time:	
  5181                           
  5182                           	psect	text13
  5183  0D95                     __ptext13:	
  5184 ;; *************** function _get_temp *****************
  5185 ;; Defined at:
  5186 ;;		line 603 in file "mainMaster.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;  temp_string     1    wreg     PTR unsigned char 
  5189 ;;		 -> temp(6), 
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;  temp_string     1   31[BANK0 ] PTR unsigned char 
  5192 ;;		 -> temp(6), 
  5193 ;;  decimal         3   27[BANK0 ] unsigned char [3]
  5194 ;;  tempLSB         1   32[BANK0 ] unsigned char 
  5195 ;;  tempMSB         1   30[BANK0 ] unsigned char 
  5196 ;; Return value:  Size  Location     Type
  5197 ;;                  1    wreg      void 
  5198 ;; Registers used:
  5199 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5200 ;; Tracked objects:
  5201 ;;		On entry : 0/0
  5202 ;;		On exit  : 0/0
  5203 ;;		Unchanged: 0/0
  5204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5205 ;;      Params:         0       0       0       0       0
  5206 ;;      Locals:         0       6       0       0       0
  5207 ;;      Temps:          0       3       0       0       0
  5208 ;;      Totals:         0       9       0       0       0
  5209 ;;Total ram usage:        9 bytes
  5210 ;; Hardware stack levels used:    1
  5211 ;; Hardware stack levels required when called:    3
  5212 ;; This function calls:
  5213 ;;		_I2C_Master_Read
  5214 ;;		_I2C_Master_RepeatedStart
  5215 ;;		_I2C_Master_Start
  5216 ;;		_I2C_Master_Stop
  5217 ;;		_I2C_Master_Write
  5218 ;;		___bmul
  5219 ;;		_sprintf
  5220 ;;		_strcat
  5221 ;; This function is called by:
  5222 ;;		_main
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           
  5227                           ;psect for function _get_temp
  5228  0D95                     _get_temp:	
  5229                           
  5230                           ;incstack = 0
  5231                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5232                           ;get_temp@temp_string stored from wreg
  5233  0D95  1283               	bcf	3,5	;RP0=0, select bank0
  5234  0D96  1303               	bcf	3,6	;RP1=0, select bank0
  5235  0D97  00E6               	movwf	get_temp@temp_string
  5236                           
  5237                           ;mainMaster.c: 605:     char tempLSB, tempMSB;;mainMaster.c: 606:     char decimal[3];;m
      +                          ainMaster.c: 608:     I2C_Master_Start();
  5238  0D98  160A  118A  25F8  120A  158A  	fcall	_I2C_Master_Start
  5239                           
  5240                           ;mainMaster.c: 609:     I2C_Master_Write(0xD0);
  5241  0D9D  30D0               	movlw	208
  5242  0D9E  00F3               	movwf	I2C_Master_Write@d
  5243  0D9F  3000               	movlw	0
  5244  0DA0  00F4               	movwf	I2C_Master_Write@d+1
  5245  0DA1  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Write
  5246                           
  5247                           ;mainMaster.c: 610:     I2C_Master_Write(0x11);
  5248  0DA6  3011               	movlw	17
  5249  0DA7  00F3               	movwf	I2C_Master_Write@d
  5250  0DA8  3000               	movlw	0
  5251  0DA9  00F4               	movwf	I2C_Master_Write@d+1
  5252  0DAA  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Write
  5253                           
  5254                           ;mainMaster.c: 611:     I2C_Master_RepeatedStart();
  5255  0DAF  160A  118A  2606  120A  158A  	fcall	_I2C_Master_RepeatedStart
  5256                           
  5257                           ;mainMaster.c: 612:     I2C_Master_Write(0xD1);
  5258  0DB4  30D1               	movlw	209
  5259  0DB5  00F3               	movwf	I2C_Master_Write@d
  5260  0DB6  3000               	movlw	0
  5261  0DB7  00F4               	movwf	I2C_Master_Write@d+1
  5262  0DB8  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Write
  5263                           
  5264                           ;mainMaster.c: 613:     tempMSB = I2C_Master_Read(1);
  5265  0DBD  3001               	movlw	1
  5266  0DBE  00F3               	movwf	I2C_Master_Read@a
  5267  0DBF  3000               	movlw	0
  5268  0DC0  00F4               	movwf	I2C_Master_Read@a+1
  5269  0DC1  160A  118A  276E  120A  158A  	fcall	_I2C_Master_Read
  5270  0DC6  0873               	movf	?_I2C_Master_Read,w
  5271  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  5272  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  5273  0DC9  00DF               	movwf	??_get_temp
  5274  0DCA  085F               	movf	??_get_temp,w
  5275  0DCB  00E5               	movwf	get_temp@tempMSB
  5276                           
  5277                           ;mainMaster.c: 614:     tempLSB = I2C_Master_Read(0);
  5278  0DCC  3000               	movlw	0
  5279  0DCD  00F3               	movwf	I2C_Master_Read@a
  5280  0DCE  00F4               	movwf	I2C_Master_Read@a+1
  5281  0DCF  160A  118A  276E  120A  158A  	fcall	_I2C_Master_Read
  5282  0DD4  0873               	movf	?_I2C_Master_Read,w
  5283  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  5284  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  5285  0DD7  00DF               	movwf	??_get_temp
  5286  0DD8  085F               	movf	??_get_temp,w
  5287  0DD9  00E7               	movwf	get_temp@tempLSB
  5288                           
  5289                           ;mainMaster.c: 615:     I2C_Master_Stop();
  5290  0DDA  160A  118A  25FF  120A  158A  	fcall	_I2C_Master_Stop
  5291                           
  5292                           ;mainMaster.c: 618:     tempMSB = tempMSB - 4;
  5293  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  5294  0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  5295  0DE1  0865               	movf	get_temp@tempMSB,w
  5296  0DE2  3EFC               	addlw	252
  5297  0DE3  00DF               	movwf	??_get_temp
  5298  0DE4  085F               	movf	??_get_temp,w
  5299  0DE5  00E5               	movwf	get_temp@tempMSB
  5300                           
  5301                           ;mainMaster.c: 619:     tempLSB = (tempLSB >> 6) * 25;
  5302  0DE6  3019               	movlw	25
  5303  0DE7  00DF               	movwf	??_get_temp
  5304  0DE8  085F               	movf	??_get_temp,w
  5305  0DE9  00F3               	movwf	___bmul@multiplicand
  5306  0DEA  0867               	movf	get_temp@tempLSB,w
  5307  0DEB  00E0               	movwf	??_get_temp+1
  5308  0DEC  3006               	movlw	6
  5309  0DED                     u4015:	
  5310  0DED  1003               	clrc
  5311  0DEE  0CE0               	rrf	??_get_temp+1,f
  5312  0DEF  3EFF               	addlw	-1
  5313  0DF0  1D03               	skipz
  5314  0DF1  2DED               	goto	u4015
  5315  0DF2  0860               	movf	??_get_temp+1,w
  5316  0DF3  160A  118A  2648  120A  158A  	fcall	___bmul
  5317  0DF8  1283               	bcf	3,5	;RP0=0, select bank0
  5318  0DF9  1303               	bcf	3,6	;RP1=0, select bank0
  5319  0DFA  00E1               	movwf	??_get_temp+2
  5320  0DFB  0861               	movf	??_get_temp+2,w
  5321  0DFC  00E7               	movwf	get_temp@tempLSB
  5322                           
  5323                           ;mainMaster.c: 620:     sprintf(temp_string, "%d", tempMSB);
  5324  0DFD  307A               	movlw	low ((STR_36+1)| (0+32768))
  5325  0DFE  00D0               	movwf	sprintf@f
  5326  0DFF  3088               	movlw	high ((STR_36+1)| (0+32768))
  5327  0E00  00D1               	movwf	sprintf@f+1
  5328  0E01  0865               	movf	get_temp@tempMSB,w
  5329  0E02  00DF               	movwf	??_get_temp
  5330  0E03  01E0               	clrf	??_get_temp+1
  5331  0E04  085F               	movf	??_get_temp,w
  5332  0E05  00D2               	movwf	?_sprintf+2
  5333  0E06  0860               	movf	??_get_temp+1,w
  5334  0E07  00D3               	movwf	?_sprintf+3
  5335  0E08  0866               	movf	get_temp@temp_string,w
  5336  0E09  120A  158A  2712  120A  158A  	fcall	_sprintf
  5337                           
  5338                           ;mainMaster.c: 621:     if (tempLSB == 0){
  5339  0E0E  1283               	bcf	3,5	;RP0=0, select bank0
  5340  0E0F  1303               	bcf	3,6	;RP1=0, select bank0
  5341  0E10  0867               	movf	get_temp@tempLSB,w
  5342  0E11  1D03               	btfss	3,2
  5343  0E12  2E17               	goto	l3888
  5344                           
  5345                           ;mainMaster.c: 622:         sprintf(decimal, ".%d0", tempLSB);
  5346  0E13  3074               	movlw	low (STR_35| (0+32768))
  5347  0E14  00D0               	movwf	sprintf@f
  5348  0E15  3088               	movlw	high (STR_35| (0+32768))
  5349  0E16  2E1A               	goto	L18
  5350  0E17                     l3888:	
  5351                           ;mainMaster.c: 623:     } else {
  5352                           
  5353                           
  5354                           ;mainMaster.c: 624:         sprintf(decimal, ".%d", tempLSB);
  5355  0E17  3079               	movlw	low (STR_36| (0+32768))
  5356  0E18  00D0               	movwf	sprintf@f
  5357  0E19  3088               	movlw	high (STR_36| (0+32768))
  5358  0E1A                     L18:	
  5359  0E1A  00D1               	movwf	sprintf@f+1
  5360  0E1B  0867               	movf	get_temp@tempLSB,w
  5361  0E1C  00DF               	movwf	??_get_temp
  5362  0E1D  01E0               	clrf	??_get_temp+1
  5363  0E1E  085F               	movf	??_get_temp,w
  5364  0E1F  00D2               	movwf	?_sprintf+2
  5365  0E20  0860               	movf	??_get_temp+1,w
  5366  0E21  00D3               	movwf	?_sprintf+3
  5367  0E22  3062               	movlw	(low (get_temp@decimal| 0))& (0+255)
  5368  0E23  120A  158A  2712  120A  158A  	fcall	_sprintf
  5369                           
  5370                           ;mainMaster.c: 626:     strcat(temp_string, decimal);
  5371  0E28  3062               	movlw	(low (get_temp@decimal| 0))& (0+255)
  5372  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  5373  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  5374  0E2B  00DF               	movwf	??_get_temp
  5375  0E2C  085F               	movf	??_get_temp,w
  5376  0E2D  00F3               	movwf	strcat@from
  5377  0E2E  0866               	movf	get_temp@temp_string,w
  5378  0E2F  120A  158A  2086   	fcall	_strcat
  5379                           
  5380                           ;mainMaster.c: 627:     temp_string[5] = '\0';
  5381  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  5382  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  5383  0E34  0866               	movf	get_temp@temp_string,w
  5384  0E35  3E05               	addlw	5
  5385  0E36  0084               	movwf	4
  5386  0E37  1383               	bcf	3,7	;select IRP bank0
  5387  0E38  0180               	clrf	0
  5388  0E39  0008               	return
  5389  0E3A                     __end_of_get_temp:	
  5390                           
  5391                           	psect	text14
  5392  0886                     __ptext14:	
  5393 ;; *************** function _strcat *****************
  5394 ;; Defined at:
  5395 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  5396 ;; Parameters:    Size  Location     Type
  5397 ;;  to              1    wreg     PTR unsigned char 
  5398 ;;		 -> temp(6), 
  5399 ;;  from            1    3[COMMON] PTR const unsigned char 
  5400 ;;		 -> get_temp@decimal(3), 
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;  to              1    5[COMMON] PTR unsigned char 
  5403 ;;		 -> temp(6), 
  5404 ;;  cp              1    6[COMMON] PTR unsigned char 
  5405 ;;		 -> temp(6), 
  5406 ;; Return value:  Size  Location     Type
  5407 ;;                  1    wreg      PTR unsigned char 
  5408 ;; Registers used:
  5409 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5410 ;; Tracked objects:
  5411 ;;		On entry : 0/0
  5412 ;;		On exit  : 0/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5415 ;;      Params:         1       0       0       0       0
  5416 ;;      Locals:         2       0       0       0       0
  5417 ;;      Temps:          1       0       0       0       0
  5418 ;;      Totals:         4       0       0       0       0
  5419 ;;Total ram usage:        4 bytes
  5420 ;; Hardware stack levels used:    1
  5421 ;; Hardware stack levels required when called:    1
  5422 ;; This function calls:
  5423 ;;		Nothing
  5424 ;; This function is called by:
  5425 ;;		_get_temp
  5426 ;; This function uses a non-reentrant model
  5427 ;;
  5428                           
  5429                           
  5430                           ;psect for function _strcat
  5431  0886                     _strcat:	
  5432                           
  5433                           ;incstack = 0
  5434                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  5435                           ;strcat@to stored from wreg
  5436  0886  00F5               	movwf	strcat@to
  5437  0887  0875               	movf	strcat@to,w
  5438  0888  00F4               	movwf	??_strcat
  5439  0889  0874               	movf	??_strcat,w
  5440  088A  00F6               	movwf	strcat@cp
  5441  088B                     l2674:	
  5442  088B  0876               	movf	strcat@cp,w
  5443  088C  0084               	movwf	4
  5444  088D  1383               	bcf	3,7	;select IRP bank0
  5445  088E  0800               	movf	0,w
  5446  088F  1903               	btfsc	3,2
  5447  0890  289E               	goto	l2678
  5448  0891  3001               	movlw	1
  5449  0892  00F4               	movwf	??_strcat
  5450  0893  0874               	movf	??_strcat,w
  5451  0894  07F6               	addwf	strcat@cp,f
  5452  0895  288B               	goto	l2674
  5453  0896                     l2676:	
  5454  0896  3001               	movlw	1
  5455  0897  00F4               	movwf	??_strcat
  5456  0898  0874               	movf	??_strcat,w
  5457  0899  07F6               	addwf	strcat@cp,f
  5458  089A  3001               	movlw	1
  5459  089B  00F4               	movwf	??_strcat
  5460  089C  0874               	movf	??_strcat,w
  5461  089D  07F3               	addwf	strcat@from,f
  5462  089E                     l2678:	
  5463  089E  0873               	movf	strcat@from,w
  5464  089F  0084               	movwf	4
  5465  08A0  0800               	movf	0,w
  5466  08A1  00F4               	movwf	??_strcat
  5467  08A2  0876               	movf	strcat@cp,w
  5468  08A3  0084               	movwf	4
  5469  08A4  0874               	movf	??_strcat,w
  5470  08A5  0080               	movwf	0
  5471  08A6  0800               	movf	0,w
  5472  08A7  1903               	btfsc	3,2
  5473  08A8  0008               	return
  5474  08A9  2896               	goto	l2676
  5475  08AA                     __end_of_strcat:	
  5476                           
  5477                           	psect	text15
  5478  0F12                     __ptext15:	
  5479 ;; *************** function _sprintf *****************
  5480 ;; Defined at:
  5481 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  5482 ;; Parameters:    Size  Location     Type
  5483 ;;  sp              1    wreg     PTR unsigned char 
  5484 ;;		 -> get_temp@decimal(3), temp(6), 
  5485 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  5486 ;;		 -> STR_36(4), STR_35(5), STR_34(3), 
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;  sp              1   22[BANK0 ] PTR unsigned char 
  5489 ;;		 -> get_temp@decimal(3), temp(6), 
  5490 ;;  tmpval          4    0        struct .
  5491 ;;  val             2   20[BANK0 ] unsigned int 
  5492 ;;  cp              2    0        PTR const unsigned char 
  5493 ;;  len             2    0        unsigned int 
  5494 ;;  c               1   23[BANK0 ] unsigned char 
  5495 ;;  prec            1   19[BANK0 ] char 
  5496 ;;  flag            1   18[BANK0 ] unsigned char 
  5497 ;;  ap              1   17[BANK0 ] PTR void [1]
  5498 ;;		 -> ?_sprintf(2), 
  5499 ;; Return value:  Size  Location     Type
  5500 ;;                  2    9[BANK0 ] int 
  5501 ;; Registers used:
  5502 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5503 ;; Tracked objects:
  5504 ;;		On entry : 0/0
  5505 ;;		On exit  : 0/0
  5506 ;;		Unchanged: 0/0
  5507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5508 ;;      Params:         0       4       0       0       0
  5509 ;;      Locals:         0       7       0       0       0
  5510 ;;      Temps:          0       4       0       0       0
  5511 ;;      Totals:         0      15       0       0       0
  5512 ;;Total ram usage:       15 bytes
  5513 ;; Hardware stack levels used:    1
  5514 ;; Hardware stack levels required when called:    2
  5515 ;; This function calls:
  5516 ;;		___lwdiv
  5517 ;;		___lwmod
  5518 ;; This function is called by:
  5519 ;;		_get_temp
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           
  5524                           ;psect for function _sprintf
  5525  0F12                     _sprintf:	
  5526                           
  5527                           ;incstack = 0
  5528                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5529                           ;sprintf@sp stored from wreg
  5530  0F12  1283               	bcf	3,5	;RP0=0, select bank0
  5531  0F13  1303               	bcf	3,6	;RP1=0, select bank0
  5532  0F14  00DD               	movwf	sprintf@sp
  5533                           
  5534                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  5535  0F15  3052               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5536  0F16  00D4               	movwf	??_sprintf
  5537  0F17  0854               	movf	??_sprintf,w
  5538  0F18  00D8               	movwf	sprintf@ap
  5539  0F19                     l3768:	
  5540                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5541                           
  5542                           
  5543                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5544  0F19  0851               	movf	sprintf@f+1,w
  5545  0F1A  00D5               	movwf	??_sprintf+1
  5546  0F1B  0850               	movf	sprintf@f,w
  5547  0F1C  00D4               	movwf	??_sprintf
  5548  0F1D  0AD0               	incf	sprintf@f,f
  5549  0F1E  1903               	skipnz
  5550  0F1F  0AD1               	incf	sprintf@f+1,f
  5551  0F20  0855               	movf	??_sprintf+1,w
  5552  0F21  00FF               	movwf	127
  5553  0F22  0854               	movf	??_sprintf,w
  5554  0F23  0084               	movwf	4
  5555  0F24  120A  118A  2700  120A  158A  	fcall	stringtab
  5556  0F29  00D6               	movwf	??_sprintf+2
  5557  0F2A  0856               	movf	??_sprintf+2,w
  5558  0F2B  00DE               	movwf	sprintf@c
  5559  0F2C  085E               	movf	sprintf@c,w
  5560  0F2D  1903               	btfsc	3,2
  5561  0F2E  2FFB               	goto	l3770
  5562                           
  5563                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  5564  0F2F  3025               	movlw	37
  5565  0F30  065E               	xorwf	sprintf@c,w
  5566  0F31  1903               	btfsc	3,2
  5567  0F32  2F3F               	goto	l3724
  5568                           
  5569                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  5570  0F33  085E               	movf	sprintf@c,w
  5571  0F34  00D4               	movwf	??_sprintf
  5572  0F35  085D               	movf	sprintf@sp,w
  5573  0F36  0084               	movwf	4
  5574  0F37  0854               	movf	??_sprintf,w
  5575  0F38  1383               	bcf	3,7	;select IRP bank0
  5576  0F39  0080               	movwf	0
  5577  0F3A  3001               	movlw	1
  5578  0F3B  00D4               	movwf	??_sprintf
  5579  0F3C  0854               	movf	??_sprintf,w
  5580  0F3D  07DD               	addwf	sprintf@sp,f
  5581                           
  5582                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  5583  0F3E  2F19               	goto	l3768
  5584  0F3F                     l3724:	
  5585                           
  5586                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  5587  0F3F  01D9               	clrf	sprintf@flag
  5588                           
  5589                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  5590  0F40  0851               	movf	sprintf@f+1,w
  5591  0F41  00D5               	movwf	??_sprintf+1
  5592  0F42  0850               	movf	sprintf@f,w
  5593  0F43  00D4               	movwf	??_sprintf
  5594  0F44  0AD0               	incf	sprintf@f,f
  5595  0F45  1903               	skipnz
  5596  0F46  0AD1               	incf	sprintf@f+1,f
  5597  0F47  0855               	movf	??_sprintf+1,w
  5598  0F48  00FF               	movwf	127
  5599  0F49  0854               	movf	??_sprintf,w
  5600  0F4A  0084               	movwf	4
  5601  0F4B  120A  118A  2700  120A  158A  	fcall	stringtab
  5602  0F50  00DE               	movwf	sprintf@c
  5603  0F51  00D6               	movwf	??_sprintf+2
  5604  0F52  01D7               	clrf	??_sprintf+3
  5605                           
  5606                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5607                           ; Switch size 1, requested type "simple"
  5608                           ; Number of cases is 1, Range of values is 0 to 0
  5609                           ; switch strategies available:
  5610                           ; Name         Instructions Cycles
  5611                           ; simple_byte            4     3 (average)
  5612                           ; direct_byte           11     8 (fixed)
  5613                           ; jumptable            260     6 (fixed)
  5614                           ;	Chosen strategy is simple_byte
  5615  0F53  0857               	movf	??_sprintf+3,w
  5616  0F54  3A00               	xorlw	0	; case 0
  5617  0F55  1903               	skipnz
  5618  0F56  2F58               	goto	l4548
  5619  0F57  2F19               	goto	l3768
  5620  0F58                     l4548:	
  5621                           
  5622                           ; Switch size 1, requested type "simple"
  5623                           ; Number of cases is 3, Range of values is 0 to 105
  5624                           ; switch strategies available:
  5625                           ; Name         Instructions Cycles
  5626                           ; simple_byte           10     6 (average)
  5627                           ; jumptable            260     6 (fixed)
  5628                           ;	Chosen strategy is simple_byte
  5629  0F58  0856               	movf	??_sprintf+2,w
  5630  0F59  3A00               	xorlw	0	; case 0
  5631  0F5A  1903               	skipnz
  5632  0F5B  2FFB               	goto	l3770
  5633  0F5C  3A64               	xorlw	100	; case 100
  5634  0F5D  1903               	skipnz
  5635  0F5E  2F63               	goto	l3730
  5636  0F5F  3A0D               	xorlw	13	; case 105
  5637  0F60  1903               	skipnz
  5638  0F61  2F63               	goto	l3730
  5639  0F62  2F19               	goto	l3768
  5640  0F63                     l3730:	
  5641                           
  5642                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5643  0F63  0858               	movf	sprintf@ap,w
  5644  0F64  0084               	movwf	4
  5645  0F65  1383               	bcf	3,7	;select IRP bank0
  5646  0F66  0800               	movf	0,w
  5647  0F67  00DB               	movwf	sprintf@val
  5648  0F68  0A84               	incf	4,f
  5649  0F69  0800               	movf	0,w
  5650  0F6A  00DC               	movwf	sprintf@val+1
  5651  0F6B  3002               	movlw	2
  5652  0F6C  00D4               	movwf	??_sprintf
  5653  0F6D  0854               	movf	??_sprintf,w
  5654  0F6E  07D8               	addwf	sprintf@ap,f
  5655                           
  5656                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  5657  0F6F  1FDC               	btfss	sprintf@val+1,7
  5658  0F70  2F7A               	goto	l3740
  5659                           
  5660                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  5661  0F71  3003               	movlw	3
  5662  0F72  00D4               	movwf	??_sprintf
  5663  0F73  0854               	movf	??_sprintf,w
  5664  0F74  04D9               	iorwf	sprintf@flag,f
  5665                           
  5666                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  5667  0F75  09DB               	comf	sprintf@val,f
  5668  0F76  09DC               	comf	sprintf@val+1,f
  5669  0F77  0ADB               	incf	sprintf@val,f
  5670  0F78  1903               	skipnz
  5671  0F79  0ADC               	incf	sprintf@val+1,f
  5672  0F7A                     l3740:	
  5673                           
  5674                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5675  0F7A  01DE               	clrf	sprintf@c
  5676  0F7B  0ADE               	incf	sprintf@c,f
  5677  0F7C                     l3746:	
  5678                           
  5679                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  5680  0F7C  085E               	movf	sprintf@c,w
  5681  0F7D  00D4               	movwf	??_sprintf
  5682  0F7E  0754               	addwf	??_sprintf,w
  5683  0F7F  3E12               	addlw	low (_dpowers| (0+32768))
  5684  0F80  0084               	movwf	4
  5685  0F81  3087               	movlw	high (_dpowers| (0+32768))
  5686  0F82  1803               	skipnc
  5687  0F83  3E01               	addlw	1
  5688  0F84  00FF               	movwf	127
  5689  0F85  120A  118A  2700  120A  158A  	fcall	stringtab
  5690  0F8A  00D5               	movwf	??_sprintf+1
  5691  0F8B  120A  118A  2700  120A  158A  	fcall	stringtab
  5692  0F90  00D6               	movwf	??_sprintf+2
  5693  0F91  0856               	movf	??_sprintf+2,w
  5694  0F92  025C               	subwf	sprintf@val+1,w
  5695  0F93  1D03               	skipz
  5696  0F94  2F97               	goto	u3895
  5697  0F95  0855               	movf	??_sprintf+1,w
  5698  0F96  025B               	subwf	sprintf@val,w
  5699  0F97                     u3895:	
  5700  0F97  1C03               	btfss	3,0
  5701  0F98  2FA1               	goto	l3752
  5702  0F99  3001               	movlw	1
  5703  0F9A  00D4               	movwf	??_sprintf
  5704  0F9B  0854               	movf	??_sprintf,w
  5705  0F9C  07DE               	addwf	sprintf@c,f
  5706  0F9D  3005               	movlw	5
  5707  0F9E  065E               	xorwf	sprintf@c,w
  5708  0F9F  1D03               	btfss	3,2
  5709  0FA0  2F7C               	goto	l3746
  5710  0FA1                     l3752:	
  5711                           
  5712                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  5713  0FA1  0859               	movf	sprintf@flag,w
  5714  0FA2  3903               	andlw	3
  5715  0FA3  1903               	btfsc	3,2
  5716  0FA4  2FB0               	goto	l3758
  5717                           
  5718                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  5719  0FA5  302D               	movlw	45
  5720  0FA6  00D4               	movwf	??_sprintf
  5721  0FA7  085D               	movf	sprintf@sp,w
  5722  0FA8  0084               	movwf	4
  5723  0FA9  0854               	movf	??_sprintf,w
  5724  0FAA  1383               	bcf	3,7	;select IRP bank0
  5725  0FAB  0080               	movwf	0
  5726  0FAC  3001               	movlw	1
  5727  0FAD  00D4               	movwf	??_sprintf
  5728  0FAE  0854               	movf	??_sprintf,w
  5729  0FAF  07DD               	addwf	sprintf@sp,f
  5730  0FB0                     l3758:	
  5731                           
  5732                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  5733  0FB0  085E               	movf	sprintf@c,w
  5734  0FB1  00D4               	movwf	??_sprintf
  5735  0FB2  0854               	movf	??_sprintf,w
  5736  0FB3  00DA               	movwf	sprintf@prec
  5737  0FB4                     l3766:	
  5738                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5739                           
  5740                           
  5741                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5742  0FB4  30FF               	movlw	255
  5743  0FB5  00D4               	movwf	??_sprintf
  5744  0FB6  0854               	movf	??_sprintf,w
  5745  0FB7  07DA               	addwf	sprintf@prec,f
  5746  0FB8  0A5A               	incf	sprintf@prec,w
  5747  0FB9  1903               	btfsc	3,2
  5748  0FBA  2F19               	goto	l3768
  5749                           
  5750                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  5751  0FBB  300A               	movlw	10
  5752  0FBC  00CA               	movwf	___lwmod@divisor
  5753  0FBD  3000               	movlw	0
  5754  0FBE  00CB               	movwf	___lwmod@divisor+1
  5755  0FBF  085A               	movf	sprintf@prec,w
  5756  0FC0  00D4               	movwf	??_sprintf
  5757  0FC1  0754               	addwf	??_sprintf,w
  5758  0FC2  3E12               	addlw	low (_dpowers| (0+32768))
  5759  0FC3  0084               	movwf	4
  5760  0FC4  3087               	movlw	high (_dpowers| (0+32768))
  5761  0FC5  1803               	skipnc
  5762  0FC6  3E01               	addlw	1
  5763  0FC7  00FF               	movwf	127
  5764  0FC8  120A  118A  2700  120A  158A  	fcall	stringtab
  5765  0FCD  00F3               	movwf	___lwdiv@divisor
  5766  0FCE  120A  118A  2700  120A  158A  	fcall	stringtab
  5767  0FD3  00F4               	movwf	___lwdiv@divisor+1
  5768  0FD4  085C               	movf	sprintf@val+1,w
  5769  0FD5  00F6               	movwf	___lwdiv@dividend+1
  5770  0FD6  085B               	movf	sprintf@val,w
  5771  0FD7  00F5               	movwf	___lwdiv@dividend
  5772  0FD8  120A  158A  2155  120A  158A  	fcall	___lwdiv
  5773  0FDD  0874               	movf	?___lwdiv+1,w
  5774  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  5775  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  5776  0FE0  00CD               	movwf	___lwmod@dividend+1
  5777  0FE1  0873               	movf	?___lwdiv,w
  5778  0FE2  00CC               	movwf	___lwmod@dividend
  5779  0FE3  160A  118A  27CC  120A  158A  	fcall	___lwmod
  5780  0FE8  1283               	bcf	3,5	;RP0=0, select bank0
  5781  0FE9  1303               	bcf	3,6	;RP1=0, select bank0
  5782  0FEA  084A               	movf	?___lwmod,w
  5783  0FEB  3E30               	addlw	48
  5784  0FEC  00D5               	movwf	??_sprintf+1
  5785  0FED  0855               	movf	??_sprintf+1,w
  5786  0FEE  00DE               	movwf	sprintf@c
  5787                           
  5788                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  5789  0FEF  085E               	movf	sprintf@c,w
  5790  0FF0  00D4               	movwf	??_sprintf
  5791  0FF1  085D               	movf	sprintf@sp,w
  5792  0FF2  0084               	movwf	4
  5793  0FF3  0854               	movf	??_sprintf,w
  5794  0FF4  1383               	bcf	3,7	;select IRP bank0
  5795  0FF5  0080               	movwf	0
  5796  0FF6  3001               	movlw	1
  5797  0FF7  00D4               	movwf	??_sprintf
  5798  0FF8  0854               	movf	??_sprintf,w
  5799  0FF9  07DD               	addwf	sprintf@sp,f
  5800  0FFA  2FB4               	goto	l3766
  5801  0FFB                     l3770:	
  5802                           
  5803                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  5804  0FFB  085D               	movf	sprintf@sp,w
  5805  0FFC  0084               	movwf	4
  5806  0FFD  1383               	bcf	3,7	;select IRP bank0
  5807  0FFE  0180               	clrf	0
  5808  0FFF  0008               	return
  5809  1000                     __end_of_sprintf:	
  5810                           
  5811                           	psect	text16
  5812  17CC                     __ptext16:	
  5813 ;; *************** function ___lwmod *****************
  5814 ;; Defined at:
  5815 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;  divisor         2    3[BANK0 ] unsigned int 
  5818 ;;  dividend        2    5[BANK0 ] unsigned int 
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;  counter         1    8[BANK0 ] unsigned char 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  2    3[BANK0 ] unsigned int 
  5823 ;; Registers used:
  5824 ;;		wreg, status,2, status,0
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5830 ;;      Params:         0       4       0       0       0
  5831 ;;      Locals:         0       1       0       0       0
  5832 ;;      Temps:          0       1       0       0       0
  5833 ;;      Totals:         0       6       0       0       0
  5834 ;;Total ram usage:        6 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    1
  5837 ;; This function calls:
  5838 ;;		Nothing
  5839 ;; This function is called by:
  5840 ;;		_sprintf
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function ___lwmod
  5846  17CC                     ___lwmod:	
  5847                           
  5848                           ;incstack = 0
  5849                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5850  17CC  1283               	bcf	3,5	;RP0=0, select bank0
  5851  17CD  1303               	bcf	3,6	;RP1=0, select bank0
  5852  17CE  084A               	movf	___lwmod@divisor,w
  5853  17CF  044B               	iorwf	___lwmod@divisor+1,w
  5854  17D0  1903               	btfsc	3,2
  5855  17D1  2FFB               	goto	l2476
  5856  17D2  01CF               	clrf	___lwmod@counter
  5857  17D3  0ACF               	incf	___lwmod@counter,f
  5858  17D4                     l2466:	
  5859  17D4  1BCB               	btfsc	___lwmod@divisor+1,7
  5860  17D5  2FE2               	goto	l2468
  5861  17D6  3001               	movlw	1
  5862  17D7                     u2085:	
  5863  17D7  1003               	clrc
  5864  17D8  0DCA               	rlf	___lwmod@divisor,f
  5865  17D9  0DCB               	rlf	___lwmod@divisor+1,f
  5866  17DA  3EFF               	addlw	-1
  5867  17DB  1D03               	skipz
  5868  17DC  2FD7               	goto	u2085
  5869  17DD  3001               	movlw	1
  5870  17DE  00CE               	movwf	??___lwmod
  5871  17DF  084E               	movf	??___lwmod,w
  5872  17E0  07CF               	addwf	___lwmod@counter,f
  5873  17E1  2FD4               	goto	l2466
  5874  17E2                     l2468:	
  5875  17E2  084B               	movf	___lwmod@divisor+1,w
  5876  17E3  024D               	subwf	___lwmod@dividend+1,w
  5877  17E4  1D03               	skipz
  5878  17E5  2FE8               	goto	u2105
  5879  17E6  084A               	movf	___lwmod@divisor,w
  5880  17E7  024C               	subwf	___lwmod@dividend,w
  5881  17E8                     u2105:	
  5882  17E8  1C03               	skipc
  5883  17E9  2FF0               	goto	l2472
  5884  17EA  084A               	movf	___lwmod@divisor,w
  5885  17EB  02CC               	subwf	___lwmod@dividend,f
  5886  17EC  084B               	movf	___lwmod@divisor+1,w
  5887  17ED  1C03               	skipc
  5888  17EE  03CD               	decf	___lwmod@dividend+1,f
  5889  17EF  02CD               	subwf	___lwmod@dividend+1,f
  5890  17F0                     l2472:	
  5891  17F0  3001               	movlw	1
  5892  17F1                     u2115:	
  5893  17F1  1003               	clrc
  5894  17F2  0CCB               	rrf	___lwmod@divisor+1,f
  5895  17F3  0CCA               	rrf	___lwmod@divisor,f
  5896  17F4  3EFF               	addlw	-1
  5897  17F5  1D03               	skipz
  5898  17F6  2FF1               	goto	u2115
  5899  17F7  3001               	movlw	1
  5900  17F8  02CF               	subwf	___lwmod@counter,f
  5901  17F9  1D03               	btfss	3,2
  5902  17FA  2FE2               	goto	l2468
  5903  17FB                     l2476:	
  5904  17FB  084D               	movf	___lwmod@dividend+1,w
  5905  17FC  00CB               	movwf	?___lwmod+1
  5906  17FD  084C               	movf	___lwmod@dividend,w
  5907  17FE  00CA               	movwf	?___lwmod
  5908  17FF  0008               	return
  5909  1800                     __end_of___lwmod:	
  5910                           
  5911                           	psect	text17
  5912  0955                     __ptext17:	
  5913 ;; *************** function ___lwdiv *****************
  5914 ;; Defined at:
  5915 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;  divisor         2    3[COMMON] unsigned int 
  5918 ;;  dividend        2    5[COMMON] unsigned int 
  5919 ;; Auto vars:     Size  Location     Type
  5920 ;;  quotient        2    1[BANK0 ] unsigned int 
  5921 ;;  counter         1    0[BANK0 ] unsigned char 
  5922 ;; Return value:  Size  Location     Type
  5923 ;;                  2    3[COMMON] unsigned int 
  5924 ;; Registers used:
  5925 ;;		wreg, status,2, status,0
  5926 ;; Tracked objects:
  5927 ;;		On entry : 0/0
  5928 ;;		On exit  : 0/0
  5929 ;;		Unchanged: 0/0
  5930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5931 ;;      Params:         4       0       0       0       0
  5932 ;;      Locals:         0       3       0       0       0
  5933 ;;      Temps:          1       0       0       0       0
  5934 ;;      Totals:         5       3       0       0       0
  5935 ;;Total ram usage:        8 bytes
  5936 ;; Hardware stack levels used:    1
  5937 ;; Hardware stack levels required when called:    1
  5938 ;; This function calls:
  5939 ;;		Nothing
  5940 ;; This function is called by:
  5941 ;;		_sprintf
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945                           
  5946                           ;psect for function ___lwdiv
  5947  0955                     ___lwdiv:	
  5948                           
  5949                           ;incstack = 0
  5950                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5951  0955  1283               	bcf	3,5	;RP0=0, select bank0
  5952  0956  1303               	bcf	3,6	;RP1=0, select bank0
  5953  0957  01C8               	clrf	___lwdiv@quotient
  5954  0958  01C9               	clrf	___lwdiv@quotient+1
  5955  0959  0873               	movf	___lwdiv@divisor,w
  5956  095A  0474               	iorwf	___lwdiv@divisor+1,w
  5957  095B  1903               	btfsc	3,2
  5958  095C  298E               	goto	l3632
  5959  095D  01C7               	clrf	___lwdiv@counter
  5960  095E  0AC7               	incf	___lwdiv@counter,f
  5961  095F                     l3620:	
  5962  095F  1BF4               	btfsc	___lwdiv@divisor+1,7
  5963  0960  296D               	goto	l3622
  5964  0961  3001               	movlw	1
  5965  0962                     u3715:	
  5966  0962  1003               	clrc
  5967  0963  0DF3               	rlf	___lwdiv@divisor,f
  5968  0964  0DF4               	rlf	___lwdiv@divisor+1,f
  5969  0965  3EFF               	addlw	-1
  5970  0966  1D03               	skipz
  5971  0967  2962               	goto	u3715
  5972  0968  3001               	movlw	1
  5973  0969  00F7               	movwf	??___lwdiv
  5974  096A  0877               	movf	??___lwdiv,w
  5975  096B  07C7               	addwf	___lwdiv@counter,f
  5976  096C  295F               	goto	l3620
  5977  096D                     l3622:	
  5978  096D  3001               	movlw	1
  5979  096E                     u3735:	
  5980  096E  1003               	clrc
  5981  096F  0DC8               	rlf	___lwdiv@quotient,f
  5982  0970  0DC9               	rlf	___lwdiv@quotient+1,f
  5983  0971  3EFF               	addlw	-1
  5984  0972  1D03               	skipz
  5985  0973  296E               	goto	u3735
  5986  0974  0874               	movf	___lwdiv@divisor+1,w
  5987  0975  0276               	subwf	___lwdiv@dividend+1,w
  5988  0976  1D03               	skipz
  5989  0977  297A               	goto	u3745
  5990  0978  0873               	movf	___lwdiv@divisor,w
  5991  0979  0275               	subwf	___lwdiv@dividend,w
  5992  097A                     u3745:	
  5993  097A  1C03               	skipc
  5994  097B  2983               	goto	l3628
  5995  097C  0873               	movf	___lwdiv@divisor,w
  5996  097D  02F5               	subwf	___lwdiv@dividend,f
  5997  097E  0874               	movf	___lwdiv@divisor+1,w
  5998  097F  1C03               	skipc
  5999  0980  03F6               	decf	___lwdiv@dividend+1,f
  6000  0981  02F6               	subwf	___lwdiv@dividend+1,f
  6001  0982  1448               	bsf	___lwdiv@quotient,0
  6002  0983                     l3628:	
  6003  0983  3001               	movlw	1
  6004  0984                     u3755:	
  6005  0984  1003               	clrc
  6006  0985  0CF4               	rrf	___lwdiv@divisor+1,f
  6007  0986  0CF3               	rrf	___lwdiv@divisor,f
  6008  0987  3EFF               	addlw	-1
  6009  0988  1D03               	skipz
  6010  0989  2984               	goto	u3755
  6011  098A  3001               	movlw	1
  6012  098B  02C7               	subwf	___lwdiv@counter,f
  6013  098C  1D03               	btfss	3,2
  6014  098D  296D               	goto	l3622
  6015  098E                     l3632:	
  6016  098E  0849               	movf	___lwdiv@quotient+1,w
  6017  098F  00F4               	movwf	?___lwdiv+1
  6018  0990  0848               	movf	___lwdiv@quotient,w
  6019  0991  00F3               	movwf	?___lwdiv
  6020  0992  0008               	return
  6021  0993                     __end_of___lwdiv:	
  6022                           
  6023                           	psect	text18
  6024  1648                     __ptext18:	
  6025 ;; *************** function ___bmul *****************
  6026 ;; Defined at:
  6027 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  6028 ;; Parameters:    Size  Location     Type
  6029 ;;  multiplier      1    wreg     unsigned char 
  6030 ;;  multiplicand    1    3[COMMON] unsigned char 
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;  multiplier      1    6[COMMON] unsigned char 
  6033 ;;  product         1    5[COMMON] unsigned char 
  6034 ;; Return value:  Size  Location     Type
  6035 ;;                  1    wreg      unsigned char 
  6036 ;; Registers used:
  6037 ;;		wreg, status,2, status,0
  6038 ;; Tracked objects:
  6039 ;;		On entry : 0/0
  6040 ;;		On exit  : 0/0
  6041 ;;		Unchanged: 0/0
  6042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6043 ;;      Params:         1       0       0       0       0
  6044 ;;      Locals:         2       0       0       0       0
  6045 ;;      Temps:          1       0       0       0       0
  6046 ;;      Totals:         4       0       0       0       0
  6047 ;;Total ram usage:        4 bytes
  6048 ;; Hardware stack levels used:    1
  6049 ;; Hardware stack levels required when called:    1
  6050 ;; This function calls:
  6051 ;;		Nothing
  6052 ;; This function is called by:
  6053 ;;		_main
  6054 ;;		_get_temp
  6055 ;; This function uses a non-reentrant model
  6056 ;;
  6057                           
  6058                           
  6059                           ;psect for function ___bmul
  6060  1648                     ___bmul:	
  6061                           
  6062                           ;incstack = 0
  6063                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6064                           ;___bmul@multiplier stored from wreg
  6065  1648  00F6               	movwf	___bmul@multiplier
  6066  1649  01F5               	clrf	___bmul@product
  6067  164A                     l2682:	
  6068  164A  1C76               	btfss	___bmul@multiplier,0
  6069  164B  2E50               	goto	l2686
  6070  164C  0873               	movf	___bmul@multiplicand,w
  6071  164D  00F4               	movwf	??___bmul
  6072  164E  0874               	movf	??___bmul,w
  6073  164F  07F5               	addwf	___bmul@product,f
  6074  1650                     l2686:	
  6075  1650  1003               	clrc
  6076  1651  0DF3               	rlf	___bmul@multiplicand,f
  6077  1652  1003               	clrc
  6078  1653  0CF6               	rrf	___bmul@multiplier,f
  6079  1654  0876               	movf	___bmul@multiplier,w
  6080  1655  1D03               	btfss	3,2
  6081  1656  2E4A               	goto	l2682
  6082  1657  0875               	movf	___bmul@product,w
  6083  1658  0008               	return
  6084  1659                     __end_of___bmul:	
  6085                           
  6086                           	psect	text19
  6087  1728                     __ptext19:	
  6088 ;; *************** function _get_hall *****************
  6089 ;; Defined at:
  6090 ;;		line 631 in file "mainMaster.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;		None
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  key             1    2[BANK0 ] unsigned char 
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  1    wreg      unsigned char 
  6097 ;; Registers used:
  6098 ;;		wreg, status,2, status,0, pclath, cstack
  6099 ;; Tracked objects:
  6100 ;;		On entry : 0/0
  6101 ;;		On exit  : 0/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6104 ;;      Params:         0       0       0       0       0
  6105 ;;      Locals:         0       1       0       0       0
  6106 ;;      Temps:          1       0       0       0       0
  6107 ;;      Totals:         1       1       0       0       0
  6108 ;;Total ram usage:        2 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; Hardware stack levels required when called:    3
  6111 ;; This function calls:
  6112 ;;		_I2C_Master_Read
  6113 ;;		_I2C_Master_Start
  6114 ;;		_I2C_Master_Stop
  6115 ;;		_I2C_Master_Write
  6116 ;; This function is called by:
  6117 ;;		_main
  6118 ;; This function uses a non-reentrant model
  6119 ;;
  6120                           
  6121                           
  6122                           ;psect for function _get_hall
  6123  1728                     _get_hall:	
  6124                           
  6125                           ;mainMaster.c: 633:     char key;;mainMaster.c: 635:     I2C_Master_Start();
  6126                           
  6127                           ;incstack = 0
  6128                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  6129  1728  160A  118A  25F8  160A  118A  	fcall	_I2C_Master_Start
  6130                           
  6131                           ;mainMaster.c: 636:     I2C_Master_Write(0x11);
  6132  172D  3011               	movlw	17
  6133  172E  00F3               	movwf	I2C_Master_Write@d
  6134  172F  3000               	movlw	0
  6135  1730  00F4               	movwf	I2C_Master_Write@d+1
  6136  1731  160A  118A  260D  160A  118A  	fcall	_I2C_Master_Write
  6137                           
  6138                           ;mainMaster.c: 637:     key = I2C_Master_Read(0);
  6139  1736  3000               	movlw	0
  6140  1737  00F3               	movwf	I2C_Master_Read@a
  6141  1738  00F4               	movwf	I2C_Master_Read@a+1
  6142  1739  160A  118A  276E  160A  118A  	fcall	_I2C_Master_Read
  6143  173E  0873               	movf	?_I2C_Master_Read,w
  6144  173F  00F7               	movwf	??_get_hall
  6145  1740  0877               	movf	??_get_hall,w
  6146  1741  1283               	bcf	3,5	;RP0=0, select bank0
  6147  1742  1303               	bcf	3,6	;RP1=0, select bank0
  6148  1743  00C9               	movwf	get_hall@key
  6149                           
  6150                           ;mainMaster.c: 638:     I2C_Master_Stop();
  6151  1744  160A  118A  25FF   	fcall	_I2C_Master_Stop
  6152                           
  6153                           ;mainMaster.c: 640:     return (key);
  6154  1747  1283               	bcf	3,5	;RP0=0, select bank0
  6155  1748  1303               	bcf	3,6	;RP1=0, select bank0
  6156  1749  0849               	movf	get_hall@key,w
  6157  174A  0008               	return
  6158  174B                     __end_of_get_hall:	
  6159                           
  6160                           	psect	text20
  6161  091B                     __ptext20:	
  6162 ;; *************** function _get_day *****************
  6163 ;; Defined at:
  6164 ;;		line 588 in file "mainMaster.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;		None
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;  d               1    2[BANK0 ] unsigned char 
  6169 ;; Return value:  Size  Location     Type
  6170 ;;                  1    wreg      unsigned char 
  6171 ;; Registers used:
  6172 ;;		wreg, status,2, status,0, pclath, cstack
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6178 ;;      Params:         0       0       0       0       0
  6179 ;;      Locals:         0       1       0       0       0
  6180 ;;      Temps:          1       0       0       0       0
  6181 ;;      Totals:         1       1       0       0       0
  6182 ;;Total ram usage:        2 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; Hardware stack levels required when called:    3
  6185 ;; This function calls:
  6186 ;;		_I2C_Master_Read
  6187 ;;		_I2C_Master_RepeatedStart
  6188 ;;		_I2C_Master_Start
  6189 ;;		_I2C_Master_Stop
  6190 ;;		_I2C_Master_Write
  6191 ;; This function is called by:
  6192 ;;		_main
  6193 ;; This function uses a non-reentrant model
  6194 ;;
  6195                           
  6196                           
  6197                           ;psect for function _get_day
  6198  091B                     _get_day:	
  6199                           
  6200                           ;mainMaster.c: 590:     char d;;mainMaster.c: 592:     I2C_Master_Start();
  6201                           
  6202                           ;incstack = 0
  6203                           ; Regs used in _get_day: [wreg+status,2+status,0+pclath+cstack]
  6204  091B  160A  118A  25F8  120A  158A  	fcall	_I2C_Master_Start
  6205                           
  6206                           ;mainMaster.c: 593:     I2C_Master_Write(0xD0);
  6207  0920  30D0               	movlw	208
  6208  0921  00F3               	movwf	I2C_Master_Write@d
  6209  0922  3000               	movlw	0
  6210  0923  00F4               	movwf	I2C_Master_Write@d+1
  6211  0924  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Write
  6212                           
  6213                           ;mainMaster.c: 594:     I2C_Master_Write(0x03);
  6214  0929  3003               	movlw	3
  6215  092A  00F3               	movwf	I2C_Master_Write@d
  6216  092B  3000               	movlw	0
  6217  092C  00F4               	movwf	I2C_Master_Write@d+1
  6218  092D  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Write
  6219                           
  6220                           ;mainMaster.c: 595:     I2C_Master_RepeatedStart();
  6221  0932  160A  118A  2606  120A  158A  	fcall	_I2C_Master_RepeatedStart
  6222                           
  6223                           ;mainMaster.c: 596:     I2C_Master_Write(0xD1);
  6224  0937  30D1               	movlw	209
  6225  0938  00F3               	movwf	I2C_Master_Write@d
  6226  0939  3000               	movlw	0
  6227  093A  00F4               	movwf	I2C_Master_Write@d+1
  6228  093B  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Write
  6229                           
  6230                           ;mainMaster.c: 597:     d = I2C_Master_Read(0);
  6231  0940  3000               	movlw	0
  6232  0941  00F3               	movwf	I2C_Master_Read@a
  6233  0942  00F4               	movwf	I2C_Master_Read@a+1
  6234  0943  160A  118A  276E  120A  158A  	fcall	_I2C_Master_Read
  6235  0948  0873               	movf	?_I2C_Master_Read,w
  6236  0949  00F7               	movwf	??_get_day
  6237  094A  0877               	movf	??_get_day,w
  6238  094B  1283               	bcf	3,5	;RP0=0, select bank0
  6239  094C  1303               	bcf	3,6	;RP1=0, select bank0
  6240  094D  00C9               	movwf	get_day@d
  6241                           
  6242                           ;mainMaster.c: 598:     I2C_Master_Stop();
  6243  094E  160A  118A  25FF   	fcall	_I2C_Master_Stop
  6244                           
  6245                           ;mainMaster.c: 600:     return d;
  6246  0951  1283               	bcf	3,5	;RP0=0, select bank0
  6247  0952  1303               	bcf	3,6	;RP1=0, select bank0
  6248  0953  0849               	movf	get_day@d,w
  6249  0954  0008               	return
  6250  0955                     __end_of_get_day:	
  6251                           
  6252                           	psect	text21
  6253  1606                     __ptext21:	
  6254 ;; *************** function _I2C_Master_RepeatedStart *****************
  6255 ;; Defined at:
  6256 ;;		line 47 in file "./I2C.h"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;		None
  6259 ;; Auto vars:     Size  Location     Type
  6260 ;;		None
  6261 ;; Return value:  Size  Location     Type
  6262 ;;                  1    wreg      void 
  6263 ;; Registers used:
  6264 ;;		wreg, status,2, status,0, pclath, cstack
  6265 ;; Tracked objects:
  6266 ;;		On entry : 0/0
  6267 ;;		On exit  : 0/0
  6268 ;;		Unchanged: 0/0
  6269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6270 ;;      Params:         0       0       0       0       0
  6271 ;;      Locals:         0       0       0       0       0
  6272 ;;      Temps:          0       0       0       0       0
  6273 ;;      Totals:         0       0       0       0       0
  6274 ;;Total ram usage:        0 bytes
  6275 ;; Hardware stack levels used:    1
  6276 ;; Hardware stack levels required when called:    2
  6277 ;; This function calls:
  6278 ;;		_I2C_Master_Wait
  6279 ;; This function is called by:
  6280 ;;		_get_time
  6281 ;;		_get_day
  6282 ;;		_get_temp
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           
  6287                           ;psect for function _I2C_Master_RepeatedStart
  6288  1606                     _I2C_Master_RepeatedStart:	
  6289                           
  6290                           ;./I2C.h: 49:     I2C_Master_Wait();
  6291                           
  6292                           ;incstack = 0
  6293                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  6294  1606  120A  158A  207D   	fcall	_I2C_Master_Wait
  6295                           
  6296                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  6297  1609  1683               	bsf	3,5	;RP0=1, select bank1
  6298  160A  1303               	bcf	3,6	;RP1=0, select bank1
  6299  160B  1491               	bsf	17,1	;volatile
  6300  160C  0008               	return
  6301  160D                     __end_of_I2C_Master_RepeatedStart:	
  6302                           
  6303                           	psect	text22
  6304  1705                     __ptext22:	
  6305 ;; *************** function _get_PIR *****************
  6306 ;; Defined at:
  6307 ;;		line 655 in file "mainMaster.c"
  6308 ;; Parameters:    Size  Location     Type
  6309 ;;		None
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;  PIR             1    2[BANK0 ] unsigned char 
  6312 ;; Return value:  Size  Location     Type
  6313 ;;                  1    wreg      unsigned char 
  6314 ;; Registers used:
  6315 ;;		wreg, status,2, status,0, pclath, cstack
  6316 ;; Tracked objects:
  6317 ;;		On entry : 0/0
  6318 ;;		On exit  : 0/0
  6319 ;;		Unchanged: 0/0
  6320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6321 ;;      Params:         0       0       0       0       0
  6322 ;;      Locals:         0       1       0       0       0
  6323 ;;      Temps:          1       0       0       0       0
  6324 ;;      Totals:         1       1       0       0       0
  6325 ;;Total ram usage:        2 bytes
  6326 ;; Hardware stack levels used:    1
  6327 ;; Hardware stack levels required when called:    3
  6328 ;; This function calls:
  6329 ;;		_I2C_Master_Read
  6330 ;;		_I2C_Master_Start
  6331 ;;		_I2C_Master_Stop
  6332 ;;		_I2C_Master_Write
  6333 ;; This function is called by:
  6334 ;;		_main
  6335 ;; This function uses a non-reentrant model
  6336 ;;
  6337                           
  6338                           
  6339                           ;psect for function _get_PIR
  6340  1705                     _get_PIR:	
  6341                           
  6342                           ;mainMaster.c: 657:     char PIR;;mainMaster.c: 659:     I2C_Master_Start();
  6343                           
  6344                           ;incstack = 0
  6345                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  6346  1705  160A  118A  25F8  160A  118A  	fcall	_I2C_Master_Start
  6347                           
  6348                           ;mainMaster.c: 660:     I2C_Master_Write(0x41);
  6349  170A  3041               	movlw	65
  6350  170B  00F3               	movwf	I2C_Master_Write@d
  6351  170C  3000               	movlw	0
  6352  170D  00F4               	movwf	I2C_Master_Write@d+1
  6353  170E  160A  118A  260D  160A  118A  	fcall	_I2C_Master_Write
  6354                           
  6355                           ;mainMaster.c: 661:     PIR = I2C_Master_Read(0);
  6356  1713  3000               	movlw	0
  6357  1714  00F3               	movwf	I2C_Master_Read@a
  6358  1715  00F4               	movwf	I2C_Master_Read@a+1
  6359  1716  160A  118A  276E  160A  118A  	fcall	_I2C_Master_Read
  6360  171B  0873               	movf	?_I2C_Master_Read,w
  6361  171C  00F7               	movwf	??_get_PIR
  6362  171D  0877               	movf	??_get_PIR,w
  6363  171E  1283               	bcf	3,5	;RP0=0, select bank0
  6364  171F  1303               	bcf	3,6	;RP1=0, select bank0
  6365  1720  00C9               	movwf	get_PIR@PIR
  6366                           
  6367                           ;mainMaster.c: 662:     I2C_Master_Stop();
  6368  1721  160A  118A  25FF   	fcall	_I2C_Master_Stop
  6369                           
  6370                           ;mainMaster.c: 664:     return (PIR);
  6371  1724  1283               	bcf	3,5	;RP0=0, select bank0
  6372  1725  1303               	bcf	3,6	;RP1=0, select bank0
  6373  1726  0849               	movf	get_PIR@PIR,w
  6374  1727  0008               	return
  6375  1728                     __end_of_get_PIR:	
  6376                           
  6377                           	psect	text23
  6378  16E2                     __ptext23:	
  6379 ;; *************** function _get_IR *****************
  6380 ;; Defined at:
  6381 ;;		line 667 in file "mainMaster.c"
  6382 ;; Parameters:    Size  Location     Type
  6383 ;;		None
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;  IR              1    2[BANK0 ] unsigned char 
  6386 ;; Return value:  Size  Location     Type
  6387 ;;                  1    wreg      unsigned char 
  6388 ;; Registers used:
  6389 ;;		wreg, status,2, status,0, pclath, cstack
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6395 ;;      Params:         0       0       0       0       0
  6396 ;;      Locals:         0       1       0       0       0
  6397 ;;      Temps:          1       0       0       0       0
  6398 ;;      Totals:         1       1       0       0       0
  6399 ;;Total ram usage:        2 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:    3
  6402 ;; This function calls:
  6403 ;;		_I2C_Master_Read
  6404 ;;		_I2C_Master_Start
  6405 ;;		_I2C_Master_Stop
  6406 ;;		_I2C_Master_Write
  6407 ;; This function is called by:
  6408 ;;		_main
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           
  6413                           ;psect for function _get_IR
  6414  16E2                     _get_IR:	
  6415                           
  6416                           ;mainMaster.c: 669:     char IR;;mainMaster.c: 671:     I2C_Master_Start();
  6417                           
  6418                           ;incstack = 0
  6419                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  6420  16E2  160A  118A  25F8  160A  118A  	fcall	_I2C_Master_Start
  6421                           
  6422                           ;mainMaster.c: 672:     I2C_Master_Write(0x31);
  6423  16E7  3031               	movlw	49
  6424  16E8  00F3               	movwf	I2C_Master_Write@d
  6425  16E9  3000               	movlw	0
  6426  16EA  00F4               	movwf	I2C_Master_Write@d+1
  6427  16EB  160A  118A  260D  160A  118A  	fcall	_I2C_Master_Write
  6428                           
  6429                           ;mainMaster.c: 673:     IR = I2C_Master_Read(0);
  6430  16F0  3000               	movlw	0
  6431  16F1  00F3               	movwf	I2C_Master_Read@a
  6432  16F2  00F4               	movwf	I2C_Master_Read@a+1
  6433  16F3  160A  118A  276E  160A  118A  	fcall	_I2C_Master_Read
  6434  16F8  0873               	movf	?_I2C_Master_Read,w
  6435  16F9  00F7               	movwf	??_get_IR
  6436  16FA  0877               	movf	??_get_IR,w
  6437  16FB  1283               	bcf	3,5	;RP0=0, select bank0
  6438  16FC  1303               	bcf	3,6	;RP1=0, select bank0
  6439  16FD  00C9               	movwf	get_IR@IR
  6440                           
  6441                           ;mainMaster.c: 674:     I2C_Master_Stop();
  6442  16FE  160A  118A  25FF   	fcall	_I2C_Master_Stop
  6443                           
  6444                           ;mainMaster.c: 676:     return (IR);
  6445  1701  1283               	bcf	3,5	;RP0=0, select bank0
  6446  1702  1303               	bcf	3,6	;RP1=0, select bank0
  6447  1703  0849               	movf	get_IR@IR,w
  6448  1704  0008               	return
  6449  1705                     __end_of_get_IR:	
  6450                           
  6451                           	psect	text24
  6452  176E                     __ptext24:	
  6453 ;; *************** function _I2C_Master_Read *****************
  6454 ;; Defined at:
  6455 ;;		line 74 in file "./I2C.h"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;  a               2    3[COMMON] unsigned short 
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;  temp            2    0[BANK0 ] unsigned short 
  6460 ;; Return value:  Size  Location     Type
  6461 ;;                  2    3[COMMON] unsigned short 
  6462 ;; Registers used:
  6463 ;;		wreg, status,2, status,0, pclath, cstack
  6464 ;; Tracked objects:
  6465 ;;		On entry : 0/0
  6466 ;;		On exit  : 0/0
  6467 ;;		Unchanged: 0/0
  6468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6469 ;;      Params:         2       0       0       0       0
  6470 ;;      Locals:         0       2       0       0       0
  6471 ;;      Temps:          2       0       0       0       0
  6472 ;;      Totals:         4       2       0       0       0
  6473 ;;Total ram usage:        6 bytes
  6474 ;; Hardware stack levels used:    1
  6475 ;; Hardware stack levels required when called:    2
  6476 ;; This function calls:
  6477 ;;		_I2C_Master_Wait
  6478 ;; This function is called by:
  6479 ;;		_get_time
  6480 ;;		_get_day
  6481 ;;		_get_temp
  6482 ;;		_get_hall
  6483 ;;		_get_tripwire
  6484 ;;		_get_PIR
  6485 ;;		_get_IR
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           
  6490                           ;psect for function _I2C_Master_Read
  6491  176E                     _I2C_Master_Read:	
  6492                           
  6493                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  6494                           
  6495                           ;incstack = 0
  6496                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  6497  176E  120A  158A  207D  160A  118A  	fcall	_I2C_Master_Wait
  6498                           
  6499                           ;./I2C.h: 78:     RCEN = 1;
  6500  1773  1683               	bsf	3,5	;RP0=1, select bank1
  6501  1774  1303               	bcf	3,6	;RP1=0, select bank1
  6502  1775  1591               	bsf	17,3	;volatile
  6503                           
  6504                           ;./I2C.h: 79:     I2C_Master_Wait();
  6505  1776  120A  158A  207D  160A  118A  	fcall	_I2C_Master_Wait
  6506                           
  6507                           ;./I2C.h: 80:     temp = SSPBUF;
  6508  177B  1283               	bcf	3,5	;RP0=0, select bank0
  6509  177C  1303               	bcf	3,6	;RP1=0, select bank0
  6510  177D  0813               	movf	19,w	;volatile
  6511  177E  00F5               	movwf	??_I2C_Master_Read
  6512  177F  01F6               	clrf	??_I2C_Master_Read+1
  6513  1780  0875               	movf	??_I2C_Master_Read,w
  6514  1781  00C7               	movwf	I2C_Master_Read@temp
  6515  1782  0876               	movf	??_I2C_Master_Read+1,w
  6516  1783  00C8               	movwf	I2C_Master_Read@temp+1
  6517                           
  6518                           ;./I2C.h: 81:     I2C_Master_Wait();
  6519  1784  120A  158A  207D  160A  118A  	fcall	_I2C_Master_Wait
  6520                           
  6521                           ;./I2C.h: 83:     if(a == 1){
  6522  1789  0373               	decf	I2C_Master_Read@a,w
  6523  178A  0474               	iorwf	I2C_Master_Read@a+1,w
  6524  178B  1D03               	btfss	3,2
  6525  178C  2F91               	goto	l152
  6526                           
  6527                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  6528  178D  1683               	bsf	3,5	;RP0=1, select bank1
  6529  178E  1303               	bcf	3,6	;RP1=0, select bank1
  6530  178F  1291               	bcf	17,5	;volatile
  6531                           
  6532                           ;./I2C.h: 85:     }else{
  6533  1790  2F94               	goto	l153
  6534  1791                     l152:	
  6535                           
  6536                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  6537  1791  1683               	bsf	3,5	;RP0=1, select bank1
  6538  1792  1303               	bcf	3,6	;RP1=0, select bank1
  6539  1793  1691               	bsf	17,5	;volatile
  6540  1794                     l153:	
  6541                           ;./I2C.h: 87:     }
  6542                           
  6543                           
  6544                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  6545  1794  1611               	bsf	17,4	;volatile
  6546                           
  6547                           ;./I2C.h: 89:     return temp;
  6548  1795  1283               	bcf	3,5	;RP0=0, select bank0
  6549  1796  1303               	bcf	3,6	;RP1=0, select bank0
  6550  1797  0848               	movf	I2C_Master_Read@temp+1,w
  6551  1798  00F4               	movwf	?_I2C_Master_Read+1
  6552  1799  0847               	movf	I2C_Master_Read@temp,w
  6553  179A  00F3               	movwf	?_I2C_Master_Read
  6554  179B  0008               	return
  6555  179C                     __end_of_I2C_Master_Read:	
  6556                           
  6557                           	psect	text25
  6558  168D                     __ptext25:	
  6559 ;; *************** function _close_door *****************
  6560 ;; Defined at:
  6561 ;;		line 689 in file "mainMaster.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;		None
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;		None
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  1    wreg      void 
  6568 ;; Registers used:
  6569 ;;		wreg, status,2, status,0, pclath, cstack
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6575 ;;      Params:         0       0       0       0       0
  6576 ;;      Locals:         0       0       0       0       0
  6577 ;;      Temps:          0       0       0       0       0
  6578 ;;      Totals:         0       0       0       0       0
  6579 ;;Total ram usage:        0 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; Hardware stack levels required when called:    3
  6582 ;; This function calls:
  6583 ;;		_I2C_Master_Start
  6584 ;;		_I2C_Master_Stop
  6585 ;;		_I2C_Master_Write
  6586 ;; This function is called by:
  6587 ;;		_main
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           
  6592                           ;psect for function _close_door
  6593  168D                     _close_door:	
  6594                           
  6595                           ;mainMaster.c: 692:     I2C_Master_Start();
  6596                           
  6597                           ;incstack = 0
  6598                           ; Regs used in _close_door: [wreg+status,2+status,0+pclath+cstack]
  6599  168D  160A  118A  25F8  160A  118A  	fcall	_I2C_Master_Start
  6600                           
  6601                           ;mainMaster.c: 693:     I2C_Master_Write(0x20);
  6602  1692  3020               	movlw	32
  6603  1693  00F3               	movwf	I2C_Master_Write@d
  6604  1694  3000               	movlw	0
  6605  1695  00F4               	movwf	I2C_Master_Write@d+1
  6606  1696  160A  118A  260D  160A  118A  	fcall	_I2C_Master_Write
  6607                           
  6608                           ;mainMaster.c: 694:     I2C_Master_Write(0xF0);
  6609  169B  30F0               	movlw	240
  6610  169C  00F3               	movwf	I2C_Master_Write@d
  6611  169D  3000               	movlw	0
  6612  169E  00F4               	movwf	I2C_Master_Write@d+1
  6613  169F  160A  118A  260D  160A  118A  	fcall	_I2C_Master_Write
  6614                           
  6615                           ;mainMaster.c: 695:     I2C_Master_Stop();
  6616  16A4  160A  118A  25FF   	fcall	_I2C_Master_Stop
  6617  16A7  0008               	return
  6618  16A8                     __end_of_close_door:	
  6619                           
  6620                           	psect	text26
  6621  160D                     __ptext26:	
  6622 ;; *************** function _I2C_Master_Write *****************
  6623 ;; Defined at:
  6624 ;;		line 65 in file "./I2C.h"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;  d               2    3[COMMON] unsigned int 
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;		None
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  1    wreg      void 
  6631 ;; Registers used:
  6632 ;;		wreg, status,2, status,0, pclath, cstack
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6638 ;;      Params:         2       0       0       0       0
  6639 ;;      Locals:         0       0       0       0       0
  6640 ;;      Temps:          0       0       0       0       0
  6641 ;;      Totals:         2       0       0       0       0
  6642 ;;Total ram usage:        2 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:    2
  6645 ;; This function calls:
  6646 ;;		_I2C_Master_Wait
  6647 ;; This function is called by:
  6648 ;;		_write_RTC
  6649 ;;		_get_time
  6650 ;;		_get_day
  6651 ;;		_get_temp
  6652 ;;		_get_hall
  6653 ;;		_get_tripwire
  6654 ;;		_get_PIR
  6655 ;;		_get_IR
  6656 ;;		_open_door
  6657 ;;		_close_door
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           
  6662                           ;psect for function _I2C_Master_Write
  6663  160D                     _I2C_Master_Write:	
  6664                           
  6665                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  6666                           
  6667                           ;incstack = 0
  6668                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  6669  160D  120A  158A  207D   	fcall	_I2C_Master_Wait
  6670                           
  6671                           ;./I2C.h: 68:     SSPBUF = d;
  6672  1610  0873               	movf	I2C_Master_Write@d,w
  6673  1611  1283               	bcf	3,5	;RP0=0, select bank0
  6674  1612  1303               	bcf	3,6	;RP1=0, select bank0
  6675  1613  0093               	movwf	19	;volatile
  6676  1614  0008               	return
  6677  1615                     __end_of_I2C_Master_Write:	
  6678                           
  6679                           	psect	text27
  6680  15FF                     __ptext27:	
  6681 ;; *************** function _I2C_Master_Stop *****************
  6682 ;; Defined at:
  6683 ;;		line 55 in file "./I2C.h"
  6684 ;; Parameters:    Size  Location     Type
  6685 ;;		None
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;		None
  6688 ;; Return value:  Size  Location     Type
  6689 ;;                  1    wreg      void 
  6690 ;; Registers used:
  6691 ;;		wreg, status,2, status,0, pclath, cstack
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6697 ;;      Params:         0       0       0       0       0
  6698 ;;      Locals:         0       0       0       0       0
  6699 ;;      Temps:          0       0       0       0       0
  6700 ;;      Totals:         0       0       0       0       0
  6701 ;;Total ram usage:        0 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:    2
  6704 ;; This function calls:
  6705 ;;		_I2C_Master_Wait
  6706 ;; This function is called by:
  6707 ;;		_write_RTC
  6708 ;;		_get_time
  6709 ;;		_get_day
  6710 ;;		_get_temp
  6711 ;;		_get_hall
  6712 ;;		_get_tripwire
  6713 ;;		_get_PIR
  6714 ;;		_get_IR
  6715 ;;		_open_door
  6716 ;;		_close_door
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           
  6721                           ;psect for function _I2C_Master_Stop
  6722  15FF                     _I2C_Master_Stop:	
  6723                           
  6724                           ;./I2C.h: 57:     I2C_Master_Wait();
  6725                           
  6726                           ;incstack = 0
  6727                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  6728  15FF  120A  158A  207D   	fcall	_I2C_Master_Wait
  6729                           
  6730                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  6731  1602  1683               	bsf	3,5	;RP0=1, select bank1
  6732  1603  1303               	bcf	3,6	;RP1=0, select bank1
  6733  1604  1511               	bsf	17,2	;volatile
  6734  1605  0008               	return
  6735  1606                     __end_of_I2C_Master_Stop:	
  6736                           
  6737                           	psect	text28
  6738  15F8                     __ptext28:	
  6739 ;; *************** function _I2C_Master_Start *****************
  6740 ;; Defined at:
  6741 ;;		line 39 in file "./I2C.h"
  6742 ;; Parameters:    Size  Location     Type
  6743 ;;		None
  6744 ;; Auto vars:     Size  Location     Type
  6745 ;;		None
  6746 ;; Return value:  Size  Location     Type
  6747 ;;                  1    wreg      void 
  6748 ;; Registers used:
  6749 ;;		wreg, status,2, status,0, pclath, cstack
  6750 ;; Tracked objects:
  6751 ;;		On entry : 0/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6755 ;;      Params:         0       0       0       0       0
  6756 ;;      Locals:         0       0       0       0       0
  6757 ;;      Temps:          0       0       0       0       0
  6758 ;;      Totals:         0       0       0       0       0
  6759 ;;Total ram usage:        0 bytes
  6760 ;; Hardware stack levels used:    1
  6761 ;; Hardware stack levels required when called:    2
  6762 ;; This function calls:
  6763 ;;		_I2C_Master_Wait
  6764 ;; This function is called by:
  6765 ;;		_write_RTC
  6766 ;;		_get_time
  6767 ;;		_get_day
  6768 ;;		_get_temp
  6769 ;;		_get_hall
  6770 ;;		_get_tripwire
  6771 ;;		_get_PIR
  6772 ;;		_get_IR
  6773 ;;		_open_door
  6774 ;;		_close_door
  6775 ;; This function uses a non-reentrant model
  6776 ;;
  6777                           
  6778                           
  6779                           ;psect for function _I2C_Master_Start
  6780  15F8                     _I2C_Master_Start:	
  6781                           
  6782                           ;./I2C.h: 41:     I2C_Master_Wait();
  6783                           
  6784                           ;incstack = 0
  6785                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  6786  15F8  120A  158A  207D   	fcall	_I2C_Master_Wait
  6787                           
  6788                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  6789  15FB  1683               	bsf	3,5	;RP0=1, select bank1
  6790  15FC  1303               	bcf	3,6	;RP1=0, select bank1
  6791  15FD  1411               	bsf	17,0	;volatile
  6792  15FE  0008               	return
  6793  15FF                     __end_of_I2C_Master_Start:	
  6794                           
  6795                           	psect	text29
  6796  087D                     __ptext29:	
  6797 ;; *************** function _I2C_Master_Wait *****************
  6798 ;; Defined at:
  6799 ;;		line 32 in file "./I2C.h"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;		None
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;		None
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  1    wreg      void 
  6806 ;; Registers used:
  6807 ;;		wreg, status,2
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6813 ;;      Params:         0       0       0       0       0
  6814 ;;      Locals:         0       0       0       0       0
  6815 ;;      Temps:          0       0       0       0       0
  6816 ;;      Totals:         0       0       0       0       0
  6817 ;;Total ram usage:        0 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; Hardware stack levels required when called:    1
  6820 ;; This function calls:
  6821 ;;		Nothing
  6822 ;; This function is called by:
  6823 ;;		_I2C_Master_Start
  6824 ;;		_I2C_Master_RepeatedStart
  6825 ;;		_I2C_Master_Stop
  6826 ;;		_I2C_Master_Write
  6827 ;;		_I2C_Master_Read
  6828 ;; This function uses a non-reentrant model
  6829 ;;
  6830                           
  6831                           
  6832                           ;psect for function _I2C_Master_Wait
  6833  087D                     _I2C_Master_Wait:	
  6834  087D                     l134:	
  6835                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  6836                           
  6837                           ;incstack = 0
  6838                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  6839                           
  6840  087D  1683               	bsf	3,5	;RP0=1, select bank1
  6841  087E  1303               	bcf	3,6	;RP1=0, select bank1
  6842  087F  1914               	btfsc	20,2	;volatile
  6843  0880  287D               	goto	l134
  6844  0881  0811               	movf	17,w	;volatile
  6845  0882  391F               	andlw	31
  6846  0883  1903               	btfsc	3,2
  6847  0884  0008               	return
  6848  0885  287D               	goto	l134
  6849  0886                     __end_of_I2C_Master_Wait:	
  6850                           
  6851                           	psect	text30
  6852  0A1A                     __ptext30:	
  6853 ;; *************** function ___awmod *****************
  6854 ;; Defined at:
  6855 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;  divisor         2    3[COMMON] int 
  6858 ;;  dividend        2    5[COMMON] int 
  6859 ;; Auto vars:     Size  Location     Type
  6860 ;;  sign            1    1[BANK0 ] unsigned char 
  6861 ;;  counter         1    0[BANK0 ] unsigned char 
  6862 ;; Return value:  Size  Location     Type
  6863 ;;                  2    3[COMMON] int 
  6864 ;; Registers used:
  6865 ;;		wreg, status,2, status,0
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6871 ;;      Params:         4       0       0       0       0
  6872 ;;      Locals:         0       2       0       0       0
  6873 ;;      Temps:          1       0       0       0       0
  6874 ;;      Totals:         5       2       0       0       0
  6875 ;;Total ram usage:        7 bytes
  6876 ;; Hardware stack levels used:    1
  6877 ;; Hardware stack levels required when called:    1
  6878 ;; This function calls:
  6879 ;;		Nothing
  6880 ;; This function is called by:
  6881 ;;		_main
  6882 ;; This function uses a non-reentrant model
  6883 ;;
  6884                           
  6885                           
  6886                           ;psect for function ___awmod
  6887  0A1A                     ___awmod:	
  6888                           
  6889                           ;incstack = 0
  6890                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6891  0A1A  1283               	bcf	3,5	;RP0=0, select bank0
  6892  0A1B  1303               	bcf	3,6	;RP1=0, select bank0
  6893  0A1C  01C8               	clrf	___awmod@sign
  6894  0A1D  1FF6               	btfss	___awmod@dividend+1,7
  6895  0A1E  2A26               	goto	l3964
  6896  0A1F  09F5               	comf	___awmod@dividend,f
  6897  0A20  09F6               	comf	___awmod@dividend+1,f
  6898  0A21  0AF5               	incf	___awmod@dividend,f
  6899  0A22  1903               	skipnz
  6900  0A23  0AF6               	incf	___awmod@dividend+1,f
  6901  0A24  01C8               	clrf	___awmod@sign
  6902  0A25  0AC8               	incf	___awmod@sign,f
  6903  0A26                     l3964:	
  6904  0A26  1FF4               	btfss	___awmod@divisor+1,7
  6905  0A27  2A2D               	goto	l3968
  6906  0A28  09F3               	comf	___awmod@divisor,f
  6907  0A29  09F4               	comf	___awmod@divisor+1,f
  6908  0A2A  0AF3               	incf	___awmod@divisor,f
  6909  0A2B  1903               	skipnz
  6910  0A2C  0AF4               	incf	___awmod@divisor+1,f
  6911  0A2D                     l3968:	
  6912  0A2D  0873               	movf	___awmod@divisor,w
  6913  0A2E  0474               	iorwf	___awmod@divisor+1,w
  6914  0A2F  1903               	btfsc	3,2
  6915  0A30  2A5A               	goto	l3986
  6916  0A31  01C7               	clrf	___awmod@counter
  6917  0A32  0AC7               	incf	___awmod@counter,f
  6918  0A33                     l3976:	
  6919  0A33  1BF4               	btfsc	___awmod@divisor+1,7
  6920  0A34  2A41               	goto	l3978
  6921  0A35  3001               	movlw	1
  6922  0A36                     u4105:	
  6923  0A36  1003               	clrc
  6924  0A37  0DF3               	rlf	___awmod@divisor,f
  6925  0A38  0DF4               	rlf	___awmod@divisor+1,f
  6926  0A39  3EFF               	addlw	-1
  6927  0A3A  1D03               	skipz
  6928  0A3B  2A36               	goto	u4105
  6929  0A3C  3001               	movlw	1
  6930  0A3D  00F7               	movwf	??___awmod
  6931  0A3E  0877               	movf	??___awmod,w
  6932  0A3F  07C7               	addwf	___awmod@counter,f
  6933  0A40  2A33               	goto	l3976
  6934  0A41                     l3978:	
  6935  0A41  0874               	movf	___awmod@divisor+1,w
  6936  0A42  0276               	subwf	___awmod@dividend+1,w
  6937  0A43  1D03               	skipz
  6938  0A44  2A47               	goto	u4125
  6939  0A45  0873               	movf	___awmod@divisor,w
  6940  0A46  0275               	subwf	___awmod@dividend,w
  6941  0A47                     u4125:	
  6942  0A47  1C03               	skipc
  6943  0A48  2A4F               	goto	l3982
  6944  0A49  0873               	movf	___awmod@divisor,w
  6945  0A4A  02F5               	subwf	___awmod@dividend,f
  6946  0A4B  0874               	movf	___awmod@divisor+1,w
  6947  0A4C  1C03               	skipc
  6948  0A4D  03F6               	decf	___awmod@dividend+1,f
  6949  0A4E  02F6               	subwf	___awmod@dividend+1,f
  6950  0A4F                     l3982:	
  6951  0A4F  3001               	movlw	1
  6952  0A50                     u4135:	
  6953  0A50  1003               	clrc
  6954  0A51  0CF4               	rrf	___awmod@divisor+1,f
  6955  0A52  0CF3               	rrf	___awmod@divisor,f
  6956  0A53  3EFF               	addlw	-1
  6957  0A54  1D03               	skipz
  6958  0A55  2A50               	goto	u4135
  6959  0A56  3001               	movlw	1
  6960  0A57  02C7               	subwf	___awmod@counter,f
  6961  0A58  1D03               	btfss	3,2
  6962  0A59  2A41               	goto	l3978
  6963  0A5A                     l3986:	
  6964  0A5A  0848               	movf	___awmod@sign,w
  6965  0A5B  1903               	btfsc	3,2
  6966  0A5C  2A62               	goto	l3990
  6967  0A5D  09F5               	comf	___awmod@dividend,f
  6968  0A5E  09F6               	comf	___awmod@dividend+1,f
  6969  0A5F  0AF5               	incf	___awmod@dividend,f
  6970  0A60  1903               	skipnz
  6971  0A61  0AF6               	incf	___awmod@dividend+1,f
  6972  0A62                     l3990:	
  6973  0A62  0876               	movf	___awmod@dividend+1,w
  6974  0A63  00F4               	movwf	?___awmod+1
  6975  0A64  0875               	movf	___awmod@dividend,w
  6976  0A65  00F3               	movwf	?___awmod
  6977  0A66  0008               	return
  6978  0A67                     __end_of___awmod:	
  6979                           
  6980                           	psect	text31
  6981  0B62                     __ptext31:	
  6982 ;; *************** function ___awdiv *****************
  6983 ;; Defined at:
  6984 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  6985 ;; Parameters:    Size  Location     Type
  6986 ;;  divisor         2    3[COMMON] int 
  6987 ;;  dividend        2    5[COMMON] int 
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;  quotient        2    2[BANK0 ] int 
  6990 ;;  sign            1    1[BANK0 ] unsigned char 
  6991 ;;  counter         1    0[BANK0 ] unsigned char 
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  2    3[COMMON] int 
  6994 ;; Registers used:
  6995 ;;		wreg, status,2, status,0
  6996 ;; Tracked objects:
  6997 ;;		On entry : 0/0
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7001 ;;      Params:         4       0       0       0       0
  7002 ;;      Locals:         0       4       0       0       0
  7003 ;;      Temps:          1       0       0       0       0
  7004 ;;      Totals:         5       4       0       0       0
  7005 ;;Total ram usage:        9 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    1
  7008 ;; This function calls:
  7009 ;;		Nothing
  7010 ;; This function is called by:
  7011 ;;		_main
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           
  7016                           ;psect for function ___awdiv
  7017  0B62                     ___awdiv:	
  7018                           
  7019                           ;incstack = 0
  7020                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7021  0B62  1283               	bcf	3,5	;RP0=0, select bank0
  7022  0B63  1303               	bcf	3,6	;RP1=0, select bank0
  7023  0B64  01C8               	clrf	___awdiv@sign
  7024  0B65  1FF4               	btfss	___awdiv@divisor+1,7
  7025  0B66  2B6E               	goto	l2894
  7026  0B67  09F3               	comf	___awdiv@divisor,f
  7027  0B68  09F4               	comf	___awdiv@divisor+1,f
  7028  0B69  0AF3               	incf	___awdiv@divisor,f
  7029  0B6A  1903               	skipnz
  7030  0B6B  0AF4               	incf	___awdiv@divisor+1,f
  7031  0B6C  01C8               	clrf	___awdiv@sign
  7032  0B6D  0AC8               	incf	___awdiv@sign,f
  7033  0B6E                     l2894:	
  7034  0B6E  1FF6               	btfss	___awdiv@dividend+1,7
  7035  0B6F  2B79               	goto	l2900
  7036  0B70  09F5               	comf	___awdiv@dividend,f
  7037  0B71  09F6               	comf	___awdiv@dividend+1,f
  7038  0B72  0AF5               	incf	___awdiv@dividend,f
  7039  0B73  1903               	skipnz
  7040  0B74  0AF6               	incf	___awdiv@dividend+1,f
  7041  0B75  3001               	movlw	1
  7042  0B76  00F7               	movwf	??___awdiv
  7043  0B77  0877               	movf	??___awdiv,w
  7044  0B78  06C8               	xorwf	___awdiv@sign,f
  7045  0B79                     l2900:	
  7046  0B79  01C9               	clrf	___awdiv@quotient
  7047  0B7A  01CA               	clrf	___awdiv@quotient+1
  7048  0B7B  0873               	movf	___awdiv@divisor,w
  7049  0B7C  0474               	iorwf	___awdiv@divisor+1,w
  7050  0B7D  1903               	btfsc	3,2
  7051  0B7E  2BB0               	goto	l2922
  7052  0B7F  01C7               	clrf	___awdiv@counter
  7053  0B80  0AC7               	incf	___awdiv@counter,f
  7054  0B81                     l2910:	
  7055  0B81  1BF4               	btfsc	___awdiv@divisor+1,7
  7056  0B82  2B8F               	goto	l2912
  7057  0B83  3001               	movlw	1
  7058  0B84                     u2525:	
  7059  0B84  1003               	clrc
  7060  0B85  0DF3               	rlf	___awdiv@divisor,f
  7061  0B86  0DF4               	rlf	___awdiv@divisor+1,f
  7062  0B87  3EFF               	addlw	-1
  7063  0B88  1D03               	skipz
  7064  0B89  2B84               	goto	u2525
  7065  0B8A  3001               	movlw	1
  7066  0B8B  00F7               	movwf	??___awdiv
  7067  0B8C  0877               	movf	??___awdiv,w
  7068  0B8D  07C7               	addwf	___awdiv@counter,f
  7069  0B8E  2B81               	goto	l2910
  7070  0B8F                     l2912:	
  7071  0B8F  3001               	movlw	1
  7072  0B90                     u2545:	
  7073  0B90  1003               	clrc
  7074  0B91  0DC9               	rlf	___awdiv@quotient,f
  7075  0B92  0DCA               	rlf	___awdiv@quotient+1,f
  7076  0B93  3EFF               	addlw	-1
  7077  0B94  1D03               	skipz
  7078  0B95  2B90               	goto	u2545
  7079  0B96  0874               	movf	___awdiv@divisor+1,w
  7080  0B97  0276               	subwf	___awdiv@dividend+1,w
  7081  0B98  1D03               	skipz
  7082  0B99  2B9C               	goto	u2555
  7083  0B9A  0873               	movf	___awdiv@divisor,w
  7084  0B9B  0275               	subwf	___awdiv@dividend,w
  7085  0B9C                     u2555:	
  7086  0B9C  1C03               	skipc
  7087  0B9D  2BA5               	goto	l2918
  7088  0B9E  0873               	movf	___awdiv@divisor,w
  7089  0B9F  02F5               	subwf	___awdiv@dividend,f
  7090  0BA0  0874               	movf	___awdiv@divisor+1,w
  7091  0BA1  1C03               	skipc
  7092  0BA2  03F6               	decf	___awdiv@dividend+1,f
  7093  0BA3  02F6               	subwf	___awdiv@dividend+1,f
  7094  0BA4  1449               	bsf	___awdiv@quotient,0
  7095  0BA5                     l2918:	
  7096  0BA5  3001               	movlw	1
  7097  0BA6                     u2565:	
  7098  0BA6  1003               	clrc
  7099  0BA7  0CF4               	rrf	___awdiv@divisor+1,f
  7100  0BA8  0CF3               	rrf	___awdiv@divisor,f
  7101  0BA9  3EFF               	addlw	-1
  7102  0BAA  1D03               	skipz
  7103  0BAB  2BA6               	goto	u2565
  7104  0BAC  3001               	movlw	1
  7105  0BAD  02C7               	subwf	___awdiv@counter,f
  7106  0BAE  1D03               	btfss	3,2
  7107  0BAF  2B8F               	goto	l2912
  7108  0BB0                     l2922:	
  7109  0BB0  0848               	movf	___awdiv@sign,w
  7110  0BB1  1903               	btfsc	3,2
  7111  0BB2  2BB8               	goto	l2926
  7112  0BB3  09C9               	comf	___awdiv@quotient,f
  7113  0BB4  09CA               	comf	___awdiv@quotient+1,f
  7114  0BB5  0AC9               	incf	___awdiv@quotient,f
  7115  0BB6  1903               	skipnz
  7116  0BB7  0ACA               	incf	___awdiv@quotient+1,f
  7117  0BB8                     l2926:	
  7118  0BB8  084A               	movf	___awdiv@quotient+1,w
  7119  0BB9  00F4               	movwf	?___awdiv+1
  7120  0BBA  0849               	movf	___awdiv@quotient,w
  7121  0BBB  00F3               	movwf	?___awdiv
  7122  0BBC  0008               	return
  7123  0BBD                     __end_of___awdiv:	
  7124                           
  7125                           	psect	text32
  7126  161D                     __ptext32:	
  7127 ;; *************** function _UART_Write *****************
  7128 ;; Defined at:
  7129 ;;		line 54 in file "./UART.h"
  7130 ;; Parameters:    Size  Location     Type
  7131 ;;  data            1    wreg     unsigned char 
  7132 ;; Auto vars:     Size  Location     Type
  7133 ;;  data            1    3[COMMON] unsigned char 
  7134 ;; Return value:  Size  Location     Type
  7135 ;;                  1    wreg      void 
  7136 ;; Registers used:
  7137 ;;		wreg
  7138 ;; Tracked objects:
  7139 ;;		On entry : 0/0
  7140 ;;		On exit  : 0/0
  7141 ;;		Unchanged: 0/0
  7142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7143 ;;      Params:         0       0       0       0       0
  7144 ;;      Locals:         1       0       0       0       0
  7145 ;;      Temps:          0       0       0       0       0
  7146 ;;      Totals:         1       0       0       0       0
  7147 ;;Total ram usage:        1 bytes
  7148 ;; Hardware stack levels used:    1
  7149 ;; Hardware stack levels required when called:    1
  7150 ;; This function calls:
  7151 ;;		Nothing
  7152 ;; This function is called by:
  7153 ;;		_main
  7154 ;;		_UART_Write_Text
  7155 ;; This function uses a non-reentrant model
  7156 ;;
  7157                           
  7158                           
  7159                           ;psect for function _UART_Write
  7160  161D                     _UART_Write:	
  7161                           
  7162                           ;incstack = 0
  7163                           ; Regs used in _UART_Write: [wreg]
  7164                           ;UART_Write@data stored from wreg
  7165  161D  00F3               	movwf	UART_Write@data
  7166  161E                     l238:	
  7167                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(!TRMT);
  7168                           
  7169  161E  1683               	bsf	3,5	;RP0=1, select bank1
  7170  161F  1303               	bcf	3,6	;RP1=0, select bank1
  7171  1620  1C98               	btfss	24,1	;volatile
  7172  1621  2E1E               	goto	l238
  7173                           
  7174                           ;./UART.h: 57:   TXREG = data;
  7175  1622  0873               	movf	UART_Write@data,w
  7176  1623  1283               	bcf	3,5	;RP0=0, select bank0
  7177  1624  1303               	bcf	3,6	;RP1=0, select bank0
  7178  1625  0099               	movwf	25	;volatile
  7179  1626  0008               	return
  7180  1627                     __end_of_UART_Write:	
  7181                           
  7182                           	psect	text33
  7183  15F2                     __ptext33:	
  7184 ;; *************** function _UART_TX_Empty *****************
  7185 ;; Defined at:
  7186 ;;		line 31 in file "./UART.h"
  7187 ;; Parameters:    Size  Location     Type
  7188 ;;		None
  7189 ;; Auto vars:     Size  Location     Type
  7190 ;;		None
  7191 ;; Return value:  Size  Location     Type
  7192 ;;                  1    wreg      unsigned char 
  7193 ;; Registers used:
  7194 ;;		wreg
  7195 ;; Tracked objects:
  7196 ;;		On entry : 0/0
  7197 ;;		On exit  : 0/0
  7198 ;;		Unchanged: 0/0
  7199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7200 ;;      Params:         0       0       0       0       0
  7201 ;;      Locals:         0       0       0       0       0
  7202 ;;      Temps:          0       0       0       0       0
  7203 ;;      Totals:         0       0       0       0       0
  7204 ;;Total ram usage:        0 bytes
  7205 ;; Hardware stack levels used:    1
  7206 ;; Hardware stack levels required when called:    1
  7207 ;; This function calls:
  7208 ;;		Nothing
  7209 ;; This function is called by:
  7210 ;;		_main
  7211 ;; This function uses a non-reentrant model
  7212 ;;
  7213                           
  7214                           
  7215                           ;psect for function _UART_TX_Empty
  7216  15F2                     _UART_TX_Empty:	
  7217                           
  7218                           ;./UART.h: 33:   return TRMT;
  7219                           
  7220                           ;incstack = 0
  7221                           ; Regs used in _UART_TX_Empty: [wreg]
  7222  15F2  3000               	movlw	0
  7223  15F3  1683               	bsf	3,5	;RP0=1, select bank1
  7224  15F4  1303               	bcf	3,6	;RP1=0, select bank1
  7225  15F5  1898               	btfsc	24,1	;volatile
  7226  15F6  3001               	movlw	1
  7227  15F7  0008               	return
  7228  15F8                     __end_of_UART_TX_Empty:	
  7229                           
  7230                           	psect	text34
  7231  0993                     __ptext34:	
  7232 ;; *************** function _Lcd_Write_String *****************
  7233 ;; Defined at:
  7234 ;;		line 100 in file "./LCD4bits.h"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;  a               2    0[BANK0 ] PTR unsigned char 
  7237 ;;		 -> NULL(0), STR_33(14), STR_32(13), STR_31(14), 
  7238 ;;		 -> STR_30(14), STR_29(13), STR_28(11), STR_27(14), 
  7239 ;;		 -> STR_26(13), STR_25(17), STR_24(6), STR_23(7), 
  7240 ;;		 -> STR_22(15), STR_21(15), STR_20(16), STR_19(16), 
  7241 ;;		 -> STR_18(17), STR_17(17), STR_16(16), STR_15(16), 
  7242 ;;		 -> STR_11(10), STR_10(10), STR_9(10), STR_8(10), 
  7243 ;;		 -> STR_7(10), STR_6(10), STR_5(10), STR_4(10), 
  7244 ;;		 -> time(6), temp(6), STR_3(11), STR_2(7), 
  7245 ;;		 -> STR_1(31), 
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;  i               2    5[BANK0 ] int 
  7248 ;; Return value:  Size  Location     Type
  7249 ;;                  1    wreg      void 
  7250 ;; Registers used:
  7251 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7252 ;; Tracked objects:
  7253 ;;		On entry : 0/0
  7254 ;;		On exit  : 0/0
  7255 ;;		Unchanged: 0/0
  7256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7257 ;;      Params:         0       2       0       0       0
  7258 ;;      Locals:         0       2       0       0       0
  7259 ;;      Temps:          0       3       0       0       0
  7260 ;;      Totals:         0       7       0       0       0
  7261 ;;Total ram usage:        7 bytes
  7262 ;; Hardware stack levels used:    1
  7263 ;; Hardware stack levels required when called:    3
  7264 ;; This function calls:
  7265 ;;		_Lcd_Write_Char
  7266 ;; This function is called by:
  7267 ;;		_main
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           
  7272                           ;psect for function _Lcd_Write_String
  7273  0993                     _Lcd_Write_String:	
  7274                           
  7275                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  7276                           
  7277                           ;incstack = 0
  7278                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7279  0993  1283               	bcf	3,5	;RP0=0, select bank0
  7280  0994  1303               	bcf	3,6	;RP1=0, select bank0
  7281  0995  01CC               	clrf	Lcd_Write_String@i
  7282  0996  01CD               	clrf	Lcd_Write_String@i+1
  7283  0997                     l3804:	
  7284  0997  084C               	movf	Lcd_Write_String@i,w
  7285  0998  0747               	addwf	Lcd_Write_String@a,w
  7286  0999  00CA               	movwf	??_Lcd_Write_String+1
  7287  099A  0848               	movf	Lcd_Write_String@a+1,w
  7288  099B  00C9               	movwf	??_Lcd_Write_String
  7289  099C  1803               	skipnc
  7290  099D  0AC9               	incf	??_Lcd_Write_String,f
  7291  099E  1BCC               	btfsc	Lcd_Write_String@i,7
  7292  099F  03C9               	decf	??_Lcd_Write_String,f
  7293  09A0  1283               	bcf	3,5	;RP0=0, select bank0
  7294  09A1  1303               	bcf	3,6	;RP1=0, select bank0
  7295  09A2  0849               	movf	??_Lcd_Write_String,w
  7296  09A3  00CB               	movwf	??_Lcd_Write_String+2
  7297  09A4  084B               	movf	??_Lcd_Write_String+2,w
  7298  09A5  00FF               	movwf	127
  7299  09A6  084A               	movf	??_Lcd_Write_String+1,w
  7300  09A7  0084               	movwf	4
  7301  09A8  120A  118A  2700  120A  158A  	fcall	stringtab
  7302  09AD  3A00               	xorlw	0
  7303  09AE  1903               	btfsc	3,2
  7304  09AF  0008               	return
  7305                           
  7306                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  7307  09B0  084C               	movf	Lcd_Write_String@i,w
  7308  09B1  0747               	addwf	Lcd_Write_String@a,w
  7309  09B2  00CA               	movwf	??_Lcd_Write_String+1
  7310  09B3  0848               	movf	Lcd_Write_String@a+1,w
  7311  09B4  00C9               	movwf	??_Lcd_Write_String
  7312  09B5  1803               	skipnc
  7313  09B6  0AC9               	incf	??_Lcd_Write_String,f
  7314  09B7  1BCC               	btfsc	Lcd_Write_String@i,7
  7315  09B8  03C9               	decf	??_Lcd_Write_String,f
  7316  09B9  1283               	bcf	3,5	;RP0=0, select bank0
  7317  09BA  1303               	bcf	3,6	;RP1=0, select bank0
  7318  09BB  0849               	movf	??_Lcd_Write_String,w
  7319  09BC  00CB               	movwf	??_Lcd_Write_String+2
  7320  09BD  084B               	movf	??_Lcd_Write_String+2,w
  7321  09BE  00FF               	movwf	127
  7322  09BF  084A               	movf	??_Lcd_Write_String+1,w
  7323  09C0  0084               	movwf	4
  7324  09C1  120A  118A  2700  120A  158A  	fcall	stringtab
  7325  09C6  120A  158A  20E2  120A  158A  	fcall	_Lcd_Write_Char
  7326  09CB  3001               	movlw	1
  7327  09CC  1283               	bcf	3,5	;RP0=0, select bank0
  7328  09CD  1303               	bcf	3,6	;RP1=0, select bank0
  7329  09CE  07CC               	addwf	Lcd_Write_String@i,f
  7330  09CF  1803               	skipnc
  7331  09D0  0ACD               	incf	Lcd_Write_String@i+1,f
  7332  09D1  3000               	movlw	0
  7333  09D2  07CD               	addwf	Lcd_Write_String@i+1,f
  7334  09D3  2997               	goto	l3804
  7335  09D4                     __end_of_Lcd_Write_String:	
  7336                           
  7337                           	psect	text35
  7338  08E2                     __ptext35:	
  7339 ;; *************** function _Lcd_Write_Char *****************
  7340 ;; Defined at:
  7341 ;;		line 84 in file "./LCD4bits.h"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;  a               1    wreg     unsigned char 
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;  a               1    7[COMMON] unsigned char 
  7346 ;;  y               1    6[COMMON] unsigned char 
  7347 ;;  temp            1    5[COMMON] unsigned char 
  7348 ;; Return value:  Size  Location     Type
  7349 ;;                  1    wreg      void 
  7350 ;; Registers used:
  7351 ;;		wreg, status,2, status,0, pclath, cstack
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7357 ;;      Params:         0       0       0       0       0
  7358 ;;      Locals:         3       0       0       0       0
  7359 ;;      Temps:          1       0       0       0       0
  7360 ;;      Totals:         4       0       0       0       0
  7361 ;;Total ram usage:        4 bytes
  7362 ;; Hardware stack levels used:    1
  7363 ;; Hardware stack levels required when called:    2
  7364 ;; This function calls:
  7365 ;;		_Lcd_Port
  7366 ;; This function is called by:
  7367 ;;		_Lcd_Write_String
  7368 ;;		_main
  7369 ;; This function uses a non-reentrant model
  7370 ;;
  7371                           
  7372                           
  7373                           ;psect for function _Lcd_Write_Char
  7374  08E2                     _Lcd_Write_Char:	
  7375                           
  7376                           ;incstack = 0
  7377                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  7378                           ;Lcd_Write_Char@a stored from wreg
  7379  08E2  00F7               	movwf	Lcd_Write_Char@a
  7380                           
  7381                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  7382  08E3  0877               	movf	Lcd_Write_Char@a,w
  7383  08E4  390F               	andlw	15
  7384  08E5  00F4               	movwf	??_Lcd_Write_Char
  7385  08E6  0874               	movf	??_Lcd_Write_Char,w
  7386  08E7  00F5               	movwf	Lcd_Write_Char@temp
  7387                           
  7388                           ;./LCD4bits.h: 88:    y = a&0xF0;
  7389  08E8  0877               	movf	Lcd_Write_Char@a,w
  7390  08E9  39F0               	andlw	240
  7391  08EA  00F4               	movwf	??_Lcd_Write_Char
  7392  08EB  0874               	movf	??_Lcd_Write_Char,w
  7393  08EC  00F6               	movwf	Lcd_Write_Char@y
  7394                           
  7395                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  7396  08ED  1283               	bcf	3,5	;RP0=0, select bank0
  7397  08EE  1303               	bcf	3,6	;RP1=0, select bank0
  7398  08EF  1606               	bsf	6,4	;volatile
  7399                           
  7400                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  7401  08F0  0876               	movf	Lcd_Write_Char@y,w
  7402  08F1  00F4               	movwf	??_Lcd_Write_Char
  7403  08F2  3004               	movlw	4
  7404  08F3                     u2155:	
  7405  08F3  1003               	clrc
  7406  08F4  0CF4               	rrf	??_Lcd_Write_Char,f
  7407  08F5  3EFF               	addlw	-1
  7408  08F6  1D03               	skipz
  7409  08F7  28F3               	goto	u2155
  7410  08F8  0874               	movf	??_Lcd_Write_Char,w
  7411  08F9  160A  118A  2659  120A  158A  	fcall	_Lcd_Port
  7412                           
  7413                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  7414  08FE  1283               	bcf	3,5	;RP0=0, select bank0
  7415  08FF  1303               	bcf	3,6	;RP1=0, select bank0
  7416  0900  1686               	bsf	6,5	;volatile
  7417                           
  7418                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  7419  0901  301A               	movlw	26
  7420  0902  00F4               	movwf	??_Lcd_Write_Char
  7421  0903                     u5137:	
  7422  0903  0BF4               	decfsz	??_Lcd_Write_Char,f
  7423  0904  2903               	goto	u5137
  7424  0905  0000               	nop
  7425                           
  7426                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  7427  0906  1283               	bcf	3,5	;RP0=0, select bank0
  7428  0907  1303               	bcf	3,6	;RP1=0, select bank0
  7429  0908  1286               	bcf	6,5	;volatile
  7430                           
  7431                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  7432  0909  0875               	movf	Lcd_Write_Char@temp,w
  7433  090A  160A  118A  2659  120A  158A  	fcall	_Lcd_Port
  7434                           
  7435                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  7436  090F  1283               	bcf	3,5	;RP0=0, select bank0
  7437  0910  1303               	bcf	3,6	;RP1=0, select bank0
  7438  0911  1686               	bsf	6,5	;volatile
  7439                           
  7440                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  7441  0912  301A               	movlw	26
  7442  0913  00F4               	movwf	??_Lcd_Write_Char
  7443  0914                     u5147:	
  7444  0914  0BF4               	decfsz	??_Lcd_Write_Char,f
  7445  0915  2914               	goto	u5147
  7446  0916  0000               	nop
  7447                           
  7448                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  7449  0917  1283               	bcf	3,5	;RP0=0, select bank0
  7450  0918  1303               	bcf	3,6	;RP1=0, select bank0
  7451  0919  1286               	bcf	6,5	;volatile
  7452  091A  0008               	return
  7453  091B                     __end_of_Lcd_Write_Char:	
  7454                           
  7455                           	psect	text36
  7456  163D                     __ptext36:	
  7457 ;; *************** function _Lcd_Shift_Right *****************
  7458 ;; Defined at:
  7459 ;;		line 107 in file "./LCD4bits.h"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;		None
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;		None
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  1    wreg      void 
  7466 ;; Registers used:
  7467 ;;		wreg, status,2, status,0, pclath, cstack
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7473 ;;      Params:         0       0       0       0       0
  7474 ;;      Locals:         0       0       0       0       0
  7475 ;;      Temps:          0       0       0       0       0
  7476 ;;      Totals:         0       0       0       0       0
  7477 ;;Total ram usage:        0 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; Hardware stack levels required when called:    3
  7480 ;; This function calls:
  7481 ;;		_Lcd_Cmd
  7482 ;; This function is called by:
  7483 ;;		_main
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           
  7488                           ;psect for function _Lcd_Shift_Right
  7489  163D                     _Lcd_Shift_Right:	
  7490                           
  7491                           ;./LCD4bits.h: 109:  Lcd_Cmd(0x01);
  7492                           
  7493                           ;incstack = 0
  7494                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
  7495  163D  3001               	movlw	1
  7496  163E  160A  118A  2673  160A  118A  	fcall	_Lcd_Cmd
  7497                           
  7498                           ;./LCD4bits.h: 110:  Lcd_Cmd(0x0C);
  7499  1643  300C               	movlw	12
  7500  1644  160A  118A  2673   	fcall	_Lcd_Cmd
  7501  1647  0008               	return
  7502  1648                     __end_of_Lcd_Shift_Right:	
  7503                           
  7504                           	psect	text37
  7505  1632                     __ptext37:	
  7506 ;; *************** function _Lcd_Shift_Left *****************
  7507 ;; Defined at:
  7508 ;;		line 113 in file "./LCD4bits.h"
  7509 ;; Parameters:    Size  Location     Type
  7510 ;;		None
  7511 ;; Auto vars:     Size  Location     Type
  7512 ;;		None
  7513 ;; Return value:  Size  Location     Type
  7514 ;;                  1    wreg      void 
  7515 ;; Registers used:
  7516 ;;		wreg, status,2, status,0, pclath, cstack
  7517 ;; Tracked objects:
  7518 ;;		On entry : 0/0
  7519 ;;		On exit  : 0/0
  7520 ;;		Unchanged: 0/0
  7521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7522 ;;      Params:         0       0       0       0       0
  7523 ;;      Locals:         0       0       0       0       0
  7524 ;;      Temps:          0       0       0       0       0
  7525 ;;      Totals:         0       0       0       0       0
  7526 ;;Total ram usage:        0 bytes
  7527 ;; Hardware stack levels used:    1
  7528 ;; Hardware stack levels required when called:    3
  7529 ;; This function calls:
  7530 ;;		_Lcd_Cmd
  7531 ;; This function is called by:
  7532 ;;		_main
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536                           
  7537                           ;psect for function _Lcd_Shift_Left
  7538  1632                     _Lcd_Shift_Left:	
  7539                           
  7540                           ;./LCD4bits.h: 115:  Lcd_Cmd(0x01);
  7541                           
  7542                           ;incstack = 0
  7543                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  7544  1632  3001               	movlw	1
  7545  1633  160A  118A  2673  160A  118A  	fcall	_Lcd_Cmd
  7546                           
  7547                           ;./LCD4bits.h: 116:  Lcd_Cmd(0x08);
  7548  1638  3008               	movlw	8
  7549  1639  160A  118A  2673   	fcall	_Lcd_Cmd
  7550  163C  0008               	return
  7551  163D                     __end_of_Lcd_Shift_Left:	
  7552                           
  7553                           	psect	text38
  7554  0A67                     __ptext38:	
  7555 ;; *************** function _Lcd_Set_Cursor *****************
  7556 ;; Defined at:
  7557 ;;		line 44 in file "./LCD4bits.h"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;  a               1    wreg     unsigned char 
  7560 ;;  b               1    7[COMMON] unsigned char 
  7561 ;; Auto vars:     Size  Location     Type
  7562 ;;  a               1    2[BANK0 ] unsigned char 
  7563 ;;  temp            1    5[BANK0 ] unsigned char 
  7564 ;;  y               1    4[BANK0 ] unsigned char 
  7565 ;;  z               1    3[BANK0 ] unsigned char 
  7566 ;; Return value:  Size  Location     Type
  7567 ;;                  1    wreg      void 
  7568 ;; Registers used:
  7569 ;;		wreg, status,2, status,0, pclath, cstack
  7570 ;; Tracked objects:
  7571 ;;		On entry : 0/0
  7572 ;;		On exit  : 0/0
  7573 ;;		Unchanged: 0/0
  7574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7575 ;;      Params:         1       0       0       0       0
  7576 ;;      Locals:         0       4       0       0       0
  7577 ;;      Temps:          0       2       0       0       0
  7578 ;;      Totals:         1       6       0       0       0
  7579 ;;Total ram usage:        7 bytes
  7580 ;; Hardware stack levels used:    1
  7581 ;; Hardware stack levels required when called:    3
  7582 ;; This function calls:
  7583 ;;		_Lcd_Cmd
  7584 ;; This function is called by:
  7585 ;;		_main
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           
  7590                           ;psect for function _Lcd_Set_Cursor
  7591  0A67                     _Lcd_Set_Cursor:	
  7592                           
  7593                           ;incstack = 0
  7594                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  7595                           ;Lcd_Set_Cursor@a stored from wreg
  7596  0A67  1283               	bcf	3,5	;RP0=0, select bank0
  7597  0A68  1303               	bcf	3,6	;RP1=0, select bank0
  7598  0A69  00C9               	movwf	Lcd_Set_Cursor@a
  7599                           
  7600                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  7601  0A6A  0349               	decf	Lcd_Set_Cursor@a,w
  7602  0A6B  1D03               	btfss	3,2
  7603  0A6C  2A90               	goto	l3788
  7604                           
  7605                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  7606  0A6D  0877               	movf	Lcd_Set_Cursor@b,w
  7607  0A6E  3E7F               	addlw	127
  7608  0A6F  00C7               	movwf	??_Lcd_Set_Cursor
  7609  0A70  0847               	movf	??_Lcd_Set_Cursor,w
  7610  0A71  00CC               	movwf	Lcd_Set_Cursor@temp
  7611                           
  7612                           ;./LCD4bits.h: 50:   z = temp>>4;
  7613  0A72  084C               	movf	Lcd_Set_Cursor@temp,w
  7614  0A73  00C7               	movwf	??_Lcd_Set_Cursor
  7615  0A74  3004               	movlw	4
  7616  0A75                     u3955:	
  7617  0A75  1003               	clrc
  7618  0A76  0CC7               	rrf	??_Lcd_Set_Cursor,f
  7619  0A77  3EFF               	addlw	-1
  7620  0A78  1D03               	skipz
  7621  0A79  2A75               	goto	u3955
  7622  0A7A  0847               	movf	??_Lcd_Set_Cursor,w
  7623  0A7B  00C8               	movwf	??_Lcd_Set_Cursor+1
  7624  0A7C  0848               	movf	??_Lcd_Set_Cursor+1,w
  7625  0A7D  00CA               	movwf	Lcd_Set_Cursor@z
  7626                           
  7627                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  7628  0A7E  084C               	movf	Lcd_Set_Cursor@temp,w
  7629  0A7F  390F               	andlw	15
  7630  0A80  00C7               	movwf	??_Lcd_Set_Cursor
  7631  0A81  0847               	movf	??_Lcd_Set_Cursor,w
  7632  0A82  00CB               	movwf	Lcd_Set_Cursor@y
  7633                           
  7634                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  7635  0A83  084A               	movf	Lcd_Set_Cursor@z,w
  7636  0A84  160A  118A  2673  120A  158A  	fcall	_Lcd_Cmd
  7637                           
  7638                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  7639  0A89  1283               	bcf	3,5	;RP0=0, select bank0
  7640  0A8A  1303               	bcf	3,6	;RP1=0, select bank0
  7641  0A8B  084B               	movf	Lcd_Set_Cursor@y,w
  7642  0A8C  160A  118A  2673   	fcall	_Lcd_Cmd
  7643                           
  7644                           ;./LCD4bits.h: 54:  }
  7645  0A8F  0008               	return
  7646  0A90                     l3788:	
  7647  0A90  3002               	movlw	2
  7648  0A91  0649               	xorwf	Lcd_Set_Cursor@a,w
  7649  0A92  1D03               	btfss	3,2
  7650  0A93  0008               	return
  7651                           
  7652                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  7653  0A94  0877               	movf	Lcd_Set_Cursor@b,w
  7654  0A95  3EBF               	addlw	191
  7655  0A96  00C7               	movwf	??_Lcd_Set_Cursor
  7656  0A97  0847               	movf	??_Lcd_Set_Cursor,w
  7657  0A98  00CC               	movwf	Lcd_Set_Cursor@temp
  7658                           
  7659                           ;./LCD4bits.h: 58:   z = temp>>4;
  7660  0A99  084C               	movf	Lcd_Set_Cursor@temp,w
  7661  0A9A  00C7               	movwf	??_Lcd_Set_Cursor
  7662  0A9B  3004               	movlw	4
  7663  0A9C                     u3975:	
  7664  0A9C  1003               	clrc
  7665  0A9D  0CC7               	rrf	??_Lcd_Set_Cursor,f
  7666  0A9E  3EFF               	addlw	-1
  7667  0A9F  1D03               	skipz
  7668  0AA0  2A9C               	goto	u3975
  7669  0AA1  0847               	movf	??_Lcd_Set_Cursor,w
  7670  0AA2  00C8               	movwf	??_Lcd_Set_Cursor+1
  7671  0AA3  0848               	movf	??_Lcd_Set_Cursor+1,w
  7672  0AA4  00CA               	movwf	Lcd_Set_Cursor@z
  7673                           
  7674                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  7675  0AA5  084C               	movf	Lcd_Set_Cursor@temp,w
  7676  0AA6  390F               	andlw	15
  7677  0AA7  00C7               	movwf	??_Lcd_Set_Cursor
  7678  0AA8  0847               	movf	??_Lcd_Set_Cursor,w
  7679  0AA9  00CB               	movwf	Lcd_Set_Cursor@y
  7680                           
  7681                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  7682  0AAA  084A               	movf	Lcd_Set_Cursor@z,w
  7683  0AAB  160A  118A  2673  120A  158A  	fcall	_Lcd_Cmd
  7684                           
  7685                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  7686  0AB0  1283               	bcf	3,5	;RP0=0, select bank0
  7687  0AB1  1303               	bcf	3,6	;RP1=0, select bank0
  7688  0AB2  084B               	movf	Lcd_Set_Cursor@y,w
  7689  0AB3  160A  118A  2673   	fcall	_Lcd_Cmd
  7690  0AB6  0008               	return
  7691  0AB7                     __end_of_Lcd_Set_Cursor:	
  7692                           
  7693                           	psect	text39
  7694  1627                     __ptext39:	
  7695 ;; *************** function _Lcd_Clear *****************
  7696 ;; Defined at:
  7697 ;;		line 38 in file "./LCD4bits.h"
  7698 ;; Parameters:    Size  Location     Type
  7699 ;;		None
  7700 ;; Auto vars:     Size  Location     Type
  7701 ;;		None
  7702 ;; Return value:  Size  Location     Type
  7703 ;;                  1    wreg      void 
  7704 ;; Registers used:
  7705 ;;		wreg, status,2, status,0, pclath, cstack
  7706 ;; Tracked objects:
  7707 ;;		On entry : 0/0
  7708 ;;		On exit  : 0/0
  7709 ;;		Unchanged: 0/0
  7710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7711 ;;      Params:         0       0       0       0       0
  7712 ;;      Locals:         0       0       0       0       0
  7713 ;;      Temps:          0       0       0       0       0
  7714 ;;      Totals:         0       0       0       0       0
  7715 ;;Total ram usage:        0 bytes
  7716 ;; Hardware stack levels used:    1
  7717 ;; Hardware stack levels required when called:    3
  7718 ;; This function calls:
  7719 ;;		_Lcd_Cmd
  7720 ;; This function is called by:
  7721 ;;		_main
  7722 ;; This function uses a non-reentrant model
  7723 ;;
  7724                           
  7725                           
  7726                           ;psect for function _Lcd_Clear
  7727  1627                     _Lcd_Clear:	
  7728                           
  7729                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  7730                           
  7731                           ;incstack = 0
  7732                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  7733  1627  3000               	movlw	0
  7734  1628  160A  118A  2673  160A  118A  	fcall	_Lcd_Cmd
  7735                           
  7736                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  7737  162D  3001               	movlw	1
  7738  162E  160A  118A  2673   	fcall	_Lcd_Cmd
  7739  1631  0008               	return
  7740  1632                     __end_of_Lcd_Clear:	
  7741                           
  7742                           	psect	text40
  7743  1673                     __ptext40:	
  7744 ;; *************** function _Lcd_Cmd *****************
  7745 ;; Defined at:
  7746 ;;		line 29 in file "./LCD4bits.h"
  7747 ;; Parameters:    Size  Location     Type
  7748 ;;  a               1    wreg     unsigned char 
  7749 ;; Auto vars:     Size  Location     Type
  7750 ;;  a               1    6[COMMON] unsigned char 
  7751 ;; Return value:  Size  Location     Type
  7752 ;;                  1    wreg      void 
  7753 ;; Registers used:
  7754 ;;		wreg, status,2, status,0, pclath, cstack
  7755 ;; Tracked objects:
  7756 ;;		On entry : 0/0
  7757 ;;		On exit  : 0/0
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7760 ;;      Params:         0       0       0       0       0
  7761 ;;      Locals:         1       0       0       0       0
  7762 ;;      Temps:          2       0       0       0       0
  7763 ;;      Totals:         3       0       0       0       0
  7764 ;;Total ram usage:        3 bytes
  7765 ;; Hardware stack levels used:    1
  7766 ;; Hardware stack levels required when called:    2
  7767 ;; This function calls:
  7768 ;;		_Lcd_Port
  7769 ;; This function is called by:
  7770 ;;		_Lcd_Clear
  7771 ;;		_Lcd_Set_Cursor
  7772 ;;		_Lcd_Init
  7773 ;;		_Lcd_Shift_Right
  7774 ;;		_Lcd_Shift_Left
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           
  7779                           ;psect for function _Lcd_Cmd
  7780  1673                     _Lcd_Cmd:	
  7781                           
  7782                           ;incstack = 0
  7783                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  7784                           ;Lcd_Cmd@a stored from wreg
  7785  1673  00F6               	movwf	Lcd_Cmd@a
  7786                           
  7787                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  7788  1674  1283               	bcf	3,5	;RP0=0, select bank0
  7789  1675  1303               	bcf	3,6	;RP1=0, select bank0
  7790  1676  1206               	bcf	6,4	;volatile
  7791                           
  7792                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  7793  1677  0876               	movf	Lcd_Cmd@a,w
  7794  1678  160A  118A  2659  160A  118A  	fcall	_Lcd_Port
  7795                           
  7796                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  7797  167D  1283               	bcf	3,5	;RP0=0, select bank0
  7798  167E  1303               	bcf	3,6	;RP1=0, select bank0
  7799  167F  1686               	bsf	6,5	;volatile
  7800                           
  7801                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  7802  1680  300B               	movlw	11
  7803  1681  00F5               	movwf	??_Lcd_Cmd+1
  7804  1682  3062               	movlw	98
  7805  1683  00F4               	movwf	??_Lcd_Cmd
  7806  1684                     u5157:	
  7807  1684  0BF4               	decfsz	??_Lcd_Cmd,f
  7808  1685  2E84               	goto	u5157
  7809  1686  0BF5               	decfsz	??_Lcd_Cmd+1,f
  7810  1687  2E84               	goto	u5157
  7811  1688  0000               	nop
  7812                           
  7813                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  7814  1689  1283               	bcf	3,5	;RP0=0, select bank0
  7815  168A  1303               	bcf	3,6	;RP1=0, select bank0
  7816  168B  1286               	bcf	6,5	;volatile
  7817  168C  0008               	return
  7818  168D                     __end_of_Lcd_Cmd:	
  7819                           
  7820                           	psect	text41
  7821  1659                     __ptext41:	
  7822 ;; *************** function _Lcd_Port *****************
  7823 ;; Defined at:
  7824 ;;		line 7 in file "./LCD4bits.h"
  7825 ;; Parameters:    Size  Location     Type
  7826 ;;  a               1    wreg     unsigned char 
  7827 ;; Auto vars:     Size  Location     Type
  7828 ;;  a               1    3[COMMON] unsigned char 
  7829 ;; Return value:  Size  Location     Type
  7830 ;;                  1    wreg      void 
  7831 ;; Registers used:
  7832 ;;		wreg
  7833 ;; Tracked objects:
  7834 ;;		On entry : 0/0
  7835 ;;		On exit  : 0/0
  7836 ;;		Unchanged: 0/0
  7837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7838 ;;      Params:         0       0       0       0       0
  7839 ;;      Locals:         1       0       0       0       0
  7840 ;;      Temps:          0       0       0       0       0
  7841 ;;      Totals:         1       0       0       0       0
  7842 ;;Total ram usage:        1 bytes
  7843 ;; Hardware stack levels used:    1
  7844 ;; Hardware stack levels required when called:    1
  7845 ;; This function calls:
  7846 ;;		Nothing
  7847 ;; This function is called by:
  7848 ;;		_Lcd_Cmd
  7849 ;;		_Lcd_Init
  7850 ;;		_Lcd_Write_Char
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           
  7855                           ;psect for function _Lcd_Port
  7856  1659                     _Lcd_Port:	
  7857                           
  7858                           ;incstack = 0
  7859                           ; Regs used in _Lcd_Port: [wreg]
  7860                           ;Lcd_Port@a stored from wreg
  7861  1659  00F3               	movwf	Lcd_Port@a
  7862                           
  7863                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  7864  165A  1C73               	btfss	Lcd_Port@a,0
  7865  165B  2E60               	goto	l160
  7866                           
  7867                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  7868  165C  1283               	bcf	3,5	;RP0=0, select bank0
  7869  165D  1303               	bcf	3,6	;RP1=0, select bank0
  7870  165E  1406               	bsf	6,0	;volatile
  7871  165F  2E63               	goto	l161
  7872  1660                     l160:	
  7873                           ;./LCD4bits.h: 11:  else
  7874                           
  7875                           
  7876                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  7877  1660  1283               	bcf	3,5	;RP0=0, select bank0
  7878  1661  1303               	bcf	3,6	;RP1=0, select bank0
  7879  1662  1006               	bcf	6,0	;volatile
  7880  1663                     l161:	
  7881                           
  7882                           ;./LCD4bits.h: 14:  if(a & 2)
  7883  1663  1CF3               	btfss	Lcd_Port@a,1
  7884  1664  2E67               	goto	l162
  7885                           
  7886                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  7887  1665  1486               	bsf	6,1	;volatile
  7888  1666  2E68               	goto	l163
  7889  1667                     l162:	
  7890                           ;./LCD4bits.h: 16:  else
  7891                           
  7892                           
  7893                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  7894  1667  1086               	bcf	6,1	;volatile
  7895  1668                     l163:	
  7896                           
  7897                           ;./LCD4bits.h: 19:  if(a & 4)
  7898  1668  1D73               	btfss	Lcd_Port@a,2
  7899  1669  2E6C               	goto	l164
  7900                           
  7901                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  7902  166A  1506               	bsf	6,2	;volatile
  7903  166B  2E6D               	goto	l165
  7904  166C                     l164:	
  7905                           ;./LCD4bits.h: 21:  else
  7906                           
  7907                           
  7908                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  7909  166C  1106               	bcf	6,2	;volatile
  7910  166D                     l165:	
  7911                           
  7912                           ;./LCD4bits.h: 24:  if(a & 8)
  7913  166D  1DF3               	btfss	Lcd_Port@a,3
  7914  166E  2E71               	goto	l166
  7915                           
  7916                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  7917  166F  1586               	bsf	6,3	;volatile
  7918  1670  0008               	return
  7919  1671                     l166:	
  7920                           ;./LCD4bits.h: 26:  else
  7921                           
  7922                           
  7923                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  7924  1671  1186               	bcf	6,3	;volatile
  7925  1672  0008               	return
  7926  1673                     __end_of_Lcd_Port:	
  7927                           
  7928                           	psect	text42
  7929  16C3                     __ptext42:	
  7930 ;; *************** function _manual_pwm *****************
  7931 ;; Defined at:
  7932 ;;		line 57 in file "mainMaster.c"
  7933 ;; Parameters:    Size  Location     Type
  7934 ;;		None
  7935 ;; Auto vars:     Size  Location     Type
  7936 ;;		None
  7937 ;; Return value:  Size  Location     Type
  7938 ;;                  1    wreg      void 
  7939 ;; Registers used:
  7940 ;;		wreg, status,2, status,0
  7941 ;; Tracked objects:
  7942 ;;		On entry : 0/0
  7943 ;;		On exit  : 0/0
  7944 ;;		Unchanged: 0/0
  7945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7946 ;;      Params:         0       0       0       0       0
  7947 ;;      Locals:         0       0       0       0       0
  7948 ;;      Temps:          3       0       0       0       0
  7949 ;;      Totals:         3       0       0       0       0
  7950 ;;Total ram usage:        3 bytes
  7951 ;; Hardware stack levels used:    1
  7952 ;; This function calls:
  7953 ;;		Nothing
  7954 ;; This function is called by:
  7955 ;;		Interrupt level 1
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           
  7960                           ;psect for function _manual_pwm
  7961  16C3                     _manual_pwm:	
  7962                           
  7963                           ;mainMaster.c: 59:     if (INTCONbits.T0IF == 1){
  7964  16C3  1D0B               	btfss	11,2	;volatile
  7965  16C4  2EDB               	goto	i1l313
  7966                           
  7967                           ;mainMaster.c: 60:         cont++;
  7968  16C5  3001               	movlw	1
  7969  16C6  00F0               	movwf	??_manual_pwm
  7970  16C7  0870               	movf	??_manual_pwm,w
  7971  16C8  1283               	bcf	3,5	;RP0=0, select bank0
  7972  16C9  1303               	bcf	3,6	;RP1=0, select bank0
  7973  16CA  07AD               	addwf	_cont,f
  7974                           
  7975                           ;mainMaster.c: 61:         if(cont < 200){
  7976  16CB  30C8               	movlw	200
  7977  16CC  022D               	subwf	_cont,w
  7978  16CD  1803               	skipnc
  7979  16CE  2ED7               	goto	i1l2986
  7980                           
  7981                           ;mainMaster.c: 62:             if(cont < val){
  7982  16CF  082C               	movf	_val,w
  7983  16D0  022D               	subwf	_cont,w
  7984  16D1  1803               	skipnc
  7985  16D2  2ED5               	goto	i1l310
  7986                           
  7987                           ;mainMaster.c: 63:                 PORTAbits.RA1 = 1;
  7988  16D3  1485               	bsf	5,1	;volatile
  7989                           
  7990                           ;mainMaster.c: 64:             }else{
  7991  16D4  2ED8               	goto	i1l2988
  7992  16D5                     i1l310:	
  7993                           
  7994                           ;mainMaster.c: 65:                 PORTAbits.RA1 = 0;
  7995  16D5  1085               	bcf	5,1	;volatile
  7996  16D6  2ED8               	goto	i1l2988
  7997  16D7                     i1l2986:	
  7998                           
  7999                           ;mainMaster.c: 68:             cont = 0;
  8000  16D7  01AD               	clrf	_cont
  8001  16D8                     i1l2988:	
  8002                           
  8003                           ;mainMaster.c: 70:         TMR0 = 56;
  8004  16D8  3038               	movlw	56
  8005  16D9  0081               	movwf	1	;volatile
  8006                           
  8007                           ;mainMaster.c: 71:         INTCONbits.T0IF = 0;
  8008  16DA  110B               	bcf	11,2	;volatile
  8009  16DB                     i1l313:	
  8010  16DB  0872               	movf	??_manual_pwm+2,w
  8011  16DC  008A               	movwf	10
  8012  16DD  0E71               	swapf	(??_manual_pwm+1)^(0+4294967168),w
  8013  16DE  0083               	movwf	3
  8014  16DF  0EFE               	swapf	126,f
  8015  16E0  0E7E               	swapf	126,w
  8016  16E1  0009               	retfie
  8017  16E2                     __end_of_manual_pwm:	
  8018  007E                     btemp	set	126	;btemp
  8019  007E                     wtemp0	set	126
  8020                           
  8021                           	psect	intentry
  8022  0004                     __pintentry:	
  8023                           ;incstack = 0
  8024                           ; Regs used in _manual_pwm: [wreg+status,2+status,0]
  8025                           
  8026  0004                     interrupt_function:	
  8027  007E                     saved_w	set	btemp
  8028  0004  00FE               	movwf	btemp
  8029  0005  0E03               	swapf	3,w
  8030  0006  00F1               	movwf	??_manual_pwm+1
  8031  0007  080A               	movf	10,w
  8032  0008  00F2               	movwf	??_manual_pwm+2
  8033  0009  160A  118A  2EC3   	ljmp	_manual_pwm


Data Sizes:
    Strings     353
    Constant    10
    Data        5
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     33      77
    BANK1            80      6       6
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), temp(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_36(CODE[4]), STR_35(CODE[5]), STR_34(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), temp(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_temp@temp_string	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_time@time_string	PTR unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), 

    day2	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), STR_11(CODE[10]), STR_10(CODE[10]), STR_9(CODE[10]), 
		 -> STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), STR_33(CODE[14]), STR_32(CODE[13]), STR_31(CODE[14]), 
		 -> STR_30(CODE[14]), STR_29(CODE[13]), STR_28(CODE[11]), STR_27(CODE[14]), 
		 -> STR_26(CODE[13]), STR_25(CODE[17]), STR_24(CODE[6]), STR_23(CODE[7]), 
		 -> STR_22(CODE[15]), STR_21(CODE[15]), STR_20(CODE[16]), STR_19(CODE[16]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[16]), STR_15(CODE[16]), 
		 -> STR_11(CODE[10]), STR_10(CODE[10]), STR_9(CODE[10]), STR_8(CODE[10]), 
		 -> STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), 
		 -> time(BANK0[6]), temp(BANK0[6]), STR_3(CODE[11]), STR_2(CODE[7]), 
		 -> STR_1(CODE[31]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_Char
    _main->___awdiv
    _main->___awmod
    _main->_get_IR
    _main->_get_PIR
    _main->_get_day
    _main->_get_hall
    _main->_get_tripwire
    _main->_strcmp
    _main->_write_RTC
    _write_RTC->_I2C_Master_Write
    _setup->_I2C_Master_Init
    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _open_door->_I2C_Master_Write
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _close_door->_I2C_Master_Write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _manual_pwm in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_UART_Init
    _UART_Init->___aldiv
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _get_temp->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read

Critical Paths under _manual_pwm in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _manual_pwm in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _manual_pwm in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _manual_pwm in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   39486
                                              0 BANK1      6     6      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                     _Lcd_Write_Char
                   _Lcd_Write_String
                      _UART_TX_Empty
                         _UART_Write
                            ___awdiv
                            ___awmod
                             ___bmul
                         _close_door
                             _get_IR
                            _get_PIR
                            _get_day
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                          _open_door
                              _setup
                             _strcmp
                          _write_RTC
 ---------------------------------------------------------------------------------
 (1) _write_RTC                                            5     3      2    2284
                                              5 COMMON     3     1      2
                                              0 BANK0      2     2      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     511
                                              3 COMMON     5     3      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1880
                    _I2C_Master_Init
                           _Lcd_Init
                          _UART_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4    1118
                                              4 COMMON     2     2      0
                                             14 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     805
                                              3 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              0 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     542
                                              4 COMMON     4     4      0
                                             13 BANK0      4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     421
                                              3 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _open_door                                            0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                             5     5      0    3238
                                              2 BANK0      5     5      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             9     9      0    5666
                                             24 BANK0      9     9      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    19      4    1806
                                              9 BANK0     15    11      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     320
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     875
                                              3 COMMON     4     2      2
                                              0 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _close_door                                           0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2011
                                              3 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     793
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     604
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Empty                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    2738
                                              0 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              4 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    2300
                                              7 COMMON     1     0      1
                                              0 BANK0      6     6      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              4 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _manual_pwm                                           3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_TX_Empty
   _UART_Write
   ___awdiv
   ___awmod
   ___bmul
   _close_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_day
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _open_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
     _initOscilador
   _strcmp
   _write_RTC
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _manual_pwm (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      6       6       7        7.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     21      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5E      12        0.0%
ABS                  0      0      5E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Mar 12 12:24:10 2019

                                _i 0036                                  _j 0035  
                                _k 0078                                  pc 0002  
                   ___bmul@product 0075                        __CFG_CP$OFF 0000  
                      get_hall@key 0049                                 _IR 0037  
                     ___awdiv@sign 0048                                 fsr 0004  
                              l203 0B0A                                l134 087D  
                              l160 1660                                l152 1791  
                              l161 1663                                l153 1794  
                              l162 1667                                l410 059D  
                              l402 04B4                                l163 1668  
                              l323 0162                                l164 166C  
                              l165 166D                                l413 05B9  
                              l166 1671                                l238 161E  
                              l422 0613                                l416 05D7  
                              l328 0143                                l361 02D6  
                              l337 0174                                l338 0185  
                              l419 05F5                                l429 06A5  
                              l376 0334                                l393 0484  
                              l396 0494                                l399 04A4  
                              l658 0D18                                _GIE 005F  
                     __CFG_CPD$OFF 0000                                _PIR 0038  
                    ?_get_tripwire 0070                                _min 002A  
                              _val 002C                                fsr0 0004  
                              indf 0000                       ___awmod@sign 0048  
                     __CFG_LVP$OFF 0000                               l4100 0187  
                             l4110 0195                               l4022 0077  
                             l4112 0196                               l4040 00D3  
                             l4008 0059                               l4202 030A  
                             l4114 0199                               l4220 0337  
                             l4116 019A                               l4222 0338  
                             l4150 0256                               l4070 0146  
                             l2472 17F0                               l2560 0AC4  
                             l4080 0155                               l2466 17D4  
                             l3602 0D7E                               l2570 0AE3  
                             l2562 0ACA                               l4322 0558  
                             l4250 03B9                               l4242 0399  
                             l4234 0385                               l4218 0327  
                             l4170 0283                               l4162 026B  
                             l2900 0B79                               l3620 095F  
                             l2468 17E2                               l2476 17FB  
                             l2572 0AE3                               l2564 0AD0  
                             l2556 0AB9                               l4316 04D1  
                             l4260 03D8                               l4252 03C3  
                             l4172 0289                               l4164 0271  
                             l4180 029C                               l4068 0136  
                             l4084 0164                               l2910 0B81  
                             l3622 096D                               l3606 0D8C  
                             l2566 0AD6                               l2558 0ABE  
                             l4270 0402                               l4174 028F  
                             l4166 0277                               l4182 02BD  
                             l4158 025F                               l2912 0B8F  
                             l3632 098E                               l3552 0BCF  
                             l2568 0ADC                               l2576 0AE8  
                             l4424 067B                               l4192 0305  
                             l4176 0295                               l4168 027D  
                             l2922 0BB0                               l2682 164A  
                             l3730 0F63                               l2674 088B  
                             l3562 0C07                               l3554 0BDF  
                             l4434 0691                               l4450 06BC  
                             l4290 04C2                               l4194 02EF  
                             l4186 02D9                               l3804 0997  
                             l3628 0983                               l3740 0F7A  
                             l3724 0F3F                               l2676 0896  
                             l3580 0D29                               l4268 03F8  
                             l2926 0BB8                               l2918 0BA5  
                             l2686 1650                               l2678 089E  
                             l3566 0C14                               l3590 0D49  
                             l3752 0FA1                               l4544 02A6  
                             l3746 0F7C                               l3770 0FFB  
                             l4546 0AF0                               l4466 06F2  
                             l4458 06D2                               l4394 0631  
                             l4548 0F58                               l3588 0D39  
                             l2894 0B6E                               l3766 0FB4  
                             l3758 0FB0                               l3598 0D71  
                             l3950 17C6                               l4398 0635  
                             l3768 0F19                               l3698 0EF8  
                             l3946 17AF                               l3788 0A90  
                             l3964 0A26                               l3948 17A0  
                             l3990 0A62                               l3982 0A4F  
                             l3976 0A33                               l3968 0A2D  
                             l3888 0E17                               l3978 0A41  
                             l3986 0A5A                               STR_1 071C  
                             STR_2 0855                        get_time@min 004C  
                             STR_3 07FD                               STR_4 0808  
                             STR_5 081C                               STR_6 0844  
                             STR_7 0826                               STR_8 083A  
                             STR_9 0812                               _BRGH 04C2  
                             _CREN 00C4                               u2105 17E8  
                             u2115 17F1                               u2155 08F3  
                             u2085 17D7                               u4015 0DED  
                             u4105 0A36                               u4035 0CCC  
                             u2525 0B84                               u4125 0A47  
                             u4045 0CEB                               u4135 0A50  
                             u5007 01D6                               u2545 0B90  
                             u5017 01E8                               u2555 0B9C  
                             u5107 0C29                               u5027 01FA  
                             u2565 0BA6                               u5117 0C39  
                             u5037 020C                               u5127 0C49  
                             u5047 021E                               u5137 0903  
                             u3545 0BD3                               u5057 0230  
                             u5147 0914                               u3715 0962  
                             u3635 0D3D                               u3811 0E75  
                             u5067 0242                               _PEIE 005E  
                             u3812 0E76                               u5157 1684  
                             u3565 0BE1                               u3813 0E7B  
                             u3805 0E5E                               u5077 0252  
                             u3814 0E7C                               u3735 096E  
                             u3575 0BF6                               u3655 0D4B  
                             u3815 0E81                               u5087 04CA  
                             u4375 02D0                               u3816 0E82  
                             u3745 097A                               u3585 0C08  
                             u3665 0D60                               u5097 0673  
                             u3755 0984                               u3675 0D72  
                             u3851 0ED5                               u3835 0EA5  
                             u3852 0ED6                               _RCEN 048B  
                             _RCIF 0065                               u3853 0EDB  
                             u3845 0EBE                               u3854 0EDC  
                             u3775 08BC                               u3855 0EE1  
                             u3856 0EE2                               u3955 0A75  
                             u3795 0E45                               u4675 04EA  
                             u4685 0523                               u3975 0A9C  
                             u3895 0F97                               u4957 0066  
                             u4967 0084                               u4977 00C7  
                             u4987 01B2                               u4997 01C4  
                             _TMR0 0001                               _SPEN 00C7  
                             _TRMT 04C1                               _TXEN 04C5  
                             _SYNC 04C4                       __CFG_WRT$OFF 0000  
                             _day1 0079                               _day2 0025  
                             _bank 002E                  ?_Lcd_Write_String 0047  
 __end_of_I2C_Master_RepeatedStart 160D                               _cont 002D  
                             _door 003A                               _main 003B  
                             _hour 002B                               _temp 003B  
                             _time 0041                               _trip 0039  
                             btemp 007E                               start 000C  
               ??_Lcd_Write_String 0049                      __CFG_IESO$OFF 0000  
                  __end_of_Lcd_Cmd 168D                  ___bmul@multiplier 0076  
                    __CFG_MCLRE$ON 0000                get_temp@temp_string 0066  
                 ?_I2C_Master_Init 0054                   ?_I2C_Master_Read 0073  
                 ?_I2C_Master_Wait 0070                   ?_I2C_Master_Stop 0070  
                  __end_of___aldiv 0D95                              ?_main 0070  
                  __end_of___awdiv 0BBD                              STR_10 0830  
                            STR_11 07DB                              STR_12 086E  
                            STR_20 079E                              STR_21 076F  
                            STR_13 0868                              STR_22 079F  
                            STR_14 0862                              STR_30 07CA  
                            STR_23 084E                              STR_31 07BC  
                            STR_15 078E                              STR_32 07E5  
                            STR_24 085C                              STR_16 077E  
                            STR_33 07AE                              STR_17 074C  
                            STR_25 073B                      __CFG_WDTE$OFF 0000  
                            STR_34 087A                              STR_26 07E5  
                            STR_18 075D                              STR_35 0874  
                            STR_27 07AE                              STR_19 076E  
                            STR_36 0879                              STR_28 07F2  
                  __end_of___awmod 0A67                              STR_29 07D8  
                     get_time@hour 004B                              _ANSEL 0188  
                  __end_of___lldiv 0C1D                     ??_get_tripwire 0077  
                  ___awdiv@divisor 0073                    __end_of___lwdiv 0993  
                            i1l310 16D5                              i1l313 16DB  
                  __end_of___lwmod 1800                    ___awdiv@counter 0047  
                            _RCREG 001A                              _SPBRG 0099  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                              _PORTD 0008  
                            _PORTE 0009            __size_of_Lcd_Set_Cursor 0050  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087                              _TRISD 0088  
                            _SSPIE 0463                              _TRISE 0089  
                            _SSPIF 0063                              _TXREG 0019  
                  __end_of_get_PIR 1728                     __CFG_FCMEN$OFF 0000  
                  __end_of_get_day 0955                        ?_UART_Write 0070  
               __size_of_UART_Init 00D8                              _alarm 002F  
          __size_of_Lcd_Shift_Left 000B                    __end_of_dpowers 071C  
                            _setup 0B0C                              _state 007A  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 1000                   __end_of_Lcd_Init 0C7D  
                 __end_of_Lcd_Port 1673                    __initialization 000F  
                     __end_of_main 06FC             __size_of_initOscilador 0055  
                           ??_main 00A0                 __size_of_Lcd_Clear 000B  
                ?_I2C_Master_Start 0070                  ?_I2C_Master_Write 0073  
               ??_I2C_Master_Start 0073                 ??_I2C_Master_Write 0075  
                 ___awdiv@dividend 0075                             ?_setup 0070  
                           _ANSELH 0189                             i1l2986 16D7  
                           i1l2988 16D8                          ??_Lcd_Cmd 0074  
          __size_of_Lcd_Write_Char 0039                             _SSPADD 0093  
                           _TRISC3 043B                             _TRISC4 043C  
                           _TRISC6 043E                             _TRISC7 043F  
                           _SSPCON 0014                             _SSPBUF 0013  
                   __CFG_PWRTE$OFF 0000           _I2C_Master_RepeatedStart 1606  
                 __end_of_get_hall 174B                  __end_of_UART_Init 0F12  
                 __end_of_get_temp 0E3A                   __end_of_get_time 0D06  
                           ___bmul 1648                __size_of_UART_Write 000A  
                        ??___aldiv 0073                          ??___awdiv 0077  
                        ??___awmod 0077                             _change 0034  
                        ??___lldiv 0073                             _get_IR 16E2  
                        ??___lwdiv 0077                          ??___lwmod 004E  
         __size_of_Lcd_Shift_Right 000B                   ___awdiv@quotient 0049  
                           _newmin 0027                    ___awmod@divisor 0073  
                        ??_get_PIR 0077                    ___awmod@counter 0047  
            __end_of_UART_TX_Empty 15F8                          ??_get_day 0077  
                           _strcat 0886                             _strcmp 179C  
                           saved_w 007E                          ??_sprintf 0054  
                  Lcd_Set_Cursor@a 0049                    Lcd_Set_Cursor@b 0077  
                  Lcd_Set_Cursor@y 004B                    Lcd_Set_Cursor@z 004A  
          __end_of__initialization 0037                      _initOscilador 0AB7  
                __end_of_Lcd_Clear 1632               __end_of_get_tripwire 176E  
              ___bmul@multiplicand 0073                     __pcstackCOMMON 0070  
                     __pidataBANK0 15ED                      __end_of_setup 0B62  
                   _Lcd_Set_Cursor 0A67                     _OPTION_REGbits 0081  
                   _Lcd_Shift_Left 1632                          ?_Lcd_Init 0070  
                        ?_Lcd_Port 0070                            ??_setup 0078  
                       __pbssBANK0 0020                     ?_initOscilador 0070  
                       __pmaintext 003B                            ?___bmul 0073  
                          ?_get_IR 0070                         __pintentry 0004  
               __size_of_open_door 001B          __size_of_Lcd_Write_String 0041  
           __end_of_Lcd_Set_Cursor 0AB7                            ?_strcat 0073  
                          ?_strcmp 0073             __end_of_Lcd_Shift_Left 163D  
                ??_Lcd_Shift_Right 0077                         _close_door 168D  
                     ??_UART_Write 0073                         ??_Lcd_Init 0047  
                       ??_Lcd_Port 0073                            _SSPCON2 0091  
                        ?_get_hall 0070                            _SSPSTAT 0094  
                        ?_get_temp 0070                          ?_get_time 0070  
                       __stringtab 0700                initOscilador@option 0075  
                   _Lcd_Write_Char 08E2                            _Lcd_Cmd 1673  
               __size_of_write_RTC 0046                         _manual_pwm 16C3  
                          ___aldiv 0D06                    __size_of___bmul 0011  
                          ___awdiv 0B62                            ___awmod 0A1A  
                          ___lldiv 0BBD                 __end_of_UART_Write 1627  
                          ___lwdiv 0955                            ___lwmod 17CC  
                  __size_of_get_IR 0023                            _change1 0033  
                          _change2 0032                            _change3 0031  
                          _change4 0030                    ?_Lcd_Set_Cursor 0077  
                          _get_PIR 1705                            __ptext1 09D4  
                          __ptext2 179C                            __ptext3 0B0C  
                          __ptext4 0AB7                            __ptext5 0E3A  
                          __ptext6 0D06                            __ptext7 0C1D  
                          __ptext8 08AA                            __ptext9 0BBD  
                          _get_day 091B                get_time@time_string 004D  
                  __size_of_strcat 0024                    __size_of_strcmp 0030  
                          _dpowers 0712                    ?_Lcd_Shift_Left 0070  
                 ___awmod@dividend 0075                   ___aldiv@dividend 004B  
                          _newhour 0028           __size_of_I2C_Master_Init 0038  
         __size_of_I2C_Master_Read 002E           __size_of_I2C_Master_Wait 0009  
         __size_of_I2C_Master_Stop 0007                    ??_initOscilador 0073  
                       ??_get_hall 0077                            _sprintf 0F12  
                          clrloop0 1616             __end_of_Lcd_Write_Char 091B  
                       ??_get_temp 005F                         ??_get_time 0049  
             end_of_initialization 0037              __size_of_get_tripwire 0023  
       ??_I2C_Master_RepeatedStart 0073                  __end_of_open_door 16C3  
                       get_PIR@PIR 0049          __size_of_I2C_Master_Start 0007  
        __size_of_I2C_Master_Write 0008                    ___lldiv@divisor 0047  
                  ___lldiv@counter 0053                          _RCSTAbits 0018  
                 ___aldiv@quotient 0051                   I2C_Master_Init@c 0054  
                 I2C_Master_Read@a 0073                          Lcd_Port@a 0073  
                     write_RTC@day 0076                       __pstringtext 0700  
                          strcmp@r 0047                          _UART_Init 0E3A  
                        _PORTAbits 0005                          _PORTBbits 0006  
                        _PORTCbits 0007                          _PORTDbits 0008  
                        _PORTEbits 0009                     UART_Write@data 0073  
                __end_of_write_RTC 0A1A                       _get_tripwire 174B  
                      ?_close_door 0070                          _TRISCbits 0087  
                  ?_Lcd_Write_Char 0070                  Lcd_Write_String@a 0047  
                Lcd_Write_String@i 004C                          _Lcd_Clear 1627  
                      ?_manual_pwm 0070                     __end_of___bmul 1659  
                 _Lcd_Write_String 0993                         ?_UART_Init 0055  
                   __end_of_get_IR 1705                     __end_of_strcat 08AA  
                   __end_of_strcmp 17CC                start_initialization 000F  
                __size_of_Lcd_Init 0060                  __size_of_Lcd_Port 001A  
                ??_I2C_Master_Init 0074                  ??_I2C_Master_Read 0075  
                ??_I2C_Master_Wait 0073                  ??_I2C_Master_Stop 0073  
           __size_of_UART_TX_Empty 0006           __CFG_FOSC$INTRC_NOCLKOUT 0000  
                       ?_Lcd_Clear 0070                           ??___bmul 0074  
              __size_of_close_door 001B                    _Lcd_Shift_Right 163D  
                         ??_get_IR 0077                        __pdataBANK0 0068  
                  Lcd_Write_Char@a 0077                    Lcd_Write_Char@y 0076  
                         ??_strcat 0074                           ??_strcmp 0075  
                 write_RTC@minutes 0075                        __pbssCOMMON 0078  
                        ___latbits 0002                      __pcstackBANK0 0047  
                    __pcstackBANK1 00A0                __size_of_manual_pwm 001F  
                __size_of_get_hall 0023                           ?_Lcd_Cmd 0070  
                __size_of_get_temp 00A5                  __size_of_get_time 0089  
                      sprintf@flag 0059                        sprintf@prec 005A  
                 _I2C_Master_Start 15F8                   _I2C_Master_Write 160D  
                 ___lwdiv@dividend 0075                   ??_Lcd_Set_Cursor 0047  
                  get_temp@decimal 0062                           ?___aldiv 0047  
                         ?___awdiv 0073                           ?___awmod 0073  
                         ?___lldiv 0047                           ?___lwdiv 0073  
                         ?___lwmod 004A                   ??_Lcd_Shift_Left 0077  
                      ??_UART_Init 0059                           ?_get_PIR 0070  
                         ?_get_day 0070                    get_temp@tempLSB 0067  
                  get_temp@tempMSB 0065                      _UART_TX_Empty 15F2  
                 ___lwdiv@quotient 0048                           ?_sprintf 0050  
                       UART_Init@x 0074                     __size_of_setup 0056  
                  ___aldiv@divisor 0047                  interrupt_function 0004  
                  ___aldiv@counter 004F            __end_of_Lcd_Shift_Right 1648  
                        clear_ram0 1615                          _passwordu 0020  
                        _open_door 16A8                           Lcd_Cmd@a 0076  
                        _seguridad 0029                        ??_Lcd_Clear 0077  
                UART_Init@baudrate 0055                        __stringbase 0712  
                   ?_UART_TX_Empty 0070                   ??_Lcd_Write_Char 0074  
                     ??_close_door 0075                           _Lcd_Init 0C1D  
                         _Lcd_Port 1659                          _write_RTC 09D4  
              I2C_Master_Read@temp 0047              __end_of_initOscilador 0B0C  
         __end_of_Lcd_Write_String 09D4                   __size_of_Lcd_Cmd 001A  
                       ?_open_door 0070                       ??_manual_pwm 0070  
               __end_of_close_door 16A8                   __size_of___aldiv 008F  
__size_of_I2C_Master_RepeatedStart 0007                   __size_of___awdiv 005B  
                 __size_of___awmod 004D          ?_I2C_Master_RepeatedStart 0070  
                 __size_of___lldiv 0060                   __size_of___lwdiv 003E  
                 __size_of___lwmod 0034                 __end_of__stringtab 0712  
                 __size_of_get_PIR 0023                   __size_of_get_day 003A  
                       sprintf@val 005B                    _I2C_Master_Init 08AA  
                  _I2C_Master_Read 176E                    _I2C_Master_Wait 087D  
                       strcat@from 0073                    _I2C_Master_Stop 15FF  
                  ___lwdiv@divisor 0073                    ___lwdiv@counter 0047  
                         __ptext10 16A8                           __ptext11 174B  
                         __ptext20 091B                           __ptext12 0C7D  
                         __ptext21 1606                           __ptext13 0D95  
                         __ptext30 0A1A                           __ptext22 1705  
                         __ptext14 0886                           __ptext31 0B62  
                         __ptext23 16E2                           __ptext15 0F12  
                         __ptext40 1673                           __ptext32 161D  
                         __ptext24 176E                           __ptext16 17CC  
                         __ptext41 1659                           __ptext33 15F2  
                         __ptext25 168D                           __ptext17 0955  
                         __ptext42 16C3                           __ptext34 0993  
                         __ptext26 160D                           __ptext18 1648  
                         __ptext35 08E2                           __ptext27 15FF  
                         __ptext19 1728                           __ptext36 163D  
                         __ptext28 15F8                           __ptext37 1632  
                         __ptext29 087D                           __ptext38 0A67  
                         __ptext39 1627                         ?_write_RTC 0075  
                __CFG_BOR4V$BOR40V 0000                           _get_hall 1728  
                         _get_temp 0D95                           _get_time 0C7D  
                 __size_of_sprintf 00EE                 __end_of_manual_pwm 16E2  
                    __size_of_main 06C1                   ?_Lcd_Shift_Right 0070  
                         get_IR@IR 0049                           _password 0068  
                         get_day@d 0049                    ??_UART_TX_Empty 0073  
         __end_of_I2C_Master_Start 15FF           __end_of_I2C_Master_Write 1615  
                       _INTCONbits 000B                 Lcd_Write_Char@temp 0075  
                         intlevel1 0000                          sprintf@ap 0058  
                        sprintf@sp 005D                   ___lwmod@dividend 004C  
                 ___lldiv@dividend 004B                        ??_open_door 0075  
                        stringcode 070A                         _OSCCONbits 008F  
          __end_of_I2C_Master_Init 08E2            __end_of_I2C_Master_Read 179C  
          __end_of_I2C_Master_Wait 0886            __end_of_I2C_Master_Stop 1606  
               Lcd_Set_Cursor@temp 004C                      write_RTC@hour 0077  
                         sprintf@c 005E                           sprintf@f 0050  
                         strcat@cp 0076                           strcat@to 0075  
                         strcmp@s1 0048                           strcmp@s2 0073  
                 ___lldiv@quotient 004F                  I2C_Master_Write@d 0073  
                  ___lwmod@divisor 004A                    ___lwmod@counter 004F  
                 get_tripwire@trip 0049                           stringtab 0700  
                     ___aldiv@sign 0050                         _UART_Write 161D  
                      _SSPCON2bits 0091                        ??_write_RTC 0047  
                       _SSPCONbits 0014  

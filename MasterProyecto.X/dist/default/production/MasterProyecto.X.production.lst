

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Mar 09 19:42:39 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	psect	text29,local,class=CODE,merge=1,delta=2
    41                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text32,local,class=CODE,merge=1,delta=2
    44                           	psect	text33,local,class=CODE,merge=1,delta=2
    45                           	psect	text34,local,class=CODE,merge=1,delta=2
    46                           	psect	text35,local,class=CODE,merge=1,delta=2
    47                           	psect	text36,local,class=CODE,merge=1,delta=2
    48                           	psect	text37,local,class=CODE,merge=1,delta=2
    49                           	psect	text38,local,class=CODE,merge=1,delta=2
    50                           	psect	text39,local,class=CODE,merge=1,delta=2
    51                           	psect	text40,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	dabs	1,0x7E,2
    54  0000                     
    55                           ; Version 2.05
    56                           ; Generated 20/12/2018 GMT
    57                           ; 
    58                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC16F887 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  0007                     	;# 
    97  0008                     	;# 
    98  0009                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000D                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0013                     	;# 
   110  0014                     	;# 
   111  0015                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001D                     	;# 
   122  001E                     	;# 
   123  001F                     	;# 
   124  0081                     	;# 
   125  0085                     	;# 
   126  0086                     	;# 
   127  0087                     	;# 
   128  0088                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  008F                     	;# 
   134  0090                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0093                     	;# 
   139  0093                     	;# 
   140  0094                     	;# 
   141  0095                     	;# 
   142  0096                     	;# 
   143  0097                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009A                     	;# 
   147  009B                     	;# 
   148  009C                     	;# 
   149  009D                     	;# 
   150  009E                     	;# 
   151  009F                     	;# 
   152  0105                     	;# 
   153  0107                     	;# 
   154  0108                     	;# 
   155  0109                     	;# 
   156  010C                     	;# 
   157  010C                     	;# 
   158  010D                     	;# 
   159  010E                     	;# 
   160  010F                     	;# 
   161  0185                     	;# 
   162  0187                     	;# 
   163  0188                     	;# 
   164  0189                     	;# 
   165  018C                     	;# 
   166  018D                     	;# 
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  000E                     	;# 
   183  000F                     	;# 
   184  0010                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0013                     	;# 
   188  0014                     	;# 
   189  0015                     	;# 
   190  0015                     	;# 
   191  0016                     	;# 
   192  0017                     	;# 
   193  0018                     	;# 
   194  0019                     	;# 
   195  001A                     	;# 
   196  001B                     	;# 
   197  001B                     	;# 
   198  001C                     	;# 
   199  001D                     	;# 
   200  001E                     	;# 
   201  001F                     	;# 
   202  0081                     	;# 
   203  0085                     	;# 
   204  0086                     	;# 
   205  0087                     	;# 
   206  0088                     	;# 
   207  0089                     	;# 
   208  008C                     	;# 
   209  008D                     	;# 
   210  008E                     	;# 
   211  008F                     	;# 
   212  0090                     	;# 
   213  0091                     	;# 
   214  0092                     	;# 
   215  0093                     	;# 
   216  0093                     	;# 
   217  0093                     	;# 
   218  0094                     	;# 
   219  0095                     	;# 
   220  0096                     	;# 
   221  0097                     	;# 
   222  0098                     	;# 
   223  0099                     	;# 
   224  009A                     	;# 
   225  009B                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  009F                     	;# 
   230  0105                     	;# 
   231  0107                     	;# 
   232  0108                     	;# 
   233  0109                     	;# 
   234  010C                     	;# 
   235  010C                     	;# 
   236  010D                     	;# 
   237  010E                     	;# 
   238  010F                     	;# 
   239  0185                     	;# 
   240  0187                     	;# 
   241  0188                     	;# 
   242  0189                     	;# 
   243  018C                     	;# 
   244  018D                     	;# 
   245                           
   246                           	psect	strings
   247  0500                     __pstrings:	
   248  0500                     stringtab:	
   249  0500                     __stringtab:	
   250                           
   251                           ;	String table - string pointers are 1 byte each
   252  0500  1BFF               	btfsc	btemp+1,7
   253  0501  2D0A               	ljmp	stringcode
   254  0502  1383               	bcf	3,7
   255  0503  187F               	btfsc	btemp+1,0
   256  0504  1783               	bsf	3,7
   257  0505  0800               	movf	0,w
   258  0506  0A84               	incf	4,f
   259  0507  1903               	skipnz
   260  0508  0AFF               	incf	btemp+1,f
   261  0509  0008               	return
   262  050A                     stringcode:	
   263  050A                     stringdir:	
   264  050A  3005               	movlw	high stringdir
   265  050B  008A               	movwf	10
   266  050C  0804               	movf	4,w
   267  050D  0A84               	incf	4,f
   268  050E  0782               	addwf	2,f
   269  050F                     __stringbase:	
   270  050F  3400               	retlw	0
   271  0510                     __end_of__stringtab:	
   272  0510                     _dpowers:	
   273  0510  3401               	retlw	1
   274  0511  3400               	retlw	0
   275  0512  340A               	retlw	10
   276  0513  3400               	retlw	0
   277  0514  3464               	retlw	100
   278  0515  3400               	retlw	0
   279  0516  34E8               	retlw	232
   280  0517  3403               	retlw	3
   281  0518  3410               	retlw	16
   282  0519  3427               	retlw	39
   283  051A                     __end_of_dpowers:	
   284  0009                     _PORTE	set	9
   285  0007                     _PORTC	set	7
   286  0005                     _PORTA	set	5
   287  0006                     _PORTB	set	6
   288  0007                     _PORTCbits	set	7
   289  0018                     _RCSTAbits	set	24
   290  0014                     _SSPCONbits	set	20
   291  0009                     _PORTEbits	set	9
   292  0008                     _PORTDbits	set	8
   293  0001                     _TMR0	set	1
   294  0005                     _PORTAbits	set	5
   295  000B                     _INTCONbits	set	11
   296  0019                     _TXREG	set	25
   297  001A                     _RCREG	set	26
   298  0006                     _PORTBbits	set	6
   299  0013                     _SSPBUF	set	19
   300  0014                     _SSPCON	set	20
   301  0065                     _RCIF	set	101
   302  00C4                     _CREN	set	196
   303  00C7                     _SPEN	set	199
   304  0063                     _SSPIF	set	99
   305  005E                     _PEIE	set	94
   306  005F                     _GIE	set	95
   307  0081                     _OPTION_REGbits	set	129
   308  0089                     _TRISE	set	137
   309  0087                     _TRISC	set	135
   310  0088                     _TRISD	set	136
   311  0085                     _TRISA	set	133
   312  0086                     _TRISB	set	134
   313  0099                     _SPBRG	set	153
   314  008F                     _OSCCONbits	set	143
   315  0091                     _SSPCON2bits	set	145
   316  0087                     _TRISCbits	set	135
   317  0094                     _SSPSTAT	set	148
   318  0093                     _SSPADD	set	147
   319  0091                     _SSPCON2	set	145
   320  04C1                     _TRMT	set	1217
   321  04C5                     _TXEN	set	1221
   322  043E                     _TRISC6	set	1086
   323  043F                     _TRISC7	set	1087
   324  04C4                     _SYNC	set	1220
   325  04C2                     _BRGH	set	1218
   326  0463                     _SSPIE	set	1123
   327  043C                     _TRISC4	set	1084
   328  043B                     _TRISC3	set	1083
   329  048B                     _RCEN	set	1163
   330  0188                     _ANSEL	set	392
   331  0189                     _ANSELH	set	393
   332  051A                     STR_1:	
   333  051A  3449               	retlw	73	;'I'
   334  051B  346E               	retlw	110	;'n'
   335  051C  3469               	retlw	105	;'i'
   336  051D  3463               	retlw	99	;'c'
   337  051E  3469               	retlw	105	;'i'
   338  051F  3461               	retlw	97	;'a'
   339  0520  346E               	retlw	110	;'n'
   340  0521  3464               	retlw	100	;'d'
   341  0522  346F               	retlw	111	;'o'
   342  0523  3420               	retlw	32	;' '
   343  0524  3453               	retlw	83	;'S'
   344  0525  3469               	retlw	105	;'i'
   345  0526  3473               	retlw	115	;'s'
   346  0527  3474               	retlw	116	;'t'
   347  0528  3465               	retlw	101	;'e'
   348  0529  346D               	retlw	109	;'m'
   349  052A  3461               	retlw	97	;'a'
   350  052B  3400               	retlw	0
   351  052C                     STR_2:	
   352  052C  3464               	retlw	100	;'d'
   353  052D  3465               	retlw	101	;'e'
   354  052E  3420               	retlw	32	;' '
   355  052F  3473               	retlw	115	;'s'
   356  0530  3465               	retlw	101	;'e'
   357  0531  3467               	retlw	103	;'g'
   358  0532  3475               	retlw	117	;'u'
   359  0533  3472               	retlw	114	;'r'
   360  0534  3469               	retlw	105	;'i'
   361  0535  3464               	retlw	100	;'d'
   362  0536  3461               	retlw	97	;'a'
   363  0537  3464               	retlw	100	;'d'
   364  0538  3400               	retlw	0
   365  0539                     STR_14:	
   366  0539  3444               	retlw	68	;'D'
   367  053A  346F               	retlw	111	;'o'
   368  053B  346F               	retlw	111	;'o'
   369  053C  3472               	retlw	114	;'r'
   370  053D  3420               	retlw	32	;' '
   371  053E  344F               	retlw	79	;'O'
   372  053F  3450               	retlw	80	;'P'
   373  0540  3445               	retlw	69	;'E'
   374  0541  344E               	retlw	78	;'N'
   375  0542  3420               	retlw	32	;' '
   376  0543  3420               	retlw	32	;' '
   377  0544  3400               	retlw	0
   378  0545                     STR_15:	
   379  0545  3444               	retlw	68	;'D'
   380  0546  346F               	retlw	111	;'o'
   381  0547  346F               	retlw	111	;'o'
   382  0548  3472               	retlw	114	;'r'
   383  0549  3420               	retlw	32	;' '
   384  054A  3443               	retlw	67	;'C'
   385  054B  344C               	retlw	76	;'L'
   386  054C  344F               	retlw	79	;'O'
   387  054D  3453               	retlw	83	;'S'
   388  054E  3445               	retlw	69	;'E'
   389  054F  3444               	retlw	68	;'D'
   390  0550  3400               	retlw	0
   391  0551                     STR_10:	
   392  0551  3420               	retlw	32	;' '
   393  0552  3420               	retlw	32	;' '
   394  0553  3420               	retlw	32	;' '
   395  0554  3420               	retlw	32	;' '
   396  0555  3420               	retlw	32	;' '
   397  0556  3420               	retlw	32	;' '
   398  0557  3420               	retlw	32	;' '
   399  0558  3420               	retlw	32	;' '
   400  0559  3420               	retlw	32	;' '
   401  055A  3400               	retlw	0
   402  055B                     STR_3:	
   403  055B  344C               	retlw	76	;'L'
   404  055C  3455               	retlw	85	;'U'
   405  055D  344E               	retlw	78	;'N'
   406  055E  3445               	retlw	69	;'E'
   407  055F  3453               	retlw	83	;'S'
   408  0560  3420               	retlw	32	;' '
   409  0561  3420               	retlw	32	;' '
   410  0562  3420               	retlw	32	;' '
   411  0563  3420               	retlw	32	;' '
   412  0564  3400               	retlw	0
   413  0565                     STR_8:	
   414  0565  3453               	retlw	83	;'S'
   415  0566  3441               	retlw	65	;'A'
   416  0567  3442               	retlw	66	;'B'
   417  0568  3441               	retlw	65	;'A'
   418  0569  3444               	retlw	68	;'D'
   419  056A  344F               	retlw	79	;'O'
   420  056B  3420               	retlw	32	;' '
   421  056C  3420               	retlw	32	;' '
   422  056D  3420               	retlw	32	;' '
   423  056E  3400               	retlw	0
   424  056F                     STR_4:	
   425  056F  344D               	retlw	77	;'M'
   426  0570  3441               	retlw	65	;'A'
   427  0571  3452               	retlw	82	;'R'
   428  0572  3454               	retlw	84	;'T'
   429  0573  3445               	retlw	69	;'E'
   430  0574  3453               	retlw	83	;'S'
   431  0575  3420               	retlw	32	;' '
   432  0576  3420               	retlw	32	;' '
   433  0577  3420               	retlw	32	;' '
   434  0578  3400               	retlw	0
   435  0579                     STR_6:	
   436  0579  344A               	retlw	74	;'J'
   437  057A  3455               	retlw	85	;'U'
   438  057B  3445               	retlw	69	;'E'
   439  057C  3456               	retlw	86	;'V'
   440  057D  3445               	retlw	69	;'E'
   441  057E  3453               	retlw	83	;'S'
   442  057F  3420               	retlw	32	;' '
   443  0580  3420               	retlw	32	;' '
   444  0581  3420               	retlw	32	;' '
   445  0582  3400               	retlw	0
   446  0583                     STR_9:	
   447  0583  3444               	retlw	68	;'D'
   448  0584  344F               	retlw	79	;'O'
   449  0585  344D               	retlw	77	;'M'
   450  0586  3449               	retlw	73	;'I'
   451  0587  344E               	retlw	78	;'N'
   452  0588  3447               	retlw	71	;'G'
   453  0589  344F               	retlw	79	;'O'
   454  058A  3420               	retlw	32	;' '
   455  058B  3420               	retlw	32	;' '
   456  058C  3400               	retlw	0
   457  058D                     STR_7:	
   458  058D  3456               	retlw	86	;'V'
   459  058E  3449               	retlw	73	;'I'
   460  058F  3445               	retlw	69	;'E'
   461  0590  3452               	retlw	82	;'R'
   462  0591  344E               	retlw	78	;'N'
   463  0592  3445               	retlw	69	;'E'
   464  0593  3453               	retlw	83	;'S'
   465  0594  3420               	retlw	32	;' '
   466  0595  3420               	retlw	32	;' '
   467  0596  3400               	retlw	0
   468  0597                     STR_5:	
   469  0597  344D               	retlw	77	;'M'
   470  0598  3449               	retlw	73	;'I'
   471  0599  3445               	retlw	69	;'E'
   472  059A  3452               	retlw	82	;'R'
   473  059B  3443               	retlw	67	;'C'
   474  059C  344F               	retlw	79	;'O'
   475  059D  344C               	retlw	76	;'L'
   476  059E  3445               	retlw	69	;'E'
   477  059F  3453               	retlw	83	;'S'
   478  05A0  3400               	retlw	0
   479  05A1                     STR_18:	
   480  05A1  3442               	retlw	66	;'B'
   481  05A2  3461               	retlw	97	;'a'
   482  05A3  346E               	retlw	110	;'n'
   483  05A4  346B               	retlw	107	;'k'
   484  05A5  3420               	retlw	32	;' '
   485  05A6  344F               	retlw	79	;'O'
   486  05A7  344E               	retlw	78	;'N'
   487  05A8  3420               	retlw	32	;' '
   488  05A9  3400               	retlw	0
   489  05AA                     STR_16:	
   490  05AA  3454               	retlw	84	;'T'
   491  05AB  3472               	retlw	114	;'r'
   492  05AC  3469               	retlw	105	;'i'
   493  05AD  3470               	retlw	112	;'p'
   494  05AE  3420               	retlw	32	;' '
   495  05AF  344F               	retlw	79	;'O'
   496  05B0  344E               	retlw	78	;'N'
   497  05B1  3420               	retlw	32	;' '
   498  05B2  3400               	retlw	0
   499  05B3                     STR_19:	
   500  05B3  3442               	retlw	66	;'B'
   501  05B4  3441               	retlw	65	;'A'
   502  05B5  344E               	retlw	78	;'N'
   503  05B6  344B               	retlw	75	;'K'
   504  05B7  3420               	retlw	32	;' '
   505  05B8  344F               	retlw	79	;'O'
   506  05B9  3446               	retlw	70	;'F'
   507  05BA  3446               	retlw	70	;'F'
   508  05BB  3400               	retlw	0
   509  05BC                     STR_17:	
   510  05BC  3454               	retlw	84	;'T'
   511  05BD  3472               	retlw	114	;'r'
   512  05BE  3469               	retlw	105	;'i'
   513  05BF  3470               	retlw	112	;'p'
   514  05C0  3420               	retlw	32	;' '
   515  05C1  344F               	retlw	79	;'O'
   516  05C2  3446               	retlw	70	;'F'
   517  05C3  3446               	retlw	70	;'F'
   518  05C4  3400               	retlw	0
   519  05C5                     STR_20:	
   520  05C5  3450               	retlw	80	;'P'
   521  05C6  3449               	retlw	73	;'I'
   522  05C7  3452               	retlw	82	;'R'
   523  05C8  3420               	retlw	32	;' '
   524  05C9  344F               	retlw	79	;'O'
   525  05CA  344E               	retlw	78	;'N'
   526  05CB  3420               	retlw	32	;' '
   527  05CC  3400               	retlw	0
   528  05CD                     STR_21:	
   529  05CD  3450               	retlw	80	;'P'
   530  05CE  3449               	retlw	73	;'I'
   531  05CF  3452               	retlw	82	;'R'
   532  05D0  3420               	retlw	32	;' '
   533  05D1  344F               	retlw	79	;'O'
   534  05D2  3446               	retlw	70	;'F'
   535  05D3  3446               	retlw	70	;'F'
   536  05D4  3400               	retlw	0
   537  05D5                     STR_24:	
   538  05D5  3448               	retlw	72	;'H'
   539  05D6  344F               	retlw	79	;'O'
   540  05D7  3452               	retlw	82	;'R'
   541  05D8  3441               	retlw	65	;'A'
   542  05D9  343A               	retlw	58	;':'
   543  05DA  3420               	retlw	32	;' '
   544  05DB  3400               	retlw	0
   545  05DC                     STR_25:	
   546  05DC  3444               	retlw	68	;'D'
   547  05DD  3449               	retlw	73	;'I'
   548  05DE  3441               	retlw	65	;'A'
   549  05DF  343A               	retlw	58	;':'
   550  05E0  3420               	retlw	32	;' '
   551  05E1  3400               	retlw	0
   552  05E2                     STR_13:	
   553  05E2  3432               	retlw	50	;'2'
   554  05E3  3431               	retlw	49	;'1'
   555  05E4  343A               	retlw	58	;':'
   556  05E5  3430               	retlw	48	;'0'
   557  05E6  3430               	retlw	48	;'0'
   558  05E7  3400               	retlw	0
   559  05E8                     STR_12:	
   560  05E8  3432               	retlw	50	;'2'
   561  05E9  3432               	retlw	50	;'2'
   562  05EA  343A               	retlw	58	;':'
   563  05EB  3430               	retlw	48	;'0'
   564  05EC  3430               	retlw	48	;'0'
   565  05ED  3400               	retlw	0
   566  05EE                     STR_11:	
   567  05EE  3432               	retlw	50	;'2'
   568  05EF  3433               	retlw	51	;'3'
   569  05F0  342E               	retlw	46	;'.'
   570  05F1  3435               	retlw	53	;'5'
   571  05F2  3430               	retlw	48	;'0'
   572  05F3  3400               	retlw	0
   573  05F4                     STR_27:	
   574  05F4  342E               	retlw	46	;'.'
   575  05F5  3425               	retlw	37	;'%'
   576  05F6  3464               	retlw	100	;'d'
   577  05F7  3430               	retlw	48	;'0'
   578  05F8  3400               	retlw	0
   579  05F9                     STR_28:	
   580  05F9  342E               	retlw	46	;'.'
   581  05FA  3425               	retlw	37	;'%'
   582  05FB  3464               	retlw	100	;'d'
   583  05FC  3400               	retlw	0
   584  05C6                     
   585                           ; #config settings
   586  0000                     
   587                           	psect	cinit
   588  000F                     start_initialization:	
   589  000F                     __initialization:	
   590                           
   591                           ; Clear objects allocated to COMMON
   592  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   593  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   594  0011  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   595                           
   596                           ; Clear objects allocated to BANK0
   597  0012  1383               	bcf	3,7	;select IRP bank0
   598  0013  3045               	movlw	low __pbssBANK0
   599  0014  0084               	movwf	4
   600  0015  3066               	movlw	low (__pbssBANK0+33)
   601  0016  120A  158A  2131   	fcall	clear_ram0
   602  0019                     end_of_initialization:	
   603                           ;End of C runtime variable initialization code
   604                           
   605  0019                     __end_of__initialization:	
   606  0019  0183               	clrf	3
   607  001A  120A  118A  281D   	ljmp	_main	;jump to C main() function
   608                           
   609                           	psect	bssCOMMON
   610  0078                     __pbssCOMMON:	
   611  0078                     _day1:	
   612  0078                     	ds	1
   613  0079                     _state:	
   614  0079                     	ds	1
   615  007A                     _door:	
   616  007A                     	ds	1
   617                           
   618                           	psect	bssBANK0
   619  0045                     __pbssBANK0:	
   620  0045                     _k:	
   621  0045                     	ds	2
   622  0047                     _newmin:	
   623  0047                     	ds	1
   624  0048                     _newhour:	
   625  0048                     	ds	1
   626  0049                     _seguridad:	
   627  0049                     	ds	1
   628  004A                     _min:	
   629  004A                     	ds	1
   630  004B                     _hour:	
   631  004B                     	ds	1
   632  004C                     _val:	
   633  004C                     	ds	1
   634  004D                     _cont:	
   635  004D                     	ds	1
   636  004E                     _bank:	
   637  004E                     	ds	1
   638  004F                     _alarm:	
   639  004F                     	ds	1
   640  0050                     _change3:	
   641  0050                     	ds	1
   642  0051                     _change2:	
   643  0051                     	ds	1
   644  0052                     _change1:	
   645  0052                     	ds	1
   646  0053                     _change:	
   647  0053                     	ds	1
   648  0054                     _j:	
   649  0054                     	ds	1
   650  0055                     _i:	
   651  0055                     	ds	1
   652  0056                     _IR:	
   653  0056                     	ds	1
   654  0057                     _PIR:	
   655  0057                     	ds	1
   656  0058                     _trip:	
   657  0058                     	ds	1
   658  0059                     _day2:	
   659  0059                     	ds	1
   660  005A                     _temp:	
   661  005A                     	ds	6
   662  0060                     _time:	
   663  0060                     	ds	6
   664                           
   665                           	psect	clrtext
   666  0931                     clear_ram0:	
   667                           ;	Called with FSR containing the base address, and
   668                           ;	W with the last address+1
   669                           
   670  0931  0064               	clrwdt	;clear the watchdog before getting into this loop
   671  0932                     clrloop0:	
   672  0932  0180               	clrf	0	;clear RAM location pointed to by FSR
   673  0933  0A84               	incf	4,f	;increment pointer
   674  0934  0604               	xorwf	4,w	;XOR with final address
   675  0935  1903               	btfsc	3,2	;have we reached the end yet?
   676  0936  3400               	retlw	0	;all done for this memory range, return
   677  0937  0604               	xorwf	4,w	;XOR again to restore value
   678  0938  2932               	goto	clrloop0	;do the next byte
   679                           
   680                           	psect	cstackCOMMON
   681  0070                     __pcstackCOMMON:	
   682  0070                     ?_setup:	
   683  0070                     ?_get_temp:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0070                     ?_get_hall:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0070                     ?_get_tripwire:	
   690                           ; 1 bytes @ 0x0
   691                           
   692  0070                     ?_get_PIR:	
   693                           ; 1 bytes @ 0x0
   694                           
   695  0070                     ?_get_IR:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0070                     ?_get_time:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0070                     ?_get_day:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0070                     ?_open_door:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0070                     ?_close_door:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0070                     ?_I2C_Master_Wait:	
   711                           ; 1 bytes @ 0x0
   712                           
   713  0070                     ?_I2C_Master_Start:	
   714                           ; 1 bytes @ 0x0
   715                           
   716  0070                     ?_I2C_Master_RepeatedStart:	
   717                           ; 1 bytes @ 0x0
   718                           
   719  0070                     ?_I2C_Master_Stop:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0070                     ?_Lcd_Port:	
   723                           ; 1 bytes @ 0x0
   724                           
   725  0070                     ?_Lcd_Cmd:	
   726                           ; 1 bytes @ 0x0
   727                           
   728  0070                     ?_Lcd_Clear:	
   729                           ; 1 bytes @ 0x0
   730                           
   731  0070                     ?_Lcd_Init:	
   732                           ; 1 bytes @ 0x0
   733                           
   734  0070                     ?_Lcd_Write_Char:	
   735                           ; 1 bytes @ 0x0
   736                           
   737  0070                     ?_initOscilador:	
   738                           ; 1 bytes @ 0x0
   739                           
   740  0070                     ?_UART_TX_Empty:	
   741                           ; 1 bytes @ 0x0
   742                           
   743  0070                     ?_UART_Write:	
   744                           ; 1 bytes @ 0x0
   745                           
   746  0070                     ?_manual_pwm:	
   747                           ; 1 bytes @ 0x0
   748                           
   749  0070                     ??_manual_pwm:	
   750                           ; 1 bytes @ 0x0
   751                           
   752  0070                     ?_main:	
   753                           ; 1 bytes @ 0x0
   754                           
   755                           
   756                           ; 1 bytes @ 0x0
   757  0070                     	ds	3
   758  0073                     ?_strcat:	
   759  0073                     ??_I2C_Master_Wait:	
   760                           ; 1 bytes @ 0x3
   761                           
   762  0073                     ??_I2C_Master_Start:	
   763                           ; 1 bytes @ 0x3
   764                           
   765  0073                     ??_I2C_Master_RepeatedStart:	
   766                           ; 1 bytes @ 0x3
   767                           
   768  0073                     ??_I2C_Master_Stop:	
   769                           ; 1 bytes @ 0x3
   770                           
   771  0073                     ?_I2C_Master_Write:	
   772                           ; 1 bytes @ 0x3
   773                           
   774  0073                     ??_Lcd_Port:	
   775                           ; 1 bytes @ 0x3
   776                           
   777  0073                     ??_initOscilador:	
   778                           ; 1 bytes @ 0x3
   779                           
   780  0073                     ??_UART_TX_Empty:	
   781                           ; 1 bytes @ 0x3
   782                           
   783  0073                     ??_UART_Write:	
   784                           ; 1 bytes @ 0x3
   785                           
   786  0073                     ?___bmul:	
   787                           ; 1 bytes @ 0x3
   788                           
   789  0073                     ??___lldiv:	
   790                           ; 1 bytes @ 0x3
   791                           
   792  0073                     ??___aldiv:	
   793                           ; 1 bytes @ 0x3
   794                           
   795  0073                     ?_strcmp:	
   796                           ; 1 bytes @ 0x3
   797                           
   798  0073                     ?_I2C_Master_Read:	
   799                           ; 2 bytes @ 0x3
   800                           
   801  0073                     ?___awdiv:	
   802                           ; 2 bytes @ 0x3
   803                           
   804  0073                     ?___awmod:	
   805                           ; 2 bytes @ 0x3
   806                           
   807  0073                     ?___lwdiv:	
   808                           ; 2 bytes @ 0x3
   809                           
   810  0073                     Lcd_Port@a:	
   811                           ; 2 bytes @ 0x3
   812                           
   813  0073                     UART_Write@data:	
   814                           ; 1 bytes @ 0x3
   815                           
   816  0073                     ___bmul@multiplicand:	
   817                           ; 1 bytes @ 0x3
   818                           
   819  0073                     strcat@from:	
   820                           ; 1 bytes @ 0x3
   821                           
   822  0073                     strcmp@s2:	
   823                           ; 1 bytes @ 0x3
   824                           
   825  0073                     I2C_Master_Write@d:	
   826                           ; 1 bytes @ 0x3
   827                           
   828  0073                     I2C_Master_Read@a:	
   829                           ; 2 bytes @ 0x3
   830                           
   831  0073                     ___awdiv@divisor:	
   832                           ; 2 bytes @ 0x3
   833                           
   834  0073                     ___awmod@divisor:	
   835                           ; 2 bytes @ 0x3
   836                           
   837  0073                     ___lwdiv@divisor:	
   838                           ; 2 bytes @ 0x3
   839                           
   840                           
   841                           ; 2 bytes @ 0x3
   842  0073                     	ds	1
   843  0074                     ??_strcat:	
   844  0074                     ??_I2C_Master_Init:	
   845                           ; 1 bytes @ 0x4
   846                           
   847  0074                     ??_Lcd_Cmd:	
   848                           ; 1 bytes @ 0x4
   849                           
   850  0074                     ??_Lcd_Write_Char:	
   851                           ; 1 bytes @ 0x4
   852                           
   853  0074                     ??___bmul:	
   854                           ; 1 bytes @ 0x4
   855                           
   856  0074                     UART_Init@x:	
   857                           ; 1 bytes @ 0x4
   858                           
   859                           
   860                           ; 2 bytes @ 0x4
   861  0074                     	ds	1
   862  0075                     ??_open_door:	
   863  0075                     ??_close_door:	
   864                           ; 1 bytes @ 0x5
   865                           
   866  0075                     ??_strcmp:	
   867                           ; 1 bytes @ 0x5
   868                           
   869  0075                     ?_write_RTC:	
   870                           ; 1 bytes @ 0x5
   871                           
   872  0075                     ??_I2C_Master_Write:	
   873                           ; 1 bytes @ 0x5
   874                           
   875  0075                     ??_I2C_Master_Read:	
   876                           ; 1 bytes @ 0x5
   877                           
   878  0075                     Lcd_Write_Char@temp:	
   879                           ; 1 bytes @ 0x5
   880                           
   881  0075                     initOscilador@option:	
   882                           ; 1 bytes @ 0x5
   883                           
   884  0075                     write_RTC@minutes:	
   885                           ; 1 bytes @ 0x5
   886                           
   887  0075                     ___bmul@product:	
   888                           ; 1 bytes @ 0x5
   889                           
   890  0075                     strcat@to:	
   891                           ; 1 bytes @ 0x5
   892                           
   893  0075                     ___awdiv@dividend:	
   894                           ; 1 bytes @ 0x5
   895                           
   896  0075                     ___awmod@dividend:	
   897                           ; 2 bytes @ 0x5
   898                           
   899  0075                     ___lwdiv@dividend:	
   900                           ; 2 bytes @ 0x5
   901                           
   902                           
   903                           ; 2 bytes @ 0x5
   904  0075                     	ds	1
   905  0076                     Lcd_Cmd@a:	
   906  0076                     Lcd_Write_Char@y:	
   907                           ; 1 bytes @ 0x6
   908                           
   909  0076                     write_RTC@day:	
   910                           ; 1 bytes @ 0x6
   911                           
   912  0076                     ___bmul@multiplier:	
   913                           ; 1 bytes @ 0x6
   914                           
   915  0076                     strcat@cp:	
   916                           ; 1 bytes @ 0x6
   917                           
   918                           
   919                           ; 1 bytes @ 0x6
   920  0076                     	ds	1
   921  0077                     ??_get_hall:	
   922  0077                     ??_get_tripwire:	
   923                           ; 1 bytes @ 0x7
   924                           
   925  0077                     ??_get_PIR:	
   926                           ; 1 bytes @ 0x7
   927                           
   928  0077                     ??_get_IR:	
   929                           ; 1 bytes @ 0x7
   930                           
   931  0077                     ??_get_day:	
   932                           ; 1 bytes @ 0x7
   933                           
   934  0077                     ??_Lcd_Clear:	
   935                           ; 1 bytes @ 0x7
   936                           
   937  0077                     ?_Lcd_Set_Cursor:	
   938                           ; 1 bytes @ 0x7
   939                           
   940  0077                     ??___awdiv:	
   941                           ; 1 bytes @ 0x7
   942                           
   943  0077                     ??___awmod:	
   944                           ; 1 bytes @ 0x7
   945                           
   946  0077                     ??___lwdiv:	
   947                           ; 1 bytes @ 0x7
   948                           
   949  0077                     Lcd_Set_Cursor@b:	
   950                           ; 1 bytes @ 0x7
   951                           
   952  0077                     Lcd_Write_Char@a:	
   953                           ; 1 bytes @ 0x7
   954                           
   955  0077                     write_RTC@hour:	
   956                           ; 1 bytes @ 0x7
   957                           
   958                           
   959                           ; 1 bytes @ 0x7
   960  0077                     	ds	1
   961  0078                     ??_setup:	
   962                           
   963                           	psect	cstackBANK0
   964  0020                     __pcstackBANK0:	
   965                           ; 1 bytes @ 0x8
   966                           
   967  0020                     ??_write_RTC:	
   968  0020                     ??_Lcd_Set_Cursor:	
   969                           ; 1 bytes @ 0x0
   970                           
   971  0020                     ??_Lcd_Init:	
   972                           ; 1 bytes @ 0x0
   973                           
   974  0020                     ?_Lcd_Write_String:	
   975                           ; 1 bytes @ 0x0
   976                           
   977  0020                     ?___lldiv:	
   978                           ; 1 bytes @ 0x0
   979                           
   980  0020                     ?___aldiv:	
   981                           ; 4 bytes @ 0x0
   982                           
   983  0020                     ___awdiv@counter:	
   984                           ; 4 bytes @ 0x0
   985                           
   986  0020                     ___awmod@counter:	
   987                           ; 1 bytes @ 0x0
   988                           
   989  0020                     ___lwdiv@counter:	
   990                           ; 1 bytes @ 0x0
   991                           
   992  0020                     strcmp@r:	
   993                           ; 1 bytes @ 0x0
   994                           
   995  0020                     I2C_Master_Read@temp:	
   996                           ; 1 bytes @ 0x0
   997                           
   998  0020                     Lcd_Write_String@a:	
   999                           ; 2 bytes @ 0x0
  1000                           
  1001  0020                     ___lldiv@divisor:	
  1002                           ; 2 bytes @ 0x0
  1003                           
  1004  0020                     ___aldiv@divisor:	
  1005                           ; 4 bytes @ 0x0
  1006                           
  1007                           
  1008                           ; 4 bytes @ 0x0
  1009  0020                     	ds	1
  1010  0021                     ___awdiv@sign:	
  1011  0021                     ___awmod@sign:	
  1012                           ; 1 bytes @ 0x1
  1013                           
  1014  0021                     strcmp@s1:	
  1015                           ; 1 bytes @ 0x1
  1016                           
  1017  0021                     ___lwdiv@quotient:	
  1018                           ; 1 bytes @ 0x1
  1019                           
  1020                           
  1021                           ; 2 bytes @ 0x1
  1022  0021                     	ds	1
  1023  0022                     ??_get_time:	
  1024  0022                     ??_Lcd_Write_String:	
  1025                           ; 1 bytes @ 0x2
  1026                           
  1027  0022                     Lcd_Set_Cursor@a:	
  1028                           ; 1 bytes @ 0x2
  1029                           
  1030  0022                     get_day@d:	
  1031                           ; 1 bytes @ 0x2
  1032                           
  1033  0022                     get_hall@key:	
  1034                           ; 1 bytes @ 0x2
  1035                           
  1036  0022                     get_tripwire@trip:	
  1037                           ; 1 bytes @ 0x2
  1038                           
  1039  0022                     get_PIR@PIR:	
  1040                           ; 1 bytes @ 0x2
  1041                           
  1042  0022                     get_IR@IR:	
  1043                           ; 1 bytes @ 0x2
  1044                           
  1045  0022                     ___awdiv@quotient:	
  1046                           ; 1 bytes @ 0x2
  1047                           
  1048                           
  1049                           ; 2 bytes @ 0x2
  1050  0022                     	ds	1
  1051  0023                     ?___lwmod:	
  1052  0023                     Lcd_Set_Cursor@z:	
  1053                           ; 2 bytes @ 0x3
  1054                           
  1055  0023                     ___lwmod@divisor:	
  1056                           ; 1 bytes @ 0x3
  1057                           
  1058                           
  1059                           ; 2 bytes @ 0x3
  1060  0023                     	ds	1
  1061  0024                     Lcd_Set_Cursor@y:	
  1062  0024                     get_time@hour:	
  1063                           ; 1 bytes @ 0x4
  1064                           
  1065  0024                     ___lldiv@dividend:	
  1066                           ; 1 bytes @ 0x4
  1067                           
  1068  0024                     ___aldiv@dividend:	
  1069                           ; 4 bytes @ 0x4
  1070                           
  1071                           
  1072                           ; 4 bytes @ 0x4
  1073  0024                     	ds	1
  1074  0025                     Lcd_Set_Cursor@temp:	
  1075  0025                     get_time@min:	
  1076                           ; 1 bytes @ 0x5
  1077                           
  1078  0025                     Lcd_Write_String@i:	
  1079                           ; 1 bytes @ 0x5
  1080                           
  1081  0025                     ___lwmod@dividend:	
  1082                           ; 2 bytes @ 0x5
  1083                           
  1084                           
  1085                           ; 2 bytes @ 0x5
  1086  0025                     	ds	1
  1087  0026                     get_time@time_string:	
  1088                           
  1089                           ; 1 bytes @ 0x6
  1090  0026                     	ds	1
  1091  0027                     ??___lwmod:	
  1092                           
  1093                           ; 1 bytes @ 0x7
  1094  0027                     	ds	1
  1095  0028                     ___aldiv@counter:	
  1096  0028                     ___lwmod@counter:	
  1097                           ; 1 bytes @ 0x8
  1098                           
  1099  0028                     ___lldiv@quotient:	
  1100                           ; 1 bytes @ 0x8
  1101                           
  1102                           
  1103                           ; 4 bytes @ 0x8
  1104  0028                     	ds	1
  1105  0029                     ?_sprintf:	
  1106  0029                     sprintf@f:	
  1107                           ; 2 bytes @ 0x9
  1108                           
  1109  0029                     ___aldiv@sign:	
  1110                           ; 1 bytes @ 0x9
  1111                           
  1112                           
  1113                           ; 1 bytes @ 0x9
  1114  0029                     	ds	1
  1115  002A                     ___aldiv@quotient:	
  1116                           
  1117                           ; 4 bytes @ 0xA
  1118  002A                     	ds	2
  1119  002C                     ??_sprintf:	
  1120  002C                     ___lldiv@counter:	
  1121                           ; 1 bytes @ 0xC
  1122                           
  1123                           
  1124                           ; 1 bytes @ 0xC
  1125  002C                     	ds	1
  1126  002D                     ?_I2C_Master_Init:	
  1127  002D                     I2C_Master_Init@c:	
  1128                           ; 1 bytes @ 0xD
  1129                           
  1130                           
  1131                           ; 4 bytes @ 0xD
  1132  002D                     	ds	1
  1133  002E                     ?_UART_Init:	
  1134  002E                     UART_Init@baudrate:	
  1135                           ; 1 bytes @ 0xE
  1136                           
  1137                           
  1138                           ; 4 bytes @ 0xE
  1139  002E                     	ds	1
  1140  002F                     sprintf@ap:	
  1141                           
  1142                           ; 1 bytes @ 0xF
  1143  002F                     	ds	1
  1144  0030                     sprintf@flag:	
  1145                           
  1146                           ; 1 bytes @ 0x10
  1147  0030                     	ds	1
  1148  0031                     sprintf@prec:	
  1149                           
  1150                           ; 1 bytes @ 0x11
  1151  0031                     	ds	1
  1152  0032                     ??_UART_Init:	
  1153  0032                     sprintf@val:	
  1154                           ; 1 bytes @ 0x12
  1155                           
  1156                           
  1157                           ; 2 bytes @ 0x12
  1158  0032                     	ds	2
  1159  0034                     sprintf@sp:	
  1160                           
  1161                           ; 1 bytes @ 0x14
  1162  0034                     	ds	1
  1163  0035                     sprintf@c:	
  1164                           
  1165                           ; 1 bytes @ 0x15
  1166  0035                     	ds	1
  1167  0036                     ??_get_temp:	
  1168                           
  1169                           ; 1 bytes @ 0x16
  1170  0036                     	ds	3
  1171  0039                     get_temp@decimal:	
  1172                           
  1173                           ; 3 bytes @ 0x19
  1174  0039                     	ds	3
  1175  003C                     get_temp@tempMSB:	
  1176                           
  1177                           ; 1 bytes @ 0x1C
  1178  003C                     	ds	1
  1179  003D                     get_temp@temp_string:	
  1180                           
  1181                           ; 1 bytes @ 0x1D
  1182  003D                     	ds	1
  1183  003E                     get_temp@tempLSB:	
  1184                           
  1185                           ; 1 bytes @ 0x1E
  1186  003E                     	ds	1
  1187  003F                     ??_main:	
  1188                           
  1189                           ; 1 bytes @ 0x1F
  1190  003F                     	ds	6
  1191                           
  1192                           	psect	maintext
  1193  001D                     __pmaintext:	
  1194 ;;
  1195 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1196 ;;
  1197 ;; *************** function _main *****************
  1198 ;; Defined at:
  1199 ;;		line 78 in file "mainMaster.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;		None
  1202 ;; Auto vars:     Size  Location     Type
  1203 ;;		None
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      void 
  1206 ;; Registers used:
  1207 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1208 ;; Tracked objects:
  1209 ;;		On entry : B00/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1213 ;;      Params:         0       0       0       0       0
  1214 ;;      Locals:         0       0       0       0       0
  1215 ;;      Temps:          0       6       0       0       0
  1216 ;;      Totals:         0       6       0       0       0
  1217 ;;Total ram usage:        6 bytes
  1218 ;; Hardware stack levels required when called:    5
  1219 ;; This function calls:
  1220 ;;		_Lcd_Clear
  1221 ;;		_Lcd_Set_Cursor
  1222 ;;		_Lcd_Write_Char
  1223 ;;		_Lcd_Write_String
  1224 ;;		_UART_TX_Empty
  1225 ;;		_UART_Write
  1226 ;;		___awdiv
  1227 ;;		___awmod
  1228 ;;		___bmul
  1229 ;;		_close_door
  1230 ;;		_get_IR
  1231 ;;		_get_PIR
  1232 ;;		_get_day
  1233 ;;		_get_hall
  1234 ;;		_get_temp
  1235 ;;		_get_time
  1236 ;;		_get_tripwire
  1237 ;;		_open_door
  1238 ;;		_setup
  1239 ;;		_strcmp
  1240 ;;		_write_RTC
  1241 ;; This function is called by:
  1242 ;;		Startup code after reset
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           
  1247                           ;psect for function _main
  1248  001D                     _main:	
  1249                           
  1250                           ;mainMaster.c: 79:     setup();
  1251                           
  1252                           ;incstack = 0
  1253                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1254  001D  120A  158A  2530  120A  118A  	fcall	_setup
  1255                           
  1256                           ;mainMaster.c: 80:     state = 0;
  1257  0022  01F9               	clrf	_state
  1258                           
  1259                           ;mainMaster.c: 81:     seguridad = 0;
  1260  0023  1283               	bcf	3,5	;RP0=0, select bank0
  1261  0024  1303               	bcf	3,6	;RP1=0, select bank0
  1262  0025  01C9               	clrf	_seguridad
  1263                           
  1264                           ;mainMaster.c: 82:     Lcd_Clear();
  1265  0026  120A  158A  214C  120A  118A  	fcall	_Lcd_Clear
  1266                           
  1267                           ;mainMaster.c: 83:     PORTAbits.RA7 = 0;
  1268  002B  1283               	bcf	3,5	;RP0=0, select bank0
  1269  002C  1303               	bcf	3,6	;RP1=0, select bank0
  1270  002D  1385               	bcf	5,7	;volatile
  1271                           
  1272                           ;mainMaster.c: 84:     Lcd_Set_Cursor(1,1);
  1273  002E  01F7               	clrf	Lcd_Set_Cursor@b
  1274  002F  0AF7               	incf	Lcd_Set_Cursor@b,f
  1275  0030  3001               	movlw	1
  1276  0031  120A  118A  27AF  120A  118A  	fcall	_Lcd_Set_Cursor
  1277                           
  1278                           ;mainMaster.c: 85:     Lcd_Write_String("Iniciando Sistema");
  1279  0036  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1280  0037  1283               	bcf	3,5	;RP0=0, select bank0
  1281  0038  1303               	bcf	3,6	;RP1=0, select bank0
  1282  0039  00A0               	movwf	Lcd_Write_String@a
  1283  003A  3080               	movlw	128
  1284  003B  00A1               	movwf	Lcd_Write_String@a+1
  1285  003C  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  1286                           
  1287                           ;mainMaster.c: 86:     Lcd_Set_Cursor(2,1);
  1288  0041  01F7               	clrf	Lcd_Set_Cursor@b
  1289  0042  0AF7               	incf	Lcd_Set_Cursor@b,f
  1290  0043  3002               	movlw	2
  1291  0044  120A  118A  27AF  120A  118A  	fcall	_Lcd_Set_Cursor
  1292                           
  1293                           ;mainMaster.c: 87:     Lcd_Write_String("de seguridad");
  1294  0049  301D               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1295  004A  1283               	bcf	3,5	;RP0=0, select bank0
  1296  004B  1303               	bcf	3,6	;RP1=0, select bank0
  1297  004C  00A0               	movwf	Lcd_Write_String@a
  1298  004D  3080               	movlw	128
  1299  004E  00A1               	movwf	Lcd_Write_String@a+1
  1300  004F  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  1301                           
  1302                           ;mainMaster.c: 88:     _delay((unsigned long)((5000)*(8000000/4000.0)));
  1303  0054  3033               	movlw	51
  1304  0055  1283               	bcf	3,5	;RP0=0, select bank0
  1305  0056  1303               	bcf	3,6	;RP1=0, select bank0
  1306  0057  00C1               	movwf	??_main+2
  1307  0058  30BB               	movlw	187
  1308  0059  00C0               	movwf	??_main+1
  1309  005A  30DF               	movlw	223
  1310  005B  00BF               	movwf	??_main
  1311  005C                     u4057:	
  1312  005C  0BBF               	decfsz	??_main,f
  1313  005D  285C               	goto	u4057
  1314  005E  0BC0               	decfsz	??_main+1,f
  1315  005F  285C               	goto	u4057
  1316  0060  0BC1               	decfsz	??_main+2,f
  1317  0061  285C               	goto	u4057
  1318                           
  1319                           ;mainMaster.c: 89:     Lcd_Clear();
  1320  0062  120A  158A  214C  120A  118A  	fcall	_Lcd_Clear
  1321  0067                     l3615:	
  1322                           
  1323                           ;mainMaster.c: 94:         get_temp(temp);
  1324  0067  305A               	movlw	(low (_temp| 0))& (0+255)
  1325  0068  120A  158A  275D  120A  118A  	fcall	_get_temp
  1326                           
  1327                           ;mainMaster.c: 95:         door = get_hall();
  1328  006D  120A  158A  2226  120A  118A  	fcall	_get_hall
  1329  0072  1283               	bcf	3,5	;RP0=0, select bank0
  1330  0073  1303               	bcf	3,6	;RP1=0, select bank0
  1331  0074  00BF               	movwf	??_main
  1332  0075  083F               	movf	??_main,w
  1333  0076  00FA               	movwf	_door
  1334                           
  1335                           ;mainMaster.c: 96:         trip = get_tripwire();
  1336  0077  120A  158A  2249  120A  118A  	fcall	_get_tripwire
  1337  007C  1283               	bcf	3,5	;RP0=0, select bank0
  1338  007D  1303               	bcf	3,6	;RP1=0, select bank0
  1339  007E  00BF               	movwf	??_main
  1340  007F  083F               	movf	??_main,w
  1341  0080  00D8               	movwf	_trip
  1342                           
  1343                           ;mainMaster.c: 98:         PIR = get_PIR();
  1344  0081  120A  158A  2203  120A  118A  	fcall	_get_PIR
  1345  0086  1283               	bcf	3,5	;RP0=0, select bank0
  1346  0087  1303               	bcf	3,6	;RP1=0, select bank0
  1347  0088  00BF               	movwf	??_main
  1348  0089  083F               	movf	??_main,w
  1349  008A  00D7               	movwf	_PIR
  1350                           
  1351                           ;mainMaster.c: 99:         IR = get_IR();
  1352  008B  120A  158A  21E0  120A  118A  	fcall	_get_IR
  1353  0090  1283               	bcf	3,5	;RP0=0, select bank0
  1354  0091  1303               	bcf	3,6	;RP1=0, select bank0
  1355  0092  00BF               	movwf	??_main
  1356  0093  083F               	movf	??_main,w
  1357  0094  00D6               	movwf	_IR
  1358                           
  1359                           ;mainMaster.c: 100:         get_time(time);
  1360  0095  3060               	movlw	(low (_time| 0))& (0+255)
  1361  0096  120A  158A  2645  120A  118A  	fcall	_get_time
  1362                           
  1363                           ;mainMaster.c: 101:         day1 = get_day();
  1364  009B  120A  158A  238F  120A  118A  	fcall	_get_day
  1365  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  1366  00A1  1303               	bcf	3,6	;RP1=0, select bank0
  1367  00A2  00BF               	movwf	??_main
  1368  00A3  083F               	movf	??_main,w
  1369  00A4  00F8               	movwf	_day1
  1370                           
  1371                           ;mainMaster.c: 102:         bank = get_tripwire();
  1372  00A5  120A  158A  2249  120A  118A  	fcall	_get_tripwire
  1373  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  1374  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  1375  00AC  00BF               	movwf	??_main
  1376  00AD  083F               	movf	??_main,w
  1377  00AE  00CE               	movwf	_bank
  1378                           
  1379                           ;mainMaster.c: 105:         if(PORTDbits.RD7 == 1){
  1380  00AF  1F88               	btfss	8,7	;volatile
  1381  00B0  28E4               	goto	l311
  1382                           
  1383                           ;mainMaster.c: 106:             if (bank == 2){
  1384  00B1  3002               	movlw	2
  1385  00B2  064E               	xorwf	_bank,w
  1386  00B3  1D03               	btfss	3,2
  1387  00B4  28CC               	goto	l3645
  1388                           
  1389                           ;mainMaster.c: 107:                 if (change1 == 0){
  1390  00B5  0852               	movf	_change1,w
  1391  00B6  1D03               	btfss	3,2
  1392  00B7  28E6               	goto	l3659
  1393                           
  1394                           ;mainMaster.c: 110:                     open_door();
  1395  00B8  120A  158A  21A6  120A  118A  	fcall	_open_door
  1396                           
  1397                           ;mainMaster.c: 111:                     j = 0;
  1398  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  1399  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  1400  00BF  01D4               	clrf	_j
  1401  00C0                     l3643:	
  1402                           ;mainMaster.c: 112:                     while(j < 50){
  1403                           
  1404                           
  1405                           ;mainMaster.c: 112:                     while(j < 50){
  1406  00C0  3032               	movlw	50
  1407  00C1  0254               	subwf	_j,w
  1408  00C2  1803               	btfsc	3,0
  1409  00C3  28C9               	goto	l316
  1410                           
  1411                           ;mainMaster.c: 113:                         j++;
  1412  00C4  3001               	movlw	1
  1413  00C5  00BF               	movwf	??_main
  1414  00C6  083F               	movf	??_main,w
  1415  00C7  07D4               	addwf	_j,f
  1416  00C8  28C0               	goto	l3643
  1417  00C9                     l316:	
  1418                           
  1419                           ;mainMaster.c: 116:                     change1 = 1;
  1420  00C9  01D2               	clrf	_change1
  1421  00CA  0AD2               	incf	_change1,f
  1422  00CB  28E6               	goto	l3659
  1423  00CC                     l3645:	
  1424  00CC  3003               	movlw	3
  1425  00CD  064E               	xorwf	_bank,w
  1426  00CE  1D03               	btfss	3,2
  1427  00CF  28E6               	goto	l3659
  1428                           
  1429                           ;mainMaster.c: 119:                 if (change1 == 0){
  1430  00D0  0852               	movf	_change1,w
  1431  00D1  1D03               	btfss	3,2
  1432  00D2  28E6               	goto	l3659
  1433                           
  1434                           ;mainMaster.c: 122:                     close_door();
  1435  00D3  120A  158A  218B  120A  118A  	fcall	_close_door
  1436                           
  1437                           ;mainMaster.c: 123:                     j = 0;
  1438  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  1439  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  1440  00DA  01D4               	clrf	_j
  1441  00DB                     l3655:	
  1442                           ;mainMaster.c: 124:                     while(j < 50){
  1443                           
  1444                           
  1445                           ;mainMaster.c: 124:                     while(j < 50){
  1446  00DB  3032               	movlw	50
  1447  00DC  0254               	subwf	_j,w
  1448  00DD  1803               	btfsc	3,0
  1449  00DE  28C9               	goto	l316
  1450                           
  1451                           ;mainMaster.c: 125:                         j++;
  1452  00DF  3001               	movlw	1
  1453  00E0  00BF               	movwf	??_main
  1454  00E1  083F               	movf	??_main,w
  1455  00E2  07D4               	addwf	_j,f
  1456  00E3  28DB               	goto	l3655
  1457  00E4                     l311:	
  1458                           ;mainMaster.c: 131:         } else if(PORTDbits.RD7 == 0){
  1459                           
  1460  00E4  1F88               	btfss	8,7	;volatile
  1461                           
  1462                           ;mainMaster.c: 132:             change1 = 0;
  1463  00E5  01D2               	clrf	_change1
  1464  00E6                     l3659:	
  1465                           
  1466                           ;mainMaster.c: 135:         if (alarm == 0){
  1467  00E6  084F               	movf	_alarm,w
  1468  00E7  1D03               	btfss	3,2
  1469  00E8  28EF               	goto	l325
  1470                           
  1471                           ;mainMaster.c: 136:             alarm = trip | PIR | IR;
  1472  00E9  0858               	movf	_trip,w
  1473  00EA  0457               	iorwf	_PIR,w
  1474  00EB  0456               	iorwf	_IR,w
  1475  00EC  00BF               	movwf	??_main
  1476  00ED  083F               	movf	??_main,w
  1477  00EE  00CF               	movwf	_alarm
  1478  00EF                     l325:	
  1479                           ;mainMaster.c: 137:         }
  1480                           
  1481                           
  1482                           ;mainMaster.c: 141:         if (alarm == 1){
  1483  00EF  034F               	decf	_alarm,w
  1484  00F0  1D03               	btfss	3,2
  1485  00F1  2900               	goto	l326
  1486                           
  1487                           ;mainMaster.c: 143:             if (change2 == 0){
  1488  00F2  0851               	movf	_change2,w
  1489  00F3  1D03               	btfss	3,2
  1490  00F4  2902               	goto	l3673
  1491                           
  1492                           ;mainMaster.c: 144:                 change2 = 1;
  1493  00F5  01D1               	clrf	_change2
  1494  00F6  0AD1               	incf	_change2,f
  1495                           
  1496                           ;mainMaster.c: 145:                 close_door();
  1497  00F7  120A  158A  218B  120A  118A  	fcall	_close_door
  1498                           
  1499                           ;mainMaster.c: 146:                 PORTEbits.RE1 = 1;
  1500  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  1501  00FD  1303               	bcf	3,6	;RP1=0, select bank0
  1502  00FE  1489               	bsf	9,1	;volatile
  1503  00FF  2902               	goto	l3673
  1504  0100                     l326:	
  1505                           ;mainMaster.c: 150:         else {
  1506                           
  1507                           
  1508                           ;mainMaster.c: 151:             PORTEbits.RE1 = 0;
  1509  0100  1089               	bcf	9,1	;volatile
  1510                           
  1511                           ;mainMaster.c: 152:             change2 = 0;
  1512  0101  01D1               	clrf	_change2
  1513  0102                     l3673:	
  1514                           
  1515                           ;mainMaster.c: 156:         if (PORTDbits.RD6 == 1){
  1516  0102  1F08               	btfss	8,6	;volatile
  1517  0103  2911               	goto	l3685
  1518                           
  1519                           ;mainMaster.c: 157:             if (change3 == 0){
  1520  0104  0850               	movf	_change3,w
  1521  0105  1D03               	btfss	3,2
  1522  0106  2912               	goto	l3687
  1523                           
  1524                           ;mainMaster.c: 158:                 if (alarm == 0){
  1525  0107  084F               	movf	_alarm,w
  1526  0108  1D03               	btfss	3,2
  1527  0109  290D               	goto	l3681
  1528                           
  1529                           ;mainMaster.c: 159:                     alarm = 1;
  1530  010A  01CF               	clrf	_alarm
  1531  010B  0ACF               	incf	_alarm,f
  1532                           
  1533                           ;mainMaster.c: 160:                 }else {
  1534  010C  290E               	goto	l3683
  1535  010D                     l3681:	
  1536                           
  1537                           ;mainMaster.c: 161:                     alarm = 0;
  1538  010D  01CF               	clrf	_alarm
  1539  010E                     l3683:	
  1540                           
  1541                           ;mainMaster.c: 163:                 change3 = 1;
  1542  010E  01D0               	clrf	_change3
  1543  010F  0AD0               	incf	_change3,f
  1544  0110  2912               	goto	l3687
  1545  0111                     l3685:	
  1546                           
  1547                           ;mainMaster.c: 168:             change3 = 0;
  1548  0111  01D0               	clrf	_change3
  1549  0112                     l3687:	
  1550                           
  1551                           ;mainMaster.c: 172:         SSPCONbits.SSPEN = 0;
  1552  0112  1294               	bcf	20,5	;volatile
  1553                           
  1554                           ;mainMaster.c: 173:         RCSTAbits.SPEN = 1;
  1555  0113  1798               	bsf	24,7	;volatile
  1556                           
  1557                           ;mainMaster.c: 175:         if (UART_TX_Empty()){
  1558  0114  120A  158A  210E  120A  118A  	fcall	_UART_TX_Empty
  1559  0119  3A00               	xorlw	0
  1560  011A  1903               	skipnz
  1561  011B  29CC               	goto	l3721
  1562                           
  1563                           ;mainMaster.c: 176:             UART_Write(temp[0]);
  1564  011C  1283               	bcf	3,5	;RP0=0, select bank0
  1565  011D  1303               	bcf	3,6	;RP1=0, select bank0
  1566  011E  085A               	movf	_temp,w
  1567  011F  120A  158A  2142  120A  118A  	fcall	_UART_Write
  1568                           
  1569                           ;mainMaster.c: 177:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1570  0124  3003               	movlw	3
  1571  0125  1283               	bcf	3,5	;RP0=0, select bank0
  1572  0126  1303               	bcf	3,6	;RP1=0, select bank0
  1573  0127  00C0               	movwf	??_main+1
  1574  0128  3097               	movlw	151
  1575  0129  00BF               	movwf	??_main
  1576  012A                     u4067:	
  1577  012A  0BBF               	decfsz	??_main,f
  1578  012B  292A               	goto	u4067
  1579  012C  0BC0               	decfsz	??_main+1,f
  1580  012D  292A               	goto	u4067
  1581                           
  1582                           ;mainMaster.c: 178:             UART_Write(temp[1]);
  1583  012E  1283               	bcf	3,5	;RP0=0, select bank0
  1584  012F  1303               	bcf	3,6	;RP1=0, select bank0
  1585  0130  085B               	movf	_temp+1,w
  1586  0131  120A  158A  2142  120A  118A  	fcall	_UART_Write
  1587                           
  1588                           ;mainMaster.c: 179:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1589  0136  3003               	movlw	3
  1590  0137  1283               	bcf	3,5	;RP0=0, select bank0
  1591  0138  1303               	bcf	3,6	;RP1=0, select bank0
  1592  0139  00C0               	movwf	??_main+1
  1593  013A  3097               	movlw	151
  1594  013B  00BF               	movwf	??_main
  1595  013C                     u4077:	
  1596  013C  0BBF               	decfsz	??_main,f
  1597  013D  293C               	goto	u4077
  1598  013E  0BC0               	decfsz	??_main+1,f
  1599  013F  293C               	goto	u4077
  1600                           
  1601                           ;mainMaster.c: 180:             UART_Write(temp[2]);
  1602  0140  1283               	bcf	3,5	;RP0=0, select bank0
  1603  0141  1303               	bcf	3,6	;RP1=0, select bank0
  1604  0142  085C               	movf	_temp+2,w
  1605  0143  120A  158A  2142  120A  118A  	fcall	_UART_Write
  1606                           
  1607                           ;mainMaster.c: 181:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1608  0148  3003               	movlw	3
  1609  0149  1283               	bcf	3,5	;RP0=0, select bank0
  1610  014A  1303               	bcf	3,6	;RP1=0, select bank0
  1611  014B  00C0               	movwf	??_main+1
  1612  014C  3097               	movlw	151
  1613  014D  00BF               	movwf	??_main
  1614  014E                     u4087:	
  1615  014E  0BBF               	decfsz	??_main,f
  1616  014F  294E               	goto	u4087
  1617  0150  0BC0               	decfsz	??_main+1,f
  1618  0151  294E               	goto	u4087
  1619                           
  1620                           ;mainMaster.c: 182:             UART_Write(temp[3]);
  1621  0152  1283               	bcf	3,5	;RP0=0, select bank0
  1622  0153  1303               	bcf	3,6	;RP1=0, select bank0
  1623  0154  085D               	movf	_temp+3,w
  1624  0155  120A  158A  2142  120A  118A  	fcall	_UART_Write
  1625                           
  1626                           ;mainMaster.c: 183:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1627  015A  3003               	movlw	3
  1628  015B  1283               	bcf	3,5	;RP0=0, select bank0
  1629  015C  1303               	bcf	3,6	;RP1=0, select bank0
  1630  015D  00C0               	movwf	??_main+1
  1631  015E  3097               	movlw	151
  1632  015F  00BF               	movwf	??_main
  1633  0160                     u4097:	
  1634  0160  0BBF               	decfsz	??_main,f
  1635  0161  2960               	goto	u4097
  1636  0162  0BC0               	decfsz	??_main+1,f
  1637  0163  2960               	goto	u4097
  1638                           
  1639                           ;mainMaster.c: 184:             UART_Write(temp[4]);
  1640  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1641  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1642  0166  085E               	movf	_temp+4,w
  1643  0167  120A  158A  2142  120A  118A  	fcall	_UART_Write
  1644                           
  1645                           ;mainMaster.c: 185:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1646  016C  3003               	movlw	3
  1647  016D  1283               	bcf	3,5	;RP0=0, select bank0
  1648  016E  1303               	bcf	3,6	;RP1=0, select bank0
  1649  016F  00C0               	movwf	??_main+1
  1650  0170  3097               	movlw	151
  1651  0171  00BF               	movwf	??_main
  1652  0172                     u4107:	
  1653  0172  0BBF               	decfsz	??_main,f
  1654  0173  2972               	goto	u4107
  1655  0174  0BC0               	decfsz	??_main+1,f
  1656  0175  2972               	goto	u4107
  1657                           
  1658                           ;mainMaster.c: 186:             UART_Write(door);
  1659  0176  087A               	movf	_door,w
  1660  0177  120A  158A  2142  120A  118A  	fcall	_UART_Write
  1661                           
  1662                           ;mainMaster.c: 187:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1663  017C  3003               	movlw	3
  1664  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1665  017E  1303               	bcf	3,6	;RP1=0, select bank0
  1666  017F  00C0               	movwf	??_main+1
  1667  0180  3097               	movlw	151
  1668  0181  00BF               	movwf	??_main
  1669  0182                     u4117:	
  1670  0182  0BBF               	decfsz	??_main,f
  1671  0183  2982               	goto	u4117
  1672  0184  0BC0               	decfsz	??_main+1,f
  1673  0185  2982               	goto	u4117
  1674                           
  1675                           ;mainMaster.c: 188:             UART_Write(alarm);
  1676  0186  1283               	bcf	3,5	;RP0=0, select bank0
  1677  0187  1303               	bcf	3,6	;RP1=0, select bank0
  1678  0188  084F               	movf	_alarm,w
  1679  0189  120A  158A  2142  120A  118A  	fcall	_UART_Write
  1680                           
  1681                           ;mainMaster.c: 189:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1682  018E  3003               	movlw	3
  1683  018F  1283               	bcf	3,5	;RP0=0, select bank0
  1684  0190  1303               	bcf	3,6	;RP1=0, select bank0
  1685  0191  00C0               	movwf	??_main+1
  1686  0192  3097               	movlw	151
  1687  0193  00BF               	movwf	??_main
  1688  0194                     u4127:	
  1689  0194  0BBF               	decfsz	??_main,f
  1690  0195  2994               	goto	u4127
  1691  0196  0BC0               	decfsz	??_main+1,f
  1692  0197  2994               	goto	u4127
  1693                           
  1694                           ;mainMaster.c: 190:             UART_Write(bank);
  1695  0198  1283               	bcf	3,5	;RP0=0, select bank0
  1696  0199  1303               	bcf	3,6	;RP1=0, select bank0
  1697  019A  084E               	movf	_bank,w
  1698  019B  120A  158A  2142  120A  118A  	fcall	_UART_Write
  1699                           
  1700                           ;mainMaster.c: 191:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1701  01A0  3003               	movlw	3
  1702  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  1703  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  1704  01A3  00C0               	movwf	??_main+1
  1705  01A4  3097               	movlw	151
  1706  01A5  00BF               	movwf	??_main
  1707  01A6                     u4137:	
  1708  01A6  0BBF               	decfsz	??_main,f
  1709  01A7  29A6               	goto	u4137
  1710  01A8  0BC0               	decfsz	??_main+1,f
  1711  01A9  29A6               	goto	u4137
  1712                           
  1713                           ;mainMaster.c: 192:             UART_Write(seguridad);
  1714  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  1715  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  1716  01AC  0849               	movf	_seguridad,w
  1717  01AD  120A  158A  2142  120A  118A  	fcall	_UART_Write
  1718                           
  1719                           ;mainMaster.c: 193:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1720  01B2  3003               	movlw	3
  1721  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  1722  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  1723  01B5  00C0               	movwf	??_main+1
  1724  01B6  3097               	movlw	151
  1725  01B7  00BF               	movwf	??_main
  1726  01B8                     u4147:	
  1727  01B8  0BBF               	decfsz	??_main,f
  1728  01B9  29B8               	goto	u4147
  1729  01BA  0BC0               	decfsz	??_main+1,f
  1730  01BB  29B8               	goto	u4147
  1731                           
  1732                           ;mainMaster.c: 194:             UART_Write('A');
  1733  01BC  3041               	movlw	65
  1734  01BD  120A  158A  2142  120A  118A  	fcall	_UART_Write
  1735                           
  1736                           ;mainMaster.c: 195:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1737  01C2  3003               	movlw	3
  1738  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  1739  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  1740  01C5  00C0               	movwf	??_main+1
  1741  01C6  3097               	movlw	151
  1742  01C7  00BF               	movwf	??_main
  1743  01C8                     u4157:	
  1744  01C8  0BBF               	decfsz	??_main,f
  1745  01C9  29C8               	goto	u4157
  1746  01CA  0BC0               	decfsz	??_main+1,f
  1747  01CB  29C8               	goto	u4157
  1748  01CC                     l3721:	
  1749                           
  1750                           ;mainMaster.c: 198:         RCSTAbits.SPEN = 0;
  1751  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  1752  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  1753  01CE  1398               	bcf	24,7	;volatile
  1754                           
  1755                           ;mainMaster.c: 199:         SSPCONbits.SSPEN = 1;
  1756  01CF  1694               	bsf	20,5	;volatile
  1757                           
  1758                           ;mainMaster.c: 201:         if (door == 1){
  1759  01D0  037A               	decf	_door,w
  1760  01D1  1D03               	btfss	3,2
  1761  01D2  29D5               	goto	l3729
  1762                           
  1763                           ;mainMaster.c: 202:             val = 8;
  1764  01D3  3008               	movlw	8
  1765  01D4  29D9               	goto	L1
  1766  01D5                     l3729:	
  1767                           ;mainMaster.c: 203:         } else if (door == 0){
  1768                           
  1769  01D5  087A               	movf	_door,w
  1770  01D6  1D03               	btfss	3,2
  1771  01D7  29F0               	goto	l3751
  1772                           
  1773                           ;mainMaster.c: 204:             val = 16;
  1774  01D8  3010               	movlw	16
  1775  01D9                     L1:	
  1776  01D9  00BF               	movwf	??_main
  1777  01DA  083F               	movf	??_main,w
  1778  01DB  00CC               	movwf	_val
  1779  01DC  29F0               	goto	l3751
  1780  01DD                     l3733:	
  1781                           
  1782                           ;mainMaster.c: 209:                 day2 = "LUNES    ";
  1783  01DD  304C               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1784  01DE  29EC               	goto	L8
  1785  01DF                     l3735:	
  1786                           ;mainMaster.c: 210:                 break;
  1787                           
  1788                           
  1789                           ;mainMaster.c: 212:                 day2 = "MARTES   ";
  1790  01DF  3060               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1791  01E0  29EC               	goto	L8
  1792  01E1                     l3737:	
  1793                           ;mainMaster.c: 213:                 break;
  1794                           
  1795                           
  1796                           ;mainMaster.c: 215:                 day2 = "MIERCOLES";
  1797  01E1  3088               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1798  01E2  29EC               	goto	L8
  1799  01E3                     l3739:	
  1800                           ;mainMaster.c: 216:                 break;
  1801                           
  1802                           
  1803                           ;mainMaster.c: 218:                 day2 = "JUEVES   ";
  1804  01E3  306A               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1805  01E4  29EC               	goto	L8
  1806  01E5                     l3741:	
  1807                           ;mainMaster.c: 219:                 break;
  1808                           
  1809                           
  1810                           ;mainMaster.c: 221:                 day2 = "VIERNES  ";
  1811  01E5  307E               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1812  01E6  29EC               	goto	L8
  1813  01E7                     l3743:	
  1814                           ;mainMaster.c: 222:                 break;
  1815                           
  1816                           
  1817                           ;mainMaster.c: 224:                 day2 = "SABADO   ";
  1818  01E7  3056               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1819  01E8  29EC               	goto	L8
  1820  01E9                     l3745:	
  1821                           ;mainMaster.c: 225:                 break;
  1822                           
  1823                           
  1824                           ;mainMaster.c: 227:                 day2 = "DOMINGO  ";
  1825  01E9  3074               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1826  01EA  29EC               	goto	L8
  1827  01EB                     l3747:	
  1828                           ;mainMaster.c: 228:                 break;
  1829                           
  1830                           
  1831                           ;mainMaster.c: 230:                 day2 = "         ";
  1832  01EB  3042               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1833  01EC                     L8:	
  1834  01EC  00BF               	movwf	??_main
  1835  01ED  083F               	movf	??_main,w
  1836  01EE  00D9               	movwf	_day2
  1837                           
  1838                           ;mainMaster.c: 231:                 break;
  1839  01EF  2A0F               	goto	l3753
  1840  01F0                     l3751:	
  1841  01F0  0878               	movf	_day1,w
  1842  01F1  00BF               	movwf	??_main
  1843  01F2  01C0               	clrf	??_main+1
  1844                           
  1845                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1846                           ; Switch size 1, requested type "simple"
  1847                           ; Number of cases is 1, Range of values is 0 to 0
  1848                           ; switch strategies available:
  1849                           ; Name         Instructions Cycles
  1850                           ; simple_byte            4     3 (average)
  1851                           ; direct_byte           11     8 (fixed)
  1852                           ; jumptable            260     6 (fixed)
  1853                           ;	Chosen strategy is simple_byte
  1854  01F3  0840               	movf	??_main+1,w
  1855  01F4  3A00               	xorlw	0	; case 0
  1856  01F5  1903               	skipnz
  1857  01F6  29F8               	goto	l3963
  1858  01F7  29EB               	goto	l3747
  1859  01F8                     l3963:	
  1860                           
  1861                           ; Switch size 1, requested type "simple"
  1862                           ; Number of cases is 7, Range of values is 1 to 7
  1863                           ; switch strategies available:
  1864                           ; Name         Instructions Cycles
  1865                           ; simple_byte           22    12 (average)
  1866                           ; direct_byte           32    11 (fixed)
  1867                           ; jumptable            263     9 (fixed)
  1868                           ;	Chosen strategy is simple_byte
  1869  01F8  083F               	movf	??_main,w
  1870  01F9  3A01               	xorlw	1	; case 1
  1871  01FA  1903               	skipnz
  1872  01FB  29DD               	goto	l3733
  1873  01FC  3A03               	xorlw	3	; case 2
  1874  01FD  1903               	skipnz
  1875  01FE  29DF               	goto	l3735
  1876  01FF  3A01               	xorlw	1	; case 3
  1877  0200  1903               	skipnz
  1878  0201  29E1               	goto	l3737
  1879  0202  3A07               	xorlw	7	; case 4
  1880  0203  1903               	skipnz
  1881  0204  29E3               	goto	l3739
  1882  0205  3A01               	xorlw	1	; case 5
  1883  0206  1903               	skipnz
  1884  0207  29E5               	goto	l3741
  1885  0208  3A03               	xorlw	3	; case 6
  1886  0209  1903               	skipnz
  1887  020A  29E7               	goto	l3743
  1888  020B  3A01               	xorlw	1	; case 7
  1889  020C  1903               	skipnz
  1890  020D  29E9               	goto	l3745
  1891  020E  29EB               	goto	l3747
  1892  020F                     l3753:	
  1893                           
  1894                           ;mainMaster.c: 235:         if (strcmp(temp,"23.50") > 0){
  1895  020F  30DF               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1896  0210  00BF               	movwf	??_main
  1897  0211  083F               	movf	??_main,w
  1898  0212  00F3               	movwf	strcmp@s2
  1899  0213  305A               	movlw	(low (_temp| 0))& (0+255)
  1900  0214  120A  158A  2290  120A  118A  	fcall	_strcmp
  1901  0219  0874               	movf	?_strcmp+1,w
  1902  021A  3A80               	xorlw	128
  1903  021B  00FF               	movwf	127
  1904  021C  3080               	movlw	128
  1905  021D  027F               	subwf	127,w
  1906  021E  1D03               	skipz
  1907  021F  2A22               	goto	u3735
  1908  0220  3001               	movlw	1
  1909  0221  0273               	subwf	?_strcmp,w
  1910  0222                     u3735:	
  1911  0222  1C03               	skipc
  1912  0223  2A28               	goto	l348
  1913                           
  1914                           ;mainMaster.c: 236:             PORTAbits.RA0 = 1;
  1915  0224  1283               	bcf	3,5	;RP0=0, select bank0
  1916  0225  1303               	bcf	3,6	;RP1=0, select bank0
  1917  0226  1405               	bsf	5,0	;volatile
  1918                           
  1919                           ;mainMaster.c: 237:         } else {
  1920  0227  2A2B               	goto	l3757
  1921  0228                     l348:	
  1922                           
  1923                           ;mainMaster.c: 238:             PORTAbits.RA0 = 0;
  1924  0228  1283               	bcf	3,5	;RP0=0, select bank0
  1925  0229  1303               	bcf	3,6	;RP1=0, select bank0
  1926  022A  1005               	bcf	5,0	;volatile
  1927  022B                     l3757:	
  1928                           
  1929                           ;mainMaster.c: 241:         if ((strcmp(time, "22:00") == 0) & ((day1 != 6) | (day1 != 7
      +                          ))){
  1930  022B  30D9               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1931  022C  00BF               	movwf	??_main
  1932  022D  083F               	movf	??_main,w
  1933  022E  00F3               	movwf	strcmp@s2
  1934  022F  3060               	movlw	(low (_time| 0))& (0+255)
  1935  0230  120A  158A  2290  120A  118A  	fcall	_strcmp
  1936  0235  0873               	movf	?_strcmp,w
  1937  0236  0474               	iorwf	?_strcmp+1,w
  1938  0237  1D03               	btfss	3,2
  1939  0238  2A41               	goto	l3765
  1940  0239  3006               	movlw	6
  1941  023A  0678               	xorwf	_day1,w
  1942  023B  1D03               	btfss	3,2
  1943  023C  2A59               	goto	l3763
  1944  023D  3007               	movlw	7
  1945  023E  0678               	xorwf	_day1,w
  1946  023F  1D03               	btfss	3,2
  1947  0240  2A59               	goto	l3763
  1948  0241                     l3765:	
  1949                           ;mainMaster.c: 243:         } else if ((strcmp(time, "21:00") == 0) & ((day1 == 6) | (da
      +                          y1 == 7))){
  1950                           
  1951  0241  30D3               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1952  0242  1283               	bcf	3,5	;RP0=0, select bank0
  1953  0243  1303               	bcf	3,6	;RP1=0, select bank0
  1954  0244  00BF               	movwf	??_main
  1955  0245  083F               	movf	??_main,w
  1956  0246  00F3               	movwf	strcmp@s2
  1957  0247  3060               	movlw	(low (_time| 0))& (0+255)
  1958  0248  120A  158A  2290  120A  118A  	fcall	_strcmp
  1959  024D  0873               	movf	?_strcmp,w
  1960  024E  0474               	iorwf	?_strcmp+1,w
  1961  024F  1D03               	btfss	3,2
  1962  0250  2A5E               	goto	l3773
  1963  0251  3006               	movlw	6
  1964  0252  0678               	xorwf	_day1,w
  1965  0253  1903               	btfsc	3,2
  1966  0254  2A59               	goto	l3763
  1967  0255  3007               	movlw	7
  1968  0256  0678               	xorwf	_day1,w
  1969  0257  1D03               	btfss	3,2
  1970  0258  2A5E               	goto	l3773
  1971  0259                     l3763:	
  1972                           
  1973                           ;mainMaster.c: 242:             close_door();
  1974  0259  120A  158A  218B  120A  118A  	fcall	_close_door
  1975  025E                     l3773:	
  1976                           
  1977                           ;mainMaster.c: 248:         if(PORTCbits.RC0 == 1){
  1978  025E  1283               	bcf	3,5	;RP0=0, select bank0
  1979  025F  1303               	bcf	3,6	;RP1=0, select bank0
  1980  0260  1C07               	btfss	7,0	;volatile
  1981  0261  2A81               	goto	l3789
  1982                           
  1983                           ;mainMaster.c: 249:             if (change == 0){
  1984  0262  0853               	movf	_change,w
  1985  0263  1D03               	btfss	3,2
  1986  0264  2A82               	goto	l3791
  1987                           
  1988                           ;mainMaster.c: 250:                 state++;
  1989  0265  3001               	movlw	1
  1990  0266  00BF               	movwf	??_main
  1991  0267  083F               	movf	??_main,w
  1992  0268  07F9               	addwf	_state,f
  1993                           
  1994                           ;mainMaster.c: 251:                 Lcd_Clear();
  1995  0269  120A  158A  214C  120A  118A  	fcall	_Lcd_Clear
  1996                           
  1997                           ;mainMaster.c: 252:                 if (state > 3){
  1998  026E  3004               	movlw	4
  1999  026F  0279               	subwf	_state,w
  2000  0270  1803               	btfsc	3,0
  2001                           
  2002                           ;mainMaster.c: 253:                     state = 0;
  2003  0271  01F9               	clrf	_state
  2004                           
  2005                           ;mainMaster.c: 255:                 j = 0;
  2006                           
  2007                           ;mainMaster.c: 254:                 }
  2008  0272  1283               	bcf	3,5	;RP0=0, select bank0
  2009  0273  1303               	bcf	3,6	;RP1=0, select bank0
  2010  0274  01D4               	clrf	_j
  2011  0275                     l3787:	
  2012                           ;mainMaster.c: 256:                 while(j < 50){
  2013                           
  2014                           
  2015                           ;mainMaster.c: 256:                 while(j < 50){
  2016  0275  3032               	movlw	50
  2017  0276  0254               	subwf	_j,w
  2018  0277  1803               	btfsc	3,0
  2019  0278  2A7E               	goto	l362
  2020                           
  2021                           ;mainMaster.c: 257:                     j++;
  2022  0279  3001               	movlw	1
  2023  027A  00BF               	movwf	??_main
  2024  027B  083F               	movf	??_main,w
  2025  027C  07D4               	addwf	_j,f
  2026  027D  2A75               	goto	l3787
  2027  027E                     l362:	
  2028                           
  2029                           ;mainMaster.c: 260:                 change = 1;
  2030  027E  01D3               	clrf	_change
  2031  027F  0AD3               	incf	_change,f
  2032  0280  2A82               	goto	l3791
  2033  0281                     l3789:	
  2034                           
  2035                           ;mainMaster.c: 263:             change =0;
  2036  0281  01D3               	clrf	_change
  2037  0282                     l3791:	
  2038                           
  2039                           ;mainMaster.c: 266:         if (state == 0){
  2040  0282  0879               	movf	_state,w
  2041  0283  1D03               	btfss	3,2
  2042  0284  2AD1               	goto	l3803
  2043                           
  2044                           ;mainMaster.c: 268:             Lcd_Set_Cursor(1,1);
  2045  0285  01F7               	clrf	Lcd_Set_Cursor@b
  2046  0286  0AF7               	incf	Lcd_Set_Cursor@b,f
  2047  0287  3001               	movlw	1
  2048  0288  120A  118A  27AF  120A  118A  	fcall	_Lcd_Set_Cursor
  2049                           
  2050                           ;mainMaster.c: 269:             Lcd_Write_String(time);
  2051  028D  3060               	movlw	(low (_time| 0))& (0+255)
  2052  028E  1283               	bcf	3,5	;RP0=0, select bank0
  2053  028F  1303               	bcf	3,6	;RP1=0, select bank0
  2054  0290  00A0               	movwf	Lcd_Write_String@a
  2055  0291  3000               	movlw	0
  2056  0292  00A1               	movwf	Lcd_Write_String@a+1
  2057  0293  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  2058                           
  2059                           ;mainMaster.c: 271:             Lcd_Set_Cursor(1,7);
  2060  0298  3007               	movlw	7
  2061  0299  1283               	bcf	3,5	;RP0=0, select bank0
  2062  029A  1303               	bcf	3,6	;RP1=0, select bank0
  2063  029B  00BF               	movwf	??_main
  2064  029C  083F               	movf	??_main,w
  2065  029D  00F7               	movwf	Lcd_Set_Cursor@b
  2066  029E  3001               	movlw	1
  2067  029F  120A  118A  27AF  120A  118A  	fcall	_Lcd_Set_Cursor
  2068                           
  2069                           ;mainMaster.c: 272:             Lcd_Write_String(day2);
  2070  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  2071  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  2072  02A6  0859               	movf	_day2,w
  2073  02A7  00A0               	movwf	Lcd_Write_String@a
  2074  02A8  3000               	movlw	0
  2075  02A9  1D03               	btfss	3,2
  2076  02AA  3080               	movlw	128
  2077  02AB  00A1               	movwf	Lcd_Write_String@a+1
  2078  02AC  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  2079                           
  2080                           ;mainMaster.c: 274:             Lcd_Set_Cursor(2,1);
  2081  02B1  01F7               	clrf	Lcd_Set_Cursor@b
  2082  02B2  0AF7               	incf	Lcd_Set_Cursor@b,f
  2083  02B3  3002               	movlw	2
  2084  02B4  120A  118A  27AF  120A  118A  	fcall	_Lcd_Set_Cursor
  2085                           
  2086                           ;mainMaster.c: 275:             Lcd_Write_String(temp);
  2087  02B9  305A               	movlw	(low (_temp| 0))& (0+255)
  2088  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  2089  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  2090  02BC  00A0               	movwf	Lcd_Write_String@a
  2091  02BD  3000               	movlw	0
  2092  02BE  00A1               	movwf	Lcd_Write_String@a+1
  2093  02BF  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  2094                           
  2095                           ;mainMaster.c: 276:             Lcd_Write_Char(223);
  2096  02C4  30DF               	movlw	223
  2097  02C5  120A  158A  2356  120A  118A  	fcall	_Lcd_Write_Char
  2098                           
  2099                           ;mainMaster.c: 277:             Lcd_Write_Char('C');
  2100  02CA  3043               	movlw	67
  2101  02CB  120A  158A  2356  120A  118A  	fcall	_Lcd_Write_Char
  2102                           
  2103                           ;mainMaster.c: 279:         } else if (state == 1){
  2104  02D0  2867               	goto	l3615
  2105  02D1                     l3803:	
  2106  02D1  0379               	decf	_state,w
  2107  02D2  1D03               	btfss	3,2
  2108  02D3  2B2A               	goto	l3829
  2109                           
  2110                           ;mainMaster.c: 281:             Lcd_Set_Cursor(1,1);
  2111  02D4  01F7               	clrf	Lcd_Set_Cursor@b
  2112  02D5  0AF7               	incf	Lcd_Set_Cursor@b,f
  2113  02D6  3001               	movlw	1
  2114  02D7  120A  118A  27AF  120A  118A  	fcall	_Lcd_Set_Cursor
  2115                           
  2116                           ;mainMaster.c: 282:             if (door == 1){
  2117  02DC  037A               	decf	_door,w
  2118  02DD  1D03               	btfss	3,2
  2119  02DE  2AE1               	goto	l3811
  2120                           
  2121                           ;mainMaster.c: 283:                 Lcd_Write_String("Door OPEN  ");
  2122  02DF  302A               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2123  02E0  2AE2               	goto	L9
  2124  02E1                     l3811:	
  2125                           ;mainMaster.c: 284:             } else {
  2126                           
  2127                           
  2128                           ;mainMaster.c: 285:                 Lcd_Write_String("Door CLOSED");
  2129  02E1  3036               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2130  02E2                     L9:	
  2131  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  2132  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  2133  02E4  00A0               	movwf	Lcd_Write_String@a
  2134  02E5  3080               	movlw	128
  2135  02E6  00A1               	movwf	Lcd_Write_String@a+1
  2136  02E7  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  2137                           
  2138                           ;mainMaster.c: 288:             Lcd_Set_Cursor(2,1);
  2139  02EC  01F7               	clrf	Lcd_Set_Cursor@b
  2140  02ED  0AF7               	incf	Lcd_Set_Cursor@b,f
  2141  02EE  3002               	movlw	2
  2142  02EF  120A  118A  27AF  120A  118A  	fcall	_Lcd_Set_Cursor
  2143                           
  2144                           ;mainMaster.c: 289:             if (trip == 1){
  2145  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  2146  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  2147  02F6  0358               	decf	_trip,w
  2148  02F7  1D03               	btfss	3,2
  2149  02F8  2AFB               	goto	l3819
  2150                           
  2151                           ;mainMaster.c: 290:                 Lcd_Write_String("Trip ON ");
  2152  02F9  309B               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2153  02FA  2AFC               	goto	L10
  2154  02FB                     l3819:	
  2155                           ;mainMaster.c: 291:             } else {
  2156                           
  2157                           
  2158                           ;mainMaster.c: 292:                 Lcd_Write_String("Trip OFF");
  2159  02FB  30AD               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  2160  02FC                     L10:	
  2161  02FC  00A0               	movwf	Lcd_Write_String@a
  2162  02FD  3080               	movlw	128
  2163  02FE  00A1               	movwf	Lcd_Write_String@a+1
  2164  02FF  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  2165                           
  2166                           ;mainMaster.c: 295:             Lcd_Set_Cursor(2,9);
  2167  0304  3009               	movlw	9
  2168  0305  1283               	bcf	3,5	;RP0=0, select bank0
  2169  0306  1303               	bcf	3,6	;RP1=0, select bank0
  2170  0307  00BF               	movwf	??_main
  2171  0308  083F               	movf	??_main,w
  2172  0309  00F7               	movwf	Lcd_Set_Cursor@b
  2173  030A  3002               	movlw	2
  2174  030B  120A  118A  27AF  120A  118A  	fcall	_Lcd_Set_Cursor
  2175                           
  2176                           ;mainMaster.c: 296:             if (bank == 3){
  2177  0310  3003               	movlw	3
  2178  0311  1283               	bcf	3,5	;RP0=0, select bank0
  2179  0312  1303               	bcf	3,6	;RP1=0, select bank0
  2180  0313  064E               	xorwf	_bank,w
  2181  0314  1D03               	btfss	3,2
  2182  0315  2B20               	goto	l3827
  2183                           
  2184                           ;mainMaster.c: 297:                 Lcd_Write_String("Bank ON ");
  2185  0316  3092               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  2186  0317  00A0               	movwf	Lcd_Write_String@a
  2187  0318  3080               	movlw	128
  2188  0319  00A1               	movwf	Lcd_Write_String@a+1
  2189  031A  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  2190                           
  2191                           ;mainMaster.c: 298:             } else {
  2192  031F  2867               	goto	l3615
  2193  0320                     l3827:	
  2194                           
  2195                           ;mainMaster.c: 299:                 Lcd_Write_String("BANK OFF");
  2196  0320  30A4               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  2197  0321  00A0               	movwf	Lcd_Write_String@a
  2198  0322  3080               	movlw	128
  2199  0323  00A1               	movwf	Lcd_Write_String@a+1
  2200  0324  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  2201  0329  2867               	goto	l3615
  2202  032A                     l3829:	
  2203  032A  3002               	movlw	2
  2204  032B  0679               	xorwf	_state,w
  2205  032C  1D03               	btfss	3,2
  2206  032D  2B67               	goto	l3847
  2207                           
  2208                           ;mainMaster.c: 304:             Lcd_Set_Cursor(1,1);
  2209  032E  01F7               	clrf	Lcd_Set_Cursor@b
  2210  032F  0AF7               	incf	Lcd_Set_Cursor@b,f
  2211  0330  3001               	movlw	1
  2212  0331  120A  118A  27AF  120A  118A  	fcall	_Lcd_Set_Cursor
  2213                           
  2214                           ;mainMaster.c: 305:             if (PIR == 1){
  2215  0336  1283               	bcf	3,5	;RP0=0, select bank0
  2216  0337  1303               	bcf	3,6	;RP1=0, select bank0
  2217  0338  0357               	decf	_PIR,w
  2218  0339  1D03               	btfss	3,2
  2219  033A  2B3D               	goto	l3837
  2220                           
  2221                           ;mainMaster.c: 306:                 Lcd_Write_String("PIR ON ");
  2222  033B  30B6               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  2223  033C  2B3E               	goto	L11
  2224  033D                     l3837:	
  2225                           ;mainMaster.c: 307:             } else {
  2226                           
  2227                           
  2228                           ;mainMaster.c: 308:                 Lcd_Write_String("PIR OFF");
  2229  033D  30BE               	movlw	(low ((STR_21-__stringbase)| (0+32768)))& (0+255)
  2230  033E                     L11:	
  2231  033E  00A0               	movwf	Lcd_Write_String@a
  2232  033F  3080               	movlw	128
  2233  0340  00A1               	movwf	Lcd_Write_String@a+1
  2234  0341  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  2235                           
  2236                           ;mainMaster.c: 311:             Lcd_Set_Cursor(2,1);
  2237  0346  01F7               	clrf	Lcd_Set_Cursor@b
  2238  0347  0AF7               	incf	Lcd_Set_Cursor@b,f
  2239  0348  3002               	movlw	2
  2240  0349  120A  118A  27AF  120A  118A  	fcall	_Lcd_Set_Cursor
  2241                           
  2242                           ;mainMaster.c: 312:             if (IR == 1){
  2243  034E  1283               	bcf	3,5	;RP0=0, select bank0
  2244  034F  1303               	bcf	3,6	;RP1=0, select bank0
  2245  0350  0356               	decf	_IR,w
  2246  0351  1D03               	btfss	3,2
  2247  0352  2B5D               	goto	l3845
  2248                           
  2249                           ;mainMaster.c: 313:                 Lcd_Write_String("IR ON ");
  2250  0353  30B7               	movlw	(low (((STR_20+1)-__stringbase)| (0+32768)))& (0+255)
  2251  0354  00A0               	movwf	Lcd_Write_String@a
  2252  0355  3080               	movlw	128
  2253  0356  00A1               	movwf	Lcd_Write_String@a+1
  2254  0357  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  2255                           
  2256                           ;mainMaster.c: 314:             } else {
  2257  035C  2867               	goto	l3615
  2258  035D                     l3845:	
  2259                           
  2260                           ;mainMaster.c: 315:                 Lcd_Write_String("IR OFF");
  2261  035D  30BF               	movlw	(low (((STR_21+1)-__stringbase)| (0+32768)))& (0+255)
  2262  035E  00A0               	movwf	Lcd_Write_String@a
  2263  035F  3080               	movlw	128
  2264  0360  00A1               	movwf	Lcd_Write_String@a+1
  2265  0361  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  2266  0366  2867               	goto	l3615
  2267  0367                     l3847:	
  2268  0367  3003               	movlw	3
  2269  0368  0679               	xorwf	_state,w
  2270  0369  1D03               	btfss	3,2
  2271  036A  2867               	goto	l3615
  2272                           
  2273                           ;mainMaster.c: 318:             Lcd_Set_Cursor(1,1);
  2274  036B  01F7               	clrf	Lcd_Set_Cursor@b
  2275  036C  0AF7               	incf	Lcd_Set_Cursor@b,f
  2276  036D  3001               	movlw	1
  2277  036E  120A  118A  27AF  120A  118A  	fcall	_Lcd_Set_Cursor
  2278                           
  2279                           ;mainMaster.c: 319:             Lcd_Write_String("HORA: ");
  2280  0373  30C6               	movlw	(low ((STR_24-__stringbase)| (0+32768)))& (0+255)
  2281  0374  1283               	bcf	3,5	;RP0=0, select bank0
  2282  0375  1303               	bcf	3,6	;RP1=0, select bank0
  2283  0376  00A0               	movwf	Lcd_Write_String@a
  2284  0377  3080               	movlw	128
  2285  0378  00A1               	movwf	Lcd_Write_String@a+1
  2286  0379  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  2287                           
  2288                           ;mainMaster.c: 320:             Lcd_Write_String(time);
  2289  037E  3060               	movlw	(low (_time| 0))& (0+255)
  2290  037F  1283               	bcf	3,5	;RP0=0, select bank0
  2291  0380  1303               	bcf	3,6	;RP1=0, select bank0
  2292  0381  00A0               	movwf	Lcd_Write_String@a
  2293  0382  3000               	movlw	0
  2294  0383  00A1               	movwf	Lcd_Write_String@a+1
  2295  0384  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  2296                           
  2297                           ;mainMaster.c: 322:             Lcd_Set_Cursor(2,1);
  2298  0389  01F7               	clrf	Lcd_Set_Cursor@b
  2299  038A  0AF7               	incf	Lcd_Set_Cursor@b,f
  2300  038B  3002               	movlw	2
  2301  038C  120A  118A  27AF  120A  118A  	fcall	_Lcd_Set_Cursor
  2302                           
  2303                           ;mainMaster.c: 323:             Lcd_Write_String("DIA: ");
  2304  0391  30CD               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  2305  0392  1283               	bcf	3,5	;RP0=0, select bank0
  2306  0393  1303               	bcf	3,6	;RP1=0, select bank0
  2307  0394  00A0               	movwf	Lcd_Write_String@a
  2308  0395  3080               	movlw	128
  2309  0396  00A1               	movwf	Lcd_Write_String@a+1
  2310  0397  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  2311                           
  2312                           ;mainMaster.c: 324:             Lcd_Write_String(day2);
  2313  039C  1283               	bcf	3,5	;RP0=0, select bank0
  2314  039D  1303               	bcf	3,6	;RP1=0, select bank0
  2315  039E  0859               	movf	_day2,w
  2316  039F  00A0               	movwf	Lcd_Write_String@a
  2317  03A0  3000               	movlw	0
  2318  03A1  1D03               	btfss	3,2
  2319  03A2  3080               	movlw	128
  2320  03A3  00A1               	movwf	Lcd_Write_String@a+1
  2321  03A4  120A  158A  2407  120A  118A  	fcall	_Lcd_Write_String
  2322                           
  2323                           ;mainMaster.c: 326:             newhour = (time[0] - '0') * 10 + (time[1] - '0');
  2324  03A9  300A               	movlw	10
  2325  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  2326  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  2327  03AC  00BF               	movwf	??_main
  2328  03AD  083F               	movf	??_main,w
  2329  03AE  00F3               	movwf	___bmul@multiplicand
  2330  03AF  0860               	movf	_time,w
  2331  03B0  120A  118A  24EB  120A  118A  	fcall	___bmul
  2332  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  2333  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  2334  03B7  0761               	addwf	_time+1,w
  2335  03B8  3EF0               	addlw	240
  2336  03B9  00C0               	movwf	??_main+1
  2337  03BA  0840               	movf	??_main+1,w
  2338  03BB  00C8               	movwf	_newhour
  2339                           
  2340                           ;mainMaster.c: 327:             newmin = (time[3] - '0') * 10 + (time[4] - '0');
  2341  03BC  300A               	movlw	10
  2342  03BD  00BF               	movwf	??_main
  2343  03BE  083F               	movf	??_main,w
  2344  03BF  00F3               	movwf	___bmul@multiplicand
  2345  03C0  0863               	movf	_time+3,w
  2346  03C1  120A  118A  24EB  120A  118A  	fcall	___bmul
  2347  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  2348  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  2349  03C8  0764               	addwf	_time+4,w
  2350  03C9  3EF0               	addlw	240
  2351  03CA  00C0               	movwf	??_main+1
  2352  03CB  0840               	movf	??_main+1,w
  2353  03CC  00C7               	movwf	_newmin
  2354                           
  2355                           ;mainMaster.c: 329:             if (PORTDbits.RD4 == 1){
  2356  03CD  1E08               	btfss	8,4	;volatile
  2357  03CE  2BD9               	goto	l381
  2358                           
  2359                           ;mainMaster.c: 330:                 newhour++;
  2360  03CF  3001               	movlw	1
  2361  03D0  00BF               	movwf	??_main
  2362  03D1  083F               	movf	??_main,w
  2363  03D2  07C8               	addwf	_newhour,f
  2364                           
  2365                           ;mainMaster.c: 331:                 if (newhour > 23){
  2366  03D3  3018               	movlw	24
  2367  03D4  0248               	subwf	_newhour,w
  2368  03D5  1C03               	skipc
  2369  03D6  2C09               	goto	l3867
  2370                           
  2371                           ;mainMaster.c: 332:                     newhour = 0;
  2372  03D7  01C8               	clrf	_newhour
  2373                           
  2374                           ;mainMaster.c: 335:             } else if (PORTDbits.RD3 == 1){
  2375  03D8  2C09               	goto	l3867
  2376  03D9                     l381:	
  2377  03D9  1D88               	btfss	8,3	;volatile
  2378  03DA  2BE5               	goto	l384
  2379                           
  2380                           ;mainMaster.c: 336:                 newhour--;
  2381  03DB  3001               	movlw	1
  2382  03DC  02C8               	subwf	_newhour,f
  2383                           
  2384                           ;mainMaster.c: 337:                 if (newhour == 255){
  2385  03DD  0A48               	incf	_newhour,w
  2386  03DE  1D03               	btfss	3,2
  2387  03DF  2C09               	goto	l3867
  2388                           
  2389                           ;mainMaster.c: 338:                     newhour = 23;
  2390  03E0  3017               	movlw	23
  2391  03E1  00BF               	movwf	??_main
  2392  03E2  083F               	movf	??_main,w
  2393  03E3  00C8               	movwf	_newhour
  2394  03E4  2C09               	goto	l3867
  2395  03E5                     l384:	
  2396  03E5  1D08               	btfss	8,2	;volatile
  2397  03E6  2BF1               	goto	l387
  2398                           
  2399                           ;mainMaster.c: 342:                 newmin++;
  2400  03E7  3001               	movlw	1
  2401  03E8  00BF               	movwf	??_main
  2402  03E9  083F               	movf	??_main,w
  2403  03EA  07C7               	addwf	_newmin,f
  2404                           
  2405                           ;mainMaster.c: 343:                 if (newmin > 59){
  2406  03EB  303C               	movlw	60
  2407  03EC  0247               	subwf	_newmin,w
  2408  03ED  1C03               	skipc
  2409  03EE  2C09               	goto	l3867
  2410                           
  2411                           ;mainMaster.c: 344:                     newmin = 0;
  2412  03EF  01C7               	clrf	_newmin
  2413  03F0  2C09               	goto	l3867
  2414  03F1                     l387:	
  2415  03F1  1C88               	btfss	8,1	;volatile
  2416  03F2  2BFD               	goto	l390
  2417                           
  2418                           ;mainMaster.c: 348:                 newmin--;
  2419  03F3  3001               	movlw	1
  2420  03F4  02C7               	subwf	_newmin,f
  2421                           
  2422                           ;mainMaster.c: 349:                 if (newmin == 255){
  2423  03F5  0A47               	incf	_newmin,w
  2424  03F6  1D03               	btfss	3,2
  2425  03F7  2C09               	goto	l3867
  2426                           
  2427                           ;mainMaster.c: 350:                     newmin = 59;
  2428  03F8  303B               	movlw	59
  2429  03F9  00BF               	movwf	??_main
  2430  03FA  083F               	movf	??_main,w
  2431  03FB  00C7               	movwf	_newmin
  2432  03FC  2C09               	goto	l3867
  2433  03FD                     l390:	
  2434  03FD  1C08               	btfss	8,0	;volatile
  2435  03FE  2C18               	goto	l3893
  2436                           
  2437                           ;mainMaster.c: 354:                 day1++;
  2438  03FF  3001               	movlw	1
  2439  0400  00BF               	movwf	??_main
  2440  0401  083F               	movf	??_main,w
  2441  0402  07F8               	addwf	_day1,f
  2442                           
  2443                           ;mainMaster.c: 355:                 if (day1 > 7){
  2444  0403  3008               	movlw	8
  2445  0404  0278               	subwf	_day1,w
  2446  0405  1C03               	skipc
  2447  0406  2C09               	goto	l3867
  2448                           
  2449                           ;mainMaster.c: 356:                     day1 = 1;
  2450  0407  01F8               	clrf	_day1
  2451  0408  0AF8               	incf	_day1,f
  2452  0409                     l3867:	
  2453                           
  2454                           ;mainMaster.c: 334:                 _delay((unsigned long)((100)*(8000000/4000.0)));
  2455  0409  3002               	movlw	2
  2456  040A  1283               	bcf	3,5	;RP0=0, select bank0
  2457  040B  1303               	bcf	3,6	;RP1=0, select bank0
  2458  040C  00C1               	movwf	??_main+2
  2459  040D  3004               	movlw	4
  2460  040E  00C0               	movwf	??_main+1
  2461  040F  30B9               	movlw	185
  2462  0410  00BF               	movwf	??_main
  2463  0411                     u4167:	
  2464  0411  0BBF               	decfsz	??_main,f
  2465  0412  2C11               	goto	u4167
  2466  0413  0BC0               	decfsz	??_main+1,f
  2467  0414  2C11               	goto	u4167
  2468  0415  0BC1               	decfsz	??_main+2,f
  2469  0416  2C11               	goto	u4167
  2470  0417  2C18               	nop2
  2471  0418                     l3893:	
  2472                           
  2473                           ;mainMaster.c: 361:             hour = ((newhour / 10) << 4) + (newhour % 10);
  2474  0418  300A               	movlw	10
  2475  0419  00F3               	movwf	___awdiv@divisor
  2476  041A  3000               	movlw	0
  2477  041B  00F4               	movwf	___awdiv@divisor+1
  2478  041C  1283               	bcf	3,5	;RP0=0, select bank0
  2479  041D  1303               	bcf	3,6	;RP1=0, select bank0
  2480  041E  0848               	movf	_newhour,w
  2481  041F  00BF               	movwf	??_main
  2482  0420  01C0               	clrf	??_main+1
  2483  0421  083F               	movf	??_main,w
  2484  0422  00F5               	movwf	___awdiv@dividend
  2485  0423  0840               	movf	??_main+1,w
  2486  0424  00F6               	movwf	___awdiv@dividend+1
  2487  0425  120A  158A  258A  120A  118A  	fcall	___awdiv
  2488  042A  0873               	movf	?___awdiv,w
  2489  042B  1283               	bcf	3,5	;RP0=0, select bank0
  2490  042C  1303               	bcf	3,6	;RP1=0, select bank0
  2491  042D  00C1               	movwf	??_main+2
  2492  042E  3004               	movlw	4
  2493  042F                     u4035:	
  2494  042F  1003               	clrc
  2495  0430  0DC1               	rlf	??_main+2,f
  2496  0431  3EFF               	addlw	-1
  2497  0432  1D03               	skipz
  2498  0433  2C2F               	goto	u4035
  2499  0434  300A               	movlw	10
  2500  0435  00F3               	movwf	___awmod@divisor
  2501  0436  3000               	movlw	0
  2502  0437  00F4               	movwf	___awmod@divisor+1
  2503  0438  0848               	movf	_newhour,w
  2504  0439  00C2               	movwf	??_main+3
  2505  043A  01C3               	clrf	??_main+4
  2506  043B  0842               	movf	??_main+3,w
  2507  043C  00F5               	movwf	___awmod@dividend
  2508  043D  0843               	movf	??_main+4,w
  2509  043E  00F6               	movwf	___awmod@dividend+1
  2510  043F  120A  158A  248E  120A  118A  	fcall	___awmod
  2511  0444  0873               	movf	?___awmod,w
  2512  0445  1283               	bcf	3,5	;RP0=0, select bank0
  2513  0446  1303               	bcf	3,6	;RP1=0, select bank0
  2514  0447  0741               	addwf	??_main+2,w
  2515  0448  00C4               	movwf	??_main+5
  2516  0449  0844               	movf	??_main+5,w
  2517  044A  00CB               	movwf	_hour
  2518                           
  2519                           ;mainMaster.c: 362:             min = ((newmin / 10) << 4) + (newmin % 10);
  2520  044B  300A               	movlw	10
  2521  044C  00F3               	movwf	___awdiv@divisor
  2522  044D  3000               	movlw	0
  2523  044E  00F4               	movwf	___awdiv@divisor+1
  2524  044F  0847               	movf	_newmin,w
  2525  0450  00BF               	movwf	??_main
  2526  0451  01C0               	clrf	??_main+1
  2527  0452  083F               	movf	??_main,w
  2528  0453  00F5               	movwf	___awdiv@dividend
  2529  0454  0840               	movf	??_main+1,w
  2530  0455  00F6               	movwf	___awdiv@dividend+1
  2531  0456  120A  158A  258A  120A  118A  	fcall	___awdiv
  2532  045B  0873               	movf	?___awdiv,w
  2533  045C  1283               	bcf	3,5	;RP0=0, select bank0
  2534  045D  1303               	bcf	3,6	;RP1=0, select bank0
  2535  045E  00C1               	movwf	??_main+2
  2536  045F  3004               	movlw	4
  2537  0460                     u4045:	
  2538  0460  1003               	clrc
  2539  0461  0DC1               	rlf	??_main+2,f
  2540  0462  3EFF               	addlw	-1
  2541  0463  1D03               	skipz
  2542  0464  2C60               	goto	u4045
  2543  0465  300A               	movlw	10
  2544  0466  00F3               	movwf	___awmod@divisor
  2545  0467  3000               	movlw	0
  2546  0468  00F4               	movwf	___awmod@divisor+1
  2547  0469  0847               	movf	_newmin,w
  2548  046A  00C2               	movwf	??_main+3
  2549  046B  01C3               	clrf	??_main+4
  2550  046C  0842               	movf	??_main+3,w
  2551  046D  00F5               	movwf	___awmod@dividend
  2552  046E  0843               	movf	??_main+4,w
  2553  046F  00F6               	movwf	___awmod@dividend+1
  2554  0470  120A  158A  248E  120A  118A  	fcall	___awmod
  2555  0475  0873               	movf	?___awmod,w
  2556  0476  1283               	bcf	3,5	;RP0=0, select bank0
  2557  0477  1303               	bcf	3,6	;RP1=0, select bank0
  2558  0478  0741               	addwf	??_main+2,w
  2559  0479  00C4               	movwf	??_main+5
  2560  047A  0844               	movf	??_main+5,w
  2561  047B  00CA               	movwf	_min
  2562                           
  2563                           ;mainMaster.c: 363:             write_RTC(hour, min, day1);
  2564  047C  084A               	movf	_min,w
  2565  047D  00BF               	movwf	??_main
  2566  047E  083F               	movf	??_main,w
  2567  047F  00F5               	movwf	write_RTC@minutes
  2568  0480  0878               	movf	_day1,w
  2569  0481  00C0               	movwf	??_main+1
  2570  0482  0840               	movf	??_main+1,w
  2571  0483  00F6               	movwf	write_RTC@day
  2572  0484  084B               	movf	_hour,w
  2573  0485  120A  158A  2448  120A  118A  	fcall	_write_RTC
  2574  048A  2867               	goto	l3615
  2575  048B                     __end_of_main:	
  2576                           
  2577                           	psect	text1
  2578  0C48                     __ptext1:	
  2579 ;; *************** function _write_RTC *****************
  2580 ;; Defined at:
  2581 ;;		line 404 in file "mainMaster.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;  hour            1    wreg     unsigned char 
  2584 ;;  minutes         1    5[COMMON] unsigned char 
  2585 ;;  day             1    6[COMMON] unsigned char 
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;  hour            1    7[COMMON] unsigned char 
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  1    wreg      void 
  2590 ;; Registers used:
  2591 ;;		wreg, status,2, status,0, pclath, cstack
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2597 ;;      Params:         2       0       0       0       0
  2598 ;;      Locals:         1       0       0       0       0
  2599 ;;      Temps:          0       2       0       0       0
  2600 ;;      Totals:         3       2       0       0       0
  2601 ;;Total ram usage:        5 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:    3
  2604 ;; This function calls:
  2605 ;;		_I2C_Master_Start
  2606 ;;		_I2C_Master_Stop
  2607 ;;		_I2C_Master_Write
  2608 ;; This function is called by:
  2609 ;;		_main
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           
  2614                           ;psect for function _write_RTC
  2615  0C48                     _write_RTC:	
  2616                           
  2617                           ;incstack = 0
  2618                           ; Regs used in _write_RTC: [wreg+status,2+status,0+pclath+cstack]
  2619                           ;write_RTC@hour stored from wreg
  2620  0C48  00F7               	movwf	write_RTC@hour
  2621                           
  2622                           ;mainMaster.c: 406:     I2C_Master_Start();
  2623  0C49  120A  158A  2114  120A  158A  	fcall	_I2C_Master_Start
  2624                           
  2625                           ;mainMaster.c: 407:     I2C_Master_Write(0xD0);
  2626  0C4E  30D0               	movlw	208
  2627  0C4F  00F3               	movwf	I2C_Master_Write@d
  2628  0C50  3000               	movlw	0
  2629  0C51  00F4               	movwf	I2C_Master_Write@d+1
  2630  0C52  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  2631                           
  2632                           ;mainMaster.c: 408:     I2C_Master_Write(0x01);
  2633  0C57  3001               	movlw	1
  2634  0C58  00F3               	movwf	I2C_Master_Write@d
  2635  0C59  3000               	movlw	0
  2636  0C5A  00F4               	movwf	I2C_Master_Write@d+1
  2637  0C5B  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  2638                           
  2639                           ;mainMaster.c: 409:     I2C_Master_Write(minutes);
  2640  0C60  0875               	movf	write_RTC@minutes,w
  2641  0C61  1283               	bcf	3,5	;RP0=0, select bank0
  2642  0C62  1303               	bcf	3,6	;RP1=0, select bank0
  2643  0C63  00A0               	movwf	??_write_RTC
  2644  0C64  01A1               	clrf	??_write_RTC+1
  2645  0C65  0820               	movf	??_write_RTC,w
  2646  0C66  00F3               	movwf	I2C_Master_Write@d
  2647  0C67  0821               	movf	??_write_RTC+1,w
  2648  0C68  00F4               	movwf	I2C_Master_Write@d+1
  2649  0C69  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  2650                           
  2651                           ;mainMaster.c: 410:     I2C_Master_Write(hour);
  2652  0C6E  0877               	movf	write_RTC@hour,w
  2653  0C6F  1283               	bcf	3,5	;RP0=0, select bank0
  2654  0C70  1303               	bcf	3,6	;RP1=0, select bank0
  2655  0C71  00A0               	movwf	??_write_RTC
  2656  0C72  01A1               	clrf	??_write_RTC+1
  2657  0C73  0820               	movf	??_write_RTC,w
  2658  0C74  00F3               	movwf	I2C_Master_Write@d
  2659  0C75  0821               	movf	??_write_RTC+1,w
  2660  0C76  00F4               	movwf	I2C_Master_Write@d+1
  2661  0C77  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  2662                           
  2663                           ;mainMaster.c: 411:     I2C_Master_Write(day);
  2664  0C7C  0876               	movf	write_RTC@day,w
  2665  0C7D  1283               	bcf	3,5	;RP0=0, select bank0
  2666  0C7E  1303               	bcf	3,6	;RP1=0, select bank0
  2667  0C7F  00A0               	movwf	??_write_RTC
  2668  0C80  01A1               	clrf	??_write_RTC+1
  2669  0C81  0820               	movf	??_write_RTC,w
  2670  0C82  00F3               	movwf	I2C_Master_Write@d
  2671  0C83  0821               	movf	??_write_RTC+1,w
  2672  0C84  00F4               	movwf	I2C_Master_Write@d+1
  2673  0C85  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  2674                           
  2675                           ;mainMaster.c: 412:     I2C_Master_Stop();
  2676  0C8A  120A  158A  211B   	fcall	_I2C_Master_Stop
  2677  0C8D  0008               	return
  2678  0C8E                     __end_of_write_RTC:	
  2679                           
  2680                           	psect	text2
  2681  0A90                     __ptext2:	
  2682 ;; *************** function _strcmp *****************
  2683 ;; Defined at:
  2684 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;  s1              1    wreg     PTR const unsigned char 
  2687 ;;		 -> time(6), temp(6), 
  2688 ;;  s2              1    3[COMMON] PTR const unsigned char 
  2689 ;;		 -> STR_13(6), STR_12(6), STR_11(6), 
  2690 ;; Auto vars:     Size  Location     Type
  2691 ;;  s1              1    1[BANK0 ] PTR const unsigned char 
  2692 ;;		 -> time(6), temp(6), 
  2693 ;;  r               1    0[BANK0 ] char 
  2694 ;; Return value:  Size  Location     Type
  2695 ;;                  2    3[COMMON] int 
  2696 ;; Registers used:
  2697 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2703 ;;      Params:         2       0       0       0       0
  2704 ;;      Locals:         0       2       0       0       0
  2705 ;;      Temps:          3       0       0       0       0
  2706 ;;      Totals:         5       2       0       0       0
  2707 ;;Total ram usage:        7 bytes
  2708 ;; Hardware stack levels used:    2
  2709 ;; Hardware stack levels required when called:    1
  2710 ;; This function calls:
  2711 ;;		Nothing
  2712 ;; This function is called by:
  2713 ;;		_main
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           
  2718                           ;psect for function _strcmp
  2719  0A90                     _strcmp:	
  2720                           
  2721                           ;incstack = 0
  2722                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  2723                           ;strcmp@s1 stored from wreg
  2724  0A90  1283               	bcf	3,5	;RP0=0, select bank0
  2725  0A91  1303               	bcf	3,6	;RP1=0, select bank0
  2726  0A92  00A1               	movwf	strcmp@s1
  2727  0A93  2AA1               	goto	l3545
  2728  0A94                     l3547:	
  2729  0A94  0821               	movf	strcmp@s1,w
  2730  0A95  0084               	movwf	4
  2731  0A96  0800               	movf	0,w
  2732  0A97  1903               	btfsc	3,2
  2733  0A98  2AB6               	goto	l3549
  2734  0A99  3001               	movlw	1
  2735  0A9A  00F5               	movwf	??_strcmp
  2736  0A9B  0875               	movf	??_strcmp,w
  2737  0A9C  07A1               	addwf	strcmp@s1,f
  2738  0A9D  3001               	movlw	1
  2739  0A9E  00F5               	movwf	??_strcmp
  2740  0A9F  0875               	movf	??_strcmp,w
  2741  0AA0  07F3               	addwf	strcmp@s2,f
  2742  0AA1                     l3545:	
  2743  0AA1  0873               	movf	strcmp@s2,w
  2744  0AA2  0084               	movwf	4
  2745  0AA3  120A  118A  250A  120A  158A  	fcall	stringdir
  2746  0AA8  00F5               	movwf	??_strcmp
  2747  0AA9  0821               	movf	strcmp@s1,w
  2748  0AAA  0084               	movwf	4
  2749  0AAB  1383               	bcf	3,7	;select IRP bank0
  2750  0AAC  0800               	movf	0,w
  2751  0AAD  00F6               	movwf	??_strcmp+1
  2752  0AAE  0875               	movf	??_strcmp,w
  2753  0AAF  0276               	subwf	??_strcmp+1,w
  2754  0AB0  00F7               	movwf	??_strcmp+2
  2755  0AB1  0877               	movf	??_strcmp+2,w
  2756  0AB2  00A0               	movwf	strcmp@r
  2757  0AB3  0820               	movf	strcmp@r,w
  2758  0AB4  1903               	btfsc	3,2
  2759  0AB5  2A94               	goto	l3547
  2760  0AB6                     l3549:	
  2761  0AB6  0820               	movf	strcmp@r,w
  2762  0AB7  00F3               	movwf	?_strcmp
  2763  0AB8  01F4               	clrf	?_strcmp+1
  2764  0AB9  1BF3               	btfsc	?_strcmp,7
  2765  0ABA  03F4               	decf	?_strcmp+1,f
  2766  0ABB  0008               	return
  2767  0ABC                     __end_of_strcmp:	
  2768                           
  2769                           	psect	text3
  2770  0D30                     __ptext3:	
  2771 ;; *************** function _setup *****************
  2772 ;; Defined at:
  2773 ;;		line 368 in file "mainMaster.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;		None
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2782 ;; Tracked objects:
  2783 ;;		On entry : 0/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2787 ;;      Params:         0       0       0       0       0
  2788 ;;      Locals:         0       0       0       0       0
  2789 ;;      Temps:          0       0       0       0       0
  2790 ;;      Totals:         0       0       0       0       0
  2791 ;;Total ram usage:        0 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; Hardware stack levels required when called:    4
  2794 ;; This function calls:
  2795 ;;		_I2C_Master_Init
  2796 ;;		_Lcd_Init
  2797 ;;		_UART_Init
  2798 ;;		_initOscilador
  2799 ;; This function is called by:
  2800 ;;		_main
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           
  2805                           ;psect for function _setup
  2806  0D30                     _setup:	
  2807                           
  2808                           ;mainMaster.c: 369:     initOscilador(7);
  2809                           
  2810                           ;incstack = 0
  2811                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2812  0D30  3007               	movlw	7
  2813  0D31  120A  158A  24DB  120A  158A  	fcall	_initOscilador
  2814                           
  2815                           ;mainMaster.c: 370:     ANSELH = 0;
  2816  0D36  1683               	bsf	3,5	;RP0=1, select bank3
  2817  0D37  1703               	bsf	3,6	;RP1=1, select bank3
  2818  0D38  0189               	clrf	9	;volatile
  2819                           
  2820                           ;mainMaster.c: 371:     ANSEL = 0;
  2821  0D39  0188               	clrf	8	;volatile
  2822                           
  2823                           ;mainMaster.c: 372:     TRISB = 0;
  2824  0D3A  1683               	bsf	3,5	;RP0=1, select bank1
  2825  0D3B  1303               	bcf	3,6	;RP1=0, select bank1
  2826  0D3C  0186               	clrf	6	;volatile
  2827                           
  2828                           ;mainMaster.c: 373:     TRISA = 0;
  2829  0D3D  0185               	clrf	5	;volatile
  2830                           
  2831                           ;mainMaster.c: 374:     TRISD = 0xFF;
  2832  0D3E  30FF               	movlw	255
  2833  0D3F  0088               	movwf	8	;volatile
  2834                           
  2835                           ;mainMaster.c: 375:     PORTB = 0;
  2836  0D40  1283               	bcf	3,5	;RP0=0, select bank0
  2837  0D41  1303               	bcf	3,6	;RP1=0, select bank0
  2838  0D42  0186               	clrf	6	;volatile
  2839                           
  2840                           ;mainMaster.c: 376:     PORTA = 0;
  2841  0D43  0185               	clrf	5	;volatile
  2842                           
  2843                           ;mainMaster.c: 377:     TRISC = 0x01;
  2844  0D44  3001               	movlw	1
  2845  0D45  1683               	bsf	3,5	;RP0=1, select bank1
  2846  0D46  1303               	bcf	3,6	;RP1=0, select bank1
  2847  0D47  0087               	movwf	7	;volatile
  2848                           
  2849                           ;mainMaster.c: 378:     PORTC = 0;
  2850  0D48  1283               	bcf	3,5	;RP0=0, select bank0
  2851  0D49  1303               	bcf	3,6	;RP1=0, select bank0
  2852  0D4A  0187               	clrf	7	;volatile
  2853                           
  2854                           ;mainMaster.c: 379:     PORTE = 0;
  2855  0D4B  0189               	clrf	9	;volatile
  2856                           
  2857                           ;mainMaster.c: 380:     TRISE = 0;
  2858  0D4C  1683               	bsf	3,5	;RP0=1, select bank1
  2859  0D4D  1303               	bcf	3,6	;RP1=0, select bank1
  2860  0D4E  0189               	clrf	9	;volatile
  2861                           
  2862                           ;mainMaster.c: 381:     i = 0;
  2863  0D4F  1283               	bcf	3,5	;RP0=0, select bank0
  2864  0D50  1303               	bcf	3,6	;RP1=0, select bank0
  2865  0D51  01D5               	clrf	_i
  2866                           
  2867                           ;mainMaster.c: 382:     door = 0;
  2868  0D52  01FA               	clrf	_door
  2869                           
  2870                           ;mainMaster.c: 383:     trip = 0;
  2871  0D53  01D8               	clrf	_trip
  2872                           
  2873                           ;mainMaster.c: 384:     alarm = 0;
  2874  0D54  01CF               	clrf	_alarm
  2875                           
  2876                           ;mainMaster.c: 385:     change2 = 0;
  2877  0D55  01D1               	clrf	_change2
  2878                           
  2879                           ;mainMaster.c: 386:     change3 = 0;
  2880  0D56  01D0               	clrf	_change3
  2881                           
  2882                           ;mainMaster.c: 387:     IR = 0;
  2883  0D57  01D6               	clrf	_IR
  2884                           
  2885                           ;mainMaster.c: 388:     PIR = 0;
  2886  0D58  01D7               	clrf	_PIR
  2887                           
  2888                           ;mainMaster.c: 389:     OPTION_REGbits.T0CS = 0;
  2889  0D59  1683               	bsf	3,5	;RP0=1, select bank1
  2890  0D5A  1303               	bcf	3,6	;RP1=0, select bank1
  2891  0D5B  1281               	bcf	1,5	;volatile
  2892                           
  2893                           ;mainMaster.c: 390:     OPTION_REGbits.T0SE = 0;
  2894  0D5C  1201               	bcf	1,4	;volatile
  2895                           
  2896                           ;mainMaster.c: 391:     OPTION_REGbits.PSA = 1;
  2897  0D5D  1581               	bsf	1,3	;volatile
  2898                           
  2899                           ;mainMaster.c: 392:     OPTION_REGbits.PS2 = 0;
  2900  0D5E  1101               	bcf	1,2	;volatile
  2901                           
  2902                           ;mainMaster.c: 393:     OPTION_REGbits.PS1 = 0;
  2903  0D5F  1081               	bcf	1,1	;volatile
  2904                           
  2905                           ;mainMaster.c: 394:     OPTION_REGbits.PS0 = 0;
  2906  0D60  1001               	bcf	1,0	;volatile
  2907                           
  2908                           ;mainMaster.c: 395:     TMR0 = 56;
  2909  0D61  3038               	movlw	56
  2910  0D62  1283               	bcf	3,5	;RP0=0, select bank0
  2911  0D63  1303               	bcf	3,6	;RP1=0, select bank0
  2912  0D64  0081               	movwf	1	;volatile
  2913                           
  2914                           ;mainMaster.c: 396:     INTCONbits.T0IF = 0;
  2915  0D65  110B               	bcf	11,2	;volatile
  2916                           
  2917                           ;mainMaster.c: 397:     INTCONbits.T0IE = 1;
  2918  0D66  168B               	bsf	11,5	;volatile
  2919                           
  2920                           ;mainMaster.c: 398:     INTCONbits.GIE = 1;
  2921  0D67  178B               	bsf	11,7	;volatile
  2922                           
  2923                           ;mainMaster.c: 399:     Lcd_Init();
  2924  0D68  120A  118A  248B  120A  158A  	fcall	_Lcd_Init
  2925                           
  2926                           ;mainMaster.c: 400:     UART_Init(9600);
  2927  0D6D  3000               	movlw	0
  2928  0D6E  1283               	bcf	3,5	;RP0=0, select bank0
  2929  0D6F  1303               	bcf	3,6	;RP1=0, select bank0
  2930  0D70  00B1               	movwf	UART_Init@baudrate+3
  2931  0D71  3000               	movlw	0
  2932  0D72  00B0               	movwf	UART_Init@baudrate+2
  2933  0D73  3025               	movlw	37
  2934  0D74  00AF               	movwf	UART_Init@baudrate+1
  2935  0D75  3080               	movlw	128
  2936  0D76  00AE               	movwf	UART_Init@baudrate
  2937  0D77  120A  118A  26D7  120A  158A  	fcall	_UART_Init
  2938                           
  2939                           ;mainMaster.c: 401:     I2C_Master_Init(100000);
  2940  0D7C  3000               	movlw	0
  2941  0D7D  1283               	bcf	3,5	;RP0=0, select bank0
  2942  0D7E  1303               	bcf	3,6	;RP1=0, select bank0
  2943  0D7F  00B0               	movwf	I2C_Master_Init@c+3
  2944  0D80  3001               	movlw	1
  2945  0D81  00AF               	movwf	I2C_Master_Init@c+2
  2946  0D82  3086               	movlw	134
  2947  0D83  00AE               	movwf	I2C_Master_Init@c+1
  2948  0D84  30A0               	movlw	160
  2949  0D85  00AD               	movwf	I2C_Master_Init@c
  2950  0D86  120A  158A  231E   	fcall	_I2C_Master_Init
  2951  0D89  0008               	return
  2952  0D8A                     __end_of_setup:	
  2953                           
  2954                           	psect	text4
  2955  0CDB                     __ptext4:	
  2956 ;; *************** function _initOscilador *****************
  2957 ;; Defined at:
  2958 ;;		line 11 in file "./Oscilador.h"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;  option          1    wreg     unsigned char 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  option          1    5[COMMON] unsigned char 
  2963 ;; Return value:  Size  Location     Type
  2964 ;;                  1    wreg      void 
  2965 ;; Registers used:
  2966 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2972 ;;      Params:         0       0       0       0       0
  2973 ;;      Locals:         1       0       0       0       0
  2974 ;;      Temps:          2       0       0       0       0
  2975 ;;      Totals:         3       0       0       0       0
  2976 ;;Total ram usage:        3 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; Hardware stack levels required when called:    1
  2979 ;; This function calls:
  2980 ;;		Nothing
  2981 ;; This function is called by:
  2982 ;;		_setup
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           
  2987                           ;psect for function _initOscilador
  2988  0CDB                     _initOscilador:	
  2989                           
  2990                           ;incstack = 0
  2991                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  2992                           ;initOscilador@option stored from wreg
  2993  0CDB  00F5               	movwf	initOscilador@option
  2994                           
  2995                           ;./Oscilador.h: 13: 
  2996  0CDC  2D0C               	goto	l2359
  2997  0CDD                     l2339:	
  2998                           
  2999                           ;./Oscilador.h: 16:         case 3:
  3000  0CDD  308F               	movlw	-113
  3001  0CDE  1683               	bsf	3,5	;RP0=1, select bank1
  3002  0CDF  1303               	bcf	3,6	;RP1=0, select bank1
  3003  0CE0  058F               	andwf	15,f	;volatile
  3004                           
  3005                           ;./Oscilador.h: 17: 
  3006  0CE1  2D2E               	goto	l201
  3007  0CE2                     l2341:	
  3008                           
  3009                           ;./Oscilador.h: 20:         case 4:
  3010  0CE2  1683               	bsf	3,5	;RP0=1, select bank1
  3011  0CE3  1303               	bcf	3,6	;RP1=0, select bank1
  3012  0CE4  080F               	movf	15,w	;volatile
  3013  0CE5  398F               	andlw	-113
  3014  0CE6  3810               	iorlw	16
  3015  0CE7  2D05               	goto	L16
  3016  0CE8                     l2343:	
  3017                           ;./Oscilador.h: 21: 
  3018                           
  3019                           
  3020                           ;./Oscilador.h: 24:         case 5:
  3021  0CE8  1683               	bsf	3,5	;RP0=1, select bank1
  3022  0CE9  1303               	bcf	3,6	;RP1=0, select bank1
  3023  0CEA  080F               	movf	15,w	;volatile
  3024  0CEB  398F               	andlw	-113
  3025  0CEC  3820               	iorlw	32
  3026  0CED  2D05               	goto	L16
  3027  0CEE                     l2345:	
  3028                           ;./Oscilador.h: 25: 
  3029                           
  3030                           
  3031                           ;./Oscilador.h: 28:         case 6:
  3032  0CEE  1683               	bsf	3,5	;RP0=1, select bank1
  3033  0CEF  1303               	bcf	3,6	;RP1=0, select bank1
  3034  0CF0  080F               	movf	15,w	;volatile
  3035  0CF1  398F               	andlw	-113
  3036  0CF2  3830               	iorlw	48
  3037  0CF3  2D05               	goto	L16
  3038  0CF4                     l2347:	
  3039                           ;./Oscilador.h: 29: 
  3040                           
  3041                           
  3042                           ;./Oscilador.h: 32:         case 7:
  3043  0CF4  1683               	bsf	3,5	;RP0=1, select bank1
  3044  0CF5  1303               	bcf	3,6	;RP1=0, select bank1
  3045  0CF6  080F               	movf	15,w	;volatile
  3046  0CF7  398F               	andlw	-113
  3047  0CF8  3840               	iorlw	64
  3048  0CF9  2D05               	goto	L16
  3049  0CFA                     l2349:	
  3050                           ;./Oscilador.h: 33: 
  3051                           
  3052                           
  3053                           ;./Oscilador.h: 36:         default:
  3054  0CFA  1683               	bsf	3,5	;RP0=1, select bank1
  3055  0CFB  1303               	bcf	3,6	;RP1=0, select bank1
  3056  0CFC  080F               	movf	15,w	;volatile
  3057  0CFD  398F               	andlw	-113
  3058  0CFE  3850               	iorlw	80
  3059  0CFF  2D05               	goto	L16
  3060  0D00                     l2351:	
  3061                           ;./Oscilador.h: 37: 
  3062                           
  3063                           
  3064                           ;./Oscilador.h: 40:     }
  3065  0D00  1683               	bsf	3,5	;RP0=1, select bank1
  3066  0D01  1303               	bcf	3,6	;RP1=0, select bank1
  3067  0D02  080F               	movf	15,w	;volatile
  3068  0D03  398F               	andlw	-113
  3069  0D04  3860               	iorlw	96
  3070  0D05                     L16:	
  3071  0D05  008F               	movwf	15	;volatile
  3072                           
  3073                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  3074  0D06  2D2E               	goto	l201
  3075  0D07                     l2353:	
  3076  0D07                     l2355:	
  3077  0D07  3070               	movlw	112
  3078  0D08  1683               	bsf	3,5	;RP0=1, select bank1
  3079  0D09  1303               	bcf	3,6	;RP1=0, select bank1
  3080  0D0A  048F               	iorwf	15,f	;volatile
  3081  0D0B  2D2E               	goto	l201
  3082  0D0C                     l2359:	
  3083  0D0C  0875               	movf	initOscilador@option,w
  3084  0D0D  00F3               	movwf	??_initOscilador
  3085  0D0E  01F4               	clrf	??_initOscilador+1
  3086                           
  3087                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3088                           ; Switch size 1, requested type "simple"
  3089                           ; Number of cases is 1, Range of values is 0 to 0
  3090                           ; switch strategies available:
  3091                           ; Name         Instructions Cycles
  3092                           ; simple_byte            4     3 (average)
  3093                           ; direct_byte           11     8 (fixed)
  3094                           ; jumptable            260     6 (fixed)
  3095                           ;	Chosen strategy is simple_byte
  3096  0D0F  0874               	movf	??_initOscilador+1,w
  3097  0D10  3A00               	xorlw	0	; case 0
  3098  0D11  1903               	skipnz
  3099  0D12  2D14               	goto	l3965
  3100  0D13  2D07               	goto	l2355
  3101  0D14                     l3965:	
  3102                           
  3103                           ; Switch size 1, requested type "simple"
  3104                           ; Number of cases is 8, Range of values is 0 to 7
  3105                           ; switch strategies available:
  3106                           ; Name         Instructions Cycles
  3107                           ; simple_byte           25    13 (average)
  3108                           ; direct_byte           32     8 (fixed)
  3109                           ; jumptable            260     6 (fixed)
  3110                           ;	Chosen strategy is simple_byte
  3111  0D14  0873               	movf	??_initOscilador,w
  3112  0D15  3A00               	xorlw	0	; case 0
  3113  0D16  1903               	skipnz
  3114  0D17  2CDD               	goto	l2339
  3115  0D18  3A01               	xorlw	1	; case 1
  3116  0D19  1903               	skipnz
  3117  0D1A  2CE2               	goto	l2341
  3118  0D1B  3A03               	xorlw	3	; case 2
  3119  0D1C  1903               	skipnz
  3120  0D1D  2CE8               	goto	l2343
  3121  0D1E  3A01               	xorlw	1	; case 3
  3122  0D1F  1903               	skipnz
  3123  0D20  2CEE               	goto	l2345
  3124  0D21  3A07               	xorlw	7	; case 4
  3125  0D22  1903               	skipnz
  3126  0D23  2CF4               	goto	l2347
  3127  0D24  3A01               	xorlw	1	; case 5
  3128  0D25  1903               	skipnz
  3129  0D26  2CFA               	goto	l2349
  3130  0D27  3A03               	xorlw	3	; case 6
  3131  0D28  1903               	skipnz
  3132  0D29  2D00               	goto	l2351
  3133  0D2A  3A01               	xorlw	1	; case 7
  3134  0D2B  1903               	skipnz
  3135  0D2C  2D07               	goto	l2353
  3136  0D2D  2D07               	goto	l2355
  3137  0D2E                     l201:	
  3138  0D2E  140F               	bsf	15,0	;volatile
  3139  0D2F  0008               	return
  3140  0D30                     __end_of_initOscilador:	
  3141                           
  3142                           	psect	text5
  3143  06D7                     __ptext5:	
  3144 ;; *************** function _UART_Init *****************
  3145 ;; Defined at:
  3146 ;;		line 8 in file "./UART.h"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  baudrate        4   14[BANK0 ] const long 
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  x               2    4[COMMON] unsigned int 
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  1    wreg      unsigned char 
  3153 ;; Registers used:
  3154 ;;		wreg, status,2, status,0, pclath, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3160 ;;      Params:         0       4       0       0       0
  3161 ;;      Locals:         2       0       0       0       0
  3162 ;;      Temps:          0      12       0       0       0
  3163 ;;      Totals:         2      16       0       0       0
  3164 ;;Total ram usage:       18 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:    2
  3167 ;; This function calls:
  3168 ;;		___aldiv
  3169 ;; This function is called by:
  3170 ;;		_setup
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           
  3175                           ;psect for function _UART_Init
  3176  06D7                     _UART_Init:	
  3177                           
  3178                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
  3179                           
  3180                           ;incstack = 0
  3181                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  3182  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  3183  06D8  1303               	bcf	3,6	;RP1=0, select bank0
  3184  06D9  082E               	movf	UART_Init@baudrate,w
  3185  06DA  00B2               	movwf	??_UART_Init
  3186  06DB  082F               	movf	UART_Init@baudrate+1,w
  3187  06DC  00B3               	movwf	??_UART_Init+1
  3188  06DD  0830               	movf	UART_Init@baudrate+2,w
  3189  06DE  00B4               	movwf	??_UART_Init+2
  3190  06DF  0831               	movf	UART_Init@baudrate+3,w
  3191  06E0  00B5               	movwf	??_UART_Init+3
  3192  06E1  3006               	movlw	6
  3193  06E2                     u3195:	
  3194  06E2  1003               	clrc
  3195  06E3  0DB2               	rlf	??_UART_Init,f
  3196  06E4  0DB3               	rlf	??_UART_Init+1,f
  3197  06E5  0DB4               	rlf	??_UART_Init+2,f
  3198  06E6  0DB5               	rlf	??_UART_Init+3,f
  3199  06E7  3EFF               	addlw	-1
  3200  06E8  1D03               	skipz
  3201  06E9  2EE2               	goto	u3195
  3202  06EA  0835               	movf	??_UART_Init+3,w
  3203  06EB  00A3               	movwf	___aldiv@divisor+3
  3204  06EC  0834               	movf	??_UART_Init+2,w
  3205  06ED  00A2               	movwf	___aldiv@divisor+2
  3206  06EE  0833               	movf	??_UART_Init+1,w
  3207  06EF  00A1               	movwf	___aldiv@divisor+1
  3208  06F0  0832               	movf	??_UART_Init,w
  3209  06F1  00A0               	movwf	___aldiv@divisor
  3210  06F2  082E               	movf	UART_Init@baudrate,w
  3211  06F3  00B6               	movwf	??_UART_Init+4
  3212  06F4  082F               	movf	UART_Init@baudrate+1,w
  3213  06F5  00B7               	movwf	??_UART_Init+5
  3214  06F6  0830               	movf	UART_Init@baudrate+2,w
  3215  06F7  00B8               	movwf	??_UART_Init+6
  3216  06F8  0831               	movf	UART_Init@baudrate+3,w
  3217  06F9  00B9               	movwf	??_UART_Init+7
  3218  06FA  3006               	movlw	6
  3219  06FB                     u3205:	
  3220  06FB  1003               	clrc
  3221  06FC  0DB6               	rlf	??_UART_Init+4,f
  3222  06FD  0DB7               	rlf	??_UART_Init+5,f
  3223  06FE  0DB8               	rlf	??_UART_Init+6,f
  3224  06FF  0DB9               	rlf	??_UART_Init+7,f
  3225  0700  3EFF               	addlw	-1
  3226  0701  1D03               	skipz
  3227  0702  2EFB               	goto	u3205
  3228  0703  3000               	movlw	0
  3229  0704  00BA               	movwf	??_UART_Init+8
  3230  0705  3012               	movlw	18
  3231  0706  00BB               	movwf	??_UART_Init+9
  3232  0707  307A               	movlw	122
  3233  0708  00BC               	movwf	??_UART_Init+10
  3234  0709  3000               	movlw	0
  3235  070A  00BD               	movwf	??_UART_Init+11
  3236  070B  0836               	movf	??_UART_Init+4,w
  3237  070C  02BA               	subwf	??_UART_Init+8,f
  3238  070D  0837               	movf	??_UART_Init+5,w
  3239  070E  1C03               	skipc
  3240  070F  0F37               	incfsz	??_UART_Init+5,w
  3241  0710  2F12               	goto	u3211
  3242  0711  2F13               	goto	u3212
  3243  0712                     u3211:	
  3244  0712  02BB               	subwf	??_UART_Init+9,f
  3245  0713                     u3212:	
  3246  0713  0838               	movf	??_UART_Init+6,w
  3247  0714  1C03               	skipc
  3248  0715  0F38               	incfsz	??_UART_Init+6,w
  3249  0716  2F18               	goto	u3213
  3250  0717  2F19               	goto	u3214
  3251  0718                     u3213:	
  3252  0718  02BC               	subwf	??_UART_Init+10,f
  3253  0719                     u3214:	
  3254  0719  0839               	movf	??_UART_Init+7,w
  3255  071A  1C03               	skipc
  3256  071B  0F39               	incfsz	??_UART_Init+7,w
  3257  071C  2F1E               	goto	u3215
  3258  071D  2F1F               	goto	u3216
  3259  071E                     u3215:	
  3260  071E  02BD               	subwf	??_UART_Init+11,f
  3261  071F                     u3216:	
  3262  071F  083D               	movf	??_UART_Init+11,w
  3263  0720  00A7               	movwf	___aldiv@dividend+3
  3264  0721  083C               	movf	??_UART_Init+10,w
  3265  0722  00A6               	movwf	___aldiv@dividend+2
  3266  0723  083B               	movf	??_UART_Init+9,w
  3267  0724  00A5               	movwf	___aldiv@dividend+1
  3268  0725  083A               	movf	??_UART_Init+8,w
  3269  0726  00A4               	movwf	___aldiv@dividend
  3270  0727  120A  158A  26CE  120A  118A  	fcall	___aldiv
  3271  072C  1283               	bcf	3,5	;RP0=0, select bank0
  3272  072D  1303               	bcf	3,6	;RP1=0, select bank0
  3273  072E  0821               	movf	?___aldiv+1,w
  3274  072F  00F5               	movwf	UART_Init@x+1
  3275  0730  0820               	movf	?___aldiv,w
  3276  0731  00F4               	movwf	UART_Init@x
  3277                           
  3278                           ;./UART.h: 12:  if(x>255)
  3279  0732  3001               	movlw	1
  3280  0733  0275               	subwf	UART_Init@x+1,w
  3281  0734  3000               	movlw	0
  3282  0735  1903               	skipnz
  3283  0736  0274               	subwf	UART_Init@x,w
  3284  0737  1C03               	skipc
  3285  0738  2F95               	goto	l3299
  3286                           
  3287                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  3288  0739  082E               	movf	UART_Init@baudrate,w
  3289  073A  00B2               	movwf	??_UART_Init
  3290  073B  082F               	movf	UART_Init@baudrate+1,w
  3291  073C  00B3               	movwf	??_UART_Init+1
  3292  073D  0830               	movf	UART_Init@baudrate+2,w
  3293  073E  00B4               	movwf	??_UART_Init+2
  3294  073F  0831               	movf	UART_Init@baudrate+3,w
  3295  0740  00B5               	movwf	??_UART_Init+3
  3296  0741  3004               	movlw	4
  3297  0742                     u3235:	
  3298  0742  1003               	clrc
  3299  0743  0DB2               	rlf	??_UART_Init,f
  3300  0744  0DB3               	rlf	??_UART_Init+1,f
  3301  0745  0DB4               	rlf	??_UART_Init+2,f
  3302  0746  0DB5               	rlf	??_UART_Init+3,f
  3303  0747  3EFF               	addlw	-1
  3304  0748  1D03               	skipz
  3305  0749  2F42               	goto	u3235
  3306  074A  0835               	movf	??_UART_Init+3,w
  3307  074B  00A3               	movwf	___aldiv@divisor+3
  3308  074C  0834               	movf	??_UART_Init+2,w
  3309  074D  00A2               	movwf	___aldiv@divisor+2
  3310  074E  0833               	movf	??_UART_Init+1,w
  3311  074F  00A1               	movwf	___aldiv@divisor+1
  3312  0750  0832               	movf	??_UART_Init,w
  3313  0751  00A0               	movwf	___aldiv@divisor
  3314  0752  082E               	movf	UART_Init@baudrate,w
  3315  0753  00B6               	movwf	??_UART_Init+4
  3316  0754  082F               	movf	UART_Init@baudrate+1,w
  3317  0755  00B7               	movwf	??_UART_Init+5
  3318  0756  0830               	movf	UART_Init@baudrate+2,w
  3319  0757  00B8               	movwf	??_UART_Init+6
  3320  0758  0831               	movf	UART_Init@baudrate+3,w
  3321  0759  00B9               	movwf	??_UART_Init+7
  3322  075A  3004               	movlw	4
  3323  075B                     u3245:	
  3324  075B  1003               	clrc
  3325  075C  0DB6               	rlf	??_UART_Init+4,f
  3326  075D  0DB7               	rlf	??_UART_Init+5,f
  3327  075E  0DB8               	rlf	??_UART_Init+6,f
  3328  075F  0DB9               	rlf	??_UART_Init+7,f
  3329  0760  3EFF               	addlw	-1
  3330  0761  1D03               	skipz
  3331  0762  2F5B               	goto	u3245
  3332  0763  3000               	movlw	0
  3333  0764  00BA               	movwf	??_UART_Init+8
  3334  0765  3012               	movlw	18
  3335  0766  00BB               	movwf	??_UART_Init+9
  3336  0767  307A               	movlw	122
  3337  0768  00BC               	movwf	??_UART_Init+10
  3338  0769  3000               	movlw	0
  3339  076A  00BD               	movwf	??_UART_Init+11
  3340  076B  0836               	movf	??_UART_Init+4,w
  3341  076C  02BA               	subwf	??_UART_Init+8,f
  3342  076D  0837               	movf	??_UART_Init+5,w
  3343  076E  1C03               	skipc
  3344  076F  0F37               	incfsz	??_UART_Init+5,w
  3345  0770  2F72               	goto	u3251
  3346  0771  2F73               	goto	u3252
  3347  0772                     u3251:	
  3348  0772  02BB               	subwf	??_UART_Init+9,f
  3349  0773                     u3252:	
  3350  0773  0838               	movf	??_UART_Init+6,w
  3351  0774  1C03               	skipc
  3352  0775  0F38               	incfsz	??_UART_Init+6,w
  3353  0776  2F78               	goto	u3253
  3354  0777  2F79               	goto	u3254
  3355  0778                     u3253:	
  3356  0778  02BC               	subwf	??_UART_Init+10,f
  3357  0779                     u3254:	
  3358  0779  0839               	movf	??_UART_Init+7,w
  3359  077A  1C03               	skipc
  3360  077B  0F39               	incfsz	??_UART_Init+7,w
  3361  077C  2F7E               	goto	u3255
  3362  077D  2F7F               	goto	u3256
  3363  077E                     u3255:	
  3364  077E  02BD               	subwf	??_UART_Init+11,f
  3365  077F                     u3256:	
  3366  077F  083D               	movf	??_UART_Init+11,w
  3367  0780  00A7               	movwf	___aldiv@dividend+3
  3368  0781  083C               	movf	??_UART_Init+10,w
  3369  0782  00A6               	movwf	___aldiv@dividend+2
  3370  0783  083B               	movf	??_UART_Init+9,w
  3371  0784  00A5               	movwf	___aldiv@dividend+1
  3372  0785  083A               	movf	??_UART_Init+8,w
  3373  0786  00A4               	movwf	___aldiv@dividend
  3374  0787  120A  158A  26CE  120A  118A  	fcall	___aldiv
  3375  078C  1283               	bcf	3,5	;RP0=0, select bank0
  3376  078D  1303               	bcf	3,6	;RP1=0, select bank0
  3377  078E  0821               	movf	?___aldiv+1,w
  3378  078F  00F5               	movwf	UART_Init@x+1
  3379  0790  0820               	movf	?___aldiv,w
  3380  0791  00F4               	movwf	UART_Init@x
  3381                           
  3382                           ;./UART.h: 15:   BRGH = 1;
  3383  0792  1683               	bsf	3,5	;RP0=1, select bank1
  3384  0793  1303               	bcf	3,6	;RP1=0, select bank1
  3385  0794  1518               	bsf	24,2	;volatile
  3386  0795                     l3299:	
  3387                           
  3388                           ;./UART.h: 17:  if(x<256)
  3389  0795  3001               	movlw	1
  3390  0796  0275               	subwf	UART_Init@x+1,w
  3391  0797  3000               	movlw	0
  3392  0798  1903               	skipnz
  3393  0799  0274               	subwf	UART_Init@x,w
  3394  079A  1803               	skipnc
  3395  079B  0008               	return
  3396                           
  3397                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  3398  079C  0874               	movf	UART_Init@x,w
  3399  079D  1683               	bsf	3,5	;RP0=1, select bank1
  3400  079E  1303               	bcf	3,6	;RP1=0, select bank1
  3401  079F  0099               	movwf	25	;volatile
  3402                           
  3403                           ;./UART.h: 20:    SYNC = 0;
  3404  07A0  1218               	bcf	24,4	;volatile
  3405                           
  3406                           ;./UART.h: 21:    SPEN = 1;
  3407  07A1  1283               	bcf	3,5	;RP0=0, select bank0
  3408  07A2  1303               	bcf	3,6	;RP1=0, select bank0
  3409  07A3  1798               	bsf	24,7	;volatile
  3410                           
  3411                           ;./UART.h: 22:           TRISC7 = 1;
  3412  07A4  1683               	bsf	3,5	;RP0=1, select bank1
  3413  07A5  1303               	bcf	3,6	;RP1=0, select bank1
  3414  07A6  1787               	bsf	7,7	;volatile
  3415                           
  3416                           ;./UART.h: 23:           TRISC6 = 1;
  3417  07A7  1707               	bsf	7,6	;volatile
  3418                           
  3419                           ;./UART.h: 24:           CREN = 1;
  3420  07A8  1283               	bcf	3,5	;RP0=0, select bank0
  3421  07A9  1303               	bcf	3,6	;RP1=0, select bank0
  3422  07AA  1618               	bsf	24,4	;volatile
  3423                           
  3424                           ;./UART.h: 25:           TXEN = 1;
  3425  07AB  1683               	bsf	3,5	;RP0=1, select bank1
  3426  07AC  1303               	bcf	3,6	;RP1=0, select bank1
  3427  07AD  1698               	bsf	24,5	;volatile
  3428  07AE  0008               	return
  3429  07AF                     __end_of_UART_Init:	
  3430                           
  3431                           	psect	text6
  3432  0ECE                     __ptext6:	
  3433 ;; *************** function ___aldiv *****************
  3434 ;; Defined at:
  3435 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;  divisor         4    0[BANK0 ] long 
  3438 ;;  dividend        4    4[BANK0 ] long 
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;  quotient        4   10[BANK0 ] long 
  3441 ;;  sign            1    9[BANK0 ] unsigned char 
  3442 ;;  counter         1    8[BANK0 ] unsigned char 
  3443 ;; Return value:  Size  Location     Type
  3444 ;;                  4    0[BANK0 ] long 
  3445 ;; Registers used:
  3446 ;;		wreg, status,2, status,0
  3447 ;; Tracked objects:
  3448 ;;		On entry : 0/0
  3449 ;;		On exit  : 0/0
  3450 ;;		Unchanged: 0/0
  3451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3452 ;;      Params:         0       8       0       0       0
  3453 ;;      Locals:         0       6       0       0       0
  3454 ;;      Temps:          1       0       0       0       0
  3455 ;;      Totals:         1      14       0       0       0
  3456 ;;Total ram usage:       15 bytes
  3457 ;; Hardware stack levels used:    1
  3458 ;; Hardware stack levels required when called:    1
  3459 ;; This function calls:
  3460 ;;		Nothing
  3461 ;; This function is called by:
  3462 ;;		_UART_Init
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           
  3467                           ;psect for function ___aldiv
  3468  0ECE                     ___aldiv:	
  3469                           
  3470                           ;incstack = 0
  3471                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3472  0ECE  1283               	bcf	3,5	;RP0=0, select bank0
  3473  0ECF  1303               	bcf	3,6	;RP1=0, select bank0
  3474  0ED0  01A9               	clrf	___aldiv@sign
  3475  0ED1  1FA3               	btfss	___aldiv@divisor+3,7
  3476  0ED2  2EE0               	goto	l611
  3477  0ED3  09A0               	comf	___aldiv@divisor,f
  3478  0ED4  09A1               	comf	___aldiv@divisor+1,f
  3479  0ED5  09A2               	comf	___aldiv@divisor+2,f
  3480  0ED6  09A3               	comf	___aldiv@divisor+3,f
  3481  0ED7  0AA0               	incf	___aldiv@divisor,f
  3482  0ED8  1903               	skipnz
  3483  0ED9  0AA1               	incf	___aldiv@divisor+1,f
  3484  0EDA  1903               	skipnz
  3485  0EDB  0AA2               	incf	___aldiv@divisor+2,f
  3486  0EDC  1903               	skipnz
  3487  0EDD  0AA3               	incf	___aldiv@divisor+3,f
  3488  0EDE  01A9               	clrf	___aldiv@sign
  3489  0EDF  0AA9               	incf	___aldiv@sign,f
  3490  0EE0                     l611:	
  3491  0EE0  1FA7               	btfss	___aldiv@dividend+3,7
  3492  0EE1  2EF1               	goto	l3181
  3493  0EE2  09A4               	comf	___aldiv@dividend,f
  3494  0EE3  09A5               	comf	___aldiv@dividend+1,f
  3495  0EE4  09A6               	comf	___aldiv@dividend+2,f
  3496  0EE5  09A7               	comf	___aldiv@dividend+3,f
  3497  0EE6  0AA4               	incf	___aldiv@dividend,f
  3498  0EE7  1903               	skipnz
  3499  0EE8  0AA5               	incf	___aldiv@dividend+1,f
  3500  0EE9  1903               	skipnz
  3501  0EEA  0AA6               	incf	___aldiv@dividend+2,f
  3502  0EEB  1903               	skipnz
  3503  0EEC  0AA7               	incf	___aldiv@dividend+3,f
  3504  0EED  3001               	movlw	1
  3505  0EEE  00F3               	movwf	??___aldiv
  3506  0EEF  0873               	movf	??___aldiv,w
  3507  0EF0  06A9               	xorwf	___aldiv@sign,f
  3508  0EF1                     l3181:	
  3509  0EF1  3000               	movlw	0
  3510  0EF2  00AD               	movwf	___aldiv@quotient+3
  3511  0EF3  3000               	movlw	0
  3512  0EF4  00AC               	movwf	___aldiv@quotient+2
  3513  0EF5  3000               	movlw	0
  3514  0EF6  00AB               	movwf	___aldiv@quotient+1
  3515  0EF7  3000               	movlw	0
  3516  0EF8  00AA               	movwf	___aldiv@quotient
  3517  0EF9  0823               	movf	___aldiv@divisor+3,w
  3518  0EFA  0422               	iorwf	___aldiv@divisor+2,w
  3519  0EFB  0421               	iorwf	___aldiv@divisor+1,w
  3520  0EFC  0420               	iorwf	___aldiv@divisor,w
  3521  0EFD  1903               	skipnz
  3522  0EFE  2F46               	goto	l3203
  3523  0EFF  01A8               	clrf	___aldiv@counter
  3524  0F00  0AA8               	incf	___aldiv@counter,f
  3525  0F01                     l3189:	
  3526  0F01  1BA3               	btfsc	___aldiv@divisor+3,7
  3527  0F02  2F11               	goto	l3191
  3528  0F03  3001               	movlw	1
  3529  0F04  00F3               	movwf	??___aldiv
  3530  0F05                     u3035:	
  3531  0F05  1003               	clrc
  3532  0F06  0DA0               	rlf	___aldiv@divisor,f
  3533  0F07  0DA1               	rlf	___aldiv@divisor+1,f
  3534  0F08  0DA2               	rlf	___aldiv@divisor+2,f
  3535  0F09  0DA3               	rlf	___aldiv@divisor+3,f
  3536  0F0A  0BF3               	decfsz	??___aldiv,f
  3537  0F0B  2F05               	goto	u3035
  3538  0F0C  3001               	movlw	1
  3539  0F0D  00F3               	movwf	??___aldiv
  3540  0F0E  0873               	movf	??___aldiv,w
  3541  0F0F  07A8               	addwf	___aldiv@counter,f
  3542  0F10  2F01               	goto	l3189
  3543  0F11                     l3191:	
  3544  0F11  3001               	movlw	1
  3545  0F12  00F3               	movwf	??___aldiv
  3546  0F13                     u3055:	
  3547  0F13  1003               	clrc
  3548  0F14  0DAA               	rlf	___aldiv@quotient,f
  3549  0F15  0DAB               	rlf	___aldiv@quotient+1,f
  3550  0F16  0DAC               	rlf	___aldiv@quotient+2,f
  3551  0F17  0DAD               	rlf	___aldiv@quotient+3,f
  3552  0F18  0BF3               	decfsz	??___aldiv,f
  3553  0F19  2F13               	goto	u3055
  3554  0F1A  0823               	movf	___aldiv@divisor+3,w
  3555  0F1B  0227               	subwf	___aldiv@dividend+3,w
  3556  0F1C  1D03               	skipz
  3557  0F1D  2F28               	goto	u3065
  3558  0F1E  0822               	movf	___aldiv@divisor+2,w
  3559  0F1F  0226               	subwf	___aldiv@dividend+2,w
  3560  0F20  1D03               	skipz
  3561  0F21  2F28               	goto	u3065
  3562  0F22  0821               	movf	___aldiv@divisor+1,w
  3563  0F23  0225               	subwf	___aldiv@dividend+1,w
  3564  0F24  1D03               	skipz
  3565  0F25  2F28               	goto	u3065
  3566  0F26  0820               	movf	___aldiv@divisor,w
  3567  0F27  0224               	subwf	___aldiv@dividend,w
  3568  0F28                     u3065:	
  3569  0F28  1C03               	skipc
  3570  0F29  2F39               	goto	l3199
  3571  0F2A  0820               	movf	___aldiv@divisor,w
  3572  0F2B  02A4               	subwf	___aldiv@dividend,f
  3573  0F2C  0821               	movf	___aldiv@divisor+1,w
  3574  0F2D  1C03               	skipc
  3575  0F2E  0F21               	incfsz	___aldiv@divisor+1,w
  3576  0F2F  02A5               	subwf	___aldiv@dividend+1,f
  3577  0F30  0822               	movf	___aldiv@divisor+2,w
  3578  0F31  1C03               	skipc
  3579  0F32  0F22               	incfsz	___aldiv@divisor+2,w
  3580  0F33  02A6               	subwf	___aldiv@dividend+2,f
  3581  0F34  0823               	movf	___aldiv@divisor+3,w
  3582  0F35  1C03               	skipc
  3583  0F36  0F23               	incfsz	___aldiv@divisor+3,w
  3584  0F37  02A7               	subwf	___aldiv@dividend+3,f
  3585  0F38  142A               	bsf	___aldiv@quotient,0
  3586  0F39                     l3199:	
  3587  0F39  3001               	movlw	1
  3588  0F3A                     u3075:	
  3589  0F3A  1003               	clrc
  3590  0F3B  0CA3               	rrf	___aldiv@divisor+3,f
  3591  0F3C  0CA2               	rrf	___aldiv@divisor+2,f
  3592  0F3D  0CA1               	rrf	___aldiv@divisor+1,f
  3593  0F3E  0CA0               	rrf	___aldiv@divisor,f
  3594  0F3F  3EFF               	addlw	-1
  3595  0F40  1D03               	skipz
  3596  0F41  2F3A               	goto	u3075
  3597  0F42  3001               	movlw	1
  3598  0F43  02A8               	subwf	___aldiv@counter,f
  3599  0F44  1D03               	btfss	3,2
  3600  0F45  2F11               	goto	l3191
  3601  0F46                     l3203:	
  3602  0F46  0829               	movf	___aldiv@sign,w
  3603  0F47  1903               	btfsc	3,2
  3604  0F48  2F54               	goto	l3207
  3605  0F49  09AA               	comf	___aldiv@quotient,f
  3606  0F4A  09AB               	comf	___aldiv@quotient+1,f
  3607  0F4B  09AC               	comf	___aldiv@quotient+2,f
  3608  0F4C  09AD               	comf	___aldiv@quotient+3,f
  3609  0F4D  0AAA               	incf	___aldiv@quotient,f
  3610  0F4E  1903               	skipnz
  3611  0F4F  0AAB               	incf	___aldiv@quotient+1,f
  3612  0F50  1903               	skipnz
  3613  0F51  0AAC               	incf	___aldiv@quotient+2,f
  3614  0F52  1903               	skipnz
  3615  0F53  0AAD               	incf	___aldiv@quotient+3,f
  3616  0F54                     l3207:	
  3617  0F54  082D               	movf	___aldiv@quotient+3,w
  3618  0F55  00A3               	movwf	?___aldiv+3
  3619  0F56  082C               	movf	___aldiv@quotient+2,w
  3620  0F57  00A2               	movwf	?___aldiv+2
  3621  0F58  082B               	movf	___aldiv@quotient+1,w
  3622  0F59  00A1               	movwf	?___aldiv+1
  3623  0F5A  082A               	movf	___aldiv@quotient,w
  3624  0F5B  00A0               	movwf	?___aldiv
  3625  0F5C  0008               	return
  3626  0F5D                     __end_of___aldiv:	
  3627                           
  3628                           	psect	text7
  3629  048B                     __ptext7:	
  3630 ;; *************** function _Lcd_Init *****************
  3631 ;; Defined at:
  3632 ;;		line 65 in file "./LCD4bits.h"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      void 
  3639 ;; Registers used:
  3640 ;;		wreg, status,2, status,0, pclath, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3646 ;;      Params:         0       0       0       0       0
  3647 ;;      Locals:         0       0       0       0       0
  3648 ;;      Temps:          0       2       0       0       0
  3649 ;;      Totals:         0       2       0       0       0
  3650 ;;Total ram usage:        2 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    3
  3653 ;; This function calls:
  3654 ;;		_Lcd_Cmd
  3655 ;;		_Lcd_Port
  3656 ;; This function is called by:
  3657 ;;		_setup
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661                           
  3662                           ;psect for function _Lcd_Init
  3663  048B                     _Lcd_Init:	
  3664                           
  3665                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  3666                           
  3667                           ;incstack = 0
  3668                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3669  048B  3000               	movlw	0
  3670  048C  120A  158A  2157  120A  118A  	fcall	_Lcd_Port
  3671                           
  3672                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  3673  0491  3034               	movlw	52
  3674  0492  1283               	bcf	3,5	;RP0=0, select bank0
  3675  0493  1303               	bcf	3,6	;RP1=0, select bank0
  3676  0494  00A1               	movwf	??_Lcd_Init+1
  3677  0495  30F1               	movlw	241
  3678  0496  00A0               	movwf	??_Lcd_Init
  3679  0497                     u4177:	
  3680  0497  0BA0               	decfsz	??_Lcd_Init,f
  3681  0498  2C97               	goto	u4177
  3682  0499  0BA1               	decfsz	??_Lcd_Init+1,f
  3683  049A  2C97               	goto	u4177
  3684                           
  3685                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  3686  049B  3003               	movlw	3
  3687  049C  120A  158A  2171  120A  118A  	fcall	_Lcd_Cmd
  3688                           
  3689                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  3690  04A1  300D               	movlw	13
  3691  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  3692  04A3  1303               	bcf	3,6	;RP1=0, select bank0
  3693  04A4  00A1               	movwf	??_Lcd_Init+1
  3694  04A5  30FB               	movlw	251
  3695  04A6  00A0               	movwf	??_Lcd_Init
  3696  04A7                     u4187:	
  3697  04A7  0BA0               	decfsz	??_Lcd_Init,f
  3698  04A8  2CA7               	goto	u4187
  3699  04A9  0BA1               	decfsz	??_Lcd_Init+1,f
  3700  04AA  2CA7               	goto	u4187
  3701                           
  3702                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  3703  04AB  3003               	movlw	3
  3704  04AC  120A  158A  2171  120A  118A  	fcall	_Lcd_Cmd
  3705                           
  3706                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  3707  04B1  301D               	movlw	29
  3708  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  3709  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  3710  04B4  00A1               	movwf	??_Lcd_Init+1
  3711  04B5  3090               	movlw	144
  3712  04B6  00A0               	movwf	??_Lcd_Init
  3713  04B7                     u4197:	
  3714  04B7  0BA0               	decfsz	??_Lcd_Init,f
  3715  04B8  2CB7               	goto	u4197
  3716  04B9  0BA1               	decfsz	??_Lcd_Init+1,f
  3717  04BA  2CB7               	goto	u4197
  3718  04BB  0000               	nop
  3719                           
  3720                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  3721  04BC  3003               	movlw	3
  3722  04BD  120A  158A  2171  120A  118A  	fcall	_Lcd_Cmd
  3723                           
  3724                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  3725  04C2  3002               	movlw	2
  3726  04C3  120A  158A  2171  120A  118A  	fcall	_Lcd_Cmd
  3727                           
  3728                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  3729  04C8  3002               	movlw	2
  3730  04C9  120A  158A  2171  120A  118A  	fcall	_Lcd_Cmd
  3731                           
  3732                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  3733  04CE  3008               	movlw	8
  3734  04CF  120A  158A  2171  120A  118A  	fcall	_Lcd_Cmd
  3735                           
  3736                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  3737  04D4  3000               	movlw	0
  3738  04D5  120A  158A  2171  120A  118A  	fcall	_Lcd_Cmd
  3739                           
  3740                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  3741  04DA  300C               	movlw	12
  3742  04DB  120A  158A  2171  120A  118A  	fcall	_Lcd_Cmd
  3743                           
  3744                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  3745  04E0  3000               	movlw	0
  3746  04E1  120A  158A  2171  120A  118A  	fcall	_Lcd_Cmd
  3747                           
  3748                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  3749  04E6  3006               	movlw	6
  3750  04E7  120A  158A  2171   	fcall	_Lcd_Cmd
  3751  04EA  0008               	return
  3752  04EB                     __end_of_Lcd_Init:	
  3753                           
  3754                           	psect	text8
  3755  0B1E                     __ptext8:	
  3756 ;; *************** function _I2C_Master_Init *****************
  3757 ;; Defined at:
  3758 ;;		line 16 in file "./I2C.h"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;  c               4   13[BANK0 ] const unsigned long 
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;		None
  3763 ;; Return value:  Size  Location     Type
  3764 ;;                  1    wreg      void 
  3765 ;; Registers used:
  3766 ;;		wreg, status,2, status,0, pclath, cstack
  3767 ;; Tracked objects:
  3768 ;;		On entry : 0/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: 0/0
  3771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3772 ;;      Params:         0       4       0       0       0
  3773 ;;      Locals:         0       0       0       0       0
  3774 ;;      Temps:          4       0       0       0       0
  3775 ;;      Totals:         4       4       0       0       0
  3776 ;;Total ram usage:        8 bytes
  3777 ;; Hardware stack levels used:    1
  3778 ;; Hardware stack levels required when called:    2
  3779 ;; This function calls:
  3780 ;;		___lldiv
  3781 ;; This function is called by:
  3782 ;;		_setup
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786                           
  3787                           ;psect for function _I2C_Master_Init
  3788  0B1E                     _I2C_Master_Init:	
  3789                           
  3790                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  3791                           
  3792                           ;incstack = 0
  3793                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  3794  0B1E  3028               	movlw	40
  3795  0B1F  1283               	bcf	3,5	;RP0=0, select bank0
  3796  0B20  1303               	bcf	3,6	;RP1=0, select bank0
  3797  0B21  0094               	movwf	20	;volatile
  3798                           
  3799                           ;./I2C.h: 19:     SSPCON2 = 0;
  3800  0B22  1683               	bsf	3,5	;RP0=1, select bank1
  3801  0B23  1303               	bcf	3,6	;RP1=0, select bank1
  3802  0B24  0191               	clrf	17	;volatile
  3803                           
  3804                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  3805  0B25  1283               	bcf	3,5	;RP0=0, select bank0
  3806  0B26  1303               	bcf	3,6	;RP1=0, select bank0
  3807  0B27  082D               	movf	I2C_Master_Init@c,w
  3808  0B28  00F4               	movwf	??_I2C_Master_Init
  3809  0B29  082E               	movf	I2C_Master_Init@c+1,w
  3810  0B2A  00F5               	movwf	??_I2C_Master_Init+1
  3811  0B2B  082F               	movf	I2C_Master_Init@c+2,w
  3812  0B2C  00F6               	movwf	??_I2C_Master_Init+2
  3813  0B2D  0830               	movf	I2C_Master_Init@c+3,w
  3814  0B2E  00F7               	movwf	??_I2C_Master_Init+3
  3815  0B2F  3002               	movlw	2
  3816  0B30                     u3175:	
  3817  0B30  1003               	clrc
  3818  0B31  0DF4               	rlf	??_I2C_Master_Init,f
  3819  0B32  0DF5               	rlf	??_I2C_Master_Init+1,f
  3820  0B33  0DF6               	rlf	??_I2C_Master_Init+2,f
  3821  0B34  0DF7               	rlf	??_I2C_Master_Init+3,f
  3822  0B35  3EFF               	addlw	-1
  3823  0B36  1D03               	skipz
  3824  0B37  2B30               	goto	u3175
  3825  0B38  0877               	movf	??_I2C_Master_Init+3,w
  3826  0B39  00A3               	movwf	___lldiv@divisor+3
  3827  0B3A  0876               	movf	??_I2C_Master_Init+2,w
  3828  0B3B  00A2               	movwf	___lldiv@divisor+2
  3829  0B3C  0875               	movf	??_I2C_Master_Init+1,w
  3830  0B3D  00A1               	movwf	___lldiv@divisor+1
  3831  0B3E  0874               	movf	??_I2C_Master_Init,w
  3832  0B3F  00A0               	movwf	___lldiv@divisor
  3833  0B40  3000               	movlw	0
  3834  0B41  00A7               	movwf	___lldiv@dividend+3
  3835  0B42  307A               	movlw	122
  3836  0B43  00A6               	movwf	___lldiv@dividend+2
  3837  0B44  3012               	movlw	18
  3838  0B45  00A5               	movwf	___lldiv@dividend+1
  3839  0B46  3000               	movlw	0
  3840  0B47  00A4               	movwf	___lldiv@dividend
  3841  0B48  120A  158A  25E5   	fcall	___lldiv
  3842  0B4B  1283               	bcf	3,5	;RP0=0, select bank0
  3843  0B4C  1303               	bcf	3,6	;RP1=0, select bank0
  3844  0B4D  0820               	movf	?___lldiv,w
  3845  0B4E  3EFF               	addlw	255
  3846  0B4F  1683               	bsf	3,5	;RP0=1, select bank1
  3847  0B50  1303               	bcf	3,6	;RP1=0, select bank1
  3848  0B51  0093               	movwf	19	;volatile
  3849                           
  3850                           ;./I2C.h: 21:     SSPSTAT = 0;
  3851  0B52  0194               	clrf	20	;volatile
  3852                           
  3853                           ;./I2C.h: 22:     TRISCbits.TRISC3 = 1;
  3854  0B53  1587               	bsf	7,3	;volatile
  3855                           
  3856                           ;./I2C.h: 23:     TRISCbits.TRISC4 = 1;
  3857  0B54  1607               	bsf	7,4	;volatile
  3858  0B55  0008               	return
  3859  0B56                     __end_of_I2C_Master_Init:	
  3860                           
  3861                           	psect	text9
  3862  0DE5                     __ptext9:	
  3863 ;; *************** function ___lldiv *****************
  3864 ;; Defined at:
  3865 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;  divisor         4    0[BANK0 ] unsigned long 
  3868 ;;  dividend        4    4[BANK0 ] unsigned long 
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;  quotient        4    8[BANK0 ] unsigned long 
  3871 ;;  counter         1   12[BANK0 ] unsigned char 
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  4    0[BANK0 ] unsigned long 
  3874 ;; Registers used:
  3875 ;;		wreg, status,2, status,0
  3876 ;; Tracked objects:
  3877 ;;		On entry : 0/0
  3878 ;;		On exit  : 0/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3881 ;;      Params:         0       8       0       0       0
  3882 ;;      Locals:         0       5       0       0       0
  3883 ;;      Temps:          1       0       0       0       0
  3884 ;;      Totals:         1      13       0       0       0
  3885 ;;Total ram usage:       14 bytes
  3886 ;; Hardware stack levels used:    1
  3887 ;; Hardware stack levels required when called:    1
  3888 ;; This function calls:
  3889 ;;		Nothing
  3890 ;; This function is called by:
  3891 ;;		_I2C_Master_Init
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           
  3896                           ;psect for function ___lldiv
  3897  0DE5                     ___lldiv:	
  3898                           
  3899                           ;incstack = 0
  3900                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3901  0DE5  3000               	movlw	0
  3902  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  3903  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  3904  0DE8  00AB               	movwf	___lldiv@quotient+3
  3905  0DE9  3000               	movlw	0
  3906  0DEA  00AA               	movwf	___lldiv@quotient+2
  3907  0DEB  3000               	movlw	0
  3908  0DEC  00A9               	movwf	___lldiv@quotient+1
  3909  0DED  3000               	movlw	0
  3910  0DEE  00A8               	movwf	___lldiv@quotient
  3911  0DEF  0823               	movf	___lldiv@divisor+3,w
  3912  0DF0  0422               	iorwf	___lldiv@divisor+2,w
  3913  0DF1  0421               	iorwf	___lldiv@divisor+1,w
  3914  0DF2  0420               	iorwf	___lldiv@divisor,w
  3915  0DF3  1903               	skipnz
  3916  0DF4  2E3C               	goto	l3167
  3917  0DF5  01AC               	clrf	___lldiv@counter
  3918  0DF6  0AAC               	incf	___lldiv@counter,f
  3919  0DF7                     l3153:	
  3920  0DF7  1BA3               	btfsc	___lldiv@divisor+3,7
  3921  0DF8  2E07               	goto	l3155
  3922  0DF9  3001               	movlw	1
  3923  0DFA  00F3               	movwf	??___lldiv
  3924  0DFB                     u2945:	
  3925  0DFB  1003               	clrc
  3926  0DFC  0DA0               	rlf	___lldiv@divisor,f
  3927  0DFD  0DA1               	rlf	___lldiv@divisor+1,f
  3928  0DFE  0DA2               	rlf	___lldiv@divisor+2,f
  3929  0DFF  0DA3               	rlf	___lldiv@divisor+3,f
  3930  0E00  0BF3               	decfsz	??___lldiv,f
  3931  0E01  2DFB               	goto	u2945
  3932  0E02  3001               	movlw	1
  3933  0E03  00F3               	movwf	??___lldiv
  3934  0E04  0873               	movf	??___lldiv,w
  3935  0E05  07AC               	addwf	___lldiv@counter,f
  3936  0E06  2DF7               	goto	l3153
  3937  0E07                     l3155:	
  3938  0E07  3001               	movlw	1
  3939  0E08  00F3               	movwf	??___lldiv
  3940  0E09                     u2965:	
  3941  0E09  1003               	clrc
  3942  0E0A  0DA8               	rlf	___lldiv@quotient,f
  3943  0E0B  0DA9               	rlf	___lldiv@quotient+1,f
  3944  0E0C  0DAA               	rlf	___lldiv@quotient+2,f
  3945  0E0D  0DAB               	rlf	___lldiv@quotient+3,f
  3946  0E0E  0BF3               	decfsz	??___lldiv,f
  3947  0E0F  2E09               	goto	u2965
  3948  0E10  0823               	movf	___lldiv@divisor+3,w
  3949  0E11  0227               	subwf	___lldiv@dividend+3,w
  3950  0E12  1D03               	skipz
  3951  0E13  2E1E               	goto	u2975
  3952  0E14  0822               	movf	___lldiv@divisor+2,w
  3953  0E15  0226               	subwf	___lldiv@dividend+2,w
  3954  0E16  1D03               	skipz
  3955  0E17  2E1E               	goto	u2975
  3956  0E18  0821               	movf	___lldiv@divisor+1,w
  3957  0E19  0225               	subwf	___lldiv@dividend+1,w
  3958  0E1A  1D03               	skipz
  3959  0E1B  2E1E               	goto	u2975
  3960  0E1C  0820               	movf	___lldiv@divisor,w
  3961  0E1D  0224               	subwf	___lldiv@dividend,w
  3962  0E1E                     u2975:	
  3963  0E1E  1C03               	skipc
  3964  0E1F  2E2F               	goto	l3163
  3965  0E20  0820               	movf	___lldiv@divisor,w
  3966  0E21  02A4               	subwf	___lldiv@dividend,f
  3967  0E22  0821               	movf	___lldiv@divisor+1,w
  3968  0E23  1C03               	skipc
  3969  0E24  0F21               	incfsz	___lldiv@divisor+1,w
  3970  0E25  02A5               	subwf	___lldiv@dividend+1,f
  3971  0E26  0822               	movf	___lldiv@divisor+2,w
  3972  0E27  1C03               	skipc
  3973  0E28  0F22               	incfsz	___lldiv@divisor+2,w
  3974  0E29  02A6               	subwf	___lldiv@dividend+2,f
  3975  0E2A  0823               	movf	___lldiv@divisor+3,w
  3976  0E2B  1C03               	skipc
  3977  0E2C  0F23               	incfsz	___lldiv@divisor+3,w
  3978  0E2D  02A7               	subwf	___lldiv@dividend+3,f
  3979  0E2E  1428               	bsf	___lldiv@quotient,0
  3980  0E2F                     l3163:	
  3981  0E2F  3001               	movlw	1
  3982  0E30                     u2985:	
  3983  0E30  1003               	clrc
  3984  0E31  0CA3               	rrf	___lldiv@divisor+3,f
  3985  0E32  0CA2               	rrf	___lldiv@divisor+2,f
  3986  0E33  0CA1               	rrf	___lldiv@divisor+1,f
  3987  0E34  0CA0               	rrf	___lldiv@divisor,f
  3988  0E35  3EFF               	addlw	-1
  3989  0E36  1D03               	skipz
  3990  0E37  2E30               	goto	u2985
  3991  0E38  3001               	movlw	1
  3992  0E39  02AC               	subwf	___lldiv@counter,f
  3993  0E3A  1D03               	btfss	3,2
  3994  0E3B  2E07               	goto	l3155
  3995  0E3C                     l3167:	
  3996  0E3C  082B               	movf	___lldiv@quotient+3,w
  3997  0E3D  00A3               	movwf	?___lldiv+3
  3998  0E3E  082A               	movf	___lldiv@quotient+2,w
  3999  0E3F  00A2               	movwf	?___lldiv+2
  4000  0E40  0829               	movf	___lldiv@quotient+1,w
  4001  0E41  00A1               	movwf	?___lldiv+1
  4002  0E42  0828               	movf	___lldiv@quotient,w
  4003  0E43  00A0               	movwf	?___lldiv
  4004  0E44  0008               	return
  4005  0E45                     __end_of___lldiv:	
  4006                           
  4007                           	psect	text10
  4008  09A6                     __ptext10:	
  4009 ;; *************** function _open_door *****************
  4010 ;; Defined at:
  4011 ;;		line 526 in file "mainMaster.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;		None
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;		None
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  1    wreg      void 
  4018 ;; Registers used:
  4019 ;;		wreg, status,2, status,0, pclath, cstack
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4025 ;;      Params:         0       0       0       0       0
  4026 ;;      Locals:         0       0       0       0       0
  4027 ;;      Temps:          0       0       0       0       0
  4028 ;;      Totals:         0       0       0       0       0
  4029 ;;Total ram usage:        0 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:    3
  4032 ;; This function calls:
  4033 ;;		_I2C_Master_Start
  4034 ;;		_I2C_Master_Stop
  4035 ;;		_I2C_Master_Write
  4036 ;; This function is called by:
  4037 ;;		_main
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           
  4042                           ;psect for function _open_door
  4043  09A6                     _open_door:	
  4044                           
  4045                           ;mainMaster.c: 528:     I2C_Master_Start();
  4046                           
  4047                           ;incstack = 0
  4048                           ; Regs used in _open_door: [wreg+status,2+status,0+pclath+cstack]
  4049  09A6  120A  158A  2114  120A  158A  	fcall	_I2C_Master_Start
  4050                           
  4051                           ;mainMaster.c: 529:     I2C_Master_Write(0x20);
  4052  09AB  3020               	movlw	32
  4053  09AC  00F3               	movwf	I2C_Master_Write@d
  4054  09AD  3000               	movlw	0
  4055  09AE  00F4               	movwf	I2C_Master_Write@d+1
  4056  09AF  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  4057                           
  4058                           ;mainMaster.c: 530:     I2C_Master_Write(0xFF);
  4059  09B4  30FF               	movlw	255
  4060  09B5  00F3               	movwf	I2C_Master_Write@d
  4061  09B6  3000               	movlw	0
  4062  09B7  00F4               	movwf	I2C_Master_Write@d+1
  4063  09B8  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  4064                           
  4065                           ;mainMaster.c: 531:     I2C_Master_Stop();
  4066  09BD  120A  158A  211B   	fcall	_I2C_Master_Stop
  4067  09C0  0008               	return
  4068  09C1                     __end_of_open_door:	
  4069                           
  4070                           	psect	text11
  4071  0A49                     __ptext11:	
  4072 ;; *************** function _get_tripwire *****************
  4073 ;; Defined at:
  4074 ;;		line 490 in file "mainMaster.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;		None
  4077 ;; Auto vars:     Size  Location     Type
  4078 ;;  trip            1    2[BANK0 ] unsigned char 
  4079 ;; Return value:  Size  Location     Type
  4080 ;;                  1    wreg      unsigned char 
  4081 ;; Registers used:
  4082 ;;		wreg, status,2, status,0, pclath, cstack
  4083 ;; Tracked objects:
  4084 ;;		On entry : 0/0
  4085 ;;		On exit  : 0/0
  4086 ;;		Unchanged: 0/0
  4087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4088 ;;      Params:         0       0       0       0       0
  4089 ;;      Locals:         0       1       0       0       0
  4090 ;;      Temps:          1       0       0       0       0
  4091 ;;      Totals:         1       1       0       0       0
  4092 ;;Total ram usage:        2 bytes
  4093 ;; Hardware stack levels used:    1
  4094 ;; Hardware stack levels required when called:    3
  4095 ;; This function calls:
  4096 ;;		_I2C_Master_Read
  4097 ;;		_I2C_Master_Start
  4098 ;;		_I2C_Master_Stop
  4099 ;;		_I2C_Master_Write
  4100 ;; This function is called by:
  4101 ;;		_main
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           
  4106                           ;psect for function _get_tripwire
  4107  0A49                     _get_tripwire:	
  4108                           
  4109                           ;mainMaster.c: 492:     char trip;;mainMaster.c: 494:     I2C_Master_Start();
  4110                           
  4111                           ;incstack = 0
  4112                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  4113  0A49  120A  158A  2114  120A  158A  	fcall	_I2C_Master_Start
  4114                           
  4115                           ;mainMaster.c: 495:     I2C_Master_Write(0x21);
  4116  0A4E  3021               	movlw	33
  4117  0A4F  00F3               	movwf	I2C_Master_Write@d
  4118  0A50  3000               	movlw	0
  4119  0A51  00F4               	movwf	I2C_Master_Write@d+1
  4120  0A52  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  4121                           
  4122                           ;mainMaster.c: 496:     trip = I2C_Master_Read(0);
  4123  0A57  3000               	movlw	0
  4124  0A58  00F3               	movwf	I2C_Master_Read@a
  4125  0A59  00F4               	movwf	I2C_Master_Read@a+1
  4126  0A5A  120A  158A  22BC  120A  158A  	fcall	_I2C_Master_Read
  4127  0A5F  0873               	movf	?_I2C_Master_Read,w
  4128  0A60  00F7               	movwf	??_get_tripwire
  4129  0A61  0877               	movf	??_get_tripwire,w
  4130  0A62  1283               	bcf	3,5	;RP0=0, select bank0
  4131  0A63  1303               	bcf	3,6	;RP1=0, select bank0
  4132  0A64  00A2               	movwf	get_tripwire@trip
  4133                           
  4134                           ;mainMaster.c: 497:     I2C_Master_Stop();
  4135  0A65  120A  158A  211B   	fcall	_I2C_Master_Stop
  4136                           
  4137                           ;mainMaster.c: 499:     return (trip);
  4138  0A68  1283               	bcf	3,5	;RP0=0, select bank0
  4139  0A69  1303               	bcf	3,6	;RP1=0, select bank0
  4140  0A6A  0822               	movf	get_tripwire@trip,w
  4141  0A6B  0008               	return
  4142  0A6C                     __end_of_get_tripwire:	
  4143                           
  4144                           	psect	text12
  4145  0E45                     __ptext12:	
  4146 ;; *************** function _get_time *****************
  4147 ;; Defined at:
  4148 ;;		line 415 in file "mainMaster.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;  time_string     1    wreg     PTR unsigned char 
  4151 ;;		 -> time(6), 
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;  time_string     1    6[BANK0 ] PTR unsigned char 
  4154 ;;		 -> time(6), 
  4155 ;;  min             1    5[BANK0 ] unsigned char 
  4156 ;;  hour            1    4[BANK0 ] unsigned char 
  4157 ;; Return value:  Size  Location     Type
  4158 ;;                  1    wreg      void 
  4159 ;; Registers used:
  4160 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4161 ;; Tracked objects:
  4162 ;;		On entry : 0/0
  4163 ;;		On exit  : 0/0
  4164 ;;		Unchanged: 0/0
  4165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4166 ;;      Params:         0       0       0       0       0
  4167 ;;      Locals:         0       3       0       0       0
  4168 ;;      Temps:          0       2       0       0       0
  4169 ;;      Totals:         0       5       0       0       0
  4170 ;;Total ram usage:        5 bytes
  4171 ;; Hardware stack levels used:    1
  4172 ;; Hardware stack levels required when called:    3
  4173 ;; This function calls:
  4174 ;;		_I2C_Master_Read
  4175 ;;		_I2C_Master_RepeatedStart
  4176 ;;		_I2C_Master_Start
  4177 ;;		_I2C_Master_Stop
  4178 ;;		_I2C_Master_Write
  4179 ;; This function is called by:
  4180 ;;		_main
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           
  4185                           ;psect for function _get_time
  4186  0E45                     _get_time:	
  4187                           
  4188                           ;incstack = 0
  4189                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4190                           ;get_time@time_string stored from wreg
  4191  0E45  1283               	bcf	3,5	;RP0=0, select bank0
  4192  0E46  1303               	bcf	3,6	;RP1=0, select bank0
  4193  0E47  00A6               	movwf	get_time@time_string
  4194                           
  4195                           ;mainMaster.c: 417:     char hour, min;;mainMaster.c: 419:     I2C_Master_Start();
  4196  0E48  120A  158A  2114  120A  158A  	fcall	_I2C_Master_Start
  4197                           
  4198                           ;mainMaster.c: 420:     I2C_Master_Write(0xD0);
  4199  0E4D  30D0               	movlw	208
  4200  0E4E  00F3               	movwf	I2C_Master_Write@d
  4201  0E4F  3000               	movlw	0
  4202  0E50  00F4               	movwf	I2C_Master_Write@d+1
  4203  0E51  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  4204                           
  4205                           ;mainMaster.c: 421:     I2C_Master_Write(0x01);
  4206  0E56  3001               	movlw	1
  4207  0E57  00F3               	movwf	I2C_Master_Write@d
  4208  0E58  3000               	movlw	0
  4209  0E59  00F4               	movwf	I2C_Master_Write@d+1
  4210  0E5A  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  4211                           
  4212                           ;mainMaster.c: 422:     I2C_Master_RepeatedStart();
  4213  0E5F  120A  158A  2122  120A  158A  	fcall	_I2C_Master_RepeatedStart
  4214                           
  4215                           ;mainMaster.c: 423:     I2C_Master_Write(0xD1);
  4216  0E64  30D1               	movlw	209
  4217  0E65  00F3               	movwf	I2C_Master_Write@d
  4218  0E66  3000               	movlw	0
  4219  0E67  00F4               	movwf	I2C_Master_Write@d+1
  4220  0E68  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  4221                           
  4222                           ;mainMaster.c: 424:     min = I2C_Master_Read(1);
  4223  0E6D  3001               	movlw	1
  4224  0E6E  00F3               	movwf	I2C_Master_Read@a
  4225  0E6F  3000               	movlw	0
  4226  0E70  00F4               	movwf	I2C_Master_Read@a+1
  4227  0E71  120A  158A  22BC  120A  158A  	fcall	_I2C_Master_Read
  4228  0E76  0873               	movf	?_I2C_Master_Read,w
  4229  0E77  1283               	bcf	3,5	;RP0=0, select bank0
  4230  0E78  1303               	bcf	3,6	;RP1=0, select bank0
  4231  0E79  00A2               	movwf	??_get_time
  4232  0E7A  0822               	movf	??_get_time,w
  4233  0E7B  00A5               	movwf	get_time@min
  4234                           
  4235                           ;mainMaster.c: 425:     hour = I2C_Master_Read(0);
  4236  0E7C  3000               	movlw	0
  4237  0E7D  00F3               	movwf	I2C_Master_Read@a
  4238  0E7E  00F4               	movwf	I2C_Master_Read@a+1
  4239  0E7F  120A  158A  22BC  120A  158A  	fcall	_I2C_Master_Read
  4240  0E84  0873               	movf	?_I2C_Master_Read,w
  4241  0E85  1283               	bcf	3,5	;RP0=0, select bank0
  4242  0E86  1303               	bcf	3,6	;RP1=0, select bank0
  4243  0E87  00A2               	movwf	??_get_time
  4244  0E88  0822               	movf	??_get_time,w
  4245  0E89  00A4               	movwf	get_time@hour
  4246                           
  4247                           ;mainMaster.c: 426:     I2C_Master_Stop();
  4248  0E8A  120A  158A  211B  120A  158A  	fcall	_I2C_Master_Stop
  4249                           
  4250                           ;mainMaster.c: 428:     time_string[0] = (hour >> 4) + '0';
  4251  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  4252  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  4253  0E91  0824               	movf	get_time@hour,w
  4254  0E92  00A2               	movwf	??_get_time
  4255  0E93  3004               	movlw	4
  4256  0E94                     u3435:	
  4257  0E94  1003               	clrc
  4258  0E95  0CA2               	rrf	??_get_time,f
  4259  0E96  3EFF               	addlw	-1
  4260  0E97  1D03               	skipz
  4261  0E98  2E94               	goto	u3435
  4262  0E99  0822               	movf	??_get_time,w
  4263  0E9A  3E30               	addlw	48
  4264  0E9B  00A3               	movwf	??_get_time+1
  4265  0E9C  0826               	movf	get_time@time_string,w
  4266  0E9D  0084               	movwf	4
  4267  0E9E  0823               	movf	??_get_time+1,w
  4268  0E9F  1383               	bcf	3,7	;select IRP bank0
  4269  0EA0  0080               	movwf	0
  4270                           
  4271                           ;mainMaster.c: 429:     time_string[1] = (hour & 0x0F) + '0';
  4272  0EA1  0824               	movf	get_time@hour,w
  4273  0EA2  390F               	andlw	15
  4274  0EA3  3E30               	addlw	48
  4275  0EA4  00A2               	movwf	??_get_time
  4276  0EA5  0A26               	incf	get_time@time_string,w
  4277  0EA6  0084               	movwf	4
  4278  0EA7  0822               	movf	??_get_time,w
  4279  0EA8  0080               	movwf	0
  4280                           
  4281                           ;mainMaster.c: 430:     time_string[2] = ':';
  4282  0EA9  303A               	movlw	58
  4283  0EAA  00A2               	movwf	??_get_time
  4284  0EAB  0826               	movf	get_time@time_string,w
  4285  0EAC  3E02               	addlw	2
  4286  0EAD  0084               	movwf	4
  4287  0EAE  0822               	movf	??_get_time,w
  4288  0EAF  0080               	movwf	0
  4289                           
  4290                           ;mainMaster.c: 431:     time_string[3] = (min >> 4) + '0';
  4291  0EB0  0825               	movf	get_time@min,w
  4292  0EB1  00A2               	movwf	??_get_time
  4293  0EB2  3004               	movlw	4
  4294  0EB3                     u3445:	
  4295  0EB3  1003               	clrc
  4296  0EB4  0CA2               	rrf	??_get_time,f
  4297  0EB5  3EFF               	addlw	-1
  4298  0EB6  1D03               	skipz
  4299  0EB7  2EB3               	goto	u3445
  4300  0EB8  0822               	movf	??_get_time,w
  4301  0EB9  3E30               	addlw	48
  4302  0EBA  00A3               	movwf	??_get_time+1
  4303  0EBB  0826               	movf	get_time@time_string,w
  4304  0EBC  3E03               	addlw	3
  4305  0EBD  0084               	movwf	4
  4306  0EBE  0823               	movf	??_get_time+1,w
  4307  0EBF  0080               	movwf	0
  4308                           
  4309                           ;mainMaster.c: 432:     time_string[4] = (min & 0x0F) + '0';
  4310  0EC0  0825               	movf	get_time@min,w
  4311  0EC1  390F               	andlw	15
  4312  0EC2  3E30               	addlw	48
  4313  0EC3  00A2               	movwf	??_get_time
  4314  0EC4  0826               	movf	get_time@time_string,w
  4315  0EC5  3E04               	addlw	4
  4316  0EC6  0084               	movwf	4
  4317  0EC7  0822               	movf	??_get_time,w
  4318  0EC8  0080               	movwf	0
  4319                           
  4320                           ;mainMaster.c: 433:     time_string[5] = '\0';
  4321  0EC9  0826               	movf	get_time@time_string,w
  4322  0ECA  3E05               	addlw	5
  4323  0ECB  0084               	movwf	4
  4324  0ECC  0180               	clrf	0
  4325  0ECD  0008               	return
  4326  0ECE                     __end_of_get_time:	
  4327                           
  4328                           	psect	text13
  4329  0F5D                     __ptext13:	
  4330 ;; *************** function _get_temp *****************
  4331 ;; Defined at:
  4332 ;;		line 451 in file "mainMaster.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;  temp_string     1    wreg     PTR unsigned char 
  4335 ;;		 -> temp(6), 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  temp_string     1   29[BANK0 ] PTR unsigned char 
  4338 ;;		 -> temp(6), 
  4339 ;;  decimal         3   25[BANK0 ] unsigned char [3]
  4340 ;;  tempLSB         1   30[BANK0 ] unsigned char 
  4341 ;;  tempMSB         1   28[BANK0 ] unsigned char 
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  1    wreg      void 
  4344 ;; Registers used:
  4345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4351 ;;      Params:         0       0       0       0       0
  4352 ;;      Locals:         0       6       0       0       0
  4353 ;;      Temps:          0       3       0       0       0
  4354 ;;      Totals:         0       9       0       0       0
  4355 ;;Total ram usage:        9 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; Hardware stack levels required when called:    3
  4358 ;; This function calls:
  4359 ;;		_I2C_Master_Read
  4360 ;;		_I2C_Master_RepeatedStart
  4361 ;;		_I2C_Master_Start
  4362 ;;		_I2C_Master_Stop
  4363 ;;		_I2C_Master_Write
  4364 ;;		___bmul
  4365 ;;		_sprintf
  4366 ;;		_strcat
  4367 ;; This function is called by:
  4368 ;;		_main
  4369 ;; This function uses a non-reentrant model
  4370 ;;
  4371                           
  4372                           
  4373                           ;psect for function _get_temp
  4374  0F5D                     _get_temp:	
  4375                           
  4376                           ;incstack = 0
  4377                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4378                           ;get_temp@temp_string stored from wreg
  4379  0F5D  1283               	bcf	3,5	;RP0=0, select bank0
  4380  0F5E  1303               	bcf	3,6	;RP1=0, select bank0
  4381  0F5F  00BD               	movwf	get_temp@temp_string
  4382                           
  4383                           ;mainMaster.c: 453:     char tempLSB, tempMSB;;mainMaster.c: 454:     char decimal[3];;m
      +                          ainMaster.c: 456:     I2C_Master_Start();
  4384  0F60  120A  158A  2114  120A  158A  	fcall	_I2C_Master_Start
  4385                           
  4386                           ;mainMaster.c: 457:     I2C_Master_Write(0xD0);
  4387  0F65  30D0               	movlw	208
  4388  0F66  00F3               	movwf	I2C_Master_Write@d
  4389  0F67  3000               	movlw	0
  4390  0F68  00F4               	movwf	I2C_Master_Write@d+1
  4391  0F69  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  4392                           
  4393                           ;mainMaster.c: 458:     I2C_Master_Write(0x11);
  4394  0F6E  3011               	movlw	17
  4395  0F6F  00F3               	movwf	I2C_Master_Write@d
  4396  0F70  3000               	movlw	0
  4397  0F71  00F4               	movwf	I2C_Master_Write@d+1
  4398  0F72  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  4399                           
  4400                           ;mainMaster.c: 459:     I2C_Master_RepeatedStart();
  4401  0F77  120A  158A  2122  120A  158A  	fcall	_I2C_Master_RepeatedStart
  4402                           
  4403                           ;mainMaster.c: 460:     I2C_Master_Write(0xD1);
  4404  0F7C  30D1               	movlw	209
  4405  0F7D  00F3               	movwf	I2C_Master_Write@d
  4406  0F7E  3000               	movlw	0
  4407  0F7F  00F4               	movwf	I2C_Master_Write@d+1
  4408  0F80  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  4409                           
  4410                           ;mainMaster.c: 461:     tempMSB = I2C_Master_Read(1);
  4411  0F85  3001               	movlw	1
  4412  0F86  00F3               	movwf	I2C_Master_Read@a
  4413  0F87  3000               	movlw	0
  4414  0F88  00F4               	movwf	I2C_Master_Read@a+1
  4415  0F89  120A  158A  22BC  120A  158A  	fcall	_I2C_Master_Read
  4416  0F8E  0873               	movf	?_I2C_Master_Read,w
  4417  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  4418  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  4419  0F91  00B6               	movwf	??_get_temp
  4420  0F92  0836               	movf	??_get_temp,w
  4421  0F93  00BC               	movwf	get_temp@tempMSB
  4422                           
  4423                           ;mainMaster.c: 462:     tempLSB = I2C_Master_Read(0);
  4424  0F94  3000               	movlw	0
  4425  0F95  00F3               	movwf	I2C_Master_Read@a
  4426  0F96  00F4               	movwf	I2C_Master_Read@a+1
  4427  0F97  120A  158A  22BC  120A  158A  	fcall	_I2C_Master_Read
  4428  0F9C  0873               	movf	?_I2C_Master_Read,w
  4429  0F9D  1283               	bcf	3,5	;RP0=0, select bank0
  4430  0F9E  1303               	bcf	3,6	;RP1=0, select bank0
  4431  0F9F  00B6               	movwf	??_get_temp
  4432  0FA0  0836               	movf	??_get_temp,w
  4433  0FA1  00BE               	movwf	get_temp@tempLSB
  4434                           
  4435                           ;mainMaster.c: 463:     I2C_Master_Stop();
  4436  0FA2  120A  158A  211B  120A  158A  	fcall	_I2C_Master_Stop
  4437                           
  4438                           ;mainMaster.c: 465:     tempMSB = tempMSB - 4;
  4439  0FA7  1283               	bcf	3,5	;RP0=0, select bank0
  4440  0FA8  1303               	bcf	3,6	;RP1=0, select bank0
  4441  0FA9  083C               	movf	get_temp@tempMSB,w
  4442  0FAA  3EFC               	addlw	252
  4443  0FAB  00B6               	movwf	??_get_temp
  4444  0FAC  0836               	movf	??_get_temp,w
  4445  0FAD  00BC               	movwf	get_temp@tempMSB
  4446                           
  4447                           ;mainMaster.c: 466:     tempLSB = (tempLSB >> 6) * 25;
  4448  0FAE  3019               	movlw	25
  4449  0FAF  00B6               	movwf	??_get_temp
  4450  0FB0  0836               	movf	??_get_temp,w
  4451  0FB1  00F3               	movwf	___bmul@multiplicand
  4452  0FB2  083E               	movf	get_temp@tempLSB,w
  4453  0FB3  00B7               	movwf	??_get_temp+1
  4454  0FB4  3006               	movlw	6
  4455  0FB5                     u3415:	
  4456  0FB5  1003               	clrc
  4457  0FB6  0CB7               	rrf	??_get_temp+1,f
  4458  0FB7  3EFF               	addlw	-1
  4459  0FB8  1D03               	skipz
  4460  0FB9  2FB5               	goto	u3415
  4461  0FBA  0837               	movf	??_get_temp+1,w
  4462  0FBB  120A  118A  24EB  120A  158A  	fcall	___bmul
  4463  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  4464  0FC1  1303               	bcf	3,6	;RP1=0, select bank0
  4465  0FC2  00B8               	movwf	??_get_temp+2
  4466  0FC3  0838               	movf	??_get_temp+2,w
  4467  0FC4  00BE               	movwf	get_temp@tempLSB
  4468                           
  4469                           ;mainMaster.c: 467:     sprintf(temp_string, "%d", tempMSB);
  4470  0FC5  30EB               	movlw	(low (((STR_28+1)-__stringbase)| (0+32768)))& (0+255)
  4471  0FC6  00B6               	movwf	??_get_temp
  4472  0FC7  0836               	movf	??_get_temp,w
  4473  0FC8  00A9               	movwf	sprintf@f
  4474  0FC9  083C               	movf	get_temp@tempMSB,w
  4475  0FCA  00B7               	movwf	??_get_temp+1
  4476  0FCB  01B8               	clrf	??_get_temp+2
  4477  0FCC  0837               	movf	??_get_temp+1,w
  4478  0FCD  00AA               	movwf	?_sprintf+1
  4479  0FCE  0838               	movf	??_get_temp+2,w
  4480  0FCF  00AB               	movwf	?_sprintf+2
  4481  0FD0  083D               	movf	get_temp@temp_string,w
  4482  0FD1  120A  118A  25FD  120A  158A  	fcall	_sprintf
  4483                           
  4484                           ;mainMaster.c: 468:     if (tempLSB == 0){
  4485  0FD6  1283               	bcf	3,5	;RP0=0, select bank0
  4486  0FD7  1303               	bcf	3,6	;RP1=0, select bank0
  4487  0FD8  083E               	movf	get_temp@tempLSB,w
  4488  0FD9  1D03               	btfss	3,2
  4489  0FDA  2FDD               	goto	l3485
  4490                           
  4491                           ;mainMaster.c: 469:         sprintf(decimal, ".%d0", tempLSB);
  4492  0FDB  30E5               	movlw	(low ((STR_27-__stringbase)| (0+32768)))& (0+255)
  4493  0FDC  2FDE               	goto	L17
  4494  0FDD                     l3485:	
  4495                           ;mainMaster.c: 470:     } else {
  4496                           
  4497                           
  4498                           ;mainMaster.c: 471:         sprintf(decimal, ".%d", tempLSB);
  4499  0FDD  30EA               	movlw	(low ((STR_28-__stringbase)| (0+32768)))& (0+255)
  4500  0FDE                     L17:	
  4501  0FDE  00B6               	movwf	??_get_temp
  4502  0FDF  0836               	movf	??_get_temp,w
  4503  0FE0  00A9               	movwf	sprintf@f
  4504  0FE1  083E               	movf	get_temp@tempLSB,w
  4505  0FE2  00B7               	movwf	??_get_temp+1
  4506  0FE3  01B8               	clrf	??_get_temp+2
  4507  0FE4  0837               	movf	??_get_temp+1,w
  4508  0FE5  00AA               	movwf	?_sprintf+1
  4509  0FE6  0838               	movf	??_get_temp+2,w
  4510  0FE7  00AB               	movwf	?_sprintf+2
  4511  0FE8  3039               	movlw	(low (get_temp@decimal| 0))& (0+255)
  4512  0FE9  120A  118A  25FD  120A  158A  	fcall	_sprintf
  4513                           
  4514                           ;mainMaster.c: 473:     strcat(temp_string, decimal);
  4515  0FEE  3039               	movlw	(low (get_temp@decimal| 0))& (0+255)
  4516  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  4517  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  4518  0FF1  00B6               	movwf	??_get_temp
  4519  0FF2  0836               	movf	??_get_temp,w
  4520  0FF3  00F3               	movwf	strcat@from
  4521  0FF4  083D               	movf	get_temp@temp_string,w
  4522  0FF5  120A  158A  226C   	fcall	_strcat
  4523                           
  4524                           ;mainMaster.c: 474:     temp_string[5] = '\0';
  4525  0FF8  1283               	bcf	3,5	;RP0=0, select bank0
  4526  0FF9  1303               	bcf	3,6	;RP1=0, select bank0
  4527  0FFA  083D               	movf	get_temp@temp_string,w
  4528  0FFB  3E05               	addlw	5
  4529  0FFC  0084               	movwf	4
  4530  0FFD  1383               	bcf	3,7	;select IRP bank0
  4531  0FFE  0180               	clrf	0
  4532  0FFF  0008               	return
  4533  1000                     __end_of_get_temp:	
  4534                           
  4535                           	psect	text14
  4536  0A6C                     __ptext14:	
  4537 ;; *************** function _strcat *****************
  4538 ;; Defined at:
  4539 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;  to              1    wreg     PTR unsigned char 
  4542 ;;		 -> temp(6), 
  4543 ;;  from            1    3[COMMON] PTR const unsigned char 
  4544 ;;		 -> get_temp@decimal(3), 
  4545 ;; Auto vars:     Size  Location     Type
  4546 ;;  to              1    5[COMMON] PTR unsigned char 
  4547 ;;		 -> temp(6), 
  4548 ;;  cp              1    6[COMMON] PTR unsigned char 
  4549 ;;		 -> temp(6), 
  4550 ;; Return value:  Size  Location     Type
  4551 ;;                  1    wreg      PTR unsigned char 
  4552 ;; Registers used:
  4553 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4554 ;; Tracked objects:
  4555 ;;		On entry : 0/0
  4556 ;;		On exit  : 0/0
  4557 ;;		Unchanged: 0/0
  4558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4559 ;;      Params:         1       0       0       0       0
  4560 ;;      Locals:         2       0       0       0       0
  4561 ;;      Temps:          1       0       0       0       0
  4562 ;;      Totals:         4       0       0       0       0
  4563 ;;Total ram usage:        4 bytes
  4564 ;; Hardware stack levels used:    1
  4565 ;; Hardware stack levels required when called:    1
  4566 ;; This function calls:
  4567 ;;		Nothing
  4568 ;; This function is called by:
  4569 ;;		_get_temp
  4570 ;; This function uses a non-reentrant model
  4571 ;;
  4572                           
  4573                           
  4574                           ;psect for function _strcat
  4575  0A6C                     _strcat:	
  4576                           
  4577                           ;incstack = 0
  4578                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  4579                           ;strcat@to stored from wreg
  4580  0A6C  00F5               	movwf	strcat@to
  4581  0A6D  0875               	movf	strcat@to,w
  4582  0A6E  00F4               	movwf	??_strcat
  4583  0A6F  0874               	movf	??_strcat,w
  4584  0A70  00F6               	movwf	strcat@cp
  4585  0A71                     l2457:	
  4586  0A71  0876               	movf	strcat@cp,w
  4587  0A72  0084               	movwf	4
  4588  0A73  1383               	bcf	3,7	;select IRP bank0
  4589  0A74  0800               	movf	0,w
  4590  0A75  1903               	btfsc	3,2
  4591  0A76  2A84               	goto	l2461
  4592  0A77  3001               	movlw	1
  4593  0A78  00F4               	movwf	??_strcat
  4594  0A79  0874               	movf	??_strcat,w
  4595  0A7A  07F6               	addwf	strcat@cp,f
  4596  0A7B  2A71               	goto	l2457
  4597  0A7C                     l2459:	
  4598  0A7C  3001               	movlw	1
  4599  0A7D  00F4               	movwf	??_strcat
  4600  0A7E  0874               	movf	??_strcat,w
  4601  0A7F  07F6               	addwf	strcat@cp,f
  4602  0A80  3001               	movlw	1
  4603  0A81  00F4               	movwf	??_strcat
  4604  0A82  0874               	movf	??_strcat,w
  4605  0A83  07F3               	addwf	strcat@from,f
  4606  0A84                     l2461:	
  4607  0A84  0873               	movf	strcat@from,w
  4608  0A85  0084               	movwf	4
  4609  0A86  0800               	movf	0,w
  4610  0A87  00F4               	movwf	??_strcat
  4611  0A88  0876               	movf	strcat@cp,w
  4612  0A89  0084               	movwf	4
  4613  0A8A  0874               	movf	??_strcat,w
  4614  0A8B  0080               	movwf	0
  4615  0A8C  0800               	movf	0,w
  4616  0A8D  1903               	btfsc	3,2
  4617  0A8E  0008               	return
  4618  0A8F  2A7C               	goto	l2459
  4619  0A90                     __end_of_strcat:	
  4620                           
  4621                           	psect	text15
  4622  05FD                     __ptext15:	
  4623 ;; *************** function _sprintf *****************
  4624 ;; Defined at:
  4625 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;  sp              1    wreg     PTR unsigned char 
  4628 ;;		 -> get_temp@decimal(3), temp(6), 
  4629 ;;  f               1    9[BANK0 ] PTR const unsigned char 
  4630 ;;		 -> STR_28(4), STR_27(5), STR_26(3), 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;  sp              1   20[BANK0 ] PTR unsigned char 
  4633 ;;		 -> get_temp@decimal(3), temp(6), 
  4634 ;;  tmpval          4    0        struct .
  4635 ;;  val             2   18[BANK0 ] unsigned int 
  4636 ;;  cp              2    0        PTR const unsigned char 
  4637 ;;  len             2    0        unsigned int 
  4638 ;;  c               1   21[BANK0 ] unsigned char 
  4639 ;;  prec            1   17[BANK0 ] char 
  4640 ;;  flag            1   16[BANK0 ] unsigned char 
  4641 ;;  ap              1   15[BANK0 ] PTR void [1]
  4642 ;;		 -> ?_sprintf(2), 
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  2    9[BANK0 ] int 
  4645 ;; Registers used:
  4646 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4652 ;;      Params:         0       3       0       0       0
  4653 ;;      Locals:         0       7       0       0       0
  4654 ;;      Temps:          0       3       0       0       0
  4655 ;;      Totals:         0      13       0       0       0
  4656 ;;Total ram usage:       13 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    2
  4659 ;; This function calls:
  4660 ;;		___lwdiv
  4661 ;;		___lwmod
  4662 ;; This function is called by:
  4663 ;;		_get_temp
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           
  4668                           ;psect for function _sprintf
  4669  05FD                     _sprintf:	
  4670                           
  4671                           ;incstack = 0
  4672                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4673                           ;sprintf@sp stored from wreg
  4674  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  4675  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  4676  05FF  00B4               	movwf	sprintf@sp
  4677                           
  4678                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  4679  0600  302A               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  4680  0601  00AC               	movwf	??_sprintf
  4681  0602  082C               	movf	??_sprintf,w
  4682  0603  00AF               	movwf	sprintf@ap
  4683  0604                     l3369:	
  4684                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  4685                           
  4686                           
  4687                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  4688  0604  3001               	movlw	1
  4689  0605  07A9               	addwf	sprintf@f,f
  4690  0606  30FF               	movlw	-1
  4691  0607  0729               	addwf	sprintf@f,w
  4692  0608  0084               	movwf	4
  4693  0609  120A  118A  250A  120A  118A  	fcall	stringdir
  4694  060E  00AC               	movwf	??_sprintf
  4695  060F  082C               	movf	??_sprintf,w
  4696  0610  00B5               	movwf	sprintf@c
  4697  0611  0835               	movf	sprintf@c,w
  4698  0612  1903               	btfsc	3,2
  4699  0613  2ED2               	goto	l3371
  4700                           
  4701                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  4702  0614  3025               	movlw	37
  4703  0615  0635               	xorwf	sprintf@c,w
  4704  0616  1903               	btfsc	3,2
  4705  0617  2E24               	goto	l3325
  4706                           
  4707                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  4708  0618  0835               	movf	sprintf@c,w
  4709  0619  00AC               	movwf	??_sprintf
  4710  061A  0834               	movf	sprintf@sp,w
  4711  061B  0084               	movwf	4
  4712  061C  082C               	movf	??_sprintf,w
  4713  061D  1383               	bcf	3,7	;select IRP bank0
  4714  061E  0080               	movwf	0
  4715  061F  3001               	movlw	1
  4716  0620  00AC               	movwf	??_sprintf
  4717  0621  082C               	movf	??_sprintf,w
  4718  0622  07B4               	addwf	sprintf@sp,f
  4719                           
  4720                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  4721  0623  2E04               	goto	l3369
  4722  0624                     l3325:	
  4723                           
  4724                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  4725  0624  01B0               	clrf	sprintf@flag
  4726                           
  4727                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  4728  0625  3001               	movlw	1
  4729  0626  07A9               	addwf	sprintf@f,f
  4730  0627  30FF               	movlw	-1
  4731  0628  0729               	addwf	sprintf@f,w
  4732  0629  0084               	movwf	4
  4733  062A  120A  118A  250A  120A  118A  	fcall	stringdir
  4734  062F  00B5               	movwf	sprintf@c
  4735  0630  00AC               	movwf	??_sprintf
  4736  0631  01AD               	clrf	??_sprintf+1
  4737                           
  4738                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4739                           ; Switch size 1, requested type "simple"
  4740                           ; Number of cases is 1, Range of values is 0 to 0
  4741                           ; switch strategies available:
  4742                           ; Name         Instructions Cycles
  4743                           ; simple_byte            4     3 (average)
  4744                           ; direct_byte           11     8 (fixed)
  4745                           ; jumptable            260     6 (fixed)
  4746                           ;	Chosen strategy is simple_byte
  4747  0632  082D               	movf	??_sprintf+1,w
  4748  0633  3A00               	xorlw	0	; case 0
  4749  0634  1903               	skipnz
  4750  0635  2E37               	goto	l3967
  4751  0636  2E04               	goto	l3369
  4752  0637                     l3967:	
  4753                           
  4754                           ; Switch size 1, requested type "simple"
  4755                           ; Number of cases is 3, Range of values is 0 to 105
  4756                           ; switch strategies available:
  4757                           ; Name         Instructions Cycles
  4758                           ; simple_byte           10     6 (average)
  4759                           ; jumptable            260     6 (fixed)
  4760                           ;	Chosen strategy is simple_byte
  4761  0637  082C               	movf	??_sprintf,w
  4762  0638  3A00               	xorlw	0	; case 0
  4763  0639  1903               	skipnz
  4764  063A  2ED2               	goto	l3371
  4765  063B  3A64               	xorlw	100	; case 100
  4766  063C  1903               	skipnz
  4767  063D  2E42               	goto	l3331
  4768  063E  3A0D               	xorlw	13	; case 105
  4769  063F  1903               	skipnz
  4770  0640  2E42               	goto	l3331
  4771  0641  2E04               	goto	l3369
  4772  0642                     l3331:	
  4773                           
  4774                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4775  0642  082F               	movf	sprintf@ap,w
  4776  0643  0084               	movwf	4
  4777  0644  1383               	bcf	3,7	;select IRP bank0
  4778  0645  0800               	movf	0,w
  4779  0646  00B2               	movwf	sprintf@val
  4780  0647  0A84               	incf	4,f
  4781  0648  0800               	movf	0,w
  4782  0649  00B3               	movwf	sprintf@val+1
  4783  064A  3002               	movlw	2
  4784  064B  00AC               	movwf	??_sprintf
  4785  064C  082C               	movf	??_sprintf,w
  4786  064D  07AF               	addwf	sprintf@ap,f
  4787                           
  4788                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  4789  064E  1FB3               	btfss	sprintf@val+1,7
  4790  064F  2E59               	goto	l3341
  4791                           
  4792                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  4793  0650  3003               	movlw	3
  4794  0651  00AC               	movwf	??_sprintf
  4795  0652  082C               	movf	??_sprintf,w
  4796  0653  04B0               	iorwf	sprintf@flag,f
  4797                           
  4798                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  4799  0654  09B2               	comf	sprintf@val,f
  4800  0655  09B3               	comf	sprintf@val+1,f
  4801  0656  0AB2               	incf	sprintf@val,f
  4802  0657  1903               	skipnz
  4803  0658  0AB3               	incf	sprintf@val+1,f
  4804  0659                     l3341:	
  4805                           
  4806                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4807  0659  01B5               	clrf	sprintf@c
  4808  065A  0AB5               	incf	sprintf@c,f
  4809  065B                     l3347:	
  4810                           
  4811                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  4812  065B  0835               	movf	sprintf@c,w
  4813  065C  00AC               	movwf	??_sprintf
  4814  065D  072C               	addwf	??_sprintf,w
  4815  065E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4816  065F  0084               	movwf	4
  4817  0660  120A  118A  250A  120A  118A  	fcall	stringdir
  4818  0665  00AD               	movwf	??_sprintf+1
  4819  0666  120A  118A  250A  120A  118A  	fcall	stringdir
  4820  066B  00AE               	movwf	??_sprintf+2
  4821  066C  082E               	movf	??_sprintf+2,w
  4822  066D  0233               	subwf	sprintf@val+1,w
  4823  066E  1D03               	skipz
  4824  066F  2E72               	goto	u3295
  4825  0670  082D               	movf	??_sprintf+1,w
  4826  0671  0232               	subwf	sprintf@val,w
  4827  0672                     u3295:	
  4828  0672  1C03               	btfss	3,0
  4829  0673  2E7C               	goto	l3353
  4830  0674  3001               	movlw	1
  4831  0675  00AC               	movwf	??_sprintf
  4832  0676  082C               	movf	??_sprintf,w
  4833  0677  07B5               	addwf	sprintf@c,f
  4834  0678  3005               	movlw	5
  4835  0679  0635               	xorwf	sprintf@c,w
  4836  067A  1D03               	btfss	3,2
  4837  067B  2E5B               	goto	l3347
  4838  067C                     l3353:	
  4839                           
  4840                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  4841  067C  0830               	movf	sprintf@flag,w
  4842  067D  3903               	andlw	3
  4843  067E  1903               	btfsc	3,2
  4844  067F  2E8B               	goto	l3359
  4845                           
  4846                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  4847  0680  302D               	movlw	45
  4848  0681  00AC               	movwf	??_sprintf
  4849  0682  0834               	movf	sprintf@sp,w
  4850  0683  0084               	movwf	4
  4851  0684  082C               	movf	??_sprintf,w
  4852  0685  1383               	bcf	3,7	;select IRP bank0
  4853  0686  0080               	movwf	0
  4854  0687  3001               	movlw	1
  4855  0688  00AC               	movwf	??_sprintf
  4856  0689  082C               	movf	??_sprintf,w
  4857  068A  07B4               	addwf	sprintf@sp,f
  4858  068B                     l3359:	
  4859                           
  4860                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  4861  068B  0835               	movf	sprintf@c,w
  4862  068C  00AC               	movwf	??_sprintf
  4863  068D  082C               	movf	??_sprintf,w
  4864  068E  00B1               	movwf	sprintf@prec
  4865  068F                     l3367:	
  4866                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  4867                           
  4868                           
  4869                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  4870  068F  30FF               	movlw	255
  4871  0690  00AC               	movwf	??_sprintf
  4872  0691  082C               	movf	??_sprintf,w
  4873  0692  07B1               	addwf	sprintf@prec,f
  4874  0693  0A31               	incf	sprintf@prec,w
  4875  0694  1903               	btfsc	3,2
  4876  0695  2E04               	goto	l3369
  4877                           
  4878                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  4879  0696  300A               	movlw	10
  4880  0697  00A3               	movwf	___lwmod@divisor
  4881  0698  3000               	movlw	0
  4882  0699  00A4               	movwf	___lwmod@divisor+1
  4883  069A  0831               	movf	sprintf@prec,w
  4884  069B  00AC               	movwf	??_sprintf
  4885  069C  072C               	addwf	??_sprintf,w
  4886  069D  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4887  069E  0084               	movwf	4
  4888  069F  120A  118A  250A  120A  118A  	fcall	stringdir
  4889  06A4  00F3               	movwf	___lwdiv@divisor
  4890  06A5  120A  118A  250A  120A  118A  	fcall	stringdir
  4891  06AA  00F4               	movwf	___lwdiv@divisor+1
  4892  06AB  0833               	movf	sprintf@val+1,w
  4893  06AC  00F6               	movwf	___lwdiv@dividend+1
  4894  06AD  0832               	movf	sprintf@val,w
  4895  06AE  00F5               	movwf	___lwdiv@dividend
  4896  06AF  120A  158A  23C9  120A  118A  	fcall	___lwdiv
  4897  06B4  0874               	movf	?___lwdiv+1,w
  4898  06B5  1283               	bcf	3,5	;RP0=0, select bank0
  4899  06B6  1303               	bcf	3,6	;RP1=0, select bank0
  4900  06B7  00A6               	movwf	___lwmod@dividend+1
  4901  06B8  0873               	movf	?___lwdiv,w
  4902  06B9  00A5               	movwf	___lwmod@dividend
  4903  06BA  120A  158A  22EA  120A  118A  	fcall	___lwmod
  4904  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  4905  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  4906  06C1  0823               	movf	?___lwmod,w
  4907  06C2  3E30               	addlw	48
  4908  06C3  00AD               	movwf	??_sprintf+1
  4909  06C4  082D               	movf	??_sprintf+1,w
  4910  06C5  00B5               	movwf	sprintf@c
  4911                           
  4912                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  4913  06C6  0835               	movf	sprintf@c,w
  4914  06C7  00AC               	movwf	??_sprintf
  4915  06C8  0834               	movf	sprintf@sp,w
  4916  06C9  0084               	movwf	4
  4917  06CA  082C               	movf	??_sprintf,w
  4918  06CB  1383               	bcf	3,7	;select IRP bank0
  4919  06CC  0080               	movwf	0
  4920  06CD  3001               	movlw	1
  4921  06CE  00AC               	movwf	??_sprintf
  4922  06CF  082C               	movf	??_sprintf,w
  4923  06D0  07B4               	addwf	sprintf@sp,f
  4924  06D1  2E8F               	goto	l3367
  4925  06D2                     l3371:	
  4926                           
  4927                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  4928  06D2  0834               	movf	sprintf@sp,w
  4929  06D3  0084               	movwf	4
  4930  06D4  1383               	bcf	3,7	;select IRP bank0
  4931  06D5  0180               	clrf	0
  4932  06D6  0008               	return
  4933  06D7                     __end_of_sprintf:	
  4934                           
  4935                           	psect	text16
  4936  0AEA                     __ptext16:	
  4937 ;; *************** function ___lwmod *****************
  4938 ;; Defined at:
  4939 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;  divisor         2    3[BANK0 ] unsigned int 
  4942 ;;  dividend        2    5[BANK0 ] unsigned int 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;  counter         1    8[BANK0 ] unsigned char 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;                  2    3[BANK0 ] unsigned int 
  4947 ;; Registers used:
  4948 ;;		wreg, status,2, status,0
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4954 ;;      Params:         0       4       0       0       0
  4955 ;;      Locals:         0       1       0       0       0
  4956 ;;      Temps:          0       1       0       0       0
  4957 ;;      Totals:         0       6       0       0       0
  4958 ;;Total ram usage:        6 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:    1
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_sprintf
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           
  4969                           ;psect for function ___lwmod
  4970  0AEA                     ___lwmod:	
  4971                           
  4972                           ;incstack = 0
  4973                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4974  0AEA  1283               	bcf	3,5	;RP0=0, select bank0
  4975  0AEB  1303               	bcf	3,6	;RP1=0, select bank0
  4976  0AEC  0823               	movf	___lwmod@divisor,w
  4977  0AED  0424               	iorwf	___lwmod@divisor+1,w
  4978  0AEE  1903               	btfsc	3,2
  4979  0AEF  2B19               	goto	l2259
  4980  0AF0  01A8               	clrf	___lwmod@counter
  4981  0AF1  0AA8               	incf	___lwmod@counter,f
  4982  0AF2                     l2249:	
  4983  0AF2  1BA4               	btfsc	___lwmod@divisor+1,7
  4984  0AF3  2B00               	goto	l2251
  4985  0AF4  3001               	movlw	1
  4986  0AF5                     u1785:	
  4987  0AF5  1003               	clrc
  4988  0AF6  0DA3               	rlf	___lwmod@divisor,f
  4989  0AF7  0DA4               	rlf	___lwmod@divisor+1,f
  4990  0AF8  3EFF               	addlw	-1
  4991  0AF9  1D03               	skipz
  4992  0AFA  2AF5               	goto	u1785
  4993  0AFB  3001               	movlw	1
  4994  0AFC  00A7               	movwf	??___lwmod
  4995  0AFD  0827               	movf	??___lwmod,w
  4996  0AFE  07A8               	addwf	___lwmod@counter,f
  4997  0AFF  2AF2               	goto	l2249
  4998  0B00                     l2251:	
  4999  0B00  0824               	movf	___lwmod@divisor+1,w
  5000  0B01  0226               	subwf	___lwmod@dividend+1,w
  5001  0B02  1D03               	skipz
  5002  0B03  2B06               	goto	u1805
  5003  0B04  0823               	movf	___lwmod@divisor,w
  5004  0B05  0225               	subwf	___lwmod@dividend,w
  5005  0B06                     u1805:	
  5006  0B06  1C03               	skipc
  5007  0B07  2B0E               	goto	l2255
  5008  0B08  0823               	movf	___lwmod@divisor,w
  5009  0B09  02A5               	subwf	___lwmod@dividend,f
  5010  0B0A  0824               	movf	___lwmod@divisor+1,w
  5011  0B0B  1C03               	skipc
  5012  0B0C  03A6               	decf	___lwmod@dividend+1,f
  5013  0B0D  02A6               	subwf	___lwmod@dividend+1,f
  5014  0B0E                     l2255:	
  5015  0B0E  3001               	movlw	1
  5016  0B0F                     u1815:	
  5017  0B0F  1003               	clrc
  5018  0B10  0CA4               	rrf	___lwmod@divisor+1,f
  5019  0B11  0CA3               	rrf	___lwmod@divisor,f
  5020  0B12  3EFF               	addlw	-1
  5021  0B13  1D03               	skipz
  5022  0B14  2B0F               	goto	u1815
  5023  0B15  3001               	movlw	1
  5024  0B16  02A8               	subwf	___lwmod@counter,f
  5025  0B17  1D03               	btfss	3,2
  5026  0B18  2B00               	goto	l2251
  5027  0B19                     l2259:	
  5028  0B19  0826               	movf	___lwmod@dividend+1,w
  5029  0B1A  00A4               	movwf	?___lwmod+1
  5030  0B1B  0825               	movf	___lwmod@dividend,w
  5031  0B1C  00A3               	movwf	?___lwmod
  5032  0B1D  0008               	return
  5033  0B1E                     __end_of___lwmod:	
  5034                           
  5035                           	psect	text17
  5036  0BC9                     __ptext17:	
  5037 ;; *************** function ___lwdiv *****************
  5038 ;; Defined at:
  5039 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  5040 ;; Parameters:    Size  Location     Type
  5041 ;;  divisor         2    3[COMMON] unsigned int 
  5042 ;;  dividend        2    5[COMMON] unsigned int 
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;  quotient        2    1[BANK0 ] unsigned int 
  5045 ;;  counter         1    0[BANK0 ] unsigned char 
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  2    3[COMMON] unsigned int 
  5048 ;; Registers used:
  5049 ;;		wreg, status,2, status,0
  5050 ;; Tracked objects:
  5051 ;;		On entry : 0/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5055 ;;      Params:         4       0       0       0       0
  5056 ;;      Locals:         0       3       0       0       0
  5057 ;;      Temps:          1       0       0       0       0
  5058 ;;      Totals:         5       3       0       0       0
  5059 ;;Total ram usage:        8 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; Hardware stack levels required when called:    1
  5062 ;; This function calls:
  5063 ;;		Nothing
  5064 ;; This function is called by:
  5065 ;;		_sprintf
  5066 ;; This function uses a non-reentrant model
  5067 ;;
  5068                           
  5069                           
  5070                           ;psect for function ___lwdiv
  5071  0BC9                     ___lwdiv:	
  5072                           
  5073                           ;incstack = 0
  5074                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5075  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  5076  0BCA  1303               	bcf	3,6	;RP1=0, select bank0
  5077  0BCB  01A1               	clrf	___lwdiv@quotient
  5078  0BCC  01A2               	clrf	___lwdiv@quotient+1
  5079  0BCD  0873               	movf	___lwdiv@divisor,w
  5080  0BCE  0474               	iorwf	___lwdiv@divisor+1,w
  5081  0BCF  1903               	btfsc	3,2
  5082  0BD0  2C02               	goto	l3233
  5083  0BD1  01A0               	clrf	___lwdiv@counter
  5084  0BD2  0AA0               	incf	___lwdiv@counter,f
  5085  0BD3                     l3221:	
  5086  0BD3  1BF4               	btfsc	___lwdiv@divisor+1,7
  5087  0BD4  2BE1               	goto	l3223
  5088  0BD5  3001               	movlw	1
  5089  0BD6                     u3115:	
  5090  0BD6  1003               	clrc
  5091  0BD7  0DF3               	rlf	___lwdiv@divisor,f
  5092  0BD8  0DF4               	rlf	___lwdiv@divisor+1,f
  5093  0BD9  3EFF               	addlw	-1
  5094  0BDA  1D03               	skipz
  5095  0BDB  2BD6               	goto	u3115
  5096  0BDC  3001               	movlw	1
  5097  0BDD  00F7               	movwf	??___lwdiv
  5098  0BDE  0877               	movf	??___lwdiv,w
  5099  0BDF  07A0               	addwf	___lwdiv@counter,f
  5100  0BE0  2BD3               	goto	l3221
  5101  0BE1                     l3223:	
  5102  0BE1  3001               	movlw	1
  5103  0BE2                     u3135:	
  5104  0BE2  1003               	clrc
  5105  0BE3  0DA1               	rlf	___lwdiv@quotient,f
  5106  0BE4  0DA2               	rlf	___lwdiv@quotient+1,f
  5107  0BE5  3EFF               	addlw	-1
  5108  0BE6  1D03               	skipz
  5109  0BE7  2BE2               	goto	u3135
  5110  0BE8  0874               	movf	___lwdiv@divisor+1,w
  5111  0BE9  0276               	subwf	___lwdiv@dividend+1,w
  5112  0BEA  1D03               	skipz
  5113  0BEB  2BEE               	goto	u3145
  5114  0BEC  0873               	movf	___lwdiv@divisor,w
  5115  0BED  0275               	subwf	___lwdiv@dividend,w
  5116  0BEE                     u3145:	
  5117  0BEE  1C03               	skipc
  5118  0BEF  2BF7               	goto	l3229
  5119  0BF0  0873               	movf	___lwdiv@divisor,w
  5120  0BF1  02F5               	subwf	___lwdiv@dividend,f
  5121  0BF2  0874               	movf	___lwdiv@divisor+1,w
  5122  0BF3  1C03               	skipc
  5123  0BF4  03F6               	decf	___lwdiv@dividend+1,f
  5124  0BF5  02F6               	subwf	___lwdiv@dividend+1,f
  5125  0BF6  1421               	bsf	___lwdiv@quotient,0
  5126  0BF7                     l3229:	
  5127  0BF7  3001               	movlw	1
  5128  0BF8                     u3155:	
  5129  0BF8  1003               	clrc
  5130  0BF9  0CF4               	rrf	___lwdiv@divisor+1,f
  5131  0BFA  0CF3               	rrf	___lwdiv@divisor,f
  5132  0BFB  3EFF               	addlw	-1
  5133  0BFC  1D03               	skipz
  5134  0BFD  2BF8               	goto	u3155
  5135  0BFE  3001               	movlw	1
  5136  0BFF  02A0               	subwf	___lwdiv@counter,f
  5137  0C00  1D03               	btfss	3,2
  5138  0C01  2BE1               	goto	l3223
  5139  0C02                     l3233:	
  5140  0C02  0822               	movf	___lwdiv@quotient+1,w
  5141  0C03  00F4               	movwf	?___lwdiv+1
  5142  0C04  0821               	movf	___lwdiv@quotient,w
  5143  0C05  00F3               	movwf	?___lwdiv
  5144  0C06  0008               	return
  5145  0C07                     __end_of___lwdiv:	
  5146                           
  5147                           	psect	text18
  5148  04EB                     __ptext18:	
  5149 ;; *************** function ___bmul *****************
  5150 ;; Defined at:
  5151 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  5152 ;; Parameters:    Size  Location     Type
  5153 ;;  multiplier      1    wreg     unsigned char 
  5154 ;;  multiplicand    1    3[COMMON] unsigned char 
  5155 ;; Auto vars:     Size  Location     Type
  5156 ;;  multiplier      1    6[COMMON] unsigned char 
  5157 ;;  product         1    5[COMMON] unsigned char 
  5158 ;; Return value:  Size  Location     Type
  5159 ;;                  1    wreg      unsigned char 
  5160 ;; Registers used:
  5161 ;;		wreg, status,2, status,0
  5162 ;; Tracked objects:
  5163 ;;		On entry : 0/0
  5164 ;;		On exit  : 0/0
  5165 ;;		Unchanged: 0/0
  5166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5167 ;;      Params:         1       0       0       0       0
  5168 ;;      Locals:         2       0       0       0       0
  5169 ;;      Temps:          1       0       0       0       0
  5170 ;;      Totals:         4       0       0       0       0
  5171 ;;Total ram usage:        4 bytes
  5172 ;; Hardware stack levels used:    1
  5173 ;; Hardware stack levels required when called:    1
  5174 ;; This function calls:
  5175 ;;		Nothing
  5176 ;; This function is called by:
  5177 ;;		_main
  5178 ;;		_get_temp
  5179 ;; This function uses a non-reentrant model
  5180 ;;
  5181                           
  5182                           
  5183                           ;psect for function ___bmul
  5184  04EB                     ___bmul:	
  5185                           
  5186                           ;incstack = 0
  5187                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5188                           ;___bmul@multiplier stored from wreg
  5189  04EB  00F6               	movwf	___bmul@multiplier
  5190  04EC  01F5               	clrf	___bmul@product
  5191  04ED                     l2465:	
  5192  04ED  1C76               	btfss	___bmul@multiplier,0
  5193  04EE  2CF3               	goto	l2469
  5194  04EF  0873               	movf	___bmul@multiplicand,w
  5195  04F0  00F4               	movwf	??___bmul
  5196  04F1  0874               	movf	??___bmul,w
  5197  04F2  07F5               	addwf	___bmul@product,f
  5198  04F3                     l2469:	
  5199  04F3  1003               	clrc
  5200  04F4  0DF3               	rlf	___bmul@multiplicand,f
  5201  04F5  1003               	clrc
  5202  04F6  0CF6               	rrf	___bmul@multiplier,f
  5203  04F7  0876               	movf	___bmul@multiplier,w
  5204  04F8  1D03               	btfss	3,2
  5205  04F9  2CED               	goto	l2465
  5206  04FA  0875               	movf	___bmul@product,w
  5207  04FB  0008               	return
  5208  04FC                     __end_of___bmul:	
  5209                           
  5210                           	psect	text19
  5211  0A26                     __ptext19:	
  5212 ;; *************** function _get_hall *****************
  5213 ;; Defined at:
  5214 ;;		line 478 in file "mainMaster.c"
  5215 ;; Parameters:    Size  Location     Type
  5216 ;;		None
  5217 ;; Auto vars:     Size  Location     Type
  5218 ;;  key             1    2[BANK0 ] unsigned char 
  5219 ;; Return value:  Size  Location     Type
  5220 ;;                  1    wreg      unsigned char 
  5221 ;; Registers used:
  5222 ;;		wreg, status,2, status,0, pclath, cstack
  5223 ;; Tracked objects:
  5224 ;;		On entry : 0/0
  5225 ;;		On exit  : 0/0
  5226 ;;		Unchanged: 0/0
  5227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5228 ;;      Params:         0       0       0       0       0
  5229 ;;      Locals:         0       1       0       0       0
  5230 ;;      Temps:          1       0       0       0       0
  5231 ;;      Totals:         1       1       0       0       0
  5232 ;;Total ram usage:        2 bytes
  5233 ;; Hardware stack levels used:    1
  5234 ;; Hardware stack levels required when called:    3
  5235 ;; This function calls:
  5236 ;;		_I2C_Master_Read
  5237 ;;		_I2C_Master_Start
  5238 ;;		_I2C_Master_Stop
  5239 ;;		_I2C_Master_Write
  5240 ;; This function is called by:
  5241 ;;		_main
  5242 ;; This function uses a non-reentrant model
  5243 ;;
  5244                           
  5245                           
  5246                           ;psect for function _get_hall
  5247  0A26                     _get_hall:	
  5248                           
  5249                           ;mainMaster.c: 480:     char key;;mainMaster.c: 482:     I2C_Master_Start();
  5250                           
  5251                           ;incstack = 0
  5252                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  5253  0A26  120A  158A  2114  120A  158A  	fcall	_I2C_Master_Start
  5254                           
  5255                           ;mainMaster.c: 483:     I2C_Master_Write(0x11);
  5256  0A2B  3011               	movlw	17
  5257  0A2C  00F3               	movwf	I2C_Master_Write@d
  5258  0A2D  3000               	movlw	0
  5259  0A2E  00F4               	movwf	I2C_Master_Write@d+1
  5260  0A2F  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  5261                           
  5262                           ;mainMaster.c: 484:     key = I2C_Master_Read(0);
  5263  0A34  3000               	movlw	0
  5264  0A35  00F3               	movwf	I2C_Master_Read@a
  5265  0A36  00F4               	movwf	I2C_Master_Read@a+1
  5266  0A37  120A  158A  22BC  120A  158A  	fcall	_I2C_Master_Read
  5267  0A3C  0873               	movf	?_I2C_Master_Read,w
  5268  0A3D  00F7               	movwf	??_get_hall
  5269  0A3E  0877               	movf	??_get_hall,w
  5270  0A3F  1283               	bcf	3,5	;RP0=0, select bank0
  5271  0A40  1303               	bcf	3,6	;RP1=0, select bank0
  5272  0A41  00A2               	movwf	get_hall@key
  5273                           
  5274                           ;mainMaster.c: 485:     I2C_Master_Stop();
  5275  0A42  120A  158A  211B   	fcall	_I2C_Master_Stop
  5276                           
  5277                           ;mainMaster.c: 487:     return (key);
  5278  0A45  1283               	bcf	3,5	;RP0=0, select bank0
  5279  0A46  1303               	bcf	3,6	;RP1=0, select bank0
  5280  0A47  0822               	movf	get_hall@key,w
  5281  0A48  0008               	return
  5282  0A49                     __end_of_get_hall:	
  5283                           
  5284                           	psect	text20
  5285  0B8F                     __ptext20:	
  5286 ;; *************** function _get_day *****************
  5287 ;; Defined at:
  5288 ;;		line 436 in file "mainMaster.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;		None
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  d               1    2[BANK0 ] unsigned char 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      unsigned char 
  5295 ;; Registers used:
  5296 ;;		wreg, status,2, status,0, pclath, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5302 ;;      Params:         0       0       0       0       0
  5303 ;;      Locals:         0       1       0       0       0
  5304 ;;      Temps:          1       0       0       0       0
  5305 ;;      Totals:         1       1       0       0       0
  5306 ;;Total ram usage:        2 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    3
  5309 ;; This function calls:
  5310 ;;		_I2C_Master_Read
  5311 ;;		_I2C_Master_RepeatedStart
  5312 ;;		_I2C_Master_Start
  5313 ;;		_I2C_Master_Stop
  5314 ;;		_I2C_Master_Write
  5315 ;; This function is called by:
  5316 ;;		_main
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           
  5321                           ;psect for function _get_day
  5322  0B8F                     _get_day:	
  5323                           
  5324                           ;mainMaster.c: 438:     char d;;mainMaster.c: 440:     I2C_Master_Start();
  5325                           
  5326                           ;incstack = 0
  5327                           ; Regs used in _get_day: [wreg+status,2+status,0+pclath+cstack]
  5328  0B8F  120A  158A  2114  120A  158A  	fcall	_I2C_Master_Start
  5329                           
  5330                           ;mainMaster.c: 441:     I2C_Master_Write(0xD0);
  5331  0B94  30D0               	movlw	208
  5332  0B95  00F3               	movwf	I2C_Master_Write@d
  5333  0B96  3000               	movlw	0
  5334  0B97  00F4               	movwf	I2C_Master_Write@d+1
  5335  0B98  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  5336                           
  5337                           ;mainMaster.c: 442:     I2C_Master_Write(0x03);
  5338  0B9D  3003               	movlw	3
  5339  0B9E  00F3               	movwf	I2C_Master_Write@d
  5340  0B9F  3000               	movlw	0
  5341  0BA0  00F4               	movwf	I2C_Master_Write@d+1
  5342  0BA1  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  5343                           
  5344                           ;mainMaster.c: 443:     I2C_Master_RepeatedStart();
  5345  0BA6  120A  158A  2122  120A  158A  	fcall	_I2C_Master_RepeatedStart
  5346                           
  5347                           ;mainMaster.c: 444:     I2C_Master_Write(0xD1);
  5348  0BAB  30D1               	movlw	209
  5349  0BAC  00F3               	movwf	I2C_Master_Write@d
  5350  0BAD  3000               	movlw	0
  5351  0BAE  00F4               	movwf	I2C_Master_Write@d+1
  5352  0BAF  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  5353                           
  5354                           ;mainMaster.c: 445:     d = I2C_Master_Read(0);
  5355  0BB4  3000               	movlw	0
  5356  0BB5  00F3               	movwf	I2C_Master_Read@a
  5357  0BB6  00F4               	movwf	I2C_Master_Read@a+1
  5358  0BB7  120A  158A  22BC  120A  158A  	fcall	_I2C_Master_Read
  5359  0BBC  0873               	movf	?_I2C_Master_Read,w
  5360  0BBD  00F7               	movwf	??_get_day
  5361  0BBE  0877               	movf	??_get_day,w
  5362  0BBF  1283               	bcf	3,5	;RP0=0, select bank0
  5363  0BC0  1303               	bcf	3,6	;RP1=0, select bank0
  5364  0BC1  00A2               	movwf	get_day@d
  5365                           
  5366                           ;mainMaster.c: 446:     I2C_Master_Stop();
  5367  0BC2  120A  158A  211B   	fcall	_I2C_Master_Stop
  5368                           
  5369                           ;mainMaster.c: 448:     return d;
  5370  0BC5  1283               	bcf	3,5	;RP0=0, select bank0
  5371  0BC6  1303               	bcf	3,6	;RP1=0, select bank0
  5372  0BC7  0822               	movf	get_day@d,w
  5373  0BC8  0008               	return
  5374  0BC9                     __end_of_get_day:	
  5375                           
  5376                           	psect	text21
  5377  0922                     __ptext21:	
  5378 ;; *************** function _I2C_Master_RepeatedStart *****************
  5379 ;; Defined at:
  5380 ;;		line 47 in file "./I2C.h"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;		None
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;		None
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  1    wreg      void 
  5387 ;; Registers used:
  5388 ;;		wreg, status,2, status,0, pclath, cstack
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5394 ;;      Params:         0       0       0       0       0
  5395 ;;      Locals:         0       0       0       0       0
  5396 ;;      Temps:          0       0       0       0       0
  5397 ;;      Totals:         0       0       0       0       0
  5398 ;;Total ram usage:        0 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    2
  5401 ;; This function calls:
  5402 ;;		_I2C_Master_Wait
  5403 ;; This function is called by:
  5404 ;;		_get_time
  5405 ;;		_get_day
  5406 ;;		_get_temp
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410                           
  5411                           ;psect for function _I2C_Master_RepeatedStart
  5412  0922                     _I2C_Master_RepeatedStart:	
  5413                           
  5414                           ;./I2C.h: 49:     I2C_Master_Wait();
  5415                           
  5416                           ;incstack = 0
  5417                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  5418  0922  120A  158A  2139   	fcall	_I2C_Master_Wait
  5419                           
  5420                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  5421  0925  1683               	bsf	3,5	;RP0=1, select bank1
  5422  0926  1303               	bcf	3,6	;RP1=0, select bank1
  5423  0927  1491               	bsf	17,1	;volatile
  5424  0928  0008               	return
  5425  0929                     __end_of_I2C_Master_RepeatedStart:	
  5426                           
  5427                           	psect	text22
  5428  0A03                     __ptext22:	
  5429 ;; *************** function _get_PIR *****************
  5430 ;; Defined at:
  5431 ;;		line 502 in file "mainMaster.c"
  5432 ;; Parameters:    Size  Location     Type
  5433 ;;		None
  5434 ;; Auto vars:     Size  Location     Type
  5435 ;;  PIR             1    2[BANK0 ] unsigned char 
  5436 ;; Return value:  Size  Location     Type
  5437 ;;                  1    wreg      unsigned char 
  5438 ;; Registers used:
  5439 ;;		wreg, status,2, status,0, pclath, cstack
  5440 ;; Tracked objects:
  5441 ;;		On entry : 0/0
  5442 ;;		On exit  : 0/0
  5443 ;;		Unchanged: 0/0
  5444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5445 ;;      Params:         0       0       0       0       0
  5446 ;;      Locals:         0       1       0       0       0
  5447 ;;      Temps:          1       0       0       0       0
  5448 ;;      Totals:         1       1       0       0       0
  5449 ;;Total ram usage:        2 bytes
  5450 ;; Hardware stack levels used:    1
  5451 ;; Hardware stack levels required when called:    3
  5452 ;; This function calls:
  5453 ;;		_I2C_Master_Read
  5454 ;;		_I2C_Master_Start
  5455 ;;		_I2C_Master_Stop
  5456 ;;		_I2C_Master_Write
  5457 ;; This function is called by:
  5458 ;;		_main
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462                           
  5463                           ;psect for function _get_PIR
  5464  0A03                     _get_PIR:	
  5465                           
  5466                           ;mainMaster.c: 504:     char PIR;;mainMaster.c: 506:     I2C_Master_Start();
  5467                           
  5468                           ;incstack = 0
  5469                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  5470  0A03  120A  158A  2114  120A  158A  	fcall	_I2C_Master_Start
  5471                           
  5472                           ;mainMaster.c: 507:     I2C_Master_Write(0x41);
  5473  0A08  3041               	movlw	65
  5474  0A09  00F3               	movwf	I2C_Master_Write@d
  5475  0A0A  3000               	movlw	0
  5476  0A0B  00F4               	movwf	I2C_Master_Write@d+1
  5477  0A0C  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  5478                           
  5479                           ;mainMaster.c: 508:     PIR = I2C_Master_Read(0);
  5480  0A11  3000               	movlw	0
  5481  0A12  00F3               	movwf	I2C_Master_Read@a
  5482  0A13  00F4               	movwf	I2C_Master_Read@a+1
  5483  0A14  120A  158A  22BC  120A  158A  	fcall	_I2C_Master_Read
  5484  0A19  0873               	movf	?_I2C_Master_Read,w
  5485  0A1A  00F7               	movwf	??_get_PIR
  5486  0A1B  0877               	movf	??_get_PIR,w
  5487  0A1C  1283               	bcf	3,5	;RP0=0, select bank0
  5488  0A1D  1303               	bcf	3,6	;RP1=0, select bank0
  5489  0A1E  00A2               	movwf	get_PIR@PIR
  5490                           
  5491                           ;mainMaster.c: 509:     I2C_Master_Stop();
  5492  0A1F  120A  158A  211B   	fcall	_I2C_Master_Stop
  5493                           
  5494                           ;mainMaster.c: 511:     return (PIR);
  5495  0A22  1283               	bcf	3,5	;RP0=0, select bank0
  5496  0A23  1303               	bcf	3,6	;RP1=0, select bank0
  5497  0A24  0822               	movf	get_PIR@PIR,w
  5498  0A25  0008               	return
  5499  0A26                     __end_of_get_PIR:	
  5500                           
  5501                           	psect	text23
  5502  09E0                     __ptext23:	
  5503 ;; *************** function _get_IR *****************
  5504 ;; Defined at:
  5505 ;;		line 514 in file "mainMaster.c"
  5506 ;; Parameters:    Size  Location     Type
  5507 ;;		None
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;  IR              1    2[BANK0 ] unsigned char 
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  1    wreg      unsigned char 
  5512 ;; Registers used:
  5513 ;;		wreg, status,2, status,0, pclath, cstack
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 0/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5519 ;;      Params:         0       0       0       0       0
  5520 ;;      Locals:         0       1       0       0       0
  5521 ;;      Temps:          1       0       0       0       0
  5522 ;;      Totals:         1       1       0       0       0
  5523 ;;Total ram usage:        2 bytes
  5524 ;; Hardware stack levels used:    1
  5525 ;; Hardware stack levels required when called:    3
  5526 ;; This function calls:
  5527 ;;		_I2C_Master_Read
  5528 ;;		_I2C_Master_Start
  5529 ;;		_I2C_Master_Stop
  5530 ;;		_I2C_Master_Write
  5531 ;; This function is called by:
  5532 ;;		_main
  5533 ;; This function uses a non-reentrant model
  5534 ;;
  5535                           
  5536                           
  5537                           ;psect for function _get_IR
  5538  09E0                     _get_IR:	
  5539                           
  5540                           ;mainMaster.c: 516:     char IR;;mainMaster.c: 518:     I2C_Master_Start();
  5541                           
  5542                           ;incstack = 0
  5543                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  5544  09E0  120A  158A  2114  120A  158A  	fcall	_I2C_Master_Start
  5545                           
  5546                           ;mainMaster.c: 519:     I2C_Master_Write(0x31);
  5547  09E5  3031               	movlw	49
  5548  09E6  00F3               	movwf	I2C_Master_Write@d
  5549  09E7  3000               	movlw	0
  5550  09E8  00F4               	movwf	I2C_Master_Write@d+1
  5551  09E9  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  5552                           
  5553                           ;mainMaster.c: 520:     IR = I2C_Master_Read(0);
  5554  09EE  3000               	movlw	0
  5555  09EF  00F3               	movwf	I2C_Master_Read@a
  5556  09F0  00F4               	movwf	I2C_Master_Read@a+1
  5557  09F1  120A  158A  22BC  120A  158A  	fcall	_I2C_Master_Read
  5558  09F6  0873               	movf	?_I2C_Master_Read,w
  5559  09F7  00F7               	movwf	??_get_IR
  5560  09F8  0877               	movf	??_get_IR,w
  5561  09F9  1283               	bcf	3,5	;RP0=0, select bank0
  5562  09FA  1303               	bcf	3,6	;RP1=0, select bank0
  5563  09FB  00A2               	movwf	get_IR@IR
  5564                           
  5565                           ;mainMaster.c: 521:     I2C_Master_Stop();
  5566  09FC  120A  158A  211B   	fcall	_I2C_Master_Stop
  5567                           
  5568                           ;mainMaster.c: 523:     return (IR);
  5569  09FF  1283               	bcf	3,5	;RP0=0, select bank0
  5570  0A00  1303               	bcf	3,6	;RP1=0, select bank0
  5571  0A01  0822               	movf	get_IR@IR,w
  5572  0A02  0008               	return
  5573  0A03                     __end_of_get_IR:	
  5574                           
  5575                           	psect	text24
  5576  0ABC                     __ptext24:	
  5577 ;; *************** function _I2C_Master_Read *****************
  5578 ;; Defined at:
  5579 ;;		line 74 in file "./I2C.h"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  a               2    3[COMMON] unsigned short 
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;  temp            2    0[BANK0 ] unsigned short 
  5584 ;; Return value:  Size  Location     Type
  5585 ;;                  2    3[COMMON] unsigned short 
  5586 ;; Registers used:
  5587 ;;		wreg, status,2, status,0, pclath, cstack
  5588 ;; Tracked objects:
  5589 ;;		On entry : 0/0
  5590 ;;		On exit  : 0/0
  5591 ;;		Unchanged: 0/0
  5592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5593 ;;      Params:         2       0       0       0       0
  5594 ;;      Locals:         0       2       0       0       0
  5595 ;;      Temps:          2       0       0       0       0
  5596 ;;      Totals:         4       2       0       0       0
  5597 ;;Total ram usage:        6 bytes
  5598 ;; Hardware stack levels used:    1
  5599 ;; Hardware stack levels required when called:    2
  5600 ;; This function calls:
  5601 ;;		_I2C_Master_Wait
  5602 ;; This function is called by:
  5603 ;;		_get_time
  5604 ;;		_get_day
  5605 ;;		_get_temp
  5606 ;;		_get_hall
  5607 ;;		_get_tripwire
  5608 ;;		_get_PIR
  5609 ;;		_get_IR
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           
  5614                           ;psect for function _I2C_Master_Read
  5615  0ABC                     _I2C_Master_Read:	
  5616                           
  5617                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  5618                           
  5619                           ;incstack = 0
  5620                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  5621  0ABC  120A  158A  2139  120A  158A  	fcall	_I2C_Master_Wait
  5622                           
  5623                           ;./I2C.h: 78:     RCEN = 1;
  5624  0AC1  1683               	bsf	3,5	;RP0=1, select bank1
  5625  0AC2  1303               	bcf	3,6	;RP1=0, select bank1
  5626  0AC3  1591               	bsf	17,3	;volatile
  5627                           
  5628                           ;./I2C.h: 79:     I2C_Master_Wait();
  5629  0AC4  120A  158A  2139  120A  158A  	fcall	_I2C_Master_Wait
  5630                           
  5631                           ;./I2C.h: 80:     temp = SSPBUF;
  5632  0AC9  1283               	bcf	3,5	;RP0=0, select bank0
  5633  0ACA  1303               	bcf	3,6	;RP1=0, select bank0
  5634  0ACB  0813               	movf	19,w	;volatile
  5635  0ACC  00F5               	movwf	??_I2C_Master_Read
  5636  0ACD  01F6               	clrf	??_I2C_Master_Read+1
  5637  0ACE  0875               	movf	??_I2C_Master_Read,w
  5638  0ACF  00A0               	movwf	I2C_Master_Read@temp
  5639  0AD0  0876               	movf	??_I2C_Master_Read+1,w
  5640  0AD1  00A1               	movwf	I2C_Master_Read@temp+1
  5641                           
  5642                           ;./I2C.h: 81:     I2C_Master_Wait();
  5643  0AD2  120A  158A  2139  120A  158A  	fcall	_I2C_Master_Wait
  5644                           
  5645                           ;./I2C.h: 83:     if(a == 1){
  5646  0AD7  0373               	decf	I2C_Master_Read@a,w
  5647  0AD8  0474               	iorwf	I2C_Master_Read@a+1,w
  5648  0AD9  1D03               	btfss	3,2
  5649  0ADA  2ADF               	goto	l150
  5650                           
  5651                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  5652  0ADB  1683               	bsf	3,5	;RP0=1, select bank1
  5653  0ADC  1303               	bcf	3,6	;RP1=0, select bank1
  5654  0ADD  1291               	bcf	17,5	;volatile
  5655                           
  5656                           ;./I2C.h: 85:     }else{
  5657  0ADE  2AE2               	goto	l151
  5658  0ADF                     l150:	
  5659                           
  5660                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  5661  0ADF  1683               	bsf	3,5	;RP0=1, select bank1
  5662  0AE0  1303               	bcf	3,6	;RP1=0, select bank1
  5663  0AE1  1691               	bsf	17,5	;volatile
  5664  0AE2                     l151:	
  5665                           ;./I2C.h: 87:     }
  5666                           
  5667                           
  5668                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  5669  0AE2  1611               	bsf	17,4	;volatile
  5670                           
  5671                           ;./I2C.h: 89:     return temp;
  5672  0AE3  1283               	bcf	3,5	;RP0=0, select bank0
  5673  0AE4  1303               	bcf	3,6	;RP1=0, select bank0
  5674  0AE5  0821               	movf	I2C_Master_Read@temp+1,w
  5675  0AE6  00F4               	movwf	?_I2C_Master_Read+1
  5676  0AE7  0820               	movf	I2C_Master_Read@temp,w
  5677  0AE8  00F3               	movwf	?_I2C_Master_Read
  5678  0AE9  0008               	return
  5679  0AEA                     __end_of_I2C_Master_Read:	
  5680                           
  5681                           	psect	text25
  5682  098B                     __ptext25:	
  5683 ;; *************** function _close_door *****************
  5684 ;; Defined at:
  5685 ;;		line 535 in file "mainMaster.c"
  5686 ;; Parameters:    Size  Location     Type
  5687 ;;		None
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;		None
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  1    wreg      void 
  5692 ;; Registers used:
  5693 ;;		wreg, status,2, status,0, pclath, cstack
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5699 ;;      Params:         0       0       0       0       0
  5700 ;;      Locals:         0       0       0       0       0
  5701 ;;      Temps:          0       0       0       0       0
  5702 ;;      Totals:         0       0       0       0       0
  5703 ;;Total ram usage:        0 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:    3
  5706 ;; This function calls:
  5707 ;;		_I2C_Master_Start
  5708 ;;		_I2C_Master_Stop
  5709 ;;		_I2C_Master_Write
  5710 ;; This function is called by:
  5711 ;;		_main
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           
  5716                           ;psect for function _close_door
  5717  098B                     _close_door:	
  5718                           
  5719                           ;mainMaster.c: 537:     I2C_Master_Start();
  5720                           
  5721                           ;incstack = 0
  5722                           ; Regs used in _close_door: [wreg+status,2+status,0+pclath+cstack]
  5723  098B  120A  158A  2114  120A  158A  	fcall	_I2C_Master_Start
  5724                           
  5725                           ;mainMaster.c: 538:     I2C_Master_Write(0x20);
  5726  0990  3020               	movlw	32
  5727  0991  00F3               	movwf	I2C_Master_Write@d
  5728  0992  3000               	movlw	0
  5729  0993  00F4               	movwf	I2C_Master_Write@d+1
  5730  0994  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  5731                           
  5732                           ;mainMaster.c: 539:     I2C_Master_Write(0xF0);
  5733  0999  30F0               	movlw	240
  5734  099A  00F3               	movwf	I2C_Master_Write@d
  5735  099B  3000               	movlw	0
  5736  099C  00F4               	movwf	I2C_Master_Write@d+1
  5737  099D  120A  158A  2129  120A  158A  	fcall	_I2C_Master_Write
  5738                           
  5739                           ;mainMaster.c: 540:     I2C_Master_Stop();
  5740  09A2  120A  158A  211B   	fcall	_I2C_Master_Stop
  5741  09A5  0008               	return
  5742  09A6                     __end_of_close_door:	
  5743                           
  5744                           	psect	text26
  5745  0929                     __ptext26:	
  5746 ;; *************** function _I2C_Master_Write *****************
  5747 ;; Defined at:
  5748 ;;		line 65 in file "./I2C.h"
  5749 ;; Parameters:    Size  Location     Type
  5750 ;;  d               2    3[COMMON] unsigned int 
  5751 ;; Auto vars:     Size  Location     Type
  5752 ;;		None
  5753 ;; Return value:  Size  Location     Type
  5754 ;;                  1    wreg      void 
  5755 ;; Registers used:
  5756 ;;		wreg, status,2, status,0, pclath, cstack
  5757 ;; Tracked objects:
  5758 ;;		On entry : 0/0
  5759 ;;		On exit  : 0/0
  5760 ;;		Unchanged: 0/0
  5761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5762 ;;      Params:         2       0       0       0       0
  5763 ;;      Locals:         0       0       0       0       0
  5764 ;;      Temps:          0       0       0       0       0
  5765 ;;      Totals:         2       0       0       0       0
  5766 ;;Total ram usage:        2 bytes
  5767 ;; Hardware stack levels used:    1
  5768 ;; Hardware stack levels required when called:    2
  5769 ;; This function calls:
  5770 ;;		_I2C_Master_Wait
  5771 ;; This function is called by:
  5772 ;;		_write_RTC
  5773 ;;		_get_time
  5774 ;;		_get_day
  5775 ;;		_get_temp
  5776 ;;		_get_hall
  5777 ;;		_get_tripwire
  5778 ;;		_get_PIR
  5779 ;;		_get_IR
  5780 ;;		_open_door
  5781 ;;		_close_door
  5782 ;; This function uses a non-reentrant model
  5783 ;;
  5784                           
  5785                           
  5786                           ;psect for function _I2C_Master_Write
  5787  0929                     _I2C_Master_Write:	
  5788                           
  5789                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  5790                           
  5791                           ;incstack = 0
  5792                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5793  0929  120A  158A  2139   	fcall	_I2C_Master_Wait
  5794                           
  5795                           ;./I2C.h: 68:     SSPBUF = d;
  5796  092C  0873               	movf	I2C_Master_Write@d,w
  5797  092D  1283               	bcf	3,5	;RP0=0, select bank0
  5798  092E  1303               	bcf	3,6	;RP1=0, select bank0
  5799  092F  0093               	movwf	19	;volatile
  5800  0930  0008               	return
  5801  0931                     __end_of_I2C_Master_Write:	
  5802                           
  5803                           	psect	text27
  5804  091B                     __ptext27:	
  5805 ;; *************** function _I2C_Master_Stop *****************
  5806 ;; Defined at:
  5807 ;;		line 55 in file "./I2C.h"
  5808 ;; Parameters:    Size  Location     Type
  5809 ;;		None
  5810 ;; Auto vars:     Size  Location     Type
  5811 ;;		None
  5812 ;; Return value:  Size  Location     Type
  5813 ;;                  1    wreg      void 
  5814 ;; Registers used:
  5815 ;;		wreg, status,2, status,0, pclath, cstack
  5816 ;; Tracked objects:
  5817 ;;		On entry : 0/0
  5818 ;;		On exit  : 0/0
  5819 ;;		Unchanged: 0/0
  5820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5821 ;;      Params:         0       0       0       0       0
  5822 ;;      Locals:         0       0       0       0       0
  5823 ;;      Temps:          0       0       0       0       0
  5824 ;;      Totals:         0       0       0       0       0
  5825 ;;Total ram usage:        0 bytes
  5826 ;; Hardware stack levels used:    1
  5827 ;; Hardware stack levels required when called:    2
  5828 ;; This function calls:
  5829 ;;		_I2C_Master_Wait
  5830 ;; This function is called by:
  5831 ;;		_write_RTC
  5832 ;;		_get_time
  5833 ;;		_get_day
  5834 ;;		_get_temp
  5835 ;;		_get_hall
  5836 ;;		_get_tripwire
  5837 ;;		_get_PIR
  5838 ;;		_get_IR
  5839 ;;		_open_door
  5840 ;;		_close_door
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function _I2C_Master_Stop
  5846  091B                     _I2C_Master_Stop:	
  5847                           
  5848                           ;./I2C.h: 57:     I2C_Master_Wait();
  5849                           
  5850                           ;incstack = 0
  5851                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5852  091B  120A  158A  2139   	fcall	_I2C_Master_Wait
  5853                           
  5854                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  5855  091E  1683               	bsf	3,5	;RP0=1, select bank1
  5856  091F  1303               	bcf	3,6	;RP1=0, select bank1
  5857  0920  1511               	bsf	17,2	;volatile
  5858  0921  0008               	return
  5859  0922                     __end_of_I2C_Master_Stop:	
  5860                           
  5861                           	psect	text28
  5862  0914                     __ptext28:	
  5863 ;; *************** function _I2C_Master_Start *****************
  5864 ;; Defined at:
  5865 ;;		line 39 in file "./I2C.h"
  5866 ;; Parameters:    Size  Location     Type
  5867 ;;		None
  5868 ;; Auto vars:     Size  Location     Type
  5869 ;;		None
  5870 ;; Return value:  Size  Location     Type
  5871 ;;                  1    wreg      void 
  5872 ;; Registers used:
  5873 ;;		wreg, status,2, status,0, pclath, cstack
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5879 ;;      Params:         0       0       0       0       0
  5880 ;;      Locals:         0       0       0       0       0
  5881 ;;      Temps:          0       0       0       0       0
  5882 ;;      Totals:         0       0       0       0       0
  5883 ;;Total ram usage:        0 bytes
  5884 ;; Hardware stack levels used:    1
  5885 ;; Hardware stack levels required when called:    2
  5886 ;; This function calls:
  5887 ;;		_I2C_Master_Wait
  5888 ;; This function is called by:
  5889 ;;		_write_RTC
  5890 ;;		_get_time
  5891 ;;		_get_day
  5892 ;;		_get_temp
  5893 ;;		_get_hall
  5894 ;;		_get_tripwire
  5895 ;;		_get_PIR
  5896 ;;		_get_IR
  5897 ;;		_open_door
  5898 ;;		_close_door
  5899 ;; This function uses a non-reentrant model
  5900 ;;
  5901                           
  5902                           
  5903                           ;psect for function _I2C_Master_Start
  5904  0914                     _I2C_Master_Start:	
  5905                           
  5906                           ;./I2C.h: 41:     I2C_Master_Wait();
  5907                           
  5908                           ;incstack = 0
  5909                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5910  0914  120A  158A  2139   	fcall	_I2C_Master_Wait
  5911                           
  5912                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  5913  0917  1683               	bsf	3,5	;RP0=1, select bank1
  5914  0918  1303               	bcf	3,6	;RP1=0, select bank1
  5915  0919  1411               	bsf	17,0	;volatile
  5916  091A  0008               	return
  5917  091B                     __end_of_I2C_Master_Start:	
  5918                           
  5919                           	psect	text29
  5920  0939                     __ptext29:	
  5921 ;; *************** function _I2C_Master_Wait *****************
  5922 ;; Defined at:
  5923 ;;		line 32 in file "./I2C.h"
  5924 ;; Parameters:    Size  Location     Type
  5925 ;;		None
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;		None
  5928 ;; Return value:  Size  Location     Type
  5929 ;;                  1    wreg      void 
  5930 ;; Registers used:
  5931 ;;		wreg, status,2
  5932 ;; Tracked objects:
  5933 ;;		On entry : 0/0
  5934 ;;		On exit  : 0/0
  5935 ;;		Unchanged: 0/0
  5936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5937 ;;      Params:         0       0       0       0       0
  5938 ;;      Locals:         0       0       0       0       0
  5939 ;;      Temps:          0       0       0       0       0
  5940 ;;      Totals:         0       0       0       0       0
  5941 ;;Total ram usage:        0 bytes
  5942 ;; Hardware stack levels used:    1
  5943 ;; Hardware stack levels required when called:    1
  5944 ;; This function calls:
  5945 ;;		Nothing
  5946 ;; This function is called by:
  5947 ;;		_I2C_Master_Start
  5948 ;;		_I2C_Master_RepeatedStart
  5949 ;;		_I2C_Master_Stop
  5950 ;;		_I2C_Master_Write
  5951 ;;		_I2C_Master_Read
  5952 ;; This function uses a non-reentrant model
  5953 ;;
  5954                           
  5955                           
  5956                           ;psect for function _I2C_Master_Wait
  5957  0939                     _I2C_Master_Wait:	
  5958  0939                     l132:	
  5959                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5960                           
  5961                           ;incstack = 0
  5962                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5963                           
  5964  0939  1683               	bsf	3,5	;RP0=1, select bank1
  5965  093A  1303               	bcf	3,6	;RP1=0, select bank1
  5966  093B  1914               	btfsc	20,2	;volatile
  5967  093C  2939               	goto	l132
  5968  093D  0811               	movf	17,w	;volatile
  5969  093E  391F               	andlw	31
  5970  093F  1903               	btfsc	3,2
  5971  0940  0008               	return
  5972  0941  2939               	goto	l132
  5973  0942                     __end_of_I2C_Master_Wait:	
  5974                           
  5975                           	psect	text30
  5976  0C8E                     __ptext30:	
  5977 ;; *************** function ___awmod *****************
  5978 ;; Defined at:
  5979 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  5980 ;; Parameters:    Size  Location     Type
  5981 ;;  divisor         2    3[COMMON] int 
  5982 ;;  dividend        2    5[COMMON] int 
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;  sign            1    1[BANK0 ] unsigned char 
  5985 ;;  counter         1    0[BANK0 ] unsigned char 
  5986 ;; Return value:  Size  Location     Type
  5987 ;;                  2    3[COMMON] int 
  5988 ;; Registers used:
  5989 ;;		wreg, status,2, status,0
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/0
  5992 ;;		On exit  : 0/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5995 ;;      Params:         4       0       0       0       0
  5996 ;;      Locals:         0       2       0       0       0
  5997 ;;      Temps:          1       0       0       0       0
  5998 ;;      Totals:         5       2       0       0       0
  5999 ;;Total ram usage:        7 bytes
  6000 ;; Hardware stack levels used:    1
  6001 ;; Hardware stack levels required when called:    1
  6002 ;; This function calls:
  6003 ;;		Nothing
  6004 ;; This function is called by:
  6005 ;;		_main
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009                           
  6010                           ;psect for function ___awmod
  6011  0C8E                     ___awmod:	
  6012                           
  6013                           ;incstack = 0
  6014                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6015  0C8E  1283               	bcf	3,5	;RP0=0, select bank0
  6016  0C8F  1303               	bcf	3,6	;RP1=0, select bank0
  6017  0C90  01A1               	clrf	___awmod@sign
  6018  0C91  1FF6               	btfss	___awmod@dividend+1,7
  6019  0C92  2C9A               	goto	l3563
  6020  0C93  09F5               	comf	___awmod@dividend,f
  6021  0C94  09F6               	comf	___awmod@dividend+1,f
  6022  0C95  0AF5               	incf	___awmod@dividend,f
  6023  0C96  1903               	skipnz
  6024  0C97  0AF6               	incf	___awmod@dividend+1,f
  6025  0C98  01A1               	clrf	___awmod@sign
  6026  0C99  0AA1               	incf	___awmod@sign,f
  6027  0C9A                     l3563:	
  6028  0C9A  1FF4               	btfss	___awmod@divisor+1,7
  6029  0C9B  2CA1               	goto	l3567
  6030  0C9C  09F3               	comf	___awmod@divisor,f
  6031  0C9D  09F4               	comf	___awmod@divisor+1,f
  6032  0C9E  0AF3               	incf	___awmod@divisor,f
  6033  0C9F  1903               	skipnz
  6034  0CA0  0AF4               	incf	___awmod@divisor+1,f
  6035  0CA1                     l3567:	
  6036  0CA1  0873               	movf	___awmod@divisor,w
  6037  0CA2  0474               	iorwf	___awmod@divisor+1,w
  6038  0CA3  1903               	btfsc	3,2
  6039  0CA4  2CCE               	goto	l3585
  6040  0CA5  01A0               	clrf	___awmod@counter
  6041  0CA6  0AA0               	incf	___awmod@counter,f
  6042  0CA7                     l3575:	
  6043  0CA7  1BF4               	btfsc	___awmod@divisor+1,7
  6044  0CA8  2CB5               	goto	l3577
  6045  0CA9  3001               	movlw	1
  6046  0CAA                     u3505:	
  6047  0CAA  1003               	clrc
  6048  0CAB  0DF3               	rlf	___awmod@divisor,f
  6049  0CAC  0DF4               	rlf	___awmod@divisor+1,f
  6050  0CAD  3EFF               	addlw	-1
  6051  0CAE  1D03               	skipz
  6052  0CAF  2CAA               	goto	u3505
  6053  0CB0  3001               	movlw	1
  6054  0CB1  00F7               	movwf	??___awmod
  6055  0CB2  0877               	movf	??___awmod,w
  6056  0CB3  07A0               	addwf	___awmod@counter,f
  6057  0CB4  2CA7               	goto	l3575
  6058  0CB5                     l3577:	
  6059  0CB5  0874               	movf	___awmod@divisor+1,w
  6060  0CB6  0276               	subwf	___awmod@dividend+1,w
  6061  0CB7  1D03               	skipz
  6062  0CB8  2CBB               	goto	u3525
  6063  0CB9  0873               	movf	___awmod@divisor,w
  6064  0CBA  0275               	subwf	___awmod@dividend,w
  6065  0CBB                     u3525:	
  6066  0CBB  1C03               	skipc
  6067  0CBC  2CC3               	goto	l3581
  6068  0CBD  0873               	movf	___awmod@divisor,w
  6069  0CBE  02F5               	subwf	___awmod@dividend,f
  6070  0CBF  0874               	movf	___awmod@divisor+1,w
  6071  0CC0  1C03               	skipc
  6072  0CC1  03F6               	decf	___awmod@dividend+1,f
  6073  0CC2  02F6               	subwf	___awmod@dividend+1,f
  6074  0CC3                     l3581:	
  6075  0CC3  3001               	movlw	1
  6076  0CC4                     u3535:	
  6077  0CC4  1003               	clrc
  6078  0CC5  0CF4               	rrf	___awmod@divisor+1,f
  6079  0CC6  0CF3               	rrf	___awmod@divisor,f
  6080  0CC7  3EFF               	addlw	-1
  6081  0CC8  1D03               	skipz
  6082  0CC9  2CC4               	goto	u3535
  6083  0CCA  3001               	movlw	1
  6084  0CCB  02A0               	subwf	___awmod@counter,f
  6085  0CCC  1D03               	btfss	3,2
  6086  0CCD  2CB5               	goto	l3577
  6087  0CCE                     l3585:	
  6088  0CCE  0821               	movf	___awmod@sign,w
  6089  0CCF  1903               	btfsc	3,2
  6090  0CD0  2CD6               	goto	l3589
  6091  0CD1  09F5               	comf	___awmod@dividend,f
  6092  0CD2  09F6               	comf	___awmod@dividend+1,f
  6093  0CD3  0AF5               	incf	___awmod@dividend,f
  6094  0CD4  1903               	skipnz
  6095  0CD5  0AF6               	incf	___awmod@dividend+1,f
  6096  0CD6                     l3589:	
  6097  0CD6  0876               	movf	___awmod@dividend+1,w
  6098  0CD7  00F4               	movwf	?___awmod+1
  6099  0CD8  0875               	movf	___awmod@dividend,w
  6100  0CD9  00F3               	movwf	?___awmod
  6101  0CDA  0008               	return
  6102  0CDB                     __end_of___awmod:	
  6103                           
  6104                           	psect	text31
  6105  0D8A                     __ptext31:	
  6106 ;; *************** function ___awdiv *****************
  6107 ;; Defined at:
  6108 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;  divisor         2    3[COMMON] int 
  6111 ;;  dividend        2    5[COMMON] int 
  6112 ;; Auto vars:     Size  Location     Type
  6113 ;;  quotient        2    2[BANK0 ] int 
  6114 ;;  sign            1    1[BANK0 ] unsigned char 
  6115 ;;  counter         1    0[BANK0 ] unsigned char 
  6116 ;; Return value:  Size  Location     Type
  6117 ;;                  2    3[COMMON] int 
  6118 ;; Registers used:
  6119 ;;		wreg, status,2, status,0
  6120 ;; Tracked objects:
  6121 ;;		On entry : 0/0
  6122 ;;		On exit  : 0/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6125 ;;      Params:         4       0       0       0       0
  6126 ;;      Locals:         0       4       0       0       0
  6127 ;;      Temps:          1       0       0       0       0
  6128 ;;      Totals:         5       4       0       0       0
  6129 ;;Total ram usage:        9 bytes
  6130 ;; Hardware stack levels used:    1
  6131 ;; Hardware stack levels required when called:    1
  6132 ;; This function calls:
  6133 ;;		Nothing
  6134 ;; This function is called by:
  6135 ;;		_main
  6136 ;; This function uses a non-reentrant model
  6137 ;;
  6138                           
  6139                           
  6140                           ;psect for function ___awdiv
  6141  0D8A                     ___awdiv:	
  6142                           
  6143                           ;incstack = 0
  6144                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6145  0D8A  1283               	bcf	3,5	;RP0=0, select bank0
  6146  0D8B  1303               	bcf	3,6	;RP1=0, select bank0
  6147  0D8C  01A1               	clrf	___awdiv@sign
  6148  0D8D  1FF4               	btfss	___awdiv@divisor+1,7
  6149  0D8E  2D96               	goto	l2671
  6150  0D8F  09F3               	comf	___awdiv@divisor,f
  6151  0D90  09F4               	comf	___awdiv@divisor+1,f
  6152  0D91  0AF3               	incf	___awdiv@divisor,f
  6153  0D92  1903               	skipnz
  6154  0D93  0AF4               	incf	___awdiv@divisor+1,f
  6155  0D94  01A1               	clrf	___awdiv@sign
  6156  0D95  0AA1               	incf	___awdiv@sign,f
  6157  0D96                     l2671:	
  6158  0D96  1FF6               	btfss	___awdiv@dividend+1,7
  6159  0D97  2DA1               	goto	l2677
  6160  0D98  09F5               	comf	___awdiv@dividend,f
  6161  0D99  09F6               	comf	___awdiv@dividend+1,f
  6162  0D9A  0AF5               	incf	___awdiv@dividend,f
  6163  0D9B  1903               	skipnz
  6164  0D9C  0AF6               	incf	___awdiv@dividend+1,f
  6165  0D9D  3001               	movlw	1
  6166  0D9E  00F7               	movwf	??___awdiv
  6167  0D9F  0877               	movf	??___awdiv,w
  6168  0DA0  06A1               	xorwf	___awdiv@sign,f
  6169  0DA1                     l2677:	
  6170  0DA1  01A2               	clrf	___awdiv@quotient
  6171  0DA2  01A3               	clrf	___awdiv@quotient+1
  6172  0DA3  0873               	movf	___awdiv@divisor,w
  6173  0DA4  0474               	iorwf	___awdiv@divisor+1,w
  6174  0DA5  1903               	btfsc	3,2
  6175  0DA6  2DD8               	goto	l2699
  6176  0DA7  01A0               	clrf	___awdiv@counter
  6177  0DA8  0AA0               	incf	___awdiv@counter,f
  6178  0DA9                     l2687:	
  6179  0DA9  1BF4               	btfsc	___awdiv@divisor+1,7
  6180  0DAA  2DB7               	goto	l2689
  6181  0DAB  3001               	movlw	1
  6182  0DAC                     u2225:	
  6183  0DAC  1003               	clrc
  6184  0DAD  0DF3               	rlf	___awdiv@divisor,f
  6185  0DAE  0DF4               	rlf	___awdiv@divisor+1,f
  6186  0DAF  3EFF               	addlw	-1
  6187  0DB0  1D03               	skipz
  6188  0DB1  2DAC               	goto	u2225
  6189  0DB2  3001               	movlw	1
  6190  0DB3  00F7               	movwf	??___awdiv
  6191  0DB4  0877               	movf	??___awdiv,w
  6192  0DB5  07A0               	addwf	___awdiv@counter,f
  6193  0DB6  2DA9               	goto	l2687
  6194  0DB7                     l2689:	
  6195  0DB7  3001               	movlw	1
  6196  0DB8                     u2245:	
  6197  0DB8  1003               	clrc
  6198  0DB9  0DA2               	rlf	___awdiv@quotient,f
  6199  0DBA  0DA3               	rlf	___awdiv@quotient+1,f
  6200  0DBB  3EFF               	addlw	-1
  6201  0DBC  1D03               	skipz
  6202  0DBD  2DB8               	goto	u2245
  6203  0DBE  0874               	movf	___awdiv@divisor+1,w
  6204  0DBF  0276               	subwf	___awdiv@dividend+1,w
  6205  0DC0  1D03               	skipz
  6206  0DC1  2DC4               	goto	u2255
  6207  0DC2  0873               	movf	___awdiv@divisor,w
  6208  0DC3  0275               	subwf	___awdiv@dividend,w
  6209  0DC4                     u2255:	
  6210  0DC4  1C03               	skipc
  6211  0DC5  2DCD               	goto	l2695
  6212  0DC6  0873               	movf	___awdiv@divisor,w
  6213  0DC7  02F5               	subwf	___awdiv@dividend,f
  6214  0DC8  0874               	movf	___awdiv@divisor+1,w
  6215  0DC9  1C03               	skipc
  6216  0DCA  03F6               	decf	___awdiv@dividend+1,f
  6217  0DCB  02F6               	subwf	___awdiv@dividend+1,f
  6218  0DCC  1422               	bsf	___awdiv@quotient,0
  6219  0DCD                     l2695:	
  6220  0DCD  3001               	movlw	1
  6221  0DCE                     u2265:	
  6222  0DCE  1003               	clrc
  6223  0DCF  0CF4               	rrf	___awdiv@divisor+1,f
  6224  0DD0  0CF3               	rrf	___awdiv@divisor,f
  6225  0DD1  3EFF               	addlw	-1
  6226  0DD2  1D03               	skipz
  6227  0DD3  2DCE               	goto	u2265
  6228  0DD4  3001               	movlw	1
  6229  0DD5  02A0               	subwf	___awdiv@counter,f
  6230  0DD6  1D03               	btfss	3,2
  6231  0DD7  2DB7               	goto	l2689
  6232  0DD8                     l2699:	
  6233  0DD8  0821               	movf	___awdiv@sign,w
  6234  0DD9  1903               	btfsc	3,2
  6235  0DDA  2DE0               	goto	l2703
  6236  0DDB  09A2               	comf	___awdiv@quotient,f
  6237  0DDC  09A3               	comf	___awdiv@quotient+1,f
  6238  0DDD  0AA2               	incf	___awdiv@quotient,f
  6239  0DDE  1903               	skipnz
  6240  0DDF  0AA3               	incf	___awdiv@quotient+1,f
  6241  0DE0                     l2703:	
  6242  0DE0  0823               	movf	___awdiv@quotient+1,w
  6243  0DE1  00F4               	movwf	?___awdiv+1
  6244  0DE2  0822               	movf	___awdiv@quotient,w
  6245  0DE3  00F3               	movwf	?___awdiv
  6246  0DE4  0008               	return
  6247  0DE5                     __end_of___awdiv:	
  6248                           
  6249                           	psect	text32
  6250  0942                     __ptext32:	
  6251 ;; *************** function _UART_Write *****************
  6252 ;; Defined at:
  6253 ;;		line 54 in file "./UART.h"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;  data            1    wreg     unsigned char 
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  data            1    3[COMMON] unsigned char 
  6258 ;; Return value:  Size  Location     Type
  6259 ;;                  1    wreg      void 
  6260 ;; Registers used:
  6261 ;;		wreg
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6267 ;;      Params:         0       0       0       0       0
  6268 ;;      Locals:         1       0       0       0       0
  6269 ;;      Temps:          0       0       0       0       0
  6270 ;;      Totals:         1       0       0       0       0
  6271 ;;Total ram usage:        1 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; Hardware stack levels required when called:    1
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		_main
  6278 ;;		_UART_Write_Text
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           
  6283                           ;psect for function _UART_Write
  6284  0942                     _UART_Write:	
  6285                           
  6286                           ;incstack = 0
  6287                           ; Regs used in _UART_Write: [wreg]
  6288                           ;UART_Write@data stored from wreg
  6289  0942  00F3               	movwf	UART_Write@data
  6290  0943                     l236:	
  6291                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(!TRMT);
  6292                           
  6293  0943  1683               	bsf	3,5	;RP0=1, select bank1
  6294  0944  1303               	bcf	3,6	;RP1=0, select bank1
  6295  0945  1C98               	btfss	24,1	;volatile
  6296  0946  2943               	goto	l236
  6297                           
  6298                           ;./UART.h: 57:   TXREG = data;
  6299  0947  0873               	movf	UART_Write@data,w
  6300  0948  1283               	bcf	3,5	;RP0=0, select bank0
  6301  0949  1303               	bcf	3,6	;RP1=0, select bank0
  6302  094A  0099               	movwf	25	;volatile
  6303  094B  0008               	return
  6304  094C                     __end_of_UART_Write:	
  6305                           
  6306                           	psect	text33
  6307  090E                     __ptext33:	
  6308 ;; *************** function _UART_TX_Empty *****************
  6309 ;; Defined at:
  6310 ;;		line 31 in file "./UART.h"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;		None
  6313 ;; Auto vars:     Size  Location     Type
  6314 ;;		None
  6315 ;; Return value:  Size  Location     Type
  6316 ;;                  1    wreg      unsigned char 
  6317 ;; Registers used:
  6318 ;;		wreg
  6319 ;; Tracked objects:
  6320 ;;		On entry : 0/0
  6321 ;;		On exit  : 0/0
  6322 ;;		Unchanged: 0/0
  6323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6324 ;;      Params:         0       0       0       0       0
  6325 ;;      Locals:         0       0       0       0       0
  6326 ;;      Temps:          0       0       0       0       0
  6327 ;;      Totals:         0       0       0       0       0
  6328 ;;Total ram usage:        0 bytes
  6329 ;; Hardware stack levels used:    1
  6330 ;; Hardware stack levels required when called:    1
  6331 ;; This function calls:
  6332 ;;		Nothing
  6333 ;; This function is called by:
  6334 ;;		_main
  6335 ;; This function uses a non-reentrant model
  6336 ;;
  6337                           
  6338                           
  6339                           ;psect for function _UART_TX_Empty
  6340  090E                     _UART_TX_Empty:	
  6341                           
  6342                           ;./UART.h: 33:   return TRMT;
  6343                           
  6344                           ;incstack = 0
  6345                           ; Regs used in _UART_TX_Empty: [wreg]
  6346  090E  3000               	movlw	0
  6347  090F  1683               	bsf	3,5	;RP0=1, select bank1
  6348  0910  1303               	bcf	3,6	;RP1=0, select bank1
  6349  0911  1898               	btfsc	24,1	;volatile
  6350  0912  3001               	movlw	1
  6351  0913  0008               	return
  6352  0914                     __end_of_UART_TX_Empty:	
  6353                           
  6354                           	psect	text34
  6355  0C07                     __ptext34:	
  6356 ;; *************** function _Lcd_Write_String *****************
  6357 ;; Defined at:
  6358 ;;		line 100 in file "./LCD4bits.h"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;  a               2    0[BANK0 ] PTR unsigned char 
  6361 ;;		 -> NULL(0), STR_25(6), STR_24(7), STR_23(7), 
  6362 ;;		 -> STR_22(7), STR_21(8), STR_20(8), STR_19(9), 
  6363 ;;		 -> STR_18(9), STR_17(9), STR_16(9), STR_15(12), 
  6364 ;;		 -> STR_14(12), STR_10(10), STR_9(10), STR_8(10), 
  6365 ;;		 -> STR_7(10), STR_6(10), STR_5(10), STR_4(10), 
  6366 ;;		 -> STR_3(10), time(6), temp(6), STR_2(13), 
  6367 ;;		 -> STR_1(18), 
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;  i               2    5[BANK0 ] int 
  6370 ;; Return value:  Size  Location     Type
  6371 ;;                  1    wreg      void 
  6372 ;; Registers used:
  6373 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6374 ;; Tracked objects:
  6375 ;;		On entry : 0/0
  6376 ;;		On exit  : 0/0
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6379 ;;      Params:         0       2       0       0       0
  6380 ;;      Locals:         0       2       0       0       0
  6381 ;;      Temps:          0       3       0       0       0
  6382 ;;      Totals:         0       7       0       0       0
  6383 ;;Total ram usage:        7 bytes
  6384 ;; Hardware stack levels used:    1
  6385 ;; Hardware stack levels required when called:    3
  6386 ;; This function calls:
  6387 ;;		_Lcd_Write_Char
  6388 ;; This function is called by:
  6389 ;;		_main
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           
  6394                           ;psect for function _Lcd_Write_String
  6395  0C07                     _Lcd_Write_String:	
  6396                           
  6397                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  6398                           
  6399                           ;incstack = 0
  6400                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6401  0C07  1283               	bcf	3,5	;RP0=0, select bank0
  6402  0C08  1303               	bcf	3,6	;RP1=0, select bank0
  6403  0C09  01A5               	clrf	Lcd_Write_String@i
  6404  0C0A  01A6               	clrf	Lcd_Write_String@i+1
  6405  0C0B                     l3405:	
  6406  0C0B  0825               	movf	Lcd_Write_String@i,w
  6407  0C0C  0720               	addwf	Lcd_Write_String@a,w
  6408  0C0D  00A3               	movwf	??_Lcd_Write_String+1
  6409  0C0E  0821               	movf	Lcd_Write_String@a+1,w
  6410  0C0F  00A2               	movwf	??_Lcd_Write_String
  6411  0C10  1803               	skipnc
  6412  0C11  0AA2               	incf	??_Lcd_Write_String,f
  6413  0C12  1BA5               	btfsc	Lcd_Write_String@i,7
  6414  0C13  03A2               	decf	??_Lcd_Write_String,f
  6415  0C14  1283               	bcf	3,5	;RP0=0, select bank0
  6416  0C15  1303               	bcf	3,6	;RP1=0, select bank0
  6417  0C16  0822               	movf	??_Lcd_Write_String,w
  6418  0C17  00A4               	movwf	??_Lcd_Write_String+2
  6419  0C18  0824               	movf	??_Lcd_Write_String+2,w
  6420  0C19  00FF               	movwf	127
  6421  0C1A  0823               	movf	??_Lcd_Write_String+1,w
  6422  0C1B  0084               	movwf	4
  6423  0C1C  120A  118A  2500  120A  158A  	fcall	stringtab
  6424  0C21  3A00               	xorlw	0
  6425  0C22  1903               	btfsc	3,2
  6426  0C23  0008               	return
  6427                           
  6428                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  6429  0C24  0825               	movf	Lcd_Write_String@i,w
  6430  0C25  0720               	addwf	Lcd_Write_String@a,w
  6431  0C26  00A3               	movwf	??_Lcd_Write_String+1
  6432  0C27  0821               	movf	Lcd_Write_String@a+1,w
  6433  0C28  00A2               	movwf	??_Lcd_Write_String
  6434  0C29  1803               	skipnc
  6435  0C2A  0AA2               	incf	??_Lcd_Write_String,f
  6436  0C2B  1BA5               	btfsc	Lcd_Write_String@i,7
  6437  0C2C  03A2               	decf	??_Lcd_Write_String,f
  6438  0C2D  1283               	bcf	3,5	;RP0=0, select bank0
  6439  0C2E  1303               	bcf	3,6	;RP1=0, select bank0
  6440  0C2F  0822               	movf	??_Lcd_Write_String,w
  6441  0C30  00A4               	movwf	??_Lcd_Write_String+2
  6442  0C31  0824               	movf	??_Lcd_Write_String+2,w
  6443  0C32  00FF               	movwf	127
  6444  0C33  0823               	movf	??_Lcd_Write_String+1,w
  6445  0C34  0084               	movwf	4
  6446  0C35  120A  118A  2500  120A  158A  	fcall	stringtab
  6447  0C3A  120A  158A  2356  120A  158A  	fcall	_Lcd_Write_Char
  6448  0C3F  3001               	movlw	1
  6449  0C40  1283               	bcf	3,5	;RP0=0, select bank0
  6450  0C41  1303               	bcf	3,6	;RP1=0, select bank0
  6451  0C42  07A5               	addwf	Lcd_Write_String@i,f
  6452  0C43  1803               	skipnc
  6453  0C44  0AA6               	incf	Lcd_Write_String@i+1,f
  6454  0C45  3000               	movlw	0
  6455  0C46  07A6               	addwf	Lcd_Write_String@i+1,f
  6456  0C47  2C0B               	goto	l3405
  6457  0C48                     __end_of_Lcd_Write_String:	
  6458                           
  6459                           	psect	text35
  6460  0B56                     __ptext35:	
  6461 ;; *************** function _Lcd_Write_Char *****************
  6462 ;; Defined at:
  6463 ;;		line 84 in file "./LCD4bits.h"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;  a               1    wreg     unsigned char 
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;  a               1    7[COMMON] unsigned char 
  6468 ;;  y               1    6[COMMON] unsigned char 
  6469 ;;  temp            1    5[COMMON] unsigned char 
  6470 ;; Return value:  Size  Location     Type
  6471 ;;                  1    wreg      void 
  6472 ;; Registers used:
  6473 ;;		wreg, status,2, status,0, pclath, cstack
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6479 ;;      Params:         0       0       0       0       0
  6480 ;;      Locals:         3       0       0       0       0
  6481 ;;      Temps:          1       0       0       0       0
  6482 ;;      Totals:         4       0       0       0       0
  6483 ;;Total ram usage:        4 bytes
  6484 ;; Hardware stack levels used:    1
  6485 ;; Hardware stack levels required when called:    2
  6486 ;; This function calls:
  6487 ;;		_Lcd_Port
  6488 ;; This function is called by:
  6489 ;;		_Lcd_Write_String
  6490 ;;		_main
  6491 ;; This function uses a non-reentrant model
  6492 ;;
  6493                           
  6494                           
  6495                           ;psect for function _Lcd_Write_Char
  6496  0B56                     _Lcd_Write_Char:	
  6497                           
  6498                           ;incstack = 0
  6499                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  6500                           ;Lcd_Write_Char@a stored from wreg
  6501  0B56  00F7               	movwf	Lcd_Write_Char@a
  6502                           
  6503                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  6504  0B57  0877               	movf	Lcd_Write_Char@a,w
  6505  0B58  390F               	andlw	15
  6506  0B59  00F4               	movwf	??_Lcd_Write_Char
  6507  0B5A  0874               	movf	??_Lcd_Write_Char,w
  6508  0B5B  00F5               	movwf	Lcd_Write_Char@temp
  6509                           
  6510                           ;./LCD4bits.h: 88:    y = a&0xF0;
  6511  0B5C  0877               	movf	Lcd_Write_Char@a,w
  6512  0B5D  39F0               	andlw	240
  6513  0B5E  00F4               	movwf	??_Lcd_Write_Char
  6514  0B5F  0874               	movf	??_Lcd_Write_Char,w
  6515  0B60  00F6               	movwf	Lcd_Write_Char@y
  6516                           
  6517                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  6518  0B61  1283               	bcf	3,5	;RP0=0, select bank0
  6519  0B62  1303               	bcf	3,6	;RP1=0, select bank0
  6520  0B63  1606               	bsf	6,4	;volatile
  6521                           
  6522                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  6523  0B64  0876               	movf	Lcd_Write_Char@y,w
  6524  0B65  00F4               	movwf	??_Lcd_Write_Char
  6525  0B66  3004               	movlw	4
  6526  0B67                     u1855:	
  6527  0B67  1003               	clrc
  6528  0B68  0CF4               	rrf	??_Lcd_Write_Char,f
  6529  0B69  3EFF               	addlw	-1
  6530  0B6A  1D03               	skipz
  6531  0B6B  2B67               	goto	u1855
  6532  0B6C  0874               	movf	??_Lcd_Write_Char,w
  6533  0B6D  120A  158A  2157  120A  158A  	fcall	_Lcd_Port
  6534                           
  6535                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  6536  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  6537  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  6538  0B74  1686               	bsf	6,5	;volatile
  6539                           
  6540                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  6541  0B75  301A               	movlw	26
  6542  0B76  00F4               	movwf	??_Lcd_Write_Char
  6543  0B77                     u4207:	
  6544  0B77  0BF4               	decfsz	??_Lcd_Write_Char,f
  6545  0B78  2B77               	goto	u4207
  6546  0B79  0000               	nop
  6547                           
  6548                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  6549  0B7A  1283               	bcf	3,5	;RP0=0, select bank0
  6550  0B7B  1303               	bcf	3,6	;RP1=0, select bank0
  6551  0B7C  1286               	bcf	6,5	;volatile
  6552                           
  6553                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  6554  0B7D  0875               	movf	Lcd_Write_Char@temp,w
  6555  0B7E  120A  158A  2157  120A  158A  	fcall	_Lcd_Port
  6556                           
  6557                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  6558  0B83  1283               	bcf	3,5	;RP0=0, select bank0
  6559  0B84  1303               	bcf	3,6	;RP1=0, select bank0
  6560  0B85  1686               	bsf	6,5	;volatile
  6561                           
  6562                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  6563  0B86  301A               	movlw	26
  6564  0B87  00F4               	movwf	??_Lcd_Write_Char
  6565  0B88                     u4217:	
  6566  0B88  0BF4               	decfsz	??_Lcd_Write_Char,f
  6567  0B89  2B88               	goto	u4217
  6568  0B8A  0000               	nop
  6569                           
  6570                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  6571  0B8B  1283               	bcf	3,5	;RP0=0, select bank0
  6572  0B8C  1303               	bcf	3,6	;RP1=0, select bank0
  6573  0B8D  1286               	bcf	6,5	;volatile
  6574  0B8E  0008               	return
  6575  0B8F                     __end_of_Lcd_Write_Char:	
  6576                           
  6577                           	psect	text36
  6578  07AF                     __ptext36:	
  6579 ;; *************** function _Lcd_Set_Cursor *****************
  6580 ;; Defined at:
  6581 ;;		line 44 in file "./LCD4bits.h"
  6582 ;; Parameters:    Size  Location     Type
  6583 ;;  a               1    wreg     unsigned char 
  6584 ;;  b               1    7[COMMON] unsigned char 
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;  a               1    2[BANK0 ] unsigned char 
  6587 ;;  temp            1    5[BANK0 ] unsigned char 
  6588 ;;  y               1    4[BANK0 ] unsigned char 
  6589 ;;  z               1    3[BANK0 ] unsigned char 
  6590 ;; Return value:  Size  Location     Type
  6591 ;;                  1    wreg      void 
  6592 ;; Registers used:
  6593 ;;		wreg, status,2, status,0, pclath, cstack
  6594 ;; Tracked objects:
  6595 ;;		On entry : 0/0
  6596 ;;		On exit  : 0/0
  6597 ;;		Unchanged: 0/0
  6598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6599 ;;      Params:         1       0       0       0       0
  6600 ;;      Locals:         0       4       0       0       0
  6601 ;;      Temps:          0       2       0       0       0
  6602 ;;      Totals:         1       6       0       0       0
  6603 ;;Total ram usage:        7 bytes
  6604 ;; Hardware stack levels used:    1
  6605 ;; Hardware stack levels required when called:    3
  6606 ;; This function calls:
  6607 ;;		_Lcd_Cmd
  6608 ;; This function is called by:
  6609 ;;		_main
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           
  6614                           ;psect for function _Lcd_Set_Cursor
  6615  07AF                     _Lcd_Set_Cursor:	
  6616                           
  6617                           ;incstack = 0
  6618                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  6619                           ;Lcd_Set_Cursor@a stored from wreg
  6620  07AF  1283               	bcf	3,5	;RP0=0, select bank0
  6621  07B0  1303               	bcf	3,6	;RP1=0, select bank0
  6622  07B1  00A2               	movwf	Lcd_Set_Cursor@a
  6623                           
  6624                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  6625  07B2  0322               	decf	Lcd_Set_Cursor@a,w
  6626  07B3  1D03               	btfss	3,2
  6627  07B4  2FD8               	goto	l3389
  6628                           
  6629                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  6630  07B5  0877               	movf	Lcd_Set_Cursor@b,w
  6631  07B6  3E7F               	addlw	127
  6632  07B7  00A0               	movwf	??_Lcd_Set_Cursor
  6633  07B8  0820               	movf	??_Lcd_Set_Cursor,w
  6634  07B9  00A5               	movwf	Lcd_Set_Cursor@temp
  6635                           
  6636                           ;./LCD4bits.h: 50:   z = temp>>4;
  6637  07BA  0825               	movf	Lcd_Set_Cursor@temp,w
  6638  07BB  00A0               	movwf	??_Lcd_Set_Cursor
  6639  07BC  3004               	movlw	4
  6640  07BD                     u3355:	
  6641  07BD  1003               	clrc
  6642  07BE  0CA0               	rrf	??_Lcd_Set_Cursor,f
  6643  07BF  3EFF               	addlw	-1
  6644  07C0  1D03               	skipz
  6645  07C1  2FBD               	goto	u3355
  6646  07C2  0820               	movf	??_Lcd_Set_Cursor,w
  6647  07C3  00A1               	movwf	??_Lcd_Set_Cursor+1
  6648  07C4  0821               	movf	??_Lcd_Set_Cursor+1,w
  6649  07C5  00A3               	movwf	Lcd_Set_Cursor@z
  6650                           
  6651                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  6652  07C6  0825               	movf	Lcd_Set_Cursor@temp,w
  6653  07C7  390F               	andlw	15
  6654  07C8  00A0               	movwf	??_Lcd_Set_Cursor
  6655  07C9  0820               	movf	??_Lcd_Set_Cursor,w
  6656  07CA  00A4               	movwf	Lcd_Set_Cursor@y
  6657                           
  6658                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  6659  07CB  0823               	movf	Lcd_Set_Cursor@z,w
  6660  07CC  120A  158A  2171  120A  118A  	fcall	_Lcd_Cmd
  6661                           
  6662                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  6663  07D1  1283               	bcf	3,5	;RP0=0, select bank0
  6664  07D2  1303               	bcf	3,6	;RP1=0, select bank0
  6665  07D3  0824               	movf	Lcd_Set_Cursor@y,w
  6666  07D4  120A  158A  2171   	fcall	_Lcd_Cmd
  6667                           
  6668                           ;./LCD4bits.h: 54:  }
  6669  07D7  0008               	return
  6670  07D8                     l3389:	
  6671  07D8  3002               	movlw	2
  6672  07D9  0622               	xorwf	Lcd_Set_Cursor@a,w
  6673  07DA  1D03               	btfss	3,2
  6674  07DB  0008               	return
  6675                           
  6676                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  6677  07DC  0877               	movf	Lcd_Set_Cursor@b,w
  6678  07DD  3EBF               	addlw	191
  6679  07DE  00A0               	movwf	??_Lcd_Set_Cursor
  6680  07DF  0820               	movf	??_Lcd_Set_Cursor,w
  6681  07E0  00A5               	movwf	Lcd_Set_Cursor@temp
  6682                           
  6683                           ;./LCD4bits.h: 58:   z = temp>>4;
  6684  07E1  0825               	movf	Lcd_Set_Cursor@temp,w
  6685  07E2  00A0               	movwf	??_Lcd_Set_Cursor
  6686  07E3  3004               	movlw	4
  6687  07E4                     u3375:	
  6688  07E4  1003               	clrc
  6689  07E5  0CA0               	rrf	??_Lcd_Set_Cursor,f
  6690  07E6  3EFF               	addlw	-1
  6691  07E7  1D03               	skipz
  6692  07E8  2FE4               	goto	u3375
  6693  07E9  0820               	movf	??_Lcd_Set_Cursor,w
  6694  07EA  00A1               	movwf	??_Lcd_Set_Cursor+1
  6695  07EB  0821               	movf	??_Lcd_Set_Cursor+1,w
  6696  07EC  00A3               	movwf	Lcd_Set_Cursor@z
  6697                           
  6698                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  6699  07ED  0825               	movf	Lcd_Set_Cursor@temp,w
  6700  07EE  390F               	andlw	15
  6701  07EF  00A0               	movwf	??_Lcd_Set_Cursor
  6702  07F0  0820               	movf	??_Lcd_Set_Cursor,w
  6703  07F1  00A4               	movwf	Lcd_Set_Cursor@y
  6704                           
  6705                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  6706  07F2  0823               	movf	Lcd_Set_Cursor@z,w
  6707  07F3  120A  158A  2171  120A  118A  	fcall	_Lcd_Cmd
  6708                           
  6709                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  6710  07F8  1283               	bcf	3,5	;RP0=0, select bank0
  6711  07F9  1303               	bcf	3,6	;RP1=0, select bank0
  6712  07FA  0824               	movf	Lcd_Set_Cursor@y,w
  6713  07FB  120A  158A  2171   	fcall	_Lcd_Cmd
  6714  07FE  0008               	return
  6715  07FF                     __end_of_Lcd_Set_Cursor:	
  6716                           
  6717                           	psect	text37
  6718  094C                     __ptext37:	
  6719 ;; *************** function _Lcd_Clear *****************
  6720 ;; Defined at:
  6721 ;;		line 38 in file "./LCD4bits.h"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;		None
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;		None
  6726 ;; Return value:  Size  Location     Type
  6727 ;;                  1    wreg      void 
  6728 ;; Registers used:
  6729 ;;		wreg, status,2, status,0, pclath, cstack
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6735 ;;      Params:         0       0       0       0       0
  6736 ;;      Locals:         0       0       0       0       0
  6737 ;;      Temps:          0       0       0       0       0
  6738 ;;      Totals:         0       0       0       0       0
  6739 ;;Total ram usage:        0 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:    3
  6742 ;; This function calls:
  6743 ;;		_Lcd_Cmd
  6744 ;; This function is called by:
  6745 ;;		_main
  6746 ;; This function uses a non-reentrant model
  6747 ;;
  6748                           
  6749                           
  6750                           ;psect for function _Lcd_Clear
  6751  094C                     _Lcd_Clear:	
  6752                           
  6753                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  6754                           
  6755                           ;incstack = 0
  6756                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  6757  094C  3000               	movlw	0
  6758  094D  120A  158A  2171  120A  158A  	fcall	_Lcd_Cmd
  6759                           
  6760                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  6761  0952  3001               	movlw	1
  6762  0953  120A  158A  2171   	fcall	_Lcd_Cmd
  6763  0956  0008               	return
  6764  0957                     __end_of_Lcd_Clear:	
  6765                           
  6766                           	psect	text38
  6767  0971                     __ptext38:	
  6768 ;; *************** function _Lcd_Cmd *****************
  6769 ;; Defined at:
  6770 ;;		line 29 in file "./LCD4bits.h"
  6771 ;; Parameters:    Size  Location     Type
  6772 ;;  a               1    wreg     unsigned char 
  6773 ;; Auto vars:     Size  Location     Type
  6774 ;;  a               1    6[COMMON] unsigned char 
  6775 ;; Return value:  Size  Location     Type
  6776 ;;                  1    wreg      void 
  6777 ;; Registers used:
  6778 ;;		wreg, status,2, status,0, pclath, cstack
  6779 ;; Tracked objects:
  6780 ;;		On entry : 0/0
  6781 ;;		On exit  : 0/0
  6782 ;;		Unchanged: 0/0
  6783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6784 ;;      Params:         0       0       0       0       0
  6785 ;;      Locals:         1       0       0       0       0
  6786 ;;      Temps:          2       0       0       0       0
  6787 ;;      Totals:         3       0       0       0       0
  6788 ;;Total ram usage:        3 bytes
  6789 ;; Hardware stack levels used:    1
  6790 ;; Hardware stack levels required when called:    2
  6791 ;; This function calls:
  6792 ;;		_Lcd_Port
  6793 ;; This function is called by:
  6794 ;;		_Lcd_Clear
  6795 ;;		_Lcd_Set_Cursor
  6796 ;;		_Lcd_Init
  6797 ;;		_Lcd_Shift_Right
  6798 ;;		_Lcd_Shift_Left
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           
  6803                           ;psect for function _Lcd_Cmd
  6804  0971                     _Lcd_Cmd:	
  6805                           
  6806                           ;incstack = 0
  6807                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  6808                           ;Lcd_Cmd@a stored from wreg
  6809  0971  00F6               	movwf	Lcd_Cmd@a
  6810                           
  6811                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  6812  0972  1283               	bcf	3,5	;RP0=0, select bank0
  6813  0973  1303               	bcf	3,6	;RP1=0, select bank0
  6814  0974  1206               	bcf	6,4	;volatile
  6815                           
  6816                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  6817  0975  0876               	movf	Lcd_Cmd@a,w
  6818  0976  120A  158A  2157  120A  158A  	fcall	_Lcd_Port
  6819                           
  6820                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  6821  097B  1283               	bcf	3,5	;RP0=0, select bank0
  6822  097C  1303               	bcf	3,6	;RP1=0, select bank0
  6823  097D  1686               	bsf	6,5	;volatile
  6824                           
  6825                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  6826  097E  300B               	movlw	11
  6827  097F  00F5               	movwf	??_Lcd_Cmd+1
  6828  0980  3062               	movlw	98
  6829  0981  00F4               	movwf	??_Lcd_Cmd
  6830  0982                     u4227:	
  6831  0982  0BF4               	decfsz	??_Lcd_Cmd,f
  6832  0983  2982               	goto	u4227
  6833  0984  0BF5               	decfsz	??_Lcd_Cmd+1,f
  6834  0985  2982               	goto	u4227
  6835  0986  0000               	nop
  6836                           
  6837                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  6838  0987  1283               	bcf	3,5	;RP0=0, select bank0
  6839  0988  1303               	bcf	3,6	;RP1=0, select bank0
  6840  0989  1286               	bcf	6,5	;volatile
  6841  098A  0008               	return
  6842  098B                     __end_of_Lcd_Cmd:	
  6843                           
  6844                           	psect	text39
  6845  0957                     __ptext39:	
  6846 ;; *************** function _Lcd_Port *****************
  6847 ;; Defined at:
  6848 ;;		line 7 in file "./LCD4bits.h"
  6849 ;; Parameters:    Size  Location     Type
  6850 ;;  a               1    wreg     unsigned char 
  6851 ;; Auto vars:     Size  Location     Type
  6852 ;;  a               1    3[COMMON] unsigned char 
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  1    wreg      void 
  6855 ;; Registers used:
  6856 ;;		wreg
  6857 ;; Tracked objects:
  6858 ;;		On entry : 0/0
  6859 ;;		On exit  : 0/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6862 ;;      Params:         0       0       0       0       0
  6863 ;;      Locals:         1       0       0       0       0
  6864 ;;      Temps:          0       0       0       0       0
  6865 ;;      Totals:         1       0       0       0       0
  6866 ;;Total ram usage:        1 bytes
  6867 ;; Hardware stack levels used:    1
  6868 ;; Hardware stack levels required when called:    1
  6869 ;; This function calls:
  6870 ;;		Nothing
  6871 ;; This function is called by:
  6872 ;;		_Lcd_Cmd
  6873 ;;		_Lcd_Init
  6874 ;;		_Lcd_Write_Char
  6875 ;; This function uses a non-reentrant model
  6876 ;;
  6877                           
  6878                           
  6879                           ;psect for function _Lcd_Port
  6880  0957                     _Lcd_Port:	
  6881                           
  6882                           ;incstack = 0
  6883                           ; Regs used in _Lcd_Port: [wreg]
  6884                           ;Lcd_Port@a stored from wreg
  6885  0957  00F3               	movwf	Lcd_Port@a
  6886                           
  6887                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  6888  0958  1C73               	btfss	Lcd_Port@a,0
  6889  0959  295E               	goto	l158
  6890                           
  6891                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  6892  095A  1283               	bcf	3,5	;RP0=0, select bank0
  6893  095B  1303               	bcf	3,6	;RP1=0, select bank0
  6894  095C  1406               	bsf	6,0	;volatile
  6895  095D  2961               	goto	l159
  6896  095E                     l158:	
  6897                           ;./LCD4bits.h: 11:  else
  6898                           
  6899                           
  6900                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  6901  095E  1283               	bcf	3,5	;RP0=0, select bank0
  6902  095F  1303               	bcf	3,6	;RP1=0, select bank0
  6903  0960  1006               	bcf	6,0	;volatile
  6904  0961                     l159:	
  6905                           
  6906                           ;./LCD4bits.h: 14:  if(a & 2)
  6907  0961  1CF3               	btfss	Lcd_Port@a,1
  6908  0962  2965               	goto	l160
  6909                           
  6910                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  6911  0963  1486               	bsf	6,1	;volatile
  6912  0964  2966               	goto	l161
  6913  0965                     l160:	
  6914                           ;./LCD4bits.h: 16:  else
  6915                           
  6916                           
  6917                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  6918  0965  1086               	bcf	6,1	;volatile
  6919  0966                     l161:	
  6920                           
  6921                           ;./LCD4bits.h: 19:  if(a & 4)
  6922  0966  1D73               	btfss	Lcd_Port@a,2
  6923  0967  296A               	goto	l162
  6924                           
  6925                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  6926  0968  1506               	bsf	6,2	;volatile
  6927  0969  296B               	goto	l163
  6928  096A                     l162:	
  6929                           ;./LCD4bits.h: 21:  else
  6930                           
  6931                           
  6932                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  6933  096A  1106               	bcf	6,2	;volatile
  6934  096B                     l163:	
  6935                           
  6936                           ;./LCD4bits.h: 24:  if(a & 8)
  6937  096B  1DF3               	btfss	Lcd_Port@a,3
  6938  096C  296F               	goto	l164
  6939                           
  6940                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  6941  096D  1586               	bsf	6,3	;volatile
  6942  096E  0008               	return
  6943  096F                     l164:	
  6944                           ;./LCD4bits.h: 26:  else
  6945                           
  6946                           
  6947                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  6948  096F  1186               	bcf	6,3	;volatile
  6949  0970  0008               	return
  6950  0971                     __end_of_Lcd_Port:	
  6951                           
  6952                           	psect	text40
  6953  09C1                     __ptext40:	
  6954 ;; *************** function _manual_pwm *****************
  6955 ;; Defined at:
  6956 ;;		line 59 in file "mainMaster.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;		None
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;		None
  6961 ;; Return value:  Size  Location     Type
  6962 ;;                  1    wreg      void 
  6963 ;; Registers used:
  6964 ;;		wreg, status,2, status,0
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6970 ;;      Params:         0       0       0       0       0
  6971 ;;      Locals:         0       0       0       0       0
  6972 ;;      Temps:          3       0       0       0       0
  6973 ;;      Totals:         3       0       0       0       0
  6974 ;;Total ram usage:        3 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; This function calls:
  6977 ;;		Nothing
  6978 ;; This function is called by:
  6979 ;;		Interrupt level 1
  6980 ;; This function uses a non-reentrant model
  6981 ;;
  6982                           
  6983                           
  6984                           ;psect for function _manual_pwm
  6985  09C1                     _manual_pwm:	
  6986                           
  6987                           ;mainMaster.c: 60:     if (INTCONbits.T0IF == 1){
  6988  09C1  1D0B               	btfss	11,2	;volatile
  6989  09C2  29D9               	goto	i1l305
  6990                           
  6991                           ;mainMaster.c: 62:         cont++;
  6992  09C3  3001               	movlw	1
  6993  09C4  00F0               	movwf	??_manual_pwm
  6994  09C5  0870               	movf	??_manual_pwm,w
  6995  09C6  1283               	bcf	3,5	;RP0=0, select bank0
  6996  09C7  1303               	bcf	3,6	;RP1=0, select bank0
  6997  09C8  07CD               	addwf	_cont,f
  6998                           
  6999                           ;mainMaster.c: 63:             if(cont < 200){
  7000  09C9  30C8               	movlw	200
  7001  09CA  024D               	subwf	_cont,w
  7002  09CB  1803               	skipnc
  7003  09CC  29D5               	goto	i1l2767
  7004                           
  7005                           ;mainMaster.c: 64:                 if(cont < val){
  7006  09CD  084C               	movf	_val,w
  7007  09CE  024D               	subwf	_cont,w
  7008  09CF  1803               	skipnc
  7009  09D0  29D3               	goto	i1l302
  7010                           
  7011                           ;mainMaster.c: 65:                     PORTAbits.RA1 = 1;
  7012  09D1  1485               	bsf	5,1	;volatile
  7013                           
  7014                           ;mainMaster.c: 66:                 }else{
  7015  09D2  29D6               	goto	i1l2769
  7016  09D3                     i1l302:	
  7017                           
  7018                           ;mainMaster.c: 67:                     PORTAbits.RA1 = 0;
  7019  09D3  1085               	bcf	5,1	;volatile
  7020  09D4  29D6               	goto	i1l2769
  7021  09D5                     i1l2767:	
  7022                           
  7023                           ;mainMaster.c: 70:                 cont = 0;
  7024  09D5  01CD               	clrf	_cont
  7025  09D6                     i1l2769:	
  7026                           
  7027                           ;mainMaster.c: 72:             TMR0 = 56;
  7028  09D6  3038               	movlw	56
  7029  09D7  0081               	movwf	1	;volatile
  7030                           
  7031                           ;mainMaster.c: 73:             INTCONbits.T0IF = 0;
  7032  09D8  110B               	bcf	11,2	;volatile
  7033  09D9                     i1l305:	
  7034  09D9  0872               	movf	??_manual_pwm+2,w
  7035  09DA  008A               	movwf	10
  7036  09DB  0E71               	swapf	(??_manual_pwm+1)^(0+4294967168),w
  7037  09DC  0083               	movwf	3
  7038  09DD  0EFE               	swapf	126,f
  7039  09DE  0E7E               	swapf	126,w
  7040  09DF  0009               	retfie
  7041  09E0                     __end_of_manual_pwm:	
  7042  007E                     btemp	set	126	;btemp
  7043  007E                     wtemp0	set	126
  7044                           
  7045                           	psect	intentry
  7046  0004                     __pintentry:	
  7047                           ;incstack = 0
  7048                           ; Regs used in _manual_pwm: [wreg+status,2+status,0]
  7049                           
  7050  0004                     interrupt_function:	
  7051  007E                     saved_w	set	btemp
  7052  0004  00FE               	movwf	btemp
  7053  0005  0E03               	swapf	3,w
  7054  0006  00F1               	movwf	??_manual_pwm+1
  7055  0007  080A               	movf	10,w
  7056  0008  00F2               	movwf	??_manual_pwm+2
  7057  0009  120A  158A  29C1   	ljmp	_manual_pwm


Data Sizes:
    Strings     227
    Constant    10
    Data        0
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     37      70
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), temp(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_28(CODE[4]), STR_27(CODE[5]), STR_26(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), temp(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_temp@temp_string	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_time@time_string	PTR unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), 

    day2	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), STR_10(CODE[10]), STR_9(CODE[10]), STR_8(CODE[10]), 
		 -> STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), 
		 -> STR_3(CODE[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 18
		 -> NULL(NULL[0]), STR_25(CODE[6]), STR_24(CODE[7]), STR_23(CODE[7]), 
		 -> STR_22(CODE[7]), STR_21(CODE[8]), STR_20(CODE[8]), STR_19(CODE[9]), 
		 -> STR_18(CODE[9]), STR_17(CODE[9]), STR_16(CODE[9]), STR_15(CODE[12]), 
		 -> STR_14(CODE[12]), STR_10(CODE[10]), STR_9(CODE[10]), STR_8(CODE[10]), 
		 -> STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), 
		 -> STR_3(CODE[10]), time(BANK0[6]), temp(BANK0[6]), STR_2(CODE[13]), 
		 -> STR_1(CODE[18]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_Char
    _main->___awdiv
    _main->___awmod
    _main->_get_IR
    _main->_get_PIR
    _main->_get_day
    _main->_get_hall
    _main->_get_tripwire
    _main->_strcmp
    _main->_write_RTC
    _write_RTC->_I2C_Master_Write
    _setup->_I2C_Master_Init
    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _open_door->_I2C_Master_Write
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _close_door->_I2C_Master_Write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _manual_pwm in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_UART_Init
    _UART_Init->___aldiv
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _get_temp->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read

Critical Paths under _manual_pwm in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _manual_pwm in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _manual_pwm in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _manual_pwm in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   37826
                                             31 BANK0      6     6      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                      _UART_TX_Empty
                         _UART_Write
                            ___awdiv
                            ___awmod
                             ___bmul
                         _close_door
                             _get_IR
                            _get_PIR
                            _get_day
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                          _open_door
                              _setup
                             _strcmp
                          _write_RTC
 ---------------------------------------------------------------------------------
 (1) _write_RTC                                            5     3      2    2284
                                              5 COMMON     3     1      2
                                              0 BANK0      2     2      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     511
                                              3 COMMON     5     3      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1880
                    _I2C_Master_Init
                           _Lcd_Init
                          _UART_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4    1118
                                              4 COMMON     2     2      0
                                             14 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     805
                                              3 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              0 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     542
                                              4 COMMON     4     4      0
                                             13 BANK0      4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     421
                                              3 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _open_door                                            0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                             5     5      0    3238
                                              2 BANK0      5     5      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             9     9      0    5666
                                             22 BANK0      9     9      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1806
                                              9 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     320
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     875
                                              3 COMMON     4     2      2
                                              0 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _close_door                                           0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2011
                                              3 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     793
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     604
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Empty                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    2018
                                              0 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              4 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1580
                                              7 COMMON     1     0      1
                                              0 BANK0      6     6      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              4 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _manual_pwm                                           3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_TX_Empty
   _UART_Write
   ___awdiv
   ___awmod
   ___bmul
   _close_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_day
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _open_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
     _initOscilador
   _strcmp
   _write_RTC
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _manual_pwm (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      51       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      46       5       87.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      51      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Mar 09 19:42:39 2019

                                _i 0055                                  _j 0054  
                                _k 0045                                  pc 0002  
                   ___bmul@product 0075                        __CFG_CP$OFF 0000  
                      get_hall@key 0022                                 _IR 0056  
                     ___awdiv@sign 0021                                 fsr 0004  
                              l201 0D2E                                l132 0939  
                              l150 0ADF                                l151 0AE2  
                              l311 00E4                                l160 0965  
                              l161 0966                                l162 096A  
                              l163 096B                                l164 096F  
                              l236 0943                                l316 00C9  
                              l325 00EF                                l158 095E  
                              l326 0100                                l159 0961  
                              l362 027E                                l611 0EE0  
                              l348 0228                                l381 03D9  
                              l390 03FD                                l384 03E5  
                              l387 03F1                                _GIE 005F  
                     __CFG_CPD$OFF 0000                                _PIR 0057  
                    ?_get_tripwire 0070                                _min 004A  
                              _val 004C                                fsr0 0004  
                              indf 0000                       ___awmod@sign 0021  
                     __CFG_LVP$OFF 0000                               l2251 0B00  
                             l3203 0F46                               l3221 0BD3  
                             l2341 0CE2                               l3223 0BE1  
                             l2255 0B0E                               l3207 0F54  
                             l2351 0D00                               l2343 0CE8  
                             l3233 0C02                               l2249 0AF2  
                             l3153 0DF7                               l2353 0D07  
                             l2345 0CEE                               l2259 0B19  
                             l3331 0642                               l3163 0E2F  
                             l3155 0E07                               l2355 0D07  
                             l2347 0CF4                               l2339 0CDD  
                             l3405 0C0B                               l3229 0BF7  
                             l3341 0659                               l3325 0624  
                             l2461 0A84                               l3181 0EF1  
                             l2349 0CFA                               l2703 0DE0  
                             l3167 0E3C                               l3191 0F11  
                             l2359 0D0C                               l2465 04ED  
                             l3353 067C                               l2457 0A71  
                             l3347 065B                               l3371 06D2  
                             l2459 0A7C                               l2469 04F3  
                             l3189 0F01                               l2671 0D96  
                             l3367 068F                               l3359 068B  
                             l3199 0F39                               l3615 0067  
                             l3369 0604                               l3545 0AA1  
                             l3721 01CC                               l3563 0C9A  
                             l3299 0795                               l3547 0A94  
                             l3811 02E1                               l3803 02D1  
                             l3643 00C0                               l3389 07D8  
                             l2677 0DA1                               l3581 0CC3  
                             l3485 0FDD                               l3549 0AB6  
                             l3741 01E5                               l3733 01DD  
                             l3645 00CC                               l2695 0DCD  
                             l2687 0DA9                               l3575 0CA7  
                             l3567 0CA1                               l3743 01E7  
                             l3735 01DF                               l3751 01F0  
                             l3655 00DB                               l2689 0DB7  
                             l3577 0CB5                               l3585 0CCE  
                             l3745 01E9                               l3737 01E1  
                             l3753 020F                               l3729 01D5  
                             l3681 010D                               l3673 0102  
                             l2699 0DD8                               l3827 0320  
                             l3819 02FB                               l3763 0259  
                             l3747 01EB                               l3739 01E3  
                             l3683 010E                               l3659 00E6  
                             l3589 0CD6                               l3845 035D  
                             l3837 033D                               l3829 032A  
                             l3773 025E                               l3765 0241  
                             l3757 022B                               l3685 0111  
                             l3847 0367                               l3791 0282  
                             l3687 0112                               l3867 0409  
                             l3787 0275                               l3963 01F8  
                             l3965 0D14                               l3893 0418  
                             l3789 0281                               l3967 0637  
                             STR_1 051A                               STR_2 052C  
                      get_time@min 0025                               STR_3 055B  
                             STR_4 056F                               STR_5 0597  
                             STR_6 0579                               STR_7 058D  
                             STR_8 0565                               STR_9 0583  
                             _BRGH 04C2                               _CREN 00C4  
                             u2225 0DAC                               u3115 0BD6  
                             u3035 0F05                               u3211 0712  
                             u3212 0713                               u2245 0DB8  
                             u3213 0718                               u3205 06FB  
                             u3214 0719                               u2255 0DC4  
                             u3135 0BE2                               u3055 0F13  
                             u3215 071E                               u3216 071F  
                             u2265 0DCE                               u3145 0BEE  
                             u3065 0F28                               u3155 0BF8  
                             u3075 0F3A                               u3251 0772  
                             u3235 0742                               u4035 042F  
                             u4107 0172                               u3252 0773  
                             u1805 0B06                               u3253 0778  
                             u3245 075B                               u4045 0460  
                             u4117 0182                               u3254 0779  
                             u4207 0B77                               u1815 0B0F  
                             u3415 0FB5                               u3175 0B30  
                             u3255 077E                               u4127 0194  
                             u3256 077F                               u4217 0B88  
                             u3505 0CAA                               u4137 01A6  
                             u4057 005C                               u4227 0982  
                             u3355 07BD                               u3435 0E94  
                             u3195 06E2                               u4147 01B8  
                             u4067 012A                               u3525 0CBB  
                             u3445 0EB3                               u4157 01C8  
                             u4077 013C                               u3375 07E4  
                             u1855 0B67                               u3535 0CC4  
                             u3295 0672                               u4167 0411  
                             u4087 014E                               u1785 0AF5  
                             u4177 0497                               u4097 0160  
                             u4187 04A7                               _PEIE 005E  
                             u4197 04B7                               u3735 0222  
                             u2945 0DFB                               _RCEN 048B  
                             _RCIF 0065                               u2965 0E09  
                             u2975 0E1E                               u2985 0E30  
                             _TMR0 0001                               _SPEN 00C7  
                             _TRMT 04C1                               _TXEN 04C5  
                             _SYNC 04C4                       __CFG_WRT$OFF 0000  
                             _day1 0078                               _day2 0059  
                             _bank 004E                  ?_Lcd_Write_String 0020  
 __end_of_I2C_Master_RepeatedStart 0929                               _cont 004D  
                             _door 007A                               _main 001D  
                             _hour 004B                               _temp 005A  
                             _time 0060                               _trip 0058  
                             btemp 007E                               start 000C  
               ??_Lcd_Write_String 0022                      __CFG_IESO$OFF 0000  
                  __end_of_Lcd_Cmd 098B                  ___bmul@multiplier 0076  
                    __CFG_MCLRE$ON 0000                get_temp@temp_string 003D  
                 ?_I2C_Master_Init 002D                   ?_I2C_Master_Read 0073  
                 ?_I2C_Master_Wait 0070                   ?_I2C_Master_Stop 0070  
                  __end_of___aldiv 0F5D                              ?_main 0070  
                  __end_of___awdiv 0DE5                              STR_10 0551  
                            STR_11 05EE                              STR_12 05E8  
                            STR_20 05C5                              STR_13 05E2  
                            STR_21 05CD                              STR_22 05C6  
                            STR_14 0539                              STR_23 05CE  
                            STR_15 0545                              STR_24 05D5  
                            STR_16 05AA                              STR_25 05DC  
                            STR_17 05BC                      __CFG_WDTE$OFF 0000  
                            STR_26 05FA                              STR_18 05A1  
                            STR_27 05F4                              STR_19 05B3  
                            STR_28 05F9                    __end_of___awmod 0CDB  
                     get_time@hour 0024                              _ANSEL 0188  
                  __end_of___lldiv 0E45                     ??_get_tripwire 0077  
                  ___awdiv@divisor 0073                    __end_of___lwdiv 0C07  
                            i1l302 09D3                              i1l305 09D9  
                  __end_of___lwmod 0B1E                    ___awdiv@counter 0020  
                            _RCREG 001A                              _SPBRG 0099  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                              _PORTE 0009  
          __size_of_Lcd_Set_Cursor 0050                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
                            _TRISD 0088                              _SSPIE 0463  
                            _TRISE 0089                              _SSPIF 0063  
                            _TXREG 0019                    __end_of_get_PIR 0A26  
                   __CFG_FCMEN$OFF 0000                    __end_of_get_day 0BC9  
                      ?_UART_Write 0070                 __size_of_UART_Init 00D8  
                            _alarm 004F                    __end_of_dpowers 051A  
                            _setup 0D30                              _state 0079  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 06D7                   __end_of_Lcd_Init 04EB  
                 __end_of_Lcd_Port 0971                    __initialization 000F  
                     __end_of_main 048B             __size_of_initOscilador 0055  
                           ??_main 003F                 __size_of_Lcd_Clear 000B  
                ?_I2C_Master_Start 0070                  ?_I2C_Master_Write 0073  
               ??_I2C_Master_Start 0073                 ??_I2C_Master_Write 0075  
                 ___awdiv@dividend 0075                             ?_setup 0070  
                           _ANSELH 0189                             i1l2767 09D5  
                           i1l2769 09D6                          ??_Lcd_Cmd 0074  
          __size_of_Lcd_Write_Char 0039                             _SSPADD 0093  
                           _TRISC3 043B                             _TRISC4 043C  
                           _TRISC6 043E                             _TRISC7 043F  
                           _SSPCON 0014                             _SSPBUF 0013  
                   __CFG_PWRTE$OFF 0000           _I2C_Master_RepeatedStart 0922  
                 __end_of_get_hall 0A49                  __end_of_UART_Init 07AF  
                 __end_of_get_temp 1000                   __end_of_get_time 0ECE  
                           ___bmul 04EB                __size_of_UART_Write 000A  
                        ??___aldiv 0073                          ??___awdiv 0077  
                        ??___awmod 0077                             _change 0053  
                        ??___lldiv 0073                             _get_IR 09E0  
                        ??___lwdiv 0077                          ??___lwmod 0027  
                 ___awdiv@quotient 0022                             _newmin 0047  
                  ___awmod@divisor 0073                          ??_get_PIR 0077  
                  ___awmod@counter 0020              __end_of_UART_TX_Empty 0914  
                        ??_get_day 0077                             _strcat 0A6C  
                           _strcmp 0A90                             saved_w 007E  
                        ??_sprintf 002C                    Lcd_Set_Cursor@a 0022  
                  Lcd_Set_Cursor@b 0077                    Lcd_Set_Cursor@y 0024  
                  Lcd_Set_Cursor@z 0023            __end_of__initialization 0019  
                    _initOscilador 0CDB                  __end_of_Lcd_Clear 0957  
             __end_of_get_tripwire 0A6C                ___bmul@multiplicand 0073  
                   __pcstackCOMMON 0070                      __end_of_setup 0D8A  
                   _Lcd_Set_Cursor 07AF                     _OPTION_REGbits 0081  
                        ?_Lcd_Init 0070                          ?_Lcd_Port 0070  
                          ??_setup 0078                         __pbssBANK0 0045  
                   ?_initOscilador 0070                         __pmaintext 001D  
                          ?___bmul 0073                            ?_get_IR 0070  
                       __pintentry 0004                 __size_of_open_door 001B  
        __size_of_Lcd_Write_String 0041             __end_of_Lcd_Set_Cursor 07FF  
                          ?_strcat 0073                            ?_strcmp 0073  
                       _close_door 098B                       ??_UART_Write 0073  
                       ??_Lcd_Init 0020                         ??_Lcd_Port 0073  
                          _SSPCON2 0091                          ?_get_hall 0070  
                          _SSPSTAT 0094                          ?_get_temp 0070  
                        ?_get_time 0070                         __stringtab 0500  
              initOscilador@option 0075                     _Lcd_Write_Char 0B56  
                          _Lcd_Cmd 0971                 __size_of_write_RTC 0046  
                       _manual_pwm 09C1                            ___aldiv 0ECE  
                  __size_of___bmul 0011                            ___awdiv 0D8A  
                          ___awmod 0C8E                            ___lldiv 0DE5  
               __end_of_UART_Write 094C                            ___lwdiv 0BC9  
                          ___lwmod 0AEA                    __size_of_get_IR 0023  
                          _change1 0052                            _change2 0051  
                          _change3 0050                    ?_Lcd_Set_Cursor 0077  
                          _get_PIR 0A03                            __ptext1 0C48  
                          __ptext2 0A90                            __ptext3 0D30  
                          __ptext4 0CDB                            __ptext5 06D7  
                          __ptext6 0ECE                            __ptext7 048B  
                          __ptext8 0B1E                            __ptext9 0DE5  
                          _get_day 0B8F                get_time@time_string 0026  
                  __size_of_strcat 0024                    __size_of_strcmp 002C  
                          _dpowers 0510                   ___awmod@dividend 0075  
                 ___aldiv@dividend 0024                            _newhour 0048  
         __size_of_I2C_Master_Init 0038           __size_of_I2C_Master_Read 002E  
         __size_of_I2C_Master_Wait 0009           __size_of_I2C_Master_Stop 0007  
                  ??_initOscilador 0073                         ??_get_hall 0077  
                          _sprintf 05FD                            clrloop0 0932  
           __end_of_Lcd_Write_Char 0B8F                         ??_get_temp 0036  
                       ??_get_time 0022               end_of_initialization 0019  
            __size_of_get_tripwire 0023         ??_I2C_Master_RepeatedStart 0073  
                __end_of_open_door 09C1                         get_PIR@PIR 0022  
        __size_of_I2C_Master_Start 0007          __size_of_I2C_Master_Write 0008  
                  ___lldiv@divisor 0020                    ___lldiv@counter 002C  
                        _RCSTAbits 0018                   ___aldiv@quotient 002A  
                 I2C_Master_Init@c 002D                   I2C_Master_Read@a 0073  
                        Lcd_Port@a 0073                       write_RTC@day 0076  
                          strcmp@r 0020                          _UART_Init 06D7  
                        _PORTAbits 0005                          _PORTBbits 0006  
                        _PORTCbits 0007                          _PORTDbits 0008  
                        _PORTEbits 0009                     UART_Write@data 0073  
                __end_of_write_RTC 0C8E                       _get_tripwire 0A49  
                      ?_close_door 0070                          _TRISCbits 0087  
                  ?_Lcd_Write_Char 0070                  Lcd_Write_String@a 0020  
                Lcd_Write_String@i 0025                          _Lcd_Clear 094C  
                      ?_manual_pwm 0070                     __end_of___bmul 04FC  
                 _Lcd_Write_String 0C07                         ?_UART_Init 002E  
                   __end_of_get_IR 0A03                     __end_of_strcat 0A90  
                   __end_of_strcmp 0ABC                start_initialization 000F  
                __size_of_Lcd_Init 0060                  __size_of_Lcd_Port 001A  
                ??_I2C_Master_Init 0074                  ??_I2C_Master_Read 0075  
                ??_I2C_Master_Wait 0073                  ??_I2C_Master_Stop 0073  
           __size_of_UART_TX_Empty 0006           __CFG_FOSC$INTRC_NOCLKOUT 0000  
                       ?_Lcd_Clear 0070                           ??___bmul 0074  
              __size_of_close_door 001B                           ??_get_IR 0077  
                  Lcd_Write_Char@a 0077                    Lcd_Write_Char@y 0076  
                         ??_strcat 0074                           ??_strcmp 0075  
                 write_RTC@minutes 0075                        __pbssCOMMON 0078  
                        ___latbits 0002                      __pcstackBANK0 0020  
              __size_of_manual_pwm 001F                  __size_of_get_hall 0023  
                         ?_Lcd_Cmd 0070                  __size_of_get_temp 00A3  
                __size_of_get_time 0089                        sprintf@flag 0030  
                      sprintf@prec 0031                   _I2C_Master_Start 0914  
                 _I2C_Master_Write 0929                   ___lwdiv@dividend 0075  
                 ??_Lcd_Set_Cursor 0020                    get_temp@decimal 0039  
                         ?___aldiv 0020                           ?___awdiv 0073  
                         ?___awmod 0073                           ?___lldiv 0020  
                         ?___lwdiv 0073                           ?___lwmod 0023  
                      ??_UART_Init 0032                           ?_get_PIR 0070  
                        __pstrings 0500                           ?_get_day 0070  
                  get_temp@tempLSB 003E                    get_temp@tempMSB 003C  
                    _UART_TX_Empty 090E                   ___lwdiv@quotient 0021  
                         ?_sprintf 0029                         UART_Init@x 0074  
                   __size_of_setup 005A                    ___aldiv@divisor 0020  
                interrupt_function 0004                    ___aldiv@counter 0028  
                        clear_ram0 0931                          _open_door 09A6  
                         Lcd_Cmd@a 0076                          _seguridad 0049  
                      ??_Lcd_Clear 0077                  UART_Init@baudrate 002E  
                      __stringbase 050F                     ?_UART_TX_Empty 0070  
                 ??_Lcd_Write_Char 0074                       ??_close_door 0075  
                         _Lcd_Init 048B                           _Lcd_Port 0957  
                        _write_RTC 0C48                I2C_Master_Read@temp 0020  
            __end_of_initOscilador 0D30           __end_of_Lcd_Write_String 0C48  
                 __size_of_Lcd_Cmd 001A                         ?_open_door 0070  
                     ??_manual_pwm 0070                 __end_of_close_door 09A6  
                 __size_of___aldiv 008F  __size_of_I2C_Master_RepeatedStart 0007  
                 __size_of___awdiv 005B                   __size_of___awmod 004D  
        ?_I2C_Master_RepeatedStart 0070                   __size_of___lldiv 0060  
                 __size_of___lwdiv 003E                   __size_of___lwmod 0034  
               __end_of__stringtab 0510                   __size_of_get_PIR 0023  
                 __size_of_get_day 003A                         sprintf@val 0032  
                  _I2C_Master_Init 0B1E                    _I2C_Master_Read 0ABC  
                  _I2C_Master_Wait 0939                         strcat@from 0073  
                  _I2C_Master_Stop 091B                    ___lwdiv@divisor 0073  
                  ___lwdiv@counter 0020                           __ptext10 09A6  
                         __ptext11 0A49                           __ptext20 0B8F  
                         __ptext12 0E45                           __ptext21 0922  
                         __ptext13 0F5D                           __ptext30 0C8E  
                         __ptext22 0A03                           __ptext14 0A6C  
                         __ptext31 0D8A                           __ptext23 09E0  
                         __ptext15 05FD                           __ptext40 09C1  
                         __ptext32 0942                           __ptext24 0ABC  
                         __ptext16 0AEA                           __ptext33 090E  
                         __ptext25 098B                           __ptext17 0BC9  
                         __ptext34 0C07                           __ptext26 0929  
                         __ptext18 04EB                           __ptext35 0B56  
                         __ptext27 091B                           __ptext19 0A26  
                         __ptext36 07AF                           __ptext28 0914  
                         __ptext37 094C                           __ptext29 0939  
                         __ptext38 0971                           __ptext39 0957  
                       ?_write_RTC 0075                  __CFG_BOR4V$BOR40V 0000  
                         _get_hall 0A26                           _get_temp 0F5D  
                         _get_time 0E45                   __size_of_sprintf 00DA  
               __end_of_manual_pwm 09E0                      __size_of_main 046E  
                         get_IR@IR 0022                           get_day@d 0022  
                  ??_UART_TX_Empty 0073           __end_of_I2C_Master_Start 091B  
         __end_of_I2C_Master_Write 0931                         _INTCONbits 000B  
               Lcd_Write_Char@temp 0075                           intlevel1 0000  
                        sprintf@ap 002F                          sprintf@sp 0034  
                 ___lwmod@dividend 0025                   ___lldiv@dividend 0024  
                      ??_open_door 0075                          stringcode 050A  
                       _OSCCONbits 008F            __end_of_I2C_Master_Init 0B56  
          __end_of_I2C_Master_Read 0AEA            __end_of_I2C_Master_Wait 0942  
          __end_of_I2C_Master_Stop 0922                 Lcd_Set_Cursor@temp 0025  
                    write_RTC@hour 0077                           sprintf@c 0035  
                         sprintf@f 0029                           strcat@cp 0076  
                         strcat@to 0075                           strcmp@s1 0021  
                         strcmp@s2 0073                   ___lldiv@quotient 0028  
                I2C_Master_Write@d 0073                    ___lwmod@divisor 0023  
                  ___lwmod@counter 0028                           stringdir 050A  
                 get_tripwire@trip 0022                           stringtab 0500  
                     ___aldiv@sign 0029                         _UART_Write 0942  
                      _SSPCON2bits 0091                        ??_write_RTC 0020  
                       _SSPCONbits 0014  

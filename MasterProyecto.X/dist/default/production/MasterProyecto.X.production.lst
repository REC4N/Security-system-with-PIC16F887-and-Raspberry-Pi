

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 04 23:07:53 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	psect	text28,local,class=CODE,merge=1,delta=2
    39                           	psect	text29,local,class=CODE,merge=1,delta=2
    40                           	psect	text30,local,class=CODE,merge=1,delta=2
    41                           	psect	text31,local,class=CODE,merge=1,delta=2
    42                           	psect	text32,local,class=CODE,merge=1,delta=2
    43                           	psect	text33,local,class=CODE,merge=1,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 2.05
    47                           ; Generated 20/12/2018 GMT
    48                           ; 
    49                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F887 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  0087                     	;# 
   119  0088                     	;# 
   120  0089                     	;# 
   121  008C                     	;# 
   122  008D                     	;# 
   123  008E                     	;# 
   124  008F                     	;# 
   125  0090                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0093                     	;# 
   130  0093                     	;# 
   131  0094                     	;# 
   132  0095                     	;# 
   133  0096                     	;# 
   134  0097                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009A                     	;# 
   138  009B                     	;# 
   139  009C                     	;# 
   140  009D                     	;# 
   141  009E                     	;# 
   142  009F                     	;# 
   143  0105                     	;# 
   144  0107                     	;# 
   145  0108                     	;# 
   146  0109                     	;# 
   147  010C                     	;# 
   148  010C                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  0185                     	;# 
   153  0187                     	;# 
   154  0188                     	;# 
   155  0189                     	;# 
   156  018C                     	;# 
   157  018D                     	;# 
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  000E                     	;# 
   174  000F                     	;# 
   175  0010                     	;# 
   176  0011                     	;# 
   177  0012                     	;# 
   178  0013                     	;# 
   179  0014                     	;# 
   180  0015                     	;# 
   181  0015                     	;# 
   182  0016                     	;# 
   183  0017                     	;# 
   184  0018                     	;# 
   185  0019                     	;# 
   186  001A                     	;# 
   187  001B                     	;# 
   188  001B                     	;# 
   189  001C                     	;# 
   190  001D                     	;# 
   191  001E                     	;# 
   192  001F                     	;# 
   193  0081                     	;# 
   194  0085                     	;# 
   195  0086                     	;# 
   196  0087                     	;# 
   197  0088                     	;# 
   198  0089                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  008F                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0093                     	;# 
   208  0093                     	;# 
   209  0094                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0097                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009A                     	;# 
   216  009B                     	;# 
   217  009C                     	;# 
   218  009D                     	;# 
   219  009E                     	;# 
   220  009F                     	;# 
   221  0105                     	;# 
   222  0107                     	;# 
   223  0108                     	;# 
   224  0109                     	;# 
   225  010C                     	;# 
   226  010C                     	;# 
   227  010D                     	;# 
   228  010E                     	;# 
   229  010F                     	;# 
   230  0185                     	;# 
   231  0187                     	;# 
   232  0188                     	;# 
   233  0189                     	;# 
   234  018C                     	;# 
   235  018D                     	;# 
   236                           
   237                           	psect	strings
   238  0003                     __pstrings:	
   239  0003                     stringtab:	
   240  0003                     __stringtab:	
   241                           
   242                           ;	String table - string pointers are 1 byte each
   243  0003  1BFF               	btfsc	btemp+1,7
   244  0004  280D               	ljmp	stringcode
   245  0005  1383               	bcf	3,7
   246  0006  187F               	btfsc	btemp+1,0
   247  0007  1783               	bsf	3,7
   248  0008  0800               	movf	0,w
   249  0009  0A84               	incf	4,f
   250  000A  1903               	skipnz
   251  000B  0AFF               	incf	btemp+1,f
   252  000C  0008               	return
   253  000D                     stringcode:	
   254  000D                     stringdir:	
   255  000D  3000               	movlw	high stringdir
   256  000E  008A               	movwf	10
   257  000F  0804               	movf	4,w
   258  0010  0A84               	incf	4,f
   259  0011  0782               	addwf	2,f
   260  0012                     __stringbase:	
   261  0012  3400               	retlw	0
   262  0013                     __end_of__stringtab:	
   263  0013                     _dpowers:	
   264  0013  3401               	retlw	1
   265  0014  3400               	retlw	0
   266  0015  340A               	retlw	10
   267  0016  3400               	retlw	0
   268  0017  3464               	retlw	100
   269  0018  3400               	retlw	0
   270  0019  34E8               	retlw	232
   271  001A  3403               	retlw	3
   272  001B  3410               	retlw	16
   273  001C  3427               	retlw	39
   274  001D                     __end_of_dpowers:	
   275  0007                     _PORTC	set	7
   276  0005                     _PORTA	set	5
   277  0006                     _PORTB	set	6
   278  0007                     _PORTCbits	set	7
   279  0005                     _PORTAbits	set	5
   280  0019                     _TXREG	set	25
   281  001A                     _RCREG	set	26
   282  0006                     _PORTBbits	set	6
   283  0013                     _SSPBUF	set	19
   284  0014                     _SSPCON	set	20
   285  0065                     _RCIF	set	101
   286  00C4                     _CREN	set	196
   287  00C7                     _SPEN	set	199
   288  0063                     _SSPIF	set	99
   289  005E                     _PEIE	set	94
   290  005F                     _GIE	set	95
   291  0087                     _TRISC	set	135
   292  0085                     _TRISA	set	133
   293  0086                     _TRISB	set	134
   294  0099                     _SPBRG	set	153
   295  008F                     _OSCCONbits	set	143
   296  0091                     _SSPCON2bits	set	145
   297  0094                     _SSPSTAT	set	148
   298  0093                     _SSPADD	set	147
   299  0091                     _SSPCON2	set	145
   300  04C1                     _TRMT	set	1217
   301  04C5                     _TXEN	set	1221
   302  043E                     _TRISC6	set	1086
   303  043F                     _TRISC7	set	1087
   304  04C4                     _SYNC	set	1220
   305  04C2                     _BRGH	set	1218
   306  0463                     _SSPIE	set	1123
   307  048B                     _RCEN	set	1163
   308  043C                     _TRISC4	set	1084
   309  043B                     _TRISC3	set	1083
   310  0188                     _ANSEL	set	392
   311  0189                     _ANSELH	set	393
   312  001D                     STR_2:	
   313  001D  3444               	retlw	68	;'D'
   314  001E  346F               	retlw	111	;'o'
   315  001F  346F               	retlw	111	;'o'
   316  0020  3472               	retlw	114	;'r'
   317  0021  3420               	retlw	32	;' '
   318  0022  344F               	retlw	79	;'O'
   319  0023  3450               	retlw	80	;'P'
   320  0024  3445               	retlw	69	;'E'
   321  0025  344E               	retlw	78	;'N'
   322  0026  3420               	retlw	32	;' '
   323  0027  3420               	retlw	32	;' '
   324  0028  3400               	retlw	0
   325  0029                     STR_3:	
   326  0029  3444               	retlw	68	;'D'
   327  002A  346F               	retlw	111	;'o'
   328  002B  346F               	retlw	111	;'o'
   329  002C  3472               	retlw	114	;'r'
   330  002D  3420               	retlw	32	;' '
   331  002E  3443               	retlw	67	;'C'
   332  002F  344C               	retlw	76	;'L'
   333  0030  344F               	retlw	79	;'O'
   334  0031  3453               	retlw	83	;'S'
   335  0032  3445               	retlw	69	;'E'
   336  0033  3444               	retlw	68	;'D'
   337  0034  3400               	retlw	0
   338  0035                     STR_4:	
   339  0035  3454               	retlw	84	;'T'
   340  0036  3472               	retlw	114	;'r'
   341  0037  3469               	retlw	105	;'i'
   342  0038  3470               	retlw	112	;'p'
   343  0039  3420               	retlw	32	;' '
   344  003A  344F               	retlw	79	;'O'
   345  003B  344E               	retlw	78	;'N'
   346  003C  3420               	retlw	32	;' '
   347  003D  3400               	retlw	0
   348  003E                     STR_5:	
   349  003E  3454               	retlw	84	;'T'
   350  003F  3472               	retlw	114	;'r'
   351  0040  3469               	retlw	105	;'i'
   352  0041  3470               	retlw	112	;'p'
   353  0042  3420               	retlw	32	;' '
   354  0043  344F               	retlw	79	;'O'
   355  0044  3446               	retlw	70	;'F'
   356  0045  3446               	retlw	70	;'F'
   357  0046  3400               	retlw	0
   358  0047                     STR_6:	
   359  0047  3450               	retlw	80	;'P'
   360  0048  3449               	retlw	73	;'I'
   361  0049  3452               	retlw	82	;'R'
   362  004A  3420               	retlw	32	;' '
   363  004B  344F               	retlw	79	;'O'
   364  004C  344E               	retlw	78	;'N'
   365  004D  3420               	retlw	32	;' '
   366  004E  3400               	retlw	0
   367  004F                     STR_7:	
   368  004F  3450               	retlw	80	;'P'
   369  0050  3449               	retlw	73	;'I'
   370  0051  3452               	retlw	82	;'R'
   371  0052  3420               	retlw	32	;' '
   372  0053  344F               	retlw	79	;'O'
   373  0054  3446               	retlw	70	;'F'
   374  0055  3446               	retlw	70	;'F'
   375  0056  3400               	retlw	0
   376  0057                     STR_1:	
   377  0057  3432               	retlw	50	;'2'
   378  0058  3433               	retlw	51	;'3'
   379  0059  342E               	retlw	46	;'.'
   380  005A  3435               	retlw	53	;'5'
   381  005B  3430               	retlw	48	;'0'
   382  005C  3400               	retlw	0
   383  005D                     STR_11:	
   384  005D  342E               	retlw	46	;'.'
   385  005E  3425               	retlw	37	;'%'
   386  005F  3464               	retlw	100	;'d'
   387  0060  3430               	retlw	48	;'0'
   388  0061  3400               	retlw	0
   389  0062                     STR_12:	
   390  0062  342E               	retlw	46	;'.'
   391  0063  3425               	retlw	37	;'%'
   392  0064  3464               	retlw	100	;'d'
   393  0065  3400               	retlw	0
   394  0048                     
   395                           ; #config settings
   396  0000                     
   397                           	psect	cinit
   398  07F5                     start_initialization:	
   399  07F5                     __initialization:	
   400                           
   401                           ; Clear objects allocated to BANK0
   402  07F5  1383               	bcf	3,7	;select IRP bank0
   403  07F6  3038               	movlw	low __pbssBANK0
   404  07F7  0084               	movwf	4
   405  07F8  304A               	movlw	low (__pbssBANK0+18)
   406  07F9  120A  158A  25F9   	fcall	clear_ram0
   407  07FC                     end_of_initialization:	
   408                           ;End of C runtime variable initialization code
   409                           
   410  07FC                     __end_of__initialization:	
   411  07FC  0183               	clrf	3
   412  07FD  120A  118A  2DCE   	ljmp	_main	;jump to C main() function
   413                           
   414                           	psect	bssBANK0
   415  0038                     __pbssBANK0:	
   416  0038                     _sent:	
   417  0038                     	ds	1
   418  0039                     _state:	
   419  0039                     	ds	1
   420  003A                     _IR:	
   421  003A                     	ds	1
   422  003B                     _PIR:	
   423  003B                     	ds	1
   424  003C                     _trip:	
   425  003C                     	ds	1
   426  003D                     _door:	
   427  003D                     	ds	1
   428  003E                     _temp:	
   429  003E                     	ds	6
   430  0044                     _time:	
   431  0044                     	ds	6
   432                           
   433                           	psect	clrtext
   434  0DF9                     clear_ram0:	
   435                           ;	Called with FSR containing the base address, and
   436                           ;	W with the last address+1
   437                           
   438  0DF9  0064               	clrwdt	;clear the watchdog before getting into this loop
   439  0DFA                     clrloop0:	
   440  0DFA  0180               	clrf	0	;clear RAM location pointed to by FSR
   441  0DFB  0A84               	incf	4,f	;increment pointer
   442  0DFC  0604               	xorwf	4,w	;XOR with final address
   443  0DFD  1903               	btfsc	3,2	;have we reached the end yet?
   444  0DFE  3400               	retlw	0	;all done for this memory range, return
   445  0DFF  0604               	xorwf	4,w	;XOR again to restore value
   446  0E00  2DFA               	goto	clrloop0	;do the next byte
   447                           
   448                           	psect	cstackCOMMON
   449  0070                     __pcstackCOMMON:	
   450  0070                     ?_setup:	
   451  0070                     ?_get_temp:	
   452                           ; 1 bytes @ 0x0
   453                           
   454  0070                     ?_get_hall:	
   455                           ; 1 bytes @ 0x0
   456                           
   457  0070                     ?_get_tripwire:	
   458                           ; 1 bytes @ 0x0
   459                           
   460  0070                     ?_get_PIR:	
   461                           ; 1 bytes @ 0x0
   462                           
   463  0070                     ?_get_IR:	
   464                           ; 1 bytes @ 0x0
   465                           
   466  0070                     ?_get_time:	
   467                           ; 1 bytes @ 0x0
   468                           
   469  0070                     ?_strcat:	
   470                           ; 1 bytes @ 0x0
   471                           
   472  0070                     ?_I2C_Master_Wait:	
   473                           ; 1 bytes @ 0x0
   474                           
   475  0070                     ??_I2C_Master_Wait:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  0070                     ?_I2C_Master_Start:	
   479                           ; 1 bytes @ 0x0
   480                           
   481  0070                     ??_I2C_Master_Start:	
   482                           ; 1 bytes @ 0x0
   483                           
   484  0070                     ?_I2C_Master_RepeatedStart:	
   485                           ; 1 bytes @ 0x0
   486                           
   487  0070                     ??_I2C_Master_RepeatedStart:	
   488                           ; 1 bytes @ 0x0
   489                           
   490  0070                     ?_I2C_Master_Stop:	
   491                           ; 1 bytes @ 0x0
   492                           
   493  0070                     ??_I2C_Master_Stop:	
   494                           ; 1 bytes @ 0x0
   495                           
   496  0070                     ?_I2C_Master_Write:	
   497                           ; 1 bytes @ 0x0
   498                           
   499  0070                     ?_Lcd_Port:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0070                     ??_Lcd_Port:	
   503                           ; 1 bytes @ 0x0
   504                           
   505  0070                     ?_Lcd_Cmd:	
   506                           ; 1 bytes @ 0x0
   507                           
   508  0070                     ?_Lcd_Clear:	
   509                           ; 1 bytes @ 0x0
   510                           
   511  0070                     ?_Lcd_Init:	
   512                           ; 1 bytes @ 0x0
   513                           
   514  0070                     ?_Lcd_Write_Char:	
   515                           ; 1 bytes @ 0x0
   516                           
   517  0070                     ?_initOscilador:	
   518                           ; 1 bytes @ 0x0
   519                           
   520  0070                     ??_initOscilador:	
   521                           ; 1 bytes @ 0x0
   522                           
   523  0070                     ?_UART_TX_Empty:	
   524                           ; 1 bytes @ 0x0
   525                           
   526  0070                     ??_UART_TX_Empty:	
   527                           ; 1 bytes @ 0x0
   528                           
   529  0070                     ?_UART_Write:	
   530                           ; 1 bytes @ 0x0
   531                           
   532  0070                     ??_UART_Write:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0070                     ?_main:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0070                     ?___bmul:	
   539                           ; 1 bytes @ 0x0
   540                           
   541  0070                     ?_strcmp:	
   542                           ; 1 bytes @ 0x0
   543                           
   544  0070                     ?_I2C_Master_Read:	
   545                           ; 2 bytes @ 0x0
   546                           
   547  0070                     ?___lwdiv:	
   548                           ; 2 bytes @ 0x0
   549                           
   550  0070                     ?___lldiv:	
   551                           ; 2 bytes @ 0x0
   552                           
   553  0070                     ?___aldiv:	
   554                           ; 4 bytes @ 0x0
   555                           
   556  0070                     Lcd_Port@a:	
   557                           ; 4 bytes @ 0x0
   558                           
   559  0070                     UART_Write@data:	
   560                           ; 1 bytes @ 0x0
   561                           
   562  0070                     ___bmul@multiplicand:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0070                     strcat@from:	
   566                           ; 1 bytes @ 0x0
   567                           
   568  0070                     strcmp@s2:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  0070                     I2C_Master_Write@d:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0070                     I2C_Master_Read@a:	
   575                           ; 2 bytes @ 0x0
   576                           
   577  0070                     ___lwdiv@divisor:	
   578                           ; 2 bytes @ 0x0
   579                           
   580  0070                     ___lldiv@divisor:	
   581                           ; 2 bytes @ 0x0
   582                           
   583  0070                     ___aldiv@divisor:	
   584                           ; 4 bytes @ 0x0
   585                           
   586                           
   587                           ; 4 bytes @ 0x0
   588  0070                     	ds	1
   589  0071                     ??_strcat:	
   590  0071                     ??_Lcd_Cmd:	
   591                           ; 1 bytes @ 0x1
   592                           
   593  0071                     ??_Lcd_Write_Char:	
   594                           ; 1 bytes @ 0x1
   595                           
   596  0071                     ??___bmul:	
   597                           ; 1 bytes @ 0x1
   598                           
   599                           
   600                           ; 1 bytes @ 0x1
   601  0071                     	ds	1
   602  0072                     ??_strcmp:	
   603  0072                     ??_I2C_Master_Write:	
   604                           ; 1 bytes @ 0x2
   605                           
   606  0072                     ??_I2C_Master_Read:	
   607                           ; 1 bytes @ 0x2
   608                           
   609  0072                     Lcd_Write_Char@temp:	
   610                           ; 1 bytes @ 0x2
   611                           
   612  0072                     initOscilador@option:	
   613                           ; 1 bytes @ 0x2
   614                           
   615  0072                     ___bmul@product:	
   616                           ; 1 bytes @ 0x2
   617                           
   618  0072                     strcat@to:	
   619                           ; 1 bytes @ 0x2
   620                           
   621  0072                     ___lwdiv@dividend:	
   622                           ; 1 bytes @ 0x2
   623                           
   624                           
   625                           ; 2 bytes @ 0x2
   626  0072                     	ds	1
   627  0073                     Lcd_Cmd@a:	
   628  0073                     Lcd_Write_Char@y:	
   629                           ; 1 bytes @ 0x3
   630                           
   631  0073                     ___bmul@multiplier:	
   632                           ; 1 bytes @ 0x3
   633                           
   634  0073                     strcat@cp:	
   635                           ; 1 bytes @ 0x3
   636                           
   637                           
   638                           ; 1 bytes @ 0x3
   639  0073                     	ds	1
   640  0074                     ??_Lcd_Clear:	
   641  0074                     ?_Lcd_Set_Cursor:	
   642                           ; 1 bytes @ 0x4
   643                           
   644  0074                     ??_Lcd_Init:	
   645                           ; 1 bytes @ 0x4
   646                           
   647  0074                     ??___lwdiv:	
   648                           ; 1 bytes @ 0x4
   649                           
   650  0074                     Lcd_Set_Cursor@b:	
   651                           ; 1 bytes @ 0x4
   652                           
   653  0074                     Lcd_Write_Char@a:	
   654                           ; 1 bytes @ 0x4
   655                           
   656  0074                     I2C_Master_Read@temp:	
   657                           ; 1 bytes @ 0x4
   658                           
   659  0074                     ___lldiv@dividend:	
   660                           ; 2 bytes @ 0x4
   661                           
   662  0074                     ___aldiv@dividend:	
   663                           ; 4 bytes @ 0x4
   664                           
   665                           
   666                           ; 4 bytes @ 0x4
   667  0074                     	ds	1
   668  0075                     ??_Lcd_Set_Cursor:	
   669  0075                     ?_Lcd_Write_String:	
   670                           ; 1 bytes @ 0x5
   671                           
   672  0075                     strcmp@r:	
   673                           ; 1 bytes @ 0x5
   674                           
   675  0075                     Lcd_Write_String@a:	
   676                           ; 1 bytes @ 0x5
   677                           
   678  0075                     ___lwdiv@quotient:	
   679                           ; 2 bytes @ 0x5
   680                           
   681                           
   682                           ; 2 bytes @ 0x5
   683  0075                     	ds	1
   684  0076                     ??_get_hall:	
   685  0076                     ??_get_tripwire:	
   686                           ; 1 bytes @ 0x6
   687                           
   688  0076                     ??_get_PIR:	
   689                           ; 1 bytes @ 0x6
   690                           
   691  0076                     ??_get_IR:	
   692                           ; 1 bytes @ 0x6
   693                           
   694  0076                     ??_get_time:	
   695                           ; 1 bytes @ 0x6
   696                           
   697  0076                     strcmp@s1:	
   698                           ; 1 bytes @ 0x6
   699                           
   700                           
   701                           ; 1 bytes @ 0x6
   702  0076                     	ds	1
   703  0077                     ??_Lcd_Write_String:	
   704  0077                     Lcd_Set_Cursor@a:	
   705                           ; 1 bytes @ 0x7
   706                           
   707  0077                     get_hall@key:	
   708                           ; 1 bytes @ 0x7
   709                           
   710  0077                     get_tripwire@trip:	
   711                           ; 1 bytes @ 0x7
   712                           
   713  0077                     get_PIR@PIR:	
   714                           ; 1 bytes @ 0x7
   715                           
   716  0077                     get_IR@IR:	
   717                           ; 1 bytes @ 0x7
   718                           
   719  0077                     ___lwdiv@counter:	
   720                           ; 1 bytes @ 0x7
   721                           
   722                           
   723                           ; 1 bytes @ 0x7
   724  0077                     	ds	1
   725  0078                     ??___lldiv:	
   726  0078                     ??___aldiv:	
   727                           ; 1 bytes @ 0x8
   728                           
   729  0078                     ?___lwmod:	
   730                           ; 1 bytes @ 0x8
   731                           
   732  0078                     Lcd_Set_Cursor@z:	
   733                           ; 2 bytes @ 0x8
   734                           
   735  0078                     get_time@hour:	
   736                           ; 1 bytes @ 0x8
   737                           
   738  0078                     ___lwmod@divisor:	
   739                           ; 1 bytes @ 0x8
   740                           
   741                           
   742                           ; 2 bytes @ 0x8
   743  0078                     	ds	1
   744  0079                     Lcd_Set_Cursor@y:	
   745  0079                     get_time@min:	
   746                           ; 1 bytes @ 0x9
   747                           
   748  0079                     UART_Init@x:	
   749                           ; 1 bytes @ 0x9
   750                           
   751  0079                     ___lldiv@quotient:	
   752                           ; 2 bytes @ 0x9
   753                           
   754                           
   755                           ; 4 bytes @ 0x9
   756  0079                     	ds	1
   757  007A                     Lcd_Set_Cursor@temp:	
   758  007A                     get_time@time_string:	
   759                           ; 1 bytes @ 0xA
   760                           
   761  007A                     Lcd_Write_String@i:	
   762                           ; 1 bytes @ 0xA
   763                           
   764  007A                     ___lwmod@dividend:	
   765                           ; 2 bytes @ 0xA
   766                           
   767                           
   768                           ; 2 bytes @ 0xA
   769  007A                     	ds	2
   770  007C                     ??___lwmod:	
   771                           
   772                           ; 1 bytes @ 0xC
   773  007C                     	ds	1
   774  007D                     ___lldiv@counter:	
   775  007D                     ___lwmod@counter:	
   776                           ; 1 bytes @ 0xD
   777                           
   778                           
   779                           ; 1 bytes @ 0xD
   780  007D                     	ds	1
   781  007E                     ??_setup:	
   782                           
   783                           	psect	cstackBANK0
   784  0020                     __pcstackBANK0:	
   785                           ; 1 bytes @ 0xE
   786                           
   787  0020                     ?_I2C_Master_Init:	
   788  0020                     ?_sprintf:	
   789                           ; 1 bytes @ 0x0
   790                           
   791  0020                     sprintf@f:	
   792                           ; 2 bytes @ 0x0
   793                           
   794  0020                     ___aldiv@counter:	
   795                           ; 1 bytes @ 0x0
   796                           
   797  0020                     I2C_Master_Init@c:	
   798                           ; 1 bytes @ 0x0
   799                           
   800                           
   801                           ; 4 bytes @ 0x0
   802  0020                     	ds	1
   803  0021                     ___aldiv@sign:	
   804                           
   805                           ; 1 bytes @ 0x1
   806  0021                     	ds	1
   807  0022                     ___aldiv@quotient:	
   808                           
   809                           ; 4 bytes @ 0x2
   810  0022                     	ds	1
   811  0023                     ??_sprintf:	
   812                           
   813                           ; 1 bytes @ 0x3
   814  0023                     	ds	1
   815  0024                     ??_I2C_Master_Init:	
   816                           
   817                           ; 1 bytes @ 0x4
   818  0024                     	ds	2
   819  0026                     ?_UART_Init:	
   820  0026                     sprintf@ap:	
   821                           ; 1 bytes @ 0x6
   822                           
   823  0026                     UART_Init@baudrate:	
   824                           ; 1 bytes @ 0x6
   825                           
   826                           
   827                           ; 4 bytes @ 0x6
   828  0026                     	ds	1
   829  0027                     sprintf@flag:	
   830                           
   831                           ; 1 bytes @ 0x7
   832  0027                     	ds	1
   833  0028                     sprintf@prec:	
   834                           
   835                           ; 1 bytes @ 0x8
   836  0028                     	ds	1
   837  0029                     sprintf@val:	
   838                           
   839                           ; 2 bytes @ 0x9
   840  0029                     	ds	1
   841  002A                     ??_UART_Init:	
   842                           
   843                           ; 1 bytes @ 0xA
   844  002A                     	ds	1
   845  002B                     sprintf@sp:	
   846                           
   847                           ; 1 bytes @ 0xB
   848  002B                     	ds	1
   849  002C                     sprintf@c:	
   850                           
   851                           ; 1 bytes @ 0xC
   852  002C                     	ds	1
   853  002D                     ??_get_temp:	
   854                           
   855                           ; 1 bytes @ 0xD
   856  002D                     	ds	3
   857  0030                     get_temp@decimal:	
   858                           
   859                           ; 3 bytes @ 0x10
   860  0030                     	ds	3
   861  0033                     get_temp@tempMSB:	
   862                           
   863                           ; 1 bytes @ 0x13
   864  0033                     	ds	1
   865  0034                     get_temp@temp_string:	
   866                           
   867                           ; 1 bytes @ 0x14
   868  0034                     	ds	1
   869  0035                     get_temp@tempLSB:	
   870                           
   871                           ; 1 bytes @ 0x15
   872  0035                     	ds	1
   873  0036                     ??_main:	
   874                           
   875                           ; 1 bytes @ 0x16
   876  0036                     	ds	2
   877                           
   878                           	psect	maintext
   879  05CE                     __pmaintext:	
   880 ;;
   881 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   882 ;;
   883 ;; *************** function _main *****************
   884 ;; Defined at:
   885 ;;		line 52 in file "mainMaster.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;		None
   888 ;; Auto vars:     Size  Location     Type
   889 ;;		None
   890 ;; Return value:  Size  Location     Type
   891 ;;                  1    wreg      void 
   892 ;; Registers used:
   893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   894 ;; Tracked objects:
   895 ;;		On entry : B00/0
   896 ;;		On exit  : 0/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   899 ;;      Params:         0       0       0       0       0
   900 ;;      Locals:         0       0       0       0       0
   901 ;;      Temps:          0       2       0       0       0
   902 ;;      Totals:         0       2       0       0       0
   903 ;;Total ram usage:        2 bytes
   904 ;; Hardware stack levels required when called:    4
   905 ;; This function calls:
   906 ;;		_Lcd_Clear
   907 ;;		_Lcd_Set_Cursor
   908 ;;		_Lcd_Write_Char
   909 ;;		_Lcd_Write_String
   910 ;;		_UART_TX_Empty
   911 ;;		_UART_Write
   912 ;;		_get_IR
   913 ;;		_get_PIR
   914 ;;		_get_hall
   915 ;;		_get_temp
   916 ;;		_get_time
   917 ;;		_get_tripwire
   918 ;;		_setup
   919 ;;		_strcmp
   920 ;; This function is called by:
   921 ;;		Startup code after reset
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           
   926                           ;psect for function _main
   927  05CE                     _main:	
   928                           
   929                           ;mainMaster.c: 53:     setup();
   930                           
   931                           ;incstack = 0
   932                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   933  05CE  120A  158A  27C5  120A  118A  	fcall	_setup
   934                           
   935                           ;mainMaster.c: 54:     state = 0;
   936  05D3  1283               	bcf	3,5	;RP0=0, select bank0
   937  05D4  1303               	bcf	3,6	;RP1=0, select bank0
   938  05D5  01B9               	clrf	_state
   939                           
   940                           ;mainMaster.c: 55:     Lcd_Clear();
   941  05D6  120A  158A  2614  120A  118A  	fcall	_Lcd_Clear
   942  05DB                     l2116:	
   943                           
   944                           ;mainMaster.c: 59:         get_temp(temp);
   945  05DB  303E               	movlw	(low (_temp| 0))& (0+255)
   946  05DC  120A  118A  237D  120A  118A  	fcall	_get_temp
   947                           
   948                           ;mainMaster.c: 60:         door = get_hall();
   949  05E1  120A  158A  26A2  120A  118A  	fcall	_get_hall
   950  05E6  1283               	bcf	3,5	;RP0=0, select bank0
   951  05E7  1303               	bcf	3,6	;RP1=0, select bank0
   952  05E8  00B6               	movwf	??_main
   953  05E9  0836               	movf	??_main,w
   954  05EA  00BD               	movwf	_door
   955                           
   956                           ;mainMaster.c: 61:         trip = get_tripwire();
   957  05EB  120A  158A  26C1  120A  118A  	fcall	_get_tripwire
   958  05F0  1283               	bcf	3,5	;RP0=0, select bank0
   959  05F1  1303               	bcf	3,6	;RP1=0, select bank0
   960  05F2  00B6               	movwf	??_main
   961  05F3  0836               	movf	??_main,w
   962  05F4  00BC               	movwf	_trip
   963                           
   964                           ;mainMaster.c: 62:         PIR = get_PIR();
   965  05F5  120A  158A  2683  120A  118A  	fcall	_get_PIR
   966  05FA  1283               	bcf	3,5	;RP0=0, select bank0
   967  05FB  1303               	bcf	3,6	;RP1=0, select bank0
   968  05FC  00B6               	movwf	??_main
   969  05FD  0836               	movf	??_main,w
   970  05FE  00BB               	movwf	_PIR
   971                           
   972                           ;mainMaster.c: 63:         IR = get_IR();
   973  05FF  120A  158A  2664  120A  118A  	fcall	_get_IR
   974  0604  1283               	bcf	3,5	;RP0=0, select bank0
   975  0605  1303               	bcf	3,6	;RP1=0, select bank0
   976  0606  00B6               	movwf	??_main
   977  0607  0836               	movf	??_main,w
   978  0608  00BA               	movwf	_IR
   979                           
   980                           ;mainMaster.c: 64:         get_time(time);
   981  0609  3044               	movlw	(low (_time| 0))& (0+255)
   982  060A  120A  118A  226D  120A  118A  	fcall	_get_time
   983                           
   984                           ;mainMaster.c: 66:         if (UART_TX_Empty()){
   985  060F  120A  158A  25D6  120A  118A  	fcall	_UART_TX_Empty
   986  0614  3A00               	xorlw	0
   987  0615  1903               	skipnz
   988  0616  2F19               	goto	l2170
   989                           
   990                           ;mainMaster.c: 67:             UART_Write(temp[0]);
   991  0617  1283               	bcf	3,5	;RP0=0, select bank0
   992  0618  1303               	bcf	3,6	;RP1=0, select bank0
   993  0619  083E               	movf	_temp,w
   994  061A  120A  158A  260A  120A  118A  	fcall	_UART_Write
   995                           
   996                           ;mainMaster.c: 68:             _delay((unsigned long)((1)*(8000000/4000.0)));
   997  061F  3003               	movlw	3
   998  0620  1283               	bcf	3,5	;RP0=0, select bank0
   999  0621  1303               	bcf	3,6	;RP1=0, select bank0
  1000  0622  00B7               	movwf	??_main+1
  1001  0623  3097               	movlw	151
  1002  0624  00B6               	movwf	??_main
  1003  0625                     u1737:	
  1004  0625  0BB6               	decfsz	??_main,f
  1005  0626  2E25               	goto	u1737
  1006  0627  0BB7               	decfsz	??_main+1,f
  1007  0628  2E25               	goto	u1737
  1008                           
  1009                           ;mainMaster.c: 69:             UART_Write(temp[1]);
  1010  0629  1283               	bcf	3,5	;RP0=0, select bank0
  1011  062A  1303               	bcf	3,6	;RP1=0, select bank0
  1012  062B  083F               	movf	_temp+1,w
  1013  062C  120A  158A  260A  120A  118A  	fcall	_UART_Write
  1014                           
  1015                           ;mainMaster.c: 70:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1016  0631  3003               	movlw	3
  1017  0632  1283               	bcf	3,5	;RP0=0, select bank0
  1018  0633  1303               	bcf	3,6	;RP1=0, select bank0
  1019  0634  00B7               	movwf	??_main+1
  1020  0635  3097               	movlw	151
  1021  0636  00B6               	movwf	??_main
  1022  0637                     u1747:	
  1023  0637  0BB6               	decfsz	??_main,f
  1024  0638  2E37               	goto	u1747
  1025  0639  0BB7               	decfsz	??_main+1,f
  1026  063A  2E37               	goto	u1747
  1027                           
  1028                           ;mainMaster.c: 71:             UART_Write(temp[2]);
  1029  063B  1283               	bcf	3,5	;RP0=0, select bank0
  1030  063C  1303               	bcf	3,6	;RP1=0, select bank0
  1031  063D  0840               	movf	_temp+2,w
  1032  063E  120A  158A  260A  120A  118A  	fcall	_UART_Write
  1033                           
  1034                           ;mainMaster.c: 72:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1035  0643  3003               	movlw	3
  1036  0644  1283               	bcf	3,5	;RP0=0, select bank0
  1037  0645  1303               	bcf	3,6	;RP1=0, select bank0
  1038  0646  00B7               	movwf	??_main+1
  1039  0647  3097               	movlw	151
  1040  0648  00B6               	movwf	??_main
  1041  0649                     u1757:	
  1042  0649  0BB6               	decfsz	??_main,f
  1043  064A  2E49               	goto	u1757
  1044  064B  0BB7               	decfsz	??_main+1,f
  1045  064C  2E49               	goto	u1757
  1046                           
  1047                           ;mainMaster.c: 73:             UART_Write(temp[3]);
  1048  064D  1283               	bcf	3,5	;RP0=0, select bank0
  1049  064E  1303               	bcf	3,6	;RP1=0, select bank0
  1050  064F  0841               	movf	_temp+3,w
  1051  0650  120A  158A  260A  120A  118A  	fcall	_UART_Write
  1052                           
  1053                           ;mainMaster.c: 74:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1054  0655  3003               	movlw	3
  1055  0656  1283               	bcf	3,5	;RP0=0, select bank0
  1056  0657  1303               	bcf	3,6	;RP1=0, select bank0
  1057  0658  00B7               	movwf	??_main+1
  1058  0659  3097               	movlw	151
  1059  065A  00B6               	movwf	??_main
  1060  065B                     u1767:	
  1061  065B  0BB6               	decfsz	??_main,f
  1062  065C  2E5B               	goto	u1767
  1063  065D  0BB7               	decfsz	??_main+1,f
  1064  065E  2E5B               	goto	u1767
  1065                           
  1066                           ;mainMaster.c: 75:             UART_Write(temp[4]);
  1067  065F  1283               	bcf	3,5	;RP0=0, select bank0
  1068  0660  1303               	bcf	3,6	;RP1=0, select bank0
  1069  0661  0842               	movf	_temp+4,w
  1070  0662  120A  158A  260A  120A  118A  	fcall	_UART_Write
  1071                           
  1072                           ;mainMaster.c: 76:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1073  0667  3003               	movlw	3
  1074  0668  1283               	bcf	3,5	;RP0=0, select bank0
  1075  0669  1303               	bcf	3,6	;RP1=0, select bank0
  1076  066A  00B7               	movwf	??_main+1
  1077  066B  3097               	movlw	151
  1078  066C  00B6               	movwf	??_main
  1079  066D                     u1777:	
  1080  066D  0BB6               	decfsz	??_main,f
  1081  066E  2E6D               	goto	u1777
  1082  066F  0BB7               	decfsz	??_main+1,f
  1083  0670  2E6D               	goto	u1777
  1084                           
  1085                           ;mainMaster.c: 77:             UART_Write(time[0]);
  1086  0671  1283               	bcf	3,5	;RP0=0, select bank0
  1087  0672  1303               	bcf	3,6	;RP1=0, select bank0
  1088  0673  0844               	movf	_time,w
  1089  0674  120A  158A  260A  120A  118A  	fcall	_UART_Write
  1090                           
  1091                           ;mainMaster.c: 78:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1092  0679  3003               	movlw	3
  1093  067A  1283               	bcf	3,5	;RP0=0, select bank0
  1094  067B  1303               	bcf	3,6	;RP1=0, select bank0
  1095  067C  00B7               	movwf	??_main+1
  1096  067D  3097               	movlw	151
  1097  067E  00B6               	movwf	??_main
  1098  067F                     u1787:	
  1099  067F  0BB6               	decfsz	??_main,f
  1100  0680  2E7F               	goto	u1787
  1101  0681  0BB7               	decfsz	??_main+1,f
  1102  0682  2E7F               	goto	u1787
  1103                           
  1104                           ;mainMaster.c: 79:             UART_Write(time[1]);
  1105  0683  1283               	bcf	3,5	;RP0=0, select bank0
  1106  0684  1303               	bcf	3,6	;RP1=0, select bank0
  1107  0685  0845               	movf	_time+1,w
  1108  0686  120A  158A  260A  120A  118A  	fcall	_UART_Write
  1109                           
  1110                           ;mainMaster.c: 80:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1111  068B  3003               	movlw	3
  1112  068C  1283               	bcf	3,5	;RP0=0, select bank0
  1113  068D  1303               	bcf	3,6	;RP1=0, select bank0
  1114  068E  00B7               	movwf	??_main+1
  1115  068F  3097               	movlw	151
  1116  0690  00B6               	movwf	??_main
  1117  0691                     u1797:	
  1118  0691  0BB6               	decfsz	??_main,f
  1119  0692  2E91               	goto	u1797
  1120  0693  0BB7               	decfsz	??_main+1,f
  1121  0694  2E91               	goto	u1797
  1122                           
  1123                           ;mainMaster.c: 81:             UART_Write(time[2]);
  1124  0695  1283               	bcf	3,5	;RP0=0, select bank0
  1125  0696  1303               	bcf	3,6	;RP1=0, select bank0
  1126  0697  0846               	movf	_time+2,w
  1127  0698  120A  158A  260A  120A  118A  	fcall	_UART_Write
  1128                           
  1129                           ;mainMaster.c: 82:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1130  069D  3003               	movlw	3
  1131  069E  1283               	bcf	3,5	;RP0=0, select bank0
  1132  069F  1303               	bcf	3,6	;RP1=0, select bank0
  1133  06A0  00B7               	movwf	??_main+1
  1134  06A1  3097               	movlw	151
  1135  06A2  00B6               	movwf	??_main
  1136  06A3                     u1807:	
  1137  06A3  0BB6               	decfsz	??_main,f
  1138  06A4  2EA3               	goto	u1807
  1139  06A5  0BB7               	decfsz	??_main+1,f
  1140  06A6  2EA3               	goto	u1807
  1141                           
  1142                           ;mainMaster.c: 83:             UART_Write(time[3]);
  1143  06A7  1283               	bcf	3,5	;RP0=0, select bank0
  1144  06A8  1303               	bcf	3,6	;RP1=0, select bank0
  1145  06A9  0847               	movf	_time+3,w
  1146  06AA  120A  158A  260A  120A  118A  	fcall	_UART_Write
  1147                           
  1148                           ;mainMaster.c: 84:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1149  06AF  3003               	movlw	3
  1150  06B0  1283               	bcf	3,5	;RP0=0, select bank0
  1151  06B1  1303               	bcf	3,6	;RP1=0, select bank0
  1152  06B2  00B7               	movwf	??_main+1
  1153  06B3  3097               	movlw	151
  1154  06B4  00B6               	movwf	??_main
  1155  06B5                     u1817:	
  1156  06B5  0BB6               	decfsz	??_main,f
  1157  06B6  2EB5               	goto	u1817
  1158  06B7  0BB7               	decfsz	??_main+1,f
  1159  06B8  2EB5               	goto	u1817
  1160                           
  1161                           ;mainMaster.c: 85:             UART_Write(time[4]);
  1162  06B9  1283               	bcf	3,5	;RP0=0, select bank0
  1163  06BA  1303               	bcf	3,6	;RP1=0, select bank0
  1164  06BB  0848               	movf	_time+4,w
  1165  06BC  120A  158A  260A  120A  118A  	fcall	_UART_Write
  1166                           
  1167                           ;mainMaster.c: 86:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1168  06C1  3003               	movlw	3
  1169  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  1170  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  1171  06C4  00B7               	movwf	??_main+1
  1172  06C5  3097               	movlw	151
  1173  06C6  00B6               	movwf	??_main
  1174  06C7                     u1827:	
  1175  06C7  0BB6               	decfsz	??_main,f
  1176  06C8  2EC7               	goto	u1827
  1177  06C9  0BB7               	decfsz	??_main+1,f
  1178  06CA  2EC7               	goto	u1827
  1179                           
  1180                           ;mainMaster.c: 87:             UART_Write(door);
  1181  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  1182  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  1183  06CD  083D               	movf	_door,w
  1184  06CE  120A  158A  260A  120A  118A  	fcall	_UART_Write
  1185                           
  1186                           ;mainMaster.c: 88:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1187  06D3  3003               	movlw	3
  1188  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  1189  06D5  1303               	bcf	3,6	;RP1=0, select bank0
  1190  06D6  00B7               	movwf	??_main+1
  1191  06D7  3097               	movlw	151
  1192  06D8  00B6               	movwf	??_main
  1193  06D9                     u1837:	
  1194  06D9  0BB6               	decfsz	??_main,f
  1195  06DA  2ED9               	goto	u1837
  1196  06DB  0BB7               	decfsz	??_main+1,f
  1197  06DC  2ED9               	goto	u1837
  1198                           
  1199                           ;mainMaster.c: 89:             UART_Write(trip);
  1200  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  1201  06DE  1303               	bcf	3,6	;RP1=0, select bank0
  1202  06DF  083C               	movf	_trip,w
  1203  06E0  120A  158A  260A  120A  118A  	fcall	_UART_Write
  1204                           
  1205                           ;mainMaster.c: 90:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1206  06E5  3003               	movlw	3
  1207  06E6  1283               	bcf	3,5	;RP0=0, select bank0
  1208  06E7  1303               	bcf	3,6	;RP1=0, select bank0
  1209  06E8  00B7               	movwf	??_main+1
  1210  06E9  3097               	movlw	151
  1211  06EA  00B6               	movwf	??_main
  1212  06EB                     u1847:	
  1213  06EB  0BB6               	decfsz	??_main,f
  1214  06EC  2EEB               	goto	u1847
  1215  06ED  0BB7               	decfsz	??_main+1,f
  1216  06EE  2EEB               	goto	u1847
  1217                           
  1218                           ;mainMaster.c: 91:             UART_Write(PIR);
  1219  06EF  1283               	bcf	3,5	;RP0=0, select bank0
  1220  06F0  1303               	bcf	3,6	;RP1=0, select bank0
  1221  06F1  083B               	movf	_PIR,w
  1222  06F2  120A  158A  260A  120A  118A  	fcall	_UART_Write
  1223                           
  1224                           ;mainMaster.c: 92:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1225  06F7  3003               	movlw	3
  1226  06F8  1283               	bcf	3,5	;RP0=0, select bank0
  1227  06F9  1303               	bcf	3,6	;RP1=0, select bank0
  1228  06FA  00B7               	movwf	??_main+1
  1229  06FB  3097               	movlw	151
  1230  06FC  00B6               	movwf	??_main
  1231  06FD                     u1857:	
  1232  06FD  0BB6               	decfsz	??_main,f
  1233  06FE  2EFD               	goto	u1857
  1234  06FF  0BB7               	decfsz	??_main+1,f
  1235  0700  2EFD               	goto	u1857
  1236                           
  1237                           ;mainMaster.c: 93:             UART_Write(IR);
  1238  0701  1283               	bcf	3,5	;RP0=0, select bank0
  1239  0702  1303               	bcf	3,6	;RP1=0, select bank0
  1240  0703  083A               	movf	_IR,w
  1241  0704  120A  158A  260A  120A  118A  	fcall	_UART_Write
  1242                           
  1243                           ;mainMaster.c: 94:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1244  0709  3003               	movlw	3
  1245  070A  1283               	bcf	3,5	;RP0=0, select bank0
  1246  070B  1303               	bcf	3,6	;RP1=0, select bank0
  1247  070C  00B7               	movwf	??_main+1
  1248  070D  3097               	movlw	151
  1249  070E  00B6               	movwf	??_main
  1250  070F                     u1867:	
  1251  070F  0BB6               	decfsz	??_main,f
  1252  0710  2F0F               	goto	u1867
  1253  0711  0BB7               	decfsz	??_main+1,f
  1254  0712  2F0F               	goto	u1867
  1255                           
  1256                           ;mainMaster.c: 95:             UART_Write('A');
  1257  0713  3041               	movlw	65
  1258  0714  120A  158A  260A  120A  118A  	fcall	_UART_Write
  1259  0719                     l2170:	
  1260                           
  1261                           ;mainMaster.c: 100:         if (strcmp(temp,"23.50") > 0){
  1262  0719  3045               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1263  071A  1283               	bcf	3,5	;RP0=0, select bank0
  1264  071B  1303               	bcf	3,6	;RP1=0, select bank0
  1265  071C  00B6               	movwf	??_main
  1266  071D  0836               	movf	??_main,w
  1267  071E  00F0               	movwf	strcmp@s2
  1268  071F  303E               	movlw	(low (_temp| 0))& (0+255)
  1269  0720  120A  158A  2704  120A  118A  	fcall	_strcmp
  1270  0725  0871               	movf	?_strcmp+1,w
  1271  0726  3A80               	xorlw	128
  1272  0727  00FF               	movwf	127
  1273  0728  3080               	movlw	128
  1274  0729  027F               	subwf	127,w
  1275  072A  1D03               	skipz
  1276  072B  2F2E               	goto	u1625
  1277  072C  3001               	movlw	1
  1278  072D  0270               	subwf	?_strcmp,w
  1279  072E                     u1625:	
  1280  072E  1C03               	skipc
  1281  072F  2F34               	goto	l238
  1282                           
  1283                           ;mainMaster.c: 101:             PORTAbits.RA0 = 1;
  1284  0730  1283               	bcf	3,5	;RP0=0, select bank0
  1285  0731  1303               	bcf	3,6	;RP1=0, select bank0
  1286  0732  1405               	bsf	5,0	;volatile
  1287                           
  1288                           ;mainMaster.c: 102:         } else {
  1289  0733  2F37               	goto	l239
  1290  0734                     l238:	
  1291                           
  1292                           ;mainMaster.c: 103:             PORTAbits.RA0 = 0;
  1293  0734  1283               	bcf	3,5	;RP0=0, select bank0
  1294  0735  1303               	bcf	3,6	;RP1=0, select bank0
  1295  0736  1005               	bcf	5,0	;volatile
  1296  0737                     l239:	
  1297                           ;mainMaster.c: 104:         }
  1298                           
  1299                           
  1300                           ;mainMaster.c: 107:         if(PORTCbits.RC0 == 1){
  1301  0737  1C07               	btfss	7,0	;volatile
  1302  0738  2F4A               	goto	l2182
  1303                           
  1304                           ;mainMaster.c: 108:             state++;
  1305  0739  3001               	movlw	1
  1306  073A  00B6               	movwf	??_main
  1307  073B  0836               	movf	??_main,w
  1308  073C  07B9               	addwf	_state,f
  1309                           
  1310                           ;mainMaster.c: 109:             if (state > 2){
  1311  073D  3003               	movlw	3
  1312  073E  0239               	subwf	_state,w
  1313  073F  1803               	btfsc	3,0
  1314                           
  1315                           ;mainMaster.c: 110:                 state = 0;
  1316  0740  01B9               	clrf	_state
  1317                           
  1318                           ;mainMaster.c: 112:             Lcd_Clear();
  1319  0741  120A  158A  2614  120A  118A  	fcall	_Lcd_Clear
  1320  0746                     l242:	
  1321                           ;mainMaster.c: 113:             while(PORTCbits.RC0 == 1);
  1322                           
  1323  0746  1283               	bcf	3,5	;RP0=0, select bank0
  1324  0747  1303               	bcf	3,6	;RP1=0, select bank0
  1325  0748  1807               	btfsc	7,0	;volatile
  1326  0749  2F46               	goto	l242
  1327  074A                     l2182:	
  1328                           
  1329                           ;mainMaster.c: 117:         if (state == 0){
  1330  074A  0839               	movf	_state,w
  1331  074B  1D03               	btfss	3,2
  1332  074C  2F7C               	goto	l2194
  1333                           
  1334                           ;mainMaster.c: 119:             Lcd_Set_Cursor(1,1);
  1335  074D  01F4               	clrf	Lcd_Set_Cursor@b
  1336  074E  0AF4               	incf	Lcd_Set_Cursor@b,f
  1337  074F  3001               	movlw	1
  1338  0750  120A  118A  2115  120A  118A  	fcall	_Lcd_Set_Cursor
  1339                           
  1340                           ;mainMaster.c: 120:             Lcd_Write_String(time);
  1341  0755  3044               	movlw	(low (_time| 0))& (0+255)
  1342  0756  00F5               	movwf	Lcd_Write_String@a
  1343  0757  3000               	movlw	0
  1344  0758  00F6               	movwf	Lcd_Write_String@a+1
  1345  0759  120A  118A  20D8  120A  118A  	fcall	_Lcd_Write_String
  1346                           
  1347                           ;mainMaster.c: 122:             Lcd_Set_Cursor(2,1);
  1348  075E  01F4               	clrf	Lcd_Set_Cursor@b
  1349  075F  0AF4               	incf	Lcd_Set_Cursor@b,f
  1350  0760  3002               	movlw	2
  1351  0761  120A  118A  2115  120A  118A  	fcall	_Lcd_Set_Cursor
  1352                           
  1353                           ;mainMaster.c: 123:             Lcd_Write_String(temp);
  1354  0766  303E               	movlw	(low (_temp| 0))& (0+255)
  1355  0767  00F5               	movwf	Lcd_Write_String@a
  1356  0768  3000               	movlw	0
  1357  0769  00F6               	movwf	Lcd_Write_String@a+1
  1358  076A  120A  118A  20D8  120A  118A  	fcall	_Lcd_Write_String
  1359                           
  1360                           ;mainMaster.c: 124:             Lcd_Write_Char(223);
  1361  076F  30DF               	movlw	223
  1362  0770  120A  158A  278C  120A  118A  	fcall	_Lcd_Write_Char
  1363                           
  1364                           ;mainMaster.c: 125:             Lcd_Write_Char('C');
  1365  0775  3043               	movlw	67
  1366  0776  120A  158A  278C  120A  118A  	fcall	_Lcd_Write_Char
  1367                           
  1368                           ;mainMaster.c: 127:         } else if (state == 1){
  1369  077B  2DDB               	goto	l2116
  1370  077C                     l2194:	
  1371  077C  0339               	decf	_state,w
  1372  077D  1D03               	btfss	3,2
  1373  077E  2FB8               	goto	l2212
  1374                           
  1375                           ;mainMaster.c: 129:             Lcd_Set_Cursor(1,1);
  1376  077F  01F4               	clrf	Lcd_Set_Cursor@b
  1377  0780  0AF4               	incf	Lcd_Set_Cursor@b,f
  1378  0781  3001               	movlw	1
  1379  0782  120A  118A  2115  120A  118A  	fcall	_Lcd_Set_Cursor
  1380                           
  1381                           ;mainMaster.c: 130:             if (door == 1){
  1382  0787  1283               	bcf	3,5	;RP0=0, select bank0
  1383  0788  1303               	bcf	3,6	;RP1=0, select bank0
  1384  0789  033D               	decf	_door,w
  1385  078A  1D03               	btfss	3,2
  1386  078B  2F8E               	goto	l2202
  1387                           
  1388                           ;mainMaster.c: 131:                 Lcd_Write_String("Door OPEN  ");
  1389  078C  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1390  078D  2F8F               	goto	L1
  1391  078E                     l2202:	
  1392                           ;mainMaster.c: 132:             } else {
  1393                           
  1394                           
  1395                           ;mainMaster.c: 133:                 Lcd_Write_String("Door CLOSED");
  1396  078E  3017               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1397  078F                     L1:	
  1398  078F  00F5               	movwf	Lcd_Write_String@a
  1399  0790  3080               	movlw	128
  1400  0791  00F6               	movwf	Lcd_Write_String@a+1
  1401  0792  120A  118A  20D8  120A  118A  	fcall	_Lcd_Write_String
  1402                           
  1403                           ;mainMaster.c: 136:             Lcd_Set_Cursor(2,1);
  1404  0797  01F4               	clrf	Lcd_Set_Cursor@b
  1405  0798  0AF4               	incf	Lcd_Set_Cursor@b,f
  1406  0799  3002               	movlw	2
  1407  079A  120A  118A  2115  120A  118A  	fcall	_Lcd_Set_Cursor
  1408                           
  1409                           ;mainMaster.c: 137:             if (trip == 1){
  1410  079F  1283               	bcf	3,5	;RP0=0, select bank0
  1411  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  1412  07A1  033C               	decf	_trip,w
  1413  07A2  1D03               	btfss	3,2
  1414  07A3  2FAE               	goto	l2210
  1415                           
  1416                           ;mainMaster.c: 138:                 Lcd_Write_String("Trip ON ");
  1417  07A4  3023               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1418  07A5  00F5               	movwf	Lcd_Write_String@a
  1419  07A6  3080               	movlw	128
  1420  07A7  00F6               	movwf	Lcd_Write_String@a+1
  1421  07A8  120A  118A  20D8  120A  118A  	fcall	_Lcd_Write_String
  1422                           
  1423                           ;mainMaster.c: 139:             } else {
  1424  07AD  2DDB               	goto	l2116
  1425  07AE                     l2210:	
  1426                           
  1427                           ;mainMaster.c: 140:                 Lcd_Write_String("Trip OFF");
  1428  07AE  302C               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1429  07AF  00F5               	movwf	Lcd_Write_String@a
  1430  07B0  3080               	movlw	128
  1431  07B1  00F6               	movwf	Lcd_Write_String@a+1
  1432  07B2  120A  118A  20D8  120A  118A  	fcall	_Lcd_Write_String
  1433  07B7  2DDB               	goto	l2116
  1434  07B8                     l2212:	
  1435  07B8  3002               	movlw	2
  1436  07B9  0639               	xorwf	_state,w
  1437  07BA  1D03               	btfss	3,2
  1438  07BB  2DDB               	goto	l2116
  1439                           
  1440                           ;mainMaster.c: 145:             Lcd_Set_Cursor(1,1);
  1441  07BC  01F4               	clrf	Lcd_Set_Cursor@b
  1442  07BD  0AF4               	incf	Lcd_Set_Cursor@b,f
  1443  07BE  3001               	movlw	1
  1444  07BF  120A  118A  2115  120A  118A  	fcall	_Lcd_Set_Cursor
  1445                           
  1446                           ;mainMaster.c: 146:             if (PIR == 1){
  1447  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  1448  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  1449  07C6  033B               	decf	_PIR,w
  1450  07C7  1D03               	btfss	3,2
  1451  07C8  2FCB               	goto	l2220
  1452                           
  1453                           ;mainMaster.c: 147:                 Lcd_Write_String("PIR ON ");
  1454  07C9  3035               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1455  07CA  2FCC               	goto	L2
  1456  07CB                     l2220:	
  1457                           ;mainMaster.c: 148:             } else {
  1458                           
  1459                           
  1460                           ;mainMaster.c: 149:                 Lcd_Write_String("PIR OFF");
  1461  07CB  303D               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1462  07CC                     L2:	
  1463  07CC  00F5               	movwf	Lcd_Write_String@a
  1464  07CD  3080               	movlw	128
  1465  07CE  00F6               	movwf	Lcd_Write_String@a+1
  1466  07CF  120A  118A  20D8  120A  118A  	fcall	_Lcd_Write_String
  1467                           
  1468                           ;mainMaster.c: 152:             Lcd_Set_Cursor(2,1);
  1469  07D4  01F4               	clrf	Lcd_Set_Cursor@b
  1470  07D5  0AF4               	incf	Lcd_Set_Cursor@b,f
  1471  07D6  3002               	movlw	2
  1472  07D7  120A  118A  2115  120A  118A  	fcall	_Lcd_Set_Cursor
  1473                           
  1474                           ;mainMaster.c: 153:             if (IR == 1){
  1475  07DC  1283               	bcf	3,5	;RP0=0, select bank0
  1476  07DD  1303               	bcf	3,6	;RP1=0, select bank0
  1477  07DE  033A               	decf	_IR,w
  1478  07DF  1D03               	btfss	3,2
  1479  07E0  2FEB               	goto	l2228
  1480                           
  1481                           ;mainMaster.c: 154:                 Lcd_Write_String("IR ON ");
  1482  07E1  3036               	movlw	(low (((STR_6+1)-__stringbase)| (0+32768)))& (0+255)
  1483  07E2  00F5               	movwf	Lcd_Write_String@a
  1484  07E3  3080               	movlw	128
  1485  07E4  00F6               	movwf	Lcd_Write_String@a+1
  1486  07E5  120A  118A  20D8  120A  118A  	fcall	_Lcd_Write_String
  1487                           
  1488                           ;mainMaster.c: 155:             } else {
  1489  07EA  2DDB               	goto	l2116
  1490  07EB                     l2228:	
  1491                           
  1492                           ;mainMaster.c: 156:                 Lcd_Write_String("IR OFF");
  1493  07EB  303E               	movlw	(low (((STR_7+1)-__stringbase)| (0+32768)))& (0+255)
  1494  07EC  00F5               	movwf	Lcd_Write_String@a
  1495  07ED  3080               	movlw	128
  1496  07EE  00F6               	movwf	Lcd_Write_String@a+1
  1497  07EF  120A  118A  20D8  120A  118A  	fcall	_Lcd_Write_String
  1498  07F4  2DDB               	goto	l2116
  1499  07F5                     __end_of_main:	
  1500                           
  1501                           	psect	text1
  1502  0F04                     __ptext1:	
  1503 ;; *************** function _strcmp *****************
  1504 ;; Defined at:
  1505 ;;		line 33 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;  s1              1    wreg     PTR const unsigned char 
  1508 ;;		 -> temp(6), 
  1509 ;;  s2              1    0[COMMON] PTR const unsigned char 
  1510 ;;		 -> STR_1(6), 
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;  s1              1    6[COMMON] PTR const unsigned char 
  1513 ;;		 -> temp(6), 
  1514 ;;  r               1    5[COMMON] char 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  2    0[COMMON] int 
  1517 ;; Registers used:
  1518 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1524 ;;      Params:         2       0       0       0       0
  1525 ;;      Locals:         2       0       0       0       0
  1526 ;;      Temps:          3       0       0       0       0
  1527 ;;      Totals:         7       0       0       0       0
  1528 ;;Total ram usage:        7 bytes
  1529 ;; Hardware stack levels used:    2
  1530 ;; This function calls:
  1531 ;;		Nothing
  1532 ;; This function is called by:
  1533 ;;		_main
  1534 ;; This function uses a non-reentrant model
  1535 ;;
  1536                           
  1537                           
  1538                           ;psect for function _strcmp
  1539  0F04                     _strcmp:	
  1540                           
  1541                           ;incstack = 0
  1542                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  1543                           ;strcmp@s1 stored from wreg
  1544  0F04  00F6               	movwf	strcmp@s1
  1545  0F05  2F13               	goto	l2090
  1546  0F06                     l2092:	
  1547  0F06  0876               	movf	strcmp@s1,w
  1548  0F07  0084               	movwf	4
  1549  0F08  0800               	movf	0,w
  1550  0F09  1903               	btfsc	3,2
  1551  0F0A  2F28               	goto	l2094
  1552  0F0B  3001               	movlw	1
  1553  0F0C  00F2               	movwf	??_strcmp
  1554  0F0D  0872               	movf	??_strcmp,w
  1555  0F0E  07F6               	addwf	strcmp@s1,f
  1556  0F0F  3001               	movlw	1
  1557  0F10  00F2               	movwf	??_strcmp
  1558  0F11  0872               	movf	??_strcmp,w
  1559  0F12  07F0               	addwf	strcmp@s2,f
  1560  0F13                     l2090:	
  1561  0F13  0870               	movf	strcmp@s2,w
  1562  0F14  0084               	movwf	4
  1563  0F15  120A  118A  200D  120A  158A  	fcall	stringdir
  1564  0F1A  00F2               	movwf	??_strcmp
  1565  0F1B  0876               	movf	strcmp@s1,w
  1566  0F1C  0084               	movwf	4
  1567  0F1D  1383               	bcf	3,7	;select IRP bank0
  1568  0F1E  0800               	movf	0,w
  1569  0F1F  00F3               	movwf	??_strcmp+1
  1570  0F20  0872               	movf	??_strcmp,w
  1571  0F21  0273               	subwf	??_strcmp+1,w
  1572  0F22  00F4               	movwf	??_strcmp+2
  1573  0F23  0874               	movf	??_strcmp+2,w
  1574  0F24  00F5               	movwf	strcmp@r
  1575  0F25  0875               	movf	strcmp@r,w
  1576  0F26  1903               	btfsc	3,2
  1577  0F27  2F06               	goto	l2092
  1578  0F28                     l2094:	
  1579  0F28  0875               	movf	strcmp@r,w
  1580  0F29  00F0               	movwf	?_strcmp
  1581  0F2A  01F1               	clrf	?_strcmp+1
  1582  0F2B  1BF0               	btfsc	?_strcmp,7
  1583  0F2C  03F1               	decf	?_strcmp+1,f
  1584  0F2D  0008               	return
  1585  0F2E                     __end_of_strcmp:	
  1586                           
  1587                           	psect	text2
  1588  0FC5                     __ptext2:	
  1589 ;; *************** function _setup *****************
  1590 ;; Defined at:
  1591 ;;		line 164 in file "mainMaster.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;		None
  1594 ;; Auto vars:     Size  Location     Type
  1595 ;;		None
  1596 ;; Return value:  Size  Location     Type
  1597 ;;                  1    wreg      void 
  1598 ;; Registers used:
  1599 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1605 ;;      Params:         0       0       0       0       0
  1606 ;;      Locals:         0       0       0       0       0
  1607 ;;      Temps:          0       0       0       0       0
  1608 ;;      Totals:         0       0       0       0       0
  1609 ;;Total ram usage:        0 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; Hardware stack levels required when called:    3
  1612 ;; This function calls:
  1613 ;;		_I2C_Master_Init
  1614 ;;		_Lcd_Init
  1615 ;;		_UART_Init
  1616 ;;		_initOscilador
  1617 ;; This function is called by:
  1618 ;;		_main
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           
  1623                           ;psect for function _setup
  1624  0FC5                     _setup:	
  1625                           
  1626                           ;mainMaster.c: 165:     initOscilador(7);
  1627                           
  1628                           ;incstack = 0
  1629                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1630  0FC5  3007               	movlw	7
  1631  0FC6  120A  118A  215F  120A  158A  	fcall	_initOscilador
  1632                           
  1633                           ;mainMaster.c: 166:     ANSELH = 0;
  1634  0FCB  1683               	bsf	3,5	;RP0=1, select bank3
  1635  0FCC  1703               	bsf	3,6	;RP1=1, select bank3
  1636  0FCD  0189               	clrf	9	;volatile
  1637                           
  1638                           ;mainMaster.c: 167:     ANSEL = 0;
  1639  0FCE  0188               	clrf	8	;volatile
  1640                           
  1641                           ;mainMaster.c: 168:     TRISB = 0;
  1642  0FCF  1683               	bsf	3,5	;RP0=1, select bank1
  1643  0FD0  1303               	bcf	3,6	;RP1=0, select bank1
  1644  0FD1  0186               	clrf	6	;volatile
  1645                           
  1646                           ;mainMaster.c: 169:     TRISA = 0;
  1647  0FD2  0185               	clrf	5	;volatile
  1648                           
  1649                           ;mainMaster.c: 170:     PORTB = 0;
  1650  0FD3  1283               	bcf	3,5	;RP0=0, select bank0
  1651  0FD4  1303               	bcf	3,6	;RP1=0, select bank0
  1652  0FD5  0186               	clrf	6	;volatile
  1653                           
  1654                           ;mainMaster.c: 171:     PORTA = 0;
  1655  0FD6  0185               	clrf	5	;volatile
  1656                           
  1657                           ;mainMaster.c: 172:     TRISC = 0x01;
  1658  0FD7  3001               	movlw	1
  1659  0FD8  1683               	bsf	3,5	;RP0=1, select bank1
  1660  0FD9  1303               	bcf	3,6	;RP1=0, select bank1
  1661  0FDA  0087               	movwf	7	;volatile
  1662                           
  1663                           ;mainMaster.c: 173:     PORTC = 0;
  1664  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
  1665  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
  1666  0FDD  0187               	clrf	7	;volatile
  1667                           
  1668                           ;mainMaster.c: 174:     Lcd_Init();
  1669  0FDE  120A  118A  21B4  120A  158A  	fcall	_Lcd_Init
  1670                           
  1671                           ;mainMaster.c: 175:     UART_Init(9600);
  1672  0FE3  3000               	movlw	0
  1673  0FE4  1283               	bcf	3,5	;RP0=0, select bank0
  1674  0FE5  1303               	bcf	3,6	;RP1=0, select bank0
  1675  0FE6  00A9               	movwf	UART_Init@baudrate+3
  1676  0FE7  3000               	movlw	0
  1677  0FE8  00A8               	movwf	UART_Init@baudrate+2
  1678  0FE9  3025               	movlw	37
  1679  0FEA  00A7               	movwf	UART_Init@baudrate+1
  1680  0FEB  3080               	movlw	128
  1681  0FEC  00A6               	movwf	UART_Init@baudrate
  1682  0FED  120A  118A  2420  120A  158A  	fcall	_UART_Init
  1683                           
  1684                           ;mainMaster.c: 176:     I2C_Master_Init(100000);
  1685  0FF2  3000               	movlw	0
  1686  0FF3  1283               	bcf	3,5	;RP0=0, select bank0
  1687  0FF4  1303               	bcf	3,6	;RP1=0, select bank0
  1688  0FF5  00A3               	movwf	I2C_Master_Init@c+3
  1689  0FF6  3001               	movlw	1
  1690  0FF7  00A2               	movwf	I2C_Master_Init@c+2
  1691  0FF8  3086               	movlw	134
  1692  0FF9  00A1               	movwf	I2C_Master_Init@c+1
  1693  0FFA  30A0               	movlw	160
  1694  0FFB  00A0               	movwf	I2C_Master_Init@c
  1695  0FFC  120A  118A  2066   	fcall	_I2C_Master_Init
  1696  0FFF  0008               	return
  1697  1000                     __end_of_setup:	
  1698                           
  1699                           	psect	text3
  1700  015F                     __ptext3:	
  1701 ;; *************** function _initOscilador *****************
  1702 ;; Defined at:
  1703 ;;		line 11 in file "./Oscilador.h"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;  option          1    wreg     unsigned char 
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;  option          1    2[COMMON] unsigned char 
  1708 ;; Return value:  Size  Location     Type
  1709 ;;                  1    wreg      void 
  1710 ;; Registers used:
  1711 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1712 ;; Tracked objects:
  1713 ;;		On entry : 0/0
  1714 ;;		On exit  : 0/0
  1715 ;;		Unchanged: 0/0
  1716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1717 ;;      Params:         0       0       0       0       0
  1718 ;;      Locals:         1       0       0       0       0
  1719 ;;      Temps:          2       0       0       0       0
  1720 ;;      Totals:         3       0       0       0       0
  1721 ;;Total ram usage:        3 bytes
  1722 ;; Hardware stack levels used:    1
  1723 ;; This function calls:
  1724 ;;		Nothing
  1725 ;; This function is called by:
  1726 ;;		_setup
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           
  1731                           ;psect for function _initOscilador
  1732  015F                     _initOscilador:	
  1733                           
  1734                           ;incstack = 0
  1735                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  1736                           ;initOscilador@option stored from wreg
  1737  015F  00F2               	movwf	initOscilador@option
  1738                           
  1739                           ;./Oscilador.h: 13: 
  1740  0160  2990               	goto	l1848
  1741  0161                     l1828:	
  1742                           
  1743                           ;./Oscilador.h: 16:         case 3:
  1744  0161  308F               	movlw	-113
  1745  0162  1683               	bsf	3,5	;RP0=1, select bank1
  1746  0163  1303               	bcf	3,6	;RP1=0, select bank1
  1747  0164  058F               	andwf	15,f	;volatile
  1748                           
  1749                           ;./Oscilador.h: 17: 
  1750  0165  29B2               	goto	l171
  1751  0166                     l1830:	
  1752                           
  1753                           ;./Oscilador.h: 20:         case 4:
  1754  0166  1683               	bsf	3,5	;RP0=1, select bank1
  1755  0167  1303               	bcf	3,6	;RP1=0, select bank1
  1756  0168  080F               	movf	15,w	;volatile
  1757  0169  398F               	andlw	-113
  1758  016A  3810               	iorlw	16
  1759  016B  2989               	goto	L7
  1760  016C                     l1832:	
  1761                           ;./Oscilador.h: 21: 
  1762                           
  1763                           
  1764                           ;./Oscilador.h: 24:         case 5:
  1765  016C  1683               	bsf	3,5	;RP0=1, select bank1
  1766  016D  1303               	bcf	3,6	;RP1=0, select bank1
  1767  016E  080F               	movf	15,w	;volatile
  1768  016F  398F               	andlw	-113
  1769  0170  3820               	iorlw	32
  1770  0171  2989               	goto	L7
  1771  0172                     l1834:	
  1772                           ;./Oscilador.h: 25: 
  1773                           
  1774                           
  1775                           ;./Oscilador.h: 28:         case 6:
  1776  0172  1683               	bsf	3,5	;RP0=1, select bank1
  1777  0173  1303               	bcf	3,6	;RP1=0, select bank1
  1778  0174  080F               	movf	15,w	;volatile
  1779  0175  398F               	andlw	-113
  1780  0176  3830               	iorlw	48
  1781  0177  2989               	goto	L7
  1782  0178                     l1836:	
  1783                           ;./Oscilador.h: 29: 
  1784                           
  1785                           
  1786                           ;./Oscilador.h: 32:         case 7:
  1787  0178  1683               	bsf	3,5	;RP0=1, select bank1
  1788  0179  1303               	bcf	3,6	;RP1=0, select bank1
  1789  017A  080F               	movf	15,w	;volatile
  1790  017B  398F               	andlw	-113
  1791  017C  3840               	iorlw	64
  1792  017D  2989               	goto	L7
  1793  017E                     l1838:	
  1794                           ;./Oscilador.h: 33: 
  1795                           
  1796                           
  1797                           ;./Oscilador.h: 36:         default:
  1798  017E  1683               	bsf	3,5	;RP0=1, select bank1
  1799  017F  1303               	bcf	3,6	;RP1=0, select bank1
  1800  0180  080F               	movf	15,w	;volatile
  1801  0181  398F               	andlw	-113
  1802  0182  3850               	iorlw	80
  1803  0183  2989               	goto	L7
  1804  0184                     l1840:	
  1805                           ;./Oscilador.h: 37: 
  1806                           
  1807                           
  1808                           ;./Oscilador.h: 40:     }
  1809  0184  1683               	bsf	3,5	;RP0=1, select bank1
  1810  0185  1303               	bcf	3,6	;RP1=0, select bank1
  1811  0186  080F               	movf	15,w	;volatile
  1812  0187  398F               	andlw	-113
  1813  0188  3860               	iorlw	96
  1814  0189                     L7:	
  1815  0189  008F               	movwf	15	;volatile
  1816                           
  1817                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  1818  018A  29B2               	goto	l171
  1819  018B                     l1842:	
  1820  018B                     l1844:	
  1821  018B  3070               	movlw	112
  1822  018C  1683               	bsf	3,5	;RP0=1, select bank1
  1823  018D  1303               	bcf	3,6	;RP1=0, select bank1
  1824  018E  048F               	iorwf	15,f	;volatile
  1825  018F  29B2               	goto	l171
  1826  0190                     l1848:	
  1827  0190  0872               	movf	initOscilador@option,w
  1828  0191  00F0               	movwf	??_initOscilador
  1829  0192  01F1               	clrf	??_initOscilador+1
  1830                           
  1831                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1832                           ; Switch size 1, requested type "simple"
  1833                           ; Number of cases is 1, Range of values is 0 to 0
  1834                           ; switch strategies available:
  1835                           ; Name         Instructions Cycles
  1836                           ; simple_byte            4     3 (average)
  1837                           ; direct_byte           11     8 (fixed)
  1838                           ; jumptable            260     6 (fixed)
  1839                           ;	Chosen strategy is simple_byte
  1840  0193  0871               	movf	??_initOscilador+1,w
  1841  0194  3A00               	xorlw	0	; case 0
  1842  0195  1903               	skipnz
  1843  0196  2998               	goto	l2276
  1844  0197  298B               	goto	l1844
  1845  0198                     l2276:	
  1846                           
  1847                           ; Switch size 1, requested type "simple"
  1848                           ; Number of cases is 8, Range of values is 0 to 7
  1849                           ; switch strategies available:
  1850                           ; Name         Instructions Cycles
  1851                           ; simple_byte           25    13 (average)
  1852                           ; direct_byte           32     8 (fixed)
  1853                           ; jumptable            260     6 (fixed)
  1854                           ;	Chosen strategy is simple_byte
  1855  0198  0870               	movf	??_initOscilador,w
  1856  0199  3A00               	xorlw	0	; case 0
  1857  019A  1903               	skipnz
  1858  019B  2961               	goto	l1828
  1859  019C  3A01               	xorlw	1	; case 1
  1860  019D  1903               	skipnz
  1861  019E  2966               	goto	l1830
  1862  019F  3A03               	xorlw	3	; case 2
  1863  01A0  1903               	skipnz
  1864  01A1  296C               	goto	l1832
  1865  01A2  3A01               	xorlw	1	; case 3
  1866  01A3  1903               	skipnz
  1867  01A4  2972               	goto	l1834
  1868  01A5  3A07               	xorlw	7	; case 4
  1869  01A6  1903               	skipnz
  1870  01A7  2978               	goto	l1836
  1871  01A8  3A01               	xorlw	1	; case 5
  1872  01A9  1903               	skipnz
  1873  01AA  297E               	goto	l1838
  1874  01AB  3A03               	xorlw	3	; case 6
  1875  01AC  1903               	skipnz
  1876  01AD  2984               	goto	l1840
  1877  01AE  3A01               	xorlw	1	; case 7
  1878  01AF  1903               	skipnz
  1879  01B0  298B               	goto	l1842
  1880  01B1  298B               	goto	l1844
  1881  01B2                     l171:	
  1882  01B2  140F               	bsf	15,0	;volatile
  1883  01B3  0008               	return
  1884  01B4                     __end_of_initOscilador:	
  1885                           
  1886                           	psect	text4
  1887  0420                     __ptext4:	
  1888 ;; *************** function _UART_Init *****************
  1889 ;; Defined at:
  1890 ;;		line 8 in file "./UART.h"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;  baudrate        4    6[BANK0 ] const long 
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;  x               2    9[COMMON] unsigned int 
  1895 ;; Return value:  Size  Location     Type
  1896 ;;                  1    wreg      unsigned char 
  1897 ;; Registers used:
  1898 ;;		wreg, status,2, status,0, pclath, cstack
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1904 ;;      Params:         0       4       0       0       0
  1905 ;;      Locals:         2       0       0       0       0
  1906 ;;      Temps:          0      12       0       0       0
  1907 ;;      Totals:         2      16       0       0       0
  1908 ;;Total ram usage:       18 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; Hardware stack levels required when called:    1
  1911 ;; This function calls:
  1912 ;;		___aldiv
  1913 ;; This function is called by:
  1914 ;;		_setup
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           
  1919                           ;psect for function _UART_Init
  1920  0420                     _UART_Init:	
  1921                           
  1922                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
  1923                           
  1924                           ;incstack = 0
  1925                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  1926  0420  1283               	bcf	3,5	;RP0=0, select bank0
  1927  0421  1303               	bcf	3,6	;RP1=0, select bank0
  1928  0422  0826               	movf	UART_Init@baudrate,w
  1929  0423  00AA               	movwf	??_UART_Init
  1930  0424  0827               	movf	UART_Init@baudrate+1,w
  1931  0425  00AB               	movwf	??_UART_Init+1
  1932  0426  0828               	movf	UART_Init@baudrate+2,w
  1933  0427  00AC               	movwf	??_UART_Init+2
  1934  0428  0829               	movf	UART_Init@baudrate+3,w
  1935  0429  00AD               	movwf	??_UART_Init+3
  1936  042A  3006               	movlw	6
  1937  042B                     u1275:	
  1938  042B  1003               	clrc
  1939  042C  0DAA               	rlf	??_UART_Init,f
  1940  042D  0DAB               	rlf	??_UART_Init+1,f
  1941  042E  0DAC               	rlf	??_UART_Init+2,f
  1942  042F  0DAD               	rlf	??_UART_Init+3,f
  1943  0430  3EFF               	addlw	-1
  1944  0431  1D03               	skipz
  1945  0432  2C2B               	goto	u1275
  1946  0433  082D               	movf	??_UART_Init+3,w
  1947  0434  00F3               	movwf	___aldiv@divisor+3
  1948  0435  082C               	movf	??_UART_Init+2,w
  1949  0436  00F2               	movwf	___aldiv@divisor+2
  1950  0437  082B               	movf	??_UART_Init+1,w
  1951  0438  00F1               	movwf	___aldiv@divisor+1
  1952  0439  082A               	movf	??_UART_Init,w
  1953  043A  00F0               	movwf	___aldiv@divisor
  1954  043B  0826               	movf	UART_Init@baudrate,w
  1955  043C  00AE               	movwf	??_UART_Init+4
  1956  043D  0827               	movf	UART_Init@baudrate+1,w
  1957  043E  00AF               	movwf	??_UART_Init+5
  1958  043F  0828               	movf	UART_Init@baudrate+2,w
  1959  0440  00B0               	movwf	??_UART_Init+6
  1960  0441  0829               	movf	UART_Init@baudrate+3,w
  1961  0442  00B1               	movwf	??_UART_Init+7
  1962  0443  3006               	movlw	6
  1963  0444                     u1285:	
  1964  0444  1003               	clrc
  1965  0445  0DAE               	rlf	??_UART_Init+4,f
  1966  0446  0DAF               	rlf	??_UART_Init+5,f
  1967  0447  0DB0               	rlf	??_UART_Init+6,f
  1968  0448  0DB1               	rlf	??_UART_Init+7,f
  1969  0449  3EFF               	addlw	-1
  1970  044A  1D03               	skipz
  1971  044B  2C44               	goto	u1285
  1972  044C  3000               	movlw	0
  1973  044D  00B2               	movwf	??_UART_Init+8
  1974  044E  3012               	movlw	18
  1975  044F  00B3               	movwf	??_UART_Init+9
  1976  0450  307A               	movlw	122
  1977  0451  00B4               	movwf	??_UART_Init+10
  1978  0452  3000               	movlw	0
  1979  0453  00B5               	movwf	??_UART_Init+11
  1980  0454  082E               	movf	??_UART_Init+4,w
  1981  0455  02B2               	subwf	??_UART_Init+8,f
  1982  0456  082F               	movf	??_UART_Init+5,w
  1983  0457  1C03               	skipc
  1984  0458  0F2F               	incfsz	??_UART_Init+5,w
  1985  0459  2C5B               	goto	u1291
  1986  045A  2C5C               	goto	u1292
  1987  045B                     u1291:	
  1988  045B  02B3               	subwf	??_UART_Init+9,f
  1989  045C                     u1292:	
  1990  045C  0830               	movf	??_UART_Init+6,w
  1991  045D  1C03               	skipc
  1992  045E  0F30               	incfsz	??_UART_Init+6,w
  1993  045F  2C61               	goto	u1293
  1994  0460  2C62               	goto	u1294
  1995  0461                     u1293:	
  1996  0461  02B4               	subwf	??_UART_Init+10,f
  1997  0462                     u1294:	
  1998  0462  0831               	movf	??_UART_Init+7,w
  1999  0463  1C03               	skipc
  2000  0464  0F31               	incfsz	??_UART_Init+7,w
  2001  0465  2C67               	goto	u1295
  2002  0466  2C68               	goto	u1296
  2003  0467                     u1295:	
  2004  0467  02B5               	subwf	??_UART_Init+11,f
  2005  0468                     u1296:	
  2006  0468  0835               	movf	??_UART_Init+11,w
  2007  0469  00F7               	movwf	___aldiv@dividend+3
  2008  046A  0834               	movf	??_UART_Init+10,w
  2009  046B  00F6               	movwf	___aldiv@dividend+2
  2010  046C  0833               	movf	??_UART_Init+9,w
  2011  046D  00F5               	movwf	___aldiv@dividend+1
  2012  046E  0832               	movf	??_UART_Init+8,w
  2013  046F  00F4               	movwf	___aldiv@dividend
  2014  0470  120A  118A  22EE  120A  118A  	fcall	___aldiv
  2015  0475  0871               	movf	?___aldiv+1,w
  2016  0476  00FA               	movwf	UART_Init@x+1
  2017  0477  0870               	movf	?___aldiv,w
  2018  0478  00F9               	movwf	UART_Init@x
  2019                           
  2020                           ;./UART.h: 12:  if(x>255)
  2021  0479  3001               	movlw	1
  2022  047A  027A               	subwf	UART_Init@x+1,w
  2023  047B  3000               	movlw	0
  2024  047C  1903               	skipnz
  2025  047D  0279               	subwf	UART_Init@x,w
  2026  047E  1C03               	skipc
  2027  047F  2CDC               	goto	l1862
  2028                           
  2029                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  2030  0480  1283               	bcf	3,5	;RP0=0, select bank0
  2031  0481  1303               	bcf	3,6	;RP1=0, select bank0
  2032  0482  0826               	movf	UART_Init@baudrate,w
  2033  0483  00AA               	movwf	??_UART_Init
  2034  0484  0827               	movf	UART_Init@baudrate+1,w
  2035  0485  00AB               	movwf	??_UART_Init+1
  2036  0486  0828               	movf	UART_Init@baudrate+2,w
  2037  0487  00AC               	movwf	??_UART_Init+2
  2038  0488  0829               	movf	UART_Init@baudrate+3,w
  2039  0489  00AD               	movwf	??_UART_Init+3
  2040  048A  3004               	movlw	4
  2041  048B                     u1315:	
  2042  048B  1003               	clrc
  2043  048C  0DAA               	rlf	??_UART_Init,f
  2044  048D  0DAB               	rlf	??_UART_Init+1,f
  2045  048E  0DAC               	rlf	??_UART_Init+2,f
  2046  048F  0DAD               	rlf	??_UART_Init+3,f
  2047  0490  3EFF               	addlw	-1
  2048  0491  1D03               	skipz
  2049  0492  2C8B               	goto	u1315
  2050  0493  082D               	movf	??_UART_Init+3,w
  2051  0494  00F3               	movwf	___aldiv@divisor+3
  2052  0495  082C               	movf	??_UART_Init+2,w
  2053  0496  00F2               	movwf	___aldiv@divisor+2
  2054  0497  082B               	movf	??_UART_Init+1,w
  2055  0498  00F1               	movwf	___aldiv@divisor+1
  2056  0499  082A               	movf	??_UART_Init,w
  2057  049A  00F0               	movwf	___aldiv@divisor
  2058  049B  0826               	movf	UART_Init@baudrate,w
  2059  049C  00AE               	movwf	??_UART_Init+4
  2060  049D  0827               	movf	UART_Init@baudrate+1,w
  2061  049E  00AF               	movwf	??_UART_Init+5
  2062  049F  0828               	movf	UART_Init@baudrate+2,w
  2063  04A0  00B0               	movwf	??_UART_Init+6
  2064  04A1  0829               	movf	UART_Init@baudrate+3,w
  2065  04A2  00B1               	movwf	??_UART_Init+7
  2066  04A3  3004               	movlw	4
  2067  04A4                     u1325:	
  2068  04A4  1003               	clrc
  2069  04A5  0DAE               	rlf	??_UART_Init+4,f
  2070  04A6  0DAF               	rlf	??_UART_Init+5,f
  2071  04A7  0DB0               	rlf	??_UART_Init+6,f
  2072  04A8  0DB1               	rlf	??_UART_Init+7,f
  2073  04A9  3EFF               	addlw	-1
  2074  04AA  1D03               	skipz
  2075  04AB  2CA4               	goto	u1325
  2076  04AC  3000               	movlw	0
  2077  04AD  00B2               	movwf	??_UART_Init+8
  2078  04AE  3012               	movlw	18
  2079  04AF  00B3               	movwf	??_UART_Init+9
  2080  04B0  307A               	movlw	122
  2081  04B1  00B4               	movwf	??_UART_Init+10
  2082  04B2  3000               	movlw	0
  2083  04B3  00B5               	movwf	??_UART_Init+11
  2084  04B4  082E               	movf	??_UART_Init+4,w
  2085  04B5  02B2               	subwf	??_UART_Init+8,f
  2086  04B6  082F               	movf	??_UART_Init+5,w
  2087  04B7  1C03               	skipc
  2088  04B8  0F2F               	incfsz	??_UART_Init+5,w
  2089  04B9  2CBB               	goto	u1331
  2090  04BA  2CBC               	goto	u1332
  2091  04BB                     u1331:	
  2092  04BB  02B3               	subwf	??_UART_Init+9,f
  2093  04BC                     u1332:	
  2094  04BC  0830               	movf	??_UART_Init+6,w
  2095  04BD  1C03               	skipc
  2096  04BE  0F30               	incfsz	??_UART_Init+6,w
  2097  04BF  2CC1               	goto	u1333
  2098  04C0  2CC2               	goto	u1334
  2099  04C1                     u1333:	
  2100  04C1  02B4               	subwf	??_UART_Init+10,f
  2101  04C2                     u1334:	
  2102  04C2  0831               	movf	??_UART_Init+7,w
  2103  04C3  1C03               	skipc
  2104  04C4  0F31               	incfsz	??_UART_Init+7,w
  2105  04C5  2CC7               	goto	u1335
  2106  04C6  2CC8               	goto	u1336
  2107  04C7                     u1335:	
  2108  04C7  02B5               	subwf	??_UART_Init+11,f
  2109  04C8                     u1336:	
  2110  04C8  0835               	movf	??_UART_Init+11,w
  2111  04C9  00F7               	movwf	___aldiv@dividend+3
  2112  04CA  0834               	movf	??_UART_Init+10,w
  2113  04CB  00F6               	movwf	___aldiv@dividend+2
  2114  04CC  0833               	movf	??_UART_Init+9,w
  2115  04CD  00F5               	movwf	___aldiv@dividend+1
  2116  04CE  0832               	movf	??_UART_Init+8,w
  2117  04CF  00F4               	movwf	___aldiv@dividend
  2118  04D0  120A  118A  22EE  120A  118A  	fcall	___aldiv
  2119  04D5  0871               	movf	?___aldiv+1,w
  2120  04D6  00FA               	movwf	UART_Init@x+1
  2121  04D7  0870               	movf	?___aldiv,w
  2122  04D8  00F9               	movwf	UART_Init@x
  2123                           
  2124                           ;./UART.h: 15:   BRGH = 1;
  2125  04D9  1683               	bsf	3,5	;RP0=1, select bank1
  2126  04DA  1303               	bcf	3,6	;RP1=0, select bank1
  2127  04DB  1518               	bsf	24,2	;volatile
  2128  04DC                     l1862:	
  2129                           
  2130                           ;./UART.h: 17:  if(x<256)
  2131  04DC  3001               	movlw	1
  2132  04DD  027A               	subwf	UART_Init@x+1,w
  2133  04DE  3000               	movlw	0
  2134  04DF  1903               	skipnz
  2135  04E0  0279               	subwf	UART_Init@x,w
  2136  04E1  1803               	skipnc
  2137  04E2  0008               	return
  2138                           
  2139                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  2140  04E3  0879               	movf	UART_Init@x,w
  2141  04E4  1683               	bsf	3,5	;RP0=1, select bank1
  2142  04E5  1303               	bcf	3,6	;RP1=0, select bank1
  2143  04E6  0099               	movwf	25	;volatile
  2144                           
  2145                           ;./UART.h: 20:    SYNC = 0;
  2146  04E7  1218               	bcf	24,4	;volatile
  2147                           
  2148                           ;./UART.h: 21:    SPEN = 1;
  2149  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  2150  04E9  1303               	bcf	3,6	;RP1=0, select bank0
  2151  04EA  1798               	bsf	24,7	;volatile
  2152                           
  2153                           ;./UART.h: 22:           TRISC7 = 1;
  2154  04EB  1683               	bsf	3,5	;RP0=1, select bank1
  2155  04EC  1303               	bcf	3,6	;RP1=0, select bank1
  2156  04ED  1787               	bsf	7,7	;volatile
  2157                           
  2158                           ;./UART.h: 23:           TRISC6 = 1;
  2159  04EE  1707               	bsf	7,6	;volatile
  2160                           
  2161                           ;./UART.h: 24:           CREN = 1;
  2162  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  2163  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  2164  04F1  1618               	bsf	24,4	;volatile
  2165                           
  2166                           ;./UART.h: 25:           TXEN = 1;
  2167  04F2  1683               	bsf	3,5	;RP0=1, select bank1
  2168  04F3  1303               	bcf	3,6	;RP1=0, select bank1
  2169  04F4  1698               	bsf	24,5	;volatile
  2170  04F5  0008               	return
  2171  04F6                     __end_of_UART_Init:	
  2172                           
  2173                           	psect	text5
  2174  02EE                     __ptext5:	
  2175 ;; *************** function ___aldiv *****************
  2176 ;; Defined at:
  2177 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;  divisor         4    0[COMMON] long 
  2180 ;;  dividend        4    4[COMMON] long 
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;  quotient        4    2[BANK0 ] long 
  2183 ;;  sign            1    1[BANK0 ] unsigned char 
  2184 ;;  counter         1    0[BANK0 ] unsigned char 
  2185 ;; Return value:  Size  Location     Type
  2186 ;;                  4    0[COMMON] long 
  2187 ;; Registers used:
  2188 ;;		wreg, status,2, status,0
  2189 ;; Tracked objects:
  2190 ;;		On entry : 0/0
  2191 ;;		On exit  : 0/0
  2192 ;;		Unchanged: 0/0
  2193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2194 ;;      Params:         8       0       0       0       0
  2195 ;;      Locals:         0       6       0       0       0
  2196 ;;      Temps:          1       0       0       0       0
  2197 ;;      Totals:         9       6       0       0       0
  2198 ;;Total ram usage:       15 bytes
  2199 ;; Hardware stack levels used:    1
  2200 ;; This function calls:
  2201 ;;		Nothing
  2202 ;; This function is called by:
  2203 ;;		_UART_Init
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           
  2208                           ;psect for function ___aldiv
  2209  02EE                     ___aldiv:	
  2210                           
  2211                           ;incstack = 0
  2212                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2213  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  2214  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  2215  02F0  01A1               	clrf	___aldiv@sign
  2216  02F1  1FF3               	btfss	___aldiv@divisor+3,7
  2217  02F2  2B00               	goto	l468
  2218  02F3  09F0               	comf	___aldiv@divisor,f
  2219  02F4  09F1               	comf	___aldiv@divisor+1,f
  2220  02F5  09F2               	comf	___aldiv@divisor+2,f
  2221  02F6  09F3               	comf	___aldiv@divisor+3,f
  2222  02F7  0AF0               	incf	___aldiv@divisor,f
  2223  02F8  1903               	skipnz
  2224  02F9  0AF1               	incf	___aldiv@divisor+1,f
  2225  02FA  1903               	skipnz
  2226  02FB  0AF2               	incf	___aldiv@divisor+2,f
  2227  02FC  1903               	skipnz
  2228  02FD  0AF3               	incf	___aldiv@divisor+3,f
  2229  02FE  01A1               	clrf	___aldiv@sign
  2230  02FF  0AA1               	incf	___aldiv@sign,f
  2231  0300                     l468:	
  2232  0300  1FF7               	btfss	___aldiv@dividend+3,7
  2233  0301  2B11               	goto	l1674
  2234  0302  09F4               	comf	___aldiv@dividend,f
  2235  0303  09F5               	comf	___aldiv@dividend+1,f
  2236  0304  09F6               	comf	___aldiv@dividend+2,f
  2237  0305  09F7               	comf	___aldiv@dividend+3,f
  2238  0306  0AF4               	incf	___aldiv@dividend,f
  2239  0307  1903               	skipnz
  2240  0308  0AF5               	incf	___aldiv@dividend+1,f
  2241  0309  1903               	skipnz
  2242  030A  0AF6               	incf	___aldiv@dividend+2,f
  2243  030B  1903               	skipnz
  2244  030C  0AF7               	incf	___aldiv@dividend+3,f
  2245  030D  3001               	movlw	1
  2246  030E  00F8               	movwf	??___aldiv
  2247  030F  0878               	movf	??___aldiv,w
  2248  0310  06A1               	xorwf	___aldiv@sign,f
  2249  0311                     l1674:	
  2250  0311  3000               	movlw	0
  2251  0312  00A5               	movwf	___aldiv@quotient+3
  2252  0313  3000               	movlw	0
  2253  0314  00A4               	movwf	___aldiv@quotient+2
  2254  0315  3000               	movlw	0
  2255  0316  00A3               	movwf	___aldiv@quotient+1
  2256  0317  3000               	movlw	0
  2257  0318  00A2               	movwf	___aldiv@quotient
  2258  0319  0873               	movf	___aldiv@divisor+3,w
  2259  031A  0472               	iorwf	___aldiv@divisor+2,w
  2260  031B  0471               	iorwf	___aldiv@divisor+1,w
  2261  031C  0470               	iorwf	___aldiv@divisor,w
  2262  031D  1903               	skipnz
  2263  031E  2B66               	goto	l1696
  2264  031F  01A0               	clrf	___aldiv@counter
  2265  0320  0AA0               	incf	___aldiv@counter,f
  2266  0321                     l1682:	
  2267  0321  1BF3               	btfsc	___aldiv@divisor+3,7
  2268  0322  2B31               	goto	l1684
  2269  0323  3001               	movlw	1
  2270  0324  00F8               	movwf	??___aldiv
  2271  0325                     u1045:	
  2272  0325  1003               	clrc
  2273  0326  0DF0               	rlf	___aldiv@divisor,f
  2274  0327  0DF1               	rlf	___aldiv@divisor+1,f
  2275  0328  0DF2               	rlf	___aldiv@divisor+2,f
  2276  0329  0DF3               	rlf	___aldiv@divisor+3,f
  2277  032A  0BF8               	decfsz	??___aldiv,f
  2278  032B  2B25               	goto	u1045
  2279  032C  3001               	movlw	1
  2280  032D  00F8               	movwf	??___aldiv
  2281  032E  0878               	movf	??___aldiv,w
  2282  032F  07A0               	addwf	___aldiv@counter,f
  2283  0330  2B21               	goto	l1682
  2284  0331                     l1684:	
  2285  0331  3001               	movlw	1
  2286  0332  00F8               	movwf	??___aldiv
  2287  0333                     u1065:	
  2288  0333  1003               	clrc
  2289  0334  0DA2               	rlf	___aldiv@quotient,f
  2290  0335  0DA3               	rlf	___aldiv@quotient+1,f
  2291  0336  0DA4               	rlf	___aldiv@quotient+2,f
  2292  0337  0DA5               	rlf	___aldiv@quotient+3,f
  2293  0338  0BF8               	decfsz	??___aldiv,f
  2294  0339  2B33               	goto	u1065
  2295  033A  0873               	movf	___aldiv@divisor+3,w
  2296  033B  0277               	subwf	___aldiv@dividend+3,w
  2297  033C  1D03               	skipz
  2298  033D  2B48               	goto	u1075
  2299  033E  0872               	movf	___aldiv@divisor+2,w
  2300  033F  0276               	subwf	___aldiv@dividend+2,w
  2301  0340  1D03               	skipz
  2302  0341  2B48               	goto	u1075
  2303  0342  0871               	movf	___aldiv@divisor+1,w
  2304  0343  0275               	subwf	___aldiv@dividend+1,w
  2305  0344  1D03               	skipz
  2306  0345  2B48               	goto	u1075
  2307  0346  0870               	movf	___aldiv@divisor,w
  2308  0347  0274               	subwf	___aldiv@dividend,w
  2309  0348                     u1075:	
  2310  0348  1C03               	skipc
  2311  0349  2B59               	goto	l1692
  2312  034A  0870               	movf	___aldiv@divisor,w
  2313  034B  02F4               	subwf	___aldiv@dividend,f
  2314  034C  0871               	movf	___aldiv@divisor+1,w
  2315  034D  1C03               	skipc
  2316  034E  0F71               	incfsz	___aldiv@divisor+1,w
  2317  034F  02F5               	subwf	___aldiv@dividend+1,f
  2318  0350  0872               	movf	___aldiv@divisor+2,w
  2319  0351  1C03               	skipc
  2320  0352  0F72               	incfsz	___aldiv@divisor+2,w
  2321  0353  02F6               	subwf	___aldiv@dividend+2,f
  2322  0354  0873               	movf	___aldiv@divisor+3,w
  2323  0355  1C03               	skipc
  2324  0356  0F73               	incfsz	___aldiv@divisor+3,w
  2325  0357  02F7               	subwf	___aldiv@dividend+3,f
  2326  0358  1422               	bsf	___aldiv@quotient,0
  2327  0359                     l1692:	
  2328  0359  3001               	movlw	1
  2329  035A                     u1085:	
  2330  035A  1003               	clrc
  2331  035B  0CF3               	rrf	___aldiv@divisor+3,f
  2332  035C  0CF2               	rrf	___aldiv@divisor+2,f
  2333  035D  0CF1               	rrf	___aldiv@divisor+1,f
  2334  035E  0CF0               	rrf	___aldiv@divisor,f
  2335  035F  3EFF               	addlw	-1
  2336  0360  1D03               	skipz
  2337  0361  2B5A               	goto	u1085
  2338  0362  3001               	movlw	1
  2339  0363  02A0               	subwf	___aldiv@counter,f
  2340  0364  1D03               	btfss	3,2
  2341  0365  2B31               	goto	l1684
  2342  0366                     l1696:	
  2343  0366  0821               	movf	___aldiv@sign,w
  2344  0367  1903               	btfsc	3,2
  2345  0368  2B74               	goto	l1700
  2346  0369  09A2               	comf	___aldiv@quotient,f
  2347  036A  09A3               	comf	___aldiv@quotient+1,f
  2348  036B  09A4               	comf	___aldiv@quotient+2,f
  2349  036C  09A5               	comf	___aldiv@quotient+3,f
  2350  036D  0AA2               	incf	___aldiv@quotient,f
  2351  036E  1903               	skipnz
  2352  036F  0AA3               	incf	___aldiv@quotient+1,f
  2353  0370  1903               	skipnz
  2354  0371  0AA4               	incf	___aldiv@quotient+2,f
  2355  0372  1903               	skipnz
  2356  0373  0AA5               	incf	___aldiv@quotient+3,f
  2357  0374                     l1700:	
  2358  0374  0825               	movf	___aldiv@quotient+3,w
  2359  0375  00F3               	movwf	?___aldiv+3
  2360  0376  0824               	movf	___aldiv@quotient+2,w
  2361  0377  00F2               	movwf	?___aldiv+2
  2362  0378  0823               	movf	___aldiv@quotient+1,w
  2363  0379  00F1               	movwf	?___aldiv+1
  2364  037A  0822               	movf	___aldiv@quotient,w
  2365  037B  00F0               	movwf	?___aldiv
  2366  037C  0008               	return
  2367  037D                     __end_of___aldiv:	
  2368                           
  2369                           	psect	text6
  2370  01B4                     __ptext6:	
  2371 ;; *************** function _Lcd_Init *****************
  2372 ;; Defined at:
  2373 ;;		line 65 in file "./LCD4bits.h"
  2374 ;; Parameters:    Size  Location     Type
  2375 ;;		None
  2376 ;; Auto vars:     Size  Location     Type
  2377 ;;		None
  2378 ;; Return value:  Size  Location     Type
  2379 ;;                  1    wreg      void 
  2380 ;; Registers used:
  2381 ;;		wreg, status,2, status,0, pclath, cstack
  2382 ;; Tracked objects:
  2383 ;;		On entry : 0/0
  2384 ;;		On exit  : 0/0
  2385 ;;		Unchanged: 0/0
  2386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2387 ;;      Params:         0       0       0       0       0
  2388 ;;      Locals:         0       0       0       0       0
  2389 ;;      Temps:          2       0       0       0       0
  2390 ;;      Totals:         2       0       0       0       0
  2391 ;;Total ram usage:        2 bytes
  2392 ;; Hardware stack levels used:    1
  2393 ;; Hardware stack levels required when called:    2
  2394 ;; This function calls:
  2395 ;;		_Lcd_Cmd
  2396 ;;		_Lcd_Port
  2397 ;; This function is called by:
  2398 ;;		_setup
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           
  2403                           ;psect for function _Lcd_Init
  2404  01B4                     _Lcd_Init:	
  2405                           
  2406                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  2407                           
  2408                           ;incstack = 0
  2409                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2410  01B4  3000               	movlw	0
  2411  01B5  120A  158A  2630  120A  118A  	fcall	_Lcd_Port
  2412                           
  2413                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  2414  01BA  3034               	movlw	52
  2415  01BB  00F5               	movwf	??_Lcd_Init+1
  2416  01BC  30F1               	movlw	241
  2417  01BD  00F4               	movwf	??_Lcd_Init
  2418  01BE                     u1877:	
  2419  01BE  0BF4               	decfsz	??_Lcd_Init,f
  2420  01BF  29BE               	goto	u1877
  2421  01C0  0BF5               	decfsz	??_Lcd_Init+1,f
  2422  01C1  29BE               	goto	u1877
  2423  01C2  29C3               	nop2
  2424                           
  2425                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  2426  01C3  3003               	movlw	3
  2427  01C4  120A  158A  264A  120A  118A  	fcall	_Lcd_Cmd
  2428                           
  2429                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2430  01C9  300D               	movlw	13
  2431  01CA  00F5               	movwf	??_Lcd_Init+1
  2432  01CB  30FB               	movlw	251
  2433  01CC  00F4               	movwf	??_Lcd_Init
  2434  01CD                     u1887:	
  2435  01CD  0BF4               	decfsz	??_Lcd_Init,f
  2436  01CE  29CD               	goto	u1887
  2437  01CF  0BF5               	decfsz	??_Lcd_Init+1,f
  2438  01D0  29CD               	goto	u1887
  2439  01D1  29D2               	nop2
  2440                           
  2441                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  2442  01D2  3003               	movlw	3
  2443  01D3  120A  158A  264A  120A  118A  	fcall	_Lcd_Cmd
  2444                           
  2445                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  2446  01D8  301D               	movlw	29
  2447  01D9  00F5               	movwf	??_Lcd_Init+1
  2448  01DA  3091               	movlw	145
  2449  01DB  00F4               	movwf	??_Lcd_Init
  2450  01DC                     u1897:	
  2451  01DC  0BF4               	decfsz	??_Lcd_Init,f
  2452  01DD  29DC               	goto	u1897
  2453  01DE  0BF5               	decfsz	??_Lcd_Init+1,f
  2454  01DF  29DC               	goto	u1897
  2455                           
  2456                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  2457  01E0  3003               	movlw	3
  2458  01E1  120A  158A  264A  120A  118A  	fcall	_Lcd_Cmd
  2459                           
  2460                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  2461  01E6  3002               	movlw	2
  2462  01E7  120A  158A  264A  120A  118A  	fcall	_Lcd_Cmd
  2463                           
  2464                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  2465  01EC  3002               	movlw	2
  2466  01ED  120A  158A  264A  120A  118A  	fcall	_Lcd_Cmd
  2467                           
  2468                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  2469  01F2  3008               	movlw	8
  2470  01F3  120A  158A  264A  120A  118A  	fcall	_Lcd_Cmd
  2471                           
  2472                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  2473  01F8  3000               	movlw	0
  2474  01F9  120A  158A  264A  120A  118A  	fcall	_Lcd_Cmd
  2475                           
  2476                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  2477  01FE  300C               	movlw	12
  2478  01FF  120A  158A  264A  120A  118A  	fcall	_Lcd_Cmd
  2479                           
  2480                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  2481  0204  3000               	movlw	0
  2482  0205  120A  158A  264A  120A  118A  	fcall	_Lcd_Cmd
  2483                           
  2484                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  2485  020A  3006               	movlw	6
  2486  020B  120A  158A  264A   	fcall	_Lcd_Cmd
  2487  020E  0008               	return
  2488  020F                     __end_of_Lcd_Init:	
  2489                           
  2490                           	psect	text7
  2491  0066                     __ptext7:	
  2492 ;; *************** function _I2C_Master_Init *****************
  2493 ;; Defined at:
  2494 ;;		line 16 in file "./I2C.h"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;  c               4    0[BANK0 ] const unsigned long 
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;		None
  2499 ;; Return value:  Size  Location     Type
  2500 ;;                  1    wreg      void 
  2501 ;; Registers used:
  2502 ;;		wreg, status,2, status,0, pclath, cstack
  2503 ;; Tracked objects:
  2504 ;;		On entry : 0/0
  2505 ;;		On exit  : 0/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2508 ;;      Params:         0       4       0       0       0
  2509 ;;      Locals:         0       0       0       0       0
  2510 ;;      Temps:          0       4       0       0       0
  2511 ;;      Totals:         0       8       0       0       0
  2512 ;;Total ram usage:        8 bytes
  2513 ;; Hardware stack levels used:    1
  2514 ;; Hardware stack levels required when called:    1
  2515 ;; This function calls:
  2516 ;;		___lldiv
  2517 ;; This function is called by:
  2518 ;;		_setup
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           
  2523                           ;psect for function _I2C_Master_Init
  2524  0066                     _I2C_Master_Init:	
  2525                           
  2526                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  2527                           
  2528                           ;incstack = 0
  2529                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  2530  0066  3028               	movlw	40
  2531  0067  1283               	bcf	3,5	;RP0=0, select bank0
  2532  0068  1303               	bcf	3,6	;RP1=0, select bank0
  2533  0069  0094               	movwf	20	;volatile
  2534                           
  2535                           ;./I2C.h: 19:     SSPCON2 = 0;
  2536  006A  1683               	bsf	3,5	;RP0=1, select bank1
  2537  006B  1303               	bcf	3,6	;RP1=0, select bank1
  2538  006C  0191               	clrf	17	;volatile
  2539                           
  2540                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  2541  006D  1283               	bcf	3,5	;RP0=0, select bank0
  2542  006E  1303               	bcf	3,6	;RP1=0, select bank0
  2543  006F  0820               	movf	I2C_Master_Init@c,w
  2544  0070  00A4               	movwf	??_I2C_Master_Init
  2545  0071  0821               	movf	I2C_Master_Init@c+1,w
  2546  0072  00A5               	movwf	??_I2C_Master_Init+1
  2547  0073  0822               	movf	I2C_Master_Init@c+2,w
  2548  0074  00A6               	movwf	??_I2C_Master_Init+2
  2549  0075  0823               	movf	I2C_Master_Init@c+3,w
  2550  0076  00A7               	movwf	??_I2C_Master_Init+3
  2551  0077  3002               	movlw	2
  2552  0078                     u1245:	
  2553  0078  1003               	clrc
  2554  0079  0DA4               	rlf	??_I2C_Master_Init,f
  2555  007A  0DA5               	rlf	??_I2C_Master_Init+1,f
  2556  007B  0DA6               	rlf	??_I2C_Master_Init+2,f
  2557  007C  0DA7               	rlf	??_I2C_Master_Init+3,f
  2558  007D  3EFF               	addlw	-1
  2559  007E  1D03               	skipz
  2560  007F  2878               	goto	u1245
  2561  0080  0827               	movf	??_I2C_Master_Init+3,w
  2562  0081  00F3               	movwf	___lldiv@divisor+3
  2563  0082  0826               	movf	??_I2C_Master_Init+2,w
  2564  0083  00F2               	movwf	___lldiv@divisor+2
  2565  0084  0825               	movf	??_I2C_Master_Init+1,w
  2566  0085  00F1               	movwf	___lldiv@divisor+1
  2567  0086  0824               	movf	??_I2C_Master_Init,w
  2568  0087  00F0               	movwf	___lldiv@divisor
  2569  0088  3000               	movlw	0
  2570  0089  00F7               	movwf	___lldiv@dividend+3
  2571  008A  307A               	movlw	122
  2572  008B  00F6               	movwf	___lldiv@dividend+2
  2573  008C  3012               	movlw	18
  2574  008D  00F5               	movwf	___lldiv@dividend+1
  2575  008E  3000               	movlw	0
  2576  008F  00F4               	movwf	___lldiv@dividend
  2577  0090  120A  118A  220F   	fcall	___lldiv
  2578  0093  0870               	movf	?___lldiv,w
  2579  0094  3EFF               	addlw	255
  2580  0095  1683               	bsf	3,5	;RP0=1, select bank1
  2581  0096  1303               	bcf	3,6	;RP1=0, select bank1
  2582  0097  0093               	movwf	19	;volatile
  2583                           
  2584                           ;./I2C.h: 21:     SSPSTAT = 0;
  2585  0098  0194               	clrf	20	;volatile
  2586                           
  2587                           ;./I2C.h: 22:     TRISC3 = 1;
  2588  0099  1587               	bsf	7,3	;volatile
  2589                           
  2590                           ;./I2C.h: 23:     TRISC4 = 1;
  2591  009A  1607               	bsf	7,4	;volatile
  2592  009B  0008               	return
  2593  009C                     __end_of_I2C_Master_Init:	
  2594                           
  2595                           	psect	text8
  2596  020F                     __ptext8:	
  2597 ;; *************** function ___lldiv *****************
  2598 ;; Defined at:
  2599 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;  divisor         4    0[COMMON] unsigned long 
  2602 ;;  dividend        4    4[COMMON] unsigned long 
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;  quotient        4    9[COMMON] unsigned long 
  2605 ;;  counter         1   13[COMMON] unsigned char 
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  4    0[COMMON] unsigned long 
  2608 ;; Registers used:
  2609 ;;		wreg, status,2, status,0
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2615 ;;      Params:         8       0       0       0       0
  2616 ;;      Locals:         5       0       0       0       0
  2617 ;;      Temps:          1       0       0       0       0
  2618 ;;      Totals:        14       0       0       0       0
  2619 ;;Total ram usage:       14 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; This function calls:
  2622 ;;		Nothing
  2623 ;; This function is called by:
  2624 ;;		_I2C_Master_Init
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           
  2629                           ;psect for function ___lldiv
  2630  020F                     ___lldiv:	
  2631                           
  2632                           ;incstack = 0
  2633                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2634  020F  3000               	movlw	0
  2635  0210  00FC               	movwf	___lldiv@quotient+3
  2636  0211  3000               	movlw	0
  2637  0212  00FB               	movwf	___lldiv@quotient+2
  2638  0213  3000               	movlw	0
  2639  0214  00FA               	movwf	___lldiv@quotient+1
  2640  0215  3000               	movlw	0
  2641  0216  00F9               	movwf	___lldiv@quotient
  2642  0217  0873               	movf	___lldiv@divisor+3,w
  2643  0218  0472               	iorwf	___lldiv@divisor+2,w
  2644  0219  0471               	iorwf	___lldiv@divisor+1,w
  2645  021A  0470               	iorwf	___lldiv@divisor,w
  2646  021B  1903               	skipnz
  2647  021C  2A64               	goto	l1660
  2648  021D  01FD               	clrf	___lldiv@counter
  2649  021E  0AFD               	incf	___lldiv@counter,f
  2650  021F                     l1646:	
  2651  021F  1BF3               	btfsc	___lldiv@divisor+3,7
  2652  0220  2A2F               	goto	l1648
  2653  0221  3001               	movlw	1
  2654  0222  00F8               	movwf	??___lldiv
  2655  0223                     u955:	
  2656  0223  1003               	clrc
  2657  0224  0DF0               	rlf	___lldiv@divisor,f
  2658  0225  0DF1               	rlf	___lldiv@divisor+1,f
  2659  0226  0DF2               	rlf	___lldiv@divisor+2,f
  2660  0227  0DF3               	rlf	___lldiv@divisor+3,f
  2661  0228  0BF8               	decfsz	??___lldiv,f
  2662  0229  2A23               	goto	u955
  2663  022A  3001               	movlw	1
  2664  022B  00F8               	movwf	??___lldiv
  2665  022C  0878               	movf	??___lldiv,w
  2666  022D  07FD               	addwf	___lldiv@counter,f
  2667  022E  2A1F               	goto	l1646
  2668  022F                     l1648:	
  2669  022F  3001               	movlw	1
  2670  0230  00F8               	movwf	??___lldiv
  2671  0231                     u975:	
  2672  0231  1003               	clrc
  2673  0232  0DF9               	rlf	___lldiv@quotient,f
  2674  0233  0DFA               	rlf	___lldiv@quotient+1,f
  2675  0234  0DFB               	rlf	___lldiv@quotient+2,f
  2676  0235  0DFC               	rlf	___lldiv@quotient+3,f
  2677  0236  0BF8               	decfsz	??___lldiv,f
  2678  0237  2A31               	goto	u975
  2679  0238  0873               	movf	___lldiv@divisor+3,w
  2680  0239  0277               	subwf	___lldiv@dividend+3,w
  2681  023A  1D03               	skipz
  2682  023B  2A46               	goto	u985
  2683  023C  0872               	movf	___lldiv@divisor+2,w
  2684  023D  0276               	subwf	___lldiv@dividend+2,w
  2685  023E  1D03               	skipz
  2686  023F  2A46               	goto	u985
  2687  0240  0871               	movf	___lldiv@divisor+1,w
  2688  0241  0275               	subwf	___lldiv@dividend+1,w
  2689  0242  1D03               	skipz
  2690  0243  2A46               	goto	u985
  2691  0244  0870               	movf	___lldiv@divisor,w
  2692  0245  0274               	subwf	___lldiv@dividend,w
  2693  0246                     u985:	
  2694  0246  1C03               	skipc
  2695  0247  2A57               	goto	l1656
  2696  0248  0870               	movf	___lldiv@divisor,w
  2697  0249  02F4               	subwf	___lldiv@dividend,f
  2698  024A  0871               	movf	___lldiv@divisor+1,w
  2699  024B  1C03               	skipc
  2700  024C  0F71               	incfsz	___lldiv@divisor+1,w
  2701  024D  02F5               	subwf	___lldiv@dividend+1,f
  2702  024E  0872               	movf	___lldiv@divisor+2,w
  2703  024F  1C03               	skipc
  2704  0250  0F72               	incfsz	___lldiv@divisor+2,w
  2705  0251  02F6               	subwf	___lldiv@dividend+2,f
  2706  0252  0873               	movf	___lldiv@divisor+3,w
  2707  0253  1C03               	skipc
  2708  0254  0F73               	incfsz	___lldiv@divisor+3,w
  2709  0255  02F7               	subwf	___lldiv@dividend+3,f
  2710  0256  1479               	bsf	___lldiv@quotient,0
  2711  0257                     l1656:	
  2712  0257  3001               	movlw	1
  2713  0258                     u995:	
  2714  0258  1003               	clrc
  2715  0259  0CF3               	rrf	___lldiv@divisor+3,f
  2716  025A  0CF2               	rrf	___lldiv@divisor+2,f
  2717  025B  0CF1               	rrf	___lldiv@divisor+1,f
  2718  025C  0CF0               	rrf	___lldiv@divisor,f
  2719  025D  3EFF               	addlw	-1
  2720  025E  1D03               	skipz
  2721  025F  2A58               	goto	u995
  2722  0260  3001               	movlw	1
  2723  0261  02FD               	subwf	___lldiv@counter,f
  2724  0262  1D03               	btfss	3,2
  2725  0263  2A2F               	goto	l1648
  2726  0264                     l1660:	
  2727  0264  087C               	movf	___lldiv@quotient+3,w
  2728  0265  00F3               	movwf	?___lldiv+3
  2729  0266  087B               	movf	___lldiv@quotient+2,w
  2730  0267  00F2               	movwf	?___lldiv+2
  2731  0268  087A               	movf	___lldiv@quotient+1,w
  2732  0269  00F1               	movwf	?___lldiv+1
  2733  026A  0879               	movf	___lldiv@quotient,w
  2734  026B  00F0               	movwf	?___lldiv
  2735  026C  0008               	return
  2736  026D                     __end_of___lldiv:	
  2737                           
  2738                           	psect	text9
  2739  0EC1                     __ptext9:	
  2740 ;; *************** function _get_tripwire *****************
  2741 ;; Defined at:
  2742 ;;		line 266 in file "mainMaster.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;		None
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;  trip            1    7[COMMON] unsigned char 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  1    wreg      unsigned char 
  2749 ;; Registers used:
  2750 ;;		wreg, status,2, status,0, pclath, cstack
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2756 ;;      Params:         0       0       0       0       0
  2757 ;;      Locals:         1       0       0       0       0
  2758 ;;      Temps:          1       0       0       0       0
  2759 ;;      Totals:         2       0       0       0       0
  2760 ;;Total ram usage:        2 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; Hardware stack levels required when called:    2
  2763 ;; This function calls:
  2764 ;;		_I2C_Master_Read
  2765 ;;		_I2C_Master_Start
  2766 ;;		_I2C_Master_Stop
  2767 ;;		_I2C_Master_Write
  2768 ;; This function is called by:
  2769 ;;		_main
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           
  2774                           ;psect for function _get_tripwire
  2775  0EC1                     _get_tripwire:	
  2776                           
  2777                           ;mainMaster.c: 268:     char trip;;mainMaster.c: 270:     I2C_Master_Start();
  2778                           
  2779                           ;incstack = 0
  2780                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  2781  0EC1  120A  158A  25DC  120A  158A  	fcall	_I2C_Master_Start
  2782                           
  2783                           ;mainMaster.c: 271:     I2C_Master_Write(0x21);
  2784  0EC6  3021               	movlw	33
  2785  0EC7  00F0               	movwf	I2C_Master_Write@d
  2786  0EC8  3000               	movlw	0
  2787  0EC9  00F1               	movwf	I2C_Master_Write@d+1
  2788  0ECA  120A  158A  25F1  120A  158A  	fcall	_I2C_Master_Write
  2789                           
  2790                           ;mainMaster.c: 272:     trip = I2C_Master_Read(0);
  2791  0ECF  3000               	movlw	0
  2792  0ED0  00F0               	movwf	I2C_Master_Read@a
  2793  0ED1  00F1               	movwf	I2C_Master_Read@a+1
  2794  0ED2  120A  158A  272E  120A  158A  	fcall	_I2C_Master_Read
  2795  0ED7  0870               	movf	?_I2C_Master_Read,w
  2796  0ED8  00F6               	movwf	??_get_tripwire
  2797  0ED9  0876               	movf	??_get_tripwire,w
  2798  0EDA  00F7               	movwf	get_tripwire@trip
  2799                           
  2800                           ;mainMaster.c: 273:     I2C_Master_Stop();
  2801  0EDB  120A  158A  25E3   	fcall	_I2C_Master_Stop
  2802                           
  2803                           ;mainMaster.c: 275:     return (trip);
  2804  0EDE  0877               	movf	get_tripwire@trip,w
  2805  0EDF  0008               	return
  2806  0EE0                     __end_of_get_tripwire:	
  2807                           
  2808                           	psect	text10
  2809  026D                     __ptext10:	
  2810 ;; *************** function _get_time *****************
  2811 ;; Defined at:
  2812 ;;		line 191 in file "mainMaster.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;  time_string     1    wreg     PTR unsigned char 
  2815 ;;		 -> time(6), 
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;  time_string     1   10[COMMON] PTR unsigned char 
  2818 ;;		 -> time(6), 
  2819 ;;  min             1    9[COMMON] unsigned char 
  2820 ;;  hour            1    8[COMMON] unsigned char 
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2830 ;;      Params:         0       0       0       0       0
  2831 ;;      Locals:         3       0       0       0       0
  2832 ;;      Temps:          2       0       0       0       0
  2833 ;;      Totals:         5       0       0       0       0
  2834 ;;Total ram usage:        5 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    2
  2837 ;; This function calls:
  2838 ;;		_I2C_Master_Read
  2839 ;;		_I2C_Master_RepeatedStart
  2840 ;;		_I2C_Master_Start
  2841 ;;		_I2C_Master_Stop
  2842 ;;		_I2C_Master_Write
  2843 ;; This function is called by:
  2844 ;;		_main
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           
  2849                           ;psect for function _get_time
  2850  026D                     _get_time:	
  2851                           
  2852                           ;incstack = 0
  2853                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2854                           ;get_time@time_string stored from wreg
  2855  026D  00FA               	movwf	get_time@time_string
  2856                           
  2857                           ;mainMaster.c: 193:     char hour, min;;mainMaster.c: 195:     I2C_Master_Start();
  2858  026E  120A  158A  25DC  120A  118A  	fcall	_I2C_Master_Start
  2859                           
  2860                           ;mainMaster.c: 196:     I2C_Master_Write(0xD0);
  2861  0273  30D0               	movlw	208
  2862  0274  00F0               	movwf	I2C_Master_Write@d
  2863  0275  3000               	movlw	0
  2864  0276  00F1               	movwf	I2C_Master_Write@d+1
  2865  0277  120A  158A  25F1  120A  118A  	fcall	_I2C_Master_Write
  2866                           
  2867                           ;mainMaster.c: 197:     I2C_Master_Write(0x01);
  2868  027C  3001               	movlw	1
  2869  027D  00F0               	movwf	I2C_Master_Write@d
  2870  027E  3000               	movlw	0
  2871  027F  00F1               	movwf	I2C_Master_Write@d+1
  2872  0280  120A  158A  25F1  120A  118A  	fcall	_I2C_Master_Write
  2873                           
  2874                           ;mainMaster.c: 198:     I2C_Master_RepeatedStart();
  2875  0285  120A  158A  25EA  120A  118A  	fcall	_I2C_Master_RepeatedStart
  2876                           
  2877                           ;mainMaster.c: 199:     I2C_Master_Write(0xD1);
  2878  028A  30D1               	movlw	209
  2879  028B  00F0               	movwf	I2C_Master_Write@d
  2880  028C  3000               	movlw	0
  2881  028D  00F1               	movwf	I2C_Master_Write@d+1
  2882  028E  120A  158A  25F1  120A  118A  	fcall	_I2C_Master_Write
  2883                           
  2884                           ;mainMaster.c: 200:     min = I2C_Master_Read(1);
  2885  0293  3001               	movlw	1
  2886  0294  00F0               	movwf	I2C_Master_Read@a
  2887  0295  3000               	movlw	0
  2888  0296  00F1               	movwf	I2C_Master_Read@a+1
  2889  0297  120A  158A  272E  120A  118A  	fcall	_I2C_Master_Read
  2890  029C  0870               	movf	?_I2C_Master_Read,w
  2891  029D  00F6               	movwf	??_get_time
  2892  029E  0876               	movf	??_get_time,w
  2893  029F  00F9               	movwf	get_time@min
  2894                           
  2895                           ;mainMaster.c: 201:     hour = I2C_Master_Read(0);
  2896  02A0  3000               	movlw	0
  2897  02A1  00F0               	movwf	I2C_Master_Read@a
  2898  02A2  00F1               	movwf	I2C_Master_Read@a+1
  2899  02A3  120A  158A  272E  120A  118A  	fcall	_I2C_Master_Read
  2900  02A8  0870               	movf	?_I2C_Master_Read,w
  2901  02A9  00F6               	movwf	??_get_time
  2902  02AA  0876               	movf	??_get_time,w
  2903  02AB  00F8               	movwf	get_time@hour
  2904                           
  2905                           ;mainMaster.c: 202:     I2C_Master_Stop();
  2906  02AC  120A  158A  25E3  120A  118A  	fcall	_I2C_Master_Stop
  2907                           
  2908                           ;mainMaster.c: 204:     time_string[0] = (hour >> 4) + '0';
  2909  02B1  0878               	movf	get_time@hour,w
  2910  02B2  00F6               	movwf	??_get_time
  2911  02B3  3004               	movlw	4
  2912  02B4                     u1565:	
  2913  02B4  1003               	clrc
  2914  02B5  0CF6               	rrf	??_get_time,f
  2915  02B6  3EFF               	addlw	-1
  2916  02B7  1D03               	skipz
  2917  02B8  2AB4               	goto	u1565
  2918  02B9  0876               	movf	??_get_time,w
  2919  02BA  3E30               	addlw	48
  2920  02BB  00F7               	movwf	??_get_time+1
  2921  02BC  087A               	movf	get_time@time_string,w
  2922  02BD  0084               	movwf	4
  2923  02BE  0877               	movf	??_get_time+1,w
  2924  02BF  1383               	bcf	3,7	;select IRP bank0
  2925  02C0  0080               	movwf	0
  2926                           
  2927                           ;mainMaster.c: 205:     time_string[1] = (hour & 0x0F) + '0';
  2928  02C1  0878               	movf	get_time@hour,w
  2929  02C2  390F               	andlw	15
  2930  02C3  3E30               	addlw	48
  2931  02C4  00F6               	movwf	??_get_time
  2932  02C5  0A7A               	incf	get_time@time_string,w
  2933  02C6  0084               	movwf	4
  2934  02C7  0876               	movf	??_get_time,w
  2935  02C8  0080               	movwf	0
  2936                           
  2937                           ;mainMaster.c: 206:     time_string[2] = ':';
  2938  02C9  303A               	movlw	58
  2939  02CA  00F6               	movwf	??_get_time
  2940  02CB  087A               	movf	get_time@time_string,w
  2941  02CC  3E02               	addlw	2
  2942  02CD  0084               	movwf	4
  2943  02CE  0876               	movf	??_get_time,w
  2944  02CF  0080               	movwf	0
  2945                           
  2946                           ;mainMaster.c: 207:     time_string[3] = (min >> 4) + '0';
  2947  02D0  0879               	movf	get_time@min,w
  2948  02D1  00F6               	movwf	??_get_time
  2949  02D2  3004               	movlw	4
  2950  02D3                     u1575:	
  2951  02D3  1003               	clrc
  2952  02D4  0CF6               	rrf	??_get_time,f
  2953  02D5  3EFF               	addlw	-1
  2954  02D6  1D03               	skipz
  2955  02D7  2AD3               	goto	u1575
  2956  02D8  0876               	movf	??_get_time,w
  2957  02D9  3E30               	addlw	48
  2958  02DA  00F7               	movwf	??_get_time+1
  2959  02DB  087A               	movf	get_time@time_string,w
  2960  02DC  3E03               	addlw	3
  2961  02DD  0084               	movwf	4
  2962  02DE  0877               	movf	??_get_time+1,w
  2963  02DF  0080               	movwf	0
  2964                           
  2965                           ;mainMaster.c: 208:     time_string[4] = (min & 0x0F) + '0';
  2966  02E0  0879               	movf	get_time@min,w
  2967  02E1  390F               	andlw	15
  2968  02E2  3E30               	addlw	48
  2969  02E3  00F6               	movwf	??_get_time
  2970  02E4  087A               	movf	get_time@time_string,w
  2971  02E5  3E04               	addlw	4
  2972  02E6  0084               	movwf	4
  2973  02E7  0876               	movf	??_get_time,w
  2974  02E8  0080               	movwf	0
  2975                           
  2976                           ;mainMaster.c: 209:     time_string[5] = '\0';
  2977  02E9  087A               	movf	get_time@time_string,w
  2978  02EA  3E05               	addlw	5
  2979  02EB  0084               	movwf	4
  2980  02EC  0180               	clrf	0
  2981  02ED  0008               	return
  2982  02EE                     __end_of_get_time:	
  2983                           
  2984                           	psect	text11
  2985  037D                     __ptext11:	
  2986 ;; *************** function _get_temp *****************
  2987 ;; Defined at:
  2988 ;;		line 227 in file "mainMaster.c"
  2989 ;; Parameters:    Size  Location     Type
  2990 ;;  temp_string     1    wreg     PTR unsigned char 
  2991 ;;		 -> temp(6), 
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  temp_string     1   20[BANK0 ] PTR unsigned char 
  2994 ;;		 -> temp(6), 
  2995 ;;  decimal         3   16[BANK0 ] unsigned char [3]
  2996 ;;  tempLSB         1   21[BANK0 ] unsigned char 
  2997 ;;  tempMSB         1   19[BANK0 ] unsigned char 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3007 ;;      Params:         0       0       0       0       0
  3008 ;;      Locals:         0       6       0       0       0
  3009 ;;      Temps:          0       3       0       0       0
  3010 ;;      Totals:         0       9       0       0       0
  3011 ;;Total ram usage:        9 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    2
  3014 ;; This function calls:
  3015 ;;		_I2C_Master_Read
  3016 ;;		_I2C_Master_RepeatedStart
  3017 ;;		_I2C_Master_Start
  3018 ;;		_I2C_Master_Stop
  3019 ;;		_I2C_Master_Write
  3020 ;;		___bmul
  3021 ;;		_sprintf
  3022 ;;		_strcat
  3023 ;; This function is called by:
  3024 ;;		_main
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           
  3029                           ;psect for function _get_temp
  3030  037D                     _get_temp:	
  3031                           
  3032                           ;incstack = 0
  3033                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3034                           ;get_temp@temp_string stored from wreg
  3035  037D  1283               	bcf	3,5	;RP0=0, select bank0
  3036  037E  1303               	bcf	3,6	;RP1=0, select bank0
  3037  037F  00B4               	movwf	get_temp@temp_string
  3038                           
  3039                           ;mainMaster.c: 229:     char tempLSB, tempMSB;;mainMaster.c: 230:     char decimal[3];;m
      +                          ainMaster.c: 232:     I2C_Master_Start();
  3040  0380  120A  158A  25DC  120A  118A  	fcall	_I2C_Master_Start
  3041                           
  3042                           ;mainMaster.c: 233:     I2C_Master_Write(0xD0);
  3043  0385  30D0               	movlw	208
  3044  0386  00F0               	movwf	I2C_Master_Write@d
  3045  0387  3000               	movlw	0
  3046  0388  00F1               	movwf	I2C_Master_Write@d+1
  3047  0389  120A  158A  25F1  120A  118A  	fcall	_I2C_Master_Write
  3048                           
  3049                           ;mainMaster.c: 234:     I2C_Master_Write(0x11);
  3050  038E  3011               	movlw	17
  3051  038F  00F0               	movwf	I2C_Master_Write@d
  3052  0390  3000               	movlw	0
  3053  0391  00F1               	movwf	I2C_Master_Write@d+1
  3054  0392  120A  158A  25F1  120A  118A  	fcall	_I2C_Master_Write
  3055                           
  3056                           ;mainMaster.c: 235:     I2C_Master_RepeatedStart();
  3057  0397  120A  158A  25EA  120A  118A  	fcall	_I2C_Master_RepeatedStart
  3058                           
  3059                           ;mainMaster.c: 236:     I2C_Master_Write(0xD1);
  3060  039C  30D1               	movlw	209
  3061  039D  00F0               	movwf	I2C_Master_Write@d
  3062  039E  3000               	movlw	0
  3063  039F  00F1               	movwf	I2C_Master_Write@d+1
  3064  03A0  120A  158A  25F1  120A  118A  	fcall	_I2C_Master_Write
  3065                           
  3066                           ;mainMaster.c: 237:     tempMSB = I2C_Master_Read(1);
  3067  03A5  3001               	movlw	1
  3068  03A6  00F0               	movwf	I2C_Master_Read@a
  3069  03A7  3000               	movlw	0
  3070  03A8  00F1               	movwf	I2C_Master_Read@a+1
  3071  03A9  120A  158A  272E  120A  118A  	fcall	_I2C_Master_Read
  3072  03AE  0870               	movf	?_I2C_Master_Read,w
  3073  03AF  1283               	bcf	3,5	;RP0=0, select bank0
  3074  03B0  1303               	bcf	3,6	;RP1=0, select bank0
  3075  03B1  00AD               	movwf	??_get_temp
  3076  03B2  082D               	movf	??_get_temp,w
  3077  03B3  00B3               	movwf	get_temp@tempMSB
  3078                           
  3079                           ;mainMaster.c: 238:     tempLSB = I2C_Master_Read(0);
  3080  03B4  3000               	movlw	0
  3081  03B5  00F0               	movwf	I2C_Master_Read@a
  3082  03B6  00F1               	movwf	I2C_Master_Read@a+1
  3083  03B7  120A  158A  272E  120A  118A  	fcall	_I2C_Master_Read
  3084  03BC  0870               	movf	?_I2C_Master_Read,w
  3085  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  3086  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  3087  03BF  00AD               	movwf	??_get_temp
  3088  03C0  082D               	movf	??_get_temp,w
  3089  03C1  00B5               	movwf	get_temp@tempLSB
  3090                           
  3091                           ;mainMaster.c: 239:     I2C_Master_Stop();
  3092  03C2  120A  158A  25E3  120A  118A  	fcall	_I2C_Master_Stop
  3093                           
  3094                           ;mainMaster.c: 241:     tempMSB = tempMSB - 4;
  3095  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  3096  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  3097  03C9  0833               	movf	get_temp@tempMSB,w
  3098  03CA  3EFC               	addlw	252
  3099  03CB  00AD               	movwf	??_get_temp
  3100  03CC  082D               	movf	??_get_temp,w
  3101  03CD  00B3               	movwf	get_temp@tempMSB
  3102                           
  3103                           ;mainMaster.c: 242:     tempLSB = (tempLSB >> 6) * 25;
  3104  03CE  3019               	movlw	25
  3105  03CF  00AD               	movwf	??_get_temp
  3106  03D0  082D               	movf	??_get_temp,w
  3107  03D1  00F0               	movwf	___bmul@multiplicand
  3108  03D2  0835               	movf	get_temp@tempLSB,w
  3109  03D3  00AE               	movwf	??_get_temp+1
  3110  03D4  3006               	movlw	6
  3111  03D5                     u1545:	
  3112  03D5  1003               	clrc
  3113  03D6  0CAE               	rrf	??_get_temp+1,f
  3114  03D7  3EFF               	addlw	-1
  3115  03D8  1D03               	skipz
  3116  03D9  2BD5               	goto	u1545
  3117  03DA  082E               	movf	??_get_temp+1,w
  3118  03DB  120A  158A  261F  120A  118A  	fcall	___bmul
  3119  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  3120  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  3121  03E2  00AF               	movwf	??_get_temp+2
  3122  03E3  082F               	movf	??_get_temp+2,w
  3123  03E4  00B5               	movwf	get_temp@tempLSB
  3124                           
  3125                           ;mainMaster.c: 243:     sprintf(temp_string, "%d", tempMSB);
  3126  03E5  3051               	movlw	(low (((STR_12+1)-__stringbase)| (0+32768)))& (0+255)
  3127  03E6  00AD               	movwf	??_get_temp
  3128  03E7  082D               	movf	??_get_temp,w
  3129  03E8  00A0               	movwf	sprintf@f
  3130  03E9  0833               	movf	get_temp@tempMSB,w
  3131  03EA  00AE               	movwf	??_get_temp+1
  3132  03EB  01AF               	clrf	??_get_temp+2
  3133  03EC  082E               	movf	??_get_temp+1,w
  3134  03ED  00A1               	movwf	?_sprintf+1
  3135  03EE  082F               	movf	??_get_temp+2,w
  3136  03EF  00A2               	movwf	?_sprintf+2
  3137  03F0  0834               	movf	get_temp@temp_string,w
  3138  03F1  120A  118A  24F6  120A  118A  	fcall	_sprintf
  3139                           
  3140                           ;mainMaster.c: 244:     if (tempLSB == 0){
  3141  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  3142  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  3143  03F8  0835               	movf	get_temp@tempLSB,w
  3144  03F9  1D03               	btfss	3,2
  3145  03FA  2BFD               	goto	l2040
  3146                           
  3147                           ;mainMaster.c: 245:         sprintf(decimal, ".%d0", tempLSB);
  3148  03FB  304B               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  3149  03FC  2BFE               	goto	L8
  3150  03FD                     l2040:	
  3151                           ;mainMaster.c: 246:     } else {
  3152                           
  3153                           
  3154                           ;mainMaster.c: 247:         sprintf(decimal, ".%d", tempLSB);
  3155  03FD  3050               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  3156  03FE                     L8:	
  3157  03FE  00AD               	movwf	??_get_temp
  3158  03FF  082D               	movf	??_get_temp,w
  3159  0400  00A0               	movwf	sprintf@f
  3160  0401  0835               	movf	get_temp@tempLSB,w
  3161  0402  00AE               	movwf	??_get_temp+1
  3162  0403  01AF               	clrf	??_get_temp+2
  3163  0404  082E               	movf	??_get_temp+1,w
  3164  0405  00A1               	movwf	?_sprintf+1
  3165  0406  082F               	movf	??_get_temp+2,w
  3166  0407  00A2               	movwf	?_sprintf+2
  3167  0408  3030               	movlw	(low (get_temp@decimal| 0))& (0+255)
  3168  0409  120A  118A  24F6  120A  118A  	fcall	_sprintf
  3169                           
  3170                           ;mainMaster.c: 249:     strcat(temp_string, decimal);
  3171  040E  3030               	movlw	(low (get_temp@decimal| 0))& (0+255)
  3172  040F  1283               	bcf	3,5	;RP0=0, select bank0
  3173  0410  1303               	bcf	3,6	;RP1=0, select bank0
  3174  0411  00AD               	movwf	??_get_temp
  3175  0412  082D               	movf	??_get_temp,w
  3176  0413  00F0               	movwf	strcat@from
  3177  0414  0834               	movf	get_temp@temp_string,w
  3178  0415  120A  158A  26E0   	fcall	_strcat
  3179                           
  3180                           ;mainMaster.c: 250:     temp_string[5] = '\0';
  3181  0418  1283               	bcf	3,5	;RP0=0, select bank0
  3182  0419  1303               	bcf	3,6	;RP1=0, select bank0
  3183  041A  0834               	movf	get_temp@temp_string,w
  3184  041B  3E05               	addlw	5
  3185  041C  0084               	movwf	4
  3186  041D  1383               	bcf	3,7	;select IRP bank0
  3187  041E  0180               	clrf	0
  3188  041F  0008               	return
  3189  0420                     __end_of_get_temp:	
  3190                           
  3191                           	psect	text12
  3192  0EE0                     __ptext12:	
  3193 ;; *************** function _strcat *****************
  3194 ;; Defined at:
  3195 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  3196 ;; Parameters:    Size  Location     Type
  3197 ;;  to              1    wreg     PTR unsigned char 
  3198 ;;		 -> temp(6), 
  3199 ;;  from            1    0[COMMON] PTR const unsigned char 
  3200 ;;		 -> get_temp@decimal(3), 
  3201 ;; Auto vars:     Size  Location     Type
  3202 ;;  to              1    2[COMMON] PTR unsigned char 
  3203 ;;		 -> temp(6), 
  3204 ;;  cp              1    3[COMMON] PTR unsigned char 
  3205 ;;		 -> temp(6), 
  3206 ;; Return value:  Size  Location     Type
  3207 ;;                  1    wreg      PTR unsigned char 
  3208 ;; Registers used:
  3209 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3210 ;; Tracked objects:
  3211 ;;		On entry : 0/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3215 ;;      Params:         1       0       0       0       0
  3216 ;;      Locals:         2       0       0       0       0
  3217 ;;      Temps:          1       0       0       0       0
  3218 ;;      Totals:         4       0       0       0       0
  3219 ;;Total ram usage:        4 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; This function calls:
  3222 ;;		Nothing
  3223 ;; This function is called by:
  3224 ;;		_get_temp
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           
  3229                           ;psect for function _strcat
  3230  0EE0                     _strcat:	
  3231                           
  3232                           ;incstack = 0
  3233                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  3234                           ;strcat@to stored from wreg
  3235  0EE0  00F2               	movwf	strcat@to
  3236  0EE1  0872               	movf	strcat@to,w
  3237  0EE2  00F1               	movwf	??_strcat
  3238  0EE3  0871               	movf	??_strcat,w
  3239  0EE4  00F3               	movwf	strcat@cp
  3240  0EE5                     l1946:	
  3241  0EE5  0873               	movf	strcat@cp,w
  3242  0EE6  0084               	movwf	4
  3243  0EE7  1383               	bcf	3,7	;select IRP bank0
  3244  0EE8  0800               	movf	0,w
  3245  0EE9  1903               	btfsc	3,2
  3246  0EEA  2EF8               	goto	l1950
  3247  0EEB  3001               	movlw	1
  3248  0EEC  00F1               	movwf	??_strcat
  3249  0EED  0871               	movf	??_strcat,w
  3250  0EEE  07F3               	addwf	strcat@cp,f
  3251  0EEF  2EE5               	goto	l1946
  3252  0EF0                     l1948:	
  3253  0EF0  3001               	movlw	1
  3254  0EF1  00F1               	movwf	??_strcat
  3255  0EF2  0871               	movf	??_strcat,w
  3256  0EF3  07F3               	addwf	strcat@cp,f
  3257  0EF4  3001               	movlw	1
  3258  0EF5  00F1               	movwf	??_strcat
  3259  0EF6  0871               	movf	??_strcat,w
  3260  0EF7  07F0               	addwf	strcat@from,f
  3261  0EF8                     l1950:	
  3262  0EF8  0870               	movf	strcat@from,w
  3263  0EF9  0084               	movwf	4
  3264  0EFA  0800               	movf	0,w
  3265  0EFB  00F1               	movwf	??_strcat
  3266  0EFC  0873               	movf	strcat@cp,w
  3267  0EFD  0084               	movwf	4
  3268  0EFE  0871               	movf	??_strcat,w
  3269  0EFF  0080               	movwf	0
  3270  0F00  0800               	movf	0,w
  3271  0F01  1903               	btfsc	3,2
  3272  0F02  0008               	return
  3273  0F03  2EF0               	goto	l1948
  3274  0F04                     __end_of_strcat:	
  3275                           
  3276                           	psect	text13
  3277  04F6                     __ptext13:	
  3278 ;; *************** function _sprintf *****************
  3279 ;; Defined at:
  3280 ;;		line 500 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;  sp              1    wreg     PTR unsigned char 
  3283 ;;		 -> get_temp@decimal(3), temp(6), 
  3284 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  3285 ;;		 -> STR_12(4), STR_11(5), STR_10(3), 
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  3288 ;;		 -> get_temp@decimal(3), temp(6), 
  3289 ;;  tmpval          4    0        struct .
  3290 ;;  val             2    9[BANK0 ] unsigned int 
  3291 ;;  cp              2    0        PTR const unsigned char 
  3292 ;;  len             2    0        unsigned int 
  3293 ;;  c               1   12[BANK0 ] unsigned char 
  3294 ;;  prec            1    8[BANK0 ] char 
  3295 ;;  flag            1    7[BANK0 ] unsigned char 
  3296 ;;  ap              1    6[BANK0 ] PTR void [1]
  3297 ;;		 -> ?_sprintf(2), 
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  2    0[BANK0 ] int 
  3300 ;; Registers used:
  3301 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3307 ;;      Params:         0       3       0       0       0
  3308 ;;      Locals:         0       7       0       0       0
  3309 ;;      Temps:          0       3       0       0       0
  3310 ;;      Totals:         0      13       0       0       0
  3311 ;;Total ram usage:       13 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    1
  3314 ;; This function calls:
  3315 ;;		___lwdiv
  3316 ;;		___lwmod
  3317 ;; This function is called by:
  3318 ;;		_get_temp
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           
  3323                           ;psect for function _sprintf
  3324  04F6                     _sprintf:	
  3325                           
  3326                           ;incstack = 0
  3327                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3328                           ;sprintf@sp stored from wreg
  3329  04F6  1283               	bcf	3,5	;RP0=0, select bank0
  3330  04F7  1303               	bcf	3,6	;RP1=0, select bank0
  3331  04F8  00AB               	movwf	sprintf@sp
  3332                           
  3333                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;D:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  3334  04F9  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  3335  04FA  00A3               	movwf	??_sprintf
  3336  04FB  0823               	movf	??_sprintf,w
  3337  04FC  00A6               	movwf	sprintf@ap
  3338  04FD                     l1932:	
  3339                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  3340                           
  3341                           
  3342                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  3343  04FD  3001               	movlw	1
  3344  04FE  07A0               	addwf	sprintf@f,f
  3345  04FF  30FF               	movlw	-1
  3346  0500  0720               	addwf	sprintf@f,w
  3347  0501  0084               	movwf	4
  3348  0502  120A  118A  200D  120A  118A  	fcall	stringdir
  3349  0507  00A3               	movwf	??_sprintf
  3350  0508  0823               	movf	??_sprintf,w
  3351  0509  00AC               	movwf	sprintf@c
  3352  050A  082C               	movf	sprintf@c,w
  3353  050B  1903               	btfsc	3,2
  3354  050C  2DC9               	goto	l1934
  3355                           
  3356                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  3357  050D  3025               	movlw	37
  3358  050E  062C               	xorwf	sprintf@c,w
  3359  050F  1903               	btfsc	3,2
  3360  0510  2D1D               	goto	l1888
  3361                           
  3362                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;D:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  3363  0511  082C               	movf	sprintf@c,w
  3364  0512  00A3               	movwf	??_sprintf
  3365  0513  082B               	movf	sprintf@sp,w
  3366  0514  0084               	movwf	4
  3367  0515  0823               	movf	??_sprintf,w
  3368  0516  1383               	bcf	3,7	;select IRP bank0
  3369  0517  0080               	movwf	0
  3370  0518  3001               	movlw	1
  3371  0519  00A3               	movwf	??_sprintf
  3372  051A  0823               	movf	??_sprintf,w
  3373  051B  07AB               	addwf	sprintf@sp,f
  3374                           
  3375                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  3376  051C  2CFD               	goto	l1932
  3377  051D                     l1888:	
  3378                           
  3379                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  3380  051D  01A7               	clrf	sprintf@flag
  3381                           
  3382                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  3383  051E  3001               	movlw	1
  3384  051F  07A0               	addwf	sprintf@f,f
  3385  0520  30FF               	movlw	-1
  3386  0521  0720               	addwf	sprintf@f,w
  3387  0522  0084               	movwf	4
  3388  0523  120A  118A  200D  120A  118A  	fcall	stringdir
  3389  0528  00AC               	movwf	sprintf@c
  3390  0529  00A3               	movwf	??_sprintf
  3391  052A  01A4               	clrf	??_sprintf+1
  3392                           
  3393                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3394                           ; Switch size 1, requested type "simple"
  3395                           ; Number of cases is 1, Range of values is 0 to 0
  3396                           ; switch strategies available:
  3397                           ; Name         Instructions Cycles
  3398                           ; simple_byte            4     3 (average)
  3399                           ; direct_byte           11     8 (fixed)
  3400                           ; jumptable            260     6 (fixed)
  3401                           ;	Chosen strategy is simple_byte
  3402  052B  0824               	movf	??_sprintf+1,w
  3403  052C  3A00               	xorlw	0	; case 0
  3404  052D  1903               	skipnz
  3405  052E  2D30               	goto	l2278
  3406  052F  2CFD               	goto	l1932
  3407  0530                     l2278:	
  3408                           
  3409                           ; Switch size 1, requested type "simple"
  3410                           ; Number of cases is 3, Range of values is 0 to 105
  3411                           ; switch strategies available:
  3412                           ; Name         Instructions Cycles
  3413                           ; simple_byte           10     6 (average)
  3414                           ; jumptable            260     6 (fixed)
  3415                           ;	Chosen strategy is simple_byte
  3416  0530  0823               	movf	??_sprintf,w
  3417  0531  3A00               	xorlw	0	; case 0
  3418  0532  1903               	skipnz
  3419  0533  2DC9               	goto	l1934
  3420  0534  3A64               	xorlw	100	; case 100
  3421  0535  1903               	skipnz
  3422  0536  2D3B               	goto	l1894
  3423  0537  3A0D               	xorlw	13	; case 105
  3424  0538  1903               	skipnz
  3425  0539  2D3B               	goto	l1894
  3426  053A  2CFD               	goto	l1932
  3427  053B                     l1894:	
  3428                           
  3429                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3430  053B  0826               	movf	sprintf@ap,w
  3431  053C  0084               	movwf	4
  3432  053D  1383               	bcf	3,7	;select IRP bank0
  3433  053E  0800               	movf	0,w
  3434  053F  00A9               	movwf	sprintf@val
  3435  0540  0A84               	incf	4,f
  3436  0541  0800               	movf	0,w
  3437  0542  00AA               	movwf	sprintf@val+1
  3438  0543  3002               	movlw	2
  3439  0544  00A3               	movwf	??_sprintf
  3440  0545  0823               	movf	??_sprintf,w
  3441  0546  07A6               	addwf	sprintf@ap,f
  3442                           
  3443                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  3444  0547  1FAA               	btfss	sprintf@val+1,7
  3445  0548  2D52               	goto	l1904
  3446                           
  3447                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  3448  0549  3003               	movlw	3
  3449  054A  00A3               	movwf	??_sprintf
  3450  054B  0823               	movf	??_sprintf,w
  3451  054C  04A7               	iorwf	sprintf@flag,f
  3452                           
  3453                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  3454  054D  09A9               	comf	sprintf@val,f
  3455  054E  09AA               	comf	sprintf@val+1,f
  3456  054F  0AA9               	incf	sprintf@val,f
  3457  0550  1903               	skipnz
  3458  0551  0AAA               	incf	sprintf@val+1,f
  3459  0552                     l1904:	
  3460                           
  3461                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3462  0552  01AC               	clrf	sprintf@c
  3463  0553  0AAC               	incf	sprintf@c,f
  3464  0554                     l1910:	
  3465                           
  3466                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  3467  0554  082C               	movf	sprintf@c,w
  3468  0555  00A3               	movwf	??_sprintf
  3469  0556  0723               	addwf	??_sprintf,w
  3470  0557  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3471  0558  0084               	movwf	4
  3472  0559  120A  118A  200D  120A  118A  	fcall	stringdir
  3473  055E  00A4               	movwf	??_sprintf+1
  3474  055F  120A  118A  200D  120A  118A  	fcall	stringdir
  3475  0564  00A5               	movwf	??_sprintf+2
  3476  0565  0825               	movf	??_sprintf+2,w
  3477  0566  022A               	subwf	sprintf@val+1,w
  3478  0567  1D03               	skipz
  3479  0568  2D6B               	goto	u1375
  3480  0569  0824               	movf	??_sprintf+1,w
  3481  056A  0229               	subwf	sprintf@val,w
  3482  056B                     u1375:	
  3483  056B  1C03               	btfss	3,0
  3484  056C  2D75               	goto	l1916
  3485  056D  3001               	movlw	1
  3486  056E  00A3               	movwf	??_sprintf
  3487  056F  0823               	movf	??_sprintf,w
  3488  0570  07AC               	addwf	sprintf@c,f
  3489  0571  3005               	movlw	5
  3490  0572  062C               	xorwf	sprintf@c,w
  3491  0573  1D03               	btfss	3,2
  3492  0574  2D54               	goto	l1910
  3493  0575                     l1916:	
  3494                           
  3495                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  3496  0575  0827               	movf	sprintf@flag,w
  3497  0576  3903               	andlw	3
  3498  0577  1903               	btfsc	3,2
  3499  0578  2D84               	goto	l1922
  3500                           
  3501                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  3502  0579  302D               	movlw	45
  3503  057A  00A3               	movwf	??_sprintf
  3504  057B  082B               	movf	sprintf@sp,w
  3505  057C  0084               	movwf	4
  3506  057D  0823               	movf	??_sprintf,w
  3507  057E  1383               	bcf	3,7	;select IRP bank0
  3508  057F  0080               	movwf	0
  3509  0580  3001               	movlw	1
  3510  0581  00A3               	movwf	??_sprintf
  3511  0582  0823               	movf	??_sprintf,w
  3512  0583  07AB               	addwf	sprintf@sp,f
  3513  0584                     l1922:	
  3514                           
  3515                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  3516  0584  082C               	movf	sprintf@c,w
  3517  0585  00A3               	movwf	??_sprintf
  3518  0586  0823               	movf	??_sprintf,w
  3519  0587  00A8               	movwf	sprintf@prec
  3520  0588                     l1930:	
  3521                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  3522                           
  3523                           
  3524                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  3525  0588  30FF               	movlw	255
  3526  0589  00A3               	movwf	??_sprintf
  3527  058A  0823               	movf	??_sprintf,w
  3528  058B  07A8               	addwf	sprintf@prec,f
  3529  058C  0A28               	incf	sprintf@prec,w
  3530  058D  1903               	btfsc	3,2
  3531  058E  2CFD               	goto	l1932
  3532                           
  3533                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  3534  058F  300A               	movlw	10
  3535  0590  00F8               	movwf	___lwmod@divisor
  3536  0591  3000               	movlw	0
  3537  0592  00F9               	movwf	___lwmod@divisor+1
  3538  0593  0828               	movf	sprintf@prec,w
  3539  0594  00A3               	movwf	??_sprintf
  3540  0595  0723               	addwf	??_sprintf,w
  3541  0596  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3542  0597  0084               	movwf	4
  3543  0598  120A  118A  200D  120A  118A  	fcall	stringdir
  3544  059D  00F0               	movwf	___lwdiv@divisor
  3545  059E  120A  118A  200D  120A  118A  	fcall	stringdir
  3546  05A3  00F1               	movwf	___lwdiv@divisor+1
  3547  05A4  082A               	movf	sprintf@val+1,w
  3548  05A5  00F3               	movwf	___lwdiv@dividend+1
  3549  05A6  0829               	movf	sprintf@val,w
  3550  05A7  00F2               	movwf	___lwdiv@dividend
  3551  05A8  120A  118A  209C  120A  118A  	fcall	___lwdiv
  3552  05AD  0871               	movf	?___lwdiv+1,w
  3553  05AE  00FB               	movwf	___lwmod@dividend+1
  3554  05AF  0870               	movf	?___lwdiv,w
  3555  05B0  00FA               	movwf	___lwmod@dividend
  3556  05B1  120A  158A  275A  120A  118A  	fcall	___lwmod
  3557  05B6  0878               	movf	?___lwmod,w
  3558  05B7  3E30               	addlw	48
  3559  05B8  1283               	bcf	3,5	;RP0=0, select bank0
  3560  05B9  1303               	bcf	3,6	;RP1=0, select bank0
  3561  05BA  00A4               	movwf	??_sprintf+1
  3562  05BB  0824               	movf	??_sprintf+1,w
  3563  05BC  00AC               	movwf	sprintf@c
  3564                           
  3565                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  3566  05BD  082C               	movf	sprintf@c,w
  3567  05BE  00A3               	movwf	??_sprintf
  3568  05BF  082B               	movf	sprintf@sp,w
  3569  05C0  0084               	movwf	4
  3570  05C1  0823               	movf	??_sprintf,w
  3571  05C2  1383               	bcf	3,7	;select IRP bank0
  3572  05C3  0080               	movwf	0
  3573  05C4  3001               	movlw	1
  3574  05C5  00A3               	movwf	??_sprintf
  3575  05C6  0823               	movf	??_sprintf,w
  3576  05C7  07AB               	addwf	sprintf@sp,f
  3577  05C8  2D88               	goto	l1930
  3578  05C9                     l1934:	
  3579                           
  3580                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  3581  05C9  082B               	movf	sprintf@sp,w
  3582  05CA  0084               	movwf	4
  3583  05CB  1383               	bcf	3,7	;select IRP bank0
  3584  05CC  0180               	clrf	0
  3585  05CD  0008               	return
  3586  05CE                     __end_of_sprintf:	
  3587                           
  3588                           	psect	text14
  3589  0F5A                     __ptext14:	
  3590 ;; *************** function ___lwmod *****************
  3591 ;; Defined at:
  3592 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;  divisor         2    8[COMMON] unsigned int 
  3595 ;;  dividend        2   10[COMMON] unsigned int 
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;  counter         1   13[COMMON] unsigned char 
  3598 ;; Return value:  Size  Location     Type
  3599 ;;                  2    8[COMMON] unsigned int 
  3600 ;; Registers used:
  3601 ;;		wreg, status,2, status,0
  3602 ;; Tracked objects:
  3603 ;;		On entry : 0/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3607 ;;      Params:         4       0       0       0       0
  3608 ;;      Locals:         1       0       0       0       0
  3609 ;;      Temps:          1       0       0       0       0
  3610 ;;      Totals:         6       0       0       0       0
  3611 ;;Total ram usage:        6 bytes
  3612 ;; Hardware stack levels used:    1
  3613 ;; This function calls:
  3614 ;;		Nothing
  3615 ;; This function is called by:
  3616 ;;		_sprintf
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           
  3621                           ;psect for function ___lwmod
  3622  0F5A                     ___lwmod:	
  3623                           
  3624                           ;incstack = 0
  3625                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3626  0F5A  0878               	movf	___lwmod@divisor,w
  3627  0F5B  0479               	iorwf	___lwmod@divisor+1,w
  3628  0F5C  1903               	btfsc	3,2
  3629  0F5D  2F87               	goto	l1748
  3630  0F5E  01FD               	clrf	___lwmod@counter
  3631  0F5F  0AFD               	incf	___lwmod@counter,f
  3632  0F60                     l1738:	
  3633  0F60  1BF9               	btfsc	___lwmod@divisor+1,7
  3634  0F61  2F6E               	goto	l1740
  3635  0F62  3001               	movlw	1
  3636  0F63                     u1195:	
  3637  0F63  1003               	clrc
  3638  0F64  0DF8               	rlf	___lwmod@divisor,f
  3639  0F65  0DF9               	rlf	___lwmod@divisor+1,f
  3640  0F66  3EFF               	addlw	-1
  3641  0F67  1D03               	skipz
  3642  0F68  2F63               	goto	u1195
  3643  0F69  3001               	movlw	1
  3644  0F6A  00FC               	movwf	??___lwmod
  3645  0F6B  087C               	movf	??___lwmod,w
  3646  0F6C  07FD               	addwf	___lwmod@counter,f
  3647  0F6D  2F60               	goto	l1738
  3648  0F6E                     l1740:	
  3649  0F6E  0879               	movf	___lwmod@divisor+1,w
  3650  0F6F  027B               	subwf	___lwmod@dividend+1,w
  3651  0F70  1D03               	skipz
  3652  0F71  2F74               	goto	u1215
  3653  0F72  0878               	movf	___lwmod@divisor,w
  3654  0F73  027A               	subwf	___lwmod@dividend,w
  3655  0F74                     u1215:	
  3656  0F74  1C03               	skipc
  3657  0F75  2F7C               	goto	l1744
  3658  0F76  0878               	movf	___lwmod@divisor,w
  3659  0F77  02FA               	subwf	___lwmod@dividend,f
  3660  0F78  0879               	movf	___lwmod@divisor+1,w
  3661  0F79  1C03               	skipc
  3662  0F7A  03FB               	decf	___lwmod@dividend+1,f
  3663  0F7B  02FB               	subwf	___lwmod@dividend+1,f
  3664  0F7C                     l1744:	
  3665  0F7C  3001               	movlw	1
  3666  0F7D                     u1225:	
  3667  0F7D  1003               	clrc
  3668  0F7E  0CF9               	rrf	___lwmod@divisor+1,f
  3669  0F7F  0CF8               	rrf	___lwmod@divisor,f
  3670  0F80  3EFF               	addlw	-1
  3671  0F81  1D03               	skipz
  3672  0F82  2F7D               	goto	u1225
  3673  0F83  3001               	movlw	1
  3674  0F84  02FD               	subwf	___lwmod@counter,f
  3675  0F85  1D03               	btfss	3,2
  3676  0F86  2F6E               	goto	l1740
  3677  0F87                     l1748:	
  3678  0F87  087B               	movf	___lwmod@dividend+1,w
  3679  0F88  00F9               	movwf	?___lwmod+1
  3680  0F89  087A               	movf	___lwmod@dividend,w
  3681  0F8A  00F8               	movwf	?___lwmod
  3682  0F8B  0008               	return
  3683  0F8C                     __end_of___lwmod:	
  3684                           
  3685                           	psect	text15
  3686  009C                     __ptext15:	
  3687 ;; *************** function ___lwdiv *****************
  3688 ;; Defined at:
  3689 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  3690 ;; Parameters:    Size  Location     Type
  3691 ;;  divisor         2    0[COMMON] unsigned int 
  3692 ;;  dividend        2    2[COMMON] unsigned int 
  3693 ;; Auto vars:     Size  Location     Type
  3694 ;;  quotient        2    5[COMMON] unsigned int 
  3695 ;;  counter         1    7[COMMON] unsigned char 
  3696 ;; Return value:  Size  Location     Type
  3697 ;;                  2    0[COMMON] unsigned int 
  3698 ;; Registers used:
  3699 ;;		wreg, status,2, status,0
  3700 ;; Tracked objects:
  3701 ;;		On entry : 0/0
  3702 ;;		On exit  : 0/0
  3703 ;;		Unchanged: 0/0
  3704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3705 ;;      Params:         4       0       0       0       0
  3706 ;;      Locals:         3       0       0       0       0
  3707 ;;      Temps:          1       0       0       0       0
  3708 ;;      Totals:         8       0       0       0       0
  3709 ;;Total ram usage:        8 bytes
  3710 ;; Hardware stack levels used:    1
  3711 ;; This function calls:
  3712 ;;		Nothing
  3713 ;; This function is called by:
  3714 ;;		_sprintf
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           
  3719                           ;psect for function ___lwdiv
  3720  009C                     ___lwdiv:	
  3721                           
  3722                           ;incstack = 0
  3723                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3724  009C  01F5               	clrf	___lwdiv@quotient
  3725  009D  01F6               	clrf	___lwdiv@quotient+1
  3726  009E  0870               	movf	___lwdiv@divisor,w
  3727  009F  0471               	iorwf	___lwdiv@divisor+1,w
  3728  00A0  1903               	btfsc	3,2
  3729  00A1  28D3               	goto	l1726
  3730  00A2  01F7               	clrf	___lwdiv@counter
  3731  00A3  0AF7               	incf	___lwdiv@counter,f
  3732  00A4                     l1714:	
  3733  00A4  1BF1               	btfsc	___lwdiv@divisor+1,7
  3734  00A5  28B2               	goto	l1716
  3735  00A6  3001               	movlw	1
  3736  00A7                     u1125:	
  3737  00A7  1003               	clrc
  3738  00A8  0DF0               	rlf	___lwdiv@divisor,f
  3739  00A9  0DF1               	rlf	___lwdiv@divisor+1,f
  3740  00AA  3EFF               	addlw	-1
  3741  00AB  1D03               	skipz
  3742  00AC  28A7               	goto	u1125
  3743  00AD  3001               	movlw	1
  3744  00AE  00F4               	movwf	??___lwdiv
  3745  00AF  0874               	movf	??___lwdiv,w
  3746  00B0  07F7               	addwf	___lwdiv@counter,f
  3747  00B1  28A4               	goto	l1714
  3748  00B2                     l1716:	
  3749  00B2  3001               	movlw	1
  3750  00B3                     u1145:	
  3751  00B3  1003               	clrc
  3752  00B4  0DF5               	rlf	___lwdiv@quotient,f
  3753  00B5  0DF6               	rlf	___lwdiv@quotient+1,f
  3754  00B6  3EFF               	addlw	-1
  3755  00B7  1D03               	skipz
  3756  00B8  28B3               	goto	u1145
  3757  00B9  0871               	movf	___lwdiv@divisor+1,w
  3758  00BA  0273               	subwf	___lwdiv@dividend+1,w
  3759  00BB  1D03               	skipz
  3760  00BC  28BF               	goto	u1155
  3761  00BD  0870               	movf	___lwdiv@divisor,w
  3762  00BE  0272               	subwf	___lwdiv@dividend,w
  3763  00BF                     u1155:	
  3764  00BF  1C03               	skipc
  3765  00C0  28C8               	goto	l1722
  3766  00C1  0870               	movf	___lwdiv@divisor,w
  3767  00C2  02F2               	subwf	___lwdiv@dividend,f
  3768  00C3  0871               	movf	___lwdiv@divisor+1,w
  3769  00C4  1C03               	skipc
  3770  00C5  03F3               	decf	___lwdiv@dividend+1,f
  3771  00C6  02F3               	subwf	___lwdiv@dividend+1,f
  3772  00C7  1475               	bsf	___lwdiv@quotient,0
  3773  00C8                     l1722:	
  3774  00C8  3001               	movlw	1
  3775  00C9                     u1165:	
  3776  00C9  1003               	clrc
  3777  00CA  0CF1               	rrf	___lwdiv@divisor+1,f
  3778  00CB  0CF0               	rrf	___lwdiv@divisor,f
  3779  00CC  3EFF               	addlw	-1
  3780  00CD  1D03               	skipz
  3781  00CE  28C9               	goto	u1165
  3782  00CF  3001               	movlw	1
  3783  00D0  02F7               	subwf	___lwdiv@counter,f
  3784  00D1  1D03               	btfss	3,2
  3785  00D2  28B2               	goto	l1716
  3786  00D3                     l1726:	
  3787  00D3  0876               	movf	___lwdiv@quotient+1,w
  3788  00D4  00F1               	movwf	?___lwdiv+1
  3789  00D5  0875               	movf	___lwdiv@quotient,w
  3790  00D6  00F0               	movwf	?___lwdiv
  3791  00D7  0008               	return
  3792  00D8                     __end_of___lwdiv:	
  3793                           
  3794                           	psect	text16
  3795  0E1F                     __ptext16:	
  3796 ;; *************** function ___bmul *****************
  3797 ;; Defined at:
  3798 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;  multiplier      1    wreg     unsigned char 
  3801 ;;  multiplicand    1    0[COMMON] unsigned char 
  3802 ;; Auto vars:     Size  Location     Type
  3803 ;;  multiplier      1    3[COMMON] unsigned char 
  3804 ;;  product         1    2[COMMON] unsigned char 
  3805 ;; Return value:  Size  Location     Type
  3806 ;;                  1    wreg      unsigned char 
  3807 ;; Registers used:
  3808 ;;		wreg, status,2, status,0
  3809 ;; Tracked objects:
  3810 ;;		On entry : 0/0
  3811 ;;		On exit  : 0/0
  3812 ;;		Unchanged: 0/0
  3813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3814 ;;      Params:         1       0       0       0       0
  3815 ;;      Locals:         2       0       0       0       0
  3816 ;;      Temps:          1       0       0       0       0
  3817 ;;      Totals:         4       0       0       0       0
  3818 ;;Total ram usage:        4 bytes
  3819 ;; Hardware stack levels used:    1
  3820 ;; This function calls:
  3821 ;;		Nothing
  3822 ;; This function is called by:
  3823 ;;		_get_temp
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           
  3828                           ;psect for function ___bmul
  3829  0E1F                     ___bmul:	
  3830                           
  3831                           ;incstack = 0
  3832                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3833                           ;___bmul@multiplier stored from wreg
  3834  0E1F  00F3               	movwf	___bmul@multiplier
  3835  0E20  01F2               	clrf	___bmul@product
  3836  0E21                     l1954:	
  3837  0E21  1C73               	btfss	___bmul@multiplier,0
  3838  0E22  2E27               	goto	l1958
  3839  0E23  0870               	movf	___bmul@multiplicand,w
  3840  0E24  00F1               	movwf	??___bmul
  3841  0E25  0871               	movf	??___bmul,w
  3842  0E26  07F2               	addwf	___bmul@product,f
  3843  0E27                     l1958:	
  3844  0E27  1003               	clrc
  3845  0E28  0DF0               	rlf	___bmul@multiplicand,f
  3846  0E29  1003               	clrc
  3847  0E2A  0CF3               	rrf	___bmul@multiplier,f
  3848  0E2B  0873               	movf	___bmul@multiplier,w
  3849  0E2C  1D03               	btfss	3,2
  3850  0E2D  2E21               	goto	l1954
  3851  0E2E  0872               	movf	___bmul@product,w
  3852  0E2F  0008               	return
  3853  0E30                     __end_of___bmul:	
  3854                           
  3855                           	psect	text17
  3856  0DEA                     __ptext17:	
  3857 ;; *************** function _I2C_Master_RepeatedStart *****************
  3858 ;; Defined at:
  3859 ;;		line 47 in file "./I2C.h"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;		None
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;		None
  3864 ;; Return value:  Size  Location     Type
  3865 ;;                  1    wreg      void 
  3866 ;; Registers used:
  3867 ;;		wreg, status,2, status,0, pclath, cstack
  3868 ;; Tracked objects:
  3869 ;;		On entry : 0/0
  3870 ;;		On exit  : 0/0
  3871 ;;		Unchanged: 0/0
  3872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3873 ;;      Params:         0       0       0       0       0
  3874 ;;      Locals:         0       0       0       0       0
  3875 ;;      Temps:          0       0       0       0       0
  3876 ;;      Totals:         0       0       0       0       0
  3877 ;;Total ram usage:        0 bytes
  3878 ;; Hardware stack levels used:    1
  3879 ;; Hardware stack levels required when called:    1
  3880 ;; This function calls:
  3881 ;;		_I2C_Master_Wait
  3882 ;; This function is called by:
  3883 ;;		_get_time
  3884 ;;		_get_temp
  3885 ;;		_get_day
  3886 ;; This function uses a non-reentrant model
  3887 ;;
  3888                           
  3889                           
  3890                           ;psect for function _I2C_Master_RepeatedStart
  3891  0DEA                     _I2C_Master_RepeatedStart:	
  3892                           
  3893                           ;./I2C.h: 49:     I2C_Master_Wait();
  3894                           
  3895                           ;incstack = 0
  3896                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  3897  0DEA  120A  158A  2601   	fcall	_I2C_Master_Wait
  3898                           
  3899                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  3900  0DED  1683               	bsf	3,5	;RP0=1, select bank1
  3901  0DEE  1303               	bcf	3,6	;RP1=0, select bank1
  3902  0DEF  1491               	bsf	17,1	;volatile
  3903  0DF0  0008               	return
  3904  0DF1                     __end_of_I2C_Master_RepeatedStart:	
  3905                           
  3906                           	psect	text18
  3907  0EA2                     __ptext18:	
  3908 ;; *************** function _get_hall *****************
  3909 ;; Defined at:
  3910 ;;		line 254 in file "mainMaster.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;		None
  3913 ;; Auto vars:     Size  Location     Type
  3914 ;;  key             1    7[COMMON] unsigned char 
  3915 ;; Return value:  Size  Location     Type
  3916 ;;                  1    wreg      unsigned char 
  3917 ;; Registers used:
  3918 ;;		wreg, status,2, status,0, pclath, cstack
  3919 ;; Tracked objects:
  3920 ;;		On entry : 0/0
  3921 ;;		On exit  : 0/0
  3922 ;;		Unchanged: 0/0
  3923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3924 ;;      Params:         0       0       0       0       0
  3925 ;;      Locals:         1       0       0       0       0
  3926 ;;      Temps:          1       0       0       0       0
  3927 ;;      Totals:         2       0       0       0       0
  3928 ;;Total ram usage:        2 bytes
  3929 ;; Hardware stack levels used:    1
  3930 ;; Hardware stack levels required when called:    2
  3931 ;; This function calls:
  3932 ;;		_I2C_Master_Read
  3933 ;;		_I2C_Master_Start
  3934 ;;		_I2C_Master_Stop
  3935 ;;		_I2C_Master_Write
  3936 ;; This function is called by:
  3937 ;;		_main
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           
  3942                           ;psect for function _get_hall
  3943  0EA2                     _get_hall:	
  3944                           
  3945                           ;mainMaster.c: 256:     char key;;mainMaster.c: 258:     I2C_Master_Start();
  3946                           
  3947                           ;incstack = 0
  3948                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  3949  0EA2  120A  158A  25DC  120A  158A  	fcall	_I2C_Master_Start
  3950                           
  3951                           ;mainMaster.c: 259:     I2C_Master_Write(0x11);
  3952  0EA7  3011               	movlw	17
  3953  0EA8  00F0               	movwf	I2C_Master_Write@d
  3954  0EA9  3000               	movlw	0
  3955  0EAA  00F1               	movwf	I2C_Master_Write@d+1
  3956  0EAB  120A  158A  25F1  120A  158A  	fcall	_I2C_Master_Write
  3957                           
  3958                           ;mainMaster.c: 260:     key = I2C_Master_Read(0);
  3959  0EB0  3000               	movlw	0
  3960  0EB1  00F0               	movwf	I2C_Master_Read@a
  3961  0EB2  00F1               	movwf	I2C_Master_Read@a+1
  3962  0EB3  120A  158A  272E  120A  158A  	fcall	_I2C_Master_Read
  3963  0EB8  0870               	movf	?_I2C_Master_Read,w
  3964  0EB9  00F6               	movwf	??_get_hall
  3965  0EBA  0876               	movf	??_get_hall,w
  3966  0EBB  00F7               	movwf	get_hall@key
  3967                           
  3968                           ;mainMaster.c: 261:     I2C_Master_Stop();
  3969  0EBC  120A  158A  25E3   	fcall	_I2C_Master_Stop
  3970                           
  3971                           ;mainMaster.c: 263:     return (key);
  3972  0EBF  0877               	movf	get_hall@key,w
  3973  0EC0  0008               	return
  3974  0EC1                     __end_of_get_hall:	
  3975                           
  3976                           	psect	text19
  3977  0E83                     __ptext19:	
  3978 ;; *************** function _get_PIR *****************
  3979 ;; Defined at:
  3980 ;;		line 278 in file "mainMaster.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;		None
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  PIR             1    7[COMMON] unsigned char 
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      unsigned char 
  3987 ;; Registers used:
  3988 ;;		wreg, status,2, status,0, pclath, cstack
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3994 ;;      Params:         0       0       0       0       0
  3995 ;;      Locals:         1       0       0       0       0
  3996 ;;      Temps:          1       0       0       0       0
  3997 ;;      Totals:         2       0       0       0       0
  3998 ;;Total ram usage:        2 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    2
  4001 ;; This function calls:
  4002 ;;		_I2C_Master_Read
  4003 ;;		_I2C_Master_Start
  4004 ;;		_I2C_Master_Stop
  4005 ;;		_I2C_Master_Write
  4006 ;; This function is called by:
  4007 ;;		_main
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           
  4012                           ;psect for function _get_PIR
  4013  0E83                     _get_PIR:	
  4014                           
  4015                           ;mainMaster.c: 280:     char PIR;;mainMaster.c: 282:     I2C_Master_Start();
  4016                           
  4017                           ;incstack = 0
  4018                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  4019  0E83  120A  158A  25DC  120A  158A  	fcall	_I2C_Master_Start
  4020                           
  4021                           ;mainMaster.c: 283:     I2C_Master_Write(0x41);
  4022  0E88  3041               	movlw	65
  4023  0E89  00F0               	movwf	I2C_Master_Write@d
  4024  0E8A  3000               	movlw	0
  4025  0E8B  00F1               	movwf	I2C_Master_Write@d+1
  4026  0E8C  120A  158A  25F1  120A  158A  	fcall	_I2C_Master_Write
  4027                           
  4028                           ;mainMaster.c: 284:     PIR = I2C_Master_Read(0);
  4029  0E91  3000               	movlw	0
  4030  0E92  00F0               	movwf	I2C_Master_Read@a
  4031  0E93  00F1               	movwf	I2C_Master_Read@a+1
  4032  0E94  120A  158A  272E  120A  158A  	fcall	_I2C_Master_Read
  4033  0E99  0870               	movf	?_I2C_Master_Read,w
  4034  0E9A  00F6               	movwf	??_get_PIR
  4035  0E9B  0876               	movf	??_get_PIR,w
  4036  0E9C  00F7               	movwf	get_PIR@PIR
  4037                           
  4038                           ;mainMaster.c: 285:     I2C_Master_Stop();
  4039  0E9D  120A  158A  25E3   	fcall	_I2C_Master_Stop
  4040                           
  4041                           ;mainMaster.c: 287:     return (PIR);
  4042  0EA0  0877               	movf	get_PIR@PIR,w
  4043  0EA1  0008               	return
  4044  0EA2                     __end_of_get_PIR:	
  4045                           
  4046                           	psect	text20
  4047  0E64                     __ptext20:	
  4048 ;; *************** function _get_IR *****************
  4049 ;; Defined at:
  4050 ;;		line 290 in file "mainMaster.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;		None
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;  IR              1    7[COMMON] unsigned char 
  4055 ;; Return value:  Size  Location     Type
  4056 ;;                  1    wreg      unsigned char 
  4057 ;; Registers used:
  4058 ;;		wreg, status,2, status,0, pclath, cstack
  4059 ;; Tracked objects:
  4060 ;;		On entry : 0/0
  4061 ;;		On exit  : 0/0
  4062 ;;		Unchanged: 0/0
  4063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4064 ;;      Params:         0       0       0       0       0
  4065 ;;      Locals:         1       0       0       0       0
  4066 ;;      Temps:          1       0       0       0       0
  4067 ;;      Totals:         2       0       0       0       0
  4068 ;;Total ram usage:        2 bytes
  4069 ;; Hardware stack levels used:    1
  4070 ;; Hardware stack levels required when called:    2
  4071 ;; This function calls:
  4072 ;;		_I2C_Master_Read
  4073 ;;		_I2C_Master_Start
  4074 ;;		_I2C_Master_Stop
  4075 ;;		_I2C_Master_Write
  4076 ;; This function is called by:
  4077 ;;		_main
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           
  4082                           ;psect for function _get_IR
  4083  0E64                     _get_IR:	
  4084                           
  4085                           ;mainMaster.c: 292:     char IR;;mainMaster.c: 294:     I2C_Master_Start();
  4086                           
  4087                           ;incstack = 0
  4088                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  4089  0E64  120A  158A  25DC  120A  158A  	fcall	_I2C_Master_Start
  4090                           
  4091                           ;mainMaster.c: 295:     I2C_Master_Write(0x31);
  4092  0E69  3031               	movlw	49
  4093  0E6A  00F0               	movwf	I2C_Master_Write@d
  4094  0E6B  3000               	movlw	0
  4095  0E6C  00F1               	movwf	I2C_Master_Write@d+1
  4096  0E6D  120A  158A  25F1  120A  158A  	fcall	_I2C_Master_Write
  4097                           
  4098                           ;mainMaster.c: 296:     IR = I2C_Master_Read(0);
  4099  0E72  3000               	movlw	0
  4100  0E73  00F0               	movwf	I2C_Master_Read@a
  4101  0E74  00F1               	movwf	I2C_Master_Read@a+1
  4102  0E75  120A  158A  272E  120A  158A  	fcall	_I2C_Master_Read
  4103  0E7A  0870               	movf	?_I2C_Master_Read,w
  4104  0E7B  00F6               	movwf	??_get_IR
  4105  0E7C  0876               	movf	??_get_IR,w
  4106  0E7D  00F7               	movwf	get_IR@IR
  4107                           
  4108                           ;mainMaster.c: 297:     I2C_Master_Stop();
  4109  0E7E  120A  158A  25E3   	fcall	_I2C_Master_Stop
  4110                           
  4111                           ;mainMaster.c: 299:     return (IR);
  4112  0E81  0877               	movf	get_IR@IR,w
  4113  0E82  0008               	return
  4114  0E83                     __end_of_get_IR:	
  4115                           
  4116                           	psect	text21
  4117  0DF1                     __ptext21:	
  4118 ;; *************** function _I2C_Master_Write *****************
  4119 ;; Defined at:
  4120 ;;		line 65 in file "./I2C.h"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;  d               2    0[COMMON] unsigned int 
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;		None
  4125 ;; Return value:  Size  Location     Type
  4126 ;;                  1    wreg      void 
  4127 ;; Registers used:
  4128 ;;		wreg, status,2, status,0, pclath, cstack
  4129 ;; Tracked objects:
  4130 ;;		On entry : 0/0
  4131 ;;		On exit  : 0/0
  4132 ;;		Unchanged: 0/0
  4133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4134 ;;      Params:         2       0       0       0       0
  4135 ;;      Locals:         0       0       0       0       0
  4136 ;;      Temps:          0       0       0       0       0
  4137 ;;      Totals:         2       0       0       0       0
  4138 ;;Total ram usage:        2 bytes
  4139 ;; Hardware stack levels used:    1
  4140 ;; Hardware stack levels required when called:    1
  4141 ;; This function calls:
  4142 ;;		_I2C_Master_Wait
  4143 ;; This function is called by:
  4144 ;;		_get_time
  4145 ;;		_get_temp
  4146 ;;		_get_hall
  4147 ;;		_get_tripwire
  4148 ;;		_get_PIR
  4149 ;;		_get_IR
  4150 ;;		_write_RTC
  4151 ;;		_get_day
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           
  4156                           ;psect for function _I2C_Master_Write
  4157  0DF1                     _I2C_Master_Write:	
  4158                           
  4159                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  4160                           
  4161                           ;incstack = 0
  4162                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  4163  0DF1  120A  158A  2601   	fcall	_I2C_Master_Wait
  4164                           
  4165                           ;./I2C.h: 68:     SSPBUF = d;
  4166  0DF4  0870               	movf	I2C_Master_Write@d,w
  4167  0DF5  1283               	bcf	3,5	;RP0=0, select bank0
  4168  0DF6  1303               	bcf	3,6	;RP1=0, select bank0
  4169  0DF7  0093               	movwf	19	;volatile
  4170  0DF8  0008               	return
  4171  0DF9                     __end_of_I2C_Master_Write:	
  4172                           
  4173                           	psect	text22
  4174  0DE3                     __ptext22:	
  4175 ;; *************** function _I2C_Master_Stop *****************
  4176 ;; Defined at:
  4177 ;;		line 55 in file "./I2C.h"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;		None
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;		None
  4182 ;; Return value:  Size  Location     Type
  4183 ;;                  1    wreg      void 
  4184 ;; Registers used:
  4185 ;;		wreg, status,2, status,0, pclath, cstack
  4186 ;; Tracked objects:
  4187 ;;		On entry : 0/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4191 ;;      Params:         0       0       0       0       0
  4192 ;;      Locals:         0       0       0       0       0
  4193 ;;      Temps:          0       0       0       0       0
  4194 ;;      Totals:         0       0       0       0       0
  4195 ;;Total ram usage:        0 bytes
  4196 ;; Hardware stack levels used:    1
  4197 ;; Hardware stack levels required when called:    1
  4198 ;; This function calls:
  4199 ;;		_I2C_Master_Wait
  4200 ;; This function is called by:
  4201 ;;		_get_time
  4202 ;;		_get_temp
  4203 ;;		_get_hall
  4204 ;;		_get_tripwire
  4205 ;;		_get_PIR
  4206 ;;		_get_IR
  4207 ;;		_write_RTC
  4208 ;;		_get_day
  4209 ;; This function uses a non-reentrant model
  4210 ;;
  4211                           
  4212                           
  4213                           ;psect for function _I2C_Master_Stop
  4214  0DE3                     _I2C_Master_Stop:	
  4215                           
  4216                           ;./I2C.h: 57:     I2C_Master_Wait();
  4217                           
  4218                           ;incstack = 0
  4219                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  4220  0DE3  120A  158A  2601   	fcall	_I2C_Master_Wait
  4221                           
  4222                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  4223  0DE6  1683               	bsf	3,5	;RP0=1, select bank1
  4224  0DE7  1303               	bcf	3,6	;RP1=0, select bank1
  4225  0DE8  1511               	bsf	17,2	;volatile
  4226  0DE9  0008               	return
  4227  0DEA                     __end_of_I2C_Master_Stop:	
  4228                           
  4229                           	psect	text23
  4230  0DDC                     __ptext23:	
  4231 ;; *************** function _I2C_Master_Start *****************
  4232 ;; Defined at:
  4233 ;;		line 39 in file "./I2C.h"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;		None
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;		None
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  1    wreg      void 
  4240 ;; Registers used:
  4241 ;;		wreg, status,2, status,0, pclath, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4247 ;;      Params:         0       0       0       0       0
  4248 ;;      Locals:         0       0       0       0       0
  4249 ;;      Temps:          0       0       0       0       0
  4250 ;;      Totals:         0       0       0       0       0
  4251 ;;Total ram usage:        0 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    1
  4254 ;; This function calls:
  4255 ;;		_I2C_Master_Wait
  4256 ;; This function is called by:
  4257 ;;		_get_time
  4258 ;;		_get_temp
  4259 ;;		_get_hall
  4260 ;;		_get_tripwire
  4261 ;;		_get_PIR
  4262 ;;		_get_IR
  4263 ;;		_write_RTC
  4264 ;;		_get_day
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           
  4269                           ;psect for function _I2C_Master_Start
  4270  0DDC                     _I2C_Master_Start:	
  4271                           
  4272                           ;./I2C.h: 41:     I2C_Master_Wait();
  4273                           
  4274                           ;incstack = 0
  4275                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  4276  0DDC  120A  158A  2601   	fcall	_I2C_Master_Wait
  4277                           
  4278                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  4279  0DDF  1683               	bsf	3,5	;RP0=1, select bank1
  4280  0DE0  1303               	bcf	3,6	;RP1=0, select bank1
  4281  0DE1  1411               	bsf	17,0	;volatile
  4282  0DE2  0008               	return
  4283  0DE3                     __end_of_I2C_Master_Start:	
  4284                           
  4285                           	psect	text24
  4286  0F2E                     __ptext24:	
  4287 ;; *************** function _I2C_Master_Read *****************
  4288 ;; Defined at:
  4289 ;;		line 74 in file "./I2C.h"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;  a               2    0[COMMON] unsigned short 
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;  temp            2    4[COMMON] unsigned short 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  2    0[COMMON] unsigned short 
  4296 ;; Registers used:
  4297 ;;		wreg, status,2, status,0, pclath, cstack
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4303 ;;      Params:         2       0       0       0       0
  4304 ;;      Locals:         2       0       0       0       0
  4305 ;;      Temps:          2       0       0       0       0
  4306 ;;      Totals:         6       0       0       0       0
  4307 ;;Total ram usage:        6 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    1
  4310 ;; This function calls:
  4311 ;;		_I2C_Master_Wait
  4312 ;; This function is called by:
  4313 ;;		_get_time
  4314 ;;		_get_temp
  4315 ;;		_get_hall
  4316 ;;		_get_tripwire
  4317 ;;		_get_PIR
  4318 ;;		_get_IR
  4319 ;;		_get_day
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           
  4324                           ;psect for function _I2C_Master_Read
  4325  0F2E                     _I2C_Master_Read:	
  4326                           
  4327                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  4328                           
  4329                           ;incstack = 0
  4330                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  4331  0F2E  120A  158A  2601  120A  158A  	fcall	_I2C_Master_Wait
  4332                           
  4333                           ;./I2C.h: 78:     RCEN = 1;
  4334  0F33  1683               	bsf	3,5	;RP0=1, select bank1
  4335  0F34  1303               	bcf	3,6	;RP1=0, select bank1
  4336  0F35  1591               	bsf	17,3	;volatile
  4337                           
  4338                           ;./I2C.h: 79:     I2C_Master_Wait();
  4339  0F36  120A  158A  2601  120A  158A  	fcall	_I2C_Master_Wait
  4340                           
  4341                           ;./I2C.h: 80:     temp = SSPBUF;
  4342  0F3B  1283               	bcf	3,5	;RP0=0, select bank0
  4343  0F3C  1303               	bcf	3,6	;RP1=0, select bank0
  4344  0F3D  0813               	movf	19,w	;volatile
  4345  0F3E  00F2               	movwf	??_I2C_Master_Read
  4346  0F3F  01F3               	clrf	??_I2C_Master_Read+1
  4347  0F40  0872               	movf	??_I2C_Master_Read,w
  4348  0F41  00F4               	movwf	I2C_Master_Read@temp
  4349  0F42  0873               	movf	??_I2C_Master_Read+1,w
  4350  0F43  00F5               	movwf	I2C_Master_Read@temp+1
  4351                           
  4352                           ;./I2C.h: 81:     I2C_Master_Wait();
  4353  0F44  120A  158A  2601  120A  158A  	fcall	_I2C_Master_Wait
  4354                           
  4355                           ;./I2C.h: 83:     if(a == 1){
  4356  0F49  0370               	decf	I2C_Master_Read@a,w
  4357  0F4A  0471               	iorwf	I2C_Master_Read@a+1,w
  4358  0F4B  1D03               	btfss	3,2
  4359  0F4C  2F51               	goto	l120
  4360                           
  4361                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  4362  0F4D  1683               	bsf	3,5	;RP0=1, select bank1
  4363  0F4E  1303               	bcf	3,6	;RP1=0, select bank1
  4364  0F4F  1291               	bcf	17,5	;volatile
  4365                           
  4366                           ;./I2C.h: 85:     }else{
  4367  0F50  2F54               	goto	l121
  4368  0F51                     l120:	
  4369                           
  4370                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  4371  0F51  1683               	bsf	3,5	;RP0=1, select bank1
  4372  0F52  1303               	bcf	3,6	;RP1=0, select bank1
  4373  0F53  1691               	bsf	17,5	;volatile
  4374  0F54                     l121:	
  4375                           ;./I2C.h: 87:     }
  4376                           
  4377                           
  4378                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  4379  0F54  1611               	bsf	17,4	;volatile
  4380                           
  4381                           ;./I2C.h: 89:     return temp;
  4382  0F55  0875               	movf	I2C_Master_Read@temp+1,w
  4383  0F56  00F1               	movwf	?_I2C_Master_Read+1
  4384  0F57  0874               	movf	I2C_Master_Read@temp,w
  4385  0F58  00F0               	movwf	?_I2C_Master_Read
  4386  0F59  0008               	return
  4387  0F5A                     __end_of_I2C_Master_Read:	
  4388                           
  4389                           	psect	text25
  4390  0E01                     __ptext25:	
  4391 ;; *************** function _I2C_Master_Wait *****************
  4392 ;; Defined at:
  4393 ;;		line 32 in file "./I2C.h"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;		None
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;		None
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  1    wreg      void 
  4400 ;; Registers used:
  4401 ;;		wreg, status,2
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4407 ;;      Params:         0       0       0       0       0
  4408 ;;      Locals:         0       0       0       0       0
  4409 ;;      Temps:          0       0       0       0       0
  4410 ;;      Totals:         0       0       0       0       0
  4411 ;;Total ram usage:        0 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; This function calls:
  4414 ;;		Nothing
  4415 ;; This function is called by:
  4416 ;;		_I2C_Master_Start
  4417 ;;		_I2C_Master_RepeatedStart
  4418 ;;		_I2C_Master_Stop
  4419 ;;		_I2C_Master_Write
  4420 ;;		_I2C_Master_Read
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           
  4425                           ;psect for function _I2C_Master_Wait
  4426  0E01                     _I2C_Master_Wait:	
  4427  0E01                     l102:	
  4428                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  4429                           
  4430                           ;incstack = 0
  4431                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  4432                           
  4433  0E01  1683               	bsf	3,5	;RP0=1, select bank1
  4434  0E02  1303               	bcf	3,6	;RP1=0, select bank1
  4435  0E03  1914               	btfsc	20,2	;volatile
  4436  0E04  2E01               	goto	l102
  4437  0E05  0811               	movf	17,w	;volatile
  4438  0E06  391F               	andlw	31
  4439  0E07  1903               	btfsc	3,2
  4440  0E08  0008               	return
  4441  0E09  2E01               	goto	l102
  4442  0E0A                     __end_of_I2C_Master_Wait:	
  4443                           
  4444                           	psect	text26
  4445  0E0A                     __ptext26:	
  4446 ;; *************** function _UART_Write *****************
  4447 ;; Defined at:
  4448 ;;		line 54 in file "./UART.h"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;  data            1    wreg     unsigned char 
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;  data            1    0[COMMON] unsigned char 
  4453 ;; Return value:  Size  Location     Type
  4454 ;;                  1    wreg      void 
  4455 ;; Registers used:
  4456 ;;		wreg
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4462 ;;      Params:         0       0       0       0       0
  4463 ;;      Locals:         1       0       0       0       0
  4464 ;;      Temps:          0       0       0       0       0
  4465 ;;      Totals:         1       0       0       0       0
  4466 ;;Total ram usage:        1 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; This function calls:
  4469 ;;		Nothing
  4470 ;; This function is called by:
  4471 ;;		_main
  4472 ;;		_UART_Write_Text
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           
  4477                           ;psect for function _UART_Write
  4478  0E0A                     _UART_Write:	
  4479                           
  4480                           ;incstack = 0
  4481                           ; Regs used in _UART_Write: [wreg]
  4482                           ;UART_Write@data stored from wreg
  4483  0E0A  00F0               	movwf	UART_Write@data
  4484  0E0B                     l206:	
  4485                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(!TRMT);
  4486                           
  4487  0E0B  1683               	bsf	3,5	;RP0=1, select bank1
  4488  0E0C  1303               	bcf	3,6	;RP1=0, select bank1
  4489  0E0D  1C98               	btfss	24,1	;volatile
  4490  0E0E  2E0B               	goto	l206
  4491                           
  4492                           ;./UART.h: 57:   TXREG = data;
  4493  0E0F  0870               	movf	UART_Write@data,w
  4494  0E10  1283               	bcf	3,5	;RP0=0, select bank0
  4495  0E11  1303               	bcf	3,6	;RP1=0, select bank0
  4496  0E12  0099               	movwf	25	;volatile
  4497  0E13  0008               	return
  4498  0E14                     __end_of_UART_Write:	
  4499                           
  4500                           	psect	text27
  4501  0DD6                     __ptext27:	
  4502 ;; *************** function _UART_TX_Empty *****************
  4503 ;; Defined at:
  4504 ;;		line 31 in file "./UART.h"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;		None
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;		None
  4509 ;; Return value:  Size  Location     Type
  4510 ;;                  1    wreg      unsigned char 
  4511 ;; Registers used:
  4512 ;;		wreg
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4518 ;;      Params:         0       0       0       0       0
  4519 ;;      Locals:         0       0       0       0       0
  4520 ;;      Temps:          0       0       0       0       0
  4521 ;;      Totals:         0       0       0       0       0
  4522 ;;Total ram usage:        0 bytes
  4523 ;; Hardware stack levels used:    1
  4524 ;; This function calls:
  4525 ;;		Nothing
  4526 ;; This function is called by:
  4527 ;;		_main
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           
  4532                           ;psect for function _UART_TX_Empty
  4533  0DD6                     _UART_TX_Empty:	
  4534                           
  4535                           ;./UART.h: 33:   return TRMT;
  4536                           
  4537                           ;incstack = 0
  4538                           ; Regs used in _UART_TX_Empty: [wreg]
  4539  0DD6  3000               	movlw	0
  4540  0DD7  1683               	bsf	3,5	;RP0=1, select bank1
  4541  0DD8  1303               	bcf	3,6	;RP1=0, select bank1
  4542  0DD9  1898               	btfsc	24,1	;volatile
  4543  0DDA  3001               	movlw	1
  4544  0DDB  0008               	return
  4545  0DDC                     __end_of_UART_TX_Empty:	
  4546                           
  4547                           	psect	text28
  4548  00D8                     __ptext28:	
  4549 ;; *************** function _Lcd_Write_String *****************
  4550 ;; Defined at:
  4551 ;;		line 100 in file "./LCD4bits.h"
  4552 ;; Parameters:    Size  Location     Type
  4553 ;;  a               2    5[COMMON] PTR unsigned char 
  4554 ;;		 -> STR_9(7), STR_8(7), STR_7(8), STR_6(8), 
  4555 ;;		 -> STR_5(9), STR_4(9), STR_3(12), STR_2(12), 
  4556 ;;		 -> time(6), temp(6), 
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;  i               2   10[COMMON] int 
  4559 ;; Return value:  Size  Location     Type
  4560 ;;                  1    wreg      void 
  4561 ;; Registers used:
  4562 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4568 ;;      Params:         2       0       0       0       0
  4569 ;;      Locals:         2       0       0       0       0
  4570 ;;      Temps:          3       0       0       0       0
  4571 ;;      Totals:         7       0       0       0       0
  4572 ;;Total ram usage:        7 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; Hardware stack levels required when called:    2
  4575 ;; This function calls:
  4576 ;;		_Lcd_Write_Char
  4577 ;; This function is called by:
  4578 ;;		_main
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           
  4583                           ;psect for function _Lcd_Write_String
  4584  00D8                     _Lcd_Write_String:	
  4585                           
  4586                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  4587                           
  4588                           ;incstack = 0
  4589                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4590  00D8  01FA               	clrf	Lcd_Write_String@i
  4591  00D9  01FB               	clrf	Lcd_Write_String@i+1
  4592  00DA                     l1994:	
  4593  00DA  087A               	movf	Lcd_Write_String@i,w
  4594  00DB  0775               	addwf	Lcd_Write_String@a,w
  4595  00DC  00F8               	movwf	??_Lcd_Write_String+1
  4596  00DD  0876               	movf	Lcd_Write_String@a+1,w
  4597  00DE  00F7               	movwf	??_Lcd_Write_String
  4598  00DF  1803               	skipnc
  4599  00E0  0AF7               	incf	??_Lcd_Write_String,f
  4600  00E1  1BFA               	btfsc	Lcd_Write_String@i,7
  4601  00E2  03F7               	decf	??_Lcd_Write_String,f
  4602  00E3  0877               	movf	??_Lcd_Write_String,w
  4603  00E4  00F9               	movwf	??_Lcd_Write_String+2
  4604  00E5  0879               	movf	??_Lcd_Write_String+2,w
  4605  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  4606  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  4607  00E8  00FF               	movwf	127
  4608  00E9  0878               	movf	??_Lcd_Write_String+1,w
  4609  00EA  0084               	movwf	4
  4610  00EB  120A  118A  2003  120A  118A  	fcall	stringtab
  4611  00F0  3A00               	xorlw	0
  4612  00F1  1903               	btfsc	3,2
  4613  00F2  0008               	return
  4614                           
  4615                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  4616  00F3  087A               	movf	Lcd_Write_String@i,w
  4617  00F4  0775               	addwf	Lcd_Write_String@a,w
  4618  00F5  00F8               	movwf	??_Lcd_Write_String+1
  4619  00F6  0876               	movf	Lcd_Write_String@a+1,w
  4620  00F7  00F7               	movwf	??_Lcd_Write_String
  4621  00F8  1803               	skipnc
  4622  00F9  0AF7               	incf	??_Lcd_Write_String,f
  4623  00FA  1BFA               	btfsc	Lcd_Write_String@i,7
  4624  00FB  03F7               	decf	??_Lcd_Write_String,f
  4625  00FC  0877               	movf	??_Lcd_Write_String,w
  4626  00FD  00F9               	movwf	??_Lcd_Write_String+2
  4627  00FE  0879               	movf	??_Lcd_Write_String+2,w
  4628  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  4629  0100  1303               	bcf	3,6	;RP1=0, select bank0
  4630  0101  00FF               	movwf	127
  4631  0102  0878               	movf	??_Lcd_Write_String+1,w
  4632  0103  0084               	movwf	4
  4633  0104  120A  118A  2003  120A  118A  	fcall	stringtab
  4634  0109  120A  158A  278C  120A  118A  	fcall	_Lcd_Write_Char
  4635  010E  3001               	movlw	1
  4636  010F  07FA               	addwf	Lcd_Write_String@i,f
  4637  0110  1803               	skipnc
  4638  0111  0AFB               	incf	Lcd_Write_String@i+1,f
  4639  0112  3000               	movlw	0
  4640  0113  07FB               	addwf	Lcd_Write_String@i+1,f
  4641  0114  28DA               	goto	l1994
  4642  0115                     __end_of_Lcd_Write_String:	
  4643                           
  4644                           	psect	text29
  4645  0F8C                     __ptext29:	
  4646 ;; *************** function _Lcd_Write_Char *****************
  4647 ;; Defined at:
  4648 ;;		line 84 in file "./LCD4bits.h"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;  a               1    wreg     unsigned char 
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;  a               1    4[COMMON] unsigned char 
  4653 ;;  y               1    3[COMMON] unsigned char 
  4654 ;;  temp            1    2[COMMON] unsigned char 
  4655 ;; Return value:  Size  Location     Type
  4656 ;;                  1    wreg      void 
  4657 ;; Registers used:
  4658 ;;		wreg, status,2, status,0, pclath, cstack
  4659 ;; Tracked objects:
  4660 ;;		On entry : 0/0
  4661 ;;		On exit  : 0/0
  4662 ;;		Unchanged: 0/0
  4663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4664 ;;      Params:         0       0       0       0       0
  4665 ;;      Locals:         3       0       0       0       0
  4666 ;;      Temps:          1       0       0       0       0
  4667 ;;      Totals:         4       0       0       0       0
  4668 ;;Total ram usage:        4 bytes
  4669 ;; Hardware stack levels used:    1
  4670 ;; Hardware stack levels required when called:    1
  4671 ;; This function calls:
  4672 ;;		_Lcd_Port
  4673 ;; This function is called by:
  4674 ;;		_Lcd_Write_String
  4675 ;;		_main
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           
  4680                           ;psect for function _Lcd_Write_Char
  4681  0F8C                     _Lcd_Write_Char:	
  4682                           
  4683                           ;incstack = 0
  4684                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  4685                           ;Lcd_Write_Char@a stored from wreg
  4686  0F8C  00F4               	movwf	Lcd_Write_Char@a
  4687                           
  4688                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  4689  0F8D  0874               	movf	Lcd_Write_Char@a,w
  4690  0F8E  390F               	andlw	15
  4691  0F8F  00F1               	movwf	??_Lcd_Write_Char
  4692  0F90  0871               	movf	??_Lcd_Write_Char,w
  4693  0F91  00F2               	movwf	Lcd_Write_Char@temp
  4694                           
  4695                           ;./LCD4bits.h: 88:    y = a&0xF0;
  4696  0F92  0874               	movf	Lcd_Write_Char@a,w
  4697  0F93  39F0               	andlw	240
  4698  0F94  00F1               	movwf	??_Lcd_Write_Char
  4699  0F95  0871               	movf	??_Lcd_Write_Char,w
  4700  0F96  00F3               	movwf	Lcd_Write_Char@y
  4701                           
  4702                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  4703  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  4704  0F98  1303               	bcf	3,6	;RP1=0, select bank0
  4705  0F99  1606               	bsf	6,4	;volatile
  4706                           
  4707                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  4708  0F9A  0873               	movf	Lcd_Write_Char@y,w
  4709  0F9B  00F1               	movwf	??_Lcd_Write_Char
  4710  0F9C  3004               	movlw	4
  4711  0F9D                     u1265:	
  4712  0F9D  1003               	clrc
  4713  0F9E  0CF1               	rrf	??_Lcd_Write_Char,f
  4714  0F9F  3EFF               	addlw	-1
  4715  0FA0  1D03               	skipz
  4716  0FA1  2F9D               	goto	u1265
  4717  0FA2  0871               	movf	??_Lcd_Write_Char,w
  4718  0FA3  120A  158A  2630  120A  158A  	fcall	_Lcd_Port
  4719                           
  4720                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  4721  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  4722  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  4723  0FAA  1686               	bsf	6,5	;volatile
  4724                           
  4725                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  4726  0FAB  301A               	movlw	26
  4727  0FAC  00F1               	movwf	??_Lcd_Write_Char
  4728  0FAD                     u1907:	
  4729  0FAD  0BF1               	decfsz	??_Lcd_Write_Char,f
  4730  0FAE  2FAD               	goto	u1907
  4731  0FAF  0000               	nop
  4732                           
  4733                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  4734  0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  4735  0FB1  1303               	bcf	3,6	;RP1=0, select bank0
  4736  0FB2  1286               	bcf	6,5	;volatile
  4737                           
  4738                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  4739  0FB3  0872               	movf	Lcd_Write_Char@temp,w
  4740  0FB4  120A  158A  2630  120A  158A  	fcall	_Lcd_Port
  4741                           
  4742                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  4743  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  4744  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  4745  0FBB  1686               	bsf	6,5	;volatile
  4746                           
  4747                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  4748  0FBC  301A               	movlw	26
  4749  0FBD  00F1               	movwf	??_Lcd_Write_Char
  4750  0FBE                     u1917:	
  4751  0FBE  0BF1               	decfsz	??_Lcd_Write_Char,f
  4752  0FBF  2FBE               	goto	u1917
  4753  0FC0  0000               	nop
  4754                           
  4755                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  4756  0FC1  1283               	bcf	3,5	;RP0=0, select bank0
  4757  0FC2  1303               	bcf	3,6	;RP1=0, select bank0
  4758  0FC3  1286               	bcf	6,5	;volatile
  4759  0FC4  0008               	return
  4760  0FC5                     __end_of_Lcd_Write_Char:	
  4761                           
  4762                           	psect	text30
  4763  0115                     __ptext30:	
  4764 ;; *************** function _Lcd_Set_Cursor *****************
  4765 ;; Defined at:
  4766 ;;		line 44 in file "./LCD4bits.h"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  a               1    wreg     unsigned char 
  4769 ;;  b               1    4[COMMON] unsigned char 
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;  a               1    7[COMMON] unsigned char 
  4772 ;;  temp            1   10[COMMON] unsigned char 
  4773 ;;  y               1    9[COMMON] unsigned char 
  4774 ;;  z               1    8[COMMON] unsigned char 
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      void 
  4777 ;; Registers used:
  4778 ;;		wreg, status,2, status,0, pclath, cstack
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4784 ;;      Params:         1       0       0       0       0
  4785 ;;      Locals:         4       0       0       0       0
  4786 ;;      Temps:          2       0       0       0       0
  4787 ;;      Totals:         7       0       0       0       0
  4788 ;;Total ram usage:        7 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; Hardware stack levels required when called:    2
  4791 ;; This function calls:
  4792 ;;		_Lcd_Cmd
  4793 ;; This function is called by:
  4794 ;;		_main
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           
  4799                           ;psect for function _Lcd_Set_Cursor
  4800  0115                     _Lcd_Set_Cursor:	
  4801                           
  4802                           ;incstack = 0
  4803                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  4804                           ;Lcd_Set_Cursor@a stored from wreg
  4805  0115  00F7               	movwf	Lcd_Set_Cursor@a
  4806                           
  4807                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  4808  0116  0377               	decf	Lcd_Set_Cursor@a,w
  4809  0117  1D03               	btfss	3,2
  4810  0118  293A               	goto	l1978
  4811                           
  4812                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  4813  0119  0874               	movf	Lcd_Set_Cursor@b,w
  4814  011A  3E7F               	addlw	127
  4815  011B  00F5               	movwf	??_Lcd_Set_Cursor
  4816  011C  0875               	movf	??_Lcd_Set_Cursor,w
  4817  011D  00FA               	movwf	Lcd_Set_Cursor@temp
  4818                           
  4819                           ;./LCD4bits.h: 50:   z = temp>>4;
  4820  011E  087A               	movf	Lcd_Set_Cursor@temp,w
  4821  011F  00F5               	movwf	??_Lcd_Set_Cursor
  4822  0120  3004               	movlw	4
  4823  0121                     u1475:	
  4824  0121  1003               	clrc
  4825  0122  0CF5               	rrf	??_Lcd_Set_Cursor,f
  4826  0123  3EFF               	addlw	-1
  4827  0124  1D03               	skipz
  4828  0125  2921               	goto	u1475
  4829  0126  0875               	movf	??_Lcd_Set_Cursor,w
  4830  0127  00F6               	movwf	??_Lcd_Set_Cursor+1
  4831  0128  0876               	movf	??_Lcd_Set_Cursor+1,w
  4832  0129  00F8               	movwf	Lcd_Set_Cursor@z
  4833                           
  4834                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  4835  012A  087A               	movf	Lcd_Set_Cursor@temp,w
  4836  012B  390F               	andlw	15
  4837  012C  00F5               	movwf	??_Lcd_Set_Cursor
  4838  012D  0875               	movf	??_Lcd_Set_Cursor,w
  4839  012E  00F9               	movwf	Lcd_Set_Cursor@y
  4840                           
  4841                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  4842  012F  0878               	movf	Lcd_Set_Cursor@z,w
  4843  0130  120A  158A  264A  120A  118A  	fcall	_Lcd_Cmd
  4844                           
  4845                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  4846  0135  0879               	movf	Lcd_Set_Cursor@y,w
  4847  0136  120A  158A  264A   	fcall	_Lcd_Cmd
  4848                           
  4849                           ;./LCD4bits.h: 54:  }
  4850  0139  0008               	return
  4851  013A                     l1978:	
  4852  013A  3002               	movlw	2
  4853  013B  0677               	xorwf	Lcd_Set_Cursor@a,w
  4854  013C  1D03               	btfss	3,2
  4855  013D  0008               	return
  4856                           
  4857                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  4858  013E  0874               	movf	Lcd_Set_Cursor@b,w
  4859  013F  3EBF               	addlw	191
  4860  0140  00F5               	movwf	??_Lcd_Set_Cursor
  4861  0141  0875               	movf	??_Lcd_Set_Cursor,w
  4862  0142  00FA               	movwf	Lcd_Set_Cursor@temp
  4863                           
  4864                           ;./LCD4bits.h: 58:   z = temp>>4;
  4865  0143  087A               	movf	Lcd_Set_Cursor@temp,w
  4866  0144  00F5               	movwf	??_Lcd_Set_Cursor
  4867  0145  3004               	movlw	4
  4868  0146                     u1495:	
  4869  0146  1003               	clrc
  4870  0147  0CF5               	rrf	??_Lcd_Set_Cursor,f
  4871  0148  3EFF               	addlw	-1
  4872  0149  1D03               	skipz
  4873  014A  2946               	goto	u1495
  4874  014B  0875               	movf	??_Lcd_Set_Cursor,w
  4875  014C  00F6               	movwf	??_Lcd_Set_Cursor+1
  4876  014D  0876               	movf	??_Lcd_Set_Cursor+1,w
  4877  014E  00F8               	movwf	Lcd_Set_Cursor@z
  4878                           
  4879                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  4880  014F  087A               	movf	Lcd_Set_Cursor@temp,w
  4881  0150  390F               	andlw	15
  4882  0151  00F5               	movwf	??_Lcd_Set_Cursor
  4883  0152  0875               	movf	??_Lcd_Set_Cursor,w
  4884  0153  00F9               	movwf	Lcd_Set_Cursor@y
  4885                           
  4886                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  4887  0154  0878               	movf	Lcd_Set_Cursor@z,w
  4888  0155  120A  158A  264A  120A  118A  	fcall	_Lcd_Cmd
  4889                           
  4890                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  4891  015A  0879               	movf	Lcd_Set_Cursor@y,w
  4892  015B  120A  158A  264A   	fcall	_Lcd_Cmd
  4893  015E  0008               	return
  4894  015F                     __end_of_Lcd_Set_Cursor:	
  4895                           
  4896                           	psect	text31
  4897  0E14                     __ptext31:	
  4898 ;; *************** function _Lcd_Clear *****************
  4899 ;; Defined at:
  4900 ;;		line 38 in file "./LCD4bits.h"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;		None
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;		None
  4905 ;; Return value:  Size  Location     Type
  4906 ;;                  1    wreg      void 
  4907 ;; Registers used:
  4908 ;;		wreg, status,2, status,0, pclath, cstack
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4914 ;;      Params:         0       0       0       0       0
  4915 ;;      Locals:         0       0       0       0       0
  4916 ;;      Temps:          0       0       0       0       0
  4917 ;;      Totals:         0       0       0       0       0
  4918 ;;Total ram usage:        0 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:    2
  4921 ;; This function calls:
  4922 ;;		_Lcd_Cmd
  4923 ;; This function is called by:
  4924 ;;		_main
  4925 ;; This function uses a non-reentrant model
  4926 ;;
  4927                           
  4928                           
  4929                           ;psect for function _Lcd_Clear
  4930  0E14                     _Lcd_Clear:	
  4931                           
  4932                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  4933                           
  4934                           ;incstack = 0
  4935                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  4936  0E14  3000               	movlw	0
  4937  0E15  120A  158A  264A  120A  158A  	fcall	_Lcd_Cmd
  4938                           
  4939                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  4940  0E1A  3001               	movlw	1
  4941  0E1B  120A  158A  264A   	fcall	_Lcd_Cmd
  4942  0E1E  0008               	return
  4943  0E1F                     __end_of_Lcd_Clear:	
  4944                           
  4945                           	psect	text32
  4946  0E4A                     __ptext32:	
  4947 ;; *************** function _Lcd_Cmd *****************
  4948 ;; Defined at:
  4949 ;;		line 29 in file "./LCD4bits.h"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;  a               1    wreg     unsigned char 
  4952 ;; Auto vars:     Size  Location     Type
  4953 ;;  a               1    3[COMMON] unsigned char 
  4954 ;; Return value:  Size  Location     Type
  4955 ;;                  1    wreg      void 
  4956 ;; Registers used:
  4957 ;;		wreg, status,2, status,0, pclath, cstack
  4958 ;; Tracked objects:
  4959 ;;		On entry : 0/0
  4960 ;;		On exit  : 0/0
  4961 ;;		Unchanged: 0/0
  4962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4963 ;;      Params:         0       0       0       0       0
  4964 ;;      Locals:         1       0       0       0       0
  4965 ;;      Temps:          2       0       0       0       0
  4966 ;;      Totals:         3       0       0       0       0
  4967 ;;Total ram usage:        3 bytes
  4968 ;; Hardware stack levels used:    1
  4969 ;; Hardware stack levels required when called:    1
  4970 ;; This function calls:
  4971 ;;		_Lcd_Port
  4972 ;; This function is called by:
  4973 ;;		_Lcd_Clear
  4974 ;;		_Lcd_Set_Cursor
  4975 ;;		_Lcd_Init
  4976 ;;		_Lcd_Shift_Right
  4977 ;;		_Lcd_Shift_Left
  4978 ;; This function uses a non-reentrant model
  4979 ;;
  4980                           
  4981                           
  4982                           ;psect for function _Lcd_Cmd
  4983  0E4A                     _Lcd_Cmd:	
  4984                           
  4985                           ;incstack = 0
  4986                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4987                           ;Lcd_Cmd@a stored from wreg
  4988  0E4A  00F3               	movwf	Lcd_Cmd@a
  4989                           
  4990                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  4991  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  4992  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  4993  0E4D  1206               	bcf	6,4	;volatile
  4994                           
  4995                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  4996  0E4E  0873               	movf	Lcd_Cmd@a,w
  4997  0E4F  120A  158A  2630  120A  158A  	fcall	_Lcd_Port
  4998                           
  4999                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  5000  0E54  1283               	bcf	3,5	;RP0=0, select bank0
  5001  0E55  1303               	bcf	3,6	;RP1=0, select bank0
  5002  0E56  1686               	bsf	6,5	;volatile
  5003                           
  5004                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  5005  0E57  300B               	movlw	11
  5006  0E58  00F2               	movwf	??_Lcd_Cmd+1
  5007  0E59  3062               	movlw	98
  5008  0E5A  00F1               	movwf	??_Lcd_Cmd
  5009  0E5B                     u1927:	
  5010  0E5B  0BF1               	decfsz	??_Lcd_Cmd,f
  5011  0E5C  2E5B               	goto	u1927
  5012  0E5D  0BF2               	decfsz	??_Lcd_Cmd+1,f
  5013  0E5E  2E5B               	goto	u1927
  5014  0E5F  0000               	nop
  5015                           
  5016                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  5017  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  5018  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  5019  0E62  1286               	bcf	6,5	;volatile
  5020  0E63  0008               	return
  5021  0E64                     __end_of_Lcd_Cmd:	
  5022                           
  5023                           	psect	text33
  5024  0E30                     __ptext33:	
  5025 ;; *************** function _Lcd_Port *****************
  5026 ;; Defined at:
  5027 ;;		line 7 in file "./LCD4bits.h"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;  a               1    wreg     unsigned char 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;  a               1    0[COMMON] unsigned char 
  5032 ;; Return value:  Size  Location     Type
  5033 ;;                  1    wreg      void 
  5034 ;; Registers used:
  5035 ;;		wreg
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5041 ;;      Params:         0       0       0       0       0
  5042 ;;      Locals:         1       0       0       0       0
  5043 ;;      Temps:          0       0       0       0       0
  5044 ;;      Totals:         1       0       0       0       0
  5045 ;;Total ram usage:        1 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; This function calls:
  5048 ;;		Nothing
  5049 ;; This function is called by:
  5050 ;;		_Lcd_Cmd
  5051 ;;		_Lcd_Init
  5052 ;;		_Lcd_Write_Char
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           
  5057                           ;psect for function _Lcd_Port
  5058  0E30                     _Lcd_Port:	
  5059                           
  5060                           ;incstack = 0
  5061                           ; Regs used in _Lcd_Port: [wreg]
  5062                           ;Lcd_Port@a stored from wreg
  5063  0E30  00F0               	movwf	Lcd_Port@a
  5064                           
  5065                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  5066  0E31  1C70               	btfss	Lcd_Port@a,0
  5067  0E32  2E37               	goto	l128
  5068                           
  5069                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  5070  0E33  1283               	bcf	3,5	;RP0=0, select bank0
  5071  0E34  1303               	bcf	3,6	;RP1=0, select bank0
  5072  0E35  1406               	bsf	6,0	;volatile
  5073  0E36  2E3A               	goto	l129
  5074  0E37                     l128:	
  5075                           ;./LCD4bits.h: 11:  else
  5076                           
  5077                           
  5078                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  5079  0E37  1283               	bcf	3,5	;RP0=0, select bank0
  5080  0E38  1303               	bcf	3,6	;RP1=0, select bank0
  5081  0E39  1006               	bcf	6,0	;volatile
  5082  0E3A                     l129:	
  5083                           
  5084                           ;./LCD4bits.h: 14:  if(a & 2)
  5085  0E3A  1CF0               	btfss	Lcd_Port@a,1
  5086  0E3B  2E3E               	goto	l130
  5087                           
  5088                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  5089  0E3C  1486               	bsf	6,1	;volatile
  5090  0E3D  2E3F               	goto	l131
  5091  0E3E                     l130:	
  5092                           ;./LCD4bits.h: 16:  else
  5093                           
  5094                           
  5095                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  5096  0E3E  1086               	bcf	6,1	;volatile
  5097  0E3F                     l131:	
  5098                           
  5099                           ;./LCD4bits.h: 19:  if(a & 4)
  5100  0E3F  1D70               	btfss	Lcd_Port@a,2
  5101  0E40  2E43               	goto	l132
  5102                           
  5103                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  5104  0E41  1506               	bsf	6,2	;volatile
  5105  0E42  2E44               	goto	l133
  5106  0E43                     l132:	
  5107                           ;./LCD4bits.h: 21:  else
  5108                           
  5109                           
  5110                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  5111  0E43  1106               	bcf	6,2	;volatile
  5112  0E44                     l133:	
  5113                           
  5114                           ;./LCD4bits.h: 24:  if(a & 8)
  5115  0E44  1DF0               	btfss	Lcd_Port@a,3
  5116  0E45  2E48               	goto	l134
  5117                           
  5118                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  5119  0E46  1586               	bsf	6,3	;volatile
  5120  0E47  0008               	return
  5121  0E48                     l134:	
  5122                           ;./LCD4bits.h: 26:  else
  5123                           
  5124                           
  5125                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  5126  0E48  1186               	bcf	6,3	;volatile
  5127  0E49  0008               	return
  5128  0E4A                     __end_of_Lcd_Port:	
  5129  007E                     btemp	set	126	;btemp
  5130  007E                     wtemp0	set	126


Data Sizes:
    Strings     73
    Constant    10
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     24      42
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_12(CODE[4]), STR_11(CODE[5]), STR_10(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), temp(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_temp@temp_string	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_time@time_string	PTR unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 12
		 -> STR_9(CODE[7]), STR_8(CODE[7]), STR_7(CODE[8]), STR_6(CODE[8]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), STR_3(CODE[12]), STR_2(CODE[12]), 
		 -> time(BANK0[6]), temp(BANK0[6]), 


Critical Paths under _main in COMMON

    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_UART_Init
    _UART_Init->___aldiv
    _get_temp->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   19473
                                             22 BANK0      2     2      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                      _UART_TX_Empty
                         _UART_Write
                             _get_IR
                            _get_PIR
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                              _setup
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     200
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1468
                    _I2C_Master_Init
                           _Lcd_Init
                          _UART_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     412
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                             5     5      0    2450
                                              6 COMMON     5     5      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             9     9      0    4309
                                             13 BANK0      9     9      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1429
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     168
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1466
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     729
                                              0 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Empty                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1028
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     836
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_TX_Empty
   _UART_Write
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
     _initOscilador
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      38       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     18      2A       5       52.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      38      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 04 23:07:53 2019

                                pc 0002                     ___bmul@product 0072  
                      __CFG_CP$OFF 0000                        get_hall@key 0077  
                               _IR 003A                                 fsr 0004  
                              l102 0E01                                l120 0F51  
                              l121 0F54                                l130 0E3E  
                              l131 0E3F                                l132 0E43  
                              l133 0E44                                l134 0E48  
                              l206 0E0B                                l128 0E37  
                              l129 0E3A                                l242 0746  
                              l171 01B2                                l238 0734  
                              l239 0737                                l468 0300  
                              _GIE 005F                       __CFG_CPD$OFF 0000  
                              _PIR 003B                                u955 0223  
                              u975 0231                                u985 0246  
                              u995 0258                      ?_get_tripwire 0070  
                              fsr0 0004                                indf 0000  
                     __CFG_LVP$OFF 0000                               l2040 03FD  
                             l2210 07AE                               l2202 078E  
                             l2220 07CB                               l2212 07B8  
                             l2116 05DB                               l2090 0F13  
                             l2170 0719                               l1700 0374  
                             l2092 0F06                               l2228 07EB  
                             l2094 0F28                               l2182 074A  
                             l1722 00C8                               l1714 00A4  
                             l2194 077C                               l1716 00B2  
                             l1740 0F6E                               l1660 0264  
                             l2276 0198                               l1726 00D3  
                             l1910 0554                               l2278 0530  
                             l1646 021F                               l1830 0166  
                             l1744 0F7C                               l1904 0552  
                             l1656 0257                               l1648 022F  
                             l1840 0184                               l1832 016C  
                             l1738 0F60                               l1930 0588  
                             l1922 0584                               l1682 0321  
                             l1674 0311                               l1842 018B  
                             l1834 0172                               l1748 0F87  
                             l1916 0575                               l1932 04FD  
                             l1692 0359                               l1684 0331  
                             l1844 018B                               l1836 0178  
                             l1828 0161                               l1934 05C9  
                             l1950 0EF8                               l1862 04DC  
                             l1838 017E                               l1696 0366  
                             l1848 0190                               l1954 0E21  
                             l1946 0EE5                               l1948 0EF0  
                             l1958 0E27                               l1894 053B  
                             l1888 051D                               l1978 013A  
                             l1994 00DA                               STR_1 0057  
                             STR_2 001D                        get_time@min 0079  
                             STR_3 0029                               STR_4 0035  
                             STR_5 003E                               STR_6 0047  
                             STR_7 004F                               STR_8 0048  
                             STR_9 0050                               _BRGH 04C2  
                             _CREN 00C4                               u1125 00A7  
                             u1045 0325                               u1215 0F74  
                             u1145 00B3                               u1225 0F7D  
                             u1065 0333                               u1155 00BF  
                             u1075 0348                               u1331 04BB  
                             u1315 048B                               u1332 04BC  
                             u1165 00C9                               u1245 0078  
                             u1085 035A                               u1333 04C1  
                             u1325 04A4                               u1334 04C2  
                             u1335 04C7                               u1336 04C8  
                             u1265 0F9D                               u1195 0F63  
                             u1291 045B                               u1275 042B  
                             u1292 045C                               u1293 0461  
                             u1285 0444                               u1294 0462  
                             u1375 056B                               u1295 0467  
                             u1296 0468                               u1545 03D5  
                             u1625 072E                               u1475 0121  
                             u1565 02B4                               u1495 0146  
                             u1575 02D3                               u1807 06A3  
                             u1817 06B5                               u1737 0625  
                             u1907 0FAD                               u1827 06C7  
                             u1747 0637                               u1917 0FBE  
                             u1837 06D9                               u1757 0649  
                             u1927 0E5B                               u1847 06EB  
                             u1767 065B                               u1857 06FD  
                             u1777 066D                               u1867 070F  
                             u1787 067F                               _PEIE 005E  
                             u1877 01BE                               u1797 0691  
                             u1887 01CD                               u1897 01DC  
                             _RCEN 048B                               _RCIF 0065  
                             _SPEN 00C7                               _TRMT 04C1  
                             _TXEN 04C5                               _SYNC 04C4  
                     __CFG_WRT$OFF 0000                  ?_Lcd_Write_String 0075  
 __end_of_I2C_Master_RepeatedStart 0DF1                               _door 003D  
                             _main 05CE                               _sent 0038  
                             _temp 003E                               _time 0044  
                             _trip 003C                               btemp 007E  
                             start 0000                 ??_Lcd_Write_String 0077  
                    __CFG_IESO$OFF 0000                    __end_of_Lcd_Cmd 0E64  
                ___bmul@multiplier 0073                      __CFG_MCLRE$ON 0000  
              get_temp@temp_string 0034                   ?_I2C_Master_Init 0020  
                 ?_I2C_Master_Read 0070                   ?_I2C_Master_Wait 0070  
                 ?_I2C_Master_Stop 0070                    __end_of___aldiv 037D  
                            ?_main 0070                              STR_10 0063  
                            STR_11 005D                              STR_12 0062  
                    __CFG_WDTE$OFF 0000                       get_time@hour 0078  
                            _ANSEL 0188                    __end_of___lldiv 026D  
                   ??_get_tripwire 0076                    __end_of___lwdiv 00D8  
                  __end_of___lwmod 0F8C                              _RCREG 001A  
                            _SPBRG 0099                              _PORTA 0005  
                            _PORTB 0006                              _PORTC 0007  
          __size_of_Lcd_Set_Cursor 004A                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
                            _SSPIE 0463                              _SSPIF 0063  
                            _TXREG 0019                    __end_of_get_PIR 0EA2  
                   __CFG_FCMEN$OFF 0000                        ?_UART_Write 0070  
               __size_of_UART_Init 00D6                    __end_of_dpowers 001D  
                            _setup 0FC5                              _state 0039  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 05CE                   __end_of_Lcd_Init 020F  
                 __end_of_Lcd_Port 0E4A                    __initialization 07F5  
                     __end_of_main 07F5             __size_of_initOscilador 0055  
                           ??_main 0036                 __size_of_Lcd_Clear 000B  
                ?_I2C_Master_Start 0070                  ?_I2C_Master_Write 0070  
               ??_I2C_Master_Start 0070                 ??_I2C_Master_Write 0072  
                           ?_setup 0070                             _ANSELH 0189  
                        ??_Lcd_Cmd 0071            __size_of_Lcd_Write_Char 0039  
                           _SSPADD 0093                             _TRISC3 043B  
                           _TRISC4 043C                             _TRISC6 043E  
                           _TRISC7 043F                             _SSPCON 0014  
                           _SSPBUF 0013                     __CFG_PWRTE$OFF 0000  
         _I2C_Master_RepeatedStart 0DEA                   __end_of_get_hall 0EC1  
                __end_of_UART_Init 04F6                   __end_of_get_temp 0420  
                 __end_of_get_time 02EE                             ___bmul 0E1F  
              __size_of_UART_Write 000A                          ??___aldiv 0078  
                        ??___lldiv 0078                             _get_IR 0E64  
                        ??___lwdiv 0074                          ??___lwmod 007C  
                        ??_get_PIR 0076              __end_of_UART_TX_Empty 0DDC  
                           _strcat 0EE0                             _strcmp 0F04  
                        ??_sprintf 0023                    Lcd_Set_Cursor@a 0077  
                  Lcd_Set_Cursor@b 0074                    Lcd_Set_Cursor@y 0079  
                  Lcd_Set_Cursor@z 0078            __end_of__initialization 07FC  
                    _initOscilador 015F                  __end_of_Lcd_Clear 0E1F  
             __end_of_get_tripwire 0EE0                ___bmul@multiplicand 0070  
                   __pcstackCOMMON 0070                      __end_of_setup 1000  
                   _Lcd_Set_Cursor 0115                          ?_Lcd_Init 0070  
                        ?_Lcd_Port 0070                            ??_setup 007E  
                       __pbssBANK0 0038                     ?_initOscilador 0070  
                       __pmaintext 05CE                            ?___bmul 0070  
                          ?_get_IR 0070          __size_of_Lcd_Write_String 003D  
           __end_of_Lcd_Set_Cursor 015F                            ?_strcat 0070  
                          ?_strcmp 0070                       ??_UART_Write 0070  
                       ??_Lcd_Init 0074                         ??_Lcd_Port 0070  
                          _SSPCON2 0091                          ?_get_hall 0070  
                          _SSPSTAT 0094                          ?_get_temp 0070  
                        ?_get_time 0070                         __stringtab 0003  
              initOscilador@option 0072                     _Lcd_Write_Char 0F8C  
                          _Lcd_Cmd 0E4A                            ___aldiv 02EE  
                  __size_of___bmul 0011                            ___lldiv 020F  
               __end_of_UART_Write 0E14                            ___lwdiv 009C  
                          ___lwmod 0F5A                    __size_of_get_IR 001F  
                  ?_Lcd_Set_Cursor 0074                            _get_PIR 0E83  
                          __ptext1 0F04                            __ptext2 0FC5  
                          __ptext3 015F                            __ptext4 0420  
                          __ptext5 02EE                            __ptext6 01B4  
                          __ptext7 0066                            __ptext8 020F  
                          __ptext9 0EC1                get_time@time_string 007A  
                  __size_of_strcat 0024                    __size_of_strcmp 002A  
                          _dpowers 0013                   ___aldiv@dividend 0074  
         __size_of_I2C_Master_Init 0036           __size_of_I2C_Master_Read 002C  
         __size_of_I2C_Master_Wait 0009           __size_of_I2C_Master_Stop 0007  
                  ??_initOscilador 0070                         ??_get_hall 0076  
                          _sprintf 04F6                            clrloop0 0DFA  
           __end_of_Lcd_Write_Char 0FC5                         ??_get_temp 002D  
                       ??_get_time 0076               end_of_initialization 07FC  
            __size_of_get_tripwire 001F         ??_I2C_Master_RepeatedStart 0070  
                       get_PIR@PIR 0077          __size_of_I2C_Master_Start 0007  
        __size_of_I2C_Master_Write 0008                    ___lldiv@divisor 0070  
                  ___lldiv@counter 007D                   ___aldiv@quotient 0022  
                 I2C_Master_Init@c 0020                   I2C_Master_Read@a 0070  
                        Lcd_Port@a 0070                            strcmp@r 0075  
                        _UART_Init 0420                          _PORTAbits 0005  
                        _PORTBbits 0006                          _PORTCbits 0007  
                   UART_Write@data 0070                       _get_tripwire 0EC1  
                  ?_Lcd_Write_Char 0070                  Lcd_Write_String@a 0075  
                Lcd_Write_String@i 007A                          _Lcd_Clear 0E14  
                   __end_of___bmul 0E30                   _Lcd_Write_String 00D8  
                       ?_UART_Init 0026                     __end_of_get_IR 0E83  
                   __end_of_strcat 0F04                     __end_of_strcmp 0F2E  
              start_initialization 07F5                  __size_of_Lcd_Init 005B  
                __size_of_Lcd_Port 001A                  ??_I2C_Master_Init 0024  
                ??_I2C_Master_Read 0072                  ??_I2C_Master_Wait 0070  
                ??_I2C_Master_Stop 0070             __size_of_UART_TX_Empty 0006  
         __CFG_FOSC$INTRC_NOCLKOUT 0000                         ?_Lcd_Clear 0070  
                         ??___bmul 0071                           ??_get_IR 0076  
                  Lcd_Write_Char@a 0074                    Lcd_Write_Char@y 0073  
                         ??_strcat 0071                           ??_strcmp 0072  
                        ___latbits 0002                      __pcstackBANK0 0020  
                __size_of_get_hall 001F                           ?_Lcd_Cmd 0070  
                __size_of_get_temp 00A3                  __size_of_get_time 0081  
                      sprintf@flag 0027                        sprintf@prec 0028  
                 _I2C_Master_Start 0DDC                   _I2C_Master_Write 0DF1  
                 ___lwdiv@dividend 0072                   ??_Lcd_Set_Cursor 0075  
                  get_temp@decimal 0030                           ?___aldiv 0070  
                         ?___lldiv 0070                           ?___lwdiv 0070  
                         ?___lwmod 0078                        ??_UART_Init 002A  
                         ?_get_PIR 0070                          __pstrings 0003  
                  get_temp@tempLSB 0035                    get_temp@tempMSB 0033  
                    _UART_TX_Empty 0DD6                   ___lwdiv@quotient 0075  
                         ?_sprintf 0020                         UART_Init@x 0079  
                   __size_of_setup 003B                    ___aldiv@divisor 0070  
                  ___aldiv@counter 0020                          clear_ram0 0DF9  
                         Lcd_Cmd@a 0073                        ??_Lcd_Clear 0074  
                UART_Init@baudrate 0026                        __stringbase 0012  
                   ?_UART_TX_Empty 0070                   ??_Lcd_Write_Char 0071  
                         _Lcd_Init 01B4                           _Lcd_Port 0E30  
              I2C_Master_Read@temp 0074              __end_of_initOscilador 01B4  
         __end_of_Lcd_Write_String 0115                   __size_of_Lcd_Cmd 001A  
                 __size_of___aldiv 008F  __size_of_I2C_Master_RepeatedStart 0007  
        ?_I2C_Master_RepeatedStart 0070                   __size_of___lldiv 005E  
                 __size_of___lwdiv 003C                   __size_of___lwmod 0032  
               __end_of__stringtab 0013                   __size_of_get_PIR 001F  
                       sprintf@val 0029                    _I2C_Master_Init 0066  
                  _I2C_Master_Read 0F2E                    _I2C_Master_Wait 0E01  
                       strcat@from 0070                    _I2C_Master_Stop 0DE3  
                  ___lwdiv@divisor 0070                    ___lwdiv@counter 0077  
                         __ptext10 026D                           __ptext11 037D  
                         __ptext20 0E64                           __ptext12 0EE0  
                         __ptext21 0DF1                           __ptext13 04F6  
                         __ptext30 0115                           __ptext22 0DE3  
                         __ptext14 0F5A                           __ptext31 0E14  
                         __ptext23 0DDC                           __ptext15 009C  
                         __ptext32 0E4A                           __ptext24 0F2E  
                         __ptext16 0E1F                           __ptext33 0E30  
                         __ptext25 0E01                           __ptext17 0DEA  
                         __ptext26 0E0A                           __ptext18 0EA2  
                         __ptext27 0DD6                           __ptext19 0E83  
                         __ptext28 00D8                           __ptext29 0F8C  
                __CFG_BOR4V$BOR40V 0000                           _get_hall 0EA2  
                         _get_temp 037D                           _get_time 026D  
                 __size_of_sprintf 00D8                      __size_of_main 0227  
                         get_IR@IR 0077                    ??_UART_TX_Empty 0070  
         __end_of_I2C_Master_Start 0DE3           __end_of_I2C_Master_Write 0DF9  
               Lcd_Write_Char@temp 0072                          sprintf@ap 0026  
                        sprintf@sp 002B                   ___lwmod@dividend 007A  
                 ___lldiv@dividend 0074                          stringcode 000D  
                       _OSCCONbits 008F            __end_of_I2C_Master_Init 009C  
          __end_of_I2C_Master_Read 0F5A            __end_of_I2C_Master_Wait 0E0A  
          __end_of_I2C_Master_Stop 0DEA                 Lcd_Set_Cursor@temp 007A  
                         sprintf@c 002C                           sprintf@f 0020  
                         strcat@cp 0073                           strcat@to 0072  
                         strcmp@s1 0076                           strcmp@s2 0070  
                 ___lldiv@quotient 0079                  I2C_Master_Write@d 0070  
                  ___lwmod@divisor 0078                    ___lwmod@counter 007D  
                         stringdir 000D                   get_tripwire@trip 0077  
                         stringtab 0003                       ___aldiv@sign 0021  
                       _UART_Write 0E0A                        _SSPCON2bits 0091  

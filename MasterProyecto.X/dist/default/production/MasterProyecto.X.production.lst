

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Mar 09 16:28:11 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	psect	text29,local,class=CODE,merge=1,delta=2
    41                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text32,local,class=CODE,merge=1,delta=2
    44                           	psect	text33,local,class=CODE,merge=1,delta=2
    45                           	psect	text34,local,class=CODE,merge=1,delta=2
    46                           	psect	text35,local,class=CODE,merge=1,delta=2
    47                           	psect	text36,local,class=CODE,merge=1,delta=2
    48                           	psect	text37,local,class=CODE,merge=1,delta=2
    49                           	psect	text38,local,class=CODE,merge=1,delta=2
    50                           	psect	text39,local,class=CODE,merge=1,delta=2
    51                           	psect	text40,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	dabs	1,0x7E,2
    54  0000                     
    55                           ; Version 2.05
    56                           ; Generated 20/12/2018 GMT
    57                           ; 
    58                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC16F887 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  0007                     	;# 
    97  0008                     	;# 
    98  0009                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000D                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0013                     	;# 
   110  0014                     	;# 
   111  0015                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001D                     	;# 
   122  001E                     	;# 
   123  001F                     	;# 
   124  0081                     	;# 
   125  0085                     	;# 
   126  0086                     	;# 
   127  0087                     	;# 
   128  0088                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  008F                     	;# 
   134  0090                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0093                     	;# 
   139  0093                     	;# 
   140  0094                     	;# 
   141  0095                     	;# 
   142  0096                     	;# 
   143  0097                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009A                     	;# 
   147  009B                     	;# 
   148  009C                     	;# 
   149  009D                     	;# 
   150  009E                     	;# 
   151  009F                     	;# 
   152  0105                     	;# 
   153  0107                     	;# 
   154  0108                     	;# 
   155  0109                     	;# 
   156  010C                     	;# 
   157  010C                     	;# 
   158  010D                     	;# 
   159  010E                     	;# 
   160  010F                     	;# 
   161  0185                     	;# 
   162  0187                     	;# 
   163  0188                     	;# 
   164  0189                     	;# 
   165  018C                     	;# 
   166  018D                     	;# 
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  000E                     	;# 
   183  000F                     	;# 
   184  0010                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0013                     	;# 
   188  0014                     	;# 
   189  0015                     	;# 
   190  0015                     	;# 
   191  0016                     	;# 
   192  0017                     	;# 
   193  0018                     	;# 
   194  0019                     	;# 
   195  001A                     	;# 
   196  001B                     	;# 
   197  001B                     	;# 
   198  001C                     	;# 
   199  001D                     	;# 
   200  001E                     	;# 
   201  001F                     	;# 
   202  0081                     	;# 
   203  0085                     	;# 
   204  0086                     	;# 
   205  0087                     	;# 
   206  0088                     	;# 
   207  0089                     	;# 
   208  008C                     	;# 
   209  008D                     	;# 
   210  008E                     	;# 
   211  008F                     	;# 
   212  0090                     	;# 
   213  0091                     	;# 
   214  0092                     	;# 
   215  0093                     	;# 
   216  0093                     	;# 
   217  0093                     	;# 
   218  0094                     	;# 
   219  0095                     	;# 
   220  0096                     	;# 
   221  0097                     	;# 
   222  0098                     	;# 
   223  0099                     	;# 
   224  009A                     	;# 
   225  009B                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  009F                     	;# 
   230  0105                     	;# 
   231  0107                     	;# 
   232  0108                     	;# 
   233  0109                     	;# 
   234  010C                     	;# 
   235  010C                     	;# 
   236  010D                     	;# 
   237  010E                     	;# 
   238  010F                     	;# 
   239  0185                     	;# 
   240  0187                     	;# 
   241  0188                     	;# 
   242  0189                     	;# 
   243  018C                     	;# 
   244  018D                     	;# 
   245                           
   246                           	psect	strings
   247  0500                     __pstrings:	
   248  0500                     stringtab:	
   249  0500                     __stringtab:	
   250                           
   251                           ;	String table - string pointers are 1 byte each
   252  0500  1BFF               	btfsc	btemp+1,7
   253  0501  2D0A               	ljmp	stringcode
   254  0502  1383               	bcf	3,7
   255  0503  187F               	btfsc	btemp+1,0
   256  0504  1783               	bsf	3,7
   257  0505  0800               	movf	0,w
   258  0506  0A84               	incf	4,f
   259  0507  1903               	skipnz
   260  0508  0AFF               	incf	btemp+1,f
   261  0509  0008               	return
   262  050A                     stringcode:	
   263  050A                     stringdir:	
   264  050A  3005               	movlw	high stringdir
   265  050B  008A               	movwf	10
   266  050C  0804               	movf	4,w
   267  050D  0A84               	incf	4,f
   268  050E  0782               	addwf	2,f
   269  050F                     __stringbase:	
   270  050F  3400               	retlw	0
   271  0510                     __end_of__stringtab:	
   272  0510                     _dpowers:	
   273  0510  3401               	retlw	1
   274  0511  3400               	retlw	0
   275  0512  340A               	retlw	10
   276  0513  3400               	retlw	0
   277  0514  3464               	retlw	100
   278  0515  3400               	retlw	0
   279  0516  34E8               	retlw	232
   280  0517  3403               	retlw	3
   281  0518  3410               	retlw	16
   282  0519  3427               	retlw	39
   283  051A                     __end_of_dpowers:	
   284  0009                     _PORTE	set	9
   285  0007                     _PORTC	set	7
   286  0005                     _PORTA	set	5
   287  0006                     _PORTB	set	6
   288  0007                     _PORTCbits	set	7
   289  0018                     _RCSTAbits	set	24
   290  0014                     _SSPCONbits	set	20
   291  0009                     _PORTEbits	set	9
   292  0008                     _PORTDbits	set	8
   293  0001                     _TMR0	set	1
   294  0005                     _PORTAbits	set	5
   295  000B                     _INTCONbits	set	11
   296  0019                     _TXREG	set	25
   297  001A                     _RCREG	set	26
   298  0006                     _PORTBbits	set	6
   299  0013                     _SSPBUF	set	19
   300  0014                     _SSPCON	set	20
   301  0065                     _RCIF	set	101
   302  00C4                     _CREN	set	196
   303  00C7                     _SPEN	set	199
   304  0063                     _SSPIF	set	99
   305  005E                     _PEIE	set	94
   306  005F                     _GIE	set	95
   307  0081                     _OPTION_REGbits	set	129
   308  0089                     _TRISE	set	137
   309  0087                     _TRISC	set	135
   310  0088                     _TRISD	set	136
   311  0085                     _TRISA	set	133
   312  0086                     _TRISB	set	134
   313  0099                     _SPBRG	set	153
   314  008F                     _OSCCONbits	set	143
   315  0091                     _SSPCON2bits	set	145
   316  0087                     _TRISCbits	set	135
   317  0094                     _SSPSTAT	set	148
   318  0093                     _SSPADD	set	147
   319  0091                     _SSPCON2	set	145
   320  04C1                     _TRMT	set	1217
   321  04C5                     _TXEN	set	1221
   322  043E                     _TRISC6	set	1086
   323  043F                     _TRISC7	set	1087
   324  04C4                     _SYNC	set	1220
   325  04C2                     _BRGH	set	1218
   326  0463                     _SSPIE	set	1123
   327  043C                     _TRISC4	set	1084
   328  043B                     _TRISC3	set	1083
   329  048B                     _RCEN	set	1163
   330  0188                     _ANSEL	set	392
   331  0189                     _ANSELH	set	393
   332  051A                     STR_1:	
   333  051A  3449               	retlw	73	;'I'
   334  051B  346E               	retlw	110	;'n'
   335  051C  3469               	retlw	105	;'i'
   336  051D  3463               	retlw	99	;'c'
   337  051E  3469               	retlw	105	;'i'
   338  051F  3461               	retlw	97	;'a'
   339  0520  346E               	retlw	110	;'n'
   340  0521  3464               	retlw	100	;'d'
   341  0522  346F               	retlw	111	;'o'
   342  0523  3420               	retlw	32	;' '
   343  0524  3453               	retlw	83	;'S'
   344  0525  3469               	retlw	105	;'i'
   345  0526  3473               	retlw	115	;'s'
   346  0527  3474               	retlw	116	;'t'
   347  0528  3465               	retlw	101	;'e'
   348  0529  346D               	retlw	109	;'m'
   349  052A  3461               	retlw	97	;'a'
   350  052B  3400               	retlw	0
   351  052C                     STR_2:	
   352  052C  3464               	retlw	100	;'d'
   353  052D  3465               	retlw	101	;'e'
   354  052E  3420               	retlw	32	;' '
   355  052F  3473               	retlw	115	;'s'
   356  0530  3465               	retlw	101	;'e'
   357  0531  3467               	retlw	103	;'g'
   358  0532  3475               	retlw	117	;'u'
   359  0533  3472               	retlw	114	;'r'
   360  0534  3469               	retlw	105	;'i'
   361  0535  3464               	retlw	100	;'d'
   362  0536  3461               	retlw	97	;'a'
   363  0537  3464               	retlw	100	;'d'
   364  0538  3400               	retlw	0
   365  0539                     STR_12:	
   366  0539  3444               	retlw	68	;'D'
   367  053A  346F               	retlw	111	;'o'
   368  053B  346F               	retlw	111	;'o'
   369  053C  3472               	retlw	114	;'r'
   370  053D  3420               	retlw	32	;' '
   371  053E  344F               	retlw	79	;'O'
   372  053F  3450               	retlw	80	;'P'
   373  0540  3445               	retlw	69	;'E'
   374  0541  344E               	retlw	78	;'N'
   375  0542  3420               	retlw	32	;' '
   376  0543  3420               	retlw	32	;' '
   377  0544  3400               	retlw	0
   378  0545                     STR_13:	
   379  0545  3444               	retlw	68	;'D'
   380  0546  346F               	retlw	111	;'o'
   381  0547  346F               	retlw	111	;'o'
   382  0548  3472               	retlw	114	;'r'
   383  0549  3420               	retlw	32	;' '
   384  054A  3443               	retlw	67	;'C'
   385  054B  344C               	retlw	76	;'L'
   386  054C  344F               	retlw	79	;'O'
   387  054D  3453               	retlw	83	;'S'
   388  054E  3445               	retlw	69	;'E'
   389  054F  3444               	retlw	68	;'D'
   390  0550  3400               	retlw	0
   391  0551                     STR_10:	
   392  0551  3420               	retlw	32	;' '
   393  0552  3420               	retlw	32	;' '
   394  0553  3420               	retlw	32	;' '
   395  0554  3420               	retlw	32	;' '
   396  0555  3420               	retlw	32	;' '
   397  0556  3420               	retlw	32	;' '
   398  0557  3420               	retlw	32	;' '
   399  0558  3420               	retlw	32	;' '
   400  0559  3420               	retlw	32	;' '
   401  055A  3400               	retlw	0
   402  055B                     STR_3:	
   403  055B  344C               	retlw	76	;'L'
   404  055C  3455               	retlw	85	;'U'
   405  055D  344E               	retlw	78	;'N'
   406  055E  3445               	retlw	69	;'E'
   407  055F  3453               	retlw	83	;'S'
   408  0560  3420               	retlw	32	;' '
   409  0561  3420               	retlw	32	;' '
   410  0562  3420               	retlw	32	;' '
   411  0563  3420               	retlw	32	;' '
   412  0564  3400               	retlw	0
   413  0565                     STR_8:	
   414  0565  3453               	retlw	83	;'S'
   415  0566  3441               	retlw	65	;'A'
   416  0567  3442               	retlw	66	;'B'
   417  0568  3441               	retlw	65	;'A'
   418  0569  3444               	retlw	68	;'D'
   419  056A  344F               	retlw	79	;'O'
   420  056B  3420               	retlw	32	;' '
   421  056C  3420               	retlw	32	;' '
   422  056D  3420               	retlw	32	;' '
   423  056E  3400               	retlw	0
   424  056F                     STR_4:	
   425  056F  344D               	retlw	77	;'M'
   426  0570  3441               	retlw	65	;'A'
   427  0571  3452               	retlw	82	;'R'
   428  0572  3454               	retlw	84	;'T'
   429  0573  3445               	retlw	69	;'E'
   430  0574  3453               	retlw	83	;'S'
   431  0575  3420               	retlw	32	;' '
   432  0576  3420               	retlw	32	;' '
   433  0577  3420               	retlw	32	;' '
   434  0578  3400               	retlw	0
   435  0579                     STR_6:	
   436  0579  344A               	retlw	74	;'J'
   437  057A  3455               	retlw	85	;'U'
   438  057B  3445               	retlw	69	;'E'
   439  057C  3456               	retlw	86	;'V'
   440  057D  3445               	retlw	69	;'E'
   441  057E  3453               	retlw	83	;'S'
   442  057F  3420               	retlw	32	;' '
   443  0580  3420               	retlw	32	;' '
   444  0581  3420               	retlw	32	;' '
   445  0582  3400               	retlw	0
   446  0583                     STR_9:	
   447  0583  3444               	retlw	68	;'D'
   448  0584  344F               	retlw	79	;'O'
   449  0585  344D               	retlw	77	;'M'
   450  0586  3449               	retlw	73	;'I'
   451  0587  344E               	retlw	78	;'N'
   452  0588  3447               	retlw	71	;'G'
   453  0589  344F               	retlw	79	;'O'
   454  058A  3420               	retlw	32	;' '
   455  058B  3420               	retlw	32	;' '
   456  058C  3400               	retlw	0
   457  058D                     STR_7:	
   458  058D  3456               	retlw	86	;'V'
   459  058E  3449               	retlw	73	;'I'
   460  058F  3445               	retlw	69	;'E'
   461  0590  3452               	retlw	82	;'R'
   462  0591  344E               	retlw	78	;'N'
   463  0592  3445               	retlw	69	;'E'
   464  0593  3453               	retlw	83	;'S'
   465  0594  3420               	retlw	32	;' '
   466  0595  3420               	retlw	32	;' '
   467  0596  3400               	retlw	0
   468  0597                     STR_5:	
   469  0597  344D               	retlw	77	;'M'
   470  0598  3449               	retlw	73	;'I'
   471  0599  3445               	retlw	69	;'E'
   472  059A  3452               	retlw	82	;'R'
   473  059B  3443               	retlw	67	;'C'
   474  059C  344F               	retlw	79	;'O'
   475  059D  344C               	retlw	76	;'L'
   476  059E  3445               	retlw	69	;'E'
   477  059F  3453               	retlw	83	;'S'
   478  05A0  3400               	retlw	0
   479  05A1                     STR_16:	
   480  05A1  3442               	retlw	66	;'B'
   481  05A2  3461               	retlw	97	;'a'
   482  05A3  346E               	retlw	110	;'n'
   483  05A4  346B               	retlw	107	;'k'
   484  05A5  3420               	retlw	32	;' '
   485  05A6  344F               	retlw	79	;'O'
   486  05A7  344E               	retlw	78	;'N'
   487  05A8  3420               	retlw	32	;' '
   488  05A9  3400               	retlw	0
   489  05AA                     STR_14:	
   490  05AA  3454               	retlw	84	;'T'
   491  05AB  3472               	retlw	114	;'r'
   492  05AC  3469               	retlw	105	;'i'
   493  05AD  3470               	retlw	112	;'p'
   494  05AE  3420               	retlw	32	;' '
   495  05AF  344F               	retlw	79	;'O'
   496  05B0  344E               	retlw	78	;'N'
   497  05B1  3420               	retlw	32	;' '
   498  05B2  3400               	retlw	0
   499  05B3                     STR_17:	
   500  05B3  3442               	retlw	66	;'B'
   501  05B4  3441               	retlw	65	;'A'
   502  05B5  344E               	retlw	78	;'N'
   503  05B6  344B               	retlw	75	;'K'
   504  05B7  3420               	retlw	32	;' '
   505  05B8  344F               	retlw	79	;'O'
   506  05B9  3446               	retlw	70	;'F'
   507  05BA  3446               	retlw	70	;'F'
   508  05BB  3400               	retlw	0
   509  05BC                     STR_15:	
   510  05BC  3454               	retlw	84	;'T'
   511  05BD  3472               	retlw	114	;'r'
   512  05BE  3469               	retlw	105	;'i'
   513  05BF  3470               	retlw	112	;'p'
   514  05C0  3420               	retlw	32	;' '
   515  05C1  344F               	retlw	79	;'O'
   516  05C2  3446               	retlw	70	;'F'
   517  05C3  3446               	retlw	70	;'F'
   518  05C4  3400               	retlw	0
   519  05C5                     STR_18:	
   520  05C5  3450               	retlw	80	;'P'
   521  05C6  3449               	retlw	73	;'I'
   522  05C7  3452               	retlw	82	;'R'
   523  05C8  3420               	retlw	32	;' '
   524  05C9  344F               	retlw	79	;'O'
   525  05CA  344E               	retlw	78	;'N'
   526  05CB  3420               	retlw	32	;' '
   527  05CC  3400               	retlw	0
   528  05CD                     STR_19:	
   529  05CD  3450               	retlw	80	;'P'
   530  05CE  3449               	retlw	73	;'I'
   531  05CF  3452               	retlw	82	;'R'
   532  05D0  3420               	retlw	32	;' '
   533  05D1  344F               	retlw	79	;'O'
   534  05D2  3446               	retlw	70	;'F'
   535  05D3  3446               	retlw	70	;'F'
   536  05D4  3400               	retlw	0
   537  05D5                     STR_22:	
   538  05D5  3448               	retlw	72	;'H'
   539  05D6  344F               	retlw	79	;'O'
   540  05D7  3452               	retlw	82	;'R'
   541  05D8  3441               	retlw	65	;'A'
   542  05D9  343A               	retlw	58	;':'
   543  05DA  3420               	retlw	32	;' '
   544  05DB  3400               	retlw	0
   545  05DC                     STR_23:	
   546  05DC  3444               	retlw	68	;'D'
   547  05DD  3449               	retlw	73	;'I'
   548  05DE  3441               	retlw	65	;'A'
   549  05DF  343A               	retlw	58	;':'
   550  05E0  3420               	retlw	32	;' '
   551  05E1  3400               	retlw	0
   552  05E2                     STR_11:	
   553  05E2  3432               	retlw	50	;'2'
   554  05E3  3433               	retlw	51	;'3'
   555  05E4  342E               	retlw	46	;'.'
   556  05E5  3435               	retlw	53	;'5'
   557  05E6  3430               	retlw	48	;'0'
   558  05E7  3400               	retlw	0
   559  05E8                     STR_25:	
   560  05E8  342E               	retlw	46	;'.'
   561  05E9  3425               	retlw	37	;'%'
   562  05EA  3464               	retlw	100	;'d'
   563  05EB  3430               	retlw	48	;'0'
   564  05EC  3400               	retlw	0
   565  05ED                     STR_26:	
   566  05ED  342E               	retlw	46	;'.'
   567  05EE  3425               	retlw	37	;'%'
   568  05EF  3464               	retlw	100	;'d'
   569  05F0  3400               	retlw	0
   570  05C6                     
   571                           ; #config settings
   572  0000                     
   573                           	psect	cinit
   574  000F                     start_initialization:	
   575  000F                     __initialization:	
   576                           
   577                           ; Clear objects allocated to COMMON
   578  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   579  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   580  0011  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   581                           
   582                           ; Clear objects allocated to BANK0
   583  0012  1383               	bcf	3,7	;select IRP bank0
   584  0013  3045               	movlw	low __pbssBANK0
   585  0014  0084               	movwf	4
   586  0015  3065               	movlw	low (__pbssBANK0+32)
   587  0016  120A  158A  212D   	fcall	clear_ram0
   588  0019                     end_of_initialization:	
   589                           ;End of C runtime variable initialization code
   590                           
   591  0019                     __end_of__initialization:	
   592  0019  0183               	clrf	3
   593  001A  120A  118A  281D   	ljmp	_main	;jump to C main() function
   594                           
   595                           	psect	bssCOMMON
   596  0078                     __pbssCOMMON:	
   597  0078                     _newhour:	
   598  0078                     	ds	1
   599  0079                     _state:	
   600  0079                     	ds	1
   601  007A                     _door:	
   602  007A                     	ds	1
   603                           
   604                           	psect	bssBANK0
   605  0045                     __pbssBANK0:	
   606  0045                     _k:	
   607  0045                     	ds	2
   608  0047                     _newmin:	
   609  0047                     	ds	1
   610  0048                     _min:	
   611  0048                     	ds	1
   612  0049                     _hour:	
   613  0049                     	ds	1
   614  004A                     _val:	
   615  004A                     	ds	1
   616  004B                     _cont:	
   617  004B                     	ds	1
   618  004C                     _bank:	
   619  004C                     	ds	1
   620  004D                     _alarm:	
   621  004D                     	ds	1
   622  004E                     _change3:	
   623  004E                     	ds	1
   624  004F                     _change2:	
   625  004F                     	ds	1
   626  0050                     _change1:	
   627  0050                     	ds	1
   628  0051                     _change:	
   629  0051                     	ds	1
   630  0052                     _j:	
   631  0052                     	ds	1
   632  0053                     _i:	
   633  0053                     	ds	1
   634  0054                     _day1:	
   635  0054                     	ds	1
   636  0055                     _IR:	
   637  0055                     	ds	1
   638  0056                     _PIR:	
   639  0056                     	ds	1
   640  0057                     _trip:	
   641  0057                     	ds	1
   642  0058                     _day2:	
   643  0058                     	ds	1
   644  0059                     _temp:	
   645  0059                     	ds	6
   646  005F                     _time:	
   647  005F                     	ds	6
   648                           
   649                           	psect	clrtext
   650  092D                     clear_ram0:	
   651                           ;	Called with FSR containing the base address, and
   652                           ;	W with the last address+1
   653                           
   654  092D  0064               	clrwdt	;clear the watchdog before getting into this loop
   655  092E                     clrloop0:	
   656  092E  0180               	clrf	0	;clear RAM location pointed to by FSR
   657  092F  0A84               	incf	4,f	;increment pointer
   658  0930  0604               	xorwf	4,w	;XOR with final address
   659  0931  1903               	btfsc	3,2	;have we reached the end yet?
   660  0932  3400               	retlw	0	;all done for this memory range, return
   661  0933  0604               	xorwf	4,w	;XOR again to restore value
   662  0934  292E               	goto	clrloop0	;do the next byte
   663                           
   664                           	psect	cstackCOMMON
   665  0070                     __pcstackCOMMON:	
   666  0070                     ?_setup:	
   667  0070                     ?_get_temp:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0070                     ?_get_hall:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0070                     ?_get_tripwire:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0070                     ?_get_PIR:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0070                     ?_get_IR:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0070                     ?_get_time:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0070                     ?_get_day:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0070                     ?_open_door:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0070                     ?_close_door:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  0070                     ?_I2C_Master_Wait:	
   695                           ; 1 bytes @ 0x0
   696                           
   697  0070                     ?_I2C_Master_Start:	
   698                           ; 1 bytes @ 0x0
   699                           
   700  0070                     ?_I2C_Master_RepeatedStart:	
   701                           ; 1 bytes @ 0x0
   702                           
   703  0070                     ?_I2C_Master_Stop:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  0070                     ?_Lcd_Port:	
   707                           ; 1 bytes @ 0x0
   708                           
   709  0070                     ?_Lcd_Cmd:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  0070                     ?_Lcd_Clear:	
   713                           ; 1 bytes @ 0x0
   714                           
   715  0070                     ?_Lcd_Init:	
   716                           ; 1 bytes @ 0x0
   717                           
   718  0070                     ?_Lcd_Write_Char:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0070                     ?_initOscilador:	
   722                           ; 1 bytes @ 0x0
   723                           
   724  0070                     ?_UART_TX_Empty:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0070                     ?_UART_Write:	
   728                           ; 1 bytes @ 0x0
   729                           
   730  0070                     ?_manual_pwm:	
   731                           ; 1 bytes @ 0x0
   732                           
   733  0070                     ??_manual_pwm:	
   734                           ; 1 bytes @ 0x0
   735                           
   736  0070                     ?_main:	
   737                           ; 1 bytes @ 0x0
   738                           
   739                           
   740                           ; 1 bytes @ 0x0
   741  0070                     	ds	3
   742  0073                     ?_strcat:	
   743  0073                     ??_I2C_Master_Wait:	
   744                           ; 1 bytes @ 0x3
   745                           
   746  0073                     ??_I2C_Master_Start:	
   747                           ; 1 bytes @ 0x3
   748                           
   749  0073                     ??_I2C_Master_RepeatedStart:	
   750                           ; 1 bytes @ 0x3
   751                           
   752  0073                     ??_I2C_Master_Stop:	
   753                           ; 1 bytes @ 0x3
   754                           
   755  0073                     ?_I2C_Master_Write:	
   756                           ; 1 bytes @ 0x3
   757                           
   758  0073                     ??_Lcd_Port:	
   759                           ; 1 bytes @ 0x3
   760                           
   761  0073                     ??_initOscilador:	
   762                           ; 1 bytes @ 0x3
   763                           
   764  0073                     ??_UART_TX_Empty:	
   765                           ; 1 bytes @ 0x3
   766                           
   767  0073                     ??_UART_Write:	
   768                           ; 1 bytes @ 0x3
   769                           
   770  0073                     ?___bmul:	
   771                           ; 1 bytes @ 0x3
   772                           
   773  0073                     ??___lldiv:	
   774                           ; 1 bytes @ 0x3
   775                           
   776  0073                     ??___aldiv:	
   777                           ; 1 bytes @ 0x3
   778                           
   779  0073                     ?_strcmp:	
   780                           ; 1 bytes @ 0x3
   781                           
   782  0073                     ?_I2C_Master_Read:	
   783                           ; 2 bytes @ 0x3
   784                           
   785  0073                     ?___awdiv:	
   786                           ; 2 bytes @ 0x3
   787                           
   788  0073                     ?___awmod:	
   789                           ; 2 bytes @ 0x3
   790                           
   791  0073                     ?___lwdiv:	
   792                           ; 2 bytes @ 0x3
   793                           
   794  0073                     Lcd_Port@a:	
   795                           ; 2 bytes @ 0x3
   796                           
   797  0073                     UART_Write@data:	
   798                           ; 1 bytes @ 0x3
   799                           
   800  0073                     ___bmul@multiplicand:	
   801                           ; 1 bytes @ 0x3
   802                           
   803  0073                     strcat@from:	
   804                           ; 1 bytes @ 0x3
   805                           
   806  0073                     strcmp@s2:	
   807                           ; 1 bytes @ 0x3
   808                           
   809  0073                     I2C_Master_Write@d:	
   810                           ; 1 bytes @ 0x3
   811                           
   812  0073                     I2C_Master_Read@a:	
   813                           ; 2 bytes @ 0x3
   814                           
   815  0073                     ___awdiv@divisor:	
   816                           ; 2 bytes @ 0x3
   817                           
   818  0073                     ___awmod@divisor:	
   819                           ; 2 bytes @ 0x3
   820                           
   821  0073                     ___lwdiv@divisor:	
   822                           ; 2 bytes @ 0x3
   823                           
   824                           
   825                           ; 2 bytes @ 0x3
   826  0073                     	ds	1
   827  0074                     ??_strcat:	
   828  0074                     ??_I2C_Master_Init:	
   829                           ; 1 bytes @ 0x4
   830                           
   831  0074                     ??_Lcd_Cmd:	
   832                           ; 1 bytes @ 0x4
   833                           
   834  0074                     ??_Lcd_Write_Char:	
   835                           ; 1 bytes @ 0x4
   836                           
   837  0074                     ??___bmul:	
   838                           ; 1 bytes @ 0x4
   839                           
   840  0074                     UART_Init@x:	
   841                           ; 1 bytes @ 0x4
   842                           
   843                           
   844                           ; 2 bytes @ 0x4
   845  0074                     	ds	1
   846  0075                     ??_open_door:	
   847  0075                     ??_close_door:	
   848                           ; 1 bytes @ 0x5
   849                           
   850  0075                     ??_strcmp:	
   851                           ; 1 bytes @ 0x5
   852                           
   853  0075                     ?_write_RTC:	
   854                           ; 1 bytes @ 0x5
   855                           
   856  0075                     ??_I2C_Master_Write:	
   857                           ; 1 bytes @ 0x5
   858                           
   859  0075                     ??_I2C_Master_Read:	
   860                           ; 1 bytes @ 0x5
   861                           
   862  0075                     Lcd_Write_Char@temp:	
   863                           ; 1 bytes @ 0x5
   864                           
   865  0075                     initOscilador@option:	
   866                           ; 1 bytes @ 0x5
   867                           
   868  0075                     write_RTC@minutes:	
   869                           ; 1 bytes @ 0x5
   870                           
   871  0075                     ___bmul@product:	
   872                           ; 1 bytes @ 0x5
   873                           
   874  0075                     strcat@to:	
   875                           ; 1 bytes @ 0x5
   876                           
   877  0075                     ___awdiv@dividend:	
   878                           ; 1 bytes @ 0x5
   879                           
   880  0075                     ___awmod@dividend:	
   881                           ; 2 bytes @ 0x5
   882                           
   883  0075                     ___lwdiv@dividend:	
   884                           ; 2 bytes @ 0x5
   885                           
   886                           
   887                           ; 2 bytes @ 0x5
   888  0075                     	ds	1
   889  0076                     Lcd_Cmd@a:	
   890  0076                     Lcd_Write_Char@y:	
   891                           ; 1 bytes @ 0x6
   892                           
   893  0076                     write_RTC@day:	
   894                           ; 1 bytes @ 0x6
   895                           
   896  0076                     ___bmul@multiplier:	
   897                           ; 1 bytes @ 0x6
   898                           
   899  0076                     strcat@cp:	
   900                           ; 1 bytes @ 0x6
   901                           
   902                           
   903                           ; 1 bytes @ 0x6
   904  0076                     	ds	1
   905  0077                     ??_get_hall:	
   906  0077                     ??_get_tripwire:	
   907                           ; 1 bytes @ 0x7
   908                           
   909  0077                     ??_get_PIR:	
   910                           ; 1 bytes @ 0x7
   911                           
   912  0077                     ??_get_IR:	
   913                           ; 1 bytes @ 0x7
   914                           
   915  0077                     ??_get_day:	
   916                           ; 1 bytes @ 0x7
   917                           
   918  0077                     ??_Lcd_Clear:	
   919                           ; 1 bytes @ 0x7
   920                           
   921  0077                     ?_Lcd_Set_Cursor:	
   922                           ; 1 bytes @ 0x7
   923                           
   924  0077                     ??___awdiv:	
   925                           ; 1 bytes @ 0x7
   926                           
   927  0077                     ??___awmod:	
   928                           ; 1 bytes @ 0x7
   929                           
   930  0077                     ??___lwdiv:	
   931                           ; 1 bytes @ 0x7
   932                           
   933  0077                     Lcd_Set_Cursor@b:	
   934                           ; 1 bytes @ 0x7
   935                           
   936  0077                     Lcd_Write_Char@a:	
   937                           ; 1 bytes @ 0x7
   938                           
   939  0077                     write_RTC@hour:	
   940                           ; 1 bytes @ 0x7
   941                           
   942                           
   943                           ; 1 bytes @ 0x7
   944  0077                     	ds	1
   945  0078                     ??_setup:	
   946                           
   947                           	psect	cstackBANK0
   948  0020                     __pcstackBANK0:	
   949                           ; 1 bytes @ 0x8
   950                           
   951  0020                     ??_write_RTC:	
   952  0020                     ??_Lcd_Set_Cursor:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0020                     ??_Lcd_Init:	
   956                           ; 1 bytes @ 0x0
   957                           
   958  0020                     ?_Lcd_Write_String:	
   959                           ; 1 bytes @ 0x0
   960                           
   961  0020                     ?___lldiv:	
   962                           ; 1 bytes @ 0x0
   963                           
   964  0020                     ?___aldiv:	
   965                           ; 4 bytes @ 0x0
   966                           
   967  0020                     ___awdiv@counter:	
   968                           ; 4 bytes @ 0x0
   969                           
   970  0020                     ___awmod@counter:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0020                     ___lwdiv@counter:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0020                     strcmp@r:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0020                     I2C_Master_Read@temp:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0020                     Lcd_Write_String@a:	
   983                           ; 2 bytes @ 0x0
   984                           
   985  0020                     ___lldiv@divisor:	
   986                           ; 2 bytes @ 0x0
   987                           
   988  0020                     ___aldiv@divisor:	
   989                           ; 4 bytes @ 0x0
   990                           
   991                           
   992                           ; 4 bytes @ 0x0
   993  0020                     	ds	1
   994  0021                     ___awdiv@sign:	
   995  0021                     ___awmod@sign:	
   996                           ; 1 bytes @ 0x1
   997                           
   998  0021                     strcmp@s1:	
   999                           ; 1 bytes @ 0x1
  1000                           
  1001  0021                     ___lwdiv@quotient:	
  1002                           ; 1 bytes @ 0x1
  1003                           
  1004                           
  1005                           ; 2 bytes @ 0x1
  1006  0021                     	ds	1
  1007  0022                     ??_get_time:	
  1008  0022                     ??_Lcd_Write_String:	
  1009                           ; 1 bytes @ 0x2
  1010                           
  1011  0022                     Lcd_Set_Cursor@a:	
  1012                           ; 1 bytes @ 0x2
  1013                           
  1014  0022                     get_day@d:	
  1015                           ; 1 bytes @ 0x2
  1016                           
  1017  0022                     get_hall@key:	
  1018                           ; 1 bytes @ 0x2
  1019                           
  1020  0022                     get_tripwire@trip:	
  1021                           ; 1 bytes @ 0x2
  1022                           
  1023  0022                     get_PIR@PIR:	
  1024                           ; 1 bytes @ 0x2
  1025                           
  1026  0022                     get_IR@IR:	
  1027                           ; 1 bytes @ 0x2
  1028                           
  1029  0022                     ___awdiv@quotient:	
  1030                           ; 1 bytes @ 0x2
  1031                           
  1032                           
  1033                           ; 2 bytes @ 0x2
  1034  0022                     	ds	1
  1035  0023                     ?___lwmod:	
  1036  0023                     Lcd_Set_Cursor@z:	
  1037                           ; 2 bytes @ 0x3
  1038                           
  1039  0023                     ___lwmod@divisor:	
  1040                           ; 1 bytes @ 0x3
  1041                           
  1042                           
  1043                           ; 2 bytes @ 0x3
  1044  0023                     	ds	1
  1045  0024                     Lcd_Set_Cursor@y:	
  1046  0024                     get_time@hour:	
  1047                           ; 1 bytes @ 0x4
  1048                           
  1049  0024                     ___lldiv@dividend:	
  1050                           ; 1 bytes @ 0x4
  1051                           
  1052  0024                     ___aldiv@dividend:	
  1053                           ; 4 bytes @ 0x4
  1054                           
  1055                           
  1056                           ; 4 bytes @ 0x4
  1057  0024                     	ds	1
  1058  0025                     Lcd_Set_Cursor@temp:	
  1059  0025                     get_time@min:	
  1060                           ; 1 bytes @ 0x5
  1061                           
  1062  0025                     Lcd_Write_String@i:	
  1063                           ; 1 bytes @ 0x5
  1064                           
  1065  0025                     ___lwmod@dividend:	
  1066                           ; 2 bytes @ 0x5
  1067                           
  1068                           
  1069                           ; 2 bytes @ 0x5
  1070  0025                     	ds	1
  1071  0026                     get_time@time_string:	
  1072                           
  1073                           ; 1 bytes @ 0x6
  1074  0026                     	ds	1
  1075  0027                     ??___lwmod:	
  1076                           
  1077                           ; 1 bytes @ 0x7
  1078  0027                     	ds	1
  1079  0028                     ___aldiv@counter:	
  1080  0028                     ___lwmod@counter:	
  1081                           ; 1 bytes @ 0x8
  1082                           
  1083  0028                     ___lldiv@quotient:	
  1084                           ; 1 bytes @ 0x8
  1085                           
  1086                           
  1087                           ; 4 bytes @ 0x8
  1088  0028                     	ds	1
  1089  0029                     ?_sprintf:	
  1090  0029                     sprintf@f:	
  1091                           ; 2 bytes @ 0x9
  1092                           
  1093  0029                     ___aldiv@sign:	
  1094                           ; 1 bytes @ 0x9
  1095                           
  1096                           
  1097                           ; 1 bytes @ 0x9
  1098  0029                     	ds	1
  1099  002A                     ___aldiv@quotient:	
  1100                           
  1101                           ; 4 bytes @ 0xA
  1102  002A                     	ds	2
  1103  002C                     ??_sprintf:	
  1104  002C                     ___lldiv@counter:	
  1105                           ; 1 bytes @ 0xC
  1106                           
  1107                           
  1108                           ; 1 bytes @ 0xC
  1109  002C                     	ds	1
  1110  002D                     ?_I2C_Master_Init:	
  1111  002D                     I2C_Master_Init@c:	
  1112                           ; 1 bytes @ 0xD
  1113                           
  1114                           
  1115                           ; 4 bytes @ 0xD
  1116  002D                     	ds	1
  1117  002E                     ?_UART_Init:	
  1118  002E                     UART_Init@baudrate:	
  1119                           ; 1 bytes @ 0xE
  1120                           
  1121                           
  1122                           ; 4 bytes @ 0xE
  1123  002E                     	ds	1
  1124  002F                     sprintf@ap:	
  1125                           
  1126                           ; 1 bytes @ 0xF
  1127  002F                     	ds	1
  1128  0030                     sprintf@flag:	
  1129                           
  1130                           ; 1 bytes @ 0x10
  1131  0030                     	ds	1
  1132  0031                     sprintf@prec:	
  1133                           
  1134                           ; 1 bytes @ 0x11
  1135  0031                     	ds	1
  1136  0032                     ??_UART_Init:	
  1137  0032                     sprintf@val:	
  1138                           ; 1 bytes @ 0x12
  1139                           
  1140                           
  1141                           ; 2 bytes @ 0x12
  1142  0032                     	ds	2
  1143  0034                     sprintf@sp:	
  1144                           
  1145                           ; 1 bytes @ 0x14
  1146  0034                     	ds	1
  1147  0035                     sprintf@c:	
  1148                           
  1149                           ; 1 bytes @ 0x15
  1150  0035                     	ds	1
  1151  0036                     ??_get_temp:	
  1152                           
  1153                           ; 1 bytes @ 0x16
  1154  0036                     	ds	3
  1155  0039                     get_temp@decimal:	
  1156                           
  1157                           ; 3 bytes @ 0x19
  1158  0039                     	ds	3
  1159  003C                     get_temp@tempMSB:	
  1160                           
  1161                           ; 1 bytes @ 0x1C
  1162  003C                     	ds	1
  1163  003D                     get_temp@temp_string:	
  1164                           
  1165                           ; 1 bytes @ 0x1D
  1166  003D                     	ds	1
  1167  003E                     get_temp@tempLSB:	
  1168                           
  1169                           ; 1 bytes @ 0x1E
  1170  003E                     	ds	1
  1171  003F                     ??_main:	
  1172                           
  1173                           ; 1 bytes @ 0x1F
  1174  003F                     	ds	6
  1175                           
  1176                           	psect	maintext
  1177  001D                     __pmaintext:	
  1178 ;;
  1179 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1180 ;;
  1181 ;; *************** function _main *****************
  1182 ;; Defined at:
  1183 ;;		line 78 in file "mainMaster.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;		None
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;		None
  1188 ;; Return value:  Size  Location     Type
  1189 ;;                  1    wreg      void 
  1190 ;; Registers used:
  1191 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1192 ;; Tracked objects:
  1193 ;;		On entry : B00/0
  1194 ;;		On exit  : 0/0
  1195 ;;		Unchanged: 0/0
  1196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1197 ;;      Params:         0       0       0       0       0
  1198 ;;      Locals:         0       0       0       0       0
  1199 ;;      Temps:          0       6       0       0       0
  1200 ;;      Totals:         0       6       0       0       0
  1201 ;;Total ram usage:        6 bytes
  1202 ;; Hardware stack levels required when called:    5
  1203 ;; This function calls:
  1204 ;;		_Lcd_Clear
  1205 ;;		_Lcd_Set_Cursor
  1206 ;;		_Lcd_Write_Char
  1207 ;;		_Lcd_Write_String
  1208 ;;		_UART_TX_Empty
  1209 ;;		_UART_Write
  1210 ;;		___awdiv
  1211 ;;		___awmod
  1212 ;;		___bmul
  1213 ;;		_close_door
  1214 ;;		_get_IR
  1215 ;;		_get_PIR
  1216 ;;		_get_day
  1217 ;;		_get_hall
  1218 ;;		_get_temp
  1219 ;;		_get_time
  1220 ;;		_get_tripwire
  1221 ;;		_open_door
  1222 ;;		_setup
  1223 ;;		_strcmp
  1224 ;;		_write_RTC
  1225 ;; This function is called by:
  1226 ;;		Startup code after reset
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230                           
  1231                           ;psect for function _main
  1232  001D                     _main:	
  1233                           
  1234                           ;mainMaster.c: 79:     setup();
  1235                           
  1236                           ;incstack = 0
  1237                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1238  001D  120A  158A  258D  120A  118A  	fcall	_setup
  1239                           
  1240                           ;mainMaster.c: 80:     state = 0;
  1241  0022  01F9               	clrf	_state
  1242                           
  1243                           ;mainMaster.c: 81:     Lcd_Clear();
  1244  0023  120A  158A  2148  120A  118A  	fcall	_Lcd_Clear
  1245                           
  1246                           ;mainMaster.c: 82:     PORTAbits.RA7 = 0;
  1247  0028  1283               	bcf	3,5	;RP0=0, select bank0
  1248  0029  1303               	bcf	3,6	;RP1=0, select bank0
  1249  002A  1385               	bcf	5,7	;volatile
  1250                           
  1251                           ;mainMaster.c: 83:     Lcd_Set_Cursor(1,1);
  1252  002B  01F7               	clrf	Lcd_Set_Cursor@b
  1253  002C  0AF7               	incf	Lcd_Set_Cursor@b,f
  1254  002D  3001               	movlw	1
  1255  002E  120A  158A  24E8  120A  118A  	fcall	_Lcd_Set_Cursor
  1256                           
  1257                           ;mainMaster.c: 84:     Lcd_Write_String("Iniciando Sistema");
  1258  0033  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1259  0034  1283               	bcf	3,5	;RP0=0, select bank0
  1260  0035  1303               	bcf	3,6	;RP1=0, select bank0
  1261  0036  00A0               	movwf	Lcd_Write_String@a
  1262  0037  3080               	movlw	128
  1263  0038  00A1               	movwf	Lcd_Write_String@a+1
  1264  0039  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  1265                           
  1266                           ;mainMaster.c: 85:     Lcd_Set_Cursor(2,1);
  1267  003E  01F7               	clrf	Lcd_Set_Cursor@b
  1268  003F  0AF7               	incf	Lcd_Set_Cursor@b,f
  1269  0040  3002               	movlw	2
  1270  0041  120A  158A  24E8  120A  118A  	fcall	_Lcd_Set_Cursor
  1271                           
  1272                           ;mainMaster.c: 86:     Lcd_Write_String("de seguridad");
  1273  0046  301D               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1274  0047  1283               	bcf	3,5	;RP0=0, select bank0
  1275  0048  1303               	bcf	3,6	;RP1=0, select bank0
  1276  0049  00A0               	movwf	Lcd_Write_String@a
  1277  004A  3080               	movlw	128
  1278  004B  00A1               	movwf	Lcd_Write_String@a+1
  1279  004C  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  1280                           
  1281                           ;mainMaster.c: 87:     _delay((unsigned long)((5000)*(8000000/4000.0)));
  1282  0051  3033               	movlw	51
  1283  0052  1283               	bcf	3,5	;RP0=0, select bank0
  1284  0053  1303               	bcf	3,6	;RP1=0, select bank0
  1285  0054  00C1               	movwf	??_main+2
  1286  0055  30BB               	movlw	187
  1287  0056  00C0               	movwf	??_main+1
  1288  0057  30DF               	movlw	223
  1289  0058  00BF               	movwf	??_main
  1290  0059                     u3847:	
  1291  0059  0BBF               	decfsz	??_main,f
  1292  005A  2859               	goto	u3847
  1293  005B  0BC0               	decfsz	??_main+1,f
  1294  005C  2859               	goto	u3847
  1295  005D  0BC1               	decfsz	??_main+2,f
  1296  005E  2859               	goto	u3847
  1297                           
  1298                           ;mainMaster.c: 88:     Lcd_Clear();
  1299  005F  120A  158A  2148  120A  118A  	fcall	_Lcd_Clear
  1300  0064                     l3551:	
  1301                           
  1302                           ;mainMaster.c: 93:         get_temp(temp);
  1303  0064  3059               	movlw	(low (_temp| 0))& (0+255)
  1304  0065  120A  158A  275D  120A  118A  	fcall	_get_temp
  1305                           
  1306                           ;mainMaster.c: 94:         door = get_hall();
  1307  006A  120A  158A  2233  120A  118A  	fcall	_get_hall
  1308  006F  1283               	bcf	3,5	;RP0=0, select bank0
  1309  0070  1303               	bcf	3,6	;RP1=0, select bank0
  1310  0071  00BF               	movwf	??_main
  1311  0072  083F               	movf	??_main,w
  1312  0073  00FA               	movwf	_door
  1313                           
  1314                           ;mainMaster.c: 95:         trip = get_tripwire();
  1315  0074  120A  158A  2256  120A  118A  	fcall	_get_tripwire
  1316  0079  1283               	bcf	3,5	;RP0=0, select bank0
  1317  007A  1303               	bcf	3,6	;RP1=0, select bank0
  1318  007B  00BF               	movwf	??_main
  1319  007C  083F               	movf	??_main,w
  1320  007D  00D7               	movwf	_trip
  1321                           
  1322                           ;mainMaster.c: 97:         PIR = get_PIR();
  1323  007E  120A  158A  2210  120A  118A  	fcall	_get_PIR
  1324  0083  1283               	bcf	3,5	;RP0=0, select bank0
  1325  0084  1303               	bcf	3,6	;RP1=0, select bank0
  1326  0085  00BF               	movwf	??_main
  1327  0086  083F               	movf	??_main,w
  1328  0087  00D6               	movwf	_PIR
  1329                           
  1330                           ;mainMaster.c: 98:         IR = get_IR();
  1331  0088  120A  158A  21ED  120A  118A  	fcall	_get_IR
  1332  008D  1283               	bcf	3,5	;RP0=0, select bank0
  1333  008E  1303               	bcf	3,6	;RP1=0, select bank0
  1334  008F  00BF               	movwf	??_main
  1335  0090  083F               	movf	??_main,w
  1336  0091  00D5               	movwf	_IR
  1337                           
  1338                           ;mainMaster.c: 99:         get_time(time);
  1339  0092  305F               	movlw	(low (_time| 0))& (0+255)
  1340  0093  120A  158A  2645  120A  118A  	fcall	_get_time
  1341                           
  1342                           ;mainMaster.c: 100:         day1 = get_day();
  1343  0098  120A  158A  239C  120A  118A  	fcall	_get_day
  1344  009D  1283               	bcf	3,5	;RP0=0, select bank0
  1345  009E  1303               	bcf	3,6	;RP1=0, select bank0
  1346  009F  00BF               	movwf	??_main
  1347  00A0  083F               	movf	??_main,w
  1348  00A1  00D4               	movwf	_day1
  1349                           
  1350                           ;mainMaster.c: 101:         bank = get_tripwire();
  1351  00A2  120A  158A  2256  120A  118A  	fcall	_get_tripwire
  1352  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  1353  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  1354  00A9  00BF               	movwf	??_main
  1355  00AA  083F               	movf	??_main,w
  1356  00AB  00CC               	movwf	_bank
  1357                           
  1358                           ;mainMaster.c: 104:         if(PORTDbits.RD7 == 1){
  1359  00AC  1F88               	btfss	8,7	;volatile
  1360  00AD  28E3               	goto	l309
  1361                           
  1362                           ;mainMaster.c: 105:             if (bank == 2){
  1363  00AE  3002               	movlw	2
  1364  00AF  064C               	xorwf	_bank,w
  1365  00B0  1D03               	btfss	3,2
  1366  00B1  28CA               	goto	l3583
  1367                           
  1368                           ;mainMaster.c: 106:                 if (change1 == 0){
  1369  00B2  0850               	movf	_change1,w
  1370  00B3  1D03               	btfss	3,2
  1371  00B4  28E5               	goto	l3599
  1372                           
  1373                           ;mainMaster.c: 108:                     alarm = 0;
  1374  00B5  01CD               	clrf	_alarm
  1375                           
  1376                           ;mainMaster.c: 109:                     open_door();
  1377  00B6  120A  158A  21B3  120A  118A  	fcall	_open_door
  1378                           
  1379                           ;mainMaster.c: 110:                     j = 0;
  1380  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  1381  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  1382  00BD  01D2               	clrf	_j
  1383  00BE                     l3581:	
  1384                           ;mainMaster.c: 111:                     while(j < 50){
  1385                           
  1386                           
  1387                           ;mainMaster.c: 111:                     while(j < 50){
  1388  00BE  3032               	movlw	50
  1389  00BF  0252               	subwf	_j,w
  1390  00C0  1803               	btfsc	3,0
  1391  00C1  28C7               	goto	l314
  1392                           
  1393                           ;mainMaster.c: 112:                         j++;
  1394  00C2  3001               	movlw	1
  1395  00C3  00BF               	movwf	??_main
  1396  00C4  083F               	movf	??_main,w
  1397  00C5  07D2               	addwf	_j,f
  1398  00C6  28BE               	goto	l3581
  1399  00C7                     l314:	
  1400                           
  1401                           ;mainMaster.c: 115:                     change1 = 1;
  1402  00C7  01D0               	clrf	_change1
  1403  00C8  0AD0               	incf	_change1,f
  1404  00C9  28E5               	goto	l3599
  1405  00CA                     l3583:	
  1406  00CA  3003               	movlw	3
  1407  00CB  064C               	xorwf	_bank,w
  1408  00CC  1D03               	btfss	3,2
  1409  00CD  28E5               	goto	l3599
  1410                           
  1411                           ;mainMaster.c: 118:                 if (change1 == 0){
  1412  00CE  0850               	movf	_change1,w
  1413  00CF  1D03               	btfss	3,2
  1414  00D0  28E5               	goto	l3599
  1415                           
  1416                           ;mainMaster.c: 120:                     alarm = 0;
  1417  00D1  01CD               	clrf	_alarm
  1418                           
  1419                           ;mainMaster.c: 121:                     close_door();
  1420  00D2  120A  158A  2198  120A  118A  	fcall	_close_door
  1421                           
  1422                           ;mainMaster.c: 122:                     j = 0;
  1423  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  1424  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  1425  00D9  01D2               	clrf	_j
  1426  00DA                     l3595:	
  1427                           ;mainMaster.c: 123:                     while(j < 50){
  1428                           
  1429                           
  1430                           ;mainMaster.c: 123:                     while(j < 50){
  1431  00DA  3032               	movlw	50
  1432  00DB  0252               	subwf	_j,w
  1433  00DC  1803               	btfsc	3,0
  1434  00DD  28C7               	goto	l314
  1435                           
  1436                           ;mainMaster.c: 124:                         j++;
  1437  00DE  3001               	movlw	1
  1438  00DF  00BF               	movwf	??_main
  1439  00E0  083F               	movf	??_main,w
  1440  00E1  07D2               	addwf	_j,f
  1441  00E2  28DA               	goto	l3595
  1442  00E3                     l309:	
  1443                           ;mainMaster.c: 130:         } else if(PORTDbits.RD7 == 0){
  1444                           
  1445  00E3  1F88               	btfss	8,7	;volatile
  1446                           
  1447                           ;mainMaster.c: 131:             change1 = 0;
  1448  00E4  01D0               	clrf	_change1
  1449  00E5                     l3599:	
  1450                           
  1451                           ;mainMaster.c: 134:         if (alarm == 0){
  1452  00E5  084D               	movf	_alarm,w
  1453  00E6  1D03               	btfss	3,2
  1454  00E7  28EE               	goto	l323
  1455                           
  1456                           ;mainMaster.c: 135:             alarm = trip | PIR | IR;
  1457  00E8  0857               	movf	_trip,w
  1458  00E9  0456               	iorwf	_PIR,w
  1459  00EA  0455               	iorwf	_IR,w
  1460  00EB  00BF               	movwf	??_main
  1461  00EC  083F               	movf	??_main,w
  1462  00ED  00CD               	movwf	_alarm
  1463  00EE                     l323:	
  1464                           ;mainMaster.c: 136:         }
  1465                           
  1466                           
  1467                           ;mainMaster.c: 138:         if (alarm == 1){
  1468  00EE  034D               	decf	_alarm,w
  1469  00EF  1D03               	btfss	3,2
  1470  00F0  290A               	goto	l3611
  1471                           
  1472                           ;mainMaster.c: 139:             if (change2 == 0){
  1473  00F1  084F               	movf	_change2,w
  1474  00F2  1D03               	btfss	3,2
  1475  00F3  290B               	goto	l3613
  1476                           
  1477                           ;mainMaster.c: 141:                 close_door();
  1478  00F4  120A  158A  2198  120A  118A  	fcall	_close_door
  1479                           
  1480                           ;mainMaster.c: 142:                 change2 = 1;
  1481  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  1482  00FA  1303               	bcf	3,6	;RP1=0, select bank0
  1483  00FB  01CF               	clrf	_change2
  1484  00FC  0ACF               	incf	_change2,f
  1485                           
  1486                           ;mainMaster.c: 143:                 PORTEbits.RE1 = ~PORTEbits.RE1;
  1487  00FD  1003               	clrc
  1488  00FE  1C89               	btfss	9,1	;volatile
  1489  00FF  1403               	setc
  1490  0100  1C03               	btfss	3,0
  1491  0101  2906               	goto	u3530
  1492  0102  1283               	bcf	3,5	;RP0=0, select bank0
  1493  0103  1303               	bcf	3,6	;RP1=0, select bank0
  1494  0104  1489               	bsf	9,1	;volatile
  1495  0105  290B               	goto	l3613
  1496  0106                     u3530:	
  1497  0106  1283               	bcf	3,5	;RP0=0, select bank0
  1498  0107  1303               	bcf	3,6	;RP1=0, select bank0
  1499  0108  1089               	bcf	9,1	;volatile
  1500  0109  290B               	goto	l3613
  1501  010A                     l3611:	
  1502                           
  1503                           ;mainMaster.c: 146:             change2 = 0;
  1504  010A  01CF               	clrf	_change2
  1505  010B                     l3613:	
  1506                           
  1507                           ;mainMaster.c: 149:         SSPCONbits.SSPEN = 0;
  1508  010B  1294               	bcf	20,5	;volatile
  1509                           
  1510                           ;mainMaster.c: 150:         RCSTAbits.SPEN = 1;
  1511  010C  1798               	bsf	24,7	;volatile
  1512                           
  1513                           ;mainMaster.c: 152:         if (UART_TX_Empty()){
  1514  010D  120A  158A  210A  120A  118A  	fcall	_UART_TX_Empty
  1515  0112  3A00               	xorlw	0
  1516  0113  1903               	skipnz
  1517  0114  2A15               	goto	l3659
  1518                           
  1519                           ;mainMaster.c: 153:             UART_Write(temp[0]);
  1520  0115  1283               	bcf	3,5	;RP0=0, select bank0
  1521  0116  1303               	bcf	3,6	;RP1=0, select bank0
  1522  0117  0859               	movf	_temp,w
  1523  0118  120A  158A  213E  120A  118A  	fcall	_UART_Write
  1524                           
  1525                           ;mainMaster.c: 154:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1526  011D  3003               	movlw	3
  1527  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1528  011F  1303               	bcf	3,6	;RP1=0, select bank0
  1529  0120  00C0               	movwf	??_main+1
  1530  0121  3097               	movlw	151
  1531  0122  00BF               	movwf	??_main
  1532  0123                     u3857:	
  1533  0123  0BBF               	decfsz	??_main,f
  1534  0124  2923               	goto	u3857
  1535  0125  0BC0               	decfsz	??_main+1,f
  1536  0126  2923               	goto	u3857
  1537                           
  1538                           ;mainMaster.c: 155:             UART_Write(temp[1]);
  1539  0127  1283               	bcf	3,5	;RP0=0, select bank0
  1540  0128  1303               	bcf	3,6	;RP1=0, select bank0
  1541  0129  085A               	movf	_temp+1,w
  1542  012A  120A  158A  213E  120A  118A  	fcall	_UART_Write
  1543                           
  1544                           ;mainMaster.c: 156:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1545  012F  3003               	movlw	3
  1546  0130  1283               	bcf	3,5	;RP0=0, select bank0
  1547  0131  1303               	bcf	3,6	;RP1=0, select bank0
  1548  0132  00C0               	movwf	??_main+1
  1549  0133  3097               	movlw	151
  1550  0134  00BF               	movwf	??_main
  1551  0135                     u3867:	
  1552  0135  0BBF               	decfsz	??_main,f
  1553  0136  2935               	goto	u3867
  1554  0137  0BC0               	decfsz	??_main+1,f
  1555  0138  2935               	goto	u3867
  1556                           
  1557                           ;mainMaster.c: 157:             UART_Write(temp[2]);
  1558  0139  1283               	bcf	3,5	;RP0=0, select bank0
  1559  013A  1303               	bcf	3,6	;RP1=0, select bank0
  1560  013B  085B               	movf	_temp+2,w
  1561  013C  120A  158A  213E  120A  118A  	fcall	_UART_Write
  1562                           
  1563                           ;mainMaster.c: 158:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1564  0141  3003               	movlw	3
  1565  0142  1283               	bcf	3,5	;RP0=0, select bank0
  1566  0143  1303               	bcf	3,6	;RP1=0, select bank0
  1567  0144  00C0               	movwf	??_main+1
  1568  0145  3097               	movlw	151
  1569  0146  00BF               	movwf	??_main
  1570  0147                     u3877:	
  1571  0147  0BBF               	decfsz	??_main,f
  1572  0148  2947               	goto	u3877
  1573  0149  0BC0               	decfsz	??_main+1,f
  1574  014A  2947               	goto	u3877
  1575                           
  1576                           ;mainMaster.c: 159:             UART_Write(temp[3]);
  1577  014B  1283               	bcf	3,5	;RP0=0, select bank0
  1578  014C  1303               	bcf	3,6	;RP1=0, select bank0
  1579  014D  085C               	movf	_temp+3,w
  1580  014E  120A  158A  213E  120A  118A  	fcall	_UART_Write
  1581                           
  1582                           ;mainMaster.c: 160:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1583  0153  3003               	movlw	3
  1584  0154  1283               	bcf	3,5	;RP0=0, select bank0
  1585  0155  1303               	bcf	3,6	;RP1=0, select bank0
  1586  0156  00C0               	movwf	??_main+1
  1587  0157  3097               	movlw	151
  1588  0158  00BF               	movwf	??_main
  1589  0159                     u3887:	
  1590  0159  0BBF               	decfsz	??_main,f
  1591  015A  2959               	goto	u3887
  1592  015B  0BC0               	decfsz	??_main+1,f
  1593  015C  2959               	goto	u3887
  1594                           
  1595                           ;mainMaster.c: 161:             UART_Write(temp[4]);
  1596  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1597  015E  1303               	bcf	3,6	;RP1=0, select bank0
  1598  015F  085D               	movf	_temp+4,w
  1599  0160  120A  158A  213E  120A  118A  	fcall	_UART_Write
  1600                           
  1601                           ;mainMaster.c: 162:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1602  0165  3003               	movlw	3
  1603  0166  1283               	bcf	3,5	;RP0=0, select bank0
  1604  0167  1303               	bcf	3,6	;RP1=0, select bank0
  1605  0168  00C0               	movwf	??_main+1
  1606  0169  3097               	movlw	151
  1607  016A  00BF               	movwf	??_main
  1608  016B                     u3897:	
  1609  016B  0BBF               	decfsz	??_main,f
  1610  016C  296B               	goto	u3897
  1611  016D  0BC0               	decfsz	??_main+1,f
  1612  016E  296B               	goto	u3897
  1613                           
  1614                           ;mainMaster.c: 163:             UART_Write(time[0]);
  1615  016F  1283               	bcf	3,5	;RP0=0, select bank0
  1616  0170  1303               	bcf	3,6	;RP1=0, select bank0
  1617  0171  085F               	movf	_time,w
  1618  0172  120A  158A  213E  120A  118A  	fcall	_UART_Write
  1619                           
  1620                           ;mainMaster.c: 164:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1621  0177  3003               	movlw	3
  1622  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1623  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1624  017A  00C0               	movwf	??_main+1
  1625  017B  3097               	movlw	151
  1626  017C  00BF               	movwf	??_main
  1627  017D                     u3907:	
  1628  017D  0BBF               	decfsz	??_main,f
  1629  017E  297D               	goto	u3907
  1630  017F  0BC0               	decfsz	??_main+1,f
  1631  0180  297D               	goto	u3907
  1632                           
  1633                           ;mainMaster.c: 165:             UART_Write(time[1]);
  1634  0181  1283               	bcf	3,5	;RP0=0, select bank0
  1635  0182  1303               	bcf	3,6	;RP1=0, select bank0
  1636  0183  0860               	movf	_time+1,w
  1637  0184  120A  158A  213E  120A  118A  	fcall	_UART_Write
  1638                           
  1639                           ;mainMaster.c: 166:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1640  0189  3003               	movlw	3
  1641  018A  1283               	bcf	3,5	;RP0=0, select bank0
  1642  018B  1303               	bcf	3,6	;RP1=0, select bank0
  1643  018C  00C0               	movwf	??_main+1
  1644  018D  3097               	movlw	151
  1645  018E  00BF               	movwf	??_main
  1646  018F                     u3917:	
  1647  018F  0BBF               	decfsz	??_main,f
  1648  0190  298F               	goto	u3917
  1649  0191  0BC0               	decfsz	??_main+1,f
  1650  0192  298F               	goto	u3917
  1651                           
  1652                           ;mainMaster.c: 167:             UART_Write(time[2]);
  1653  0193  1283               	bcf	3,5	;RP0=0, select bank0
  1654  0194  1303               	bcf	3,6	;RP1=0, select bank0
  1655  0195  0861               	movf	_time+2,w
  1656  0196  120A  158A  213E  120A  118A  	fcall	_UART_Write
  1657                           
  1658                           ;mainMaster.c: 168:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1659  019B  3003               	movlw	3
  1660  019C  1283               	bcf	3,5	;RP0=0, select bank0
  1661  019D  1303               	bcf	3,6	;RP1=0, select bank0
  1662  019E  00C0               	movwf	??_main+1
  1663  019F  3097               	movlw	151
  1664  01A0  00BF               	movwf	??_main
  1665  01A1                     u3927:	
  1666  01A1  0BBF               	decfsz	??_main,f
  1667  01A2  29A1               	goto	u3927
  1668  01A3  0BC0               	decfsz	??_main+1,f
  1669  01A4  29A1               	goto	u3927
  1670                           
  1671                           ;mainMaster.c: 169:             UART_Write(time[3]);
  1672  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  1673  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  1674  01A7  0862               	movf	_time+3,w
  1675  01A8  120A  158A  213E  120A  118A  	fcall	_UART_Write
  1676                           
  1677                           ;mainMaster.c: 170:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1678  01AD  3003               	movlw	3
  1679  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1680  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  1681  01B0  00C0               	movwf	??_main+1
  1682  01B1  3097               	movlw	151
  1683  01B2  00BF               	movwf	??_main
  1684  01B3                     u3937:	
  1685  01B3  0BBF               	decfsz	??_main,f
  1686  01B4  29B3               	goto	u3937
  1687  01B5  0BC0               	decfsz	??_main+1,f
  1688  01B6  29B3               	goto	u3937
  1689                           
  1690                           ;mainMaster.c: 171:             UART_Write(time[4]);
  1691  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  1692  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  1693  01B9  0863               	movf	_time+4,w
  1694  01BA  120A  158A  213E  120A  118A  	fcall	_UART_Write
  1695                           
  1696                           ;mainMaster.c: 172:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1697  01BF  3003               	movlw	3
  1698  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1699  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1700  01C2  00C0               	movwf	??_main+1
  1701  01C3  3097               	movlw	151
  1702  01C4  00BF               	movwf	??_main
  1703  01C5                     u3947:	
  1704  01C5  0BBF               	decfsz	??_main,f
  1705  01C6  29C5               	goto	u3947
  1706  01C7  0BC0               	decfsz	??_main+1,f
  1707  01C8  29C5               	goto	u3947
  1708                           
  1709                           ;mainMaster.c: 173:             UART_Write(door);
  1710  01C9  087A               	movf	_door,w
  1711  01CA  120A  158A  213E  120A  118A  	fcall	_UART_Write
  1712                           
  1713                           ;mainMaster.c: 174:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1714  01CF  3003               	movlw	3
  1715  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1716  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  1717  01D2  00C0               	movwf	??_main+1
  1718  01D3  3097               	movlw	151
  1719  01D4  00BF               	movwf	??_main
  1720  01D5                     u3957:	
  1721  01D5  0BBF               	decfsz	??_main,f
  1722  01D6  29D5               	goto	u3957
  1723  01D7  0BC0               	decfsz	??_main+1,f
  1724  01D8  29D5               	goto	u3957
  1725                           
  1726                           ;mainMaster.c: 175:             UART_Write(trip);
  1727  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  1728  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  1729  01DB  0857               	movf	_trip,w
  1730  01DC  120A  158A  213E  120A  118A  	fcall	_UART_Write
  1731                           
  1732                           ;mainMaster.c: 176:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1733  01E1  3003               	movlw	3
  1734  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  1735  01E3  1303               	bcf	3,6	;RP1=0, select bank0
  1736  01E4  00C0               	movwf	??_main+1
  1737  01E5  3097               	movlw	151
  1738  01E6  00BF               	movwf	??_main
  1739  01E7                     u3967:	
  1740  01E7  0BBF               	decfsz	??_main,f
  1741  01E8  29E7               	goto	u3967
  1742  01E9  0BC0               	decfsz	??_main+1,f
  1743  01EA  29E7               	goto	u3967
  1744                           
  1745                           ;mainMaster.c: 177:             UART_Write(PIR);
  1746  01EB  1283               	bcf	3,5	;RP0=0, select bank0
  1747  01EC  1303               	bcf	3,6	;RP1=0, select bank0
  1748  01ED  0856               	movf	_PIR,w
  1749  01EE  120A  158A  213E  120A  118A  	fcall	_UART_Write
  1750                           
  1751                           ;mainMaster.c: 178:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1752  01F3  3003               	movlw	3
  1753  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  1754  01F5  1303               	bcf	3,6	;RP1=0, select bank0
  1755  01F6  00C0               	movwf	??_main+1
  1756  01F7  3097               	movlw	151
  1757  01F8  00BF               	movwf	??_main
  1758  01F9                     u3977:	
  1759  01F9  0BBF               	decfsz	??_main,f
  1760  01FA  29F9               	goto	u3977
  1761  01FB  0BC0               	decfsz	??_main+1,f
  1762  01FC  29F9               	goto	u3977
  1763                           
  1764                           ;mainMaster.c: 179:             UART_Write(IR);
  1765  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  1766  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  1767  01FF  0855               	movf	_IR,w
  1768  0200  120A  158A  213E  120A  118A  	fcall	_UART_Write
  1769                           
  1770                           ;mainMaster.c: 180:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1771  0205  3003               	movlw	3
  1772  0206  1283               	bcf	3,5	;RP0=0, select bank0
  1773  0207  1303               	bcf	3,6	;RP1=0, select bank0
  1774  0208  00C0               	movwf	??_main+1
  1775  0209  3097               	movlw	151
  1776  020A  00BF               	movwf	??_main
  1777  020B                     u3987:	
  1778  020B  0BBF               	decfsz	??_main,f
  1779  020C  2A0B               	goto	u3987
  1780  020D  0BC0               	decfsz	??_main+1,f
  1781  020E  2A0B               	goto	u3987
  1782                           
  1783                           ;mainMaster.c: 181:             UART_Write('A');
  1784  020F  3041               	movlw	65
  1785  0210  120A  158A  213E  120A  118A  	fcall	_UART_Write
  1786  0215                     l3659:	
  1787                           
  1788                           ;mainMaster.c: 184:         RCSTAbits.SPEN = 0;
  1789  0215  1283               	bcf	3,5	;RP0=0, select bank0
  1790  0216  1303               	bcf	3,6	;RP1=0, select bank0
  1791  0217  1398               	bcf	24,7	;volatile
  1792                           
  1793                           ;mainMaster.c: 185:         SSPCONbits.SSPEN = 1;
  1794  0218  1694               	bsf	20,5	;volatile
  1795                           
  1796                           ;mainMaster.c: 187:         if (door == 1){
  1797  0219  037A               	decf	_door,w
  1798  021A  1D03               	btfss	3,2
  1799  021B  2A1E               	goto	l3667
  1800                           
  1801                           ;mainMaster.c: 188:             val = 8;
  1802  021C  3008               	movlw	8
  1803  021D  2A22               	goto	L1
  1804  021E                     l3667:	
  1805                           ;mainMaster.c: 189:         } else if (door == 0){
  1806                           
  1807  021E  087A               	movf	_door,w
  1808  021F  1D03               	btfss	3,2
  1809  0220  2A39               	goto	l3689
  1810                           
  1811                           ;mainMaster.c: 190:             val = 16;
  1812  0221  3010               	movlw	16
  1813  0222                     L1:	
  1814  0222  00BF               	movwf	??_main
  1815  0223  083F               	movf	??_main,w
  1816  0224  00CA               	movwf	_val
  1817  0225  2A39               	goto	l3689
  1818  0226                     l3671:	
  1819                           
  1820                           ;mainMaster.c: 195:                 day2 = "LUNES    ";
  1821  0226  304C               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1822  0227  2A35               	goto	L8
  1823  0228                     l3673:	
  1824                           ;mainMaster.c: 196:                 break;
  1825                           
  1826                           
  1827                           ;mainMaster.c: 198:                 day2 = "MARTES   ";
  1828  0228  3060               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1829  0229  2A35               	goto	L8
  1830  022A                     l3675:	
  1831                           ;mainMaster.c: 199:                 break;
  1832                           
  1833                           
  1834                           ;mainMaster.c: 201:                 day2 = "MIERCOLES";
  1835  022A  3088               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1836  022B  2A35               	goto	L8
  1837  022C                     l3677:	
  1838                           ;mainMaster.c: 202:                 break;
  1839                           
  1840                           
  1841                           ;mainMaster.c: 204:                 day2 = "JUEVES   ";
  1842  022C  306A               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1843  022D  2A35               	goto	L8
  1844  022E                     l3679:	
  1845                           ;mainMaster.c: 205:                 break;
  1846                           
  1847                           
  1848                           ;mainMaster.c: 207:                 day2 = "VIERNES  ";
  1849  022E  307E               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1850  022F  2A35               	goto	L8
  1851  0230                     l3681:	
  1852                           ;mainMaster.c: 208:                 break;
  1853                           
  1854                           
  1855                           ;mainMaster.c: 210:                 day2 = "SABADO   ";
  1856  0230  3056               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1857  0231  2A35               	goto	L8
  1858  0232                     l3683:	
  1859                           ;mainMaster.c: 211:                 break;
  1860                           
  1861                           
  1862                           ;mainMaster.c: 213:                 day2 = "DOMINGO  ";
  1863  0232  3074               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1864  0233  2A35               	goto	L8
  1865  0234                     l3685:	
  1866                           ;mainMaster.c: 214:                 break;
  1867                           
  1868                           
  1869                           ;mainMaster.c: 216:                 day2 = "         ";
  1870  0234  3042               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1871  0235                     L8:	
  1872  0235  00BF               	movwf	??_main
  1873  0236  083F               	movf	??_main,w
  1874  0237  00D8               	movwf	_day2
  1875                           
  1876                           ;mainMaster.c: 217:                 break;
  1877  0238  2A58               	goto	l3691
  1878  0239                     l3689:	
  1879  0239  0854               	movf	_day1,w
  1880  023A  00BF               	movwf	??_main
  1881  023B  01C0               	clrf	??_main+1
  1882                           
  1883                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1884                           ; Switch size 1, requested type "simple"
  1885                           ; Number of cases is 1, Range of values is 0 to 0
  1886                           ; switch strategies available:
  1887                           ; Name         Instructions Cycles
  1888                           ; simple_byte            4     3 (average)
  1889                           ; direct_byte           11     8 (fixed)
  1890                           ; jumptable            260     6 (fixed)
  1891                           ;	Chosen strategy is simple_byte
  1892  023C  0840               	movf	??_main+1,w
  1893  023D  3A00               	xorlw	0	; case 0
  1894  023E  1903               	skipnz
  1895  023F  2A41               	goto	l3883
  1896  0240  2A34               	goto	l3685
  1897  0241                     l3883:	
  1898                           
  1899                           ; Switch size 1, requested type "simple"
  1900                           ; Number of cases is 7, Range of values is 1 to 7
  1901                           ; switch strategies available:
  1902                           ; Name         Instructions Cycles
  1903                           ; simple_byte           22    12 (average)
  1904                           ; direct_byte           32    11 (fixed)
  1905                           ; jumptable            263     9 (fixed)
  1906                           ;	Chosen strategy is simple_byte
  1907  0241  083F               	movf	??_main,w
  1908  0242  3A01               	xorlw	1	; case 1
  1909  0243  1903               	skipnz
  1910  0244  2A26               	goto	l3671
  1911  0245  3A03               	xorlw	3	; case 2
  1912  0246  1903               	skipnz
  1913  0247  2A28               	goto	l3673
  1914  0248  3A01               	xorlw	1	; case 3
  1915  0249  1903               	skipnz
  1916  024A  2A2A               	goto	l3675
  1917  024B  3A07               	xorlw	7	; case 4
  1918  024C  1903               	skipnz
  1919  024D  2A2C               	goto	l3677
  1920  024E  3A01               	xorlw	1	; case 5
  1921  024F  1903               	skipnz
  1922  0250  2A2E               	goto	l3679
  1923  0251  3A03               	xorlw	3	; case 6
  1924  0252  1903               	skipnz
  1925  0253  2A30               	goto	l3681
  1926  0254  3A01               	xorlw	1	; case 7
  1927  0255  1903               	skipnz
  1928  0256  2A32               	goto	l3683
  1929  0257  2A34               	goto	l3685
  1930  0258                     l3691:	
  1931                           
  1932                           ;mainMaster.c: 221:         if (strcmp(temp,"23.50") > 0){
  1933  0258  30D3               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1934  0259  00BF               	movwf	??_main
  1935  025A  083F               	movf	??_main,w
  1936  025B  00F3               	movwf	strcmp@s2
  1937  025C  3059               	movlw	(low (_temp| 0))& (0+255)
  1938  025D  120A  158A  229D  120A  118A  	fcall	_strcmp
  1939  0262  0874               	movf	?_strcmp+1,w
  1940  0263  3A80               	xorlw	128
  1941  0264  00FF               	movwf	127
  1942  0265  3080               	movlw	128
  1943  0266  027F               	subwf	127,w
  1944  0267  1D03               	skipz
  1945  0268  2A6B               	goto	u3585
  1946  0269  3001               	movlw	1
  1947  026A  0273               	subwf	?_strcmp,w
  1948  026B                     u3585:	
  1949  026B  1C03               	skipc
  1950  026C  2A71               	goto	l341
  1951                           
  1952                           ;mainMaster.c: 222:             PORTAbits.RA0 = 1;
  1953  026D  1283               	bcf	3,5	;RP0=0, select bank0
  1954  026E  1303               	bcf	3,6	;RP1=0, select bank0
  1955  026F  1405               	bsf	5,0	;volatile
  1956                           
  1957                           ;mainMaster.c: 223:         } else {
  1958  0270  2A74               	goto	l342
  1959  0271                     l341:	
  1960                           
  1961                           ;mainMaster.c: 224:             PORTAbits.RA0 = 0;
  1962  0271  1283               	bcf	3,5	;RP0=0, select bank0
  1963  0272  1303               	bcf	3,6	;RP1=0, select bank0
  1964  0273  1005               	bcf	5,0	;volatile
  1965  0274                     l342:	
  1966                           ;mainMaster.c: 225:         }
  1967                           
  1968                           
  1969                           ;mainMaster.c: 228:         if(PORTCbits.RC0 == 1){
  1970  0274  1C07               	btfss	7,0	;volatile
  1971  0275  2A95               	goto	l3709
  1972                           
  1973                           ;mainMaster.c: 229:             if (change == 0){
  1974  0276  0851               	movf	_change,w
  1975  0277  1D03               	btfss	3,2
  1976  0278  2A96               	goto	l3711
  1977                           
  1978                           ;mainMaster.c: 230:                 state++;
  1979  0279  3001               	movlw	1
  1980  027A  00BF               	movwf	??_main
  1981  027B  083F               	movf	??_main,w
  1982  027C  07F9               	addwf	_state,f
  1983                           
  1984                           ;mainMaster.c: 231:                 Lcd_Clear();
  1985  027D  120A  158A  2148  120A  118A  	fcall	_Lcd_Clear
  1986                           
  1987                           ;mainMaster.c: 232:                 if (state > 3){
  1988  0282  3004               	movlw	4
  1989  0283  0279               	subwf	_state,w
  1990  0284  1803               	btfsc	3,0
  1991                           
  1992                           ;mainMaster.c: 233:                     state = 0;
  1993  0285  01F9               	clrf	_state
  1994                           
  1995                           ;mainMaster.c: 235:                 j = 0;
  1996                           
  1997                           ;mainMaster.c: 234:                 }
  1998  0286  1283               	bcf	3,5	;RP0=0, select bank0
  1999  0287  1303               	bcf	3,6	;RP1=0, select bank0
  2000  0288  01D2               	clrf	_j
  2001  0289                     l3707:	
  2002                           ;mainMaster.c: 236:                 while(j < 50){
  2003                           
  2004                           
  2005                           ;mainMaster.c: 236:                 while(j < 50){
  2006  0289  3032               	movlw	50
  2007  028A  0252               	subwf	_j,w
  2008  028B  1803               	btfsc	3,0
  2009  028C  2A92               	goto	l348
  2010                           
  2011                           ;mainMaster.c: 237:                     j++;
  2012  028D  3001               	movlw	1
  2013  028E  00BF               	movwf	??_main
  2014  028F  083F               	movf	??_main,w
  2015  0290  07D2               	addwf	_j,f
  2016  0291  2A89               	goto	l3707
  2017  0292                     l348:	
  2018                           
  2019                           ;mainMaster.c: 240:                 change = 1;
  2020  0292  01D1               	clrf	_change
  2021  0293  0AD1               	incf	_change,f
  2022  0294  2A96               	goto	l3711
  2023  0295                     l3709:	
  2024                           
  2025                           ;mainMaster.c: 243:             change =0;
  2026  0295  01D1               	clrf	_change
  2027  0296                     l3711:	
  2028                           
  2029                           ;mainMaster.c: 246:         if (state == 0){
  2030  0296  0879               	movf	_state,w
  2031  0297  1D03               	btfss	3,2
  2032  0298  2AE5               	goto	l3723
  2033                           
  2034                           ;mainMaster.c: 248:             Lcd_Set_Cursor(1,1);
  2035  0299  01F7               	clrf	Lcd_Set_Cursor@b
  2036  029A  0AF7               	incf	Lcd_Set_Cursor@b,f
  2037  029B  3001               	movlw	1
  2038  029C  120A  158A  24E8  120A  118A  	fcall	_Lcd_Set_Cursor
  2039                           
  2040                           ;mainMaster.c: 249:             Lcd_Write_String(time);
  2041  02A1  305F               	movlw	(low (_time| 0))& (0+255)
  2042  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  2043  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  2044  02A4  00A0               	movwf	Lcd_Write_String@a
  2045  02A5  3000               	movlw	0
  2046  02A6  00A1               	movwf	Lcd_Write_String@a+1
  2047  02A7  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  2048                           
  2049                           ;mainMaster.c: 251:             Lcd_Set_Cursor(1,7);
  2050  02AC  3007               	movlw	7
  2051  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  2052  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  2053  02AF  00BF               	movwf	??_main
  2054  02B0  083F               	movf	??_main,w
  2055  02B1  00F7               	movwf	Lcd_Set_Cursor@b
  2056  02B2  3001               	movlw	1
  2057  02B3  120A  158A  24E8  120A  118A  	fcall	_Lcd_Set_Cursor
  2058                           
  2059                           ;mainMaster.c: 252:             Lcd_Write_String(day2);
  2060  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  2061  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  2062  02BA  0858               	movf	_day2,w
  2063  02BB  00A0               	movwf	Lcd_Write_String@a
  2064  02BC  3000               	movlw	0
  2065  02BD  1D03               	btfss	3,2
  2066  02BE  3080               	movlw	128
  2067  02BF  00A1               	movwf	Lcd_Write_String@a+1
  2068  02C0  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  2069                           
  2070                           ;mainMaster.c: 254:             Lcd_Set_Cursor(2,1);
  2071  02C5  01F7               	clrf	Lcd_Set_Cursor@b
  2072  02C6  0AF7               	incf	Lcd_Set_Cursor@b,f
  2073  02C7  3002               	movlw	2
  2074  02C8  120A  158A  24E8  120A  118A  	fcall	_Lcd_Set_Cursor
  2075                           
  2076                           ;mainMaster.c: 255:             Lcd_Write_String(temp);
  2077  02CD  3059               	movlw	(low (_temp| 0))& (0+255)
  2078  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  2079  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  2080  02D0  00A0               	movwf	Lcd_Write_String@a
  2081  02D1  3000               	movlw	0
  2082  02D2  00A1               	movwf	Lcd_Write_String@a+1
  2083  02D3  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  2084                           
  2085                           ;mainMaster.c: 256:             Lcd_Write_Char(223);
  2086  02D8  30DF               	movlw	223
  2087  02D9  120A  158A  2363  120A  118A  	fcall	_Lcd_Write_Char
  2088                           
  2089                           ;mainMaster.c: 257:             Lcd_Write_Char('C');
  2090  02DE  3043               	movlw	67
  2091  02DF  120A  158A  2363  120A  118A  	fcall	_Lcd_Write_Char
  2092                           
  2093                           ;mainMaster.c: 259:         } else if (state == 1){
  2094  02E4  2864               	goto	l3551
  2095  02E5                     l3723:	
  2096  02E5  0379               	decf	_state,w
  2097  02E6  1D03               	btfss	3,2
  2098  02E7  2B3E               	goto	l3749
  2099                           
  2100                           ;mainMaster.c: 261:             Lcd_Set_Cursor(1,1);
  2101  02E8  01F7               	clrf	Lcd_Set_Cursor@b
  2102  02E9  0AF7               	incf	Lcd_Set_Cursor@b,f
  2103  02EA  3001               	movlw	1
  2104  02EB  120A  158A  24E8  120A  118A  	fcall	_Lcd_Set_Cursor
  2105                           
  2106                           ;mainMaster.c: 262:             if (door == 1){
  2107  02F0  037A               	decf	_door,w
  2108  02F1  1D03               	btfss	3,2
  2109  02F2  2AF5               	goto	l3731
  2110                           
  2111                           ;mainMaster.c: 263:                 Lcd_Write_String("Door OPEN  ");
  2112  02F3  302A               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2113  02F4  2AF6               	goto	L9
  2114  02F5                     l3731:	
  2115                           ;mainMaster.c: 264:             } else {
  2116                           
  2117                           
  2118                           ;mainMaster.c: 265:                 Lcd_Write_String("Door CLOSED");
  2119  02F5  3036               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2120  02F6                     L9:	
  2121  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  2122  02F7  1303               	bcf	3,6	;RP1=0, select bank0
  2123  02F8  00A0               	movwf	Lcd_Write_String@a
  2124  02F9  3080               	movlw	128
  2125  02FA  00A1               	movwf	Lcd_Write_String@a+1
  2126  02FB  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  2127                           
  2128                           ;mainMaster.c: 268:             Lcd_Set_Cursor(2,1);
  2129  0300  01F7               	clrf	Lcd_Set_Cursor@b
  2130  0301  0AF7               	incf	Lcd_Set_Cursor@b,f
  2131  0302  3002               	movlw	2
  2132  0303  120A  158A  24E8  120A  118A  	fcall	_Lcd_Set_Cursor
  2133                           
  2134                           ;mainMaster.c: 269:             if (trip == 1){
  2135  0308  1283               	bcf	3,5	;RP0=0, select bank0
  2136  0309  1303               	bcf	3,6	;RP1=0, select bank0
  2137  030A  0357               	decf	_trip,w
  2138  030B  1D03               	btfss	3,2
  2139  030C  2B0F               	goto	l3739
  2140                           
  2141                           ;mainMaster.c: 270:                 Lcd_Write_String("Trip ON ");
  2142  030D  309B               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2143  030E  2B10               	goto	L10
  2144  030F                     l3739:	
  2145                           ;mainMaster.c: 271:             } else {
  2146                           
  2147                           
  2148                           ;mainMaster.c: 272:                 Lcd_Write_String("Trip OFF");
  2149  030F  30AD               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2150  0310                     L10:	
  2151  0310  00A0               	movwf	Lcd_Write_String@a
  2152  0311  3080               	movlw	128
  2153  0312  00A1               	movwf	Lcd_Write_String@a+1
  2154  0313  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  2155                           
  2156                           ;mainMaster.c: 275:             Lcd_Set_Cursor(2,9);
  2157  0318  3009               	movlw	9
  2158  0319  1283               	bcf	3,5	;RP0=0, select bank0
  2159  031A  1303               	bcf	3,6	;RP1=0, select bank0
  2160  031B  00BF               	movwf	??_main
  2161  031C  083F               	movf	??_main,w
  2162  031D  00F7               	movwf	Lcd_Set_Cursor@b
  2163  031E  3002               	movlw	2
  2164  031F  120A  158A  24E8  120A  118A  	fcall	_Lcd_Set_Cursor
  2165                           
  2166                           ;mainMaster.c: 276:             if (bank == 2){
  2167  0324  3002               	movlw	2
  2168  0325  1283               	bcf	3,5	;RP0=0, select bank0
  2169  0326  1303               	bcf	3,6	;RP1=0, select bank0
  2170  0327  064C               	xorwf	_bank,w
  2171  0328  1D03               	btfss	3,2
  2172  0329  2B34               	goto	l3747
  2173                           
  2174                           ;mainMaster.c: 277:                 Lcd_Write_String("Bank ON ");
  2175  032A  3092               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2176  032B  00A0               	movwf	Lcd_Write_String@a
  2177  032C  3080               	movlw	128
  2178  032D  00A1               	movwf	Lcd_Write_String@a+1
  2179  032E  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  2180                           
  2181                           ;mainMaster.c: 278:             } else {
  2182  0333  2864               	goto	l3551
  2183  0334                     l3747:	
  2184                           
  2185                           ;mainMaster.c: 279:                 Lcd_Write_String("BANK OFF");
  2186  0334  30A4               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  2187  0335  00A0               	movwf	Lcd_Write_String@a
  2188  0336  3080               	movlw	128
  2189  0337  00A1               	movwf	Lcd_Write_String@a+1
  2190  0338  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  2191  033D  2864               	goto	l3551
  2192  033E                     l3749:	
  2193  033E  3002               	movlw	2
  2194  033F  0679               	xorwf	_state,w
  2195  0340  1D03               	btfss	3,2
  2196  0341  2B7B               	goto	l3767
  2197                           
  2198                           ;mainMaster.c: 284:             Lcd_Set_Cursor(1,1);
  2199  0342  01F7               	clrf	Lcd_Set_Cursor@b
  2200  0343  0AF7               	incf	Lcd_Set_Cursor@b,f
  2201  0344  3001               	movlw	1
  2202  0345  120A  158A  24E8  120A  118A  	fcall	_Lcd_Set_Cursor
  2203                           
  2204                           ;mainMaster.c: 285:             if (PIR == 1){
  2205  034A  1283               	bcf	3,5	;RP0=0, select bank0
  2206  034B  1303               	bcf	3,6	;RP1=0, select bank0
  2207  034C  0356               	decf	_PIR,w
  2208  034D  1D03               	btfss	3,2
  2209  034E  2B51               	goto	l3757
  2210                           
  2211                           ;mainMaster.c: 286:                 Lcd_Write_String("PIR ON ");
  2212  034F  30B6               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  2213  0350  2B52               	goto	L11
  2214  0351                     l3757:	
  2215                           ;mainMaster.c: 287:             } else {
  2216                           
  2217                           
  2218                           ;mainMaster.c: 288:                 Lcd_Write_String("PIR OFF");
  2219  0351  30BE               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  2220  0352                     L11:	
  2221  0352  00A0               	movwf	Lcd_Write_String@a
  2222  0353  3080               	movlw	128
  2223  0354  00A1               	movwf	Lcd_Write_String@a+1
  2224  0355  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  2225                           
  2226                           ;mainMaster.c: 291:             Lcd_Set_Cursor(2,1);
  2227  035A  01F7               	clrf	Lcd_Set_Cursor@b
  2228  035B  0AF7               	incf	Lcd_Set_Cursor@b,f
  2229  035C  3002               	movlw	2
  2230  035D  120A  158A  24E8  120A  118A  	fcall	_Lcd_Set_Cursor
  2231                           
  2232                           ;mainMaster.c: 292:             if (IR == 1){
  2233  0362  1283               	bcf	3,5	;RP0=0, select bank0
  2234  0363  1303               	bcf	3,6	;RP1=0, select bank0
  2235  0364  0355               	decf	_IR,w
  2236  0365  1D03               	btfss	3,2
  2237  0366  2B71               	goto	l3765
  2238                           
  2239                           ;mainMaster.c: 293:                 Lcd_Write_String("IR ON ");
  2240  0367  30B7               	movlw	(low (((STR_18+1)-__stringbase)| (0+32768)))& (0+255)
  2241  0368  00A0               	movwf	Lcd_Write_String@a
  2242  0369  3080               	movlw	128
  2243  036A  00A1               	movwf	Lcd_Write_String@a+1
  2244  036B  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  2245                           
  2246                           ;mainMaster.c: 294:             } else {
  2247  0370  2864               	goto	l3551
  2248  0371                     l3765:	
  2249                           
  2250                           ;mainMaster.c: 295:                 Lcd_Write_String("IR OFF");
  2251  0371  30BF               	movlw	(low (((STR_19+1)-__stringbase)| (0+32768)))& (0+255)
  2252  0372  00A0               	movwf	Lcd_Write_String@a
  2253  0373  3080               	movlw	128
  2254  0374  00A1               	movwf	Lcd_Write_String@a+1
  2255  0375  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  2256  037A  2864               	goto	l3551
  2257  037B                     l3767:	
  2258  037B  3003               	movlw	3
  2259  037C  0679               	xorwf	_state,w
  2260  037D  1D03               	btfss	3,2
  2261  037E  2864               	goto	l3551
  2262                           
  2263                           ;mainMaster.c: 298:             Lcd_Set_Cursor(1,1);
  2264  037F  01F7               	clrf	Lcd_Set_Cursor@b
  2265  0380  0AF7               	incf	Lcd_Set_Cursor@b,f
  2266  0381  3001               	movlw	1
  2267  0382  120A  158A  24E8  120A  118A  	fcall	_Lcd_Set_Cursor
  2268                           
  2269                           ;mainMaster.c: 299:             Lcd_Write_String("HORA: ");
  2270  0387  30C6               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  2271  0388  1283               	bcf	3,5	;RP0=0, select bank0
  2272  0389  1303               	bcf	3,6	;RP1=0, select bank0
  2273  038A  00A0               	movwf	Lcd_Write_String@a
  2274  038B  3080               	movlw	128
  2275  038C  00A1               	movwf	Lcd_Write_String@a+1
  2276  038D  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  2277                           
  2278                           ;mainMaster.c: 300:             Lcd_Write_String(time);
  2279  0392  305F               	movlw	(low (_time| 0))& (0+255)
  2280  0393  1283               	bcf	3,5	;RP0=0, select bank0
  2281  0394  1303               	bcf	3,6	;RP1=0, select bank0
  2282  0395  00A0               	movwf	Lcd_Write_String@a
  2283  0396  3000               	movlw	0
  2284  0397  00A1               	movwf	Lcd_Write_String@a+1
  2285  0398  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  2286                           
  2287                           ;mainMaster.c: 302:             Lcd_Set_Cursor(2,1);
  2288  039D  01F7               	clrf	Lcd_Set_Cursor@b
  2289  039E  0AF7               	incf	Lcd_Set_Cursor@b,f
  2290  039F  3002               	movlw	2
  2291  03A0  120A  158A  24E8  120A  118A  	fcall	_Lcd_Set_Cursor
  2292                           
  2293                           ;mainMaster.c: 303:             Lcd_Write_String("DIA: ");
  2294  03A5  30CD               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  2295  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  2296  03A7  1303               	bcf	3,6	;RP1=0, select bank0
  2297  03A8  00A0               	movwf	Lcd_Write_String@a
  2298  03A9  3080               	movlw	128
  2299  03AA  00A1               	movwf	Lcd_Write_String@a+1
  2300  03AB  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  2301                           
  2302                           ;mainMaster.c: 304:             Lcd_Write_String(day2);
  2303  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  2304  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  2305  03B2  0858               	movf	_day2,w
  2306  03B3  00A0               	movwf	Lcd_Write_String@a
  2307  03B4  3000               	movlw	0
  2308  03B5  1D03               	btfss	3,2
  2309  03B6  3080               	movlw	128
  2310  03B7  00A1               	movwf	Lcd_Write_String@a+1
  2311  03B8  120A  158A  2414  120A  118A  	fcall	_Lcd_Write_String
  2312                           
  2313                           ;mainMaster.c: 306:             newhour = (time[0] - '0') * 10 + (time[1] - '0');
  2314  03BD  300A               	movlw	10
  2315  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2316  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  2317  03C0  00BF               	movwf	??_main
  2318  03C1  083F               	movf	??_main,w
  2319  03C2  00F3               	movwf	___bmul@multiplicand
  2320  03C3  085F               	movf	_time,w
  2321  03C4  120A  158A  2153  120A  118A  	fcall	___bmul
  2322  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  2323  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  2324  03CB  0760               	addwf	_time+1,w
  2325  03CC  3EF0               	addlw	240
  2326  03CD  00C0               	movwf	??_main+1
  2327  03CE  0840               	movf	??_main+1,w
  2328  03CF  00F8               	movwf	_newhour
  2329                           
  2330                           ;mainMaster.c: 307:             newmin = (time[3] - '0') * 10 + (time[4] - '0');
  2331  03D0  300A               	movlw	10
  2332  03D1  00BF               	movwf	??_main
  2333  03D2  083F               	movf	??_main,w
  2334  03D3  00F3               	movwf	___bmul@multiplicand
  2335  03D4  0862               	movf	_time+3,w
  2336  03D5  120A  158A  2153  120A  118A  	fcall	___bmul
  2337  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  2338  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  2339  03DC  0763               	addwf	_time+4,w
  2340  03DD  3EF0               	addlw	240
  2341  03DE  00C0               	movwf	??_main+1
  2342  03DF  0840               	movf	??_main+1,w
  2343  03E0  00C7               	movwf	_newmin
  2344                           
  2345                           ;mainMaster.c: 309:             if (PORTDbits.RD4 == 1){
  2346  03E1  1E08               	btfss	8,4	;volatile
  2347  03E2  2BED               	goto	l367
  2348                           
  2349                           ;mainMaster.c: 310:                 newhour++;
  2350  03E3  3001               	movlw	1
  2351  03E4  00BF               	movwf	??_main
  2352  03E5  083F               	movf	??_main,w
  2353  03E6  07F8               	addwf	_newhour,f
  2354                           
  2355                           ;mainMaster.c: 311:                 if (newhour > 23){
  2356  03E7  3018               	movlw	24
  2357  03E8  0278               	subwf	_newhour,w
  2358  03E9  1C03               	skipc
  2359  03EA  2C1D               	goto	l3787
  2360                           
  2361                           ;mainMaster.c: 312:                     newhour = 0;
  2362  03EB  01F8               	clrf	_newhour
  2363                           
  2364                           ;mainMaster.c: 315:             } else if (PORTDbits.RD3 == 1){
  2365  03EC  2C1D               	goto	l3787
  2366  03ED                     l367:	
  2367  03ED  1D88               	btfss	8,3	;volatile
  2368  03EE  2BF9               	goto	l370
  2369                           
  2370                           ;mainMaster.c: 316:                 newhour--;
  2371  03EF  3001               	movlw	1
  2372  03F0  02F8               	subwf	_newhour,f
  2373                           
  2374                           ;mainMaster.c: 317:                 if (newhour == 255){
  2375  03F1  0A78               	incf	_newhour,w
  2376  03F2  1D03               	btfss	3,2
  2377  03F3  2C1D               	goto	l3787
  2378                           
  2379                           ;mainMaster.c: 318:                     newhour = 23;
  2380  03F4  3017               	movlw	23
  2381  03F5  00BF               	movwf	??_main
  2382  03F6  083F               	movf	??_main,w
  2383  03F7  00F8               	movwf	_newhour
  2384  03F8  2C1D               	goto	l3787
  2385  03F9                     l370:	
  2386  03F9  1D08               	btfss	8,2	;volatile
  2387  03FA  2C05               	goto	l373
  2388                           
  2389                           ;mainMaster.c: 322:                 newmin++;
  2390  03FB  3001               	movlw	1
  2391  03FC  00BF               	movwf	??_main
  2392  03FD  083F               	movf	??_main,w
  2393  03FE  07C7               	addwf	_newmin,f
  2394                           
  2395                           ;mainMaster.c: 323:                 if (newmin > 59){
  2396  03FF  303C               	movlw	60
  2397  0400  0247               	subwf	_newmin,w
  2398  0401  1C03               	skipc
  2399  0402  2C1D               	goto	l3787
  2400                           
  2401                           ;mainMaster.c: 324:                     newmin = 0;
  2402  0403  01C7               	clrf	_newmin
  2403  0404  2C1D               	goto	l3787
  2404  0405                     l373:	
  2405  0405  1C88               	btfss	8,1	;volatile
  2406  0406  2C11               	goto	l376
  2407                           
  2408                           ;mainMaster.c: 328:                 newmin--;
  2409  0407  3001               	movlw	1
  2410  0408  02C7               	subwf	_newmin,f
  2411                           
  2412                           ;mainMaster.c: 329:                 if (newmin == 255){
  2413  0409  0A47               	incf	_newmin,w
  2414  040A  1D03               	btfss	3,2
  2415  040B  2C1D               	goto	l3787
  2416                           
  2417                           ;mainMaster.c: 330:                     newmin = 59;
  2418  040C  303B               	movlw	59
  2419  040D  00BF               	movwf	??_main
  2420  040E  083F               	movf	??_main,w
  2421  040F  00C7               	movwf	_newmin
  2422  0410  2C1D               	goto	l3787
  2423  0411                     l376:	
  2424  0411  1C08               	btfss	8,0	;volatile
  2425  0412  2C2C               	goto	l3813
  2426                           
  2427                           ;mainMaster.c: 334:                 day1++;
  2428  0413  3001               	movlw	1
  2429  0414  00BF               	movwf	??_main
  2430  0415  083F               	movf	??_main,w
  2431  0416  07D4               	addwf	_day1,f
  2432                           
  2433                           ;mainMaster.c: 335:                 if (day1 > 7){
  2434  0417  3008               	movlw	8
  2435  0418  0254               	subwf	_day1,w
  2436  0419  1C03               	skipc
  2437  041A  2C1D               	goto	l3787
  2438                           
  2439                           ;mainMaster.c: 336:                     day1 = 1;
  2440  041B  01D4               	clrf	_day1
  2441  041C  0AD4               	incf	_day1,f
  2442  041D                     l3787:	
  2443                           
  2444                           ;mainMaster.c: 314:                 _delay((unsigned long)((100)*(8000000/4000.0)));
  2445  041D  3002               	movlw	2
  2446  041E  1283               	bcf	3,5	;RP0=0, select bank0
  2447  041F  1303               	bcf	3,6	;RP1=0, select bank0
  2448  0420  00C1               	movwf	??_main+2
  2449  0421  3004               	movlw	4
  2450  0422  00C0               	movwf	??_main+1
  2451  0423  30B9               	movlw	185
  2452  0424  00BF               	movwf	??_main
  2453  0425                     u3997:	
  2454  0425  0BBF               	decfsz	??_main,f
  2455  0426  2C25               	goto	u3997
  2456  0427  0BC0               	decfsz	??_main+1,f
  2457  0428  2C25               	goto	u3997
  2458  0429  0BC1               	decfsz	??_main+2,f
  2459  042A  2C25               	goto	u3997
  2460  042B  2C2C               	nop2
  2461  042C                     l3813:	
  2462                           
  2463                           ;mainMaster.c: 341:             hour = ((newhour / 10) << 4) + (newhour % 10);
  2464  042C  300A               	movlw	10
  2465  042D  00F3               	movwf	___awdiv@divisor
  2466  042E  3000               	movlw	0
  2467  042F  00F4               	movwf	___awdiv@divisor+1
  2468  0430  0878               	movf	_newhour,w
  2469  0431  1283               	bcf	3,5	;RP0=0, select bank0
  2470  0432  1303               	bcf	3,6	;RP1=0, select bank0
  2471  0433  00BF               	movwf	??_main
  2472  0434  01C0               	clrf	??_main+1
  2473  0435  083F               	movf	??_main,w
  2474  0436  00F5               	movwf	___awdiv@dividend
  2475  0437  0840               	movf	??_main+1,w
  2476  0438  00F6               	movwf	___awdiv@dividend+1
  2477  0439  120A  118A  27A3  120A  118A  	fcall	___awdiv
  2478  043E  0873               	movf	?___awdiv,w
  2479  043F  1283               	bcf	3,5	;RP0=0, select bank0
  2480  0440  1303               	bcf	3,6	;RP1=0, select bank0
  2481  0441  00C1               	movwf	??_main+2
  2482  0442  3004               	movlw	4
  2483  0443                     u3825:	
  2484  0443  1003               	clrc
  2485  0444  0DC1               	rlf	??_main+2,f
  2486  0445  3EFF               	addlw	-1
  2487  0446  1D03               	skipz
  2488  0447  2C43               	goto	u3825
  2489  0448  300A               	movlw	10
  2490  0449  00F3               	movwf	___awmod@divisor
  2491  044A  3000               	movlw	0
  2492  044B  00F4               	movwf	___awmod@divisor+1
  2493  044C  0878               	movf	_newhour,w
  2494  044D  00C2               	movwf	??_main+3
  2495  044E  01C3               	clrf	??_main+4
  2496  044F  0842               	movf	??_main+3,w
  2497  0450  00F5               	movwf	___awmod@dividend
  2498  0451  0843               	movf	??_main+4,w
  2499  0452  00F6               	movwf	___awmod@dividend+1
  2500  0453  120A  158A  249B  120A  118A  	fcall	___awmod
  2501  0458  0873               	movf	?___awmod,w
  2502  0459  1283               	bcf	3,5	;RP0=0, select bank0
  2503  045A  1303               	bcf	3,6	;RP1=0, select bank0
  2504  045B  0741               	addwf	??_main+2,w
  2505  045C  00C4               	movwf	??_main+5
  2506  045D  0844               	movf	??_main+5,w
  2507  045E  00C9               	movwf	_hour
  2508                           
  2509                           ;mainMaster.c: 342:             min = ((newmin / 10) << 4) + (newmin % 10);
  2510  045F  300A               	movlw	10
  2511  0460  00F3               	movwf	___awdiv@divisor
  2512  0461  3000               	movlw	0
  2513  0462  00F4               	movwf	___awdiv@divisor+1
  2514  0463  0847               	movf	_newmin,w
  2515  0464  00BF               	movwf	??_main
  2516  0465  01C0               	clrf	??_main+1
  2517  0466  083F               	movf	??_main,w
  2518  0467  00F5               	movwf	___awdiv@dividend
  2519  0468  0840               	movf	??_main+1,w
  2520  0469  00F6               	movwf	___awdiv@dividend+1
  2521  046A  120A  118A  27A3  120A  118A  	fcall	___awdiv
  2522  046F  0873               	movf	?___awdiv,w
  2523  0470  1283               	bcf	3,5	;RP0=0, select bank0
  2524  0471  1303               	bcf	3,6	;RP1=0, select bank0
  2525  0472  00C1               	movwf	??_main+2
  2526  0473  3004               	movlw	4
  2527  0474                     u3835:	
  2528  0474  1003               	clrc
  2529  0475  0DC1               	rlf	??_main+2,f
  2530  0476  3EFF               	addlw	-1
  2531  0477  1D03               	skipz
  2532  0478  2C74               	goto	u3835
  2533  0479  300A               	movlw	10
  2534  047A  00F3               	movwf	___awmod@divisor
  2535  047B  3000               	movlw	0
  2536  047C  00F4               	movwf	___awmod@divisor+1
  2537  047D  0847               	movf	_newmin,w
  2538  047E  00C2               	movwf	??_main+3
  2539  047F  01C3               	clrf	??_main+4
  2540  0480  0842               	movf	??_main+3,w
  2541  0481  00F5               	movwf	___awmod@dividend
  2542  0482  0843               	movf	??_main+4,w
  2543  0483  00F6               	movwf	___awmod@dividend+1
  2544  0484  120A  158A  249B  120A  118A  	fcall	___awmod
  2545  0489  0873               	movf	?___awmod,w
  2546  048A  1283               	bcf	3,5	;RP0=0, select bank0
  2547  048B  1303               	bcf	3,6	;RP1=0, select bank0
  2548  048C  0741               	addwf	??_main+2,w
  2549  048D  00C4               	movwf	??_main+5
  2550  048E  0844               	movf	??_main+5,w
  2551  048F  00C8               	movwf	_min
  2552                           
  2553                           ;mainMaster.c: 343:             write_RTC(hour, min, day1);
  2554  0490  0848               	movf	_min,w
  2555  0491  00BF               	movwf	??_main
  2556  0492  083F               	movf	??_main,w
  2557  0493  00F5               	movwf	write_RTC@minutes
  2558  0494  0854               	movf	_day1,w
  2559  0495  00C0               	movwf	??_main+1
  2560  0496  0840               	movf	??_main+1,w
  2561  0497  00F6               	movwf	write_RTC@day
  2562  0498  0849               	movf	_hour,w
  2563  0499  120A  158A  2455  120A  118A  	fcall	_write_RTC
  2564  049E  2864               	goto	l3551
  2565  049F                     __end_of_main:	
  2566                           
  2567                           	psect	text1
  2568  0C55                     __ptext1:	
  2569 ;; *************** function _write_RTC *****************
  2570 ;; Defined at:
  2571 ;;		line 382 in file "mainMaster.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;  hour            1    wreg     unsigned char 
  2574 ;;  minutes         1    5[COMMON] unsigned char 
  2575 ;;  day             1    6[COMMON] unsigned char 
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;  hour            1    7[COMMON] unsigned char 
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  1    wreg      void 
  2580 ;; Registers used:
  2581 ;;		wreg, status,2, status,0, pclath, cstack
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2587 ;;      Params:         2       0       0       0       0
  2588 ;;      Locals:         1       0       0       0       0
  2589 ;;      Temps:          0       2       0       0       0
  2590 ;;      Totals:         3       2       0       0       0
  2591 ;;Total ram usage:        5 bytes
  2592 ;; Hardware stack levels used:    1
  2593 ;; Hardware stack levels required when called:    3
  2594 ;; This function calls:
  2595 ;;		_I2C_Master_Start
  2596 ;;		_I2C_Master_Stop
  2597 ;;		_I2C_Master_Write
  2598 ;; This function is called by:
  2599 ;;		_main
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           
  2604                           ;psect for function _write_RTC
  2605  0C55                     _write_RTC:	
  2606                           
  2607                           ;incstack = 0
  2608                           ; Regs used in _write_RTC: [wreg+status,2+status,0+pclath+cstack]
  2609                           ;write_RTC@hour stored from wreg
  2610  0C55  00F7               	movwf	write_RTC@hour
  2611                           
  2612                           ;mainMaster.c: 384:     I2C_Master_Start();
  2613  0C56  120A  158A  2110  120A  158A  	fcall	_I2C_Master_Start
  2614                           
  2615                           ;mainMaster.c: 385:     I2C_Master_Write(0xD0);
  2616  0C5B  30D0               	movlw	208
  2617  0C5C  00F3               	movwf	I2C_Master_Write@d
  2618  0C5D  3000               	movlw	0
  2619  0C5E  00F4               	movwf	I2C_Master_Write@d+1
  2620  0C5F  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  2621                           
  2622                           ;mainMaster.c: 386:     I2C_Master_Write(0x01);
  2623  0C64  3001               	movlw	1
  2624  0C65  00F3               	movwf	I2C_Master_Write@d
  2625  0C66  3000               	movlw	0
  2626  0C67  00F4               	movwf	I2C_Master_Write@d+1
  2627  0C68  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  2628                           
  2629                           ;mainMaster.c: 387:     I2C_Master_Write(minutes);
  2630  0C6D  0875               	movf	write_RTC@minutes,w
  2631  0C6E  1283               	bcf	3,5	;RP0=0, select bank0
  2632  0C6F  1303               	bcf	3,6	;RP1=0, select bank0
  2633  0C70  00A0               	movwf	??_write_RTC
  2634  0C71  01A1               	clrf	??_write_RTC+1
  2635  0C72  0820               	movf	??_write_RTC,w
  2636  0C73  00F3               	movwf	I2C_Master_Write@d
  2637  0C74  0821               	movf	??_write_RTC+1,w
  2638  0C75  00F4               	movwf	I2C_Master_Write@d+1
  2639  0C76  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  2640                           
  2641                           ;mainMaster.c: 388:     I2C_Master_Write(hour);
  2642  0C7B  0877               	movf	write_RTC@hour,w
  2643  0C7C  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0C7D  1303               	bcf	3,6	;RP1=0, select bank0
  2645  0C7E  00A0               	movwf	??_write_RTC
  2646  0C7F  01A1               	clrf	??_write_RTC+1
  2647  0C80  0820               	movf	??_write_RTC,w
  2648  0C81  00F3               	movwf	I2C_Master_Write@d
  2649  0C82  0821               	movf	??_write_RTC+1,w
  2650  0C83  00F4               	movwf	I2C_Master_Write@d+1
  2651  0C84  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  2652                           
  2653                           ;mainMaster.c: 389:     I2C_Master_Write(day);
  2654  0C89  0876               	movf	write_RTC@day,w
  2655  0C8A  1283               	bcf	3,5	;RP0=0, select bank0
  2656  0C8B  1303               	bcf	3,6	;RP1=0, select bank0
  2657  0C8C  00A0               	movwf	??_write_RTC
  2658  0C8D  01A1               	clrf	??_write_RTC+1
  2659  0C8E  0820               	movf	??_write_RTC,w
  2660  0C8F  00F3               	movwf	I2C_Master_Write@d
  2661  0C90  0821               	movf	??_write_RTC+1,w
  2662  0C91  00F4               	movwf	I2C_Master_Write@d+1
  2663  0C92  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  2664                           
  2665                           ;mainMaster.c: 390:     I2C_Master_Stop();
  2666  0C97  120A  158A  2117   	fcall	_I2C_Master_Stop
  2667  0C9A  0008               	return
  2668  0C9B                     __end_of_write_RTC:	
  2669                           
  2670                           	psect	text2
  2671  0A9D                     __ptext2:	
  2672 ;; *************** function _strcmp *****************
  2673 ;; Defined at:
  2674 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;  s1              1    wreg     PTR const unsigned char 
  2677 ;;		 -> temp(6), 
  2678 ;;  s2              1    3[COMMON] PTR const unsigned char 
  2679 ;;		 -> STR_11(6), 
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;  s1              1    1[BANK0 ] PTR const unsigned char 
  2682 ;;		 -> temp(6), 
  2683 ;;  r               1    0[BANK0 ] char 
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  2    3[COMMON] int 
  2686 ;; Registers used:
  2687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2693 ;;      Params:         2       0       0       0       0
  2694 ;;      Locals:         0       2       0       0       0
  2695 ;;      Temps:          3       0       0       0       0
  2696 ;;      Totals:         5       2       0       0       0
  2697 ;;Total ram usage:        7 bytes
  2698 ;; Hardware stack levels used:    2
  2699 ;; Hardware stack levels required when called:    1
  2700 ;; This function calls:
  2701 ;;		Nothing
  2702 ;; This function is called by:
  2703 ;;		_main
  2704 ;; This function uses a non-reentrant model
  2705 ;;
  2706                           
  2707                           
  2708                           ;psect for function _strcmp
  2709  0A9D                     _strcmp:	
  2710                           
  2711                           ;incstack = 0
  2712                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  2713                           ;strcmp@s1 stored from wreg
  2714  0A9D  1283               	bcf	3,5	;RP0=0, select bank0
  2715  0A9E  1303               	bcf	3,6	;RP1=0, select bank0
  2716  0A9F  00A1               	movwf	strcmp@s1
  2717  0AA0  2AAE               	goto	l3483
  2718  0AA1                     l3485:	
  2719  0AA1  0821               	movf	strcmp@s1,w
  2720  0AA2  0084               	movwf	4
  2721  0AA3  0800               	movf	0,w
  2722  0AA4  1903               	btfsc	3,2
  2723  0AA5  2AC3               	goto	l3487
  2724  0AA6  3001               	movlw	1
  2725  0AA7  00F5               	movwf	??_strcmp
  2726  0AA8  0875               	movf	??_strcmp,w
  2727  0AA9  07A1               	addwf	strcmp@s1,f
  2728  0AAA  3001               	movlw	1
  2729  0AAB  00F5               	movwf	??_strcmp
  2730  0AAC  0875               	movf	??_strcmp,w
  2731  0AAD  07F3               	addwf	strcmp@s2,f
  2732  0AAE                     l3483:	
  2733  0AAE  0873               	movf	strcmp@s2,w
  2734  0AAF  0084               	movwf	4
  2735  0AB0  120A  118A  250A  120A  158A  	fcall	stringdir
  2736  0AB5  00F5               	movwf	??_strcmp
  2737  0AB6  0821               	movf	strcmp@s1,w
  2738  0AB7  0084               	movwf	4
  2739  0AB8  1383               	bcf	3,7	;select IRP bank0
  2740  0AB9  0800               	movf	0,w
  2741  0ABA  00F6               	movwf	??_strcmp+1
  2742  0ABB  0875               	movf	??_strcmp,w
  2743  0ABC  0276               	subwf	??_strcmp+1,w
  2744  0ABD  00F7               	movwf	??_strcmp+2
  2745  0ABE  0877               	movf	??_strcmp+2,w
  2746  0ABF  00A0               	movwf	strcmp@r
  2747  0AC0  0820               	movf	strcmp@r,w
  2748  0AC1  1903               	btfsc	3,2
  2749  0AC2  2AA1               	goto	l3485
  2750  0AC3                     l3487:	
  2751  0AC3  0820               	movf	strcmp@r,w
  2752  0AC4  00F3               	movwf	?_strcmp
  2753  0AC5  01F4               	clrf	?_strcmp+1
  2754  0AC6  1BF3               	btfsc	?_strcmp,7
  2755  0AC7  03F4               	decf	?_strcmp+1,f
  2756  0AC8  0008               	return
  2757  0AC9                     __end_of_strcmp:	
  2758                           
  2759                           	psect	text3
  2760  0D8D                     __ptext3:	
  2761 ;; *************** function _setup *****************
  2762 ;; Defined at:
  2763 ;;		line 348 in file "mainMaster.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;		None
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;		None
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      void 
  2770 ;; Registers used:
  2771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2772 ;; Tracked objects:
  2773 ;;		On entry : 0/0
  2774 ;;		On exit  : 0/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2777 ;;      Params:         0       0       0       0       0
  2778 ;;      Locals:         0       0       0       0       0
  2779 ;;      Temps:          0       0       0       0       0
  2780 ;;      Totals:         0       0       0       0       0
  2781 ;;Total ram usage:        0 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; Hardware stack levels required when called:    4
  2784 ;; This function calls:
  2785 ;;		_I2C_Master_Init
  2786 ;;		_Lcd_Init
  2787 ;;		_UART_Init
  2788 ;;		_initOscilador
  2789 ;; This function is called by:
  2790 ;;		_main
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           
  2795                           ;psect for function _setup
  2796  0D8D                     _setup:	
  2797                           
  2798                           ;mainMaster.c: 349:     initOscilador(7);
  2799                           
  2800                           ;incstack = 0
  2801                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2802  0D8D  3007               	movlw	7
  2803  0D8E  120A  158A  2538  120A  158A  	fcall	_initOscilador
  2804                           
  2805                           ;mainMaster.c: 350:     ANSELH = 0;
  2806  0D93  1683               	bsf	3,5	;RP0=1, select bank3
  2807  0D94  1703               	bsf	3,6	;RP1=1, select bank3
  2808  0D95  0189               	clrf	9	;volatile
  2809                           
  2810                           ;mainMaster.c: 351:     ANSEL = 0;
  2811  0D96  0188               	clrf	8	;volatile
  2812                           
  2813                           ;mainMaster.c: 352:     TRISB = 0;
  2814  0D97  1683               	bsf	3,5	;RP0=1, select bank1
  2815  0D98  1303               	bcf	3,6	;RP1=0, select bank1
  2816  0D99  0186               	clrf	6	;volatile
  2817                           
  2818                           ;mainMaster.c: 353:     TRISA = 0;
  2819  0D9A  0185               	clrf	5	;volatile
  2820                           
  2821                           ;mainMaster.c: 354:     TRISD = 0xFF;
  2822  0D9B  30FF               	movlw	255
  2823  0D9C  0088               	movwf	8	;volatile
  2824                           
  2825                           ;mainMaster.c: 355:     PORTB = 0;
  2826  0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  2827  0D9E  1303               	bcf	3,6	;RP1=0, select bank0
  2828  0D9F  0186               	clrf	6	;volatile
  2829                           
  2830                           ;mainMaster.c: 356:     PORTA = 0;
  2831  0DA0  0185               	clrf	5	;volatile
  2832                           
  2833                           ;mainMaster.c: 357:     TRISC = 0x01;
  2834  0DA1  3001               	movlw	1
  2835  0DA2  1683               	bsf	3,5	;RP0=1, select bank1
  2836  0DA3  1303               	bcf	3,6	;RP1=0, select bank1
  2837  0DA4  0087               	movwf	7	;volatile
  2838                           
  2839                           ;mainMaster.c: 358:     PORTC = 0;
  2840  0DA5  1283               	bcf	3,5	;RP0=0, select bank0
  2841  0DA6  1303               	bcf	3,6	;RP1=0, select bank0
  2842  0DA7  0187               	clrf	7	;volatile
  2843                           
  2844                           ;mainMaster.c: 359:     PORTE = 0;
  2845  0DA8  0189               	clrf	9	;volatile
  2846                           
  2847                           ;mainMaster.c: 360:     TRISE = 0;
  2848  0DA9  1683               	bsf	3,5	;RP0=1, select bank1
  2849  0DAA  1303               	bcf	3,6	;RP1=0, select bank1
  2850  0DAB  0189               	clrf	9	;volatile
  2851                           
  2852                           ;mainMaster.c: 361:     i = 0;
  2853  0DAC  1283               	bcf	3,5	;RP0=0, select bank0
  2854  0DAD  1303               	bcf	3,6	;RP1=0, select bank0
  2855  0DAE  01D3               	clrf	_i
  2856                           
  2857                           ;mainMaster.c: 362:     door = 0;
  2858  0DAF  01FA               	clrf	_door
  2859                           
  2860                           ;mainMaster.c: 363:     trip = 0;
  2861  0DB0  01D7               	clrf	_trip
  2862                           
  2863                           ;mainMaster.c: 364:     alarm = 0;
  2864  0DB1  01CD               	clrf	_alarm
  2865                           
  2866                           ;mainMaster.c: 365:     IR = 0;
  2867  0DB2  01D5               	clrf	_IR
  2868                           
  2869                           ;mainMaster.c: 366:     PIR = 0;
  2870  0DB3  01D6               	clrf	_PIR
  2871                           
  2872                           ;mainMaster.c: 367:     OPTION_REGbits.T0CS = 0;
  2873  0DB4  1683               	bsf	3,5	;RP0=1, select bank1
  2874  0DB5  1303               	bcf	3,6	;RP1=0, select bank1
  2875  0DB6  1281               	bcf	1,5	;volatile
  2876                           
  2877                           ;mainMaster.c: 368:     OPTION_REGbits.T0SE = 0;
  2878  0DB7  1201               	bcf	1,4	;volatile
  2879                           
  2880                           ;mainMaster.c: 369:     OPTION_REGbits.PSA = 1;
  2881  0DB8  1581               	bsf	1,3	;volatile
  2882                           
  2883                           ;mainMaster.c: 370:     OPTION_REGbits.PS2 = 0;
  2884  0DB9  1101               	bcf	1,2	;volatile
  2885                           
  2886                           ;mainMaster.c: 371:     OPTION_REGbits.PS1 = 0;
  2887  0DBA  1081               	bcf	1,1	;volatile
  2888                           
  2889                           ;mainMaster.c: 372:     OPTION_REGbits.PS0 = 0;
  2890  0DBB  1001               	bcf	1,0	;volatile
  2891                           
  2892                           ;mainMaster.c: 373:     TMR0 = 56;
  2893  0DBC  3038               	movlw	56
  2894  0DBD  1283               	bcf	3,5	;RP0=0, select bank0
  2895  0DBE  1303               	bcf	3,6	;RP1=0, select bank0
  2896  0DBF  0081               	movwf	1	;volatile
  2897                           
  2898                           ;mainMaster.c: 374:     INTCONbits.T0IF = 0;
  2899  0DC0  110B               	bcf	11,2	;volatile
  2900                           
  2901                           ;mainMaster.c: 375:     INTCONbits.T0IE = 1;
  2902  0DC1  168B               	bsf	11,5	;volatile
  2903                           
  2904                           ;mainMaster.c: 376:     INTCONbits.GIE = 1;
  2905  0DC2  178B               	bsf	11,7	;volatile
  2906                           
  2907                           ;mainMaster.c: 377:     Lcd_Init();
  2908  0DC3  120A  118A  249F  120A  158A  	fcall	_Lcd_Init
  2909                           
  2910                           ;mainMaster.c: 378:     UART_Init(9600);
  2911  0DC8  3000               	movlw	0
  2912  0DC9  1283               	bcf	3,5	;RP0=0, select bank0
  2913  0DCA  1303               	bcf	3,6	;RP1=0, select bank0
  2914  0DCB  00B1               	movwf	UART_Init@baudrate+3
  2915  0DCC  3000               	movlw	0
  2916  0DCD  00B0               	movwf	UART_Init@baudrate+2
  2917  0DCE  3025               	movlw	37
  2918  0DCF  00AF               	movwf	UART_Init@baudrate+1
  2919  0DD0  3080               	movlw	128
  2920  0DD1  00AE               	movwf	UART_Init@baudrate
  2921  0DD2  120A  118A  26CB  120A  158A  	fcall	_UART_Init
  2922                           
  2923                           ;mainMaster.c: 379:     I2C_Master_Init(100000);
  2924  0DD7  3000               	movlw	0
  2925  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  2926  0DD9  1303               	bcf	3,6	;RP1=0, select bank0
  2927  0DDA  00B0               	movwf	I2C_Master_Init@c+3
  2928  0DDB  3001               	movlw	1
  2929  0DDC  00AF               	movwf	I2C_Master_Init@c+2
  2930  0DDD  3086               	movlw	134
  2931  0DDE  00AE               	movwf	I2C_Master_Init@c+1
  2932  0DDF  30A0               	movlw	160
  2933  0DE0  00AD               	movwf	I2C_Master_Init@c
  2934  0DE1  120A  158A  232B   	fcall	_I2C_Master_Init
  2935  0DE4  0008               	return
  2936  0DE5                     __end_of_setup:	
  2937                           
  2938                           	psect	text4
  2939  0D38                     __ptext4:	
  2940 ;; *************** function _initOscilador *****************
  2941 ;; Defined at:
  2942 ;;		line 11 in file "./Oscilador.h"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;  option          1    wreg     unsigned char 
  2945 ;; Auto vars:     Size  Location     Type
  2946 ;;  option          1    5[COMMON] unsigned char 
  2947 ;; Return value:  Size  Location     Type
  2948 ;;                  1    wreg      void 
  2949 ;; Registers used:
  2950 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2951 ;; Tracked objects:
  2952 ;;		On entry : 0/0
  2953 ;;		On exit  : 0/0
  2954 ;;		Unchanged: 0/0
  2955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2956 ;;      Params:         0       0       0       0       0
  2957 ;;      Locals:         1       0       0       0       0
  2958 ;;      Temps:          2       0       0       0       0
  2959 ;;      Totals:         3       0       0       0       0
  2960 ;;Total ram usage:        3 bytes
  2961 ;; Hardware stack levels used:    1
  2962 ;; Hardware stack levels required when called:    1
  2963 ;; This function calls:
  2964 ;;		Nothing
  2965 ;; This function is called by:
  2966 ;;		_setup
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           
  2971                           ;psect for function _initOscilador
  2972  0D38                     _initOscilador:	
  2973                           
  2974                           ;incstack = 0
  2975                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  2976                           ;initOscilador@option stored from wreg
  2977  0D38  00F5               	movwf	initOscilador@option
  2978                           
  2979                           ;./Oscilador.h: 13: 
  2980  0D39  2D69               	goto	l2323
  2981  0D3A                     l2303:	
  2982                           
  2983                           ;./Oscilador.h: 16:         case 3:
  2984  0D3A  308F               	movlw	-113
  2985  0D3B  1683               	bsf	3,5	;RP0=1, select bank1
  2986  0D3C  1303               	bcf	3,6	;RP1=0, select bank1
  2987  0D3D  058F               	andwf	15,f	;volatile
  2988                           
  2989                           ;./Oscilador.h: 17: 
  2990  0D3E  2D8B               	goto	l201
  2991  0D3F                     l2305:	
  2992                           
  2993                           ;./Oscilador.h: 20:         case 4:
  2994  0D3F  1683               	bsf	3,5	;RP0=1, select bank1
  2995  0D40  1303               	bcf	3,6	;RP1=0, select bank1
  2996  0D41  080F               	movf	15,w	;volatile
  2997  0D42  398F               	andlw	-113
  2998  0D43  3810               	iorlw	16
  2999  0D44  2D62               	goto	L16
  3000  0D45                     l2307:	
  3001                           ;./Oscilador.h: 21: 
  3002                           
  3003                           
  3004                           ;./Oscilador.h: 24:         case 5:
  3005  0D45  1683               	bsf	3,5	;RP0=1, select bank1
  3006  0D46  1303               	bcf	3,6	;RP1=0, select bank1
  3007  0D47  080F               	movf	15,w	;volatile
  3008  0D48  398F               	andlw	-113
  3009  0D49  3820               	iorlw	32
  3010  0D4A  2D62               	goto	L16
  3011  0D4B                     l2309:	
  3012                           ;./Oscilador.h: 25: 
  3013                           
  3014                           
  3015                           ;./Oscilador.h: 28:         case 6:
  3016  0D4B  1683               	bsf	3,5	;RP0=1, select bank1
  3017  0D4C  1303               	bcf	3,6	;RP1=0, select bank1
  3018  0D4D  080F               	movf	15,w	;volatile
  3019  0D4E  398F               	andlw	-113
  3020  0D4F  3830               	iorlw	48
  3021  0D50  2D62               	goto	L16
  3022  0D51                     l2311:	
  3023                           ;./Oscilador.h: 29: 
  3024                           
  3025                           
  3026                           ;./Oscilador.h: 32:         case 7:
  3027  0D51  1683               	bsf	3,5	;RP0=1, select bank1
  3028  0D52  1303               	bcf	3,6	;RP1=0, select bank1
  3029  0D53  080F               	movf	15,w	;volatile
  3030  0D54  398F               	andlw	-113
  3031  0D55  3840               	iorlw	64
  3032  0D56  2D62               	goto	L16
  3033  0D57                     l2313:	
  3034                           ;./Oscilador.h: 33: 
  3035                           
  3036                           
  3037                           ;./Oscilador.h: 36:         default:
  3038  0D57  1683               	bsf	3,5	;RP0=1, select bank1
  3039  0D58  1303               	bcf	3,6	;RP1=0, select bank1
  3040  0D59  080F               	movf	15,w	;volatile
  3041  0D5A  398F               	andlw	-113
  3042  0D5B  3850               	iorlw	80
  3043  0D5C  2D62               	goto	L16
  3044  0D5D                     l2315:	
  3045                           ;./Oscilador.h: 37: 
  3046                           
  3047                           
  3048                           ;./Oscilador.h: 40:     }
  3049  0D5D  1683               	bsf	3,5	;RP0=1, select bank1
  3050  0D5E  1303               	bcf	3,6	;RP1=0, select bank1
  3051  0D5F  080F               	movf	15,w	;volatile
  3052  0D60  398F               	andlw	-113
  3053  0D61  3860               	iorlw	96
  3054  0D62                     L16:	
  3055  0D62  008F               	movwf	15	;volatile
  3056                           
  3057                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  3058  0D63  2D8B               	goto	l201
  3059  0D64                     l2317:	
  3060  0D64                     l2319:	
  3061  0D64  3070               	movlw	112
  3062  0D65  1683               	bsf	3,5	;RP0=1, select bank1
  3063  0D66  1303               	bcf	3,6	;RP1=0, select bank1
  3064  0D67  048F               	iorwf	15,f	;volatile
  3065  0D68  2D8B               	goto	l201
  3066  0D69                     l2323:	
  3067  0D69  0875               	movf	initOscilador@option,w
  3068  0D6A  00F3               	movwf	??_initOscilador
  3069  0D6B  01F4               	clrf	??_initOscilador+1
  3070                           
  3071                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3072                           ; Switch size 1, requested type "simple"
  3073                           ; Number of cases is 1, Range of values is 0 to 0
  3074                           ; switch strategies available:
  3075                           ; Name         Instructions Cycles
  3076                           ; simple_byte            4     3 (average)
  3077                           ; direct_byte           11     8 (fixed)
  3078                           ; jumptable            260     6 (fixed)
  3079                           ;	Chosen strategy is simple_byte
  3080  0D6C  0874               	movf	??_initOscilador+1,w
  3081  0D6D  3A00               	xorlw	0	; case 0
  3082  0D6E  1903               	skipnz
  3083  0D6F  2D71               	goto	l3885
  3084  0D70  2D64               	goto	l2319
  3085  0D71                     l3885:	
  3086                           
  3087                           ; Switch size 1, requested type "simple"
  3088                           ; Number of cases is 8, Range of values is 0 to 7
  3089                           ; switch strategies available:
  3090                           ; Name         Instructions Cycles
  3091                           ; simple_byte           25    13 (average)
  3092                           ; direct_byte           32     8 (fixed)
  3093                           ; jumptable            260     6 (fixed)
  3094                           ;	Chosen strategy is simple_byte
  3095  0D71  0873               	movf	??_initOscilador,w
  3096  0D72  3A00               	xorlw	0	; case 0
  3097  0D73  1903               	skipnz
  3098  0D74  2D3A               	goto	l2303
  3099  0D75  3A01               	xorlw	1	; case 1
  3100  0D76  1903               	skipnz
  3101  0D77  2D3F               	goto	l2305
  3102  0D78  3A03               	xorlw	3	; case 2
  3103  0D79  1903               	skipnz
  3104  0D7A  2D45               	goto	l2307
  3105  0D7B  3A01               	xorlw	1	; case 3
  3106  0D7C  1903               	skipnz
  3107  0D7D  2D4B               	goto	l2309
  3108  0D7E  3A07               	xorlw	7	; case 4
  3109  0D7F  1903               	skipnz
  3110  0D80  2D51               	goto	l2311
  3111  0D81  3A01               	xorlw	1	; case 5
  3112  0D82  1903               	skipnz
  3113  0D83  2D57               	goto	l2313
  3114  0D84  3A03               	xorlw	3	; case 6
  3115  0D85  1903               	skipnz
  3116  0D86  2D5D               	goto	l2315
  3117  0D87  3A01               	xorlw	1	; case 7
  3118  0D88  1903               	skipnz
  3119  0D89  2D64               	goto	l2317
  3120  0D8A  2D64               	goto	l2319
  3121  0D8B                     l201:	
  3122  0D8B  140F               	bsf	15,0	;volatile
  3123  0D8C  0008               	return
  3124  0D8D                     __end_of_initOscilador:	
  3125                           
  3126                           	psect	text5
  3127  06CB                     __ptext5:	
  3128 ;; *************** function _UART_Init *****************
  3129 ;; Defined at:
  3130 ;;		line 8 in file "./UART.h"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  baudrate        4   14[BANK0 ] const long 
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;  x               2    4[COMMON] unsigned int 
  3135 ;; Return value:  Size  Location     Type
  3136 ;;                  1    wreg      unsigned char 
  3137 ;; Registers used:
  3138 ;;		wreg, status,2, status,0, pclath, cstack
  3139 ;; Tracked objects:
  3140 ;;		On entry : 0/0
  3141 ;;		On exit  : 0/0
  3142 ;;		Unchanged: 0/0
  3143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3144 ;;      Params:         0       4       0       0       0
  3145 ;;      Locals:         2       0       0       0       0
  3146 ;;      Temps:          0      12       0       0       0
  3147 ;;      Totals:         2      16       0       0       0
  3148 ;;Total ram usage:       18 bytes
  3149 ;; Hardware stack levels used:    1
  3150 ;; Hardware stack levels required when called:    2
  3151 ;; This function calls:
  3152 ;;		___aldiv
  3153 ;; This function is called by:
  3154 ;;		_setup
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           
  3159                           ;psect for function _UART_Init
  3160  06CB                     _UART_Init:	
  3161                           
  3162                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
  3163                           
  3164                           ;incstack = 0
  3165                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  3166  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  3167  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  3168  06CD  082E               	movf	UART_Init@baudrate,w
  3169  06CE  00B2               	movwf	??_UART_Init
  3170  06CF  082F               	movf	UART_Init@baudrate+1,w
  3171  06D0  00B3               	movwf	??_UART_Init+1
  3172  06D1  0830               	movf	UART_Init@baudrate+2,w
  3173  06D2  00B4               	movwf	??_UART_Init+2
  3174  06D3  0831               	movf	UART_Init@baudrate+3,w
  3175  06D4  00B5               	movwf	??_UART_Init+3
  3176  06D5  3006               	movlw	6
  3177  06D6                     u3055:	
  3178  06D6  1003               	clrc
  3179  06D7  0DB2               	rlf	??_UART_Init,f
  3180  06D8  0DB3               	rlf	??_UART_Init+1,f
  3181  06D9  0DB4               	rlf	??_UART_Init+2,f
  3182  06DA  0DB5               	rlf	??_UART_Init+3,f
  3183  06DB  3EFF               	addlw	-1
  3184  06DC  1D03               	skipz
  3185  06DD  2ED6               	goto	u3055
  3186  06DE  0835               	movf	??_UART_Init+3,w
  3187  06DF  00A3               	movwf	___aldiv@divisor+3
  3188  06E0  0834               	movf	??_UART_Init+2,w
  3189  06E1  00A2               	movwf	___aldiv@divisor+2
  3190  06E2  0833               	movf	??_UART_Init+1,w
  3191  06E3  00A1               	movwf	___aldiv@divisor+1
  3192  06E4  0832               	movf	??_UART_Init,w
  3193  06E5  00A0               	movwf	___aldiv@divisor
  3194  06E6  082E               	movf	UART_Init@baudrate,w
  3195  06E7  00B6               	movwf	??_UART_Init+4
  3196  06E8  082F               	movf	UART_Init@baudrate+1,w
  3197  06E9  00B7               	movwf	??_UART_Init+5
  3198  06EA  0830               	movf	UART_Init@baudrate+2,w
  3199  06EB  00B8               	movwf	??_UART_Init+6
  3200  06EC  0831               	movf	UART_Init@baudrate+3,w
  3201  06ED  00B9               	movwf	??_UART_Init+7
  3202  06EE  3006               	movlw	6
  3203  06EF                     u3065:	
  3204  06EF  1003               	clrc
  3205  06F0  0DB6               	rlf	??_UART_Init+4,f
  3206  06F1  0DB7               	rlf	??_UART_Init+5,f
  3207  06F2  0DB8               	rlf	??_UART_Init+6,f
  3208  06F3  0DB9               	rlf	??_UART_Init+7,f
  3209  06F4  3EFF               	addlw	-1
  3210  06F5  1D03               	skipz
  3211  06F6  2EEF               	goto	u3065
  3212  06F7  3000               	movlw	0
  3213  06F8  00BA               	movwf	??_UART_Init+8
  3214  06F9  3012               	movlw	18
  3215  06FA  00BB               	movwf	??_UART_Init+9
  3216  06FB  307A               	movlw	122
  3217  06FC  00BC               	movwf	??_UART_Init+10
  3218  06FD  3000               	movlw	0
  3219  06FE  00BD               	movwf	??_UART_Init+11
  3220  06FF  0836               	movf	??_UART_Init+4,w
  3221  0700  02BA               	subwf	??_UART_Init+8,f
  3222  0701  0837               	movf	??_UART_Init+5,w
  3223  0702  1C03               	skipc
  3224  0703  0F37               	incfsz	??_UART_Init+5,w
  3225  0704  2F06               	goto	u3071
  3226  0705  2F07               	goto	u3072
  3227  0706                     u3071:	
  3228  0706  02BB               	subwf	??_UART_Init+9,f
  3229  0707                     u3072:	
  3230  0707  0838               	movf	??_UART_Init+6,w
  3231  0708  1C03               	skipc
  3232  0709  0F38               	incfsz	??_UART_Init+6,w
  3233  070A  2F0C               	goto	u3073
  3234  070B  2F0D               	goto	u3074
  3235  070C                     u3073:	
  3236  070C  02BC               	subwf	??_UART_Init+10,f
  3237  070D                     u3074:	
  3238  070D  0839               	movf	??_UART_Init+7,w
  3239  070E  1C03               	skipc
  3240  070F  0F39               	incfsz	??_UART_Init+7,w
  3241  0710  2F12               	goto	u3075
  3242  0711  2F13               	goto	u3076
  3243  0712                     u3075:	
  3244  0712  02BD               	subwf	??_UART_Init+11,f
  3245  0713                     u3076:	
  3246  0713  083D               	movf	??_UART_Init+11,w
  3247  0714  00A7               	movwf	___aldiv@dividend+3
  3248  0715  083C               	movf	??_UART_Init+10,w
  3249  0716  00A6               	movwf	___aldiv@dividend+2
  3250  0717  083B               	movf	??_UART_Init+9,w
  3251  0718  00A5               	movwf	___aldiv@dividend+1
  3252  0719  083A               	movf	??_UART_Init+8,w
  3253  071A  00A4               	movwf	___aldiv@dividend
  3254  071B  120A  158A  26CE  120A  118A  	fcall	___aldiv
  3255  0720  1283               	bcf	3,5	;RP0=0, select bank0
  3256  0721  1303               	bcf	3,6	;RP1=0, select bank0
  3257  0722  0821               	movf	?___aldiv+1,w
  3258  0723  00F5               	movwf	UART_Init@x+1
  3259  0724  0820               	movf	?___aldiv,w
  3260  0725  00F4               	movwf	UART_Init@x
  3261                           
  3262                           ;./UART.h: 12:  if(x>255)
  3263  0726  3001               	movlw	1
  3264  0727  0275               	subwf	UART_Init@x+1,w
  3265  0728  3000               	movlw	0
  3266  0729  1903               	skipnz
  3267  072A  0274               	subwf	UART_Init@x,w
  3268  072B  1C03               	skipc
  3269  072C  2F89               	goto	l3241
  3270                           
  3271                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  3272  072D  082E               	movf	UART_Init@baudrate,w
  3273  072E  00B2               	movwf	??_UART_Init
  3274  072F  082F               	movf	UART_Init@baudrate+1,w
  3275  0730  00B3               	movwf	??_UART_Init+1
  3276  0731  0830               	movf	UART_Init@baudrate+2,w
  3277  0732  00B4               	movwf	??_UART_Init+2
  3278  0733  0831               	movf	UART_Init@baudrate+3,w
  3279  0734  00B5               	movwf	??_UART_Init+3
  3280  0735  3004               	movlw	4
  3281  0736                     u3095:	
  3282  0736  1003               	clrc
  3283  0737  0DB2               	rlf	??_UART_Init,f
  3284  0738  0DB3               	rlf	??_UART_Init+1,f
  3285  0739  0DB4               	rlf	??_UART_Init+2,f
  3286  073A  0DB5               	rlf	??_UART_Init+3,f
  3287  073B  3EFF               	addlw	-1
  3288  073C  1D03               	skipz
  3289  073D  2F36               	goto	u3095
  3290  073E  0835               	movf	??_UART_Init+3,w
  3291  073F  00A3               	movwf	___aldiv@divisor+3
  3292  0740  0834               	movf	??_UART_Init+2,w
  3293  0741  00A2               	movwf	___aldiv@divisor+2
  3294  0742  0833               	movf	??_UART_Init+1,w
  3295  0743  00A1               	movwf	___aldiv@divisor+1
  3296  0744  0832               	movf	??_UART_Init,w
  3297  0745  00A0               	movwf	___aldiv@divisor
  3298  0746  082E               	movf	UART_Init@baudrate,w
  3299  0747  00B6               	movwf	??_UART_Init+4
  3300  0748  082F               	movf	UART_Init@baudrate+1,w
  3301  0749  00B7               	movwf	??_UART_Init+5
  3302  074A  0830               	movf	UART_Init@baudrate+2,w
  3303  074B  00B8               	movwf	??_UART_Init+6
  3304  074C  0831               	movf	UART_Init@baudrate+3,w
  3305  074D  00B9               	movwf	??_UART_Init+7
  3306  074E  3004               	movlw	4
  3307  074F                     u3105:	
  3308  074F  1003               	clrc
  3309  0750  0DB6               	rlf	??_UART_Init+4,f
  3310  0751  0DB7               	rlf	??_UART_Init+5,f
  3311  0752  0DB8               	rlf	??_UART_Init+6,f
  3312  0753  0DB9               	rlf	??_UART_Init+7,f
  3313  0754  3EFF               	addlw	-1
  3314  0755  1D03               	skipz
  3315  0756  2F4F               	goto	u3105
  3316  0757  3000               	movlw	0
  3317  0758  00BA               	movwf	??_UART_Init+8
  3318  0759  3012               	movlw	18
  3319  075A  00BB               	movwf	??_UART_Init+9
  3320  075B  307A               	movlw	122
  3321  075C  00BC               	movwf	??_UART_Init+10
  3322  075D  3000               	movlw	0
  3323  075E  00BD               	movwf	??_UART_Init+11
  3324  075F  0836               	movf	??_UART_Init+4,w
  3325  0760  02BA               	subwf	??_UART_Init+8,f
  3326  0761  0837               	movf	??_UART_Init+5,w
  3327  0762  1C03               	skipc
  3328  0763  0F37               	incfsz	??_UART_Init+5,w
  3329  0764  2F66               	goto	u3111
  3330  0765  2F67               	goto	u3112
  3331  0766                     u3111:	
  3332  0766  02BB               	subwf	??_UART_Init+9,f
  3333  0767                     u3112:	
  3334  0767  0838               	movf	??_UART_Init+6,w
  3335  0768  1C03               	skipc
  3336  0769  0F38               	incfsz	??_UART_Init+6,w
  3337  076A  2F6C               	goto	u3113
  3338  076B  2F6D               	goto	u3114
  3339  076C                     u3113:	
  3340  076C  02BC               	subwf	??_UART_Init+10,f
  3341  076D                     u3114:	
  3342  076D  0839               	movf	??_UART_Init+7,w
  3343  076E  1C03               	skipc
  3344  076F  0F39               	incfsz	??_UART_Init+7,w
  3345  0770  2F72               	goto	u3115
  3346  0771  2F73               	goto	u3116
  3347  0772                     u3115:	
  3348  0772  02BD               	subwf	??_UART_Init+11,f
  3349  0773                     u3116:	
  3350  0773  083D               	movf	??_UART_Init+11,w
  3351  0774  00A7               	movwf	___aldiv@dividend+3
  3352  0775  083C               	movf	??_UART_Init+10,w
  3353  0776  00A6               	movwf	___aldiv@dividend+2
  3354  0777  083B               	movf	??_UART_Init+9,w
  3355  0778  00A5               	movwf	___aldiv@dividend+1
  3356  0779  083A               	movf	??_UART_Init+8,w
  3357  077A  00A4               	movwf	___aldiv@dividend
  3358  077B  120A  158A  26CE  120A  118A  	fcall	___aldiv
  3359  0780  1283               	bcf	3,5	;RP0=0, select bank0
  3360  0781  1303               	bcf	3,6	;RP1=0, select bank0
  3361  0782  0821               	movf	?___aldiv+1,w
  3362  0783  00F5               	movwf	UART_Init@x+1
  3363  0784  0820               	movf	?___aldiv,w
  3364  0785  00F4               	movwf	UART_Init@x
  3365                           
  3366                           ;./UART.h: 15:   BRGH = 1;
  3367  0786  1683               	bsf	3,5	;RP0=1, select bank1
  3368  0787  1303               	bcf	3,6	;RP1=0, select bank1
  3369  0788  1518               	bsf	24,2	;volatile
  3370  0789                     l3241:	
  3371                           
  3372                           ;./UART.h: 17:  if(x<256)
  3373  0789  3001               	movlw	1
  3374  078A  0275               	subwf	UART_Init@x+1,w
  3375  078B  3000               	movlw	0
  3376  078C  1903               	skipnz
  3377  078D  0274               	subwf	UART_Init@x,w
  3378  078E  1803               	skipnc
  3379  078F  0008               	return
  3380                           
  3381                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  3382  0790  0874               	movf	UART_Init@x,w
  3383  0791  1683               	bsf	3,5	;RP0=1, select bank1
  3384  0792  1303               	bcf	3,6	;RP1=0, select bank1
  3385  0793  0099               	movwf	25	;volatile
  3386                           
  3387                           ;./UART.h: 20:    SYNC = 0;
  3388  0794  1218               	bcf	24,4	;volatile
  3389                           
  3390                           ;./UART.h: 21:    SPEN = 1;
  3391  0795  1283               	bcf	3,5	;RP0=0, select bank0
  3392  0796  1303               	bcf	3,6	;RP1=0, select bank0
  3393  0797  1798               	bsf	24,7	;volatile
  3394                           
  3395                           ;./UART.h: 22:           TRISC7 = 1;
  3396  0798  1683               	bsf	3,5	;RP0=1, select bank1
  3397  0799  1303               	bcf	3,6	;RP1=0, select bank1
  3398  079A  1787               	bsf	7,7	;volatile
  3399                           
  3400                           ;./UART.h: 23:           TRISC6 = 1;
  3401  079B  1707               	bsf	7,6	;volatile
  3402                           
  3403                           ;./UART.h: 24:           CREN = 1;
  3404  079C  1283               	bcf	3,5	;RP0=0, select bank0
  3405  079D  1303               	bcf	3,6	;RP1=0, select bank0
  3406  079E  1618               	bsf	24,4	;volatile
  3407                           
  3408                           ;./UART.h: 25:           TXEN = 1;
  3409  079F  1683               	bsf	3,5	;RP0=1, select bank1
  3410  07A0  1303               	bcf	3,6	;RP1=0, select bank1
  3411  07A1  1698               	bsf	24,5	;volatile
  3412  07A2  0008               	return
  3413  07A3                     __end_of_UART_Init:	
  3414                           
  3415                           	psect	text6
  3416  0ECE                     __ptext6:	
  3417 ;; *************** function ___aldiv *****************
  3418 ;; Defined at:
  3419 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;  divisor         4    0[BANK0 ] long 
  3422 ;;  dividend        4    4[BANK0 ] long 
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;  quotient        4   10[BANK0 ] long 
  3425 ;;  sign            1    9[BANK0 ] unsigned char 
  3426 ;;  counter         1    8[BANK0 ] unsigned char 
  3427 ;; Return value:  Size  Location     Type
  3428 ;;                  4    0[BANK0 ] long 
  3429 ;; Registers used:
  3430 ;;		wreg, status,2, status,0
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3436 ;;      Params:         0       8       0       0       0
  3437 ;;      Locals:         0       6       0       0       0
  3438 ;;      Temps:          1       0       0       0       0
  3439 ;;      Totals:         1      14       0       0       0
  3440 ;;Total ram usage:       15 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    1
  3443 ;; This function calls:
  3444 ;;		Nothing
  3445 ;; This function is called by:
  3446 ;;		_UART_Init
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           
  3451                           ;psect for function ___aldiv
  3452  0ECE                     ___aldiv:	
  3453                           
  3454                           ;incstack = 0
  3455                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3456  0ECE  1283               	bcf	3,5	;RP0=0, select bank0
  3457  0ECF  1303               	bcf	3,6	;RP1=0, select bank0
  3458  0ED0  01A9               	clrf	___aldiv@sign
  3459  0ED1  1FA3               	btfss	___aldiv@divisor+3,7
  3460  0ED2  2EE0               	goto	l597
  3461  0ED3  09A0               	comf	___aldiv@divisor,f
  3462  0ED4  09A1               	comf	___aldiv@divisor+1,f
  3463  0ED5  09A2               	comf	___aldiv@divisor+2,f
  3464  0ED6  09A3               	comf	___aldiv@divisor+3,f
  3465  0ED7  0AA0               	incf	___aldiv@divisor,f
  3466  0ED8  1903               	skipnz
  3467  0ED9  0AA1               	incf	___aldiv@divisor+1,f
  3468  0EDA  1903               	skipnz
  3469  0EDB  0AA2               	incf	___aldiv@divisor+2,f
  3470  0EDC  1903               	skipnz
  3471  0EDD  0AA3               	incf	___aldiv@divisor+3,f
  3472  0EDE  01A9               	clrf	___aldiv@sign
  3473  0EDF  0AA9               	incf	___aldiv@sign,f
  3474  0EE0                     l597:	
  3475  0EE0  1FA7               	btfss	___aldiv@dividend+3,7
  3476  0EE1  2EF1               	goto	l3123
  3477  0EE2  09A4               	comf	___aldiv@dividend,f
  3478  0EE3  09A5               	comf	___aldiv@dividend+1,f
  3479  0EE4  09A6               	comf	___aldiv@dividend+2,f
  3480  0EE5  09A7               	comf	___aldiv@dividend+3,f
  3481  0EE6  0AA4               	incf	___aldiv@dividend,f
  3482  0EE7  1903               	skipnz
  3483  0EE8  0AA5               	incf	___aldiv@dividend+1,f
  3484  0EE9  1903               	skipnz
  3485  0EEA  0AA6               	incf	___aldiv@dividend+2,f
  3486  0EEB  1903               	skipnz
  3487  0EEC  0AA7               	incf	___aldiv@dividend+3,f
  3488  0EED  3001               	movlw	1
  3489  0EEE  00F3               	movwf	??___aldiv
  3490  0EEF  0873               	movf	??___aldiv,w
  3491  0EF0  06A9               	xorwf	___aldiv@sign,f
  3492  0EF1                     l3123:	
  3493  0EF1  3000               	movlw	0
  3494  0EF2  00AD               	movwf	___aldiv@quotient+3
  3495  0EF3  3000               	movlw	0
  3496  0EF4  00AC               	movwf	___aldiv@quotient+2
  3497  0EF5  3000               	movlw	0
  3498  0EF6  00AB               	movwf	___aldiv@quotient+1
  3499  0EF7  3000               	movlw	0
  3500  0EF8  00AA               	movwf	___aldiv@quotient
  3501  0EF9  0823               	movf	___aldiv@divisor+3,w
  3502  0EFA  0422               	iorwf	___aldiv@divisor+2,w
  3503  0EFB  0421               	iorwf	___aldiv@divisor+1,w
  3504  0EFC  0420               	iorwf	___aldiv@divisor,w
  3505  0EFD  1903               	skipnz
  3506  0EFE  2F46               	goto	l3145
  3507  0EFF  01A8               	clrf	___aldiv@counter
  3508  0F00  0AA8               	incf	___aldiv@counter,f
  3509  0F01                     l3131:	
  3510  0F01  1BA3               	btfsc	___aldiv@divisor+3,7
  3511  0F02  2F11               	goto	l3133
  3512  0F03  3001               	movlw	1
  3513  0F04  00F3               	movwf	??___aldiv
  3514  0F05                     u2895:	
  3515  0F05  1003               	clrc
  3516  0F06  0DA0               	rlf	___aldiv@divisor,f
  3517  0F07  0DA1               	rlf	___aldiv@divisor+1,f
  3518  0F08  0DA2               	rlf	___aldiv@divisor+2,f
  3519  0F09  0DA3               	rlf	___aldiv@divisor+3,f
  3520  0F0A  0BF3               	decfsz	??___aldiv,f
  3521  0F0B  2F05               	goto	u2895
  3522  0F0C  3001               	movlw	1
  3523  0F0D  00F3               	movwf	??___aldiv
  3524  0F0E  0873               	movf	??___aldiv,w
  3525  0F0F  07A8               	addwf	___aldiv@counter,f
  3526  0F10  2F01               	goto	l3131
  3527  0F11                     l3133:	
  3528  0F11  3001               	movlw	1
  3529  0F12  00F3               	movwf	??___aldiv
  3530  0F13                     u2915:	
  3531  0F13  1003               	clrc
  3532  0F14  0DAA               	rlf	___aldiv@quotient,f
  3533  0F15  0DAB               	rlf	___aldiv@quotient+1,f
  3534  0F16  0DAC               	rlf	___aldiv@quotient+2,f
  3535  0F17  0DAD               	rlf	___aldiv@quotient+3,f
  3536  0F18  0BF3               	decfsz	??___aldiv,f
  3537  0F19  2F13               	goto	u2915
  3538  0F1A  0823               	movf	___aldiv@divisor+3,w
  3539  0F1B  0227               	subwf	___aldiv@dividend+3,w
  3540  0F1C  1D03               	skipz
  3541  0F1D  2F28               	goto	u2925
  3542  0F1E  0822               	movf	___aldiv@divisor+2,w
  3543  0F1F  0226               	subwf	___aldiv@dividend+2,w
  3544  0F20  1D03               	skipz
  3545  0F21  2F28               	goto	u2925
  3546  0F22  0821               	movf	___aldiv@divisor+1,w
  3547  0F23  0225               	subwf	___aldiv@dividend+1,w
  3548  0F24  1D03               	skipz
  3549  0F25  2F28               	goto	u2925
  3550  0F26  0820               	movf	___aldiv@divisor,w
  3551  0F27  0224               	subwf	___aldiv@dividend,w
  3552  0F28                     u2925:	
  3553  0F28  1C03               	skipc
  3554  0F29  2F39               	goto	l3141
  3555  0F2A  0820               	movf	___aldiv@divisor,w
  3556  0F2B  02A4               	subwf	___aldiv@dividend,f
  3557  0F2C  0821               	movf	___aldiv@divisor+1,w
  3558  0F2D  1C03               	skipc
  3559  0F2E  0F21               	incfsz	___aldiv@divisor+1,w
  3560  0F2F  02A5               	subwf	___aldiv@dividend+1,f
  3561  0F30  0822               	movf	___aldiv@divisor+2,w
  3562  0F31  1C03               	skipc
  3563  0F32  0F22               	incfsz	___aldiv@divisor+2,w
  3564  0F33  02A6               	subwf	___aldiv@dividend+2,f
  3565  0F34  0823               	movf	___aldiv@divisor+3,w
  3566  0F35  1C03               	skipc
  3567  0F36  0F23               	incfsz	___aldiv@divisor+3,w
  3568  0F37  02A7               	subwf	___aldiv@dividend+3,f
  3569  0F38  142A               	bsf	___aldiv@quotient,0
  3570  0F39                     l3141:	
  3571  0F39  3001               	movlw	1
  3572  0F3A                     u2935:	
  3573  0F3A  1003               	clrc
  3574  0F3B  0CA3               	rrf	___aldiv@divisor+3,f
  3575  0F3C  0CA2               	rrf	___aldiv@divisor+2,f
  3576  0F3D  0CA1               	rrf	___aldiv@divisor+1,f
  3577  0F3E  0CA0               	rrf	___aldiv@divisor,f
  3578  0F3F  3EFF               	addlw	-1
  3579  0F40  1D03               	skipz
  3580  0F41  2F3A               	goto	u2935
  3581  0F42  3001               	movlw	1
  3582  0F43  02A8               	subwf	___aldiv@counter,f
  3583  0F44  1D03               	btfss	3,2
  3584  0F45  2F11               	goto	l3133
  3585  0F46                     l3145:	
  3586  0F46  0829               	movf	___aldiv@sign,w
  3587  0F47  1903               	btfsc	3,2
  3588  0F48  2F54               	goto	l3149
  3589  0F49  09AA               	comf	___aldiv@quotient,f
  3590  0F4A  09AB               	comf	___aldiv@quotient+1,f
  3591  0F4B  09AC               	comf	___aldiv@quotient+2,f
  3592  0F4C  09AD               	comf	___aldiv@quotient+3,f
  3593  0F4D  0AAA               	incf	___aldiv@quotient,f
  3594  0F4E  1903               	skipnz
  3595  0F4F  0AAB               	incf	___aldiv@quotient+1,f
  3596  0F50  1903               	skipnz
  3597  0F51  0AAC               	incf	___aldiv@quotient+2,f
  3598  0F52  1903               	skipnz
  3599  0F53  0AAD               	incf	___aldiv@quotient+3,f
  3600  0F54                     l3149:	
  3601  0F54  082D               	movf	___aldiv@quotient+3,w
  3602  0F55  00A3               	movwf	?___aldiv+3
  3603  0F56  082C               	movf	___aldiv@quotient+2,w
  3604  0F57  00A2               	movwf	?___aldiv+2
  3605  0F58  082B               	movf	___aldiv@quotient+1,w
  3606  0F59  00A1               	movwf	?___aldiv+1
  3607  0F5A  082A               	movf	___aldiv@quotient,w
  3608  0F5B  00A0               	movwf	?___aldiv
  3609  0F5C  0008               	return
  3610  0F5D                     __end_of___aldiv:	
  3611                           
  3612                           	psect	text7
  3613  049F                     __ptext7:	
  3614 ;; *************** function _Lcd_Init *****************
  3615 ;; Defined at:
  3616 ;;		line 65 in file "./LCD4bits.h"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;		None
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;		None
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      void 
  3623 ;; Registers used:
  3624 ;;		wreg, status,2, status,0, pclath, cstack
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3630 ;;      Params:         0       0       0       0       0
  3631 ;;      Locals:         0       0       0       0       0
  3632 ;;      Temps:          0       2       0       0       0
  3633 ;;      Totals:         0       2       0       0       0
  3634 ;;Total ram usage:        2 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    3
  3637 ;; This function calls:
  3638 ;;		_Lcd_Cmd
  3639 ;;		_Lcd_Port
  3640 ;; This function is called by:
  3641 ;;		_setup
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           
  3646                           ;psect for function _Lcd_Init
  3647  049F                     _Lcd_Init:	
  3648                           
  3649                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  3650                           
  3651                           ;incstack = 0
  3652                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3653  049F  3000               	movlw	0
  3654  04A0  120A  158A  2164  120A  118A  	fcall	_Lcd_Port
  3655                           
  3656                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  3657  04A5  3034               	movlw	52
  3658  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  3659  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  3660  04A8  00A1               	movwf	??_Lcd_Init+1
  3661  04A9  30F1               	movlw	241
  3662  04AA  00A0               	movwf	??_Lcd_Init
  3663  04AB                     u4007:	
  3664  04AB  0BA0               	decfsz	??_Lcd_Init,f
  3665  04AC  2CAB               	goto	u4007
  3666  04AD  0BA1               	decfsz	??_Lcd_Init+1,f
  3667  04AE  2CAB               	goto	u4007
  3668                           
  3669                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  3670  04AF  3003               	movlw	3
  3671  04B0  120A  158A  217E  120A  118A  	fcall	_Lcd_Cmd
  3672                           
  3673                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  3674  04B5  300D               	movlw	13
  3675  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  3676  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  3677  04B8  00A1               	movwf	??_Lcd_Init+1
  3678  04B9  30FB               	movlw	251
  3679  04BA  00A0               	movwf	??_Lcd_Init
  3680  04BB                     u4017:	
  3681  04BB  0BA0               	decfsz	??_Lcd_Init,f
  3682  04BC  2CBB               	goto	u4017
  3683  04BD  0BA1               	decfsz	??_Lcd_Init+1,f
  3684  04BE  2CBB               	goto	u4017
  3685                           
  3686                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  3687  04BF  3003               	movlw	3
  3688  04C0  120A  158A  217E  120A  118A  	fcall	_Lcd_Cmd
  3689                           
  3690                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  3691  04C5  301D               	movlw	29
  3692  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  3693  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  3694  04C8  00A1               	movwf	??_Lcd_Init+1
  3695  04C9  3090               	movlw	144
  3696  04CA  00A0               	movwf	??_Lcd_Init
  3697  04CB                     u4027:	
  3698  04CB  0BA0               	decfsz	??_Lcd_Init,f
  3699  04CC  2CCB               	goto	u4027
  3700  04CD  0BA1               	decfsz	??_Lcd_Init+1,f
  3701  04CE  2CCB               	goto	u4027
  3702  04CF  0000               	nop
  3703                           
  3704                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  3705  04D0  3003               	movlw	3
  3706  04D1  120A  158A  217E  120A  118A  	fcall	_Lcd_Cmd
  3707                           
  3708                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  3709  04D6  3002               	movlw	2
  3710  04D7  120A  158A  217E  120A  118A  	fcall	_Lcd_Cmd
  3711                           
  3712                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  3713  04DC  3002               	movlw	2
  3714  04DD  120A  158A  217E  120A  118A  	fcall	_Lcd_Cmd
  3715                           
  3716                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  3717  04E2  3008               	movlw	8
  3718  04E3  120A  158A  217E  120A  118A  	fcall	_Lcd_Cmd
  3719                           
  3720                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  3721  04E8  3000               	movlw	0
  3722  04E9  120A  158A  217E  120A  118A  	fcall	_Lcd_Cmd
  3723                           
  3724                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  3725  04EE  300C               	movlw	12
  3726  04EF  120A  158A  217E  120A  118A  	fcall	_Lcd_Cmd
  3727                           
  3728                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  3729  04F4  3000               	movlw	0
  3730  04F5  120A  158A  217E  120A  118A  	fcall	_Lcd_Cmd
  3731                           
  3732                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  3733  04FA  3006               	movlw	6
  3734  04FB  120A  158A  217E   	fcall	_Lcd_Cmd
  3735  04FE  0008               	return
  3736  04FF                     __end_of_Lcd_Init:	
  3737                           
  3738                           	psect	text8
  3739  0B2B                     __ptext8:	
  3740 ;; *************** function _I2C_Master_Init *****************
  3741 ;; Defined at:
  3742 ;;		line 16 in file "./I2C.h"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;  c               4   13[BANK0 ] const unsigned long 
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;		None
  3747 ;; Return value:  Size  Location     Type
  3748 ;;                  1    wreg      void 
  3749 ;; Registers used:
  3750 ;;		wreg, status,2, status,0, pclath, cstack
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3756 ;;      Params:         0       4       0       0       0
  3757 ;;      Locals:         0       0       0       0       0
  3758 ;;      Temps:          4       0       0       0       0
  3759 ;;      Totals:         4       4       0       0       0
  3760 ;;Total ram usage:        8 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; Hardware stack levels required when called:    2
  3763 ;; This function calls:
  3764 ;;		___lldiv
  3765 ;; This function is called by:
  3766 ;;		_setup
  3767 ;; This function uses a non-reentrant model
  3768 ;;
  3769                           
  3770                           
  3771                           ;psect for function _I2C_Master_Init
  3772  0B2B                     _I2C_Master_Init:	
  3773                           
  3774                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  3775                           
  3776                           ;incstack = 0
  3777                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  3778  0B2B  3028               	movlw	40
  3779  0B2C  1283               	bcf	3,5	;RP0=0, select bank0
  3780  0B2D  1303               	bcf	3,6	;RP1=0, select bank0
  3781  0B2E  0094               	movwf	20	;volatile
  3782                           
  3783                           ;./I2C.h: 19:     SSPCON2 = 0;
  3784  0B2F  1683               	bsf	3,5	;RP0=1, select bank1
  3785  0B30  1303               	bcf	3,6	;RP1=0, select bank1
  3786  0B31  0191               	clrf	17	;volatile
  3787                           
  3788                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  3789  0B32  1283               	bcf	3,5	;RP0=0, select bank0
  3790  0B33  1303               	bcf	3,6	;RP1=0, select bank0
  3791  0B34  082D               	movf	I2C_Master_Init@c,w
  3792  0B35  00F4               	movwf	??_I2C_Master_Init
  3793  0B36  082E               	movf	I2C_Master_Init@c+1,w
  3794  0B37  00F5               	movwf	??_I2C_Master_Init+1
  3795  0B38  082F               	movf	I2C_Master_Init@c+2,w
  3796  0B39  00F6               	movwf	??_I2C_Master_Init+2
  3797  0B3A  0830               	movf	I2C_Master_Init@c+3,w
  3798  0B3B  00F7               	movwf	??_I2C_Master_Init+3
  3799  0B3C  3002               	movlw	2
  3800  0B3D                     u3035:	
  3801  0B3D  1003               	clrc
  3802  0B3E  0DF4               	rlf	??_I2C_Master_Init,f
  3803  0B3F  0DF5               	rlf	??_I2C_Master_Init+1,f
  3804  0B40  0DF6               	rlf	??_I2C_Master_Init+2,f
  3805  0B41  0DF7               	rlf	??_I2C_Master_Init+3,f
  3806  0B42  3EFF               	addlw	-1
  3807  0B43  1D03               	skipz
  3808  0B44  2B3D               	goto	u3035
  3809  0B45  0877               	movf	??_I2C_Master_Init+3,w
  3810  0B46  00A3               	movwf	___lldiv@divisor+3
  3811  0B47  0876               	movf	??_I2C_Master_Init+2,w
  3812  0B48  00A2               	movwf	___lldiv@divisor+2
  3813  0B49  0875               	movf	??_I2C_Master_Init+1,w
  3814  0B4A  00A1               	movwf	___lldiv@divisor+1
  3815  0B4B  0874               	movf	??_I2C_Master_Init,w
  3816  0B4C  00A0               	movwf	___lldiv@divisor
  3817  0B4D  3000               	movlw	0
  3818  0B4E  00A7               	movwf	___lldiv@dividend+3
  3819  0B4F  307A               	movlw	122
  3820  0B50  00A6               	movwf	___lldiv@dividend+2
  3821  0B51  3012               	movlw	18
  3822  0B52  00A5               	movwf	___lldiv@dividend+1
  3823  0B53  3000               	movlw	0
  3824  0B54  00A4               	movwf	___lldiv@dividend
  3825  0B55  120A  158A  25E5   	fcall	___lldiv
  3826  0B58  1283               	bcf	3,5	;RP0=0, select bank0
  3827  0B59  1303               	bcf	3,6	;RP1=0, select bank0
  3828  0B5A  0820               	movf	?___lldiv,w
  3829  0B5B  3EFF               	addlw	255
  3830  0B5C  1683               	bsf	3,5	;RP0=1, select bank1
  3831  0B5D  1303               	bcf	3,6	;RP1=0, select bank1
  3832  0B5E  0093               	movwf	19	;volatile
  3833                           
  3834                           ;./I2C.h: 21:     SSPSTAT = 0;
  3835  0B5F  0194               	clrf	20	;volatile
  3836                           
  3837                           ;./I2C.h: 22:     TRISCbits.TRISC3 = 1;
  3838  0B60  1587               	bsf	7,3	;volatile
  3839                           
  3840                           ;./I2C.h: 23:     TRISCbits.TRISC4 = 1;
  3841  0B61  1607               	bsf	7,4	;volatile
  3842  0B62  0008               	return
  3843  0B63                     __end_of_I2C_Master_Init:	
  3844                           
  3845                           	psect	text9
  3846  0DE5                     __ptext9:	
  3847 ;; *************** function ___lldiv *****************
  3848 ;; Defined at:
  3849 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;  divisor         4    0[BANK0 ] unsigned long 
  3852 ;;  dividend        4    4[BANK0 ] unsigned long 
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;  quotient        4    8[BANK0 ] unsigned long 
  3855 ;;  counter         1   12[BANK0 ] unsigned char 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  4    0[BANK0 ] unsigned long 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, status,0
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3865 ;;      Params:         0       8       0       0       0
  3866 ;;      Locals:         0       5       0       0       0
  3867 ;;      Temps:          1       0       0       0       0
  3868 ;;      Totals:         1      13       0       0       0
  3869 ;;Total ram usage:       14 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    1
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_I2C_Master_Init
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           
  3880                           ;psect for function ___lldiv
  3881  0DE5                     ___lldiv:	
  3882                           
  3883                           ;incstack = 0
  3884                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3885  0DE5  3000               	movlw	0
  3886  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  3887  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  3888  0DE8  00AB               	movwf	___lldiv@quotient+3
  3889  0DE9  3000               	movlw	0
  3890  0DEA  00AA               	movwf	___lldiv@quotient+2
  3891  0DEB  3000               	movlw	0
  3892  0DEC  00A9               	movwf	___lldiv@quotient+1
  3893  0DED  3000               	movlw	0
  3894  0DEE  00A8               	movwf	___lldiv@quotient
  3895  0DEF  0823               	movf	___lldiv@divisor+3,w
  3896  0DF0  0422               	iorwf	___lldiv@divisor+2,w
  3897  0DF1  0421               	iorwf	___lldiv@divisor+1,w
  3898  0DF2  0420               	iorwf	___lldiv@divisor,w
  3899  0DF3  1903               	skipnz
  3900  0DF4  2E3C               	goto	l3109
  3901  0DF5  01AC               	clrf	___lldiv@counter
  3902  0DF6  0AAC               	incf	___lldiv@counter,f
  3903  0DF7                     l3095:	
  3904  0DF7  1BA3               	btfsc	___lldiv@divisor+3,7
  3905  0DF8  2E07               	goto	l3097
  3906  0DF9  3001               	movlw	1
  3907  0DFA  00F3               	movwf	??___lldiv
  3908  0DFB                     u2805:	
  3909  0DFB  1003               	clrc
  3910  0DFC  0DA0               	rlf	___lldiv@divisor,f
  3911  0DFD  0DA1               	rlf	___lldiv@divisor+1,f
  3912  0DFE  0DA2               	rlf	___lldiv@divisor+2,f
  3913  0DFF  0DA3               	rlf	___lldiv@divisor+3,f
  3914  0E00  0BF3               	decfsz	??___lldiv,f
  3915  0E01  2DFB               	goto	u2805
  3916  0E02  3001               	movlw	1
  3917  0E03  00F3               	movwf	??___lldiv
  3918  0E04  0873               	movf	??___lldiv,w
  3919  0E05  07AC               	addwf	___lldiv@counter,f
  3920  0E06  2DF7               	goto	l3095
  3921  0E07                     l3097:	
  3922  0E07  3001               	movlw	1
  3923  0E08  00F3               	movwf	??___lldiv
  3924  0E09                     u2825:	
  3925  0E09  1003               	clrc
  3926  0E0A  0DA8               	rlf	___lldiv@quotient,f
  3927  0E0B  0DA9               	rlf	___lldiv@quotient+1,f
  3928  0E0C  0DAA               	rlf	___lldiv@quotient+2,f
  3929  0E0D  0DAB               	rlf	___lldiv@quotient+3,f
  3930  0E0E  0BF3               	decfsz	??___lldiv,f
  3931  0E0F  2E09               	goto	u2825
  3932  0E10  0823               	movf	___lldiv@divisor+3,w
  3933  0E11  0227               	subwf	___lldiv@dividend+3,w
  3934  0E12  1D03               	skipz
  3935  0E13  2E1E               	goto	u2835
  3936  0E14  0822               	movf	___lldiv@divisor+2,w
  3937  0E15  0226               	subwf	___lldiv@dividend+2,w
  3938  0E16  1D03               	skipz
  3939  0E17  2E1E               	goto	u2835
  3940  0E18  0821               	movf	___lldiv@divisor+1,w
  3941  0E19  0225               	subwf	___lldiv@dividend+1,w
  3942  0E1A  1D03               	skipz
  3943  0E1B  2E1E               	goto	u2835
  3944  0E1C  0820               	movf	___lldiv@divisor,w
  3945  0E1D  0224               	subwf	___lldiv@dividend,w
  3946  0E1E                     u2835:	
  3947  0E1E  1C03               	skipc
  3948  0E1F  2E2F               	goto	l3105
  3949  0E20  0820               	movf	___lldiv@divisor,w
  3950  0E21  02A4               	subwf	___lldiv@dividend,f
  3951  0E22  0821               	movf	___lldiv@divisor+1,w
  3952  0E23  1C03               	skipc
  3953  0E24  0F21               	incfsz	___lldiv@divisor+1,w
  3954  0E25  02A5               	subwf	___lldiv@dividend+1,f
  3955  0E26  0822               	movf	___lldiv@divisor+2,w
  3956  0E27  1C03               	skipc
  3957  0E28  0F22               	incfsz	___lldiv@divisor+2,w
  3958  0E29  02A6               	subwf	___lldiv@dividend+2,f
  3959  0E2A  0823               	movf	___lldiv@divisor+3,w
  3960  0E2B  1C03               	skipc
  3961  0E2C  0F23               	incfsz	___lldiv@divisor+3,w
  3962  0E2D  02A7               	subwf	___lldiv@dividend+3,f
  3963  0E2E  1428               	bsf	___lldiv@quotient,0
  3964  0E2F                     l3105:	
  3965  0E2F  3001               	movlw	1
  3966  0E30                     u2845:	
  3967  0E30  1003               	clrc
  3968  0E31  0CA3               	rrf	___lldiv@divisor+3,f
  3969  0E32  0CA2               	rrf	___lldiv@divisor+2,f
  3970  0E33  0CA1               	rrf	___lldiv@divisor+1,f
  3971  0E34  0CA0               	rrf	___lldiv@divisor,f
  3972  0E35  3EFF               	addlw	-1
  3973  0E36  1D03               	skipz
  3974  0E37  2E30               	goto	u2845
  3975  0E38  3001               	movlw	1
  3976  0E39  02AC               	subwf	___lldiv@counter,f
  3977  0E3A  1D03               	btfss	3,2
  3978  0E3B  2E07               	goto	l3097
  3979  0E3C                     l3109:	
  3980  0E3C  082B               	movf	___lldiv@quotient+3,w
  3981  0E3D  00A3               	movwf	?___lldiv+3
  3982  0E3E  082A               	movf	___lldiv@quotient+2,w
  3983  0E3F  00A2               	movwf	?___lldiv+2
  3984  0E40  0829               	movf	___lldiv@quotient+1,w
  3985  0E41  00A1               	movwf	?___lldiv+1
  3986  0E42  0828               	movf	___lldiv@quotient,w
  3987  0E43  00A0               	movwf	?___lldiv
  3988  0E44  0008               	return
  3989  0E45                     __end_of___lldiv:	
  3990                           
  3991                           	psect	text10
  3992  09B3                     __ptext10:	
  3993 ;; *************** function _open_door *****************
  3994 ;; Defined at:
  3995 ;;		line 504 in file "mainMaster.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;		None
  3998 ;; Auto vars:     Size  Location     Type
  3999 ;;		None
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  1    wreg      void 
  4002 ;; Registers used:
  4003 ;;		wreg, status,2, status,0, pclath, cstack
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4009 ;;      Params:         0       0       0       0       0
  4010 ;;      Locals:         0       0       0       0       0
  4011 ;;      Temps:          0       0       0       0       0
  4012 ;;      Totals:         0       0       0       0       0
  4013 ;;Total ram usage:        0 bytes
  4014 ;; Hardware stack levels used:    1
  4015 ;; Hardware stack levels required when called:    3
  4016 ;; This function calls:
  4017 ;;		_I2C_Master_Start
  4018 ;;		_I2C_Master_Stop
  4019 ;;		_I2C_Master_Write
  4020 ;; This function is called by:
  4021 ;;		_main
  4022 ;; This function uses a non-reentrant model
  4023 ;;
  4024                           
  4025                           
  4026                           ;psect for function _open_door
  4027  09B3                     _open_door:	
  4028                           
  4029                           ;mainMaster.c: 506:     I2C_Master_Start();
  4030                           
  4031                           ;incstack = 0
  4032                           ; Regs used in _open_door: [wreg+status,2+status,0+pclath+cstack]
  4033  09B3  120A  158A  2110  120A  158A  	fcall	_I2C_Master_Start
  4034                           
  4035                           ;mainMaster.c: 507:     I2C_Master_Write(0x20);
  4036  09B8  3020               	movlw	32
  4037  09B9  00F3               	movwf	I2C_Master_Write@d
  4038  09BA  3000               	movlw	0
  4039  09BB  00F4               	movwf	I2C_Master_Write@d+1
  4040  09BC  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  4041                           
  4042                           ;mainMaster.c: 508:     I2C_Master_Write(0xFF);
  4043  09C1  30FF               	movlw	255
  4044  09C2  00F3               	movwf	I2C_Master_Write@d
  4045  09C3  3000               	movlw	0
  4046  09C4  00F4               	movwf	I2C_Master_Write@d+1
  4047  09C5  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  4048                           
  4049                           ;mainMaster.c: 509:     I2C_Master_Stop();
  4050  09CA  120A  158A  2117   	fcall	_I2C_Master_Stop
  4051  09CD  0008               	return
  4052  09CE                     __end_of_open_door:	
  4053                           
  4054                           	psect	text11
  4055  0A56                     __ptext11:	
  4056 ;; *************** function _get_tripwire *****************
  4057 ;; Defined at:
  4058 ;;		line 468 in file "mainMaster.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;		None
  4061 ;; Auto vars:     Size  Location     Type
  4062 ;;  trip            1    2[BANK0 ] unsigned char 
  4063 ;; Return value:  Size  Location     Type
  4064 ;;                  1    wreg      unsigned char 
  4065 ;; Registers used:
  4066 ;;		wreg, status,2, status,0, pclath, cstack
  4067 ;; Tracked objects:
  4068 ;;		On entry : 0/0
  4069 ;;		On exit  : 0/0
  4070 ;;		Unchanged: 0/0
  4071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4072 ;;      Params:         0       0       0       0       0
  4073 ;;      Locals:         0       1       0       0       0
  4074 ;;      Temps:          1       0       0       0       0
  4075 ;;      Totals:         1       1       0       0       0
  4076 ;;Total ram usage:        2 bytes
  4077 ;; Hardware stack levels used:    1
  4078 ;; Hardware stack levels required when called:    3
  4079 ;; This function calls:
  4080 ;;		_I2C_Master_Read
  4081 ;;		_I2C_Master_Start
  4082 ;;		_I2C_Master_Stop
  4083 ;;		_I2C_Master_Write
  4084 ;; This function is called by:
  4085 ;;		_main
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           
  4090                           ;psect for function _get_tripwire
  4091  0A56                     _get_tripwire:	
  4092                           
  4093                           ;mainMaster.c: 470:     char trip;;mainMaster.c: 472:     I2C_Master_Start();
  4094                           
  4095                           ;incstack = 0
  4096                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  4097  0A56  120A  158A  2110  120A  158A  	fcall	_I2C_Master_Start
  4098                           
  4099                           ;mainMaster.c: 473:     I2C_Master_Write(0x21);
  4100  0A5B  3021               	movlw	33
  4101  0A5C  00F3               	movwf	I2C_Master_Write@d
  4102  0A5D  3000               	movlw	0
  4103  0A5E  00F4               	movwf	I2C_Master_Write@d+1
  4104  0A5F  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  4105                           
  4106                           ;mainMaster.c: 474:     trip = I2C_Master_Read(0);
  4107  0A64  3000               	movlw	0
  4108  0A65  00F3               	movwf	I2C_Master_Read@a
  4109  0A66  00F4               	movwf	I2C_Master_Read@a+1
  4110  0A67  120A  158A  22C9  120A  158A  	fcall	_I2C_Master_Read
  4111  0A6C  0873               	movf	?_I2C_Master_Read,w
  4112  0A6D  00F7               	movwf	??_get_tripwire
  4113  0A6E  0877               	movf	??_get_tripwire,w
  4114  0A6F  1283               	bcf	3,5	;RP0=0, select bank0
  4115  0A70  1303               	bcf	3,6	;RP1=0, select bank0
  4116  0A71  00A2               	movwf	get_tripwire@trip
  4117                           
  4118                           ;mainMaster.c: 475:     I2C_Master_Stop();
  4119  0A72  120A  158A  2117   	fcall	_I2C_Master_Stop
  4120                           
  4121                           ;mainMaster.c: 477:     return (trip);
  4122  0A75  1283               	bcf	3,5	;RP0=0, select bank0
  4123  0A76  1303               	bcf	3,6	;RP1=0, select bank0
  4124  0A77  0822               	movf	get_tripwire@trip,w
  4125  0A78  0008               	return
  4126  0A79                     __end_of_get_tripwire:	
  4127                           
  4128                           	psect	text12
  4129  0E45                     __ptext12:	
  4130 ;; *************** function _get_time *****************
  4131 ;; Defined at:
  4132 ;;		line 393 in file "mainMaster.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;  time_string     1    wreg     PTR unsigned char 
  4135 ;;		 -> time(6), 
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;  time_string     1    6[BANK0 ] PTR unsigned char 
  4138 ;;		 -> time(6), 
  4139 ;;  min             1    5[BANK0 ] unsigned char 
  4140 ;;  hour            1    4[BANK0 ] unsigned char 
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  1    wreg      void 
  4143 ;; Registers used:
  4144 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4150 ;;      Params:         0       0       0       0       0
  4151 ;;      Locals:         0       3       0       0       0
  4152 ;;      Temps:          0       2       0       0       0
  4153 ;;      Totals:         0       5       0       0       0
  4154 ;;Total ram usage:        5 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:    3
  4157 ;; This function calls:
  4158 ;;		_I2C_Master_Read
  4159 ;;		_I2C_Master_RepeatedStart
  4160 ;;		_I2C_Master_Start
  4161 ;;		_I2C_Master_Stop
  4162 ;;		_I2C_Master_Write
  4163 ;; This function is called by:
  4164 ;;		_main
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function _get_time
  4170  0E45                     _get_time:	
  4171                           
  4172                           ;incstack = 0
  4173                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4174                           ;get_time@time_string stored from wreg
  4175  0E45  1283               	bcf	3,5	;RP0=0, select bank0
  4176  0E46  1303               	bcf	3,6	;RP1=0, select bank0
  4177  0E47  00A6               	movwf	get_time@time_string
  4178                           
  4179                           ;mainMaster.c: 395:     char hour, min;;mainMaster.c: 397:     I2C_Master_Start();
  4180  0E48  120A  158A  2110  120A  158A  	fcall	_I2C_Master_Start
  4181                           
  4182                           ;mainMaster.c: 398:     I2C_Master_Write(0xD0);
  4183  0E4D  30D0               	movlw	208
  4184  0E4E  00F3               	movwf	I2C_Master_Write@d
  4185  0E4F  3000               	movlw	0
  4186  0E50  00F4               	movwf	I2C_Master_Write@d+1
  4187  0E51  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  4188                           
  4189                           ;mainMaster.c: 399:     I2C_Master_Write(0x01);
  4190  0E56  3001               	movlw	1
  4191  0E57  00F3               	movwf	I2C_Master_Write@d
  4192  0E58  3000               	movlw	0
  4193  0E59  00F4               	movwf	I2C_Master_Write@d+1
  4194  0E5A  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  4195                           
  4196                           ;mainMaster.c: 400:     I2C_Master_RepeatedStart();
  4197  0E5F  120A  158A  211E  120A  158A  	fcall	_I2C_Master_RepeatedStart
  4198                           
  4199                           ;mainMaster.c: 401:     I2C_Master_Write(0xD1);
  4200  0E64  30D1               	movlw	209
  4201  0E65  00F3               	movwf	I2C_Master_Write@d
  4202  0E66  3000               	movlw	0
  4203  0E67  00F4               	movwf	I2C_Master_Write@d+1
  4204  0E68  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  4205                           
  4206                           ;mainMaster.c: 402:     min = I2C_Master_Read(1);
  4207  0E6D  3001               	movlw	1
  4208  0E6E  00F3               	movwf	I2C_Master_Read@a
  4209  0E6F  3000               	movlw	0
  4210  0E70  00F4               	movwf	I2C_Master_Read@a+1
  4211  0E71  120A  158A  22C9  120A  158A  	fcall	_I2C_Master_Read
  4212  0E76  0873               	movf	?_I2C_Master_Read,w
  4213  0E77  1283               	bcf	3,5	;RP0=0, select bank0
  4214  0E78  1303               	bcf	3,6	;RP1=0, select bank0
  4215  0E79  00A2               	movwf	??_get_time
  4216  0E7A  0822               	movf	??_get_time,w
  4217  0E7B  00A5               	movwf	get_time@min
  4218                           
  4219                           ;mainMaster.c: 403:     hour = I2C_Master_Read(0);
  4220  0E7C  3000               	movlw	0
  4221  0E7D  00F3               	movwf	I2C_Master_Read@a
  4222  0E7E  00F4               	movwf	I2C_Master_Read@a+1
  4223  0E7F  120A  158A  22C9  120A  158A  	fcall	_I2C_Master_Read
  4224  0E84  0873               	movf	?_I2C_Master_Read,w
  4225  0E85  1283               	bcf	3,5	;RP0=0, select bank0
  4226  0E86  1303               	bcf	3,6	;RP1=0, select bank0
  4227  0E87  00A2               	movwf	??_get_time
  4228  0E88  0822               	movf	??_get_time,w
  4229  0E89  00A4               	movwf	get_time@hour
  4230                           
  4231                           ;mainMaster.c: 404:     I2C_Master_Stop();
  4232  0E8A  120A  158A  2117  120A  158A  	fcall	_I2C_Master_Stop
  4233                           
  4234                           ;mainMaster.c: 406:     time_string[0] = (hour >> 4) + '0';
  4235  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  4236  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  4237  0E91  0824               	movf	get_time@hour,w
  4238  0E92  00A2               	movwf	??_get_time
  4239  0E93  3004               	movlw	4
  4240  0E94                     u3295:	
  4241  0E94  1003               	clrc
  4242  0E95  0CA2               	rrf	??_get_time,f
  4243  0E96  3EFF               	addlw	-1
  4244  0E97  1D03               	skipz
  4245  0E98  2E94               	goto	u3295
  4246  0E99  0822               	movf	??_get_time,w
  4247  0E9A  3E30               	addlw	48
  4248  0E9B  00A3               	movwf	??_get_time+1
  4249  0E9C  0826               	movf	get_time@time_string,w
  4250  0E9D  0084               	movwf	4
  4251  0E9E  0823               	movf	??_get_time+1,w
  4252  0E9F  1383               	bcf	3,7	;select IRP bank0
  4253  0EA0  0080               	movwf	0
  4254                           
  4255                           ;mainMaster.c: 407:     time_string[1] = (hour & 0x0F) + '0';
  4256  0EA1  0824               	movf	get_time@hour,w
  4257  0EA2  390F               	andlw	15
  4258  0EA3  3E30               	addlw	48
  4259  0EA4  00A2               	movwf	??_get_time
  4260  0EA5  0A26               	incf	get_time@time_string,w
  4261  0EA6  0084               	movwf	4
  4262  0EA7  0822               	movf	??_get_time,w
  4263  0EA8  0080               	movwf	0
  4264                           
  4265                           ;mainMaster.c: 408:     time_string[2] = ':';
  4266  0EA9  303A               	movlw	58
  4267  0EAA  00A2               	movwf	??_get_time
  4268  0EAB  0826               	movf	get_time@time_string,w
  4269  0EAC  3E02               	addlw	2
  4270  0EAD  0084               	movwf	4
  4271  0EAE  0822               	movf	??_get_time,w
  4272  0EAF  0080               	movwf	0
  4273                           
  4274                           ;mainMaster.c: 409:     time_string[3] = (min >> 4) + '0';
  4275  0EB0  0825               	movf	get_time@min,w
  4276  0EB1  00A2               	movwf	??_get_time
  4277  0EB2  3004               	movlw	4
  4278  0EB3                     u3305:	
  4279  0EB3  1003               	clrc
  4280  0EB4  0CA2               	rrf	??_get_time,f
  4281  0EB5  3EFF               	addlw	-1
  4282  0EB6  1D03               	skipz
  4283  0EB7  2EB3               	goto	u3305
  4284  0EB8  0822               	movf	??_get_time,w
  4285  0EB9  3E30               	addlw	48
  4286  0EBA  00A3               	movwf	??_get_time+1
  4287  0EBB  0826               	movf	get_time@time_string,w
  4288  0EBC  3E03               	addlw	3
  4289  0EBD  0084               	movwf	4
  4290  0EBE  0823               	movf	??_get_time+1,w
  4291  0EBF  0080               	movwf	0
  4292                           
  4293                           ;mainMaster.c: 410:     time_string[4] = (min & 0x0F) + '0';
  4294  0EC0  0825               	movf	get_time@min,w
  4295  0EC1  390F               	andlw	15
  4296  0EC2  3E30               	addlw	48
  4297  0EC3  00A2               	movwf	??_get_time
  4298  0EC4  0826               	movf	get_time@time_string,w
  4299  0EC5  3E04               	addlw	4
  4300  0EC6  0084               	movwf	4
  4301  0EC7  0822               	movf	??_get_time,w
  4302  0EC8  0080               	movwf	0
  4303                           
  4304                           ;mainMaster.c: 411:     time_string[5] = '\0';
  4305  0EC9  0826               	movf	get_time@time_string,w
  4306  0ECA  3E05               	addlw	5
  4307  0ECB  0084               	movwf	4
  4308  0ECC  0180               	clrf	0
  4309  0ECD  0008               	return
  4310  0ECE                     __end_of_get_time:	
  4311                           
  4312                           	psect	text13
  4313  0F5D                     __ptext13:	
  4314 ;; *************** function _get_temp *****************
  4315 ;; Defined at:
  4316 ;;		line 429 in file "mainMaster.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  temp_string     1    wreg     PTR unsigned char 
  4319 ;;		 -> temp(6), 
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  temp_string     1   29[BANK0 ] PTR unsigned char 
  4322 ;;		 -> temp(6), 
  4323 ;;  decimal         3   25[BANK0 ] unsigned char [3]
  4324 ;;  tempLSB         1   30[BANK0 ] unsigned char 
  4325 ;;  tempMSB         1   28[BANK0 ] unsigned char 
  4326 ;; Return value:  Size  Location     Type
  4327 ;;                  1    wreg      void 
  4328 ;; Registers used:
  4329 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4335 ;;      Params:         0       0       0       0       0
  4336 ;;      Locals:         0       6       0       0       0
  4337 ;;      Temps:          0       3       0       0       0
  4338 ;;      Totals:         0       9       0       0       0
  4339 ;;Total ram usage:        9 bytes
  4340 ;; Hardware stack levels used:    1
  4341 ;; Hardware stack levels required when called:    3
  4342 ;; This function calls:
  4343 ;;		_I2C_Master_Read
  4344 ;;		_I2C_Master_RepeatedStart
  4345 ;;		_I2C_Master_Start
  4346 ;;		_I2C_Master_Stop
  4347 ;;		_I2C_Master_Write
  4348 ;;		___bmul
  4349 ;;		_sprintf
  4350 ;;		_strcat
  4351 ;; This function is called by:
  4352 ;;		_main
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           
  4357                           ;psect for function _get_temp
  4358  0F5D                     _get_temp:	
  4359                           
  4360                           ;incstack = 0
  4361                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4362                           ;get_temp@temp_string stored from wreg
  4363  0F5D  1283               	bcf	3,5	;RP0=0, select bank0
  4364  0F5E  1303               	bcf	3,6	;RP1=0, select bank0
  4365  0F5F  00BD               	movwf	get_temp@temp_string
  4366                           
  4367                           ;mainMaster.c: 431:     char tempLSB, tempMSB;;mainMaster.c: 432:     char decimal[3];;m
      +                          ainMaster.c: 434:     I2C_Master_Start();
  4368  0F60  120A  158A  2110  120A  158A  	fcall	_I2C_Master_Start
  4369                           
  4370                           ;mainMaster.c: 435:     I2C_Master_Write(0xD0);
  4371  0F65  30D0               	movlw	208
  4372  0F66  00F3               	movwf	I2C_Master_Write@d
  4373  0F67  3000               	movlw	0
  4374  0F68  00F4               	movwf	I2C_Master_Write@d+1
  4375  0F69  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  4376                           
  4377                           ;mainMaster.c: 436:     I2C_Master_Write(0x11);
  4378  0F6E  3011               	movlw	17
  4379  0F6F  00F3               	movwf	I2C_Master_Write@d
  4380  0F70  3000               	movlw	0
  4381  0F71  00F4               	movwf	I2C_Master_Write@d+1
  4382  0F72  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  4383                           
  4384                           ;mainMaster.c: 437:     I2C_Master_RepeatedStart();
  4385  0F77  120A  158A  211E  120A  158A  	fcall	_I2C_Master_RepeatedStart
  4386                           
  4387                           ;mainMaster.c: 438:     I2C_Master_Write(0xD1);
  4388  0F7C  30D1               	movlw	209
  4389  0F7D  00F3               	movwf	I2C_Master_Write@d
  4390  0F7E  3000               	movlw	0
  4391  0F7F  00F4               	movwf	I2C_Master_Write@d+1
  4392  0F80  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  4393                           
  4394                           ;mainMaster.c: 439:     tempMSB = I2C_Master_Read(1);
  4395  0F85  3001               	movlw	1
  4396  0F86  00F3               	movwf	I2C_Master_Read@a
  4397  0F87  3000               	movlw	0
  4398  0F88  00F4               	movwf	I2C_Master_Read@a+1
  4399  0F89  120A  158A  22C9  120A  158A  	fcall	_I2C_Master_Read
  4400  0F8E  0873               	movf	?_I2C_Master_Read,w
  4401  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  4402  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  4403  0F91  00B6               	movwf	??_get_temp
  4404  0F92  0836               	movf	??_get_temp,w
  4405  0F93  00BC               	movwf	get_temp@tempMSB
  4406                           
  4407                           ;mainMaster.c: 440:     tempLSB = I2C_Master_Read(0);
  4408  0F94  3000               	movlw	0
  4409  0F95  00F3               	movwf	I2C_Master_Read@a
  4410  0F96  00F4               	movwf	I2C_Master_Read@a+1
  4411  0F97  120A  158A  22C9  120A  158A  	fcall	_I2C_Master_Read
  4412  0F9C  0873               	movf	?_I2C_Master_Read,w
  4413  0F9D  1283               	bcf	3,5	;RP0=0, select bank0
  4414  0F9E  1303               	bcf	3,6	;RP1=0, select bank0
  4415  0F9F  00B6               	movwf	??_get_temp
  4416  0FA0  0836               	movf	??_get_temp,w
  4417  0FA1  00BE               	movwf	get_temp@tempLSB
  4418                           
  4419                           ;mainMaster.c: 441:     I2C_Master_Stop();
  4420  0FA2  120A  158A  2117  120A  158A  	fcall	_I2C_Master_Stop
  4421                           
  4422                           ;mainMaster.c: 443:     tempMSB = tempMSB - 4;
  4423  0FA7  1283               	bcf	3,5	;RP0=0, select bank0
  4424  0FA8  1303               	bcf	3,6	;RP1=0, select bank0
  4425  0FA9  083C               	movf	get_temp@tempMSB,w
  4426  0FAA  3EFC               	addlw	252
  4427  0FAB  00B6               	movwf	??_get_temp
  4428  0FAC  0836               	movf	??_get_temp,w
  4429  0FAD  00BC               	movwf	get_temp@tempMSB
  4430                           
  4431                           ;mainMaster.c: 444:     tempLSB = (tempLSB >> 6) * 25;
  4432  0FAE  3019               	movlw	25
  4433  0FAF  00B6               	movwf	??_get_temp
  4434  0FB0  0836               	movf	??_get_temp,w
  4435  0FB1  00F3               	movwf	___bmul@multiplicand
  4436  0FB2  083E               	movf	get_temp@tempLSB,w
  4437  0FB3  00B7               	movwf	??_get_temp+1
  4438  0FB4  3006               	movlw	6
  4439  0FB5                     u3275:	
  4440  0FB5  1003               	clrc
  4441  0FB6  0CB7               	rrf	??_get_temp+1,f
  4442  0FB7  3EFF               	addlw	-1
  4443  0FB8  1D03               	skipz
  4444  0FB9  2FB5               	goto	u3275
  4445  0FBA  0837               	movf	??_get_temp+1,w
  4446  0FBB  120A  158A  2153  120A  158A  	fcall	___bmul
  4447  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  4448  0FC1  1303               	bcf	3,6	;RP1=0, select bank0
  4449  0FC2  00B8               	movwf	??_get_temp+2
  4450  0FC3  0838               	movf	??_get_temp+2,w
  4451  0FC4  00BE               	movwf	get_temp@tempLSB
  4452                           
  4453                           ;mainMaster.c: 445:     sprintf(temp_string, "%d", tempMSB);
  4454  0FC5  30DF               	movlw	(low (((STR_26+1)-__stringbase)| (0+32768)))& (0+255)
  4455  0FC6  00B6               	movwf	??_get_temp
  4456  0FC7  0836               	movf	??_get_temp,w
  4457  0FC8  00A9               	movwf	sprintf@f
  4458  0FC9  083C               	movf	get_temp@tempMSB,w
  4459  0FCA  00B7               	movwf	??_get_temp+1
  4460  0FCB  01B8               	clrf	??_get_temp+2
  4461  0FCC  0837               	movf	??_get_temp+1,w
  4462  0FCD  00AA               	movwf	?_sprintf+1
  4463  0FCE  0838               	movf	??_get_temp+2,w
  4464  0FCF  00AB               	movwf	?_sprintf+2
  4465  0FD0  083D               	movf	get_temp@temp_string,w
  4466  0FD1  120A  118A  25F1  120A  158A  	fcall	_sprintf
  4467                           
  4468                           ;mainMaster.c: 446:     if (tempLSB == 0){
  4469  0FD6  1283               	bcf	3,5	;RP0=0, select bank0
  4470  0FD7  1303               	bcf	3,6	;RP1=0, select bank0
  4471  0FD8  083E               	movf	get_temp@tempLSB,w
  4472  0FD9  1D03               	btfss	3,2
  4473  0FDA  2FDD               	goto	l3423
  4474                           
  4475                           ;mainMaster.c: 447:         sprintf(decimal, ".%d0", tempLSB);
  4476  0FDB  30D9               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  4477  0FDC  2FDE               	goto	L17
  4478  0FDD                     l3423:	
  4479                           ;mainMaster.c: 448:     } else {
  4480                           
  4481                           
  4482                           ;mainMaster.c: 449:         sprintf(decimal, ".%d", tempLSB);
  4483  0FDD  30DE               	movlw	(low ((STR_26-__stringbase)| (0+32768)))& (0+255)
  4484  0FDE                     L17:	
  4485  0FDE  00B6               	movwf	??_get_temp
  4486  0FDF  0836               	movf	??_get_temp,w
  4487  0FE0  00A9               	movwf	sprintf@f
  4488  0FE1  083E               	movf	get_temp@tempLSB,w
  4489  0FE2  00B7               	movwf	??_get_temp+1
  4490  0FE3  01B8               	clrf	??_get_temp+2
  4491  0FE4  0837               	movf	??_get_temp+1,w
  4492  0FE5  00AA               	movwf	?_sprintf+1
  4493  0FE6  0838               	movf	??_get_temp+2,w
  4494  0FE7  00AB               	movwf	?_sprintf+2
  4495  0FE8  3039               	movlw	(low (get_temp@decimal| 0))& (0+255)
  4496  0FE9  120A  118A  25F1  120A  158A  	fcall	_sprintf
  4497                           
  4498                           ;mainMaster.c: 451:     strcat(temp_string, decimal);
  4499  0FEE  3039               	movlw	(low (get_temp@decimal| 0))& (0+255)
  4500  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  4501  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  4502  0FF1  00B6               	movwf	??_get_temp
  4503  0FF2  0836               	movf	??_get_temp,w
  4504  0FF3  00F3               	movwf	strcat@from
  4505  0FF4  083D               	movf	get_temp@temp_string,w
  4506  0FF5  120A  158A  2279   	fcall	_strcat
  4507                           
  4508                           ;mainMaster.c: 452:     temp_string[5] = '\0';
  4509  0FF8  1283               	bcf	3,5	;RP0=0, select bank0
  4510  0FF9  1303               	bcf	3,6	;RP1=0, select bank0
  4511  0FFA  083D               	movf	get_temp@temp_string,w
  4512  0FFB  3E05               	addlw	5
  4513  0FFC  0084               	movwf	4
  4514  0FFD  1383               	bcf	3,7	;select IRP bank0
  4515  0FFE  0180               	clrf	0
  4516  0FFF  0008               	return
  4517  1000                     __end_of_get_temp:	
  4518                           
  4519                           	psect	text14
  4520  0A79                     __ptext14:	
  4521 ;; *************** function _strcat *****************
  4522 ;; Defined at:
  4523 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  4524 ;; Parameters:    Size  Location     Type
  4525 ;;  to              1    wreg     PTR unsigned char 
  4526 ;;		 -> temp(6), 
  4527 ;;  from            1    3[COMMON] PTR const unsigned char 
  4528 ;;		 -> get_temp@decimal(3), 
  4529 ;; Auto vars:     Size  Location     Type
  4530 ;;  to              1    5[COMMON] PTR unsigned char 
  4531 ;;		 -> temp(6), 
  4532 ;;  cp              1    6[COMMON] PTR unsigned char 
  4533 ;;		 -> temp(6), 
  4534 ;; Return value:  Size  Location     Type
  4535 ;;                  1    wreg      PTR unsigned char 
  4536 ;; Registers used:
  4537 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4538 ;; Tracked objects:
  4539 ;;		On entry : 0/0
  4540 ;;		On exit  : 0/0
  4541 ;;		Unchanged: 0/0
  4542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4543 ;;      Params:         1       0       0       0       0
  4544 ;;      Locals:         2       0       0       0       0
  4545 ;;      Temps:          1       0       0       0       0
  4546 ;;      Totals:         4       0       0       0       0
  4547 ;;Total ram usage:        4 bytes
  4548 ;; Hardware stack levels used:    1
  4549 ;; Hardware stack levels required when called:    1
  4550 ;; This function calls:
  4551 ;;		Nothing
  4552 ;; This function is called by:
  4553 ;;		_get_temp
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           
  4558                           ;psect for function _strcat
  4559  0A79                     _strcat:	
  4560                           
  4561                           ;incstack = 0
  4562                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  4563                           ;strcat@to stored from wreg
  4564  0A79  00F5               	movwf	strcat@to
  4565  0A7A  0875               	movf	strcat@to,w
  4566  0A7B  00F4               	movwf	??_strcat
  4567  0A7C  0874               	movf	??_strcat,w
  4568  0A7D  00F6               	movwf	strcat@cp
  4569  0A7E                     l2421:	
  4570  0A7E  0876               	movf	strcat@cp,w
  4571  0A7F  0084               	movwf	4
  4572  0A80  1383               	bcf	3,7	;select IRP bank0
  4573  0A81  0800               	movf	0,w
  4574  0A82  1903               	btfsc	3,2
  4575  0A83  2A91               	goto	l2425
  4576  0A84  3001               	movlw	1
  4577  0A85  00F4               	movwf	??_strcat
  4578  0A86  0874               	movf	??_strcat,w
  4579  0A87  07F6               	addwf	strcat@cp,f
  4580  0A88  2A7E               	goto	l2421
  4581  0A89                     l2423:	
  4582  0A89  3001               	movlw	1
  4583  0A8A  00F4               	movwf	??_strcat
  4584  0A8B  0874               	movf	??_strcat,w
  4585  0A8C  07F6               	addwf	strcat@cp,f
  4586  0A8D  3001               	movlw	1
  4587  0A8E  00F4               	movwf	??_strcat
  4588  0A8F  0874               	movf	??_strcat,w
  4589  0A90  07F3               	addwf	strcat@from,f
  4590  0A91                     l2425:	
  4591  0A91  0873               	movf	strcat@from,w
  4592  0A92  0084               	movwf	4
  4593  0A93  0800               	movf	0,w
  4594  0A94  00F4               	movwf	??_strcat
  4595  0A95  0876               	movf	strcat@cp,w
  4596  0A96  0084               	movwf	4
  4597  0A97  0874               	movf	??_strcat,w
  4598  0A98  0080               	movwf	0
  4599  0A99  0800               	movf	0,w
  4600  0A9A  1903               	btfsc	3,2
  4601  0A9B  0008               	return
  4602  0A9C  2A89               	goto	l2423
  4603  0A9D                     __end_of_strcat:	
  4604                           
  4605                           	psect	text15
  4606  05F1                     __ptext15:	
  4607 ;; *************** function _sprintf *****************
  4608 ;; Defined at:
  4609 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  sp              1    wreg     PTR unsigned char 
  4612 ;;		 -> get_temp@decimal(3), temp(6), 
  4613 ;;  f               1    9[BANK0 ] PTR const unsigned char 
  4614 ;;		 -> STR_26(4), STR_25(5), STR_24(3), 
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;  sp              1   20[BANK0 ] PTR unsigned char 
  4617 ;;		 -> get_temp@decimal(3), temp(6), 
  4618 ;;  tmpval          4    0        struct .
  4619 ;;  val             2   18[BANK0 ] unsigned int 
  4620 ;;  cp              2    0        PTR const unsigned char 
  4621 ;;  len             2    0        unsigned int 
  4622 ;;  c               1   21[BANK0 ] unsigned char 
  4623 ;;  prec            1   17[BANK0 ] char 
  4624 ;;  flag            1   16[BANK0 ] unsigned char 
  4625 ;;  ap              1   15[BANK0 ] PTR void [1]
  4626 ;;		 -> ?_sprintf(2), 
  4627 ;; Return value:  Size  Location     Type
  4628 ;;                  2    9[BANK0 ] int 
  4629 ;; Registers used:
  4630 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/0
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4636 ;;      Params:         0       3       0       0       0
  4637 ;;      Locals:         0       7       0       0       0
  4638 ;;      Temps:          0       3       0       0       0
  4639 ;;      Totals:         0      13       0       0       0
  4640 ;;Total ram usage:       13 bytes
  4641 ;; Hardware stack levels used:    1
  4642 ;; Hardware stack levels required when called:    2
  4643 ;; This function calls:
  4644 ;;		___lwdiv
  4645 ;;		___lwmod
  4646 ;; This function is called by:
  4647 ;;		_get_temp
  4648 ;; This function uses a non-reentrant model
  4649 ;;
  4650                           
  4651                           
  4652                           ;psect for function _sprintf
  4653  05F1                     _sprintf:	
  4654                           
  4655                           ;incstack = 0
  4656                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4657                           ;sprintf@sp stored from wreg
  4658  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  4659  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  4660  05F3  00B4               	movwf	sprintf@sp
  4661                           
  4662                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  4663  05F4  302A               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  4664  05F5  00AC               	movwf	??_sprintf
  4665  05F6  082C               	movf	??_sprintf,w
  4666  05F7  00AF               	movwf	sprintf@ap
  4667  05F8                     l3311:	
  4668                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  4669                           
  4670                           
  4671                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  4672  05F8  3001               	movlw	1
  4673  05F9  07A9               	addwf	sprintf@f,f
  4674  05FA  30FF               	movlw	-1
  4675  05FB  0729               	addwf	sprintf@f,w
  4676  05FC  0084               	movwf	4
  4677  05FD  120A  118A  250A  120A  118A  	fcall	stringdir
  4678  0602  00AC               	movwf	??_sprintf
  4679  0603  082C               	movf	??_sprintf,w
  4680  0604  00B5               	movwf	sprintf@c
  4681  0605  0835               	movf	sprintf@c,w
  4682  0606  1903               	btfsc	3,2
  4683  0607  2EC6               	goto	l3313
  4684                           
  4685                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  4686  0608  3025               	movlw	37
  4687  0609  0635               	xorwf	sprintf@c,w
  4688  060A  1903               	btfsc	3,2
  4689  060B  2E18               	goto	l3267
  4690                           
  4691                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  4692  060C  0835               	movf	sprintf@c,w
  4693  060D  00AC               	movwf	??_sprintf
  4694  060E  0834               	movf	sprintf@sp,w
  4695  060F  0084               	movwf	4
  4696  0610  082C               	movf	??_sprintf,w
  4697  0611  1383               	bcf	3,7	;select IRP bank0
  4698  0612  0080               	movwf	0
  4699  0613  3001               	movlw	1
  4700  0614  00AC               	movwf	??_sprintf
  4701  0615  082C               	movf	??_sprintf,w
  4702  0616  07B4               	addwf	sprintf@sp,f
  4703                           
  4704                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  4705  0617  2DF8               	goto	l3311
  4706  0618                     l3267:	
  4707                           
  4708                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  4709  0618  01B0               	clrf	sprintf@flag
  4710                           
  4711                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  4712  0619  3001               	movlw	1
  4713  061A  07A9               	addwf	sprintf@f,f
  4714  061B  30FF               	movlw	-1
  4715  061C  0729               	addwf	sprintf@f,w
  4716  061D  0084               	movwf	4
  4717  061E  120A  118A  250A  120A  118A  	fcall	stringdir
  4718  0623  00B5               	movwf	sprintf@c
  4719  0624  00AC               	movwf	??_sprintf
  4720  0625  01AD               	clrf	??_sprintf+1
  4721                           
  4722                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4723                           ; Switch size 1, requested type "simple"
  4724                           ; Number of cases is 1, Range of values is 0 to 0
  4725                           ; switch strategies available:
  4726                           ; Name         Instructions Cycles
  4727                           ; simple_byte            4     3 (average)
  4728                           ; direct_byte           11     8 (fixed)
  4729                           ; jumptable            260     6 (fixed)
  4730                           ;	Chosen strategy is simple_byte
  4731  0626  082D               	movf	??_sprintf+1,w
  4732  0627  3A00               	xorlw	0	; case 0
  4733  0628  1903               	skipnz
  4734  0629  2E2B               	goto	l3887
  4735  062A  2DF8               	goto	l3311
  4736  062B                     l3887:	
  4737                           
  4738                           ; Switch size 1, requested type "simple"
  4739                           ; Number of cases is 3, Range of values is 0 to 105
  4740                           ; switch strategies available:
  4741                           ; Name         Instructions Cycles
  4742                           ; simple_byte           10     6 (average)
  4743                           ; jumptable            260     6 (fixed)
  4744                           ;	Chosen strategy is simple_byte
  4745  062B  082C               	movf	??_sprintf,w
  4746  062C  3A00               	xorlw	0	; case 0
  4747  062D  1903               	skipnz
  4748  062E  2EC6               	goto	l3313
  4749  062F  3A64               	xorlw	100	; case 100
  4750  0630  1903               	skipnz
  4751  0631  2E36               	goto	l3273
  4752  0632  3A0D               	xorlw	13	; case 105
  4753  0633  1903               	skipnz
  4754  0634  2E36               	goto	l3273
  4755  0635  2DF8               	goto	l3311
  4756  0636                     l3273:	
  4757                           
  4758                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4759  0636  082F               	movf	sprintf@ap,w
  4760  0637  0084               	movwf	4
  4761  0638  1383               	bcf	3,7	;select IRP bank0
  4762  0639  0800               	movf	0,w
  4763  063A  00B2               	movwf	sprintf@val
  4764  063B  0A84               	incf	4,f
  4765  063C  0800               	movf	0,w
  4766  063D  00B3               	movwf	sprintf@val+1
  4767  063E  3002               	movlw	2
  4768  063F  00AC               	movwf	??_sprintf
  4769  0640  082C               	movf	??_sprintf,w
  4770  0641  07AF               	addwf	sprintf@ap,f
  4771                           
  4772                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  4773  0642  1FB3               	btfss	sprintf@val+1,7
  4774  0643  2E4D               	goto	l3283
  4775                           
  4776                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  4777  0644  3003               	movlw	3
  4778  0645  00AC               	movwf	??_sprintf
  4779  0646  082C               	movf	??_sprintf,w
  4780  0647  04B0               	iorwf	sprintf@flag,f
  4781                           
  4782                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  4783  0648  09B2               	comf	sprintf@val,f
  4784  0649  09B3               	comf	sprintf@val+1,f
  4785  064A  0AB2               	incf	sprintf@val,f
  4786  064B  1903               	skipnz
  4787  064C  0AB3               	incf	sprintf@val+1,f
  4788  064D                     l3283:	
  4789                           
  4790                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4791  064D  01B5               	clrf	sprintf@c
  4792  064E  0AB5               	incf	sprintf@c,f
  4793  064F                     l3289:	
  4794                           
  4795                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  4796  064F  0835               	movf	sprintf@c,w
  4797  0650  00AC               	movwf	??_sprintf
  4798  0651  072C               	addwf	??_sprintf,w
  4799  0652  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4800  0653  0084               	movwf	4
  4801  0654  120A  118A  250A  120A  118A  	fcall	stringdir
  4802  0659  00AD               	movwf	??_sprintf+1
  4803  065A  120A  118A  250A  120A  118A  	fcall	stringdir
  4804  065F  00AE               	movwf	??_sprintf+2
  4805  0660  082E               	movf	??_sprintf+2,w
  4806  0661  0233               	subwf	sprintf@val+1,w
  4807  0662  1D03               	skipz
  4808  0663  2E66               	goto	u3155
  4809  0664  082D               	movf	??_sprintf+1,w
  4810  0665  0232               	subwf	sprintf@val,w
  4811  0666                     u3155:	
  4812  0666  1C03               	btfss	3,0
  4813  0667  2E70               	goto	l3295
  4814  0668  3001               	movlw	1
  4815  0669  00AC               	movwf	??_sprintf
  4816  066A  082C               	movf	??_sprintf,w
  4817  066B  07B5               	addwf	sprintf@c,f
  4818  066C  3005               	movlw	5
  4819  066D  0635               	xorwf	sprintf@c,w
  4820  066E  1D03               	btfss	3,2
  4821  066F  2E4F               	goto	l3289
  4822  0670                     l3295:	
  4823                           
  4824                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  4825  0670  0830               	movf	sprintf@flag,w
  4826  0671  3903               	andlw	3
  4827  0672  1903               	btfsc	3,2
  4828  0673  2E7F               	goto	l3301
  4829                           
  4830                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  4831  0674  302D               	movlw	45
  4832  0675  00AC               	movwf	??_sprintf
  4833  0676  0834               	movf	sprintf@sp,w
  4834  0677  0084               	movwf	4
  4835  0678  082C               	movf	??_sprintf,w
  4836  0679  1383               	bcf	3,7	;select IRP bank0
  4837  067A  0080               	movwf	0
  4838  067B  3001               	movlw	1
  4839  067C  00AC               	movwf	??_sprintf
  4840  067D  082C               	movf	??_sprintf,w
  4841  067E  07B4               	addwf	sprintf@sp,f
  4842  067F                     l3301:	
  4843                           
  4844                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  4845  067F  0835               	movf	sprintf@c,w
  4846  0680  00AC               	movwf	??_sprintf
  4847  0681  082C               	movf	??_sprintf,w
  4848  0682  00B1               	movwf	sprintf@prec
  4849  0683                     l3309:	
  4850                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  4851                           
  4852                           
  4853                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  4854  0683  30FF               	movlw	255
  4855  0684  00AC               	movwf	??_sprintf
  4856  0685  082C               	movf	??_sprintf,w
  4857  0686  07B1               	addwf	sprintf@prec,f
  4858  0687  0A31               	incf	sprintf@prec,w
  4859  0688  1903               	btfsc	3,2
  4860  0689  2DF8               	goto	l3311
  4861                           
  4862                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  4863  068A  300A               	movlw	10
  4864  068B  00A3               	movwf	___lwmod@divisor
  4865  068C  3000               	movlw	0
  4866  068D  00A4               	movwf	___lwmod@divisor+1
  4867  068E  0831               	movf	sprintf@prec,w
  4868  068F  00AC               	movwf	??_sprintf
  4869  0690  072C               	addwf	??_sprintf,w
  4870  0691  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4871  0692  0084               	movwf	4
  4872  0693  120A  118A  250A  120A  118A  	fcall	stringdir
  4873  0698  00F3               	movwf	___lwdiv@divisor
  4874  0699  120A  118A  250A  120A  118A  	fcall	stringdir
  4875  069E  00F4               	movwf	___lwdiv@divisor+1
  4876  069F  0833               	movf	sprintf@val+1,w
  4877  06A0  00F6               	movwf	___lwdiv@dividend+1
  4878  06A1  0832               	movf	sprintf@val,w
  4879  06A2  00F5               	movwf	___lwdiv@dividend
  4880  06A3  120A  158A  23D6  120A  118A  	fcall	___lwdiv
  4881  06A8  0874               	movf	?___lwdiv+1,w
  4882  06A9  1283               	bcf	3,5	;RP0=0, select bank0
  4883  06AA  1303               	bcf	3,6	;RP1=0, select bank0
  4884  06AB  00A6               	movwf	___lwmod@dividend+1
  4885  06AC  0873               	movf	?___lwdiv,w
  4886  06AD  00A5               	movwf	___lwmod@dividend
  4887  06AE  120A  158A  22F7  120A  118A  	fcall	___lwmod
  4888  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  4889  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  4890  06B5  0823               	movf	?___lwmod,w
  4891  06B6  3E30               	addlw	48
  4892  06B7  00AD               	movwf	??_sprintf+1
  4893  06B8  082D               	movf	??_sprintf+1,w
  4894  06B9  00B5               	movwf	sprintf@c
  4895                           
  4896                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  4897  06BA  0835               	movf	sprintf@c,w
  4898  06BB  00AC               	movwf	??_sprintf
  4899  06BC  0834               	movf	sprintf@sp,w
  4900  06BD  0084               	movwf	4
  4901  06BE  082C               	movf	??_sprintf,w
  4902  06BF  1383               	bcf	3,7	;select IRP bank0
  4903  06C0  0080               	movwf	0
  4904  06C1  3001               	movlw	1
  4905  06C2  00AC               	movwf	??_sprintf
  4906  06C3  082C               	movf	??_sprintf,w
  4907  06C4  07B4               	addwf	sprintf@sp,f
  4908  06C5  2E83               	goto	l3309
  4909  06C6                     l3313:	
  4910                           
  4911                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  4912  06C6  0834               	movf	sprintf@sp,w
  4913  06C7  0084               	movwf	4
  4914  06C8  1383               	bcf	3,7	;select IRP bank0
  4915  06C9  0180               	clrf	0
  4916  06CA  0008               	return
  4917  06CB                     __end_of_sprintf:	
  4918                           
  4919                           	psect	text16
  4920  0AF7                     __ptext16:	
  4921 ;; *************** function ___lwmod *****************
  4922 ;; Defined at:
  4923 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;  divisor         2    3[BANK0 ] unsigned int 
  4926 ;;  dividend        2    5[BANK0 ] unsigned int 
  4927 ;; Auto vars:     Size  Location     Type
  4928 ;;  counter         1    8[BANK0 ] unsigned char 
  4929 ;; Return value:  Size  Location     Type
  4930 ;;                  2    3[BANK0 ] unsigned int 
  4931 ;; Registers used:
  4932 ;;		wreg, status,2, status,0
  4933 ;; Tracked objects:
  4934 ;;		On entry : 0/0
  4935 ;;		On exit  : 0/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4938 ;;      Params:         0       4       0       0       0
  4939 ;;      Locals:         0       1       0       0       0
  4940 ;;      Temps:          0       1       0       0       0
  4941 ;;      Totals:         0       6       0       0       0
  4942 ;;Total ram usage:        6 bytes
  4943 ;; Hardware stack levels used:    1
  4944 ;; Hardware stack levels required when called:    1
  4945 ;; This function calls:
  4946 ;;		Nothing
  4947 ;; This function is called by:
  4948 ;;		_sprintf
  4949 ;; This function uses a non-reentrant model
  4950 ;;
  4951                           
  4952                           
  4953                           ;psect for function ___lwmod
  4954  0AF7                     ___lwmod:	
  4955                           
  4956                           ;incstack = 0
  4957                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4958  0AF7  1283               	bcf	3,5	;RP0=0, select bank0
  4959  0AF8  1303               	bcf	3,6	;RP1=0, select bank0
  4960  0AF9  0823               	movf	___lwmod@divisor,w
  4961  0AFA  0424               	iorwf	___lwmod@divisor+1,w
  4962  0AFB  1903               	btfsc	3,2
  4963  0AFC  2B26               	goto	l2223
  4964  0AFD  01A8               	clrf	___lwmod@counter
  4965  0AFE  0AA8               	incf	___lwmod@counter,f
  4966  0AFF                     l2213:	
  4967  0AFF  1BA4               	btfsc	___lwmod@divisor+1,7
  4968  0B00  2B0D               	goto	l2215
  4969  0B01  3001               	movlw	1
  4970  0B02                     u1715:	
  4971  0B02  1003               	clrc
  4972  0B03  0DA3               	rlf	___lwmod@divisor,f
  4973  0B04  0DA4               	rlf	___lwmod@divisor+1,f
  4974  0B05  3EFF               	addlw	-1
  4975  0B06  1D03               	skipz
  4976  0B07  2B02               	goto	u1715
  4977  0B08  3001               	movlw	1
  4978  0B09  00A7               	movwf	??___lwmod
  4979  0B0A  0827               	movf	??___lwmod,w
  4980  0B0B  07A8               	addwf	___lwmod@counter,f
  4981  0B0C  2AFF               	goto	l2213
  4982  0B0D                     l2215:	
  4983  0B0D  0824               	movf	___lwmod@divisor+1,w
  4984  0B0E  0226               	subwf	___lwmod@dividend+1,w
  4985  0B0F  1D03               	skipz
  4986  0B10  2B13               	goto	u1735
  4987  0B11  0823               	movf	___lwmod@divisor,w
  4988  0B12  0225               	subwf	___lwmod@dividend,w
  4989  0B13                     u1735:	
  4990  0B13  1C03               	skipc
  4991  0B14  2B1B               	goto	l2219
  4992  0B15  0823               	movf	___lwmod@divisor,w
  4993  0B16  02A5               	subwf	___lwmod@dividend,f
  4994  0B17  0824               	movf	___lwmod@divisor+1,w
  4995  0B18  1C03               	skipc
  4996  0B19  03A6               	decf	___lwmod@dividend+1,f
  4997  0B1A  02A6               	subwf	___lwmod@dividend+1,f
  4998  0B1B                     l2219:	
  4999  0B1B  3001               	movlw	1
  5000  0B1C                     u1745:	
  5001  0B1C  1003               	clrc
  5002  0B1D  0CA4               	rrf	___lwmod@divisor+1,f
  5003  0B1E  0CA3               	rrf	___lwmod@divisor,f
  5004  0B1F  3EFF               	addlw	-1
  5005  0B20  1D03               	skipz
  5006  0B21  2B1C               	goto	u1745
  5007  0B22  3001               	movlw	1
  5008  0B23  02A8               	subwf	___lwmod@counter,f
  5009  0B24  1D03               	btfss	3,2
  5010  0B25  2B0D               	goto	l2215
  5011  0B26                     l2223:	
  5012  0B26  0826               	movf	___lwmod@dividend+1,w
  5013  0B27  00A4               	movwf	?___lwmod+1
  5014  0B28  0825               	movf	___lwmod@dividend,w
  5015  0B29  00A3               	movwf	?___lwmod
  5016  0B2A  0008               	return
  5017  0B2B                     __end_of___lwmod:	
  5018                           
  5019                           	psect	text17
  5020  0BD6                     __ptext17:	
  5021 ;; *************** function ___lwdiv *****************
  5022 ;; Defined at:
  5023 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;  divisor         2    3[COMMON] unsigned int 
  5026 ;;  dividend        2    5[COMMON] unsigned int 
  5027 ;; Auto vars:     Size  Location     Type
  5028 ;;  quotient        2    1[BANK0 ] unsigned int 
  5029 ;;  counter         1    0[BANK0 ] unsigned char 
  5030 ;; Return value:  Size  Location     Type
  5031 ;;                  2    3[COMMON] unsigned int 
  5032 ;; Registers used:
  5033 ;;		wreg, status,2, status,0
  5034 ;; Tracked objects:
  5035 ;;		On entry : 0/0
  5036 ;;		On exit  : 0/0
  5037 ;;		Unchanged: 0/0
  5038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5039 ;;      Params:         4       0       0       0       0
  5040 ;;      Locals:         0       3       0       0       0
  5041 ;;      Temps:          1       0       0       0       0
  5042 ;;      Totals:         5       3       0       0       0
  5043 ;;Total ram usage:        8 bytes
  5044 ;; Hardware stack levels used:    1
  5045 ;; Hardware stack levels required when called:    1
  5046 ;; This function calls:
  5047 ;;		Nothing
  5048 ;; This function is called by:
  5049 ;;		_sprintf
  5050 ;; This function uses a non-reentrant model
  5051 ;;
  5052                           
  5053                           
  5054                           ;psect for function ___lwdiv
  5055  0BD6                     ___lwdiv:	
  5056                           
  5057                           ;incstack = 0
  5058                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5059  0BD6  1283               	bcf	3,5	;RP0=0, select bank0
  5060  0BD7  1303               	bcf	3,6	;RP1=0, select bank0
  5061  0BD8  01A1               	clrf	___lwdiv@quotient
  5062  0BD9  01A2               	clrf	___lwdiv@quotient+1
  5063  0BDA  0873               	movf	___lwdiv@divisor,w
  5064  0BDB  0474               	iorwf	___lwdiv@divisor+1,w
  5065  0BDC  1903               	btfsc	3,2
  5066  0BDD  2C0F               	goto	l3175
  5067  0BDE  01A0               	clrf	___lwdiv@counter
  5068  0BDF  0AA0               	incf	___lwdiv@counter,f
  5069  0BE0                     l3163:	
  5070  0BE0  1BF4               	btfsc	___lwdiv@divisor+1,7
  5071  0BE1  2BEE               	goto	l3165
  5072  0BE2  3001               	movlw	1
  5073  0BE3                     u2975:	
  5074  0BE3  1003               	clrc
  5075  0BE4  0DF3               	rlf	___lwdiv@divisor,f
  5076  0BE5  0DF4               	rlf	___lwdiv@divisor+1,f
  5077  0BE6  3EFF               	addlw	-1
  5078  0BE7  1D03               	skipz
  5079  0BE8  2BE3               	goto	u2975
  5080  0BE9  3001               	movlw	1
  5081  0BEA  00F7               	movwf	??___lwdiv
  5082  0BEB  0877               	movf	??___lwdiv,w
  5083  0BEC  07A0               	addwf	___lwdiv@counter,f
  5084  0BED  2BE0               	goto	l3163
  5085  0BEE                     l3165:	
  5086  0BEE  3001               	movlw	1
  5087  0BEF                     u2995:	
  5088  0BEF  1003               	clrc
  5089  0BF0  0DA1               	rlf	___lwdiv@quotient,f
  5090  0BF1  0DA2               	rlf	___lwdiv@quotient+1,f
  5091  0BF2  3EFF               	addlw	-1
  5092  0BF3  1D03               	skipz
  5093  0BF4  2BEF               	goto	u2995
  5094  0BF5  0874               	movf	___lwdiv@divisor+1,w
  5095  0BF6  0276               	subwf	___lwdiv@dividend+1,w
  5096  0BF7  1D03               	skipz
  5097  0BF8  2BFB               	goto	u3005
  5098  0BF9  0873               	movf	___lwdiv@divisor,w
  5099  0BFA  0275               	subwf	___lwdiv@dividend,w
  5100  0BFB                     u3005:	
  5101  0BFB  1C03               	skipc
  5102  0BFC  2C04               	goto	l3171
  5103  0BFD  0873               	movf	___lwdiv@divisor,w
  5104  0BFE  02F5               	subwf	___lwdiv@dividend,f
  5105  0BFF  0874               	movf	___lwdiv@divisor+1,w
  5106  0C00  1C03               	skipc
  5107  0C01  03F6               	decf	___lwdiv@dividend+1,f
  5108  0C02  02F6               	subwf	___lwdiv@dividend+1,f
  5109  0C03  1421               	bsf	___lwdiv@quotient,0
  5110  0C04                     l3171:	
  5111  0C04  3001               	movlw	1
  5112  0C05                     u3015:	
  5113  0C05  1003               	clrc
  5114  0C06  0CF4               	rrf	___lwdiv@divisor+1,f
  5115  0C07  0CF3               	rrf	___lwdiv@divisor,f
  5116  0C08  3EFF               	addlw	-1
  5117  0C09  1D03               	skipz
  5118  0C0A  2C05               	goto	u3015
  5119  0C0B  3001               	movlw	1
  5120  0C0C  02A0               	subwf	___lwdiv@counter,f
  5121  0C0D  1D03               	btfss	3,2
  5122  0C0E  2BEE               	goto	l3165
  5123  0C0F                     l3175:	
  5124  0C0F  0822               	movf	___lwdiv@quotient+1,w
  5125  0C10  00F4               	movwf	?___lwdiv+1
  5126  0C11  0821               	movf	___lwdiv@quotient,w
  5127  0C12  00F3               	movwf	?___lwdiv
  5128  0C13  0008               	return
  5129  0C14                     __end_of___lwdiv:	
  5130                           
  5131                           	psect	text18
  5132  0953                     __ptext18:	
  5133 ;; *************** function ___bmul *****************
  5134 ;; Defined at:
  5135 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;  multiplier      1    wreg     unsigned char 
  5138 ;;  multiplicand    1    3[COMMON] unsigned char 
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;  multiplier      1    6[COMMON] unsigned char 
  5141 ;;  product         1    5[COMMON] unsigned char 
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      unsigned char 
  5144 ;; Registers used:
  5145 ;;		wreg, status,2, status,0
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5151 ;;      Params:         1       0       0       0       0
  5152 ;;      Locals:         2       0       0       0       0
  5153 ;;      Temps:          1       0       0       0       0
  5154 ;;      Totals:         4       0       0       0       0
  5155 ;;Total ram usage:        4 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    1
  5158 ;; This function calls:
  5159 ;;		Nothing
  5160 ;; This function is called by:
  5161 ;;		_main
  5162 ;;		_get_temp
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           
  5167                           ;psect for function ___bmul
  5168  0953                     ___bmul:	
  5169                           
  5170                           ;incstack = 0
  5171                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5172                           ;___bmul@multiplier stored from wreg
  5173  0953  00F6               	movwf	___bmul@multiplier
  5174  0954  01F5               	clrf	___bmul@product
  5175  0955                     l2429:	
  5176  0955  1C76               	btfss	___bmul@multiplier,0
  5177  0956  295B               	goto	l2433
  5178  0957  0873               	movf	___bmul@multiplicand,w
  5179  0958  00F4               	movwf	??___bmul
  5180  0959  0874               	movf	??___bmul,w
  5181  095A  07F5               	addwf	___bmul@product,f
  5182  095B                     l2433:	
  5183  095B  1003               	clrc
  5184  095C  0DF3               	rlf	___bmul@multiplicand,f
  5185  095D  1003               	clrc
  5186  095E  0CF6               	rrf	___bmul@multiplier,f
  5187  095F  0876               	movf	___bmul@multiplier,w
  5188  0960  1D03               	btfss	3,2
  5189  0961  2955               	goto	l2429
  5190  0962  0875               	movf	___bmul@product,w
  5191  0963  0008               	return
  5192  0964                     __end_of___bmul:	
  5193                           
  5194                           	psect	text19
  5195  0A33                     __ptext19:	
  5196 ;; *************** function _get_hall *****************
  5197 ;; Defined at:
  5198 ;;		line 456 in file "mainMaster.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;		None
  5201 ;; Auto vars:     Size  Location     Type
  5202 ;;  key             1    2[BANK0 ] unsigned char 
  5203 ;; Return value:  Size  Location     Type
  5204 ;;                  1    wreg      unsigned char 
  5205 ;; Registers used:
  5206 ;;		wreg, status,2, status,0, pclath, cstack
  5207 ;; Tracked objects:
  5208 ;;		On entry : 0/0
  5209 ;;		On exit  : 0/0
  5210 ;;		Unchanged: 0/0
  5211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5212 ;;      Params:         0       0       0       0       0
  5213 ;;      Locals:         0       1       0       0       0
  5214 ;;      Temps:          1       0       0       0       0
  5215 ;;      Totals:         1       1       0       0       0
  5216 ;;Total ram usage:        2 bytes
  5217 ;; Hardware stack levels used:    1
  5218 ;; Hardware stack levels required when called:    3
  5219 ;; This function calls:
  5220 ;;		_I2C_Master_Read
  5221 ;;		_I2C_Master_Start
  5222 ;;		_I2C_Master_Stop
  5223 ;;		_I2C_Master_Write
  5224 ;; This function is called by:
  5225 ;;		_main
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           
  5230                           ;psect for function _get_hall
  5231  0A33                     _get_hall:	
  5232                           
  5233                           ;mainMaster.c: 458:     char key;;mainMaster.c: 460:     I2C_Master_Start();
  5234                           
  5235                           ;incstack = 0
  5236                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  5237  0A33  120A  158A  2110  120A  158A  	fcall	_I2C_Master_Start
  5238                           
  5239                           ;mainMaster.c: 461:     I2C_Master_Write(0x11);
  5240  0A38  3011               	movlw	17
  5241  0A39  00F3               	movwf	I2C_Master_Write@d
  5242  0A3A  3000               	movlw	0
  5243  0A3B  00F4               	movwf	I2C_Master_Write@d+1
  5244  0A3C  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  5245                           
  5246                           ;mainMaster.c: 462:     key = I2C_Master_Read(0);
  5247  0A41  3000               	movlw	0
  5248  0A42  00F3               	movwf	I2C_Master_Read@a
  5249  0A43  00F4               	movwf	I2C_Master_Read@a+1
  5250  0A44  120A  158A  22C9  120A  158A  	fcall	_I2C_Master_Read
  5251  0A49  0873               	movf	?_I2C_Master_Read,w
  5252  0A4A  00F7               	movwf	??_get_hall
  5253  0A4B  0877               	movf	??_get_hall,w
  5254  0A4C  1283               	bcf	3,5	;RP0=0, select bank0
  5255  0A4D  1303               	bcf	3,6	;RP1=0, select bank0
  5256  0A4E  00A2               	movwf	get_hall@key
  5257                           
  5258                           ;mainMaster.c: 463:     I2C_Master_Stop();
  5259  0A4F  120A  158A  2117   	fcall	_I2C_Master_Stop
  5260                           
  5261                           ;mainMaster.c: 465:     return (key);
  5262  0A52  1283               	bcf	3,5	;RP0=0, select bank0
  5263  0A53  1303               	bcf	3,6	;RP1=0, select bank0
  5264  0A54  0822               	movf	get_hall@key,w
  5265  0A55  0008               	return
  5266  0A56                     __end_of_get_hall:	
  5267                           
  5268                           	psect	text20
  5269  0B9C                     __ptext20:	
  5270 ;; *************** function _get_day *****************
  5271 ;; Defined at:
  5272 ;;		line 414 in file "mainMaster.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;		None
  5275 ;; Auto vars:     Size  Location     Type
  5276 ;;  d               1    2[BANK0 ] unsigned char 
  5277 ;; Return value:  Size  Location     Type
  5278 ;;                  1    wreg      unsigned char 
  5279 ;; Registers used:
  5280 ;;		wreg, status,2, status,0, pclath, cstack
  5281 ;; Tracked objects:
  5282 ;;		On entry : 0/0
  5283 ;;		On exit  : 0/0
  5284 ;;		Unchanged: 0/0
  5285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5286 ;;      Params:         0       0       0       0       0
  5287 ;;      Locals:         0       1       0       0       0
  5288 ;;      Temps:          1       0       0       0       0
  5289 ;;      Totals:         1       1       0       0       0
  5290 ;;Total ram usage:        2 bytes
  5291 ;; Hardware stack levels used:    1
  5292 ;; Hardware stack levels required when called:    3
  5293 ;; This function calls:
  5294 ;;		_I2C_Master_Read
  5295 ;;		_I2C_Master_RepeatedStart
  5296 ;;		_I2C_Master_Start
  5297 ;;		_I2C_Master_Stop
  5298 ;;		_I2C_Master_Write
  5299 ;; This function is called by:
  5300 ;;		_main
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           
  5305                           ;psect for function _get_day
  5306  0B9C                     _get_day:	
  5307                           
  5308                           ;mainMaster.c: 416:     char d;;mainMaster.c: 418:     I2C_Master_Start();
  5309                           
  5310                           ;incstack = 0
  5311                           ; Regs used in _get_day: [wreg+status,2+status,0+pclath+cstack]
  5312  0B9C  120A  158A  2110  120A  158A  	fcall	_I2C_Master_Start
  5313                           
  5314                           ;mainMaster.c: 419:     I2C_Master_Write(0xD0);
  5315  0BA1  30D0               	movlw	208
  5316  0BA2  00F3               	movwf	I2C_Master_Write@d
  5317  0BA3  3000               	movlw	0
  5318  0BA4  00F4               	movwf	I2C_Master_Write@d+1
  5319  0BA5  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  5320                           
  5321                           ;mainMaster.c: 420:     I2C_Master_Write(0x03);
  5322  0BAA  3003               	movlw	3
  5323  0BAB  00F3               	movwf	I2C_Master_Write@d
  5324  0BAC  3000               	movlw	0
  5325  0BAD  00F4               	movwf	I2C_Master_Write@d+1
  5326  0BAE  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  5327                           
  5328                           ;mainMaster.c: 421:     I2C_Master_RepeatedStart();
  5329  0BB3  120A  158A  211E  120A  158A  	fcall	_I2C_Master_RepeatedStart
  5330                           
  5331                           ;mainMaster.c: 422:     I2C_Master_Write(0xD1);
  5332  0BB8  30D1               	movlw	209
  5333  0BB9  00F3               	movwf	I2C_Master_Write@d
  5334  0BBA  3000               	movlw	0
  5335  0BBB  00F4               	movwf	I2C_Master_Write@d+1
  5336  0BBC  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  5337                           
  5338                           ;mainMaster.c: 423:     d = I2C_Master_Read(0);
  5339  0BC1  3000               	movlw	0
  5340  0BC2  00F3               	movwf	I2C_Master_Read@a
  5341  0BC3  00F4               	movwf	I2C_Master_Read@a+1
  5342  0BC4  120A  158A  22C9  120A  158A  	fcall	_I2C_Master_Read
  5343  0BC9  0873               	movf	?_I2C_Master_Read,w
  5344  0BCA  00F7               	movwf	??_get_day
  5345  0BCB  0877               	movf	??_get_day,w
  5346  0BCC  1283               	bcf	3,5	;RP0=0, select bank0
  5347  0BCD  1303               	bcf	3,6	;RP1=0, select bank0
  5348  0BCE  00A2               	movwf	get_day@d
  5349                           
  5350                           ;mainMaster.c: 424:     I2C_Master_Stop();
  5351  0BCF  120A  158A  2117   	fcall	_I2C_Master_Stop
  5352                           
  5353                           ;mainMaster.c: 426:     return d;
  5354  0BD2  1283               	bcf	3,5	;RP0=0, select bank0
  5355  0BD3  1303               	bcf	3,6	;RP1=0, select bank0
  5356  0BD4  0822               	movf	get_day@d,w
  5357  0BD5  0008               	return
  5358  0BD6                     __end_of_get_day:	
  5359                           
  5360                           	psect	text21
  5361  091E                     __ptext21:	
  5362 ;; *************** function _I2C_Master_RepeatedStart *****************
  5363 ;; Defined at:
  5364 ;;		line 47 in file "./I2C.h"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;		None
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;		None
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  1    wreg      void 
  5371 ;; Registers used:
  5372 ;;		wreg, status,2, status,0, pclath, cstack
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5378 ;;      Params:         0       0       0       0       0
  5379 ;;      Locals:         0       0       0       0       0
  5380 ;;      Temps:          0       0       0       0       0
  5381 ;;      Totals:         0       0       0       0       0
  5382 ;;Total ram usage:        0 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; Hardware stack levels required when called:    2
  5385 ;; This function calls:
  5386 ;;		_I2C_Master_Wait
  5387 ;; This function is called by:
  5388 ;;		_get_time
  5389 ;;		_get_day
  5390 ;;		_get_temp
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           
  5395                           ;psect for function _I2C_Master_RepeatedStart
  5396  091E                     _I2C_Master_RepeatedStart:	
  5397                           
  5398                           ;./I2C.h: 49:     I2C_Master_Wait();
  5399                           
  5400                           ;incstack = 0
  5401                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  5402  091E  120A  158A  2135   	fcall	_I2C_Master_Wait
  5403                           
  5404                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  5405  0921  1683               	bsf	3,5	;RP0=1, select bank1
  5406  0922  1303               	bcf	3,6	;RP1=0, select bank1
  5407  0923  1491               	bsf	17,1	;volatile
  5408  0924  0008               	return
  5409  0925                     __end_of_I2C_Master_RepeatedStart:	
  5410                           
  5411                           	psect	text22
  5412  0A10                     __ptext22:	
  5413 ;; *************** function _get_PIR *****************
  5414 ;; Defined at:
  5415 ;;		line 480 in file "mainMaster.c"
  5416 ;; Parameters:    Size  Location     Type
  5417 ;;		None
  5418 ;; Auto vars:     Size  Location     Type
  5419 ;;  PIR             1    2[BANK0 ] unsigned char 
  5420 ;; Return value:  Size  Location     Type
  5421 ;;                  1    wreg      unsigned char 
  5422 ;; Registers used:
  5423 ;;		wreg, status,2, status,0, pclath, cstack
  5424 ;; Tracked objects:
  5425 ;;		On entry : 0/0
  5426 ;;		On exit  : 0/0
  5427 ;;		Unchanged: 0/0
  5428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5429 ;;      Params:         0       0       0       0       0
  5430 ;;      Locals:         0       1       0       0       0
  5431 ;;      Temps:          1       0       0       0       0
  5432 ;;      Totals:         1       1       0       0       0
  5433 ;;Total ram usage:        2 bytes
  5434 ;; Hardware stack levels used:    1
  5435 ;; Hardware stack levels required when called:    3
  5436 ;; This function calls:
  5437 ;;		_I2C_Master_Read
  5438 ;;		_I2C_Master_Start
  5439 ;;		_I2C_Master_Stop
  5440 ;;		_I2C_Master_Write
  5441 ;; This function is called by:
  5442 ;;		_main
  5443 ;; This function uses a non-reentrant model
  5444 ;;
  5445                           
  5446                           
  5447                           ;psect for function _get_PIR
  5448  0A10                     _get_PIR:	
  5449                           
  5450                           ;mainMaster.c: 482:     char PIR;;mainMaster.c: 484:     I2C_Master_Start();
  5451                           
  5452                           ;incstack = 0
  5453                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  5454  0A10  120A  158A  2110  120A  158A  	fcall	_I2C_Master_Start
  5455                           
  5456                           ;mainMaster.c: 485:     I2C_Master_Write(0x41);
  5457  0A15  3041               	movlw	65
  5458  0A16  00F3               	movwf	I2C_Master_Write@d
  5459  0A17  3000               	movlw	0
  5460  0A18  00F4               	movwf	I2C_Master_Write@d+1
  5461  0A19  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  5462                           
  5463                           ;mainMaster.c: 486:     PIR = I2C_Master_Read(0);
  5464  0A1E  3000               	movlw	0
  5465  0A1F  00F3               	movwf	I2C_Master_Read@a
  5466  0A20  00F4               	movwf	I2C_Master_Read@a+1
  5467  0A21  120A  158A  22C9  120A  158A  	fcall	_I2C_Master_Read
  5468  0A26  0873               	movf	?_I2C_Master_Read,w
  5469  0A27  00F7               	movwf	??_get_PIR
  5470  0A28  0877               	movf	??_get_PIR,w
  5471  0A29  1283               	bcf	3,5	;RP0=0, select bank0
  5472  0A2A  1303               	bcf	3,6	;RP1=0, select bank0
  5473  0A2B  00A2               	movwf	get_PIR@PIR
  5474                           
  5475                           ;mainMaster.c: 487:     I2C_Master_Stop();
  5476  0A2C  120A  158A  2117   	fcall	_I2C_Master_Stop
  5477                           
  5478                           ;mainMaster.c: 489:     return (PIR);
  5479  0A2F  1283               	bcf	3,5	;RP0=0, select bank0
  5480  0A30  1303               	bcf	3,6	;RP1=0, select bank0
  5481  0A31  0822               	movf	get_PIR@PIR,w
  5482  0A32  0008               	return
  5483  0A33                     __end_of_get_PIR:	
  5484                           
  5485                           	psect	text23
  5486  09ED                     __ptext23:	
  5487 ;; *************** function _get_IR *****************
  5488 ;; Defined at:
  5489 ;;		line 492 in file "mainMaster.c"
  5490 ;; Parameters:    Size  Location     Type
  5491 ;;		None
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;  IR              1    2[BANK0 ] unsigned char 
  5494 ;; Return value:  Size  Location     Type
  5495 ;;                  1    wreg      unsigned char 
  5496 ;; Registers used:
  5497 ;;		wreg, status,2, status,0, pclath, cstack
  5498 ;; Tracked objects:
  5499 ;;		On entry : 0/0
  5500 ;;		On exit  : 0/0
  5501 ;;		Unchanged: 0/0
  5502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5503 ;;      Params:         0       0       0       0       0
  5504 ;;      Locals:         0       1       0       0       0
  5505 ;;      Temps:          1       0       0       0       0
  5506 ;;      Totals:         1       1       0       0       0
  5507 ;;Total ram usage:        2 bytes
  5508 ;; Hardware stack levels used:    1
  5509 ;; Hardware stack levels required when called:    3
  5510 ;; This function calls:
  5511 ;;		_I2C_Master_Read
  5512 ;;		_I2C_Master_Start
  5513 ;;		_I2C_Master_Stop
  5514 ;;		_I2C_Master_Write
  5515 ;; This function is called by:
  5516 ;;		_main
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           
  5521                           ;psect for function _get_IR
  5522  09ED                     _get_IR:	
  5523                           
  5524                           ;mainMaster.c: 494:     char IR;;mainMaster.c: 496:     I2C_Master_Start();
  5525                           
  5526                           ;incstack = 0
  5527                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  5528  09ED  120A  158A  2110  120A  158A  	fcall	_I2C_Master_Start
  5529                           
  5530                           ;mainMaster.c: 497:     I2C_Master_Write(0x31);
  5531  09F2  3031               	movlw	49
  5532  09F3  00F3               	movwf	I2C_Master_Write@d
  5533  09F4  3000               	movlw	0
  5534  09F5  00F4               	movwf	I2C_Master_Write@d+1
  5535  09F6  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  5536                           
  5537                           ;mainMaster.c: 498:     IR = I2C_Master_Read(0);
  5538  09FB  3000               	movlw	0
  5539  09FC  00F3               	movwf	I2C_Master_Read@a
  5540  09FD  00F4               	movwf	I2C_Master_Read@a+1
  5541  09FE  120A  158A  22C9  120A  158A  	fcall	_I2C_Master_Read
  5542  0A03  0873               	movf	?_I2C_Master_Read,w
  5543  0A04  00F7               	movwf	??_get_IR
  5544  0A05  0877               	movf	??_get_IR,w
  5545  0A06  1283               	bcf	3,5	;RP0=0, select bank0
  5546  0A07  1303               	bcf	3,6	;RP1=0, select bank0
  5547  0A08  00A2               	movwf	get_IR@IR
  5548                           
  5549                           ;mainMaster.c: 499:     I2C_Master_Stop();
  5550  0A09  120A  158A  2117   	fcall	_I2C_Master_Stop
  5551                           
  5552                           ;mainMaster.c: 501:     return (IR);
  5553  0A0C  1283               	bcf	3,5	;RP0=0, select bank0
  5554  0A0D  1303               	bcf	3,6	;RP1=0, select bank0
  5555  0A0E  0822               	movf	get_IR@IR,w
  5556  0A0F  0008               	return
  5557  0A10                     __end_of_get_IR:	
  5558                           
  5559                           	psect	text24
  5560  0AC9                     __ptext24:	
  5561 ;; *************** function _I2C_Master_Read *****************
  5562 ;; Defined at:
  5563 ;;		line 74 in file "./I2C.h"
  5564 ;; Parameters:    Size  Location     Type
  5565 ;;  a               2    3[COMMON] unsigned short 
  5566 ;; Auto vars:     Size  Location     Type
  5567 ;;  temp            2    0[BANK0 ] unsigned short 
  5568 ;; Return value:  Size  Location     Type
  5569 ;;                  2    3[COMMON] unsigned short 
  5570 ;; Registers used:
  5571 ;;		wreg, status,2, status,0, pclath, cstack
  5572 ;; Tracked objects:
  5573 ;;		On entry : 0/0
  5574 ;;		On exit  : 0/0
  5575 ;;		Unchanged: 0/0
  5576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5577 ;;      Params:         2       0       0       0       0
  5578 ;;      Locals:         0       2       0       0       0
  5579 ;;      Temps:          2       0       0       0       0
  5580 ;;      Totals:         4       2       0       0       0
  5581 ;;Total ram usage:        6 bytes
  5582 ;; Hardware stack levels used:    1
  5583 ;; Hardware stack levels required when called:    2
  5584 ;; This function calls:
  5585 ;;		_I2C_Master_Wait
  5586 ;; This function is called by:
  5587 ;;		_get_time
  5588 ;;		_get_day
  5589 ;;		_get_temp
  5590 ;;		_get_hall
  5591 ;;		_get_tripwire
  5592 ;;		_get_PIR
  5593 ;;		_get_IR
  5594 ;; This function uses a non-reentrant model
  5595 ;;
  5596                           
  5597                           
  5598                           ;psect for function _I2C_Master_Read
  5599  0AC9                     _I2C_Master_Read:	
  5600                           
  5601                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  5602                           
  5603                           ;incstack = 0
  5604                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  5605  0AC9  120A  158A  2135  120A  158A  	fcall	_I2C_Master_Wait
  5606                           
  5607                           ;./I2C.h: 78:     RCEN = 1;
  5608  0ACE  1683               	bsf	3,5	;RP0=1, select bank1
  5609  0ACF  1303               	bcf	3,6	;RP1=0, select bank1
  5610  0AD0  1591               	bsf	17,3	;volatile
  5611                           
  5612                           ;./I2C.h: 79:     I2C_Master_Wait();
  5613  0AD1  120A  158A  2135  120A  158A  	fcall	_I2C_Master_Wait
  5614                           
  5615                           ;./I2C.h: 80:     temp = SSPBUF;
  5616  0AD6  1283               	bcf	3,5	;RP0=0, select bank0
  5617  0AD7  1303               	bcf	3,6	;RP1=0, select bank0
  5618  0AD8  0813               	movf	19,w	;volatile
  5619  0AD9  00F5               	movwf	??_I2C_Master_Read
  5620  0ADA  01F6               	clrf	??_I2C_Master_Read+1
  5621  0ADB  0875               	movf	??_I2C_Master_Read,w
  5622  0ADC  00A0               	movwf	I2C_Master_Read@temp
  5623  0ADD  0876               	movf	??_I2C_Master_Read+1,w
  5624  0ADE  00A1               	movwf	I2C_Master_Read@temp+1
  5625                           
  5626                           ;./I2C.h: 81:     I2C_Master_Wait();
  5627  0ADF  120A  158A  2135  120A  158A  	fcall	_I2C_Master_Wait
  5628                           
  5629                           ;./I2C.h: 83:     if(a == 1){
  5630  0AE4  0373               	decf	I2C_Master_Read@a,w
  5631  0AE5  0474               	iorwf	I2C_Master_Read@a+1,w
  5632  0AE6  1D03               	btfss	3,2
  5633  0AE7  2AEC               	goto	l150
  5634                           
  5635                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  5636  0AE8  1683               	bsf	3,5	;RP0=1, select bank1
  5637  0AE9  1303               	bcf	3,6	;RP1=0, select bank1
  5638  0AEA  1291               	bcf	17,5	;volatile
  5639                           
  5640                           ;./I2C.h: 85:     }else{
  5641  0AEB  2AEF               	goto	l151
  5642  0AEC                     l150:	
  5643                           
  5644                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  5645  0AEC  1683               	bsf	3,5	;RP0=1, select bank1
  5646  0AED  1303               	bcf	3,6	;RP1=0, select bank1
  5647  0AEE  1691               	bsf	17,5	;volatile
  5648  0AEF                     l151:	
  5649                           ;./I2C.h: 87:     }
  5650                           
  5651                           
  5652                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  5653  0AEF  1611               	bsf	17,4	;volatile
  5654                           
  5655                           ;./I2C.h: 89:     return temp;
  5656  0AF0  1283               	bcf	3,5	;RP0=0, select bank0
  5657  0AF1  1303               	bcf	3,6	;RP1=0, select bank0
  5658  0AF2  0821               	movf	I2C_Master_Read@temp+1,w
  5659  0AF3  00F4               	movwf	?_I2C_Master_Read+1
  5660  0AF4  0820               	movf	I2C_Master_Read@temp,w
  5661  0AF5  00F3               	movwf	?_I2C_Master_Read
  5662  0AF6  0008               	return
  5663  0AF7                     __end_of_I2C_Master_Read:	
  5664                           
  5665                           	psect	text25
  5666  0998                     __ptext25:	
  5667 ;; *************** function _close_door *****************
  5668 ;; Defined at:
  5669 ;;		line 513 in file "mainMaster.c"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;		None
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;		None
  5674 ;; Return value:  Size  Location     Type
  5675 ;;                  1    wreg      void 
  5676 ;; Registers used:
  5677 ;;		wreg, status,2, status,0, pclath, cstack
  5678 ;; Tracked objects:
  5679 ;;		On entry : 0/0
  5680 ;;		On exit  : 0/0
  5681 ;;		Unchanged: 0/0
  5682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5683 ;;      Params:         0       0       0       0       0
  5684 ;;      Locals:         0       0       0       0       0
  5685 ;;      Temps:          0       0       0       0       0
  5686 ;;      Totals:         0       0       0       0       0
  5687 ;;Total ram usage:        0 bytes
  5688 ;; Hardware stack levels used:    1
  5689 ;; Hardware stack levels required when called:    3
  5690 ;; This function calls:
  5691 ;;		_I2C_Master_Start
  5692 ;;		_I2C_Master_Stop
  5693 ;;		_I2C_Master_Write
  5694 ;; This function is called by:
  5695 ;;		_main
  5696 ;; This function uses a non-reentrant model
  5697 ;;
  5698                           
  5699                           
  5700                           ;psect for function _close_door
  5701  0998                     _close_door:	
  5702                           
  5703                           ;mainMaster.c: 515:     I2C_Master_Start();
  5704                           
  5705                           ;incstack = 0
  5706                           ; Regs used in _close_door: [wreg+status,2+status,0+pclath+cstack]
  5707  0998  120A  158A  2110  120A  158A  	fcall	_I2C_Master_Start
  5708                           
  5709                           ;mainMaster.c: 516:     I2C_Master_Write(0x20);
  5710  099D  3020               	movlw	32
  5711  099E  00F3               	movwf	I2C_Master_Write@d
  5712  099F  3000               	movlw	0
  5713  09A0  00F4               	movwf	I2C_Master_Write@d+1
  5714  09A1  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  5715                           
  5716                           ;mainMaster.c: 517:     I2C_Master_Write(0xF0);
  5717  09A6  30F0               	movlw	240
  5718  09A7  00F3               	movwf	I2C_Master_Write@d
  5719  09A8  3000               	movlw	0
  5720  09A9  00F4               	movwf	I2C_Master_Write@d+1
  5721  09AA  120A  158A  2125  120A  158A  	fcall	_I2C_Master_Write
  5722                           
  5723                           ;mainMaster.c: 518:     I2C_Master_Stop();
  5724  09AF  120A  158A  2117   	fcall	_I2C_Master_Stop
  5725  09B2  0008               	return
  5726  09B3                     __end_of_close_door:	
  5727                           
  5728                           	psect	text26
  5729  0925                     __ptext26:	
  5730 ;; *************** function _I2C_Master_Write *****************
  5731 ;; Defined at:
  5732 ;;		line 65 in file "./I2C.h"
  5733 ;; Parameters:    Size  Location     Type
  5734 ;;  d               2    3[COMMON] unsigned int 
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;		None
  5737 ;; Return value:  Size  Location     Type
  5738 ;;                  1    wreg      void 
  5739 ;; Registers used:
  5740 ;;		wreg, status,2, status,0, pclath, cstack
  5741 ;; Tracked objects:
  5742 ;;		On entry : 0/0
  5743 ;;		On exit  : 0/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5746 ;;      Params:         2       0       0       0       0
  5747 ;;      Locals:         0       0       0       0       0
  5748 ;;      Temps:          0       0       0       0       0
  5749 ;;      Totals:         2       0       0       0       0
  5750 ;;Total ram usage:        2 bytes
  5751 ;; Hardware stack levels used:    1
  5752 ;; Hardware stack levels required when called:    2
  5753 ;; This function calls:
  5754 ;;		_I2C_Master_Wait
  5755 ;; This function is called by:
  5756 ;;		_write_RTC
  5757 ;;		_get_time
  5758 ;;		_get_day
  5759 ;;		_get_temp
  5760 ;;		_get_hall
  5761 ;;		_get_tripwire
  5762 ;;		_get_PIR
  5763 ;;		_get_IR
  5764 ;;		_open_door
  5765 ;;		_close_door
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           
  5770                           ;psect for function _I2C_Master_Write
  5771  0925                     _I2C_Master_Write:	
  5772                           
  5773                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  5774                           
  5775                           ;incstack = 0
  5776                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5777  0925  120A  158A  2135   	fcall	_I2C_Master_Wait
  5778                           
  5779                           ;./I2C.h: 68:     SSPBUF = d;
  5780  0928  0873               	movf	I2C_Master_Write@d,w
  5781  0929  1283               	bcf	3,5	;RP0=0, select bank0
  5782  092A  1303               	bcf	3,6	;RP1=0, select bank0
  5783  092B  0093               	movwf	19	;volatile
  5784  092C  0008               	return
  5785  092D                     __end_of_I2C_Master_Write:	
  5786                           
  5787                           	psect	text27
  5788  0917                     __ptext27:	
  5789 ;; *************** function _I2C_Master_Stop *****************
  5790 ;; Defined at:
  5791 ;;		line 55 in file "./I2C.h"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;		None
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;		None
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  1    wreg      void 
  5798 ;; Registers used:
  5799 ;;		wreg, status,2, status,0, pclath, cstack
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5805 ;;      Params:         0       0       0       0       0
  5806 ;;      Locals:         0       0       0       0       0
  5807 ;;      Temps:          0       0       0       0       0
  5808 ;;      Totals:         0       0       0       0       0
  5809 ;;Total ram usage:        0 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:    2
  5812 ;; This function calls:
  5813 ;;		_I2C_Master_Wait
  5814 ;; This function is called by:
  5815 ;;		_write_RTC
  5816 ;;		_get_time
  5817 ;;		_get_day
  5818 ;;		_get_temp
  5819 ;;		_get_hall
  5820 ;;		_get_tripwire
  5821 ;;		_get_PIR
  5822 ;;		_get_IR
  5823 ;;		_open_door
  5824 ;;		_close_door
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           
  5829                           ;psect for function _I2C_Master_Stop
  5830  0917                     _I2C_Master_Stop:	
  5831                           
  5832                           ;./I2C.h: 57:     I2C_Master_Wait();
  5833                           
  5834                           ;incstack = 0
  5835                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5836  0917  120A  158A  2135   	fcall	_I2C_Master_Wait
  5837                           
  5838                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  5839  091A  1683               	bsf	3,5	;RP0=1, select bank1
  5840  091B  1303               	bcf	3,6	;RP1=0, select bank1
  5841  091C  1511               	bsf	17,2	;volatile
  5842  091D  0008               	return
  5843  091E                     __end_of_I2C_Master_Stop:	
  5844                           
  5845                           	psect	text28
  5846  0910                     __ptext28:	
  5847 ;; *************** function _I2C_Master_Start *****************
  5848 ;; Defined at:
  5849 ;;		line 39 in file "./I2C.h"
  5850 ;; Parameters:    Size  Location     Type
  5851 ;;		None
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;		None
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  1    wreg      void 
  5856 ;; Registers used:
  5857 ;;		wreg, status,2, status,0, pclath, cstack
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5863 ;;      Params:         0       0       0       0       0
  5864 ;;      Locals:         0       0       0       0       0
  5865 ;;      Temps:          0       0       0       0       0
  5866 ;;      Totals:         0       0       0       0       0
  5867 ;;Total ram usage:        0 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; Hardware stack levels required when called:    2
  5870 ;; This function calls:
  5871 ;;		_I2C_Master_Wait
  5872 ;; This function is called by:
  5873 ;;		_write_RTC
  5874 ;;		_get_time
  5875 ;;		_get_day
  5876 ;;		_get_temp
  5877 ;;		_get_hall
  5878 ;;		_get_tripwire
  5879 ;;		_get_PIR
  5880 ;;		_get_IR
  5881 ;;		_open_door
  5882 ;;		_close_door
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           
  5887                           ;psect for function _I2C_Master_Start
  5888  0910                     _I2C_Master_Start:	
  5889                           
  5890                           ;./I2C.h: 41:     I2C_Master_Wait();
  5891                           
  5892                           ;incstack = 0
  5893                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5894  0910  120A  158A  2135   	fcall	_I2C_Master_Wait
  5895                           
  5896                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  5897  0913  1683               	bsf	3,5	;RP0=1, select bank1
  5898  0914  1303               	bcf	3,6	;RP1=0, select bank1
  5899  0915  1411               	bsf	17,0	;volatile
  5900  0916  0008               	return
  5901  0917                     __end_of_I2C_Master_Start:	
  5902                           
  5903                           	psect	text29
  5904  0935                     __ptext29:	
  5905 ;; *************** function _I2C_Master_Wait *****************
  5906 ;; Defined at:
  5907 ;;		line 32 in file "./I2C.h"
  5908 ;; Parameters:    Size  Location     Type
  5909 ;;		None
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;		None
  5912 ;; Return value:  Size  Location     Type
  5913 ;;                  1    wreg      void 
  5914 ;; Registers used:
  5915 ;;		wreg, status,2
  5916 ;; Tracked objects:
  5917 ;;		On entry : 0/0
  5918 ;;		On exit  : 0/0
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5921 ;;      Params:         0       0       0       0       0
  5922 ;;      Locals:         0       0       0       0       0
  5923 ;;      Temps:          0       0       0       0       0
  5924 ;;      Totals:         0       0       0       0       0
  5925 ;;Total ram usage:        0 bytes
  5926 ;; Hardware stack levels used:    1
  5927 ;; Hardware stack levels required when called:    1
  5928 ;; This function calls:
  5929 ;;		Nothing
  5930 ;; This function is called by:
  5931 ;;		_I2C_Master_Start
  5932 ;;		_I2C_Master_RepeatedStart
  5933 ;;		_I2C_Master_Stop
  5934 ;;		_I2C_Master_Write
  5935 ;;		_I2C_Master_Read
  5936 ;; This function uses a non-reentrant model
  5937 ;;
  5938                           
  5939                           
  5940                           ;psect for function _I2C_Master_Wait
  5941  0935                     _I2C_Master_Wait:	
  5942  0935                     l132:	
  5943                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5944                           
  5945                           ;incstack = 0
  5946                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5947                           
  5948  0935  1683               	bsf	3,5	;RP0=1, select bank1
  5949  0936  1303               	bcf	3,6	;RP1=0, select bank1
  5950  0937  1914               	btfsc	20,2	;volatile
  5951  0938  2935               	goto	l132
  5952  0939  0811               	movf	17,w	;volatile
  5953  093A  391F               	andlw	31
  5954  093B  1903               	btfsc	3,2
  5955  093C  0008               	return
  5956  093D  2935               	goto	l132
  5957  093E                     __end_of_I2C_Master_Wait:	
  5958                           
  5959                           	psect	text30
  5960  0C9B                     __ptext30:	
  5961 ;; *************** function ___awmod *****************
  5962 ;; Defined at:
  5963 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;  divisor         2    3[COMMON] int 
  5966 ;;  dividend        2    5[COMMON] int 
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;  sign            1    1[BANK0 ] unsigned char 
  5969 ;;  counter         1    0[BANK0 ] unsigned char 
  5970 ;; Return value:  Size  Location     Type
  5971 ;;                  2    3[COMMON] int 
  5972 ;; Registers used:
  5973 ;;		wreg, status,2, status,0
  5974 ;; Tracked objects:
  5975 ;;		On entry : 0/0
  5976 ;;		On exit  : 0/0
  5977 ;;		Unchanged: 0/0
  5978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5979 ;;      Params:         4       0       0       0       0
  5980 ;;      Locals:         0       2       0       0       0
  5981 ;;      Temps:          1       0       0       0       0
  5982 ;;      Totals:         5       2       0       0       0
  5983 ;;Total ram usage:        7 bytes
  5984 ;; Hardware stack levels used:    1
  5985 ;; Hardware stack levels required when called:    1
  5986 ;; This function calls:
  5987 ;;		Nothing
  5988 ;; This function is called by:
  5989 ;;		_main
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           
  5994                           ;psect for function ___awmod
  5995  0C9B                     ___awmod:	
  5996                           
  5997                           ;incstack = 0
  5998                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5999  0C9B  1283               	bcf	3,5	;RP0=0, select bank0
  6000  0C9C  1303               	bcf	3,6	;RP1=0, select bank0
  6001  0C9D  01A1               	clrf	___awmod@sign
  6002  0C9E  1FF6               	btfss	___awmod@dividend+1,7
  6003  0C9F  2CA7               	goto	l3501
  6004  0CA0  09F5               	comf	___awmod@dividend,f
  6005  0CA1  09F6               	comf	___awmod@dividend+1,f
  6006  0CA2  0AF5               	incf	___awmod@dividend,f
  6007  0CA3  1903               	skipnz
  6008  0CA4  0AF6               	incf	___awmod@dividend+1,f
  6009  0CA5  01A1               	clrf	___awmod@sign
  6010  0CA6  0AA1               	incf	___awmod@sign,f
  6011  0CA7                     l3501:	
  6012  0CA7  1FF4               	btfss	___awmod@divisor+1,7
  6013  0CA8  2CAE               	goto	l3505
  6014  0CA9  09F3               	comf	___awmod@divisor,f
  6015  0CAA  09F4               	comf	___awmod@divisor+1,f
  6016  0CAB  0AF3               	incf	___awmod@divisor,f
  6017  0CAC  1903               	skipnz
  6018  0CAD  0AF4               	incf	___awmod@divisor+1,f
  6019  0CAE                     l3505:	
  6020  0CAE  0873               	movf	___awmod@divisor,w
  6021  0CAF  0474               	iorwf	___awmod@divisor+1,w
  6022  0CB0  1903               	btfsc	3,2
  6023  0CB1  2CDB               	goto	l3523
  6024  0CB2  01A0               	clrf	___awmod@counter
  6025  0CB3  0AA0               	incf	___awmod@counter,f
  6026  0CB4                     l3513:	
  6027  0CB4  1BF4               	btfsc	___awmod@divisor+1,7
  6028  0CB5  2CC2               	goto	l3515
  6029  0CB6  3001               	movlw	1
  6030  0CB7                     u3365:	
  6031  0CB7  1003               	clrc
  6032  0CB8  0DF3               	rlf	___awmod@divisor,f
  6033  0CB9  0DF4               	rlf	___awmod@divisor+1,f
  6034  0CBA  3EFF               	addlw	-1
  6035  0CBB  1D03               	skipz
  6036  0CBC  2CB7               	goto	u3365
  6037  0CBD  3001               	movlw	1
  6038  0CBE  00F7               	movwf	??___awmod
  6039  0CBF  0877               	movf	??___awmod,w
  6040  0CC0  07A0               	addwf	___awmod@counter,f
  6041  0CC1  2CB4               	goto	l3513
  6042  0CC2                     l3515:	
  6043  0CC2  0874               	movf	___awmod@divisor+1,w
  6044  0CC3  0276               	subwf	___awmod@dividend+1,w
  6045  0CC4  1D03               	skipz
  6046  0CC5  2CC8               	goto	u3385
  6047  0CC6  0873               	movf	___awmod@divisor,w
  6048  0CC7  0275               	subwf	___awmod@dividend,w
  6049  0CC8                     u3385:	
  6050  0CC8  1C03               	skipc
  6051  0CC9  2CD0               	goto	l3519
  6052  0CCA  0873               	movf	___awmod@divisor,w
  6053  0CCB  02F5               	subwf	___awmod@dividend,f
  6054  0CCC  0874               	movf	___awmod@divisor+1,w
  6055  0CCD  1C03               	skipc
  6056  0CCE  03F6               	decf	___awmod@dividend+1,f
  6057  0CCF  02F6               	subwf	___awmod@dividend+1,f
  6058  0CD0                     l3519:	
  6059  0CD0  3001               	movlw	1
  6060  0CD1                     u3395:	
  6061  0CD1  1003               	clrc
  6062  0CD2  0CF4               	rrf	___awmod@divisor+1,f
  6063  0CD3  0CF3               	rrf	___awmod@divisor,f
  6064  0CD4  3EFF               	addlw	-1
  6065  0CD5  1D03               	skipz
  6066  0CD6  2CD1               	goto	u3395
  6067  0CD7  3001               	movlw	1
  6068  0CD8  02A0               	subwf	___awmod@counter,f
  6069  0CD9  1D03               	btfss	3,2
  6070  0CDA  2CC2               	goto	l3515
  6071  0CDB                     l3523:	
  6072  0CDB  0821               	movf	___awmod@sign,w
  6073  0CDC  1903               	btfsc	3,2
  6074  0CDD  2CE3               	goto	l3527
  6075  0CDE  09F5               	comf	___awmod@dividend,f
  6076  0CDF  09F6               	comf	___awmod@dividend+1,f
  6077  0CE0  0AF5               	incf	___awmod@dividend,f
  6078  0CE1  1903               	skipnz
  6079  0CE2  0AF6               	incf	___awmod@dividend+1,f
  6080  0CE3                     l3527:	
  6081  0CE3  0876               	movf	___awmod@dividend+1,w
  6082  0CE4  00F4               	movwf	?___awmod+1
  6083  0CE5  0875               	movf	___awmod@dividend,w
  6084  0CE6  00F3               	movwf	?___awmod
  6085  0CE7  0008               	return
  6086  0CE8                     __end_of___awmod:	
  6087                           
  6088                           	psect	text31
  6089  07A3                     __ptext31:	
  6090 ;; *************** function ___awdiv *****************
  6091 ;; Defined at:
  6092 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  6093 ;; Parameters:    Size  Location     Type
  6094 ;;  divisor         2    3[COMMON] int 
  6095 ;;  dividend        2    5[COMMON] int 
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;  quotient        2    2[BANK0 ] int 
  6098 ;;  sign            1    1[BANK0 ] unsigned char 
  6099 ;;  counter         1    0[BANK0 ] unsigned char 
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  2    3[COMMON] int 
  6102 ;; Registers used:
  6103 ;;		wreg, status,2, status,0
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6109 ;;      Params:         4       0       0       0       0
  6110 ;;      Locals:         0       4       0       0       0
  6111 ;;      Temps:          1       0       0       0       0
  6112 ;;      Totals:         5       4       0       0       0
  6113 ;;Total ram usage:        9 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; Hardware stack levels required when called:    1
  6116 ;; This function calls:
  6117 ;;		Nothing
  6118 ;; This function is called by:
  6119 ;;		_main
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           
  6124                           ;psect for function ___awdiv
  6125  07A3                     ___awdiv:	
  6126                           
  6127                           ;incstack = 0
  6128                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6129  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  6130  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  6131  07A5  01A1               	clrf	___awdiv@sign
  6132  07A6  1FF4               	btfss	___awdiv@divisor+1,7
  6133  07A7  2FAF               	goto	l2631
  6134  07A8  09F3               	comf	___awdiv@divisor,f
  6135  07A9  09F4               	comf	___awdiv@divisor+1,f
  6136  07AA  0AF3               	incf	___awdiv@divisor,f
  6137  07AB  1903               	skipnz
  6138  07AC  0AF4               	incf	___awdiv@divisor+1,f
  6139  07AD  01A1               	clrf	___awdiv@sign
  6140  07AE  0AA1               	incf	___awdiv@sign,f
  6141  07AF                     l2631:	
  6142  07AF  1FF6               	btfss	___awdiv@dividend+1,7
  6143  07B0  2FBA               	goto	l2637
  6144  07B1  09F5               	comf	___awdiv@dividend,f
  6145  07B2  09F6               	comf	___awdiv@dividend+1,f
  6146  07B3  0AF5               	incf	___awdiv@dividend,f
  6147  07B4  1903               	skipnz
  6148  07B5  0AF6               	incf	___awdiv@dividend+1,f
  6149  07B6  3001               	movlw	1
  6150  07B7  00F7               	movwf	??___awdiv
  6151  07B8  0877               	movf	??___awdiv,w
  6152  07B9  06A1               	xorwf	___awdiv@sign,f
  6153  07BA                     l2637:	
  6154  07BA  01A2               	clrf	___awdiv@quotient
  6155  07BB  01A3               	clrf	___awdiv@quotient+1
  6156  07BC  0873               	movf	___awdiv@divisor,w
  6157  07BD  0474               	iorwf	___awdiv@divisor+1,w
  6158  07BE  1903               	btfsc	3,2
  6159  07BF  2FF1               	goto	l2659
  6160  07C0  01A0               	clrf	___awdiv@counter
  6161  07C1  0AA0               	incf	___awdiv@counter,f
  6162  07C2                     l2647:	
  6163  07C2  1BF4               	btfsc	___awdiv@divisor+1,7
  6164  07C3  2FD0               	goto	l2649
  6165  07C4  3001               	movlw	1
  6166  07C5                     u2155:	
  6167  07C5  1003               	clrc
  6168  07C6  0DF3               	rlf	___awdiv@divisor,f
  6169  07C7  0DF4               	rlf	___awdiv@divisor+1,f
  6170  07C8  3EFF               	addlw	-1
  6171  07C9  1D03               	skipz
  6172  07CA  2FC5               	goto	u2155
  6173  07CB  3001               	movlw	1
  6174  07CC  00F7               	movwf	??___awdiv
  6175  07CD  0877               	movf	??___awdiv,w
  6176  07CE  07A0               	addwf	___awdiv@counter,f
  6177  07CF  2FC2               	goto	l2647
  6178  07D0                     l2649:	
  6179  07D0  3001               	movlw	1
  6180  07D1                     u2175:	
  6181  07D1  1003               	clrc
  6182  07D2  0DA2               	rlf	___awdiv@quotient,f
  6183  07D3  0DA3               	rlf	___awdiv@quotient+1,f
  6184  07D4  3EFF               	addlw	-1
  6185  07D5  1D03               	skipz
  6186  07D6  2FD1               	goto	u2175
  6187  07D7  0874               	movf	___awdiv@divisor+1,w
  6188  07D8  0276               	subwf	___awdiv@dividend+1,w
  6189  07D9  1D03               	skipz
  6190  07DA  2FDD               	goto	u2185
  6191  07DB  0873               	movf	___awdiv@divisor,w
  6192  07DC  0275               	subwf	___awdiv@dividend,w
  6193  07DD                     u2185:	
  6194  07DD  1C03               	skipc
  6195  07DE  2FE6               	goto	l2655
  6196  07DF  0873               	movf	___awdiv@divisor,w
  6197  07E0  02F5               	subwf	___awdiv@dividend,f
  6198  07E1  0874               	movf	___awdiv@divisor+1,w
  6199  07E2  1C03               	skipc
  6200  07E3  03F6               	decf	___awdiv@dividend+1,f
  6201  07E4  02F6               	subwf	___awdiv@dividend+1,f
  6202  07E5  1422               	bsf	___awdiv@quotient,0
  6203  07E6                     l2655:	
  6204  07E6  3001               	movlw	1
  6205  07E7                     u2195:	
  6206  07E7  1003               	clrc
  6207  07E8  0CF4               	rrf	___awdiv@divisor+1,f
  6208  07E9  0CF3               	rrf	___awdiv@divisor,f
  6209  07EA  3EFF               	addlw	-1
  6210  07EB  1D03               	skipz
  6211  07EC  2FE7               	goto	u2195
  6212  07ED  3001               	movlw	1
  6213  07EE  02A0               	subwf	___awdiv@counter,f
  6214  07EF  1D03               	btfss	3,2
  6215  07F0  2FD0               	goto	l2649
  6216  07F1                     l2659:	
  6217  07F1  0821               	movf	___awdiv@sign,w
  6218  07F2  1903               	btfsc	3,2
  6219  07F3  2FF9               	goto	l2663
  6220  07F4  09A2               	comf	___awdiv@quotient,f
  6221  07F5  09A3               	comf	___awdiv@quotient+1,f
  6222  07F6  0AA2               	incf	___awdiv@quotient,f
  6223  07F7  1903               	skipnz
  6224  07F8  0AA3               	incf	___awdiv@quotient+1,f
  6225  07F9                     l2663:	
  6226  07F9  0823               	movf	___awdiv@quotient+1,w
  6227  07FA  00F4               	movwf	?___awdiv+1
  6228  07FB  0822               	movf	___awdiv@quotient,w
  6229  07FC  00F3               	movwf	?___awdiv
  6230  07FD  0008               	return
  6231  07FE                     __end_of___awdiv:	
  6232                           
  6233                           	psect	text32
  6234  093E                     __ptext32:	
  6235 ;; *************** function _UART_Write *****************
  6236 ;; Defined at:
  6237 ;;		line 54 in file "./UART.h"
  6238 ;; Parameters:    Size  Location     Type
  6239 ;;  data            1    wreg     unsigned char 
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;  data            1    3[COMMON] unsigned char 
  6242 ;; Return value:  Size  Location     Type
  6243 ;;                  1    wreg      void 
  6244 ;; Registers used:
  6245 ;;		wreg
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/0
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6251 ;;      Params:         0       0       0       0       0
  6252 ;;      Locals:         1       0       0       0       0
  6253 ;;      Temps:          0       0       0       0       0
  6254 ;;      Totals:         1       0       0       0       0
  6255 ;;Total ram usage:        1 bytes
  6256 ;; Hardware stack levels used:    1
  6257 ;; Hardware stack levels required when called:    1
  6258 ;; This function calls:
  6259 ;;		Nothing
  6260 ;; This function is called by:
  6261 ;;		_main
  6262 ;;		_UART_Write_Text
  6263 ;; This function uses a non-reentrant model
  6264 ;;
  6265                           
  6266                           
  6267                           ;psect for function _UART_Write
  6268  093E                     _UART_Write:	
  6269                           
  6270                           ;incstack = 0
  6271                           ; Regs used in _UART_Write: [wreg]
  6272                           ;UART_Write@data stored from wreg
  6273  093E  00F3               	movwf	UART_Write@data
  6274  093F                     l236:	
  6275                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(!TRMT);
  6276                           
  6277  093F  1683               	bsf	3,5	;RP0=1, select bank1
  6278  0940  1303               	bcf	3,6	;RP1=0, select bank1
  6279  0941  1C98               	btfss	24,1	;volatile
  6280  0942  293F               	goto	l236
  6281                           
  6282                           ;./UART.h: 57:   TXREG = data;
  6283  0943  0873               	movf	UART_Write@data,w
  6284  0944  1283               	bcf	3,5	;RP0=0, select bank0
  6285  0945  1303               	bcf	3,6	;RP1=0, select bank0
  6286  0946  0099               	movwf	25	;volatile
  6287  0947  0008               	return
  6288  0948                     __end_of_UART_Write:	
  6289                           
  6290                           	psect	text33
  6291  090A                     __ptext33:	
  6292 ;; *************** function _UART_TX_Empty *****************
  6293 ;; Defined at:
  6294 ;;		line 31 in file "./UART.h"
  6295 ;; Parameters:    Size  Location     Type
  6296 ;;		None
  6297 ;; Auto vars:     Size  Location     Type
  6298 ;;		None
  6299 ;; Return value:  Size  Location     Type
  6300 ;;                  1    wreg      unsigned char 
  6301 ;; Registers used:
  6302 ;;		wreg
  6303 ;; Tracked objects:
  6304 ;;		On entry : 0/0
  6305 ;;		On exit  : 0/0
  6306 ;;		Unchanged: 0/0
  6307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6308 ;;      Params:         0       0       0       0       0
  6309 ;;      Locals:         0       0       0       0       0
  6310 ;;      Temps:          0       0       0       0       0
  6311 ;;      Totals:         0       0       0       0       0
  6312 ;;Total ram usage:        0 bytes
  6313 ;; Hardware stack levels used:    1
  6314 ;; Hardware stack levels required when called:    1
  6315 ;; This function calls:
  6316 ;;		Nothing
  6317 ;; This function is called by:
  6318 ;;		_main
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           
  6323                           ;psect for function _UART_TX_Empty
  6324  090A                     _UART_TX_Empty:	
  6325                           
  6326                           ;./UART.h: 33:   return TRMT;
  6327                           
  6328                           ;incstack = 0
  6329                           ; Regs used in _UART_TX_Empty: [wreg]
  6330  090A  3000               	movlw	0
  6331  090B  1683               	bsf	3,5	;RP0=1, select bank1
  6332  090C  1303               	bcf	3,6	;RP1=0, select bank1
  6333  090D  1898               	btfsc	24,1	;volatile
  6334  090E  3001               	movlw	1
  6335  090F  0008               	return
  6336  0910                     __end_of_UART_TX_Empty:	
  6337                           
  6338                           	psect	text34
  6339  0C14                     __ptext34:	
  6340 ;; *************** function _Lcd_Write_String *****************
  6341 ;; Defined at:
  6342 ;;		line 100 in file "./LCD4bits.h"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;  a               2    0[BANK0 ] PTR unsigned char 
  6345 ;;		 -> NULL(0), STR_23(6), STR_22(7), STR_21(7), 
  6346 ;;		 -> STR_20(7), STR_19(8), STR_18(8), STR_17(9), 
  6347 ;;		 -> STR_16(9), STR_15(9), STR_14(9), STR_13(12), 
  6348 ;;		 -> STR_12(12), STR_10(10), STR_9(10), STR_8(10), 
  6349 ;;		 -> STR_7(10), STR_6(10), STR_5(10), STR_4(10), 
  6350 ;;		 -> STR_3(10), time(6), temp(6), STR_2(13), 
  6351 ;;		 -> STR_1(18), 
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;  i               2    5[BANK0 ] int 
  6354 ;; Return value:  Size  Location     Type
  6355 ;;                  1    wreg      void 
  6356 ;; Registers used:
  6357 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6358 ;; Tracked objects:
  6359 ;;		On entry : 0/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6363 ;;      Params:         0       2       0       0       0
  6364 ;;      Locals:         0       2       0       0       0
  6365 ;;      Temps:          0       3       0       0       0
  6366 ;;      Totals:         0       7       0       0       0
  6367 ;;Total ram usage:        7 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:    3
  6370 ;; This function calls:
  6371 ;;		_Lcd_Write_Char
  6372 ;; This function is called by:
  6373 ;;		_main
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           
  6378                           ;psect for function _Lcd_Write_String
  6379  0C14                     _Lcd_Write_String:	
  6380                           
  6381                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  6382                           
  6383                           ;incstack = 0
  6384                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6385  0C14  1283               	bcf	3,5	;RP0=0, select bank0
  6386  0C15  1303               	bcf	3,6	;RP1=0, select bank0
  6387  0C16  01A5               	clrf	Lcd_Write_String@i
  6388  0C17  01A6               	clrf	Lcd_Write_String@i+1
  6389  0C18                     l3347:	
  6390  0C18  0825               	movf	Lcd_Write_String@i,w
  6391  0C19  0720               	addwf	Lcd_Write_String@a,w
  6392  0C1A  00A3               	movwf	??_Lcd_Write_String+1
  6393  0C1B  0821               	movf	Lcd_Write_String@a+1,w
  6394  0C1C  00A2               	movwf	??_Lcd_Write_String
  6395  0C1D  1803               	skipnc
  6396  0C1E  0AA2               	incf	??_Lcd_Write_String,f
  6397  0C1F  1BA5               	btfsc	Lcd_Write_String@i,7
  6398  0C20  03A2               	decf	??_Lcd_Write_String,f
  6399  0C21  1283               	bcf	3,5	;RP0=0, select bank0
  6400  0C22  1303               	bcf	3,6	;RP1=0, select bank0
  6401  0C23  0822               	movf	??_Lcd_Write_String,w
  6402  0C24  00A4               	movwf	??_Lcd_Write_String+2
  6403  0C25  0824               	movf	??_Lcd_Write_String+2,w
  6404  0C26  00FF               	movwf	127
  6405  0C27  0823               	movf	??_Lcd_Write_String+1,w
  6406  0C28  0084               	movwf	4
  6407  0C29  120A  118A  2500  120A  158A  	fcall	stringtab
  6408  0C2E  3A00               	xorlw	0
  6409  0C2F  1903               	btfsc	3,2
  6410  0C30  0008               	return
  6411                           
  6412                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  6413  0C31  0825               	movf	Lcd_Write_String@i,w
  6414  0C32  0720               	addwf	Lcd_Write_String@a,w
  6415  0C33  00A3               	movwf	??_Lcd_Write_String+1
  6416  0C34  0821               	movf	Lcd_Write_String@a+1,w
  6417  0C35  00A2               	movwf	??_Lcd_Write_String
  6418  0C36  1803               	skipnc
  6419  0C37  0AA2               	incf	??_Lcd_Write_String,f
  6420  0C38  1BA5               	btfsc	Lcd_Write_String@i,7
  6421  0C39  03A2               	decf	??_Lcd_Write_String,f
  6422  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  6423  0C3B  1303               	bcf	3,6	;RP1=0, select bank0
  6424  0C3C  0822               	movf	??_Lcd_Write_String,w
  6425  0C3D  00A4               	movwf	??_Lcd_Write_String+2
  6426  0C3E  0824               	movf	??_Lcd_Write_String+2,w
  6427  0C3F  00FF               	movwf	127
  6428  0C40  0823               	movf	??_Lcd_Write_String+1,w
  6429  0C41  0084               	movwf	4
  6430  0C42  120A  118A  2500  120A  158A  	fcall	stringtab
  6431  0C47  120A  158A  2363  120A  158A  	fcall	_Lcd_Write_Char
  6432  0C4C  3001               	movlw	1
  6433  0C4D  1283               	bcf	3,5	;RP0=0, select bank0
  6434  0C4E  1303               	bcf	3,6	;RP1=0, select bank0
  6435  0C4F  07A5               	addwf	Lcd_Write_String@i,f
  6436  0C50  1803               	skipnc
  6437  0C51  0AA6               	incf	Lcd_Write_String@i+1,f
  6438  0C52  3000               	movlw	0
  6439  0C53  07A6               	addwf	Lcd_Write_String@i+1,f
  6440  0C54  2C18               	goto	l3347
  6441  0C55                     __end_of_Lcd_Write_String:	
  6442                           
  6443                           	psect	text35
  6444  0B63                     __ptext35:	
  6445 ;; *************** function _Lcd_Write_Char *****************
  6446 ;; Defined at:
  6447 ;;		line 84 in file "./LCD4bits.h"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;  a               1    wreg     unsigned char 
  6450 ;; Auto vars:     Size  Location     Type
  6451 ;;  a               1    7[COMMON] unsigned char 
  6452 ;;  y               1    6[COMMON] unsigned char 
  6453 ;;  temp            1    5[COMMON] unsigned char 
  6454 ;; Return value:  Size  Location     Type
  6455 ;;                  1    wreg      void 
  6456 ;; Registers used:
  6457 ;;		wreg, status,2, status,0, pclath, cstack
  6458 ;; Tracked objects:
  6459 ;;		On entry : 0/0
  6460 ;;		On exit  : 0/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6463 ;;      Params:         0       0       0       0       0
  6464 ;;      Locals:         3       0       0       0       0
  6465 ;;      Temps:          1       0       0       0       0
  6466 ;;      Totals:         4       0       0       0       0
  6467 ;;Total ram usage:        4 bytes
  6468 ;; Hardware stack levels used:    1
  6469 ;; Hardware stack levels required when called:    2
  6470 ;; This function calls:
  6471 ;;		_Lcd_Port
  6472 ;; This function is called by:
  6473 ;;		_Lcd_Write_String
  6474 ;;		_main
  6475 ;; This function uses a non-reentrant model
  6476 ;;
  6477                           
  6478                           
  6479                           ;psect for function _Lcd_Write_Char
  6480  0B63                     _Lcd_Write_Char:	
  6481                           
  6482                           ;incstack = 0
  6483                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  6484                           ;Lcd_Write_Char@a stored from wreg
  6485  0B63  00F7               	movwf	Lcd_Write_Char@a
  6486                           
  6487                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  6488  0B64  0877               	movf	Lcd_Write_Char@a,w
  6489  0B65  390F               	andlw	15
  6490  0B66  00F4               	movwf	??_Lcd_Write_Char
  6491  0B67  0874               	movf	??_Lcd_Write_Char,w
  6492  0B68  00F5               	movwf	Lcd_Write_Char@temp
  6493                           
  6494                           ;./LCD4bits.h: 88:    y = a&0xF0;
  6495  0B69  0877               	movf	Lcd_Write_Char@a,w
  6496  0B6A  39F0               	andlw	240
  6497  0B6B  00F4               	movwf	??_Lcd_Write_Char
  6498  0B6C  0874               	movf	??_Lcd_Write_Char,w
  6499  0B6D  00F6               	movwf	Lcd_Write_Char@y
  6500                           
  6501                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  6502  0B6E  1283               	bcf	3,5	;RP0=0, select bank0
  6503  0B6F  1303               	bcf	3,6	;RP1=0, select bank0
  6504  0B70  1606               	bsf	6,4	;volatile
  6505                           
  6506                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  6507  0B71  0876               	movf	Lcd_Write_Char@y,w
  6508  0B72  00F4               	movwf	??_Lcd_Write_Char
  6509  0B73  3004               	movlw	4
  6510  0B74                     u1785:	
  6511  0B74  1003               	clrc
  6512  0B75  0CF4               	rrf	??_Lcd_Write_Char,f
  6513  0B76  3EFF               	addlw	-1
  6514  0B77  1D03               	skipz
  6515  0B78  2B74               	goto	u1785
  6516  0B79  0874               	movf	??_Lcd_Write_Char,w
  6517  0B7A  120A  158A  2164  120A  158A  	fcall	_Lcd_Port
  6518                           
  6519                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  6520  0B7F  1283               	bcf	3,5	;RP0=0, select bank0
  6521  0B80  1303               	bcf	3,6	;RP1=0, select bank0
  6522  0B81  1686               	bsf	6,5	;volatile
  6523                           
  6524                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  6525  0B82  301A               	movlw	26
  6526  0B83  00F4               	movwf	??_Lcd_Write_Char
  6527  0B84                     u4037:	
  6528  0B84  0BF4               	decfsz	??_Lcd_Write_Char,f
  6529  0B85  2B84               	goto	u4037
  6530  0B86  0000               	nop
  6531                           
  6532                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  6533  0B87  1283               	bcf	3,5	;RP0=0, select bank0
  6534  0B88  1303               	bcf	3,6	;RP1=0, select bank0
  6535  0B89  1286               	bcf	6,5	;volatile
  6536                           
  6537                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  6538  0B8A  0875               	movf	Lcd_Write_Char@temp,w
  6539  0B8B  120A  158A  2164  120A  158A  	fcall	_Lcd_Port
  6540                           
  6541                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  6542  0B90  1283               	bcf	3,5	;RP0=0, select bank0
  6543  0B91  1303               	bcf	3,6	;RP1=0, select bank0
  6544  0B92  1686               	bsf	6,5	;volatile
  6545                           
  6546                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  6547  0B93  301A               	movlw	26
  6548  0B94  00F4               	movwf	??_Lcd_Write_Char
  6549  0B95                     u4047:	
  6550  0B95  0BF4               	decfsz	??_Lcd_Write_Char,f
  6551  0B96  2B95               	goto	u4047
  6552  0B97  0000               	nop
  6553                           
  6554                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  6555  0B98  1283               	bcf	3,5	;RP0=0, select bank0
  6556  0B99  1303               	bcf	3,6	;RP1=0, select bank0
  6557  0B9A  1286               	bcf	6,5	;volatile
  6558  0B9B  0008               	return
  6559  0B9C                     __end_of_Lcd_Write_Char:	
  6560                           
  6561                           	psect	text36
  6562  0CE8                     __ptext36:	
  6563 ;; *************** function _Lcd_Set_Cursor *****************
  6564 ;; Defined at:
  6565 ;;		line 44 in file "./LCD4bits.h"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;  a               1    wreg     unsigned char 
  6568 ;;  b               1    7[COMMON] unsigned char 
  6569 ;; Auto vars:     Size  Location     Type
  6570 ;;  a               1    2[BANK0 ] unsigned char 
  6571 ;;  temp            1    5[BANK0 ] unsigned char 
  6572 ;;  y               1    4[BANK0 ] unsigned char 
  6573 ;;  z               1    3[BANK0 ] unsigned char 
  6574 ;; Return value:  Size  Location     Type
  6575 ;;                  1    wreg      void 
  6576 ;; Registers used:
  6577 ;;		wreg, status,2, status,0, pclath, cstack
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6583 ;;      Params:         1       0       0       0       0
  6584 ;;      Locals:         0       4       0       0       0
  6585 ;;      Temps:          0       2       0       0       0
  6586 ;;      Totals:         1       6       0       0       0
  6587 ;;Total ram usage:        7 bytes
  6588 ;; Hardware stack levels used:    1
  6589 ;; Hardware stack levels required when called:    3
  6590 ;; This function calls:
  6591 ;;		_Lcd_Cmd
  6592 ;; This function is called by:
  6593 ;;		_main
  6594 ;; This function uses a non-reentrant model
  6595 ;;
  6596                           
  6597                           
  6598                           ;psect for function _Lcd_Set_Cursor
  6599  0CE8                     _Lcd_Set_Cursor:	
  6600                           
  6601                           ;incstack = 0
  6602                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  6603                           ;Lcd_Set_Cursor@a stored from wreg
  6604  0CE8  1283               	bcf	3,5	;RP0=0, select bank0
  6605  0CE9  1303               	bcf	3,6	;RP1=0, select bank0
  6606  0CEA  00A2               	movwf	Lcd_Set_Cursor@a
  6607                           
  6608                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  6609  0CEB  0322               	decf	Lcd_Set_Cursor@a,w
  6610  0CEC  1D03               	btfss	3,2
  6611  0CED  2D11               	goto	l3331
  6612                           
  6613                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  6614  0CEE  0877               	movf	Lcd_Set_Cursor@b,w
  6615  0CEF  3E7F               	addlw	127
  6616  0CF0  00A0               	movwf	??_Lcd_Set_Cursor
  6617  0CF1  0820               	movf	??_Lcd_Set_Cursor,w
  6618  0CF2  00A5               	movwf	Lcd_Set_Cursor@temp
  6619                           
  6620                           ;./LCD4bits.h: 50:   z = temp>>4;
  6621  0CF3  0825               	movf	Lcd_Set_Cursor@temp,w
  6622  0CF4  00A0               	movwf	??_Lcd_Set_Cursor
  6623  0CF5  3004               	movlw	4
  6624  0CF6                     u3215:	
  6625  0CF6  1003               	clrc
  6626  0CF7  0CA0               	rrf	??_Lcd_Set_Cursor,f
  6627  0CF8  3EFF               	addlw	-1
  6628  0CF9  1D03               	skipz
  6629  0CFA  2CF6               	goto	u3215
  6630  0CFB  0820               	movf	??_Lcd_Set_Cursor,w
  6631  0CFC  00A1               	movwf	??_Lcd_Set_Cursor+1
  6632  0CFD  0821               	movf	??_Lcd_Set_Cursor+1,w
  6633  0CFE  00A3               	movwf	Lcd_Set_Cursor@z
  6634                           
  6635                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  6636  0CFF  0825               	movf	Lcd_Set_Cursor@temp,w
  6637  0D00  390F               	andlw	15
  6638  0D01  00A0               	movwf	??_Lcd_Set_Cursor
  6639  0D02  0820               	movf	??_Lcd_Set_Cursor,w
  6640  0D03  00A4               	movwf	Lcd_Set_Cursor@y
  6641                           
  6642                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  6643  0D04  0823               	movf	Lcd_Set_Cursor@z,w
  6644  0D05  120A  158A  217E  120A  158A  	fcall	_Lcd_Cmd
  6645                           
  6646                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  6647  0D0A  1283               	bcf	3,5	;RP0=0, select bank0
  6648  0D0B  1303               	bcf	3,6	;RP1=0, select bank0
  6649  0D0C  0824               	movf	Lcd_Set_Cursor@y,w
  6650  0D0D  120A  158A  217E   	fcall	_Lcd_Cmd
  6651                           
  6652                           ;./LCD4bits.h: 54:  }
  6653  0D10  0008               	return
  6654  0D11                     l3331:	
  6655  0D11  3002               	movlw	2
  6656  0D12  0622               	xorwf	Lcd_Set_Cursor@a,w
  6657  0D13  1D03               	btfss	3,2
  6658  0D14  0008               	return
  6659                           
  6660                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  6661  0D15  0877               	movf	Lcd_Set_Cursor@b,w
  6662  0D16  3EBF               	addlw	191
  6663  0D17  00A0               	movwf	??_Lcd_Set_Cursor
  6664  0D18  0820               	movf	??_Lcd_Set_Cursor,w
  6665  0D19  00A5               	movwf	Lcd_Set_Cursor@temp
  6666                           
  6667                           ;./LCD4bits.h: 58:   z = temp>>4;
  6668  0D1A  0825               	movf	Lcd_Set_Cursor@temp,w
  6669  0D1B  00A0               	movwf	??_Lcd_Set_Cursor
  6670  0D1C  3004               	movlw	4
  6671  0D1D                     u3235:	
  6672  0D1D  1003               	clrc
  6673  0D1E  0CA0               	rrf	??_Lcd_Set_Cursor,f
  6674  0D1F  3EFF               	addlw	-1
  6675  0D20  1D03               	skipz
  6676  0D21  2D1D               	goto	u3235
  6677  0D22  0820               	movf	??_Lcd_Set_Cursor,w
  6678  0D23  00A1               	movwf	??_Lcd_Set_Cursor+1
  6679  0D24  0821               	movf	??_Lcd_Set_Cursor+1,w
  6680  0D25  00A3               	movwf	Lcd_Set_Cursor@z
  6681                           
  6682                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  6683  0D26  0825               	movf	Lcd_Set_Cursor@temp,w
  6684  0D27  390F               	andlw	15
  6685  0D28  00A0               	movwf	??_Lcd_Set_Cursor
  6686  0D29  0820               	movf	??_Lcd_Set_Cursor,w
  6687  0D2A  00A4               	movwf	Lcd_Set_Cursor@y
  6688                           
  6689                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  6690  0D2B  0823               	movf	Lcd_Set_Cursor@z,w
  6691  0D2C  120A  158A  217E  120A  158A  	fcall	_Lcd_Cmd
  6692                           
  6693                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  6694  0D31  1283               	bcf	3,5	;RP0=0, select bank0
  6695  0D32  1303               	bcf	3,6	;RP1=0, select bank0
  6696  0D33  0824               	movf	Lcd_Set_Cursor@y,w
  6697  0D34  120A  158A  217E   	fcall	_Lcd_Cmd
  6698  0D37  0008               	return
  6699  0D38                     __end_of_Lcd_Set_Cursor:	
  6700                           
  6701                           	psect	text37
  6702  0948                     __ptext37:	
  6703 ;; *************** function _Lcd_Clear *****************
  6704 ;; Defined at:
  6705 ;;		line 38 in file "./LCD4bits.h"
  6706 ;; Parameters:    Size  Location     Type
  6707 ;;		None
  6708 ;; Auto vars:     Size  Location     Type
  6709 ;;		None
  6710 ;; Return value:  Size  Location     Type
  6711 ;;                  1    wreg      void 
  6712 ;; Registers used:
  6713 ;;		wreg, status,2, status,0, pclath, cstack
  6714 ;; Tracked objects:
  6715 ;;		On entry : 0/0
  6716 ;;		On exit  : 0/0
  6717 ;;		Unchanged: 0/0
  6718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6719 ;;      Params:         0       0       0       0       0
  6720 ;;      Locals:         0       0       0       0       0
  6721 ;;      Temps:          0       0       0       0       0
  6722 ;;      Totals:         0       0       0       0       0
  6723 ;;Total ram usage:        0 bytes
  6724 ;; Hardware stack levels used:    1
  6725 ;; Hardware stack levels required when called:    3
  6726 ;; This function calls:
  6727 ;;		_Lcd_Cmd
  6728 ;; This function is called by:
  6729 ;;		_main
  6730 ;; This function uses a non-reentrant model
  6731 ;;
  6732                           
  6733                           
  6734                           ;psect for function _Lcd_Clear
  6735  0948                     _Lcd_Clear:	
  6736                           
  6737                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  6738                           
  6739                           ;incstack = 0
  6740                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  6741  0948  3000               	movlw	0
  6742  0949  120A  158A  217E  120A  158A  	fcall	_Lcd_Cmd
  6743                           
  6744                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  6745  094E  3001               	movlw	1
  6746  094F  120A  158A  217E   	fcall	_Lcd_Cmd
  6747  0952  0008               	return
  6748  0953                     __end_of_Lcd_Clear:	
  6749                           
  6750                           	psect	text38
  6751  097E                     __ptext38:	
  6752 ;; *************** function _Lcd_Cmd *****************
  6753 ;; Defined at:
  6754 ;;		line 29 in file "./LCD4bits.h"
  6755 ;; Parameters:    Size  Location     Type
  6756 ;;  a               1    wreg     unsigned char 
  6757 ;; Auto vars:     Size  Location     Type
  6758 ;;  a               1    6[COMMON] unsigned char 
  6759 ;; Return value:  Size  Location     Type
  6760 ;;                  1    wreg      void 
  6761 ;; Registers used:
  6762 ;;		wreg, status,2, status,0, pclath, cstack
  6763 ;; Tracked objects:
  6764 ;;		On entry : 0/0
  6765 ;;		On exit  : 0/0
  6766 ;;		Unchanged: 0/0
  6767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6768 ;;      Params:         0       0       0       0       0
  6769 ;;      Locals:         1       0       0       0       0
  6770 ;;      Temps:          2       0       0       0       0
  6771 ;;      Totals:         3       0       0       0       0
  6772 ;;Total ram usage:        3 bytes
  6773 ;; Hardware stack levels used:    1
  6774 ;; Hardware stack levels required when called:    2
  6775 ;; This function calls:
  6776 ;;		_Lcd_Port
  6777 ;; This function is called by:
  6778 ;;		_Lcd_Clear
  6779 ;;		_Lcd_Set_Cursor
  6780 ;;		_Lcd_Init
  6781 ;;		_Lcd_Shift_Right
  6782 ;;		_Lcd_Shift_Left
  6783 ;; This function uses a non-reentrant model
  6784 ;;
  6785                           
  6786                           
  6787                           ;psect for function _Lcd_Cmd
  6788  097E                     _Lcd_Cmd:	
  6789                           
  6790                           ;incstack = 0
  6791                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  6792                           ;Lcd_Cmd@a stored from wreg
  6793  097E  00F6               	movwf	Lcd_Cmd@a
  6794                           
  6795                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  6796  097F  1283               	bcf	3,5	;RP0=0, select bank0
  6797  0980  1303               	bcf	3,6	;RP1=0, select bank0
  6798  0981  1206               	bcf	6,4	;volatile
  6799                           
  6800                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  6801  0982  0876               	movf	Lcd_Cmd@a,w
  6802  0983  120A  158A  2164  120A  158A  	fcall	_Lcd_Port
  6803                           
  6804                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  6805  0988  1283               	bcf	3,5	;RP0=0, select bank0
  6806  0989  1303               	bcf	3,6	;RP1=0, select bank0
  6807  098A  1686               	bsf	6,5	;volatile
  6808                           
  6809                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  6810  098B  300B               	movlw	11
  6811  098C  00F5               	movwf	??_Lcd_Cmd+1
  6812  098D  3062               	movlw	98
  6813  098E  00F4               	movwf	??_Lcd_Cmd
  6814  098F                     u4057:	
  6815  098F  0BF4               	decfsz	??_Lcd_Cmd,f
  6816  0990  298F               	goto	u4057
  6817  0991  0BF5               	decfsz	??_Lcd_Cmd+1,f
  6818  0992  298F               	goto	u4057
  6819  0993  0000               	nop
  6820                           
  6821                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  6822  0994  1283               	bcf	3,5	;RP0=0, select bank0
  6823  0995  1303               	bcf	3,6	;RP1=0, select bank0
  6824  0996  1286               	bcf	6,5	;volatile
  6825  0997  0008               	return
  6826  0998                     __end_of_Lcd_Cmd:	
  6827                           
  6828                           	psect	text39
  6829  0964                     __ptext39:	
  6830 ;; *************** function _Lcd_Port *****************
  6831 ;; Defined at:
  6832 ;;		line 7 in file "./LCD4bits.h"
  6833 ;; Parameters:    Size  Location     Type
  6834 ;;  a               1    wreg     unsigned char 
  6835 ;; Auto vars:     Size  Location     Type
  6836 ;;  a               1    3[COMMON] unsigned char 
  6837 ;; Return value:  Size  Location     Type
  6838 ;;                  1    wreg      void 
  6839 ;; Registers used:
  6840 ;;		wreg
  6841 ;; Tracked objects:
  6842 ;;		On entry : 0/0
  6843 ;;		On exit  : 0/0
  6844 ;;		Unchanged: 0/0
  6845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6846 ;;      Params:         0       0       0       0       0
  6847 ;;      Locals:         1       0       0       0       0
  6848 ;;      Temps:          0       0       0       0       0
  6849 ;;      Totals:         1       0       0       0       0
  6850 ;;Total ram usage:        1 bytes
  6851 ;; Hardware stack levels used:    1
  6852 ;; Hardware stack levels required when called:    1
  6853 ;; This function calls:
  6854 ;;		Nothing
  6855 ;; This function is called by:
  6856 ;;		_Lcd_Cmd
  6857 ;;		_Lcd_Init
  6858 ;;		_Lcd_Write_Char
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           
  6863                           ;psect for function _Lcd_Port
  6864  0964                     _Lcd_Port:	
  6865                           
  6866                           ;incstack = 0
  6867                           ; Regs used in _Lcd_Port: [wreg]
  6868                           ;Lcd_Port@a stored from wreg
  6869  0964  00F3               	movwf	Lcd_Port@a
  6870                           
  6871                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  6872  0965  1C73               	btfss	Lcd_Port@a,0
  6873  0966  296B               	goto	l158
  6874                           
  6875                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  6876  0967  1283               	bcf	3,5	;RP0=0, select bank0
  6877  0968  1303               	bcf	3,6	;RP1=0, select bank0
  6878  0969  1406               	bsf	6,0	;volatile
  6879  096A  296E               	goto	l159
  6880  096B                     l158:	
  6881                           ;./LCD4bits.h: 11:  else
  6882                           
  6883                           
  6884                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  6885  096B  1283               	bcf	3,5	;RP0=0, select bank0
  6886  096C  1303               	bcf	3,6	;RP1=0, select bank0
  6887  096D  1006               	bcf	6,0	;volatile
  6888  096E                     l159:	
  6889                           
  6890                           ;./LCD4bits.h: 14:  if(a & 2)
  6891  096E  1CF3               	btfss	Lcd_Port@a,1
  6892  096F  2972               	goto	l160
  6893                           
  6894                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  6895  0970  1486               	bsf	6,1	;volatile
  6896  0971  2973               	goto	l161
  6897  0972                     l160:	
  6898                           ;./LCD4bits.h: 16:  else
  6899                           
  6900                           
  6901                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  6902  0972  1086               	bcf	6,1	;volatile
  6903  0973                     l161:	
  6904                           
  6905                           ;./LCD4bits.h: 19:  if(a & 4)
  6906  0973  1D73               	btfss	Lcd_Port@a,2
  6907  0974  2977               	goto	l162
  6908                           
  6909                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  6910  0975  1506               	bsf	6,2	;volatile
  6911  0976  2978               	goto	l163
  6912  0977                     l162:	
  6913                           ;./LCD4bits.h: 21:  else
  6914                           
  6915                           
  6916                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  6917  0977  1106               	bcf	6,2	;volatile
  6918  0978                     l163:	
  6919                           
  6920                           ;./LCD4bits.h: 24:  if(a & 8)
  6921  0978  1DF3               	btfss	Lcd_Port@a,3
  6922  0979  297C               	goto	l164
  6923                           
  6924                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  6925  097A  1586               	bsf	6,3	;volatile
  6926  097B  0008               	return
  6927  097C                     l164:	
  6928                           ;./LCD4bits.h: 26:  else
  6929                           
  6930                           
  6931                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  6932  097C  1186               	bcf	6,3	;volatile
  6933  097D  0008               	return
  6934  097E                     __end_of_Lcd_Port:	
  6935                           
  6936                           	psect	text40
  6937  09CE                     __ptext40:	
  6938 ;; *************** function _manual_pwm *****************
  6939 ;; Defined at:
  6940 ;;		line 59 in file "mainMaster.c"
  6941 ;; Parameters:    Size  Location     Type
  6942 ;;		None
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;		None
  6945 ;; Return value:  Size  Location     Type
  6946 ;;                  1    wreg      void 
  6947 ;; Registers used:
  6948 ;;		wreg, status,2, status,0
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6954 ;;      Params:         0       0       0       0       0
  6955 ;;      Locals:         0       0       0       0       0
  6956 ;;      Temps:          3       0       0       0       0
  6957 ;;      Totals:         3       0       0       0       0
  6958 ;;Total ram usage:        3 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; This function calls:
  6961 ;;		Nothing
  6962 ;; This function is called by:
  6963 ;;		Interrupt level 1
  6964 ;; This function uses a non-reentrant model
  6965 ;;
  6966                           
  6967                           
  6968                           ;psect for function _manual_pwm
  6969  09CE                     _manual_pwm:	
  6970                           
  6971                           ;mainMaster.c: 60:     if (INTCONbits.T0IF == 1){
  6972  09CE  1D0B               	btfss	11,2	;volatile
  6973  09CF  29E6               	goto	i1l303
  6974                           
  6975                           ;mainMaster.c: 62:         cont++;
  6976  09D0  3001               	movlw	1
  6977  09D1  00F0               	movwf	??_manual_pwm
  6978  09D2  0870               	movf	??_manual_pwm,w
  6979  09D3  1283               	bcf	3,5	;RP0=0, select bank0
  6980  09D4  1303               	bcf	3,6	;RP1=0, select bank0
  6981  09D5  07CB               	addwf	_cont,f
  6982                           
  6983                           ;mainMaster.c: 63:             if(cont < 200){
  6984  09D6  30C8               	movlw	200
  6985  09D7  024B               	subwf	_cont,w
  6986  09D8  1803               	skipnc
  6987  09D9  29E2               	goto	i1l2727
  6988                           
  6989                           ;mainMaster.c: 64:                 if(cont < val){
  6990  09DA  084A               	movf	_val,w
  6991  09DB  024B               	subwf	_cont,w
  6992  09DC  1803               	skipnc
  6993  09DD  29E0               	goto	i1l300
  6994                           
  6995                           ;mainMaster.c: 65:                     PORTAbits.RA1 = 1;
  6996  09DE  1485               	bsf	5,1	;volatile
  6997                           
  6998                           ;mainMaster.c: 66:                 }else{
  6999  09DF  29E3               	goto	i1l2729
  7000  09E0                     i1l300:	
  7001                           
  7002                           ;mainMaster.c: 67:                     PORTAbits.RA1 = 0;
  7003  09E0  1085               	bcf	5,1	;volatile
  7004  09E1  29E3               	goto	i1l2729
  7005  09E2                     i1l2727:	
  7006                           
  7007                           ;mainMaster.c: 70:                 cont = 0;
  7008  09E2  01CB               	clrf	_cont
  7009  09E3                     i1l2729:	
  7010                           
  7011                           ;mainMaster.c: 72:             TMR0 = 56;
  7012  09E3  3038               	movlw	56
  7013  09E4  0081               	movwf	1	;volatile
  7014                           
  7015                           ;mainMaster.c: 73:             INTCONbits.T0IF = 0;
  7016  09E5  110B               	bcf	11,2	;volatile
  7017  09E6                     i1l303:	
  7018  09E6  0872               	movf	??_manual_pwm+2,w
  7019  09E7  008A               	movwf	10
  7020  09E8  0E71               	swapf	(??_manual_pwm+1)^(0+4294967168),w
  7021  09E9  0083               	movwf	3
  7022  09EA  0EFE               	swapf	126,f
  7023  09EB  0E7E               	swapf	126,w
  7024  09EC  0009               	retfie
  7025  09ED                     __end_of_manual_pwm:	
  7026  007E                     btemp	set	126	;btemp
  7027  007E                     wtemp0	set	126
  7028                           
  7029                           	psect	intentry
  7030  0004                     __pintentry:	
  7031                           ;incstack = 0
  7032                           ; Regs used in _manual_pwm: [wreg+status,2+status,0]
  7033                           
  7034  0004                     interrupt_function:	
  7035  007E                     saved_w	set	btemp
  7036  0004  00FE               	movwf	btemp
  7037  0005  0E03               	swapf	3,w
  7038  0006  00F1               	movwf	??_manual_pwm+1
  7039  0007  080A               	movf	10,w
  7040  0008  00F2               	movwf	??_manual_pwm+2
  7041  0009  120A  158A  29CE   	ljmp	_manual_pwm


Data Sizes:
    Strings     215
    Constant    10
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     37      69
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_11(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_26(CODE[4]), STR_25(CODE[5]), STR_24(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), temp(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_temp@temp_string	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_time@time_string	PTR unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), 

    day2	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), STR_10(CODE[10]), STR_9(CODE[10]), STR_8(CODE[10]), 
		 -> STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), 
		 -> STR_3(CODE[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 18
		 -> NULL(NULL[0]), STR_23(CODE[6]), STR_22(CODE[7]), STR_21(CODE[7]), 
		 -> STR_20(CODE[7]), STR_19(CODE[8]), STR_18(CODE[8]), STR_17(CODE[9]), 
		 -> STR_16(CODE[9]), STR_15(CODE[9]), STR_14(CODE[9]), STR_13(CODE[12]), 
		 -> STR_12(CODE[12]), STR_10(CODE[10]), STR_9(CODE[10]), STR_8(CODE[10]), 
		 -> STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), 
		 -> STR_3(CODE[10]), time(BANK0[6]), temp(BANK0[6]), STR_2(CODE[13]), 
		 -> STR_1(CODE[18]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_Char
    _main->___awdiv
    _main->___awmod
    _main->_get_IR
    _main->_get_PIR
    _main->_get_day
    _main->_get_hall
    _main->_get_tripwire
    _main->_strcmp
    _main->_write_RTC
    _write_RTC->_I2C_Master_Write
    _setup->_I2C_Master_Init
    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _open_door->_I2C_Master_Write
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _close_door->_I2C_Master_Write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _manual_pwm in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_UART_Init
    _UART_Init->___aldiv
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _get_temp->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read

Critical Paths under _manual_pwm in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _manual_pwm in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _manual_pwm in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _manual_pwm in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   37574
                                             31 BANK0      6     6      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                      _UART_TX_Empty
                         _UART_Write
                            ___awdiv
                            ___awmod
                             ___bmul
                         _close_door
                             _get_IR
                            _get_PIR
                            _get_day
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                          _open_door
                              _setup
                             _strcmp
                          _write_RTC
 ---------------------------------------------------------------------------------
 (1) _write_RTC                                            5     3      2    2284
                                              5 COMMON     3     1      2
                                              0 BANK0      2     2      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     259
                                              3 COMMON     5     3      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1880
                    _I2C_Master_Init
                           _Lcd_Init
                          _UART_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4    1118
                                              4 COMMON     2     2      0
                                             14 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     805
                                              3 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              0 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     542
                                              4 COMMON     4     4      0
                                             13 BANK0      4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     421
                                              3 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _open_door                                            0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                             5     5      0    3238
                                              2 BANK0      5     5      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             9     9      0    5666
                                             22 BANK0      9     9      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1806
                                              9 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     320
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     875
                                              3 COMMON     4     2      2
                                              0 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _close_door                                           0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2011
                                              3 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     793
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     604
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Empty                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    2018
                                              0 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              4 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1580
                                              7 COMMON     1     0      1
                                              0 BANK0      6     6      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              4 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _manual_pwm                                           3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_TX_Empty
   _UART_Write
   ___awdiv
   ___awmod
   ___bmul
   _close_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_day
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _open_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
     _initOscilador
   _strcmp
   _write_RTC
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _manual_pwm (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      50       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      45       5       86.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      50      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Mar 09 16:28:11 2019

                                _i 0053                                  _j 0052  
                                _k 0045                                  pc 0002  
                   ___bmul@product 0075                        __CFG_CP$OFF 0000  
                      get_hall@key 0022                                 _IR 0055  
                     ___awdiv@sign 0021                                 fsr 0004  
                              l201 0D8B                                l132 0935  
                              l150 0AEC                                l151 0AEF  
                              l160 0972                                l161 0973  
                              l162 0977                                l314 00C7  
                              l163 0978                                l323 00EE  
                              l164 097C                                l236 093F  
                              l341 0271                                l309 00E3  
                              l158 096B                                l342 0274  
                              l159 096E                                l370 03F9  
                              l348 0292                                l373 0405  
                              l367 03ED                                l376 0411  
                              l597 0EE0                                _GIE 005F  
                     __CFG_CPD$OFF 0000                                _PIR 0056  
                    ?_get_tripwire 0070                                _min 0048  
                              _val 004A                                fsr0 0004  
                              indf 0000                       ___awmod@sign 0021  
                     __CFG_LVP$OFF 0000                               l2213 0AFF  
                             l2215 0B0D                               l2223 0B26  
                             l2311 0D51                               l2303 0D3A  
                             l3105 0E2F                               l2313 0D57  
                             l2305 0D3F                               l2219 0B1B  
                             l3131 0F01                               l3123 0EF1  
                             l2315 0D5D                               l2307 0D45  
                             l2323 0D69                               l3301 067F  
                             l2421 0A7E                               l3109 0E3C  
                             l3141 0F39                               l3133 0F11  
                             l2317 0D64                               l2309 0D4B  
                             l3311 05F8                               l2423 0A89  
                             l2319 0D64                               l2433 095B  
                             l3313 06C6                               l2425 0A91  
                             l3145 0F46                               l3241 0789  
                             l3331 0D11                               l3171 0C04  
                             l3163 0BE0                               l3501 0CA7  
                             l2429 0955                               l3165 0BEE  
                             l3309 0683                               l3149 0F54  
                             l2631 07AF                               l3175 0C0F  
                             l3423 0FDD                               l3095 0DF7  
                             l3513 0CB4                               l3505 0CAE  
                             l3273 0636                               l3097 0E07  
                             l3347 0C18                               l3515 0CC2  
                             l3523 0CDB                               l3283 064D  
                             l3267 0618                               l3611 010A  
                             l2637 07BA                               l3613 010B  
                             l2663 07F9                               l2655 07E6  
                             l2647 07C2                               l3527 0CE3  
                             l3519 0CD0                               l3295 0670  
                             l3711 0296                               l3551 0064  
                             l2649 07D0                               l3289 064F  
                             l2659 07F1                               l3483 0AAE  
                             l3731 02F5                               l3723 02E5  
                             l3707 0289                               l3485 0AA1  
                             l3813 042C                               l3709 0295  
                             l3581 00BE                               l3487 0AC3  
                             l3671 0226                               l3583 00CA  
                             l3681 0230                               l3673 0228  
                             l3747 0334                               l3739 030F  
                             l3683 0232                               l3675 022A  
                             l3691 0258                               l3667 021E  
                             l3659 0215                               l3595 00DA  
                             l3765 0371                               l3757 0351  
                             l3749 033E                               l3685 0234  
                             l3677 022C                               l3767 037B  
                             l3679 022E                               l3599 00E5  
                             l3689 0239                               l3787 041D  
                             l3883 0241                               l3885 0D71  
                             l3887 062B                               STR_1 051A  
                             STR_2 052C                        get_time@min 0025  
                             STR_3 055B                               STR_4 056F  
                             STR_5 0597                               STR_6 0579  
                             STR_7 058D                               STR_8 0565  
                             STR_9 0583                               _BRGH 04C2  
                             _CREN 00C4                               u3005 0BFB  
                             u3015 0C05                               u3111 0766  
                             u3112 0767                               u3113 076C  
                             u3105 074F                               u3114 076D  
                             u2155 07C5                               u3035 0B3D  
                             u3115 0772                               u3116 0773  
                             u3215 0CF6                               u2175 07D1  
                             u4007 04AB                               u3071 0706  
                             u3055 06D6                               u3072 0707  
                             u2185 07DD                               u3305 0EB3  
                             u4017 04BB                               u3073 070C  
                             u3065 06EF                               u3074 070D  
                             u3235 0D1D                               u2195 07E7  
                             u1715 0B02                               u3155 0666  
                             u4027 04CB                               u3075 0712  
                             u3076 0713                               u4037 0B84  
                             u4047 0B95                               u1735 0B13  
                             u3095 0736                               u4057 098F  
                             u1745 0B1C                               u3530 0106  
                             u3275 0FB5                               u3365 0CB7  
                             u2805 0DFB                               u3295 0E94  
                             u1785 0B74                               u3385 0CC8  
                             u2825 0E09                               u3395 0CD1  
                             u2835 0E1E                               u2915 0F13  
                             _PEIE 005E                               u2845 0E30  
                             u2925 0F28                               u2935 0F3A  
                             u3825 0443                               u3585 026B  
                             u3835 0474                               u3907 017D  
                             _RCEN 048B                               _RCIF 0065  
                             u3917 018F                               u2975 0BE3  
                             u2895 0F05                               u3927 01A1  
                             u3847 0059                               u3937 01B3  
                             u3857 0123                               u2995 0BEF  
                             u3947 01C5                               u3867 0135  
                             u3957 01D5                               u3877 0147  
                             u3967 01E7                               u3887 0159  
                             u3977 01F9                               u3897 016B  
                             u3987 020B                               u3997 0425  
                             _TMR0 0001                               _SPEN 00C7  
                             _TRMT 04C1                               _TXEN 04C5  
                             _SYNC 04C4                       __CFG_WRT$OFF 0000  
                             _day1 0054                               _day2 0058  
                             _bank 004C                  ?_Lcd_Write_String 0020  
 __end_of_I2C_Master_RepeatedStart 0925                               _cont 004B  
                             _door 007A                               _main 001D  
                             _hour 0049                               _temp 0059  
                             _time 005F                               _trip 0057  
                             btemp 007E                               start 000C  
               ??_Lcd_Write_String 0022                      __CFG_IESO$OFF 0000  
                  __end_of_Lcd_Cmd 0998                  ___bmul@multiplier 0076  
                    __CFG_MCLRE$ON 0000                get_temp@temp_string 003D  
                 ?_I2C_Master_Init 002D                   ?_I2C_Master_Read 0073  
                 ?_I2C_Master_Wait 0070                   ?_I2C_Master_Stop 0070  
                  __end_of___aldiv 0F5D                              ?_main 0070  
                  __end_of___awdiv 07FE                              STR_10 0551  
                            STR_11 05E2                              STR_20 05C6  
                            STR_12 0539                              STR_21 05CE  
                            STR_13 0545                              STR_22 05D5  
                            STR_14 05AA                              STR_23 05DC  
                            STR_15 05BC                              STR_24 05EE  
                            STR_16 05A1                              STR_25 05E8  
                            STR_17 05B3                      __CFG_WDTE$OFF 0000  
                            STR_26 05ED                              STR_18 05C5  
                            STR_19 05CD                    __end_of___awmod 0CE8  
                     get_time@hour 0024                              _ANSEL 0188  
                  __end_of___lldiv 0E45                     ??_get_tripwire 0077  
                  ___awdiv@divisor 0073                    __end_of___lwdiv 0C14  
                            i1l300 09E0                              i1l303 09E6  
                  __end_of___lwmod 0B2B                    ___awdiv@counter 0020  
                            _RCREG 001A                              _SPBRG 0099  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                              _PORTE 0009  
          __size_of_Lcd_Set_Cursor 0050                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
                            _TRISD 0088                              _SSPIE 0463  
                            _TRISE 0089                              _SSPIF 0063  
                            _TXREG 0019                    __end_of_get_PIR 0A33  
                   __CFG_FCMEN$OFF 0000                    __end_of_get_day 0BD6  
                      ?_UART_Write 0070                 __size_of_UART_Init 00D8  
                            _alarm 004D                    __end_of_dpowers 051A  
                            _setup 0D8D                              _state 0079  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 06CB                   __end_of_Lcd_Init 04FF  
                 __end_of_Lcd_Port 097E                    __initialization 000F  
                     __end_of_main 049F             __size_of_initOscilador 0055  
                           ??_main 003F                 __size_of_Lcd_Clear 000B  
                ?_I2C_Master_Start 0070                  ?_I2C_Master_Write 0073  
               ??_I2C_Master_Start 0073                 ??_I2C_Master_Write 0075  
                 ___awdiv@dividend 0075                             ?_setup 0070  
                           _ANSELH 0189                             i1l2727 09E2  
                           i1l2729 09E3                          ??_Lcd_Cmd 0074  
          __size_of_Lcd_Write_Char 0039                             _SSPADD 0093  
                           _TRISC3 043B                             _TRISC4 043C  
                           _TRISC6 043E                             _TRISC7 043F  
                           _SSPCON 0014                             _SSPBUF 0013  
                   __CFG_PWRTE$OFF 0000           _I2C_Master_RepeatedStart 091E  
                 __end_of_get_hall 0A56                  __end_of_UART_Init 07A3  
                 __end_of_get_temp 1000                   __end_of_get_time 0ECE  
                           ___bmul 0953                __size_of_UART_Write 000A  
                        ??___aldiv 0073                          ??___awdiv 0077  
                        ??___awmod 0077                             _change 0051  
                        ??___lldiv 0073                             _get_IR 09ED  
                        ??___lwdiv 0077                          ??___lwmod 0027  
                 ___awdiv@quotient 0022                             _newmin 0047  
                  ___awmod@divisor 0073                          ??_get_PIR 0077  
                  ___awmod@counter 0020              __end_of_UART_TX_Empty 0910  
                        ??_get_day 0077                             _strcat 0A79  
                           _strcmp 0A9D                             saved_w 007E  
                        ??_sprintf 002C                    Lcd_Set_Cursor@a 0022  
                  Lcd_Set_Cursor@b 0077                    Lcd_Set_Cursor@y 0024  
                  Lcd_Set_Cursor@z 0023            __end_of__initialization 0019  
                    _initOscilador 0D38                  __end_of_Lcd_Clear 0953  
             __end_of_get_tripwire 0A79                ___bmul@multiplicand 0073  
                   __pcstackCOMMON 0070                      __end_of_setup 0DE5  
                   _Lcd_Set_Cursor 0CE8                     _OPTION_REGbits 0081  
                        ?_Lcd_Init 0070                          ?_Lcd_Port 0070  
                          ??_setup 0078                         __pbssBANK0 0045  
                   ?_initOscilador 0070                         __pmaintext 001D  
                          ?___bmul 0073                            ?_get_IR 0070  
                       __pintentry 0004                 __size_of_open_door 001B  
        __size_of_Lcd_Write_String 0041             __end_of_Lcd_Set_Cursor 0D38  
                          ?_strcat 0073                            ?_strcmp 0073  
                       _close_door 0998                       ??_UART_Write 0073  
                       ??_Lcd_Init 0020                         ??_Lcd_Port 0073  
                          _SSPCON2 0091                          ?_get_hall 0070  
                          _SSPSTAT 0094                          ?_get_temp 0070  
                        ?_get_time 0070                         __stringtab 0500  
              initOscilador@option 0075                     _Lcd_Write_Char 0B63  
                          _Lcd_Cmd 097E                 __size_of_write_RTC 0046  
                       _manual_pwm 09CE                            ___aldiv 0ECE  
                  __size_of___bmul 0011                            ___awdiv 07A3  
                          ___awmod 0C9B                            ___lldiv 0DE5  
               __end_of_UART_Write 0948                            ___lwdiv 0BD6  
                          ___lwmod 0AF7                    __size_of_get_IR 0023  
                          _change1 0050                            _change2 004F  
                          _change3 004E                    ?_Lcd_Set_Cursor 0077  
                          _get_PIR 0A10                            __ptext1 0C55  
                          __ptext2 0A9D                            __ptext3 0D8D  
                          __ptext4 0D38                            __ptext5 06CB  
                          __ptext6 0ECE                            __ptext7 049F  
                          __ptext8 0B2B                            __ptext9 0DE5  
                          _get_day 0B9C                get_time@time_string 0026  
                  __size_of_strcat 0024                    __size_of_strcmp 002C  
                          _dpowers 0510                   ___awmod@dividend 0075  
                 ___aldiv@dividend 0024                            _newhour 0078  
         __size_of_I2C_Master_Init 0038           __size_of_I2C_Master_Read 002E  
         __size_of_I2C_Master_Wait 0009           __size_of_I2C_Master_Stop 0007  
                  ??_initOscilador 0073                         ??_get_hall 0077  
                          _sprintf 05F1                            clrloop0 092E  
           __end_of_Lcd_Write_Char 0B9C                         ??_get_temp 0036  
                       ??_get_time 0022               end_of_initialization 0019  
            __size_of_get_tripwire 0023         ??_I2C_Master_RepeatedStart 0073  
                __end_of_open_door 09CE                         get_PIR@PIR 0022  
        __size_of_I2C_Master_Start 0007          __size_of_I2C_Master_Write 0008  
                  ___lldiv@divisor 0020                    ___lldiv@counter 002C  
                        _RCSTAbits 0018                   ___aldiv@quotient 002A  
                 I2C_Master_Init@c 002D                   I2C_Master_Read@a 0073  
                        Lcd_Port@a 0073                       write_RTC@day 0076  
                          strcmp@r 0020                          _UART_Init 06CB  
                        _PORTAbits 0005                          _PORTBbits 0006  
                        _PORTCbits 0007                          _PORTDbits 0008  
                        _PORTEbits 0009                     UART_Write@data 0073  
                __end_of_write_RTC 0C9B                       _get_tripwire 0A56  
                      ?_close_door 0070                          _TRISCbits 0087  
                  ?_Lcd_Write_Char 0070                  Lcd_Write_String@a 0020  
                Lcd_Write_String@i 0025                          _Lcd_Clear 0948  
                      ?_manual_pwm 0070                     __end_of___bmul 0964  
                 _Lcd_Write_String 0C14                         ?_UART_Init 002E  
                   __end_of_get_IR 0A10                     __end_of_strcat 0A9D  
                   __end_of_strcmp 0AC9                start_initialization 000F  
                __size_of_Lcd_Init 0060                  __size_of_Lcd_Port 001A  
                ??_I2C_Master_Init 0074                  ??_I2C_Master_Read 0075  
                ??_I2C_Master_Wait 0073                  ??_I2C_Master_Stop 0073  
           __size_of_UART_TX_Empty 0006           __CFG_FOSC$INTRC_NOCLKOUT 0000  
                       ?_Lcd_Clear 0070                           ??___bmul 0074  
              __size_of_close_door 001B                           ??_get_IR 0077  
                  Lcd_Write_Char@a 0077                    Lcd_Write_Char@y 0076  
                         ??_strcat 0074                           ??_strcmp 0075  
                 write_RTC@minutes 0075                        __pbssCOMMON 0078  
                        ___latbits 0002                      __pcstackBANK0 0020  
              __size_of_manual_pwm 001F                  __size_of_get_hall 0023  
                         ?_Lcd_Cmd 0070                  __size_of_get_temp 00A3  
                __size_of_get_time 0089                        sprintf@flag 0030  
                      sprintf@prec 0031                   _I2C_Master_Start 0910  
                 _I2C_Master_Write 0925                   ___lwdiv@dividend 0075  
                 ??_Lcd_Set_Cursor 0020                    get_temp@decimal 0039  
                         ?___aldiv 0020                           ?___awdiv 0073  
                         ?___awmod 0073                           ?___lldiv 0020  
                         ?___lwdiv 0073                           ?___lwmod 0023  
                      ??_UART_Init 0032                           ?_get_PIR 0070  
                        __pstrings 0500                           ?_get_day 0070  
                  get_temp@tempLSB 003E                    get_temp@tempMSB 003C  
                    _UART_TX_Empty 090A                   ___lwdiv@quotient 0021  
                         ?_sprintf 0029                         UART_Init@x 0074  
                   __size_of_setup 0058                    ___aldiv@divisor 0020  
                interrupt_function 0004                    ___aldiv@counter 0028  
                        clear_ram0 092D                          _open_door 09B3  
                         Lcd_Cmd@a 0076                        ??_Lcd_Clear 0077  
                UART_Init@baudrate 002E                        __stringbase 050F  
                   ?_UART_TX_Empty 0070                   ??_Lcd_Write_Char 0074  
                     ??_close_door 0075                           _Lcd_Init 049F  
                         _Lcd_Port 0964                          _write_RTC 0C55  
              I2C_Master_Read@temp 0020              __end_of_initOscilador 0D8D  
         __end_of_Lcd_Write_String 0C55                   __size_of_Lcd_Cmd 001A  
                       ?_open_door 0070                       ??_manual_pwm 0070  
               __end_of_close_door 09B3                   __size_of___aldiv 008F  
__size_of_I2C_Master_RepeatedStart 0007                   __size_of___awdiv 005B  
                 __size_of___awmod 004D          ?_I2C_Master_RepeatedStart 0070  
                 __size_of___lldiv 0060                   __size_of___lwdiv 003E  
                 __size_of___lwmod 0034                 __end_of__stringtab 0510  
                 __size_of_get_PIR 0023                   __size_of_get_day 003A  
                       sprintf@val 0032                    _I2C_Master_Init 0B2B  
                  _I2C_Master_Read 0AC9                    _I2C_Master_Wait 0935  
                       strcat@from 0073                    _I2C_Master_Stop 0917  
                  ___lwdiv@divisor 0073                    ___lwdiv@counter 0020  
                         __ptext10 09B3                           __ptext11 0A56  
                         __ptext20 0B9C                           __ptext12 0E45  
                         __ptext21 091E                           __ptext13 0F5D  
                         __ptext30 0C9B                           __ptext22 0A10  
                         __ptext14 0A79                           __ptext31 07A3  
                         __ptext23 09ED                           __ptext15 05F1  
                         __ptext40 09CE                           __ptext32 093E  
                         __ptext24 0AC9                           __ptext16 0AF7  
                         __ptext33 090A                           __ptext25 0998  
                         __ptext17 0BD6                           __ptext34 0C14  
                         __ptext26 0925                           __ptext18 0953  
                         __ptext35 0B63                           __ptext27 0917  
                         __ptext19 0A33                           __ptext36 0CE8  
                         __ptext28 0910                           __ptext37 0948  
                         __ptext29 0935                           __ptext38 097E  
                         __ptext39 0964                         ?_write_RTC 0075  
                __CFG_BOR4V$BOR40V 0000                           _get_hall 0A33  
                         _get_temp 0F5D                           _get_time 0E45  
                 __size_of_sprintf 00DA                 __end_of_manual_pwm 09ED  
                    __size_of_main 0482                           get_IR@IR 0022  
                         get_day@d 0022                    ??_UART_TX_Empty 0073  
         __end_of_I2C_Master_Start 0917           __end_of_I2C_Master_Write 092D  
                       _INTCONbits 000B                 Lcd_Write_Char@temp 0075  
                         intlevel1 0000                          sprintf@ap 002F  
                        sprintf@sp 0034                   ___lwmod@dividend 0025  
                 ___lldiv@dividend 0024                        ??_open_door 0075  
                        stringcode 050A                         _OSCCONbits 008F  
          __end_of_I2C_Master_Init 0B63            __end_of_I2C_Master_Read 0AF7  
          __end_of_I2C_Master_Wait 093E            __end_of_I2C_Master_Stop 091E  
               Lcd_Set_Cursor@temp 0025                      write_RTC@hour 0077  
                         sprintf@c 0035                           sprintf@f 0029  
                         strcat@cp 0076                           strcat@to 0075  
                         strcmp@s1 0021                           strcmp@s2 0073  
                 ___lldiv@quotient 0028                  I2C_Master_Write@d 0073  
                  ___lwmod@divisor 0023                    ___lwmod@counter 0028  
                         stringdir 050A                   get_tripwire@trip 0022  
                         stringtab 0500                       ___aldiv@sign 0029  
                       _UART_Write 093E                        _SSPCON2bits 0091  
                      ??_write_RTC 0020                         _SSPCONbits 0014  

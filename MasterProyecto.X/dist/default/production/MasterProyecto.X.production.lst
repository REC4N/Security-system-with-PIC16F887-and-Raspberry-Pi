

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Mar 02 16:19:25 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text17,local,class=CODE,merge=1,delta=2
    27                           	psect	text18,local,class=CODE,merge=1,delta=2
    28                           	psect	text19,local,class=CODE,merge=1,delta=2
    29                           	psect	text20,local,class=CODE,merge=1,delta=2
    30                           	psect	text21,local,class=CODE,merge=1,delta=2
    31                           	psect	text22,local,class=CODE,merge=1,delta=2
    32                           	psect	text23,local,class=CODE,merge=1,delta=2
    33                           	psect	text24,local,class=CODE,merge=1,delta=2
    34                           	psect	text25,local,class=CODE,merge=1,delta=2
    35                           	psect	text26,local,class=CODE,merge=1,delta=2
    36                           	psect	text27,local,class=CODE,merge=1,delta=2
    37                           	psect	text28,local,class=CODE,merge=1,delta=2
    38                           	psect	text29,local,class=CODE,merge=1,delta=2
    39                           	psect	text30,local,class=CODE,merge=1,delta=2
    40                           	psect	text31,local,class=CODE,merge=1,delta=2
    41                           	psect	text32,local,class=CODE,merge=1,delta=2
    42                           	psect	text33,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.05
    46                           ; Generated 20/12/2018 GMT
    47                           ; 
    48                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F887 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0088                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  008F                     	;# 
   124  0090                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0093                     	;# 
   129  0093                     	;# 
   130  0094                     	;# 
   131  0095                     	;# 
   132  0096                     	;# 
   133  0097                     	;# 
   134  0098                     	;# 
   135  0099                     	;# 
   136  009A                     	;# 
   137  009B                     	;# 
   138  009C                     	;# 
   139  009D                     	;# 
   140  009E                     	;# 
   141  009F                     	;# 
   142  0105                     	;# 
   143  0107                     	;# 
   144  0108                     	;# 
   145  0109                     	;# 
   146  010C                     	;# 
   147  010C                     	;# 
   148  010D                     	;# 
   149  010E                     	;# 
   150  010F                     	;# 
   151  0185                     	;# 
   152  0187                     	;# 
   153  0188                     	;# 
   154  0189                     	;# 
   155  018C                     	;# 
   156  018D                     	;# 
   157  0000                     	;# 
   158  0001                     	;# 
   159  0002                     	;# 
   160  0003                     	;# 
   161  0004                     	;# 
   162  0005                     	;# 
   163  0006                     	;# 
   164  0007                     	;# 
   165  0008                     	;# 
   166  0009                     	;# 
   167  000A                     	;# 
   168  000B                     	;# 
   169  000C                     	;# 
   170  000D                     	;# 
   171  000E                     	;# 
   172  000E                     	;# 
   173  000F                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0013                     	;# 
   178  0014                     	;# 
   179  0015                     	;# 
   180  0015                     	;# 
   181  0016                     	;# 
   182  0017                     	;# 
   183  0018                     	;# 
   184  0019                     	;# 
   185  001A                     	;# 
   186  001B                     	;# 
   187  001B                     	;# 
   188  001C                     	;# 
   189  001D                     	;# 
   190  001E                     	;# 
   191  001F                     	;# 
   192  0081                     	;# 
   193  0085                     	;# 
   194  0086                     	;# 
   195  0087                     	;# 
   196  0088                     	;# 
   197  0089                     	;# 
   198  008C                     	;# 
   199  008D                     	;# 
   200  008E                     	;# 
   201  008F                     	;# 
   202  0090                     	;# 
   203  0091                     	;# 
   204  0092                     	;# 
   205  0093                     	;# 
   206  0093                     	;# 
   207  0093                     	;# 
   208  0094                     	;# 
   209  0095                     	;# 
   210  0096                     	;# 
   211  0097                     	;# 
   212  0098                     	;# 
   213  0099                     	;# 
   214  009A                     	;# 
   215  009B                     	;# 
   216  009C                     	;# 
   217  009D                     	;# 
   218  009E                     	;# 
   219  009F                     	;# 
   220  0105                     	;# 
   221  0107                     	;# 
   222  0108                     	;# 
   223  0109                     	;# 
   224  010C                     	;# 
   225  010C                     	;# 
   226  010D                     	;# 
   227  010E                     	;# 
   228  010F                     	;# 
   229  0185                     	;# 
   230  0187                     	;# 
   231  0188                     	;# 
   232  0189                     	;# 
   233  018C                     	;# 
   234  018D                     	;# 
   235                           
   236                           	psect	strings
   237  0003                     __pstrings:	
   238  0003                     stringtab:	
   239  0003                     __stringtab:	
   240                           
   241                           ;	String table - string pointers are 1 byte each
   242  0003  1BFF               	btfsc	btemp+1,7
   243  0004  280D               	ljmp	stringcode
   244  0005  1383               	bcf	3,7
   245  0006  187F               	btfsc	btemp+1,0
   246  0007  1783               	bsf	3,7
   247  0008  0800               	movf	0,w
   248  0009  0A84               	incf	4,f
   249  000A  1903               	skipnz
   250  000B  0AFF               	incf	btemp+1,f
   251  000C  0008               	return
   252  000D                     stringcode:	
   253  000D                     stringdir:	
   254  000D  3000               	movlw	high stringdir
   255  000E  008A               	movwf	10
   256  000F  0804               	movf	4,w
   257  0010  0A84               	incf	4,f
   258  0011  0782               	addwf	2,f
   259  0012                     __stringbase:	
   260  0012  3400               	retlw	0
   261  0013                     __end_of__stringtab:	
   262  0013                     _dpowers:	
   263  0013  3401               	retlw	1
   264  0014  3400               	retlw	0
   265  0015  340A               	retlw	10
   266  0016  3400               	retlw	0
   267  0017  3464               	retlw	100
   268  0018  3400               	retlw	0
   269  0019  34E8               	retlw	232
   270  001A  3403               	retlw	3
   271  001B  3410               	retlw	16
   272  001C  3427               	retlw	39
   273  001D                     __end_of_dpowers:	
   274  0007                     _PORTC	set	7
   275  0005                     _PORTA	set	5
   276  0006                     _PORTB	set	6
   277  0007                     _PORTCbits	set	7
   278  0005                     _PORTAbits	set	5
   279  0019                     _TXREG	set	25
   280  001A                     _RCREG	set	26
   281  0006                     _PORTBbits	set	6
   282  0013                     _SSPBUF	set	19
   283  0014                     _SSPCON	set	20
   284  0065                     _RCIF	set	101
   285  00C4                     _CREN	set	196
   286  00C7                     _SPEN	set	199
   287  0063                     _SSPIF	set	99
   288  005E                     _PEIE	set	94
   289  005F                     _GIE	set	95
   290  0087                     _TRISC	set	135
   291  0085                     _TRISA	set	133
   292  0086                     _TRISB	set	134
   293  0099                     _SPBRG	set	153
   294  008F                     _OSCCONbits	set	143
   295  0091                     _SSPCON2bits	set	145
   296  0094                     _SSPSTAT	set	148
   297  0093                     _SSPADD	set	147
   298  0091                     _SSPCON2	set	145
   299  04C1                     _TRMT	set	1217
   300  04C5                     _TXEN	set	1221
   301  043E                     _TRISC6	set	1086
   302  043F                     _TRISC7	set	1087
   303  04C4                     _SYNC	set	1220
   304  04C2                     _BRGH	set	1218
   305  0463                     _SSPIE	set	1123
   306  048B                     _RCEN	set	1163
   307  043C                     _TRISC4	set	1084
   308  043B                     _TRISC3	set	1083
   309  0188                     _ANSEL	set	392
   310  0189                     _ANSELH	set	393
   311  001D                     STR_2:	
   312  001D  3444               	retlw	68	;'D'
   313  001E  346F               	retlw	111	;'o'
   314  001F  346F               	retlw	111	;'o'
   315  0020  3472               	retlw	114	;'r'
   316  0021  3420               	retlw	32	;' '
   317  0022  344F               	retlw	79	;'O'
   318  0023  3450               	retlw	80	;'P'
   319  0024  3445               	retlw	69	;'E'
   320  0025  344E               	retlw	78	;'N'
   321  0026  3420               	retlw	32	;' '
   322  0027  3420               	retlw	32	;' '
   323  0028  3400               	retlw	0
   324  0029                     STR_3:	
   325  0029  3444               	retlw	68	;'D'
   326  002A  346F               	retlw	111	;'o'
   327  002B  346F               	retlw	111	;'o'
   328  002C  3472               	retlw	114	;'r'
   329  002D  3420               	retlw	32	;' '
   330  002E  3443               	retlw	67	;'C'
   331  002F  344C               	retlw	76	;'L'
   332  0030  344F               	retlw	79	;'O'
   333  0031  3453               	retlw	83	;'S'
   334  0032  3445               	retlw	69	;'E'
   335  0033  3444               	retlw	68	;'D'
   336  0034  3400               	retlw	0
   337  0035                     STR_4:	
   338  0035  3454               	retlw	84	;'T'
   339  0036  3472               	retlw	114	;'r'
   340  0037  3469               	retlw	105	;'i'
   341  0038  3470               	retlw	112	;'p'
   342  0039  3420               	retlw	32	;' '
   343  003A  344F               	retlw	79	;'O'
   344  003B  344E               	retlw	78	;'N'
   345  003C  3420               	retlw	32	;' '
   346  003D  3400               	retlw	0
   347  003E                     STR_5:	
   348  003E  3454               	retlw	84	;'T'
   349  003F  3472               	retlw	114	;'r'
   350  0040  3469               	retlw	105	;'i'
   351  0041  3470               	retlw	112	;'p'
   352  0042  3420               	retlw	32	;' '
   353  0043  344F               	retlw	79	;'O'
   354  0044  3446               	retlw	70	;'F'
   355  0045  3446               	retlw	70	;'F'
   356  0046  3400               	retlw	0
   357  0047                     STR_6:	
   358  0047  3450               	retlw	80	;'P'
   359  0048  3449               	retlw	73	;'I'
   360  0049  3452               	retlw	82	;'R'
   361  004A  3420               	retlw	32	;' '
   362  004B  344F               	retlw	79	;'O'
   363  004C  344E               	retlw	78	;'N'
   364  004D  3420               	retlw	32	;' '
   365  004E  3400               	retlw	0
   366  004F                     STR_7:	
   367  004F  3450               	retlw	80	;'P'
   368  0050  3449               	retlw	73	;'I'
   369  0051  3452               	retlw	82	;'R'
   370  0052  3420               	retlw	32	;' '
   371  0053  344F               	retlw	79	;'O'
   372  0054  3446               	retlw	70	;'F'
   373  0055  3446               	retlw	70	;'F'
   374  0056  3400               	retlw	0
   375  0057                     STR_1:	
   376  0057  3432               	retlw	50	;'2'
   377  0058  3433               	retlw	51	;'3'
   378  0059  342E               	retlw	46	;'.'
   379  005A  3435               	retlw	53	;'5'
   380  005B  3430               	retlw	48	;'0'
   381  005C  3400               	retlw	0
   382  005D                     STR_11:	
   383  005D  342E               	retlw	46	;'.'
   384  005E  3425               	retlw	37	;'%'
   385  005F  3464               	retlw	100	;'d'
   386  0060  3430               	retlw	48	;'0'
   387  0061  3400               	retlw	0
   388  0062                     STR_12:	
   389  0062  342E               	retlw	46	;'.'
   390  0063  3425               	retlw	37	;'%'
   391  0064  3464               	retlw	100	;'d'
   392  0065  3400               	retlw	0
   393  0048                     
   394                           ; #config settings
   395  0000                     
   396                           	psect	cinit
   397  07F3                     start_initialization:	
   398  07F3                     __initialization:	
   399                           
   400                           ; Clear objects allocated to BANK0
   401  07F3  1283               	bcf	3,5	;RP0=0, select bank0
   402  07F4  1303               	bcf	3,6	;RP1=0, select bank0
   403  07F5  01BC               	clrf	__pbssBANK0& (0+127)
   404  07F6  01BD               	clrf	(__pbssBANK0+1)& (0+127)
   405  07F7  01BE               	clrf	(__pbssBANK0+2)& (0+127)
   406  07F8  01BF               	clrf	(__pbssBANK0+3)& (0+127)
   407  07F9  01C0               	clrf	(__pbssBANK0+4)& (0+127)
   408  07FA  01C1               	clrf	(__pbssBANK0+5)& (0+127)
   409  07FB  01C2               	clrf	(__pbssBANK0+6)& (0+127)
   410  07FC                     end_of_initialization:	
   411                           ;End of C runtime variable initialization code
   412                           
   413  07FC                     __end_of__initialization:	
   414  07FC  0183               	clrf	3
   415  07FD  120A  118A  2E9C   	ljmp	_main	;jump to C main() function
   416                           
   417                           	psect	bssBANK0
   418  003C                     __pbssBANK0:	
   419  003C                     _state:	
   420  003C                     	ds	1
   421  003D                     _IR:	
   422  003D                     	ds	1
   423  003E                     _PIR:	
   424  003E                     	ds	1
   425  003F                     _trip:	
   426  003F                     	ds	1
   427  0040                     _door:	
   428  0040                     	ds	1
   429  0041                     _temp:	
   430  0041                     	ds	1
   431  0042                     _time:	
   432  0042                     	ds	1
   433                           
   434                           	psect	cstackCOMMON
   435  0070                     __pcstackCOMMON:	
   436  0070                     ?_setup:	
   437  0070                     ?_get_temp:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_get_hall:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_get_tripwire:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?_get_PIR:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_get_IR:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_get_time:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_strcat:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ?_I2C_Master_Wait:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ??_I2C_Master_Wait:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ?_I2C_Master_Start:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ??_I2C_Master_Start:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_I2C_Master_RepeatedStart:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ??_I2C_Master_RepeatedStart:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ?_I2C_Master_Stop:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ??_I2C_Master_Stop:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ?_I2C_Master_Write:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ?_Lcd_Port:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ??_Lcd_Port:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     ?_Lcd_Cmd:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     ?_Lcd_Clear:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     ?_Lcd_Init:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0070                     ?_Lcd_Write_Char:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0070                     ?_initOscilador:	
   504                           ; 1 bytes @ 0x0
   505                           
   506  0070                     ??_initOscilador:	
   507                           ; 1 bytes @ 0x0
   508                           
   509  0070                     ?_UART_Write:	
   510                           ; 1 bytes @ 0x0
   511                           
   512  0070                     ??_UART_Write:	
   513                           ; 1 bytes @ 0x0
   514                           
   515  0070                     ?_UART_Write_Text:	
   516                           ; 1 bytes @ 0x0
   517                           
   518  0070                     ?_main:	
   519                           ; 1 bytes @ 0x0
   520                           
   521  0070                     ?___bmul:	
   522                           ; 1 bytes @ 0x0
   523                           
   524  0070                     ?_strcmp:	
   525                           ; 1 bytes @ 0x0
   526                           
   527  0070                     ?_I2C_Master_Read:	
   528                           ; 2 bytes @ 0x0
   529                           
   530  0070                     ?___lwdiv:	
   531                           ; 2 bytes @ 0x0
   532                           
   533  0070                     ?___lldiv:	
   534                           ; 2 bytes @ 0x0
   535                           
   536  0070                     ?___aldiv:	
   537                           ; 4 bytes @ 0x0
   538                           
   539  0070                     Lcd_Port@a:	
   540                           ; 4 bytes @ 0x0
   541                           
   542  0070                     UART_Write@data:	
   543                           ; 1 bytes @ 0x0
   544                           
   545  0070                     ___bmul@multiplicand:	
   546                           ; 1 bytes @ 0x0
   547                           
   548  0070                     strcat@from:	
   549                           ; 1 bytes @ 0x0
   550                           
   551  0070                     strcmp@s2:	
   552                           ; 1 bytes @ 0x0
   553                           
   554  0070                     I2C_Master_Write@d:	
   555                           ; 1 bytes @ 0x0
   556                           
   557  0070                     I2C_Master_Read@a:	
   558                           ; 2 bytes @ 0x0
   559                           
   560  0070                     ___lwdiv@divisor:	
   561                           ; 2 bytes @ 0x0
   562                           
   563  0070                     ___lldiv@divisor:	
   564                           ; 2 bytes @ 0x0
   565                           
   566  0070                     ___aldiv@divisor:	
   567                           ; 4 bytes @ 0x0
   568                           
   569                           
   570                           ; 4 bytes @ 0x0
   571  0070                     	ds	1
   572  0071                     ??_strcat:	
   573  0071                     ??_Lcd_Cmd:	
   574                           ; 1 bytes @ 0x1
   575                           
   576  0071                     ??_Lcd_Write_Char:	
   577                           ; 1 bytes @ 0x1
   578                           
   579  0071                     ??_UART_Write_Text:	
   580                           ; 1 bytes @ 0x1
   581                           
   582  0071                     ??___bmul:	
   583                           ; 1 bytes @ 0x1
   584                           
   585                           
   586                           ; 1 bytes @ 0x1
   587  0071                     	ds	1
   588  0072                     ??_strcmp:	
   589  0072                     ??_I2C_Master_Write:	
   590                           ; 1 bytes @ 0x2
   591                           
   592  0072                     ??_I2C_Master_Read:	
   593                           ; 1 bytes @ 0x2
   594                           
   595  0072                     Lcd_Write_Char@temp:	
   596                           ; 1 bytes @ 0x2
   597                           
   598  0072                     initOscilador@option:	
   599                           ; 1 bytes @ 0x2
   600                           
   601  0072                     ___bmul@product:	
   602                           ; 1 bytes @ 0x2
   603                           
   604  0072                     strcat@to:	
   605                           ; 1 bytes @ 0x2
   606                           
   607  0072                     UART_Write_Text@i:	
   608                           ; 1 bytes @ 0x2
   609                           
   610  0072                     ___lwdiv@dividend:	
   611                           ; 2 bytes @ 0x2
   612                           
   613                           
   614                           ; 2 bytes @ 0x2
   615  0072                     	ds	1
   616  0073                     Lcd_Cmd@a:	
   617  0073                     Lcd_Write_Char@y:	
   618                           ; 1 bytes @ 0x3
   619                           
   620  0073                     ___bmul@multiplier:	
   621                           ; 1 bytes @ 0x3
   622                           
   623  0073                     strcat@cp:	
   624                           ; 1 bytes @ 0x3
   625                           
   626                           
   627                           ; 1 bytes @ 0x3
   628  0073                     	ds	1
   629  0074                     ??_Lcd_Clear:	
   630  0074                     ?_Lcd_Set_Cursor:	
   631                           ; 1 bytes @ 0x4
   632                           
   633  0074                     ??_Lcd_Init:	
   634                           ; 1 bytes @ 0x4
   635                           
   636  0074                     ??___lwdiv:	
   637                           ; 1 bytes @ 0x4
   638                           
   639  0074                     Lcd_Set_Cursor@b:	
   640                           ; 1 bytes @ 0x4
   641                           
   642  0074                     Lcd_Write_Char@a:	
   643                           ; 1 bytes @ 0x4
   644                           
   645  0074                     UART_Write_Text@text:	
   646                           ; 1 bytes @ 0x4
   647                           
   648  0074                     I2C_Master_Read@temp:	
   649                           ; 1 bytes @ 0x4
   650                           
   651  0074                     ___lldiv@dividend:	
   652                           ; 2 bytes @ 0x4
   653                           
   654  0074                     ___aldiv@dividend:	
   655                           ; 4 bytes @ 0x4
   656                           
   657                           
   658                           ; 4 bytes @ 0x4
   659  0074                     	ds	1
   660  0075                     ??_Lcd_Set_Cursor:	
   661  0075                     ?_Lcd_Write_String:	
   662                           ; 1 bytes @ 0x5
   663                           
   664  0075                     strcmp@r:	
   665                           ; 1 bytes @ 0x5
   666                           
   667  0075                     Lcd_Write_String@a:	
   668                           ; 1 bytes @ 0x5
   669                           
   670  0075                     ___lwdiv@quotient:	
   671                           ; 2 bytes @ 0x5
   672                           
   673                           
   674                           ; 2 bytes @ 0x5
   675  0075                     	ds	1
   676  0076                     ??_get_hall:	
   677  0076                     ??_get_tripwire:	
   678                           ; 1 bytes @ 0x6
   679                           
   680  0076                     ??_get_PIR:	
   681                           ; 1 bytes @ 0x6
   682                           
   683  0076                     ??_get_IR:	
   684                           ; 1 bytes @ 0x6
   685                           
   686  0076                     ??_get_time:	
   687                           ; 1 bytes @ 0x6
   688                           
   689  0076                     strcmp@s1:	
   690                           ; 1 bytes @ 0x6
   691                           
   692                           
   693                           ; 1 bytes @ 0x6
   694  0076                     	ds	1
   695  0077                     ??_Lcd_Write_String:	
   696  0077                     Lcd_Set_Cursor@a:	
   697                           ; 1 bytes @ 0x7
   698                           
   699  0077                     get_hall@key:	
   700                           ; 1 bytes @ 0x7
   701                           
   702  0077                     get_tripwire@trip:	
   703                           ; 1 bytes @ 0x7
   704                           
   705  0077                     get_PIR@PIR:	
   706                           ; 1 bytes @ 0x7
   707                           
   708  0077                     get_IR@IR:	
   709                           ; 1 bytes @ 0x7
   710                           
   711  0077                     ___lwdiv@counter:	
   712                           ; 1 bytes @ 0x7
   713                           
   714                           
   715                           ; 1 bytes @ 0x7
   716  0077                     	ds	1
   717  0078                     ??___lldiv:	
   718  0078                     ??___aldiv:	
   719                           ; 1 bytes @ 0x8
   720                           
   721  0078                     ?___lwmod:	
   722                           ; 1 bytes @ 0x8
   723                           
   724  0078                     Lcd_Set_Cursor@z:	
   725                           ; 2 bytes @ 0x8
   726                           
   727  0078                     ___lwmod@divisor:	
   728                           ; 1 bytes @ 0x8
   729                           
   730                           
   731                           ; 2 bytes @ 0x8
   732  0078                     	ds	1
   733  0079                     Lcd_Set_Cursor@y:	
   734  0079                     UART_Init@x:	
   735                           ; 1 bytes @ 0x9
   736                           
   737  0079                     ___lldiv@quotient:	
   738                           ; 2 bytes @ 0x9
   739                           
   740                           
   741                           ; 4 bytes @ 0x9
   742  0079                     	ds	1
   743  007A                     Lcd_Set_Cursor@temp:	
   744  007A                     Lcd_Write_String@i:	
   745                           ; 1 bytes @ 0xA
   746                           
   747  007A                     ___lwmod@dividend:	
   748                           ; 2 bytes @ 0xA
   749                           
   750                           
   751                           ; 2 bytes @ 0xA
   752  007A                     	ds	2
   753  007C                     ??___lwmod:	
   754                           
   755                           ; 1 bytes @ 0xC
   756  007C                     	ds	1
   757  007D                     ___lldiv@counter:	
   758  007D                     ___lwmod@counter:	
   759                           ; 1 bytes @ 0xD
   760                           
   761                           
   762                           ; 1 bytes @ 0xD
   763  007D                     	ds	1
   764  007E                     ??_setup:	
   765                           
   766                           	psect	cstackBANK0
   767  0020                     __pcstackBANK0:	
   768                           ; 1 bytes @ 0xE
   769                           
   770  0020                     ?_I2C_Master_Init:	
   771  0020                     ?_sprintf:	
   772                           ; 1 bytes @ 0x0
   773                           
   774  0020                     sprintf@f:	
   775                           ; 2 bytes @ 0x0
   776                           
   777  0020                     ___aldiv@counter:	
   778                           ; 1 bytes @ 0x0
   779                           
   780  0020                     I2C_Master_Init@c:	
   781                           ; 1 bytes @ 0x0
   782                           
   783  0020                     get_time@string_time:	
   784                           ; 4 bytes @ 0x0
   785                           
   786                           
   787                           ; 6 bytes @ 0x0
   788  0020                     	ds	1
   789  0021                     ___aldiv@sign:	
   790                           
   791                           ; 1 bytes @ 0x1
   792  0021                     	ds	1
   793  0022                     ___aldiv@quotient:	
   794                           
   795                           ; 4 bytes @ 0x2
   796  0022                     	ds	1
   797  0023                     ??_sprintf:	
   798                           
   799                           ; 1 bytes @ 0x3
   800  0023                     	ds	1
   801  0024                     ??_I2C_Master_Init:	
   802                           
   803                           ; 1 bytes @ 0x4
   804  0024                     	ds	2
   805  0026                     ?_UART_Init:	
   806  0026                     get_time@hour:	
   807                           ; 1 bytes @ 0x6
   808                           
   809  0026                     sprintf@ap:	
   810                           ; 1 bytes @ 0x6
   811                           
   812  0026                     UART_Init@baudrate:	
   813                           ; 1 bytes @ 0x6
   814                           
   815                           
   816                           ; 4 bytes @ 0x6
   817  0026                     	ds	1
   818  0027                     get_time@min:	
   819  0027                     sprintf@flag:	
   820                           ; 1 bytes @ 0x7
   821                           
   822                           
   823                           ; 1 bytes @ 0x7
   824  0027                     	ds	1
   825  0028                     sprintf@prec:	
   826                           
   827                           ; 1 bytes @ 0x8
   828  0028                     	ds	1
   829  0029                     sprintf@val:	
   830                           
   831                           ; 2 bytes @ 0x9
   832  0029                     	ds	1
   833  002A                     ??_UART_Init:	
   834                           
   835                           ; 1 bytes @ 0xA
   836  002A                     	ds	1
   837  002B                     sprintf@sp:	
   838                           
   839                           ; 1 bytes @ 0xB
   840  002B                     	ds	1
   841  002C                     sprintf@c:	
   842                           
   843                           ; 1 bytes @ 0xC
   844  002C                     	ds	1
   845  002D                     ??_get_temp:	
   846                           
   847                           ; 1 bytes @ 0xD
   848  002D                     	ds	3
   849  0030                     get_temp@temperature:	
   850                           
   851                           ; 6 bytes @ 0x10
   852  0030                     	ds	6
   853  0036                     get_temp@decimal:	
   854                           
   855                           ; 3 bytes @ 0x16
   856  0036                     	ds	3
   857  0039                     get_temp@tempMSB:	
   858                           
   859                           ; 1 bytes @ 0x19
   860  0039                     	ds	1
   861  003A                     get_temp@tempLSB:	
   862                           
   863                           ; 1 bytes @ 0x1A
   864  003A                     	ds	1
   865  003B                     ??_main:	
   866                           
   867                           ; 1 bytes @ 0x1B
   868  003B                     	ds	1
   869                           
   870                           	psect	maintext
   871  069C                     __pmaintext:	
   872 ;;
   873 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   874 ;;
   875 ;; *************** function _main *****************
   876 ;; Defined at:
   877 ;;		line 52 in file "mainMaster.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;		None
   880 ;; Auto vars:     Size  Location     Type
   881 ;;		None
   882 ;; Return value:  Size  Location     Type
   883 ;;                  1    wreg      void 
   884 ;; Registers used:
   885 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   886 ;; Tracked objects:
   887 ;;		On entry : B00/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   891 ;;      Params:         0       0       0       0       0
   892 ;;      Locals:         0       0       0       0       0
   893 ;;      Temps:          0       1       0       0       0
   894 ;;      Totals:         0       1       0       0       0
   895 ;;Total ram usage:        1 bytes
   896 ;; Hardware stack levels required when called:    4
   897 ;; This function calls:
   898 ;;		_Lcd_Clear
   899 ;;		_Lcd_Set_Cursor
   900 ;;		_Lcd_Write_Char
   901 ;;		_Lcd_Write_String
   902 ;;		_UART_Write
   903 ;;		_UART_Write_Text
   904 ;;		_get_IR
   905 ;;		_get_PIR
   906 ;;		_get_hall
   907 ;;		_get_temp
   908 ;;		_get_time
   909 ;;		_get_tripwire
   910 ;;		_setup
   911 ;;		_strcmp
   912 ;; This function is called by:
   913 ;;		Startup code after reset
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           
   918                           ;psect for function _main
   919  069C                     _main:	
   920                           
   921                           ;mainMaster.c: 53:     setup();
   922                           
   923                           ;incstack = 0
   924                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   925  069C  120A  118A  2140  120A  118A  	fcall	_setup
   926                           
   927                           ;mainMaster.c: 54:     state = 0;
   928  06A1  1283               	bcf	3,5	;RP0=0, select bank0
   929  06A2  1303               	bcf	3,6	;RP1=0, select bank0
   930  06A3  01BC               	clrf	_state
   931                           
   932                           ;mainMaster.c: 55:     Lcd_Clear();
   933  06A4  120A  118A  2068  120A  118A  	fcall	_Lcd_Clear
   934  06A9                     l2093:	
   935                           
   936                           ;mainMaster.c: 59:         temp = get_temp();
   937  06A9  120A  118A  2451  120A  118A  	fcall	_get_temp
   938  06AE  1283               	bcf	3,5	;RP0=0, select bank0
   939  06AF  1303               	bcf	3,6	;RP1=0, select bank0
   940  06B0  00BB               	movwf	??_main
   941  06B1  083B               	movf	??_main,w
   942  06B2  00C1               	movwf	_temp
   943                           
   944                           ;mainMaster.c: 60:         door = get_hall();
   945  06B3  120A  158A  2774  120A  118A  	fcall	_get_hall
   946  06B8  1283               	bcf	3,5	;RP0=0, select bank0
   947  06B9  1303               	bcf	3,6	;RP1=0, select bank0
   948  06BA  00BB               	movwf	??_main
   949  06BB  083B               	movf	??_main,w
   950  06BC  00C0               	movwf	_door
   951                           
   952                           ;mainMaster.c: 61:         trip = get_tripwire();
   953  06BD  120A  158A  2793  120A  118A  	fcall	_get_tripwire
   954  06C2  1283               	bcf	3,5	;RP0=0, select bank0
   955  06C3  1303               	bcf	3,6	;RP1=0, select bank0
   956  06C4  00BB               	movwf	??_main
   957  06C5  083B               	movf	??_main,w
   958  06C6  00BF               	movwf	_trip
   959                           
   960                           ;mainMaster.c: 62:         PIR = get_PIR();
   961  06C7  120A  158A  2755  120A  118A  	fcall	_get_PIR
   962  06CC  1283               	bcf	3,5	;RP0=0, select bank0
   963  06CD  1303               	bcf	3,6	;RP1=0, select bank0
   964  06CE  00BB               	movwf	??_main
   965  06CF  083B               	movf	??_main,w
   966  06D0  00BE               	movwf	_PIR
   967                           
   968                           ;mainMaster.c: 63:         IR = get_IR();
   969  06D1  120A  158A  2736  120A  118A  	fcall	_get_IR
   970  06D6  1283               	bcf	3,5	;RP0=0, select bank0
   971  06D7  1303               	bcf	3,6	;RP1=0, select bank0
   972  06D8  00BB               	movwf	??_main
   973  06D9  083B               	movf	??_main,w
   974  06DA  00BD               	movwf	_IR
   975                           
   976                           ;mainMaster.c: 64:         time = get_time();
   977  06DB  120A  118A  234C  120A  118A  	fcall	_get_time
   978  06E0  1283               	bcf	3,5	;RP0=0, select bank0
   979  06E1  1303               	bcf	3,6	;RP1=0, select bank0
   980  06E2  00BB               	movwf	??_main
   981  06E3  083B               	movf	??_main,w
   982  06E4  00C2               	movwf	_time
   983                           
   984                           ;mainMaster.c: 66:         UART_Write_Text(temp);
   985  06E5  0841               	movf	_temp,w
   986  06E6  120A  158A  2718  120A  118A  	fcall	_UART_Write_Text
   987                           
   988                           ;mainMaster.c: 67:         UART_Write_Text(time);
   989  06EB  1283               	bcf	3,5	;RP0=0, select bank0
   990  06EC  1303               	bcf	3,6	;RP1=0, select bank0
   991  06ED  0842               	movf	_time,w
   992  06EE  120A  158A  2718  120A  118A  	fcall	_UART_Write_Text
   993                           
   994                           ;mainMaster.c: 68:         UART_Write(door);
   995  06F3  1283               	bcf	3,5	;RP0=0, select bank0
   996  06F4  1303               	bcf	3,6	;RP1=0, select bank0
   997  06F5  0840               	movf	_door,w
   998  06F6  120A  158A  26C9  120A  118A  	fcall	_UART_Write
   999                           
  1000                           ;mainMaster.c: 69:         UART_Write(trip);
  1001  06FB  1283               	bcf	3,5	;RP0=0, select bank0
  1002  06FC  1303               	bcf	3,6	;RP1=0, select bank0
  1003  06FD  083F               	movf	_trip,w
  1004  06FE  120A  158A  26C9  120A  118A  	fcall	_UART_Write
  1005                           
  1006                           ;mainMaster.c: 70:         UART_Write(PIR);
  1007  0703  1283               	bcf	3,5	;RP0=0, select bank0
  1008  0704  1303               	bcf	3,6	;RP1=0, select bank0
  1009  0705  083E               	movf	_PIR,w
  1010  0706  120A  158A  26C9  120A  118A  	fcall	_UART_Write
  1011                           
  1012                           ;mainMaster.c: 71:         UART_Write(IR);
  1013  070B  1283               	bcf	3,5	;RP0=0, select bank0
  1014  070C  1303               	bcf	3,6	;RP1=0, select bank0
  1015  070D  083D               	movf	_IR,w
  1016  070E  120A  158A  26C9  120A  118A  	fcall	_UART_Write
  1017                           
  1018                           ;mainMaster.c: 74:         if (strcmp(temp,"23.50") > 0){
  1019  0713  3045               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1020  0714  1283               	bcf	3,5	;RP0=0, select bank0
  1021  0715  1303               	bcf	3,6	;RP1=0, select bank0
  1022  0716  00BB               	movwf	??_main
  1023  0717  083B               	movf	??_main,w
  1024  0718  00F0               	movwf	strcmp@s2
  1025  0719  0841               	movf	_temp,w
  1026  071A  120A  158A  27D6  120A  118A  	fcall	_strcmp
  1027  071F  0871               	movf	?_strcmp+1,w
  1028  0720  3A80               	xorlw	128
  1029  0721  00FF               	movwf	127
  1030  0722  3080               	movlw	128
  1031  0723  027F               	subwf	127,w
  1032  0724  1D03               	skipz
  1033  0725  2F28               	goto	u1605
  1034  0726  3001               	movlw	1
  1035  0727  0270               	subwf	?_strcmp,w
  1036  0728                     u1605:	
  1037  0728  1C03               	skipc
  1038  0729  2F2E               	goto	l235
  1039                           
  1040                           ;mainMaster.c: 75:             PORTAbits.RA0 = 1;
  1041  072A  1283               	bcf	3,5	;RP0=0, select bank0
  1042  072B  1303               	bcf	3,6	;RP1=0, select bank0
  1043  072C  1405               	bsf	5,0	;volatile
  1044                           
  1045                           ;mainMaster.c: 76:         } else {
  1046  072D  2F31               	goto	l236
  1047  072E                     l235:	
  1048                           
  1049                           ;mainMaster.c: 77:             PORTAbits.RA0 = 0;
  1050  072E  1283               	bcf	3,5	;RP0=0, select bank0
  1051  072F  1303               	bcf	3,6	;RP1=0, select bank0
  1052  0730  1005               	bcf	5,0	;volatile
  1053  0731                     l236:	
  1054                           ;mainMaster.c: 78:         }
  1055                           
  1056                           
  1057                           ;mainMaster.c: 81:         if(PORTCbits.RC0 == 1){
  1058  0731  1C07               	btfss	7,0	;volatile
  1059  0732  2F44               	goto	l2129
  1060                           
  1061                           ;mainMaster.c: 82:             state++;
  1062  0733  3001               	movlw	1
  1063  0734  00BB               	movwf	??_main
  1064  0735  083B               	movf	??_main,w
  1065  0736  07BC               	addwf	_state,f
  1066                           
  1067                           ;mainMaster.c: 83:             if (state > 2){
  1068  0737  3003               	movlw	3
  1069  0738  023C               	subwf	_state,w
  1070  0739  1803               	btfsc	3,0
  1071                           
  1072                           ;mainMaster.c: 84:                 state = 0;
  1073  073A  01BC               	clrf	_state
  1074                           
  1075                           ;mainMaster.c: 86:             Lcd_Clear();
  1076  073B  120A  118A  2068  120A  118A  	fcall	_Lcd_Clear
  1077  0740                     l239:	
  1078                           ;mainMaster.c: 87:             while(PORTCbits.RC0 == 1);
  1079                           
  1080  0740  1283               	bcf	3,5	;RP0=0, select bank0
  1081  0741  1303               	bcf	3,6	;RP1=0, select bank0
  1082  0742  1807               	btfsc	7,0	;volatile
  1083  0743  2F40               	goto	l239
  1084  0744                     l2129:	
  1085                           
  1086                           ;mainMaster.c: 91:         if (state == 0){
  1087  0744  083C               	movf	_state,w
  1088  0745  1D03               	btfss	3,2
  1089  0746  2F7A               	goto	l2141
  1090                           
  1091                           ;mainMaster.c: 93:             Lcd_Set_Cursor(1,1);
  1092  0747  01F4               	clrf	Lcd_Set_Cursor@b
  1093  0748  0AF4               	incf	Lcd_Set_Cursor@b,f
  1094  0749  3001               	movlw	1
  1095  074A  120A  118A  21F4  120A  118A  	fcall	_Lcd_Set_Cursor
  1096                           
  1097                           ;mainMaster.c: 94:             Lcd_Write_String(time);
  1098  074F  1283               	bcf	3,5	;RP0=0, select bank0
  1099  0750  1303               	bcf	3,6	;RP1=0, select bank0
  1100  0751  0842               	movf	_time,w
  1101  0752  00F5               	movwf	Lcd_Write_String@a
  1102  0753  3000               	movlw	0
  1103  0754  00F6               	movwf	Lcd_Write_String@a+1
  1104  0755  120A  118A  21B7  120A  118A  	fcall	_Lcd_Write_String
  1105                           
  1106                           ;mainMaster.c: 96:             Lcd_Set_Cursor(2,1);
  1107  075A  01F4               	clrf	Lcd_Set_Cursor@b
  1108  075B  0AF4               	incf	Lcd_Set_Cursor@b,f
  1109  075C  3002               	movlw	2
  1110  075D  120A  118A  21F4  120A  118A  	fcall	_Lcd_Set_Cursor
  1111                           
  1112                           ;mainMaster.c: 97:             Lcd_Write_String(temp);
  1113  0762  1283               	bcf	3,5	;RP0=0, select bank0
  1114  0763  1303               	bcf	3,6	;RP1=0, select bank0
  1115  0764  0841               	movf	_temp,w
  1116  0765  00F5               	movwf	Lcd_Write_String@a
  1117  0766  3000               	movlw	0
  1118  0767  00F6               	movwf	Lcd_Write_String@a+1
  1119  0768  120A  118A  21B7  120A  118A  	fcall	_Lcd_Write_String
  1120                           
  1121                           ;mainMaster.c: 98:             Lcd_Write_Char(223);
  1122  076D  30DF               	movlw	223
  1123  076E  120A  118A  2107  120A  118A  	fcall	_Lcd_Write_Char
  1124                           
  1125                           ;mainMaster.c: 99:             Lcd_Write_Char('C');
  1126  0773  3043               	movlw	67
  1127  0774  120A  118A  2107  120A  118A  	fcall	_Lcd_Write_Char
  1128                           
  1129                           ;mainMaster.c: 101:         } else if (state == 1){
  1130  0779  2EA9               	goto	l2093
  1131  077A                     l2141:	
  1132  077A  033C               	decf	_state,w
  1133  077B  1D03               	btfss	3,2
  1134  077C  2FB6               	goto	l2159
  1135                           
  1136                           ;mainMaster.c: 103:             Lcd_Set_Cursor(1,1);
  1137  077D  01F4               	clrf	Lcd_Set_Cursor@b
  1138  077E  0AF4               	incf	Lcd_Set_Cursor@b,f
  1139  077F  3001               	movlw	1
  1140  0780  120A  118A  21F4  120A  118A  	fcall	_Lcd_Set_Cursor
  1141                           
  1142                           ;mainMaster.c: 104:             if (door == 1){
  1143  0785  1283               	bcf	3,5	;RP0=0, select bank0
  1144  0786  1303               	bcf	3,6	;RP1=0, select bank0
  1145  0787  0340               	decf	_door,w
  1146  0788  1D03               	btfss	3,2
  1147  0789  2F8C               	goto	l2149
  1148                           
  1149                           ;mainMaster.c: 105:                 Lcd_Write_String("Door OPEN  ");
  1150  078A  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1151  078B  2F8D               	goto	L1
  1152  078C                     l2149:	
  1153                           ;mainMaster.c: 106:             } else {
  1154                           
  1155                           
  1156                           ;mainMaster.c: 107:                 Lcd_Write_String("Door CLOSED");
  1157  078C  3017               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1158  078D                     L1:	
  1159  078D  00F5               	movwf	Lcd_Write_String@a
  1160  078E  3080               	movlw	128
  1161  078F  00F6               	movwf	Lcd_Write_String@a+1
  1162  0790  120A  118A  21B7  120A  118A  	fcall	_Lcd_Write_String
  1163                           
  1164                           ;mainMaster.c: 110:             Lcd_Set_Cursor(2,1);
  1165  0795  01F4               	clrf	Lcd_Set_Cursor@b
  1166  0796  0AF4               	incf	Lcd_Set_Cursor@b,f
  1167  0797  3002               	movlw	2
  1168  0798  120A  118A  21F4  120A  118A  	fcall	_Lcd_Set_Cursor
  1169                           
  1170                           ;mainMaster.c: 111:             if (trip == 1){
  1171  079D  1283               	bcf	3,5	;RP0=0, select bank0
  1172  079E  1303               	bcf	3,6	;RP1=0, select bank0
  1173  079F  033F               	decf	_trip,w
  1174  07A0  1D03               	btfss	3,2
  1175  07A1  2FAC               	goto	l2157
  1176                           
  1177                           ;mainMaster.c: 112:                 Lcd_Write_String("Trip ON ");
  1178  07A2  3023               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1179  07A3  00F5               	movwf	Lcd_Write_String@a
  1180  07A4  3080               	movlw	128
  1181  07A5  00F6               	movwf	Lcd_Write_String@a+1
  1182  07A6  120A  118A  21B7  120A  118A  	fcall	_Lcd_Write_String
  1183                           
  1184                           ;mainMaster.c: 113:             } else {
  1185  07AB  2EA9               	goto	l2093
  1186  07AC                     l2157:	
  1187                           
  1188                           ;mainMaster.c: 114:                 Lcd_Write_String("Trip OFF");
  1189  07AC  302C               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1190  07AD  00F5               	movwf	Lcd_Write_String@a
  1191  07AE  3080               	movlw	128
  1192  07AF  00F6               	movwf	Lcd_Write_String@a+1
  1193  07B0  120A  118A  21B7  120A  118A  	fcall	_Lcd_Write_String
  1194  07B5  2EA9               	goto	l2093
  1195  07B6                     l2159:	
  1196  07B6  3002               	movlw	2
  1197  07B7  063C               	xorwf	_state,w
  1198  07B8  1D03               	btfss	3,2
  1199  07B9  2EA9               	goto	l2093
  1200                           
  1201                           ;mainMaster.c: 119:             Lcd_Set_Cursor(1,1);
  1202  07BA  01F4               	clrf	Lcd_Set_Cursor@b
  1203  07BB  0AF4               	incf	Lcd_Set_Cursor@b,f
  1204  07BC  3001               	movlw	1
  1205  07BD  120A  118A  21F4  120A  118A  	fcall	_Lcd_Set_Cursor
  1206                           
  1207                           ;mainMaster.c: 120:             if (PIR == 1){
  1208  07C2  1283               	bcf	3,5	;RP0=0, select bank0
  1209  07C3  1303               	bcf	3,6	;RP1=0, select bank0
  1210  07C4  033E               	decf	_PIR,w
  1211  07C5  1D03               	btfss	3,2
  1212  07C6  2FC9               	goto	l2167
  1213                           
  1214                           ;mainMaster.c: 121:                 Lcd_Write_String("PIR ON ");
  1215  07C7  3035               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1216  07C8  2FCA               	goto	L2
  1217  07C9                     l2167:	
  1218                           ;mainMaster.c: 122:             } else {
  1219                           
  1220                           
  1221                           ;mainMaster.c: 123:                 Lcd_Write_String("PIR OFF");
  1222  07C9  303D               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1223  07CA                     L2:	
  1224  07CA  00F5               	movwf	Lcd_Write_String@a
  1225  07CB  3080               	movlw	128
  1226  07CC  00F6               	movwf	Lcd_Write_String@a+1
  1227  07CD  120A  118A  21B7  120A  118A  	fcall	_Lcd_Write_String
  1228                           
  1229                           ;mainMaster.c: 126:             Lcd_Set_Cursor(2,1);
  1230  07D2  01F4               	clrf	Lcd_Set_Cursor@b
  1231  07D3  0AF4               	incf	Lcd_Set_Cursor@b,f
  1232  07D4  3002               	movlw	2
  1233  07D5  120A  118A  21F4  120A  118A  	fcall	_Lcd_Set_Cursor
  1234                           
  1235                           ;mainMaster.c: 127:             if (IR == 1){
  1236  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  1237  07DB  1303               	bcf	3,6	;RP1=0, select bank0
  1238  07DC  033D               	decf	_IR,w
  1239  07DD  1D03               	btfss	3,2
  1240  07DE  2FE9               	goto	l2175
  1241                           
  1242                           ;mainMaster.c: 128:                 Lcd_Write_String("IR ON ");
  1243  07DF  3036               	movlw	(low (((STR_6+1)-__stringbase)| (0+32768)))& (0+255)
  1244  07E0  00F5               	movwf	Lcd_Write_String@a
  1245  07E1  3080               	movlw	128
  1246  07E2  00F6               	movwf	Lcd_Write_String@a+1
  1247  07E3  120A  118A  21B7  120A  118A  	fcall	_Lcd_Write_String
  1248                           
  1249                           ;mainMaster.c: 129:             } else {
  1250  07E8  2EA9               	goto	l2093
  1251  07E9                     l2175:	
  1252                           
  1253                           ;mainMaster.c: 130:                 Lcd_Write_String("IR OFF");
  1254  07E9  303E               	movlw	(low (((STR_7+1)-__stringbase)| (0+32768)))& (0+255)
  1255  07EA  00F5               	movwf	Lcd_Write_String@a
  1256  07EB  3080               	movlw	128
  1257  07EC  00F6               	movwf	Lcd_Write_String@a+1
  1258  07ED  120A  118A  21B7  120A  118A  	fcall	_Lcd_Write_String
  1259  07F2  2EA9               	goto	l2093
  1260  07F3                     __end_of_main:	
  1261                           
  1262                           	psect	text1
  1263  0FD6                     __ptext1:	
  1264 ;; *************** function _strcmp *****************
  1265 ;; Defined at:
  1266 ;;		line 33 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;  s1              1    wreg     PTR const unsigned char 
  1269 ;;		 -> NULL(0), get_temp@temperature(6), 
  1270 ;;  s2              1    0[COMMON] PTR const unsigned char 
  1271 ;;		 -> STR_1(6), 
  1272 ;; Auto vars:     Size  Location     Type
  1273 ;;  s1              1    6[COMMON] PTR const unsigned char 
  1274 ;;		 -> NULL(0), get_temp@temperature(6), 
  1275 ;;  r               1    5[COMMON] char 
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  2    0[COMMON] int 
  1278 ;; Registers used:
  1279 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1280 ;; Tracked objects:
  1281 ;;		On entry : 0/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1285 ;;      Params:         2       0       0       0       0
  1286 ;;      Locals:         2       0       0       0       0
  1287 ;;      Temps:          3       0       0       0       0
  1288 ;;      Totals:         7       0       0       0       0
  1289 ;;Total ram usage:        7 bytes
  1290 ;; Hardware stack levels used:    2
  1291 ;; This function calls:
  1292 ;;		Nothing
  1293 ;; This function is called by:
  1294 ;;		_main
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           
  1299                           ;psect for function _strcmp
  1300  0FD6                     _strcmp:	
  1301                           
  1302                           ;incstack = 0
  1303                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  1304                           ;strcmp@s1 stored from wreg
  1305  0FD6  00F6               	movwf	strcmp@s1
  1306  0FD7  2FE5               	goto	l2075
  1307  0FD8                     l2077:	
  1308  0FD8  0876               	movf	strcmp@s1,w
  1309  0FD9  0084               	movwf	4
  1310  0FDA  0800               	movf	0,w
  1311  0FDB  1903               	btfsc	3,2
  1312  0FDC  2FFA               	goto	l2079
  1313  0FDD  3001               	movlw	1
  1314  0FDE  00F2               	movwf	??_strcmp
  1315  0FDF  0872               	movf	??_strcmp,w
  1316  0FE0  07F6               	addwf	strcmp@s1,f
  1317  0FE1  3001               	movlw	1
  1318  0FE2  00F2               	movwf	??_strcmp
  1319  0FE3  0872               	movf	??_strcmp,w
  1320  0FE4  07F0               	addwf	strcmp@s2,f
  1321  0FE5                     l2075:	
  1322  0FE5  0870               	movf	strcmp@s2,w
  1323  0FE6  0084               	movwf	4
  1324  0FE7  120A  118A  200D  120A  158A  	fcall	stringdir
  1325  0FEC  00F2               	movwf	??_strcmp
  1326  0FED  0876               	movf	strcmp@s1,w
  1327  0FEE  0084               	movwf	4
  1328  0FEF  1383               	bcf	3,7	;select IRP bank0
  1329  0FF0  0800               	movf	0,w
  1330  0FF1  00F3               	movwf	??_strcmp+1
  1331  0FF2  0872               	movf	??_strcmp,w
  1332  0FF3  0273               	subwf	??_strcmp+1,w
  1333  0FF4  00F4               	movwf	??_strcmp+2
  1334  0FF5  0874               	movf	??_strcmp+2,w
  1335  0FF6  00F5               	movwf	strcmp@r
  1336  0FF7  0875               	movf	strcmp@r,w
  1337  0FF8  1903               	btfsc	3,2
  1338  0FF9  2FD8               	goto	l2077
  1339  0FFA                     l2079:	
  1340  0FFA  0875               	movf	strcmp@r,w
  1341  0FFB  00F0               	movwf	?_strcmp
  1342  0FFC  01F1               	clrf	?_strcmp+1
  1343  0FFD  1BF0               	btfsc	?_strcmp,7
  1344  0FFE  03F1               	decf	?_strcmp+1,f
  1345  0FFF  0008               	return
  1346  1000                     __end_of_strcmp:	
  1347                           
  1348                           	psect	text2
  1349  0140                     __ptext2:	
  1350 ;; *************** function _setup *****************
  1351 ;; Defined at:
  1352 ;;		line 138 in file "mainMaster.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;		None
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;		None
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  1    wreg      void 
  1359 ;; Registers used:
  1360 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1366 ;;      Params:         0       0       0       0       0
  1367 ;;      Locals:         0       0       0       0       0
  1368 ;;      Temps:          0       0       0       0       0
  1369 ;;      Totals:         0       0       0       0       0
  1370 ;;Total ram usage:        0 bytes
  1371 ;; Hardware stack levels used:    1
  1372 ;; Hardware stack levels required when called:    3
  1373 ;; This function calls:
  1374 ;;		_I2C_Master_Init
  1375 ;;		_Lcd_Init
  1376 ;;		_UART_Init
  1377 ;;		_initOscilador
  1378 ;; This function is called by:
  1379 ;;		_main
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           
  1384                           ;psect for function _setup
  1385  0140                     _setup:	
  1386                           
  1387                           ;mainMaster.c: 139:     initOscilador(7);
  1388                           
  1389                           ;incstack = 0
  1390                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1391  0140  3007               	movlw	7
  1392  0141  120A  118A  223E  120A  118A  	fcall	_initOscilador
  1393                           
  1394                           ;mainMaster.c: 140:     ANSELH = 0;
  1395  0146  1683               	bsf	3,5	;RP0=1, select bank3
  1396  0147  1703               	bsf	3,6	;RP1=1, select bank3
  1397  0148  0189               	clrf	9	;volatile
  1398                           
  1399                           ;mainMaster.c: 141:     ANSEL = 0;
  1400  0149  0188               	clrf	8	;volatile
  1401                           
  1402                           ;mainMaster.c: 142:     TRISB = 0;
  1403  014A  1683               	bsf	3,5	;RP0=1, select bank1
  1404  014B  1303               	bcf	3,6	;RP1=0, select bank1
  1405  014C  0186               	clrf	6	;volatile
  1406                           
  1407                           ;mainMaster.c: 143:     TRISA = 0;
  1408  014D  0185               	clrf	5	;volatile
  1409                           
  1410                           ;mainMaster.c: 144:     PORTB = 0;
  1411  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1412  014F  1303               	bcf	3,6	;RP1=0, select bank0
  1413  0150  0186               	clrf	6	;volatile
  1414                           
  1415                           ;mainMaster.c: 145:     PORTA = 0;
  1416  0151  0185               	clrf	5	;volatile
  1417                           
  1418                           ;mainMaster.c: 146:     TRISC = 0x01;
  1419  0152  3001               	movlw	1
  1420  0153  1683               	bsf	3,5	;RP0=1, select bank1
  1421  0154  1303               	bcf	3,6	;RP1=0, select bank1
  1422  0155  0087               	movwf	7	;volatile
  1423                           
  1424                           ;mainMaster.c: 147:     PORTC = 0;
  1425  0156  1283               	bcf	3,5	;RP0=0, select bank0
  1426  0157  1303               	bcf	3,6	;RP1=0, select bank0
  1427  0158  0187               	clrf	7	;volatile
  1428                           
  1429                           ;mainMaster.c: 148:     Lcd_Init();
  1430  0159  120A  118A  2293  120A  118A  	fcall	_Lcd_Init
  1431                           
  1432                           ;mainMaster.c: 149:     UART_Init(9600);
  1433  015E  3000               	movlw	0
  1434  015F  1283               	bcf	3,5	;RP0=0, select bank0
  1435  0160  1303               	bcf	3,6	;RP1=0, select bank0
  1436  0161  00A9               	movwf	UART_Init@baudrate+3
  1437  0162  3000               	movlw	0
  1438  0163  00A8               	movwf	UART_Init@baudrate+2
  1439  0164  3025               	movlw	37
  1440  0165  00A7               	movwf	UART_Init@baudrate+1
  1441  0166  3080               	movlw	128
  1442  0167  00A6               	movwf	UART_Init@baudrate
  1443  0168  120A  118A  24EE  120A  118A  	fcall	_UART_Init
  1444                           
  1445                           ;mainMaster.c: 150:     I2C_Master_Init(100000);
  1446  016D  3000               	movlw	0
  1447  016E  1283               	bcf	3,5	;RP0=0, select bank0
  1448  016F  1303               	bcf	3,6	;RP1=0, select bank0
  1449  0170  00A3               	movwf	I2C_Master_Init@c+3
  1450  0171  3001               	movlw	1
  1451  0172  00A2               	movwf	I2C_Master_Init@c+2
  1452  0173  3086               	movlw	134
  1453  0174  00A1               	movwf	I2C_Master_Init@c+1
  1454  0175  30A0               	movlw	160
  1455  0176  00A0               	movwf	I2C_Master_Init@c
  1456  0177  120A  118A  20D1   	fcall	_I2C_Master_Init
  1457  017A  0008               	return
  1458  017B                     __end_of_setup:	
  1459                           
  1460                           	psect	text3
  1461  023E                     __ptext3:	
  1462 ;; *************** function _initOscilador *****************
  1463 ;; Defined at:
  1464 ;;		line 11 in file "./Oscilador.h"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;  option          1    wreg     unsigned char 
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;  option          1    2[COMMON] unsigned char 
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  1    wreg      void 
  1471 ;; Registers used:
  1472 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1478 ;;      Params:         0       0       0       0       0
  1479 ;;      Locals:         1       0       0       0       0
  1480 ;;      Temps:          2       0       0       0       0
  1481 ;;      Totals:         3       0       0       0       0
  1482 ;;Total ram usage:        3 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; This function calls:
  1485 ;;		Nothing
  1486 ;; This function is called by:
  1487 ;;		_setup
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           
  1492                           ;psect for function _initOscilador
  1493  023E                     _initOscilador:	
  1494                           
  1495                           ;incstack = 0
  1496                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  1497                           ;initOscilador@option stored from wreg
  1498  023E  00F2               	movwf	initOscilador@option
  1499                           
  1500                           ;./Oscilador.h: 13: 
  1501  023F  2A6F               	goto	l1821
  1502  0240                     l1801:	
  1503                           
  1504                           ;./Oscilador.h: 16:         case 3:
  1505  0240  308F               	movlw	-113
  1506  0241  1683               	bsf	3,5	;RP0=1, select bank1
  1507  0242  1303               	bcf	3,6	;RP1=0, select bank1
  1508  0243  058F               	andwf	15,f	;volatile
  1509                           
  1510                           ;./Oscilador.h: 17: 
  1511  0244  2A91               	goto	l171
  1512  0245                     l1803:	
  1513                           
  1514                           ;./Oscilador.h: 20:         case 4:
  1515  0245  1683               	bsf	3,5	;RP0=1, select bank1
  1516  0246  1303               	bcf	3,6	;RP1=0, select bank1
  1517  0247  080F               	movf	15,w	;volatile
  1518  0248  398F               	andlw	-113
  1519  0249  3810               	iorlw	16
  1520  024A  2A68               	goto	L7
  1521  024B                     l1805:	
  1522                           ;./Oscilador.h: 21: 
  1523                           
  1524                           
  1525                           ;./Oscilador.h: 24:         case 5:
  1526  024B  1683               	bsf	3,5	;RP0=1, select bank1
  1527  024C  1303               	bcf	3,6	;RP1=0, select bank1
  1528  024D  080F               	movf	15,w	;volatile
  1529  024E  398F               	andlw	-113
  1530  024F  3820               	iorlw	32
  1531  0250  2A68               	goto	L7
  1532  0251                     l1807:	
  1533                           ;./Oscilador.h: 25: 
  1534                           
  1535                           
  1536                           ;./Oscilador.h: 28:         case 6:
  1537  0251  1683               	bsf	3,5	;RP0=1, select bank1
  1538  0252  1303               	bcf	3,6	;RP1=0, select bank1
  1539  0253  080F               	movf	15,w	;volatile
  1540  0254  398F               	andlw	-113
  1541  0255  3830               	iorlw	48
  1542  0256  2A68               	goto	L7
  1543  0257                     l1809:	
  1544                           ;./Oscilador.h: 29: 
  1545                           
  1546                           
  1547                           ;./Oscilador.h: 32:         case 7:
  1548  0257  1683               	bsf	3,5	;RP0=1, select bank1
  1549  0258  1303               	bcf	3,6	;RP1=0, select bank1
  1550  0259  080F               	movf	15,w	;volatile
  1551  025A  398F               	andlw	-113
  1552  025B  3840               	iorlw	64
  1553  025C  2A68               	goto	L7
  1554  025D                     l1811:	
  1555                           ;./Oscilador.h: 33: 
  1556                           
  1557                           
  1558                           ;./Oscilador.h: 36:         default:
  1559  025D  1683               	bsf	3,5	;RP0=1, select bank1
  1560  025E  1303               	bcf	3,6	;RP1=0, select bank1
  1561  025F  080F               	movf	15,w	;volatile
  1562  0260  398F               	andlw	-113
  1563  0261  3850               	iorlw	80
  1564  0262  2A68               	goto	L7
  1565  0263                     l1813:	
  1566                           ;./Oscilador.h: 37: 
  1567                           
  1568                           
  1569                           ;./Oscilador.h: 40:     }
  1570  0263  1683               	bsf	3,5	;RP0=1, select bank1
  1571  0264  1303               	bcf	3,6	;RP1=0, select bank1
  1572  0265  080F               	movf	15,w	;volatile
  1573  0266  398F               	andlw	-113
  1574  0267  3860               	iorlw	96
  1575  0268                     L7:	
  1576  0268  008F               	movwf	15	;volatile
  1577                           
  1578                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  1579  0269  2A91               	goto	l171
  1580  026A                     l1815:	
  1581  026A                     l1817:	
  1582  026A  3070               	movlw	112
  1583  026B  1683               	bsf	3,5	;RP0=1, select bank1
  1584  026C  1303               	bcf	3,6	;RP1=0, select bank1
  1585  026D  048F               	iorwf	15,f	;volatile
  1586  026E  2A91               	goto	l171
  1587  026F                     l1821:	
  1588  026F  0872               	movf	initOscilador@option,w
  1589  0270  00F0               	movwf	??_initOscilador
  1590  0271  01F1               	clrf	??_initOscilador+1
  1591                           
  1592                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1593                           ; Switch size 1, requested type "simple"
  1594                           ; Number of cases is 1, Range of values is 0 to 0
  1595                           ; switch strategies available:
  1596                           ; Name         Instructions Cycles
  1597                           ; simple_byte            4     3 (average)
  1598                           ; direct_byte           11     8 (fixed)
  1599                           ; jumptable            260     6 (fixed)
  1600                           ;	Chosen strategy is simple_byte
  1601  0272  0871               	movf	??_initOscilador+1,w
  1602  0273  3A00               	xorlw	0	; case 0
  1603  0274  1903               	skipnz
  1604  0275  2A77               	goto	l2223
  1605  0276  2A6A               	goto	l1817
  1606  0277                     l2223:	
  1607                           
  1608                           ; Switch size 1, requested type "simple"
  1609                           ; Number of cases is 8, Range of values is 0 to 7
  1610                           ; switch strategies available:
  1611                           ; Name         Instructions Cycles
  1612                           ; simple_byte           25    13 (average)
  1613                           ; direct_byte           32     8 (fixed)
  1614                           ; jumptable            260     6 (fixed)
  1615                           ;	Chosen strategy is simple_byte
  1616  0277  0870               	movf	??_initOscilador,w
  1617  0278  3A00               	xorlw	0	; case 0
  1618  0279  1903               	skipnz
  1619  027A  2A40               	goto	l1801
  1620  027B  3A01               	xorlw	1	; case 1
  1621  027C  1903               	skipnz
  1622  027D  2A45               	goto	l1803
  1623  027E  3A03               	xorlw	3	; case 2
  1624  027F  1903               	skipnz
  1625  0280  2A4B               	goto	l1805
  1626  0281  3A01               	xorlw	1	; case 3
  1627  0282  1903               	skipnz
  1628  0283  2A51               	goto	l1807
  1629  0284  3A07               	xorlw	7	; case 4
  1630  0285  1903               	skipnz
  1631  0286  2A57               	goto	l1809
  1632  0287  3A01               	xorlw	1	; case 5
  1633  0288  1903               	skipnz
  1634  0289  2A5D               	goto	l1811
  1635  028A  3A03               	xorlw	3	; case 6
  1636  028B  1903               	skipnz
  1637  028C  2A63               	goto	l1813
  1638  028D  3A01               	xorlw	1	; case 7
  1639  028E  1903               	skipnz
  1640  028F  2A6A               	goto	l1815
  1641  0290  2A6A               	goto	l1817
  1642  0291                     l171:	
  1643  0291  140F               	bsf	15,0	;volatile
  1644  0292  0008               	return
  1645  0293                     __end_of_initOscilador:	
  1646                           
  1647                           	psect	text4
  1648  04EE                     __ptext4:	
  1649 ;; *************** function _UART_Init *****************
  1650 ;; Defined at:
  1651 ;;		line 8 in file "./UART.h"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;  baudrate        4    6[BANK0 ] const long 
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;  x               2    9[COMMON] unsigned int 
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  1    wreg      unsigned char 
  1658 ;; Registers used:
  1659 ;;		wreg, status,2, status,0, pclath, cstack
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1665 ;;      Params:         0       4       0       0       0
  1666 ;;      Locals:         2       0       0       0       0
  1667 ;;      Temps:          0      12       0       0       0
  1668 ;;      Totals:         2      16       0       0       0
  1669 ;;Total ram usage:       18 bytes
  1670 ;; Hardware stack levels used:    1
  1671 ;; Hardware stack levels required when called:    1
  1672 ;; This function calls:
  1673 ;;		___aldiv
  1674 ;; This function is called by:
  1675 ;;		_setup
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           
  1680                           ;psect for function _UART_Init
  1681  04EE                     _UART_Init:	
  1682                           
  1683                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
  1684                           
  1685                           ;incstack = 0
  1686                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  1687  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  1688  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  1689  04F0  0826               	movf	UART_Init@baudrate,w
  1690  04F1  00AA               	movwf	??_UART_Init
  1691  04F2  0827               	movf	UART_Init@baudrate+1,w
  1692  04F3  00AB               	movwf	??_UART_Init+1
  1693  04F4  0828               	movf	UART_Init@baudrate+2,w
  1694  04F5  00AC               	movwf	??_UART_Init+2
  1695  04F6  0829               	movf	UART_Init@baudrate+3,w
  1696  04F7  00AD               	movwf	??_UART_Init+3
  1697  04F8  3006               	movlw	6
  1698  04F9                     u1265:	
  1699  04F9  1003               	clrc
  1700  04FA  0DAA               	rlf	??_UART_Init,f
  1701  04FB  0DAB               	rlf	??_UART_Init+1,f
  1702  04FC  0DAC               	rlf	??_UART_Init+2,f
  1703  04FD  0DAD               	rlf	??_UART_Init+3,f
  1704  04FE  3EFF               	addlw	-1
  1705  04FF  1D03               	skipz
  1706  0500  2CF9               	goto	u1265
  1707  0501  082D               	movf	??_UART_Init+3,w
  1708  0502  00F3               	movwf	___aldiv@divisor+3
  1709  0503  082C               	movf	??_UART_Init+2,w
  1710  0504  00F2               	movwf	___aldiv@divisor+2
  1711  0505  082B               	movf	??_UART_Init+1,w
  1712  0506  00F1               	movwf	___aldiv@divisor+1
  1713  0507  082A               	movf	??_UART_Init,w
  1714  0508  00F0               	movwf	___aldiv@divisor
  1715  0509  0826               	movf	UART_Init@baudrate,w
  1716  050A  00AE               	movwf	??_UART_Init+4
  1717  050B  0827               	movf	UART_Init@baudrate+1,w
  1718  050C  00AF               	movwf	??_UART_Init+5
  1719  050D  0828               	movf	UART_Init@baudrate+2,w
  1720  050E  00B0               	movwf	??_UART_Init+6
  1721  050F  0829               	movf	UART_Init@baudrate+3,w
  1722  0510  00B1               	movwf	??_UART_Init+7
  1723  0511  3006               	movlw	6
  1724  0512                     u1275:	
  1725  0512  1003               	clrc
  1726  0513  0DAE               	rlf	??_UART_Init+4,f
  1727  0514  0DAF               	rlf	??_UART_Init+5,f
  1728  0515  0DB0               	rlf	??_UART_Init+6,f
  1729  0516  0DB1               	rlf	??_UART_Init+7,f
  1730  0517  3EFF               	addlw	-1
  1731  0518  1D03               	skipz
  1732  0519  2D12               	goto	u1275
  1733  051A  3000               	movlw	0
  1734  051B  00B2               	movwf	??_UART_Init+8
  1735  051C  3012               	movlw	18
  1736  051D  00B3               	movwf	??_UART_Init+9
  1737  051E  307A               	movlw	122
  1738  051F  00B4               	movwf	??_UART_Init+10
  1739  0520  3000               	movlw	0
  1740  0521  00B5               	movwf	??_UART_Init+11
  1741  0522  082E               	movf	??_UART_Init+4,w
  1742  0523  02B2               	subwf	??_UART_Init+8,f
  1743  0524  082F               	movf	??_UART_Init+5,w
  1744  0525  1C03               	skipc
  1745  0526  0F2F               	incfsz	??_UART_Init+5,w
  1746  0527  2D29               	goto	u1281
  1747  0528  2D2A               	goto	u1282
  1748  0529                     u1281:	
  1749  0529  02B3               	subwf	??_UART_Init+9,f
  1750  052A                     u1282:	
  1751  052A  0830               	movf	??_UART_Init+6,w
  1752  052B  1C03               	skipc
  1753  052C  0F30               	incfsz	??_UART_Init+6,w
  1754  052D  2D2F               	goto	u1283
  1755  052E  2D30               	goto	u1284
  1756  052F                     u1283:	
  1757  052F  02B4               	subwf	??_UART_Init+10,f
  1758  0530                     u1284:	
  1759  0530  0831               	movf	??_UART_Init+7,w
  1760  0531  1C03               	skipc
  1761  0532  0F31               	incfsz	??_UART_Init+7,w
  1762  0533  2D35               	goto	u1285
  1763  0534  2D36               	goto	u1286
  1764  0535                     u1285:	
  1765  0535  02B5               	subwf	??_UART_Init+11,f
  1766  0536                     u1286:	
  1767  0536  0835               	movf	??_UART_Init+11,w
  1768  0537  00F7               	movwf	___aldiv@dividend+3
  1769  0538  0834               	movf	??_UART_Init+10,w
  1770  0539  00F6               	movwf	___aldiv@dividend+2
  1771  053A  0833               	movf	??_UART_Init+9,w
  1772  053B  00F5               	movwf	___aldiv@dividend+1
  1773  053C  0832               	movf	??_UART_Init+8,w
  1774  053D  00F4               	movwf	___aldiv@dividend
  1775  053E  120A  118A  23C2  120A  118A  	fcall	___aldiv
  1776  0543  0871               	movf	?___aldiv+1,w
  1777  0544  00FA               	movwf	UART_Init@x+1
  1778  0545  0870               	movf	?___aldiv,w
  1779  0546  00F9               	movwf	UART_Init@x
  1780                           
  1781                           ;./UART.h: 12:  if(x>255)
  1782  0547  3001               	movlw	1
  1783  0548  027A               	subwf	UART_Init@x+1,w
  1784  0549  3000               	movlw	0
  1785  054A  1903               	skipnz
  1786  054B  0279               	subwf	UART_Init@x,w
  1787  054C  1C03               	skipc
  1788  054D  2DAA               	goto	l1835
  1789                           
  1790                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  1791  054E  1283               	bcf	3,5	;RP0=0, select bank0
  1792  054F  1303               	bcf	3,6	;RP1=0, select bank0
  1793  0550  0826               	movf	UART_Init@baudrate,w
  1794  0551  00AA               	movwf	??_UART_Init
  1795  0552  0827               	movf	UART_Init@baudrate+1,w
  1796  0553  00AB               	movwf	??_UART_Init+1
  1797  0554  0828               	movf	UART_Init@baudrate+2,w
  1798  0555  00AC               	movwf	??_UART_Init+2
  1799  0556  0829               	movf	UART_Init@baudrate+3,w
  1800  0557  00AD               	movwf	??_UART_Init+3
  1801  0558  3004               	movlw	4
  1802  0559                     u1305:	
  1803  0559  1003               	clrc
  1804  055A  0DAA               	rlf	??_UART_Init,f
  1805  055B  0DAB               	rlf	??_UART_Init+1,f
  1806  055C  0DAC               	rlf	??_UART_Init+2,f
  1807  055D  0DAD               	rlf	??_UART_Init+3,f
  1808  055E  3EFF               	addlw	-1
  1809  055F  1D03               	skipz
  1810  0560  2D59               	goto	u1305
  1811  0561  082D               	movf	??_UART_Init+3,w
  1812  0562  00F3               	movwf	___aldiv@divisor+3
  1813  0563  082C               	movf	??_UART_Init+2,w
  1814  0564  00F2               	movwf	___aldiv@divisor+2
  1815  0565  082B               	movf	??_UART_Init+1,w
  1816  0566  00F1               	movwf	___aldiv@divisor+1
  1817  0567  082A               	movf	??_UART_Init,w
  1818  0568  00F0               	movwf	___aldiv@divisor
  1819  0569  0826               	movf	UART_Init@baudrate,w
  1820  056A  00AE               	movwf	??_UART_Init+4
  1821  056B  0827               	movf	UART_Init@baudrate+1,w
  1822  056C  00AF               	movwf	??_UART_Init+5
  1823  056D  0828               	movf	UART_Init@baudrate+2,w
  1824  056E  00B0               	movwf	??_UART_Init+6
  1825  056F  0829               	movf	UART_Init@baudrate+3,w
  1826  0570  00B1               	movwf	??_UART_Init+7
  1827  0571  3004               	movlw	4
  1828  0572                     u1315:	
  1829  0572  1003               	clrc
  1830  0573  0DAE               	rlf	??_UART_Init+4,f
  1831  0574  0DAF               	rlf	??_UART_Init+5,f
  1832  0575  0DB0               	rlf	??_UART_Init+6,f
  1833  0576  0DB1               	rlf	??_UART_Init+7,f
  1834  0577  3EFF               	addlw	-1
  1835  0578  1D03               	skipz
  1836  0579  2D72               	goto	u1315
  1837  057A  3000               	movlw	0
  1838  057B  00B2               	movwf	??_UART_Init+8
  1839  057C  3012               	movlw	18
  1840  057D  00B3               	movwf	??_UART_Init+9
  1841  057E  307A               	movlw	122
  1842  057F  00B4               	movwf	??_UART_Init+10
  1843  0580  3000               	movlw	0
  1844  0581  00B5               	movwf	??_UART_Init+11
  1845  0582  082E               	movf	??_UART_Init+4,w
  1846  0583  02B2               	subwf	??_UART_Init+8,f
  1847  0584  082F               	movf	??_UART_Init+5,w
  1848  0585  1C03               	skipc
  1849  0586  0F2F               	incfsz	??_UART_Init+5,w
  1850  0587  2D89               	goto	u1321
  1851  0588  2D8A               	goto	u1322
  1852  0589                     u1321:	
  1853  0589  02B3               	subwf	??_UART_Init+9,f
  1854  058A                     u1322:	
  1855  058A  0830               	movf	??_UART_Init+6,w
  1856  058B  1C03               	skipc
  1857  058C  0F30               	incfsz	??_UART_Init+6,w
  1858  058D  2D8F               	goto	u1323
  1859  058E  2D90               	goto	u1324
  1860  058F                     u1323:	
  1861  058F  02B4               	subwf	??_UART_Init+10,f
  1862  0590                     u1324:	
  1863  0590  0831               	movf	??_UART_Init+7,w
  1864  0591  1C03               	skipc
  1865  0592  0F31               	incfsz	??_UART_Init+7,w
  1866  0593  2D95               	goto	u1325
  1867  0594  2D96               	goto	u1326
  1868  0595                     u1325:	
  1869  0595  02B5               	subwf	??_UART_Init+11,f
  1870  0596                     u1326:	
  1871  0596  0835               	movf	??_UART_Init+11,w
  1872  0597  00F7               	movwf	___aldiv@dividend+3
  1873  0598  0834               	movf	??_UART_Init+10,w
  1874  0599  00F6               	movwf	___aldiv@dividend+2
  1875  059A  0833               	movf	??_UART_Init+9,w
  1876  059B  00F5               	movwf	___aldiv@dividend+1
  1877  059C  0832               	movf	??_UART_Init+8,w
  1878  059D  00F4               	movwf	___aldiv@dividend
  1879  059E  120A  118A  23C2  120A  118A  	fcall	___aldiv
  1880  05A3  0871               	movf	?___aldiv+1,w
  1881  05A4  00FA               	movwf	UART_Init@x+1
  1882  05A5  0870               	movf	?___aldiv,w
  1883  05A6  00F9               	movwf	UART_Init@x
  1884                           
  1885                           ;./UART.h: 15:   BRGH = 1;
  1886  05A7  1683               	bsf	3,5	;RP0=1, select bank1
  1887  05A8  1303               	bcf	3,6	;RP1=0, select bank1
  1888  05A9  1518               	bsf	24,2	;volatile
  1889  05AA                     l1835:	
  1890                           
  1891                           ;./UART.h: 17:  if(x<256)
  1892  05AA  3001               	movlw	1
  1893  05AB  027A               	subwf	UART_Init@x+1,w
  1894  05AC  3000               	movlw	0
  1895  05AD  1903               	skipnz
  1896  05AE  0279               	subwf	UART_Init@x,w
  1897  05AF  1803               	skipnc
  1898  05B0  0008               	return
  1899                           
  1900                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  1901  05B1  0879               	movf	UART_Init@x,w
  1902  05B2  1683               	bsf	3,5	;RP0=1, select bank1
  1903  05B3  1303               	bcf	3,6	;RP1=0, select bank1
  1904  05B4  0099               	movwf	25	;volatile
  1905                           
  1906                           ;./UART.h: 20:    SYNC = 0;
  1907  05B5  1218               	bcf	24,4	;volatile
  1908                           
  1909                           ;./UART.h: 21:    SPEN = 1;
  1910  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  1911  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  1912  05B8  1798               	bsf	24,7	;volatile
  1913                           
  1914                           ;./UART.h: 22:           TRISC7 = 1;
  1915  05B9  1683               	bsf	3,5	;RP0=1, select bank1
  1916  05BA  1303               	bcf	3,6	;RP1=0, select bank1
  1917  05BB  1787               	bsf	7,7	;volatile
  1918                           
  1919                           ;./UART.h: 23:           TRISC6 = 1;
  1920  05BC  1707               	bsf	7,6	;volatile
  1921                           
  1922                           ;./UART.h: 24:           CREN = 1;
  1923  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  1924  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  1925  05BF  1618               	bsf	24,4	;volatile
  1926                           
  1927                           ;./UART.h: 25:           TXEN = 1;
  1928  05C0  1683               	bsf	3,5	;RP0=1, select bank1
  1929  05C1  1303               	bcf	3,6	;RP1=0, select bank1
  1930  05C2  1698               	bsf	24,5	;volatile
  1931  05C3  0008               	return
  1932  05C4                     __end_of_UART_Init:	
  1933                           
  1934                           	psect	text5
  1935  03C2                     __ptext5:	
  1936 ;; *************** function ___aldiv *****************
  1937 ;; Defined at:
  1938 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;  divisor         4    0[COMMON] long 
  1941 ;;  dividend        4    4[COMMON] long 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  quotient        4    2[BANK0 ] long 
  1944 ;;  sign            1    1[BANK0 ] unsigned char 
  1945 ;;  counter         1    0[BANK0 ] unsigned char 
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  4    0[COMMON] long 
  1948 ;; Registers used:
  1949 ;;		wreg, status,2, status,0
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1955 ;;      Params:         8       0       0       0       0
  1956 ;;      Locals:         0       6       0       0       0
  1957 ;;      Temps:          1       0       0       0       0
  1958 ;;      Totals:         9       6       0       0       0
  1959 ;;Total ram usage:       15 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_UART_Init
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           
  1969                           ;psect for function ___aldiv
  1970  03C2                     ___aldiv:	
  1971                           
  1972                           ;incstack = 0
  1973                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1974  03C2  1283               	bcf	3,5	;RP0=0, select bank0
  1975  03C3  1303               	bcf	3,6	;RP1=0, select bank0
  1976  03C4  01A1               	clrf	___aldiv@sign
  1977  03C5  1FF3               	btfss	___aldiv@divisor+3,7
  1978  03C6  2BD4               	goto	l465
  1979  03C7  09F0               	comf	___aldiv@divisor,f
  1980  03C8  09F1               	comf	___aldiv@divisor+1,f
  1981  03C9  09F2               	comf	___aldiv@divisor+2,f
  1982  03CA  09F3               	comf	___aldiv@divisor+3,f
  1983  03CB  0AF0               	incf	___aldiv@divisor,f
  1984  03CC  1903               	skipnz
  1985  03CD  0AF1               	incf	___aldiv@divisor+1,f
  1986  03CE  1903               	skipnz
  1987  03CF  0AF2               	incf	___aldiv@divisor+2,f
  1988  03D0  1903               	skipnz
  1989  03D1  0AF3               	incf	___aldiv@divisor+3,f
  1990  03D2  01A1               	clrf	___aldiv@sign
  1991  03D3  0AA1               	incf	___aldiv@sign,f
  1992  03D4                     l465:	
  1993  03D4  1FF7               	btfss	___aldiv@dividend+3,7
  1994  03D5  2BE5               	goto	l1647
  1995  03D6  09F4               	comf	___aldiv@dividend,f
  1996  03D7  09F5               	comf	___aldiv@dividend+1,f
  1997  03D8  09F6               	comf	___aldiv@dividend+2,f
  1998  03D9  09F7               	comf	___aldiv@dividend+3,f
  1999  03DA  0AF4               	incf	___aldiv@dividend,f
  2000  03DB  1903               	skipnz
  2001  03DC  0AF5               	incf	___aldiv@dividend+1,f
  2002  03DD  1903               	skipnz
  2003  03DE  0AF6               	incf	___aldiv@dividend+2,f
  2004  03DF  1903               	skipnz
  2005  03E0  0AF7               	incf	___aldiv@dividend+3,f
  2006  03E1  3001               	movlw	1
  2007  03E2  00F8               	movwf	??___aldiv
  2008  03E3  0878               	movf	??___aldiv,w
  2009  03E4  06A1               	xorwf	___aldiv@sign,f
  2010  03E5                     l1647:	
  2011  03E5  3000               	movlw	0
  2012  03E6  00A5               	movwf	___aldiv@quotient+3
  2013  03E7  3000               	movlw	0
  2014  03E8  00A4               	movwf	___aldiv@quotient+2
  2015  03E9  3000               	movlw	0
  2016  03EA  00A3               	movwf	___aldiv@quotient+1
  2017  03EB  3000               	movlw	0
  2018  03EC  00A2               	movwf	___aldiv@quotient
  2019  03ED  0873               	movf	___aldiv@divisor+3,w
  2020  03EE  0472               	iorwf	___aldiv@divisor+2,w
  2021  03EF  0471               	iorwf	___aldiv@divisor+1,w
  2022  03F0  0470               	iorwf	___aldiv@divisor,w
  2023  03F1  1903               	skipnz
  2024  03F2  2C3A               	goto	l1669
  2025  03F3  01A0               	clrf	___aldiv@counter
  2026  03F4  0AA0               	incf	___aldiv@counter,f
  2027  03F5                     l1655:	
  2028  03F5  1BF3               	btfsc	___aldiv@divisor+3,7
  2029  03F6  2C05               	goto	l1657
  2030  03F7  3001               	movlw	1
  2031  03F8  00F8               	movwf	??___aldiv
  2032  03F9                     u1035:	
  2033  03F9  1003               	clrc
  2034  03FA  0DF0               	rlf	___aldiv@divisor,f
  2035  03FB  0DF1               	rlf	___aldiv@divisor+1,f
  2036  03FC  0DF2               	rlf	___aldiv@divisor+2,f
  2037  03FD  0DF3               	rlf	___aldiv@divisor+3,f
  2038  03FE  0BF8               	decfsz	??___aldiv,f
  2039  03FF  2BF9               	goto	u1035
  2040  0400  3001               	movlw	1
  2041  0401  00F8               	movwf	??___aldiv
  2042  0402  0878               	movf	??___aldiv,w
  2043  0403  07A0               	addwf	___aldiv@counter,f
  2044  0404  2BF5               	goto	l1655
  2045  0405                     l1657:	
  2046  0405  3001               	movlw	1
  2047  0406  00F8               	movwf	??___aldiv
  2048  0407                     u1055:	
  2049  0407  1003               	clrc
  2050  0408  0DA2               	rlf	___aldiv@quotient,f
  2051  0409  0DA3               	rlf	___aldiv@quotient+1,f
  2052  040A  0DA4               	rlf	___aldiv@quotient+2,f
  2053  040B  0DA5               	rlf	___aldiv@quotient+3,f
  2054  040C  0BF8               	decfsz	??___aldiv,f
  2055  040D  2C07               	goto	u1055
  2056  040E  0873               	movf	___aldiv@divisor+3,w
  2057  040F  0277               	subwf	___aldiv@dividend+3,w
  2058  0410  1D03               	skipz
  2059  0411  2C1C               	goto	u1065
  2060  0412  0872               	movf	___aldiv@divisor+2,w
  2061  0413  0276               	subwf	___aldiv@dividend+2,w
  2062  0414  1D03               	skipz
  2063  0415  2C1C               	goto	u1065
  2064  0416  0871               	movf	___aldiv@divisor+1,w
  2065  0417  0275               	subwf	___aldiv@dividend+1,w
  2066  0418  1D03               	skipz
  2067  0419  2C1C               	goto	u1065
  2068  041A  0870               	movf	___aldiv@divisor,w
  2069  041B  0274               	subwf	___aldiv@dividend,w
  2070  041C                     u1065:	
  2071  041C  1C03               	skipc
  2072  041D  2C2D               	goto	l1665
  2073  041E  0870               	movf	___aldiv@divisor,w
  2074  041F  02F4               	subwf	___aldiv@dividend,f
  2075  0420  0871               	movf	___aldiv@divisor+1,w
  2076  0421  1C03               	skipc
  2077  0422  0F71               	incfsz	___aldiv@divisor+1,w
  2078  0423  02F5               	subwf	___aldiv@dividend+1,f
  2079  0424  0872               	movf	___aldiv@divisor+2,w
  2080  0425  1C03               	skipc
  2081  0426  0F72               	incfsz	___aldiv@divisor+2,w
  2082  0427  02F6               	subwf	___aldiv@dividend+2,f
  2083  0428  0873               	movf	___aldiv@divisor+3,w
  2084  0429  1C03               	skipc
  2085  042A  0F73               	incfsz	___aldiv@divisor+3,w
  2086  042B  02F7               	subwf	___aldiv@dividend+3,f
  2087  042C  1422               	bsf	___aldiv@quotient,0
  2088  042D                     l1665:	
  2089  042D  3001               	movlw	1
  2090  042E                     u1075:	
  2091  042E  1003               	clrc
  2092  042F  0CF3               	rrf	___aldiv@divisor+3,f
  2093  0430  0CF2               	rrf	___aldiv@divisor+2,f
  2094  0431  0CF1               	rrf	___aldiv@divisor+1,f
  2095  0432  0CF0               	rrf	___aldiv@divisor,f
  2096  0433  3EFF               	addlw	-1
  2097  0434  1D03               	skipz
  2098  0435  2C2E               	goto	u1075
  2099  0436  3001               	movlw	1
  2100  0437  02A0               	subwf	___aldiv@counter,f
  2101  0438  1D03               	btfss	3,2
  2102  0439  2C05               	goto	l1657
  2103  043A                     l1669:	
  2104  043A  0821               	movf	___aldiv@sign,w
  2105  043B  1903               	btfsc	3,2
  2106  043C  2C48               	goto	l1673
  2107  043D  09A2               	comf	___aldiv@quotient,f
  2108  043E  09A3               	comf	___aldiv@quotient+1,f
  2109  043F  09A4               	comf	___aldiv@quotient+2,f
  2110  0440  09A5               	comf	___aldiv@quotient+3,f
  2111  0441  0AA2               	incf	___aldiv@quotient,f
  2112  0442  1903               	skipnz
  2113  0443  0AA3               	incf	___aldiv@quotient+1,f
  2114  0444  1903               	skipnz
  2115  0445  0AA4               	incf	___aldiv@quotient+2,f
  2116  0446  1903               	skipnz
  2117  0447  0AA5               	incf	___aldiv@quotient+3,f
  2118  0448                     l1673:	
  2119  0448  0825               	movf	___aldiv@quotient+3,w
  2120  0449  00F3               	movwf	?___aldiv+3
  2121  044A  0824               	movf	___aldiv@quotient+2,w
  2122  044B  00F2               	movwf	?___aldiv+2
  2123  044C  0823               	movf	___aldiv@quotient+1,w
  2124  044D  00F1               	movwf	?___aldiv+1
  2125  044E  0822               	movf	___aldiv@quotient,w
  2126  044F  00F0               	movwf	?___aldiv
  2127  0450  0008               	return
  2128  0451                     __end_of___aldiv:	
  2129                           
  2130                           	psect	text6
  2131  0293                     __ptext6:	
  2132 ;; *************** function _Lcd_Init *****************
  2133 ;; Defined at:
  2134 ;;		line 65 in file "./LCD4bits.h"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;		None
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;		None
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  1    wreg      void 
  2141 ;; Registers used:
  2142 ;;		wreg, status,2, status,0, pclath, cstack
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2148 ;;      Params:         0       0       0       0       0
  2149 ;;      Locals:         0       0       0       0       0
  2150 ;;      Temps:          2       0       0       0       0
  2151 ;;      Totals:         2       0       0       0       0
  2152 ;;Total ram usage:        2 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    2
  2155 ;; This function calls:
  2156 ;;		_Lcd_Cmd
  2157 ;;		_Lcd_Port
  2158 ;; This function is called by:
  2159 ;;		_setup
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           
  2164                           ;psect for function _Lcd_Init
  2165  0293                     _Lcd_Init:	
  2166                           
  2167                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  2168                           
  2169                           ;incstack = 0
  2170                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2171  0293  3000               	movlw	0
  2172  0294  120A  158A  26E4  120A  118A  	fcall	_Lcd_Port
  2173                           
  2174                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  2175  0299  3034               	movlw	52
  2176  029A  00F5               	movwf	??_Lcd_Init+1
  2177  029B  30F1               	movlw	241
  2178  029C  00F4               	movwf	??_Lcd_Init
  2179  029D                     u1717:	
  2180  029D  0BF4               	decfsz	??_Lcd_Init,f
  2181  029E  2A9D               	goto	u1717
  2182  029F  0BF5               	decfsz	??_Lcd_Init+1,f
  2183  02A0  2A9D               	goto	u1717
  2184  02A1  2AA2               	nop2
  2185                           
  2186                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  2187  02A2  3003               	movlw	3
  2188  02A3  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2189                           
  2190                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2191  02A8  300D               	movlw	13
  2192  02A9  00F5               	movwf	??_Lcd_Init+1
  2193  02AA  30FB               	movlw	251
  2194  02AB  00F4               	movwf	??_Lcd_Init
  2195  02AC                     u1727:	
  2196  02AC  0BF4               	decfsz	??_Lcd_Init,f
  2197  02AD  2AAC               	goto	u1727
  2198  02AE  0BF5               	decfsz	??_Lcd_Init+1,f
  2199  02AF  2AAC               	goto	u1727
  2200  02B0  2AB1               	nop2
  2201                           
  2202                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  2203  02B1  3003               	movlw	3
  2204  02B2  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2205                           
  2206                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  2207  02B7  301D               	movlw	29
  2208  02B8  00F5               	movwf	??_Lcd_Init+1
  2209  02B9  3091               	movlw	145
  2210  02BA  00F4               	movwf	??_Lcd_Init
  2211  02BB                     u1737:	
  2212  02BB  0BF4               	decfsz	??_Lcd_Init,f
  2213  02BC  2ABB               	goto	u1737
  2214  02BD  0BF5               	decfsz	??_Lcd_Init+1,f
  2215  02BE  2ABB               	goto	u1737
  2216                           
  2217                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  2218  02BF  3003               	movlw	3
  2219  02C0  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2220                           
  2221                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  2222  02C5  3002               	movlw	2
  2223  02C6  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2224                           
  2225                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  2226  02CB  3002               	movlw	2
  2227  02CC  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2228                           
  2229                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  2230  02D1  3008               	movlw	8
  2231  02D2  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2232                           
  2233                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  2234  02D7  3000               	movlw	0
  2235  02D8  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2236                           
  2237                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  2238  02DD  300C               	movlw	12
  2239  02DE  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2240                           
  2241                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  2242  02E3  3000               	movlw	0
  2243  02E4  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  2244                           
  2245                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  2246  02E9  3006               	movlw	6
  2247  02EA  120A  158A  26FE   	fcall	_Lcd_Cmd
  2248  02ED  0008               	return
  2249  02EE                     __end_of_Lcd_Init:	
  2250                           
  2251                           	psect	text7
  2252  00D1                     __ptext7:	
  2253 ;; *************** function _I2C_Master_Init *****************
  2254 ;; Defined at:
  2255 ;;		line 16 in file "./I2C.h"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;  c               4    0[BANK0 ] const unsigned long 
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;		None
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  1    wreg      void 
  2262 ;; Registers used:
  2263 ;;		wreg, status,2, status,0, pclath, cstack
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2269 ;;      Params:         0       4       0       0       0
  2270 ;;      Locals:         0       0       0       0       0
  2271 ;;      Temps:          0       4       0       0       0
  2272 ;;      Totals:         0       8       0       0       0
  2273 ;;Total ram usage:        8 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    1
  2276 ;; This function calls:
  2277 ;;		___lldiv
  2278 ;; This function is called by:
  2279 ;;		_setup
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           
  2284                           ;psect for function _I2C_Master_Init
  2285  00D1                     _I2C_Master_Init:	
  2286                           
  2287                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  2288                           
  2289                           ;incstack = 0
  2290                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  2291  00D1  3028               	movlw	40
  2292  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  2293  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  2294  00D4  0094               	movwf	20	;volatile
  2295                           
  2296                           ;./I2C.h: 19:     SSPCON2 = 0;
  2297  00D5  1683               	bsf	3,5	;RP0=1, select bank1
  2298  00D6  1303               	bcf	3,6	;RP1=0, select bank1
  2299  00D7  0191               	clrf	17	;volatile
  2300                           
  2301                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  2302  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  2303  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  2304  00DA  0820               	movf	I2C_Master_Init@c,w
  2305  00DB  00A4               	movwf	??_I2C_Master_Init
  2306  00DC  0821               	movf	I2C_Master_Init@c+1,w
  2307  00DD  00A5               	movwf	??_I2C_Master_Init+1
  2308  00DE  0822               	movf	I2C_Master_Init@c+2,w
  2309  00DF  00A6               	movwf	??_I2C_Master_Init+2
  2310  00E0  0823               	movf	I2C_Master_Init@c+3,w
  2311  00E1  00A7               	movwf	??_I2C_Master_Init+3
  2312  00E2  3002               	movlw	2
  2313  00E3                     u1235:	
  2314  00E3  1003               	clrc
  2315  00E4  0DA4               	rlf	??_I2C_Master_Init,f
  2316  00E5  0DA5               	rlf	??_I2C_Master_Init+1,f
  2317  00E6  0DA6               	rlf	??_I2C_Master_Init+2,f
  2318  00E7  0DA7               	rlf	??_I2C_Master_Init+3,f
  2319  00E8  3EFF               	addlw	-1
  2320  00E9  1D03               	skipz
  2321  00EA  28E3               	goto	u1235
  2322  00EB  0827               	movf	??_I2C_Master_Init+3,w
  2323  00EC  00F3               	movwf	___lldiv@divisor+3
  2324  00ED  0826               	movf	??_I2C_Master_Init+2,w
  2325  00EE  00F2               	movwf	___lldiv@divisor+2
  2326  00EF  0825               	movf	??_I2C_Master_Init+1,w
  2327  00F0  00F1               	movwf	___lldiv@divisor+1
  2328  00F1  0824               	movf	??_I2C_Master_Init,w
  2329  00F2  00F0               	movwf	___lldiv@divisor
  2330  00F3  3000               	movlw	0
  2331  00F4  00F7               	movwf	___lldiv@dividend+3
  2332  00F5  307A               	movlw	122
  2333  00F6  00F6               	movwf	___lldiv@dividend+2
  2334  00F7  3012               	movlw	18
  2335  00F8  00F5               	movwf	___lldiv@dividend+1
  2336  00F9  3000               	movlw	0
  2337  00FA  00F4               	movwf	___lldiv@dividend
  2338  00FB  120A  118A  22EE   	fcall	___lldiv
  2339  00FE  0870               	movf	?___lldiv,w
  2340  00FF  3EFF               	addlw	255
  2341  0100  1683               	bsf	3,5	;RP0=1, select bank1
  2342  0101  1303               	bcf	3,6	;RP1=0, select bank1
  2343  0102  0093               	movwf	19	;volatile
  2344                           
  2345                           ;./I2C.h: 21:     SSPSTAT = 0;
  2346  0103  0194               	clrf	20	;volatile
  2347                           
  2348                           ;./I2C.h: 22:     TRISC3 = 1;
  2349  0104  1587               	bsf	7,3	;volatile
  2350                           
  2351                           ;./I2C.h: 23:     TRISC4 = 1;
  2352  0105  1607               	bsf	7,4	;volatile
  2353  0106  0008               	return
  2354  0107                     __end_of_I2C_Master_Init:	
  2355                           
  2356                           	psect	text8
  2357  02EE                     __ptext8:	
  2358 ;; *************** function ___lldiv *****************
  2359 ;; Defined at:
  2360 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;  divisor         4    0[COMMON] unsigned long 
  2363 ;;  dividend        4    4[COMMON] unsigned long 
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;  quotient        4    9[COMMON] unsigned long 
  2366 ;;  counter         1   13[COMMON] unsigned char 
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  4    0[COMMON] unsigned long 
  2369 ;; Registers used:
  2370 ;;		wreg, status,2, status,0
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2376 ;;      Params:         8       0       0       0       0
  2377 ;;      Locals:         5       0       0       0       0
  2378 ;;      Temps:          1       0       0       0       0
  2379 ;;      Totals:        14       0       0       0       0
  2380 ;;Total ram usage:       14 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; This function calls:
  2383 ;;		Nothing
  2384 ;; This function is called by:
  2385 ;;		_I2C_Master_Init
  2386 ;; This function uses a non-reentrant model
  2387 ;;
  2388                           
  2389                           
  2390                           ;psect for function ___lldiv
  2391  02EE                     ___lldiv:	
  2392                           
  2393                           ;incstack = 0
  2394                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2395  02EE  3000               	movlw	0
  2396  02EF  00FC               	movwf	___lldiv@quotient+3
  2397  02F0  3000               	movlw	0
  2398  02F1  00FB               	movwf	___lldiv@quotient+2
  2399  02F2  3000               	movlw	0
  2400  02F3  00FA               	movwf	___lldiv@quotient+1
  2401  02F4  3000               	movlw	0
  2402  02F5  00F9               	movwf	___lldiv@quotient
  2403  02F6  0873               	movf	___lldiv@divisor+3,w
  2404  02F7  0472               	iorwf	___lldiv@divisor+2,w
  2405  02F8  0471               	iorwf	___lldiv@divisor+1,w
  2406  02F9  0470               	iorwf	___lldiv@divisor,w
  2407  02FA  1903               	skipnz
  2408  02FB  2B43               	goto	l1633
  2409  02FC  01FD               	clrf	___lldiv@counter
  2410  02FD  0AFD               	incf	___lldiv@counter,f
  2411  02FE                     l1619:	
  2412  02FE  1BF3               	btfsc	___lldiv@divisor+3,7
  2413  02FF  2B0E               	goto	l1621
  2414  0300  3001               	movlw	1
  2415  0301  00F8               	movwf	??___lldiv
  2416  0302                     u945:	
  2417  0302  1003               	clrc
  2418  0303  0DF0               	rlf	___lldiv@divisor,f
  2419  0304  0DF1               	rlf	___lldiv@divisor+1,f
  2420  0305  0DF2               	rlf	___lldiv@divisor+2,f
  2421  0306  0DF3               	rlf	___lldiv@divisor+3,f
  2422  0307  0BF8               	decfsz	??___lldiv,f
  2423  0308  2B02               	goto	u945
  2424  0309  3001               	movlw	1
  2425  030A  00F8               	movwf	??___lldiv
  2426  030B  0878               	movf	??___lldiv,w
  2427  030C  07FD               	addwf	___lldiv@counter,f
  2428  030D  2AFE               	goto	l1619
  2429  030E                     l1621:	
  2430  030E  3001               	movlw	1
  2431  030F  00F8               	movwf	??___lldiv
  2432  0310                     u965:	
  2433  0310  1003               	clrc
  2434  0311  0DF9               	rlf	___lldiv@quotient,f
  2435  0312  0DFA               	rlf	___lldiv@quotient+1,f
  2436  0313  0DFB               	rlf	___lldiv@quotient+2,f
  2437  0314  0DFC               	rlf	___lldiv@quotient+3,f
  2438  0315  0BF8               	decfsz	??___lldiv,f
  2439  0316  2B10               	goto	u965
  2440  0317  0873               	movf	___lldiv@divisor+3,w
  2441  0318  0277               	subwf	___lldiv@dividend+3,w
  2442  0319  1D03               	skipz
  2443  031A  2B25               	goto	u975
  2444  031B  0872               	movf	___lldiv@divisor+2,w
  2445  031C  0276               	subwf	___lldiv@dividend+2,w
  2446  031D  1D03               	skipz
  2447  031E  2B25               	goto	u975
  2448  031F  0871               	movf	___lldiv@divisor+1,w
  2449  0320  0275               	subwf	___lldiv@dividend+1,w
  2450  0321  1D03               	skipz
  2451  0322  2B25               	goto	u975
  2452  0323  0870               	movf	___lldiv@divisor,w
  2453  0324  0274               	subwf	___lldiv@dividend,w
  2454  0325                     u975:	
  2455  0325  1C03               	skipc
  2456  0326  2B36               	goto	l1629
  2457  0327  0870               	movf	___lldiv@divisor,w
  2458  0328  02F4               	subwf	___lldiv@dividend,f
  2459  0329  0871               	movf	___lldiv@divisor+1,w
  2460  032A  1C03               	skipc
  2461  032B  0F71               	incfsz	___lldiv@divisor+1,w
  2462  032C  02F5               	subwf	___lldiv@dividend+1,f
  2463  032D  0872               	movf	___lldiv@divisor+2,w
  2464  032E  1C03               	skipc
  2465  032F  0F72               	incfsz	___lldiv@divisor+2,w
  2466  0330  02F6               	subwf	___lldiv@dividend+2,f
  2467  0331  0873               	movf	___lldiv@divisor+3,w
  2468  0332  1C03               	skipc
  2469  0333  0F73               	incfsz	___lldiv@divisor+3,w
  2470  0334  02F7               	subwf	___lldiv@dividend+3,f
  2471  0335  1479               	bsf	___lldiv@quotient,0
  2472  0336                     l1629:	
  2473  0336  3001               	movlw	1
  2474  0337                     u985:	
  2475  0337  1003               	clrc
  2476  0338  0CF3               	rrf	___lldiv@divisor+3,f
  2477  0339  0CF2               	rrf	___lldiv@divisor+2,f
  2478  033A  0CF1               	rrf	___lldiv@divisor+1,f
  2479  033B  0CF0               	rrf	___lldiv@divisor,f
  2480  033C  3EFF               	addlw	-1
  2481  033D  1D03               	skipz
  2482  033E  2B37               	goto	u985
  2483  033F  3001               	movlw	1
  2484  0340  02FD               	subwf	___lldiv@counter,f
  2485  0341  1D03               	btfss	3,2
  2486  0342  2B0E               	goto	l1621
  2487  0343                     l1633:	
  2488  0343  087C               	movf	___lldiv@quotient+3,w
  2489  0344  00F3               	movwf	?___lldiv+3
  2490  0345  087B               	movf	___lldiv@quotient+2,w
  2491  0346  00F2               	movwf	?___lldiv+2
  2492  0347  087A               	movf	___lldiv@quotient+1,w
  2493  0348  00F1               	movwf	?___lldiv+1
  2494  0349  0879               	movf	___lldiv@quotient,w
  2495  034A  00F0               	movwf	?___lldiv
  2496  034B  0008               	return
  2497  034C                     __end_of___lldiv:	
  2498                           
  2499                           	psect	text9
  2500  0F93                     __ptext9:	
  2501 ;; *************** function _get_tripwire *****************
  2502 ;; Defined at:
  2503 ;;		line 244 in file "mainMaster.c"
  2504 ;; Parameters:    Size  Location     Type
  2505 ;;		None
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;  trip            1    7[COMMON] unsigned char 
  2508 ;; Return value:  Size  Location     Type
  2509 ;;                  1    wreg      unsigned char 
  2510 ;; Registers used:
  2511 ;;		wreg, status,2, status,0, pclath, cstack
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : 0/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2517 ;;      Params:         0       0       0       0       0
  2518 ;;      Locals:         1       0       0       0       0
  2519 ;;      Temps:          1       0       0       0       0
  2520 ;;      Totals:         2       0       0       0       0
  2521 ;;Total ram usage:        2 bytes
  2522 ;; Hardware stack levels used:    1
  2523 ;; Hardware stack levels required when called:    2
  2524 ;; This function calls:
  2525 ;;		_I2C_Master_Read
  2526 ;;		_I2C_Master_Start
  2527 ;;		_I2C_Master_Stop
  2528 ;;		_I2C_Master_Write
  2529 ;; This function is called by:
  2530 ;;		_main
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           
  2535                           ;psect for function _get_tripwire
  2536  0F93                     _get_tripwire:	
  2537                           
  2538                           ;mainMaster.c: 246:     char trip;;mainMaster.c: 248:     I2C_Master_Start();
  2539                           
  2540                           ;incstack = 0
  2541                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  2542  0F93  120A  158A  26A3  120A  158A  	fcall	_I2C_Master_Start
  2543                           
  2544                           ;mainMaster.c: 249:     I2C_Master_Write(0x21);
  2545  0F98  3021               	movlw	33
  2546  0F99  00F0               	movwf	I2C_Master_Write@d
  2547  0F9A  3000               	movlw	0
  2548  0F9B  00F1               	movwf	I2C_Master_Write@d+1
  2549  0F9C  120A  158A  26B8  120A  158A  	fcall	_I2C_Master_Write
  2550                           
  2551                           ;mainMaster.c: 250:     trip = I2C_Master_Read(0);
  2552  0FA1  3000               	movlw	0
  2553  0FA2  00F0               	movwf	I2C_Master_Read@a
  2554  0FA3  00F1               	movwf	I2C_Master_Read@a+1
  2555  0FA4  120A  118A  2073  120A  158A  	fcall	_I2C_Master_Read
  2556  0FA9  0870               	movf	?_I2C_Master_Read,w
  2557  0FAA  00F6               	movwf	??_get_tripwire
  2558  0FAB  0876               	movf	??_get_tripwire,w
  2559  0FAC  00F7               	movwf	get_tripwire@trip
  2560                           
  2561                           ;mainMaster.c: 251:     I2C_Master_Stop();
  2562  0FAD  120A  158A  26AA   	fcall	_I2C_Master_Stop
  2563                           
  2564                           ;mainMaster.c: 253:     return (trip);
  2565  0FB0  0877               	movf	get_tripwire@trip,w
  2566  0FB1  0008               	return
  2567  0FB2                     __end_of_get_tripwire:	
  2568                           
  2569                           	psect	text10
  2570  034C                     __ptext10:	
  2571 ;; *************** function _get_time *****************
  2572 ;; Defined at:
  2573 ;;		line 165 in file "mainMaster.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;		None
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;  string_time     6    0[BANK0 ] unsigned char [6]
  2578 ;;  min             1    7[BANK0 ] unsigned char 
  2579 ;;  hour            1    6[BANK0 ] unsigned char 
  2580 ;; Return value:  Size  Location     Type
  2581 ;;                  1    wreg      PTR unsigned char 
  2582 ;; Registers used:
  2583 ;;		wreg, status,2, status,0, pclath, cstack
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2589 ;;      Params:         0       0       0       0       0
  2590 ;;      Locals:         0       8       0       0       0
  2591 ;;      Temps:          2       0       0       0       0
  2592 ;;      Totals:         2       8       0       0       0
  2593 ;;Total ram usage:       10 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    2
  2596 ;; This function calls:
  2597 ;;		_I2C_Master_Read
  2598 ;;		_I2C_Master_RepeatedStart
  2599 ;;		_I2C_Master_Start
  2600 ;;		_I2C_Master_Stop
  2601 ;;		_I2C_Master_Write
  2602 ;; This function is called by:
  2603 ;;		_main
  2604 ;; This function uses a non-reentrant model
  2605 ;;
  2606                           
  2607                           
  2608                           ;psect for function _get_time
  2609  034C                     _get_time:	
  2610                           
  2611                           ;mainMaster.c: 167:     char hour, min;;mainMaster.c: 168:     char string_time[6];;main
      +                          Master.c: 170:     I2C_Master_Start();
  2612                           
  2613                           ;incstack = 0
  2614                           ; Regs used in _get_time: [wreg+status,2+status,0+pclath+cstack]
  2615  034C  120A  158A  26A3  120A  118A  	fcall	_I2C_Master_Start
  2616                           
  2617                           ;mainMaster.c: 171:     I2C_Master_Write(0xD0);
  2618  0351  30D0               	movlw	208
  2619  0352  00F0               	movwf	I2C_Master_Write@d
  2620  0353  3000               	movlw	0
  2621  0354  00F1               	movwf	I2C_Master_Write@d+1
  2622  0355  120A  158A  26B8  120A  118A  	fcall	_I2C_Master_Write
  2623                           
  2624                           ;mainMaster.c: 172:     I2C_Master_Write(0x01);
  2625  035A  3001               	movlw	1
  2626  035B  00F0               	movwf	I2C_Master_Write@d
  2627  035C  3000               	movlw	0
  2628  035D  00F1               	movwf	I2C_Master_Write@d+1
  2629  035E  120A  158A  26B8  120A  118A  	fcall	_I2C_Master_Write
  2630                           
  2631                           ;mainMaster.c: 173:     I2C_Master_RepeatedStart();
  2632  0363  120A  158A  26B1  120A  118A  	fcall	_I2C_Master_RepeatedStart
  2633                           
  2634                           ;mainMaster.c: 174:     I2C_Master_Write(0xD1);
  2635  0368  30D1               	movlw	209
  2636  0369  00F0               	movwf	I2C_Master_Write@d
  2637  036A  3000               	movlw	0
  2638  036B  00F1               	movwf	I2C_Master_Write@d+1
  2639  036C  120A  158A  26B8  120A  118A  	fcall	_I2C_Master_Write
  2640                           
  2641                           ;mainMaster.c: 175:     min = I2C_Master_Read(1);
  2642  0371  3001               	movlw	1
  2643  0372  00F0               	movwf	I2C_Master_Read@a
  2644  0373  3000               	movlw	0
  2645  0374  00F1               	movwf	I2C_Master_Read@a+1
  2646  0375  120A  118A  2073  120A  118A  	fcall	_I2C_Master_Read
  2647  037A  0870               	movf	?_I2C_Master_Read,w
  2648  037B  00F6               	movwf	??_get_time
  2649  037C  0876               	movf	??_get_time,w
  2650  037D  1283               	bcf	3,5	;RP0=0, select bank0
  2651  037E  1303               	bcf	3,6	;RP1=0, select bank0
  2652  037F  00A7               	movwf	get_time@min
  2653                           
  2654                           ;mainMaster.c: 176:     hour = I2C_Master_Read(0);
  2655  0380  3000               	movlw	0
  2656  0381  00F0               	movwf	I2C_Master_Read@a
  2657  0382  00F1               	movwf	I2C_Master_Read@a+1
  2658  0383  120A  118A  2073  120A  118A  	fcall	_I2C_Master_Read
  2659  0388  0870               	movf	?_I2C_Master_Read,w
  2660  0389  00F6               	movwf	??_get_time
  2661  038A  0876               	movf	??_get_time,w
  2662  038B  1283               	bcf	3,5	;RP0=0, select bank0
  2663  038C  1303               	bcf	3,6	;RP1=0, select bank0
  2664  038D  00A6               	movwf	get_time@hour
  2665                           
  2666                           ;mainMaster.c: 177:     I2C_Master_Stop();
  2667  038E  120A  158A  26AA  120A  118A  	fcall	_I2C_Master_Stop
  2668                           
  2669                           ;mainMaster.c: 179:     string_time[0] = (hour >> 4) + '0';
  2670  0393  1283               	bcf	3,5	;RP0=0, select bank0
  2671  0394  1303               	bcf	3,6	;RP1=0, select bank0
  2672  0395  0826               	movf	get_time@hour,w
  2673  0396  00F6               	movwf	??_get_time
  2674  0397  3004               	movlw	4
  2675  0398                     u1565:	
  2676  0398  1003               	clrc
  2677  0399  0CF6               	rrf	??_get_time,f
  2678  039A  3EFF               	addlw	-1
  2679  039B  1D03               	skipz
  2680  039C  2B98               	goto	u1565
  2681  039D  0876               	movf	??_get_time,w
  2682  039E  3E30               	addlw	48
  2683  039F  00F7               	movwf	??_get_time+1
  2684  03A0  0877               	movf	??_get_time+1,w
  2685  03A1  00A0               	movwf	get_time@string_time
  2686                           
  2687                           ;mainMaster.c: 180:     string_time[1] = (hour & 0x0F) + '0';
  2688  03A2  0826               	movf	get_time@hour,w
  2689  03A3  390F               	andlw	15
  2690  03A4  3E30               	addlw	48
  2691  03A5  00F6               	movwf	??_get_time
  2692  03A6  0876               	movf	??_get_time,w
  2693  03A7  00A1               	movwf	get_time@string_time+1
  2694                           
  2695                           ;mainMaster.c: 181:     string_time[2] = ':';
  2696  03A8  303A               	movlw	58
  2697  03A9  00F6               	movwf	??_get_time
  2698  03AA  0876               	movf	??_get_time,w
  2699  03AB  00A2               	movwf	get_time@string_time+2
  2700                           
  2701                           ;mainMaster.c: 182:     string_time[3] = (min >> 4) + '0';
  2702  03AC  0827               	movf	get_time@min,w
  2703  03AD  00F6               	movwf	??_get_time
  2704  03AE  3004               	movlw	4
  2705  03AF                     u1575:	
  2706  03AF  1003               	clrc
  2707  03B0  0CF6               	rrf	??_get_time,f
  2708  03B1  3EFF               	addlw	-1
  2709  03B2  1D03               	skipz
  2710  03B3  2BAF               	goto	u1575
  2711  03B4  0876               	movf	??_get_time,w
  2712  03B5  3E30               	addlw	48
  2713  03B6  00F7               	movwf	??_get_time+1
  2714  03B7  0877               	movf	??_get_time+1,w
  2715  03B8  00A3               	movwf	get_time@string_time+3
  2716                           
  2717                           ;mainMaster.c: 183:     string_time[4] = (min & 0x0F) + '0';
  2718  03B9  0827               	movf	get_time@min,w
  2719  03BA  390F               	andlw	15
  2720  03BB  3E30               	addlw	48
  2721  03BC  00F6               	movwf	??_get_time
  2722  03BD  0876               	movf	??_get_time,w
  2723  03BE  00A4               	movwf	get_time@string_time+4
  2724                           
  2725                           ;mainMaster.c: 184:     string_time[5] = '\0';
  2726  03BF  01A5               	clrf	get_time@string_time+5
  2727                           
  2728                           ;mainMaster.c: 186:     return (string_time);
  2729  03C0  3020               	movlw	(low (get_time@string_time| 0))& (0+255)
  2730  03C1  0008               	return
  2731  03C2                     __end_of_get_time:	
  2732                           
  2733                           	psect	text11
  2734  0451                     __ptext11:	
  2735 ;; *************** function _get_temp *****************
  2736 ;; Defined at:
  2737 ;;		line 204 in file "mainMaster.c"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;		None
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  temperature     6   16[BANK0 ] unsigned char [6]
  2742 ;;  decimal         3   22[BANK0 ] unsigned char [3]
  2743 ;;  tempLSB         1   26[BANK0 ] unsigned char 
  2744 ;;  tempMSB         1   25[BANK0 ] unsigned char 
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  1    wreg      PTR unsigned char 
  2747 ;; Registers used:
  2748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2754 ;;      Params:         0       0       0       0       0
  2755 ;;      Locals:         0      11       0       0       0
  2756 ;;      Temps:          0       3       0       0       0
  2757 ;;      Totals:         0      14       0       0       0
  2758 ;;Total ram usage:       14 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    2
  2761 ;; This function calls:
  2762 ;;		_I2C_Master_Read
  2763 ;;		_I2C_Master_RepeatedStart
  2764 ;;		_I2C_Master_Start
  2765 ;;		_I2C_Master_Stop
  2766 ;;		_I2C_Master_Write
  2767 ;;		___bmul
  2768 ;;		_sprintf
  2769 ;;		_strcat
  2770 ;; This function is called by:
  2771 ;;		_main
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           
  2776                           ;psect for function _get_temp
  2777  0451                     _get_temp:	
  2778                           
  2779                           ;mainMaster.c: 206:     char tempLSB, tempMSB;;mainMaster.c: 207:     char temperature[6
      +                          ], decimal[3];;mainMaster.c: 209:     I2C_Master_Start();
  2780                           
  2781                           ;incstack = 0
  2782                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2783  0451  120A  158A  26A3  120A  118A  	fcall	_I2C_Master_Start
  2784                           
  2785                           ;mainMaster.c: 210:     I2C_Master_Write(0xD0);
  2786  0456  30D0               	movlw	208
  2787  0457  00F0               	movwf	I2C_Master_Write@d
  2788  0458  3000               	movlw	0
  2789  0459  00F1               	movwf	I2C_Master_Write@d+1
  2790  045A  120A  158A  26B8  120A  118A  	fcall	_I2C_Master_Write
  2791                           
  2792                           ;mainMaster.c: 211:     I2C_Master_Write(0x11);
  2793  045F  3011               	movlw	17
  2794  0460  00F0               	movwf	I2C_Master_Write@d
  2795  0461  3000               	movlw	0
  2796  0462  00F1               	movwf	I2C_Master_Write@d+1
  2797  0463  120A  158A  26B8  120A  118A  	fcall	_I2C_Master_Write
  2798                           
  2799                           ;mainMaster.c: 212:     I2C_Master_RepeatedStart();
  2800  0468  120A  158A  26B1  120A  118A  	fcall	_I2C_Master_RepeatedStart
  2801                           
  2802                           ;mainMaster.c: 213:     I2C_Master_Write(0xD1);
  2803  046D  30D1               	movlw	209
  2804  046E  00F0               	movwf	I2C_Master_Write@d
  2805  046F  3000               	movlw	0
  2806  0470  00F1               	movwf	I2C_Master_Write@d+1
  2807  0471  120A  158A  26B8  120A  118A  	fcall	_I2C_Master_Write
  2808                           
  2809                           ;mainMaster.c: 214:     tempMSB = I2C_Master_Read(1);
  2810  0476  3001               	movlw	1
  2811  0477  00F0               	movwf	I2C_Master_Read@a
  2812  0478  3000               	movlw	0
  2813  0479  00F1               	movwf	I2C_Master_Read@a+1
  2814  047A  120A  118A  2073  120A  118A  	fcall	_I2C_Master_Read
  2815  047F  0870               	movf	?_I2C_Master_Read,w
  2816  0480  1283               	bcf	3,5	;RP0=0, select bank0
  2817  0481  1303               	bcf	3,6	;RP1=0, select bank0
  2818  0482  00AD               	movwf	??_get_temp
  2819  0483  082D               	movf	??_get_temp,w
  2820  0484  00B9               	movwf	get_temp@tempMSB
  2821                           
  2822                           ;mainMaster.c: 215:     tempLSB = I2C_Master_Read(0);
  2823  0485  3000               	movlw	0
  2824  0486  00F0               	movwf	I2C_Master_Read@a
  2825  0487  00F1               	movwf	I2C_Master_Read@a+1
  2826  0488  120A  118A  2073  120A  118A  	fcall	_I2C_Master_Read
  2827  048D  0870               	movf	?_I2C_Master_Read,w
  2828  048E  1283               	bcf	3,5	;RP0=0, select bank0
  2829  048F  1303               	bcf	3,6	;RP1=0, select bank0
  2830  0490  00AD               	movwf	??_get_temp
  2831  0491  082D               	movf	??_get_temp,w
  2832  0492  00BA               	movwf	get_temp@tempLSB
  2833                           
  2834                           ;mainMaster.c: 216:     I2C_Master_Stop();
  2835  0493  120A  158A  26AA  120A  118A  	fcall	_I2C_Master_Stop
  2836                           
  2837                           ;mainMaster.c: 218:     tempMSB = tempMSB - 4;
  2838  0498  1283               	bcf	3,5	;RP0=0, select bank0
  2839  0499  1303               	bcf	3,6	;RP1=0, select bank0
  2840  049A  0839               	movf	get_temp@tempMSB,w
  2841  049B  3EFC               	addlw	252
  2842  049C  00AD               	movwf	??_get_temp
  2843  049D  082D               	movf	??_get_temp,w
  2844  049E  00B9               	movwf	get_temp@tempMSB
  2845                           
  2846                           ;mainMaster.c: 219:     tempLSB = (tempLSB >> 6) * 25;
  2847  049F  3019               	movlw	25
  2848  04A0  00AD               	movwf	??_get_temp
  2849  04A1  082D               	movf	??_get_temp,w
  2850  04A2  00F0               	movwf	___bmul@multiplicand
  2851  04A3  083A               	movf	get_temp@tempLSB,w
  2852  04A4  00AE               	movwf	??_get_temp+1
  2853  04A5  3006               	movlw	6
  2854  04A6                     u1545:	
  2855  04A6  1003               	clrc
  2856  04A7  0CAE               	rrf	??_get_temp+1,f
  2857  04A8  3EFF               	addlw	-1
  2858  04A9  1D03               	skipz
  2859  04AA  2CA6               	goto	u1545
  2860  04AB  082E               	movf	??_get_temp+1,w
  2861  04AC  120A  158A  26D3  120A  118A  	fcall	___bmul
  2862  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  2863  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  2864  04B3  00AF               	movwf	??_get_temp+2
  2865  04B4  082F               	movf	??_get_temp+2,w
  2866  04B5  00BA               	movwf	get_temp@tempLSB
  2867                           
  2868                           ;mainMaster.c: 220:     sprintf(temperature, "%d", tempMSB);
  2869  04B6  3051               	movlw	(low (((STR_12+1)-__stringbase)| (0+32768)))& (0+255)
  2870  04B7  00AD               	movwf	??_get_temp
  2871  04B8  082D               	movf	??_get_temp,w
  2872  04B9  00A0               	movwf	sprintf@f
  2873  04BA  0839               	movf	get_temp@tempMSB,w
  2874  04BB  00AE               	movwf	??_get_temp+1
  2875  04BC  01AF               	clrf	??_get_temp+2
  2876  04BD  082E               	movf	??_get_temp+1,w
  2877  04BE  00A1               	movwf	?_sprintf+1
  2878  04BF  082F               	movf	??_get_temp+2,w
  2879  04C0  00A2               	movwf	?_sprintf+2
  2880  04C1  3030               	movlw	(low (get_temp@temperature| 0))& (0+255)
  2881  04C2  120A  118A  25C4  120A  118A  	fcall	_sprintf
  2882                           
  2883                           ;mainMaster.c: 221:     if (tempLSB == 0){
  2884  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  2885  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  2886  04C9  083A               	movf	get_temp@tempLSB,w
  2887  04CA  1D03               	btfss	3,2
  2888  04CB  2CCE               	goto	l2017
  2889                           
  2890                           ;mainMaster.c: 222:         sprintf(decimal, ".%d0", tempLSB);
  2891  04CC  304B               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2892  04CD  2CCF               	goto	L8
  2893  04CE                     l2017:	
  2894                           ;mainMaster.c: 223:     } else {
  2895                           
  2896                           
  2897                           ;mainMaster.c: 224:         sprintf(decimal, ".%d", tempLSB);
  2898  04CE  3050               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2899  04CF                     L8:	
  2900  04CF  00AD               	movwf	??_get_temp
  2901  04D0  082D               	movf	??_get_temp,w
  2902  04D1  00A0               	movwf	sprintf@f
  2903  04D2  083A               	movf	get_temp@tempLSB,w
  2904  04D3  00AE               	movwf	??_get_temp+1
  2905  04D4  01AF               	clrf	??_get_temp+2
  2906  04D5  082E               	movf	??_get_temp+1,w
  2907  04D6  00A1               	movwf	?_sprintf+1
  2908  04D7  082F               	movf	??_get_temp+2,w
  2909  04D8  00A2               	movwf	?_sprintf+2
  2910  04D9  3036               	movlw	(low (get_temp@decimal| 0))& (0+255)
  2911  04DA  120A  118A  25C4  120A  118A  	fcall	_sprintf
  2912                           
  2913                           ;mainMaster.c: 226:     strcat(temperature, decimal);
  2914  04DF  3036               	movlw	(low (get_temp@decimal| 0))& (0+255)
  2915  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  2916  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  2917  04E2  00AD               	movwf	??_get_temp
  2918  04E3  082D               	movf	??_get_temp,w
  2919  04E4  00F0               	movwf	strcat@from
  2920  04E5  3030               	movlw	(low (get_temp@temperature| 0))& (0+255)
  2921  04E6  120A  158A  27B2   	fcall	_strcat
  2922                           
  2923                           ;mainMaster.c: 227:     temperature[5] = '\0';
  2924  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  2925  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  2926  04EB  01B5               	clrf	get_temp@temperature+5
  2927                           
  2928                           ;mainMaster.c: 229:     return (temperature);
  2929  04EC  3030               	movlw	(low (get_temp@temperature| 0))& (0+255)
  2930  04ED  0008               	return
  2931  04EE                     __end_of_get_temp:	
  2932                           
  2933                           	psect	text12
  2934  0FB2                     __ptext12:	
  2935 ;; *************** function _strcat *****************
  2936 ;; Defined at:
  2937 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;  to              1    wreg     PTR unsigned char 
  2940 ;;		 -> get_temp@temperature(6), 
  2941 ;;  from            1    0[COMMON] PTR const unsigned char 
  2942 ;;		 -> get_temp@decimal(3), 
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  to              1    2[COMMON] PTR unsigned char 
  2945 ;;		 -> get_temp@temperature(6), 
  2946 ;;  cp              1    3[COMMON] PTR unsigned char 
  2947 ;;		 -> get_temp@temperature(6), 
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  1    wreg      PTR unsigned char 
  2950 ;; Registers used:
  2951 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2957 ;;      Params:         1       0       0       0       0
  2958 ;;      Locals:         2       0       0       0       0
  2959 ;;      Temps:          1       0       0       0       0
  2960 ;;      Totals:         4       0       0       0       0
  2961 ;;Total ram usage:        4 bytes
  2962 ;; Hardware stack levels used:    1
  2963 ;; This function calls:
  2964 ;;		Nothing
  2965 ;; This function is called by:
  2966 ;;		_get_temp
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           
  2971                           ;psect for function _strcat
  2972  0FB2                     _strcat:	
  2973                           
  2974                           ;incstack = 0
  2975                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  2976                           ;strcat@to stored from wreg
  2977  0FB2  00F2               	movwf	strcat@to
  2978  0FB3  0872               	movf	strcat@to,w
  2979  0FB4  00F1               	movwf	??_strcat
  2980  0FB5  0871               	movf	??_strcat,w
  2981  0FB6  00F3               	movwf	strcat@cp
  2982  0FB7                     l1923:	
  2983  0FB7  0873               	movf	strcat@cp,w
  2984  0FB8  0084               	movwf	4
  2985  0FB9  1383               	bcf	3,7	;select IRP bank0
  2986  0FBA  0800               	movf	0,w
  2987  0FBB  1903               	btfsc	3,2
  2988  0FBC  2FCA               	goto	l1927
  2989  0FBD  3001               	movlw	1
  2990  0FBE  00F1               	movwf	??_strcat
  2991  0FBF  0871               	movf	??_strcat,w
  2992  0FC0  07F3               	addwf	strcat@cp,f
  2993  0FC1  2FB7               	goto	l1923
  2994  0FC2                     l1925:	
  2995  0FC2  3001               	movlw	1
  2996  0FC3  00F1               	movwf	??_strcat
  2997  0FC4  0871               	movf	??_strcat,w
  2998  0FC5  07F3               	addwf	strcat@cp,f
  2999  0FC6  3001               	movlw	1
  3000  0FC7  00F1               	movwf	??_strcat
  3001  0FC8  0871               	movf	??_strcat,w
  3002  0FC9  07F0               	addwf	strcat@from,f
  3003  0FCA                     l1927:	
  3004  0FCA  0870               	movf	strcat@from,w
  3005  0FCB  0084               	movwf	4
  3006  0FCC  0800               	movf	0,w
  3007  0FCD  00F1               	movwf	??_strcat
  3008  0FCE  0873               	movf	strcat@cp,w
  3009  0FCF  0084               	movwf	4
  3010  0FD0  0871               	movf	??_strcat,w
  3011  0FD1  0080               	movwf	0
  3012  0FD2  0800               	movf	0,w
  3013  0FD3  1903               	btfsc	3,2
  3014  0FD4  0008               	return
  3015  0FD5  2FC2               	goto	l1925
  3016  0FD6                     __end_of_strcat:	
  3017                           
  3018                           	psect	text13
  3019  05C4                     __ptext13:	
  3020 ;; *************** function _sprintf *****************
  3021 ;; Defined at:
  3022 ;;		line 500 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  sp              1    wreg     PTR unsigned char 
  3025 ;;		 -> get_temp@decimal(3), get_temp@temperature(6), 
  3026 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  3027 ;;		 -> STR_12(4), STR_11(5), STR_10(3), 
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  3030 ;;		 -> get_temp@decimal(3), get_temp@temperature(6), 
  3031 ;;  tmpval          4    0        struct .
  3032 ;;  val             2    9[BANK0 ] unsigned int 
  3033 ;;  cp              2    0        PTR const unsigned char 
  3034 ;;  len             2    0        unsigned int 
  3035 ;;  c               1   12[BANK0 ] unsigned char 
  3036 ;;  prec            1    8[BANK0 ] char 
  3037 ;;  flag            1    7[BANK0 ] unsigned char 
  3038 ;;  ap              1    6[BANK0 ] PTR void [1]
  3039 ;;		 -> ?_sprintf(2), 
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  2    0[BANK0 ] int 
  3042 ;; Registers used:
  3043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3049 ;;      Params:         0       3       0       0       0
  3050 ;;      Locals:         0       7       0       0       0
  3051 ;;      Temps:          0       3       0       0       0
  3052 ;;      Totals:         0      13       0       0       0
  3053 ;;Total ram usage:       13 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; Hardware stack levels required when called:    1
  3056 ;; This function calls:
  3057 ;;		___lwdiv
  3058 ;;		___lwmod
  3059 ;; This function is called by:
  3060 ;;		_get_temp
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           
  3065                           ;psect for function _sprintf
  3066  05C4                     _sprintf:	
  3067                           
  3068                           ;incstack = 0
  3069                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3070                           ;sprintf@sp stored from wreg
  3071  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  3072  05C5  1303               	bcf	3,6	;RP1=0, select bank0
  3073  05C6  00AB               	movwf	sprintf@sp
  3074                           
  3075                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;D:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  3076  05C7  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  3077  05C8  00A3               	movwf	??_sprintf
  3078  05C9  0823               	movf	??_sprintf,w
  3079  05CA  00A6               	movwf	sprintf@ap
  3080  05CB                     l1909:	
  3081                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  3082                           
  3083                           
  3084                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  3085  05CB  3001               	movlw	1
  3086  05CC  07A0               	addwf	sprintf@f,f
  3087  05CD  30FF               	movlw	-1
  3088  05CE  0720               	addwf	sprintf@f,w
  3089  05CF  0084               	movwf	4
  3090  05D0  120A  118A  200D  120A  118A  	fcall	stringdir
  3091  05D5  00A3               	movwf	??_sprintf
  3092  05D6  0823               	movf	??_sprintf,w
  3093  05D7  00AC               	movwf	sprintf@c
  3094  05D8  082C               	movf	sprintf@c,w
  3095  05D9  1903               	btfsc	3,2
  3096  05DA  2E97               	goto	l1911
  3097                           
  3098                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  3099  05DB  3025               	movlw	37
  3100  05DC  062C               	xorwf	sprintf@c,w
  3101  05DD  1903               	btfsc	3,2
  3102  05DE  2DEB               	goto	l1865
  3103                           
  3104                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;D:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  3105  05DF  082C               	movf	sprintf@c,w
  3106  05E0  00A3               	movwf	??_sprintf
  3107  05E1  082B               	movf	sprintf@sp,w
  3108  05E2  0084               	movwf	4
  3109  05E3  0823               	movf	??_sprintf,w
  3110  05E4  1383               	bcf	3,7	;select IRP bank0
  3111  05E5  0080               	movwf	0
  3112  05E6  3001               	movlw	1
  3113  05E7  00A3               	movwf	??_sprintf
  3114  05E8  0823               	movf	??_sprintf,w
  3115  05E9  07AB               	addwf	sprintf@sp,f
  3116                           
  3117                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  3118  05EA  2DCB               	goto	l1909
  3119  05EB                     l1865:	
  3120                           
  3121                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  3122  05EB  01A7               	clrf	sprintf@flag
  3123                           
  3124                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  3125  05EC  3001               	movlw	1
  3126  05ED  07A0               	addwf	sprintf@f,f
  3127  05EE  30FF               	movlw	-1
  3128  05EF  0720               	addwf	sprintf@f,w
  3129  05F0  0084               	movwf	4
  3130  05F1  120A  118A  200D  120A  118A  	fcall	stringdir
  3131  05F6  00AC               	movwf	sprintf@c
  3132  05F7  00A3               	movwf	??_sprintf
  3133  05F8  01A4               	clrf	??_sprintf+1
  3134                           
  3135                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3136                           ; Switch size 1, requested type "simple"
  3137                           ; Number of cases is 1, Range of values is 0 to 0
  3138                           ; switch strategies available:
  3139                           ; Name         Instructions Cycles
  3140                           ; simple_byte            4     3 (average)
  3141                           ; direct_byte           11     8 (fixed)
  3142                           ; jumptable            260     6 (fixed)
  3143                           ;	Chosen strategy is simple_byte
  3144  05F9  0824               	movf	??_sprintf+1,w
  3145  05FA  3A00               	xorlw	0	; case 0
  3146  05FB  1903               	skipnz
  3147  05FC  2DFE               	goto	l2225
  3148  05FD  2DCB               	goto	l1909
  3149  05FE                     l2225:	
  3150                           
  3151                           ; Switch size 1, requested type "simple"
  3152                           ; Number of cases is 3, Range of values is 0 to 105
  3153                           ; switch strategies available:
  3154                           ; Name         Instructions Cycles
  3155                           ; simple_byte           10     6 (average)
  3156                           ; jumptable            260     6 (fixed)
  3157                           ;	Chosen strategy is simple_byte
  3158  05FE  0823               	movf	??_sprintf,w
  3159  05FF  3A00               	xorlw	0	; case 0
  3160  0600  1903               	skipnz
  3161  0601  2E97               	goto	l1911
  3162  0602  3A64               	xorlw	100	; case 100
  3163  0603  1903               	skipnz
  3164  0604  2E09               	goto	l1871
  3165  0605  3A0D               	xorlw	13	; case 105
  3166  0606  1903               	skipnz
  3167  0607  2E09               	goto	l1871
  3168  0608  2DCB               	goto	l1909
  3169  0609                     l1871:	
  3170                           
  3171                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3172  0609  0826               	movf	sprintf@ap,w
  3173  060A  0084               	movwf	4
  3174  060B  1383               	bcf	3,7	;select IRP bank0
  3175  060C  0800               	movf	0,w
  3176  060D  00A9               	movwf	sprintf@val
  3177  060E  0A84               	incf	4,f
  3178  060F  0800               	movf	0,w
  3179  0610  00AA               	movwf	sprintf@val+1
  3180  0611  3002               	movlw	2
  3181  0612  00A3               	movwf	??_sprintf
  3182  0613  0823               	movf	??_sprintf,w
  3183  0614  07A6               	addwf	sprintf@ap,f
  3184                           
  3185                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  3186  0615  1FAA               	btfss	sprintf@val+1,7
  3187  0616  2E20               	goto	l1881
  3188                           
  3189                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  3190  0617  3003               	movlw	3
  3191  0618  00A3               	movwf	??_sprintf
  3192  0619  0823               	movf	??_sprintf,w
  3193  061A  04A7               	iorwf	sprintf@flag,f
  3194                           
  3195                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  3196  061B  09A9               	comf	sprintf@val,f
  3197  061C  09AA               	comf	sprintf@val+1,f
  3198  061D  0AA9               	incf	sprintf@val,f
  3199  061E  1903               	skipnz
  3200  061F  0AAA               	incf	sprintf@val+1,f
  3201  0620                     l1881:	
  3202                           
  3203                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3204  0620  01AC               	clrf	sprintf@c
  3205  0621  0AAC               	incf	sprintf@c,f
  3206  0622                     l1887:	
  3207                           
  3208                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  3209  0622  082C               	movf	sprintf@c,w
  3210  0623  00A3               	movwf	??_sprintf
  3211  0624  0723               	addwf	??_sprintf,w
  3212  0625  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3213  0626  0084               	movwf	4
  3214  0627  120A  118A  200D  120A  118A  	fcall	stringdir
  3215  062C  00A4               	movwf	??_sprintf+1
  3216  062D  120A  118A  200D  120A  118A  	fcall	stringdir
  3217  0632  00A5               	movwf	??_sprintf+2
  3218  0633  0825               	movf	??_sprintf+2,w
  3219  0634  022A               	subwf	sprintf@val+1,w
  3220  0635  1D03               	skipz
  3221  0636  2E39               	goto	u1375
  3222  0637  0824               	movf	??_sprintf+1,w
  3223  0638  0229               	subwf	sprintf@val,w
  3224  0639                     u1375:	
  3225  0639  1C03               	btfss	3,0
  3226  063A  2E43               	goto	l1893
  3227  063B  3001               	movlw	1
  3228  063C  00A3               	movwf	??_sprintf
  3229  063D  0823               	movf	??_sprintf,w
  3230  063E  07AC               	addwf	sprintf@c,f
  3231  063F  3005               	movlw	5
  3232  0640  062C               	xorwf	sprintf@c,w
  3233  0641  1D03               	btfss	3,2
  3234  0642  2E22               	goto	l1887
  3235  0643                     l1893:	
  3236                           
  3237                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  3238  0643  0827               	movf	sprintf@flag,w
  3239  0644  3903               	andlw	3
  3240  0645  1903               	btfsc	3,2
  3241  0646  2E52               	goto	l1899
  3242                           
  3243                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  3244  0647  302D               	movlw	45
  3245  0648  00A3               	movwf	??_sprintf
  3246  0649  082B               	movf	sprintf@sp,w
  3247  064A  0084               	movwf	4
  3248  064B  0823               	movf	??_sprintf,w
  3249  064C  1383               	bcf	3,7	;select IRP bank0
  3250  064D  0080               	movwf	0
  3251  064E  3001               	movlw	1
  3252  064F  00A3               	movwf	??_sprintf
  3253  0650  0823               	movf	??_sprintf,w
  3254  0651  07AB               	addwf	sprintf@sp,f
  3255  0652                     l1899:	
  3256                           
  3257                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  3258  0652  082C               	movf	sprintf@c,w
  3259  0653  00A3               	movwf	??_sprintf
  3260  0654  0823               	movf	??_sprintf,w
  3261  0655  00A8               	movwf	sprintf@prec
  3262  0656                     l1907:	
  3263                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  3264                           
  3265                           
  3266                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  3267  0656  30FF               	movlw	255
  3268  0657  00A3               	movwf	??_sprintf
  3269  0658  0823               	movf	??_sprintf,w
  3270  0659  07A8               	addwf	sprintf@prec,f
  3271  065A  0A28               	incf	sprintf@prec,w
  3272  065B  1903               	btfsc	3,2
  3273  065C  2DCB               	goto	l1909
  3274                           
  3275                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  3276  065D  300A               	movlw	10
  3277  065E  00F8               	movwf	___lwmod@divisor
  3278  065F  3000               	movlw	0
  3279  0660  00F9               	movwf	___lwmod@divisor+1
  3280  0661  0828               	movf	sprintf@prec,w
  3281  0662  00A3               	movwf	??_sprintf
  3282  0663  0723               	addwf	??_sprintf,w
  3283  0664  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3284  0665  0084               	movwf	4
  3285  0666  120A  118A  200D  120A  118A  	fcall	stringdir
  3286  066B  00F0               	movwf	___lwdiv@divisor
  3287  066C  120A  118A  200D  120A  118A  	fcall	stringdir
  3288  0671  00F1               	movwf	___lwdiv@divisor+1
  3289  0672  082A               	movf	sprintf@val+1,w
  3290  0673  00F3               	movwf	___lwdiv@dividend+1
  3291  0674  0829               	movf	sprintf@val,w
  3292  0675  00F2               	movwf	___lwdiv@dividend
  3293  0676  120A  118A  217B  120A  118A  	fcall	___lwdiv
  3294  067B  0871               	movf	?___lwdiv+1,w
  3295  067C  00FB               	movwf	___lwmod@dividend+1
  3296  067D  0870               	movf	?___lwdiv,w
  3297  067E  00FA               	movwf	___lwmod@dividend
  3298  067F  120A  118A  209F  120A  118A  	fcall	___lwmod
  3299  0684  0878               	movf	?___lwmod,w
  3300  0685  3E30               	addlw	48
  3301  0686  1283               	bcf	3,5	;RP0=0, select bank0
  3302  0687  1303               	bcf	3,6	;RP1=0, select bank0
  3303  0688  00A4               	movwf	??_sprintf+1
  3304  0689  0824               	movf	??_sprintf+1,w
  3305  068A  00AC               	movwf	sprintf@c
  3306                           
  3307                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  3308  068B  082C               	movf	sprintf@c,w
  3309  068C  00A3               	movwf	??_sprintf
  3310  068D  082B               	movf	sprintf@sp,w
  3311  068E  0084               	movwf	4
  3312  068F  0823               	movf	??_sprintf,w
  3313  0690  1383               	bcf	3,7	;select IRP bank0
  3314  0691  0080               	movwf	0
  3315  0692  3001               	movlw	1
  3316  0693  00A3               	movwf	??_sprintf
  3317  0694  0823               	movf	??_sprintf,w
  3318  0695  07AB               	addwf	sprintf@sp,f
  3319  0696  2E56               	goto	l1907
  3320  0697                     l1911:	
  3321                           
  3322                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  3323  0697  082B               	movf	sprintf@sp,w
  3324  0698  0084               	movwf	4
  3325  0699  1383               	bcf	3,7	;select IRP bank0
  3326  069A  0180               	clrf	0
  3327  069B  0008               	return
  3328  069C                     __end_of_sprintf:	
  3329                           
  3330                           	psect	text14
  3331  009F                     __ptext14:	
  3332 ;; *************** function ___lwmod *****************
  3333 ;; Defined at:
  3334 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;  divisor         2    8[COMMON] unsigned int 
  3337 ;;  dividend        2   10[COMMON] unsigned int 
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;  counter         1   13[COMMON] unsigned char 
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  2    8[COMMON] unsigned int 
  3342 ;; Registers used:
  3343 ;;		wreg, status,2, status,0
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3349 ;;      Params:         4       0       0       0       0
  3350 ;;      Locals:         1       0       0       0       0
  3351 ;;      Temps:          1       0       0       0       0
  3352 ;;      Totals:         6       0       0       0       0
  3353 ;;Total ram usage:        6 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; This function calls:
  3356 ;;		Nothing
  3357 ;; This function is called by:
  3358 ;;		_sprintf
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           
  3363                           ;psect for function ___lwmod
  3364  009F                     ___lwmod:	
  3365                           
  3366                           ;incstack = 0
  3367                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3368  009F  0878               	movf	___lwmod@divisor,w
  3369  00A0  0479               	iorwf	___lwmod@divisor+1,w
  3370  00A1  1903               	btfsc	3,2
  3371  00A2  28CC               	goto	l1721
  3372  00A3  01FD               	clrf	___lwmod@counter
  3373  00A4  0AFD               	incf	___lwmod@counter,f
  3374  00A5                     l1711:	
  3375  00A5  1BF9               	btfsc	___lwmod@divisor+1,7
  3376  00A6  28B3               	goto	l1713
  3377  00A7  3001               	movlw	1
  3378  00A8                     u1185:	
  3379  00A8  1003               	clrc
  3380  00A9  0DF8               	rlf	___lwmod@divisor,f
  3381  00AA  0DF9               	rlf	___lwmod@divisor+1,f
  3382  00AB  3EFF               	addlw	-1
  3383  00AC  1D03               	skipz
  3384  00AD  28A8               	goto	u1185
  3385  00AE  3001               	movlw	1
  3386  00AF  00FC               	movwf	??___lwmod
  3387  00B0  087C               	movf	??___lwmod,w
  3388  00B1  07FD               	addwf	___lwmod@counter,f
  3389  00B2  28A5               	goto	l1711
  3390  00B3                     l1713:	
  3391  00B3  0879               	movf	___lwmod@divisor+1,w
  3392  00B4  027B               	subwf	___lwmod@dividend+1,w
  3393  00B5  1D03               	skipz
  3394  00B6  28B9               	goto	u1205
  3395  00B7  0878               	movf	___lwmod@divisor,w
  3396  00B8  027A               	subwf	___lwmod@dividend,w
  3397  00B9                     u1205:	
  3398  00B9  1C03               	skipc
  3399  00BA  28C1               	goto	l1717
  3400  00BB  0878               	movf	___lwmod@divisor,w
  3401  00BC  02FA               	subwf	___lwmod@dividend,f
  3402  00BD  0879               	movf	___lwmod@divisor+1,w
  3403  00BE  1C03               	skipc
  3404  00BF  03FB               	decf	___lwmod@dividend+1,f
  3405  00C0  02FB               	subwf	___lwmod@dividend+1,f
  3406  00C1                     l1717:	
  3407  00C1  3001               	movlw	1
  3408  00C2                     u1215:	
  3409  00C2  1003               	clrc
  3410  00C3  0CF9               	rrf	___lwmod@divisor+1,f
  3411  00C4  0CF8               	rrf	___lwmod@divisor,f
  3412  00C5  3EFF               	addlw	-1
  3413  00C6  1D03               	skipz
  3414  00C7  28C2               	goto	u1215
  3415  00C8  3001               	movlw	1
  3416  00C9  02FD               	subwf	___lwmod@counter,f
  3417  00CA  1D03               	btfss	3,2
  3418  00CB  28B3               	goto	l1713
  3419  00CC                     l1721:	
  3420  00CC  087B               	movf	___lwmod@dividend+1,w
  3421  00CD  00F9               	movwf	?___lwmod+1
  3422  00CE  087A               	movf	___lwmod@dividend,w
  3423  00CF  00F8               	movwf	?___lwmod
  3424  00D0  0008               	return
  3425  00D1                     __end_of___lwmod:	
  3426                           
  3427                           	psect	text15
  3428  017B                     __ptext15:	
  3429 ;; *************** function ___lwdiv *****************
  3430 ;; Defined at:
  3431 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;  divisor         2    0[COMMON] unsigned int 
  3434 ;;  dividend        2    2[COMMON] unsigned int 
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;  quotient        2    5[COMMON] unsigned int 
  3437 ;;  counter         1    7[COMMON] unsigned char 
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  2    0[COMMON] unsigned int 
  3440 ;; Registers used:
  3441 ;;		wreg, status,2, status,0
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3447 ;;      Params:         4       0       0       0       0
  3448 ;;      Locals:         3       0       0       0       0
  3449 ;;      Temps:          1       0       0       0       0
  3450 ;;      Totals:         8       0       0       0       0
  3451 ;;Total ram usage:        8 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; This function calls:
  3454 ;;		Nothing
  3455 ;; This function is called by:
  3456 ;;		_sprintf
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           
  3461                           ;psect for function ___lwdiv
  3462  017B                     ___lwdiv:	
  3463                           
  3464                           ;incstack = 0
  3465                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3466  017B  01F5               	clrf	___lwdiv@quotient
  3467  017C  01F6               	clrf	___lwdiv@quotient+1
  3468  017D  0870               	movf	___lwdiv@divisor,w
  3469  017E  0471               	iorwf	___lwdiv@divisor+1,w
  3470  017F  1903               	btfsc	3,2
  3471  0180  29B2               	goto	l1699
  3472  0181  01F7               	clrf	___lwdiv@counter
  3473  0182  0AF7               	incf	___lwdiv@counter,f
  3474  0183                     l1687:	
  3475  0183  1BF1               	btfsc	___lwdiv@divisor+1,7
  3476  0184  2991               	goto	l1689
  3477  0185  3001               	movlw	1
  3478  0186                     u1115:	
  3479  0186  1003               	clrc
  3480  0187  0DF0               	rlf	___lwdiv@divisor,f
  3481  0188  0DF1               	rlf	___lwdiv@divisor+1,f
  3482  0189  3EFF               	addlw	-1
  3483  018A  1D03               	skipz
  3484  018B  2986               	goto	u1115
  3485  018C  3001               	movlw	1
  3486  018D  00F4               	movwf	??___lwdiv
  3487  018E  0874               	movf	??___lwdiv,w
  3488  018F  07F7               	addwf	___lwdiv@counter,f
  3489  0190  2983               	goto	l1687
  3490  0191                     l1689:	
  3491  0191  3001               	movlw	1
  3492  0192                     u1135:	
  3493  0192  1003               	clrc
  3494  0193  0DF5               	rlf	___lwdiv@quotient,f
  3495  0194  0DF6               	rlf	___lwdiv@quotient+1,f
  3496  0195  3EFF               	addlw	-1
  3497  0196  1D03               	skipz
  3498  0197  2992               	goto	u1135
  3499  0198  0871               	movf	___lwdiv@divisor+1,w
  3500  0199  0273               	subwf	___lwdiv@dividend+1,w
  3501  019A  1D03               	skipz
  3502  019B  299E               	goto	u1145
  3503  019C  0870               	movf	___lwdiv@divisor,w
  3504  019D  0272               	subwf	___lwdiv@dividend,w
  3505  019E                     u1145:	
  3506  019E  1C03               	skipc
  3507  019F  29A7               	goto	l1695
  3508  01A0  0870               	movf	___lwdiv@divisor,w
  3509  01A1  02F2               	subwf	___lwdiv@dividend,f
  3510  01A2  0871               	movf	___lwdiv@divisor+1,w
  3511  01A3  1C03               	skipc
  3512  01A4  03F3               	decf	___lwdiv@dividend+1,f
  3513  01A5  02F3               	subwf	___lwdiv@dividend+1,f
  3514  01A6  1475               	bsf	___lwdiv@quotient,0
  3515  01A7                     l1695:	
  3516  01A7  3001               	movlw	1
  3517  01A8                     u1155:	
  3518  01A8  1003               	clrc
  3519  01A9  0CF1               	rrf	___lwdiv@divisor+1,f
  3520  01AA  0CF0               	rrf	___lwdiv@divisor,f
  3521  01AB  3EFF               	addlw	-1
  3522  01AC  1D03               	skipz
  3523  01AD  29A8               	goto	u1155
  3524  01AE  3001               	movlw	1
  3525  01AF  02F7               	subwf	___lwdiv@counter,f
  3526  01B0  1D03               	btfss	3,2
  3527  01B1  2991               	goto	l1689
  3528  01B2                     l1699:	
  3529  01B2  0876               	movf	___lwdiv@quotient+1,w
  3530  01B3  00F1               	movwf	?___lwdiv+1
  3531  01B4  0875               	movf	___lwdiv@quotient,w
  3532  01B5  00F0               	movwf	?___lwdiv
  3533  01B6  0008               	return
  3534  01B7                     __end_of___lwdiv:	
  3535                           
  3536                           	psect	text16
  3537  0ED3                     __ptext16:	
  3538 ;; *************** function ___bmul *****************
  3539 ;; Defined at:
  3540 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;  multiplier      1    wreg     unsigned char 
  3543 ;;  multiplicand    1    0[COMMON] unsigned char 
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;  multiplier      1    3[COMMON] unsigned char 
  3546 ;;  product         1    2[COMMON] unsigned char 
  3547 ;; Return value:  Size  Location     Type
  3548 ;;                  1    wreg      unsigned char 
  3549 ;; Registers used:
  3550 ;;		wreg, status,2, status,0
  3551 ;; Tracked objects:
  3552 ;;		On entry : 0/0
  3553 ;;		On exit  : 0/0
  3554 ;;		Unchanged: 0/0
  3555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3556 ;;      Params:         1       0       0       0       0
  3557 ;;      Locals:         2       0       0       0       0
  3558 ;;      Temps:          1       0       0       0       0
  3559 ;;      Totals:         4       0       0       0       0
  3560 ;;Total ram usage:        4 bytes
  3561 ;; Hardware stack levels used:    1
  3562 ;; This function calls:
  3563 ;;		Nothing
  3564 ;; This function is called by:
  3565 ;;		_get_temp
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           
  3570                           ;psect for function ___bmul
  3571  0ED3                     ___bmul:	
  3572                           
  3573                           ;incstack = 0
  3574                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3575                           ;___bmul@multiplier stored from wreg
  3576  0ED3  00F3               	movwf	___bmul@multiplier
  3577  0ED4  01F2               	clrf	___bmul@product
  3578  0ED5                     l1931:	
  3579  0ED5  1C73               	btfss	___bmul@multiplier,0
  3580  0ED6  2EDB               	goto	l1935
  3581  0ED7  0870               	movf	___bmul@multiplicand,w
  3582  0ED8  00F1               	movwf	??___bmul
  3583  0ED9  0871               	movf	??___bmul,w
  3584  0EDA  07F2               	addwf	___bmul@product,f
  3585  0EDB                     l1935:	
  3586  0EDB  1003               	clrc
  3587  0EDC  0DF0               	rlf	___bmul@multiplicand,f
  3588  0EDD  1003               	clrc
  3589  0EDE  0CF3               	rrf	___bmul@multiplier,f
  3590  0EDF  0873               	movf	___bmul@multiplier,w
  3591  0EE0  1D03               	btfss	3,2
  3592  0EE1  2ED5               	goto	l1931
  3593  0EE2  0872               	movf	___bmul@product,w
  3594  0EE3  0008               	return
  3595  0EE4                     __end_of___bmul:	
  3596                           
  3597                           	psect	text17
  3598  0EB1                     __ptext17:	
  3599 ;; *************** function _I2C_Master_RepeatedStart *****************
  3600 ;; Defined at:
  3601 ;;		line 47 in file "./I2C.h"
  3602 ;; Parameters:    Size  Location     Type
  3603 ;;		None
  3604 ;; Auto vars:     Size  Location     Type
  3605 ;;		None
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  1    wreg      void 
  3608 ;; Registers used:
  3609 ;;		wreg, status,2, status,0, pclath, cstack
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3615 ;;      Params:         0       0       0       0       0
  3616 ;;      Locals:         0       0       0       0       0
  3617 ;;      Temps:          0       0       0       0       0
  3618 ;;      Totals:         0       0       0       0       0
  3619 ;;Total ram usage:        0 bytes
  3620 ;; Hardware stack levels used:    1
  3621 ;; Hardware stack levels required when called:    1
  3622 ;; This function calls:
  3623 ;;		_I2C_Master_Wait
  3624 ;; This function is called by:
  3625 ;;		_get_time
  3626 ;;		_get_temp
  3627 ;;		_get_day
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           
  3632                           ;psect for function _I2C_Master_RepeatedStart
  3633  0EB1                     _I2C_Master_RepeatedStart:	
  3634                           
  3635                           ;./I2C.h: 49:     I2C_Master_Wait();
  3636                           
  3637                           ;incstack = 0
  3638                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  3639  0EB1  120A  158A  26C0   	fcall	_I2C_Master_Wait
  3640                           
  3641                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  3642  0EB4  1683               	bsf	3,5	;RP0=1, select bank1
  3643  0EB5  1303               	bcf	3,6	;RP1=0, select bank1
  3644  0EB6  1491               	bsf	17,1	;volatile
  3645  0EB7  0008               	return
  3646  0EB8                     __end_of_I2C_Master_RepeatedStart:	
  3647                           
  3648                           	psect	text18
  3649  0F74                     __ptext18:	
  3650 ;; *************** function _get_hall *****************
  3651 ;; Defined at:
  3652 ;;		line 232 in file "mainMaster.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;		None
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  key             1    7[COMMON] unsigned char 
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  1    wreg      unsigned char 
  3659 ;; Registers used:
  3660 ;;		wreg, status,2, status,0, pclath, cstack
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3666 ;;      Params:         0       0       0       0       0
  3667 ;;      Locals:         1       0       0       0       0
  3668 ;;      Temps:          1       0       0       0       0
  3669 ;;      Totals:         2       0       0       0       0
  3670 ;;Total ram usage:        2 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    2
  3673 ;; This function calls:
  3674 ;;		_I2C_Master_Read
  3675 ;;		_I2C_Master_Start
  3676 ;;		_I2C_Master_Stop
  3677 ;;		_I2C_Master_Write
  3678 ;; This function is called by:
  3679 ;;		_main
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           
  3684                           ;psect for function _get_hall
  3685  0F74                     _get_hall:	
  3686                           
  3687                           ;mainMaster.c: 234:     char key;;mainMaster.c: 236:     I2C_Master_Start();
  3688                           
  3689                           ;incstack = 0
  3690                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  3691  0F74  120A  158A  26A3  120A  158A  	fcall	_I2C_Master_Start
  3692                           
  3693                           ;mainMaster.c: 237:     I2C_Master_Write(0x11);
  3694  0F79  3011               	movlw	17
  3695  0F7A  00F0               	movwf	I2C_Master_Write@d
  3696  0F7B  3000               	movlw	0
  3697  0F7C  00F1               	movwf	I2C_Master_Write@d+1
  3698  0F7D  120A  158A  26B8  120A  158A  	fcall	_I2C_Master_Write
  3699                           
  3700                           ;mainMaster.c: 238:     key = I2C_Master_Read(0);
  3701  0F82  3000               	movlw	0
  3702  0F83  00F0               	movwf	I2C_Master_Read@a
  3703  0F84  00F1               	movwf	I2C_Master_Read@a+1
  3704  0F85  120A  118A  2073  120A  158A  	fcall	_I2C_Master_Read
  3705  0F8A  0870               	movf	?_I2C_Master_Read,w
  3706  0F8B  00F6               	movwf	??_get_hall
  3707  0F8C  0876               	movf	??_get_hall,w
  3708  0F8D  00F7               	movwf	get_hall@key
  3709                           
  3710                           ;mainMaster.c: 239:     I2C_Master_Stop();
  3711  0F8E  120A  158A  26AA   	fcall	_I2C_Master_Stop
  3712                           
  3713                           ;mainMaster.c: 241:     return (key);
  3714  0F91  0877               	movf	get_hall@key,w
  3715  0F92  0008               	return
  3716  0F93                     __end_of_get_hall:	
  3717                           
  3718                           	psect	text19
  3719  0F55                     __ptext19:	
  3720 ;; *************** function _get_PIR *****************
  3721 ;; Defined at:
  3722 ;;		line 256 in file "mainMaster.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;  PIR             1    7[COMMON] unsigned char 
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      unsigned char 
  3729 ;; Registers used:
  3730 ;;		wreg, status,2, status,0, pclath, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3736 ;;      Params:         0       0       0       0       0
  3737 ;;      Locals:         1       0       0       0       0
  3738 ;;      Temps:          1       0       0       0       0
  3739 ;;      Totals:         2       0       0       0       0
  3740 ;;Total ram usage:        2 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    2
  3743 ;; This function calls:
  3744 ;;		_I2C_Master_Read
  3745 ;;		_I2C_Master_Start
  3746 ;;		_I2C_Master_Stop
  3747 ;;		_I2C_Master_Write
  3748 ;; This function is called by:
  3749 ;;		_main
  3750 ;; This function uses a non-reentrant model
  3751 ;;
  3752                           
  3753                           
  3754                           ;psect for function _get_PIR
  3755  0F55                     _get_PIR:	
  3756                           
  3757                           ;mainMaster.c: 258:     char PIR;;mainMaster.c: 260:     I2C_Master_Start();
  3758                           
  3759                           ;incstack = 0
  3760                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  3761  0F55  120A  158A  26A3  120A  158A  	fcall	_I2C_Master_Start
  3762                           
  3763                           ;mainMaster.c: 261:     I2C_Master_Write(0x41);
  3764  0F5A  3041               	movlw	65
  3765  0F5B  00F0               	movwf	I2C_Master_Write@d
  3766  0F5C  3000               	movlw	0
  3767  0F5D  00F1               	movwf	I2C_Master_Write@d+1
  3768  0F5E  120A  158A  26B8  120A  158A  	fcall	_I2C_Master_Write
  3769                           
  3770                           ;mainMaster.c: 262:     PIR = I2C_Master_Read(0);
  3771  0F63  3000               	movlw	0
  3772  0F64  00F0               	movwf	I2C_Master_Read@a
  3773  0F65  00F1               	movwf	I2C_Master_Read@a+1
  3774  0F66  120A  118A  2073  120A  158A  	fcall	_I2C_Master_Read
  3775  0F6B  0870               	movf	?_I2C_Master_Read,w
  3776  0F6C  00F6               	movwf	??_get_PIR
  3777  0F6D  0876               	movf	??_get_PIR,w
  3778  0F6E  00F7               	movwf	get_PIR@PIR
  3779                           
  3780                           ;mainMaster.c: 263:     I2C_Master_Stop();
  3781  0F6F  120A  158A  26AA   	fcall	_I2C_Master_Stop
  3782                           
  3783                           ;mainMaster.c: 265:     return (PIR);
  3784  0F72  0877               	movf	get_PIR@PIR,w
  3785  0F73  0008               	return
  3786  0F74                     __end_of_get_PIR:	
  3787                           
  3788                           	psect	text20
  3789  0F36                     __ptext20:	
  3790 ;; *************** function _get_IR *****************
  3791 ;; Defined at:
  3792 ;;		line 268 in file "mainMaster.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;		None
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;  IR              1    7[COMMON] unsigned char 
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      unsigned char 
  3799 ;; Registers used:
  3800 ;;		wreg, status,2, status,0, pclath, cstack
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3806 ;;      Params:         0       0       0       0       0
  3807 ;;      Locals:         1       0       0       0       0
  3808 ;;      Temps:          1       0       0       0       0
  3809 ;;      Totals:         2       0       0       0       0
  3810 ;;Total ram usage:        2 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:    2
  3813 ;; This function calls:
  3814 ;;		_I2C_Master_Read
  3815 ;;		_I2C_Master_Start
  3816 ;;		_I2C_Master_Stop
  3817 ;;		_I2C_Master_Write
  3818 ;; This function is called by:
  3819 ;;		_main
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           
  3824                           ;psect for function _get_IR
  3825  0F36                     _get_IR:	
  3826                           
  3827                           ;mainMaster.c: 270:     char IR;;mainMaster.c: 272:     I2C_Master_Start();
  3828                           
  3829                           ;incstack = 0
  3830                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  3831  0F36  120A  158A  26A3  120A  158A  	fcall	_I2C_Master_Start
  3832                           
  3833                           ;mainMaster.c: 273:     I2C_Master_Write(0x31);
  3834  0F3B  3031               	movlw	49
  3835  0F3C  00F0               	movwf	I2C_Master_Write@d
  3836  0F3D  3000               	movlw	0
  3837  0F3E  00F1               	movwf	I2C_Master_Write@d+1
  3838  0F3F  120A  158A  26B8  120A  158A  	fcall	_I2C_Master_Write
  3839                           
  3840                           ;mainMaster.c: 274:     IR = I2C_Master_Read(0);
  3841  0F44  3000               	movlw	0
  3842  0F45  00F0               	movwf	I2C_Master_Read@a
  3843  0F46  00F1               	movwf	I2C_Master_Read@a+1
  3844  0F47  120A  118A  2073  120A  158A  	fcall	_I2C_Master_Read
  3845  0F4C  0870               	movf	?_I2C_Master_Read,w
  3846  0F4D  00F6               	movwf	??_get_IR
  3847  0F4E  0876               	movf	??_get_IR,w
  3848  0F4F  00F7               	movwf	get_IR@IR
  3849                           
  3850                           ;mainMaster.c: 275:     I2C_Master_Stop();
  3851  0F50  120A  158A  26AA   	fcall	_I2C_Master_Stop
  3852                           
  3853                           ;mainMaster.c: 277:     return (IR);
  3854  0F53  0877               	movf	get_IR@IR,w
  3855  0F54  0008               	return
  3856  0F55                     __end_of_get_IR:	
  3857                           
  3858                           	psect	text21
  3859  0EB8                     __ptext21:	
  3860 ;; *************** function _I2C_Master_Write *****************
  3861 ;; Defined at:
  3862 ;;		line 65 in file "./I2C.h"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;  d               2    0[COMMON] unsigned int 
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;		None
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  1    wreg      void 
  3869 ;; Registers used:
  3870 ;;		wreg, status,2, status,0, pclath, cstack
  3871 ;; Tracked objects:
  3872 ;;		On entry : 0/0
  3873 ;;		On exit  : 0/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3876 ;;      Params:         2       0       0       0       0
  3877 ;;      Locals:         0       0       0       0       0
  3878 ;;      Temps:          0       0       0       0       0
  3879 ;;      Totals:         2       0       0       0       0
  3880 ;;Total ram usage:        2 bytes
  3881 ;; Hardware stack levels used:    1
  3882 ;; Hardware stack levels required when called:    1
  3883 ;; This function calls:
  3884 ;;		_I2C_Master_Wait
  3885 ;; This function is called by:
  3886 ;;		_get_time
  3887 ;;		_get_temp
  3888 ;;		_get_hall
  3889 ;;		_get_tripwire
  3890 ;;		_get_PIR
  3891 ;;		_get_IR
  3892 ;;		_write_RTC
  3893 ;;		_get_day
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           
  3898                           ;psect for function _I2C_Master_Write
  3899  0EB8                     _I2C_Master_Write:	
  3900                           
  3901                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  3902                           
  3903                           ;incstack = 0
  3904                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  3905  0EB8  120A  158A  26C0   	fcall	_I2C_Master_Wait
  3906                           
  3907                           ;./I2C.h: 68:     SSPBUF = d;
  3908  0EBB  0870               	movf	I2C_Master_Write@d,w
  3909  0EBC  1283               	bcf	3,5	;RP0=0, select bank0
  3910  0EBD  1303               	bcf	3,6	;RP1=0, select bank0
  3911  0EBE  0093               	movwf	19	;volatile
  3912  0EBF  0008               	return
  3913  0EC0                     __end_of_I2C_Master_Write:	
  3914                           
  3915                           	psect	text22
  3916  0EAA                     __ptext22:	
  3917 ;; *************** function _I2C_Master_Stop *****************
  3918 ;; Defined at:
  3919 ;;		line 55 in file "./I2C.h"
  3920 ;; Parameters:    Size  Location     Type
  3921 ;;		None
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;		None
  3924 ;; Return value:  Size  Location     Type
  3925 ;;                  1    wreg      void 
  3926 ;; Registers used:
  3927 ;;		wreg, status,2, status,0, pclath, cstack
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3933 ;;      Params:         0       0       0       0       0
  3934 ;;      Locals:         0       0       0       0       0
  3935 ;;      Temps:          0       0       0       0       0
  3936 ;;      Totals:         0       0       0       0       0
  3937 ;;Total ram usage:        0 bytes
  3938 ;; Hardware stack levels used:    1
  3939 ;; Hardware stack levels required when called:    1
  3940 ;; This function calls:
  3941 ;;		_I2C_Master_Wait
  3942 ;; This function is called by:
  3943 ;;		_get_time
  3944 ;;		_get_temp
  3945 ;;		_get_hall
  3946 ;;		_get_tripwire
  3947 ;;		_get_PIR
  3948 ;;		_get_IR
  3949 ;;		_write_RTC
  3950 ;;		_get_day
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           
  3955                           ;psect for function _I2C_Master_Stop
  3956  0EAA                     _I2C_Master_Stop:	
  3957                           
  3958                           ;./I2C.h: 57:     I2C_Master_Wait();
  3959                           
  3960                           ;incstack = 0
  3961                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  3962  0EAA  120A  158A  26C0   	fcall	_I2C_Master_Wait
  3963                           
  3964                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  3965  0EAD  1683               	bsf	3,5	;RP0=1, select bank1
  3966  0EAE  1303               	bcf	3,6	;RP1=0, select bank1
  3967  0EAF  1511               	bsf	17,2	;volatile
  3968  0EB0  0008               	return
  3969  0EB1                     __end_of_I2C_Master_Stop:	
  3970                           
  3971                           	psect	text23
  3972  0EA3                     __ptext23:	
  3973 ;; *************** function _I2C_Master_Start *****************
  3974 ;; Defined at:
  3975 ;;		line 39 in file "./I2C.h"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;		None
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;		None
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  1    wreg      void 
  3982 ;; Registers used:
  3983 ;;		wreg, status,2, status,0, pclath, cstack
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3989 ;;      Params:         0       0       0       0       0
  3990 ;;      Locals:         0       0       0       0       0
  3991 ;;      Temps:          0       0       0       0       0
  3992 ;;      Totals:         0       0       0       0       0
  3993 ;;Total ram usage:        0 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    1
  3996 ;; This function calls:
  3997 ;;		_I2C_Master_Wait
  3998 ;; This function is called by:
  3999 ;;		_get_time
  4000 ;;		_get_temp
  4001 ;;		_get_hall
  4002 ;;		_get_tripwire
  4003 ;;		_get_PIR
  4004 ;;		_get_IR
  4005 ;;		_write_RTC
  4006 ;;		_get_day
  4007 ;; This function uses a non-reentrant model
  4008 ;;
  4009                           
  4010                           
  4011                           ;psect for function _I2C_Master_Start
  4012  0EA3                     _I2C_Master_Start:	
  4013                           
  4014                           ;./I2C.h: 41:     I2C_Master_Wait();
  4015                           
  4016                           ;incstack = 0
  4017                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  4018  0EA3  120A  158A  26C0   	fcall	_I2C_Master_Wait
  4019                           
  4020                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  4021  0EA6  1683               	bsf	3,5	;RP0=1, select bank1
  4022  0EA7  1303               	bcf	3,6	;RP1=0, select bank1
  4023  0EA8  1411               	bsf	17,0	;volatile
  4024  0EA9  0008               	return
  4025  0EAA                     __end_of_I2C_Master_Start:	
  4026                           
  4027                           	psect	text24
  4028  0073                     __ptext24:	
  4029 ;; *************** function _I2C_Master_Read *****************
  4030 ;; Defined at:
  4031 ;;		line 74 in file "./I2C.h"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;  a               2    0[COMMON] unsigned short 
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;  temp            2    4[COMMON] unsigned short 
  4036 ;; Return value:  Size  Location     Type
  4037 ;;                  2    0[COMMON] unsigned short 
  4038 ;; Registers used:
  4039 ;;		wreg, status,2, status,0, pclath, cstack
  4040 ;; Tracked objects:
  4041 ;;		On entry : 0/0
  4042 ;;		On exit  : 0/0
  4043 ;;		Unchanged: 0/0
  4044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4045 ;;      Params:         2       0       0       0       0
  4046 ;;      Locals:         2       0       0       0       0
  4047 ;;      Temps:          2       0       0       0       0
  4048 ;;      Totals:         6       0       0       0       0
  4049 ;;Total ram usage:        6 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; Hardware stack levels required when called:    1
  4052 ;; This function calls:
  4053 ;;		_I2C_Master_Wait
  4054 ;; This function is called by:
  4055 ;;		_get_time
  4056 ;;		_get_temp
  4057 ;;		_get_hall
  4058 ;;		_get_tripwire
  4059 ;;		_get_PIR
  4060 ;;		_get_IR
  4061 ;;		_get_day
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           
  4066                           ;psect for function _I2C_Master_Read
  4067  0073                     _I2C_Master_Read:	
  4068                           
  4069                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  4070                           
  4071                           ;incstack = 0
  4072                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  4073  0073  120A  158A  26C0  120A  118A  	fcall	_I2C_Master_Wait
  4074                           
  4075                           ;./I2C.h: 78:     RCEN = 1;
  4076  0078  1683               	bsf	3,5	;RP0=1, select bank1
  4077  0079  1303               	bcf	3,6	;RP1=0, select bank1
  4078  007A  1591               	bsf	17,3	;volatile
  4079                           
  4080                           ;./I2C.h: 79:     I2C_Master_Wait();
  4081  007B  120A  158A  26C0  120A  118A  	fcall	_I2C_Master_Wait
  4082                           
  4083                           ;./I2C.h: 80:     temp = SSPBUF;
  4084  0080  1283               	bcf	3,5	;RP0=0, select bank0
  4085  0081  1303               	bcf	3,6	;RP1=0, select bank0
  4086  0082  0813               	movf	19,w	;volatile
  4087  0083  00F2               	movwf	??_I2C_Master_Read
  4088  0084  01F3               	clrf	??_I2C_Master_Read+1
  4089  0085  0872               	movf	??_I2C_Master_Read,w
  4090  0086  00F4               	movwf	I2C_Master_Read@temp
  4091  0087  0873               	movf	??_I2C_Master_Read+1,w
  4092  0088  00F5               	movwf	I2C_Master_Read@temp+1
  4093                           
  4094                           ;./I2C.h: 81:     I2C_Master_Wait();
  4095  0089  120A  158A  26C0  120A  118A  	fcall	_I2C_Master_Wait
  4096                           
  4097                           ;./I2C.h: 83:     if(a == 1){
  4098  008E  0370               	decf	I2C_Master_Read@a,w
  4099  008F  0471               	iorwf	I2C_Master_Read@a+1,w
  4100  0090  1D03               	btfss	3,2
  4101  0091  2896               	goto	l120
  4102                           
  4103                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  4104  0092  1683               	bsf	3,5	;RP0=1, select bank1
  4105  0093  1303               	bcf	3,6	;RP1=0, select bank1
  4106  0094  1291               	bcf	17,5	;volatile
  4107                           
  4108                           ;./I2C.h: 85:     }else{
  4109  0095  2899               	goto	l121
  4110  0096                     l120:	
  4111                           
  4112                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  4113  0096  1683               	bsf	3,5	;RP0=1, select bank1
  4114  0097  1303               	bcf	3,6	;RP1=0, select bank1
  4115  0098  1691               	bsf	17,5	;volatile
  4116  0099                     l121:	
  4117                           ;./I2C.h: 87:     }
  4118                           
  4119                           
  4120                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  4121  0099  1611               	bsf	17,4	;volatile
  4122                           
  4123                           ;./I2C.h: 89:     return temp;
  4124  009A  0875               	movf	I2C_Master_Read@temp+1,w
  4125  009B  00F1               	movwf	?_I2C_Master_Read+1
  4126  009C  0874               	movf	I2C_Master_Read@temp,w
  4127  009D  00F0               	movwf	?_I2C_Master_Read
  4128  009E  0008               	return
  4129  009F                     __end_of_I2C_Master_Read:	
  4130                           
  4131                           	psect	text25
  4132  0EC0                     __ptext25:	
  4133 ;; *************** function _I2C_Master_Wait *****************
  4134 ;; Defined at:
  4135 ;;		line 32 in file "./I2C.h"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;		None
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, status,2
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4149 ;;      Params:         0       0       0       0       0
  4150 ;;      Locals:         0       0       0       0       0
  4151 ;;      Temps:          0       0       0       0       0
  4152 ;;      Totals:         0       0       0       0       0
  4153 ;;Total ram usage:        0 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; This function calls:
  4156 ;;		Nothing
  4157 ;; This function is called by:
  4158 ;;		_I2C_Master_Start
  4159 ;;		_I2C_Master_RepeatedStart
  4160 ;;		_I2C_Master_Stop
  4161 ;;		_I2C_Master_Write
  4162 ;;		_I2C_Master_Read
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           
  4167                           ;psect for function _I2C_Master_Wait
  4168  0EC0                     _I2C_Master_Wait:	
  4169  0EC0                     l102:	
  4170                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  4171                           
  4172                           ;incstack = 0
  4173                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  4174                           
  4175  0EC0  1683               	bsf	3,5	;RP0=1, select bank1
  4176  0EC1  1303               	bcf	3,6	;RP1=0, select bank1
  4177  0EC2  1914               	btfsc	20,2	;volatile
  4178  0EC3  2EC0               	goto	l102
  4179  0EC4  0811               	movf	17,w	;volatile
  4180  0EC5  391F               	andlw	31
  4181  0EC6  1903               	btfsc	3,2
  4182  0EC7  0008               	return
  4183  0EC8  2EC0               	goto	l102
  4184  0EC9                     __end_of_I2C_Master_Wait:	
  4185                           
  4186                           	psect	text26
  4187  0F18                     __ptext26:	
  4188 ;; *************** function _UART_Write_Text *****************
  4189 ;; Defined at:
  4190 ;;		line 60 in file "./UART.h"
  4191 ;; Parameters:    Size  Location     Type
  4192 ;;  text            1    wreg     PTR unsigned char 
  4193 ;;		 -> NULL(0), get_temp@temperature(6), get_time@string_time(6), 
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;  text            1    4[COMMON] PTR unsigned char 
  4196 ;;		 -> NULL(0), get_temp@temperature(6), get_time@string_time(6), 
  4197 ;;  i               2    2[COMMON] int 
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  1    wreg      void 
  4200 ;; Registers used:
  4201 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4207 ;;      Params:         0       0       0       0       0
  4208 ;;      Locals:         3       0       0       0       0
  4209 ;;      Temps:          1       0       0       0       0
  4210 ;;      Totals:         4       0       0       0       0
  4211 ;;Total ram usage:        4 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    1
  4214 ;; This function calls:
  4215 ;;		_UART_Write
  4216 ;; This function is called by:
  4217 ;;		_main
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           
  4222                           ;psect for function _UART_Write_Text
  4223  0F18                     _UART_Write_Text:	
  4224                           
  4225                           ;incstack = 0
  4226                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4227                           ;UART_Write_Text@text stored from wreg
  4228  0F18  00F4               	movwf	UART_Write_Text@text
  4229                           
  4230                           ;./UART.h: 60: void UART_Write_Text(char *text);./UART.h: 61: {;./UART.h: 62:   int i;;.
      +                          /UART.h: 63:   for(i=0;text[i]!='\0';i++)
  4231  0F19  01F2               	clrf	UART_Write_Text@i
  4232  0F1A  01F3               	clrf	UART_Write_Text@i+1
  4233  0F1B                     l1979:	
  4234  0F1B  0872               	movf	UART_Write_Text@i,w
  4235  0F1C  0774               	addwf	UART_Write_Text@text,w
  4236  0F1D  00F1               	movwf	??_UART_Write_Text
  4237  0F1E  0871               	movf	??_UART_Write_Text,w
  4238  0F1F  0084               	movwf	4
  4239  0F20  1383               	bcf	3,7	;select IRP bank0
  4240  0F21  0800               	movf	0,w
  4241  0F22  1903               	btfsc	3,2
  4242  0F23  0008               	return
  4243                           
  4244                           ;./UART.h: 64:    UART_Write(text[i]);
  4245  0F24  0872               	movf	UART_Write_Text@i,w
  4246  0F25  0774               	addwf	UART_Write_Text@text,w
  4247  0F26  00F1               	movwf	??_UART_Write_Text
  4248  0F27  0871               	movf	??_UART_Write_Text,w
  4249  0F28  0084               	movwf	4
  4250  0F29  0800               	movf	0,w
  4251  0F2A  120A  158A  26C9  120A  158A  	fcall	_UART_Write
  4252  0F2F  3001               	movlw	1
  4253  0F30  07F2               	addwf	UART_Write_Text@i,f
  4254  0F31  1803               	skipnc
  4255  0F32  0AF3               	incf	UART_Write_Text@i+1,f
  4256  0F33  3000               	movlw	0
  4257  0F34  07F3               	addwf	UART_Write_Text@i+1,f
  4258  0F35  2F1B               	goto	l1979
  4259  0F36                     __end_of_UART_Write_Text:	
  4260                           
  4261                           	psect	text27
  4262  0EC9                     __ptext27:	
  4263 ;; *************** function _UART_Write *****************
  4264 ;; Defined at:
  4265 ;;		line 54 in file "./UART.h"
  4266 ;; Parameters:    Size  Location     Type
  4267 ;;  data            1    wreg     unsigned char 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;  data            1    0[COMMON] unsigned char 
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  1    wreg      void 
  4272 ;; Registers used:
  4273 ;;		wreg
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4279 ;;      Params:         0       0       0       0       0
  4280 ;;      Locals:         1       0       0       0       0
  4281 ;;      Temps:          0       0       0       0       0
  4282 ;;      Totals:         1       0       0       0       0
  4283 ;;Total ram usage:        1 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; This function calls:
  4286 ;;		Nothing
  4287 ;; This function is called by:
  4288 ;;		_UART_Write_Text
  4289 ;;		_main
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           
  4294                           ;psect for function _UART_Write
  4295  0EC9                     _UART_Write:	
  4296                           
  4297                           ;incstack = 0
  4298                           ; Regs used in _UART_Write: [wreg]
  4299                           ;UART_Write@data stored from wreg
  4300  0EC9  00F0               	movwf	UART_Write@data
  4301  0ECA                     l206:	
  4302                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(!TRMT);
  4303                           
  4304  0ECA  1683               	bsf	3,5	;RP0=1, select bank1
  4305  0ECB  1303               	bcf	3,6	;RP1=0, select bank1
  4306  0ECC  1C98               	btfss	24,1	;volatile
  4307  0ECD  2ECA               	goto	l206
  4308                           
  4309                           ;./UART.h: 57:   TXREG = data;
  4310  0ECE  0870               	movf	UART_Write@data,w
  4311  0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  4312  0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  4313  0ED1  0099               	movwf	25	;volatile
  4314  0ED2  0008               	return
  4315  0ED3                     __end_of_UART_Write:	
  4316                           
  4317                           	psect	text28
  4318  01B7                     __ptext28:	
  4319 ;; *************** function _Lcd_Write_String *****************
  4320 ;; Defined at:
  4321 ;;		line 100 in file "./LCD4bits.h"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;  a               2    5[COMMON] PTR unsigned char 
  4324 ;;		 -> NULL(0), get_temp@temperature(6), get_time@string_time(6), STR_9(7), 
  4325 ;;		 -> STR_8(7), STR_7(8), STR_6(8), STR_5(9), 
  4326 ;;		 -> STR_4(9), STR_3(12), STR_2(12), 
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;  i               2   10[COMMON] int 
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  1    wreg      void 
  4331 ;; Registers used:
  4332 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4338 ;;      Params:         2       0       0       0       0
  4339 ;;      Locals:         2       0       0       0       0
  4340 ;;      Temps:          3       0       0       0       0
  4341 ;;      Totals:         7       0       0       0       0
  4342 ;;Total ram usage:        7 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    2
  4345 ;; This function calls:
  4346 ;;		_Lcd_Write_Char
  4347 ;; This function is called by:
  4348 ;;		_main
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           
  4353                           ;psect for function _Lcd_Write_String
  4354  01B7                     _Lcd_Write_String:	
  4355                           
  4356                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  4357                           
  4358                           ;incstack = 0
  4359                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4360  01B7  01FA               	clrf	Lcd_Write_String@i
  4361  01B8  01FB               	clrf	Lcd_Write_String@i+1
  4362  01B9                     l1971:	
  4363  01B9  087A               	movf	Lcd_Write_String@i,w
  4364  01BA  0775               	addwf	Lcd_Write_String@a,w
  4365  01BB  00F8               	movwf	??_Lcd_Write_String+1
  4366  01BC  0876               	movf	Lcd_Write_String@a+1,w
  4367  01BD  00F7               	movwf	??_Lcd_Write_String
  4368  01BE  1803               	skipnc
  4369  01BF  0AF7               	incf	??_Lcd_Write_String,f
  4370  01C0  1BFA               	btfsc	Lcd_Write_String@i,7
  4371  01C1  03F7               	decf	??_Lcd_Write_String,f
  4372  01C2  0877               	movf	??_Lcd_Write_String,w
  4373  01C3  00F9               	movwf	??_Lcd_Write_String+2
  4374  01C4  0879               	movf	??_Lcd_Write_String+2,w
  4375  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  4376  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  4377  01C7  00FF               	movwf	127
  4378  01C8  0878               	movf	??_Lcd_Write_String+1,w
  4379  01C9  0084               	movwf	4
  4380  01CA  120A  118A  2003  120A  118A  	fcall	stringtab
  4381  01CF  3A00               	xorlw	0
  4382  01D0  1903               	btfsc	3,2
  4383  01D1  0008               	return
  4384                           
  4385                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  4386  01D2  087A               	movf	Lcd_Write_String@i,w
  4387  01D3  0775               	addwf	Lcd_Write_String@a,w
  4388  01D4  00F8               	movwf	??_Lcd_Write_String+1
  4389  01D5  0876               	movf	Lcd_Write_String@a+1,w
  4390  01D6  00F7               	movwf	??_Lcd_Write_String
  4391  01D7  1803               	skipnc
  4392  01D8  0AF7               	incf	??_Lcd_Write_String,f
  4393  01D9  1BFA               	btfsc	Lcd_Write_String@i,7
  4394  01DA  03F7               	decf	??_Lcd_Write_String,f
  4395  01DB  0877               	movf	??_Lcd_Write_String,w
  4396  01DC  00F9               	movwf	??_Lcd_Write_String+2
  4397  01DD  0879               	movf	??_Lcd_Write_String+2,w
  4398  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  4399  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  4400  01E0  00FF               	movwf	127
  4401  01E1  0878               	movf	??_Lcd_Write_String+1,w
  4402  01E2  0084               	movwf	4
  4403  01E3  120A  118A  2003  120A  118A  	fcall	stringtab
  4404  01E8  120A  118A  2107  120A  118A  	fcall	_Lcd_Write_Char
  4405  01ED  3001               	movlw	1
  4406  01EE  07FA               	addwf	Lcd_Write_String@i,f
  4407  01EF  1803               	skipnc
  4408  01F0  0AFB               	incf	Lcd_Write_String@i+1,f
  4409  01F1  3000               	movlw	0
  4410  01F2  07FB               	addwf	Lcd_Write_String@i+1,f
  4411  01F3  29B9               	goto	l1971
  4412  01F4                     __end_of_Lcd_Write_String:	
  4413                           
  4414                           	psect	text29
  4415  0107                     __ptext29:	
  4416 ;; *************** function _Lcd_Write_Char *****************
  4417 ;; Defined at:
  4418 ;;		line 84 in file "./LCD4bits.h"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;  a               1    wreg     unsigned char 
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;  a               1    4[COMMON] unsigned char 
  4423 ;;  y               1    3[COMMON] unsigned char 
  4424 ;;  temp            1    2[COMMON] unsigned char 
  4425 ;; Return value:  Size  Location     Type
  4426 ;;                  1    wreg      void 
  4427 ;; Registers used:
  4428 ;;		wreg, status,2, status,0, pclath, cstack
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4434 ;;      Params:         0       0       0       0       0
  4435 ;;      Locals:         3       0       0       0       0
  4436 ;;      Temps:          1       0       0       0       0
  4437 ;;      Totals:         4       0       0       0       0
  4438 ;;Total ram usage:        4 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; Hardware stack levels required when called:    1
  4441 ;; This function calls:
  4442 ;;		_Lcd_Port
  4443 ;; This function is called by:
  4444 ;;		_Lcd_Write_String
  4445 ;;		_main
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           
  4450                           ;psect for function _Lcd_Write_Char
  4451  0107                     _Lcd_Write_Char:	
  4452                           
  4453                           ;incstack = 0
  4454                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  4455                           ;Lcd_Write_Char@a stored from wreg
  4456  0107  00F4               	movwf	Lcd_Write_Char@a
  4457                           
  4458                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  4459  0108  0874               	movf	Lcd_Write_Char@a,w
  4460  0109  390F               	andlw	15
  4461  010A  00F1               	movwf	??_Lcd_Write_Char
  4462  010B  0871               	movf	??_Lcd_Write_Char,w
  4463  010C  00F2               	movwf	Lcd_Write_Char@temp
  4464                           
  4465                           ;./LCD4bits.h: 88:    y = a&0xF0;
  4466  010D  0874               	movf	Lcd_Write_Char@a,w
  4467  010E  39F0               	andlw	240
  4468  010F  00F1               	movwf	??_Lcd_Write_Char
  4469  0110  0871               	movf	??_Lcd_Write_Char,w
  4470  0111  00F3               	movwf	Lcd_Write_Char@y
  4471                           
  4472                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  4473  0112  1283               	bcf	3,5	;RP0=0, select bank0
  4474  0113  1303               	bcf	3,6	;RP1=0, select bank0
  4475  0114  1606               	bsf	6,4	;volatile
  4476                           
  4477                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  4478  0115  0873               	movf	Lcd_Write_Char@y,w
  4479  0116  00F1               	movwf	??_Lcd_Write_Char
  4480  0117  3004               	movlw	4
  4481  0118                     u1255:	
  4482  0118  1003               	clrc
  4483  0119  0CF1               	rrf	??_Lcd_Write_Char,f
  4484  011A  3EFF               	addlw	-1
  4485  011B  1D03               	skipz
  4486  011C  2918               	goto	u1255
  4487  011D  0871               	movf	??_Lcd_Write_Char,w
  4488  011E  120A  158A  26E4  120A  118A  	fcall	_Lcd_Port
  4489                           
  4490                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  4491  0123  1283               	bcf	3,5	;RP0=0, select bank0
  4492  0124  1303               	bcf	3,6	;RP1=0, select bank0
  4493  0125  1686               	bsf	6,5	;volatile
  4494                           
  4495                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  4496  0126  301A               	movlw	26
  4497  0127  00F1               	movwf	??_Lcd_Write_Char
  4498  0128                     u1747:	
  4499  0128  0BF1               	decfsz	??_Lcd_Write_Char,f
  4500  0129  2928               	goto	u1747
  4501  012A  0000               	nop
  4502                           
  4503                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  4504  012B  1283               	bcf	3,5	;RP0=0, select bank0
  4505  012C  1303               	bcf	3,6	;RP1=0, select bank0
  4506  012D  1286               	bcf	6,5	;volatile
  4507                           
  4508                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  4509  012E  0872               	movf	Lcd_Write_Char@temp,w
  4510  012F  120A  158A  26E4  120A  118A  	fcall	_Lcd_Port
  4511                           
  4512                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  4513  0134  1283               	bcf	3,5	;RP0=0, select bank0
  4514  0135  1303               	bcf	3,6	;RP1=0, select bank0
  4515  0136  1686               	bsf	6,5	;volatile
  4516                           
  4517                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  4518  0137  301A               	movlw	26
  4519  0138  00F1               	movwf	??_Lcd_Write_Char
  4520  0139                     u1757:	
  4521  0139  0BF1               	decfsz	??_Lcd_Write_Char,f
  4522  013A  2939               	goto	u1757
  4523  013B  0000               	nop
  4524                           
  4525                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  4526  013C  1283               	bcf	3,5	;RP0=0, select bank0
  4527  013D  1303               	bcf	3,6	;RP1=0, select bank0
  4528  013E  1286               	bcf	6,5	;volatile
  4529  013F  0008               	return
  4530  0140                     __end_of_Lcd_Write_Char:	
  4531                           
  4532                           	psect	text30
  4533  01F4                     __ptext30:	
  4534 ;; *************** function _Lcd_Set_Cursor *****************
  4535 ;; Defined at:
  4536 ;;		line 44 in file "./LCD4bits.h"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;  a               1    wreg     unsigned char 
  4539 ;;  b               1    4[COMMON] unsigned char 
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;  a               1    7[COMMON] unsigned char 
  4542 ;;  temp            1   10[COMMON] unsigned char 
  4543 ;;  y               1    9[COMMON] unsigned char 
  4544 ;;  z               1    8[COMMON] unsigned char 
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  1    wreg      void 
  4547 ;; Registers used:
  4548 ;;		wreg, status,2, status,0, pclath, cstack
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4554 ;;      Params:         1       0       0       0       0
  4555 ;;      Locals:         4       0       0       0       0
  4556 ;;      Temps:          2       0       0       0       0
  4557 ;;      Totals:         7       0       0       0       0
  4558 ;;Total ram usage:        7 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; Hardware stack levels required when called:    2
  4561 ;; This function calls:
  4562 ;;		_Lcd_Cmd
  4563 ;; This function is called by:
  4564 ;;		_main
  4565 ;; This function uses a non-reentrant model
  4566 ;;
  4567                           
  4568                           
  4569                           ;psect for function _Lcd_Set_Cursor
  4570  01F4                     _Lcd_Set_Cursor:	
  4571                           
  4572                           ;incstack = 0
  4573                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  4574                           ;Lcd_Set_Cursor@a stored from wreg
  4575  01F4  00F7               	movwf	Lcd_Set_Cursor@a
  4576                           
  4577                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  4578  01F5  0377               	decf	Lcd_Set_Cursor@a,w
  4579  01F6  1D03               	btfss	3,2
  4580  01F7  2A19               	goto	l1955
  4581                           
  4582                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  4583  01F8  0874               	movf	Lcd_Set_Cursor@b,w
  4584  01F9  3E7F               	addlw	127
  4585  01FA  00F5               	movwf	??_Lcd_Set_Cursor
  4586  01FB  0875               	movf	??_Lcd_Set_Cursor,w
  4587  01FC  00FA               	movwf	Lcd_Set_Cursor@temp
  4588                           
  4589                           ;./LCD4bits.h: 50:   z = temp>>4;
  4590  01FD  087A               	movf	Lcd_Set_Cursor@temp,w
  4591  01FE  00F5               	movwf	??_Lcd_Set_Cursor
  4592  01FF  3004               	movlw	4
  4593  0200                     u1475:	
  4594  0200  1003               	clrc
  4595  0201  0CF5               	rrf	??_Lcd_Set_Cursor,f
  4596  0202  3EFF               	addlw	-1
  4597  0203  1D03               	skipz
  4598  0204  2A00               	goto	u1475
  4599  0205  0875               	movf	??_Lcd_Set_Cursor,w
  4600  0206  00F6               	movwf	??_Lcd_Set_Cursor+1
  4601  0207  0876               	movf	??_Lcd_Set_Cursor+1,w
  4602  0208  00F8               	movwf	Lcd_Set_Cursor@z
  4603                           
  4604                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  4605  0209  087A               	movf	Lcd_Set_Cursor@temp,w
  4606  020A  390F               	andlw	15
  4607  020B  00F5               	movwf	??_Lcd_Set_Cursor
  4608  020C  0875               	movf	??_Lcd_Set_Cursor,w
  4609  020D  00F9               	movwf	Lcd_Set_Cursor@y
  4610                           
  4611                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  4612  020E  0878               	movf	Lcd_Set_Cursor@z,w
  4613  020F  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  4614                           
  4615                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  4616  0214  0879               	movf	Lcd_Set_Cursor@y,w
  4617  0215  120A  158A  26FE   	fcall	_Lcd_Cmd
  4618                           
  4619                           ;./LCD4bits.h: 54:  }
  4620  0218  0008               	return
  4621  0219                     l1955:	
  4622  0219  3002               	movlw	2
  4623  021A  0677               	xorwf	Lcd_Set_Cursor@a,w
  4624  021B  1D03               	btfss	3,2
  4625  021C  0008               	return
  4626                           
  4627                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  4628  021D  0874               	movf	Lcd_Set_Cursor@b,w
  4629  021E  3EBF               	addlw	191
  4630  021F  00F5               	movwf	??_Lcd_Set_Cursor
  4631  0220  0875               	movf	??_Lcd_Set_Cursor,w
  4632  0221  00FA               	movwf	Lcd_Set_Cursor@temp
  4633                           
  4634                           ;./LCD4bits.h: 58:   z = temp>>4;
  4635  0222  087A               	movf	Lcd_Set_Cursor@temp,w
  4636  0223  00F5               	movwf	??_Lcd_Set_Cursor
  4637  0224  3004               	movlw	4
  4638  0225                     u1495:	
  4639  0225  1003               	clrc
  4640  0226  0CF5               	rrf	??_Lcd_Set_Cursor,f
  4641  0227  3EFF               	addlw	-1
  4642  0228  1D03               	skipz
  4643  0229  2A25               	goto	u1495
  4644  022A  0875               	movf	??_Lcd_Set_Cursor,w
  4645  022B  00F6               	movwf	??_Lcd_Set_Cursor+1
  4646  022C  0876               	movf	??_Lcd_Set_Cursor+1,w
  4647  022D  00F8               	movwf	Lcd_Set_Cursor@z
  4648                           
  4649                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  4650  022E  087A               	movf	Lcd_Set_Cursor@temp,w
  4651  022F  390F               	andlw	15
  4652  0230  00F5               	movwf	??_Lcd_Set_Cursor
  4653  0231  0875               	movf	??_Lcd_Set_Cursor,w
  4654  0232  00F9               	movwf	Lcd_Set_Cursor@y
  4655                           
  4656                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  4657  0233  0878               	movf	Lcd_Set_Cursor@z,w
  4658  0234  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  4659                           
  4660                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  4661  0239  0879               	movf	Lcd_Set_Cursor@y,w
  4662  023A  120A  158A  26FE   	fcall	_Lcd_Cmd
  4663  023D  0008               	return
  4664  023E                     __end_of_Lcd_Set_Cursor:	
  4665                           
  4666                           	psect	text31
  4667  0068                     __ptext31:	
  4668 ;; *************** function _Lcd_Clear *****************
  4669 ;; Defined at:
  4670 ;;		line 38 in file "./LCD4bits.h"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;		None
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;		None
  4675 ;; Return value:  Size  Location     Type
  4676 ;;                  1    wreg      void 
  4677 ;; Registers used:
  4678 ;;		wreg, status,2, status,0, pclath, cstack
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/0
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4684 ;;      Params:         0       0       0       0       0
  4685 ;;      Locals:         0       0       0       0       0
  4686 ;;      Temps:          0       0       0       0       0
  4687 ;;      Totals:         0       0       0       0       0
  4688 ;;Total ram usage:        0 bytes
  4689 ;; Hardware stack levels used:    1
  4690 ;; Hardware stack levels required when called:    2
  4691 ;; This function calls:
  4692 ;;		_Lcd_Cmd
  4693 ;; This function is called by:
  4694 ;;		_main
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           
  4699                           ;psect for function _Lcd_Clear
  4700  0068                     _Lcd_Clear:	
  4701                           
  4702                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  4703                           
  4704                           ;incstack = 0
  4705                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  4706  0068  3000               	movlw	0
  4707  0069  120A  158A  26FE  120A  118A  	fcall	_Lcd_Cmd
  4708                           
  4709                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  4710  006E  3001               	movlw	1
  4711  006F  120A  158A  26FE   	fcall	_Lcd_Cmd
  4712  0072  0008               	return
  4713  0073                     __end_of_Lcd_Clear:	
  4714                           
  4715                           	psect	text32
  4716  0EFE                     __ptext32:	
  4717 ;; *************** function _Lcd_Cmd *****************
  4718 ;; Defined at:
  4719 ;;		line 29 in file "./LCD4bits.h"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  a               1    wreg     unsigned char 
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;  a               1    3[COMMON] unsigned char 
  4724 ;; Return value:  Size  Location     Type
  4725 ;;                  1    wreg      void 
  4726 ;; Registers used:
  4727 ;;		wreg, status,2, status,0, pclath, cstack
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4733 ;;      Params:         0       0       0       0       0
  4734 ;;      Locals:         1       0       0       0       0
  4735 ;;      Temps:          2       0       0       0       0
  4736 ;;      Totals:         3       0       0       0       0
  4737 ;;Total ram usage:        3 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; Hardware stack levels required when called:    1
  4740 ;; This function calls:
  4741 ;;		_Lcd_Port
  4742 ;; This function is called by:
  4743 ;;		_Lcd_Clear
  4744 ;;		_Lcd_Set_Cursor
  4745 ;;		_Lcd_Init
  4746 ;;		_Lcd_Shift_Right
  4747 ;;		_Lcd_Shift_Left
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           
  4752                           ;psect for function _Lcd_Cmd
  4753  0EFE                     _Lcd_Cmd:	
  4754                           
  4755                           ;incstack = 0
  4756                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4757                           ;Lcd_Cmd@a stored from wreg
  4758  0EFE  00F3               	movwf	Lcd_Cmd@a
  4759                           
  4760                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  4761  0EFF  1283               	bcf	3,5	;RP0=0, select bank0
  4762  0F00  1303               	bcf	3,6	;RP1=0, select bank0
  4763  0F01  1206               	bcf	6,4	;volatile
  4764                           
  4765                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  4766  0F02  0873               	movf	Lcd_Cmd@a,w
  4767  0F03  120A  158A  26E4  120A  158A  	fcall	_Lcd_Port
  4768                           
  4769                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  4770  0F08  1283               	bcf	3,5	;RP0=0, select bank0
  4771  0F09  1303               	bcf	3,6	;RP1=0, select bank0
  4772  0F0A  1686               	bsf	6,5	;volatile
  4773                           
  4774                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  4775  0F0B  300B               	movlw	11
  4776  0F0C  00F2               	movwf	??_Lcd_Cmd+1
  4777  0F0D  3062               	movlw	98
  4778  0F0E  00F1               	movwf	??_Lcd_Cmd
  4779  0F0F                     u1767:	
  4780  0F0F  0BF1               	decfsz	??_Lcd_Cmd,f
  4781  0F10  2F0F               	goto	u1767
  4782  0F11  0BF2               	decfsz	??_Lcd_Cmd+1,f
  4783  0F12  2F0F               	goto	u1767
  4784  0F13  0000               	nop
  4785                           
  4786                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  4787  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  4788  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  4789  0F16  1286               	bcf	6,5	;volatile
  4790  0F17  0008               	return
  4791  0F18                     __end_of_Lcd_Cmd:	
  4792                           
  4793                           	psect	text33
  4794  0EE4                     __ptext33:	
  4795 ;; *************** function _Lcd_Port *****************
  4796 ;; Defined at:
  4797 ;;		line 7 in file "./LCD4bits.h"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;  a               1    wreg     unsigned char 
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;  a               1    0[COMMON] unsigned char 
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  1    wreg      void 
  4804 ;; Registers used:
  4805 ;;		wreg
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/0
  4808 ;;		On exit  : 0/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4811 ;;      Params:         0       0       0       0       0
  4812 ;;      Locals:         1       0       0       0       0
  4813 ;;      Temps:          0       0       0       0       0
  4814 ;;      Totals:         1       0       0       0       0
  4815 ;;Total ram usage:        1 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; This function calls:
  4818 ;;		Nothing
  4819 ;; This function is called by:
  4820 ;;		_Lcd_Cmd
  4821 ;;		_Lcd_Init
  4822 ;;		_Lcd_Write_Char
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           
  4827                           ;psect for function _Lcd_Port
  4828  0EE4                     _Lcd_Port:	
  4829                           
  4830                           ;incstack = 0
  4831                           ; Regs used in _Lcd_Port: [wreg]
  4832                           ;Lcd_Port@a stored from wreg
  4833  0EE4  00F0               	movwf	Lcd_Port@a
  4834                           
  4835                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  4836  0EE5  1C70               	btfss	Lcd_Port@a,0
  4837  0EE6  2EEB               	goto	l128
  4838                           
  4839                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  4840  0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  4841  0EE8  1303               	bcf	3,6	;RP1=0, select bank0
  4842  0EE9  1406               	bsf	6,0	;volatile
  4843  0EEA  2EEE               	goto	l129
  4844  0EEB                     l128:	
  4845                           ;./LCD4bits.h: 11:  else
  4846                           
  4847                           
  4848                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  4849  0EEB  1283               	bcf	3,5	;RP0=0, select bank0
  4850  0EEC  1303               	bcf	3,6	;RP1=0, select bank0
  4851  0EED  1006               	bcf	6,0	;volatile
  4852  0EEE                     l129:	
  4853                           
  4854                           ;./LCD4bits.h: 14:  if(a & 2)
  4855  0EEE  1CF0               	btfss	Lcd_Port@a,1
  4856  0EEF  2EF2               	goto	l130
  4857                           
  4858                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  4859  0EF0  1486               	bsf	6,1	;volatile
  4860  0EF1  2EF3               	goto	l131
  4861  0EF2                     l130:	
  4862                           ;./LCD4bits.h: 16:  else
  4863                           
  4864                           
  4865                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  4866  0EF2  1086               	bcf	6,1	;volatile
  4867  0EF3                     l131:	
  4868                           
  4869                           ;./LCD4bits.h: 19:  if(a & 4)
  4870  0EF3  1D70               	btfss	Lcd_Port@a,2
  4871  0EF4  2EF7               	goto	l132
  4872                           
  4873                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  4874  0EF5  1506               	bsf	6,2	;volatile
  4875  0EF6  2EF8               	goto	l133
  4876  0EF7                     l132:	
  4877                           ;./LCD4bits.h: 21:  else
  4878                           
  4879                           
  4880                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  4881  0EF7  1106               	bcf	6,2	;volatile
  4882  0EF8                     l133:	
  4883                           
  4884                           ;./LCD4bits.h: 24:  if(a & 8)
  4885  0EF8  1DF0               	btfss	Lcd_Port@a,3
  4886  0EF9  2EFC               	goto	l134
  4887                           
  4888                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  4889  0EFA  1586               	bsf	6,3	;volatile
  4890  0EFB  0008               	return
  4891  0EFC                     l134:	
  4892                           ;./LCD4bits.h: 26:  else
  4893                           
  4894                           
  4895                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  4896  0EFC  1186               	bcf	6,3	;volatile
  4897  0EFD  0008               	return
  4898  0EFE                     __end_of_Lcd_Port:	
  4899  007E                     btemp	set	126	;btemp
  4900  007E                     wtemp0	set	126


Data Sizes:
    Strings     73
    Constant    10
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      35
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), get_temp@temperature(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_12(CODE[4]), STR_11(CODE[5]), STR_10(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), get_temp@temperature(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    sp__get_time	PTR unsigned char  size(1) Largest target is 6
		 -> get_time@string_time(BANK0[6]), 

    time	PTR unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), get_time@string_time(BANK0[6]), 

    sp__get_temp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    temp	PTR unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), get_temp@temperature(BANK0[6]), 

    UART_Write_Text@text	PTR unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), get_temp@temperature(BANK0[6]), get_time@string_time(BANK0[6]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 12
		 -> NULL(NULL[0]), get_temp@temperature(BANK0[6]), get_time@string_time(BANK0[6]), STR_9(CODE[7]), 
		 -> STR_8(CODE[7]), STR_7(CODE[8]), STR_6(CODE[8]), STR_5(CODE[9]), 
		 -> STR_4(CODE[9]), STR_3(CODE[12]), STR_2(CODE[12]), 


Critical Paths under _main in COMMON

    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _UART_Write_Text->_UART_Write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_UART_Init
    _UART_Init->___aldiv
    _get_temp->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   19641
                                             27 BANK0      1     1      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                         _UART_Write
                    _UART_Write_Text
                             _get_IR
                            _get_PIR
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                              _setup
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     200
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1468
                    _I2C_Master_Init
                           _Lcd_Init
                          _UART_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     412
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                            10    10      0    2432
                                              6 COMMON     2     2      0
                                              0 BANK0      8     8      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                            14    14      0    4317
                                             13 BANK0     14    14      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1429
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     168
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1466
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     729
                                              0 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      4     4      0     178
                                              1 COMMON     4     4      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1028
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     836
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_Write
   _UART_Write_Text
     _UART_Write
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
     _initOscilador
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      31       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1C      23       5       43.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      31      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Mar 02 16:19:25 2019

                                pc 0002                     ___bmul@product 0072  
                      __CFG_CP$OFF 0000                        get_hall@key 0077  
                               _IR 003D                                 fsr 0004  
                              l102 0EC0                                l120 0096  
                              l121 0099                                l130 0EF2  
                              l131 0EF3                                l132 0EF7  
                              l133 0EF8                                l134 0EFC  
                              l206 0ECA                                l128 0EEB  
                              l129 0EEE                                l171 0291  
                              l235 072E                                l236 0731  
                              l239 0740                                l465 03D4  
                              _GIE 005F                       __CFG_CPD$OFF 0000  
                              _PIR 003E                                u945 0302  
                              u965 0310                                u975 0325  
                              u985 0337                      ?_get_tripwire 0070  
                              fsr0 0004                                indf 0000  
                     __CFG_LVP$OFF 0000                               l2017 04CE  
                             l2141 077A                               l2223 0277  
                             l2225 05FE                               l2129 0744  
                             l2075 0FE5                               l1621 030E  
                             l2077 0FD8                               l2157 07AC  
                             l2149 078C                               l2093 06A9  
                             l1711 00A5                               l2079 0FFA  
                             l2175 07E9                               l2167 07C9  
                             l2159 07B6                               l1713 00B3  
                             l1721 00CC                               l1633 0343  
                             l1801 0240                               l1619 02FE  
                             l1811 025D                               l1803 0245  
                             l1717 00C1                               l1629 0336  
                             l1813 0263                               l1805 024B  
                             l1821 026F                               l1911 0697  
                             l1655 03F5                               l1647 03E5  
                             l1815 026A                               l1807 0251  
                             l1673 0448                               l1665 042D  
                             l1657 0405                               l1817 026A  
                             l1809 0257                               l1931 0ED5  
                             l1907 0656                               l1923 0FB7  
                             l1835 05AA                               l1909 05CB  
                             l1925 0FC2                               l1669 043A  
                             l1935 0EDB                               l1695 01A7  
                             l1687 0183                               l1871 0609  
                             l1927 0FCA                               l1689 0191  
                             l1881 0620                               l1865 05EB  
                             l1955 0219                               l1971 01B9  
                             l1699 01B2                               l1893 0643  
                             l1887 0622                               l1979 0F1B  
                             l1899 0652                               STR_1 0057  
                             STR_2 001D                        get_time@min 0027  
                             STR_3 0029                               STR_4 0035  
                             STR_5 003E                               STR_6 0047  
                             STR_7 004F                               STR_8 0048  
                             STR_9 0050                               _BRGH 04C2  
                             _CREN 00C4                               u1115 0186  
                             u1035 03F9                               u1205 00B9  
                             u1135 0192                               u1215 00C2  
                             u1055 0407                               u1145 019E  
                             u1065 041C                               u1321 0589  
                             u1305 0559                               u1322 058A  
                             u1155 01A8                               u1235 00E3  
                             u1075 042E                               u1323 058F  
                             u1315 0572                               u1324 0590  
                             u1325 0595                               u1326 0596  
                             u1255 0118                               u1185 00A8  
                             u1281 0529                               u1265 04F9  
                             u1282 052A                               u1283 052F  
                             u1275 0512                               u1284 0530  
                             u1285 0535                               u1605 0728  
                             u1286 0536                               u1375 0639  
                             u1545 04A6                               u1475 0200  
                             u1565 0398                               u1717 029D  
                             u1495 0225                               u1575 03AF  
                             u1727 02AC                               u1737 02BB  
                             u1747 0128                               u1757 0139  
                             u1767 0F0F                               _PEIE 005E  
                             _RCEN 048B                               _RCIF 0065  
                             _SPEN 00C7                               _TRMT 04C1  
                             _TXEN 04C5                               _SYNC 04C4  
                     __CFG_WRT$OFF 0000                  ?_Lcd_Write_String 0075  
 __end_of_I2C_Master_RepeatedStart 0EB8                               _door 0040  
                             _main 069C                               _temp 0041  
                             _time 0042                               _trip 003F  
                             btemp 007E                               start 0000  
               ??_Lcd_Write_String 0077                      __CFG_IESO$OFF 0000  
                  __end_of_Lcd_Cmd 0F18                  ___bmul@multiplier 0073  
                    __CFG_MCLRE$ON 0000            __end_of_UART_Write_Text 0F36  
              get_temp@temperature 0030                   ?_I2C_Master_Init 0020  
                 ?_I2C_Master_Read 0070                   ?_I2C_Master_Wait 0070  
                 ?_I2C_Master_Stop 0070                    __end_of___aldiv 0451  
                            ?_main 0070                              STR_10 0063  
                            STR_11 005D                              STR_12 0062  
                    __CFG_WDTE$OFF 0000                       get_time@hour 0026  
                            _ANSEL 0188                    __end_of___lldiv 034C  
                   ??_get_tripwire 0076                    __end_of___lwdiv 01B7  
                  __end_of___lwmod 00D1                              _RCREG 001A  
                            _SPBRG 0099                              _PORTA 0005  
                            _PORTB 0006                              _PORTC 0007  
          __size_of_Lcd_Set_Cursor 004A                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
                            _SSPIE 0463                              _SSPIF 0063  
                            _TXREG 0019                    __end_of_get_PIR 0F74  
                   __CFG_FCMEN$OFF 0000                        ?_UART_Write 0070  
               __size_of_UART_Init 00D6                    __end_of_dpowers 001D  
                            _setup 0140                              _state 003C  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 069C                   __end_of_Lcd_Init 02EE  
                 __end_of_Lcd_Port 0EFE                    __initialization 07F3  
                     __end_of_main 07F3             __size_of_initOscilador 0055  
                           ??_main 003B                 __size_of_Lcd_Clear 000B  
                ?_I2C_Master_Start 0070                  ?_I2C_Master_Write 0070  
               ??_I2C_Master_Start 0070                 ??_I2C_Master_Write 0072  
                           ?_setup 0070                             _ANSELH 0189  
                        ??_Lcd_Cmd 0071            __size_of_Lcd_Write_Char 0039  
                           _SSPADD 0093                             _TRISC3 043B  
                           _TRISC4 043C                             _TRISC6 043E  
                           _TRISC7 043F                             _SSPCON 0014  
                           _SSPBUF 0013                     __CFG_PWRTE$OFF 0000  
         _I2C_Master_RepeatedStart 0EB1                   __end_of_get_hall 0F93  
                __end_of_UART_Init 05C4                   __end_of_get_temp 04EE  
                 __end_of_get_time 03C2                             ___bmul 0ED3  
              __size_of_UART_Write 000A                          ??___aldiv 0078  
                 ?_UART_Write_Text 0070                          ??___lldiv 0078  
                           _get_IR 0F36                          ??___lwdiv 0074  
                        ??___lwmod 007C                          ??_get_PIR 0076  
                           _strcat 0FB2                             _strcmp 0FD6  
                        ??_sprintf 0023                    Lcd_Set_Cursor@a 0077  
                  Lcd_Set_Cursor@b 0074                    Lcd_Set_Cursor@y 0079  
                  Lcd_Set_Cursor@z 0078            __end_of__initialization 07FC  
                    _initOscilador 023E                  __end_of_Lcd_Clear 0073  
             __end_of_get_tripwire 0FB2                ___bmul@multiplicand 0070  
                   __pcstackCOMMON 0070                      __end_of_setup 017B  
                   _Lcd_Set_Cursor 01F4                          ?_Lcd_Init 0070  
                        ?_Lcd_Port 0070                            ??_setup 007E  
                       __pbssBANK0 003C                     ?_initOscilador 0070  
                       __pmaintext 069C                            ?___bmul 0070  
                          ?_get_IR 0070          __size_of_Lcd_Write_String 003D  
           __end_of_Lcd_Set_Cursor 023E                            ?_strcat 0070  
                          ?_strcmp 0070                       ??_UART_Write 0070  
                       ??_Lcd_Init 0074                         ??_Lcd_Port 0070  
                          _SSPCON2 0091                          ?_get_hall 0070  
                          _SSPSTAT 0094                          ?_get_temp 0070  
                        ?_get_time 0070                         __stringtab 0003  
              initOscilador@option 0072                     _Lcd_Write_Char 0107  
                          _Lcd_Cmd 0EFE                            ___aldiv 03C2  
                  __size_of___bmul 0011                            ___lldiv 02EE  
               __end_of_UART_Write 0ED3                            ___lwdiv 017B  
                          ___lwmod 009F                    __size_of_get_IR 001F  
                  ?_Lcd_Set_Cursor 0074                            _get_PIR 0F55  
                          __ptext1 0FD6                            __ptext2 0140  
                          __ptext3 023E                            __ptext4 04EE  
                          __ptext5 03C2                            __ptext6 0293  
                          __ptext7 00D1                            __ptext8 02EE  
                          __ptext9 0F93                    __size_of_strcat 0024  
                  __size_of_strcmp 002A                            _dpowers 0013  
                 ___aldiv@dividend 0074           __size_of_I2C_Master_Init 0036  
         __size_of_I2C_Master_Read 002C           __size_of_I2C_Master_Wait 0009  
         __size_of_I2C_Master_Stop 0007                    ??_initOscilador 0070  
                       ??_get_hall 0076                            _sprintf 05C4  
           __end_of_Lcd_Write_Char 0140                         ??_get_temp 002D  
                       ??_get_time 0076               end_of_initialization 07FC  
            __size_of_get_tripwire 001F         ??_I2C_Master_RepeatedStart 0070  
                       get_PIR@PIR 0077          __size_of_I2C_Master_Start 0007  
        __size_of_I2C_Master_Write 0008                    ___lldiv@divisor 0070  
                  ___lldiv@counter 007D                   ___aldiv@quotient 0022  
                 I2C_Master_Init@c 0020                   I2C_Master_Read@a 0070  
                        Lcd_Port@a 0070                            strcmp@r 0075  
                        _UART_Init 04EE                          _PORTAbits 0005  
                        _PORTBbits 0006                          _PORTCbits 0007  
                   UART_Write@data 0070                       _get_tripwire 0F93  
                  ?_Lcd_Write_Char 0070                  Lcd_Write_String@a 0075  
                Lcd_Write_String@i 007A                get_time@string_time 0020  
                        _Lcd_Clear 0068                     __end_of___bmul 0EE4  
                 _Lcd_Write_String 01B7                         ?_UART_Init 0026  
                   __end_of_get_IR 0F55                     __end_of_strcat 0FD6  
         __size_of_UART_Write_Text 001E                     __end_of_strcmp 1000  
              start_initialization 07F3                  __size_of_Lcd_Init 005B  
                __size_of_Lcd_Port 001A                  ??_I2C_Master_Init 0024  
                ??_I2C_Master_Read 0072                  ??_I2C_Master_Wait 0070  
                ??_I2C_Master_Stop 0070           __CFG_FOSC$INTRC_NOCLKOUT 0000  
                       ?_Lcd_Clear 0070                           ??___bmul 0071  
                         ??_get_IR 0076                    Lcd_Write_Char@a 0074  
                  Lcd_Write_Char@y 0073                           ??_strcat 0071  
                         ??_strcmp 0072                          ___latbits 0002  
                    __pcstackBANK0 0020                  __size_of_get_hall 001F  
                         ?_Lcd_Cmd 0070                  __size_of_get_temp 009D  
                __size_of_get_time 0076                        sprintf@flag 0027  
                      sprintf@prec 0028                   _I2C_Master_Start 0EA3  
                 _I2C_Master_Write 0EB8                   ___lwdiv@dividend 0072  
                 ??_Lcd_Set_Cursor 0075                    get_temp@decimal 0036  
                         ?___aldiv 0070                           ?___lldiv 0070  
                         ?___lwdiv 0070                           ?___lwmod 0078  
                      ??_UART_Init 002A                           ?_get_PIR 0070  
                        __pstrings 0003                    get_temp@tempLSB 003A  
                  get_temp@tempMSB 0039                   ___lwdiv@quotient 0075  
                         ?_sprintf 0020                         UART_Init@x 0079  
                   __size_of_setup 003B                  ??_UART_Write_Text 0071  
                  ___aldiv@divisor 0070                    ___aldiv@counter 0020  
                         Lcd_Cmd@a 0073                        ??_Lcd_Clear 0074  
                UART_Init@baudrate 0026                        __stringbase 0012  
                 ??_Lcd_Write_Char 0071                           _Lcd_Init 0293  
                         _Lcd_Port 0EE4                I2C_Master_Read@temp 0074  
            __end_of_initOscilador 0293           __end_of_Lcd_Write_String 01F4  
                 __size_of_Lcd_Cmd 001A                   __size_of___aldiv 008F  
__size_of_I2C_Master_RepeatedStart 0007          ?_I2C_Master_RepeatedStart 0070  
                 __size_of___lldiv 005E                   __size_of___lwdiv 003C  
                 __size_of___lwmod 0032                 __end_of__stringtab 0013  
                 __size_of_get_PIR 001F                         sprintf@val 0029  
                  _I2C_Master_Init 00D1                    _I2C_Master_Read 0073  
                  _I2C_Master_Wait 0EC0                         strcat@from 0070  
                  _I2C_Master_Stop 0EAA                    ___lwdiv@divisor 0070  
                  ___lwdiv@counter 0077                           __ptext10 034C  
                         __ptext11 0451                           __ptext20 0F36  
                         __ptext12 0FB2                           __ptext21 0EB8  
                         __ptext13 05C4                           __ptext30 01F4  
                         __ptext22 0EAA                           __ptext14 009F  
                         __ptext31 0068                           __ptext23 0EA3  
                         __ptext15 017B                           __ptext32 0EFE  
                         __ptext24 0073                           __ptext16 0ED3  
                         __ptext33 0EE4                           __ptext25 0EC0  
                         __ptext17 0EB1                           __ptext26 0F18  
                         __ptext18 0F74                           __ptext27 0EC9  
                         __ptext19 0F55                           __ptext28 01B7  
                         __ptext29 0107                  __CFG_BOR4V$BOR40V 0000  
                         _get_hall 0F74                           _get_temp 0451  
                         _get_time 034C                   __size_of_sprintf 00D8  
              UART_Write_Text@text 0074                      __size_of_main 0157  
                         get_IR@IR 0077           __end_of_I2C_Master_Start 0EAA  
         __end_of_I2C_Master_Write 0EC0                 Lcd_Write_Char@temp 0072  
                        sprintf@ap 0026                          sprintf@sp 002B  
                 ___lwmod@dividend 007A                   ___lldiv@dividend 0074  
                        stringcode 000D                         _OSCCONbits 008F  
          __end_of_I2C_Master_Init 0107            __end_of_I2C_Master_Read 009F  
          __end_of_I2C_Master_Wait 0EC9            __end_of_I2C_Master_Stop 0EB1  
               Lcd_Set_Cursor@temp 007A                    _UART_Write_Text 0F18  
                         sprintf@c 002C                           sprintf@f 0020  
                         strcat@cp 0073                           strcat@to 0072  
                         strcmp@s1 0076                           strcmp@s2 0070  
                 ___lldiv@quotient 0079                  I2C_Master_Write@d 0070  
                  ___lwmod@divisor 0078                    ___lwmod@counter 007D  
                         stringdir 000D                   get_tripwire@trip 0077  
                         stringtab 0003                       ___aldiv@sign 0021  
                       _UART_Write 0EC9                        _SSPCON2bits 0091  
                 UART_Write_Text@i 0072  



Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Mar 07 10:09:00 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	psect	text28,local,class=CODE,merge=1,delta=2
    39                           	psect	text29,local,class=CODE,merge=1,delta=2
    40                           	psect	text30,local,class=CODE,merge=1,delta=2
    41                           	psect	text31,local,class=CODE,merge=1,delta=2
    42                           	psect	text32,local,class=CODE,merge=1,delta=2
    43                           	psect	text33,local,class=CODE,merge=1,delta=2
    44                           	psect	text34,local,class=CODE,merge=1,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 2.05
    48                           ; Generated 20/12/2018 GMT
    49                           ; 
    50                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F887 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0008                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000D                     	;# 
    95  000E                     	;# 
    96  000E                     	;# 
    97  000F                     	;# 
    98  0010                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0013                     	;# 
   102  0014                     	;# 
   103  0015                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001B                     	;# 
   111  001B                     	;# 
   112  001C                     	;# 
   113  001D                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  0087                     	;# 
   120  0088                     	;# 
   121  0089                     	;# 
   122  008C                     	;# 
   123  008D                     	;# 
   124  008E                     	;# 
   125  008F                     	;# 
   126  0090                     	;# 
   127  0091                     	;# 
   128  0092                     	;# 
   129  0093                     	;# 
   130  0093                     	;# 
   131  0093                     	;# 
   132  0094                     	;# 
   133  0095                     	;# 
   134  0096                     	;# 
   135  0097                     	;# 
   136  0098                     	;# 
   137  0099                     	;# 
   138  009A                     	;# 
   139  009B                     	;# 
   140  009C                     	;# 
   141  009D                     	;# 
   142  009E                     	;# 
   143  009F                     	;# 
   144  0105                     	;# 
   145  0107                     	;# 
   146  0108                     	;# 
   147  0109                     	;# 
   148  010C                     	;# 
   149  010C                     	;# 
   150  010D                     	;# 
   151  010E                     	;# 
   152  010F                     	;# 
   153  0185                     	;# 
   154  0187                     	;# 
   155  0188                     	;# 
   156  0189                     	;# 
   157  018C                     	;# 
   158  018D                     	;# 
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  000E                     	;# 
   175  000F                     	;# 
   176  0010                     	;# 
   177  0011                     	;# 
   178  0012                     	;# 
   179  0013                     	;# 
   180  0014                     	;# 
   181  0015                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  001D                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  0081                     	;# 
   195  0085                     	;# 
   196  0086                     	;# 
   197  0087                     	;# 
   198  0088                     	;# 
   199  0089                     	;# 
   200  008C                     	;# 
   201  008D                     	;# 
   202  008E                     	;# 
   203  008F                     	;# 
   204  0090                     	;# 
   205  0091                     	;# 
   206  0092                     	;# 
   207  0093                     	;# 
   208  0093                     	;# 
   209  0093                     	;# 
   210  0094                     	;# 
   211  0095                     	;# 
   212  0096                     	;# 
   213  0097                     	;# 
   214  0098                     	;# 
   215  0099                     	;# 
   216  009A                     	;# 
   217  009B                     	;# 
   218  009C                     	;# 
   219  009D                     	;# 
   220  009E                     	;# 
   221  009F                     	;# 
   222  0105                     	;# 
   223  0107                     	;# 
   224  0108                     	;# 
   225  0109                     	;# 
   226  010C                     	;# 
   227  010C                     	;# 
   228  010D                     	;# 
   229  010E                     	;# 
   230  010F                     	;# 
   231  0185                     	;# 
   232  0187                     	;# 
   233  0188                     	;# 
   234  0189                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237                           
   238                           	psect	strings
   239  0003                     __pstrings:	
   240  0003                     stringtab:	
   241  0003                     __stringtab:	
   242                           
   243                           ;	String table - string pointers are 1 byte each
   244  0003  1BFF               	btfsc	btemp+1,7
   245  0004  280D               	ljmp	stringcode
   246  0005  1383               	bcf	3,7
   247  0006  187F               	btfsc	btemp+1,0
   248  0007  1783               	bsf	3,7
   249  0008  0800               	movf	0,w
   250  0009  0A84               	incf	4,f
   251  000A  1903               	skipnz
   252  000B  0AFF               	incf	btemp+1,f
   253  000C  0008               	return
   254  000D                     stringcode:	
   255  000D                     stringdir:	
   256  000D  3000               	movlw	high stringdir
   257  000E  008A               	movwf	10
   258  000F  0804               	movf	4,w
   259  0010  0A84               	incf	4,f
   260  0011  0782               	addwf	2,f
   261  0012                     __stringbase:	
   262  0012  3400               	retlw	0
   263  0013                     __end_of__stringtab:	
   264  0013                     _dpowers:	
   265  0013  3401               	retlw	1
   266  0014  3400               	retlw	0
   267  0015  340A               	retlw	10
   268  0016  3400               	retlw	0
   269  0017  3464               	retlw	100
   270  0018  3400               	retlw	0
   271  0019  34E8               	retlw	232
   272  001A  3403               	retlw	3
   273  001B  3410               	retlw	16
   274  001C  3427               	retlw	39
   275  001D                     __end_of_dpowers:	
   276  0007                     _PORTC	set	7
   277  0005                     _PORTA	set	5
   278  0006                     _PORTB	set	6
   279  0007                     _PORTCbits	set	7
   280  0005                     _PORTAbits	set	5
   281  0014                     _SSPCONbits	set	20
   282  0018                     _RCSTAbits	set	24
   283  0019                     _TXREG	set	25
   284  001A                     _RCREG	set	26
   285  0006                     _PORTBbits	set	6
   286  0013                     _SSPBUF	set	19
   287  0014                     _SSPCON	set	20
   288  0065                     _RCIF	set	101
   289  00C4                     _CREN	set	196
   290  00C7                     _SPEN	set	199
   291  0063                     _SSPIF	set	99
   292  005E                     _PEIE	set	94
   293  005F                     _GIE	set	95
   294  0087                     _TRISC	set	135
   295  0088                     _TRISD	set	136
   296  0085                     _TRISA	set	133
   297  0086                     _TRISB	set	134
   298  0099                     _SPBRG	set	153
   299  008F                     _OSCCONbits	set	143
   300  0091                     _SSPCON2bits	set	145
   301  0087                     _TRISCbits	set	135
   302  0094                     _SSPSTAT	set	148
   303  0093                     _SSPADD	set	147
   304  0091                     _SSPCON2	set	145
   305  04C1                     _TRMT	set	1217
   306  04C5                     _TXEN	set	1221
   307  043E                     _TRISC6	set	1086
   308  043F                     _TRISC7	set	1087
   309  04C4                     _SYNC	set	1220
   310  04C2                     _BRGH	set	1218
   311  0463                     _SSPIE	set	1123
   312  043C                     _TRISC4	set	1084
   313  043B                     _TRISC3	set	1083
   314  048B                     _RCEN	set	1163
   315  0188                     _ANSEL	set	392
   316  0189                     _ANSELH	set	393
   317  001D                     STR_10:	
   318  001D  3444               	retlw	68	;'D'
   319  001E  346F               	retlw	111	;'o'
   320  001F  346F               	retlw	111	;'o'
   321  0020  3472               	retlw	114	;'r'
   322  0021  3420               	retlw	32	;' '
   323  0022  344F               	retlw	79	;'O'
   324  0023  3450               	retlw	80	;'P'
   325  0024  3445               	retlw	69	;'E'
   326  0025  344E               	retlw	78	;'N'
   327  0026  3420               	retlw	32	;' '
   328  0027  3420               	retlw	32	;' '
   329  0028  3400               	retlw	0
   330  0029                     STR_11:	
   331  0029  3444               	retlw	68	;'D'
   332  002A  346F               	retlw	111	;'o'
   333  002B  346F               	retlw	111	;'o'
   334  002C  3472               	retlw	114	;'r'
   335  002D  3420               	retlw	32	;' '
   336  002E  3443               	retlw	67	;'C'
   337  002F  344C               	retlw	76	;'L'
   338  0030  344F               	retlw	79	;'O'
   339  0031  3453               	retlw	83	;'S'
   340  0032  3445               	retlw	69	;'E'
   341  0033  3444               	retlw	68	;'D'
   342  0034  3400               	retlw	0
   343  0035                     STR_8:	
   344  0035  3420               	retlw	32	;' '
   345  0036  3420               	retlw	32	;' '
   346  0037  3420               	retlw	32	;' '
   347  0038  3420               	retlw	32	;' '
   348  0039  3420               	retlw	32	;' '
   349  003A  3420               	retlw	32	;' '
   350  003B  3420               	retlw	32	;' '
   351  003C  3420               	retlw	32	;' '
   352  003D  3420               	retlw	32	;' '
   353  003E  3400               	retlw	0
   354  003F                     STR_1:	
   355  003F  344C               	retlw	76	;'L'
   356  0040  3455               	retlw	85	;'U'
   357  0041  344E               	retlw	78	;'N'
   358  0042  3445               	retlw	69	;'E'
   359  0043  3453               	retlw	83	;'S'
   360  0044  3420               	retlw	32	;' '
   361  0045  3420               	retlw	32	;' '
   362  0046  3420               	retlw	32	;' '
   363  0047  3420               	retlw	32	;' '
   364  0048  3400               	retlw	0
   365  0049                     STR_6:	
   366  0049  3453               	retlw	83	;'S'
   367  004A  3441               	retlw	65	;'A'
   368  004B  3442               	retlw	66	;'B'
   369  004C  3441               	retlw	65	;'A'
   370  004D  3444               	retlw	68	;'D'
   371  004E  344F               	retlw	79	;'O'
   372  004F  3420               	retlw	32	;' '
   373  0050  3420               	retlw	32	;' '
   374  0051  3420               	retlw	32	;' '
   375  0052  3400               	retlw	0
   376  0053                     STR_2:	
   377  0053  344D               	retlw	77	;'M'
   378  0054  3441               	retlw	65	;'A'
   379  0055  3452               	retlw	82	;'R'
   380  0056  3454               	retlw	84	;'T'
   381  0057  3445               	retlw	69	;'E'
   382  0058  3453               	retlw	83	;'S'
   383  0059  3420               	retlw	32	;' '
   384  005A  3420               	retlw	32	;' '
   385  005B  3420               	retlw	32	;' '
   386  005C  3400               	retlw	0
   387  005D                     STR_4:	
   388  005D  344A               	retlw	74	;'J'
   389  005E  3455               	retlw	85	;'U'
   390  005F  3445               	retlw	69	;'E'
   391  0060  3456               	retlw	86	;'V'
   392  0061  3445               	retlw	69	;'E'
   393  0062  3453               	retlw	83	;'S'
   394  0063  3420               	retlw	32	;' '
   395  0064  3420               	retlw	32	;' '
   396  0065  3420               	retlw	32	;' '
   397  0066  3400               	retlw	0
   398  0067                     STR_7:	
   399  0067  3444               	retlw	68	;'D'
   400  0068  344F               	retlw	79	;'O'
   401  0069  344D               	retlw	77	;'M'
   402  006A  3449               	retlw	73	;'I'
   403  006B  344E               	retlw	78	;'N'
   404  006C  3447               	retlw	71	;'G'
   405  006D  344F               	retlw	79	;'O'
   406  006E  3420               	retlw	32	;' '
   407  006F  3420               	retlw	32	;' '
   408  0070  3400               	retlw	0
   409  0071                     STR_5:	
   410  0071  3456               	retlw	86	;'V'
   411  0072  3449               	retlw	73	;'I'
   412  0073  3445               	retlw	69	;'E'
   413  0074  3452               	retlw	82	;'R'
   414  0075  344E               	retlw	78	;'N'
   415  0076  3445               	retlw	69	;'E'
   416  0077  3453               	retlw	83	;'S'
   417  0078  3420               	retlw	32	;' '
   418  0079  3420               	retlw	32	;' '
   419  007A  3400               	retlw	0
   420  007B                     STR_3:	
   421  007B  344D               	retlw	77	;'M'
   422  007C  3449               	retlw	73	;'I'
   423  007D  3445               	retlw	69	;'E'
   424  007E  3452               	retlw	82	;'R'
   425  007F  3443               	retlw	67	;'C'
   426  0080  344F               	retlw	79	;'O'
   427  0081  344C               	retlw	76	;'L'
   428  0082  3445               	retlw	69	;'E'
   429  0083  3453               	retlw	83	;'S'
   430  0084  3400               	retlw	0
   431  0085                     STR_12:	
   432  0085  3454               	retlw	84	;'T'
   433  0086  3472               	retlw	114	;'r'
   434  0087  3469               	retlw	105	;'i'
   435  0088  3470               	retlw	112	;'p'
   436  0089  3420               	retlw	32	;' '
   437  008A  344F               	retlw	79	;'O'
   438  008B  344E               	retlw	78	;'N'
   439  008C  3420               	retlw	32	;' '
   440  008D  3400               	retlw	0
   441  008E                     STR_13:	
   442  008E  3454               	retlw	84	;'T'
   443  008F  3472               	retlw	114	;'r'
   444  0090  3469               	retlw	105	;'i'
   445  0091  3470               	retlw	112	;'p'
   446  0092  3420               	retlw	32	;' '
   447  0093  344F               	retlw	79	;'O'
   448  0094  3446               	retlw	70	;'F'
   449  0095  3446               	retlw	70	;'F'
   450  0096  3400               	retlw	0
   451  0097                     STR_14:	
   452  0097  3450               	retlw	80	;'P'
   453  0098  3449               	retlw	73	;'I'
   454  0099  3452               	retlw	82	;'R'
   455  009A  3420               	retlw	32	;' '
   456  009B  344F               	retlw	79	;'O'
   457  009C  344E               	retlw	78	;'N'
   458  009D  3420               	retlw	32	;' '
   459  009E  3400               	retlw	0
   460  009F                     STR_15:	
   461  009F  3450               	retlw	80	;'P'
   462  00A0  3449               	retlw	73	;'I'
   463  00A1  3452               	retlw	82	;'R'
   464  00A2  3420               	retlw	32	;' '
   465  00A3  344F               	retlw	79	;'O'
   466  00A4  3446               	retlw	70	;'F'
   467  00A5  3446               	retlw	70	;'F'
   468  00A6  3400               	retlw	0
   469  00A7                     STR_9:	
   470  00A7  3432               	retlw	50	;'2'
   471  00A8  3433               	retlw	51	;'3'
   472  00A9  342E               	retlw	46	;'.'
   473  00AA  3435               	retlw	53	;'5'
   474  00AB  3430               	retlw	48	;'0'
   475  00AC  3400               	retlw	0
   476  00AD                     STR_19:	
   477  00AD  342E               	retlw	46	;'.'
   478  00AE  3425               	retlw	37	;'%'
   479  00AF  3464               	retlw	100	;'d'
   480  00B0  3430               	retlw	48	;'0'
   481  00B1  3400               	retlw	0
   482  00B2                     STR_20:	
   483  00B2  342E               	retlw	46	;'.'
   484  00B3  3425               	retlw	37	;'%'
   485  00B4  3464               	retlw	100	;'d'
   486  00B5  3400               	retlw	0
   487  0098                     
   488                           ; #config settings
   489  0000                     
   490                           	psect	cinit
   491  07F5                     start_initialization:	
   492  07F5                     __initialization:	
   493                           
   494                           ; Clear objects allocated to BANK0
   495  07F5  1383               	bcf	3,7	;select IRP bank0
   496  07F6  3020               	movlw	low __pbssBANK0
   497  07F7  0084               	movwf	4
   498  07F8  303E               	movlw	low (__pbssBANK0+30)
   499  07F9  120A  158A  2500   	fcall	clear_ram0
   500  07FC                     end_of_initialization:	
   501                           ;End of C runtime variable initialization code
   502                           
   503  07FC                     __end_of__initialization:	
   504  07FC  0183               	clrf	3
   505  07FD  120A  118A  2D63   	ljmp	_main	;jump to C main() function
   506                           
   507                           	psect	bssBANK0
   508  0020                     __pbssBANK0:	
   509  0020                     _newtime:	
   510  0020                     	ds	6
   511  0026                     _newday:	
   512  0026                     	ds	1
   513  0027                     _change:	
   514  0027                     	ds	1
   515  0028                     _j:	
   516  0028                     	ds	1
   517  0029                     _i:	
   518  0029                     	ds	1
   519  002A                     _day1:	
   520  002A                     	ds	1
   521  002B                     _state:	
   522  002B                     	ds	1
   523  002C                     _IR:	
   524  002C                     	ds	1
   525  002D                     _PIR:	
   526  002D                     	ds	1
   527  002E                     _trip:	
   528  002E                     	ds	1
   529  002F                     _door:	
   530  002F                     	ds	1
   531  0030                     _newday2:	
   532  0030                     	ds	1
   533  0031                     _day2:	
   534  0031                     	ds	1
   535  0032                     _temp:	
   536  0032                     	ds	6
   537  0038                     _time:	
   538  0038                     	ds	6
   539                           
   540                           	psect	clrtext
   541  0D00                     clear_ram0:	
   542                           ;	Called with FSR containing the base address, and
   543                           ;	W with the last address+1
   544                           
   545  0D00  0064               	clrwdt	;clear the watchdog before getting into this loop
   546  0D01                     clrloop0:	
   547  0D01  0180               	clrf	0	;clear RAM location pointed to by FSR
   548  0D02  0A84               	incf	4,f	;increment pointer
   549  0D03  0604               	xorwf	4,w	;XOR with final address
   550  0D04  1903               	btfsc	3,2	;have we reached the end yet?
   551  0D05  3400               	retlw	0	;all done for this memory range, return
   552  0D06  0604               	xorwf	4,w	;XOR again to restore value
   553  0D07  2D01               	goto	clrloop0	;do the next byte
   554                           
   555                           	psect	cstackCOMMON
   556  0070                     __pcstackCOMMON:	
   557  0070                     ?_setup:	
   558  0070                     ?_get_temp:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0070                     ?_get_hall:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0070                     ?_get_tripwire:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0070                     ?_get_PIR:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ?_get_IR:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ?_get_time:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ?_get_day:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ?_strcat:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ?_I2C_Master_Wait:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     ??_I2C_Master_Wait:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ?_I2C_Master_Start:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0070                     ??_I2C_Master_Start:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0070                     ?_I2C_Master_RepeatedStart:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0070                     ??_I2C_Master_RepeatedStart:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0070                     ?_I2C_Master_Stop:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0070                     ??_I2C_Master_Stop:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0070                     ?_I2C_Master_Write:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0070                     ?_Lcd_Port:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0070                     ??_Lcd_Port:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0070                     ?_Lcd_Cmd:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0070                     ?_Lcd_Clear:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0070                     ?_Lcd_Init:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0070                     ?_Lcd_Write_Char:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0070                     ?_initOscilador:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0070                     ??_initOscilador:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0070                     ?_UART_TX_Empty:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0070                     ??_UART_TX_Empty:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0070                     ?_UART_Write:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0070                     ??_UART_Write:	
   643                           ; 1 bytes @ 0x0
   644                           
   645  0070                     ?_main:	
   646                           ; 1 bytes @ 0x0
   647                           
   648  0070                     ?___bmul:	
   649                           ; 1 bytes @ 0x0
   650                           
   651  0070                     ?_strcmp:	
   652                           ; 1 bytes @ 0x0
   653                           
   654  0070                     ?_I2C_Master_Read:	
   655                           ; 2 bytes @ 0x0
   656                           
   657  0070                     ?___lwdiv:	
   658                           ; 2 bytes @ 0x0
   659                           
   660  0070                     ?___lldiv:	
   661                           ; 2 bytes @ 0x0
   662                           
   663  0070                     ?___aldiv:	
   664                           ; 4 bytes @ 0x0
   665                           
   666  0070                     Lcd_Port@a:	
   667                           ; 4 bytes @ 0x0
   668                           
   669  0070                     UART_Write@data:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0070                     ___bmul@multiplicand:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0070                     strcat@from:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0070                     strcmp@s2:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0070                     I2C_Master_Write@d:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0070                     I2C_Master_Read@a:	
   685                           ; 2 bytes @ 0x0
   686                           
   687  0070                     ___lwdiv@divisor:	
   688                           ; 2 bytes @ 0x0
   689                           
   690  0070                     ___lldiv@divisor:	
   691                           ; 2 bytes @ 0x0
   692                           
   693  0070                     ___aldiv@divisor:	
   694                           ; 4 bytes @ 0x0
   695                           
   696                           
   697                           ; 4 bytes @ 0x0
   698  0070                     	ds	1
   699  0071                     ??_strcat:	
   700  0071                     ??_Lcd_Cmd:	
   701                           ; 1 bytes @ 0x1
   702                           
   703  0071                     ??_Lcd_Write_Char:	
   704                           ; 1 bytes @ 0x1
   705                           
   706  0071                     ??___bmul:	
   707                           ; 1 bytes @ 0x1
   708                           
   709                           
   710                           ; 1 bytes @ 0x1
   711  0071                     	ds	1
   712  0072                     ??_strcmp:	
   713  0072                     ??_I2C_Master_Write:	
   714                           ; 1 bytes @ 0x2
   715                           
   716  0072                     ??_I2C_Master_Read:	
   717                           ; 1 bytes @ 0x2
   718                           
   719  0072                     Lcd_Write_Char@temp:	
   720                           ; 1 bytes @ 0x2
   721                           
   722  0072                     initOscilador@option:	
   723                           ; 1 bytes @ 0x2
   724                           
   725  0072                     ___bmul@product:	
   726                           ; 1 bytes @ 0x2
   727                           
   728  0072                     strcat@to:	
   729                           ; 1 bytes @ 0x2
   730                           
   731  0072                     ___lwdiv@dividend:	
   732                           ; 1 bytes @ 0x2
   733                           
   734                           
   735                           ; 2 bytes @ 0x2
   736  0072                     	ds	1
   737  0073                     Lcd_Cmd@a:	
   738  0073                     Lcd_Write_Char@y:	
   739                           ; 1 bytes @ 0x3
   740                           
   741  0073                     ___bmul@multiplier:	
   742                           ; 1 bytes @ 0x3
   743                           
   744  0073                     strcat@cp:	
   745                           ; 1 bytes @ 0x3
   746                           
   747                           
   748                           ; 1 bytes @ 0x3
   749  0073                     	ds	1
   750  0074                     ??_Lcd_Clear:	
   751  0074                     ?_Lcd_Set_Cursor:	
   752                           ; 1 bytes @ 0x4
   753                           
   754  0074                     ??_Lcd_Init:	
   755                           ; 1 bytes @ 0x4
   756                           
   757  0074                     ??___lwdiv:	
   758                           ; 1 bytes @ 0x4
   759                           
   760  0074                     Lcd_Set_Cursor@b:	
   761                           ; 1 bytes @ 0x4
   762                           
   763  0074                     Lcd_Write_Char@a:	
   764                           ; 1 bytes @ 0x4
   765                           
   766  0074                     I2C_Master_Read@temp:	
   767                           ; 1 bytes @ 0x4
   768                           
   769  0074                     ___lldiv@dividend:	
   770                           ; 2 bytes @ 0x4
   771                           
   772  0074                     ___aldiv@dividend:	
   773                           ; 4 bytes @ 0x4
   774                           
   775                           
   776                           ; 4 bytes @ 0x4
   777  0074                     	ds	1
   778  0075                     ??_Lcd_Set_Cursor:	
   779  0075                     ?_Lcd_Write_String:	
   780                           ; 1 bytes @ 0x5
   781                           
   782  0075                     strcmp@r:	
   783                           ; 1 bytes @ 0x5
   784                           
   785  0075                     Lcd_Write_String@a:	
   786                           ; 1 bytes @ 0x5
   787                           
   788  0075                     ___lwdiv@quotient:	
   789                           ; 2 bytes @ 0x5
   790                           
   791                           
   792                           ; 2 bytes @ 0x5
   793  0075                     	ds	1
   794  0076                     ??_get_hall:	
   795  0076                     ??_get_tripwire:	
   796                           ; 1 bytes @ 0x6
   797                           
   798  0076                     ??_get_PIR:	
   799                           ; 1 bytes @ 0x6
   800                           
   801  0076                     ??_get_IR:	
   802                           ; 1 bytes @ 0x6
   803                           
   804  0076                     ??_get_time:	
   805                           ; 1 bytes @ 0x6
   806                           
   807  0076                     ??_get_day:	
   808                           ; 1 bytes @ 0x6
   809                           
   810  0076                     strcmp@s1:	
   811                           ; 1 bytes @ 0x6
   812                           
   813                           
   814                           ; 1 bytes @ 0x6
   815  0076                     	ds	1
   816  0077                     ??_Lcd_Write_String:	
   817  0077                     Lcd_Set_Cursor@a:	
   818                           ; 1 bytes @ 0x7
   819                           
   820  0077                     get_day@d:	
   821                           ; 1 bytes @ 0x7
   822                           
   823  0077                     get_hall@key:	
   824                           ; 1 bytes @ 0x7
   825                           
   826  0077                     get_tripwire@trip:	
   827                           ; 1 bytes @ 0x7
   828                           
   829  0077                     get_PIR@PIR:	
   830                           ; 1 bytes @ 0x7
   831                           
   832  0077                     get_IR@IR:	
   833                           ; 1 bytes @ 0x7
   834                           
   835  0077                     ___lwdiv@counter:	
   836                           ; 1 bytes @ 0x7
   837                           
   838                           
   839                           ; 1 bytes @ 0x7
   840  0077                     	ds	1
   841  0078                     ??___lldiv:	
   842  0078                     ??___aldiv:	
   843                           ; 1 bytes @ 0x8
   844                           
   845  0078                     ?___lwmod:	
   846                           ; 1 bytes @ 0x8
   847                           
   848  0078                     Lcd_Set_Cursor@z:	
   849                           ; 2 bytes @ 0x8
   850                           
   851  0078                     get_time@hour:	
   852                           ; 1 bytes @ 0x8
   853                           
   854  0078                     ___lwmod@divisor:	
   855                           ; 1 bytes @ 0x8
   856                           
   857                           
   858                           ; 2 bytes @ 0x8
   859  0078                     	ds	1
   860  0079                     Lcd_Set_Cursor@y:	
   861  0079                     get_time@min:	
   862                           ; 1 bytes @ 0x9
   863                           
   864  0079                     UART_Init@x:	
   865                           ; 1 bytes @ 0x9
   866                           
   867  0079                     ___lldiv@quotient:	
   868                           ; 2 bytes @ 0x9
   869                           
   870                           
   871                           ; 4 bytes @ 0x9
   872  0079                     	ds	1
   873  007A                     Lcd_Set_Cursor@temp:	
   874  007A                     get_time@time_string:	
   875                           ; 1 bytes @ 0xA
   876                           
   877  007A                     Lcd_Write_String@i:	
   878                           ; 1 bytes @ 0xA
   879                           
   880  007A                     ___lwmod@dividend:	
   881                           ; 2 bytes @ 0xA
   882                           
   883                           
   884                           ; 2 bytes @ 0xA
   885  007A                     	ds	2
   886  007C                     ??___lwmod:	
   887                           
   888                           ; 1 bytes @ 0xC
   889  007C                     	ds	1
   890  007D                     ___lldiv@counter:	
   891  007D                     ___lwmod@counter:	
   892                           ; 1 bytes @ 0xD
   893                           
   894                           
   895                           ; 1 bytes @ 0xD
   896  007D                     	ds	1
   897  007E                     ??_setup:	
   898                           
   899                           	psect	cstackBANK0
   900  003E                     __pcstackBANK0:	
   901                           ; 1 bytes @ 0xE
   902                           
   903  003E                     ?_I2C_Master_Init:	
   904  003E                     ?_sprintf:	
   905                           ; 1 bytes @ 0x0
   906                           
   907  003E                     sprintf@f:	
   908                           ; 2 bytes @ 0x0
   909                           
   910  003E                     ___aldiv@counter:	
   911                           ; 1 bytes @ 0x0
   912                           
   913  003E                     I2C_Master_Init@c:	
   914                           ; 1 bytes @ 0x0
   915                           
   916                           
   917                           ; 4 bytes @ 0x0
   918  003E                     	ds	1
   919  003F                     ___aldiv@sign:	
   920                           
   921                           ; 1 bytes @ 0x1
   922  003F                     	ds	1
   923  0040                     ___aldiv@quotient:	
   924                           
   925                           ; 4 bytes @ 0x2
   926  0040                     	ds	1
   927  0041                     ??_sprintf:	
   928                           
   929                           ; 1 bytes @ 0x3
   930  0041                     	ds	1
   931  0042                     ??_I2C_Master_Init:	
   932                           
   933                           ; 1 bytes @ 0x4
   934  0042                     	ds	2
   935  0044                     ?_UART_Init:	
   936  0044                     sprintf@ap:	
   937                           ; 1 bytes @ 0x6
   938                           
   939  0044                     UART_Init@baudrate:	
   940                           ; 1 bytes @ 0x6
   941                           
   942                           
   943                           ; 4 bytes @ 0x6
   944  0044                     	ds	1
   945  0045                     sprintf@flag:	
   946                           
   947                           ; 1 bytes @ 0x7
   948  0045                     	ds	1
   949  0046                     sprintf@prec:	
   950                           
   951                           ; 1 bytes @ 0x8
   952  0046                     	ds	1
   953  0047                     sprintf@val:	
   954                           
   955                           ; 2 bytes @ 0x9
   956  0047                     	ds	1
   957  0048                     ??_UART_Init:	
   958                           
   959                           ; 1 bytes @ 0xA
   960  0048                     	ds	1
   961  0049                     sprintf@sp:	
   962                           
   963                           ; 1 bytes @ 0xB
   964  0049                     	ds	1
   965  004A                     sprintf@c:	
   966                           
   967                           ; 1 bytes @ 0xC
   968  004A                     	ds	1
   969  004B                     ??_get_temp:	
   970                           
   971                           ; 1 bytes @ 0xD
   972  004B                     	ds	3
   973  004E                     get_temp@decimal:	
   974                           
   975                           ; 3 bytes @ 0x10
   976  004E                     	ds	3
   977  0051                     get_temp@tempMSB:	
   978                           
   979                           ; 1 bytes @ 0x13
   980  0051                     	ds	1
   981  0052                     get_temp@temp_string:	
   982                           
   983                           ; 1 bytes @ 0x14
   984  0052                     	ds	1
   985  0053                     get_temp@tempLSB:	
   986                           
   987                           ; 1 bytes @ 0x15
   988  0053                     	ds	1
   989  0054                     ??_main:	
   990                           
   991                           ; 1 bytes @ 0x16
   992  0054                     	ds	2
   993                           
   994                           	psect	maintext
   995  0563                     __pmaintext:	
   996 ;;
   997 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   998 ;;
   999 ;; *************** function _main *****************
  1000 ;; Defined at:
  1001 ;;		line 54 in file "mainMaster.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;		None
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;		None
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : B00/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1015 ;;      Params:         0       0       0       0       0
  1016 ;;      Locals:         0       0       0       0       0
  1017 ;;      Temps:          0       2       0       0       0
  1018 ;;      Totals:         0       2       0       0       0
  1019 ;;Total ram usage:        2 bytes
  1020 ;; Hardware stack levels required when called:    4
  1021 ;; This function calls:
  1022 ;;		_Lcd_Clear
  1023 ;;		_Lcd_Set_Cursor
  1024 ;;		_Lcd_Write_Char
  1025 ;;		_Lcd_Write_String
  1026 ;;		_UART_TX_Empty
  1027 ;;		_UART_Write
  1028 ;;		_get_IR
  1029 ;;		_get_PIR
  1030 ;;		_get_day
  1031 ;;		_get_hall
  1032 ;;		_get_temp
  1033 ;;		_get_time
  1034 ;;		_get_tripwire
  1035 ;;		_setup
  1036 ;;		_strcmp
  1037 ;; This function is called by:
  1038 ;;		Startup code after reset
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           
  1043                           ;psect for function _main
  1044  0563                     _main:	
  1045                           
  1046                           ;mainMaster.c: 55:     setup();
  1047                           
  1048                           ;incstack = 0
  1049                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1050  0563  120A  158A  2774  120A  118A  	fcall	_setup
  1051                           
  1052                           ;mainMaster.c: 56:     state = 0;
  1053  0568  1283               	bcf	3,5	;RP0=0, select bank0
  1054  0569  1303               	bcf	3,6	;RP1=0, select bank0
  1055  056A  01AB               	clrf	_state
  1056                           
  1057                           ;mainMaster.c: 57:     Lcd_Clear();
  1058  056B  120A  158A  251B  120A  118A  	fcall	_Lcd_Clear
  1059  0570                     l2250:	
  1060                           
  1061                           ;mainMaster.c: 61:         RCSTAbits.SPEN = 0;
  1062  0570  1283               	bcf	3,5	;RP0=0, select bank0
  1063  0571  1303               	bcf	3,6	;RP1=0, select bank0
  1064  0572  1398               	bcf	24,7	;volatile
  1065                           
  1066                           ;mainMaster.c: 62:         SSPCONbits.SSPEN = 1;
  1067  0573  1694               	bsf	20,5	;volatile
  1068                           
  1069                           ;mainMaster.c: 64:         get_temp(temp);
  1070  0574  3032               	movlw	(low (_temp| 0))& (0+255)
  1071  0575  120A  118A  2312  120A  118A  	fcall	_get_temp
  1072                           
  1073                           ;mainMaster.c: 65:         door = get_hall();
  1074  057A  120A  158A  25A9  120A  118A  	fcall	_get_hall
  1075  057F  1283               	bcf	3,5	;RP0=0, select bank0
  1076  0580  1303               	bcf	3,6	;RP1=0, select bank0
  1077  0581  00D4               	movwf	??_main
  1078  0582  0854               	movf	??_main,w
  1079  0583  00AF               	movwf	_door
  1080                           
  1081                           ;mainMaster.c: 66:         trip = get_tripwire();
  1082  0584  120A  158A  25C8  120A  118A  	fcall	_get_tripwire
  1083  0589  1283               	bcf	3,5	;RP0=0, select bank0
  1084  058A  1303               	bcf	3,6	;RP1=0, select bank0
  1085  058B  00D4               	movwf	??_main
  1086  058C  0854               	movf	??_main,w
  1087  058D  00AE               	movwf	_trip
  1088                           
  1089                           ;mainMaster.c: 67:         PIR = get_PIR();
  1090  058E  120A  158A  258A  120A  118A  	fcall	_get_PIR
  1091  0593  1283               	bcf	3,5	;RP0=0, select bank0
  1092  0594  1303               	bcf	3,6	;RP1=0, select bank0
  1093  0595  00D4               	movwf	??_main
  1094  0596  0854               	movf	??_main,w
  1095  0597  00AD               	movwf	_PIR
  1096                           
  1097                           ;mainMaster.c: 68:         IR = get_IR();
  1098  0598  120A  158A  256B  120A  118A  	fcall	_get_IR
  1099  059D  1283               	bcf	3,5	;RP0=0, select bank0
  1100  059E  1303               	bcf	3,6	;RP1=0, select bank0
  1101  059F  00D4               	movwf	??_main
  1102  05A0  0854               	movf	??_main,w
  1103  05A1  00AC               	movwf	_IR
  1104                           
  1105                           ;mainMaster.c: 69:         get_time(time);
  1106  05A2  3038               	movlw	(low (_time| 0))& (0+255)
  1107  05A3  120A  118A  2202  120A  118A  	fcall	_get_time
  1108                           
  1109                           ;mainMaster.c: 70:         day1 = get_day();
  1110  05A8  120A  158A  2693  120A  118A  	fcall	_get_day
  1111  05AD  1283               	bcf	3,5	;RP0=0, select bank0
  1112  05AE  1303               	bcf	3,6	;RP1=0, select bank0
  1113  05AF  00D4               	movwf	??_main
  1114  05B0  0854               	movf	??_main,w
  1115  05B1  00AA               	movwf	_day1
  1116                           
  1117                           ;mainMaster.c: 72:         SSPCONbits.SSPEN = 0;
  1118  05B2  1294               	bcf	20,5	;volatile
  1119                           
  1120                           ;mainMaster.c: 73:         RCSTAbits.SPEN = 1;
  1121  05B3  1798               	bsf	24,7	;volatile
  1122                           
  1123                           ;mainMaster.c: 75:         if (UART_TX_Empty()){
  1124  05B4  120A  158A  24DD  120A  118A  	fcall	_UART_TX_Empty
  1125  05B9  3A00               	xorlw	0
  1126  05BA  1903               	skipnz
  1127  05BB  2ED2               	goto	l2332
  1128                           
  1129                           ;mainMaster.c: 76:             UART_Write(temp[0]);
  1130  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  1131  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  1132  05BE  0832               	movf	_temp,w
  1133  05BF  120A  158A  2511  120A  118A  	fcall	_UART_Write
  1134                           
  1135                           ;mainMaster.c: 77:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1136  05C4  3003               	movlw	3
  1137  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  1138  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  1139  05C7  00D5               	movwf	??_main+1
  1140  05C8  3097               	movlw	151
  1141  05C9  00D4               	movwf	??_main
  1142  05CA                     u1757:	
  1143  05CA  0BD4               	decfsz	??_main,f
  1144  05CB  2DCA               	goto	u1757
  1145  05CC  0BD5               	decfsz	??_main+1,f
  1146  05CD  2DCA               	goto	u1757
  1147                           
  1148                           ;mainMaster.c: 78:             UART_Write(temp[1]);
  1149  05CE  1283               	bcf	3,5	;RP0=0, select bank0
  1150  05CF  1303               	bcf	3,6	;RP1=0, select bank0
  1151  05D0  0833               	movf	_temp+1,w
  1152  05D1  120A  158A  2511  120A  118A  	fcall	_UART_Write
  1153                           
  1154                           ;mainMaster.c: 79:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1155  05D6  3003               	movlw	3
  1156  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  1157  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  1158  05D9  00D5               	movwf	??_main+1
  1159  05DA  3097               	movlw	151
  1160  05DB  00D4               	movwf	??_main
  1161  05DC                     u1767:	
  1162  05DC  0BD4               	decfsz	??_main,f
  1163  05DD  2DDC               	goto	u1767
  1164  05DE  0BD5               	decfsz	??_main+1,f
  1165  05DF  2DDC               	goto	u1767
  1166                           
  1167                           ;mainMaster.c: 80:             UART_Write(temp[2]);
  1168  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  1169  05E1  1303               	bcf	3,6	;RP1=0, select bank0
  1170  05E2  0834               	movf	_temp+2,w
  1171  05E3  120A  158A  2511  120A  118A  	fcall	_UART_Write
  1172                           
  1173                           ;mainMaster.c: 81:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1174  05E8  3003               	movlw	3
  1175  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  1176  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  1177  05EB  00D5               	movwf	??_main+1
  1178  05EC  3097               	movlw	151
  1179  05ED  00D4               	movwf	??_main
  1180  05EE                     u1777:	
  1181  05EE  0BD4               	decfsz	??_main,f
  1182  05EF  2DEE               	goto	u1777
  1183  05F0  0BD5               	decfsz	??_main+1,f
  1184  05F1  2DEE               	goto	u1777
  1185                           
  1186                           ;mainMaster.c: 82:             UART_Write(temp[3]);
  1187  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  1188  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  1189  05F4  0835               	movf	_temp+3,w
  1190  05F5  120A  158A  2511  120A  118A  	fcall	_UART_Write
  1191                           
  1192                           ;mainMaster.c: 83:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1193  05FA  3003               	movlw	3
  1194  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  1195  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  1196  05FD  00D5               	movwf	??_main+1
  1197  05FE  3097               	movlw	151
  1198  05FF  00D4               	movwf	??_main
  1199  0600                     u1787:	
  1200  0600  0BD4               	decfsz	??_main,f
  1201  0601  2E00               	goto	u1787
  1202  0602  0BD5               	decfsz	??_main+1,f
  1203  0603  2E00               	goto	u1787
  1204                           
  1205                           ;mainMaster.c: 84:             UART_Write(temp[4]);
  1206  0604  1283               	bcf	3,5	;RP0=0, select bank0
  1207  0605  1303               	bcf	3,6	;RP1=0, select bank0
  1208  0606  0836               	movf	_temp+4,w
  1209  0607  120A  158A  2511  120A  118A  	fcall	_UART_Write
  1210                           
  1211                           ;mainMaster.c: 85:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1212  060C  3003               	movlw	3
  1213  060D  1283               	bcf	3,5	;RP0=0, select bank0
  1214  060E  1303               	bcf	3,6	;RP1=0, select bank0
  1215  060F  00D5               	movwf	??_main+1
  1216  0610  3097               	movlw	151
  1217  0611  00D4               	movwf	??_main
  1218  0612                     u1797:	
  1219  0612  0BD4               	decfsz	??_main,f
  1220  0613  2E12               	goto	u1797
  1221  0614  0BD5               	decfsz	??_main+1,f
  1222  0615  2E12               	goto	u1797
  1223                           
  1224                           ;mainMaster.c: 86:             UART_Write(time[0]);
  1225  0616  1283               	bcf	3,5	;RP0=0, select bank0
  1226  0617  1303               	bcf	3,6	;RP1=0, select bank0
  1227  0618  0838               	movf	_time,w
  1228  0619  120A  158A  2511  120A  118A  	fcall	_UART_Write
  1229                           
  1230                           ;mainMaster.c: 87:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1231  061E  3003               	movlw	3
  1232  061F  1283               	bcf	3,5	;RP0=0, select bank0
  1233  0620  1303               	bcf	3,6	;RP1=0, select bank0
  1234  0621  00D5               	movwf	??_main+1
  1235  0622  3097               	movlw	151
  1236  0623  00D4               	movwf	??_main
  1237  0624                     u1807:	
  1238  0624  0BD4               	decfsz	??_main,f
  1239  0625  2E24               	goto	u1807
  1240  0626  0BD5               	decfsz	??_main+1,f
  1241  0627  2E24               	goto	u1807
  1242                           
  1243                           ;mainMaster.c: 88:             UART_Write(time[1]);
  1244  0628  1283               	bcf	3,5	;RP0=0, select bank0
  1245  0629  1303               	bcf	3,6	;RP1=0, select bank0
  1246  062A  0839               	movf	_time+1,w
  1247  062B  120A  158A  2511  120A  118A  	fcall	_UART_Write
  1248                           
  1249                           ;mainMaster.c: 89:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1250  0630  3003               	movlw	3
  1251  0631  1283               	bcf	3,5	;RP0=0, select bank0
  1252  0632  1303               	bcf	3,6	;RP1=0, select bank0
  1253  0633  00D5               	movwf	??_main+1
  1254  0634  3097               	movlw	151
  1255  0635  00D4               	movwf	??_main
  1256  0636                     u1817:	
  1257  0636  0BD4               	decfsz	??_main,f
  1258  0637  2E36               	goto	u1817
  1259  0638  0BD5               	decfsz	??_main+1,f
  1260  0639  2E36               	goto	u1817
  1261                           
  1262                           ;mainMaster.c: 90:             UART_Write(time[2]);
  1263  063A  1283               	bcf	3,5	;RP0=0, select bank0
  1264  063B  1303               	bcf	3,6	;RP1=0, select bank0
  1265  063C  083A               	movf	_time+2,w
  1266  063D  120A  158A  2511  120A  118A  	fcall	_UART_Write
  1267                           
  1268                           ;mainMaster.c: 91:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1269  0642  3003               	movlw	3
  1270  0643  1283               	bcf	3,5	;RP0=0, select bank0
  1271  0644  1303               	bcf	3,6	;RP1=0, select bank0
  1272  0645  00D5               	movwf	??_main+1
  1273  0646  3097               	movlw	151
  1274  0647  00D4               	movwf	??_main
  1275  0648                     u1827:	
  1276  0648  0BD4               	decfsz	??_main,f
  1277  0649  2E48               	goto	u1827
  1278  064A  0BD5               	decfsz	??_main+1,f
  1279  064B  2E48               	goto	u1827
  1280                           
  1281                           ;mainMaster.c: 92:             UART_Write(time[3]);
  1282  064C  1283               	bcf	3,5	;RP0=0, select bank0
  1283  064D  1303               	bcf	3,6	;RP1=0, select bank0
  1284  064E  083B               	movf	_time+3,w
  1285  064F  120A  158A  2511  120A  118A  	fcall	_UART_Write
  1286                           
  1287                           ;mainMaster.c: 93:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1288  0654  3003               	movlw	3
  1289  0655  1283               	bcf	3,5	;RP0=0, select bank0
  1290  0656  1303               	bcf	3,6	;RP1=0, select bank0
  1291  0657  00D5               	movwf	??_main+1
  1292  0658  3097               	movlw	151
  1293  0659  00D4               	movwf	??_main
  1294  065A                     u1837:	
  1295  065A  0BD4               	decfsz	??_main,f
  1296  065B  2E5A               	goto	u1837
  1297  065C  0BD5               	decfsz	??_main+1,f
  1298  065D  2E5A               	goto	u1837
  1299                           
  1300                           ;mainMaster.c: 94:             UART_Write(time[4]);
  1301  065E  1283               	bcf	3,5	;RP0=0, select bank0
  1302  065F  1303               	bcf	3,6	;RP1=0, select bank0
  1303  0660  083C               	movf	_time+4,w
  1304  0661  120A  158A  2511  120A  118A  	fcall	_UART_Write
  1305                           
  1306                           ;mainMaster.c: 95:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1307  0666  3003               	movlw	3
  1308  0667  1283               	bcf	3,5	;RP0=0, select bank0
  1309  0668  1303               	bcf	3,6	;RP1=0, select bank0
  1310  0669  00D5               	movwf	??_main+1
  1311  066A  3097               	movlw	151
  1312  066B  00D4               	movwf	??_main
  1313  066C                     u1847:	
  1314  066C  0BD4               	decfsz	??_main,f
  1315  066D  2E6C               	goto	u1847
  1316  066E  0BD5               	decfsz	??_main+1,f
  1317  066F  2E6C               	goto	u1847
  1318                           
  1319                           ;mainMaster.c: 96:             UART_Write(door);
  1320  0670  1283               	bcf	3,5	;RP0=0, select bank0
  1321  0671  1303               	bcf	3,6	;RP1=0, select bank0
  1322  0672  082F               	movf	_door,w
  1323  0673  120A  158A  2511  120A  118A  	fcall	_UART_Write
  1324                           
  1325                           ;mainMaster.c: 97:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1326  0678  3003               	movlw	3
  1327  0679  1283               	bcf	3,5	;RP0=0, select bank0
  1328  067A  1303               	bcf	3,6	;RP1=0, select bank0
  1329  067B  00D5               	movwf	??_main+1
  1330  067C  3097               	movlw	151
  1331  067D  00D4               	movwf	??_main
  1332  067E                     u1857:	
  1333  067E  0BD4               	decfsz	??_main,f
  1334  067F  2E7E               	goto	u1857
  1335  0680  0BD5               	decfsz	??_main+1,f
  1336  0681  2E7E               	goto	u1857
  1337                           
  1338                           ;mainMaster.c: 98:             UART_Write(trip);
  1339  0682  1283               	bcf	3,5	;RP0=0, select bank0
  1340  0683  1303               	bcf	3,6	;RP1=0, select bank0
  1341  0684  082E               	movf	_trip,w
  1342  0685  120A  158A  2511  120A  118A  	fcall	_UART_Write
  1343                           
  1344                           ;mainMaster.c: 99:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1345  068A  3003               	movlw	3
  1346  068B  1283               	bcf	3,5	;RP0=0, select bank0
  1347  068C  1303               	bcf	3,6	;RP1=0, select bank0
  1348  068D  00D5               	movwf	??_main+1
  1349  068E  3097               	movlw	151
  1350  068F  00D4               	movwf	??_main
  1351  0690                     u1867:	
  1352  0690  0BD4               	decfsz	??_main,f
  1353  0691  2E90               	goto	u1867
  1354  0692  0BD5               	decfsz	??_main+1,f
  1355  0693  2E90               	goto	u1867
  1356                           
  1357                           ;mainMaster.c: 100:             UART_Write(PIR);
  1358  0694  1283               	bcf	3,5	;RP0=0, select bank0
  1359  0695  1303               	bcf	3,6	;RP1=0, select bank0
  1360  0696  082D               	movf	_PIR,w
  1361  0697  120A  158A  2511  120A  118A  	fcall	_UART_Write
  1362                           
  1363                           ;mainMaster.c: 101:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1364  069C  3003               	movlw	3
  1365  069D  1283               	bcf	3,5	;RP0=0, select bank0
  1366  069E  1303               	bcf	3,6	;RP1=0, select bank0
  1367  069F  00D5               	movwf	??_main+1
  1368  06A0  3097               	movlw	151
  1369  06A1  00D4               	movwf	??_main
  1370  06A2                     u1877:	
  1371  06A2  0BD4               	decfsz	??_main,f
  1372  06A3  2EA2               	goto	u1877
  1373  06A4  0BD5               	decfsz	??_main+1,f
  1374  06A5  2EA2               	goto	u1877
  1375                           
  1376                           ;mainMaster.c: 102:             UART_Write(IR);
  1377  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  1378  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  1379  06A8  082C               	movf	_IR,w
  1380  06A9  120A  158A  2511  120A  118A  	fcall	_UART_Write
  1381                           
  1382                           ;mainMaster.c: 103:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1383  06AE  3003               	movlw	3
  1384  06AF  1283               	bcf	3,5	;RP0=0, select bank0
  1385  06B0  1303               	bcf	3,6	;RP1=0, select bank0
  1386  06B1  00D5               	movwf	??_main+1
  1387  06B2  3097               	movlw	151
  1388  06B3  00D4               	movwf	??_main
  1389  06B4                     u1887:	
  1390  06B4  0BD4               	decfsz	??_main,f
  1391  06B5  2EB4               	goto	u1887
  1392  06B6  0BD5               	decfsz	??_main+1,f
  1393  06B7  2EB4               	goto	u1887
  1394                           
  1395                           ;mainMaster.c: 104:             UART_Write('A');
  1396  06B8  3041               	movlw	65
  1397  06B9  120A  158A  2511  120A  118A  	fcall	_UART_Write
  1398  06BE  2ED2               	goto	l2332
  1399  06BF                     l2314:	
  1400                           
  1401                           ;mainMaster.c: 109:                 day2 = "LUNES    ";
  1402  06BF  302D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1403  06C0  2ECE               	goto	L7
  1404  06C1                     l2316:	
  1405                           ;mainMaster.c: 110:                 break;
  1406                           
  1407                           
  1408                           ;mainMaster.c: 112:                 day2 = "MARTES   ";
  1409  06C1  3041               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1410  06C2  2ECE               	goto	L7
  1411  06C3                     l2318:	
  1412                           ;mainMaster.c: 113:                 break;
  1413                           
  1414                           
  1415                           ;mainMaster.c: 115:                 day2 = "MIERCOLES";
  1416  06C3  3069               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1417  06C4  2ECE               	goto	L7
  1418  06C5                     l2320:	
  1419                           ;mainMaster.c: 116:                 break;
  1420                           
  1421                           
  1422                           ;mainMaster.c: 118:                 day2 = "JUEVES   ";
  1423  06C5  304B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1424  06C6  2ECE               	goto	L7
  1425  06C7                     l2322:	
  1426                           ;mainMaster.c: 119:                 break;
  1427                           
  1428                           
  1429                           ;mainMaster.c: 121:                 day2 = "VIERNES  ";
  1430  06C7  305F               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1431  06C8  2ECE               	goto	L7
  1432  06C9                     l2324:	
  1433                           ;mainMaster.c: 122:                 break;
  1434                           
  1435                           
  1436                           ;mainMaster.c: 124:                 day2 = "SABADO   ";
  1437  06C9  3037               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1438  06CA  2ECE               	goto	L7
  1439  06CB                     l2326:	
  1440                           ;mainMaster.c: 125:                 break;
  1441                           
  1442                           
  1443                           ;mainMaster.c: 127:                 day2 = "DOMINGO  ";
  1444  06CB  3055               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1445  06CC  2ECE               	goto	L7
  1446  06CD                     l2328:	
  1447                           ;mainMaster.c: 128:                 break;
  1448                           
  1449                           
  1450                           ;mainMaster.c: 130:                 day2 = "         ";
  1451  06CD  3023               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1452  06CE                     L7:	
  1453  06CE  00D4               	movwf	??_main
  1454  06CF  0854               	movf	??_main,w
  1455  06D0  00B1               	movwf	_day2
  1456                           
  1457                           ;mainMaster.c: 131:                 break;
  1458  06D1  2EF3               	goto	l2334
  1459  06D2                     l2332:	
  1460  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  1461  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  1462  06D4  082A               	movf	_day1,w
  1463  06D5  00D4               	movwf	??_main
  1464  06D6  01D5               	clrf	??_main+1
  1465                           
  1466                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1467                           ; Switch size 1, requested type "simple"
  1468                           ; Number of cases is 1, Range of values is 0 to 0
  1469                           ; switch strategies available:
  1470                           ; Name         Instructions Cycles
  1471                           ; simple_byte            4     3 (average)
  1472                           ; direct_byte           11     8 (fixed)
  1473                           ; jumptable            260     6 (fixed)
  1474                           ;	Chosen strategy is simple_byte
  1475  06D7  0855               	movf	??_main+1,w
  1476  06D8  3A00               	xorlw	0	; case 0
  1477  06D9  1903               	skipnz
  1478  06DA  2EDC               	goto	l2472
  1479  06DB  2ECD               	goto	l2328
  1480  06DC                     l2472:	
  1481                           
  1482                           ; Switch size 1, requested type "simple"
  1483                           ; Number of cases is 7, Range of values is 1 to 7
  1484                           ; switch strategies available:
  1485                           ; Name         Instructions Cycles
  1486                           ; simple_byte           22    12 (average)
  1487                           ; direct_byte           32    11 (fixed)
  1488                           ; jumptable            263     9 (fixed)
  1489                           ;	Chosen strategy is simple_byte
  1490  06DC  0854               	movf	??_main,w
  1491  06DD  3A01               	xorlw	1	; case 1
  1492  06DE  1903               	skipnz
  1493  06DF  2EBF               	goto	l2314
  1494  06E0  3A03               	xorlw	3	; case 2
  1495  06E1  1903               	skipnz
  1496  06E2  2EC1               	goto	l2316
  1497  06E3  3A01               	xorlw	1	; case 3
  1498  06E4  1903               	skipnz
  1499  06E5  2EC3               	goto	l2318
  1500  06E6  3A07               	xorlw	7	; case 4
  1501  06E7  1903               	skipnz
  1502  06E8  2EC5               	goto	l2320
  1503  06E9  3A01               	xorlw	1	; case 5
  1504  06EA  1903               	skipnz
  1505  06EB  2EC7               	goto	l2322
  1506  06EC  3A03               	xorlw	3	; case 6
  1507  06ED  1903               	skipnz
  1508  06EE  2EC9               	goto	l2324
  1509  06EF  3A01               	xorlw	1	; case 7
  1510  06F0  1903               	skipnz
  1511  06F1  2ECB               	goto	l2326
  1512  06F2  2ECD               	goto	l2328
  1513  06F3                     l2334:	
  1514                           
  1515                           ;mainMaster.c: 135:         if (strcmp(temp,"23.50") > 0){
  1516  06F3  3095               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1517  06F4  00D4               	movwf	??_main
  1518  06F5  0854               	movf	??_main,w
  1519  06F6  00F0               	movwf	strcmp@s2
  1520  06F7  3032               	movlw	(low (_temp| 0))& (0+255)
  1521  06F8  120A  158A  260B  120A  118A  	fcall	_strcmp
  1522  06FD  0871               	movf	?_strcmp+1,w
  1523  06FE  3A80               	xorlw	128
  1524  06FF  00FF               	movwf	127
  1525  0700  3080               	movlw	128
  1526  0701  027F               	subwf	127,w
  1527  0702  1D03               	skipz
  1528  0703  2F06               	goto	u1635
  1529  0704  3001               	movlw	1
  1530  0705  0270               	subwf	?_strcmp,w
  1531  0706                     u1635:	
  1532  0706  1C03               	skipc
  1533  0707  2F0C               	goto	l272
  1534                           
  1535                           ;mainMaster.c: 136:             PORTAbits.RA0 = 1;
  1536  0708  1283               	bcf	3,5	;RP0=0, select bank0
  1537  0709  1303               	bcf	3,6	;RP1=0, select bank0
  1538  070A  1405               	bsf	5,0	;volatile
  1539                           
  1540                           ;mainMaster.c: 137:         } else {
  1541  070B  2F0F               	goto	l273
  1542  070C                     l272:	
  1543                           
  1544                           ;mainMaster.c: 138:             PORTAbits.RA0 = 0;
  1545  070C  1283               	bcf	3,5	;RP0=0, select bank0
  1546  070D  1303               	bcf	3,6	;RP1=0, select bank0
  1547  070E  1005               	bcf	5,0	;volatile
  1548  070F                     l273:	
  1549                           ;mainMaster.c: 139:         }
  1550                           
  1551                           
  1552                           ;mainMaster.c: 142:         if(PORTCbits.RC0 == 1){
  1553  070F  1C07               	btfss	7,0	;volatile
  1554  0710  2F30               	goto	l2356
  1555                           
  1556                           ;mainMaster.c: 143:             if (change == 0){
  1557  0711  0827               	movf	_change,w
  1558  0712  1D03               	btfss	3,2
  1559  0713  2F31               	goto	l2358
  1560                           
  1561                           ;mainMaster.c: 144:                 state++;
  1562  0714  3001               	movlw	1
  1563  0715  00D4               	movwf	??_main
  1564  0716  0854               	movf	??_main,w
  1565  0717  07AB               	addwf	_state,f
  1566                           
  1567                           ;mainMaster.c: 145:                 Lcd_Clear();
  1568  0718  120A  158A  251B  120A  118A  	fcall	_Lcd_Clear
  1569                           
  1570                           ;mainMaster.c: 146:                 if (state > 2){
  1571  071D  3003               	movlw	3
  1572  071E  1283               	bcf	3,5	;RP0=0, select bank0
  1573  071F  1303               	bcf	3,6	;RP1=0, select bank0
  1574  0720  022B               	subwf	_state,w
  1575  0721  1803               	btfsc	3,0
  1576                           
  1577                           ;mainMaster.c: 147:                     state = 0;
  1578  0722  01AB               	clrf	_state
  1579  0723                     l2350:	
  1580                           
  1581                           ;mainMaster.c: 149:                 while(j < 50){
  1582  0723  3032               	movlw	50
  1583  0724  0228               	subwf	_j,w
  1584  0725  1803               	btfsc	3,0
  1585  0726  2F2C               	goto	l2352
  1586                           
  1587                           ;mainMaster.c: 150:                     j++;
  1588  0727  3001               	movlw	1
  1589  0728  00D4               	movwf	??_main
  1590  0729  0854               	movf	??_main,w
  1591  072A  07A8               	addwf	_j,f
  1592  072B  2F23               	goto	l2350
  1593  072C                     l2352:	
  1594                           
  1595                           ;mainMaster.c: 152:                 j = 0;
  1596  072C  01A8               	clrf	_j
  1597                           
  1598                           ;mainMaster.c: 153:                 change = 1;
  1599  072D  01A7               	clrf	_change
  1600  072E  0AA7               	incf	_change,f
  1601  072F  2F31               	goto	l2358
  1602  0730                     l2356:	
  1603                           
  1604                           ;mainMaster.c: 156:             change =0;
  1605  0730  01A7               	clrf	_change
  1606  0731                     l2358:	
  1607                           
  1608                           ;mainMaster.c: 160:         if (state == 0){
  1609  0731  082B               	movf	_state,w
  1610  0732  1D03               	btfss	3,2
  1611  0733  2F7C               	goto	l2370
  1612                           
  1613                           ;mainMaster.c: 162:             Lcd_Set_Cursor(1,1);
  1614  0734  01F4               	clrf	Lcd_Set_Cursor@b
  1615  0735  0AF4               	incf	Lcd_Set_Cursor@b,f
  1616  0736  3001               	movlw	1
  1617  0737  120A  158A  27B6  120A  118A  	fcall	_Lcd_Set_Cursor
  1618                           
  1619                           ;mainMaster.c: 163:             Lcd_Write_String(time);
  1620  073C  3038               	movlw	(low (_time| 0))& (0+255)
  1621  073D  00F5               	movwf	Lcd_Write_String@a
  1622  073E  3000               	movlw	0
  1623  073F  00F6               	movwf	Lcd_Write_String@a+1
  1624  0740  120A  118A  20B7  120A  118A  	fcall	_Lcd_Write_String
  1625                           
  1626                           ;mainMaster.c: 165:             Lcd_Set_Cursor(1,7);
  1627  0745  3007               	movlw	7
  1628  0746  1283               	bcf	3,5	;RP0=0, select bank0
  1629  0747  1303               	bcf	3,6	;RP1=0, select bank0
  1630  0748  00D4               	movwf	??_main
  1631  0749  0854               	movf	??_main,w
  1632  074A  00F4               	movwf	Lcd_Set_Cursor@b
  1633  074B  3001               	movlw	1
  1634  074C  120A  158A  27B6  120A  118A  	fcall	_Lcd_Set_Cursor
  1635                           
  1636                           ;mainMaster.c: 166:             Lcd_Write_String(day2);
  1637  0751  1283               	bcf	3,5	;RP0=0, select bank0
  1638  0752  1303               	bcf	3,6	;RP1=0, select bank0
  1639  0753  0831               	movf	_day2,w
  1640  0754  00F5               	movwf	Lcd_Write_String@a
  1641  0755  3000               	movlw	0
  1642  0756  1D03               	btfss	3,2
  1643  0757  3080               	movlw	128
  1644  0758  00F6               	movwf	Lcd_Write_String@a+1
  1645  0759  120A  118A  20B7  120A  118A  	fcall	_Lcd_Write_String
  1646                           
  1647                           ;mainMaster.c: 168:             Lcd_Set_Cursor(2,1);
  1648  075E  01F4               	clrf	Lcd_Set_Cursor@b
  1649  075F  0AF4               	incf	Lcd_Set_Cursor@b,f
  1650  0760  3002               	movlw	2
  1651  0761  120A  158A  27B6  120A  118A  	fcall	_Lcd_Set_Cursor
  1652                           
  1653                           ;mainMaster.c: 169:             Lcd_Write_String(temp);
  1654  0766  3032               	movlw	(low (_temp| 0))& (0+255)
  1655  0767  00F5               	movwf	Lcd_Write_String@a
  1656  0768  3000               	movlw	0
  1657  0769  00F6               	movwf	Lcd_Write_String@a+1
  1658  076A  120A  118A  20B7  120A  118A  	fcall	_Lcd_Write_String
  1659                           
  1660                           ;mainMaster.c: 170:             Lcd_Write_Char(223);
  1661  076F  30DF               	movlw	223
  1662  0770  120A  158A  26FF  120A  118A  	fcall	_Lcd_Write_Char
  1663                           
  1664                           ;mainMaster.c: 171:             Lcd_Write_Char('C');
  1665  0775  3043               	movlw	67
  1666  0776  120A  158A  26FF  120A  118A  	fcall	_Lcd_Write_Char
  1667                           
  1668                           ;mainMaster.c: 173:         } else if (state == 1){
  1669  077B  2D70               	goto	l2250
  1670  077C                     l2370:	
  1671  077C  032B               	decf	_state,w
  1672  077D  1D03               	btfss	3,2
  1673  077E  2FB8               	goto	l2388
  1674                           
  1675                           ;mainMaster.c: 175:             Lcd_Set_Cursor(1,1);
  1676  077F  01F4               	clrf	Lcd_Set_Cursor@b
  1677  0780  0AF4               	incf	Lcd_Set_Cursor@b,f
  1678  0781  3001               	movlw	1
  1679  0782  120A  158A  27B6  120A  118A  	fcall	_Lcd_Set_Cursor
  1680                           
  1681                           ;mainMaster.c: 176:             if (door == 1){
  1682  0787  1283               	bcf	3,5	;RP0=0, select bank0
  1683  0788  1303               	bcf	3,6	;RP1=0, select bank0
  1684  0789  032F               	decf	_door,w
  1685  078A  1D03               	btfss	3,2
  1686  078B  2F8E               	goto	l2378
  1687                           
  1688                           ;mainMaster.c: 177:                 Lcd_Write_String("Door OPEN  ");
  1689  078C  300B               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1690  078D  2F8F               	goto	L8
  1691  078E                     l2378:	
  1692                           ;mainMaster.c: 178:             } else {
  1693                           
  1694                           
  1695                           ;mainMaster.c: 179:                 Lcd_Write_String("Door CLOSED");
  1696  078E  3017               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1697  078F                     L8:	
  1698  078F  00F5               	movwf	Lcd_Write_String@a
  1699  0790  3080               	movlw	128
  1700  0791  00F6               	movwf	Lcd_Write_String@a+1
  1701  0792  120A  118A  20B7  120A  118A  	fcall	_Lcd_Write_String
  1702                           
  1703                           ;mainMaster.c: 182:             Lcd_Set_Cursor(2,1);
  1704  0797  01F4               	clrf	Lcd_Set_Cursor@b
  1705  0798  0AF4               	incf	Lcd_Set_Cursor@b,f
  1706  0799  3002               	movlw	2
  1707  079A  120A  158A  27B6  120A  118A  	fcall	_Lcd_Set_Cursor
  1708                           
  1709                           ;mainMaster.c: 183:             if (trip == 1){
  1710  079F  1283               	bcf	3,5	;RP0=0, select bank0
  1711  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  1712  07A1  032E               	decf	_trip,w
  1713  07A2  1D03               	btfss	3,2
  1714  07A3  2FAE               	goto	l2386
  1715                           
  1716                           ;mainMaster.c: 184:                 Lcd_Write_String("Trip ON ");
  1717  07A4  3073               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1718  07A5  00F5               	movwf	Lcd_Write_String@a
  1719  07A6  3080               	movlw	128
  1720  07A7  00F6               	movwf	Lcd_Write_String@a+1
  1721  07A8  120A  118A  20B7  120A  118A  	fcall	_Lcd_Write_String
  1722                           
  1723                           ;mainMaster.c: 185:             } else {
  1724  07AD  2D70               	goto	l2250
  1725  07AE                     l2386:	
  1726                           
  1727                           ;mainMaster.c: 186:                 Lcd_Write_String("Trip OFF");
  1728  07AE  307C               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1729  07AF  00F5               	movwf	Lcd_Write_String@a
  1730  07B0  3080               	movlw	128
  1731  07B1  00F6               	movwf	Lcd_Write_String@a+1
  1732  07B2  120A  118A  20B7  120A  118A  	fcall	_Lcd_Write_String
  1733  07B7  2D70               	goto	l2250
  1734  07B8                     l2388:	
  1735  07B8  3002               	movlw	2
  1736  07B9  062B               	xorwf	_state,w
  1737  07BA  1D03               	btfss	3,2
  1738  07BB  2D70               	goto	l2250
  1739                           
  1740                           ;mainMaster.c: 191:             Lcd_Set_Cursor(1,1);
  1741  07BC  01F4               	clrf	Lcd_Set_Cursor@b
  1742  07BD  0AF4               	incf	Lcd_Set_Cursor@b,f
  1743  07BE  3001               	movlw	1
  1744  07BF  120A  158A  27B6  120A  118A  	fcall	_Lcd_Set_Cursor
  1745                           
  1746                           ;mainMaster.c: 192:             if (PIR == 1){
  1747  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  1748  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  1749  07C6  032D               	decf	_PIR,w
  1750  07C7  1D03               	btfss	3,2
  1751  07C8  2FCB               	goto	l2396
  1752                           
  1753                           ;mainMaster.c: 193:                 Lcd_Write_String("PIR ON ");
  1754  07C9  3085               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  1755  07CA  2FCC               	goto	L9
  1756  07CB                     l2396:	
  1757                           ;mainMaster.c: 194:             } else {
  1758                           
  1759                           
  1760                           ;mainMaster.c: 195:                 Lcd_Write_String("PIR OFF");
  1761  07CB  308D               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1762  07CC                     L9:	
  1763  07CC  00F5               	movwf	Lcd_Write_String@a
  1764  07CD  3080               	movlw	128
  1765  07CE  00F6               	movwf	Lcd_Write_String@a+1
  1766  07CF  120A  118A  20B7  120A  118A  	fcall	_Lcd_Write_String
  1767                           
  1768                           ;mainMaster.c: 198:             Lcd_Set_Cursor(2,1);
  1769  07D4  01F4               	clrf	Lcd_Set_Cursor@b
  1770  07D5  0AF4               	incf	Lcd_Set_Cursor@b,f
  1771  07D6  3002               	movlw	2
  1772  07D7  120A  158A  27B6  120A  118A  	fcall	_Lcd_Set_Cursor
  1773                           
  1774                           ;mainMaster.c: 199:             if (IR == 1){
  1775  07DC  1283               	bcf	3,5	;RP0=0, select bank0
  1776  07DD  1303               	bcf	3,6	;RP1=0, select bank0
  1777  07DE  032C               	decf	_IR,w
  1778  07DF  1D03               	btfss	3,2
  1779  07E0  2FEB               	goto	l2404
  1780                           
  1781                           ;mainMaster.c: 200:                 Lcd_Write_String("IR ON ");
  1782  07E1  3086               	movlw	(low (((STR_14+1)-__stringbase)| (0+32768)))& (0+255)
  1783  07E2  00F5               	movwf	Lcd_Write_String@a
  1784  07E3  3080               	movlw	128
  1785  07E4  00F6               	movwf	Lcd_Write_String@a+1
  1786  07E5  120A  118A  20B7  120A  118A  	fcall	_Lcd_Write_String
  1787                           
  1788                           ;mainMaster.c: 201:             } else {
  1789  07EA  2D70               	goto	l2250
  1790  07EB                     l2404:	
  1791                           
  1792                           ;mainMaster.c: 202:                 Lcd_Write_String("IR OFF");
  1793  07EB  308E               	movlw	(low (((STR_15+1)-__stringbase)| (0+32768)))& (0+255)
  1794  07EC  00F5               	movwf	Lcd_Write_String@a
  1795  07ED  3080               	movlw	128
  1796  07EE  00F6               	movwf	Lcd_Write_String@a+1
  1797  07EF  120A  118A  20B7  120A  118A  	fcall	_Lcd_Write_String
  1798  07F4  2D70               	goto	l2250
  1799  07F5                     __end_of_main:	
  1800                           
  1801                           	psect	text1
  1802  0E0B                     __ptext1:	
  1803 ;; *************** function _strcmp *****************
  1804 ;; Defined at:
  1805 ;;		line 33 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;  s1              1    wreg     PTR const unsigned char 
  1808 ;;		 -> temp(6), 
  1809 ;;  s2              1    0[COMMON] PTR const unsigned char 
  1810 ;;		 -> STR_9(6), 
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;  s1              1    6[COMMON] PTR const unsigned char 
  1813 ;;		 -> temp(6), 
  1814 ;;  r               1    5[COMMON] char 
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  2    0[COMMON] int 
  1817 ;; Registers used:
  1818 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1824 ;;      Params:         2       0       0       0       0
  1825 ;;      Locals:         2       0       0       0       0
  1826 ;;      Temps:          3       0       0       0       0
  1827 ;;      Totals:         7       0       0       0       0
  1828 ;;Total ram usage:        7 bytes
  1829 ;; Hardware stack levels used:    2
  1830 ;; This function calls:
  1831 ;;		Nothing
  1832 ;; This function is called by:
  1833 ;;		_main
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           
  1838                           ;psect for function _strcmp
  1839  0E0B                     _strcmp:	
  1840                           
  1841                           ;incstack = 0
  1842                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  1843                           ;strcmp@s1 stored from wreg
  1844  0E0B  00F6               	movwf	strcmp@s1
  1845  0E0C  2E1A               	goto	l2224
  1846  0E0D                     l2226:	
  1847  0E0D  0876               	movf	strcmp@s1,w
  1848  0E0E  0084               	movwf	4
  1849  0E0F  0800               	movf	0,w
  1850  0E10  1903               	btfsc	3,2
  1851  0E11  2E2F               	goto	l2228
  1852  0E12  3001               	movlw	1
  1853  0E13  00F2               	movwf	??_strcmp
  1854  0E14  0872               	movf	??_strcmp,w
  1855  0E15  07F6               	addwf	strcmp@s1,f
  1856  0E16  3001               	movlw	1
  1857  0E17  00F2               	movwf	??_strcmp
  1858  0E18  0872               	movf	??_strcmp,w
  1859  0E19  07F0               	addwf	strcmp@s2,f
  1860  0E1A                     l2224:	
  1861  0E1A  0870               	movf	strcmp@s2,w
  1862  0E1B  0084               	movwf	4
  1863  0E1C  120A  118A  200D  120A  158A  	fcall	stringdir
  1864  0E21  00F2               	movwf	??_strcmp
  1865  0E22  0876               	movf	strcmp@s1,w
  1866  0E23  0084               	movwf	4
  1867  0E24  1383               	bcf	3,7	;select IRP bank0
  1868  0E25  0800               	movf	0,w
  1869  0E26  00F3               	movwf	??_strcmp+1
  1870  0E27  0872               	movf	??_strcmp,w
  1871  0E28  0273               	subwf	??_strcmp+1,w
  1872  0E29  00F4               	movwf	??_strcmp+2
  1873  0E2A  0874               	movf	??_strcmp+2,w
  1874  0E2B  00F5               	movwf	strcmp@r
  1875  0E2C  0875               	movf	strcmp@r,w
  1876  0E2D  1903               	btfsc	3,2
  1877  0E2E  2E0D               	goto	l2226
  1878  0E2F                     l2228:	
  1879  0E2F  0875               	movf	strcmp@r,w
  1880  0E30  00F0               	movwf	?_strcmp
  1881  0E31  01F1               	clrf	?_strcmp+1
  1882  0E32  1BF0               	btfsc	?_strcmp,7
  1883  0E33  03F1               	decf	?_strcmp+1,f
  1884  0E34  0008               	return
  1885  0E35                     __end_of_strcmp:	
  1886                           
  1887                           	psect	text2
  1888  0F74                     __ptext2:	
  1889 ;; *************** function _setup *****************
  1890 ;; Defined at:
  1891 ;;		line 208 in file "mainMaster.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1905 ;;      Params:         0       0       0       0       0
  1906 ;;      Locals:         0       0       0       0       0
  1907 ;;      Temps:          0       0       0       0       0
  1908 ;;      Totals:         0       0       0       0       0
  1909 ;;Total ram usage:        0 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:    3
  1912 ;; This function calls:
  1913 ;;		_I2C_Master_Init
  1914 ;;		_Lcd_Init
  1915 ;;		_UART_Init
  1916 ;;		_initOscilador
  1917 ;; This function is called by:
  1918 ;;		_main
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           
  1923                           ;psect for function _setup
  1924  0F74                     _setup:	
  1925                           
  1926                           ;mainMaster.c: 209:     initOscilador(7);
  1927                           
  1928                           ;incstack = 0
  1929                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1930  0F74  3007               	movlw	7
  1931  0F75  120A  118A  20F4  120A  158A  	fcall	_initOscilador
  1932                           
  1933                           ;mainMaster.c: 210:     ANSELH = 0;
  1934  0F7A  1683               	bsf	3,5	;RP0=1, select bank3
  1935  0F7B  1703               	bsf	3,6	;RP1=1, select bank3
  1936  0F7C  0189               	clrf	9	;volatile
  1937                           
  1938                           ;mainMaster.c: 211:     ANSEL = 0;
  1939  0F7D  0188               	clrf	8	;volatile
  1940                           
  1941                           ;mainMaster.c: 212:     TRISB = 0;
  1942  0F7E  1683               	bsf	3,5	;RP0=1, select bank1
  1943  0F7F  1303               	bcf	3,6	;RP1=0, select bank1
  1944  0F80  0186               	clrf	6	;volatile
  1945                           
  1946                           ;mainMaster.c: 213:     TRISA = 0;
  1947  0F81  0185               	clrf	5	;volatile
  1948                           
  1949                           ;mainMaster.c: 214:     TRISD = 15;
  1950  0F82  300F               	movlw	15
  1951  0F83  0088               	movwf	8	;volatile
  1952                           
  1953                           ;mainMaster.c: 215:     PORTB = 0;
  1954  0F84  1283               	bcf	3,5	;RP0=0, select bank0
  1955  0F85  1303               	bcf	3,6	;RP1=0, select bank0
  1956  0F86  0186               	clrf	6	;volatile
  1957                           
  1958                           ;mainMaster.c: 216:     PORTA = 0;
  1959  0F87  0185               	clrf	5	;volatile
  1960                           
  1961                           ;mainMaster.c: 217:     TRISC = 0x01;
  1962  0F88  3001               	movlw	1
  1963  0F89  1683               	bsf	3,5	;RP0=1, select bank1
  1964  0F8A  1303               	bcf	3,6	;RP1=0, select bank1
  1965  0F8B  0087               	movwf	7	;volatile
  1966                           
  1967                           ;mainMaster.c: 218:     PORTC = 0;
  1968  0F8C  1283               	bcf	3,5	;RP0=0, select bank0
  1969  0F8D  1303               	bcf	3,6	;RP1=0, select bank0
  1970  0F8E  0187               	clrf	7	;volatile
  1971                           
  1972                           ;mainMaster.c: 219:     i = 0;
  1973  0F8F  01A9               	clrf	_i
  1974                           
  1975                           ;mainMaster.c: 220:     door = 0;
  1976  0F90  01AF               	clrf	_door
  1977                           
  1978                           ;mainMaster.c: 221:     trip = 0;
  1979  0F91  01AE               	clrf	_trip
  1980                           
  1981                           ;mainMaster.c: 222:     IR = 0;
  1982  0F92  01AC               	clrf	_IR
  1983                           
  1984                           ;mainMaster.c: 223:     PIR = 0;
  1985  0F93  01AD               	clrf	_PIR
  1986                           
  1987                           ;mainMaster.c: 224:     Lcd_Init();
  1988  0F94  120A  118A  2149  120A  158A  	fcall	_Lcd_Init
  1989                           
  1990                           ;mainMaster.c: 225:     UART_Init(9600);
  1991  0F99  3000               	movlw	0
  1992  0F9A  1283               	bcf	3,5	;RP0=0, select bank0
  1993  0F9B  1303               	bcf	3,6	;RP1=0, select bank0
  1994  0F9C  00C7               	movwf	UART_Init@baudrate+3
  1995  0F9D  3000               	movlw	0
  1996  0F9E  00C6               	movwf	UART_Init@baudrate+2
  1997  0F9F  3025               	movlw	37
  1998  0FA0  00C5               	movwf	UART_Init@baudrate+1
  1999  0FA1  3080               	movlw	128
  2000  0FA2  00C4               	movwf	UART_Init@baudrate
  2001  0FA3  120A  118A  23B5  120A  158A  	fcall	_UART_Init
  2002                           
  2003                           ;mainMaster.c: 226:     I2C_Master_Init(100000);
  2004  0FA8  3000               	movlw	0
  2005  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  2006  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  2007  0FAB  00C1               	movwf	I2C_Master_Init@c+3
  2008  0FAC  3001               	movlw	1
  2009  0FAD  00C0               	movwf	I2C_Master_Init@c+2
  2010  0FAE  3086               	movlw	134
  2011  0FAF  00BF               	movwf	I2C_Master_Init@c+1
  2012  0FB0  30A0               	movlw	160
  2013  0FB1  00BE               	movwf	I2C_Master_Init@c
  2014  0FB2  120A  158A  26C9   	fcall	_I2C_Master_Init
  2015  0FB5  0008               	return
  2016  0FB6                     __end_of_setup:	
  2017                           
  2018                           	psect	text3
  2019  00F4                     __ptext3:	
  2020 ;; *************** function _initOscilador *****************
  2021 ;; Defined at:
  2022 ;;		line 11 in file "./Oscilador.h"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;  option          1    wreg     unsigned char 
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;  option          1    2[COMMON] unsigned char 
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  1    wreg      void 
  2029 ;; Registers used:
  2030 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2036 ;;      Params:         0       0       0       0       0
  2037 ;;      Locals:         1       0       0       0       0
  2038 ;;      Temps:          2       0       0       0       0
  2039 ;;      Totals:         3       0       0       0       0
  2040 ;;Total ram usage:        3 bytes
  2041 ;; Hardware stack levels used:    1
  2042 ;; This function calls:
  2043 ;;		Nothing
  2044 ;; This function is called by:
  2045 ;;		_setup
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           
  2050                           ;psect for function _initOscilador
  2051  00F4                     _initOscilador:	
  2052                           
  2053                           ;incstack = 0
  2054                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  2055                           ;initOscilador@option stored from wreg
  2056  00F4  00F2               	movwf	initOscilador@option
  2057                           
  2058                           ;./Oscilador.h: 13: 
  2059  00F5  2925               	goto	l1964
  2060  00F6                     l1944:	
  2061                           
  2062                           ;./Oscilador.h: 16:         case 3:
  2063  00F6  308F               	movlw	-113
  2064  00F7  1683               	bsf	3,5	;RP0=1, select bank1
  2065  00F8  1303               	bcf	3,6	;RP1=0, select bank1
  2066  00F9  058F               	andwf	15,f	;volatile
  2067                           
  2068                           ;./Oscilador.h: 17: 
  2069  00FA  2947               	goto	l181
  2070  00FB                     l1946:	
  2071                           
  2072                           ;./Oscilador.h: 20:         case 4:
  2073  00FB  1683               	bsf	3,5	;RP0=1, select bank1
  2074  00FC  1303               	bcf	3,6	;RP1=0, select bank1
  2075  00FD  080F               	movf	15,w	;volatile
  2076  00FE  398F               	andlw	-113
  2077  00FF  3810               	iorlw	16
  2078  0100  291E               	goto	L14
  2079  0101                     l1948:	
  2080                           ;./Oscilador.h: 21: 
  2081                           
  2082                           
  2083                           ;./Oscilador.h: 24:         case 5:
  2084  0101  1683               	bsf	3,5	;RP0=1, select bank1
  2085  0102  1303               	bcf	3,6	;RP1=0, select bank1
  2086  0103  080F               	movf	15,w	;volatile
  2087  0104  398F               	andlw	-113
  2088  0105  3820               	iorlw	32
  2089  0106  291E               	goto	L14
  2090  0107                     l1950:	
  2091                           ;./Oscilador.h: 25: 
  2092                           
  2093                           
  2094                           ;./Oscilador.h: 28:         case 6:
  2095  0107  1683               	bsf	3,5	;RP0=1, select bank1
  2096  0108  1303               	bcf	3,6	;RP1=0, select bank1
  2097  0109  080F               	movf	15,w	;volatile
  2098  010A  398F               	andlw	-113
  2099  010B  3830               	iorlw	48
  2100  010C  291E               	goto	L14
  2101  010D                     l1952:	
  2102                           ;./Oscilador.h: 29: 
  2103                           
  2104                           
  2105                           ;./Oscilador.h: 32:         case 7:
  2106  010D  1683               	bsf	3,5	;RP0=1, select bank1
  2107  010E  1303               	bcf	3,6	;RP1=0, select bank1
  2108  010F  080F               	movf	15,w	;volatile
  2109  0110  398F               	andlw	-113
  2110  0111  3840               	iorlw	64
  2111  0112  291E               	goto	L14
  2112  0113                     l1954:	
  2113                           ;./Oscilador.h: 33: 
  2114                           
  2115                           
  2116                           ;./Oscilador.h: 36:         default:
  2117  0113  1683               	bsf	3,5	;RP0=1, select bank1
  2118  0114  1303               	bcf	3,6	;RP1=0, select bank1
  2119  0115  080F               	movf	15,w	;volatile
  2120  0116  398F               	andlw	-113
  2121  0117  3850               	iorlw	80
  2122  0118  291E               	goto	L14
  2123  0119                     l1956:	
  2124                           ;./Oscilador.h: 37: 
  2125                           
  2126                           
  2127                           ;./Oscilador.h: 40:     }
  2128  0119  1683               	bsf	3,5	;RP0=1, select bank1
  2129  011A  1303               	bcf	3,6	;RP1=0, select bank1
  2130  011B  080F               	movf	15,w	;volatile
  2131  011C  398F               	andlw	-113
  2132  011D  3860               	iorlw	96
  2133  011E                     L14:	
  2134  011E  008F               	movwf	15	;volatile
  2135                           
  2136                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  2137  011F  2947               	goto	l181
  2138  0120                     l1958:	
  2139  0120                     l1960:	
  2140  0120  3070               	movlw	112
  2141  0121  1683               	bsf	3,5	;RP0=1, select bank1
  2142  0122  1303               	bcf	3,6	;RP1=0, select bank1
  2143  0123  048F               	iorwf	15,f	;volatile
  2144  0124  2947               	goto	l181
  2145  0125                     l1964:	
  2146  0125  0872               	movf	initOscilador@option,w
  2147  0126  00F0               	movwf	??_initOscilador
  2148  0127  01F1               	clrf	??_initOscilador+1
  2149                           
  2150                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2151                           ; Switch size 1, requested type "simple"
  2152                           ; Number of cases is 1, Range of values is 0 to 0
  2153                           ; switch strategies available:
  2154                           ; Name         Instructions Cycles
  2155                           ; simple_byte            4     3 (average)
  2156                           ; direct_byte           11     8 (fixed)
  2157                           ; jumptable            260     6 (fixed)
  2158                           ;	Chosen strategy is simple_byte
  2159  0128  0871               	movf	??_initOscilador+1,w
  2160  0129  3A00               	xorlw	0	; case 0
  2161  012A  1903               	skipnz
  2162  012B  292D               	goto	l2474
  2163  012C  2920               	goto	l1960
  2164  012D                     l2474:	
  2165                           
  2166                           ; Switch size 1, requested type "simple"
  2167                           ; Number of cases is 8, Range of values is 0 to 7
  2168                           ; switch strategies available:
  2169                           ; Name         Instructions Cycles
  2170                           ; simple_byte           25    13 (average)
  2171                           ; direct_byte           32     8 (fixed)
  2172                           ; jumptable            260     6 (fixed)
  2173                           ;	Chosen strategy is simple_byte
  2174  012D  0870               	movf	??_initOscilador,w
  2175  012E  3A00               	xorlw	0	; case 0
  2176  012F  1903               	skipnz
  2177  0130  28F6               	goto	l1944
  2178  0131  3A01               	xorlw	1	; case 1
  2179  0132  1903               	skipnz
  2180  0133  28FB               	goto	l1946
  2181  0134  3A03               	xorlw	3	; case 2
  2182  0135  1903               	skipnz
  2183  0136  2901               	goto	l1948
  2184  0137  3A01               	xorlw	1	; case 3
  2185  0138  1903               	skipnz
  2186  0139  2907               	goto	l1950
  2187  013A  3A07               	xorlw	7	; case 4
  2188  013B  1903               	skipnz
  2189  013C  290D               	goto	l1952
  2190  013D  3A01               	xorlw	1	; case 5
  2191  013E  1903               	skipnz
  2192  013F  2913               	goto	l1954
  2193  0140  3A03               	xorlw	3	; case 6
  2194  0141  1903               	skipnz
  2195  0142  2919               	goto	l1956
  2196  0143  3A01               	xorlw	1	; case 7
  2197  0144  1903               	skipnz
  2198  0145  2920               	goto	l1958
  2199  0146  2920               	goto	l1960
  2200  0147                     l181:	
  2201  0147  140F               	bsf	15,0	;volatile
  2202  0148  0008               	return
  2203  0149                     __end_of_initOscilador:	
  2204                           
  2205                           	psect	text4
  2206  03B5                     __ptext4:	
  2207 ;; *************** function _UART_Init *****************
  2208 ;; Defined at:
  2209 ;;		line 8 in file "./UART.h"
  2210 ;; Parameters:    Size  Location     Type
  2211 ;;  baudrate        4    6[BANK0 ] const long 
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  x               2    9[COMMON] unsigned int 
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  1    wreg      unsigned char 
  2216 ;; Registers used:
  2217 ;;		wreg, status,2, status,0, pclath, cstack
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2223 ;;      Params:         0       4       0       0       0
  2224 ;;      Locals:         2       0       0       0       0
  2225 ;;      Temps:          0      12       0       0       0
  2226 ;;      Totals:         2      16       0       0       0
  2227 ;;Total ram usage:       18 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    1
  2230 ;; This function calls:
  2231 ;;		___aldiv
  2232 ;; This function is called by:
  2233 ;;		_setup
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           
  2238                           ;psect for function _UART_Init
  2239  03B5                     _UART_Init:	
  2240                           
  2241                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
  2242                           
  2243                           ;incstack = 0
  2244                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  2245  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  2246  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  2247  03B7  0844               	movf	UART_Init@baudrate,w
  2248  03B8  00C8               	movwf	??_UART_Init
  2249  03B9  0845               	movf	UART_Init@baudrate+1,w
  2250  03BA  00C9               	movwf	??_UART_Init+1
  2251  03BB  0846               	movf	UART_Init@baudrate+2,w
  2252  03BC  00CA               	movwf	??_UART_Init+2
  2253  03BD  0847               	movf	UART_Init@baudrate+3,w
  2254  03BE  00CB               	movwf	??_UART_Init+3
  2255  03BF  3006               	movlw	6
  2256  03C0                     u1285:	
  2257  03C0  1003               	clrc
  2258  03C1  0DC8               	rlf	??_UART_Init,f
  2259  03C2  0DC9               	rlf	??_UART_Init+1,f
  2260  03C3  0DCA               	rlf	??_UART_Init+2,f
  2261  03C4  0DCB               	rlf	??_UART_Init+3,f
  2262  03C5  3EFF               	addlw	-1
  2263  03C6  1D03               	skipz
  2264  03C7  2BC0               	goto	u1285
  2265  03C8  084B               	movf	??_UART_Init+3,w
  2266  03C9  00F3               	movwf	___aldiv@divisor+3
  2267  03CA  084A               	movf	??_UART_Init+2,w
  2268  03CB  00F2               	movwf	___aldiv@divisor+2
  2269  03CC  0849               	movf	??_UART_Init+1,w
  2270  03CD  00F1               	movwf	___aldiv@divisor+1
  2271  03CE  0848               	movf	??_UART_Init,w
  2272  03CF  00F0               	movwf	___aldiv@divisor
  2273  03D0  0844               	movf	UART_Init@baudrate,w
  2274  03D1  00CC               	movwf	??_UART_Init+4
  2275  03D2  0845               	movf	UART_Init@baudrate+1,w
  2276  03D3  00CD               	movwf	??_UART_Init+5
  2277  03D4  0846               	movf	UART_Init@baudrate+2,w
  2278  03D5  00CE               	movwf	??_UART_Init+6
  2279  03D6  0847               	movf	UART_Init@baudrate+3,w
  2280  03D7  00CF               	movwf	??_UART_Init+7
  2281  03D8  3006               	movlw	6
  2282  03D9                     u1295:	
  2283  03D9  1003               	clrc
  2284  03DA  0DCC               	rlf	??_UART_Init+4,f
  2285  03DB  0DCD               	rlf	??_UART_Init+5,f
  2286  03DC  0DCE               	rlf	??_UART_Init+6,f
  2287  03DD  0DCF               	rlf	??_UART_Init+7,f
  2288  03DE  3EFF               	addlw	-1
  2289  03DF  1D03               	skipz
  2290  03E0  2BD9               	goto	u1295
  2291  03E1  3000               	movlw	0
  2292  03E2  00D0               	movwf	??_UART_Init+8
  2293  03E3  3012               	movlw	18
  2294  03E4  00D1               	movwf	??_UART_Init+9
  2295  03E5  307A               	movlw	122
  2296  03E6  00D2               	movwf	??_UART_Init+10
  2297  03E7  3000               	movlw	0
  2298  03E8  00D3               	movwf	??_UART_Init+11
  2299  03E9  084C               	movf	??_UART_Init+4,w
  2300  03EA  02D0               	subwf	??_UART_Init+8,f
  2301  03EB  084D               	movf	??_UART_Init+5,w
  2302  03EC  1C03               	skipc
  2303  03ED  0F4D               	incfsz	??_UART_Init+5,w
  2304  03EE  2BF0               	goto	u1301
  2305  03EF  2BF1               	goto	u1302
  2306  03F0                     u1301:	
  2307  03F0  02D1               	subwf	??_UART_Init+9,f
  2308  03F1                     u1302:	
  2309  03F1  084E               	movf	??_UART_Init+6,w
  2310  03F2  1C03               	skipc
  2311  03F3  0F4E               	incfsz	??_UART_Init+6,w
  2312  03F4  2BF6               	goto	u1303
  2313  03F5  2BF7               	goto	u1304
  2314  03F6                     u1303:	
  2315  03F6  02D2               	subwf	??_UART_Init+10,f
  2316  03F7                     u1304:	
  2317  03F7  084F               	movf	??_UART_Init+7,w
  2318  03F8  1C03               	skipc
  2319  03F9  0F4F               	incfsz	??_UART_Init+7,w
  2320  03FA  2BFC               	goto	u1305
  2321  03FB  2BFD               	goto	u1306
  2322  03FC                     u1305:	
  2323  03FC  02D3               	subwf	??_UART_Init+11,f
  2324  03FD                     u1306:	
  2325  03FD  0853               	movf	??_UART_Init+11,w
  2326  03FE  00F7               	movwf	___aldiv@dividend+3
  2327  03FF  0852               	movf	??_UART_Init+10,w
  2328  0400  00F6               	movwf	___aldiv@dividend+2
  2329  0401  0851               	movf	??_UART_Init+9,w
  2330  0402  00F5               	movwf	___aldiv@dividend+1
  2331  0403  0850               	movf	??_UART_Init+8,w
  2332  0404  00F4               	movwf	___aldiv@dividend
  2333  0405  120A  118A  2283  120A  118A  	fcall	___aldiv
  2334  040A  0871               	movf	?___aldiv+1,w
  2335  040B  00FA               	movwf	UART_Init@x+1
  2336  040C  0870               	movf	?___aldiv,w
  2337  040D  00F9               	movwf	UART_Init@x
  2338                           
  2339                           ;./UART.h: 12:  if(x>255)
  2340  040E  3001               	movlw	1
  2341  040F  027A               	subwf	UART_Init@x+1,w
  2342  0410  3000               	movlw	0
  2343  0411  1903               	skipnz
  2344  0412  0279               	subwf	UART_Init@x,w
  2345  0413  1C03               	skipc
  2346  0414  2C71               	goto	l1978
  2347                           
  2348                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  2349  0415  1283               	bcf	3,5	;RP0=0, select bank0
  2350  0416  1303               	bcf	3,6	;RP1=0, select bank0
  2351  0417  0844               	movf	UART_Init@baudrate,w
  2352  0418  00C8               	movwf	??_UART_Init
  2353  0419  0845               	movf	UART_Init@baudrate+1,w
  2354  041A  00C9               	movwf	??_UART_Init+1
  2355  041B  0846               	movf	UART_Init@baudrate+2,w
  2356  041C  00CA               	movwf	??_UART_Init+2
  2357  041D  0847               	movf	UART_Init@baudrate+3,w
  2358  041E  00CB               	movwf	??_UART_Init+3
  2359  041F  3004               	movlw	4
  2360  0420                     u1325:	
  2361  0420  1003               	clrc
  2362  0421  0DC8               	rlf	??_UART_Init,f
  2363  0422  0DC9               	rlf	??_UART_Init+1,f
  2364  0423  0DCA               	rlf	??_UART_Init+2,f
  2365  0424  0DCB               	rlf	??_UART_Init+3,f
  2366  0425  3EFF               	addlw	-1
  2367  0426  1D03               	skipz
  2368  0427  2C20               	goto	u1325
  2369  0428  084B               	movf	??_UART_Init+3,w
  2370  0429  00F3               	movwf	___aldiv@divisor+3
  2371  042A  084A               	movf	??_UART_Init+2,w
  2372  042B  00F2               	movwf	___aldiv@divisor+2
  2373  042C  0849               	movf	??_UART_Init+1,w
  2374  042D  00F1               	movwf	___aldiv@divisor+1
  2375  042E  0848               	movf	??_UART_Init,w
  2376  042F  00F0               	movwf	___aldiv@divisor
  2377  0430  0844               	movf	UART_Init@baudrate,w
  2378  0431  00CC               	movwf	??_UART_Init+4
  2379  0432  0845               	movf	UART_Init@baudrate+1,w
  2380  0433  00CD               	movwf	??_UART_Init+5
  2381  0434  0846               	movf	UART_Init@baudrate+2,w
  2382  0435  00CE               	movwf	??_UART_Init+6
  2383  0436  0847               	movf	UART_Init@baudrate+3,w
  2384  0437  00CF               	movwf	??_UART_Init+7
  2385  0438  3004               	movlw	4
  2386  0439                     u1335:	
  2387  0439  1003               	clrc
  2388  043A  0DCC               	rlf	??_UART_Init+4,f
  2389  043B  0DCD               	rlf	??_UART_Init+5,f
  2390  043C  0DCE               	rlf	??_UART_Init+6,f
  2391  043D  0DCF               	rlf	??_UART_Init+7,f
  2392  043E  3EFF               	addlw	-1
  2393  043F  1D03               	skipz
  2394  0440  2C39               	goto	u1335
  2395  0441  3000               	movlw	0
  2396  0442  00D0               	movwf	??_UART_Init+8
  2397  0443  3012               	movlw	18
  2398  0444  00D1               	movwf	??_UART_Init+9
  2399  0445  307A               	movlw	122
  2400  0446  00D2               	movwf	??_UART_Init+10
  2401  0447  3000               	movlw	0
  2402  0448  00D3               	movwf	??_UART_Init+11
  2403  0449  084C               	movf	??_UART_Init+4,w
  2404  044A  02D0               	subwf	??_UART_Init+8,f
  2405  044B  084D               	movf	??_UART_Init+5,w
  2406  044C  1C03               	skipc
  2407  044D  0F4D               	incfsz	??_UART_Init+5,w
  2408  044E  2C50               	goto	u1341
  2409  044F  2C51               	goto	u1342
  2410  0450                     u1341:	
  2411  0450  02D1               	subwf	??_UART_Init+9,f
  2412  0451                     u1342:	
  2413  0451  084E               	movf	??_UART_Init+6,w
  2414  0452  1C03               	skipc
  2415  0453  0F4E               	incfsz	??_UART_Init+6,w
  2416  0454  2C56               	goto	u1343
  2417  0455  2C57               	goto	u1344
  2418  0456                     u1343:	
  2419  0456  02D2               	subwf	??_UART_Init+10,f
  2420  0457                     u1344:	
  2421  0457  084F               	movf	??_UART_Init+7,w
  2422  0458  1C03               	skipc
  2423  0459  0F4F               	incfsz	??_UART_Init+7,w
  2424  045A  2C5C               	goto	u1345
  2425  045B  2C5D               	goto	u1346
  2426  045C                     u1345:	
  2427  045C  02D3               	subwf	??_UART_Init+11,f
  2428  045D                     u1346:	
  2429  045D  0853               	movf	??_UART_Init+11,w
  2430  045E  00F7               	movwf	___aldiv@dividend+3
  2431  045F  0852               	movf	??_UART_Init+10,w
  2432  0460  00F6               	movwf	___aldiv@dividend+2
  2433  0461  0851               	movf	??_UART_Init+9,w
  2434  0462  00F5               	movwf	___aldiv@dividend+1
  2435  0463  0850               	movf	??_UART_Init+8,w
  2436  0464  00F4               	movwf	___aldiv@dividend
  2437  0465  120A  118A  2283  120A  118A  	fcall	___aldiv
  2438  046A  0871               	movf	?___aldiv+1,w
  2439  046B  00FA               	movwf	UART_Init@x+1
  2440  046C  0870               	movf	?___aldiv,w
  2441  046D  00F9               	movwf	UART_Init@x
  2442                           
  2443                           ;./UART.h: 15:   BRGH = 1;
  2444  046E  1683               	bsf	3,5	;RP0=1, select bank1
  2445  046F  1303               	bcf	3,6	;RP1=0, select bank1
  2446  0470  1518               	bsf	24,2	;volatile
  2447  0471                     l1978:	
  2448                           
  2449                           ;./UART.h: 17:  if(x<256)
  2450  0471  3001               	movlw	1
  2451  0472  027A               	subwf	UART_Init@x+1,w
  2452  0473  3000               	movlw	0
  2453  0474  1903               	skipnz
  2454  0475  0279               	subwf	UART_Init@x,w
  2455  0476  1803               	skipnc
  2456  0477  0008               	return
  2457                           
  2458                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  2459  0478  0879               	movf	UART_Init@x,w
  2460  0479  1683               	bsf	3,5	;RP0=1, select bank1
  2461  047A  1303               	bcf	3,6	;RP1=0, select bank1
  2462  047B  0099               	movwf	25	;volatile
  2463                           
  2464                           ;./UART.h: 20:    SYNC = 0;
  2465  047C  1218               	bcf	24,4	;volatile
  2466                           
  2467                           ;./UART.h: 21:    SPEN = 1;
  2468  047D  1283               	bcf	3,5	;RP0=0, select bank0
  2469  047E  1303               	bcf	3,6	;RP1=0, select bank0
  2470  047F  1798               	bsf	24,7	;volatile
  2471                           
  2472                           ;./UART.h: 22:           TRISC7 = 1;
  2473  0480  1683               	bsf	3,5	;RP0=1, select bank1
  2474  0481  1303               	bcf	3,6	;RP1=0, select bank1
  2475  0482  1787               	bsf	7,7	;volatile
  2476                           
  2477                           ;./UART.h: 23:           TRISC6 = 1;
  2478  0483  1707               	bsf	7,6	;volatile
  2479                           
  2480                           ;./UART.h: 24:           CREN = 1;
  2481  0484  1283               	bcf	3,5	;RP0=0, select bank0
  2482  0485  1303               	bcf	3,6	;RP1=0, select bank0
  2483  0486  1618               	bsf	24,4	;volatile
  2484                           
  2485                           ;./UART.h: 25:           TXEN = 1;
  2486  0487  1683               	bsf	3,5	;RP0=1, select bank1
  2487  0488  1303               	bcf	3,6	;RP1=0, select bank1
  2488  0489  1698               	bsf	24,5	;volatile
  2489  048A  0008               	return
  2490  048B                     __end_of_UART_Init:	
  2491                           
  2492                           	psect	text5
  2493  0283                     __ptext5:	
  2494 ;; *************** function ___aldiv *****************
  2495 ;; Defined at:
  2496 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;  divisor         4    0[COMMON] long 
  2499 ;;  dividend        4    4[COMMON] long 
  2500 ;; Auto vars:     Size  Location     Type
  2501 ;;  quotient        4    2[BANK0 ] long 
  2502 ;;  sign            1    1[BANK0 ] unsigned char 
  2503 ;;  counter         1    0[BANK0 ] unsigned char 
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  4    0[COMMON] long 
  2506 ;; Registers used:
  2507 ;;		wreg, status,2, status,0
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2513 ;;      Params:         8       0       0       0       0
  2514 ;;      Locals:         0       6       0       0       0
  2515 ;;      Temps:          1       0       0       0       0
  2516 ;;      Totals:         9       6       0       0       0
  2517 ;;Total ram usage:       15 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; This function calls:
  2520 ;;		Nothing
  2521 ;; This function is called by:
  2522 ;;		_UART_Init
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526                           
  2527                           ;psect for function ___aldiv
  2528  0283                     ___aldiv:	
  2529                           
  2530                           ;incstack = 0
  2531                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2532  0283  1283               	bcf	3,5	;RP0=0, select bank0
  2533  0284  1303               	bcf	3,6	;RP1=0, select bank0
  2534  0285  01BF               	clrf	___aldiv@sign
  2535  0286  1FF3               	btfss	___aldiv@divisor+3,7
  2536  0287  2A95               	goto	l504
  2537  0288  09F0               	comf	___aldiv@divisor,f
  2538  0289  09F1               	comf	___aldiv@divisor+1,f
  2539  028A  09F2               	comf	___aldiv@divisor+2,f
  2540  028B  09F3               	comf	___aldiv@divisor+3,f
  2541  028C  0AF0               	incf	___aldiv@divisor,f
  2542  028D  1903               	skipnz
  2543  028E  0AF1               	incf	___aldiv@divisor+1,f
  2544  028F  1903               	skipnz
  2545  0290  0AF2               	incf	___aldiv@divisor+2,f
  2546  0291  1903               	skipnz
  2547  0292  0AF3               	incf	___aldiv@divisor+3,f
  2548  0293  01BF               	clrf	___aldiv@sign
  2549  0294  0ABF               	incf	___aldiv@sign,f
  2550  0295                     l504:	
  2551  0295  1FF7               	btfss	___aldiv@dividend+3,7
  2552  0296  2AA6               	goto	l1790
  2553  0297  09F4               	comf	___aldiv@dividend,f
  2554  0298  09F5               	comf	___aldiv@dividend+1,f
  2555  0299  09F6               	comf	___aldiv@dividend+2,f
  2556  029A  09F7               	comf	___aldiv@dividend+3,f
  2557  029B  0AF4               	incf	___aldiv@dividend,f
  2558  029C  1903               	skipnz
  2559  029D  0AF5               	incf	___aldiv@dividend+1,f
  2560  029E  1903               	skipnz
  2561  029F  0AF6               	incf	___aldiv@dividend+2,f
  2562  02A0  1903               	skipnz
  2563  02A1  0AF7               	incf	___aldiv@dividend+3,f
  2564  02A2  3001               	movlw	1
  2565  02A3  00F8               	movwf	??___aldiv
  2566  02A4  0878               	movf	??___aldiv,w
  2567  02A5  06BF               	xorwf	___aldiv@sign,f
  2568  02A6                     l1790:	
  2569  02A6  3000               	movlw	0
  2570  02A7  00C3               	movwf	___aldiv@quotient+3
  2571  02A8  3000               	movlw	0
  2572  02A9  00C2               	movwf	___aldiv@quotient+2
  2573  02AA  3000               	movlw	0
  2574  02AB  00C1               	movwf	___aldiv@quotient+1
  2575  02AC  3000               	movlw	0
  2576  02AD  00C0               	movwf	___aldiv@quotient
  2577  02AE  0873               	movf	___aldiv@divisor+3,w
  2578  02AF  0472               	iorwf	___aldiv@divisor+2,w
  2579  02B0  0471               	iorwf	___aldiv@divisor+1,w
  2580  02B1  0470               	iorwf	___aldiv@divisor,w
  2581  02B2  1903               	skipnz
  2582  02B3  2AFB               	goto	l1812
  2583  02B4  01BE               	clrf	___aldiv@counter
  2584  02B5  0ABE               	incf	___aldiv@counter,f
  2585  02B6                     l1798:	
  2586  02B6  1BF3               	btfsc	___aldiv@divisor+3,7
  2587  02B7  2AC6               	goto	l1800
  2588  02B8  3001               	movlw	1
  2589  02B9  00F8               	movwf	??___aldiv
  2590  02BA                     u1055:	
  2591  02BA  1003               	clrc
  2592  02BB  0DF0               	rlf	___aldiv@divisor,f
  2593  02BC  0DF1               	rlf	___aldiv@divisor+1,f
  2594  02BD  0DF2               	rlf	___aldiv@divisor+2,f
  2595  02BE  0DF3               	rlf	___aldiv@divisor+3,f
  2596  02BF  0BF8               	decfsz	??___aldiv,f
  2597  02C0  2ABA               	goto	u1055
  2598  02C1  3001               	movlw	1
  2599  02C2  00F8               	movwf	??___aldiv
  2600  02C3  0878               	movf	??___aldiv,w
  2601  02C4  07BE               	addwf	___aldiv@counter,f
  2602  02C5  2AB6               	goto	l1798
  2603  02C6                     l1800:	
  2604  02C6  3001               	movlw	1
  2605  02C7  00F8               	movwf	??___aldiv
  2606  02C8                     u1075:	
  2607  02C8  1003               	clrc
  2608  02C9  0DC0               	rlf	___aldiv@quotient,f
  2609  02CA  0DC1               	rlf	___aldiv@quotient+1,f
  2610  02CB  0DC2               	rlf	___aldiv@quotient+2,f
  2611  02CC  0DC3               	rlf	___aldiv@quotient+3,f
  2612  02CD  0BF8               	decfsz	??___aldiv,f
  2613  02CE  2AC8               	goto	u1075
  2614  02CF  0873               	movf	___aldiv@divisor+3,w
  2615  02D0  0277               	subwf	___aldiv@dividend+3,w
  2616  02D1  1D03               	skipz
  2617  02D2  2ADD               	goto	u1085
  2618  02D3  0872               	movf	___aldiv@divisor+2,w
  2619  02D4  0276               	subwf	___aldiv@dividend+2,w
  2620  02D5  1D03               	skipz
  2621  02D6  2ADD               	goto	u1085
  2622  02D7  0871               	movf	___aldiv@divisor+1,w
  2623  02D8  0275               	subwf	___aldiv@dividend+1,w
  2624  02D9  1D03               	skipz
  2625  02DA  2ADD               	goto	u1085
  2626  02DB  0870               	movf	___aldiv@divisor,w
  2627  02DC  0274               	subwf	___aldiv@dividend,w
  2628  02DD                     u1085:	
  2629  02DD  1C03               	skipc
  2630  02DE  2AEE               	goto	l1808
  2631  02DF  0870               	movf	___aldiv@divisor,w
  2632  02E0  02F4               	subwf	___aldiv@dividend,f
  2633  02E1  0871               	movf	___aldiv@divisor+1,w
  2634  02E2  1C03               	skipc
  2635  02E3  0F71               	incfsz	___aldiv@divisor+1,w
  2636  02E4  02F5               	subwf	___aldiv@dividend+1,f
  2637  02E5  0872               	movf	___aldiv@divisor+2,w
  2638  02E6  1C03               	skipc
  2639  02E7  0F72               	incfsz	___aldiv@divisor+2,w
  2640  02E8  02F6               	subwf	___aldiv@dividend+2,f
  2641  02E9  0873               	movf	___aldiv@divisor+3,w
  2642  02EA  1C03               	skipc
  2643  02EB  0F73               	incfsz	___aldiv@divisor+3,w
  2644  02EC  02F7               	subwf	___aldiv@dividend+3,f
  2645  02ED  1440               	bsf	___aldiv@quotient,0
  2646  02EE                     l1808:	
  2647  02EE  3001               	movlw	1
  2648  02EF                     u1095:	
  2649  02EF  1003               	clrc
  2650  02F0  0CF3               	rrf	___aldiv@divisor+3,f
  2651  02F1  0CF2               	rrf	___aldiv@divisor+2,f
  2652  02F2  0CF1               	rrf	___aldiv@divisor+1,f
  2653  02F3  0CF0               	rrf	___aldiv@divisor,f
  2654  02F4  3EFF               	addlw	-1
  2655  02F5  1D03               	skipz
  2656  02F6  2AEF               	goto	u1095
  2657  02F7  3001               	movlw	1
  2658  02F8  02BE               	subwf	___aldiv@counter,f
  2659  02F9  1D03               	btfss	3,2
  2660  02FA  2AC6               	goto	l1800
  2661  02FB                     l1812:	
  2662  02FB  083F               	movf	___aldiv@sign,w
  2663  02FC  1903               	btfsc	3,2
  2664  02FD  2B09               	goto	l1816
  2665  02FE  09C0               	comf	___aldiv@quotient,f
  2666  02FF  09C1               	comf	___aldiv@quotient+1,f
  2667  0300  09C2               	comf	___aldiv@quotient+2,f
  2668  0301  09C3               	comf	___aldiv@quotient+3,f
  2669  0302  0AC0               	incf	___aldiv@quotient,f
  2670  0303  1903               	skipnz
  2671  0304  0AC1               	incf	___aldiv@quotient+1,f
  2672  0305  1903               	skipnz
  2673  0306  0AC2               	incf	___aldiv@quotient+2,f
  2674  0307  1903               	skipnz
  2675  0308  0AC3               	incf	___aldiv@quotient+3,f
  2676  0309                     l1816:	
  2677  0309  0843               	movf	___aldiv@quotient+3,w
  2678  030A  00F3               	movwf	?___aldiv+3
  2679  030B  0842               	movf	___aldiv@quotient+2,w
  2680  030C  00F2               	movwf	?___aldiv+2
  2681  030D  0841               	movf	___aldiv@quotient+1,w
  2682  030E  00F1               	movwf	?___aldiv+1
  2683  030F  0840               	movf	___aldiv@quotient,w
  2684  0310  00F0               	movwf	?___aldiv
  2685  0311  0008               	return
  2686  0312                     __end_of___aldiv:	
  2687                           
  2688                           	psect	text6
  2689  0149                     __ptext6:	
  2690 ;; *************** function _Lcd_Init *****************
  2691 ;; Defined at:
  2692 ;;		line 65 in file "./LCD4bits.h"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;		None
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;		None
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  1    wreg      void 
  2699 ;; Registers used:
  2700 ;;		wreg, status,2, status,0, pclath, cstack
  2701 ;; Tracked objects:
  2702 ;;		On entry : 0/0
  2703 ;;		On exit  : 0/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2706 ;;      Params:         0       0       0       0       0
  2707 ;;      Locals:         0       0       0       0       0
  2708 ;;      Temps:          2       0       0       0       0
  2709 ;;      Totals:         2       0       0       0       0
  2710 ;;Total ram usage:        2 bytes
  2711 ;; Hardware stack levels used:    1
  2712 ;; Hardware stack levels required when called:    2
  2713 ;; This function calls:
  2714 ;;		_Lcd_Cmd
  2715 ;;		_Lcd_Port
  2716 ;; This function is called by:
  2717 ;;		_setup
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           
  2722                           ;psect for function _Lcd_Init
  2723  0149                     _Lcd_Init:	
  2724                           
  2725                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  2726                           
  2727                           ;incstack = 0
  2728                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2729  0149  3000               	movlw	0
  2730  014A  120A  158A  2537  120A  118A  	fcall	_Lcd_Port
  2731                           
  2732                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  2733  014F  3034               	movlw	52
  2734  0150  00F5               	movwf	??_Lcd_Init+1
  2735  0151  30F1               	movlw	241
  2736  0152  00F4               	movwf	??_Lcd_Init
  2737  0153                     u1897:	
  2738  0153  0BF4               	decfsz	??_Lcd_Init,f
  2739  0154  2953               	goto	u1897
  2740  0155  0BF5               	decfsz	??_Lcd_Init+1,f
  2741  0156  2953               	goto	u1897
  2742  0157  2958               	nop2
  2743                           
  2744                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  2745  0158  3003               	movlw	3
  2746  0159  120A  158A  2551  120A  118A  	fcall	_Lcd_Cmd
  2747                           
  2748                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2749  015E  300D               	movlw	13
  2750  015F  00F5               	movwf	??_Lcd_Init+1
  2751  0160  30FB               	movlw	251
  2752  0161  00F4               	movwf	??_Lcd_Init
  2753  0162                     u1907:	
  2754  0162  0BF4               	decfsz	??_Lcd_Init,f
  2755  0163  2962               	goto	u1907
  2756  0164  0BF5               	decfsz	??_Lcd_Init+1,f
  2757  0165  2962               	goto	u1907
  2758  0166  2967               	nop2
  2759                           
  2760                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  2761  0167  3003               	movlw	3
  2762  0168  120A  158A  2551  120A  118A  	fcall	_Lcd_Cmd
  2763                           
  2764                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  2765  016D  301D               	movlw	29
  2766  016E  00F5               	movwf	??_Lcd_Init+1
  2767  016F  3091               	movlw	145
  2768  0170  00F4               	movwf	??_Lcd_Init
  2769  0171                     u1917:	
  2770  0171  0BF4               	decfsz	??_Lcd_Init,f
  2771  0172  2971               	goto	u1917
  2772  0173  0BF5               	decfsz	??_Lcd_Init+1,f
  2773  0174  2971               	goto	u1917
  2774                           
  2775                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  2776  0175  3003               	movlw	3
  2777  0176  120A  158A  2551  120A  118A  	fcall	_Lcd_Cmd
  2778                           
  2779                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  2780  017B  3002               	movlw	2
  2781  017C  120A  158A  2551  120A  118A  	fcall	_Lcd_Cmd
  2782                           
  2783                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  2784  0181  3002               	movlw	2
  2785  0182  120A  158A  2551  120A  118A  	fcall	_Lcd_Cmd
  2786                           
  2787                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  2788  0187  3008               	movlw	8
  2789  0188  120A  158A  2551  120A  118A  	fcall	_Lcd_Cmd
  2790                           
  2791                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  2792  018D  3000               	movlw	0
  2793  018E  120A  158A  2551  120A  118A  	fcall	_Lcd_Cmd
  2794                           
  2795                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  2796  0193  300C               	movlw	12
  2797  0194  120A  158A  2551  120A  118A  	fcall	_Lcd_Cmd
  2798                           
  2799                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  2800  0199  3000               	movlw	0
  2801  019A  120A  158A  2551  120A  118A  	fcall	_Lcd_Cmd
  2802                           
  2803                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  2804  019F  3006               	movlw	6
  2805  01A0  120A  158A  2551   	fcall	_Lcd_Cmd
  2806  01A3  0008               	return
  2807  01A4                     __end_of_Lcd_Init:	
  2808                           
  2809                           	psect	text7
  2810  0EC9                     __ptext7:	
  2811 ;; *************** function _I2C_Master_Init *****************
  2812 ;; Defined at:
  2813 ;;		line 16 in file "./I2C.h"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;  c               4    0[BANK0 ] const unsigned long 
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;		None
  2818 ;; Return value:  Size  Location     Type
  2819 ;;                  1    wreg      void 
  2820 ;; Registers used:
  2821 ;;		wreg, status,2, status,0, pclath, cstack
  2822 ;; Tracked objects:
  2823 ;;		On entry : 0/0
  2824 ;;		On exit  : 0/0
  2825 ;;		Unchanged: 0/0
  2826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2827 ;;      Params:         0       4       0       0       0
  2828 ;;      Locals:         0       0       0       0       0
  2829 ;;      Temps:          0       4       0       0       0
  2830 ;;      Totals:         0       8       0       0       0
  2831 ;;Total ram usage:        8 bytes
  2832 ;; Hardware stack levels used:    1
  2833 ;; Hardware stack levels required when called:    1
  2834 ;; This function calls:
  2835 ;;		___lldiv
  2836 ;; This function is called by:
  2837 ;;		_setup
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           
  2842                           ;psect for function _I2C_Master_Init
  2843  0EC9                     _I2C_Master_Init:	
  2844                           
  2845                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  2846                           
  2847                           ;incstack = 0
  2848                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  2849  0EC9  3028               	movlw	40
  2850  0ECA  1283               	bcf	3,5	;RP0=0, select bank0
  2851  0ECB  1303               	bcf	3,6	;RP1=0, select bank0
  2852  0ECC  0094               	movwf	20	;volatile
  2853                           
  2854                           ;./I2C.h: 19:     SSPCON2 = 0;
  2855  0ECD  1683               	bsf	3,5	;RP0=1, select bank1
  2856  0ECE  1303               	bcf	3,6	;RP1=0, select bank1
  2857  0ECF  0191               	clrf	17	;volatile
  2858                           
  2859                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  2860  0ED0  1283               	bcf	3,5	;RP0=0, select bank0
  2861  0ED1  1303               	bcf	3,6	;RP1=0, select bank0
  2862  0ED2  083E               	movf	I2C_Master_Init@c,w
  2863  0ED3  00C2               	movwf	??_I2C_Master_Init
  2864  0ED4  083F               	movf	I2C_Master_Init@c+1,w
  2865  0ED5  00C3               	movwf	??_I2C_Master_Init+1
  2866  0ED6  0840               	movf	I2C_Master_Init@c+2,w
  2867  0ED7  00C4               	movwf	??_I2C_Master_Init+2
  2868  0ED8  0841               	movf	I2C_Master_Init@c+3,w
  2869  0ED9  00C5               	movwf	??_I2C_Master_Init+3
  2870  0EDA  3002               	movlw	2
  2871  0EDB                     u1255:	
  2872  0EDB  1003               	clrc
  2873  0EDC  0DC2               	rlf	??_I2C_Master_Init,f
  2874  0EDD  0DC3               	rlf	??_I2C_Master_Init+1,f
  2875  0EDE  0DC4               	rlf	??_I2C_Master_Init+2,f
  2876  0EDF  0DC5               	rlf	??_I2C_Master_Init+3,f
  2877  0EE0  3EFF               	addlw	-1
  2878  0EE1  1D03               	skipz
  2879  0EE2  2EDB               	goto	u1255
  2880  0EE3  0845               	movf	??_I2C_Master_Init+3,w
  2881  0EE4  00F3               	movwf	___lldiv@divisor+3
  2882  0EE5  0844               	movf	??_I2C_Master_Init+2,w
  2883  0EE6  00F2               	movwf	___lldiv@divisor+2
  2884  0EE7  0843               	movf	??_I2C_Master_Init+1,w
  2885  0EE8  00F1               	movwf	___lldiv@divisor+1
  2886  0EE9  0842               	movf	??_I2C_Master_Init,w
  2887  0EEA  00F0               	movwf	___lldiv@divisor
  2888  0EEB  3000               	movlw	0
  2889  0EEC  00F7               	movwf	___lldiv@dividend+3
  2890  0EED  307A               	movlw	122
  2891  0EEE  00F6               	movwf	___lldiv@dividend+2
  2892  0EEF  3012               	movlw	18
  2893  0EF0  00F5               	movwf	___lldiv@dividend+1
  2894  0EF1  3000               	movlw	0
  2895  0EF2  00F4               	movwf	___lldiv@dividend
  2896  0EF3  120A  118A  21A4   	fcall	___lldiv
  2897  0EF6  0870               	movf	?___lldiv,w
  2898  0EF7  3EFF               	addlw	255
  2899  0EF8  1683               	bsf	3,5	;RP0=1, select bank1
  2900  0EF9  1303               	bcf	3,6	;RP1=0, select bank1
  2901  0EFA  0093               	movwf	19	;volatile
  2902                           
  2903                           ;./I2C.h: 21:     SSPSTAT = 0;
  2904  0EFB  0194               	clrf	20	;volatile
  2905                           
  2906                           ;./I2C.h: 22:     TRISCbits.TRISC3 = 1;
  2907  0EFC  1587               	bsf	7,3	;volatile
  2908                           
  2909                           ;./I2C.h: 23:     TRISCbits.TRISC4 = 1;
  2910  0EFD  1607               	bsf	7,4	;volatile
  2911  0EFE  0008               	return
  2912  0EFF                     __end_of_I2C_Master_Init:	
  2913                           
  2914                           	psect	text8
  2915  01A4                     __ptext8:	
  2916 ;; *************** function ___lldiv *****************
  2917 ;; Defined at:
  2918 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  2919 ;; Parameters:    Size  Location     Type
  2920 ;;  divisor         4    0[COMMON] unsigned long 
  2921 ;;  dividend        4    4[COMMON] unsigned long 
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;  quotient        4    9[COMMON] unsigned long 
  2924 ;;  counter         1   13[COMMON] unsigned char 
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  4    0[COMMON] unsigned long 
  2927 ;; Registers used:
  2928 ;;		wreg, status,2, status,0
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2934 ;;      Params:         8       0       0       0       0
  2935 ;;      Locals:         5       0       0       0       0
  2936 ;;      Temps:          1       0       0       0       0
  2937 ;;      Totals:        14       0       0       0       0
  2938 ;;Total ram usage:       14 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; This function calls:
  2941 ;;		Nothing
  2942 ;; This function is called by:
  2943 ;;		_I2C_Master_Init
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           
  2948                           ;psect for function ___lldiv
  2949  01A4                     ___lldiv:	
  2950                           
  2951                           ;incstack = 0
  2952                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2953  01A4  3000               	movlw	0
  2954  01A5  00FC               	movwf	___lldiv@quotient+3
  2955  01A6  3000               	movlw	0
  2956  01A7  00FB               	movwf	___lldiv@quotient+2
  2957  01A8  3000               	movlw	0
  2958  01A9  00FA               	movwf	___lldiv@quotient+1
  2959  01AA  3000               	movlw	0
  2960  01AB  00F9               	movwf	___lldiv@quotient
  2961  01AC  0873               	movf	___lldiv@divisor+3,w
  2962  01AD  0472               	iorwf	___lldiv@divisor+2,w
  2963  01AE  0471               	iorwf	___lldiv@divisor+1,w
  2964  01AF  0470               	iorwf	___lldiv@divisor,w
  2965  01B0  1903               	skipnz
  2966  01B1  29F9               	goto	l1776
  2967  01B2  01FD               	clrf	___lldiv@counter
  2968  01B3  0AFD               	incf	___lldiv@counter,f
  2969  01B4                     l1762:	
  2970  01B4  1BF3               	btfsc	___lldiv@divisor+3,7
  2971  01B5  29C4               	goto	l1764
  2972  01B6  3001               	movlw	1
  2973  01B7  00F8               	movwf	??___lldiv
  2974  01B8                     u965:	
  2975  01B8  1003               	clrc
  2976  01B9  0DF0               	rlf	___lldiv@divisor,f
  2977  01BA  0DF1               	rlf	___lldiv@divisor+1,f
  2978  01BB  0DF2               	rlf	___lldiv@divisor+2,f
  2979  01BC  0DF3               	rlf	___lldiv@divisor+3,f
  2980  01BD  0BF8               	decfsz	??___lldiv,f
  2981  01BE  29B8               	goto	u965
  2982  01BF  3001               	movlw	1
  2983  01C0  00F8               	movwf	??___lldiv
  2984  01C1  0878               	movf	??___lldiv,w
  2985  01C2  07FD               	addwf	___lldiv@counter,f
  2986  01C3  29B4               	goto	l1762
  2987  01C4                     l1764:	
  2988  01C4  3001               	movlw	1
  2989  01C5  00F8               	movwf	??___lldiv
  2990  01C6                     u985:	
  2991  01C6  1003               	clrc
  2992  01C7  0DF9               	rlf	___lldiv@quotient,f
  2993  01C8  0DFA               	rlf	___lldiv@quotient+1,f
  2994  01C9  0DFB               	rlf	___lldiv@quotient+2,f
  2995  01CA  0DFC               	rlf	___lldiv@quotient+3,f
  2996  01CB  0BF8               	decfsz	??___lldiv,f
  2997  01CC  29C6               	goto	u985
  2998  01CD  0873               	movf	___lldiv@divisor+3,w
  2999  01CE  0277               	subwf	___lldiv@dividend+3,w
  3000  01CF  1D03               	skipz
  3001  01D0  29DB               	goto	u995
  3002  01D1  0872               	movf	___lldiv@divisor+2,w
  3003  01D2  0276               	subwf	___lldiv@dividend+2,w
  3004  01D3  1D03               	skipz
  3005  01D4  29DB               	goto	u995
  3006  01D5  0871               	movf	___lldiv@divisor+1,w
  3007  01D6  0275               	subwf	___lldiv@dividend+1,w
  3008  01D7  1D03               	skipz
  3009  01D8  29DB               	goto	u995
  3010  01D9  0870               	movf	___lldiv@divisor,w
  3011  01DA  0274               	subwf	___lldiv@dividend,w
  3012  01DB                     u995:	
  3013  01DB  1C03               	skipc
  3014  01DC  29EC               	goto	l1772
  3015  01DD  0870               	movf	___lldiv@divisor,w
  3016  01DE  02F4               	subwf	___lldiv@dividend,f
  3017  01DF  0871               	movf	___lldiv@divisor+1,w
  3018  01E0  1C03               	skipc
  3019  01E1  0F71               	incfsz	___lldiv@divisor+1,w
  3020  01E2  02F5               	subwf	___lldiv@dividend+1,f
  3021  01E3  0872               	movf	___lldiv@divisor+2,w
  3022  01E4  1C03               	skipc
  3023  01E5  0F72               	incfsz	___lldiv@divisor+2,w
  3024  01E6  02F6               	subwf	___lldiv@dividend+2,f
  3025  01E7  0873               	movf	___lldiv@divisor+3,w
  3026  01E8  1C03               	skipc
  3027  01E9  0F73               	incfsz	___lldiv@divisor+3,w
  3028  01EA  02F7               	subwf	___lldiv@dividend+3,f
  3029  01EB  1479               	bsf	___lldiv@quotient,0
  3030  01EC                     l1772:	
  3031  01EC  3001               	movlw	1
  3032  01ED                     u1005:	
  3033  01ED  1003               	clrc
  3034  01EE  0CF3               	rrf	___lldiv@divisor+3,f
  3035  01EF  0CF2               	rrf	___lldiv@divisor+2,f
  3036  01F0  0CF1               	rrf	___lldiv@divisor+1,f
  3037  01F1  0CF0               	rrf	___lldiv@divisor,f
  3038  01F2  3EFF               	addlw	-1
  3039  01F3  1D03               	skipz
  3040  01F4  29ED               	goto	u1005
  3041  01F5  3001               	movlw	1
  3042  01F6  02FD               	subwf	___lldiv@counter,f
  3043  01F7  1D03               	btfss	3,2
  3044  01F8  29C4               	goto	l1764
  3045  01F9                     l1776:	
  3046  01F9  087C               	movf	___lldiv@quotient+3,w
  3047  01FA  00F3               	movwf	?___lldiv+3
  3048  01FB  087B               	movf	___lldiv@quotient+2,w
  3049  01FC  00F2               	movwf	?___lldiv+2
  3050  01FD  087A               	movf	___lldiv@quotient+1,w
  3051  01FE  00F1               	movwf	?___lldiv+1
  3052  01FF  0879               	movf	___lldiv@quotient,w
  3053  0200  00F0               	movwf	?___lldiv
  3054  0201  0008               	return
  3055  0202                     __end_of___lldiv:	
  3056                           
  3057                           	psect	text9
  3058  0DC8                     __ptext9:	
  3059 ;; *************** function _get_tripwire *****************
  3060 ;; Defined at:
  3061 ;;		line 316 in file "mainMaster.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;		None
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;  trip            1    7[COMMON] unsigned char 
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  1    wreg      unsigned char 
  3068 ;; Registers used:
  3069 ;;		wreg, status,2, status,0, pclath, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3075 ;;      Params:         0       0       0       0       0
  3076 ;;      Locals:         1       0       0       0       0
  3077 ;;      Temps:          1       0       0       0       0
  3078 ;;      Totals:         2       0       0       0       0
  3079 ;;Total ram usage:        2 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    2
  3082 ;; This function calls:
  3083 ;;		_I2C_Master_Read
  3084 ;;		_I2C_Master_Start
  3085 ;;		_I2C_Master_Stop
  3086 ;;		_I2C_Master_Write
  3087 ;; This function is called by:
  3088 ;;		_main
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           
  3093                           ;psect for function _get_tripwire
  3094  0DC8                     _get_tripwire:	
  3095                           
  3096                           ;mainMaster.c: 318:     char trip;;mainMaster.c: 320:     I2C_Master_Start();
  3097                           
  3098                           ;incstack = 0
  3099                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  3100  0DC8  120A  158A  24E3  120A  158A  	fcall	_I2C_Master_Start
  3101                           
  3102                           ;mainMaster.c: 321:     I2C_Master_Write(0x21);
  3103  0DCD  3021               	movlw	33
  3104  0DCE  00F0               	movwf	I2C_Master_Write@d
  3105  0DCF  3000               	movlw	0
  3106  0DD0  00F1               	movwf	I2C_Master_Write@d+1
  3107  0DD1  120A  158A  24F8  120A  158A  	fcall	_I2C_Master_Write
  3108                           
  3109                           ;mainMaster.c: 322:     trip = I2C_Master_Read(0);
  3110  0DD6  3000               	movlw	0
  3111  0DD7  00F0               	movwf	I2C_Master_Read@a
  3112  0DD8  00F1               	movwf	I2C_Master_Read@a+1
  3113  0DD9  120A  158A  2635  120A  158A  	fcall	_I2C_Master_Read
  3114  0DDE  0870               	movf	?_I2C_Master_Read,w
  3115  0DDF  00F6               	movwf	??_get_tripwire
  3116  0DE0  0876               	movf	??_get_tripwire,w
  3117  0DE1  00F7               	movwf	get_tripwire@trip
  3118                           
  3119                           ;mainMaster.c: 323:     I2C_Master_Stop();
  3120  0DE2  120A  158A  24EA   	fcall	_I2C_Master_Stop
  3121                           
  3122                           ;mainMaster.c: 325:     return (trip);
  3123  0DE5  0877               	movf	get_tripwire@trip,w
  3124  0DE6  0008               	return
  3125  0DE7                     __end_of_get_tripwire:	
  3126                           
  3127                           	psect	text10
  3128  0202                     __ptext10:	
  3129 ;; *************** function _get_time *****************
  3130 ;; Defined at:
  3131 ;;		line 241 in file "mainMaster.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;  time_string     1    wreg     PTR unsigned char 
  3134 ;;		 -> time(6), 
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  time_string     1   10[COMMON] PTR unsigned char 
  3137 ;;		 -> time(6), 
  3138 ;;  min             1    9[COMMON] unsigned char 
  3139 ;;  hour            1    8[COMMON] unsigned char 
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  1    wreg      void 
  3142 ;; Registers used:
  3143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3144 ;; Tracked objects:
  3145 ;;		On entry : 0/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3149 ;;      Params:         0       0       0       0       0
  3150 ;;      Locals:         3       0       0       0       0
  3151 ;;      Temps:          2       0       0       0       0
  3152 ;;      Totals:         5       0       0       0       0
  3153 ;;Total ram usage:        5 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; Hardware stack levels required when called:    2
  3156 ;; This function calls:
  3157 ;;		_I2C_Master_Read
  3158 ;;		_I2C_Master_RepeatedStart
  3159 ;;		_I2C_Master_Start
  3160 ;;		_I2C_Master_Stop
  3161 ;;		_I2C_Master_Write
  3162 ;; This function is called by:
  3163 ;;		_main
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           
  3168                           ;psect for function _get_time
  3169  0202                     _get_time:	
  3170                           
  3171                           ;incstack = 0
  3172                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3173                           ;get_time@time_string stored from wreg
  3174  0202  00FA               	movwf	get_time@time_string
  3175                           
  3176                           ;mainMaster.c: 243:     char hour, min;;mainMaster.c: 245:     I2C_Master_Start();
  3177  0203  120A  158A  24E3  120A  118A  	fcall	_I2C_Master_Start
  3178                           
  3179                           ;mainMaster.c: 246:     I2C_Master_Write(0xD0);
  3180  0208  30D0               	movlw	208
  3181  0209  00F0               	movwf	I2C_Master_Write@d
  3182  020A  3000               	movlw	0
  3183  020B  00F1               	movwf	I2C_Master_Write@d+1
  3184  020C  120A  158A  24F8  120A  118A  	fcall	_I2C_Master_Write
  3185                           
  3186                           ;mainMaster.c: 247:     I2C_Master_Write(0x01);
  3187  0211  3001               	movlw	1
  3188  0212  00F0               	movwf	I2C_Master_Write@d
  3189  0213  3000               	movlw	0
  3190  0214  00F1               	movwf	I2C_Master_Write@d+1
  3191  0215  120A  158A  24F8  120A  118A  	fcall	_I2C_Master_Write
  3192                           
  3193                           ;mainMaster.c: 248:     I2C_Master_RepeatedStart();
  3194  021A  120A  158A  24F1  120A  118A  	fcall	_I2C_Master_RepeatedStart
  3195                           
  3196                           ;mainMaster.c: 249:     I2C_Master_Write(0xD1);
  3197  021F  30D1               	movlw	209
  3198  0220  00F0               	movwf	I2C_Master_Write@d
  3199  0221  3000               	movlw	0
  3200  0222  00F1               	movwf	I2C_Master_Write@d+1
  3201  0223  120A  158A  24F8  120A  118A  	fcall	_I2C_Master_Write
  3202                           
  3203                           ;mainMaster.c: 250:     min = I2C_Master_Read(1);
  3204  0228  3001               	movlw	1
  3205  0229  00F0               	movwf	I2C_Master_Read@a
  3206  022A  3000               	movlw	0
  3207  022B  00F1               	movwf	I2C_Master_Read@a+1
  3208  022C  120A  158A  2635  120A  118A  	fcall	_I2C_Master_Read
  3209  0231  0870               	movf	?_I2C_Master_Read,w
  3210  0232  00F6               	movwf	??_get_time
  3211  0233  0876               	movf	??_get_time,w
  3212  0234  00F9               	movwf	get_time@min
  3213                           
  3214                           ;mainMaster.c: 251:     hour = I2C_Master_Read(0);
  3215  0235  3000               	movlw	0
  3216  0236  00F0               	movwf	I2C_Master_Read@a
  3217  0237  00F1               	movwf	I2C_Master_Read@a+1
  3218  0238  120A  158A  2635  120A  118A  	fcall	_I2C_Master_Read
  3219  023D  0870               	movf	?_I2C_Master_Read,w
  3220  023E  00F6               	movwf	??_get_time
  3221  023F  0876               	movf	??_get_time,w
  3222  0240  00F8               	movwf	get_time@hour
  3223                           
  3224                           ;mainMaster.c: 252:     I2C_Master_Stop();
  3225  0241  120A  158A  24EA  120A  118A  	fcall	_I2C_Master_Stop
  3226                           
  3227                           ;mainMaster.c: 254:     time_string[0] = (hour >> 4) + '0';
  3228  0246  0878               	movf	get_time@hour,w
  3229  0247  00F6               	movwf	??_get_time
  3230  0248  3004               	movlw	4
  3231  0249                     u1575:	
  3232  0249  1003               	clrc
  3233  024A  0CF6               	rrf	??_get_time,f
  3234  024B  3EFF               	addlw	-1
  3235  024C  1D03               	skipz
  3236  024D  2A49               	goto	u1575
  3237  024E  0876               	movf	??_get_time,w
  3238  024F  3E30               	addlw	48
  3239  0250  00F7               	movwf	??_get_time+1
  3240  0251  087A               	movf	get_time@time_string,w
  3241  0252  0084               	movwf	4
  3242  0253  0877               	movf	??_get_time+1,w
  3243  0254  1383               	bcf	3,7	;select IRP bank0
  3244  0255  0080               	movwf	0
  3245                           
  3246                           ;mainMaster.c: 255:     time_string[1] = (hour & 0x0F) + '0';
  3247  0256  0878               	movf	get_time@hour,w
  3248  0257  390F               	andlw	15
  3249  0258  3E30               	addlw	48
  3250  0259  00F6               	movwf	??_get_time
  3251  025A  0A7A               	incf	get_time@time_string,w
  3252  025B  0084               	movwf	4
  3253  025C  0876               	movf	??_get_time,w
  3254  025D  0080               	movwf	0
  3255                           
  3256                           ;mainMaster.c: 256:     time_string[2] = ':';
  3257  025E  303A               	movlw	58
  3258  025F  00F6               	movwf	??_get_time
  3259  0260  087A               	movf	get_time@time_string,w
  3260  0261  3E02               	addlw	2
  3261  0262  0084               	movwf	4
  3262  0263  0876               	movf	??_get_time,w
  3263  0264  0080               	movwf	0
  3264                           
  3265                           ;mainMaster.c: 257:     time_string[3] = (min >> 4) + '0';
  3266  0265  0879               	movf	get_time@min,w
  3267  0266  00F6               	movwf	??_get_time
  3268  0267  3004               	movlw	4
  3269  0268                     u1585:	
  3270  0268  1003               	clrc
  3271  0269  0CF6               	rrf	??_get_time,f
  3272  026A  3EFF               	addlw	-1
  3273  026B  1D03               	skipz
  3274  026C  2A68               	goto	u1585
  3275  026D  0876               	movf	??_get_time,w
  3276  026E  3E30               	addlw	48
  3277  026F  00F7               	movwf	??_get_time+1
  3278  0270  087A               	movf	get_time@time_string,w
  3279  0271  3E03               	addlw	3
  3280  0272  0084               	movwf	4
  3281  0273  0877               	movf	??_get_time+1,w
  3282  0274  0080               	movwf	0
  3283                           
  3284                           ;mainMaster.c: 258:     time_string[4] = (min & 0x0F) + '0';
  3285  0275  0879               	movf	get_time@min,w
  3286  0276  390F               	andlw	15
  3287  0277  3E30               	addlw	48
  3288  0278  00F6               	movwf	??_get_time
  3289  0279  087A               	movf	get_time@time_string,w
  3290  027A  3E04               	addlw	4
  3291  027B  0084               	movwf	4
  3292  027C  0876               	movf	??_get_time,w
  3293  027D  0080               	movwf	0
  3294                           
  3295                           ;mainMaster.c: 259:     time_string[5] = '\0';
  3296  027E  087A               	movf	get_time@time_string,w
  3297  027F  3E05               	addlw	5
  3298  0280  0084               	movwf	4
  3299  0281  0180               	clrf	0
  3300  0282  0008               	return
  3301  0283                     __end_of_get_time:	
  3302                           
  3303                           	psect	text11
  3304  0312                     __ptext11:	
  3305 ;; *************** function _get_temp *****************
  3306 ;; Defined at:
  3307 ;;		line 277 in file "mainMaster.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;  temp_string     1    wreg     PTR unsigned char 
  3310 ;;		 -> temp(6), 
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;  temp_string     1   20[BANK0 ] PTR unsigned char 
  3313 ;;		 -> temp(6), 
  3314 ;;  decimal         3   16[BANK0 ] unsigned char [3]
  3315 ;;  tempLSB         1   21[BANK0 ] unsigned char 
  3316 ;;  tempMSB         1   19[BANK0 ] unsigned char 
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  1    wreg      void 
  3319 ;; Registers used:
  3320 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3326 ;;      Params:         0       0       0       0       0
  3327 ;;      Locals:         0       6       0       0       0
  3328 ;;      Temps:          0       3       0       0       0
  3329 ;;      Totals:         0       9       0       0       0
  3330 ;;Total ram usage:        9 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    2
  3333 ;; This function calls:
  3334 ;;		_I2C_Master_Read
  3335 ;;		_I2C_Master_RepeatedStart
  3336 ;;		_I2C_Master_Start
  3337 ;;		_I2C_Master_Stop
  3338 ;;		_I2C_Master_Write
  3339 ;;		___bmul
  3340 ;;		_sprintf
  3341 ;;		_strcat
  3342 ;; This function is called by:
  3343 ;;		_main
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           
  3348                           ;psect for function _get_temp
  3349  0312                     _get_temp:	
  3350                           
  3351                           ;incstack = 0
  3352                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3353                           ;get_temp@temp_string stored from wreg
  3354  0312  1283               	bcf	3,5	;RP0=0, select bank0
  3355  0313  1303               	bcf	3,6	;RP1=0, select bank0
  3356  0314  00D2               	movwf	get_temp@temp_string
  3357                           
  3358                           ;mainMaster.c: 279:     char tempLSB, tempMSB;;mainMaster.c: 280:     char decimal[3];;m
      +                          ainMaster.c: 282:     I2C_Master_Start();
  3359  0315  120A  158A  24E3  120A  118A  	fcall	_I2C_Master_Start
  3360                           
  3361                           ;mainMaster.c: 283:     I2C_Master_Write(0xD0);
  3362  031A  30D0               	movlw	208
  3363  031B  00F0               	movwf	I2C_Master_Write@d
  3364  031C  3000               	movlw	0
  3365  031D  00F1               	movwf	I2C_Master_Write@d+1
  3366  031E  120A  158A  24F8  120A  118A  	fcall	_I2C_Master_Write
  3367                           
  3368                           ;mainMaster.c: 284:     I2C_Master_Write(0x11);
  3369  0323  3011               	movlw	17
  3370  0324  00F0               	movwf	I2C_Master_Write@d
  3371  0325  3000               	movlw	0
  3372  0326  00F1               	movwf	I2C_Master_Write@d+1
  3373  0327  120A  158A  24F8  120A  118A  	fcall	_I2C_Master_Write
  3374                           
  3375                           ;mainMaster.c: 285:     I2C_Master_RepeatedStart();
  3376  032C  120A  158A  24F1  120A  118A  	fcall	_I2C_Master_RepeatedStart
  3377                           
  3378                           ;mainMaster.c: 286:     I2C_Master_Write(0xD1);
  3379  0331  30D1               	movlw	209
  3380  0332  00F0               	movwf	I2C_Master_Write@d
  3381  0333  3000               	movlw	0
  3382  0334  00F1               	movwf	I2C_Master_Write@d+1
  3383  0335  120A  158A  24F8  120A  118A  	fcall	_I2C_Master_Write
  3384                           
  3385                           ;mainMaster.c: 287:     tempMSB = I2C_Master_Read(1);
  3386  033A  3001               	movlw	1
  3387  033B  00F0               	movwf	I2C_Master_Read@a
  3388  033C  3000               	movlw	0
  3389  033D  00F1               	movwf	I2C_Master_Read@a+1
  3390  033E  120A  158A  2635  120A  118A  	fcall	_I2C_Master_Read
  3391  0343  0870               	movf	?_I2C_Master_Read,w
  3392  0344  1283               	bcf	3,5	;RP0=0, select bank0
  3393  0345  1303               	bcf	3,6	;RP1=0, select bank0
  3394  0346  00CB               	movwf	??_get_temp
  3395  0347  084B               	movf	??_get_temp,w
  3396  0348  00D1               	movwf	get_temp@tempMSB
  3397                           
  3398                           ;mainMaster.c: 288:     tempLSB = I2C_Master_Read(0);
  3399  0349  3000               	movlw	0
  3400  034A  00F0               	movwf	I2C_Master_Read@a
  3401  034B  00F1               	movwf	I2C_Master_Read@a+1
  3402  034C  120A  158A  2635  120A  118A  	fcall	_I2C_Master_Read
  3403  0351  0870               	movf	?_I2C_Master_Read,w
  3404  0352  1283               	bcf	3,5	;RP0=0, select bank0
  3405  0353  1303               	bcf	3,6	;RP1=0, select bank0
  3406  0354  00CB               	movwf	??_get_temp
  3407  0355  084B               	movf	??_get_temp,w
  3408  0356  00D3               	movwf	get_temp@tempLSB
  3409                           
  3410                           ;mainMaster.c: 289:     I2C_Master_Stop();
  3411  0357  120A  158A  24EA  120A  118A  	fcall	_I2C_Master_Stop
  3412                           
  3413                           ;mainMaster.c: 291:     tempMSB = tempMSB - 4;
  3414  035C  1283               	bcf	3,5	;RP0=0, select bank0
  3415  035D  1303               	bcf	3,6	;RP1=0, select bank0
  3416  035E  0851               	movf	get_temp@tempMSB,w
  3417  035F  3EFC               	addlw	252
  3418  0360  00CB               	movwf	??_get_temp
  3419  0361  084B               	movf	??_get_temp,w
  3420  0362  00D1               	movwf	get_temp@tempMSB
  3421                           
  3422                           ;mainMaster.c: 292:     tempLSB = (tempLSB >> 6) * 25;
  3423  0363  3019               	movlw	25
  3424  0364  00CB               	movwf	??_get_temp
  3425  0365  084B               	movf	??_get_temp,w
  3426  0366  00F0               	movwf	___bmul@multiplicand
  3427  0367  0853               	movf	get_temp@tempLSB,w
  3428  0368  00CC               	movwf	??_get_temp+1
  3429  0369  3006               	movlw	6
  3430  036A                     u1555:	
  3431  036A  1003               	clrc
  3432  036B  0CCC               	rrf	??_get_temp+1,f
  3433  036C  3EFF               	addlw	-1
  3434  036D  1D03               	skipz
  3435  036E  2B6A               	goto	u1555
  3436  036F  084C               	movf	??_get_temp+1,w
  3437  0370  120A  158A  2526  120A  118A  	fcall	___bmul
  3438  0375  1283               	bcf	3,5	;RP0=0, select bank0
  3439  0376  1303               	bcf	3,6	;RP1=0, select bank0
  3440  0377  00CD               	movwf	??_get_temp+2
  3441  0378  084D               	movf	??_get_temp+2,w
  3442  0379  00D3               	movwf	get_temp@tempLSB
  3443                           
  3444                           ;mainMaster.c: 293:     sprintf(temp_string, "%d", tempMSB);
  3445  037A  30A1               	movlw	(low (((STR_20+1)-__stringbase)| (0+32768)))& (0+255)
  3446  037B  00CB               	movwf	??_get_temp
  3447  037C  084B               	movf	??_get_temp,w
  3448  037D  00BE               	movwf	sprintf@f
  3449  037E  0851               	movf	get_temp@tempMSB,w
  3450  037F  00CC               	movwf	??_get_temp+1
  3451  0380  01CD               	clrf	??_get_temp+2
  3452  0381  084C               	movf	??_get_temp+1,w
  3453  0382  00BF               	movwf	?_sprintf+1
  3454  0383  084D               	movf	??_get_temp+2,w
  3455  0384  00C0               	movwf	?_sprintf+2
  3456  0385  0852               	movf	get_temp@temp_string,w
  3457  0386  120A  118A  248B  120A  118A  	fcall	_sprintf
  3458                           
  3459                           ;mainMaster.c: 294:     if (tempLSB == 0){
  3460  038B  1283               	bcf	3,5	;RP0=0, select bank0
  3461  038C  1303               	bcf	3,6	;RP1=0, select bank0
  3462  038D  0853               	movf	get_temp@tempLSB,w
  3463  038E  1D03               	btfss	3,2
  3464  038F  2B92               	goto	l2168
  3465                           
  3466                           ;mainMaster.c: 295:         sprintf(decimal, ".%d0", tempLSB);
  3467  0390  309B               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  3468  0391  2B93               	goto	L15
  3469  0392                     l2168:	
  3470                           ;mainMaster.c: 296:     } else {
  3471                           
  3472                           
  3473                           ;mainMaster.c: 297:         sprintf(decimal, ".%d", tempLSB);
  3474  0392  30A0               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  3475  0393                     L15:	
  3476  0393  00CB               	movwf	??_get_temp
  3477  0394  084B               	movf	??_get_temp,w
  3478  0395  00BE               	movwf	sprintf@f
  3479  0396  0853               	movf	get_temp@tempLSB,w
  3480  0397  00CC               	movwf	??_get_temp+1
  3481  0398  01CD               	clrf	??_get_temp+2
  3482  0399  084C               	movf	??_get_temp+1,w
  3483  039A  00BF               	movwf	?_sprintf+1
  3484  039B  084D               	movf	??_get_temp+2,w
  3485  039C  00C0               	movwf	?_sprintf+2
  3486  039D  304E               	movlw	(low (get_temp@decimal| 0))& (0+255)
  3487  039E  120A  118A  248B  120A  118A  	fcall	_sprintf
  3488                           
  3489                           ;mainMaster.c: 299:     strcat(temp_string, decimal);
  3490  03A3  304E               	movlw	(low (get_temp@decimal| 0))& (0+255)
  3491  03A4  1283               	bcf	3,5	;RP0=0, select bank0
  3492  03A5  1303               	bcf	3,6	;RP1=0, select bank0
  3493  03A6  00CB               	movwf	??_get_temp
  3494  03A7  084B               	movf	??_get_temp,w
  3495  03A8  00F0               	movwf	strcat@from
  3496  03A9  0852               	movf	get_temp@temp_string,w
  3497  03AA  120A  158A  25E7   	fcall	_strcat
  3498                           
  3499                           ;mainMaster.c: 300:     temp_string[5] = '\0';
  3500  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  3501  03AE  1303               	bcf	3,6	;RP1=0, select bank0
  3502  03AF  0852               	movf	get_temp@temp_string,w
  3503  03B0  3E05               	addlw	5
  3504  03B1  0084               	movwf	4
  3505  03B2  1383               	bcf	3,7	;select IRP bank0
  3506  03B3  0180               	clrf	0
  3507  03B4  0008               	return
  3508  03B5                     __end_of_get_temp:	
  3509                           
  3510                           	psect	text12
  3511  0DE7                     __ptext12:	
  3512 ;; *************** function _strcat *****************
  3513 ;; Defined at:
  3514 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  3515 ;; Parameters:    Size  Location     Type
  3516 ;;  to              1    wreg     PTR unsigned char 
  3517 ;;		 -> temp(6), 
  3518 ;;  from            1    0[COMMON] PTR const unsigned char 
  3519 ;;		 -> get_temp@decimal(3), 
  3520 ;; Auto vars:     Size  Location     Type
  3521 ;;  to              1    2[COMMON] PTR unsigned char 
  3522 ;;		 -> temp(6), 
  3523 ;;  cp              1    3[COMMON] PTR unsigned char 
  3524 ;;		 -> temp(6), 
  3525 ;; Return value:  Size  Location     Type
  3526 ;;                  1    wreg      PTR unsigned char 
  3527 ;; Registers used:
  3528 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3534 ;;      Params:         1       0       0       0       0
  3535 ;;      Locals:         2       0       0       0       0
  3536 ;;      Temps:          1       0       0       0       0
  3537 ;;      Totals:         4       0       0       0       0
  3538 ;;Total ram usage:        4 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; This function calls:
  3541 ;;		Nothing
  3542 ;; This function is called by:
  3543 ;;		_get_temp
  3544 ;; This function uses a non-reentrant model
  3545 ;;
  3546                           
  3547                           
  3548                           ;psect for function _strcat
  3549  0DE7                     _strcat:	
  3550                           
  3551                           ;incstack = 0
  3552                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  3553                           ;strcat@to stored from wreg
  3554  0DE7  00F2               	movwf	strcat@to
  3555  0DE8  0872               	movf	strcat@to,w
  3556  0DE9  00F1               	movwf	??_strcat
  3557  0DEA  0871               	movf	??_strcat,w
  3558  0DEB  00F3               	movwf	strcat@cp
  3559  0DEC                     l2062:	
  3560  0DEC  0873               	movf	strcat@cp,w
  3561  0DED  0084               	movwf	4
  3562  0DEE  1383               	bcf	3,7	;select IRP bank0
  3563  0DEF  0800               	movf	0,w
  3564  0DF0  1903               	btfsc	3,2
  3565  0DF1  2DFF               	goto	l2066
  3566  0DF2  3001               	movlw	1
  3567  0DF3  00F1               	movwf	??_strcat
  3568  0DF4  0871               	movf	??_strcat,w
  3569  0DF5  07F3               	addwf	strcat@cp,f
  3570  0DF6  2DEC               	goto	l2062
  3571  0DF7                     l2064:	
  3572  0DF7  3001               	movlw	1
  3573  0DF8  00F1               	movwf	??_strcat
  3574  0DF9  0871               	movf	??_strcat,w
  3575  0DFA  07F3               	addwf	strcat@cp,f
  3576  0DFB  3001               	movlw	1
  3577  0DFC  00F1               	movwf	??_strcat
  3578  0DFD  0871               	movf	??_strcat,w
  3579  0DFE  07F0               	addwf	strcat@from,f
  3580  0DFF                     l2066:	
  3581  0DFF  0870               	movf	strcat@from,w
  3582  0E00  0084               	movwf	4
  3583  0E01  0800               	movf	0,w
  3584  0E02  00F1               	movwf	??_strcat
  3585  0E03  0873               	movf	strcat@cp,w
  3586  0E04  0084               	movwf	4
  3587  0E05  0871               	movf	??_strcat,w
  3588  0E06  0080               	movwf	0
  3589  0E07  0800               	movf	0,w
  3590  0E08  1903               	btfsc	3,2
  3591  0E09  0008               	return
  3592  0E0A  2DF7               	goto	l2064
  3593  0E0B                     __end_of_strcat:	
  3594                           
  3595                           	psect	text13
  3596  048B                     __ptext13:	
  3597 ;; *************** function _sprintf *****************
  3598 ;; Defined at:
  3599 ;;		line 500 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  3600 ;; Parameters:    Size  Location     Type
  3601 ;;  sp              1    wreg     PTR unsigned char 
  3602 ;;		 -> get_temp@decimal(3), temp(6), 
  3603 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  3604 ;;		 -> STR_20(4), STR_19(5), STR_18(3), 
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  3607 ;;		 -> get_temp@decimal(3), temp(6), 
  3608 ;;  tmpval          4    0        struct .
  3609 ;;  val             2    9[BANK0 ] unsigned int 
  3610 ;;  cp              2    0        PTR const unsigned char 
  3611 ;;  len             2    0        unsigned int 
  3612 ;;  c               1   12[BANK0 ] unsigned char 
  3613 ;;  prec            1    8[BANK0 ] char 
  3614 ;;  flag            1    7[BANK0 ] unsigned char 
  3615 ;;  ap              1    6[BANK0 ] PTR void [1]
  3616 ;;		 -> ?_sprintf(2), 
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  2    0[BANK0 ] int 
  3619 ;; Registers used:
  3620 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3621 ;; Tracked objects:
  3622 ;;		On entry : 0/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3626 ;;      Params:         0       3       0       0       0
  3627 ;;      Locals:         0       7       0       0       0
  3628 ;;      Temps:          0       3       0       0       0
  3629 ;;      Totals:         0      13       0       0       0
  3630 ;;Total ram usage:       13 bytes
  3631 ;; Hardware stack levels used:    1
  3632 ;; Hardware stack levels required when called:    1
  3633 ;; This function calls:
  3634 ;;		___lwdiv
  3635 ;;		___lwmod
  3636 ;; This function is called by:
  3637 ;;		_get_temp
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           
  3642                           ;psect for function _sprintf
  3643  048B                     _sprintf:	
  3644                           
  3645                           ;incstack = 0
  3646                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3647                           ;sprintf@sp stored from wreg
  3648  048B  1283               	bcf	3,5	;RP0=0, select bank0
  3649  048C  1303               	bcf	3,6	;RP1=0, select bank0
  3650  048D  00C9               	movwf	sprintf@sp
  3651                           
  3652                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;D:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  3653  048E  303F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  3654  048F  00C1               	movwf	??_sprintf
  3655  0490  0841               	movf	??_sprintf,w
  3656  0491  00C4               	movwf	sprintf@ap
  3657  0492                     l2048:	
  3658                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  3659                           
  3660                           
  3661                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  3662  0492  3001               	movlw	1
  3663  0493  07BE               	addwf	sprintf@f,f
  3664  0494  30FF               	movlw	-1
  3665  0495  073E               	addwf	sprintf@f,w
  3666  0496  0084               	movwf	4
  3667  0497  120A  118A  200D  120A  118A  	fcall	stringdir
  3668  049C  00C1               	movwf	??_sprintf
  3669  049D  0841               	movf	??_sprintf,w
  3670  049E  00CA               	movwf	sprintf@c
  3671  049F  084A               	movf	sprintf@c,w
  3672  04A0  1903               	btfsc	3,2
  3673  04A1  2D5E               	goto	l2050
  3674                           
  3675                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  3676  04A2  3025               	movlw	37
  3677  04A3  064A               	xorwf	sprintf@c,w
  3678  04A4  1903               	btfsc	3,2
  3679  04A5  2CB2               	goto	l2004
  3680                           
  3681                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;D:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  3682  04A6  084A               	movf	sprintf@c,w
  3683  04A7  00C1               	movwf	??_sprintf
  3684  04A8  0849               	movf	sprintf@sp,w
  3685  04A9  0084               	movwf	4
  3686  04AA  0841               	movf	??_sprintf,w
  3687  04AB  1383               	bcf	3,7	;select IRP bank0
  3688  04AC  0080               	movwf	0
  3689  04AD  3001               	movlw	1
  3690  04AE  00C1               	movwf	??_sprintf
  3691  04AF  0841               	movf	??_sprintf,w
  3692  04B0  07C9               	addwf	sprintf@sp,f
  3693                           
  3694                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  3695  04B1  2C92               	goto	l2048
  3696  04B2                     l2004:	
  3697                           
  3698                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  3699  04B2  01C5               	clrf	sprintf@flag
  3700                           
  3701                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  3702  04B3  3001               	movlw	1
  3703  04B4  07BE               	addwf	sprintf@f,f
  3704  04B5  30FF               	movlw	-1
  3705  04B6  073E               	addwf	sprintf@f,w
  3706  04B7  0084               	movwf	4
  3707  04B8  120A  118A  200D  120A  118A  	fcall	stringdir
  3708  04BD  00CA               	movwf	sprintf@c
  3709  04BE  00C1               	movwf	??_sprintf
  3710  04BF  01C2               	clrf	??_sprintf+1
  3711                           
  3712                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3713                           ; Switch size 1, requested type "simple"
  3714                           ; Number of cases is 1, Range of values is 0 to 0
  3715                           ; switch strategies available:
  3716                           ; Name         Instructions Cycles
  3717                           ; simple_byte            4     3 (average)
  3718                           ; direct_byte           11     8 (fixed)
  3719                           ; jumptable            260     6 (fixed)
  3720                           ;	Chosen strategy is simple_byte
  3721  04C0  0842               	movf	??_sprintf+1,w
  3722  04C1  3A00               	xorlw	0	; case 0
  3723  04C2  1903               	skipnz
  3724  04C3  2CC5               	goto	l2476
  3725  04C4  2C92               	goto	l2048
  3726  04C5                     l2476:	
  3727                           
  3728                           ; Switch size 1, requested type "simple"
  3729                           ; Number of cases is 3, Range of values is 0 to 105
  3730                           ; switch strategies available:
  3731                           ; Name         Instructions Cycles
  3732                           ; simple_byte           10     6 (average)
  3733                           ; jumptable            260     6 (fixed)
  3734                           ;	Chosen strategy is simple_byte
  3735  04C5  0841               	movf	??_sprintf,w
  3736  04C6  3A00               	xorlw	0	; case 0
  3737  04C7  1903               	skipnz
  3738  04C8  2D5E               	goto	l2050
  3739  04C9  3A64               	xorlw	100	; case 100
  3740  04CA  1903               	skipnz
  3741  04CB  2CD0               	goto	l2010
  3742  04CC  3A0D               	xorlw	13	; case 105
  3743  04CD  1903               	skipnz
  3744  04CE  2CD0               	goto	l2010
  3745  04CF  2C92               	goto	l2048
  3746  04D0                     l2010:	
  3747                           
  3748                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3749  04D0  0844               	movf	sprintf@ap,w
  3750  04D1  0084               	movwf	4
  3751  04D2  1383               	bcf	3,7	;select IRP bank0
  3752  04D3  0800               	movf	0,w
  3753  04D4  00C7               	movwf	sprintf@val
  3754  04D5  0A84               	incf	4,f
  3755  04D6  0800               	movf	0,w
  3756  04D7  00C8               	movwf	sprintf@val+1
  3757  04D8  3002               	movlw	2
  3758  04D9  00C1               	movwf	??_sprintf
  3759  04DA  0841               	movf	??_sprintf,w
  3760  04DB  07C4               	addwf	sprintf@ap,f
  3761                           
  3762                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  3763  04DC  1FC8               	btfss	sprintf@val+1,7
  3764  04DD  2CE7               	goto	l2020
  3765                           
  3766                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  3767  04DE  3003               	movlw	3
  3768  04DF  00C1               	movwf	??_sprintf
  3769  04E0  0841               	movf	??_sprintf,w
  3770  04E1  04C5               	iorwf	sprintf@flag,f
  3771                           
  3772                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  3773  04E2  09C7               	comf	sprintf@val,f
  3774  04E3  09C8               	comf	sprintf@val+1,f
  3775  04E4  0AC7               	incf	sprintf@val,f
  3776  04E5  1903               	skipnz
  3777  04E6  0AC8               	incf	sprintf@val+1,f
  3778  04E7                     l2020:	
  3779                           
  3780                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3781  04E7  01CA               	clrf	sprintf@c
  3782  04E8  0ACA               	incf	sprintf@c,f
  3783  04E9                     l2026:	
  3784                           
  3785                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  3786  04E9  084A               	movf	sprintf@c,w
  3787  04EA  00C1               	movwf	??_sprintf
  3788  04EB  0741               	addwf	??_sprintf,w
  3789  04EC  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3790  04ED  0084               	movwf	4
  3791  04EE  120A  118A  200D  120A  118A  	fcall	stringdir
  3792  04F3  00C2               	movwf	??_sprintf+1
  3793  04F4  120A  118A  200D  120A  118A  	fcall	stringdir
  3794  04F9  00C3               	movwf	??_sprintf+2
  3795  04FA  0843               	movf	??_sprintf+2,w
  3796  04FB  0248               	subwf	sprintf@val+1,w
  3797  04FC  1D03               	skipz
  3798  04FD  2D00               	goto	u1385
  3799  04FE  0842               	movf	??_sprintf+1,w
  3800  04FF  0247               	subwf	sprintf@val,w
  3801  0500                     u1385:	
  3802  0500  1C03               	btfss	3,0
  3803  0501  2D0A               	goto	l2032
  3804  0502  3001               	movlw	1
  3805  0503  00C1               	movwf	??_sprintf
  3806  0504  0841               	movf	??_sprintf,w
  3807  0505  07CA               	addwf	sprintf@c,f
  3808  0506  3005               	movlw	5
  3809  0507  064A               	xorwf	sprintf@c,w
  3810  0508  1D03               	btfss	3,2
  3811  0509  2CE9               	goto	l2026
  3812  050A                     l2032:	
  3813                           
  3814                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  3815  050A  0845               	movf	sprintf@flag,w
  3816  050B  3903               	andlw	3
  3817  050C  1903               	btfsc	3,2
  3818  050D  2D19               	goto	l2038
  3819                           
  3820                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  3821  050E  302D               	movlw	45
  3822  050F  00C1               	movwf	??_sprintf
  3823  0510  0849               	movf	sprintf@sp,w
  3824  0511  0084               	movwf	4
  3825  0512  0841               	movf	??_sprintf,w
  3826  0513  1383               	bcf	3,7	;select IRP bank0
  3827  0514  0080               	movwf	0
  3828  0515  3001               	movlw	1
  3829  0516  00C1               	movwf	??_sprintf
  3830  0517  0841               	movf	??_sprintf,w
  3831  0518  07C9               	addwf	sprintf@sp,f
  3832  0519                     l2038:	
  3833                           
  3834                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  3835  0519  084A               	movf	sprintf@c,w
  3836  051A  00C1               	movwf	??_sprintf
  3837  051B  0841               	movf	??_sprintf,w
  3838  051C  00C6               	movwf	sprintf@prec
  3839  051D                     l2046:	
  3840                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  3841                           
  3842                           
  3843                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  3844  051D  30FF               	movlw	255
  3845  051E  00C1               	movwf	??_sprintf
  3846  051F  0841               	movf	??_sprintf,w
  3847  0520  07C6               	addwf	sprintf@prec,f
  3848  0521  0A46               	incf	sprintf@prec,w
  3849  0522  1903               	btfsc	3,2
  3850  0523  2C92               	goto	l2048
  3851                           
  3852                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  3853  0524  300A               	movlw	10
  3854  0525  00F8               	movwf	___lwmod@divisor
  3855  0526  3000               	movlw	0
  3856  0527  00F9               	movwf	___lwmod@divisor+1
  3857  0528  0846               	movf	sprintf@prec,w
  3858  0529  00C1               	movwf	??_sprintf
  3859  052A  0741               	addwf	??_sprintf,w
  3860  052B  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3861  052C  0084               	movwf	4
  3862  052D  120A  118A  200D  120A  118A  	fcall	stringdir
  3863  0532  00F0               	movwf	___lwdiv@divisor
  3864  0533  120A  118A  200D  120A  118A  	fcall	stringdir
  3865  0538  00F1               	movwf	___lwdiv@divisor+1
  3866  0539  0848               	movf	sprintf@val+1,w
  3867  053A  00F3               	movwf	___lwdiv@dividend+1
  3868  053B  0847               	movf	sprintf@val,w
  3869  053C  00F2               	movwf	___lwdiv@dividend
  3870  053D  120A  158A  2738  120A  118A  	fcall	___lwdiv
  3871  0542  0871               	movf	?___lwdiv+1,w
  3872  0543  00FB               	movwf	___lwmod@dividend+1
  3873  0544  0870               	movf	?___lwdiv,w
  3874  0545  00FA               	movwf	___lwmod@dividend
  3875  0546  120A  158A  2661  120A  118A  	fcall	___lwmod
  3876  054B  0878               	movf	?___lwmod,w
  3877  054C  3E30               	addlw	48
  3878  054D  1283               	bcf	3,5	;RP0=0, select bank0
  3879  054E  1303               	bcf	3,6	;RP1=0, select bank0
  3880  054F  00C2               	movwf	??_sprintf+1
  3881  0550  0842               	movf	??_sprintf+1,w
  3882  0551  00CA               	movwf	sprintf@c
  3883                           
  3884                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  3885  0552  084A               	movf	sprintf@c,w
  3886  0553  00C1               	movwf	??_sprintf
  3887  0554  0849               	movf	sprintf@sp,w
  3888  0555  0084               	movwf	4
  3889  0556  0841               	movf	??_sprintf,w
  3890  0557  1383               	bcf	3,7	;select IRP bank0
  3891  0558  0080               	movwf	0
  3892  0559  3001               	movlw	1
  3893  055A  00C1               	movwf	??_sprintf
  3894  055B  0841               	movf	??_sprintf,w
  3895  055C  07C9               	addwf	sprintf@sp,f
  3896  055D  2D1D               	goto	l2046
  3897  055E                     l2050:	
  3898                           
  3899                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  3900  055E  0849               	movf	sprintf@sp,w
  3901  055F  0084               	movwf	4
  3902  0560  1383               	bcf	3,7	;select IRP bank0
  3903  0561  0180               	clrf	0
  3904  0562  0008               	return
  3905  0563                     __end_of_sprintf:	
  3906                           
  3907                           	psect	text14
  3908  0E61                     __ptext14:	
  3909 ;; *************** function ___lwmod *****************
  3910 ;; Defined at:
  3911 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;  divisor         2    8[COMMON] unsigned int 
  3914 ;;  dividend        2   10[COMMON] unsigned int 
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;  counter         1   13[COMMON] unsigned char 
  3917 ;; Return value:  Size  Location     Type
  3918 ;;                  2    8[COMMON] unsigned int 
  3919 ;; Registers used:
  3920 ;;		wreg, status,2, status,0
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3926 ;;      Params:         4       0       0       0       0
  3927 ;;      Locals:         1       0       0       0       0
  3928 ;;      Temps:          1       0       0       0       0
  3929 ;;      Totals:         6       0       0       0       0
  3930 ;;Total ram usage:        6 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; This function calls:
  3933 ;;		Nothing
  3934 ;; This function is called by:
  3935 ;;		_sprintf
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           
  3940                           ;psect for function ___lwmod
  3941  0E61                     ___lwmod:	
  3942                           
  3943                           ;incstack = 0
  3944                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3945  0E61  0878               	movf	___lwmod@divisor,w
  3946  0E62  0479               	iorwf	___lwmod@divisor+1,w
  3947  0E63  1903               	btfsc	3,2
  3948  0E64  2E8E               	goto	l1864
  3949  0E65  01FD               	clrf	___lwmod@counter
  3950  0E66  0AFD               	incf	___lwmod@counter,f
  3951  0E67                     l1854:	
  3952  0E67  1BF9               	btfsc	___lwmod@divisor+1,7
  3953  0E68  2E75               	goto	l1856
  3954  0E69  3001               	movlw	1
  3955  0E6A                     u1205:	
  3956  0E6A  1003               	clrc
  3957  0E6B  0DF8               	rlf	___lwmod@divisor,f
  3958  0E6C  0DF9               	rlf	___lwmod@divisor+1,f
  3959  0E6D  3EFF               	addlw	-1
  3960  0E6E  1D03               	skipz
  3961  0E6F  2E6A               	goto	u1205
  3962  0E70  3001               	movlw	1
  3963  0E71  00FC               	movwf	??___lwmod
  3964  0E72  087C               	movf	??___lwmod,w
  3965  0E73  07FD               	addwf	___lwmod@counter,f
  3966  0E74  2E67               	goto	l1854
  3967  0E75                     l1856:	
  3968  0E75  0879               	movf	___lwmod@divisor+1,w
  3969  0E76  027B               	subwf	___lwmod@dividend+1,w
  3970  0E77  1D03               	skipz
  3971  0E78  2E7B               	goto	u1225
  3972  0E79  0878               	movf	___lwmod@divisor,w
  3973  0E7A  027A               	subwf	___lwmod@dividend,w
  3974  0E7B                     u1225:	
  3975  0E7B  1C03               	skipc
  3976  0E7C  2E83               	goto	l1860
  3977  0E7D  0878               	movf	___lwmod@divisor,w
  3978  0E7E  02FA               	subwf	___lwmod@dividend,f
  3979  0E7F  0879               	movf	___lwmod@divisor+1,w
  3980  0E80  1C03               	skipc
  3981  0E81  03FB               	decf	___lwmod@dividend+1,f
  3982  0E82  02FB               	subwf	___lwmod@dividend+1,f
  3983  0E83                     l1860:	
  3984  0E83  3001               	movlw	1
  3985  0E84                     u1235:	
  3986  0E84  1003               	clrc
  3987  0E85  0CF9               	rrf	___lwmod@divisor+1,f
  3988  0E86  0CF8               	rrf	___lwmod@divisor,f
  3989  0E87  3EFF               	addlw	-1
  3990  0E88  1D03               	skipz
  3991  0E89  2E84               	goto	u1235
  3992  0E8A  3001               	movlw	1
  3993  0E8B  02FD               	subwf	___lwmod@counter,f
  3994  0E8C  1D03               	btfss	3,2
  3995  0E8D  2E75               	goto	l1856
  3996  0E8E                     l1864:	
  3997  0E8E  087B               	movf	___lwmod@dividend+1,w
  3998  0E8F  00F9               	movwf	?___lwmod+1
  3999  0E90  087A               	movf	___lwmod@dividend,w
  4000  0E91  00F8               	movwf	?___lwmod
  4001  0E92  0008               	return
  4002  0E93                     __end_of___lwmod:	
  4003                           
  4004                           	psect	text15
  4005  0F38                     __ptext15:	
  4006 ;; *************** function ___lwdiv *****************
  4007 ;; Defined at:
  4008 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  4009 ;; Parameters:    Size  Location     Type
  4010 ;;  divisor         2    0[COMMON] unsigned int 
  4011 ;;  dividend        2    2[COMMON] unsigned int 
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;  quotient        2    5[COMMON] unsigned int 
  4014 ;;  counter         1    7[COMMON] unsigned char 
  4015 ;; Return value:  Size  Location     Type
  4016 ;;                  2    0[COMMON] unsigned int 
  4017 ;; Registers used:
  4018 ;;		wreg, status,2, status,0
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4024 ;;      Params:         4       0       0       0       0
  4025 ;;      Locals:         3       0       0       0       0
  4026 ;;      Temps:          1       0       0       0       0
  4027 ;;      Totals:         8       0       0       0       0
  4028 ;;Total ram usage:        8 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; This function calls:
  4031 ;;		Nothing
  4032 ;; This function is called by:
  4033 ;;		_sprintf
  4034 ;; This function uses a non-reentrant model
  4035 ;;
  4036                           
  4037                           
  4038                           ;psect for function ___lwdiv
  4039  0F38                     ___lwdiv:	
  4040                           
  4041                           ;incstack = 0
  4042                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4043  0F38  01F5               	clrf	___lwdiv@quotient
  4044  0F39  01F6               	clrf	___lwdiv@quotient+1
  4045  0F3A  0870               	movf	___lwdiv@divisor,w
  4046  0F3B  0471               	iorwf	___lwdiv@divisor+1,w
  4047  0F3C  1903               	btfsc	3,2
  4048  0F3D  2F6F               	goto	l1842
  4049  0F3E  01F7               	clrf	___lwdiv@counter
  4050  0F3F  0AF7               	incf	___lwdiv@counter,f
  4051  0F40                     l1830:	
  4052  0F40  1BF1               	btfsc	___lwdiv@divisor+1,7
  4053  0F41  2F4E               	goto	l1832
  4054  0F42  3001               	movlw	1
  4055  0F43                     u1135:	
  4056  0F43  1003               	clrc
  4057  0F44  0DF0               	rlf	___lwdiv@divisor,f
  4058  0F45  0DF1               	rlf	___lwdiv@divisor+1,f
  4059  0F46  3EFF               	addlw	-1
  4060  0F47  1D03               	skipz
  4061  0F48  2F43               	goto	u1135
  4062  0F49  3001               	movlw	1
  4063  0F4A  00F4               	movwf	??___lwdiv
  4064  0F4B  0874               	movf	??___lwdiv,w
  4065  0F4C  07F7               	addwf	___lwdiv@counter,f
  4066  0F4D  2F40               	goto	l1830
  4067  0F4E                     l1832:	
  4068  0F4E  3001               	movlw	1
  4069  0F4F                     u1155:	
  4070  0F4F  1003               	clrc
  4071  0F50  0DF5               	rlf	___lwdiv@quotient,f
  4072  0F51  0DF6               	rlf	___lwdiv@quotient+1,f
  4073  0F52  3EFF               	addlw	-1
  4074  0F53  1D03               	skipz
  4075  0F54  2F4F               	goto	u1155
  4076  0F55  0871               	movf	___lwdiv@divisor+1,w
  4077  0F56  0273               	subwf	___lwdiv@dividend+1,w
  4078  0F57  1D03               	skipz
  4079  0F58  2F5B               	goto	u1165
  4080  0F59  0870               	movf	___lwdiv@divisor,w
  4081  0F5A  0272               	subwf	___lwdiv@dividend,w
  4082  0F5B                     u1165:	
  4083  0F5B  1C03               	skipc
  4084  0F5C  2F64               	goto	l1838
  4085  0F5D  0870               	movf	___lwdiv@divisor,w
  4086  0F5E  02F2               	subwf	___lwdiv@dividend,f
  4087  0F5F  0871               	movf	___lwdiv@divisor+1,w
  4088  0F60  1C03               	skipc
  4089  0F61  03F3               	decf	___lwdiv@dividend+1,f
  4090  0F62  02F3               	subwf	___lwdiv@dividend+1,f
  4091  0F63  1475               	bsf	___lwdiv@quotient,0
  4092  0F64                     l1838:	
  4093  0F64  3001               	movlw	1
  4094  0F65                     u1175:	
  4095  0F65  1003               	clrc
  4096  0F66  0CF1               	rrf	___lwdiv@divisor+1,f
  4097  0F67  0CF0               	rrf	___lwdiv@divisor,f
  4098  0F68  3EFF               	addlw	-1
  4099  0F69  1D03               	skipz
  4100  0F6A  2F65               	goto	u1175
  4101  0F6B  3001               	movlw	1
  4102  0F6C  02F7               	subwf	___lwdiv@counter,f
  4103  0F6D  1D03               	btfss	3,2
  4104  0F6E  2F4E               	goto	l1832
  4105  0F6F                     l1842:	
  4106  0F6F  0876               	movf	___lwdiv@quotient+1,w
  4107  0F70  00F1               	movwf	?___lwdiv+1
  4108  0F71  0875               	movf	___lwdiv@quotient,w
  4109  0F72  00F0               	movwf	?___lwdiv
  4110  0F73  0008               	return
  4111  0F74                     __end_of___lwdiv:	
  4112                           
  4113                           	psect	text16
  4114  0D26                     __ptext16:	
  4115 ;; *************** function ___bmul *****************
  4116 ;; Defined at:
  4117 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;  multiplier      1    wreg     unsigned char 
  4120 ;;  multiplicand    1    0[COMMON] unsigned char 
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;  multiplier      1    3[COMMON] unsigned char 
  4123 ;;  product         1    2[COMMON] unsigned char 
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  1    wreg      unsigned char 
  4126 ;; Registers used:
  4127 ;;		wreg, status,2, status,0
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4133 ;;      Params:         1       0       0       0       0
  4134 ;;      Locals:         2       0       0       0       0
  4135 ;;      Temps:          1       0       0       0       0
  4136 ;;      Totals:         4       0       0       0       0
  4137 ;;Total ram usage:        4 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; This function calls:
  4140 ;;		Nothing
  4141 ;; This function is called by:
  4142 ;;		_get_temp
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           
  4147                           ;psect for function ___bmul
  4148  0D26                     ___bmul:	
  4149                           
  4150                           ;incstack = 0
  4151                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4152                           ;___bmul@multiplier stored from wreg
  4153  0D26  00F3               	movwf	___bmul@multiplier
  4154  0D27  01F2               	clrf	___bmul@product
  4155  0D28                     l2070:	
  4156  0D28  1C73               	btfss	___bmul@multiplier,0
  4157  0D29  2D2E               	goto	l2074
  4158  0D2A  0870               	movf	___bmul@multiplicand,w
  4159  0D2B  00F1               	movwf	??___bmul
  4160  0D2C  0871               	movf	??___bmul,w
  4161  0D2D  07F2               	addwf	___bmul@product,f
  4162  0D2E                     l2074:	
  4163  0D2E  1003               	clrc
  4164  0D2F  0DF0               	rlf	___bmul@multiplicand,f
  4165  0D30  1003               	clrc
  4166  0D31  0CF3               	rrf	___bmul@multiplier,f
  4167  0D32  0873               	movf	___bmul@multiplier,w
  4168  0D33  1D03               	btfss	3,2
  4169  0D34  2D28               	goto	l2070
  4170  0D35  0872               	movf	___bmul@product,w
  4171  0D36  0008               	return
  4172  0D37                     __end_of___bmul:	
  4173                           
  4174                           	psect	text17
  4175  0DA9                     __ptext17:	
  4176 ;; *************** function _get_hall *****************
  4177 ;; Defined at:
  4178 ;;		line 304 in file "mainMaster.c"
  4179 ;; Parameters:    Size  Location     Type
  4180 ;;		None
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;  key             1    7[COMMON] unsigned char 
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  1    wreg      unsigned char 
  4185 ;; Registers used:
  4186 ;;		wreg, status,2, status,0, pclath, cstack
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4192 ;;      Params:         0       0       0       0       0
  4193 ;;      Locals:         1       0       0       0       0
  4194 ;;      Temps:          1       0       0       0       0
  4195 ;;      Totals:         2       0       0       0       0
  4196 ;;Total ram usage:        2 bytes
  4197 ;; Hardware stack levels used:    1
  4198 ;; Hardware stack levels required when called:    2
  4199 ;; This function calls:
  4200 ;;		_I2C_Master_Read
  4201 ;;		_I2C_Master_Start
  4202 ;;		_I2C_Master_Stop
  4203 ;;		_I2C_Master_Write
  4204 ;; This function is called by:
  4205 ;;		_main
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           
  4210                           ;psect for function _get_hall
  4211  0DA9                     _get_hall:	
  4212                           
  4213                           ;mainMaster.c: 306:     char key;;mainMaster.c: 308:     I2C_Master_Start();
  4214                           
  4215                           ;incstack = 0
  4216                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  4217  0DA9  120A  158A  24E3  120A  158A  	fcall	_I2C_Master_Start
  4218                           
  4219                           ;mainMaster.c: 309:     I2C_Master_Write(0x11);
  4220  0DAE  3011               	movlw	17
  4221  0DAF  00F0               	movwf	I2C_Master_Write@d
  4222  0DB0  3000               	movlw	0
  4223  0DB1  00F1               	movwf	I2C_Master_Write@d+1
  4224  0DB2  120A  158A  24F8  120A  158A  	fcall	_I2C_Master_Write
  4225                           
  4226                           ;mainMaster.c: 310:     key = I2C_Master_Read(0);
  4227  0DB7  3000               	movlw	0
  4228  0DB8  00F0               	movwf	I2C_Master_Read@a
  4229  0DB9  00F1               	movwf	I2C_Master_Read@a+1
  4230  0DBA  120A  158A  2635  120A  158A  	fcall	_I2C_Master_Read
  4231  0DBF  0870               	movf	?_I2C_Master_Read,w
  4232  0DC0  00F6               	movwf	??_get_hall
  4233  0DC1  0876               	movf	??_get_hall,w
  4234  0DC2  00F7               	movwf	get_hall@key
  4235                           
  4236                           ;mainMaster.c: 311:     I2C_Master_Stop();
  4237  0DC3  120A  158A  24EA   	fcall	_I2C_Master_Stop
  4238                           
  4239                           ;mainMaster.c: 313:     return (key);
  4240  0DC6  0877               	movf	get_hall@key,w
  4241  0DC7  0008               	return
  4242  0DC8                     __end_of_get_hall:	
  4243                           
  4244                           	psect	text18
  4245  0E93                     __ptext18:	
  4246 ;; *************** function _get_day *****************
  4247 ;; Defined at:
  4248 ;;		line 262 in file "mainMaster.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;		None
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;  d               1    7[COMMON] unsigned char 
  4253 ;; Return value:  Size  Location     Type
  4254 ;;                  1    wreg      unsigned char 
  4255 ;; Registers used:
  4256 ;;		wreg, status,2, status,0, pclath, cstack
  4257 ;; Tracked objects:
  4258 ;;		On entry : 0/0
  4259 ;;		On exit  : 0/0
  4260 ;;		Unchanged: 0/0
  4261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4262 ;;      Params:         0       0       0       0       0
  4263 ;;      Locals:         1       0       0       0       0
  4264 ;;      Temps:          1       0       0       0       0
  4265 ;;      Totals:         2       0       0       0       0
  4266 ;;Total ram usage:        2 bytes
  4267 ;; Hardware stack levels used:    1
  4268 ;; Hardware stack levels required when called:    2
  4269 ;; This function calls:
  4270 ;;		_I2C_Master_Read
  4271 ;;		_I2C_Master_RepeatedStart
  4272 ;;		_I2C_Master_Start
  4273 ;;		_I2C_Master_Stop
  4274 ;;		_I2C_Master_Write
  4275 ;; This function is called by:
  4276 ;;		_main
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280                           
  4281                           ;psect for function _get_day
  4282  0E93                     _get_day:	
  4283                           
  4284                           ;mainMaster.c: 264:     char d;;mainMaster.c: 266:     I2C_Master_Start();
  4285                           
  4286                           ;incstack = 0
  4287                           ; Regs used in _get_day: [wreg+status,2+status,0+pclath+cstack]
  4288  0E93  120A  158A  24E3  120A  158A  	fcall	_I2C_Master_Start
  4289                           
  4290                           ;mainMaster.c: 267:     I2C_Master_Write(0xD0);
  4291  0E98  30D0               	movlw	208
  4292  0E99  00F0               	movwf	I2C_Master_Write@d
  4293  0E9A  3000               	movlw	0
  4294  0E9B  00F1               	movwf	I2C_Master_Write@d+1
  4295  0E9C  120A  158A  24F8  120A  158A  	fcall	_I2C_Master_Write
  4296                           
  4297                           ;mainMaster.c: 268:     I2C_Master_Write(0x03);
  4298  0EA1  3003               	movlw	3
  4299  0EA2  00F0               	movwf	I2C_Master_Write@d
  4300  0EA3  3000               	movlw	0
  4301  0EA4  00F1               	movwf	I2C_Master_Write@d+1
  4302  0EA5  120A  158A  24F8  120A  158A  	fcall	_I2C_Master_Write
  4303                           
  4304                           ;mainMaster.c: 269:     I2C_Master_RepeatedStart();
  4305  0EAA  120A  158A  24F1  120A  158A  	fcall	_I2C_Master_RepeatedStart
  4306                           
  4307                           ;mainMaster.c: 270:     I2C_Master_Write(0xD1);
  4308  0EAF  30D1               	movlw	209
  4309  0EB0  00F0               	movwf	I2C_Master_Write@d
  4310  0EB1  3000               	movlw	0
  4311  0EB2  00F1               	movwf	I2C_Master_Write@d+1
  4312  0EB3  120A  158A  24F8  120A  158A  	fcall	_I2C_Master_Write
  4313                           
  4314                           ;mainMaster.c: 271:     d = I2C_Master_Read(0);
  4315  0EB8  3000               	movlw	0
  4316  0EB9  00F0               	movwf	I2C_Master_Read@a
  4317  0EBA  00F1               	movwf	I2C_Master_Read@a+1
  4318  0EBB  120A  158A  2635  120A  158A  	fcall	_I2C_Master_Read
  4319  0EC0  0870               	movf	?_I2C_Master_Read,w
  4320  0EC1  00F6               	movwf	??_get_day
  4321  0EC2  0876               	movf	??_get_day,w
  4322  0EC3  00F7               	movwf	get_day@d
  4323                           
  4324                           ;mainMaster.c: 272:     I2C_Master_Stop();
  4325  0EC4  120A  158A  24EA   	fcall	_I2C_Master_Stop
  4326                           
  4327                           ;mainMaster.c: 274:     return d;
  4328  0EC7  0877               	movf	get_day@d,w
  4329  0EC8  0008               	return
  4330  0EC9                     __end_of_get_day:	
  4331                           
  4332                           	psect	text19
  4333  0CF1                     __ptext19:	
  4334 ;; *************** function _I2C_Master_RepeatedStart *****************
  4335 ;; Defined at:
  4336 ;;		line 47 in file "./I2C.h"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;		None
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;		None
  4341 ;; Return value:  Size  Location     Type
  4342 ;;                  1    wreg      void 
  4343 ;; Registers used:
  4344 ;;		wreg, status,2, status,0, pclath, cstack
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4350 ;;      Params:         0       0       0       0       0
  4351 ;;      Locals:         0       0       0       0       0
  4352 ;;      Temps:          0       0       0       0       0
  4353 ;;      Totals:         0       0       0       0       0
  4354 ;;Total ram usage:        0 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    1
  4357 ;; This function calls:
  4358 ;;		_I2C_Master_Wait
  4359 ;; This function is called by:
  4360 ;;		_get_time
  4361 ;;		_get_day
  4362 ;;		_get_temp
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           
  4367                           ;psect for function _I2C_Master_RepeatedStart
  4368  0CF1                     _I2C_Master_RepeatedStart:	
  4369                           
  4370                           ;./I2C.h: 49:     I2C_Master_Wait();
  4371                           
  4372                           ;incstack = 0
  4373                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  4374  0CF1  120A  158A  2508   	fcall	_I2C_Master_Wait
  4375                           
  4376                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  4377  0CF4  1683               	bsf	3,5	;RP0=1, select bank1
  4378  0CF5  1303               	bcf	3,6	;RP1=0, select bank1
  4379  0CF6  1491               	bsf	17,1	;volatile
  4380  0CF7  0008               	return
  4381  0CF8                     __end_of_I2C_Master_RepeatedStart:	
  4382                           
  4383                           	psect	text20
  4384  0D8A                     __ptext20:	
  4385 ;; *************** function _get_PIR *****************
  4386 ;; Defined at:
  4387 ;;		line 328 in file "mainMaster.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;		None
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;  PIR             1    7[COMMON] unsigned char 
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  1    wreg      unsigned char 
  4394 ;; Registers used:
  4395 ;;		wreg, status,2, status,0, pclath, cstack
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4401 ;;      Params:         0       0       0       0       0
  4402 ;;      Locals:         1       0       0       0       0
  4403 ;;      Temps:          1       0       0       0       0
  4404 ;;      Totals:         2       0       0       0       0
  4405 ;;Total ram usage:        2 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    2
  4408 ;; This function calls:
  4409 ;;		_I2C_Master_Read
  4410 ;;		_I2C_Master_Start
  4411 ;;		_I2C_Master_Stop
  4412 ;;		_I2C_Master_Write
  4413 ;; This function is called by:
  4414 ;;		_main
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           
  4419                           ;psect for function _get_PIR
  4420  0D8A                     _get_PIR:	
  4421                           
  4422                           ;mainMaster.c: 330:     char PIR;;mainMaster.c: 332:     I2C_Master_Start();
  4423                           
  4424                           ;incstack = 0
  4425                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  4426  0D8A  120A  158A  24E3  120A  158A  	fcall	_I2C_Master_Start
  4427                           
  4428                           ;mainMaster.c: 333:     I2C_Master_Write(0x41);
  4429  0D8F  3041               	movlw	65
  4430  0D90  00F0               	movwf	I2C_Master_Write@d
  4431  0D91  3000               	movlw	0
  4432  0D92  00F1               	movwf	I2C_Master_Write@d+1
  4433  0D93  120A  158A  24F8  120A  158A  	fcall	_I2C_Master_Write
  4434                           
  4435                           ;mainMaster.c: 334:     PIR = I2C_Master_Read(0);
  4436  0D98  3000               	movlw	0
  4437  0D99  00F0               	movwf	I2C_Master_Read@a
  4438  0D9A  00F1               	movwf	I2C_Master_Read@a+1
  4439  0D9B  120A  158A  2635  120A  158A  	fcall	_I2C_Master_Read
  4440  0DA0  0870               	movf	?_I2C_Master_Read,w
  4441  0DA1  00F6               	movwf	??_get_PIR
  4442  0DA2  0876               	movf	??_get_PIR,w
  4443  0DA3  00F7               	movwf	get_PIR@PIR
  4444                           
  4445                           ;mainMaster.c: 335:     I2C_Master_Stop();
  4446  0DA4  120A  158A  24EA   	fcall	_I2C_Master_Stop
  4447                           
  4448                           ;mainMaster.c: 337:     return (PIR);
  4449  0DA7  0877               	movf	get_PIR@PIR,w
  4450  0DA8  0008               	return
  4451  0DA9                     __end_of_get_PIR:	
  4452                           
  4453                           	psect	text21
  4454  0D6B                     __ptext21:	
  4455 ;; *************** function _get_IR *****************
  4456 ;; Defined at:
  4457 ;;		line 340 in file "mainMaster.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;		None
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  IR              1    7[COMMON] unsigned char 
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  1    wreg      unsigned char 
  4464 ;; Registers used:
  4465 ;;		wreg, status,2, status,0, pclath, cstack
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4471 ;;      Params:         0       0       0       0       0
  4472 ;;      Locals:         1       0       0       0       0
  4473 ;;      Temps:          1       0       0       0       0
  4474 ;;      Totals:         2       0       0       0       0
  4475 ;;Total ram usage:        2 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    2
  4478 ;; This function calls:
  4479 ;;		_I2C_Master_Read
  4480 ;;		_I2C_Master_Start
  4481 ;;		_I2C_Master_Stop
  4482 ;;		_I2C_Master_Write
  4483 ;; This function is called by:
  4484 ;;		_main
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           
  4489                           ;psect for function _get_IR
  4490  0D6B                     _get_IR:	
  4491                           
  4492                           ;mainMaster.c: 342:     char IR;;mainMaster.c: 344:     I2C_Master_Start();
  4493                           
  4494                           ;incstack = 0
  4495                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  4496  0D6B  120A  158A  24E3  120A  158A  	fcall	_I2C_Master_Start
  4497                           
  4498                           ;mainMaster.c: 345:     I2C_Master_Write(0x31);
  4499  0D70  3031               	movlw	49
  4500  0D71  00F0               	movwf	I2C_Master_Write@d
  4501  0D72  3000               	movlw	0
  4502  0D73  00F1               	movwf	I2C_Master_Write@d+1
  4503  0D74  120A  158A  24F8  120A  158A  	fcall	_I2C_Master_Write
  4504                           
  4505                           ;mainMaster.c: 346:     IR = I2C_Master_Read(0);
  4506  0D79  3000               	movlw	0
  4507  0D7A  00F0               	movwf	I2C_Master_Read@a
  4508  0D7B  00F1               	movwf	I2C_Master_Read@a+1
  4509  0D7C  120A  158A  2635  120A  158A  	fcall	_I2C_Master_Read
  4510  0D81  0870               	movf	?_I2C_Master_Read,w
  4511  0D82  00F6               	movwf	??_get_IR
  4512  0D83  0876               	movf	??_get_IR,w
  4513  0D84  00F7               	movwf	get_IR@IR
  4514                           
  4515                           ;mainMaster.c: 347:     I2C_Master_Stop();
  4516  0D85  120A  158A  24EA   	fcall	_I2C_Master_Stop
  4517                           
  4518                           ;mainMaster.c: 349:     return (IR);
  4519  0D88  0877               	movf	get_IR@IR,w
  4520  0D89  0008               	return
  4521  0D8A                     __end_of_get_IR:	
  4522                           
  4523                           	psect	text22
  4524  0CF8                     __ptext22:	
  4525 ;; *************** function _I2C_Master_Write *****************
  4526 ;; Defined at:
  4527 ;;		line 65 in file "./I2C.h"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;  d               2    0[COMMON] unsigned int 
  4530 ;; Auto vars:     Size  Location     Type
  4531 ;;		None
  4532 ;; Return value:  Size  Location     Type
  4533 ;;                  1    wreg      void 
  4534 ;; Registers used:
  4535 ;;		wreg, status,2, status,0, pclath, cstack
  4536 ;; Tracked objects:
  4537 ;;		On entry : 0/0
  4538 ;;		On exit  : 0/0
  4539 ;;		Unchanged: 0/0
  4540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4541 ;;      Params:         2       0       0       0       0
  4542 ;;      Locals:         0       0       0       0       0
  4543 ;;      Temps:          0       0       0       0       0
  4544 ;;      Totals:         2       0       0       0       0
  4545 ;;Total ram usage:        2 bytes
  4546 ;; Hardware stack levels used:    1
  4547 ;; Hardware stack levels required when called:    1
  4548 ;; This function calls:
  4549 ;;		_I2C_Master_Wait
  4550 ;; This function is called by:
  4551 ;;		_get_time
  4552 ;;		_get_day
  4553 ;;		_get_temp
  4554 ;;		_get_hall
  4555 ;;		_get_tripwire
  4556 ;;		_get_PIR
  4557 ;;		_get_IR
  4558 ;;		_write_RTC
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           
  4563                           ;psect for function _I2C_Master_Write
  4564  0CF8                     _I2C_Master_Write:	
  4565                           
  4566                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  4567                           
  4568                           ;incstack = 0
  4569                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  4570  0CF8  120A  158A  2508   	fcall	_I2C_Master_Wait
  4571                           
  4572                           ;./I2C.h: 68:     SSPBUF = d;
  4573  0CFB  0870               	movf	I2C_Master_Write@d,w
  4574  0CFC  1283               	bcf	3,5	;RP0=0, select bank0
  4575  0CFD  1303               	bcf	3,6	;RP1=0, select bank0
  4576  0CFE  0093               	movwf	19	;volatile
  4577  0CFF  0008               	return
  4578  0D00                     __end_of_I2C_Master_Write:	
  4579                           
  4580                           	psect	text23
  4581  0CEA                     __ptext23:	
  4582 ;; *************** function _I2C_Master_Stop *****************
  4583 ;; Defined at:
  4584 ;;		line 55 in file "./I2C.h"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;		None
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;		None
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  1    wreg      void 
  4591 ;; Registers used:
  4592 ;;		wreg, status,2, status,0, pclath, cstack
  4593 ;; Tracked objects:
  4594 ;;		On entry : 0/0
  4595 ;;		On exit  : 0/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4598 ;;      Params:         0       0       0       0       0
  4599 ;;      Locals:         0       0       0       0       0
  4600 ;;      Temps:          0       0       0       0       0
  4601 ;;      Totals:         0       0       0       0       0
  4602 ;;Total ram usage:        0 bytes
  4603 ;; Hardware stack levels used:    1
  4604 ;; Hardware stack levels required when called:    1
  4605 ;; This function calls:
  4606 ;;		_I2C_Master_Wait
  4607 ;; This function is called by:
  4608 ;;		_get_time
  4609 ;;		_get_day
  4610 ;;		_get_temp
  4611 ;;		_get_hall
  4612 ;;		_get_tripwire
  4613 ;;		_get_PIR
  4614 ;;		_get_IR
  4615 ;;		_write_RTC
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           
  4620                           ;psect for function _I2C_Master_Stop
  4621  0CEA                     _I2C_Master_Stop:	
  4622                           
  4623                           ;./I2C.h: 57:     I2C_Master_Wait();
  4624                           
  4625                           ;incstack = 0
  4626                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  4627  0CEA  120A  158A  2508   	fcall	_I2C_Master_Wait
  4628                           
  4629                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  4630  0CED  1683               	bsf	3,5	;RP0=1, select bank1
  4631  0CEE  1303               	bcf	3,6	;RP1=0, select bank1
  4632  0CEF  1511               	bsf	17,2	;volatile
  4633  0CF0  0008               	return
  4634  0CF1                     __end_of_I2C_Master_Stop:	
  4635                           
  4636                           	psect	text24
  4637  0CE3                     __ptext24:	
  4638 ;; *************** function _I2C_Master_Start *****************
  4639 ;; Defined at:
  4640 ;;		line 39 in file "./I2C.h"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;		None
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;		None
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      void 
  4647 ;; Registers used:
  4648 ;;		wreg, status,2, status,0, pclath, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4654 ;;      Params:         0       0       0       0       0
  4655 ;;      Locals:         0       0       0       0       0
  4656 ;;      Temps:          0       0       0       0       0
  4657 ;;      Totals:         0       0       0       0       0
  4658 ;;Total ram usage:        0 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    1
  4661 ;; This function calls:
  4662 ;;		_I2C_Master_Wait
  4663 ;; This function is called by:
  4664 ;;		_get_time
  4665 ;;		_get_day
  4666 ;;		_get_temp
  4667 ;;		_get_hall
  4668 ;;		_get_tripwire
  4669 ;;		_get_PIR
  4670 ;;		_get_IR
  4671 ;;		_write_RTC
  4672 ;; This function uses a non-reentrant model
  4673 ;;
  4674                           
  4675                           
  4676                           ;psect for function _I2C_Master_Start
  4677  0CE3                     _I2C_Master_Start:	
  4678                           
  4679                           ;./I2C.h: 41:     I2C_Master_Wait();
  4680                           
  4681                           ;incstack = 0
  4682                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  4683  0CE3  120A  158A  2508   	fcall	_I2C_Master_Wait
  4684                           
  4685                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  4686  0CE6  1683               	bsf	3,5	;RP0=1, select bank1
  4687  0CE7  1303               	bcf	3,6	;RP1=0, select bank1
  4688  0CE8  1411               	bsf	17,0	;volatile
  4689  0CE9  0008               	return
  4690  0CEA                     __end_of_I2C_Master_Start:	
  4691                           
  4692                           	psect	text25
  4693  0E35                     __ptext25:	
  4694 ;; *************** function _I2C_Master_Read *****************
  4695 ;; Defined at:
  4696 ;;		line 74 in file "./I2C.h"
  4697 ;; Parameters:    Size  Location     Type
  4698 ;;  a               2    0[COMMON] unsigned short 
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;  temp            2    4[COMMON] unsigned short 
  4701 ;; Return value:  Size  Location     Type
  4702 ;;                  2    0[COMMON] unsigned short 
  4703 ;; Registers used:
  4704 ;;		wreg, status,2, status,0, pclath, cstack
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4710 ;;      Params:         2       0       0       0       0
  4711 ;;      Locals:         2       0       0       0       0
  4712 ;;      Temps:          2       0       0       0       0
  4713 ;;      Totals:         6       0       0       0       0
  4714 ;;Total ram usage:        6 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:    1
  4717 ;; This function calls:
  4718 ;;		_I2C_Master_Wait
  4719 ;; This function is called by:
  4720 ;;		_get_time
  4721 ;;		_get_day
  4722 ;;		_get_temp
  4723 ;;		_get_hall
  4724 ;;		_get_tripwire
  4725 ;;		_get_PIR
  4726 ;;		_get_IR
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           
  4731                           ;psect for function _I2C_Master_Read
  4732  0E35                     _I2C_Master_Read:	
  4733                           
  4734                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  4735                           
  4736                           ;incstack = 0
  4737                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  4738  0E35  120A  158A  2508  120A  158A  	fcall	_I2C_Master_Wait
  4739                           
  4740                           ;./I2C.h: 78:     RCEN = 1;
  4741  0E3A  1683               	bsf	3,5	;RP0=1, select bank1
  4742  0E3B  1303               	bcf	3,6	;RP1=0, select bank1
  4743  0E3C  1591               	bsf	17,3	;volatile
  4744                           
  4745                           ;./I2C.h: 79:     I2C_Master_Wait();
  4746  0E3D  120A  158A  2508  120A  158A  	fcall	_I2C_Master_Wait
  4747                           
  4748                           ;./I2C.h: 80:     temp = SSPBUF;
  4749  0E42  1283               	bcf	3,5	;RP0=0, select bank0
  4750  0E43  1303               	bcf	3,6	;RP1=0, select bank0
  4751  0E44  0813               	movf	19,w	;volatile
  4752  0E45  00F2               	movwf	??_I2C_Master_Read
  4753  0E46  01F3               	clrf	??_I2C_Master_Read+1
  4754  0E47  0872               	movf	??_I2C_Master_Read,w
  4755  0E48  00F4               	movwf	I2C_Master_Read@temp
  4756  0E49  0873               	movf	??_I2C_Master_Read+1,w
  4757  0E4A  00F5               	movwf	I2C_Master_Read@temp+1
  4758                           
  4759                           ;./I2C.h: 81:     I2C_Master_Wait();
  4760  0E4B  120A  158A  2508  120A  158A  	fcall	_I2C_Master_Wait
  4761                           
  4762                           ;./I2C.h: 83:     if(a == 1){
  4763  0E50  0370               	decf	I2C_Master_Read@a,w
  4764  0E51  0471               	iorwf	I2C_Master_Read@a+1,w
  4765  0E52  1D03               	btfss	3,2
  4766  0E53  2E58               	goto	l130
  4767                           
  4768                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  4769  0E54  1683               	bsf	3,5	;RP0=1, select bank1
  4770  0E55  1303               	bcf	3,6	;RP1=0, select bank1
  4771  0E56  1291               	bcf	17,5	;volatile
  4772                           
  4773                           ;./I2C.h: 85:     }else{
  4774  0E57  2E5B               	goto	l131
  4775  0E58                     l130:	
  4776                           
  4777                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  4778  0E58  1683               	bsf	3,5	;RP0=1, select bank1
  4779  0E59  1303               	bcf	3,6	;RP1=0, select bank1
  4780  0E5A  1691               	bsf	17,5	;volatile
  4781  0E5B                     l131:	
  4782                           ;./I2C.h: 87:     }
  4783                           
  4784                           
  4785                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  4786  0E5B  1611               	bsf	17,4	;volatile
  4787                           
  4788                           ;./I2C.h: 89:     return temp;
  4789  0E5C  0875               	movf	I2C_Master_Read@temp+1,w
  4790  0E5D  00F1               	movwf	?_I2C_Master_Read+1
  4791  0E5E  0874               	movf	I2C_Master_Read@temp,w
  4792  0E5F  00F0               	movwf	?_I2C_Master_Read
  4793  0E60  0008               	return
  4794  0E61                     __end_of_I2C_Master_Read:	
  4795                           
  4796                           	psect	text26
  4797  0D08                     __ptext26:	
  4798 ;; *************** function _I2C_Master_Wait *****************
  4799 ;; Defined at:
  4800 ;;		line 32 in file "./I2C.h"
  4801 ;; Parameters:    Size  Location     Type
  4802 ;;		None
  4803 ;; Auto vars:     Size  Location     Type
  4804 ;;		None
  4805 ;; Return value:  Size  Location     Type
  4806 ;;                  1    wreg      void 
  4807 ;; Registers used:
  4808 ;;		wreg, status,2
  4809 ;; Tracked objects:
  4810 ;;		On entry : 0/0
  4811 ;;		On exit  : 0/0
  4812 ;;		Unchanged: 0/0
  4813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4814 ;;      Params:         0       0       0       0       0
  4815 ;;      Locals:         0       0       0       0       0
  4816 ;;      Temps:          0       0       0       0       0
  4817 ;;      Totals:         0       0       0       0       0
  4818 ;;Total ram usage:        0 bytes
  4819 ;; Hardware stack levels used:    1
  4820 ;; This function calls:
  4821 ;;		Nothing
  4822 ;; This function is called by:
  4823 ;;		_I2C_Master_Start
  4824 ;;		_I2C_Master_RepeatedStart
  4825 ;;		_I2C_Master_Stop
  4826 ;;		_I2C_Master_Write
  4827 ;;		_I2C_Master_Read
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           
  4832                           ;psect for function _I2C_Master_Wait
  4833  0D08                     _I2C_Master_Wait:	
  4834  0D08                     l112:	
  4835                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  4836                           
  4837                           ;incstack = 0
  4838                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  4839                           
  4840  0D08  1683               	bsf	3,5	;RP0=1, select bank1
  4841  0D09  1303               	bcf	3,6	;RP1=0, select bank1
  4842  0D0A  1914               	btfsc	20,2	;volatile
  4843  0D0B  2D08               	goto	l112
  4844  0D0C  0811               	movf	17,w	;volatile
  4845  0D0D  391F               	andlw	31
  4846  0D0E  1903               	btfsc	3,2
  4847  0D0F  0008               	return
  4848  0D10  2D08               	goto	l112
  4849  0D11                     __end_of_I2C_Master_Wait:	
  4850                           
  4851                           	psect	text27
  4852  0D11                     __ptext27:	
  4853 ;; *************** function _UART_Write *****************
  4854 ;; Defined at:
  4855 ;;		line 54 in file "./UART.h"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;  data            1    wreg     unsigned char 
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;  data            1    0[COMMON] unsigned char 
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  1    wreg      void 
  4862 ;; Registers used:
  4863 ;;		wreg
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4869 ;;      Params:         0       0       0       0       0
  4870 ;;      Locals:         1       0       0       0       0
  4871 ;;      Temps:          0       0       0       0       0
  4872 ;;      Totals:         1       0       0       0       0
  4873 ;;Total ram usage:        1 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; This function calls:
  4876 ;;		Nothing
  4877 ;; This function is called by:
  4878 ;;		_main
  4879 ;;		_UART_Write_Text
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           
  4884                           ;psect for function _UART_Write
  4885  0D11                     _UART_Write:	
  4886                           
  4887                           ;incstack = 0
  4888                           ; Regs used in _UART_Write: [wreg]
  4889                           ;UART_Write@data stored from wreg
  4890  0D11  00F0               	movwf	UART_Write@data
  4891  0D12                     l216:	
  4892                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(!TRMT);
  4893                           
  4894  0D12  1683               	bsf	3,5	;RP0=1, select bank1
  4895  0D13  1303               	bcf	3,6	;RP1=0, select bank1
  4896  0D14  1C98               	btfss	24,1	;volatile
  4897  0D15  2D12               	goto	l216
  4898                           
  4899                           ;./UART.h: 57:   TXREG = data;
  4900  0D16  0870               	movf	UART_Write@data,w
  4901  0D17  1283               	bcf	3,5	;RP0=0, select bank0
  4902  0D18  1303               	bcf	3,6	;RP1=0, select bank0
  4903  0D19  0099               	movwf	25	;volatile
  4904  0D1A  0008               	return
  4905  0D1B                     __end_of_UART_Write:	
  4906                           
  4907                           	psect	text28
  4908  0CDD                     __ptext28:	
  4909 ;; *************** function _UART_TX_Empty *****************
  4910 ;; Defined at:
  4911 ;;		line 31 in file "./UART.h"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;		None
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;		None
  4916 ;; Return value:  Size  Location     Type
  4917 ;;                  1    wreg      unsigned char 
  4918 ;; Registers used:
  4919 ;;		wreg
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4925 ;;      Params:         0       0       0       0       0
  4926 ;;      Locals:         0       0       0       0       0
  4927 ;;      Temps:          0       0       0       0       0
  4928 ;;      Totals:         0       0       0       0       0
  4929 ;;Total ram usage:        0 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; This function calls:
  4932 ;;		Nothing
  4933 ;; This function is called by:
  4934 ;;		_main
  4935 ;; This function uses a non-reentrant model
  4936 ;;
  4937                           
  4938                           
  4939                           ;psect for function _UART_TX_Empty
  4940  0CDD                     _UART_TX_Empty:	
  4941                           
  4942                           ;./UART.h: 33:   return TRMT;
  4943                           
  4944                           ;incstack = 0
  4945                           ; Regs used in _UART_TX_Empty: [wreg]
  4946  0CDD  3000               	movlw	0
  4947  0CDE  1683               	bsf	3,5	;RP0=1, select bank1
  4948  0CDF  1303               	bcf	3,6	;RP1=0, select bank1
  4949  0CE0  1898               	btfsc	24,1	;volatile
  4950  0CE1  3001               	movlw	1
  4951  0CE2  0008               	return
  4952  0CE3                     __end_of_UART_TX_Empty:	
  4953                           
  4954                           	psect	text29
  4955  00B7                     __ptext29:	
  4956 ;; *************** function _Lcd_Write_String *****************
  4957 ;; Defined at:
  4958 ;;		line 100 in file "./LCD4bits.h"
  4959 ;; Parameters:    Size  Location     Type
  4960 ;;  a               2    5[COMMON] PTR unsigned char 
  4961 ;;		 -> NULL(0), STR_17(7), STR_16(7), STR_15(8), 
  4962 ;;		 -> STR_14(8), STR_13(9), STR_12(9), STR_11(12), 
  4963 ;;		 -> STR_10(12), STR_8(10), STR_7(10), STR_6(10), 
  4964 ;;		 -> STR_5(10), STR_4(10), STR_3(10), STR_2(10), 
  4965 ;;		 -> STR_1(10), time(6), temp(6), 
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;  i               2   10[COMMON] int 
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  1    wreg      void 
  4970 ;; Registers used:
  4971 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4977 ;;      Params:         2       0       0       0       0
  4978 ;;      Locals:         2       0       0       0       0
  4979 ;;      Temps:          3       0       0       0       0
  4980 ;;      Totals:         7       0       0       0       0
  4981 ;;Total ram usage:        7 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    2
  4984 ;; This function calls:
  4985 ;;		_Lcd_Write_Char
  4986 ;; This function is called by:
  4987 ;;		_main
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           
  4992                           ;psect for function _Lcd_Write_String
  4993  00B7                     _Lcd_Write_String:	
  4994                           
  4995                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4999  00B7  01FA               	clrf	Lcd_Write_String@i
  5000  00B8  01FB               	clrf	Lcd_Write_String@i+1
  5001  00B9                     l2110:	
  5002  00B9  087A               	movf	Lcd_Write_String@i,w
  5003  00BA  0775               	addwf	Lcd_Write_String@a,w
  5004  00BB  00F8               	movwf	??_Lcd_Write_String+1
  5005  00BC  0876               	movf	Lcd_Write_String@a+1,w
  5006  00BD  00F7               	movwf	??_Lcd_Write_String
  5007  00BE  1803               	skipnc
  5008  00BF  0AF7               	incf	??_Lcd_Write_String,f
  5009  00C0  1BFA               	btfsc	Lcd_Write_String@i,7
  5010  00C1  03F7               	decf	??_Lcd_Write_String,f
  5011  00C2  0877               	movf	??_Lcd_Write_String,w
  5012  00C3  00F9               	movwf	??_Lcd_Write_String+2
  5013  00C4  0879               	movf	??_Lcd_Write_String+2,w
  5014  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  5015  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  5016  00C7  00FF               	movwf	127
  5017  00C8  0878               	movf	??_Lcd_Write_String+1,w
  5018  00C9  0084               	movwf	4
  5019  00CA  120A  118A  2003  120A  118A  	fcall	stringtab
  5020  00CF  3A00               	xorlw	0
  5021  00D0  1903               	btfsc	3,2
  5022  00D1  0008               	return
  5023                           
  5024                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  5025  00D2  087A               	movf	Lcd_Write_String@i,w
  5026  00D3  0775               	addwf	Lcd_Write_String@a,w
  5027  00D4  00F8               	movwf	??_Lcd_Write_String+1
  5028  00D5  0876               	movf	Lcd_Write_String@a+1,w
  5029  00D6  00F7               	movwf	??_Lcd_Write_String
  5030  00D7  1803               	skipnc
  5031  00D8  0AF7               	incf	??_Lcd_Write_String,f
  5032  00D9  1BFA               	btfsc	Lcd_Write_String@i,7
  5033  00DA  03F7               	decf	??_Lcd_Write_String,f
  5034  00DB  0877               	movf	??_Lcd_Write_String,w
  5035  00DC  00F9               	movwf	??_Lcd_Write_String+2
  5036  00DD  0879               	movf	??_Lcd_Write_String+2,w
  5037  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  5038  00DF  1303               	bcf	3,6	;RP1=0, select bank0
  5039  00E0  00FF               	movwf	127
  5040  00E1  0878               	movf	??_Lcd_Write_String+1,w
  5041  00E2  0084               	movwf	4
  5042  00E3  120A  118A  2003  120A  118A  	fcall	stringtab
  5043  00E8  120A  158A  26FF  120A  118A  	fcall	_Lcd_Write_Char
  5044  00ED  3001               	movlw	1
  5045  00EE  07FA               	addwf	Lcd_Write_String@i,f
  5046  00EF  1803               	skipnc
  5047  00F0  0AFB               	incf	Lcd_Write_String@i+1,f
  5048  00F1  3000               	movlw	0
  5049  00F2  07FB               	addwf	Lcd_Write_String@i+1,f
  5050  00F3  28B9               	goto	l2110
  5051  00F4                     __end_of_Lcd_Write_String:	
  5052                           
  5053                           	psect	text30
  5054  0EFF                     __ptext30:	
  5055 ;; *************** function _Lcd_Write_Char *****************
  5056 ;; Defined at:
  5057 ;;		line 84 in file "./LCD4bits.h"
  5058 ;; Parameters:    Size  Location     Type
  5059 ;;  a               1    wreg     unsigned char 
  5060 ;; Auto vars:     Size  Location     Type
  5061 ;;  a               1    4[COMMON] unsigned char 
  5062 ;;  y               1    3[COMMON] unsigned char 
  5063 ;;  temp            1    2[COMMON] unsigned char 
  5064 ;; Return value:  Size  Location     Type
  5065 ;;                  1    wreg      void 
  5066 ;; Registers used:
  5067 ;;		wreg, status,2, status,0, pclath, cstack
  5068 ;; Tracked objects:
  5069 ;;		On entry : 0/0
  5070 ;;		On exit  : 0/0
  5071 ;;		Unchanged: 0/0
  5072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5073 ;;      Params:         0       0       0       0       0
  5074 ;;      Locals:         3       0       0       0       0
  5075 ;;      Temps:          1       0       0       0       0
  5076 ;;      Totals:         4       0       0       0       0
  5077 ;;Total ram usage:        4 bytes
  5078 ;; Hardware stack levels used:    1
  5079 ;; Hardware stack levels required when called:    1
  5080 ;; This function calls:
  5081 ;;		_Lcd_Port
  5082 ;; This function is called by:
  5083 ;;		_Lcd_Write_String
  5084 ;;		_main
  5085 ;; This function uses a non-reentrant model
  5086 ;;
  5087                           
  5088                           
  5089                           ;psect for function _Lcd_Write_Char
  5090  0EFF                     _Lcd_Write_Char:	
  5091                           
  5092                           ;incstack = 0
  5093                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  5094                           ;Lcd_Write_Char@a stored from wreg
  5095  0EFF  00F4               	movwf	Lcd_Write_Char@a
  5096                           
  5097                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  5098  0F00  0874               	movf	Lcd_Write_Char@a,w
  5099  0F01  390F               	andlw	15
  5100  0F02  00F1               	movwf	??_Lcd_Write_Char
  5101  0F03  0871               	movf	??_Lcd_Write_Char,w
  5102  0F04  00F2               	movwf	Lcd_Write_Char@temp
  5103                           
  5104                           ;./LCD4bits.h: 88:    y = a&0xF0;
  5105  0F05  0874               	movf	Lcd_Write_Char@a,w
  5106  0F06  39F0               	andlw	240
  5107  0F07  00F1               	movwf	??_Lcd_Write_Char
  5108  0F08  0871               	movf	??_Lcd_Write_Char,w
  5109  0F09  00F3               	movwf	Lcd_Write_Char@y
  5110                           
  5111                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  5112  0F0A  1283               	bcf	3,5	;RP0=0, select bank0
  5113  0F0B  1303               	bcf	3,6	;RP1=0, select bank0
  5114  0F0C  1606               	bsf	6,4	;volatile
  5115                           
  5116                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  5117  0F0D  0873               	movf	Lcd_Write_Char@y,w
  5118  0F0E  00F1               	movwf	??_Lcd_Write_Char
  5119  0F0F  3004               	movlw	4
  5120  0F10                     u1275:	
  5121  0F10  1003               	clrc
  5122  0F11  0CF1               	rrf	??_Lcd_Write_Char,f
  5123  0F12  3EFF               	addlw	-1
  5124  0F13  1D03               	skipz
  5125  0F14  2F10               	goto	u1275
  5126  0F15  0871               	movf	??_Lcd_Write_Char,w
  5127  0F16  120A  158A  2537  120A  158A  	fcall	_Lcd_Port
  5128                           
  5129                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  5130  0F1B  1283               	bcf	3,5	;RP0=0, select bank0
  5131  0F1C  1303               	bcf	3,6	;RP1=0, select bank0
  5132  0F1D  1686               	bsf	6,5	;volatile
  5133                           
  5134                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  5135  0F1E  301A               	movlw	26
  5136  0F1F  00F1               	movwf	??_Lcd_Write_Char
  5137  0F20                     u1927:	
  5138  0F20  0BF1               	decfsz	??_Lcd_Write_Char,f
  5139  0F21  2F20               	goto	u1927
  5140  0F22  0000               	nop
  5141                           
  5142                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  5143  0F23  1283               	bcf	3,5	;RP0=0, select bank0
  5144  0F24  1303               	bcf	3,6	;RP1=0, select bank0
  5145  0F25  1286               	bcf	6,5	;volatile
  5146                           
  5147                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  5148  0F26  0872               	movf	Lcd_Write_Char@temp,w
  5149  0F27  120A  158A  2537  120A  158A  	fcall	_Lcd_Port
  5150                           
  5151                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  5152  0F2C  1283               	bcf	3,5	;RP0=0, select bank0
  5153  0F2D  1303               	bcf	3,6	;RP1=0, select bank0
  5154  0F2E  1686               	bsf	6,5	;volatile
  5155                           
  5156                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  5157  0F2F  301A               	movlw	26
  5158  0F30  00F1               	movwf	??_Lcd_Write_Char
  5159  0F31                     u1937:	
  5160  0F31  0BF1               	decfsz	??_Lcd_Write_Char,f
  5161  0F32  2F31               	goto	u1937
  5162  0F33  0000               	nop
  5163                           
  5164                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  5165  0F34  1283               	bcf	3,5	;RP0=0, select bank0
  5166  0F35  1303               	bcf	3,6	;RP1=0, select bank0
  5167  0F36  1286               	bcf	6,5	;volatile
  5168  0F37  0008               	return
  5169  0F38                     __end_of_Lcd_Write_Char:	
  5170                           
  5171                           	psect	text31
  5172  0FB6                     __ptext31:	
  5173 ;; *************** function _Lcd_Set_Cursor *****************
  5174 ;; Defined at:
  5175 ;;		line 44 in file "./LCD4bits.h"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;  a               1    wreg     unsigned char 
  5178 ;;  b               1    4[COMMON] unsigned char 
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;  a               1    7[COMMON] unsigned char 
  5181 ;;  temp            1   10[COMMON] unsigned char 
  5182 ;;  y               1    9[COMMON] unsigned char 
  5183 ;;  z               1    8[COMMON] unsigned char 
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  1    wreg      void 
  5186 ;; Registers used:
  5187 ;;		wreg, status,2, status,0, pclath, cstack
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5193 ;;      Params:         1       0       0       0       0
  5194 ;;      Locals:         4       0       0       0       0
  5195 ;;      Temps:          2       0       0       0       0
  5196 ;;      Totals:         7       0       0       0       0
  5197 ;;Total ram usage:        7 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:    2
  5200 ;; This function calls:
  5201 ;;		_Lcd_Cmd
  5202 ;; This function is called by:
  5203 ;;		_main
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           
  5208                           ;psect for function _Lcd_Set_Cursor
  5209  0FB6                     _Lcd_Set_Cursor:	
  5210                           
  5211                           ;incstack = 0
  5212                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  5213                           ;Lcd_Set_Cursor@a stored from wreg
  5214  0FB6  00F7               	movwf	Lcd_Set_Cursor@a
  5215                           
  5216                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  5217  0FB7  0377               	decf	Lcd_Set_Cursor@a,w
  5218  0FB8  1D03               	btfss	3,2
  5219  0FB9  2FDB               	goto	l2094
  5220                           
  5221                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  5222  0FBA  0874               	movf	Lcd_Set_Cursor@b,w
  5223  0FBB  3E7F               	addlw	127
  5224  0FBC  00F5               	movwf	??_Lcd_Set_Cursor
  5225  0FBD  0875               	movf	??_Lcd_Set_Cursor,w
  5226  0FBE  00FA               	movwf	Lcd_Set_Cursor@temp
  5227                           
  5228                           ;./LCD4bits.h: 50:   z = temp>>4;
  5229  0FBF  087A               	movf	Lcd_Set_Cursor@temp,w
  5230  0FC0  00F5               	movwf	??_Lcd_Set_Cursor
  5231  0FC1  3004               	movlw	4
  5232  0FC2                     u1485:	
  5233  0FC2  1003               	clrc
  5234  0FC3  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5235  0FC4  3EFF               	addlw	-1
  5236  0FC5  1D03               	skipz
  5237  0FC6  2FC2               	goto	u1485
  5238  0FC7  0875               	movf	??_Lcd_Set_Cursor,w
  5239  0FC8  00F6               	movwf	??_Lcd_Set_Cursor+1
  5240  0FC9  0876               	movf	??_Lcd_Set_Cursor+1,w
  5241  0FCA  00F8               	movwf	Lcd_Set_Cursor@z
  5242                           
  5243                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  5244  0FCB  087A               	movf	Lcd_Set_Cursor@temp,w
  5245  0FCC  390F               	andlw	15
  5246  0FCD  00F5               	movwf	??_Lcd_Set_Cursor
  5247  0FCE  0875               	movf	??_Lcd_Set_Cursor,w
  5248  0FCF  00F9               	movwf	Lcd_Set_Cursor@y
  5249                           
  5250                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  5251  0FD0  0878               	movf	Lcd_Set_Cursor@z,w
  5252  0FD1  120A  158A  2551  120A  158A  	fcall	_Lcd_Cmd
  5253                           
  5254                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  5255  0FD6  0879               	movf	Lcd_Set_Cursor@y,w
  5256  0FD7  120A  158A  2551   	fcall	_Lcd_Cmd
  5257                           
  5258                           ;./LCD4bits.h: 54:  }
  5259  0FDA  0008               	return
  5260  0FDB                     l2094:	
  5261  0FDB  3002               	movlw	2
  5262  0FDC  0677               	xorwf	Lcd_Set_Cursor@a,w
  5263  0FDD  1D03               	btfss	3,2
  5264  0FDE  0008               	return
  5265                           
  5266                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  5267  0FDF  0874               	movf	Lcd_Set_Cursor@b,w
  5268  0FE0  3EBF               	addlw	191
  5269  0FE1  00F5               	movwf	??_Lcd_Set_Cursor
  5270  0FE2  0875               	movf	??_Lcd_Set_Cursor,w
  5271  0FE3  00FA               	movwf	Lcd_Set_Cursor@temp
  5272                           
  5273                           ;./LCD4bits.h: 58:   z = temp>>4;
  5274  0FE4  087A               	movf	Lcd_Set_Cursor@temp,w
  5275  0FE5  00F5               	movwf	??_Lcd_Set_Cursor
  5276  0FE6  3004               	movlw	4
  5277  0FE7                     u1505:	
  5278  0FE7  1003               	clrc
  5279  0FE8  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5280  0FE9  3EFF               	addlw	-1
  5281  0FEA  1D03               	skipz
  5282  0FEB  2FE7               	goto	u1505
  5283  0FEC  0875               	movf	??_Lcd_Set_Cursor,w
  5284  0FED  00F6               	movwf	??_Lcd_Set_Cursor+1
  5285  0FEE  0876               	movf	??_Lcd_Set_Cursor+1,w
  5286  0FEF  00F8               	movwf	Lcd_Set_Cursor@z
  5287                           
  5288                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  5289  0FF0  087A               	movf	Lcd_Set_Cursor@temp,w
  5290  0FF1  390F               	andlw	15
  5291  0FF2  00F5               	movwf	??_Lcd_Set_Cursor
  5292  0FF3  0875               	movf	??_Lcd_Set_Cursor,w
  5293  0FF4  00F9               	movwf	Lcd_Set_Cursor@y
  5294                           
  5295                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  5296  0FF5  0878               	movf	Lcd_Set_Cursor@z,w
  5297  0FF6  120A  158A  2551  120A  158A  	fcall	_Lcd_Cmd
  5298                           
  5299                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  5300  0FFB  0879               	movf	Lcd_Set_Cursor@y,w
  5301  0FFC  120A  158A  2551   	fcall	_Lcd_Cmd
  5302  0FFF  0008               	return
  5303  1000                     __end_of_Lcd_Set_Cursor:	
  5304                           
  5305                           	psect	text32
  5306  0D1B                     __ptext32:	
  5307 ;; *************** function _Lcd_Clear *****************
  5308 ;; Defined at:
  5309 ;;		line 38 in file "./LCD4bits.h"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;		None
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;		None
  5314 ;; Return value:  Size  Location     Type
  5315 ;;                  1    wreg      void 
  5316 ;; Registers used:
  5317 ;;		wreg, status,2, status,0, pclath, cstack
  5318 ;; Tracked objects:
  5319 ;;		On entry : 0/0
  5320 ;;		On exit  : 0/0
  5321 ;;		Unchanged: 0/0
  5322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5323 ;;      Params:         0       0       0       0       0
  5324 ;;      Locals:         0       0       0       0       0
  5325 ;;      Temps:          0       0       0       0       0
  5326 ;;      Totals:         0       0       0       0       0
  5327 ;;Total ram usage:        0 bytes
  5328 ;; Hardware stack levels used:    1
  5329 ;; Hardware stack levels required when called:    2
  5330 ;; This function calls:
  5331 ;;		_Lcd_Cmd
  5332 ;; This function is called by:
  5333 ;;		_main
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           
  5338                           ;psect for function _Lcd_Clear
  5339  0D1B                     _Lcd_Clear:	
  5340                           
  5341                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  5342                           
  5343                           ;incstack = 0
  5344                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  5345  0D1B  3000               	movlw	0
  5346  0D1C  120A  158A  2551  120A  158A  	fcall	_Lcd_Cmd
  5347                           
  5348                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  5349  0D21  3001               	movlw	1
  5350  0D22  120A  158A  2551   	fcall	_Lcd_Cmd
  5351  0D25  0008               	return
  5352  0D26                     __end_of_Lcd_Clear:	
  5353                           
  5354                           	psect	text33
  5355  0D51                     __ptext33:	
  5356 ;; *************** function _Lcd_Cmd *****************
  5357 ;; Defined at:
  5358 ;;		line 29 in file "./LCD4bits.h"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;  a               1    wreg     unsigned char 
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;  a               1    3[COMMON] unsigned char 
  5363 ;; Return value:  Size  Location     Type
  5364 ;;                  1    wreg      void 
  5365 ;; Registers used:
  5366 ;;		wreg, status,2, status,0, pclath, cstack
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5372 ;;      Params:         0       0       0       0       0
  5373 ;;      Locals:         1       0       0       0       0
  5374 ;;      Temps:          2       0       0       0       0
  5375 ;;      Totals:         3       0       0       0       0
  5376 ;;Total ram usage:        3 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    1
  5379 ;; This function calls:
  5380 ;;		_Lcd_Port
  5381 ;; This function is called by:
  5382 ;;		_Lcd_Clear
  5383 ;;		_Lcd_Set_Cursor
  5384 ;;		_Lcd_Init
  5385 ;;		_Lcd_Shift_Right
  5386 ;;		_Lcd_Shift_Left
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           
  5391                           ;psect for function _Lcd_Cmd
  5392  0D51                     _Lcd_Cmd:	
  5393                           
  5394                           ;incstack = 0
  5395                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  5396                           ;Lcd_Cmd@a stored from wreg
  5397  0D51  00F3               	movwf	Lcd_Cmd@a
  5398                           
  5399                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  5400  0D52  1283               	bcf	3,5	;RP0=0, select bank0
  5401  0D53  1303               	bcf	3,6	;RP1=0, select bank0
  5402  0D54  1206               	bcf	6,4	;volatile
  5403                           
  5404                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  5405  0D55  0873               	movf	Lcd_Cmd@a,w
  5406  0D56  120A  158A  2537  120A  158A  	fcall	_Lcd_Port
  5407                           
  5408                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  5409  0D5B  1283               	bcf	3,5	;RP0=0, select bank0
  5410  0D5C  1303               	bcf	3,6	;RP1=0, select bank0
  5411  0D5D  1686               	bsf	6,5	;volatile
  5412                           
  5413                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  5414  0D5E  300B               	movlw	11
  5415  0D5F  00F2               	movwf	??_Lcd_Cmd+1
  5416  0D60  3062               	movlw	98
  5417  0D61  00F1               	movwf	??_Lcd_Cmd
  5418  0D62                     u1947:	
  5419  0D62  0BF1               	decfsz	??_Lcd_Cmd,f
  5420  0D63  2D62               	goto	u1947
  5421  0D64  0BF2               	decfsz	??_Lcd_Cmd+1,f
  5422  0D65  2D62               	goto	u1947
  5423  0D66  0000               	nop
  5424                           
  5425                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  5426  0D67  1283               	bcf	3,5	;RP0=0, select bank0
  5427  0D68  1303               	bcf	3,6	;RP1=0, select bank0
  5428  0D69  1286               	bcf	6,5	;volatile
  5429  0D6A  0008               	return
  5430  0D6B                     __end_of_Lcd_Cmd:	
  5431                           
  5432                           	psect	text34
  5433  0D37                     __ptext34:	
  5434 ;; *************** function _Lcd_Port *****************
  5435 ;; Defined at:
  5436 ;;		line 7 in file "./LCD4bits.h"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  a               1    wreg     unsigned char 
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;  a               1    0[COMMON] unsigned char 
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  1    wreg      void 
  5443 ;; Registers used:
  5444 ;;		wreg
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5450 ;;      Params:         0       0       0       0       0
  5451 ;;      Locals:         1       0       0       0       0
  5452 ;;      Temps:          0       0       0       0       0
  5453 ;;      Totals:         1       0       0       0       0
  5454 ;;Total ram usage:        1 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; This function calls:
  5457 ;;		Nothing
  5458 ;; This function is called by:
  5459 ;;		_Lcd_Cmd
  5460 ;;		_Lcd_Init
  5461 ;;		_Lcd_Write_Char
  5462 ;; This function uses a non-reentrant model
  5463 ;;
  5464                           
  5465                           
  5466                           ;psect for function _Lcd_Port
  5467  0D37                     _Lcd_Port:	
  5468                           
  5469                           ;incstack = 0
  5470                           ; Regs used in _Lcd_Port: [wreg]
  5471                           ;Lcd_Port@a stored from wreg
  5472  0D37  00F0               	movwf	Lcd_Port@a
  5473                           
  5474                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  5475  0D38  1C70               	btfss	Lcd_Port@a,0
  5476  0D39  2D3E               	goto	l138
  5477                           
  5478                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  5479  0D3A  1283               	bcf	3,5	;RP0=0, select bank0
  5480  0D3B  1303               	bcf	3,6	;RP1=0, select bank0
  5481  0D3C  1406               	bsf	6,0	;volatile
  5482  0D3D  2D41               	goto	l139
  5483  0D3E                     l138:	
  5484                           ;./LCD4bits.h: 11:  else
  5485                           
  5486                           
  5487                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  5488  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  5489  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  5490  0D40  1006               	bcf	6,0	;volatile
  5491  0D41                     l139:	
  5492                           
  5493                           ;./LCD4bits.h: 14:  if(a & 2)
  5494  0D41  1CF0               	btfss	Lcd_Port@a,1
  5495  0D42  2D45               	goto	l140
  5496                           
  5497                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  5498  0D43  1486               	bsf	6,1	;volatile
  5499  0D44  2D46               	goto	l141
  5500  0D45                     l140:	
  5501                           ;./LCD4bits.h: 16:  else
  5502                           
  5503                           
  5504                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  5505  0D45  1086               	bcf	6,1	;volatile
  5506  0D46                     l141:	
  5507                           
  5508                           ;./LCD4bits.h: 19:  if(a & 4)
  5509  0D46  1D70               	btfss	Lcd_Port@a,2
  5510  0D47  2D4A               	goto	l142
  5511                           
  5512                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  5513  0D48  1506               	bsf	6,2	;volatile
  5514  0D49  2D4B               	goto	l143
  5515  0D4A                     l142:	
  5516                           ;./LCD4bits.h: 21:  else
  5517                           
  5518                           
  5519                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  5520  0D4A  1106               	bcf	6,2	;volatile
  5521  0D4B                     l143:	
  5522                           
  5523                           ;./LCD4bits.h: 24:  if(a & 8)
  5524  0D4B  1DF0               	btfss	Lcd_Port@a,3
  5525  0D4C  2D4F               	goto	l144
  5526                           
  5527                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  5528  0D4D  1586               	bsf	6,3	;volatile
  5529  0D4E  0008               	return
  5530  0D4F                     l144:	
  5531                           ;./LCD4bits.h: 26:  else
  5532                           
  5533                           
  5534                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  5535  0D4F  1186               	bcf	6,3	;volatile
  5536  0D50  0008               	return
  5537  0D51                     __end_of_Lcd_Port:	
  5538  007E                     btemp	set	126	;btemp
  5539  007E                     wtemp0	set	126


Data Sizes:
    Strings     153
    Constant    10
    Data        0
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     24      54
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    newday2	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_9(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_20(CODE[4]), STR_19(CODE[5]), STR_18(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), temp(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_temp@temp_string	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_time@time_string	PTR unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), 

    day2	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[10]), 
		 -> STR_1(CODE[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 12
		 -> NULL(NULL[0]), STR_17(CODE[7]), STR_16(CODE[7]), STR_15(CODE[8]), 
		 -> STR_14(CODE[8]), STR_13(CODE[9]), STR_12(CODE[9]), STR_11(CODE[12]), 
		 -> STR_10(CODE[12]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[10]), 
		 -> STR_1(CODE[10]), time(BANK0[6]), temp(BANK0[6]), 


Critical Paths under _main in COMMON

    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_UART_Init
    _UART_Init->___aldiv
    _get_temp->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   21843
                                             22 BANK0      2     2      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                      _UART_TX_Empty
                         _UART_Write
                             _get_IR
                            _get_PIR
                            _get_day
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                              _setup
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     200
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1468
                    _I2C_Master_Init
                           _Lcd_Init
                          _UART_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     412
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                             5     5      0    2450
                                              6 COMMON     5     5      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             9     9      0    4309
                                             13 BANK0      9     9      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1429
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     168
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1466
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     729
                                              0 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Empty                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1104
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     912
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_TX_Empty
   _UART_Write
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_day
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
     _initOscilador
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      44       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     18      36       5       67.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      44      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Mar 07 10:09:00 2019

                                _i 0029                                  _j 0028  
                                pc 0002                     ___bmul@product 0072  
                      __CFG_CP$OFF 0000                        get_hall@key 0077  
                               _IR 002C                                 fsr 0004  
                              l112 0D08                                l130 0E58  
                              l131 0E5B                                l140 0D45  
                              l141 0D46                                l142 0D4A  
                              l143 0D4B                                l144 0D4F  
                              l216 0D12                                l138 0D3E  
                              l139 0D41                                l181 0147  
                              l504 0295                                l272 070C  
                              l273 070F                                _GIE 005F  
                     __CFG_CPD$OFF 0000                                _PIR 002D  
                              u965 01B8                                u985 01C6  
                              u995 01DB                      ?_get_tripwire 0070  
                              fsr0 0004                                indf 0000  
                     __CFG_LVP$OFF 0000                               l2010 04D0  
                             l2020 04E7                               l2004 04B2  
                             l2110 00B9                               l2032 050A  
                             l2026 04E9                               l2050 055E  
                             l2070 0D28                               l2046 051D  
                             l2038 0519                               l2062 0DEC  
                             l2048 0492                               l2064 0DF7  
                             l2224 0E1A                               l2320 06C5  
                             l2074 0D2E                               l2066 0DFF  
                             l2226 0E0D                               l2322 06C7  
                             l2314 06BF                               l2250 0570  
                             l2228 0E2F                               l2404 07EB  
                             l2324 06C9                               l2316 06C1  
                             l2332 06D2                               l2094 0FDB  
                             l2350 0723                               l2326 06CB  
                             l2318 06C3                               l2334 06F3  
                             l2168 0392                               l1800 02C6  
                             l2352 072C                               l2328 06CD  
                             l2370 077C                               l1812 02FB  
                             l2356 0730                               l1830 0F40  
                             l2358 0731                               l1832 0F4E  
                             l1816 0309                               l1808 02EE  
                             l2472 06DC                               l1842 0F6F  
                             l1762 01B4                               l2474 012D  
                             l2386 07AE                               l2378 078E  
                             l1860 0E83                               l2476 04C5  
                             l1772 01EC                               l1764 01C4  
                             l2396 07CB                               l2388 07B8  
                             l1838 0F64                               l1854 0E67  
                             l1790 02A6                               l1950 0107  
                             l1856 0E75                               l1864 0E8E  
                             l1776 01F9                               l1960 0120  
                             l1952 010D                               l1944 00F6  
                             l1954 0113                               l1946 00FB  
                             l1956 0119                               l1948 0101  
                             l1964 0125                               l1798 02B6  
                             l1958 0120                               l1978 0471  
                             STR_1 003F                               STR_2 0053  
                      get_time@min 0079                               STR_3 007B  
                             STR_4 005D                               STR_5 0071  
                             STR_6 0049                               STR_7 0067  
                             STR_8 0035                               STR_9 00A7  
                             _BRGH 04C2                               _CREN 00C4  
                             u1005 01ED                               u1205 0E6A  
                             u1301 03F0                               u1302 03F1  
                             u1135 0F43                               u1055 02BA  
                             u1303 03F6                               u1304 03F7  
                             u1225 0E7B                               u1305 03FC  
                             u1306 03FD                               u1155 0F4F  
                             u1235 0E84                               u1075 02C8  
                             u1165 0F5B                               u1085 02DD  
                             u1341 0450                               u1325 0420  
                             u1342 0451                               u1175 0F65  
                             u1255 0EDB                               u1095 02EF  
                             u1343 0456                               u1335 0439  
                             u1344 0457                               u1505 0FE7  
                             u1345 045C                               u1346 045D  
                             u1275 0F10                               u1285 03C0  
                             u1295 03D9                               u1385 0500  
                             u1555 036A                               u1635 0706  
                             u1485 0FC2                               u1575 0249  
                             u1807 0624                               u1585 0268  
                             u1817 0636                               u1907 0162  
                             u1827 0648                               u1917 0171  
                             u1837 065A                               u1757 05CA  
                             u1927 0F20                               u1847 066C  
                             u1767 05DC                               u1937 0F31  
                             u1857 067E                               u1777 05EE  
                             u1947 0D62                               u1867 0690  
                             u1787 0600                               _PEIE 005E  
                             u1877 06A2                               u1797 0612  
                             u1887 06B4                               u1897 0153  
                             _RCEN 048B                               _RCIF 0065  
                             _SPEN 00C7                               _TRMT 04C1  
                             _TXEN 04C5                               _SYNC 04C4  
                     __CFG_WRT$OFF 0000                               _day1 002A  
                             _day2 0031                  ?_Lcd_Write_String 0075  
 __end_of_I2C_Master_RepeatedStart 0CF8                               _door 002F  
                             _main 0563                               _temp 0032  
                             _time 0038                               _trip 002E  
                             btemp 007E                               start 0000  
               ??_Lcd_Write_String 0077                      __CFG_IESO$OFF 0000  
                  __end_of_Lcd_Cmd 0D6B                  ___bmul@multiplier 0073  
                    __CFG_MCLRE$ON 0000                get_temp@temp_string 0052  
                 ?_I2C_Master_Init 003E                   ?_I2C_Master_Read 0070  
                 ?_I2C_Master_Wait 0070                   ?_I2C_Master_Stop 0070  
                  __end_of___aldiv 0312                              ?_main 0070  
                            STR_10 001D                              STR_11 0029  
                            STR_20 00B2                              STR_12 0085  
                            STR_13 008E                              STR_14 0097  
                            STR_15 009F                              STR_16 0098  
                            STR_17 00A0                      __CFG_WDTE$OFF 0000  
                            STR_18 00B3                              STR_19 00AD  
                     get_time@hour 0078                              _ANSEL 0188  
                  __end_of___lldiv 0202                     ??_get_tripwire 0076  
                  __end_of___lwdiv 0F74                    __end_of___lwmod 0E93  
                            _RCREG 001A                              _SPBRG 0099  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007            __size_of_Lcd_Set_Cursor 004A  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087                              _TRISD 0088  
                            _SSPIE 0463                              _SSPIF 0063  
                            _TXREG 0019                    __end_of_get_PIR 0DA9  
                   __CFG_FCMEN$OFF 0000                    __end_of_get_day 0EC9  
                      ?_UART_Write 0070                 __size_of_UART_Init 00D6  
                  __end_of_dpowers 001D                              _setup 0F74  
                            _state 002B                     __CFG_BOREN$OFF 0000  
                            pclath 000A                              status 0003  
                            wtemp0 007E                    __end_of_sprintf 0563  
                 __end_of_Lcd_Init 01A4                   __end_of_Lcd_Port 0D51  
                  __initialization 07F5                       __end_of_main 07F5  
           __size_of_initOscilador 0055                             ??_main 0054  
               __size_of_Lcd_Clear 000B                  ?_I2C_Master_Start 0070  
                ?_I2C_Master_Write 0070                 ??_I2C_Master_Start 0070  
               ??_I2C_Master_Write 0072                             ?_setup 0070  
                           _ANSELH 0189                          ??_Lcd_Cmd 0071  
          __size_of_Lcd_Write_Char 0039                             _SSPADD 0093  
                           _TRISC3 043B                             _TRISC4 043C  
                           _TRISC6 043E                             _TRISC7 043F  
                           _SSPCON 0014                             _SSPBUF 0013  
                   __CFG_PWRTE$OFF 0000           _I2C_Master_RepeatedStart 0CF1  
                 __end_of_get_hall 0DC8                  __end_of_UART_Init 048B  
                 __end_of_get_temp 03B5                   __end_of_get_time 0283  
                           ___bmul 0D26                __size_of_UART_Write 000A  
                        ??___aldiv 0078                             _change 0027  
                        ??___lldiv 0078                             _get_IR 0D6B  
                        ??___lwdiv 0074                          ??___lwmod 007C  
                           _newday 0026                          ??_get_PIR 0076  
            __end_of_UART_TX_Empty 0CE3                          ??_get_day 0076  
                           _strcat 0DE7                             _strcmp 0E0B  
                        ??_sprintf 0041                    Lcd_Set_Cursor@a 0077  
                  Lcd_Set_Cursor@b 0074                    Lcd_Set_Cursor@y 0079  
                  Lcd_Set_Cursor@z 0078            __end_of__initialization 07FC  
                    _initOscilador 00F4                  __end_of_Lcd_Clear 0D26  
             __end_of_get_tripwire 0DE7                ___bmul@multiplicand 0070  
                   __pcstackCOMMON 0070                      __end_of_setup 0FB6  
                   _Lcd_Set_Cursor 0FB6                          ?_Lcd_Init 0070  
                        ?_Lcd_Port 0070                            ??_setup 007E  
                       __pbssBANK0 0020                     ?_initOscilador 0070  
                       __pmaintext 0563                            ?___bmul 0070  
                          ?_get_IR 0070          __size_of_Lcd_Write_String 003D  
           __end_of_Lcd_Set_Cursor 1000                            ?_strcat 0070  
                          ?_strcmp 0070                       ??_UART_Write 0070  
                       ??_Lcd_Init 0074                         ??_Lcd_Port 0070  
                          _SSPCON2 0091                          ?_get_hall 0070  
                          _SSPSTAT 0094                          ?_get_temp 0070  
                        ?_get_time 0070                         __stringtab 0003  
              initOscilador@option 0072                     _Lcd_Write_Char 0EFF  
                          _Lcd_Cmd 0D51                            ___aldiv 0283  
                  __size_of___bmul 0011                            ___lldiv 01A4  
               __end_of_UART_Write 0D1B                            ___lwdiv 0F38  
                          ___lwmod 0E61                    __size_of_get_IR 001F  
                  ?_Lcd_Set_Cursor 0074                            _get_PIR 0D8A  
                          __ptext1 0E0B                            __ptext2 0F74  
                          __ptext3 00F4                            __ptext4 03B5  
                          __ptext5 0283                            __ptext6 0149  
                          __ptext7 0EC9                            __ptext8 01A4  
                          __ptext9 0DC8                            _get_day 0E93  
              get_time@time_string 007A                    __size_of_strcat 0024  
                  __size_of_strcmp 002A                            _dpowers 0013  
                          _newday2 0030                   ___aldiv@dividend 0074  
                          _newtime 0020           __size_of_I2C_Master_Init 0036  
         __size_of_I2C_Master_Read 002C           __size_of_I2C_Master_Wait 0009  
         __size_of_I2C_Master_Stop 0007                    ??_initOscilador 0070  
                       ??_get_hall 0076                            _sprintf 048B  
                          clrloop0 0D01             __end_of_Lcd_Write_Char 0F38  
                       ??_get_temp 004B                         ??_get_time 0076  
             end_of_initialization 07FC              __size_of_get_tripwire 001F  
       ??_I2C_Master_RepeatedStart 0070                         get_PIR@PIR 0077  
        __size_of_I2C_Master_Start 0007          __size_of_I2C_Master_Write 0008  
                  ___lldiv@divisor 0070                    ___lldiv@counter 007D  
                        _RCSTAbits 0018                   ___aldiv@quotient 0040  
                 I2C_Master_Init@c 003E                   I2C_Master_Read@a 0070  
                        Lcd_Port@a 0070                            strcmp@r 0075  
                        _UART_Init 03B5                          _PORTAbits 0005  
                        _PORTBbits 0006                          _PORTCbits 0007  
                   UART_Write@data 0070                       _get_tripwire 0DC8  
                        _TRISCbits 0087                    ?_Lcd_Write_Char 0070  
                Lcd_Write_String@a 0075                  Lcd_Write_String@i 007A  
                        _Lcd_Clear 0D1B                     __end_of___bmul 0D37  
                 _Lcd_Write_String 00B7                         ?_UART_Init 0044  
                   __end_of_get_IR 0D8A                     __end_of_strcat 0E0B  
                   __end_of_strcmp 0E35                start_initialization 07F5  
                __size_of_Lcd_Init 005B                  __size_of_Lcd_Port 001A  
                ??_I2C_Master_Init 0042                  ??_I2C_Master_Read 0072  
                ??_I2C_Master_Wait 0070                  ??_I2C_Master_Stop 0070  
           __size_of_UART_TX_Empty 0006           __CFG_FOSC$INTRC_NOCLKOUT 0000  
                       ?_Lcd_Clear 0070                           ??___bmul 0071  
                         ??_get_IR 0076                    Lcd_Write_Char@a 0074  
                  Lcd_Write_Char@y 0073                           ??_strcat 0071  
                         ??_strcmp 0072                          ___latbits 0002  
                    __pcstackBANK0 003E                  __size_of_get_hall 001F  
                         ?_Lcd_Cmd 0070                  __size_of_get_temp 00A3  
                __size_of_get_time 0081                        sprintf@flag 0045  
                      sprintf@prec 0046                   _I2C_Master_Start 0CE3  
                 _I2C_Master_Write 0CF8                   ___lwdiv@dividend 0072  
                 ??_Lcd_Set_Cursor 0075                    get_temp@decimal 004E  
                         ?___aldiv 0070                           ?___lldiv 0070  
                         ?___lwdiv 0070                           ?___lwmod 0078  
                      ??_UART_Init 0048                           ?_get_PIR 0070  
                        __pstrings 0003                           ?_get_day 0070  
                  get_temp@tempLSB 0053                    get_temp@tempMSB 0051  
                    _UART_TX_Empty 0CDD                   ___lwdiv@quotient 0075  
                         ?_sprintf 003E                         UART_Init@x 0079  
                   __size_of_setup 0042                    ___aldiv@divisor 0070  
                  ___aldiv@counter 003E                          clear_ram0 0D00  
                         Lcd_Cmd@a 0073                        ??_Lcd_Clear 0074  
                UART_Init@baudrate 0044                        __stringbase 0012  
                   ?_UART_TX_Empty 0070                   ??_Lcd_Write_Char 0071  
                         _Lcd_Init 0149                           _Lcd_Port 0D37  
              I2C_Master_Read@temp 0074              __end_of_initOscilador 0149  
         __end_of_Lcd_Write_String 00F4                   __size_of_Lcd_Cmd 001A  
                 __size_of___aldiv 008F  __size_of_I2C_Master_RepeatedStart 0007  
        ?_I2C_Master_RepeatedStart 0070                   __size_of___lldiv 005E  
                 __size_of___lwdiv 003C                   __size_of___lwmod 0032  
               __end_of__stringtab 0013                   __size_of_get_PIR 001F  
                 __size_of_get_day 0036                         sprintf@val 0047  
                  _I2C_Master_Init 0EC9                    _I2C_Master_Read 0E35  
                  _I2C_Master_Wait 0D08                         strcat@from 0070  
                  _I2C_Master_Stop 0CEA                    ___lwdiv@divisor 0070  
                  ___lwdiv@counter 0077                           __ptext10 0202  
                         __ptext11 0312                           __ptext20 0D8A  
                         __ptext12 0DE7                           __ptext21 0D6B  
                         __ptext13 048B                           __ptext30 0EFF  
                         __ptext22 0CF8                           __ptext14 0E61  
                         __ptext31 0FB6                           __ptext23 0CEA  
                         __ptext15 0F38                           __ptext32 0D1B  
                         __ptext24 0CE3                           __ptext16 0D26  
                         __ptext33 0D51                           __ptext25 0E35  
                         __ptext17 0DA9                           __ptext34 0D37  
                         __ptext26 0D08                           __ptext18 0E93  
                         __ptext27 0D11                           __ptext19 0CF1  
                         __ptext28 0CDD                           __ptext29 00B7  
                __CFG_BOR4V$BOR40V 0000                           _get_hall 0DA9  
                         _get_temp 0312                           _get_time 0202  
                 __size_of_sprintf 00D8                      __size_of_main 0292  
                         get_IR@IR 0077                           get_day@d 0077  
                  ??_UART_TX_Empty 0070           __end_of_I2C_Master_Start 0CEA  
         __end_of_I2C_Master_Write 0D00                 Lcd_Write_Char@temp 0072  
                        sprintf@ap 0044                          sprintf@sp 0049  
                 ___lwmod@dividend 007A                   ___lldiv@dividend 0074  
                        stringcode 000D                         _OSCCONbits 008F  
          __end_of_I2C_Master_Init 0EFF            __end_of_I2C_Master_Read 0E61  
          __end_of_I2C_Master_Wait 0D11            __end_of_I2C_Master_Stop 0CF1  
               Lcd_Set_Cursor@temp 007A                           sprintf@c 004A  
                         sprintf@f 003E                           strcat@cp 0073  
                         strcat@to 0072                           strcmp@s1 0076  
                         strcmp@s2 0070                   ___lldiv@quotient 0079  
                I2C_Master_Write@d 0070                    ___lwmod@divisor 0078  
                  ___lwmod@counter 007D                           stringdir 000D  
                 get_tripwire@trip 0077                           stringtab 0003  
                     ___aldiv@sign 003F                         _UART_Write 0D11  
                      _SSPCON2bits 0091                         _SSPCONbits 0014  

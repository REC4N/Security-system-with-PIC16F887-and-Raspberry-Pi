

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Feb 28 21:36:00 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2
    26                           	psect	text17,local,class=CODE,merge=1,delta=2
    27                           	psect	text18,local,class=CODE,merge=1,delta=2
    28                           	psect	text19,local,class=CODE,merge=1,delta=2
    29                           	psect	text20,local,class=CODE,merge=1,delta=2
    30                           	psect	text21,local,class=CODE,merge=1,delta=2
    31                           	psect	text22,local,class=CODE,merge=1,delta=2
    32                           	psect	text23,local,class=CODE,merge=1,delta=2
    33                           	psect	text24,local,class=CODE,merge=1,delta=2
    34                           	psect	text25,local,class=CODE,merge=1,delta=2
    35                           	psect	text26,local,class=CODE,merge=1,delta=2
    36                           	psect	text27,local,class=CODE,merge=1,delta=2
    37                           	psect	text28,local,class=CODE,merge=1,delta=2
    38                           	psect	text29,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     
    41                           ; Version 2.05
    42                           ; Generated 20/12/2018 GMT
    43                           ; 
    44                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16F887 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0008                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  000E                     	;# 
    91  000F                     	;# 
    92  0010                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0013                     	;# 
    96  0014                     	;# 
    97  0015                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  001D                     	;# 
   108  001E                     	;# 
   109  001F                     	;# 
   110  0081                     	;# 
   111  0085                     	;# 
   112  0086                     	;# 
   113  0087                     	;# 
   114  0088                     	;# 
   115  0089                     	;# 
   116  008C                     	;# 
   117  008D                     	;# 
   118  008E                     	;# 
   119  008F                     	;# 
   120  0090                     	;# 
   121  0091                     	;# 
   122  0092                     	;# 
   123  0093                     	;# 
   124  0093                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0095                     	;# 
   128  0096                     	;# 
   129  0097                     	;# 
   130  0098                     	;# 
   131  0099                     	;# 
   132  009A                     	;# 
   133  009B                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  009F                     	;# 
   138  0105                     	;# 
   139  0107                     	;# 
   140  0108                     	;# 
   141  0109                     	;# 
   142  010C                     	;# 
   143  010C                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  0185                     	;# 
   148  0187                     	;# 
   149  0188                     	;# 
   150  0189                     	;# 
   151  018C                     	;# 
   152  018D                     	;# 
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0008                     	;# 
   162  0009                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  000E                     	;# 
   169  000F                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0013                     	;# 
   174  0014                     	;# 
   175  0015                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0017                     	;# 
   179  0018                     	;# 
   180  0019                     	;# 
   181  001A                     	;# 
   182  001B                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  001D                     	;# 
   186  001E                     	;# 
   187  001F                     	;# 
   188  0081                     	;# 
   189  0085                     	;# 
   190  0086                     	;# 
   191  0087                     	;# 
   192  0088                     	;# 
   193  0089                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  008F                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0093                     	;# 
   203  0093                     	;# 
   204  0094                     	;# 
   205  0095                     	;# 
   206  0096                     	;# 
   207  0097                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009C                     	;# 
   213  009D                     	;# 
   214  009E                     	;# 
   215  009F                     	;# 
   216  0105                     	;# 
   217  0107                     	;# 
   218  0108                     	;# 
   219  0109                     	;# 
   220  010C                     	;# 
   221  010C                     	;# 
   222  010D                     	;# 
   223  010E                     	;# 
   224  010F                     	;# 
   225  0185                     	;# 
   226  0187                     	;# 
   227  0188                     	;# 
   228  0189                     	;# 
   229  018C                     	;# 
   230  018D                     	;# 
   231                           
   232                           	psect	strings
   233  0003                     __pstrings:	
   234  0003                     stringtab:	
   235  0003                     __stringtab:	
   236                           
   237                           ;	String table - string pointers are 1 byte each
   238  0003  1BFF               	btfsc	btemp+1,7
   239  0004  280D               	ljmp	stringcode
   240  0005  1383               	bcf	3,7
   241  0006  187F               	btfsc	btemp+1,0
   242  0007  1783               	bsf	3,7
   243  0008  0800               	movf	0,w
   244  0009  0A84               	incf	4,f
   245  000A  1903               	skipnz
   246  000B  0AFF               	incf	btemp+1,f
   247  000C  0008               	return
   248  000D                     stringcode:	
   249  000D                     stringdir:	
   250  000D  3000               	movlw	high stringdir
   251  000E  008A               	movwf	10
   252  000F  0804               	movf	4,w
   253  0010  0A84               	incf	4,f
   254  0011  0782               	addwf	2,f
   255  0012                     __stringbase:	
   256  0012  3400               	retlw	0
   257  0013                     __end_of__stringtab:	
   258  0013                     _dpowers:	
   259  0013  3401               	retlw	1
   260  0014  3400               	retlw	0
   261  0015  340A               	retlw	10
   262  0016  3400               	retlw	0
   263  0017  3464               	retlw	100
   264  0018  3400               	retlw	0
   265  0019  34E8               	retlw	232
   266  001A  3403               	retlw	3
   267  001B  3410               	retlw	16
   268  001C  3427               	retlw	39
   269  001D                     __end_of_dpowers:	
   270  0007                     _PORTC	set	7
   271  0005                     _PORTA	set	5
   272  0006                     _PORTB	set	6
   273  0007                     _PORTCbits	set	7
   274  0005                     _PORTAbits	set	5
   275  0006                     _PORTBbits	set	6
   276  0013                     _SSPBUF	set	19
   277  0014                     _SSPCON	set	20
   278  0063                     _SSPIF	set	99
   279  005E                     _PEIE	set	94
   280  005F                     _GIE	set	95
   281  0087                     _TRISC	set	135
   282  0085                     _TRISA	set	133
   283  0086                     _TRISB	set	134
   284  008F                     _OSCCONbits	set	143
   285  0091                     _SSPCON2bits	set	145
   286  0094                     _SSPSTAT	set	148
   287  0093                     _SSPADD	set	147
   288  0091                     _SSPCON2	set	145
   289  0463                     _SSPIE	set	1123
   290  048B                     _RCEN	set	1163
   291  043C                     _TRISC4	set	1084
   292  043B                     _TRISC3	set	1083
   293  0188                     _ANSEL	set	392
   294  0189                     _ANSELH	set	393
   295  001D                     STR_2:	
   296  001D  3444               	retlw	68	;'D'
   297  001E  346F               	retlw	111	;'o'
   298  001F  346F               	retlw	111	;'o'
   299  0020  3472               	retlw	114	;'r'
   300  0021  3420               	retlw	32	;' '
   301  0022  344F               	retlw	79	;'O'
   302  0023  3450               	retlw	80	;'P'
   303  0024  3445               	retlw	69	;'E'
   304  0025  344E               	retlw	78	;'N'
   305  0026  3420               	retlw	32	;' '
   306  0027  3420               	retlw	32	;' '
   307  0028  3400               	retlw	0
   308  0029                     STR_3:	
   309  0029  3444               	retlw	68	;'D'
   310  002A  346F               	retlw	111	;'o'
   311  002B  346F               	retlw	111	;'o'
   312  002C  3472               	retlw	114	;'r'
   313  002D  3420               	retlw	32	;' '
   314  002E  3443               	retlw	67	;'C'
   315  002F  344C               	retlw	76	;'L'
   316  0030  344F               	retlw	79	;'O'
   317  0031  3453               	retlw	83	;'S'
   318  0032  3445               	retlw	69	;'E'
   319  0033  3444               	retlw	68	;'D'
   320  0034  3400               	retlw	0
   321  0035                     STR_4:	
   322  0035  3454               	retlw	84	;'T'
   323  0036  3472               	retlw	114	;'r'
   324  0037  3469               	retlw	105	;'i'
   325  0038  3470               	retlw	112	;'p'
   326  0039  3420               	retlw	32	;' '
   327  003A  344F               	retlw	79	;'O'
   328  003B  344E               	retlw	78	;'N'
   329  003C  3420               	retlw	32	;' '
   330  003D  3400               	retlw	0
   331  003E                     STR_5:	
   332  003E  3454               	retlw	84	;'T'
   333  003F  3472               	retlw	114	;'r'
   334  0040  3469               	retlw	105	;'i'
   335  0041  3470               	retlw	112	;'p'
   336  0042  3420               	retlw	32	;' '
   337  0043  344F               	retlw	79	;'O'
   338  0044  3446               	retlw	70	;'F'
   339  0045  3446               	retlw	70	;'F'
   340  0046  3400               	retlw	0
   341  0047                     STR_6:	
   342  0047  3450               	retlw	80	;'P'
   343  0048  3449               	retlw	73	;'I'
   344  0049  3452               	retlw	82	;'R'
   345  004A  3420               	retlw	32	;' '
   346  004B  344F               	retlw	79	;'O'
   347  004C  344E               	retlw	78	;'N'
   348  004D  3420               	retlw	32	;' '
   349  004E  3400               	retlw	0
   350  004F                     STR_7:	
   351  004F  3450               	retlw	80	;'P'
   352  0050  3449               	retlw	73	;'I'
   353  0051  3452               	retlw	82	;'R'
   354  0052  3420               	retlw	32	;' '
   355  0053  344F               	retlw	79	;'O'
   356  0054  3446               	retlw	70	;'F'
   357  0055  3446               	retlw	70	;'F'
   358  0056  3400               	retlw	0
   359  0057                     STR_1:	
   360  0057  3432               	retlw	50	;'2'
   361  0058  3433               	retlw	51	;'3'
   362  0059  342E               	retlw	46	;'.'
   363  005A  3435               	retlw	53	;'5'
   364  005B  3430               	retlw	48	;'0'
   365  005C  3400               	retlw	0
   366  005D                     STR_11:	
   367  005D  342E               	retlw	46	;'.'
   368  005E  3425               	retlw	37	;'%'
   369  005F  3464               	retlw	100	;'d'
   370  0060  3430               	retlw	48	;'0'
   371  0061  3400               	retlw	0
   372  0062                     STR_12:	
   373  0062  342E               	retlw	46	;'.'
   374  0063  3425               	retlw	37	;'%'
   375  0064  3464               	retlw	100	;'d'
   376  0065  3400               	retlw	0
   377  0048                     
   378                           ; #config settings
   379  0000                     
   380                           	psect	cinit
   381  07F3                     start_initialization:	
   382  07F3                     __initialization:	
   383                           
   384                           ; Clear objects allocated to BANK0
   385  07F3  1283               	bcf	3,5	;RP0=0, select bank0
   386  07F4  1303               	bcf	3,6	;RP1=0, select bank0
   387  07F5  01BC               	clrf	__pbssBANK0& (0+127)
   388  07F6  01BD               	clrf	(__pbssBANK0+1)& (0+127)
   389  07F7  01BE               	clrf	(__pbssBANK0+2)& (0+127)
   390  07F8  01BF               	clrf	(__pbssBANK0+3)& (0+127)
   391  07F9  01C0               	clrf	(__pbssBANK0+4)& (0+127)
   392  07FA  01C1               	clrf	(__pbssBANK0+5)& (0+127)
   393  07FB  01C2               	clrf	(__pbssBANK0+6)& (0+127)
   394  07FC                     end_of_initialization:	
   395                           ;End of C runtime variable initialization code
   396                           
   397  07FC                     __end_of__initialization:	
   398  07FC  0183               	clrf	3
   399  07FD  120A  118A  2EE2   	ljmp	_main	;jump to C main() function
   400                           
   401                           	psect	bssBANK0
   402  003C                     __pbssBANK0:	
   403  003C                     _state:	
   404  003C                     	ds	1
   405  003D                     _IR:	
   406  003D                     	ds	1
   407  003E                     _PIR:	
   408  003E                     	ds	1
   409  003F                     _trip:	
   410  003F                     	ds	1
   411  0040                     _door:	
   412  0040                     	ds	1
   413  0041                     _temp:	
   414  0041                     	ds	1
   415  0042                     _time:	
   416  0042                     	ds	1
   417                           
   418                           	psect	cstackCOMMON
   419  0070                     __pcstackCOMMON:	
   420  0070                     ?_setup:	
   421  0070                     ?_get_temp:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_get_hall:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ?_get_tripwire:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_get_PIR:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     ?_get_IR:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     ?_get_time:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ?_strcat:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0070                     ?_I2C_Master_Wait:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0070                     ??_I2C_Master_Wait:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0070                     ?_I2C_Master_Start:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0070                     ??_I2C_Master_Start:	
   452                           ; 1 bytes @ 0x0
   453                           
   454  0070                     ?_I2C_Master_RepeatedStart:	
   455                           ; 1 bytes @ 0x0
   456                           
   457  0070                     ??_I2C_Master_RepeatedStart:	
   458                           ; 1 bytes @ 0x0
   459                           
   460  0070                     ?_I2C_Master_Stop:	
   461                           ; 1 bytes @ 0x0
   462                           
   463  0070                     ??_I2C_Master_Stop:	
   464                           ; 1 bytes @ 0x0
   465                           
   466  0070                     ?_I2C_Master_Write:	
   467                           ; 1 bytes @ 0x0
   468                           
   469  0070                     ?_Lcd_Port:	
   470                           ; 1 bytes @ 0x0
   471                           
   472  0070                     ??_Lcd_Port:	
   473                           ; 1 bytes @ 0x0
   474                           
   475  0070                     ?_Lcd_Cmd:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  0070                     ?_Lcd_Clear:	
   479                           ; 1 bytes @ 0x0
   480                           
   481  0070                     ?_Lcd_Init:	
   482                           ; 1 bytes @ 0x0
   483                           
   484  0070                     ?_Lcd_Write_Char:	
   485                           ; 1 bytes @ 0x0
   486                           
   487  0070                     ?_initOscilador:	
   488                           ; 1 bytes @ 0x0
   489                           
   490  0070                     ??_initOscilador:	
   491                           ; 1 bytes @ 0x0
   492                           
   493  0070                     ?_main:	
   494                           ; 1 bytes @ 0x0
   495                           
   496  0070                     ?___bmul:	
   497                           ; 1 bytes @ 0x0
   498                           
   499  0070                     ?_strcmp:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0070                     ?_I2C_Master_Read:	
   503                           ; 2 bytes @ 0x0
   504                           
   505  0070                     ?___lwdiv:	
   506                           ; 2 bytes @ 0x0
   507                           
   508  0070                     ?___lldiv:	
   509                           ; 2 bytes @ 0x0
   510                           
   511  0070                     Lcd_Port@a:	
   512                           ; 4 bytes @ 0x0
   513                           
   514  0070                     ___bmul@multiplicand:	
   515                           ; 1 bytes @ 0x0
   516                           
   517  0070                     strcat@from:	
   518                           ; 1 bytes @ 0x0
   519                           
   520  0070                     strcmp@s2:	
   521                           ; 1 bytes @ 0x0
   522                           
   523  0070                     I2C_Master_Write@d:	
   524                           ; 1 bytes @ 0x0
   525                           
   526  0070                     I2C_Master_Read@a:	
   527                           ; 2 bytes @ 0x0
   528                           
   529  0070                     ___lwdiv@divisor:	
   530                           ; 2 bytes @ 0x0
   531                           
   532  0070                     ___lldiv@divisor:	
   533                           ; 2 bytes @ 0x0
   534                           
   535                           
   536                           ; 4 bytes @ 0x0
   537  0070                     	ds	1
   538  0071                     ??_strcat:	
   539  0071                     ??_Lcd_Cmd:	
   540                           ; 1 bytes @ 0x1
   541                           
   542  0071                     ??_Lcd_Write_Char:	
   543                           ; 1 bytes @ 0x1
   544                           
   545  0071                     ??___bmul:	
   546                           ; 1 bytes @ 0x1
   547                           
   548                           
   549                           ; 1 bytes @ 0x1
   550  0071                     	ds	1
   551  0072                     ??_strcmp:	
   552  0072                     ??_I2C_Master_Write:	
   553                           ; 1 bytes @ 0x2
   554                           
   555  0072                     ??_I2C_Master_Read:	
   556                           ; 1 bytes @ 0x2
   557                           
   558  0072                     Lcd_Write_Char@temp:	
   559                           ; 1 bytes @ 0x2
   560                           
   561  0072                     initOscilador@option:	
   562                           ; 1 bytes @ 0x2
   563                           
   564  0072                     ___bmul@product:	
   565                           ; 1 bytes @ 0x2
   566                           
   567  0072                     strcat@to:	
   568                           ; 1 bytes @ 0x2
   569                           
   570  0072                     ___lwdiv@dividend:	
   571                           ; 1 bytes @ 0x2
   572                           
   573                           
   574                           ; 2 bytes @ 0x2
   575  0072                     	ds	1
   576  0073                     Lcd_Cmd@a:	
   577  0073                     Lcd_Write_Char@y:	
   578                           ; 1 bytes @ 0x3
   579                           
   580  0073                     ___bmul@multiplier:	
   581                           ; 1 bytes @ 0x3
   582                           
   583  0073                     strcat@cp:	
   584                           ; 1 bytes @ 0x3
   585                           
   586                           
   587                           ; 1 bytes @ 0x3
   588  0073                     	ds	1
   589  0074                     ??_Lcd_Clear:	
   590  0074                     ?_Lcd_Set_Cursor:	
   591                           ; 1 bytes @ 0x4
   592                           
   593  0074                     ??_Lcd_Init:	
   594                           ; 1 bytes @ 0x4
   595                           
   596  0074                     ??___lwdiv:	
   597                           ; 1 bytes @ 0x4
   598                           
   599  0074                     Lcd_Set_Cursor@b:	
   600                           ; 1 bytes @ 0x4
   601                           
   602  0074                     Lcd_Write_Char@a:	
   603                           ; 1 bytes @ 0x4
   604                           
   605  0074                     I2C_Master_Read@temp:	
   606                           ; 1 bytes @ 0x4
   607                           
   608  0074                     ___lldiv@dividend:	
   609                           ; 2 bytes @ 0x4
   610                           
   611                           
   612                           ; 4 bytes @ 0x4
   613  0074                     	ds	1
   614  0075                     ??_Lcd_Set_Cursor:	
   615  0075                     ?_Lcd_Write_String:	
   616                           ; 1 bytes @ 0x5
   617                           
   618  0075                     strcmp@r:	
   619                           ; 1 bytes @ 0x5
   620                           
   621  0075                     Lcd_Write_String@a:	
   622                           ; 1 bytes @ 0x5
   623                           
   624  0075                     ___lwdiv@quotient:	
   625                           ; 2 bytes @ 0x5
   626                           
   627                           
   628                           ; 2 bytes @ 0x5
   629  0075                     	ds	1
   630  0076                     ??_get_hall:	
   631  0076                     ??_get_tripwire:	
   632                           ; 1 bytes @ 0x6
   633                           
   634  0076                     ??_get_PIR:	
   635                           ; 1 bytes @ 0x6
   636                           
   637  0076                     ??_get_IR:	
   638                           ; 1 bytes @ 0x6
   639                           
   640  0076                     ??_get_time:	
   641                           ; 1 bytes @ 0x6
   642                           
   643  0076                     strcmp@s1:	
   644                           ; 1 bytes @ 0x6
   645                           
   646                           
   647                           ; 1 bytes @ 0x6
   648  0076                     	ds	1
   649  0077                     ??_Lcd_Write_String:	
   650  0077                     Lcd_Set_Cursor@a:	
   651                           ; 1 bytes @ 0x7
   652                           
   653  0077                     get_hall@key:	
   654                           ; 1 bytes @ 0x7
   655                           
   656  0077                     get_tripwire@trip:	
   657                           ; 1 bytes @ 0x7
   658                           
   659  0077                     get_PIR@PIR:	
   660                           ; 1 bytes @ 0x7
   661                           
   662  0077                     get_IR@IR:	
   663                           ; 1 bytes @ 0x7
   664                           
   665  0077                     ___lwdiv@counter:	
   666                           ; 1 bytes @ 0x7
   667                           
   668                           
   669                           ; 1 bytes @ 0x7
   670  0077                     	ds	1
   671  0078                     ??___lldiv:	
   672  0078                     ?___lwmod:	
   673                           ; 1 bytes @ 0x8
   674                           
   675  0078                     Lcd_Set_Cursor@z:	
   676                           ; 2 bytes @ 0x8
   677                           
   678  0078                     ___lwmod@divisor:	
   679                           ; 1 bytes @ 0x8
   680                           
   681                           
   682                           ; 2 bytes @ 0x8
   683  0078                     	ds	1
   684  0079                     Lcd_Set_Cursor@y:	
   685  0079                     ___lldiv@quotient:	
   686                           ; 1 bytes @ 0x9
   687                           
   688                           
   689                           ; 4 bytes @ 0x9
   690  0079                     	ds	1
   691  007A                     Lcd_Set_Cursor@temp:	
   692  007A                     Lcd_Write_String@i:	
   693                           ; 1 bytes @ 0xA
   694                           
   695  007A                     ___lwmod@dividend:	
   696                           ; 2 bytes @ 0xA
   697                           
   698                           
   699                           ; 2 bytes @ 0xA
   700  007A                     	ds	2
   701  007C                     ??___lwmod:	
   702                           
   703                           ; 1 bytes @ 0xC
   704  007C                     	ds	1
   705  007D                     ___lldiv@counter:	
   706  007D                     ___lwmod@counter:	
   707                           ; 1 bytes @ 0xD
   708                           
   709                           
   710                           ; 1 bytes @ 0xD
   711  007D                     	ds	1
   712  007E                     ??_setup:	
   713                           
   714                           	psect	cstackBANK0
   715  0020                     __pcstackBANK0:	
   716                           ; 1 bytes @ 0xE
   717                           
   718  0020                     ?_I2C_Master_Init:	
   719  0020                     ?_sprintf:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0020                     sprintf@f:	
   723                           ; 2 bytes @ 0x0
   724                           
   725  0020                     I2C_Master_Init@c:	
   726                           ; 1 bytes @ 0x0
   727                           
   728  0020                     get_time@string_time:	
   729                           ; 4 bytes @ 0x0
   730                           
   731                           
   732                           ; 6 bytes @ 0x0
   733  0020                     	ds	3
   734  0023                     ??_sprintf:	
   735                           
   736                           ; 1 bytes @ 0x3
   737  0023                     	ds	1
   738  0024                     ??_I2C_Master_Init:	
   739                           
   740                           ; 1 bytes @ 0x4
   741  0024                     	ds	2
   742  0026                     get_time@hour:	
   743  0026                     sprintf@ap:	
   744                           ; 1 bytes @ 0x6
   745                           
   746                           
   747                           ; 1 bytes @ 0x6
   748  0026                     	ds	1
   749  0027                     get_time@min:	
   750  0027                     sprintf@flag:	
   751                           ; 1 bytes @ 0x7
   752                           
   753                           
   754                           ; 1 bytes @ 0x7
   755  0027                     	ds	1
   756  0028                     sprintf@prec:	
   757                           
   758                           ; 1 bytes @ 0x8
   759  0028                     	ds	1
   760  0029                     sprintf@val:	
   761                           
   762                           ; 2 bytes @ 0x9
   763  0029                     	ds	2
   764  002B                     sprintf@sp:	
   765                           
   766                           ; 1 bytes @ 0xB
   767  002B                     	ds	1
   768  002C                     sprintf@c:	
   769                           
   770                           ; 1 bytes @ 0xC
   771  002C                     	ds	1
   772  002D                     ??_get_temp:	
   773                           
   774                           ; 1 bytes @ 0xD
   775  002D                     	ds	3
   776  0030                     get_temp@temperature:	
   777                           
   778                           ; 6 bytes @ 0x10
   779  0030                     	ds	6
   780  0036                     get_temp@decimal:	
   781                           
   782                           ; 3 bytes @ 0x16
   783  0036                     	ds	3
   784  0039                     get_temp@tempMSB:	
   785                           
   786                           ; 1 bytes @ 0x19
   787  0039                     	ds	1
   788  003A                     get_temp@tempLSB:	
   789                           
   790                           ; 1 bytes @ 0x1A
   791  003A                     	ds	1
   792  003B                     ??_main:	
   793                           
   794                           ; 1 bytes @ 0x1B
   795  003B                     	ds	1
   796                           
   797                           	psect	maintext
   798  06E2                     __pmaintext:	
   799 ;;
   800 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   801 ;;
   802 ;; *************** function _main *****************
   803 ;; Defined at:
   804 ;;		line 51 in file "mainMaster.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;		None
   807 ;; Auto vars:     Size  Location     Type
   808 ;;		None
   809 ;; Return value:  Size  Location     Type
   810 ;;                  1    wreg      void 
   811 ;; Registers used:
   812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   813 ;; Tracked objects:
   814 ;;		On entry : B00/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   818 ;;      Params:         0       0       0       0       0
   819 ;;      Locals:         0       0       0       0       0
   820 ;;      Temps:          0       1       0       0       0
   821 ;;      Totals:         0       1       0       0       0
   822 ;;Total ram usage:        1 bytes
   823 ;; Hardware stack levels required when called:    4
   824 ;; This function calls:
   825 ;;		_Lcd_Clear
   826 ;;		_Lcd_Set_Cursor
   827 ;;		_Lcd_Write_Char
   828 ;;		_Lcd_Write_String
   829 ;;		_get_IR
   830 ;;		_get_PIR
   831 ;;		_get_hall
   832 ;;		_get_temp
   833 ;;		_get_time
   834 ;;		_get_tripwire
   835 ;;		_setup
   836 ;;		_strcmp
   837 ;; This function is called by:
   838 ;;		Startup code after reset
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           
   843                           ;psect for function _main
   844  06E2                     _main:	
   845                           
   846                           ;mainMaster.c: 52:     setup();
   847                           
   848                           ;incstack = 0
   849                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   850  06E2  120A  118A  2259  120A  118A  	fcall	_setup
   851                           
   852                           ;mainMaster.c: 53:     state = 0;
   853  06E7  1283               	bcf	3,5	;RP0=0, select bank0
   854  06E8  1303               	bcf	3,6	;RP1=0, select bank0
   855  06E9  01BC               	clrf	_state
   856                           
   857                           ;mainMaster.c: 54:     Lcd_Clear();
   858  06EA  120A  118A  2113  120A  118A  	fcall	_Lcd_Clear
   859  06EF                     l1846:	
   860                           
   861                           ;mainMaster.c: 58:         temp = get_temp();
   862  06EF  120A  118A  256D  120A  118A  	fcall	_get_temp
   863  06F4  1283               	bcf	3,5	;RP0=0, select bank0
   864  06F5  1303               	bcf	3,6	;RP1=0, select bank0
   865  06F6  00BB               	movwf	??_main
   866  06F7  083B               	movf	??_main,w
   867  06F8  00C1               	movwf	_temp
   868                           
   869                           ;mainMaster.c: 59:         door = get_hall();
   870  06F9  120A  118A  21A1  120A  118A  	fcall	_get_hall
   871  06FE  1283               	bcf	3,5	;RP0=0, select bank0
   872  06FF  1303               	bcf	3,6	;RP1=0, select bank0
   873  0700  00BB               	movwf	??_main
   874  0701  083B               	movf	??_main,w
   875  0702  00C0               	movwf	_door
   876                           
   877                           ;mainMaster.c: 60:         trip = get_tripwire();
   878  0703  120A  118A  21C0  120A  118A  	fcall	_get_tripwire
   879  0708  1283               	bcf	3,5	;RP0=0, select bank0
   880  0709  1303               	bcf	3,6	;RP1=0, select bank0
   881  070A  00BB               	movwf	??_main
   882  070B  083B               	movf	??_main,w
   883  070C  00BF               	movwf	_trip
   884                           
   885                           ;mainMaster.c: 61:         PIR = get_PIR();
   886  070D  120A  118A  2182  120A  118A  	fcall	_get_PIR
   887  0712  1283               	bcf	3,5	;RP0=0, select bank0
   888  0713  1303               	bcf	3,6	;RP1=0, select bank0
   889  0714  00BB               	movwf	??_main
   890  0715  083B               	movf	??_main,w
   891  0716  00BE               	movwf	_PIR
   892                           
   893                           ;mainMaster.c: 62:         IR = get_IR();
   894  0717  120A  118A  2163  120A  118A  	fcall	_get_IR
   895  071C  1283               	bcf	3,5	;RP0=0, select bank0
   896  071D  1303               	bcf	3,6	;RP1=0, select bank0
   897  071E  00BB               	movwf	??_main
   898  071F  083B               	movf	??_main,w
   899  0720  00BD               	movwf	_IR
   900                           
   901                           ;mainMaster.c: 63:         time = get_time();
   902  0721  120A  118A  24F7  120A  118A  	fcall	_get_time
   903  0726  1283               	bcf	3,5	;RP0=0, select bank0
   904  0727  1303               	bcf	3,6	;RP1=0, select bank0
   905  0728  00BB               	movwf	??_main
   906  0729  083B               	movf	??_main,w
   907  072A  00C2               	movwf	_time
   908                           
   909                           ;mainMaster.c: 65:         if (strcmp(temp,"23.50") > 0){
   910  072B  3045               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   911  072C  00BB               	movwf	??_main
   912  072D  083B               	movf	??_main,w
   913  072E  00F0               	movwf	strcmp@s2
   914  072F  0841               	movf	_temp,w
   915  0730  120A  118A  2203  120A  118A  	fcall	_strcmp
   916  0735  0871               	movf	?_strcmp+1,w
   917  0736  3A80               	xorlw	128
   918  0737  00FF               	movwf	127
   919  0738  3080               	movlw	128
   920  0739  027F               	subwf	127,w
   921  073A  1D03               	skipz
   922  073B  2F3E               	goto	u1185
   923  073C  3001               	movlw	1
   924  073D  0270               	subwf	?_strcmp,w
   925  073E                     u1185:	
   926  073E  1C03               	skipc
   927  073F  2F44               	goto	l176
   928                           
   929                           ;mainMaster.c: 66:             PORTAbits.RA0 = 1;
   930  0740  1283               	bcf	3,5	;RP0=0, select bank0
   931  0741  1303               	bcf	3,6	;RP1=0, select bank0
   932  0742  1405               	bsf	5,0	;volatile
   933                           
   934                           ;mainMaster.c: 67:         } else {
   935  0743  2F47               	goto	l1862
   936  0744                     l176:	
   937                           
   938                           ;mainMaster.c: 68:             PORTAbits.RA0 = 0;
   939  0744  1283               	bcf	3,5	;RP0=0, select bank0
   940  0745  1303               	bcf	3,6	;RP1=0, select bank0
   941  0746  1005               	bcf	5,0	;volatile
   942  0747                     l1862:	
   943                           
   944                           ;mainMaster.c: 71:         if (state == 0){
   945  0747  083C               	movf	_state,w
   946  0748  1D03               	btfss	3,2
   947  0749  2F7D               	goto	l1874
   948                           
   949                           ;mainMaster.c: 73:             Lcd_Set_Cursor(1,1);
   950  074A  01F4               	clrf	Lcd_Set_Cursor@b
   951  074B  0AF4               	incf	Lcd_Set_Cursor@b,f
   952  074C  3001               	movlw	1
   953  074D  120A  118A  239F  120A  118A  	fcall	_Lcd_Set_Cursor
   954                           
   955                           ;mainMaster.c: 74:             Lcd_Write_String(time);
   956  0752  1283               	bcf	3,5	;RP0=0, select bank0
   957  0753  1303               	bcf	3,6	;RP1=0, select bank0
   958  0754  0842               	movf	_time,w
   959  0755  00F5               	movwf	Lcd_Write_String@a
   960  0756  3000               	movlw	0
   961  0757  00F6               	movwf	Lcd_Write_String@a+1
   962  0758  120A  118A  2362  120A  118A  	fcall	_Lcd_Write_String
   963                           
   964                           ;mainMaster.c: 76:             Lcd_Set_Cursor(2,1);
   965  075D  01F4               	clrf	Lcd_Set_Cursor@b
   966  075E  0AF4               	incf	Lcd_Set_Cursor@b,f
   967  075F  3002               	movlw	2
   968  0760  120A  118A  239F  120A  118A  	fcall	_Lcd_Set_Cursor
   969                           
   970                           ;mainMaster.c: 77:             Lcd_Write_String(temp);
   971  0765  1283               	bcf	3,5	;RP0=0, select bank0
   972  0766  1303               	bcf	3,6	;RP1=0, select bank0
   973  0767  0841               	movf	_temp,w
   974  0768  00F5               	movwf	Lcd_Write_String@a
   975  0769  3000               	movlw	0
   976  076A  00F6               	movwf	Lcd_Write_String@a+1
   977  076B  120A  118A  2362  120A  118A  	fcall	_Lcd_Write_String
   978                           
   979                           ;mainMaster.c: 78:             Lcd_Write_Char(223);
   980  0770  30DF               	movlw	223
   981  0771  120A  118A  22ED  120A  118A  	fcall	_Lcd_Write_Char
   982                           
   983                           ;mainMaster.c: 79:             Lcd_Write_Char('C');
   984  0776  3043               	movlw	67
   985  0777  120A  118A  22ED  120A  118A  	fcall	_Lcd_Write_Char
   986                           
   987                           ;mainMaster.c: 81:         } else if (state == 1){
   988  077C  2FDD               	goto	l1910
   989  077D                     l1874:	
   990  077D  033C               	decf	_state,w
   991  077E  1D03               	btfss	3,2
   992  077F  2FA9               	goto	l1892
   993                           
   994                           ;mainMaster.c: 83:             Lcd_Set_Cursor(1,1);
   995  0780  01F4               	clrf	Lcd_Set_Cursor@b
   996  0781  0AF4               	incf	Lcd_Set_Cursor@b,f
   997  0782  3001               	movlw	1
   998  0783  120A  118A  239F  120A  118A  	fcall	_Lcd_Set_Cursor
   999                           
  1000                           ;mainMaster.c: 84:             if (door == 1){
  1001  0788  1283               	bcf	3,5	;RP0=0, select bank0
  1002  0789  1303               	bcf	3,6	;RP1=0, select bank0
  1003  078A  0340               	decf	_door,w
  1004  078B  1D03               	btfss	3,2
  1005  078C  2F8F               	goto	l1882
  1006                           
  1007                           ;mainMaster.c: 85:                 Lcd_Write_String("Door OPEN  ");
  1008  078D  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1009  078E  2F90               	goto	L1
  1010  078F                     l1882:	
  1011                           ;mainMaster.c: 86:             } else {
  1012                           
  1013                           
  1014                           ;mainMaster.c: 87:                 Lcd_Write_String("Door CLOSED");
  1015  078F  3017               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1016  0790                     L1:	
  1017  0790  00F5               	movwf	Lcd_Write_String@a
  1018  0791  3080               	movlw	128
  1019  0792  00F6               	movwf	Lcd_Write_String@a+1
  1020  0793  120A  118A  2362  120A  118A  	fcall	_Lcd_Write_String
  1021                           
  1022                           ;mainMaster.c: 90:             Lcd_Set_Cursor(2,1);
  1023  0798  01F4               	clrf	Lcd_Set_Cursor@b
  1024  0799  0AF4               	incf	Lcd_Set_Cursor@b,f
  1025  079A  3002               	movlw	2
  1026  079B  120A  118A  239F  120A  118A  	fcall	_Lcd_Set_Cursor
  1027                           
  1028                           ;mainMaster.c: 91:             if (trip == 1){
  1029  07A0  1283               	bcf	3,5	;RP0=0, select bank0
  1030  07A1  1303               	bcf	3,6	;RP1=0, select bank0
  1031  07A2  033F               	decf	_trip,w
  1032  07A3  1D03               	btfss	3,2
  1033  07A4  2FA7               	goto	l1890
  1034                           
  1035                           ;mainMaster.c: 92:                 Lcd_Write_String("Trip ON ");
  1036  07A5  3023               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1037  07A6  2FD5               	goto	L2
  1038  07A7                     l1890:	
  1039                           ;mainMaster.c: 93:             } else {
  1040                           
  1041                           
  1042                           ;mainMaster.c: 94:                 Lcd_Write_String("Trip OFF");
  1043  07A7  302C               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1044  07A8  2FD5               	goto	L2
  1045  07A9                     l1892:	
  1046  07A9  3002               	movlw	2
  1047  07AA  063C               	xorwf	_state,w
  1048  07AB  1D03               	btfss	3,2
  1049  07AC  2FDD               	goto	l1910
  1050                           
  1051                           ;mainMaster.c: 99:             Lcd_Set_Cursor(1,1);
  1052  07AD  01F4               	clrf	Lcd_Set_Cursor@b
  1053  07AE  0AF4               	incf	Lcd_Set_Cursor@b,f
  1054  07AF  3001               	movlw	1
  1055  07B0  120A  118A  239F  120A  118A  	fcall	_Lcd_Set_Cursor
  1056                           
  1057                           ;mainMaster.c: 100:             if (PIR == 1){
  1058  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  1059  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  1060  07B7  033E               	decf	_PIR,w
  1061  07B8  1D03               	btfss	3,2
  1062  07B9  2FBC               	goto	l1900
  1063                           
  1064                           ;mainMaster.c: 101:                 Lcd_Write_String("PIR ON ");
  1065  07BA  3035               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1066  07BB  2FBD               	goto	L3
  1067  07BC                     l1900:	
  1068                           ;mainMaster.c: 102:             } else {
  1069                           
  1070                           
  1071                           ;mainMaster.c: 103:                 Lcd_Write_String("PIR OFF");
  1072  07BC  303D               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1073  07BD                     L3:	
  1074  07BD  00F5               	movwf	Lcd_Write_String@a
  1075  07BE  3080               	movlw	128
  1076  07BF  00F6               	movwf	Lcd_Write_String@a+1
  1077  07C0  120A  118A  2362  120A  118A  	fcall	_Lcd_Write_String
  1078                           
  1079                           ;mainMaster.c: 106:             Lcd_Set_Cursor(2,1);
  1080  07C5  01F4               	clrf	Lcd_Set_Cursor@b
  1081  07C6  0AF4               	incf	Lcd_Set_Cursor@b,f
  1082  07C7  3002               	movlw	2
  1083  07C8  120A  118A  239F  120A  118A  	fcall	_Lcd_Set_Cursor
  1084                           
  1085                           ;mainMaster.c: 107:             if (IR == 1){
  1086  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  1087  07CE  1303               	bcf	3,6	;RP1=0, select bank0
  1088  07CF  033D               	decf	_IR,w
  1089  07D0  1D03               	btfss	3,2
  1090  07D1  2FD4               	goto	l1908
  1091                           
  1092                           ;mainMaster.c: 108:                 Lcd_Write_String("IR ON ");
  1093  07D2  3036               	movlw	(low (((STR_6+1)-__stringbase)| (0+32768)))& (0+255)
  1094  07D3  2FD5               	goto	L2
  1095  07D4                     l1908:	
  1096                           ;mainMaster.c: 109:             } else {
  1097                           
  1098                           
  1099                           ;mainMaster.c: 110:                 Lcd_Write_String("IR OFF");
  1100  07D4  303E               	movlw	(low (((STR_7+1)-__stringbase)| (0+32768)))& (0+255)
  1101  07D5                     L2:	
  1102  07D5  00F5               	movwf	Lcd_Write_String@a
  1103  07D6  3080               	movlw	128
  1104  07D7  00F6               	movwf	Lcd_Write_String@a+1
  1105  07D8  120A  118A  2362  120A  118A  	fcall	_Lcd_Write_String
  1106  07DD                     l1910:	
  1107                           
  1108                           ;mainMaster.c: 114:         if(PORTCbits.RC0 == 1){
  1109  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  1110  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  1111  07DF  1C07               	btfss	7,0	;volatile
  1112  07E0  2EEF               	goto	l1846
  1113                           
  1114                           ;mainMaster.c: 115:             state++;
  1115  07E1  3001               	movlw	1
  1116  07E2  00BB               	movwf	??_main
  1117  07E3  083B               	movf	??_main,w
  1118  07E4  07BC               	addwf	_state,f
  1119                           
  1120                           ;mainMaster.c: 116:             if (state > 2){
  1121  07E5  3003               	movlw	3
  1122  07E6  023C               	subwf	_state,w
  1123  07E7  1803               	btfsc	3,0
  1124                           
  1125                           ;mainMaster.c: 117:                 state = 0;
  1126  07E8  01BC               	clrf	_state
  1127                           
  1128                           ;mainMaster.c: 119:             Lcd_Clear();
  1129  07E9  120A  118A  2113  120A  118A  	fcall	_Lcd_Clear
  1130  07EE                     l193:	
  1131                           ;mainMaster.c: 120:             while(PORTCbits.RC0 == 1);
  1132                           
  1133  07EE  1283               	bcf	3,5	;RP0=0, select bank0
  1134  07EF  1303               	bcf	3,6	;RP1=0, select bank0
  1135  07F0  1C07               	btfss	7,0	;volatile
  1136  07F1  2EEF               	goto	l1846
  1137  07F2  2FEE               	goto	l193
  1138  07F3                     __end_of_main:	
  1139                           
  1140                           	psect	text1
  1141  0203                     __ptext1:	
  1142 ;; *************** function _strcmp *****************
  1143 ;; Defined at:
  1144 ;;		line 33 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;  s1              1    wreg     PTR const unsigned char 
  1147 ;;		 -> NULL(0), get_temp@temperature(6), 
  1148 ;;  s2              1    0[COMMON] PTR const unsigned char 
  1149 ;;		 -> STR_1(6), 
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;  s1              1    6[COMMON] PTR const unsigned char 
  1152 ;;		 -> NULL(0), get_temp@temperature(6), 
  1153 ;;  r               1    5[COMMON] char 
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  2    0[COMMON] int 
  1156 ;; Registers used:
  1157 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1163 ;;      Params:         2       0       0       0       0
  1164 ;;      Locals:         2       0       0       0       0
  1165 ;;      Temps:          3       0       0       0       0
  1166 ;;      Totals:         7       0       0       0       0
  1167 ;;Total ram usage:        7 bytes
  1168 ;; Hardware stack levels used:    2
  1169 ;; This function calls:
  1170 ;;		Nothing
  1171 ;; This function is called by:
  1172 ;;		_main
  1173 ;; This function uses a non-reentrant model
  1174 ;;
  1175                           
  1176                           
  1177                           ;psect for function _strcmp
  1178  0203                     _strcmp:	
  1179                           
  1180                           ;incstack = 0
  1181                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  1182                           ;strcmp@s1 stored from wreg
  1183  0203  00F6               	movwf	strcmp@s1
  1184  0204  2A12               	goto	l1828
  1185  0205                     l1830:	
  1186  0205  0876               	movf	strcmp@s1,w
  1187  0206  0084               	movwf	4
  1188  0207  0800               	movf	0,w
  1189  0208  1903               	btfsc	3,2
  1190  0209  2A27               	goto	l1832
  1191  020A  3001               	movlw	1
  1192  020B  00F2               	movwf	??_strcmp
  1193  020C  0872               	movf	??_strcmp,w
  1194  020D  07F6               	addwf	strcmp@s1,f
  1195  020E  3001               	movlw	1
  1196  020F  00F2               	movwf	??_strcmp
  1197  0210  0872               	movf	??_strcmp,w
  1198  0211  07F0               	addwf	strcmp@s2,f
  1199  0212                     l1828:	
  1200  0212  0870               	movf	strcmp@s2,w
  1201  0213  0084               	movwf	4
  1202  0214  120A  118A  200D  120A  118A  	fcall	stringdir
  1203  0219  00F2               	movwf	??_strcmp
  1204  021A  0876               	movf	strcmp@s1,w
  1205  021B  0084               	movwf	4
  1206  021C  1383               	bcf	3,7	;select IRP bank0
  1207  021D  0800               	movf	0,w
  1208  021E  00F3               	movwf	??_strcmp+1
  1209  021F  0872               	movf	??_strcmp,w
  1210  0220  0273               	subwf	??_strcmp+1,w
  1211  0221  00F4               	movwf	??_strcmp+2
  1212  0222  0874               	movf	??_strcmp+2,w
  1213  0223  00F5               	movwf	strcmp@r
  1214  0224  0875               	movf	strcmp@r,w
  1215  0225  1903               	btfsc	3,2
  1216  0226  2A05               	goto	l1830
  1217  0227                     l1832:	
  1218  0227  0875               	movf	strcmp@r,w
  1219  0228  00F0               	movwf	?_strcmp
  1220  0229  01F1               	clrf	?_strcmp+1
  1221  022A  1BF0               	btfsc	?_strcmp,7
  1222  022B  03F1               	decf	?_strcmp+1,f
  1223  022C  0008               	return
  1224  022D                     __end_of_strcmp:	
  1225                           
  1226                           	psect	text2
  1227  0259                     __ptext2:	
  1228 ;; *************** function _setup *****************
  1229 ;; Defined at:
  1230 ;;		line 125 in file "mainMaster.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;		None
  1233 ;; Auto vars:     Size  Location     Type
  1234 ;;		None
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  1    wreg      void 
  1237 ;; Registers used:
  1238 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1244 ;;      Params:         0       0       0       0       0
  1245 ;;      Locals:         0       0       0       0       0
  1246 ;;      Temps:          0       0       0       0       0
  1247 ;;      Totals:         0       0       0       0       0
  1248 ;;Total ram usage:        0 bytes
  1249 ;; Hardware stack levels used:    1
  1250 ;; Hardware stack levels required when called:    3
  1251 ;; This function calls:
  1252 ;;		_I2C_Master_Init
  1253 ;;		_Lcd_Init
  1254 ;;		_initOscilador
  1255 ;; This function is called by:
  1256 ;;		_main
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260                           
  1261                           ;psect for function _setup
  1262  0259                     _setup:	
  1263                           
  1264                           ;mainMaster.c: 126:     initOscilador(7);
  1265                           
  1266                           ;incstack = 0
  1267                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1268  0259  3007               	movlw	7
  1269  025A  120A  118A  23E9  120A  118A  	fcall	_initOscilador
  1270                           
  1271                           ;mainMaster.c: 127:     ANSELH = 0;
  1272  025F  1683               	bsf	3,5	;RP0=1, select bank3
  1273  0260  1703               	bsf	3,6	;RP1=1, select bank3
  1274  0261  0189               	clrf	9	;volatile
  1275                           
  1276                           ;mainMaster.c: 128:     ANSEL = 0;
  1277  0262  0188               	clrf	8	;volatile
  1278                           
  1279                           ;mainMaster.c: 129:     TRISB = 0;
  1280  0263  1683               	bsf	3,5	;RP0=1, select bank1
  1281  0264  1303               	bcf	3,6	;RP1=0, select bank1
  1282  0265  0186               	clrf	6	;volatile
  1283                           
  1284                           ;mainMaster.c: 130:     TRISA = 0;
  1285  0266  0185               	clrf	5	;volatile
  1286                           
  1287                           ;mainMaster.c: 131:     PORTB = 0;
  1288  0267  1283               	bcf	3,5	;RP0=0, select bank0
  1289  0268  1303               	bcf	3,6	;RP1=0, select bank0
  1290  0269  0186               	clrf	6	;volatile
  1291                           
  1292                           ;mainMaster.c: 132:     PORTA = 0;
  1293  026A  0185               	clrf	5	;volatile
  1294                           
  1295                           ;mainMaster.c: 133:     TRISC = 0x03;
  1296  026B  3003               	movlw	3
  1297  026C  1683               	bsf	3,5	;RP0=1, select bank1
  1298  026D  1303               	bcf	3,6	;RP1=0, select bank1
  1299  026E  0087               	movwf	7	;volatile
  1300                           
  1301                           ;mainMaster.c: 134:     PORTC = 0;
  1302  026F  1283               	bcf	3,5	;RP0=0, select bank0
  1303  0270  1303               	bcf	3,6	;RP1=0, select bank0
  1304  0271  0187               	clrf	7	;volatile
  1305                           
  1306                           ;mainMaster.c: 135:     Lcd_Init();
  1307  0272  120A  118A  243E  120A  118A  	fcall	_Lcd_Init
  1308                           
  1309                           ;mainMaster.c: 136:     I2C_Master_Init(100000);
  1310  0277  3000               	movlw	0
  1311  0278  1283               	bcf	3,5	;RP0=0, select bank0
  1312  0279  1303               	bcf	3,6	;RP1=0, select bank0
  1313  027A  00A3               	movwf	I2C_Master_Init@c+3
  1314  027B  3001               	movlw	1
  1315  027C  00A2               	movwf	I2C_Master_Init@c+2
  1316  027D  3086               	movlw	134
  1317  027E  00A1               	movwf	I2C_Master_Init@c+1
  1318  027F  30A0               	movlw	160
  1319  0280  00A0               	movwf	I2C_Master_Init@c
  1320  0281  120A  118A  22B7   	fcall	_I2C_Master_Init
  1321  0284  0008               	return
  1322  0285                     __end_of_setup:	
  1323                           
  1324                           	psect	text3
  1325  03E9                     __ptext3:	
  1326 ;; *************** function _initOscilador *****************
  1327 ;; Defined at:
  1328 ;;		line 11 in file "./Oscilador.h"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;  option          1    wreg     unsigned char 
  1331 ;; Auto vars:     Size  Location     Type
  1332 ;;  option          1    2[COMMON] unsigned char 
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  1    wreg      void 
  1335 ;; Registers used:
  1336 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1342 ;;      Params:         0       0       0       0       0
  1343 ;;      Locals:         1       0       0       0       0
  1344 ;;      Temps:          2       0       0       0       0
  1345 ;;      Totals:         3       0       0       0       0
  1346 ;;Total ram usage:        3 bytes
  1347 ;; Hardware stack levels used:    1
  1348 ;; This function calls:
  1349 ;;		Nothing
  1350 ;; This function is called by:
  1351 ;;		_setup
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           
  1356                           ;psect for function _initOscilador
  1357  03E9                     _initOscilador:	
  1358                           
  1359                           ;incstack = 0
  1360                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  1361                           ;initOscilador@option stored from wreg
  1362  03E9  00F2               	movwf	initOscilador@option
  1363                           
  1364                           ;./Oscilador.h: 13: 
  1365  03EA  2C1A               	goto	l1614
  1366  03EB                     l1594:	
  1367                           
  1368                           ;./Oscilador.h: 16:         case 3:
  1369  03EB  308F               	movlw	-113
  1370  03EC  1683               	bsf	3,5	;RP0=1, select bank1
  1371  03ED  1303               	bcf	3,6	;RP1=0, select bank1
  1372  03EE  058F               	andwf	15,f	;volatile
  1373                           
  1374                           ;./Oscilador.h: 17: 
  1375  03EF  2C3C               	goto	l147
  1376  03F0                     l1596:	
  1377                           
  1378                           ;./Oscilador.h: 20:         case 4:
  1379  03F0  1683               	bsf	3,5	;RP0=1, select bank1
  1380  03F1  1303               	bcf	3,6	;RP1=0, select bank1
  1381  03F2  080F               	movf	15,w	;volatile
  1382  03F3  398F               	andlw	-113
  1383  03F4  3810               	iorlw	16
  1384  03F5  2C13               	goto	L8
  1385  03F6                     l1598:	
  1386                           ;./Oscilador.h: 21: 
  1387                           
  1388                           
  1389                           ;./Oscilador.h: 24:         case 5:
  1390  03F6  1683               	bsf	3,5	;RP0=1, select bank1
  1391  03F7  1303               	bcf	3,6	;RP1=0, select bank1
  1392  03F8  080F               	movf	15,w	;volatile
  1393  03F9  398F               	andlw	-113
  1394  03FA  3820               	iorlw	32
  1395  03FB  2C13               	goto	L8
  1396  03FC                     l1600:	
  1397                           ;./Oscilador.h: 25: 
  1398                           
  1399                           
  1400                           ;./Oscilador.h: 28:         case 6:
  1401  03FC  1683               	bsf	3,5	;RP0=1, select bank1
  1402  03FD  1303               	bcf	3,6	;RP1=0, select bank1
  1403  03FE  080F               	movf	15,w	;volatile
  1404  03FF  398F               	andlw	-113
  1405  0400  3830               	iorlw	48
  1406  0401  2C13               	goto	L8
  1407  0402                     l1602:	
  1408                           ;./Oscilador.h: 29: 
  1409                           
  1410                           
  1411                           ;./Oscilador.h: 32:         case 7:
  1412  0402  1683               	bsf	3,5	;RP0=1, select bank1
  1413  0403  1303               	bcf	3,6	;RP1=0, select bank1
  1414  0404  080F               	movf	15,w	;volatile
  1415  0405  398F               	andlw	-113
  1416  0406  3840               	iorlw	64
  1417  0407  2C13               	goto	L8
  1418  0408                     l1604:	
  1419                           ;./Oscilador.h: 33: 
  1420                           
  1421                           
  1422                           ;./Oscilador.h: 36:         default:
  1423  0408  1683               	bsf	3,5	;RP0=1, select bank1
  1424  0409  1303               	bcf	3,6	;RP1=0, select bank1
  1425  040A  080F               	movf	15,w	;volatile
  1426  040B  398F               	andlw	-113
  1427  040C  3850               	iorlw	80
  1428  040D  2C13               	goto	L8
  1429  040E                     l1606:	
  1430                           ;./Oscilador.h: 37: 
  1431                           
  1432                           
  1433                           ;./Oscilador.h: 40:     }
  1434  040E  1683               	bsf	3,5	;RP0=1, select bank1
  1435  040F  1303               	bcf	3,6	;RP1=0, select bank1
  1436  0410  080F               	movf	15,w	;volatile
  1437  0411  398F               	andlw	-113
  1438  0412  3860               	iorlw	96
  1439  0413                     L8:	
  1440  0413  008F               	movwf	15	;volatile
  1441                           
  1442                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  1443  0414  2C3C               	goto	l147
  1444  0415                     l1608:	
  1445  0415                     l1610:	
  1446  0415  3070               	movlw	112
  1447  0416  1683               	bsf	3,5	;RP0=1, select bank1
  1448  0417  1303               	bcf	3,6	;RP1=0, select bank1
  1449  0418  048F               	iorwf	15,f	;volatile
  1450  0419  2C3C               	goto	l147
  1451  041A                     l1614:	
  1452  041A  0872               	movf	initOscilador@option,w
  1453  041B  00F0               	movwf	??_initOscilador
  1454  041C  01F1               	clrf	??_initOscilador+1
  1455                           
  1456                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1457                           ; Switch size 1, requested type "simple"
  1458                           ; Number of cases is 1, Range of values is 0 to 0
  1459                           ; switch strategies available:
  1460                           ; Name         Instructions Cycles
  1461                           ; simple_byte            4     3 (average)
  1462                           ; direct_byte           11     8 (fixed)
  1463                           ; jumptable            260     6 (fixed)
  1464                           ;	Chosen strategy is simple_byte
  1465  041D  0871               	movf	??_initOscilador+1,w
  1466  041E  3A00               	xorlw	0	; case 0
  1467  041F  1903               	skipnz
  1468  0420  2C22               	goto	l1966
  1469  0421  2C15               	goto	l1610
  1470  0422                     l1966:	
  1471                           
  1472                           ; Switch size 1, requested type "simple"
  1473                           ; Number of cases is 8, Range of values is 0 to 7
  1474                           ; switch strategies available:
  1475                           ; Name         Instructions Cycles
  1476                           ; simple_byte           25    13 (average)
  1477                           ; direct_byte           32     8 (fixed)
  1478                           ; jumptable            260     6 (fixed)
  1479                           ;	Chosen strategy is simple_byte
  1480  0422  0870               	movf	??_initOscilador,w
  1481  0423  3A00               	xorlw	0	; case 0
  1482  0424  1903               	skipnz
  1483  0425  2BEB               	goto	l1594
  1484  0426  3A01               	xorlw	1	; case 1
  1485  0427  1903               	skipnz
  1486  0428  2BF0               	goto	l1596
  1487  0429  3A03               	xorlw	3	; case 2
  1488  042A  1903               	skipnz
  1489  042B  2BF6               	goto	l1598
  1490  042C  3A01               	xorlw	1	; case 3
  1491  042D  1903               	skipnz
  1492  042E  2BFC               	goto	l1600
  1493  042F  3A07               	xorlw	7	; case 4
  1494  0430  1903               	skipnz
  1495  0431  2C02               	goto	l1602
  1496  0432  3A01               	xorlw	1	; case 5
  1497  0433  1903               	skipnz
  1498  0434  2C08               	goto	l1604
  1499  0435  3A03               	xorlw	3	; case 6
  1500  0436  1903               	skipnz
  1501  0437  2C0E               	goto	l1606
  1502  0438  3A01               	xorlw	1	; case 7
  1503  0439  1903               	skipnz
  1504  043A  2C15               	goto	l1608
  1505  043B  2C15               	goto	l1610
  1506  043C                     l147:	
  1507  043C  140F               	bsf	15,0	;volatile
  1508  043D  0008               	return
  1509  043E                     __end_of_initOscilador:	
  1510                           
  1511                           	psect	text4
  1512  043E                     __ptext4:	
  1513 ;; *************** function _Lcd_Init *****************
  1514 ;; Defined at:
  1515 ;;		line 65 in file "./LCD4bits.h"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;		None
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;		None
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  1    wreg      void 
  1522 ;; Registers used:
  1523 ;;		wreg, status,2, status,0, pclath, cstack
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1529 ;;      Params:         0       0       0       0       0
  1530 ;;      Locals:         0       0       0       0       0
  1531 ;;      Temps:          2       0       0       0       0
  1532 ;;      Totals:         2       0       0       0       0
  1533 ;;Total ram usage:        2 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; Hardware stack levels required when called:    2
  1536 ;; This function calls:
  1537 ;;		_Lcd_Cmd
  1538 ;;		_Lcd_Port
  1539 ;; This function is called by:
  1540 ;;		_setup
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           
  1545                           ;psect for function _Lcd_Init
  1546  043E                     _Lcd_Init:	
  1547                           
  1548                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  1549                           
  1550                           ;incstack = 0
  1551                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1552  043E  3000               	movlw	0
  1553  043F  120A  118A  212F  120A  118A  	fcall	_Lcd_Port
  1554                           
  1555                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  1556  0444  3034               	movlw	52
  1557  0445  00F5               	movwf	??_Lcd_Init+1
  1558  0446  30F1               	movlw	241
  1559  0447  00F4               	movwf	??_Lcd_Init
  1560  0448                     u1297:	
  1561  0448  0BF4               	decfsz	??_Lcd_Init,f
  1562  0449  2C48               	goto	u1297
  1563  044A  0BF5               	decfsz	??_Lcd_Init+1,f
  1564  044B  2C48               	goto	u1297
  1565  044C  2C4D               	nop2
  1566                           
  1567                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  1568  044D  3003               	movlw	3
  1569  044E  120A  118A  2149  120A  118A  	fcall	_Lcd_Cmd
  1570                           
  1571                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1572  0453  300D               	movlw	13
  1573  0454  00F5               	movwf	??_Lcd_Init+1
  1574  0455  30FB               	movlw	251
  1575  0456  00F4               	movwf	??_Lcd_Init
  1576  0457                     u1307:	
  1577  0457  0BF4               	decfsz	??_Lcd_Init,f
  1578  0458  2C57               	goto	u1307
  1579  0459  0BF5               	decfsz	??_Lcd_Init+1,f
  1580  045A  2C57               	goto	u1307
  1581  045B  2C5C               	nop2
  1582                           
  1583                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  1584  045C  3003               	movlw	3
  1585  045D  120A  118A  2149  120A  118A  	fcall	_Lcd_Cmd
  1586                           
  1587                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  1588  0462  301D               	movlw	29
  1589  0463  00F5               	movwf	??_Lcd_Init+1
  1590  0464  3091               	movlw	145
  1591  0465  00F4               	movwf	??_Lcd_Init
  1592  0466                     u1317:	
  1593  0466  0BF4               	decfsz	??_Lcd_Init,f
  1594  0467  2C66               	goto	u1317
  1595  0468  0BF5               	decfsz	??_Lcd_Init+1,f
  1596  0469  2C66               	goto	u1317
  1597                           
  1598                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  1599  046A  3003               	movlw	3
  1600  046B  120A  118A  2149  120A  118A  	fcall	_Lcd_Cmd
  1601                           
  1602                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  1603  0470  3002               	movlw	2
  1604  0471  120A  118A  2149  120A  118A  	fcall	_Lcd_Cmd
  1605                           
  1606                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  1607  0476  3002               	movlw	2
  1608  0477  120A  118A  2149  120A  118A  	fcall	_Lcd_Cmd
  1609                           
  1610                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  1611  047C  3008               	movlw	8
  1612  047D  120A  118A  2149  120A  118A  	fcall	_Lcd_Cmd
  1613                           
  1614                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  1615  0482  3000               	movlw	0
  1616  0483  120A  118A  2149  120A  118A  	fcall	_Lcd_Cmd
  1617                           
  1618                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  1619  0488  300C               	movlw	12
  1620  0489  120A  118A  2149  120A  118A  	fcall	_Lcd_Cmd
  1621                           
  1622                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  1623  048E  3000               	movlw	0
  1624  048F  120A  118A  2149  120A  118A  	fcall	_Lcd_Cmd
  1625                           
  1626                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  1627  0494  3006               	movlw	6
  1628  0495  120A  118A  2149   	fcall	_Lcd_Cmd
  1629  0498  0008               	return
  1630  0499                     __end_of_Lcd_Init:	
  1631                           
  1632                           	psect	text5
  1633  02B7                     __ptext5:	
  1634 ;; *************** function _I2C_Master_Init *****************
  1635 ;; Defined at:
  1636 ;;		line 16 in file "./I2C.h"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;  c               4    0[BANK0 ] const unsigned long 
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;		None
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  1    wreg      void 
  1643 ;; Registers used:
  1644 ;;		wreg, status,2, status,0, pclath, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1650 ;;      Params:         0       4       0       0       0
  1651 ;;      Locals:         0       0       0       0       0
  1652 ;;      Temps:          0       4       0       0       0
  1653 ;;      Totals:         0       8       0       0       0
  1654 ;;Total ram usage:        8 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:    1
  1657 ;; This function calls:
  1658 ;;		___lldiv
  1659 ;; This function is called by:
  1660 ;;		_setup
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           
  1665                           ;psect for function _I2C_Master_Init
  1666  02B7                     _I2C_Master_Init:	
  1667                           
  1668                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  1669                           
  1670                           ;incstack = 0
  1671                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  1672  02B7  3028               	movlw	40
  1673  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  1674  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  1675  02BA  0094               	movwf	20	;volatile
  1676                           
  1677                           ;./I2C.h: 19:     SSPCON2 = 0;
  1678  02BB  1683               	bsf	3,5	;RP0=1, select bank1
  1679  02BC  1303               	bcf	3,6	;RP1=0, select bank1
  1680  02BD  0191               	clrf	17	;volatile
  1681                           
  1682                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  1683  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  1684  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  1685  02C0  0820               	movf	I2C_Master_Init@c,w
  1686  02C1  00A4               	movwf	??_I2C_Master_Init
  1687  02C2  0821               	movf	I2C_Master_Init@c+1,w
  1688  02C3  00A5               	movwf	??_I2C_Master_Init+1
  1689  02C4  0822               	movf	I2C_Master_Init@c+2,w
  1690  02C5  00A6               	movwf	??_I2C_Master_Init+2
  1691  02C6  0823               	movf	I2C_Master_Init@c+3,w
  1692  02C7  00A7               	movwf	??_I2C_Master_Init+3
  1693  02C8  3002               	movlw	2
  1694  02C9                     u915:	
  1695  02C9  1003               	clrc
  1696  02CA  0DA4               	rlf	??_I2C_Master_Init,f
  1697  02CB  0DA5               	rlf	??_I2C_Master_Init+1,f
  1698  02CC  0DA6               	rlf	??_I2C_Master_Init+2,f
  1699  02CD  0DA7               	rlf	??_I2C_Master_Init+3,f
  1700  02CE  3EFF               	addlw	-1
  1701  02CF  1D03               	skipz
  1702  02D0  2AC9               	goto	u915
  1703  02D1  0827               	movf	??_I2C_Master_Init+3,w
  1704  02D2  00F3               	movwf	___lldiv@divisor+3
  1705  02D3  0826               	movf	??_I2C_Master_Init+2,w
  1706  02D4  00F2               	movwf	___lldiv@divisor+2
  1707  02D5  0825               	movf	??_I2C_Master_Init+1,w
  1708  02D6  00F1               	movwf	___lldiv@divisor+1
  1709  02D7  0824               	movf	??_I2C_Master_Init,w
  1710  02D8  00F0               	movwf	___lldiv@divisor
  1711  02D9  3000               	movlw	0
  1712  02DA  00F7               	movwf	___lldiv@dividend+3
  1713  02DB  307A               	movlw	122
  1714  02DC  00F6               	movwf	___lldiv@dividend+2
  1715  02DD  3012               	movlw	18
  1716  02DE  00F5               	movwf	___lldiv@dividend+1
  1717  02DF  3000               	movlw	0
  1718  02E0  00F4               	movwf	___lldiv@dividend
  1719  02E1  120A  118A  2499   	fcall	___lldiv
  1720  02E4  0870               	movf	?___lldiv,w
  1721  02E5  3EFF               	addlw	255
  1722  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  1723  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  1724  02E8  0093               	movwf	19	;volatile
  1725                           
  1726                           ;./I2C.h: 21:     SSPSTAT = 0;
  1727  02E9  0194               	clrf	20	;volatile
  1728                           
  1729                           ;./I2C.h: 22:     TRISC3 = 1;
  1730  02EA  1587               	bsf	7,3	;volatile
  1731                           
  1732                           ;./I2C.h: 23:     TRISC4 = 1;
  1733  02EB  1607               	bsf	7,4	;volatile
  1734  02EC  0008               	return
  1735  02ED                     __end_of_I2C_Master_Init:	
  1736                           
  1737                           	psect	text6
  1738  0499                     __ptext6:	
  1739 ;; *************** function ___lldiv *****************
  1740 ;; Defined at:
  1741 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;  divisor         4    0[COMMON] unsigned long 
  1744 ;;  dividend        4    4[COMMON] unsigned long 
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;  quotient        4    9[COMMON] unsigned long 
  1747 ;;  counter         1   13[COMMON] unsigned char 
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  4    0[COMMON] unsigned long 
  1750 ;; Registers used:
  1751 ;;		wreg, status,2, status,0
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1757 ;;      Params:         8       0       0       0       0
  1758 ;;      Locals:         5       0       0       0       0
  1759 ;;      Temps:          1       0       0       0       0
  1760 ;;      Totals:        14       0       0       0       0
  1761 ;;Total ram usage:       14 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; This function calls:
  1764 ;;		Nothing
  1765 ;; This function is called by:
  1766 ;;		_I2C_Master_Init
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           
  1771                           ;psect for function ___lldiv
  1772  0499                     ___lldiv:	
  1773                           
  1774                           ;incstack = 0
  1775                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  1776  0499  3000               	movlw	0
  1777  049A  00FC               	movwf	___lldiv@quotient+3
  1778  049B  3000               	movlw	0
  1779  049C  00FB               	movwf	___lldiv@quotient+2
  1780  049D  3000               	movlw	0
  1781  049E  00FA               	movwf	___lldiv@quotient+1
  1782  049F  3000               	movlw	0
  1783  04A0  00F9               	movwf	___lldiv@quotient
  1784  04A1  0873               	movf	___lldiv@divisor+3,w
  1785  04A2  0472               	iorwf	___lldiv@divisor+2,w
  1786  04A3  0471               	iorwf	___lldiv@divisor+1,w
  1787  04A4  0470               	iorwf	___lldiv@divisor,w
  1788  04A5  1903               	skipnz
  1789  04A6  2CEE               	goto	l1466
  1790  04A7  01FD               	clrf	___lldiv@counter
  1791  04A8  0AFD               	incf	___lldiv@counter,f
  1792  04A9                     l1452:	
  1793  04A9  1BF3               	btfsc	___lldiv@divisor+3,7
  1794  04AA  2CB9               	goto	l1454
  1795  04AB  3001               	movlw	1
  1796  04AC  00F8               	movwf	??___lldiv
  1797  04AD                     u725:	
  1798  04AD  1003               	clrc
  1799  04AE  0DF0               	rlf	___lldiv@divisor,f
  1800  04AF  0DF1               	rlf	___lldiv@divisor+1,f
  1801  04B0  0DF2               	rlf	___lldiv@divisor+2,f
  1802  04B1  0DF3               	rlf	___lldiv@divisor+3,f
  1803  04B2  0BF8               	decfsz	??___lldiv,f
  1804  04B3  2CAD               	goto	u725
  1805  04B4  3001               	movlw	1
  1806  04B5  00F8               	movwf	??___lldiv
  1807  04B6  0878               	movf	??___lldiv,w
  1808  04B7  07FD               	addwf	___lldiv@counter,f
  1809  04B8  2CA9               	goto	l1452
  1810  04B9                     l1454:	
  1811  04B9  3001               	movlw	1
  1812  04BA  00F8               	movwf	??___lldiv
  1813  04BB                     u745:	
  1814  04BB  1003               	clrc
  1815  04BC  0DF9               	rlf	___lldiv@quotient,f
  1816  04BD  0DFA               	rlf	___lldiv@quotient+1,f
  1817  04BE  0DFB               	rlf	___lldiv@quotient+2,f
  1818  04BF  0DFC               	rlf	___lldiv@quotient+3,f
  1819  04C0  0BF8               	decfsz	??___lldiv,f
  1820  04C1  2CBB               	goto	u745
  1821  04C2  0873               	movf	___lldiv@divisor+3,w
  1822  04C3  0277               	subwf	___lldiv@dividend+3,w
  1823  04C4  1D03               	skipz
  1824  04C5  2CD0               	goto	u755
  1825  04C6  0872               	movf	___lldiv@divisor+2,w
  1826  04C7  0276               	subwf	___lldiv@dividend+2,w
  1827  04C8  1D03               	skipz
  1828  04C9  2CD0               	goto	u755
  1829  04CA  0871               	movf	___lldiv@divisor+1,w
  1830  04CB  0275               	subwf	___lldiv@dividend+1,w
  1831  04CC  1D03               	skipz
  1832  04CD  2CD0               	goto	u755
  1833  04CE  0870               	movf	___lldiv@divisor,w
  1834  04CF  0274               	subwf	___lldiv@dividend,w
  1835  04D0                     u755:	
  1836  04D0  1C03               	skipc
  1837  04D1  2CE1               	goto	l1462
  1838  04D2  0870               	movf	___lldiv@divisor,w
  1839  04D3  02F4               	subwf	___lldiv@dividend,f
  1840  04D4  0871               	movf	___lldiv@divisor+1,w
  1841  04D5  1C03               	skipc
  1842  04D6  0F71               	incfsz	___lldiv@divisor+1,w
  1843  04D7  02F5               	subwf	___lldiv@dividend+1,f
  1844  04D8  0872               	movf	___lldiv@divisor+2,w
  1845  04D9  1C03               	skipc
  1846  04DA  0F72               	incfsz	___lldiv@divisor+2,w
  1847  04DB  02F6               	subwf	___lldiv@dividend+2,f
  1848  04DC  0873               	movf	___lldiv@divisor+3,w
  1849  04DD  1C03               	skipc
  1850  04DE  0F73               	incfsz	___lldiv@divisor+3,w
  1851  04DF  02F7               	subwf	___lldiv@dividend+3,f
  1852  04E0  1479               	bsf	___lldiv@quotient,0
  1853  04E1                     l1462:	
  1854  04E1  3001               	movlw	1
  1855  04E2                     u765:	
  1856  04E2  1003               	clrc
  1857  04E3  0CF3               	rrf	___lldiv@divisor+3,f
  1858  04E4  0CF2               	rrf	___lldiv@divisor+2,f
  1859  04E5  0CF1               	rrf	___lldiv@divisor+1,f
  1860  04E6  0CF0               	rrf	___lldiv@divisor,f
  1861  04E7  3EFF               	addlw	-1
  1862  04E8  1D03               	skipz
  1863  04E9  2CE2               	goto	u765
  1864  04EA  3001               	movlw	1
  1865  04EB  02FD               	subwf	___lldiv@counter,f
  1866  04EC  1D03               	btfss	3,2
  1867  04ED  2CB9               	goto	l1454
  1868  04EE                     l1466:	
  1869  04EE  087C               	movf	___lldiv@quotient+3,w
  1870  04EF  00F3               	movwf	?___lldiv+3
  1871  04F0  087B               	movf	___lldiv@quotient+2,w
  1872  04F1  00F2               	movwf	?___lldiv+2
  1873  04F2  087A               	movf	___lldiv@quotient+1,w
  1874  04F3  00F1               	movwf	?___lldiv+1
  1875  04F4  0879               	movf	___lldiv@quotient,w
  1876  04F5  00F0               	movwf	?___lldiv
  1877  04F6  0008               	return
  1878  04F7                     __end_of___lldiv:	
  1879                           
  1880                           	psect	text7
  1881  01C0                     __ptext7:	
  1882 ;; *************** function _get_tripwire *****************
  1883 ;; Defined at:
  1884 ;;		line 225 in file "mainMaster.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;		None
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  trip            1    7[COMMON] unsigned char 
  1889 ;; Return value:  Size  Location     Type
  1890 ;;                  1    wreg      unsigned char 
  1891 ;; Registers used:
  1892 ;;		wreg, status,2, status,0, pclath, cstack
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1898 ;;      Params:         0       0       0       0       0
  1899 ;;      Locals:         1       0       0       0       0
  1900 ;;      Temps:          1       0       0       0       0
  1901 ;;      Totals:         2       0       0       0       0
  1902 ;;Total ram usage:        2 bytes
  1903 ;; Hardware stack levels used:    1
  1904 ;; Hardware stack levels required when called:    2
  1905 ;; This function calls:
  1906 ;;		_I2C_Master_Read
  1907 ;;		_I2C_Master_Start
  1908 ;;		_I2C_Master_Stop
  1909 ;;		_I2C_Master_Write
  1910 ;; This function is called by:
  1911 ;;		_main
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           
  1916                           ;psect for function _get_tripwire
  1917  01C0                     _get_tripwire:	
  1918                           
  1919                           ;mainMaster.c: 226:     char trip;;mainMaster.c: 228:     I2C_Master_Start();
  1920                           
  1921                           ;incstack = 0
  1922                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  1923  01C0  120A  118A  20ED  120A  118A  	fcall	_I2C_Master_Start
  1924                           
  1925                           ;mainMaster.c: 229:     I2C_Master_Write(0x21);
  1926  01C5  3021               	movlw	33
  1927  01C6  00F0               	movwf	I2C_Master_Write@d
  1928  01C7  3000               	movlw	0
  1929  01C8  00F1               	movwf	I2C_Master_Write@d+1
  1930  01C9  120A  118A  2102  120A  118A  	fcall	_I2C_Master_Write
  1931                           
  1932                           ;mainMaster.c: 230:     trip = I2C_Master_Read(0);
  1933  01CE  3000               	movlw	0
  1934  01CF  00F0               	movwf	I2C_Master_Read@a
  1935  01D0  00F1               	movwf	I2C_Master_Read@a+1
  1936  01D1  120A  118A  222D  120A  118A  	fcall	_I2C_Master_Read
  1937  01D6  0870               	movf	?_I2C_Master_Read,w
  1938  01D7  00F6               	movwf	??_get_tripwire
  1939  01D8  0876               	movf	??_get_tripwire,w
  1940  01D9  00F7               	movwf	get_tripwire@trip
  1941                           
  1942                           ;mainMaster.c: 231:     I2C_Master_Stop();
  1943  01DA  120A  118A  20F4   	fcall	_I2C_Master_Stop
  1944                           
  1945                           ;mainMaster.c: 233:     return (trip);
  1946  01DD  0877               	movf	get_tripwire@trip,w
  1947  01DE  0008               	return
  1948  01DF                     __end_of_get_tripwire:	
  1949                           
  1950                           	psect	text8
  1951  04F7                     __ptext8:	
  1952 ;; *************** function _get_time *****************
  1953 ;; Defined at:
  1954 ;;		line 150 in file "mainMaster.c"
  1955 ;; Parameters:    Size  Location     Type
  1956 ;;		None
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;  string_time     6    0[BANK0 ] unsigned char [6]
  1959 ;;  min             1    7[BANK0 ] unsigned char 
  1960 ;;  hour            1    6[BANK0 ] unsigned char 
  1961 ;; Return value:  Size  Location     Type
  1962 ;;                  1    wreg      PTR unsigned char 
  1963 ;; Registers used:
  1964 ;;		wreg, status,2, status,0, pclath, cstack
  1965 ;; Tracked objects:
  1966 ;;		On entry : 0/0
  1967 ;;		On exit  : 0/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1970 ;;      Params:         0       0       0       0       0
  1971 ;;      Locals:         0       8       0       0       0
  1972 ;;      Temps:          2       0       0       0       0
  1973 ;;      Totals:         2       8       0       0       0
  1974 ;;Total ram usage:       10 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:    2
  1977 ;; This function calls:
  1978 ;;		_I2C_Master_Read
  1979 ;;		_I2C_Master_RepeatedStart
  1980 ;;		_I2C_Master_Start
  1981 ;;		_I2C_Master_Stop
  1982 ;;		_I2C_Master_Write
  1983 ;; This function is called by:
  1984 ;;		_main
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           
  1989                           ;psect for function _get_time
  1990  04F7                     _get_time:	
  1991                           
  1992                           ;mainMaster.c: 151:     char hour, min;;mainMaster.c: 152:     char string_time[6];;main
      +                          Master.c: 154:     I2C_Master_Start();
  1993                           
  1994                           ;incstack = 0
  1995                           ; Regs used in _get_time: [wreg+status,2+status,0+pclath+cstack]
  1996  04F7  120A  118A  20ED  120A  118A  	fcall	_I2C_Master_Start
  1997                           
  1998                           ;mainMaster.c: 155:     I2C_Master_Write(0xD0);
  1999  04FC  30D0               	movlw	208
  2000  04FD  00F0               	movwf	I2C_Master_Write@d
  2001  04FE  3000               	movlw	0
  2002  04FF  00F1               	movwf	I2C_Master_Write@d+1
  2003  0500  120A  118A  2102  120A  118A  	fcall	_I2C_Master_Write
  2004                           
  2005                           ;mainMaster.c: 156:     I2C_Master_Write(0x01);
  2006  0505  3001               	movlw	1
  2007  0506  00F0               	movwf	I2C_Master_Write@d
  2008  0507  3000               	movlw	0
  2009  0508  00F1               	movwf	I2C_Master_Write@d+1
  2010  0509  120A  118A  2102  120A  118A  	fcall	_I2C_Master_Write
  2011                           
  2012                           ;mainMaster.c: 157:     I2C_Master_RepeatedStart();
  2013  050E  120A  118A  20FB  120A  118A  	fcall	_I2C_Master_RepeatedStart
  2014                           
  2015                           ;mainMaster.c: 158:     I2C_Master_Write(0xD1);
  2016  0513  30D1               	movlw	209
  2017  0514  00F0               	movwf	I2C_Master_Write@d
  2018  0515  3000               	movlw	0
  2019  0516  00F1               	movwf	I2C_Master_Write@d+1
  2020  0517  120A  118A  2102  120A  118A  	fcall	_I2C_Master_Write
  2021                           
  2022                           ;mainMaster.c: 159:     min = I2C_Master_Read(1);
  2023  051C  3001               	movlw	1
  2024  051D  00F0               	movwf	I2C_Master_Read@a
  2025  051E  3000               	movlw	0
  2026  051F  00F1               	movwf	I2C_Master_Read@a+1
  2027  0520  120A  118A  222D  120A  118A  	fcall	_I2C_Master_Read
  2028  0525  0870               	movf	?_I2C_Master_Read,w
  2029  0526  00F6               	movwf	??_get_time
  2030  0527  0876               	movf	??_get_time,w
  2031  0528  1283               	bcf	3,5	;RP0=0, select bank0
  2032  0529  1303               	bcf	3,6	;RP1=0, select bank0
  2033  052A  00A7               	movwf	get_time@min
  2034                           
  2035                           ;mainMaster.c: 160:     hour = I2C_Master_Read(0);
  2036  052B  3000               	movlw	0
  2037  052C  00F0               	movwf	I2C_Master_Read@a
  2038  052D  00F1               	movwf	I2C_Master_Read@a+1
  2039  052E  120A  118A  222D  120A  118A  	fcall	_I2C_Master_Read
  2040  0533  0870               	movf	?_I2C_Master_Read,w
  2041  0534  00F6               	movwf	??_get_time
  2042  0535  0876               	movf	??_get_time,w
  2043  0536  1283               	bcf	3,5	;RP0=0, select bank0
  2044  0537  1303               	bcf	3,6	;RP1=0, select bank0
  2045  0538  00A6               	movwf	get_time@hour
  2046                           
  2047                           ;mainMaster.c: 161:     I2C_Master_Stop();
  2048  0539  120A  118A  20F4  120A  118A  	fcall	_I2C_Master_Stop
  2049                           
  2050                           ;mainMaster.c: 163:     string_time[0] = (hour >> 4) + '0';
  2051  053E  1283               	bcf	3,5	;RP0=0, select bank0
  2052  053F  1303               	bcf	3,6	;RP1=0, select bank0
  2053  0540  0826               	movf	get_time@hour,w
  2054  0541  00F6               	movwf	??_get_time
  2055  0542  3004               	movlw	4
  2056  0543                     u1145:	
  2057  0543  1003               	clrc
  2058  0544  0CF6               	rrf	??_get_time,f
  2059  0545  3EFF               	addlw	-1
  2060  0546  1D03               	skipz
  2061  0547  2D43               	goto	u1145
  2062  0548  0876               	movf	??_get_time,w
  2063  0549  3E30               	addlw	48
  2064  054A  00F7               	movwf	??_get_time+1
  2065  054B  0877               	movf	??_get_time+1,w
  2066  054C  00A0               	movwf	get_time@string_time
  2067                           
  2068                           ;mainMaster.c: 164:     string_time[1] = (hour & 0x0F) + '0';
  2069  054D  0826               	movf	get_time@hour,w
  2070  054E  390F               	andlw	15
  2071  054F  3E30               	addlw	48
  2072  0550  00F6               	movwf	??_get_time
  2073  0551  0876               	movf	??_get_time,w
  2074  0552  00A1               	movwf	get_time@string_time+1
  2075                           
  2076                           ;mainMaster.c: 165:     string_time[2] = ':';
  2077  0553  303A               	movlw	58
  2078  0554  00F6               	movwf	??_get_time
  2079  0555  0876               	movf	??_get_time,w
  2080  0556  00A2               	movwf	get_time@string_time+2
  2081                           
  2082                           ;mainMaster.c: 166:     string_time[3] = (min >> 4) + '0';
  2083  0557  0827               	movf	get_time@min,w
  2084  0558  00F6               	movwf	??_get_time
  2085  0559  3004               	movlw	4
  2086  055A                     u1155:	
  2087  055A  1003               	clrc
  2088  055B  0CF6               	rrf	??_get_time,f
  2089  055C  3EFF               	addlw	-1
  2090  055D  1D03               	skipz
  2091  055E  2D5A               	goto	u1155
  2092  055F  0876               	movf	??_get_time,w
  2093  0560  3E30               	addlw	48
  2094  0561  00F7               	movwf	??_get_time+1
  2095  0562  0877               	movf	??_get_time+1,w
  2096  0563  00A3               	movwf	get_time@string_time+3
  2097                           
  2098                           ;mainMaster.c: 167:     string_time[4] = (min & 0x0F) + '0';
  2099  0564  0827               	movf	get_time@min,w
  2100  0565  390F               	andlw	15
  2101  0566  3E30               	addlw	48
  2102  0567  00F6               	movwf	??_get_time
  2103  0568  0876               	movf	??_get_time,w
  2104  0569  00A4               	movwf	get_time@string_time+4
  2105                           
  2106                           ;mainMaster.c: 168:     string_time[5] = '\0';
  2107  056A  01A5               	clrf	get_time@string_time+5
  2108                           
  2109                           ;mainMaster.c: 170:     return (string_time);
  2110  056B  3020               	movlw	(low (get_time@string_time| 0))& (0+255)
  2111  056C  0008               	return
  2112  056D                     __end_of_get_time:	
  2113                           
  2114                           	psect	text9
  2115  056D                     __ptext9:	
  2116 ;; *************** function _get_temp *****************
  2117 ;; Defined at:
  2118 ;;		line 187 in file "mainMaster.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;		None
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;  temperature     6   16[BANK0 ] unsigned char [6]
  2123 ;;  decimal         3   22[BANK0 ] unsigned char [3]
  2124 ;;  tempLSB         1   26[BANK0 ] unsigned char 
  2125 ;;  tempMSB         1   25[BANK0 ] unsigned char 
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  1    wreg      PTR unsigned char 
  2128 ;; Registers used:
  2129 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2135 ;;      Params:         0       0       0       0       0
  2136 ;;      Locals:         0      11       0       0       0
  2137 ;;      Temps:          0       3       0       0       0
  2138 ;;      Totals:         0      14       0       0       0
  2139 ;;Total ram usage:       14 bytes
  2140 ;; Hardware stack levels used:    1
  2141 ;; Hardware stack levels required when called:    2
  2142 ;; This function calls:
  2143 ;;		_I2C_Master_Read
  2144 ;;		_I2C_Master_RepeatedStart
  2145 ;;		_I2C_Master_Start
  2146 ;;		_I2C_Master_Stop
  2147 ;;		_I2C_Master_Write
  2148 ;;		___bmul
  2149 ;;		_sprintf
  2150 ;;		_strcat
  2151 ;; This function is called by:
  2152 ;;		_main
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           
  2157                           ;psect for function _get_temp
  2158  056D                     _get_temp:	
  2159                           
  2160                           ;mainMaster.c: 188:     char tempLSB, tempMSB;;mainMaster.c: 189:     char temperature[6
      +                          ], decimal[3];;mainMaster.c: 191:     I2C_Master_Start();
  2161                           
  2162                           ;incstack = 0
  2163                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2164  056D  120A  118A  20ED  120A  118A  	fcall	_I2C_Master_Start
  2165                           
  2166                           ;mainMaster.c: 192:     I2C_Master_Write(0xD0);
  2167  0572  30D0               	movlw	208
  2168  0573  00F0               	movwf	I2C_Master_Write@d
  2169  0574  3000               	movlw	0
  2170  0575  00F1               	movwf	I2C_Master_Write@d+1
  2171  0576  120A  118A  2102  120A  118A  	fcall	_I2C_Master_Write
  2172                           
  2173                           ;mainMaster.c: 193:     I2C_Master_Write(0x11);
  2174  057B  3011               	movlw	17
  2175  057C  00F0               	movwf	I2C_Master_Write@d
  2176  057D  3000               	movlw	0
  2177  057E  00F1               	movwf	I2C_Master_Write@d+1
  2178  057F  120A  118A  2102  120A  118A  	fcall	_I2C_Master_Write
  2179                           
  2180                           ;mainMaster.c: 194:     I2C_Master_RepeatedStart();
  2181  0584  120A  118A  20FB  120A  118A  	fcall	_I2C_Master_RepeatedStart
  2182                           
  2183                           ;mainMaster.c: 195:     I2C_Master_Write(0xD1);
  2184  0589  30D1               	movlw	209
  2185  058A  00F0               	movwf	I2C_Master_Write@d
  2186  058B  3000               	movlw	0
  2187  058C  00F1               	movwf	I2C_Master_Write@d+1
  2188  058D  120A  118A  2102  120A  118A  	fcall	_I2C_Master_Write
  2189                           
  2190                           ;mainMaster.c: 196:     tempMSB = I2C_Master_Read(1);
  2191  0592  3001               	movlw	1
  2192  0593  00F0               	movwf	I2C_Master_Read@a
  2193  0594  3000               	movlw	0
  2194  0595  00F1               	movwf	I2C_Master_Read@a+1
  2195  0596  120A  118A  222D  120A  118A  	fcall	_I2C_Master_Read
  2196  059B  0870               	movf	?_I2C_Master_Read,w
  2197  059C  1283               	bcf	3,5	;RP0=0, select bank0
  2198  059D  1303               	bcf	3,6	;RP1=0, select bank0
  2199  059E  00AD               	movwf	??_get_temp
  2200  059F  082D               	movf	??_get_temp,w
  2201  05A0  00B9               	movwf	get_temp@tempMSB
  2202                           
  2203                           ;mainMaster.c: 197:     tempLSB = I2C_Master_Read(0);
  2204  05A1  3000               	movlw	0
  2205  05A2  00F0               	movwf	I2C_Master_Read@a
  2206  05A3  00F1               	movwf	I2C_Master_Read@a+1
  2207  05A4  120A  118A  222D  120A  118A  	fcall	_I2C_Master_Read
  2208  05A9  0870               	movf	?_I2C_Master_Read,w
  2209  05AA  1283               	bcf	3,5	;RP0=0, select bank0
  2210  05AB  1303               	bcf	3,6	;RP1=0, select bank0
  2211  05AC  00AD               	movwf	??_get_temp
  2212  05AD  082D               	movf	??_get_temp,w
  2213  05AE  00BA               	movwf	get_temp@tempLSB
  2214                           
  2215                           ;mainMaster.c: 198:     I2C_Master_Stop();
  2216  05AF  120A  118A  20F4  120A  118A  	fcall	_I2C_Master_Stop
  2217                           
  2218                           ;mainMaster.c: 200:     tempMSB = tempMSB - 4;
  2219  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  2220  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  2221  05B6  0839               	movf	get_temp@tempMSB,w
  2222  05B7  3EFC               	addlw	252
  2223  05B8  00AD               	movwf	??_get_temp
  2224  05B9  082D               	movf	??_get_temp,w
  2225  05BA  00B9               	movwf	get_temp@tempMSB
  2226                           
  2227                           ;mainMaster.c: 201:     tempLSB = (tempLSB >> 6) * 25;
  2228  05BB  3019               	movlw	25
  2229  05BC  00AD               	movwf	??_get_temp
  2230  05BD  082D               	movf	??_get_temp,w
  2231  05BE  00F0               	movwf	___bmul@multiplicand
  2232  05BF  083A               	movf	get_temp@tempLSB,w
  2233  05C0  00AE               	movwf	??_get_temp+1
  2234  05C1  3006               	movlw	6
  2235  05C2                     u1125:	
  2236  05C2  1003               	clrc
  2237  05C3  0CAE               	rrf	??_get_temp+1,f
  2238  05C4  3EFF               	addlw	-1
  2239  05C5  1D03               	skipz
  2240  05C6  2DC2               	goto	u1125
  2241  05C7  082E               	movf	??_get_temp+1,w
  2242  05C8  120A  118A  211E  120A  118A  	fcall	___bmul
  2243  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  2244  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  2245  05CF  00AF               	movwf	??_get_temp+2
  2246  05D0  082F               	movf	??_get_temp+2,w
  2247  05D1  00BA               	movwf	get_temp@tempLSB
  2248                           
  2249                           ;mainMaster.c: 202:     sprintf(temperature, "%d", tempMSB);
  2250  05D2  3051               	movlw	(low (((STR_12+1)-__stringbase)| (0+32768)))& (0+255)
  2251  05D3  00AD               	movwf	??_get_temp
  2252  05D4  082D               	movf	??_get_temp,w
  2253  05D5  00A0               	movwf	sprintf@f
  2254  05D6  0839               	movf	get_temp@tempMSB,w
  2255  05D7  00AE               	movwf	??_get_temp+1
  2256  05D8  01AF               	clrf	??_get_temp+2
  2257  05D9  082E               	movf	??_get_temp+1,w
  2258  05DA  00A1               	movwf	?_sprintf+1
  2259  05DB  082F               	movf	??_get_temp+2,w
  2260  05DC  00A2               	movwf	?_sprintf+2
  2261  05DD  3030               	movlw	(low (get_temp@temperature| 0))& (0+255)
  2262  05DE  120A  118A  260A  120A  118A  	fcall	_sprintf
  2263                           
  2264                           ;mainMaster.c: 203:     if (tempLSB == 0){
  2265  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  2266  05E4  1303               	bcf	3,6	;RP1=0, select bank0
  2267  05E5  083A               	movf	get_temp@tempLSB,w
  2268  05E6  1D03               	btfss	3,2
  2269  05E7  2DEA               	goto	l1770
  2270                           
  2271                           ;mainMaster.c: 204:         sprintf(decimal, ".%d0", tempLSB);
  2272  05E8  304B               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2273  05E9  2DEB               	goto	L9
  2274  05EA                     l1770:	
  2275                           ;mainMaster.c: 205:     } else {
  2276                           
  2277                           
  2278                           ;mainMaster.c: 206:         sprintf(decimal, ".%d", tempLSB);
  2279  05EA  3050               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2280  05EB                     L9:	
  2281  05EB  00AD               	movwf	??_get_temp
  2282  05EC  082D               	movf	??_get_temp,w
  2283  05ED  00A0               	movwf	sprintf@f
  2284  05EE  083A               	movf	get_temp@tempLSB,w
  2285  05EF  00AE               	movwf	??_get_temp+1
  2286  05F0  01AF               	clrf	??_get_temp+2
  2287  05F1  082E               	movf	??_get_temp+1,w
  2288  05F2  00A1               	movwf	?_sprintf+1
  2289  05F3  082F               	movf	??_get_temp+2,w
  2290  05F4  00A2               	movwf	?_sprintf+2
  2291  05F5  3036               	movlw	(low (get_temp@decimal| 0))& (0+255)
  2292  05F6  120A  118A  260A  120A  118A  	fcall	_sprintf
  2293                           
  2294                           ;mainMaster.c: 208:     strcat(temperature, decimal);
  2295  05FB  3036               	movlw	(low (get_temp@decimal| 0))& (0+255)
  2296  05FC  1283               	bcf	3,5	;RP0=0, select bank0
  2297  05FD  1303               	bcf	3,6	;RP1=0, select bank0
  2298  05FE  00AD               	movwf	??_get_temp
  2299  05FF  082D               	movf	??_get_temp,w
  2300  0600  00F0               	movwf	strcat@from
  2301  0601  3030               	movlw	(low (get_temp@temperature| 0))& (0+255)
  2302  0602  120A  118A  21DF   	fcall	_strcat
  2303                           
  2304                           ;mainMaster.c: 209:     temperature[5] = '\0';
  2305  0605  1283               	bcf	3,5	;RP0=0, select bank0
  2306  0606  1303               	bcf	3,6	;RP1=0, select bank0
  2307  0607  01B5               	clrf	get_temp@temperature+5
  2308                           
  2309                           ;mainMaster.c: 211:     return (temperature);
  2310  0608  3030               	movlw	(low (get_temp@temperature| 0))& (0+255)
  2311  0609  0008               	return
  2312  060A                     __end_of_get_temp:	
  2313                           
  2314                           	psect	text10
  2315  01DF                     __ptext10:	
  2316 ;; *************** function _strcat *****************
  2317 ;; Defined at:
  2318 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;  to              1    wreg     PTR unsigned char 
  2321 ;;		 -> get_temp@temperature(6), 
  2322 ;;  from            1    0[COMMON] PTR const unsigned char 
  2323 ;;		 -> get_temp@decimal(3), 
  2324 ;; Auto vars:     Size  Location     Type
  2325 ;;  to              1    2[COMMON] PTR unsigned char 
  2326 ;;		 -> get_temp@temperature(6), 
  2327 ;;  cp              1    3[COMMON] PTR unsigned char 
  2328 ;;		 -> get_temp@temperature(6), 
  2329 ;; Return value:  Size  Location     Type
  2330 ;;                  1    wreg      PTR unsigned char 
  2331 ;; Registers used:
  2332 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2333 ;; Tracked objects:
  2334 ;;		On entry : 0/0
  2335 ;;		On exit  : 0/0
  2336 ;;		Unchanged: 0/0
  2337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2338 ;;      Params:         1       0       0       0       0
  2339 ;;      Locals:         2       0       0       0       0
  2340 ;;      Temps:          1       0       0       0       0
  2341 ;;      Totals:         4       0       0       0       0
  2342 ;;Total ram usage:        4 bytes
  2343 ;; Hardware stack levels used:    1
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_get_temp
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           
  2352                           ;psect for function _strcat
  2353  01DF                     _strcat:	
  2354                           
  2355                           ;incstack = 0
  2356                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  2357                           ;strcat@to stored from wreg
  2358  01DF  00F2               	movwf	strcat@to
  2359  01E0  0872               	movf	strcat@to,w
  2360  01E1  00F1               	movwf	??_strcat
  2361  01E2  0871               	movf	??_strcat,w
  2362  01E3  00F3               	movwf	strcat@cp
  2363  01E4                     l1686:	
  2364  01E4  0873               	movf	strcat@cp,w
  2365  01E5  0084               	movwf	4
  2366  01E6  1383               	bcf	3,7	;select IRP bank0
  2367  01E7  0800               	movf	0,w
  2368  01E8  1903               	btfsc	3,2
  2369  01E9  29F7               	goto	l1690
  2370  01EA  3001               	movlw	1
  2371  01EB  00F1               	movwf	??_strcat
  2372  01EC  0871               	movf	??_strcat,w
  2373  01ED  07F3               	addwf	strcat@cp,f
  2374  01EE  29E4               	goto	l1686
  2375  01EF                     l1688:	
  2376  01EF  3001               	movlw	1
  2377  01F0  00F1               	movwf	??_strcat
  2378  01F1  0871               	movf	??_strcat,w
  2379  01F2  07F3               	addwf	strcat@cp,f
  2380  01F3  3001               	movlw	1
  2381  01F4  00F1               	movwf	??_strcat
  2382  01F5  0871               	movf	??_strcat,w
  2383  01F6  07F0               	addwf	strcat@from,f
  2384  01F7                     l1690:	
  2385  01F7  0870               	movf	strcat@from,w
  2386  01F8  0084               	movwf	4
  2387  01F9  0800               	movf	0,w
  2388  01FA  00F1               	movwf	??_strcat
  2389  01FB  0873               	movf	strcat@cp,w
  2390  01FC  0084               	movwf	4
  2391  01FD  0871               	movf	??_strcat,w
  2392  01FE  0080               	movwf	0
  2393  01FF  0800               	movf	0,w
  2394  0200  1903               	btfsc	3,2
  2395  0201  0008               	return
  2396  0202  29EF               	goto	l1688
  2397  0203                     __end_of_strcat:	
  2398                           
  2399                           	psect	text11
  2400  060A                     __ptext11:	
  2401 ;; *************** function _sprintf *****************
  2402 ;; Defined at:
  2403 ;;		line 500 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;  sp              1    wreg     PTR unsigned char 
  2406 ;;		 -> get_temp@decimal(3), get_temp@temperature(6), 
  2407 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  2408 ;;		 -> STR_12(4), STR_11(5), STR_10(3), 
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  2411 ;;		 -> get_temp@decimal(3), get_temp@temperature(6), 
  2412 ;;  tmpval          4    0        struct .
  2413 ;;  val             2    9[BANK0 ] unsigned int 
  2414 ;;  cp              2    0        PTR const unsigned char 
  2415 ;;  len             2    0        unsigned int 
  2416 ;;  c               1   12[BANK0 ] unsigned char 
  2417 ;;  prec            1    8[BANK0 ] char 
  2418 ;;  flag            1    7[BANK0 ] unsigned char 
  2419 ;;  ap              1    6[BANK0 ] PTR void [1]
  2420 ;;		 -> ?_sprintf(2), 
  2421 ;; Return value:  Size  Location     Type
  2422 ;;                  2    0[BANK0 ] int 
  2423 ;; Registers used:
  2424 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2425 ;; Tracked objects:
  2426 ;;		On entry : 0/0
  2427 ;;		On exit  : 0/0
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2430 ;;      Params:         0       3       0       0       0
  2431 ;;      Locals:         0       7       0       0       0
  2432 ;;      Temps:          0       3       0       0       0
  2433 ;;      Totals:         0      13       0       0       0
  2434 ;;Total ram usage:       13 bytes
  2435 ;; Hardware stack levels used:    1
  2436 ;; Hardware stack levels required when called:    1
  2437 ;; This function calls:
  2438 ;;		___lwdiv
  2439 ;;		___lwmod
  2440 ;; This function is called by:
  2441 ;;		_get_temp
  2442 ;; This function uses a non-reentrant model
  2443 ;;
  2444                           
  2445                           
  2446                           ;psect for function _sprintf
  2447  060A                     _sprintf:	
  2448                           
  2449                           ;incstack = 0
  2450                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2451                           ;sprintf@sp stored from wreg
  2452  060A  1283               	bcf	3,5	;RP0=0, select bank0
  2453  060B  1303               	bcf	3,6	;RP1=0, select bank0
  2454  060C  00AB               	movwf	sprintf@sp
  2455                           
  2456                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;D:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  2457  060D  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2458  060E  00A3               	movwf	??_sprintf
  2459  060F  0823               	movf	??_sprintf,w
  2460  0610  00A6               	movwf	sprintf@ap
  2461  0611                     l1672:	
  2462                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  2463                           
  2464                           
  2465                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  2466  0611  3001               	movlw	1
  2467  0612  07A0               	addwf	sprintf@f,f
  2468  0613  30FF               	movlw	-1
  2469  0614  0720               	addwf	sprintf@f,w
  2470  0615  0084               	movwf	4
  2471  0616  120A  118A  200D  120A  118A  	fcall	stringdir
  2472  061B  00A3               	movwf	??_sprintf
  2473  061C  0823               	movf	??_sprintf,w
  2474  061D  00AC               	movwf	sprintf@c
  2475  061E  082C               	movf	sprintf@c,w
  2476  061F  1903               	btfsc	3,2
  2477  0620  2EDD               	goto	l1674
  2478                           
  2479                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  2480  0621  3025               	movlw	37
  2481  0622  062C               	xorwf	sprintf@c,w
  2482  0623  1903               	btfsc	3,2
  2483  0624  2E31               	goto	l1628
  2484                           
  2485                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;D:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  2486  0625  082C               	movf	sprintf@c,w
  2487  0626  00A3               	movwf	??_sprintf
  2488  0627  082B               	movf	sprintf@sp,w
  2489  0628  0084               	movwf	4
  2490  0629  0823               	movf	??_sprintf,w
  2491  062A  1383               	bcf	3,7	;select IRP bank0
  2492  062B  0080               	movwf	0
  2493  062C  3001               	movlw	1
  2494  062D  00A3               	movwf	??_sprintf
  2495  062E  0823               	movf	??_sprintf,w
  2496  062F  07AB               	addwf	sprintf@sp,f
  2497                           
  2498                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  2499  0630  2E11               	goto	l1672
  2500  0631                     l1628:	
  2501                           
  2502                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  2503  0631  01A7               	clrf	sprintf@flag
  2504                           
  2505                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  2506  0632  3001               	movlw	1
  2507  0633  07A0               	addwf	sprintf@f,f
  2508  0634  30FF               	movlw	-1
  2509  0635  0720               	addwf	sprintf@f,w
  2510  0636  0084               	movwf	4
  2511  0637  120A  118A  200D  120A  118A  	fcall	stringdir
  2512  063C  00AC               	movwf	sprintf@c
  2513  063D  00A3               	movwf	??_sprintf
  2514  063E  01A4               	clrf	??_sprintf+1
  2515                           
  2516                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2517                           ; Switch size 1, requested type "simple"
  2518                           ; Number of cases is 1, Range of values is 0 to 0
  2519                           ; switch strategies available:
  2520                           ; Name         Instructions Cycles
  2521                           ; simple_byte            4     3 (average)
  2522                           ; direct_byte           11     8 (fixed)
  2523                           ; jumptable            260     6 (fixed)
  2524                           ;	Chosen strategy is simple_byte
  2525  063F  0824               	movf	??_sprintf+1,w
  2526  0640  3A00               	xorlw	0	; case 0
  2527  0641  1903               	skipnz
  2528  0642  2E44               	goto	l1968
  2529  0643  2E11               	goto	l1672
  2530  0644                     l1968:	
  2531                           
  2532                           ; Switch size 1, requested type "simple"
  2533                           ; Number of cases is 3, Range of values is 0 to 105
  2534                           ; switch strategies available:
  2535                           ; Name         Instructions Cycles
  2536                           ; simple_byte           10     6 (average)
  2537                           ; jumptable            260     6 (fixed)
  2538                           ;	Chosen strategy is simple_byte
  2539  0644  0823               	movf	??_sprintf,w
  2540  0645  3A00               	xorlw	0	; case 0
  2541  0646  1903               	skipnz
  2542  0647  2EDD               	goto	l1674
  2543  0648  3A64               	xorlw	100	; case 100
  2544  0649  1903               	skipnz
  2545  064A  2E4F               	goto	l1634
  2546  064B  3A0D               	xorlw	13	; case 105
  2547  064C  1903               	skipnz
  2548  064D  2E4F               	goto	l1634
  2549  064E  2E11               	goto	l1672
  2550  064F                     l1634:	
  2551                           
  2552                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2553  064F  0826               	movf	sprintf@ap,w
  2554  0650  0084               	movwf	4
  2555  0651  1383               	bcf	3,7	;select IRP bank0
  2556  0652  0800               	movf	0,w
  2557  0653  00A9               	movwf	sprintf@val
  2558  0654  0A84               	incf	4,f
  2559  0655  0800               	movf	0,w
  2560  0656  00AA               	movwf	sprintf@val+1
  2561  0657  3002               	movlw	2
  2562  0658  00A3               	movwf	??_sprintf
  2563  0659  0823               	movf	??_sprintf,w
  2564  065A  07A6               	addwf	sprintf@ap,f
  2565                           
  2566                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  2567  065B  1FAA               	btfss	sprintf@val+1,7
  2568  065C  2E66               	goto	l1644
  2569                           
  2570                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  2571  065D  3003               	movlw	3
  2572  065E  00A3               	movwf	??_sprintf
  2573  065F  0823               	movf	??_sprintf,w
  2574  0660  04A7               	iorwf	sprintf@flag,f
  2575                           
  2576                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  2577  0661  09A9               	comf	sprintf@val,f
  2578  0662  09AA               	comf	sprintf@val+1,f
  2579  0663  0AA9               	incf	sprintf@val,f
  2580  0664  1903               	skipnz
  2581  0665  0AAA               	incf	sprintf@val+1,f
  2582  0666                     l1644:	
  2583                           
  2584                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2585  0666  01AC               	clrf	sprintf@c
  2586  0667  0AAC               	incf	sprintf@c,f
  2587  0668                     l1650:	
  2588                           
  2589                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  2590  0668  082C               	movf	sprintf@c,w
  2591  0669  00A3               	movwf	??_sprintf
  2592  066A  0723               	addwf	??_sprintf,w
  2593  066B  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2594  066C  0084               	movwf	4
  2595  066D  120A  118A  200D  120A  118A  	fcall	stringdir
  2596  0672  00A4               	movwf	??_sprintf+1
  2597  0673  120A  118A  200D  120A  118A  	fcall	stringdir
  2598  0678  00A5               	movwf	??_sprintf+2
  2599  0679  0825               	movf	??_sprintf+2,w
  2600  067A  022A               	subwf	sprintf@val+1,w
  2601  067B  1D03               	skipz
  2602  067C  2E7F               	goto	u965
  2603  067D  0824               	movf	??_sprintf+1,w
  2604  067E  0229               	subwf	sprintf@val,w
  2605  067F                     u965:	
  2606  067F  1C03               	btfss	3,0
  2607  0680  2E89               	goto	l1656
  2608  0681  3001               	movlw	1
  2609  0682  00A3               	movwf	??_sprintf
  2610  0683  0823               	movf	??_sprintf,w
  2611  0684  07AC               	addwf	sprintf@c,f
  2612  0685  3005               	movlw	5
  2613  0686  062C               	xorwf	sprintf@c,w
  2614  0687  1D03               	btfss	3,2
  2615  0688  2E68               	goto	l1650
  2616  0689                     l1656:	
  2617                           
  2618                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  2619  0689  0827               	movf	sprintf@flag,w
  2620  068A  3903               	andlw	3
  2621  068B  1903               	btfsc	3,2
  2622  068C  2E98               	goto	l1662
  2623                           
  2624                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  2625  068D  302D               	movlw	45
  2626  068E  00A3               	movwf	??_sprintf
  2627  068F  082B               	movf	sprintf@sp,w
  2628  0690  0084               	movwf	4
  2629  0691  0823               	movf	??_sprintf,w
  2630  0692  1383               	bcf	3,7	;select IRP bank0
  2631  0693  0080               	movwf	0
  2632  0694  3001               	movlw	1
  2633  0695  00A3               	movwf	??_sprintf
  2634  0696  0823               	movf	??_sprintf,w
  2635  0697  07AB               	addwf	sprintf@sp,f
  2636  0698                     l1662:	
  2637                           
  2638                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  2639  0698  082C               	movf	sprintf@c,w
  2640  0699  00A3               	movwf	??_sprintf
  2641  069A  0823               	movf	??_sprintf,w
  2642  069B  00A8               	movwf	sprintf@prec
  2643  069C                     l1670:	
  2644                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  2645                           
  2646                           
  2647                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  2648  069C  30FF               	movlw	255
  2649  069D  00A3               	movwf	??_sprintf
  2650  069E  0823               	movf	??_sprintf,w
  2651  069F  07A8               	addwf	sprintf@prec,f
  2652  06A0  0A28               	incf	sprintf@prec,w
  2653  06A1  1903               	btfsc	3,2
  2654  06A2  2E11               	goto	l1672
  2655                           
  2656                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  2657  06A3  300A               	movlw	10
  2658  06A4  00F8               	movwf	___lwmod@divisor
  2659  06A5  3000               	movlw	0
  2660  06A6  00F9               	movwf	___lwmod@divisor+1
  2661  06A7  0828               	movf	sprintf@prec,w
  2662  06A8  00A3               	movwf	??_sprintf
  2663  06A9  0723               	addwf	??_sprintf,w
  2664  06AA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2665  06AB  0084               	movwf	4
  2666  06AC  120A  118A  200D  120A  118A  	fcall	stringdir
  2667  06B1  00F0               	movwf	___lwdiv@divisor
  2668  06B2  120A  118A  200D  120A  118A  	fcall	stringdir
  2669  06B7  00F1               	movwf	___lwdiv@divisor+1
  2670  06B8  082A               	movf	sprintf@val+1,w
  2671  06B9  00F3               	movwf	___lwdiv@dividend+1
  2672  06BA  0829               	movf	sprintf@val,w
  2673  06BB  00F2               	movwf	___lwdiv@dividend
  2674  06BC  120A  118A  2326  120A  118A  	fcall	___lwdiv
  2675  06C1  0871               	movf	?___lwdiv+1,w
  2676  06C2  00FB               	movwf	___lwmod@dividend+1
  2677  06C3  0870               	movf	?___lwdiv,w
  2678  06C4  00FA               	movwf	___lwmod@dividend
  2679  06C5  120A  118A  2285  120A  118A  	fcall	___lwmod
  2680  06CA  0878               	movf	?___lwmod,w
  2681  06CB  3E30               	addlw	48
  2682  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  2683  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  2684  06CE  00A4               	movwf	??_sprintf+1
  2685  06CF  0824               	movf	??_sprintf+1,w
  2686  06D0  00AC               	movwf	sprintf@c
  2687                           
  2688                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  2689  06D1  082C               	movf	sprintf@c,w
  2690  06D2  00A3               	movwf	??_sprintf
  2691  06D3  082B               	movf	sprintf@sp,w
  2692  06D4  0084               	movwf	4
  2693  06D5  0823               	movf	??_sprintf,w
  2694  06D6  1383               	bcf	3,7	;select IRP bank0
  2695  06D7  0080               	movwf	0
  2696  06D8  3001               	movlw	1
  2697  06D9  00A3               	movwf	??_sprintf
  2698  06DA  0823               	movf	??_sprintf,w
  2699  06DB  07AB               	addwf	sprintf@sp,f
  2700  06DC  2E9C               	goto	l1670
  2701  06DD                     l1674:	
  2702                           
  2703                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  2704  06DD  082B               	movf	sprintf@sp,w
  2705  06DE  0084               	movwf	4
  2706  06DF  1383               	bcf	3,7	;select IRP bank0
  2707  06E0  0180               	clrf	0
  2708  06E1  0008               	return
  2709  06E2                     __end_of_sprintf:	
  2710                           
  2711                           	psect	text12
  2712  0285                     __ptext12:	
  2713 ;; *************** function ___lwmod *****************
  2714 ;; Defined at:
  2715 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;  divisor         2    8[COMMON] unsigned int 
  2718 ;;  dividend        2   10[COMMON] unsigned int 
  2719 ;; Auto vars:     Size  Location     Type
  2720 ;;  counter         1   13[COMMON] unsigned char 
  2721 ;; Return value:  Size  Location     Type
  2722 ;;                  2    8[COMMON] unsigned int 
  2723 ;; Registers used:
  2724 ;;		wreg, status,2, status,0
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2730 ;;      Params:         4       0       0       0       0
  2731 ;;      Locals:         1       0       0       0       0
  2732 ;;      Temps:          1       0       0       0       0
  2733 ;;      Totals:         6       0       0       0       0
  2734 ;;Total ram usage:        6 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; This function calls:
  2737 ;;		Nothing
  2738 ;; This function is called by:
  2739 ;;		_sprintf
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           
  2744                           ;psect for function ___lwmod
  2745  0285                     ___lwmod:	
  2746                           
  2747                           ;incstack = 0
  2748                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2749  0285  0878               	movf	___lwmod@divisor,w
  2750  0286  0479               	iorwf	___lwmod@divisor+1,w
  2751  0287  1903               	btfsc	3,2
  2752  0288  2AB2               	goto	l1514
  2753  0289  01FD               	clrf	___lwmod@counter
  2754  028A  0AFD               	incf	___lwmod@counter,f
  2755  028B                     l1504:	
  2756  028B  1BF9               	btfsc	___lwmod@divisor+1,7
  2757  028C  2A99               	goto	l1506
  2758  028D  3001               	movlw	1
  2759  028E                     u865:	
  2760  028E  1003               	clrc
  2761  028F  0DF8               	rlf	___lwmod@divisor,f
  2762  0290  0DF9               	rlf	___lwmod@divisor+1,f
  2763  0291  3EFF               	addlw	-1
  2764  0292  1D03               	skipz
  2765  0293  2A8E               	goto	u865
  2766  0294  3001               	movlw	1
  2767  0295  00FC               	movwf	??___lwmod
  2768  0296  087C               	movf	??___lwmod,w
  2769  0297  07FD               	addwf	___lwmod@counter,f
  2770  0298  2A8B               	goto	l1504
  2771  0299                     l1506:	
  2772  0299  0879               	movf	___lwmod@divisor+1,w
  2773  029A  027B               	subwf	___lwmod@dividend+1,w
  2774  029B  1D03               	skipz
  2775  029C  2A9F               	goto	u885
  2776  029D  0878               	movf	___lwmod@divisor,w
  2777  029E  027A               	subwf	___lwmod@dividend,w
  2778  029F                     u885:	
  2779  029F  1C03               	skipc
  2780  02A0  2AA7               	goto	l1510
  2781  02A1  0878               	movf	___lwmod@divisor,w
  2782  02A2  02FA               	subwf	___lwmod@dividend,f
  2783  02A3  0879               	movf	___lwmod@divisor+1,w
  2784  02A4  1C03               	skipc
  2785  02A5  03FB               	decf	___lwmod@dividend+1,f
  2786  02A6  02FB               	subwf	___lwmod@dividend+1,f
  2787  02A7                     l1510:	
  2788  02A7  3001               	movlw	1
  2789  02A8                     u895:	
  2790  02A8  1003               	clrc
  2791  02A9  0CF9               	rrf	___lwmod@divisor+1,f
  2792  02AA  0CF8               	rrf	___lwmod@divisor,f
  2793  02AB  3EFF               	addlw	-1
  2794  02AC  1D03               	skipz
  2795  02AD  2AA8               	goto	u895
  2796  02AE  3001               	movlw	1
  2797  02AF  02FD               	subwf	___lwmod@counter,f
  2798  02B0  1D03               	btfss	3,2
  2799  02B1  2A99               	goto	l1506
  2800  02B2                     l1514:	
  2801  02B2  087B               	movf	___lwmod@dividend+1,w
  2802  02B3  00F9               	movwf	?___lwmod+1
  2803  02B4  087A               	movf	___lwmod@dividend,w
  2804  02B5  00F8               	movwf	?___lwmod
  2805  02B6  0008               	return
  2806  02B7                     __end_of___lwmod:	
  2807                           
  2808                           	psect	text13
  2809  0326                     __ptext13:	
  2810 ;; *************** function ___lwdiv *****************
  2811 ;; Defined at:
  2812 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;  divisor         2    0[COMMON] unsigned int 
  2815 ;;  dividend        2    2[COMMON] unsigned int 
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;  quotient        2    5[COMMON] unsigned int 
  2818 ;;  counter         1    7[COMMON] unsigned char 
  2819 ;; Return value:  Size  Location     Type
  2820 ;;                  2    0[COMMON] unsigned int 
  2821 ;; Registers used:
  2822 ;;		wreg, status,2, status,0
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2828 ;;      Params:         4       0       0       0       0
  2829 ;;      Locals:         3       0       0       0       0
  2830 ;;      Temps:          1       0       0       0       0
  2831 ;;      Totals:         8       0       0       0       0
  2832 ;;Total ram usage:        8 bytes
  2833 ;; Hardware stack levels used:    1
  2834 ;; This function calls:
  2835 ;;		Nothing
  2836 ;; This function is called by:
  2837 ;;		_sprintf
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           
  2842                           ;psect for function ___lwdiv
  2843  0326                     ___lwdiv:	
  2844                           
  2845                           ;incstack = 0
  2846                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2847  0326  01F5               	clrf	___lwdiv@quotient
  2848  0327  01F6               	clrf	___lwdiv@quotient+1
  2849  0328  0870               	movf	___lwdiv@divisor,w
  2850  0329  0471               	iorwf	___lwdiv@divisor+1,w
  2851  032A  1903               	btfsc	3,2
  2852  032B  2B5D               	goto	l1492
  2853  032C  01F7               	clrf	___lwdiv@counter
  2854  032D  0AF7               	incf	___lwdiv@counter,f
  2855  032E                     l1480:	
  2856  032E  1BF1               	btfsc	___lwdiv@divisor+1,7
  2857  032F  2B3C               	goto	l1482
  2858  0330  3001               	movlw	1
  2859  0331                     u795:	
  2860  0331  1003               	clrc
  2861  0332  0DF0               	rlf	___lwdiv@divisor,f
  2862  0333  0DF1               	rlf	___lwdiv@divisor+1,f
  2863  0334  3EFF               	addlw	-1
  2864  0335  1D03               	skipz
  2865  0336  2B31               	goto	u795
  2866  0337  3001               	movlw	1
  2867  0338  00F4               	movwf	??___lwdiv
  2868  0339  0874               	movf	??___lwdiv,w
  2869  033A  07F7               	addwf	___lwdiv@counter,f
  2870  033B  2B2E               	goto	l1480
  2871  033C                     l1482:	
  2872  033C  3001               	movlw	1
  2873  033D                     u815:	
  2874  033D  1003               	clrc
  2875  033E  0DF5               	rlf	___lwdiv@quotient,f
  2876  033F  0DF6               	rlf	___lwdiv@quotient+1,f
  2877  0340  3EFF               	addlw	-1
  2878  0341  1D03               	skipz
  2879  0342  2B3D               	goto	u815
  2880  0343  0871               	movf	___lwdiv@divisor+1,w
  2881  0344  0273               	subwf	___lwdiv@dividend+1,w
  2882  0345  1D03               	skipz
  2883  0346  2B49               	goto	u825
  2884  0347  0870               	movf	___lwdiv@divisor,w
  2885  0348  0272               	subwf	___lwdiv@dividend,w
  2886  0349                     u825:	
  2887  0349  1C03               	skipc
  2888  034A  2B52               	goto	l1488
  2889  034B  0870               	movf	___lwdiv@divisor,w
  2890  034C  02F2               	subwf	___lwdiv@dividend,f
  2891  034D  0871               	movf	___lwdiv@divisor+1,w
  2892  034E  1C03               	skipc
  2893  034F  03F3               	decf	___lwdiv@dividend+1,f
  2894  0350  02F3               	subwf	___lwdiv@dividend+1,f
  2895  0351  1475               	bsf	___lwdiv@quotient,0
  2896  0352                     l1488:	
  2897  0352  3001               	movlw	1
  2898  0353                     u835:	
  2899  0353  1003               	clrc
  2900  0354  0CF1               	rrf	___lwdiv@divisor+1,f
  2901  0355  0CF0               	rrf	___lwdiv@divisor,f
  2902  0356  3EFF               	addlw	-1
  2903  0357  1D03               	skipz
  2904  0358  2B53               	goto	u835
  2905  0359  3001               	movlw	1
  2906  035A  02F7               	subwf	___lwdiv@counter,f
  2907  035B  1D03               	btfss	3,2
  2908  035C  2B3C               	goto	l1482
  2909  035D                     l1492:	
  2910  035D  0876               	movf	___lwdiv@quotient+1,w
  2911  035E  00F1               	movwf	?___lwdiv+1
  2912  035F  0875               	movf	___lwdiv@quotient,w
  2913  0360  00F0               	movwf	?___lwdiv
  2914  0361  0008               	return
  2915  0362                     __end_of___lwdiv:	
  2916                           
  2917                           	psect	text14
  2918  011E                     __ptext14:	
  2919 ;; *************** function ___bmul *****************
  2920 ;; Defined at:
  2921 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;  multiplier      1    wreg     unsigned char 
  2924 ;;  multiplicand    1    0[COMMON] unsigned char 
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;  multiplier      1    3[COMMON] unsigned char 
  2927 ;;  product         1    2[COMMON] unsigned char 
  2928 ;; Return value:  Size  Location     Type
  2929 ;;                  1    wreg      unsigned char 
  2930 ;; Registers used:
  2931 ;;		wreg, status,2, status,0
  2932 ;; Tracked objects:
  2933 ;;		On entry : 0/0
  2934 ;;		On exit  : 0/0
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2937 ;;      Params:         1       0       0       0       0
  2938 ;;      Locals:         2       0       0       0       0
  2939 ;;      Temps:          1       0       0       0       0
  2940 ;;      Totals:         4       0       0       0       0
  2941 ;;Total ram usage:        4 bytes
  2942 ;; Hardware stack levels used:    1
  2943 ;; This function calls:
  2944 ;;		Nothing
  2945 ;; This function is called by:
  2946 ;;		_get_temp
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950                           
  2951                           ;psect for function ___bmul
  2952  011E                     ___bmul:	
  2953                           
  2954                           ;incstack = 0
  2955                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2956                           ;___bmul@multiplier stored from wreg
  2957  011E  00F3               	movwf	___bmul@multiplier
  2958  011F  01F2               	clrf	___bmul@product
  2959  0120                     l1694:	
  2960  0120  1C73               	btfss	___bmul@multiplier,0
  2961  0121  2926               	goto	l1698
  2962  0122  0870               	movf	___bmul@multiplicand,w
  2963  0123  00F1               	movwf	??___bmul
  2964  0124  0871               	movf	??___bmul,w
  2965  0125  07F2               	addwf	___bmul@product,f
  2966  0126                     l1698:	
  2967  0126  1003               	clrc
  2968  0127  0DF0               	rlf	___bmul@multiplicand,f
  2969  0128  1003               	clrc
  2970  0129  0CF3               	rrf	___bmul@multiplier,f
  2971  012A  0873               	movf	___bmul@multiplier,w
  2972  012B  1D03               	btfss	3,2
  2973  012C  2920               	goto	l1694
  2974  012D  0872               	movf	___bmul@product,w
  2975  012E  0008               	return
  2976  012F                     __end_of___bmul:	
  2977                           
  2978                           	psect	text15
  2979  00FB                     __ptext15:	
  2980 ;; *************** function _I2C_Master_RepeatedStart *****************
  2981 ;; Defined at:
  2982 ;;		line 47 in file "./I2C.h"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;		None
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;		None
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  1    wreg      void 
  2989 ;; Registers used:
  2990 ;;		wreg, status,2, status,0, pclath, cstack
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2996 ;;      Params:         0       0       0       0       0
  2997 ;;      Locals:         0       0       0       0       0
  2998 ;;      Temps:          0       0       0       0       0
  2999 ;;      Totals:         0       0       0       0       0
  3000 ;;Total ram usage:        0 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; Hardware stack levels required when called:    1
  3003 ;; This function calls:
  3004 ;;		_I2C_Master_Wait
  3005 ;; This function is called by:
  3006 ;;		_get_time
  3007 ;;		_get_temp
  3008 ;;		_get_day
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           
  3013                           ;psect for function _I2C_Master_RepeatedStart
  3014  00FB                     _I2C_Master_RepeatedStart:	
  3015                           
  3016                           ;./I2C.h: 49:     I2C_Master_Wait();
  3017                           
  3018                           ;incstack = 0
  3019                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  3020  00FB  120A  118A  210A   	fcall	_I2C_Master_Wait
  3021                           
  3022                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  3023  00FE  1683               	bsf	3,5	;RP0=1, select bank1
  3024  00FF  1303               	bcf	3,6	;RP1=0, select bank1
  3025  0100  1491               	bsf	17,1	;volatile
  3026  0101  0008               	return
  3027  0102                     __end_of_I2C_Master_RepeatedStart:	
  3028                           
  3029                           	psect	text16
  3030  01A1                     __ptext16:	
  3031 ;; *************** function _get_hall *****************
  3032 ;; Defined at:
  3033 ;;		line 214 in file "mainMaster.c"
  3034 ;; Parameters:    Size  Location     Type
  3035 ;;		None
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;  key             1    7[COMMON] unsigned char 
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  1    wreg      unsigned char 
  3040 ;; Registers used:
  3041 ;;		wreg, status,2, status,0, pclath, cstack
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/0
  3044 ;;		On exit  : 0/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3047 ;;      Params:         0       0       0       0       0
  3048 ;;      Locals:         1       0       0       0       0
  3049 ;;      Temps:          1       0       0       0       0
  3050 ;;      Totals:         2       0       0       0       0
  3051 ;;Total ram usage:        2 bytes
  3052 ;; Hardware stack levels used:    1
  3053 ;; Hardware stack levels required when called:    2
  3054 ;; This function calls:
  3055 ;;		_I2C_Master_Read
  3056 ;;		_I2C_Master_Start
  3057 ;;		_I2C_Master_Stop
  3058 ;;		_I2C_Master_Write
  3059 ;; This function is called by:
  3060 ;;		_main
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           
  3065                           ;psect for function _get_hall
  3066  01A1                     _get_hall:	
  3067                           
  3068                           ;mainMaster.c: 215:     char key;;mainMaster.c: 217:     I2C_Master_Start();
  3069                           
  3070                           ;incstack = 0
  3071                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  3072  01A1  120A  118A  20ED  120A  118A  	fcall	_I2C_Master_Start
  3073                           
  3074                           ;mainMaster.c: 218:     I2C_Master_Write(0x11);
  3075  01A6  3011               	movlw	17
  3076  01A7  00F0               	movwf	I2C_Master_Write@d
  3077  01A8  3000               	movlw	0
  3078  01A9  00F1               	movwf	I2C_Master_Write@d+1
  3079  01AA  120A  118A  2102  120A  118A  	fcall	_I2C_Master_Write
  3080                           
  3081                           ;mainMaster.c: 219:     key = I2C_Master_Read(0);
  3082  01AF  3000               	movlw	0
  3083  01B0  00F0               	movwf	I2C_Master_Read@a
  3084  01B1  00F1               	movwf	I2C_Master_Read@a+1
  3085  01B2  120A  118A  222D  120A  118A  	fcall	_I2C_Master_Read
  3086  01B7  0870               	movf	?_I2C_Master_Read,w
  3087  01B8  00F6               	movwf	??_get_hall
  3088  01B9  0876               	movf	??_get_hall,w
  3089  01BA  00F7               	movwf	get_hall@key
  3090                           
  3091                           ;mainMaster.c: 220:     I2C_Master_Stop();
  3092  01BB  120A  118A  20F4   	fcall	_I2C_Master_Stop
  3093                           
  3094                           ;mainMaster.c: 222:     return (key);
  3095  01BE  0877               	movf	get_hall@key,w
  3096  01BF  0008               	return
  3097  01C0                     __end_of_get_hall:	
  3098                           
  3099                           	psect	text17
  3100  0182                     __ptext17:	
  3101 ;; *************** function _get_PIR *****************
  3102 ;; Defined at:
  3103 ;;		line 236 in file "mainMaster.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;		None
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;  PIR             1    7[COMMON] unsigned char 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  1    wreg      unsigned char 
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0, pclath, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3117 ;;      Params:         0       0       0       0       0
  3118 ;;      Locals:         1       0       0       0       0
  3119 ;;      Temps:          1       0       0       0       0
  3120 ;;      Totals:         2       0       0       0       0
  3121 ;;Total ram usage:        2 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    2
  3124 ;; This function calls:
  3125 ;;		_I2C_Master_Read
  3126 ;;		_I2C_Master_Start
  3127 ;;		_I2C_Master_Stop
  3128 ;;		_I2C_Master_Write
  3129 ;; This function is called by:
  3130 ;;		_main
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           
  3135                           ;psect for function _get_PIR
  3136  0182                     _get_PIR:	
  3137                           
  3138                           ;mainMaster.c: 237:     char PIR;;mainMaster.c: 239:     I2C_Master_Start();
  3139                           
  3140                           ;incstack = 0
  3141                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  3142  0182  120A  118A  20ED  120A  118A  	fcall	_I2C_Master_Start
  3143                           
  3144                           ;mainMaster.c: 240:     I2C_Master_Write(0x41);
  3145  0187  3041               	movlw	65
  3146  0188  00F0               	movwf	I2C_Master_Write@d
  3147  0189  3000               	movlw	0
  3148  018A  00F1               	movwf	I2C_Master_Write@d+1
  3149  018B  120A  118A  2102  120A  118A  	fcall	_I2C_Master_Write
  3150                           
  3151                           ;mainMaster.c: 241:     PIR = I2C_Master_Read(0);
  3152  0190  3000               	movlw	0
  3153  0191  00F0               	movwf	I2C_Master_Read@a
  3154  0192  00F1               	movwf	I2C_Master_Read@a+1
  3155  0193  120A  118A  222D  120A  118A  	fcall	_I2C_Master_Read
  3156  0198  0870               	movf	?_I2C_Master_Read,w
  3157  0199  00F6               	movwf	??_get_PIR
  3158  019A  0876               	movf	??_get_PIR,w
  3159  019B  00F7               	movwf	get_PIR@PIR
  3160                           
  3161                           ;mainMaster.c: 242:     I2C_Master_Stop();
  3162  019C  120A  118A  20F4   	fcall	_I2C_Master_Stop
  3163                           
  3164                           ;mainMaster.c: 244:     return (PIR);
  3165  019F  0877               	movf	get_PIR@PIR,w
  3166  01A0  0008               	return
  3167  01A1                     __end_of_get_PIR:	
  3168                           
  3169                           	psect	text18
  3170  0163                     __ptext18:	
  3171 ;; *************** function _get_IR *****************
  3172 ;; Defined at:
  3173 ;;		line 247 in file "mainMaster.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;		None
  3176 ;; Auto vars:     Size  Location     Type
  3177 ;;  IR              1    7[COMMON] unsigned char 
  3178 ;; Return value:  Size  Location     Type
  3179 ;;                  1    wreg      unsigned char 
  3180 ;; Registers used:
  3181 ;;		wreg, status,2, status,0, pclath, cstack
  3182 ;; Tracked objects:
  3183 ;;		On entry : 0/0
  3184 ;;		On exit  : 0/0
  3185 ;;		Unchanged: 0/0
  3186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3187 ;;      Params:         0       0       0       0       0
  3188 ;;      Locals:         1       0       0       0       0
  3189 ;;      Temps:          1       0       0       0       0
  3190 ;;      Totals:         2       0       0       0       0
  3191 ;;Total ram usage:        2 bytes
  3192 ;; Hardware stack levels used:    1
  3193 ;; Hardware stack levels required when called:    2
  3194 ;; This function calls:
  3195 ;;		_I2C_Master_Read
  3196 ;;		_I2C_Master_Start
  3197 ;;		_I2C_Master_Stop
  3198 ;;		_I2C_Master_Write
  3199 ;; This function is called by:
  3200 ;;		_main
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           
  3205                           ;psect for function _get_IR
  3206  0163                     _get_IR:	
  3207                           
  3208                           ;mainMaster.c: 248:     char IR;;mainMaster.c: 250:     I2C_Master_Start();
  3209                           
  3210                           ;incstack = 0
  3211                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  3212  0163  120A  118A  20ED  120A  118A  	fcall	_I2C_Master_Start
  3213                           
  3214                           ;mainMaster.c: 251:     I2C_Master_Write(0x31);
  3215  0168  3031               	movlw	49
  3216  0169  00F0               	movwf	I2C_Master_Write@d
  3217  016A  3000               	movlw	0
  3218  016B  00F1               	movwf	I2C_Master_Write@d+1
  3219  016C  120A  118A  2102  120A  118A  	fcall	_I2C_Master_Write
  3220                           
  3221                           ;mainMaster.c: 252:     IR = I2C_Master_Read(0);
  3222  0171  3000               	movlw	0
  3223  0172  00F0               	movwf	I2C_Master_Read@a
  3224  0173  00F1               	movwf	I2C_Master_Read@a+1
  3225  0174  120A  118A  222D  120A  118A  	fcall	_I2C_Master_Read
  3226  0179  0870               	movf	?_I2C_Master_Read,w
  3227  017A  00F6               	movwf	??_get_IR
  3228  017B  0876               	movf	??_get_IR,w
  3229  017C  00F7               	movwf	get_IR@IR
  3230                           
  3231                           ;mainMaster.c: 253:     I2C_Master_Stop();
  3232  017D  120A  118A  20F4   	fcall	_I2C_Master_Stop
  3233                           
  3234                           ;mainMaster.c: 255:     return (IR);
  3235  0180  0877               	movf	get_IR@IR,w
  3236  0181  0008               	return
  3237  0182                     __end_of_get_IR:	
  3238                           
  3239                           	psect	text19
  3240  0102                     __ptext19:	
  3241 ;; *************** function _I2C_Master_Write *****************
  3242 ;; Defined at:
  3243 ;;		line 65 in file "./I2C.h"
  3244 ;; Parameters:    Size  Location     Type
  3245 ;;  d               2    0[COMMON] unsigned int 
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;		None
  3248 ;; Return value:  Size  Location     Type
  3249 ;;                  1    wreg      void 
  3250 ;; Registers used:
  3251 ;;		wreg, status,2, status,0, pclath, cstack
  3252 ;; Tracked objects:
  3253 ;;		On entry : 0/0
  3254 ;;		On exit  : 0/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3257 ;;      Params:         2       0       0       0       0
  3258 ;;      Locals:         0       0       0       0       0
  3259 ;;      Temps:          0       0       0       0       0
  3260 ;;      Totals:         2       0       0       0       0
  3261 ;;Total ram usage:        2 bytes
  3262 ;; Hardware stack levels used:    1
  3263 ;; Hardware stack levels required when called:    1
  3264 ;; This function calls:
  3265 ;;		_I2C_Master_Wait
  3266 ;; This function is called by:
  3267 ;;		_get_time
  3268 ;;		_get_temp
  3269 ;;		_get_hall
  3270 ;;		_get_tripwire
  3271 ;;		_get_PIR
  3272 ;;		_get_IR
  3273 ;;		_write_RTC
  3274 ;;		_get_day
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           
  3279                           ;psect for function _I2C_Master_Write
  3280  0102                     _I2C_Master_Write:	
  3281                           
  3282                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  3283                           
  3284                           ;incstack = 0
  3285                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  3286  0102  120A  118A  210A   	fcall	_I2C_Master_Wait
  3287                           
  3288                           ;./I2C.h: 68:     SSPBUF = d;
  3289  0105  0870               	movf	I2C_Master_Write@d,w
  3290  0106  1283               	bcf	3,5	;RP0=0, select bank0
  3291  0107  1303               	bcf	3,6	;RP1=0, select bank0
  3292  0108  0093               	movwf	19	;volatile
  3293  0109  0008               	return
  3294  010A                     __end_of_I2C_Master_Write:	
  3295                           
  3296                           	psect	text20
  3297  00F4                     __ptext20:	
  3298 ;; *************** function _I2C_Master_Stop *****************
  3299 ;; Defined at:
  3300 ;;		line 55 in file "./I2C.h"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;		None
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;		None
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  1    wreg      void 
  3307 ;; Registers used:
  3308 ;;		wreg, status,2, status,0, pclath, cstack
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3314 ;;      Params:         0       0       0       0       0
  3315 ;;      Locals:         0       0       0       0       0
  3316 ;;      Temps:          0       0       0       0       0
  3317 ;;      Totals:         0       0       0       0       0
  3318 ;;Total ram usage:        0 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; Hardware stack levels required when called:    1
  3321 ;; This function calls:
  3322 ;;		_I2C_Master_Wait
  3323 ;; This function is called by:
  3324 ;;		_get_time
  3325 ;;		_get_temp
  3326 ;;		_get_hall
  3327 ;;		_get_tripwire
  3328 ;;		_get_PIR
  3329 ;;		_get_IR
  3330 ;;		_write_RTC
  3331 ;;		_get_day
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           
  3336                           ;psect for function _I2C_Master_Stop
  3337  00F4                     _I2C_Master_Stop:	
  3338                           
  3339                           ;./I2C.h: 57:     I2C_Master_Wait();
  3340                           
  3341                           ;incstack = 0
  3342                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  3343  00F4  120A  118A  210A   	fcall	_I2C_Master_Wait
  3344                           
  3345                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  3346  00F7  1683               	bsf	3,5	;RP0=1, select bank1
  3347  00F8  1303               	bcf	3,6	;RP1=0, select bank1
  3348  00F9  1511               	bsf	17,2	;volatile
  3349  00FA  0008               	return
  3350  00FB                     __end_of_I2C_Master_Stop:	
  3351                           
  3352                           	psect	text21
  3353  00ED                     __ptext21:	
  3354 ;; *************** function _I2C_Master_Start *****************
  3355 ;; Defined at:
  3356 ;;		line 39 in file "./I2C.h"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;		None
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;		None
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  1    wreg      void 
  3363 ;; Registers used:
  3364 ;;		wreg, status,2, status,0, pclath, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3370 ;;      Params:         0       0       0       0       0
  3371 ;;      Locals:         0       0       0       0       0
  3372 ;;      Temps:          0       0       0       0       0
  3373 ;;      Totals:         0       0       0       0       0
  3374 ;;Total ram usage:        0 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; Hardware stack levels required when called:    1
  3377 ;; This function calls:
  3378 ;;		_I2C_Master_Wait
  3379 ;; This function is called by:
  3380 ;;		_get_time
  3381 ;;		_get_temp
  3382 ;;		_get_hall
  3383 ;;		_get_tripwire
  3384 ;;		_get_PIR
  3385 ;;		_get_IR
  3386 ;;		_write_RTC
  3387 ;;		_get_day
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           
  3391                           
  3392                           ;psect for function _I2C_Master_Start
  3393  00ED                     _I2C_Master_Start:	
  3394                           
  3395                           ;./I2C.h: 41:     I2C_Master_Wait();
  3396                           
  3397                           ;incstack = 0
  3398                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  3399  00ED  120A  118A  210A   	fcall	_I2C_Master_Wait
  3400                           
  3401                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  3402  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  3403  00F1  1303               	bcf	3,6	;RP1=0, select bank1
  3404  00F2  1411               	bsf	17,0	;volatile
  3405  00F3  0008               	return
  3406  00F4                     __end_of_I2C_Master_Start:	
  3407                           
  3408                           	psect	text22
  3409  022D                     __ptext22:	
  3410 ;; *************** function _I2C_Master_Read *****************
  3411 ;; Defined at:
  3412 ;;		line 74 in file "./I2C.h"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;  a               2    0[COMMON] unsigned short 
  3415 ;; Auto vars:     Size  Location     Type
  3416 ;;  temp            2    4[COMMON] unsigned short 
  3417 ;; Return value:  Size  Location     Type
  3418 ;;                  2    0[COMMON] unsigned short 
  3419 ;; Registers used:
  3420 ;;		wreg, status,2, status,0, pclath, cstack
  3421 ;; Tracked objects:
  3422 ;;		On entry : 0/0
  3423 ;;		On exit  : 0/0
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3426 ;;      Params:         2       0       0       0       0
  3427 ;;      Locals:         2       0       0       0       0
  3428 ;;      Temps:          2       0       0       0       0
  3429 ;;      Totals:         6       0       0       0       0
  3430 ;;Total ram usage:        6 bytes
  3431 ;; Hardware stack levels used:    1
  3432 ;; Hardware stack levels required when called:    1
  3433 ;; This function calls:
  3434 ;;		_I2C_Master_Wait
  3435 ;; This function is called by:
  3436 ;;		_get_time
  3437 ;;		_get_temp
  3438 ;;		_get_hall
  3439 ;;		_get_tripwire
  3440 ;;		_get_PIR
  3441 ;;		_get_IR
  3442 ;;		_get_day
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           
  3447                           ;psect for function _I2C_Master_Read
  3448  022D                     _I2C_Master_Read:	
  3449                           
  3450                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  3451                           
  3452                           ;incstack = 0
  3453                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  3454  022D  120A  118A  210A  120A  118A  	fcall	_I2C_Master_Wait
  3455                           
  3456                           ;./I2C.h: 78:     RCEN = 1;
  3457  0232  1683               	bsf	3,5	;RP0=1, select bank1
  3458  0233  1303               	bcf	3,6	;RP1=0, select bank1
  3459  0234  1591               	bsf	17,3	;volatile
  3460                           
  3461                           ;./I2C.h: 79:     I2C_Master_Wait();
  3462  0235  120A  118A  210A  120A  118A  	fcall	_I2C_Master_Wait
  3463                           
  3464                           ;./I2C.h: 80:     temp = SSPBUF;
  3465  023A  1283               	bcf	3,5	;RP0=0, select bank0
  3466  023B  1303               	bcf	3,6	;RP1=0, select bank0
  3467  023C  0813               	movf	19,w	;volatile
  3468  023D  00F2               	movwf	??_I2C_Master_Read
  3469  023E  01F3               	clrf	??_I2C_Master_Read+1
  3470  023F  0872               	movf	??_I2C_Master_Read,w
  3471  0240  00F4               	movwf	I2C_Master_Read@temp
  3472  0241  0873               	movf	??_I2C_Master_Read+1,w
  3473  0242  00F5               	movwf	I2C_Master_Read@temp+1
  3474                           
  3475                           ;./I2C.h: 81:     I2C_Master_Wait();
  3476  0243  120A  118A  210A  120A  118A  	fcall	_I2C_Master_Wait
  3477                           
  3478                           ;./I2C.h: 83:     if(a == 1){
  3479  0248  0370               	decf	I2C_Master_Read@a,w
  3480  0249  0471               	iorwf	I2C_Master_Read@a+1,w
  3481  024A  1D03               	btfss	3,2
  3482  024B  2A50               	goto	l96
  3483                           
  3484                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  3485  024C  1683               	bsf	3,5	;RP0=1, select bank1
  3486  024D  1303               	bcf	3,6	;RP1=0, select bank1
  3487  024E  1291               	bcf	17,5	;volatile
  3488                           
  3489                           ;./I2C.h: 85:     }else{
  3490  024F  2A53               	goto	l97
  3491  0250                     l96:	
  3492                           
  3493                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  3494  0250  1683               	bsf	3,5	;RP0=1, select bank1
  3495  0251  1303               	bcf	3,6	;RP1=0, select bank1
  3496  0252  1691               	bsf	17,5	;volatile
  3497  0253                     l97:	
  3498                           ;./I2C.h: 87:     }
  3499                           
  3500                           
  3501                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  3502  0253  1611               	bsf	17,4	;volatile
  3503                           
  3504                           ;./I2C.h: 89:     return temp;
  3505  0254  0875               	movf	I2C_Master_Read@temp+1,w
  3506  0255  00F1               	movwf	?_I2C_Master_Read+1
  3507  0256  0874               	movf	I2C_Master_Read@temp,w
  3508  0257  00F0               	movwf	?_I2C_Master_Read
  3509  0258  0008               	return
  3510  0259                     __end_of_I2C_Master_Read:	
  3511                           
  3512                           	psect	text23
  3513  010A                     __ptext23:	
  3514 ;; *************** function _I2C_Master_Wait *****************
  3515 ;; Defined at:
  3516 ;;		line 32 in file "./I2C.h"
  3517 ;; Parameters:    Size  Location     Type
  3518 ;;		None
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;		None
  3521 ;; Return value:  Size  Location     Type
  3522 ;;                  1    wreg      void 
  3523 ;; Registers used:
  3524 ;;		wreg, status,2
  3525 ;; Tracked objects:
  3526 ;;		On entry : 0/0
  3527 ;;		On exit  : 0/0
  3528 ;;		Unchanged: 0/0
  3529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3530 ;;      Params:         0       0       0       0       0
  3531 ;;      Locals:         0       0       0       0       0
  3532 ;;      Temps:          0       0       0       0       0
  3533 ;;      Totals:         0       0       0       0       0
  3534 ;;Total ram usage:        0 bytes
  3535 ;; Hardware stack levels used:    1
  3536 ;; This function calls:
  3537 ;;		Nothing
  3538 ;; This function is called by:
  3539 ;;		_I2C_Master_Start
  3540 ;;		_I2C_Master_RepeatedStart
  3541 ;;		_I2C_Master_Stop
  3542 ;;		_I2C_Master_Write
  3543 ;;		_I2C_Master_Read
  3544 ;; This function uses a non-reentrant model
  3545 ;;
  3546                           
  3547                           
  3548                           ;psect for function _I2C_Master_Wait
  3549  010A                     _I2C_Master_Wait:	
  3550  010A                     l78:	
  3551                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  3552                           
  3553                           ;incstack = 0
  3554                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  3555                           
  3556  010A  1683               	bsf	3,5	;RP0=1, select bank1
  3557  010B  1303               	bcf	3,6	;RP1=0, select bank1
  3558  010C  1914               	btfsc	20,2	;volatile
  3559  010D  290A               	goto	l78
  3560  010E  0811               	movf	17,w	;volatile
  3561  010F  391F               	andlw	31
  3562  0110  1903               	btfsc	3,2
  3563  0111  0008               	return
  3564  0112  290A               	goto	l78
  3565  0113                     __end_of_I2C_Master_Wait:	
  3566                           
  3567                           	psect	text24
  3568  0362                     __ptext24:	
  3569 ;; *************** function _Lcd_Write_String *****************
  3570 ;; Defined at:
  3571 ;;		line 100 in file "./LCD4bits.h"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;  a               2    5[COMMON] PTR unsigned char 
  3574 ;;		 -> NULL(0), get_temp@temperature(6), get_time@string_time(6), STR_9(7), 
  3575 ;;		 -> STR_8(7), STR_7(8), STR_6(8), STR_5(9), 
  3576 ;;		 -> STR_4(9), STR_3(12), STR_2(12), 
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;  i               2   10[COMMON] int 
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      void 
  3581 ;; Registers used:
  3582 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3588 ;;      Params:         2       0       0       0       0
  3589 ;;      Locals:         2       0       0       0       0
  3590 ;;      Temps:          3       0       0       0       0
  3591 ;;      Totals:         7       0       0       0       0
  3592 ;;Total ram usage:        7 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; Hardware stack levels required when called:    2
  3595 ;; This function calls:
  3596 ;;		_Lcd_Write_Char
  3597 ;; This function is called by:
  3598 ;;		_main
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           
  3603                           ;psect for function _Lcd_Write_String
  3604  0362                     _Lcd_Write_String:	
  3605                           
  3606                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  3607                           
  3608                           ;incstack = 0
  3609                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3610  0362  01FA               	clrf	Lcd_Write_String@i
  3611  0363  01FB               	clrf	Lcd_Write_String@i+1
  3612  0364                     l1734:	
  3613  0364  087A               	movf	Lcd_Write_String@i,w
  3614  0365  0775               	addwf	Lcd_Write_String@a,w
  3615  0366  00F8               	movwf	??_Lcd_Write_String+1
  3616  0367  0876               	movf	Lcd_Write_String@a+1,w
  3617  0368  00F7               	movwf	??_Lcd_Write_String
  3618  0369  1803               	skipnc
  3619  036A  0AF7               	incf	??_Lcd_Write_String,f
  3620  036B  1BFA               	btfsc	Lcd_Write_String@i,7
  3621  036C  03F7               	decf	??_Lcd_Write_String,f
  3622  036D  0877               	movf	??_Lcd_Write_String,w
  3623  036E  00F9               	movwf	??_Lcd_Write_String+2
  3624  036F  0879               	movf	??_Lcd_Write_String+2,w
  3625  0370  1283               	bcf	3,5	;RP0=0, select bank0
  3626  0371  1303               	bcf	3,6	;RP1=0, select bank0
  3627  0372  00FF               	movwf	127
  3628  0373  0878               	movf	??_Lcd_Write_String+1,w
  3629  0374  0084               	movwf	4
  3630  0375  120A  118A  2003  120A  118A  	fcall	stringtab
  3631  037A  3A00               	xorlw	0
  3632  037B  1903               	btfsc	3,2
  3633  037C  0008               	return
  3634                           
  3635                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  3636  037D  087A               	movf	Lcd_Write_String@i,w
  3637  037E  0775               	addwf	Lcd_Write_String@a,w
  3638  037F  00F8               	movwf	??_Lcd_Write_String+1
  3639  0380  0876               	movf	Lcd_Write_String@a+1,w
  3640  0381  00F7               	movwf	??_Lcd_Write_String
  3641  0382  1803               	skipnc
  3642  0383  0AF7               	incf	??_Lcd_Write_String,f
  3643  0384  1BFA               	btfsc	Lcd_Write_String@i,7
  3644  0385  03F7               	decf	??_Lcd_Write_String,f
  3645  0386  0877               	movf	??_Lcd_Write_String,w
  3646  0387  00F9               	movwf	??_Lcd_Write_String+2
  3647  0388  0879               	movf	??_Lcd_Write_String+2,w
  3648  0389  1283               	bcf	3,5	;RP0=0, select bank0
  3649  038A  1303               	bcf	3,6	;RP1=0, select bank0
  3650  038B  00FF               	movwf	127
  3651  038C  0878               	movf	??_Lcd_Write_String+1,w
  3652  038D  0084               	movwf	4
  3653  038E  120A  118A  2003  120A  118A  	fcall	stringtab
  3654  0393  120A  118A  22ED  120A  118A  	fcall	_Lcd_Write_Char
  3655  0398  3001               	movlw	1
  3656  0399  07FA               	addwf	Lcd_Write_String@i,f
  3657  039A  1803               	skipnc
  3658  039B  0AFB               	incf	Lcd_Write_String@i+1,f
  3659  039C  3000               	movlw	0
  3660  039D  07FB               	addwf	Lcd_Write_String@i+1,f
  3661  039E  2B64               	goto	l1734
  3662  039F                     __end_of_Lcd_Write_String:	
  3663                           
  3664                           	psect	text25
  3665  02ED                     __ptext25:	
  3666 ;; *************** function _Lcd_Write_Char *****************
  3667 ;; Defined at:
  3668 ;;		line 84 in file "./LCD4bits.h"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;  a               1    wreg     unsigned char 
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;  a               1    4[COMMON] unsigned char 
  3673 ;;  y               1    3[COMMON] unsigned char 
  3674 ;;  temp            1    2[COMMON] unsigned char 
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  1    wreg      void 
  3677 ;; Registers used:
  3678 ;;		wreg, status,2, status,0, pclath, cstack
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3684 ;;      Params:         0       0       0       0       0
  3685 ;;      Locals:         3       0       0       0       0
  3686 ;;      Temps:          1       0       0       0       0
  3687 ;;      Totals:         4       0       0       0       0
  3688 ;;Total ram usage:        4 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    1
  3691 ;; This function calls:
  3692 ;;		_Lcd_Port
  3693 ;; This function is called by:
  3694 ;;		_Lcd_Write_String
  3695 ;;		_main
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           
  3700                           ;psect for function _Lcd_Write_Char
  3701  02ED                     _Lcd_Write_Char:	
  3702                           
  3703                           ;incstack = 0
  3704                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3705                           ;Lcd_Write_Char@a stored from wreg
  3706  02ED  00F4               	movwf	Lcd_Write_Char@a
  3707                           
  3708                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  3709  02EE  0874               	movf	Lcd_Write_Char@a,w
  3710  02EF  390F               	andlw	15
  3711  02F0  00F1               	movwf	??_Lcd_Write_Char
  3712  02F1  0871               	movf	??_Lcd_Write_Char,w
  3713  02F2  00F2               	movwf	Lcd_Write_Char@temp
  3714                           
  3715                           ;./LCD4bits.h: 88:    y = a&0xF0;
  3716  02F3  0874               	movf	Lcd_Write_Char@a,w
  3717  02F4  39F0               	andlw	240
  3718  02F5  00F1               	movwf	??_Lcd_Write_Char
  3719  02F6  0871               	movf	??_Lcd_Write_Char,w
  3720  02F7  00F3               	movwf	Lcd_Write_Char@y
  3721                           
  3722                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  3723  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  3724  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  3725  02FA  1606               	bsf	6,4	;volatile
  3726                           
  3727                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  3728  02FB  0873               	movf	Lcd_Write_Char@y,w
  3729  02FC  00F1               	movwf	??_Lcd_Write_Char
  3730  02FD  3004               	movlw	4
  3731  02FE                     u935:	
  3732  02FE  1003               	clrc
  3733  02FF  0CF1               	rrf	??_Lcd_Write_Char,f
  3734  0300  3EFF               	addlw	-1
  3735  0301  1D03               	skipz
  3736  0302  2AFE               	goto	u935
  3737  0303  0871               	movf	??_Lcd_Write_Char,w
  3738  0304  120A  118A  212F  120A  118A  	fcall	_Lcd_Port
  3739                           
  3740                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  3741  0309  1283               	bcf	3,5	;RP0=0, select bank0
  3742  030A  1303               	bcf	3,6	;RP1=0, select bank0
  3743  030B  1686               	bsf	6,5	;volatile
  3744                           
  3745                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3746  030C  301A               	movlw	26
  3747  030D  00F1               	movwf	??_Lcd_Write_Char
  3748  030E                     u1327:	
  3749  030E  0BF1               	decfsz	??_Lcd_Write_Char,f
  3750  030F  2B0E               	goto	u1327
  3751  0310  0000               	nop
  3752                           
  3753                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  3754  0311  1283               	bcf	3,5	;RP0=0, select bank0
  3755  0312  1303               	bcf	3,6	;RP1=0, select bank0
  3756  0313  1286               	bcf	6,5	;volatile
  3757                           
  3758                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  3759  0314  0872               	movf	Lcd_Write_Char@temp,w
  3760  0315  120A  118A  212F  120A  118A  	fcall	_Lcd_Port
  3761                           
  3762                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  3763  031A  1283               	bcf	3,5	;RP0=0, select bank0
  3764  031B  1303               	bcf	3,6	;RP1=0, select bank0
  3765  031C  1686               	bsf	6,5	;volatile
  3766                           
  3767                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3768  031D  301A               	movlw	26
  3769  031E  00F1               	movwf	??_Lcd_Write_Char
  3770  031F                     u1337:	
  3771  031F  0BF1               	decfsz	??_Lcd_Write_Char,f
  3772  0320  2B1F               	goto	u1337
  3773  0321  0000               	nop
  3774                           
  3775                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  3776  0322  1283               	bcf	3,5	;RP0=0, select bank0
  3777  0323  1303               	bcf	3,6	;RP1=0, select bank0
  3778  0324  1286               	bcf	6,5	;volatile
  3779  0325  0008               	return
  3780  0326                     __end_of_Lcd_Write_Char:	
  3781                           
  3782                           	psect	text26
  3783  039F                     __ptext26:	
  3784 ;; *************** function _Lcd_Set_Cursor *****************
  3785 ;; Defined at:
  3786 ;;		line 44 in file "./LCD4bits.h"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;  a               1    wreg     unsigned char 
  3789 ;;  b               1    4[COMMON] unsigned char 
  3790 ;; Auto vars:     Size  Location     Type
  3791 ;;  a               1    7[COMMON] unsigned char 
  3792 ;;  temp            1   10[COMMON] unsigned char 
  3793 ;;  y               1    9[COMMON] unsigned char 
  3794 ;;  z               1    8[COMMON] unsigned char 
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  1    wreg      void 
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0, pclath, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3804 ;;      Params:         1       0       0       0       0
  3805 ;;      Locals:         4       0       0       0       0
  3806 ;;      Temps:          2       0       0       0       0
  3807 ;;      Totals:         7       0       0       0       0
  3808 ;;Total ram usage:        7 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:    2
  3811 ;; This function calls:
  3812 ;;		_Lcd_Cmd
  3813 ;; This function is called by:
  3814 ;;		_main
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           
  3819                           ;psect for function _Lcd_Set_Cursor
  3820  039F                     _Lcd_Set_Cursor:	
  3821                           
  3822                           ;incstack = 0
  3823                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3824                           ;Lcd_Set_Cursor@a stored from wreg
  3825  039F  00F7               	movwf	Lcd_Set_Cursor@a
  3826                           
  3827                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  3828  03A0  0377               	decf	Lcd_Set_Cursor@a,w
  3829  03A1  1D03               	btfss	3,2
  3830  03A2  2BC4               	goto	l1718
  3831                           
  3832                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  3833  03A3  0874               	movf	Lcd_Set_Cursor@b,w
  3834  03A4  3E7F               	addlw	127
  3835  03A5  00F5               	movwf	??_Lcd_Set_Cursor
  3836  03A6  0875               	movf	??_Lcd_Set_Cursor,w
  3837  03A7  00FA               	movwf	Lcd_Set_Cursor@temp
  3838                           
  3839                           ;./LCD4bits.h: 50:   z = temp>>4;
  3840  03A8  087A               	movf	Lcd_Set_Cursor@temp,w
  3841  03A9  00F5               	movwf	??_Lcd_Set_Cursor
  3842  03AA  3004               	movlw	4
  3843  03AB                     u1065:	
  3844  03AB  1003               	clrc
  3845  03AC  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3846  03AD  3EFF               	addlw	-1
  3847  03AE  1D03               	skipz
  3848  03AF  2BAB               	goto	u1065
  3849  03B0  0875               	movf	??_Lcd_Set_Cursor,w
  3850  03B1  00F6               	movwf	??_Lcd_Set_Cursor+1
  3851  03B2  0876               	movf	??_Lcd_Set_Cursor+1,w
  3852  03B3  00F8               	movwf	Lcd_Set_Cursor@z
  3853                           
  3854                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  3855  03B4  087A               	movf	Lcd_Set_Cursor@temp,w
  3856  03B5  390F               	andlw	15
  3857  03B6  00F5               	movwf	??_Lcd_Set_Cursor
  3858  03B7  0875               	movf	??_Lcd_Set_Cursor,w
  3859  03B8  00F9               	movwf	Lcd_Set_Cursor@y
  3860                           
  3861                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  3862  03B9  0878               	movf	Lcd_Set_Cursor@z,w
  3863  03BA  120A  118A  2149  120A  118A  	fcall	_Lcd_Cmd
  3864                           
  3865                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  3866  03BF  0879               	movf	Lcd_Set_Cursor@y,w
  3867  03C0  120A  118A  2149   	fcall	_Lcd_Cmd
  3868                           
  3869                           ;./LCD4bits.h: 54:  }
  3870  03C3  0008               	return
  3871  03C4                     l1718:	
  3872  03C4  3002               	movlw	2
  3873  03C5  0677               	xorwf	Lcd_Set_Cursor@a,w
  3874  03C6  1D03               	btfss	3,2
  3875  03C7  0008               	return
  3876                           
  3877                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  3878  03C8  0874               	movf	Lcd_Set_Cursor@b,w
  3879  03C9  3EBF               	addlw	191
  3880  03CA  00F5               	movwf	??_Lcd_Set_Cursor
  3881  03CB  0875               	movf	??_Lcd_Set_Cursor,w
  3882  03CC  00FA               	movwf	Lcd_Set_Cursor@temp
  3883                           
  3884                           ;./LCD4bits.h: 58:   z = temp>>4;
  3885  03CD  087A               	movf	Lcd_Set_Cursor@temp,w
  3886  03CE  00F5               	movwf	??_Lcd_Set_Cursor
  3887  03CF  3004               	movlw	4
  3888  03D0                     u1085:	
  3889  03D0  1003               	clrc
  3890  03D1  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3891  03D2  3EFF               	addlw	-1
  3892  03D3  1D03               	skipz
  3893  03D4  2BD0               	goto	u1085
  3894  03D5  0875               	movf	??_Lcd_Set_Cursor,w
  3895  03D6  00F6               	movwf	??_Lcd_Set_Cursor+1
  3896  03D7  0876               	movf	??_Lcd_Set_Cursor+1,w
  3897  03D8  00F8               	movwf	Lcd_Set_Cursor@z
  3898                           
  3899                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  3900  03D9  087A               	movf	Lcd_Set_Cursor@temp,w
  3901  03DA  390F               	andlw	15
  3902  03DB  00F5               	movwf	??_Lcd_Set_Cursor
  3903  03DC  0875               	movf	??_Lcd_Set_Cursor,w
  3904  03DD  00F9               	movwf	Lcd_Set_Cursor@y
  3905                           
  3906                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  3907  03DE  0878               	movf	Lcd_Set_Cursor@z,w
  3908  03DF  120A  118A  2149  120A  118A  	fcall	_Lcd_Cmd
  3909                           
  3910                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  3911  03E4  0879               	movf	Lcd_Set_Cursor@y,w
  3912  03E5  120A  118A  2149   	fcall	_Lcd_Cmd
  3913  03E8  0008               	return
  3914  03E9                     __end_of_Lcd_Set_Cursor:	
  3915                           
  3916                           	psect	text27
  3917  0113                     __ptext27:	
  3918 ;; *************** function _Lcd_Clear *****************
  3919 ;; Defined at:
  3920 ;;		line 38 in file "./LCD4bits.h"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;		None
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;		None
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      void 
  3927 ;; Registers used:
  3928 ;;		wreg, status,2, status,0, pclath, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3934 ;;      Params:         0       0       0       0       0
  3935 ;;      Locals:         0       0       0       0       0
  3936 ;;      Temps:          0       0       0       0       0
  3937 ;;      Totals:         0       0       0       0       0
  3938 ;;Total ram usage:        0 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    2
  3941 ;; This function calls:
  3942 ;;		_Lcd_Cmd
  3943 ;; This function is called by:
  3944 ;;		_main
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           
  3949                           ;psect for function _Lcd_Clear
  3950  0113                     _Lcd_Clear:	
  3951                           
  3952                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  3953                           
  3954                           ;incstack = 0
  3955                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3956  0113  3000               	movlw	0
  3957  0114  120A  118A  2149  120A  118A  	fcall	_Lcd_Cmd
  3958                           
  3959                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  3960  0119  3001               	movlw	1
  3961  011A  120A  118A  2149   	fcall	_Lcd_Cmd
  3962  011D  0008               	return
  3963  011E                     __end_of_Lcd_Clear:	
  3964                           
  3965                           	psect	text28
  3966  0149                     __ptext28:	
  3967 ;; *************** function _Lcd_Cmd *****************
  3968 ;; Defined at:
  3969 ;;		line 29 in file "./LCD4bits.h"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;  a               1    wreg     unsigned char 
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;  a               1    3[COMMON] unsigned char 
  3974 ;; Return value:  Size  Location     Type
  3975 ;;                  1    wreg      void 
  3976 ;; Registers used:
  3977 ;;		wreg, status,2, status,0, pclath, cstack
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3983 ;;      Params:         0       0       0       0       0
  3984 ;;      Locals:         1       0       0       0       0
  3985 ;;      Temps:          2       0       0       0       0
  3986 ;;      Totals:         3       0       0       0       0
  3987 ;;Total ram usage:        3 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; Hardware stack levels required when called:    1
  3990 ;; This function calls:
  3991 ;;		_Lcd_Port
  3992 ;; This function is called by:
  3993 ;;		_Lcd_Clear
  3994 ;;		_Lcd_Set_Cursor
  3995 ;;		_Lcd_Init
  3996 ;;		_Lcd_Shift_Right
  3997 ;;		_Lcd_Shift_Left
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           
  4002                           ;psect for function _Lcd_Cmd
  4003  0149                     _Lcd_Cmd:	
  4004                           
  4005                           ;incstack = 0
  4006                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4007                           ;Lcd_Cmd@a stored from wreg
  4008  0149  00F3               	movwf	Lcd_Cmd@a
  4009                           
  4010                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  4011  014A  1283               	bcf	3,5	;RP0=0, select bank0
  4012  014B  1303               	bcf	3,6	;RP1=0, select bank0
  4013  014C  1206               	bcf	6,4	;volatile
  4014                           
  4015                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  4016  014D  0873               	movf	Lcd_Cmd@a,w
  4017  014E  120A  118A  212F  120A  118A  	fcall	_Lcd_Port
  4018                           
  4019                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  4020  0153  1283               	bcf	3,5	;RP0=0, select bank0
  4021  0154  1303               	bcf	3,6	;RP1=0, select bank0
  4022  0155  1686               	bsf	6,5	;volatile
  4023                           
  4024                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  4025  0156  300B               	movlw	11
  4026  0157  00F2               	movwf	??_Lcd_Cmd+1
  4027  0158  3062               	movlw	98
  4028  0159  00F1               	movwf	??_Lcd_Cmd
  4029  015A                     u1347:	
  4030  015A  0BF1               	decfsz	??_Lcd_Cmd,f
  4031  015B  295A               	goto	u1347
  4032  015C  0BF2               	decfsz	??_Lcd_Cmd+1,f
  4033  015D  295A               	goto	u1347
  4034  015E  0000               	nop
  4035                           
  4036                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  4037  015F  1283               	bcf	3,5	;RP0=0, select bank0
  4038  0160  1303               	bcf	3,6	;RP1=0, select bank0
  4039  0161  1286               	bcf	6,5	;volatile
  4040  0162  0008               	return
  4041  0163                     __end_of_Lcd_Cmd:	
  4042                           
  4043                           	psect	text29
  4044  012F                     __ptext29:	
  4045 ;; *************** function _Lcd_Port *****************
  4046 ;; Defined at:
  4047 ;;		line 7 in file "./LCD4bits.h"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;  a               1    wreg     unsigned char 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  a               1    0[COMMON] unsigned char 
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  1    wreg      void 
  4054 ;; Registers used:
  4055 ;;		wreg
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4061 ;;      Params:         0       0       0       0       0
  4062 ;;      Locals:         1       0       0       0       0
  4063 ;;      Temps:          0       0       0       0       0
  4064 ;;      Totals:         1       0       0       0       0
  4065 ;;Total ram usage:        1 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; This function calls:
  4068 ;;		Nothing
  4069 ;; This function is called by:
  4070 ;;		_Lcd_Cmd
  4071 ;;		_Lcd_Init
  4072 ;;		_Lcd_Write_Char
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           
  4077                           ;psect for function _Lcd_Port
  4078  012F                     _Lcd_Port:	
  4079                           
  4080                           ;incstack = 0
  4081                           ; Regs used in _Lcd_Port: [wreg]
  4082                           ;Lcd_Port@a stored from wreg
  4083  012F  00F0               	movwf	Lcd_Port@a
  4084                           
  4085                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  4086  0130  1C70               	btfss	Lcd_Port@a,0
  4087  0131  2936               	goto	l104
  4088                           
  4089                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  4090  0132  1283               	bcf	3,5	;RP0=0, select bank0
  4091  0133  1303               	bcf	3,6	;RP1=0, select bank0
  4092  0134  1406               	bsf	6,0	;volatile
  4093  0135  2939               	goto	l105
  4094  0136                     l104:	
  4095                           ;./LCD4bits.h: 11:  else
  4096                           
  4097                           
  4098                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  4099  0136  1283               	bcf	3,5	;RP0=0, select bank0
  4100  0137  1303               	bcf	3,6	;RP1=0, select bank0
  4101  0138  1006               	bcf	6,0	;volatile
  4102  0139                     l105:	
  4103                           
  4104                           ;./LCD4bits.h: 14:  if(a & 2)
  4105  0139  1CF0               	btfss	Lcd_Port@a,1
  4106  013A  293D               	goto	l106
  4107                           
  4108                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  4109  013B  1486               	bsf	6,1	;volatile
  4110  013C  293E               	goto	l107
  4111  013D                     l106:	
  4112                           ;./LCD4bits.h: 16:  else
  4113                           
  4114                           
  4115                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  4116  013D  1086               	bcf	6,1	;volatile
  4117  013E                     l107:	
  4118                           
  4119                           ;./LCD4bits.h: 19:  if(a & 4)
  4120  013E  1D70               	btfss	Lcd_Port@a,2
  4121  013F  2942               	goto	l108
  4122                           
  4123                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  4124  0140  1506               	bsf	6,2	;volatile
  4125  0141  2943               	goto	l109
  4126  0142                     l108:	
  4127                           ;./LCD4bits.h: 21:  else
  4128                           
  4129                           
  4130                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  4131  0142  1106               	bcf	6,2	;volatile
  4132  0143                     l109:	
  4133                           
  4134                           ;./LCD4bits.h: 24:  if(a & 8)
  4135  0143  1DF0               	btfss	Lcd_Port@a,3
  4136  0144  2947               	goto	l110
  4137                           
  4138                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  4139  0145  1586               	bsf	6,3	;volatile
  4140  0146  0008               	return
  4141  0147                     l110:	
  4142                           ;./LCD4bits.h: 26:  else
  4143                           
  4144                           
  4145                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  4146  0147  1186               	bcf	6,3	;volatile
  4147  0148  0008               	return
  4148  0149                     __end_of_Lcd_Port:	
  4149  007E                     btemp	set	126	;btemp
  4150  007E                     wtemp0	set	126


Data Sizes:
    Strings     73
    Constant    10
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      35
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), get_temp@temperature(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_12(CODE[4]), STR_11(CODE[5]), STR_10(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), get_temp@temperature(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    sp__get_time	PTR unsigned char  size(1) Largest target is 6
		 -> get_time@string_time(BANK0[6]), 

    time	PTR unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), get_time@string_time(BANK0[6]), 

    sp__get_temp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    temp	PTR unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), get_temp@temperature(BANK0[6]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 12
		 -> NULL(NULL[0]), get_temp@temperature(BANK0[6]), get_time@string_time(BANK0[6]), STR_9(CODE[7]), 
		 -> STR_8(CODE[7]), STR_7(CODE[8]), STR_6(CODE[8]), STR_5(CODE[9]), 
		 -> STR_4(CODE[9]), STR_3(CODE[12]), STR_2(CODE[12]), 


Critical Paths under _main in COMMON

    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_I2C_Master_Init
    _get_temp->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   18601
                                             27 BANK0      1     1      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                             _get_IR
                            _get_PIR
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                              _setup
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     200
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     632
                    _I2C_Master_Init
                           _Lcd_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     412
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                            10    10      0    2430
                                              6 COMMON     2     2      0
                                              0 BANK0      8     8      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                            14    14      0    4315
                                             13 BANK0     14    14      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1429
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     168
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1466
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     729
                                              0 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1028
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     836
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _initOscilador
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      31       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1C      23       5       43.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      31      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Feb 28 21:36:00 2019

                                pc 0002                     ___bmul@product 0072  
                      __CFG_CP$OFF 0000                        get_hall@key 0077  
                               l78 010A                                 l96 0250  
                               l97 0253                                 _IR 003D  
                               fsr 0004                                l110 0147  
                              l104 0136                                l105 0139  
                              l106 013D                                l107 013E  
                              l108 0142                                l109 0143  
                              l147 043C                                l176 0744  
                              l193 07EE                                _GIE 005F  
                     __CFG_CPD$OFF 0000                                _PIR 003E  
                              u725 04AD                                u815 033D  
                              u825 0349                                u745 04BB  
                              u835 0353                                u755 04D0  
                              u915 02C9                                u765 04E2  
                              u935 02FE                                u865 028E  
                              u795 0331                                u885 029F  
                              u965 067F                                u895 02A8  
                    ?_get_tripwire 0070                                fsr0 0004  
                              indf 0000                       __CFG_LVP$OFF 0000  
                             l1510 02A7                               l1504 028B  
                             l1600 03FC                               l1506 0299  
                             l1514 02B2                               l1610 0415  
                             l1602 0402                               l1452 04A9  
                             l1604 0408                               l1462 04E1  
                             l1454 04B9                               l1606 040E  
                             l1614 041A                               l1480 032E  
                             l1608 0415                               l1482 033C  
                             l1650 0668                               l1634 064F  
                             l1466 04EE                               l1492 035D  
                             l1644 0666                               l1628 0631  
                             l1900 07BC                               l1718 03C4  
                             l1734 0364                               l1670 069C  
                             l1662 0698                               l1830 0205  
                             l1910 07DD                               l1488 0352  
                             l1656 0689                               l1672 0611  
                             l1832 0227                               l1674 06DD  
                             l1690 01F7                               l1770 05EA  
                             l1594 03EB                               l1596 03F0  
                             l1828 0212                               l1908 07D4  
                             l1694 0120                               l1686 01E4  
                             l1598 03F6                               l1862 0747  
                             l1846 06EF                               l1688 01EF  
                             l1698 0126                               l1890 07A7  
                             l1882 078F                               l1874 077D  
                             l1892 07A9                               l1966 0422  
                             l1968 0644                               STR_1 0057  
                             STR_2 001D                        get_time@min 0027  
                             STR_3 0029                               STR_4 0035  
                             STR_5 003E                               STR_6 0047  
                             STR_7 004F                               STR_8 0048  
                             STR_9 0050                               u1125 05C2  
                             u1065 03AB                               u1145 0543  
                             u1155 055A                               u1307 0457  
                             u1085 03D0                               u1317 0466  
                             u1327 030E                               u1337 031F  
                             u1185 073E                               u1347 015A  
                             u1297 0448                               _PEIE 005E  
                             _RCEN 048B                       __CFG_WRT$OFF 0000  
                ?_Lcd_Write_String 0075   __end_of_I2C_Master_RepeatedStart 0102  
                             _door 0040                               _main 06E2  
                             _temp 0041                               _time 0042  
                             _trip 003F                               btemp 007E  
                             start 0000                 ??_Lcd_Write_String 0077  
                    __CFG_IESO$OFF 0000                    __end_of_Lcd_Cmd 0163  
                ___bmul@multiplier 0073                      __CFG_MCLRE$ON 0000  
              get_temp@temperature 0030                   ?_I2C_Master_Init 0020  
                 ?_I2C_Master_Read 0070                   ?_I2C_Master_Wait 0070  
                 ?_I2C_Master_Stop 0070                              ?_main 0070  
                            STR_10 0063                              STR_11 005D  
                            STR_12 0062                      __CFG_WDTE$OFF 0000  
                     get_time@hour 0026                              _ANSEL 0188  
                  __end_of___lldiv 04F7                     ??_get_tripwire 0076  
                  __end_of___lwdiv 0362                    __end_of___lwmod 02B7  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007            __size_of_Lcd_Set_Cursor 004A  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087                              _SSPIE 0463  
                            _SSPIF 0063                    __end_of_get_PIR 01A1  
                   __CFG_FCMEN$OFF 0000                    __end_of_dpowers 001D  
                            _setup 0259                              _state 003C  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 06E2                   __end_of_Lcd_Init 0499  
                 __end_of_Lcd_Port 0149                    __initialization 07F3  
                     __end_of_main 07F3             __size_of_initOscilador 0055  
                           ??_main 003B                 __size_of_Lcd_Clear 000B  
                ?_I2C_Master_Start 0070                  ?_I2C_Master_Write 0070  
               ??_I2C_Master_Start 0070                 ??_I2C_Master_Write 0072  
                           ?_setup 0070                             _ANSELH 0189  
                        ??_Lcd_Cmd 0071            __size_of_Lcd_Write_Char 0039  
                           _SSPADD 0093                             _TRISC3 043B  
                           _TRISC4 043C                             _SSPCON 0014  
                           _SSPBUF 0013                     __CFG_PWRTE$OFF 0000  
         _I2C_Master_RepeatedStart 00FB                   __end_of_get_hall 01C0  
                 __end_of_get_temp 060A                   __end_of_get_time 056D  
                           ___bmul 011E                          ??___lldiv 0078  
                           _get_IR 0163                          ??___lwdiv 0074  
                        ??___lwmod 007C                          ??_get_PIR 0076  
                           _strcat 01DF                             _strcmp 0203  
                        ??_sprintf 0023                    Lcd_Set_Cursor@a 0077  
                  Lcd_Set_Cursor@b 0074                    Lcd_Set_Cursor@y 0079  
                  Lcd_Set_Cursor@z 0078            __end_of__initialization 07FC  
                    _initOscilador 03E9                  __end_of_Lcd_Clear 011E  
             __end_of_get_tripwire 01DF                ___bmul@multiplicand 0070  
                   __pcstackCOMMON 0070                      __end_of_setup 0285  
                   _Lcd_Set_Cursor 039F                          ?_Lcd_Init 0070  
                        ?_Lcd_Port 0070                            ??_setup 007E  
                       __pbssBANK0 003C                     ?_initOscilador 0070  
                       __pmaintext 06E2                            ?___bmul 0070  
                          ?_get_IR 0070          __size_of_Lcd_Write_String 003D  
           __end_of_Lcd_Set_Cursor 03E9                            ?_strcat 0070  
                          ?_strcmp 0070                         ??_Lcd_Init 0074  
                       ??_Lcd_Port 0070                            _SSPCON2 0091  
                        ?_get_hall 0070                            _SSPSTAT 0094  
                        ?_get_temp 0070                          ?_get_time 0070  
                       __stringtab 0003                initOscilador@option 0072  
                   _Lcd_Write_Char 02ED                            _Lcd_Cmd 0149  
                  __size_of___bmul 0011                            ___lldiv 0499  
                          ___lwdiv 0326                            ___lwmod 0285  
                  __size_of_get_IR 001F                    ?_Lcd_Set_Cursor 0074  
                          _get_PIR 0182                            __ptext1 0203  
                          __ptext2 0259                            __ptext3 03E9  
                          __ptext4 043E                            __ptext5 02B7  
                          __ptext6 0499                            __ptext7 01C0  
                          __ptext8 04F7                            __ptext9 056D  
                  __size_of_strcat 0024                    __size_of_strcmp 002A  
                          _dpowers 0013           __size_of_I2C_Master_Init 0036  
         __size_of_I2C_Master_Read 002C           __size_of_I2C_Master_Wait 0009  
         __size_of_I2C_Master_Stop 0007                    ??_initOscilador 0070  
                       ??_get_hall 0076                            _sprintf 060A  
           __end_of_Lcd_Write_Char 0326                         ??_get_temp 002D  
                       ??_get_time 0076               end_of_initialization 07FC  
            __size_of_get_tripwire 001F         ??_I2C_Master_RepeatedStart 0070  
                       get_PIR@PIR 0077          __size_of_I2C_Master_Start 0007  
        __size_of_I2C_Master_Write 0008                    ___lldiv@divisor 0070  
                  ___lldiv@counter 007D                   I2C_Master_Init@c 0020  
                 I2C_Master_Read@a 0070                          Lcd_Port@a 0070  
                          strcmp@r 0075                          _PORTAbits 0005  
                        _PORTBbits 0006                          _PORTCbits 0007  
                     _get_tripwire 01C0                    ?_Lcd_Write_Char 0070  
                Lcd_Write_String@a 0075                  Lcd_Write_String@i 007A  
              get_time@string_time 0020                          _Lcd_Clear 0113  
                   __end_of___bmul 012F                   _Lcd_Write_String 0362  
                   __end_of_get_IR 0182                     __end_of_strcat 0203  
                   __end_of_strcmp 022D                start_initialization 07F3  
                __size_of_Lcd_Init 005B                  __size_of_Lcd_Port 001A  
                ??_I2C_Master_Init 0024                  ??_I2C_Master_Read 0072  
                ??_I2C_Master_Wait 0070                  ??_I2C_Master_Stop 0070  
         __CFG_FOSC$INTRC_NOCLKOUT 0000                         ?_Lcd_Clear 0070  
                         ??___bmul 0071                           ??_get_IR 0076  
                  Lcd_Write_Char@a 0074                    Lcd_Write_Char@y 0073  
                         ??_strcat 0071                           ??_strcmp 0072  
                        ___latbits 0002                      __pcstackBANK0 0020  
                __size_of_get_hall 001F                           ?_Lcd_Cmd 0070  
                __size_of_get_temp 009D                  __size_of_get_time 0076  
                      sprintf@flag 0027                        sprintf@prec 0028  
                 _I2C_Master_Start 00ED                   _I2C_Master_Write 0102  
                 ___lwdiv@dividend 0072                   ??_Lcd_Set_Cursor 0075  
                  get_temp@decimal 0036                           ?___lldiv 0070  
                         ?___lwdiv 0070                           ?___lwmod 0078  
                         ?_get_PIR 0070                          __pstrings 0003  
                  get_temp@tempLSB 003A                    get_temp@tempMSB 0039  
                 ___lwdiv@quotient 0075                           ?_sprintf 0020  
                   __size_of_setup 002C                           Lcd_Cmd@a 0073  
                      ??_Lcd_Clear 0074                        __stringbase 0012  
                 ??_Lcd_Write_Char 0071                           _Lcd_Init 043E  
                         _Lcd_Port 012F                I2C_Master_Read@temp 0074  
            __end_of_initOscilador 043E           __end_of_Lcd_Write_String 039F  
                 __size_of_Lcd_Cmd 001A  __size_of_I2C_Master_RepeatedStart 0007  
        ?_I2C_Master_RepeatedStart 0070                   __size_of___lldiv 005E  
                 __size_of___lwdiv 003C                   __size_of___lwmod 0032  
               __end_of__stringtab 0013                   __size_of_get_PIR 001F  
                       sprintf@val 0029                    _I2C_Master_Init 02B7  
                  _I2C_Master_Read 022D                    _I2C_Master_Wait 010A  
                       strcat@from 0070                    _I2C_Master_Stop 00F4  
                  ___lwdiv@divisor 0070                    ___lwdiv@counter 0077  
                         __ptext10 01DF                           __ptext11 060A  
                         __ptext20 00F4                           __ptext12 0285  
                         __ptext21 00ED                           __ptext13 0326  
                         __ptext22 022D                           __ptext14 011E  
                         __ptext23 010A                           __ptext15 00FB  
                         __ptext24 0362                           __ptext16 01A1  
                         __ptext25 02ED                           __ptext17 0182  
                         __ptext26 039F                           __ptext18 0163  
                         __ptext27 0113                           __ptext19 0102  
                         __ptext28 0149                           __ptext29 012F  
                __CFG_BOR4V$BOR40V 0000                           _get_hall 01A1  
                         _get_temp 056D                           _get_time 04F7  
                 __size_of_sprintf 00D8                      __size_of_main 0111  
                         get_IR@IR 0077           __end_of_I2C_Master_Start 00F4  
         __end_of_I2C_Master_Write 010A                 Lcd_Write_Char@temp 0072  
                        sprintf@ap 0026                          sprintf@sp 002B  
                 ___lwmod@dividend 007A                   ___lldiv@dividend 0074  
                        stringcode 000D                         _OSCCONbits 008F  
          __end_of_I2C_Master_Init 02ED            __end_of_I2C_Master_Read 0259  
          __end_of_I2C_Master_Wait 0113            __end_of_I2C_Master_Stop 00FB  
               Lcd_Set_Cursor@temp 007A                           sprintf@c 002C  
                         sprintf@f 0020                           strcat@cp 0073  
                         strcat@to 0072                           strcmp@s1 0076  
                         strcmp@s2 0070                   ___lldiv@quotient 0079  
                I2C_Master_Write@d 0070                    ___lwmod@divisor 0078  
                  ___lwmod@counter 007D                           stringdir 000D  
                 get_tripwire@trip 0077                           stringtab 0003  
                      _SSPCON2bits 0091  

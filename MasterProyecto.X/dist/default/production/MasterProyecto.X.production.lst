

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Mar 09 22:11:15 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	intentry,global,class=CODE,delta=2
    58                           	dabs	1,0x7E,2
    59  0000                     
    60                           ; Version 2.05
    61                           ; Generated 20/12/2018 GMT
    62                           ; 
    63                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC16F887 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000D                     	;# 
   108  000E                     	;# 
   109  000E                     	;# 
   110  000F                     	;# 
   111  0010                     	;# 
   112  0011                     	;# 
   113  0012                     	;# 
   114  0013                     	;# 
   115  0014                     	;# 
   116  0015                     	;# 
   117  0015                     	;# 
   118  0016                     	;# 
   119  0017                     	;# 
   120  0018                     	;# 
   121  0019                     	;# 
   122  001A                     	;# 
   123  001B                     	;# 
   124  001B                     	;# 
   125  001C                     	;# 
   126  001D                     	;# 
   127  001E                     	;# 
   128  001F                     	;# 
   129  0081                     	;# 
   130  0085                     	;# 
   131  0086                     	;# 
   132  0087                     	;# 
   133  0088                     	;# 
   134  0089                     	;# 
   135  008C                     	;# 
   136  008D                     	;# 
   137  008E                     	;# 
   138  008F                     	;# 
   139  0090                     	;# 
   140  0091                     	;# 
   141  0092                     	;# 
   142  0093                     	;# 
   143  0093                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0097                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009A                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  0105                     	;# 
   158  0107                     	;# 
   159  0108                     	;# 
   160  0109                     	;# 
   161  010C                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  0185                     	;# 
   167  0187                     	;# 
   168  0188                     	;# 
   169  0189                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  0007                     	;# 
   180  0008                     	;# 
   181  0009                     	;# 
   182  000A                     	;# 
   183  000B                     	;# 
   184  000C                     	;# 
   185  000D                     	;# 
   186  000E                     	;# 
   187  000E                     	;# 
   188  000F                     	;# 
   189  0010                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0015                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0017                     	;# 
   198  0018                     	;# 
   199  0019                     	;# 
   200  001A                     	;# 
   201  001B                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  001D                     	;# 
   205  001E                     	;# 
   206  001F                     	;# 
   207  0081                     	;# 
   208  0085                     	;# 
   209  0086                     	;# 
   210  0087                     	;# 
   211  0088                     	;# 
   212  0089                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  008F                     	;# 
   217  0090                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0093                     	;# 
   222  0093                     	;# 
   223  0094                     	;# 
   224  0095                     	;# 
   225  0096                     	;# 
   226  0097                     	;# 
   227  0098                     	;# 
   228  0099                     	;# 
   229  009A                     	;# 
   230  009B                     	;# 
   231  009C                     	;# 
   232  009D                     	;# 
   233  009E                     	;# 
   234  009F                     	;# 
   235  0105                     	;# 
   236  0107                     	;# 
   237  0108                     	;# 
   238  0109                     	;# 
   239  010C                     	;# 
   240  010C                     	;# 
   241  010D                     	;# 
   242  010E                     	;# 
   243  010F                     	;# 
   244  0185                     	;# 
   245  0187                     	;# 
   246  0188                     	;# 
   247  0189                     	;# 
   248  018C                     	;# 
   249  018D                     	;# 
   250                           
   251                           	psect	idataBANK0
   252  163C                     __pidataBANK0:	
   253                           
   254                           ;initializer for _password
   255  163C  3401               	retlw	1
   256  163D  3405               	retlw	5
   257  163E  3401               	retlw	1
   258  163F  3400               	retlw	0
   259  1640  3403               	retlw	3
   260                           
   261                           	psect	stringtext
   262  0700                     __pstringtext:	
   263  0700                     stringtab:	
   264  0700                     __stringtab:	
   265                           
   266                           ;	String table - string pointers are 2 bytes each
   267  0700  1BFF               	btfsc	btemp+1,7
   268  0701  2F0A               	ljmp	stringcode
   269  0702  1383               	bcf	3,7
   270  0703  187F               	btfsc	btemp+1,0
   271  0704  1783               	bsf	3,7
   272  0705  0800               	movf	0,w
   273  0706  0A84               	incf	4,f
   274  0707  1903               	skipnz
   275  0708  0AFF               	incf	btemp+1,f
   276  0709  0008               	return
   277  070A                     stringcode:	
   278  070A  087F               	movf	btemp+1,w
   279  070B  397F               	andlw	127
   280  070C  008A               	movwf	10
   281  070D  0804               	movf	4,w
   282  070E  0A84               	incf	4,f
   283  070F  1903               	skipnz
   284  0710  0AFF               	incf	btemp+1,f
   285  0711  0082               	movwf	2
   286  0712                     __stringbase:	
   287  0712                     __end_of__stringtab:	
   288  0712                     _dpowers:	
   289  0712  3401               	retlw	1
   290  0713  3400               	retlw	0
   291  0714  340A               	retlw	10
   292  0715  3400               	retlw	0
   293  0716  3464               	retlw	100
   294  0717  3400               	retlw	0
   295  0718  34E8               	retlw	232
   296  0719  3403               	retlw	3
   297  071A  3410               	retlw	16
   298  071B  3427               	retlw	39
   299  071C                     __end_of_dpowers:	
   300  0009                     _PORTE	set	9
   301  0007                     _PORTC	set	7
   302  0005                     _PORTA	set	5
   303  0006                     _PORTB	set	6
   304  0009                     _PORTEbits	set	9
   305  0008                     _PORTD	set	8
   306  0007                     _PORTCbits	set	7
   307  0018                     _RCSTAbits	set	24
   308  0014                     _SSPCONbits	set	20
   309  0008                     _PORTDbits	set	8
   310  0001                     _TMR0	set	1
   311  0005                     _PORTAbits	set	5
   312  000B                     _INTCONbits	set	11
   313  0019                     _TXREG	set	25
   314  001A                     _RCREG	set	26
   315  0006                     _PORTBbits	set	6
   316  0013                     _SSPBUF	set	19
   317  0014                     _SSPCON	set	20
   318  0065                     _RCIF	set	101
   319  00C4                     _CREN	set	196
   320  00C7                     _SPEN	set	199
   321  0063                     _SSPIF	set	99
   322  005E                     _PEIE	set	94
   323  005F                     _GIE	set	95
   324  0081                     _OPTION_REGbits	set	129
   325  0089                     _TRISE	set	137
   326  0087                     _TRISC	set	135
   327  0088                     _TRISD	set	136
   328  0085                     _TRISA	set	133
   329  0086                     _TRISB	set	134
   330  0099                     _SPBRG	set	153
   331  008F                     _OSCCONbits	set	143
   332  0091                     _SSPCON2bits	set	145
   333  0087                     _TRISCbits	set	135
   334  0094                     _SSPSTAT	set	148
   335  0093                     _SSPADD	set	147
   336  0091                     _SSPCON2	set	145
   337  04C1                     _TRMT	set	1217
   338  04C5                     _TXEN	set	1221
   339  043E                     _TRISC6	set	1086
   340  043F                     _TRISC7	set	1087
   341  04C4                     _SYNC	set	1220
   342  04C2                     _BRGH	set	1218
   343  0463                     _SSPIE	set	1123
   344  043C                     _TRISC4	set	1084
   345  043B                     _TRISC3	set	1083
   346  048B                     _RCEN	set	1163
   347  0188                     _ANSEL	set	392
   348  0189                     _ANSELH	set	393
   349  071C                     STR_1:	
   350  071C  3449               	retlw	73	;'I'
   351  071D  346E               	retlw	110	;'n'
   352  071E  3469               	retlw	105	;'i'
   353  071F  3463               	retlw	99	;'c'
   354  0720  3469               	retlw	105	;'i'
   355  0721  3461               	retlw	97	;'a'
   356  0722  346E               	retlw	110	;'n'
   357  0723  3464               	retlw	100	;'d'
   358  0724  346F               	retlw	111	;'o'
   359  0725  3420               	retlw	32	;' '
   360  0726  3453               	retlw	83	;'S'
   361  0727  3469               	retlw	105	;'i'
   362  0728  3473               	retlw	115	;'s'
   363  0729  3474               	retlw	116	;'t'
   364  072A  3465               	retlw	101	;'e'
   365  072B  346D               	retlw	109	;'m'
   366  072C  3461               	retlw	97	;'a'
   367  072D  3420               	retlw	32	;' '
   368  072E  3464               	retlw	100	;'d'
   369  072F  3465               	retlw	101	;'e'
   370  0730  3420               	retlw	32	;' '
   371  0731  3453               	retlw	83	;'S'
   372  0732  3465               	retlw	101	;'e'
   373  0733  3467               	retlw	103	;'g'
   374  0734  3475               	retlw	117	;'u'
   375  0735  3472               	retlw	114	;'r'
   376  0736  3469               	retlw	105	;'i'
   377  0737  3464               	retlw	100	;'d'
   378  0738  3461               	retlw	97	;'a'
   379  0739  3464               	retlw	100	;'d'
   380  073A  3400               	retlw	0
   381  073B                     STR_27:	
   382  073B  3450               	retlw	80	;'P'
   383  073C  3441               	retlw	65	;'A'
   384  073D  3453               	retlw	83	;'S'
   385  073E  3453               	retlw	83	;'S'
   386  073F  3457               	retlw	87	;'W'
   387  0740  344F               	retlw	79	;'O'
   388  0741  3452               	retlw	82	;'R'
   389  0742  3444               	retlw	68	;'D'
   390  0743  343A               	retlw	58	;':'
   391  0744  3420               	retlw	32	;' '
   392  0745  3420               	retlw	32	;' '
   393  0746  3420               	retlw	32	;' '
   394  0747  3420               	retlw	32	;' '
   395  0748  3420               	retlw	32	;' '
   396  0749  3420               	retlw	32	;' '
   397  074A  3420               	retlw	32	;' '
   398  074B  3400               	retlw	0
   399  074C                     STR_31:	
   400  074C  3420               	retlw	32	;' '
   401  074D  3420               	retlw	32	;' '
   402  074E  3420               	retlw	32	;' '
   403  074F  3420               	retlw	32	;' '
   404  0750  3420               	retlw	32	;' '
   405  0751  3420               	retlw	32	;' '
   406  0752  3420               	retlw	32	;' '
   407  0753  3420               	retlw	32	;' '
   408  0754  3420               	retlw	32	;' '
   409  0755  3420               	retlw	32	;' '
   410  0756  3420               	retlw	32	;' '
   411  0757  3420               	retlw	32	;' '
   412  0758  3400               	retlw	0
   413  0759                     STR_29:	
   414  0759  3453               	retlw	83	;'S'
   415  075A  3465               	retlw	101	;'e'
   416  075B  3463               	retlw	99	;'c'
   417  075C  3475               	retlw	117	;'u'
   418  075D  3472               	retlw	114	;'r'
   419  075E  3469               	retlw	105	;'i'
   420  075F  3474               	retlw	116	;'t'
   421  0760  3479               	retlw	121	;'y'
   422  0761  3420               	retlw	32	;' '
   423  0762  344F               	retlw	79	;'O'
   424  0763  3446               	retlw	70	;'F'
   425  0764  3446               	retlw	70	;'F'
   426  0765  3400               	retlw	0
   427  0766                     STR_15:	
   428  0766  3444               	retlw	68	;'D'
   429  0767  344F               	retlw	79	;'O'
   430  0768  344F               	retlw	79	;'O'
   431  0769  3452               	retlw	82	;'R'
   432  076A  3420               	retlw	32	;' '
   433  076B  344F               	retlw	79	;'O'
   434  076C  3450               	retlw	80	;'P'
   435  076D  3445               	retlw	69	;'E'
   436  076E  344E               	retlw	78	;'N'
   437  076F  3420               	retlw	32	;' '
   438  0770  3420               	retlw	32	;' '
   439  0771  3400               	retlw	0
   440  0772                     STR_16:	
   441  0772  3444               	retlw	68	;'D'
   442  0773  344F               	retlw	79	;'O'
   443  0774  344F               	retlw	79	;'O'
   444  0775  3452               	retlw	82	;'R'
   445  0776  3420               	retlw	32	;' '
   446  0777  3443               	retlw	67	;'C'
   447  0778  344C               	retlw	76	;'L'
   448  0779  344F               	retlw	79	;'O'
   449  077A  3453               	retlw	83	;'S'
   450  077B  3445               	retlw	69	;'E'
   451  077C  3444               	retlw	68	;'D'
   452  077D  3400               	retlw	0
   453  077E                     STR_28:	
   454  077E  3453               	retlw	83	;'S'
   455  077F  3465               	retlw	101	;'e'
   456  0780  3463               	retlw	99	;'c'
   457  0781  3475               	retlw	117	;'u'
   458  0782  3472               	retlw	114	;'r'
   459  0783  3469               	retlw	105	;'i'
   460  0784  3474               	retlw	116	;'t'
   461  0785  3479               	retlw	121	;'y'
   462  0786  3420               	retlw	32	;' '
   463  0787  344F               	retlw	79	;'O'
   464  0788  344E               	retlw	78	;'N'
   465  0789  3400               	retlw	0
   466  078A                     STR_3:	
   467  078A  3475               	retlw	117	;'u'
   468  078B  346E               	retlw	110	;'n'
   469  078C  3420               	retlw	32	;' '
   470  078D  344D               	retlw	77	;'M'
   471  078E  346F               	retlw	111	;'o'
   472  078F  346D               	retlw	109	;'m'
   473  0790  3465               	retlw	101	;'e'
   474  0791  346E               	retlw	110	;'n'
   475  0792  3474               	retlw	116	;'t'
   476  0793  346F               	retlw	111	;'o'
   477  0794  3400               	retlw	0
   478  0795                     STR_4:	
   479  0795  344C               	retlw	76	;'L'
   480  0796  3455               	retlw	85	;'U'
   481  0797  344E               	retlw	78	;'N'
   482  0798  3445               	retlw	69	;'E'
   483  0799  3453               	retlw	83	;'S'
   484  079A  3420               	retlw	32	;' '
   485  079B  3420               	retlw	32	;' '
   486  079C  3420               	retlw	32	;' '
   487  079D  3420               	retlw	32	;' '
   488  079E  3400               	retlw	0
   489  079F                     STR_9:	
   490  079F  3453               	retlw	83	;'S'
   491  07A0  3441               	retlw	65	;'A'
   492  07A1  3442               	retlw	66	;'B'
   493  07A2  3441               	retlw	65	;'A'
   494  07A3  3444               	retlw	68	;'D'
   495  07A4  344F               	retlw	79	;'O'
   496  07A5  3420               	retlw	32	;' '
   497  07A6  3420               	retlw	32	;' '
   498  07A7  3420               	retlw	32	;' '
   499  07A8  3400               	retlw	0
   500  07A9                     STR_5:	
   501  07A9  344D               	retlw	77	;'M'
   502  07AA  3441               	retlw	65	;'A'
   503  07AB  3452               	retlw	82	;'R'
   504  07AC  3454               	retlw	84	;'T'
   505  07AD  3445               	retlw	69	;'E'
   506  07AE  3453               	retlw	83	;'S'
   507  07AF  3420               	retlw	32	;' '
   508  07B0  3420               	retlw	32	;' '
   509  07B1  3420               	retlw	32	;' '
   510  07B2  3400               	retlw	0
   511  07B3                     STR_7:	
   512  07B3  344A               	retlw	74	;'J'
   513  07B4  3455               	retlw	85	;'U'
   514  07B5  3445               	retlw	69	;'E'
   515  07B6  3456               	retlw	86	;'V'
   516  07B7  3445               	retlw	69	;'E'
   517  07B8  3453               	retlw	83	;'S'
   518  07B9  3420               	retlw	32	;' '
   519  07BA  3420               	retlw	32	;' '
   520  07BB  3420               	retlw	32	;' '
   521  07BC  3400               	retlw	0
   522  07BD                     STR_10:	
   523  07BD  3444               	retlw	68	;'D'
   524  07BE  344F               	retlw	79	;'O'
   525  07BF  344D               	retlw	77	;'M'
   526  07C0  3449               	retlw	73	;'I'
   527  07C1  344E               	retlw	78	;'N'
   528  07C2  3447               	retlw	71	;'G'
   529  07C3  344F               	retlw	79	;'O'
   530  07C4  3420               	retlw	32	;' '
   531  07C5  3420               	retlw	32	;' '
   532  07C6  3400               	retlw	0
   533  07C7                     STR_8:	
   534  07C7  3456               	retlw	86	;'V'
   535  07C8  3449               	retlw	73	;'I'
   536  07C9  3445               	retlw	69	;'E'
   537  07CA  3452               	retlw	82	;'R'
   538  07CB  344E               	retlw	78	;'N'
   539  07CC  3445               	retlw	69	;'E'
   540  07CD  3453               	retlw	83	;'S'
   541  07CE  3420               	retlw	32	;' '
   542  07CF  3420               	retlw	32	;' '
   543  07D0  3400               	retlw	0
   544  07D1                     STR_6:	
   545  07D1  344D               	retlw	77	;'M'
   546  07D2  3449               	retlw	73	;'I'
   547  07D3  3445               	retlw	69	;'E'
   548  07D4  3452               	retlw	82	;'R'
   549  07D5  3443               	retlw	67	;'C'
   550  07D6  344F               	retlw	79	;'O'
   551  07D7  344C               	retlw	76	;'L'
   552  07D8  3445               	retlw	69	;'E'
   553  07D9  3453               	retlw	83	;'S'
   554  07DA  3400               	retlw	0
   555  07DB                     STR_19:	
   556  07DB  3442               	retlw	66	;'B'
   557  07DC  3441               	retlw	65	;'A'
   558  07DD  344E               	retlw	78	;'N'
   559  07DE  344B               	retlw	75	;'K'
   560  07DF  3420               	retlw	32	;' '
   561  07E0  344F               	retlw	79	;'O'
   562  07E1  344E               	retlw	78	;'N'
   563  07E2  3420               	retlw	32	;' '
   564  07E3  3400               	retlw	0
   565  07E4                     STR_17:	
   566  07E4  3454               	retlw	84	;'T'
   567  07E5  3452               	retlw	82	;'R'
   568  07E6  3449               	retlw	73	;'I'
   569  07E7  3450               	retlw	80	;'P'
   570  07E8  3420               	retlw	32	;' '
   571  07E9  344F               	retlw	79	;'O'
   572  07EA  344E               	retlw	78	;'N'
   573  07EB  3420               	retlw	32	;' '
   574  07EC  3400               	retlw	0
   575  07ED                     STR_20:	
   576  07ED  3442               	retlw	66	;'B'
   577  07EE  3441               	retlw	65	;'A'
   578  07EF  344E               	retlw	78	;'N'
   579  07F0  344B               	retlw	75	;'K'
   580  07F1  3420               	retlw	32	;' '
   581  07F2  344F               	retlw	79	;'O'
   582  07F3  3446               	retlw	70	;'F'
   583  07F4  3446               	retlw	70	;'F'
   584  07F5  3400               	retlw	0
   585  07F6                     STR_18:	
   586  07F6  3454               	retlw	84	;'T'
   587  07F7  3452               	retlw	82	;'R'
   588  07F8  3449               	retlw	73	;'I'
   589  07F9  3450               	retlw	80	;'P'
   590  07FA  3420               	retlw	32	;' '
   591  07FB  344F               	retlw	79	;'O'
   592  07FC  3446               	retlw	70	;'F'
   593  07FD  3446               	retlw	70	;'F'
   594  07FE  3400               	retlw	0
   595  07FF                     STR_21:	
   596  07FF  3450               	retlw	80	;'P'
   597  0800  3449               	retlw	73	;'I'
   598  0801  3452               	retlw	82	;'R'
   599  0802  3420               	retlw	32	;' '
   600  0803  344F               	retlw	79	;'O'
   601  0804  344E               	retlw	78	;'N'
   602  0805  3420               	retlw	32	;' '
   603  0806  3400               	retlw	0
   604  0807                     STR_22:	
   605  0807  3450               	retlw	80	;'P'
   606  0808  3449               	retlw	73	;'I'
   607  0809  3452               	retlw	82	;'R'
   608  080A  3420               	retlw	32	;' '
   609  080B  344F               	retlw	79	;'O'
   610  080C  3446               	retlw	70	;'F'
   611  080D  3446               	retlw	70	;'F'
   612  080E  3400               	retlw	0
   613  080F                     STR_25:	
   614  080F  3454               	retlw	84	;'T'
   615  0810  3449               	retlw	73	;'I'
   616  0811  344D               	retlw	77	;'M'
   617  0812  3445               	retlw	69	;'E'
   618  0813  343A               	retlw	58	;':'
   619  0814  3420               	retlw	32	;' '
   620  0815  3400               	retlw	0
   621  0816                     STR_2:	
   622  0816  3445               	retlw	69	;'E'
   623  0817  3473               	retlw	115	;'s'
   624  0818  3470               	retlw	112	;'p'
   625  0819  3465               	retlw	101	;'e'
   626  081A  3472               	retlw	114	;'r'
   627  081B  3465               	retlw	101	;'e'
   628  081C  3400               	retlw	0
   629  081D                     STR_26:	
   630  081D  3444               	retlw	68	;'D'
   631  081E  3441               	retlw	65	;'A'
   632  081F  3459               	retlw	89	;'Y'
   633  0820  343A               	retlw	58	;':'
   634  0821  3420               	retlw	32	;' '
   635  0822  3400               	retlw	0
   636  0823                     STR_14:	
   637  0823  3432               	retlw	50	;'2'
   638  0824  3431               	retlw	49	;'1'
   639  0825  343A               	retlw	58	;':'
   640  0826  3430               	retlw	48	;'0'
   641  0827  3430               	retlw	48	;'0'
   642  0828  3400               	retlw	0
   643  0829                     STR_13:	
   644  0829  3432               	retlw	50	;'2'
   645  082A  3432               	retlw	50	;'2'
   646  082B  343A               	retlw	58	;':'
   647  082C  3430               	retlw	48	;'0'
   648  082D  3430               	retlw	48	;'0'
   649  082E  3400               	retlw	0
   650  082F                     STR_12:	
   651  082F  3432               	retlw	50	;'2'
   652  0830  3433               	retlw	51	;'3'
   653  0831  342E               	retlw	46	;'.'
   654  0832  3435               	retlw	53	;'5'
   655  0833  3430               	retlw	48	;'0'
   656  0834  3400               	retlw	0
   657  0835                     STR_30:	
   658  0835  3457               	retlw	87	;'W'
   659  0836  3452               	retlw	82	;'R'
   660  0837  344F               	retlw	79	;'O'
   661  0838  344E               	retlw	78	;'N'
   662  0839  3447               	retlw	71	;'G'
   663  083A  3400               	retlw	0
   664  083B                     STR_33:	
   665  083B  342E               	retlw	46	;'.'
   666  083C  3425               	retlw	37	;'%'
   667  083D  3464               	retlw	100	;'d'
   668  083E  3430               	retlw	48	;'0'
   669  083F  3400               	retlw	0
   670  0840                     STR_34:	
   671  0840  342E               	retlw	46	;'.'
   672  0841  3425               	retlw	37	;'%'
   673  0842  3464               	retlw	100	;'d'
   674  0843  3400               	retlw	0
   675  074F                     
   676                           ; #config settings
   677  0000                     
   678                           	psect	cinit
   679  000F                     start_initialization:	
   680  000F                     __initialization:	
   681                           
   682                           ; Initialize objects allocated to BANK0
   683  000F  160A  118A  263C  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   684  0014  00E8               	movwf	__pdataBANK0& (0+127)
   685  0015  160A  118A  263D  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   686  001A  00E9               	movwf	(__pdataBANK0+1)& (0+127)
   687  001B  160A  118A  263E  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   688  0020  00EA               	movwf	(__pdataBANK0+2)& (0+127)
   689  0021  160A  118A  263F  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   690  0026  00EB               	movwf	(__pdataBANK0+3)& (0+127)
   691  0027  160A  118A  2640  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   692  002C  00EC               	movwf	(__pdataBANK0+4)& (0+127)
   693                           
   694                           ; Clear objects allocated to BANK0
   695  002D  1383               	bcf	3,7	;select IRP bank0
   696  002E  3020               	movlw	low __pbssBANK0
   697  002F  0084               	movwf	4
   698  0030  3047               	movlw	low (__pbssBANK0+39)
   699  0031  160A  118A  2664   	fcall	clear_ram0
   700                           
   701                           ; Clear objects allocated to COMMON
   702  0034  01F8               	clrf	__pbssCOMMON& (0+127)
   703  0035  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   704  0036  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   705  0037                     end_of_initialization:	
   706                           ;End of C runtime variable initialization code
   707                           
   708  0037                     __end_of__initialization:	
   709  0037  0183               	clrf	3
   710  0038  120A  118A  283B   	ljmp	_main	;jump to C main() function
   711                           
   712                           	psect	bssCOMMON
   713  0078                     __pbssCOMMON:	
   714  0078                     _k:	
   715  0078                     	ds	1
   716  0079                     _day1:	
   717  0079                     	ds	1
   718  007A                     _state:	
   719  007A                     	ds	1
   720                           
   721                           	psect	bssBANK0
   722  0020                     __pbssBANK0:	
   723  0020                     _passwordu:	
   724  0020                     	ds	5
   725  0025                     _day2:	
   726  0025                     	ds	2
   727  0027                     _newmin:	
   728  0027                     	ds	1
   729  0028                     _newhour:	
   730  0028                     	ds	1
   731  0029                     _seguridad:	
   732  0029                     	ds	1
   733  002A                     _min:	
   734  002A                     	ds	1
   735  002B                     _hour:	
   736  002B                     	ds	1
   737  002C                     _val:	
   738  002C                     	ds	1
   739  002D                     _cont:	
   740  002D                     	ds	1
   741  002E                     _bank:	
   742  002E                     	ds	1
   743  002F                     _alarm:	
   744  002F                     	ds	1
   745  0030                     _change4:	
   746  0030                     	ds	1
   747  0031                     _change3:	
   748  0031                     	ds	1
   749  0032                     _change2:	
   750  0032                     	ds	1
   751  0033                     _change1:	
   752  0033                     	ds	1
   753  0034                     _change:	
   754  0034                     	ds	1
   755  0035                     _j:	
   756  0035                     	ds	1
   757  0036                     _i:	
   758  0036                     	ds	1
   759  0037                     _IR:	
   760  0037                     	ds	1
   761  0038                     _PIR:	
   762  0038                     	ds	1
   763  0039                     _trip:	
   764  0039                     	ds	1
   765  003A                     _door:	
   766  003A                     	ds	1
   767  003B                     _temp:	
   768  003B                     	ds	6
   769  0041                     _time:	
   770  0041                     	ds	6
   771                           
   772                           	psect	dataBANK0
   773  0068                     __pdataBANK0:	
   774  0068                     _password:	
   775  0068                     	ds	5
   776                           
   777                           	psect	clrtext
   778  1664                     clear_ram0:	
   779                           ;	Called with FSR containing the base address, and
   780                           ;	W with the last address+1
   781                           
   782  1664  0064               	clrwdt	;clear the watchdog before getting into this loop
   783  1665                     clrloop0:	
   784  1665  0180               	clrf	0	;clear RAM location pointed to by FSR
   785  1666  0A84               	incf	4,f	;increment pointer
   786  1667  0604               	xorwf	4,w	;XOR with final address
   787  1668  1903               	btfsc	3,2	;have we reached the end yet?
   788  1669  3400               	retlw	0	;all done for this memory range, return
   789  166A  0604               	xorwf	4,w	;XOR again to restore value
   790  166B  2E65               	goto	clrloop0	;do the next byte
   791                           
   792                           	psect	cstackBANK1
   793  00A0                     __pcstackBANK1:	
   794  00A0                     ??_main:	
   795                           
   796                           ; 1 bytes @ 0x0
   797  00A0                     	ds	6
   798                           
   799                           	psect	cstackCOMMON
   800  0070                     __pcstackCOMMON:	
   801  0070                     ?_setup:	
   802  0070                     ?_get_temp:	
   803                           ; 1 bytes @ 0x0
   804                           
   805  0070                     ?_get_hall:	
   806                           ; 1 bytes @ 0x0
   807                           
   808  0070                     ?_get_tripwire:	
   809                           ; 1 bytes @ 0x0
   810                           
   811  0070                     ?_get_PIR:	
   812                           ; 1 bytes @ 0x0
   813                           
   814  0070                     ?_get_IR:	
   815                           ; 1 bytes @ 0x0
   816                           
   817  0070                     ?_get_time:	
   818                           ; 1 bytes @ 0x0
   819                           
   820  0070                     ?_get_day:	
   821                           ; 1 bytes @ 0x0
   822                           
   823  0070                     ?_open_door:	
   824                           ; 1 bytes @ 0x0
   825                           
   826  0070                     ?_close_door:	
   827                           ; 1 bytes @ 0x0
   828                           
   829  0070                     ?_I2C_Master_Wait:	
   830                           ; 1 bytes @ 0x0
   831                           
   832  0070                     ?_I2C_Master_Start:	
   833                           ; 1 bytes @ 0x0
   834                           
   835  0070                     ?_I2C_Master_RepeatedStart:	
   836                           ; 1 bytes @ 0x0
   837                           
   838  0070                     ?_I2C_Master_Stop:	
   839                           ; 1 bytes @ 0x0
   840                           
   841  0070                     ?_Lcd_Port:	
   842                           ; 1 bytes @ 0x0
   843                           
   844  0070                     ?_Lcd_Cmd:	
   845                           ; 1 bytes @ 0x0
   846                           
   847  0070                     ?_Lcd_Clear:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0070                     ?_Lcd_Init:	
   851                           ; 1 bytes @ 0x0
   852                           
   853  0070                     ?_Lcd_Write_Char:	
   854                           ; 1 bytes @ 0x0
   855                           
   856  0070                     ?_Lcd_Shift_Right:	
   857                           ; 1 bytes @ 0x0
   858                           
   859  0070                     ?_Lcd_Shift_Left:	
   860                           ; 1 bytes @ 0x0
   861                           
   862  0070                     ?_initOscilador:	
   863                           ; 1 bytes @ 0x0
   864                           
   865  0070                     ?_UART_TX_Empty:	
   866                           ; 1 bytes @ 0x0
   867                           
   868  0070                     ?_UART_Write:	
   869                           ; 1 bytes @ 0x0
   870                           
   871  0070                     ?_manual_pwm:	
   872                           ; 1 bytes @ 0x0
   873                           
   874  0070                     ??_manual_pwm:	
   875                           ; 1 bytes @ 0x0
   876                           
   877  0070                     ?_main:	
   878                           ; 1 bytes @ 0x0
   879                           
   880                           
   881                           ; 1 bytes @ 0x0
   882  0070                     	ds	3
   883  0073                     ?_strcat:	
   884  0073                     ??_I2C_Master_Wait:	
   885                           ; 1 bytes @ 0x3
   886                           
   887  0073                     ??_I2C_Master_Start:	
   888                           ; 1 bytes @ 0x3
   889                           
   890  0073                     ??_I2C_Master_RepeatedStart:	
   891                           ; 1 bytes @ 0x3
   892                           
   893  0073                     ??_I2C_Master_Stop:	
   894                           ; 1 bytes @ 0x3
   895                           
   896  0073                     ?_I2C_Master_Write:	
   897                           ; 1 bytes @ 0x3
   898                           
   899  0073                     ??_Lcd_Port:	
   900                           ; 1 bytes @ 0x3
   901                           
   902  0073                     ??_initOscilador:	
   903                           ; 1 bytes @ 0x3
   904                           
   905  0073                     ??_UART_TX_Empty:	
   906                           ; 1 bytes @ 0x3
   907                           
   908  0073                     ??_UART_Write:	
   909                           ; 1 bytes @ 0x3
   910                           
   911  0073                     ?___bmul:	
   912                           ; 1 bytes @ 0x3
   913                           
   914  0073                     ??___lldiv:	
   915                           ; 1 bytes @ 0x3
   916                           
   917  0073                     ??___aldiv:	
   918                           ; 1 bytes @ 0x3
   919                           
   920  0073                     ?_strcmp:	
   921                           ; 1 bytes @ 0x3
   922                           
   923  0073                     ?_I2C_Master_Read:	
   924                           ; 2 bytes @ 0x3
   925                           
   926  0073                     ?___awdiv:	
   927                           ; 2 bytes @ 0x3
   928                           
   929  0073                     ?___awmod:	
   930                           ; 2 bytes @ 0x3
   931                           
   932  0073                     ?___lwdiv:	
   933                           ; 2 bytes @ 0x3
   934                           
   935  0073                     Lcd_Port@a:	
   936                           ; 2 bytes @ 0x3
   937                           
   938  0073                     UART_Write@data:	
   939                           ; 1 bytes @ 0x3
   940                           
   941  0073                     ___bmul@multiplicand:	
   942                           ; 1 bytes @ 0x3
   943                           
   944  0073                     strcat@from:	
   945                           ; 1 bytes @ 0x3
   946                           
   947  0073                     I2C_Master_Write@d:	
   948                           ; 1 bytes @ 0x3
   949                           
   950  0073                     I2C_Master_Read@a:	
   951                           ; 2 bytes @ 0x3
   952                           
   953  0073                     ___awdiv@divisor:	
   954                           ; 2 bytes @ 0x3
   955                           
   956  0073                     ___awmod@divisor:	
   957                           ; 2 bytes @ 0x3
   958                           
   959  0073                     ___lwdiv@divisor:	
   960                           ; 2 bytes @ 0x3
   961                           
   962  0073                     strcmp@s2:	
   963                           ; 2 bytes @ 0x3
   964                           
   965                           
   966                           ; 2 bytes @ 0x3
   967  0073                     	ds	1
   968  0074                     ??_strcat:	
   969  0074                     ??_I2C_Master_Init:	
   970                           ; 1 bytes @ 0x4
   971                           
   972  0074                     ??_Lcd_Cmd:	
   973                           ; 1 bytes @ 0x4
   974                           
   975  0074                     ??_Lcd_Write_Char:	
   976                           ; 1 bytes @ 0x4
   977                           
   978  0074                     ??___bmul:	
   979                           ; 1 bytes @ 0x4
   980                           
   981  0074                     UART_Init@x:	
   982                           ; 1 bytes @ 0x4
   983                           
   984                           
   985                           ; 2 bytes @ 0x4
   986  0074                     	ds	1
   987  0075                     ??_open_door:	
   988  0075                     ??_close_door:	
   989                           ; 1 bytes @ 0x5
   990                           
   991  0075                     ??_strcmp:	
   992                           ; 1 bytes @ 0x5
   993                           
   994  0075                     ?_write_RTC:	
   995                           ; 1 bytes @ 0x5
   996                           
   997  0075                     ??_I2C_Master_Write:	
   998                           ; 1 bytes @ 0x5
   999                           
  1000  0075                     ??_I2C_Master_Read:	
  1001                           ; 1 bytes @ 0x5
  1002                           
  1003  0075                     Lcd_Write_Char@temp:	
  1004                           ; 1 bytes @ 0x5
  1005                           
  1006  0075                     initOscilador@option:	
  1007                           ; 1 bytes @ 0x5
  1008                           
  1009  0075                     write_RTC@minutes:	
  1010                           ; 1 bytes @ 0x5
  1011                           
  1012  0075                     ___bmul@product:	
  1013                           ; 1 bytes @ 0x5
  1014                           
  1015  0075                     strcat@to:	
  1016                           ; 1 bytes @ 0x5
  1017                           
  1018  0075                     ___awdiv@dividend:	
  1019                           ; 1 bytes @ 0x5
  1020                           
  1021  0075                     ___awmod@dividend:	
  1022                           ; 2 bytes @ 0x5
  1023                           
  1024  0075                     ___lwdiv@dividend:	
  1025                           ; 2 bytes @ 0x5
  1026                           
  1027                           
  1028                           ; 2 bytes @ 0x5
  1029  0075                     	ds	1
  1030  0076                     Lcd_Cmd@a:	
  1031  0076                     Lcd_Write_Char@y:	
  1032                           ; 1 bytes @ 0x6
  1033                           
  1034  0076                     write_RTC@day:	
  1035                           ; 1 bytes @ 0x6
  1036                           
  1037  0076                     ___bmul@multiplier:	
  1038                           ; 1 bytes @ 0x6
  1039                           
  1040  0076                     strcat@cp:	
  1041                           ; 1 bytes @ 0x6
  1042                           
  1043                           
  1044                           ; 1 bytes @ 0x6
  1045  0076                     	ds	1
  1046  0077                     ??_get_hall:	
  1047  0077                     ??_get_tripwire:	
  1048                           ; 1 bytes @ 0x7
  1049                           
  1050  0077                     ??_get_PIR:	
  1051                           ; 1 bytes @ 0x7
  1052                           
  1053  0077                     ??_get_IR:	
  1054                           ; 1 bytes @ 0x7
  1055                           
  1056  0077                     ??_get_day:	
  1057                           ; 1 bytes @ 0x7
  1058                           
  1059  0077                     ??_Lcd_Clear:	
  1060                           ; 1 bytes @ 0x7
  1061                           
  1062  0077                     ?_Lcd_Set_Cursor:	
  1063                           ; 1 bytes @ 0x7
  1064                           
  1065  0077                     ??_Lcd_Shift_Right:	
  1066                           ; 1 bytes @ 0x7
  1067                           
  1068  0077                     ??_Lcd_Shift_Left:	
  1069                           ; 1 bytes @ 0x7
  1070                           
  1071  0077                     ??___awdiv:	
  1072                           ; 1 bytes @ 0x7
  1073                           
  1074  0077                     ??___awmod:	
  1075                           ; 1 bytes @ 0x7
  1076                           
  1077  0077                     ??___lwdiv:	
  1078                           ; 1 bytes @ 0x7
  1079                           
  1080  0077                     Lcd_Set_Cursor@b:	
  1081                           ; 1 bytes @ 0x7
  1082                           
  1083  0077                     Lcd_Write_Char@a:	
  1084                           ; 1 bytes @ 0x7
  1085                           
  1086  0077                     write_RTC@hour:	
  1087                           ; 1 bytes @ 0x7
  1088                           
  1089                           
  1090                           ; 1 bytes @ 0x7
  1091  0077                     	ds	1
  1092  0078                     ??_setup:	
  1093                           
  1094                           	psect	cstackBANK0
  1095  0047                     __pcstackBANK0:	
  1096                           ; 1 bytes @ 0x8
  1097                           
  1098  0047                     ??_write_RTC:	
  1099  0047                     ??_Lcd_Set_Cursor:	
  1100                           ; 1 bytes @ 0x0
  1101                           
  1102  0047                     ??_Lcd_Init:	
  1103                           ; 1 bytes @ 0x0
  1104                           
  1105  0047                     ?_Lcd_Write_String:	
  1106                           ; 1 bytes @ 0x0
  1107                           
  1108  0047                     ?___lldiv:	
  1109                           ; 1 bytes @ 0x0
  1110                           
  1111  0047                     ?___aldiv:	
  1112                           ; 4 bytes @ 0x0
  1113                           
  1114  0047                     ___awdiv@counter:	
  1115                           ; 4 bytes @ 0x0
  1116                           
  1117  0047                     ___awmod@counter:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0047                     ___lwdiv@counter:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123  0047                     strcmp@r:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126  0047                     I2C_Master_Read@temp:	
  1127                           ; 1 bytes @ 0x0
  1128                           
  1129  0047                     Lcd_Write_String@a:	
  1130                           ; 2 bytes @ 0x0
  1131                           
  1132  0047                     ___lldiv@divisor:	
  1133                           ; 2 bytes @ 0x0
  1134                           
  1135  0047                     ___aldiv@divisor:	
  1136                           ; 4 bytes @ 0x0
  1137                           
  1138                           
  1139                           ; 4 bytes @ 0x0
  1140  0047                     	ds	1
  1141  0048                     ___awdiv@sign:	
  1142  0048                     ___awmod@sign:	
  1143                           ; 1 bytes @ 0x1
  1144                           
  1145  0048                     strcmp@s1:	
  1146                           ; 1 bytes @ 0x1
  1147                           
  1148  0048                     ___lwdiv@quotient:	
  1149                           ; 1 bytes @ 0x1
  1150                           
  1151                           
  1152                           ; 2 bytes @ 0x1
  1153  0048                     	ds	1
  1154  0049                     ??_get_time:	
  1155  0049                     ??_Lcd_Write_String:	
  1156                           ; 1 bytes @ 0x2
  1157                           
  1158  0049                     Lcd_Set_Cursor@a:	
  1159                           ; 1 bytes @ 0x2
  1160                           
  1161  0049                     get_day@d:	
  1162                           ; 1 bytes @ 0x2
  1163                           
  1164  0049                     get_hall@key:	
  1165                           ; 1 bytes @ 0x2
  1166                           
  1167  0049                     get_tripwire@trip:	
  1168                           ; 1 bytes @ 0x2
  1169                           
  1170  0049                     get_PIR@PIR:	
  1171                           ; 1 bytes @ 0x2
  1172                           
  1173  0049                     get_IR@IR:	
  1174                           ; 1 bytes @ 0x2
  1175                           
  1176  0049                     ___awdiv@quotient:	
  1177                           ; 1 bytes @ 0x2
  1178                           
  1179                           
  1180                           ; 2 bytes @ 0x2
  1181  0049                     	ds	1
  1182  004A                     ?___lwmod:	
  1183  004A                     Lcd_Set_Cursor@z:	
  1184                           ; 2 bytes @ 0x3
  1185                           
  1186  004A                     ___lwmod@divisor:	
  1187                           ; 1 bytes @ 0x3
  1188                           
  1189                           
  1190                           ; 2 bytes @ 0x3
  1191  004A                     	ds	1
  1192  004B                     Lcd_Set_Cursor@y:	
  1193  004B                     get_time@hour:	
  1194                           ; 1 bytes @ 0x4
  1195                           
  1196  004B                     ___lldiv@dividend:	
  1197                           ; 1 bytes @ 0x4
  1198                           
  1199  004B                     ___aldiv@dividend:	
  1200                           ; 4 bytes @ 0x4
  1201                           
  1202                           
  1203                           ; 4 bytes @ 0x4
  1204  004B                     	ds	1
  1205  004C                     Lcd_Set_Cursor@temp:	
  1206  004C                     get_time@min:	
  1207                           ; 1 bytes @ 0x5
  1208                           
  1209  004C                     Lcd_Write_String@i:	
  1210                           ; 1 bytes @ 0x5
  1211                           
  1212  004C                     ___lwmod@dividend:	
  1213                           ; 2 bytes @ 0x5
  1214                           
  1215                           
  1216                           ; 2 bytes @ 0x5
  1217  004C                     	ds	1
  1218  004D                     get_time@time_string:	
  1219                           
  1220                           ; 1 bytes @ 0x6
  1221  004D                     	ds	1
  1222  004E                     ??___lwmod:	
  1223                           
  1224                           ; 1 bytes @ 0x7
  1225  004E                     	ds	1
  1226  004F                     ___aldiv@counter:	
  1227  004F                     ___lwmod@counter:	
  1228                           ; 1 bytes @ 0x8
  1229                           
  1230  004F                     ___lldiv@quotient:	
  1231                           ; 1 bytes @ 0x8
  1232                           
  1233                           
  1234                           ; 4 bytes @ 0x8
  1235  004F                     	ds	1
  1236  0050                     ?_sprintf:	
  1237  0050                     ___aldiv@sign:	
  1238                           ; 2 bytes @ 0x9
  1239                           
  1240  0050                     sprintf@f:	
  1241                           ; 1 bytes @ 0x9
  1242                           
  1243                           
  1244                           ; 2 bytes @ 0x9
  1245  0050                     	ds	1
  1246  0051                     ___aldiv@quotient:	
  1247                           
  1248                           ; 4 bytes @ 0xA
  1249  0051                     	ds	2
  1250  0053                     ___lldiv@counter:	
  1251                           
  1252                           ; 1 bytes @ 0xC
  1253  0053                     	ds	1
  1254  0054                     ??_sprintf:	
  1255  0054                     ?_I2C_Master_Init:	
  1256                           ; 1 bytes @ 0xD
  1257                           
  1258  0054                     I2C_Master_Init@c:	
  1259                           ; 1 bytes @ 0xD
  1260                           
  1261                           
  1262                           ; 4 bytes @ 0xD
  1263  0054                     	ds	1
  1264  0055                     ?_UART_Init:	
  1265  0055                     UART_Init@baudrate:	
  1266                           ; 1 bytes @ 0xE
  1267                           
  1268                           
  1269                           ; 4 bytes @ 0xE
  1270  0055                     	ds	3
  1271  0058                     sprintf@ap:	
  1272                           
  1273                           ; 1 bytes @ 0x11
  1274  0058                     	ds	1
  1275  0059                     ??_UART_Init:	
  1276  0059                     sprintf@flag:	
  1277                           ; 1 bytes @ 0x12
  1278                           
  1279                           
  1280                           ; 1 bytes @ 0x12
  1281  0059                     	ds	1
  1282  005A                     sprintf@prec:	
  1283                           
  1284                           ; 1 bytes @ 0x13
  1285  005A                     	ds	1
  1286  005B                     sprintf@val:	
  1287                           
  1288                           ; 2 bytes @ 0x14
  1289  005B                     	ds	2
  1290  005D                     sprintf@sp:	
  1291                           
  1292                           ; 1 bytes @ 0x16
  1293  005D                     	ds	1
  1294  005E                     sprintf@c:	
  1295                           
  1296                           ; 1 bytes @ 0x17
  1297  005E                     	ds	1
  1298  005F                     ??_get_temp:	
  1299                           
  1300                           ; 1 bytes @ 0x18
  1301  005F                     	ds	3
  1302  0062                     get_temp@decimal:	
  1303                           
  1304                           ; 3 bytes @ 0x1B
  1305  0062                     	ds	3
  1306  0065                     get_temp@tempMSB:	
  1307                           
  1308                           ; 1 bytes @ 0x1E
  1309  0065                     	ds	1
  1310  0066                     get_temp@temp_string:	
  1311                           
  1312                           ; 1 bytes @ 0x1F
  1313  0066                     	ds	1
  1314  0067                     get_temp@tempLSB:	
  1315                           
  1316                           ; 1 bytes @ 0x20
  1317  0067                     	ds	1
  1318                           
  1319                           	psect	maintext
  1320  003B                     __pmaintext:	
  1321 ;;
  1322 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1323 ;;
  1324 ;; *************** function _main *****************
  1325 ;; Defined at:
  1326 ;;		line 77 in file "mainMaster.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;		None
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;		None
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  1    wreg      void 
  1333 ;; Registers used:
  1334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : B00/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1340 ;;      Params:         0       0       0       0       0
  1341 ;;      Locals:         0       0       0       0       0
  1342 ;;      Temps:          0       0       6       0       0
  1343 ;;      Totals:         0       0       6       0       0
  1344 ;;Total ram usage:        6 bytes
  1345 ;; Hardware stack levels required when called:    5
  1346 ;; This function calls:
  1347 ;;		_Lcd_Clear
  1348 ;;		_Lcd_Set_Cursor
  1349 ;;		_Lcd_Shift_Left
  1350 ;;		_Lcd_Shift_Right
  1351 ;;		_Lcd_Write_Char
  1352 ;;		_Lcd_Write_String
  1353 ;;		_UART_TX_Empty
  1354 ;;		_UART_Write
  1355 ;;		___awdiv
  1356 ;;		___awmod
  1357 ;;		___bmul
  1358 ;;		_close_door
  1359 ;;		_get_IR
  1360 ;;		_get_PIR
  1361 ;;		_get_day
  1362 ;;		_get_hall
  1363 ;;		_get_temp
  1364 ;;		_get_time
  1365 ;;		_get_tripwire
  1366 ;;		_open_door
  1367 ;;		_setup
  1368 ;;		_strcmp
  1369 ;;		_write_RTC
  1370 ;; This function is called by:
  1371 ;;		Startup code after reset
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           
  1376                           ;psect for function _main
  1377  003B                     _main:	
  1378                           
  1379                           ;mainMaster.c: 78:     setup();
  1380                           
  1381                           ;incstack = 0
  1382                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1383  003B  120A  158A  2362  120A  118A  	fcall	_setup
  1384                           
  1385                           ;mainMaster.c: 79:     state = 0;
  1386  0040  01FA               	clrf	_state
  1387                           
  1388                           ;mainMaster.c: 80:     seguridad = 1;
  1389  0041  1283               	bcf	3,5	;RP0=0, select bank0
  1390  0042  1303               	bcf	3,6	;RP1=0, select bank0
  1391  0043  01A9               	clrf	_seguridad
  1392  0044  0AA9               	incf	_seguridad,f
  1393                           
  1394                           ;mainMaster.c: 81:     Lcd_Clear();
  1395  0045  160A  118A  2676  120A  118A  	fcall	_Lcd_Clear
  1396                           
  1397                           ;mainMaster.c: 82:     PORTAbits.RA7 = 0;
  1398  004A  1283               	bcf	3,5	;RP0=0, select bank0
  1399  004B  1303               	bcf	3,6	;RP1=0, select bank0
  1400  004C  1385               	bcf	5,7	;volatile
  1401                           
  1402                           ;mainMaster.c: 83:     Lcd_Set_Cursor(1,1);
  1403  004D  01F7               	clrf	Lcd_Set_Cursor@b
  1404  004E  0AF7               	incf	Lcd_Set_Cursor@b,f
  1405  004F  3001               	movlw	1
  1406  0050  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  1407                           
  1408                           ;mainMaster.c: 84:     Lcd_Write_String("Iniciando Sistema de Seguridad");
  1409  0055  301C               	movlw	low (STR_1| (0+32768))
  1410  0056  1283               	bcf	3,5	;RP0=0, select bank0
  1411  0057  1303               	bcf	3,6	;RP1=0, select bank0
  1412  0058  00C7               	movwf	Lcd_Write_String@a
  1413  0059  3087               	movlw	high (STR_1| (0+32768))
  1414  005A  00C8               	movwf	Lcd_Write_String@a+1
  1415  005B  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  1416                           
  1417                           ;mainMaster.c: 85:     for (k = 0; k < 16; k++){
  1418  0060  01F8               	clrf	_k
  1419  0061                     l3990:	
  1420                           
  1421                           ;mainMaster.c: 86:         Lcd_Shift_Left();
  1422  0061  160A  118A  2681  120A  118A  	fcall	_Lcd_Shift_Left
  1423                           
  1424                           ;mainMaster.c: 87:         _delay((unsigned long)((300)*(8000000/4000.0)));
  1425  0066  3004               	movlw	4
  1426  0067  1683               	bsf	3,5	;RP0=1, select bank1
  1427  0068  1303               	bcf	3,6	;RP1=0, select bank1
  1428  0069  00A2               	movwf	(??_main^(0+128)+2)
  1429  006A  300C               	movlw	12
  1430  006B  00A1               	movwf	(??_main^(0+128)+1)
  1431  006C  3033               	movlw	51
  1432  006D  00A0               	movwf	??_main^(0+128)
  1433  006E                     u4897:	
  1434  006E  0BA0               	decfsz	??_main^(0+128),f
  1435  006F  286E               	goto	u4897
  1436  0070  0BA1               	decfsz	(??_main^(0+128)+1),f
  1437  0071  286E               	goto	u4897
  1438  0072  0BA2               	decfsz	(??_main^(0+128)+2),f
  1439  0073  286E               	goto	u4897
  1440                           
  1441                           ;mainMaster.c: 88:     }
  1442  0074  3001               	movlw	1
  1443  0075  1683               	bsf	3,5	;RP0=1, select bank1
  1444  0076  1303               	bcf	3,6	;RP1=0, select bank1
  1445  0077  00A0               	movwf	??_main^(0+128)
  1446  0078  0820               	movf	??_main^(0+128),w
  1447  0079  07F8               	addwf	_k,f
  1448  007A  3010               	movlw	16
  1449  007B  0278               	subwf	_k,w
  1450  007C  1C03               	skipc
  1451  007D  2861               	goto	l3990
  1452                           
  1453                           ;mainMaster.c: 89:     for (k = 0; k < 16; k++){
  1454  007E  01F8               	clrf	_k
  1455  007F                     l4004:	
  1456                           
  1457                           ;mainMaster.c: 90:         Lcd_Shift_Right();
  1458  007F  160A  118A  268C  120A  118A  	fcall	_Lcd_Shift_Right
  1459                           
  1460                           ;mainMaster.c: 91:         _delay((unsigned long)((300)*(8000000/4000.0)));
  1461  0084  3004               	movlw	4
  1462  0085  1683               	bsf	3,5	;RP0=1, select bank1
  1463  0086  1303               	bcf	3,6	;RP1=0, select bank1
  1464  0087  00A2               	movwf	(??_main^(0+128)+2)
  1465  0088  300C               	movlw	12
  1466  0089  00A1               	movwf	(??_main^(0+128)+1)
  1467  008A  3033               	movlw	51
  1468  008B  00A0               	movwf	??_main^(0+128)
  1469  008C                     u4907:	
  1470  008C  0BA0               	decfsz	??_main^(0+128),f
  1471  008D  288C               	goto	u4907
  1472  008E  0BA1               	decfsz	(??_main^(0+128)+1),f
  1473  008F  288C               	goto	u4907
  1474  0090  0BA2               	decfsz	(??_main^(0+128)+2),f
  1475  0091  288C               	goto	u4907
  1476                           
  1477                           ;mainMaster.c: 92:     }
  1478  0092  3001               	movlw	1
  1479  0093  1683               	bsf	3,5	;RP0=1, select bank1
  1480  0094  1303               	bcf	3,6	;RP1=0, select bank1
  1481  0095  00A0               	movwf	??_main^(0+128)
  1482  0096  0820               	movf	??_main^(0+128),w
  1483  0097  07F8               	addwf	_k,f
  1484  0098  3010               	movlw	16
  1485  0099  0278               	subwf	_k,w
  1486  009A  1C03               	skipc
  1487  009B  287F               	goto	l4004
  1488                           
  1489                           ;mainMaster.c: 93:     Lcd_Clear();
  1490  009C  160A  118A  2676  120A  118A  	fcall	_Lcd_Clear
  1491                           
  1492                           ;mainMaster.c: 94:     Lcd_Set_Cursor(1,1);
  1493  00A1  01F7               	clrf	Lcd_Set_Cursor@b
  1494  00A2  0AF7               	incf	Lcd_Set_Cursor@b,f
  1495  00A3  3001               	movlw	1
  1496  00A4  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  1497                           
  1498                           ;mainMaster.c: 95:     Lcd_Write_String("Espere");
  1499  00A9  3016               	movlw	low (STR_2| (0+32768))
  1500  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  1501  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  1502  00AC  00C7               	movwf	Lcd_Write_String@a
  1503  00AD  3088               	movlw	high (STR_2| (0+32768))
  1504  00AE  00C8               	movwf	Lcd_Write_String@a+1
  1505  00AF  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  1506                           
  1507                           ;mainMaster.c: 96:     Lcd_Set_Cursor(2,1);
  1508  00B4  01F7               	clrf	Lcd_Set_Cursor@b
  1509  00B5  0AF7               	incf	Lcd_Set_Cursor@b,f
  1510  00B6  3002               	movlw	2
  1511  00B7  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  1512                           
  1513                           ;mainMaster.c: 97:     Lcd_Write_String("un Momento");
  1514  00BC  308A               	movlw	low (STR_3| (0+32768))
  1515  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  1516  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  1517  00BF  00C7               	movwf	Lcd_Write_String@a
  1518  00C0  3087               	movlw	high (STR_3| (0+32768))
  1519  00C1  00C8               	movwf	Lcd_Write_String@a+1
  1520  00C2  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  1521                           
  1522                           ;mainMaster.c: 98:     _delay((unsigned long)((4000)*(8000000/4000.0)));
  1523  00C7  3029               	movlw	41
  1524  00C8  1683               	bsf	3,5	;RP0=1, select bank1
  1525  00C9  1303               	bcf	3,6	;RP1=0, select bank1
  1526  00CA  00A2               	movwf	(??_main^(0+128)+2)
  1527  00CB  3096               	movlw	150
  1528  00CC  00A1               	movwf	(??_main^(0+128)+1)
  1529  00CD  307E               	movlw	126
  1530  00CE  00A0               	movwf	??_main^(0+128)
  1531  00CF                     u4917:	
  1532  00CF  0BA0               	decfsz	??_main^(0+128),f
  1533  00D0  28CF               	goto	u4917
  1534  00D1  0BA1               	decfsz	(??_main^(0+128)+1),f
  1535  00D2  28CF               	goto	u4917
  1536  00D3  0BA2               	decfsz	(??_main^(0+128)+2),f
  1537  00D4  28CF               	goto	u4917
  1538  00D5  0000               	nop
  1539                           
  1540                           ;mainMaster.c: 99:     Lcd_Clear();
  1541  00D6  160A  118A  2676  120A  118A  	fcall	_Lcd_Clear
  1542  00DB                     l4022:	
  1543                           
  1544                           ;mainMaster.c: 104:         get_temp(temp);
  1545  00DB  303B               	movlw	(low (_temp| 0))& (0+255)
  1546  00DC  120A  158A  2595  120A  118A  	fcall	_get_temp
  1547                           
  1548                           ;mainMaster.c: 105:         door = get_hall();
  1549  00E1  160A  118A  275C  120A  118A  	fcall	_get_hall
  1550  00E6  1683               	bsf	3,5	;RP0=1, select bank1
  1551  00E7  1303               	bcf	3,6	;RP1=0, select bank1
  1552  00E8  00A0               	movwf	??_main^(0+128)
  1553  00E9  0820               	movf	??_main^(0+128),w
  1554  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  1555  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  1556  00EC  00BA               	movwf	_door
  1557                           
  1558                           ;mainMaster.c: 106:         trip = get_tripwire();
  1559  00ED  160A  118A  277F  120A  118A  	fcall	_get_tripwire
  1560  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  1561  00F3  1303               	bcf	3,6	;RP1=0, select bank1
  1562  00F4  00A0               	movwf	??_main^(0+128)
  1563  00F5  0820               	movf	??_main^(0+128),w
  1564  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  1565  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  1566  00F8  00B9               	movwf	_trip
  1567                           
  1568                           ;mainMaster.c: 108:         PIR = get_PIR();
  1569  00F9  160A  118A  2739  120A  118A  	fcall	_get_PIR
  1570  00FE  1683               	bsf	3,5	;RP0=1, select bank1
  1571  00FF  1303               	bcf	3,6	;RP1=0, select bank1
  1572  0100  00A0               	movwf	??_main^(0+128)
  1573  0101  0820               	movf	??_main^(0+128),w
  1574  0102  1283               	bcf	3,5	;RP0=0, select bank0
  1575  0103  1303               	bcf	3,6	;RP1=0, select bank0
  1576  0104  00B8               	movwf	_PIR
  1577                           
  1578                           ;mainMaster.c: 109:         IR = get_IR();
  1579  0105  160A  118A  2716  120A  118A  	fcall	_get_IR
  1580  010A  1683               	bsf	3,5	;RP0=1, select bank1
  1581  010B  1303               	bcf	3,6	;RP1=0, select bank1
  1582  010C  00A0               	movwf	??_main^(0+128)
  1583  010D  0820               	movf	??_main^(0+128),w
  1584  010E  1283               	bcf	3,5	;RP0=0, select bank0
  1585  010F  1303               	bcf	3,6	;RP1=0, select bank0
  1586  0110  00B7               	movwf	_IR
  1587                           
  1588                           ;mainMaster.c: 110:         get_time(time);
  1589  0111  3041               	movlw	(low (_time| 0))& (0+255)
  1590  0112  120A  158A  247D  120A  118A  	fcall	_get_time
  1591                           
  1592                           ;mainMaster.c: 111:         day1 = get_day();
  1593  0117  120A  158A  2116  120A  118A  	fcall	_get_day
  1594  011C  1683               	bsf	3,5	;RP0=1, select bank1
  1595  011D  1303               	bcf	3,6	;RP1=0, select bank1
  1596  011E  00A0               	movwf	??_main^(0+128)
  1597  011F  0820               	movf	??_main^(0+128),w
  1598  0120  00F9               	movwf	_day1
  1599                           
  1600                           ;mainMaster.c: 112:         bank = get_tripwire();
  1601  0121  160A  118A  277F  120A  118A  	fcall	_get_tripwire
  1602  0126  1683               	bsf	3,5	;RP0=1, select bank1
  1603  0127  1303               	bcf	3,6	;RP1=0, select bank1
  1604  0128  00A0               	movwf	??_main^(0+128)
  1605  0129  0820               	movf	??_main^(0+128),w
  1606  012A  1283               	bcf	3,5	;RP0=0, select bank0
  1607  012B  1303               	bcf	3,6	;RP1=0, select bank0
  1608  012C  00AE               	movwf	_bank
  1609                           
  1610                           ;mainMaster.c: 115:         if(PORTDbits.RD7 == 1){
  1611  012D  1F88               	btfss	8,7	;volatile
  1612  012E  296A               	goto	l323
  1613                           
  1614                           ;mainMaster.c: 116:             if (bank == 2){
  1615  012F  3002               	movlw	2
  1616  0130  062E               	xorwf	_bank,w
  1617  0131  1D03               	btfss	3,2
  1618  0132  294E               	goto	l4052
  1619                           
  1620                           ;mainMaster.c: 117:                 if (change1 == 0){
  1621  0133  0833               	movf	_change1,w
  1622  0134  1D03               	btfss	3,2
  1623  0135  296C               	goto	l4066
  1624                           
  1625                           ;mainMaster.c: 120:                     open_door();
  1626  0136  120A  118A  26E3  120A  118A  	fcall	_open_door
  1627                           
  1628                           ;mainMaster.c: 121:                     j = 0;
  1629  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1630  013C  1303               	bcf	3,6	;RP1=0, select bank0
  1631  013D  01B5               	clrf	_j
  1632  013E                     l4050:	
  1633                           ;mainMaster.c: 122:                     while(j < 50){
  1634                           
  1635                           
  1636                           ;mainMaster.c: 122:                     while(j < 50){
  1637  013E  3032               	movlw	50
  1638  013F  0235               	subwf	_j,w
  1639  0140  1803               	btfsc	3,0
  1640  0141  294B               	goto	l328
  1641                           
  1642                           ;mainMaster.c: 123:                         j++;
  1643  0142  3001               	movlw	1
  1644  0143  1683               	bsf	3,5	;RP0=1, select bank1
  1645  0144  1303               	bcf	3,6	;RP1=0, select bank1
  1646  0145  00A0               	movwf	??_main^(0+128)
  1647  0146  0820               	movf	??_main^(0+128),w
  1648  0147  1283               	bcf	3,5	;RP0=0, select bank0
  1649  0148  1303               	bcf	3,6	;RP1=0, select bank0
  1650  0149  07B5               	addwf	_j,f
  1651  014A  293E               	goto	l4050
  1652  014B                     l328:	
  1653                           
  1654                           ;mainMaster.c: 126:                     change1 = 1;
  1655  014B  01B3               	clrf	_change1
  1656  014C  0AB3               	incf	_change1,f
  1657  014D  296C               	goto	l4066
  1658  014E                     l4052:	
  1659  014E  3003               	movlw	3
  1660  014F  062E               	xorwf	_bank,w
  1661  0150  1D03               	btfss	3,2
  1662  0151  296C               	goto	l4066
  1663                           
  1664                           ;mainMaster.c: 129:                 if (change1 == 0){
  1665  0152  0833               	movf	_change1,w
  1666  0153  1D03               	btfss	3,2
  1667  0154  296C               	goto	l4066
  1668                           
  1669                           ;mainMaster.c: 132:                     close_door();
  1670  0155  160A  118A  26DC  120A  118A  	fcall	_close_door
  1671                           
  1672                           ;mainMaster.c: 133:                     j = 0;
  1673  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1674  015B  1303               	bcf	3,6	;RP1=0, select bank0
  1675  015C  01B5               	clrf	_j
  1676  015D                     l4062:	
  1677                           ;mainMaster.c: 134:                     while(j < 50){
  1678                           
  1679                           
  1680                           ;mainMaster.c: 134:                     while(j < 50){
  1681  015D  3032               	movlw	50
  1682  015E  0235               	subwf	_j,w
  1683  015F  1803               	btfsc	3,0
  1684  0160  294B               	goto	l328
  1685                           
  1686                           ;mainMaster.c: 135:                         j++;
  1687  0161  3001               	movlw	1
  1688  0162  1683               	bsf	3,5	;RP0=1, select bank1
  1689  0163  1303               	bcf	3,6	;RP1=0, select bank1
  1690  0164  00A0               	movwf	??_main^(0+128)
  1691  0165  0820               	movf	??_main^(0+128),w
  1692  0166  1283               	bcf	3,5	;RP0=0, select bank0
  1693  0167  1303               	bcf	3,6	;RP1=0, select bank0
  1694  0168  07B5               	addwf	_j,f
  1695  0169  295D               	goto	l4062
  1696  016A                     l323:	
  1697                           ;mainMaster.c: 141:         } else if(PORTDbits.RD7 == 0){
  1698                           
  1699  016A  1F88               	btfss	8,7	;volatile
  1700                           
  1701                           ;mainMaster.c: 142:             change1 = 0;
  1702  016B  01B3               	clrf	_change1
  1703  016C                     l4066:	
  1704                           
  1705                           ;mainMaster.c: 145:         if (alarm == 0 & seguridad == 1){
  1706  016C  082F               	movf	_alarm,w
  1707  016D  1D03               	btfss	3,2
  1708  016E  297C               	goto	l337
  1709  016F  0329               	decf	_seguridad,w
  1710  0170  1D03               	btfss	3,2
  1711  0171  297C               	goto	l337
  1712                           
  1713                           ;mainMaster.c: 146:             alarm = trip | PIR | IR;
  1714  0172  0839               	movf	_trip,w
  1715  0173  0438               	iorwf	_PIR,w
  1716  0174  0437               	iorwf	_IR,w
  1717  0175  1683               	bsf	3,5	;RP0=1, select bank1
  1718  0176  1303               	bcf	3,6	;RP1=0, select bank1
  1719  0177  00A0               	movwf	??_main^(0+128)
  1720  0178  0820               	movf	??_main^(0+128),w
  1721  0179  1283               	bcf	3,5	;RP0=0, select bank0
  1722  017A  1303               	bcf	3,6	;RP1=0, select bank0
  1723  017B  00AF               	movwf	_alarm
  1724  017C                     l337:	
  1725                           ;mainMaster.c: 147:         }
  1726                           
  1727                           
  1728                           ;mainMaster.c: 151:         if (alarm == 1){
  1729  017C  032F               	decf	_alarm,w
  1730  017D  1D03               	btfss	3,2
  1731  017E  298D               	goto	l338
  1732                           
  1733                           ;mainMaster.c: 153:             if (change2 == 0){
  1734  017F  0832               	movf	_change2,w
  1735  0180  1D03               	btfss	3,2
  1736  0181  298F               	goto	l4082
  1737                           
  1738                           ;mainMaster.c: 154:                 change2 = 1;
  1739  0182  01B2               	clrf	_change2
  1740  0183  0AB2               	incf	_change2,f
  1741                           
  1742                           ;mainMaster.c: 155:                 close_door();
  1743  0184  160A  118A  26DC  120A  118A  	fcall	_close_door
  1744                           
  1745                           ;mainMaster.c: 156:                 PORTAbits.RA6 = 1;
  1746  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1747  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1748  018B  1705               	bsf	5,6	;volatile
  1749  018C  298F               	goto	l4082
  1750  018D                     l338:	
  1751                           ;mainMaster.c: 160:         else {
  1752                           
  1753                           
  1754                           ;mainMaster.c: 161:             PORTAbits.RA6 = 0;
  1755  018D  1305               	bcf	5,6	;volatile
  1756                           
  1757                           ;mainMaster.c: 162:             change2 = 0;
  1758  018E  01B2               	clrf	_change2
  1759  018F                     l4082:	
  1760                           
  1761                           ;mainMaster.c: 165:         if (seguridad == 1){
  1762  018F  0329               	decf	_seguridad,w
  1763  0190  1D03               	btfss	3,2
  1764  0191  29A2               	goto	l4098
  1765                           
  1766                           ;mainMaster.c: 166:             if (PORTDbits.RD6 == 1){
  1767  0192  1F08               	btfss	8,6	;volatile
  1768  0193  29A1               	goto	l4096
  1769                           
  1770                           ;mainMaster.c: 167:                 if (change3 == 0){
  1771  0194  0831               	movf	_change3,w
  1772  0195  1D03               	btfss	3,2
  1773  0196  29A2               	goto	l4098
  1774                           
  1775                           ;mainMaster.c: 168:                     if (alarm == 0){
  1776  0197  082F               	movf	_alarm,w
  1777  0198  1D03               	btfss	3,2
  1778  0199  299D               	goto	l4092
  1779                           
  1780                           ;mainMaster.c: 169:                         alarm = 1;
  1781  019A  01AF               	clrf	_alarm
  1782  019B  0AAF               	incf	_alarm,f
  1783                           
  1784                           ;mainMaster.c: 170:                     }else {
  1785  019C  299E               	goto	l4094
  1786  019D                     l4092:	
  1787                           
  1788                           ;mainMaster.c: 171:                         alarm = 0;
  1789  019D  01AF               	clrf	_alarm
  1790  019E                     l4094:	
  1791                           
  1792                           ;mainMaster.c: 173:                     change3 = 1;
  1793  019E  01B1               	clrf	_change3
  1794  019F  0AB1               	incf	_change3,f
  1795  01A0  29A2               	goto	l4098
  1796  01A1                     l4096:	
  1797                           
  1798                           ;mainMaster.c: 178:                 change3 = 0;
  1799  01A1  01B1               	clrf	_change3
  1800  01A2                     l4098:	
  1801                           
  1802                           ;mainMaster.c: 182:         SSPCONbits.SSPEN = 0;
  1803  01A2  1294               	bcf	20,5	;volatile
  1804                           
  1805                           ;mainMaster.c: 183:         RCSTAbits.SPEN = 1;
  1806  01A3  1798               	bsf	24,7	;volatile
  1807                           
  1808                           ;mainMaster.c: 185:         if (UART_TX_Empty()){
  1809  01A4  160A  118A  2641  120A  118A  	fcall	_UART_TX_Empty
  1810  01A9  3A00               	xorlw	0
  1811  01AA  1903               	skipnz
  1812  01AB  2A5E               	goto	l4132
  1813                           
  1814                           ;mainMaster.c: 186:             UART_Write(temp[0]);
  1815  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1816  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  1817  01AE  083B               	movf	_temp,w
  1818  01AF  160A  118A  266C  120A  118A  	fcall	_UART_Write
  1819                           
  1820                           ;mainMaster.c: 187:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1821  01B4  3003               	movlw	3
  1822  01B5  1683               	bsf	3,5	;RP0=1, select bank1
  1823  01B6  1303               	bcf	3,6	;RP1=0, select bank1
  1824  01B7  00A1               	movwf	(??_main^(0+128)+1)
  1825  01B8  3097               	movlw	151
  1826  01B9  00A0               	movwf	??_main^(0+128)
  1827  01BA                     u4927:	
  1828  01BA  0BA0               	decfsz	??_main^(0+128),f
  1829  01BB  29BA               	goto	u4927
  1830  01BC  0BA1               	decfsz	(??_main^(0+128)+1),f
  1831  01BD  29BA               	goto	u4927
  1832                           
  1833                           ;mainMaster.c: 188:             UART_Write(temp[1]);
  1834  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  1835  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  1836  01C0  083C               	movf	_temp+1,w
  1837  01C1  160A  118A  266C  120A  118A  	fcall	_UART_Write
  1838                           
  1839                           ;mainMaster.c: 189:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1840  01C6  3003               	movlw	3
  1841  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  1842  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  1843  01C9  00A1               	movwf	(??_main^(0+128)+1)
  1844  01CA  3097               	movlw	151
  1845  01CB  00A0               	movwf	??_main^(0+128)
  1846  01CC                     u4937:	
  1847  01CC  0BA0               	decfsz	??_main^(0+128),f
  1848  01CD  29CC               	goto	u4937
  1849  01CE  0BA1               	decfsz	(??_main^(0+128)+1),f
  1850  01CF  29CC               	goto	u4937
  1851                           
  1852                           ;mainMaster.c: 190:             UART_Write(temp[2]);
  1853  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1854  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  1855  01D2  083D               	movf	_temp+2,w
  1856  01D3  160A  118A  266C  120A  118A  	fcall	_UART_Write
  1857                           
  1858                           ;mainMaster.c: 191:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1859  01D8  3003               	movlw	3
  1860  01D9  1683               	bsf	3,5	;RP0=1, select bank1
  1861  01DA  1303               	bcf	3,6	;RP1=0, select bank1
  1862  01DB  00A1               	movwf	(??_main^(0+128)+1)
  1863  01DC  3097               	movlw	151
  1864  01DD  00A0               	movwf	??_main^(0+128)
  1865  01DE                     u4947:	
  1866  01DE  0BA0               	decfsz	??_main^(0+128),f
  1867  01DF  29DE               	goto	u4947
  1868  01E0  0BA1               	decfsz	(??_main^(0+128)+1),f
  1869  01E1  29DE               	goto	u4947
  1870                           
  1871                           ;mainMaster.c: 192:             UART_Write(temp[3]);
  1872  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  1873  01E3  1303               	bcf	3,6	;RP1=0, select bank0
  1874  01E4  083E               	movf	_temp+3,w
  1875  01E5  160A  118A  266C  120A  118A  	fcall	_UART_Write
  1876                           
  1877                           ;mainMaster.c: 193:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1878  01EA  3003               	movlw	3
  1879  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  1880  01EC  1303               	bcf	3,6	;RP1=0, select bank1
  1881  01ED  00A1               	movwf	(??_main^(0+128)+1)
  1882  01EE  3097               	movlw	151
  1883  01EF  00A0               	movwf	??_main^(0+128)
  1884  01F0                     u4957:	
  1885  01F0  0BA0               	decfsz	??_main^(0+128),f
  1886  01F1  29F0               	goto	u4957
  1887  01F2  0BA1               	decfsz	(??_main^(0+128)+1),f
  1888  01F3  29F0               	goto	u4957
  1889                           
  1890                           ;mainMaster.c: 194:             UART_Write(temp[4]);
  1891  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  1892  01F5  1303               	bcf	3,6	;RP1=0, select bank0
  1893  01F6  083F               	movf	_temp+4,w
  1894  01F7  160A  118A  266C  120A  118A  	fcall	_UART_Write
  1895                           
  1896                           ;mainMaster.c: 195:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1897  01FC  3003               	movlw	3
  1898  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  1899  01FE  1303               	bcf	3,6	;RP1=0, select bank1
  1900  01FF  00A1               	movwf	(??_main^(0+128)+1)
  1901  0200  3097               	movlw	151
  1902  0201  00A0               	movwf	??_main^(0+128)
  1903  0202                     u4967:	
  1904  0202  0BA0               	decfsz	??_main^(0+128),f
  1905  0203  2A02               	goto	u4967
  1906  0204  0BA1               	decfsz	(??_main^(0+128)+1),f
  1907  0205  2A02               	goto	u4967
  1908                           
  1909                           ;mainMaster.c: 196:             UART_Write(door);
  1910  0206  1283               	bcf	3,5	;RP0=0, select bank0
  1911  0207  1303               	bcf	3,6	;RP1=0, select bank0
  1912  0208  083A               	movf	_door,w
  1913  0209  160A  118A  266C  120A  118A  	fcall	_UART_Write
  1914                           
  1915                           ;mainMaster.c: 197:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1916  020E  3003               	movlw	3
  1917  020F  1683               	bsf	3,5	;RP0=1, select bank1
  1918  0210  1303               	bcf	3,6	;RP1=0, select bank1
  1919  0211  00A1               	movwf	(??_main^(0+128)+1)
  1920  0212  3097               	movlw	151
  1921  0213  00A0               	movwf	??_main^(0+128)
  1922  0214                     u4977:	
  1923  0214  0BA0               	decfsz	??_main^(0+128),f
  1924  0215  2A14               	goto	u4977
  1925  0216  0BA1               	decfsz	(??_main^(0+128)+1),f
  1926  0217  2A14               	goto	u4977
  1927                           
  1928                           ;mainMaster.c: 198:             UART_Write(alarm);
  1929  0218  1283               	bcf	3,5	;RP0=0, select bank0
  1930  0219  1303               	bcf	3,6	;RP1=0, select bank0
  1931  021A  082F               	movf	_alarm,w
  1932  021B  160A  118A  266C  120A  118A  	fcall	_UART_Write
  1933                           
  1934                           ;mainMaster.c: 199:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1935  0220  3003               	movlw	3
  1936  0221  1683               	bsf	3,5	;RP0=1, select bank1
  1937  0222  1303               	bcf	3,6	;RP1=0, select bank1
  1938  0223  00A1               	movwf	(??_main^(0+128)+1)
  1939  0224  3097               	movlw	151
  1940  0225  00A0               	movwf	??_main^(0+128)
  1941  0226                     u4987:	
  1942  0226  0BA0               	decfsz	??_main^(0+128),f
  1943  0227  2A26               	goto	u4987
  1944  0228  0BA1               	decfsz	(??_main^(0+128)+1),f
  1945  0229  2A26               	goto	u4987
  1946                           
  1947                           ;mainMaster.c: 200:             UART_Write(bank);
  1948  022A  1283               	bcf	3,5	;RP0=0, select bank0
  1949  022B  1303               	bcf	3,6	;RP1=0, select bank0
  1950  022C  082E               	movf	_bank,w
  1951  022D  160A  118A  266C  120A  118A  	fcall	_UART_Write
  1952                           
  1953                           ;mainMaster.c: 201:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1954  0232  3003               	movlw	3
  1955  0233  1683               	bsf	3,5	;RP0=1, select bank1
  1956  0234  1303               	bcf	3,6	;RP1=0, select bank1
  1957  0235  00A1               	movwf	(??_main^(0+128)+1)
  1958  0236  3097               	movlw	151
  1959  0237  00A0               	movwf	??_main^(0+128)
  1960  0238                     u4997:	
  1961  0238  0BA0               	decfsz	??_main^(0+128),f
  1962  0239  2A38               	goto	u4997
  1963  023A  0BA1               	decfsz	(??_main^(0+128)+1),f
  1964  023B  2A38               	goto	u4997
  1965                           
  1966                           ;mainMaster.c: 202:             UART_Write(seguridad);
  1967  023C  1283               	bcf	3,5	;RP0=0, select bank0
  1968  023D  1303               	bcf	3,6	;RP1=0, select bank0
  1969  023E  0829               	movf	_seguridad,w
  1970  023F  160A  118A  266C  120A  118A  	fcall	_UART_Write
  1971                           
  1972                           ;mainMaster.c: 203:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1973  0244  3003               	movlw	3
  1974  0245  1683               	bsf	3,5	;RP0=1, select bank1
  1975  0246  1303               	bcf	3,6	;RP1=0, select bank1
  1976  0247  00A1               	movwf	(??_main^(0+128)+1)
  1977  0248  3097               	movlw	151
  1978  0249  00A0               	movwf	??_main^(0+128)
  1979  024A                     u5007:	
  1980  024A  0BA0               	decfsz	??_main^(0+128),f
  1981  024B  2A4A               	goto	u5007
  1982  024C  0BA1               	decfsz	(??_main^(0+128)+1),f
  1983  024D  2A4A               	goto	u5007
  1984                           
  1985                           ;mainMaster.c: 204:             UART_Write('A');
  1986  024E  3041               	movlw	65
  1987  024F  160A  118A  266C  120A  118A  	fcall	_UART_Write
  1988                           
  1989                           ;mainMaster.c: 205:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1990  0254  3003               	movlw	3
  1991  0255  1683               	bsf	3,5	;RP0=1, select bank1
  1992  0256  1303               	bcf	3,6	;RP1=0, select bank1
  1993  0257  00A1               	movwf	(??_main^(0+128)+1)
  1994  0258  3097               	movlw	151
  1995  0259  00A0               	movwf	??_main^(0+128)
  1996  025A                     u5017:	
  1997  025A  0BA0               	decfsz	??_main^(0+128),f
  1998  025B  2A5A               	goto	u5017
  1999  025C  0BA1               	decfsz	(??_main^(0+128)+1),f
  2000  025D  2A5A               	goto	u5017
  2001  025E                     l4132:	
  2002                           
  2003                           ;mainMaster.c: 208:         RCSTAbits.SPEN = 0;
  2004  025E  1283               	bcf	3,5	;RP0=0, select bank0
  2005  025F  1303               	bcf	3,6	;RP1=0, select bank0
  2006  0260  1398               	bcf	24,7	;volatile
  2007                           
  2008                           ;mainMaster.c: 209:         SSPCONbits.SSPEN = 1;
  2009  0261  1694               	bsf	20,5	;volatile
  2010                           
  2011                           ;mainMaster.c: 211:         if (door == 1){
  2012  0262  033A               	decf	_door,w
  2013  0263  1D03               	btfss	3,2
  2014  0264  2A67               	goto	l4140
  2015                           
  2016                           ;mainMaster.c: 212:             val = 8;
  2017  0265  3008               	movlw	8
  2018  0266  2A6B               	goto	L1
  2019  0267                     l4140:	
  2020                           ;mainMaster.c: 213:         } else if (door == 0){
  2021                           
  2022  0267  083A               	movf	_door,w
  2023  0268  1D03               	btfss	3,2
  2024  0269  2AA4               	goto	l4162
  2025                           
  2026                           ;mainMaster.c: 214:             val = 16;
  2027  026A  3010               	movlw	16
  2028  026B                     L1:	
  2029  026B  1683               	bsf	3,5	;RP0=1, select bank1
  2030  026C  1303               	bcf	3,6	;RP1=0, select bank1
  2031  026D  00A0               	movwf	??_main^(0+128)
  2032  026E  0820               	movf	??_main^(0+128),w
  2033  026F  1283               	bcf	3,5	;RP0=0, select bank0
  2034  0270  1303               	bcf	3,6	;RP1=0, select bank0
  2035  0271  00AC               	movwf	_val
  2036  0272  2AA4               	goto	l4162
  2037  0273                     l4144:	
  2038                           
  2039                           ;mainMaster.c: 219:                 day2 = "LUNES    ";
  2040  0273  3095               	movlw	low (STR_4| (0+32768))
  2041  0274  1283               	bcf	3,5	;RP0=0, select bank0
  2042  0275  1303               	bcf	3,6	;RP1=0, select bank0
  2043  0276  00A5               	movwf	_day2
  2044  0277  3087               	movlw	high (STR_4| (0+32768))
  2045  0278  2AA2               	goto	L8
  2046  0279                     l4146:	
  2047                           ;mainMaster.c: 220:                 break;
  2048                           
  2049                           
  2050                           ;mainMaster.c: 222:                 day2 = "MARTES   ";
  2051  0279  30A9               	movlw	low (STR_5| (0+32768))
  2052  027A  1283               	bcf	3,5	;RP0=0, select bank0
  2053  027B  1303               	bcf	3,6	;RP1=0, select bank0
  2054  027C  00A5               	movwf	_day2
  2055  027D  3087               	movlw	high (STR_5| (0+32768))
  2056  027E  2AA2               	goto	L8
  2057  027F                     l4148:	
  2058                           ;mainMaster.c: 223:                 break;
  2059                           
  2060                           
  2061                           ;mainMaster.c: 225:                 day2 = "MIERCOLES";
  2062  027F  30D1               	movlw	low (STR_6| (0+32768))
  2063  0280  1283               	bcf	3,5	;RP0=0, select bank0
  2064  0281  1303               	bcf	3,6	;RP1=0, select bank0
  2065  0282  00A5               	movwf	_day2
  2066  0283  3087               	movlw	high (STR_6| (0+32768))
  2067  0284  2AA2               	goto	L8
  2068  0285                     l4150:	
  2069                           ;mainMaster.c: 226:                 break;
  2070                           
  2071                           
  2072                           ;mainMaster.c: 228:                 day2 = "JUEVES   ";
  2073  0285  30B3               	movlw	low (STR_7| (0+32768))
  2074  0286  1283               	bcf	3,5	;RP0=0, select bank0
  2075  0287  1303               	bcf	3,6	;RP1=0, select bank0
  2076  0288  00A5               	movwf	_day2
  2077  0289  3087               	movlw	high (STR_7| (0+32768))
  2078  028A  2AA2               	goto	L8
  2079  028B                     l4152:	
  2080                           ;mainMaster.c: 229:                 break;
  2081                           
  2082                           
  2083                           ;mainMaster.c: 231:                 day2 = "VIERNES  ";
  2084  028B  30C7               	movlw	low (STR_8| (0+32768))
  2085  028C  1283               	bcf	3,5	;RP0=0, select bank0
  2086  028D  1303               	bcf	3,6	;RP1=0, select bank0
  2087  028E  00A5               	movwf	_day2
  2088  028F  3087               	movlw	high (STR_8| (0+32768))
  2089  0290  2AA2               	goto	L8
  2090  0291                     l4154:	
  2091                           ;mainMaster.c: 232:                 break;
  2092                           
  2093                           
  2094                           ;mainMaster.c: 234:                 day2 = "SABADO   ";
  2095  0291  309F               	movlw	low (STR_9| (0+32768))
  2096  0292  1283               	bcf	3,5	;RP0=0, select bank0
  2097  0293  1303               	bcf	3,6	;RP1=0, select bank0
  2098  0294  00A5               	movwf	_day2
  2099  0295  3087               	movlw	high (STR_9| (0+32768))
  2100  0296  2AA2               	goto	L8
  2101  0297                     l4156:	
  2102                           ;mainMaster.c: 235:                 break;
  2103                           
  2104                           
  2105                           ;mainMaster.c: 237:                 day2 = "DOMINGO  ";
  2106  0297  30BD               	movlw	low (STR_10| (0+32768))
  2107  0298  1283               	bcf	3,5	;RP0=0, select bank0
  2108  0299  1303               	bcf	3,6	;RP1=0, select bank0
  2109  029A  00A5               	movwf	_day2
  2110  029B  3087               	movlw	high (STR_10| (0+32768))
  2111  029C  2AA2               	goto	L8
  2112  029D                     l4158:	
  2113                           ;mainMaster.c: 238:                 break;
  2114                           
  2115                           
  2116                           ;mainMaster.c: 240:                 day2 = "         ";
  2117  029D  304F               	movlw	low ((STR_31+3)| (0+32768))
  2118  029E  1283               	bcf	3,5	;RP0=0, select bank0
  2119  029F  1303               	bcf	3,6	;RP1=0, select bank0
  2120  02A0  00A5               	movwf	_day2
  2121  02A1  3087               	movlw	high ((STR_31+3)| (0+32768))
  2122  02A2                     L8:	
  2123  02A2  00A6               	movwf	_day2+1
  2124                           
  2125                           ;mainMaster.c: 241:                 break;
  2126  02A3  2AC5               	goto	l4164
  2127  02A4                     l4162:	
  2128  02A4  0879               	movf	_day1,w
  2129  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  2130  02A6  1303               	bcf	3,6	;RP1=0, select bank1
  2131  02A7  00A0               	movwf	??_main^(0+128)
  2132  02A8  01A1               	clrf	(??_main^(0+128)+1)
  2133                           
  2134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2135                           ; Switch size 1, requested type "simple"
  2136                           ; Number of cases is 1, Range of values is 0 to 0
  2137                           ; switch strategies available:
  2138                           ; Name         Instructions Cycles
  2139                           ; simple_byte            4     3 (average)
  2140                           ; direct_byte           11     8 (fixed)
  2141                           ; jumptable            260     6 (fixed)
  2142                           ;	Chosen strategy is simple_byte
  2143  02A9  0821               	movf	(??_main+1)^(0+128),w
  2144  02AA  3A00               	xorlw	0	; case 0
  2145  02AB  1903               	skipnz
  2146  02AC  2AAE               	goto	l4516
  2147  02AD  2A9D               	goto	l4158
  2148  02AE                     l4516:	
  2149                           
  2150                           ; Switch size 1, requested type "simple"
  2151                           ; Number of cases is 7, Range of values is 1 to 7
  2152                           ; switch strategies available:
  2153                           ; Name         Instructions Cycles
  2154                           ; simple_byte           22    12 (average)
  2155                           ; direct_byte           32    11 (fixed)
  2156                           ; jumptable            263     9 (fixed)
  2157                           ;	Chosen strategy is simple_byte
  2158  02AE  0820               	movf	??_main^(0+128),w
  2159  02AF  3A01               	xorlw	1	; case 1
  2160  02B0  1903               	skipnz
  2161  02B1  2A73               	goto	l4144
  2162  02B2  3A03               	xorlw	3	; case 2
  2163  02B3  1903               	skipnz
  2164  02B4  2A79               	goto	l4146
  2165  02B5  3A01               	xorlw	1	; case 3
  2166  02B6  1903               	skipnz
  2167  02B7  2A7F               	goto	l4148
  2168  02B8  3A07               	xorlw	7	; case 4
  2169  02B9  1903               	skipnz
  2170  02BA  2A85               	goto	l4150
  2171  02BB  3A01               	xorlw	1	; case 5
  2172  02BC  1903               	skipnz
  2173  02BD  2A8B               	goto	l4152
  2174  02BE  3A03               	xorlw	3	; case 6
  2175  02BF  1903               	skipnz
  2176  02C0  2A91               	goto	l4154
  2177  02C1  3A01               	xorlw	1	; case 7
  2178  02C2  1903               	skipnz
  2179  02C3  2A97               	goto	l4156
  2180  02C4  2A9D               	goto	l4158
  2181  02C5                     l4164:	
  2182                           
  2183                           ;mainMaster.c: 245:         if (strcmp(temp,"23.50") > 0){
  2184  02C5  302F               	movlw	low (STR_12| (0+32768))
  2185  02C6  00F3               	movwf	strcmp@s2
  2186  02C7  3088               	movlw	high (STR_12| (0+32768))
  2187  02C8  00F4               	movwf	strcmp@s2+1
  2188  02C9  303B               	movlw	(low (_temp| 0))& (0+255)
  2189  02CA  160A  118A  27D0  120A  118A  	fcall	_strcmp
  2190  02CF  0874               	movf	?_strcmp+1,w
  2191  02D0  3A80               	xorlw	128
  2192  02D1  00FF               	movwf	127
  2193  02D2  3080               	movlw	128
  2194  02D3  027F               	subwf	127,w
  2195  02D4  1D03               	skipz
  2196  02D5  2AD8               	goto	u4335
  2197  02D6  3001               	movlw	1
  2198  02D7  0273               	subwf	?_strcmp,w
  2199  02D8                     u4335:	
  2200  02D8  1C03               	skipc
  2201  02D9  2ADE               	goto	l361
  2202                           
  2203                           ;mainMaster.c: 246:             PORTAbits.RA0 = 1;
  2204  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  2205  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  2206  02DC  1405               	bsf	5,0	;volatile
  2207                           
  2208                           ;mainMaster.c: 247:         } else {
  2209  02DD  2AE1               	goto	l4168
  2210  02DE                     l361:	
  2211                           
  2212                           ;mainMaster.c: 248:             PORTAbits.RA0 = 0;
  2213  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  2214  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  2215  02E0  1005               	bcf	5,0	;volatile
  2216  02E1                     l4168:	
  2217                           
  2218                           ;mainMaster.c: 251:         if ((strcmp(time, "22:00") == 0) & ((day1 != 6) | (day1 != 7
      +                          ))){
  2219  02E1  3029               	movlw	low (STR_13| (0+32768))
  2220  02E2  00F3               	movwf	strcmp@s2
  2221  02E3  3088               	movlw	high (STR_13| (0+32768))
  2222  02E4  00F4               	movwf	strcmp@s2+1
  2223  02E5  3041               	movlw	(low (_time| 0))& (0+255)
  2224  02E6  160A  118A  27D0  120A  118A  	fcall	_strcmp
  2225  02EB  0873               	movf	?_strcmp,w
  2226  02EC  0474               	iorwf	?_strcmp+1,w
  2227  02ED  1D03               	btfss	3,2
  2228  02EE  2AF7               	goto	l4176
  2229  02EF  3006               	movlw	6
  2230  02F0  0679               	xorwf	_day1,w
  2231  02F1  1D03               	btfss	3,2
  2232  02F2  2B0D               	goto	l4174
  2233  02F3  3007               	movlw	7
  2234  02F4  0679               	xorwf	_day1,w
  2235  02F5  1D03               	btfss	3,2
  2236  02F6  2B0D               	goto	l4174
  2237  02F7                     l4176:	
  2238                           ;mainMaster.c: 253:         } else if ((strcmp(time, "21:00") == 0) & ((day1 == 6) | (da
      +                          y1 == 7))){
  2239                           
  2240  02F7  3023               	movlw	low (STR_14| (0+32768))
  2241  02F8  00F3               	movwf	strcmp@s2
  2242  02F9  3088               	movlw	high (STR_14| (0+32768))
  2243  02FA  00F4               	movwf	strcmp@s2+1
  2244  02FB  3041               	movlw	(low (_time| 0))& (0+255)
  2245  02FC  160A  118A  27D0  120A  118A  	fcall	_strcmp
  2246  0301  0873               	movf	?_strcmp,w
  2247  0302  0474               	iorwf	?_strcmp+1,w
  2248  0303  1D03               	btfss	3,2
  2249  0304  2B12               	goto	l4184
  2250  0305  3006               	movlw	6
  2251  0306  0679               	xorwf	_day1,w
  2252  0307  1903               	btfsc	3,2
  2253  0308  2B0D               	goto	l4174
  2254  0309  3007               	movlw	7
  2255  030A  0679               	xorwf	_day1,w
  2256  030B  1D03               	btfss	3,2
  2257  030C  2B12               	goto	l4184
  2258  030D                     l4174:	
  2259                           
  2260                           ;mainMaster.c: 252:             close_door();
  2261  030D  160A  118A  26DC  120A  118A  	fcall	_close_door
  2262  0312                     l4184:	
  2263                           
  2264                           ;mainMaster.c: 258:         if(PORTCbits.RC0 == 1){
  2265  0312  1283               	bcf	3,5	;RP0=0, select bank0
  2266  0313  1303               	bcf	3,6	;RP1=0, select bank0
  2267  0314  1C07               	btfss	7,0	;volatile
  2268  0315  2B3F               	goto	l4202
  2269                           
  2270                           ;mainMaster.c: 259:             if (change == 0){
  2271  0316  0834               	movf	_change,w
  2272  0317  1D03               	btfss	3,2
  2273  0318  2B40               	goto	l4204
  2274                           
  2275                           ;mainMaster.c: 260:                 state++;
  2276  0319  3001               	movlw	1
  2277  031A  1683               	bsf	3,5	;RP0=1, select bank1
  2278  031B  1303               	bcf	3,6	;RP1=0, select bank1
  2279  031C  00A0               	movwf	??_main^(0+128)
  2280  031D  0820               	movf	??_main^(0+128),w
  2281  031E  07FA               	addwf	_state,f
  2282                           
  2283                           ;mainMaster.c: 261:                 if (state == 4){
  2284  031F  3004               	movlw	4
  2285  0320  067A               	xorwf	_state,w
  2286  0321  1903               	btfsc	3,2
  2287                           
  2288                           ;mainMaster.c: 262:                     k = 0;
  2289  0322  01F8               	clrf	_k
  2290                           
  2291                           ;mainMaster.c: 264:                 Lcd_Clear();
  2292  0323  160A  118A  2676  120A  118A  	fcall	_Lcd_Clear
  2293                           
  2294                           ;mainMaster.c: 265:                 if (state > 4){
  2295  0328  3005               	movlw	5
  2296  0329  027A               	subwf	_state,w
  2297  032A  1803               	btfsc	3,0
  2298                           
  2299                           ;mainMaster.c: 266:                     state = 0;
  2300  032B  01FA               	clrf	_state
  2301                           
  2302                           ;mainMaster.c: 268:                 j = 0;
  2303                           
  2304                           ;mainMaster.c: 267:                 }
  2305  032C  1283               	bcf	3,5	;RP0=0, select bank0
  2306  032D  1303               	bcf	3,6	;RP1=0, select bank0
  2307  032E  01B5               	clrf	_j
  2308  032F                     l4200:	
  2309                           ;mainMaster.c: 269:                 while(j < 50){
  2310                           
  2311                           
  2312                           ;mainMaster.c: 269:                 while(j < 50){
  2313  032F  3032               	movlw	50
  2314  0330  0235               	subwf	_j,w
  2315  0331  1803               	btfsc	3,0
  2316  0332  2B3C               	goto	l376
  2317                           
  2318                           ;mainMaster.c: 270:                     j++;
  2319  0333  3001               	movlw	1
  2320  0334  1683               	bsf	3,5	;RP0=1, select bank1
  2321  0335  1303               	bcf	3,6	;RP1=0, select bank1
  2322  0336  00A0               	movwf	??_main^(0+128)
  2323  0337  0820               	movf	??_main^(0+128),w
  2324  0338  1283               	bcf	3,5	;RP0=0, select bank0
  2325  0339  1303               	bcf	3,6	;RP1=0, select bank0
  2326  033A  07B5               	addwf	_j,f
  2327  033B  2B2F               	goto	l4200
  2328  033C                     l376:	
  2329                           
  2330                           ;mainMaster.c: 273:                 change = 1;
  2331  033C  01B4               	clrf	_change
  2332  033D  0AB4               	incf	_change,f
  2333  033E  2B40               	goto	l4204
  2334  033F                     l4202:	
  2335                           
  2336                           ;mainMaster.c: 276:             change =0;
  2337  033F  01B4               	clrf	_change
  2338  0340                     l4204:	
  2339                           
  2340                           ;mainMaster.c: 279:         if (state == 0){
  2341  0340  087A               	movf	_state,w
  2342  0341  1D03               	btfss	3,2
  2343  0342  2B8D               	goto	l4216
  2344                           
  2345                           ;mainMaster.c: 281:             Lcd_Set_Cursor(1,1);
  2346  0343  01F7               	clrf	Lcd_Set_Cursor@b
  2347  0344  0AF7               	incf	Lcd_Set_Cursor@b,f
  2348  0345  3001               	movlw	1
  2349  0346  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2350                           
  2351                           ;mainMaster.c: 282:             Lcd_Write_String(time);
  2352  034B  3041               	movlw	(low (_time| 0))& (0+255)
  2353  034C  1283               	bcf	3,5	;RP0=0, select bank0
  2354  034D  1303               	bcf	3,6	;RP1=0, select bank0
  2355  034E  00C7               	movwf	Lcd_Write_String@a
  2356  034F  3000               	movlw	0
  2357  0350  00C8               	movwf	Lcd_Write_String@a+1
  2358  0351  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  2359                           
  2360                           ;mainMaster.c: 284:             Lcd_Set_Cursor(1,7);
  2361  0356  3007               	movlw	7
  2362  0357  1683               	bsf	3,5	;RP0=1, select bank1
  2363  0358  1303               	bcf	3,6	;RP1=0, select bank1
  2364  0359  00A0               	movwf	??_main^(0+128)
  2365  035A  0820               	movf	??_main^(0+128),w
  2366  035B  00F7               	movwf	Lcd_Set_Cursor@b
  2367  035C  3001               	movlw	1
  2368  035D  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2369                           
  2370                           ;mainMaster.c: 285:             Lcd_Write_String(day2);
  2371  0362  1283               	bcf	3,5	;RP0=0, select bank0
  2372  0363  1303               	bcf	3,6	;RP1=0, select bank0
  2373  0364  0825               	movf	_day2,w
  2374  0365  00C7               	movwf	Lcd_Write_String@a
  2375  0366  0826               	movf	_day2+1,w
  2376  0367  00C8               	movwf	Lcd_Write_String@a+1
  2377  0368  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  2378                           
  2379                           ;mainMaster.c: 287:             Lcd_Set_Cursor(2,1);
  2380  036D  01F7               	clrf	Lcd_Set_Cursor@b
  2381  036E  0AF7               	incf	Lcd_Set_Cursor@b,f
  2382  036F  3002               	movlw	2
  2383  0370  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2384                           
  2385                           ;mainMaster.c: 288:             Lcd_Write_String(temp);
  2386  0375  303B               	movlw	(low (_temp| 0))& (0+255)
  2387  0376  1283               	bcf	3,5	;RP0=0, select bank0
  2388  0377  1303               	bcf	3,6	;RP1=0, select bank0
  2389  0378  00C7               	movwf	Lcd_Write_String@a
  2390  0379  3000               	movlw	0
  2391  037A  00C8               	movwf	Lcd_Write_String@a+1
  2392  037B  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  2393                           
  2394                           ;mainMaster.c: 289:             Lcd_Write_Char(223);
  2395  0380  30DF               	movlw	223
  2396  0381  120A  158A  20DD  120A  118A  	fcall	_Lcd_Write_Char
  2397                           
  2398                           ;mainMaster.c: 290:             Lcd_Write_Char('C');
  2399  0386  3043               	movlw	67
  2400  0387  120A  158A  20DD  120A  118A  	fcall	_Lcd_Write_Char
  2401                           
  2402                           ;mainMaster.c: 292:         } else if (state == 1){
  2403  038C  28DB               	goto	l4022
  2404  038D                     l4216:	
  2405  038D  037A               	decf	_state,w
  2406  038E  1D03               	btfss	3,2
  2407  038F  2BEA               	goto	l4242
  2408                           
  2409                           ;mainMaster.c: 294:             Lcd_Set_Cursor(1,1);
  2410  0390  01F7               	clrf	Lcd_Set_Cursor@b
  2411  0391  0AF7               	incf	Lcd_Set_Cursor@b,f
  2412  0392  3001               	movlw	1
  2413  0393  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2414                           
  2415                           ;mainMaster.c: 295:             if (door == 1){
  2416  0398  1283               	bcf	3,5	;RP0=0, select bank0
  2417  0399  1303               	bcf	3,6	;RP1=0, select bank0
  2418  039A  033A               	decf	_door,w
  2419  039B  1D03               	btfss	3,2
  2420  039C  2BA1               	goto	l4224
  2421                           
  2422                           ;mainMaster.c: 296:                 Lcd_Write_String("DOOR OPEN  ");
  2423  039D  3066               	movlw	low (STR_15| (0+32768))
  2424  039E  00C7               	movwf	Lcd_Write_String@a
  2425  039F  3087               	movlw	high (STR_15| (0+32768))
  2426  03A0  2BA4               	goto	L9
  2427  03A1                     l4224:	
  2428                           ;mainMaster.c: 297:             } else {
  2429                           
  2430                           
  2431                           ;mainMaster.c: 298:                 Lcd_Write_String("DOOR CLOSED");
  2432  03A1  3072               	movlw	low (STR_16| (0+32768))
  2433  03A2  00C7               	movwf	Lcd_Write_String@a
  2434  03A3  3087               	movlw	high (STR_16| (0+32768))
  2435  03A4                     L9:	
  2436  03A4  00C8               	movwf	Lcd_Write_String@a+1
  2437  03A5  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  2438                           
  2439                           ;mainMaster.c: 301:             Lcd_Set_Cursor(2,1);
  2440  03AA  01F7               	clrf	Lcd_Set_Cursor@b
  2441  03AB  0AF7               	incf	Lcd_Set_Cursor@b,f
  2442  03AC  3002               	movlw	2
  2443  03AD  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2444                           
  2445                           ;mainMaster.c: 302:             if (trip == 1){
  2446  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  2447  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  2448  03B4  0339               	decf	_trip,w
  2449  03B5  1D03               	btfss	3,2
  2450  03B6  2BBB               	goto	l4232
  2451                           
  2452                           ;mainMaster.c: 303:                 Lcd_Write_String("TRIP ON ");
  2453  03B7  30E4               	movlw	low (STR_17| (0+32768))
  2454  03B8  00C7               	movwf	Lcd_Write_String@a
  2455  03B9  3087               	movlw	high (STR_17| (0+32768))
  2456  03BA  2BBE               	goto	L10
  2457  03BB                     l4232:	
  2458                           ;mainMaster.c: 304:             } else {
  2459                           
  2460                           
  2461                           ;mainMaster.c: 305:                 Lcd_Write_String("TRIP OFF");
  2462  03BB  30F6               	movlw	low (STR_18| (0+32768))
  2463  03BC  00C7               	movwf	Lcd_Write_String@a
  2464  03BD  3087               	movlw	high (STR_18| (0+32768))
  2465  03BE                     L10:	
  2466  03BE  00C8               	movwf	Lcd_Write_String@a+1
  2467  03BF  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  2468                           
  2469                           ;mainMaster.c: 308:             Lcd_Set_Cursor(2,9);
  2470  03C4  3009               	movlw	9
  2471  03C5  1683               	bsf	3,5	;RP0=1, select bank1
  2472  03C6  1303               	bcf	3,6	;RP1=0, select bank1
  2473  03C7  00A0               	movwf	??_main^(0+128)
  2474  03C8  0820               	movf	??_main^(0+128),w
  2475  03C9  00F7               	movwf	Lcd_Set_Cursor@b
  2476  03CA  3002               	movlw	2
  2477  03CB  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2478                           
  2479                           ;mainMaster.c: 309:             if (bank == 3){
  2480  03D0  3003               	movlw	3
  2481  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  2482  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  2483  03D3  062E               	xorwf	_bank,w
  2484  03D4  1D03               	btfss	3,2
  2485  03D5  2BE0               	goto	l4240
  2486                           
  2487                           ;mainMaster.c: 310:                 Lcd_Write_String("BANK ON ");
  2488  03D6  30DB               	movlw	low (STR_19| (0+32768))
  2489  03D7  00C7               	movwf	Lcd_Write_String@a
  2490  03D8  3087               	movlw	high (STR_19| (0+32768))
  2491  03D9  00C8               	movwf	Lcd_Write_String@a+1
  2492  03DA  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  2493                           
  2494                           ;mainMaster.c: 311:             } else {
  2495  03DF  28DB               	goto	l4022
  2496  03E0                     l4240:	
  2497                           
  2498                           ;mainMaster.c: 312:                 Lcd_Write_String("BANK OFF");
  2499  03E0  30ED               	movlw	low (STR_20| (0+32768))
  2500  03E1  00C7               	movwf	Lcd_Write_String@a
  2501  03E2  3087               	movlw	high (STR_20| (0+32768))
  2502  03E3  00C8               	movwf	Lcd_Write_String@a+1
  2503  03E4  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  2504  03E9  28DB               	goto	l4022
  2505  03EA                     l4242:	
  2506  03EA  3002               	movlw	2
  2507  03EB  067A               	xorwf	_state,w
  2508  03EC  1D03               	btfss	3,2
  2509  03ED  2C29               	goto	l4260
  2510                           
  2511                           ;mainMaster.c: 317:             Lcd_Set_Cursor(1,1);
  2512  03EE  01F7               	clrf	Lcd_Set_Cursor@b
  2513  03EF  0AF7               	incf	Lcd_Set_Cursor@b,f
  2514  03F0  3001               	movlw	1
  2515  03F1  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2516                           
  2517                           ;mainMaster.c: 318:             if (PIR == 1){
  2518  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  2519  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  2520  03F8  0338               	decf	_PIR,w
  2521  03F9  1D03               	btfss	3,2
  2522  03FA  2BFF               	goto	l4250
  2523                           
  2524                           ;mainMaster.c: 319:                 Lcd_Write_String("PIR ON ");
  2525  03FB  30FF               	movlw	low (STR_21| (0+32768))
  2526  03FC  00C7               	movwf	Lcd_Write_String@a
  2527  03FD  3087               	movlw	high (STR_21| (0+32768))
  2528  03FE  2C02               	goto	L11
  2529  03FF                     l4250:	
  2530                           ;mainMaster.c: 320:             } else {
  2531                           
  2532                           
  2533                           ;mainMaster.c: 321:                 Lcd_Write_String("PIR OFF");
  2534  03FF  3007               	movlw	low (STR_22| (0+32768))
  2535  0400  00C7               	movwf	Lcd_Write_String@a
  2536  0401  3088               	movlw	high (STR_22| (0+32768))
  2537  0402                     L11:	
  2538  0402  00C8               	movwf	Lcd_Write_String@a+1
  2539  0403  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  2540                           
  2541                           ;mainMaster.c: 324:             Lcd_Set_Cursor(2,1);
  2542  0408  01F7               	clrf	Lcd_Set_Cursor@b
  2543  0409  0AF7               	incf	Lcd_Set_Cursor@b,f
  2544  040A  3002               	movlw	2
  2545  040B  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2546                           
  2547                           ;mainMaster.c: 325:             if (IR == 1){
  2548  0410  1283               	bcf	3,5	;RP0=0, select bank0
  2549  0411  1303               	bcf	3,6	;RP1=0, select bank0
  2550  0412  0337               	decf	_IR,w
  2551  0413  1D03               	btfss	3,2
  2552  0414  2C1F               	goto	l4258
  2553                           
  2554                           ;mainMaster.c: 326:                 Lcd_Write_String("IR ON ");
  2555  0415  3000               	movlw	low ((STR_21+1)| (0+32768))
  2556  0416  00C7               	movwf	Lcd_Write_String@a
  2557  0417  3088               	movlw	high ((STR_21+1)| (0+32768))
  2558  0418  00C8               	movwf	Lcd_Write_String@a+1
  2559  0419  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  2560                           
  2561                           ;mainMaster.c: 327:             } else {
  2562  041E  28DB               	goto	l4022
  2563  041F                     l4258:	
  2564                           
  2565                           ;mainMaster.c: 328:                 Lcd_Write_String("IR OFF");
  2566  041F  3008               	movlw	low ((STR_22+1)| (0+32768))
  2567  0420  00C7               	movwf	Lcd_Write_String@a
  2568  0421  3088               	movlw	high ((STR_22+1)| (0+32768))
  2569  0422  00C8               	movwf	Lcd_Write_String@a+1
  2570  0423  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  2571                           
  2572                           ;mainMaster.c: 330:         } else if (state == 3){
  2573                           
  2574                           ;mainMaster.c: 329:             }
  2575  0428  28DB               	goto	l4022
  2576  0429                     l4260:	
  2577  0429  3003               	movlw	3
  2578  042A  067A               	xorwf	_state,w
  2579  042B  1D03               	btfss	3,2
  2580  042C  2D7F               	goto	l4312
  2581                           
  2582                           ;mainMaster.c: 331:             Lcd_Set_Cursor(1,1);
  2583  042D  01F7               	clrf	Lcd_Set_Cursor@b
  2584  042E  0AF7               	incf	Lcd_Set_Cursor@b,f
  2585  042F  3001               	movlw	1
  2586  0430  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2587                           
  2588                           ;mainMaster.c: 332:             Lcd_Write_String("TIME: ");
  2589  0435  300F               	movlw	low (STR_25| (0+32768))
  2590  0436  1283               	bcf	3,5	;RP0=0, select bank0
  2591  0437  1303               	bcf	3,6	;RP1=0, select bank0
  2592  0438  00C7               	movwf	Lcd_Write_String@a
  2593  0439  3088               	movlw	high (STR_25| (0+32768))
  2594  043A  00C8               	movwf	Lcd_Write_String@a+1
  2595  043B  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  2596                           
  2597                           ;mainMaster.c: 333:             Lcd_Write_String(time);
  2598  0440  3041               	movlw	(low (_time| 0))& (0+255)
  2599  0441  1283               	bcf	3,5	;RP0=0, select bank0
  2600  0442  1303               	bcf	3,6	;RP1=0, select bank0
  2601  0443  00C7               	movwf	Lcd_Write_String@a
  2602  0444  3000               	movlw	0
  2603  0445  00C8               	movwf	Lcd_Write_String@a+1
  2604  0446  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  2605                           
  2606                           ;mainMaster.c: 335:             Lcd_Set_Cursor(2,1);
  2607  044B  01F7               	clrf	Lcd_Set_Cursor@b
  2608  044C  0AF7               	incf	Lcd_Set_Cursor@b,f
  2609  044D  3002               	movlw	2
  2610  044E  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2611                           
  2612                           ;mainMaster.c: 336:             Lcd_Write_String("DAY: ");
  2613  0453  301D               	movlw	low (STR_26| (0+32768))
  2614  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2615  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2616  0456  00C7               	movwf	Lcd_Write_String@a
  2617  0457  3088               	movlw	high (STR_26| (0+32768))
  2618  0458  00C8               	movwf	Lcd_Write_String@a+1
  2619  0459  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  2620                           
  2621                           ;mainMaster.c: 337:             Lcd_Write_String(day2);
  2622  045E  1283               	bcf	3,5	;RP0=0, select bank0
  2623  045F  1303               	bcf	3,6	;RP1=0, select bank0
  2624  0460  0825               	movf	_day2,w
  2625  0461  00C7               	movwf	Lcd_Write_String@a
  2626  0462  0826               	movf	_day2+1,w
  2627  0463  00C8               	movwf	Lcd_Write_String@a+1
  2628  0464  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  2629                           
  2630                           ;mainMaster.c: 339:             newhour = (time[0] - '0') * 10 + (time[1] - '0');
  2631  0469  300A               	movlw	10
  2632  046A  1683               	bsf	3,5	;RP0=1, select bank1
  2633  046B  1303               	bcf	3,6	;RP1=0, select bank1
  2634  046C  00A0               	movwf	??_main^(0+128)
  2635  046D  0820               	movf	??_main^(0+128),w
  2636  046E  00F3               	movwf	___bmul@multiplicand
  2637  046F  1283               	bcf	3,5	;RP0=0, select bank0
  2638  0470  1303               	bcf	3,6	;RP1=0, select bank0
  2639  0471  0841               	movf	_time,w
  2640  0472  160A  118A  2697  120A  118A  	fcall	___bmul
  2641  0477  1283               	bcf	3,5	;RP0=0, select bank0
  2642  0478  1303               	bcf	3,6	;RP1=0, select bank0
  2643  0479  0742               	addwf	_time+1,w
  2644  047A  3EF0               	addlw	240
  2645  047B  1683               	bsf	3,5	;RP0=1, select bank1
  2646  047C  1303               	bcf	3,6	;RP1=0, select bank1
  2647  047D  00A1               	movwf	(??_main+1)^(0+128)
  2648  047E  0821               	movf	(??_main+1)^(0+128),w
  2649  047F  1283               	bcf	3,5	;RP0=0, select bank0
  2650  0480  1303               	bcf	3,6	;RP1=0, select bank0
  2651  0481  00A8               	movwf	_newhour
  2652                           
  2653                           ;mainMaster.c: 340:             newmin = (time[3] - '0') * 10 + (time[4] - '0');
  2654  0482  300A               	movlw	10
  2655  0483  1683               	bsf	3,5	;RP0=1, select bank1
  2656  0484  1303               	bcf	3,6	;RP1=0, select bank1
  2657  0485  00A0               	movwf	??_main^(0+128)
  2658  0486  0820               	movf	??_main^(0+128),w
  2659  0487  00F3               	movwf	___bmul@multiplicand
  2660  0488  1283               	bcf	3,5	;RP0=0, select bank0
  2661  0489  1303               	bcf	3,6	;RP1=0, select bank0
  2662  048A  0844               	movf	_time+3,w
  2663  048B  160A  118A  2697  120A  118A  	fcall	___bmul
  2664  0490  1283               	bcf	3,5	;RP0=0, select bank0
  2665  0491  1303               	bcf	3,6	;RP1=0, select bank0
  2666  0492  0745               	addwf	_time+4,w
  2667  0493  3EF0               	addlw	240
  2668  0494  1683               	bsf	3,5	;RP0=1, select bank1
  2669  0495  1303               	bcf	3,6	;RP1=0, select bank1
  2670  0496  00A1               	movwf	(??_main+1)^(0+128)
  2671  0497  0821               	movf	(??_main+1)^(0+128),w
  2672  0498  1283               	bcf	3,5	;RP0=0, select bank0
  2673  0499  1303               	bcf	3,6	;RP1=0, select bank0
  2674  049A  00A7               	movwf	_newmin
  2675                           
  2676                           ;mainMaster.c: 342:             if (PORTDbits.RD4 == 1){
  2677  049B  1E08               	btfss	8,4	;volatile
  2678  049C  2CAB               	goto	l395
  2679                           
  2680                           ;mainMaster.c: 343:                 newhour++;
  2681  049D  3001               	movlw	1
  2682  049E  1683               	bsf	3,5	;RP0=1, select bank1
  2683  049F  1303               	bcf	3,6	;RP1=0, select bank1
  2684  04A0  00A0               	movwf	??_main^(0+128)
  2685  04A1  0820               	movf	??_main^(0+128),w
  2686  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  2687  04A3  1303               	bcf	3,6	;RP1=0, select bank0
  2688  04A4  07A8               	addwf	_newhour,f
  2689                           
  2690                           ;mainMaster.c: 344:                 if (newhour > 23){
  2691  04A5  3018               	movlw	24
  2692  04A6  0228               	subwf	_newhour,w
  2693  04A7  1C03               	skipc
  2694  04A8  2CE9               	goto	l4280
  2695                           
  2696                           ;mainMaster.c: 345:                     newhour = 0;
  2697  04A9  01A8               	clrf	_newhour
  2698                           
  2699                           ;mainMaster.c: 348:             } else if (PORTDbits.RD3 == 1){
  2700  04AA  2CE9               	goto	l4280
  2701  04AB                     l395:	
  2702  04AB  1D88               	btfss	8,3	;volatile
  2703  04AC  2CBB               	goto	l398
  2704                           
  2705                           ;mainMaster.c: 349:                 newhour--;
  2706  04AD  3001               	movlw	1
  2707  04AE  02A8               	subwf	_newhour,f
  2708                           
  2709                           ;mainMaster.c: 350:                 if (newhour == 255){
  2710  04AF  0A28               	incf	_newhour,w
  2711  04B0  1D03               	btfss	3,2
  2712  04B1  2CE9               	goto	l4280
  2713                           
  2714                           ;mainMaster.c: 351:                     newhour = 23;
  2715  04B2  3017               	movlw	23
  2716  04B3  1683               	bsf	3,5	;RP0=1, select bank1
  2717  04B4  1303               	bcf	3,6	;RP1=0, select bank1
  2718  04B5  00A0               	movwf	??_main^(0+128)
  2719  04B6  0820               	movf	??_main^(0+128),w
  2720  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  2721  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  2722  04B9  00A8               	movwf	_newhour
  2723  04BA  2CE9               	goto	l4280
  2724  04BB                     l398:	
  2725  04BB  1D08               	btfss	8,2	;volatile
  2726  04BC  2CCB               	goto	l401
  2727                           
  2728                           ;mainMaster.c: 355:                 newmin++;
  2729  04BD  3001               	movlw	1
  2730  04BE  1683               	bsf	3,5	;RP0=1, select bank1
  2731  04BF  1303               	bcf	3,6	;RP1=0, select bank1
  2732  04C0  00A0               	movwf	??_main^(0+128)
  2733  04C1  0820               	movf	??_main^(0+128),w
  2734  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  2735  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  2736  04C4  07A7               	addwf	_newmin,f
  2737                           
  2738                           ;mainMaster.c: 356:                 if (newmin > 59){
  2739  04C5  303C               	movlw	60
  2740  04C6  0227               	subwf	_newmin,w
  2741  04C7  1C03               	skipc
  2742  04C8  2CE9               	goto	l4280
  2743                           
  2744                           ;mainMaster.c: 357:                     newmin = 0;
  2745  04C9  01A7               	clrf	_newmin
  2746  04CA  2CE9               	goto	l4280
  2747  04CB                     l401:	
  2748  04CB  1C88               	btfss	8,1	;volatile
  2749  04CC  2CDB               	goto	l404
  2750                           
  2751                           ;mainMaster.c: 361:                 newmin--;
  2752  04CD  3001               	movlw	1
  2753  04CE  02A7               	subwf	_newmin,f
  2754                           
  2755                           ;mainMaster.c: 362:                 if (newmin == 255){
  2756  04CF  0A27               	incf	_newmin,w
  2757  04D0  1D03               	btfss	3,2
  2758  04D1  2CE9               	goto	l4280
  2759                           
  2760                           ;mainMaster.c: 363:                     newmin = 59;
  2761  04D2  303B               	movlw	59
  2762  04D3  1683               	bsf	3,5	;RP0=1, select bank1
  2763  04D4  1303               	bcf	3,6	;RP1=0, select bank1
  2764  04D5  00A0               	movwf	??_main^(0+128)
  2765  04D6  0820               	movf	??_main^(0+128),w
  2766  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  2767  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  2768  04D9  00A7               	movwf	_newmin
  2769  04DA  2CE9               	goto	l4280
  2770  04DB                     l404:	
  2771  04DB  1C08               	btfss	8,0	;volatile
  2772  04DC  2CF8               	goto	l4306
  2773                           
  2774                           ;mainMaster.c: 367:                 day1++;
  2775  04DD  3001               	movlw	1
  2776  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  2777  04DF  1303               	bcf	3,6	;RP1=0, select bank1
  2778  04E0  00A0               	movwf	??_main^(0+128)
  2779  04E1  0820               	movf	??_main^(0+128),w
  2780  04E2  07F9               	addwf	_day1,f
  2781                           
  2782                           ;mainMaster.c: 368:                 if (day1 > 7){
  2783  04E3  3008               	movlw	8
  2784  04E4  0279               	subwf	_day1,w
  2785  04E5  1C03               	skipc
  2786  04E6  2CE9               	goto	l4280
  2787                           
  2788                           ;mainMaster.c: 369:                     day1 = 1;
  2789  04E7  01F9               	clrf	_day1
  2790  04E8  0AF9               	incf	_day1,f
  2791  04E9                     l4280:	
  2792                           
  2793                           ;mainMaster.c: 347:                 _delay((unsigned long)((100)*(8000000/4000.0)));
  2794  04E9  3002               	movlw	2
  2795  04EA  1683               	bsf	3,5	;RP0=1, select bank1
  2796  04EB  1303               	bcf	3,6	;RP1=0, select bank1
  2797  04EC  00A2               	movwf	(??_main^(0+128)+2)
  2798  04ED  3004               	movlw	4
  2799  04EE  00A1               	movwf	(??_main^(0+128)+1)
  2800  04EF  30B9               	movlw	185
  2801  04F0  00A0               	movwf	??_main^(0+128)
  2802  04F1                     u5027:	
  2803  04F1  0BA0               	decfsz	??_main^(0+128),f
  2804  04F2  2CF1               	goto	u5027
  2805  04F3  0BA1               	decfsz	(??_main^(0+128)+1),f
  2806  04F4  2CF1               	goto	u5027
  2807  04F5  0BA2               	decfsz	(??_main^(0+128)+2),f
  2808  04F6  2CF1               	goto	u5027
  2809  04F7  2CF8               	nop2
  2810  04F8                     l4306:	
  2811                           
  2812                           ;mainMaster.c: 374:             hour = ((newhour / 10) << 4) + (newhour % 10);
  2813  04F8  300A               	movlw	10
  2814  04F9  00F3               	movwf	___awdiv@divisor
  2815  04FA  3000               	movlw	0
  2816  04FB  00F4               	movwf	___awdiv@divisor+1
  2817  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2818  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  2819  04FE  0828               	movf	_newhour,w
  2820  04FF  1683               	bsf	3,5	;RP0=1, select bank1
  2821  0500  1303               	bcf	3,6	;RP1=0, select bank1
  2822  0501  00A0               	movwf	??_main^(0+128)
  2823  0502  01A1               	clrf	(??_main^(0+128)+1)
  2824  0503  0820               	movf	??_main^(0+128),w
  2825  0504  00F5               	movwf	___awdiv@dividend
  2826  0505  0821               	movf	(??_main+1)^(0+128),w
  2827  0506  00F6               	movwf	___awdiv@dividend+1
  2828  0507  120A  158A  2307  120A  118A  	fcall	___awdiv
  2829  050C  0873               	movf	?___awdiv,w
  2830  050D  1683               	bsf	3,5	;RP0=1, select bank1
  2831  050E  1303               	bcf	3,6	;RP1=0, select bank1
  2832  050F  00A2               	movwf	(??_main+2)^(0+128)
  2833  0510  3004               	movlw	4
  2834  0511                     u4645:	
  2835  0511  1003               	clrc
  2836  0512  0DA2               	rlf	(??_main+2)^(0+128),f
  2837  0513  3EFF               	addlw	-1
  2838  0514  1D03               	skipz
  2839  0515  2D11               	goto	u4645
  2840  0516  300A               	movlw	10
  2841  0517  00F3               	movwf	___awmod@divisor
  2842  0518  3000               	movlw	0
  2843  0519  00F4               	movwf	___awmod@divisor+1
  2844  051A  1283               	bcf	3,5	;RP0=0, select bank0
  2845  051B  1303               	bcf	3,6	;RP1=0, select bank0
  2846  051C  0828               	movf	_newhour,w
  2847  051D  1683               	bsf	3,5	;RP0=1, select bank1
  2848  051E  1303               	bcf	3,6	;RP1=0, select bank1
  2849  051F  00A3               	movwf	(??_main+3)^(0+128)
  2850  0520  01A4               	clrf	((??_main+3)^(0+128)+1)
  2851  0521  0823               	movf	(??_main+3)^(0+128),w
  2852  0522  00F5               	movwf	___awmod@dividend
  2853  0523  0824               	movf	(??_main+4)^(0+128),w
  2854  0524  00F6               	movwf	___awmod@dividend+1
  2855  0525  120A  158A  2215  120A  118A  	fcall	___awmod
  2856  052A  0873               	movf	?___awmod,w
  2857  052B  1683               	bsf	3,5	;RP0=1, select bank1
  2858  052C  1303               	bcf	3,6	;RP1=0, select bank1
  2859  052D  0722               	addwf	(??_main+2)^(0+128),w
  2860  052E  00A5               	movwf	(??_main+5)^(0+128)
  2861  052F  0825               	movf	(??_main+5)^(0+128),w
  2862  0530  1283               	bcf	3,5	;RP0=0, select bank0
  2863  0531  1303               	bcf	3,6	;RP1=0, select bank0
  2864  0532  00AB               	movwf	_hour
  2865                           
  2866                           ;mainMaster.c: 375:             min = ((newmin / 10) << 4) + (newmin % 10);
  2867  0533  300A               	movlw	10
  2868  0534  00F3               	movwf	___awdiv@divisor
  2869  0535  3000               	movlw	0
  2870  0536  00F4               	movwf	___awdiv@divisor+1
  2871  0537  0827               	movf	_newmin,w
  2872  0538  1683               	bsf	3,5	;RP0=1, select bank1
  2873  0539  1303               	bcf	3,6	;RP1=0, select bank1
  2874  053A  00A0               	movwf	??_main^(0+128)
  2875  053B  01A1               	clrf	(??_main^(0+128)+1)
  2876  053C  0820               	movf	??_main^(0+128),w
  2877  053D  00F5               	movwf	___awdiv@dividend
  2878  053E  0821               	movf	(??_main+1)^(0+128),w
  2879  053F  00F6               	movwf	___awdiv@dividend+1
  2880  0540  120A  158A  2307  120A  118A  	fcall	___awdiv
  2881  0545  0873               	movf	?___awdiv,w
  2882  0546  1683               	bsf	3,5	;RP0=1, select bank1
  2883  0547  1303               	bcf	3,6	;RP1=0, select bank1
  2884  0548  00A2               	movwf	(??_main+2)^(0+128)
  2885  0549  3004               	movlw	4
  2886  054A                     u4655:	
  2887  054A  1003               	clrc
  2888  054B  0DA2               	rlf	(??_main+2)^(0+128),f
  2889  054C  3EFF               	addlw	-1
  2890  054D  1D03               	skipz
  2891  054E  2D4A               	goto	u4655
  2892  054F  300A               	movlw	10
  2893  0550  00F3               	movwf	___awmod@divisor
  2894  0551  3000               	movlw	0
  2895  0552  00F4               	movwf	___awmod@divisor+1
  2896  0553  1283               	bcf	3,5	;RP0=0, select bank0
  2897  0554  1303               	bcf	3,6	;RP1=0, select bank0
  2898  0555  0827               	movf	_newmin,w
  2899  0556  1683               	bsf	3,5	;RP0=1, select bank1
  2900  0557  1303               	bcf	3,6	;RP1=0, select bank1
  2901  0558  00A3               	movwf	(??_main+3)^(0+128)
  2902  0559  01A4               	clrf	((??_main+3)^(0+128)+1)
  2903  055A  0823               	movf	(??_main+3)^(0+128),w
  2904  055B  00F5               	movwf	___awmod@dividend
  2905  055C  0824               	movf	(??_main+4)^(0+128),w
  2906  055D  00F6               	movwf	___awmod@dividend+1
  2907  055E  120A  158A  2215  120A  118A  	fcall	___awmod
  2908  0563  0873               	movf	?___awmod,w
  2909  0564  1683               	bsf	3,5	;RP0=1, select bank1
  2910  0565  1303               	bcf	3,6	;RP1=0, select bank1
  2911  0566  0722               	addwf	(??_main+2)^(0+128),w
  2912  0567  00A5               	movwf	(??_main+5)^(0+128)
  2913  0568  0825               	movf	(??_main+5)^(0+128),w
  2914  0569  1283               	bcf	3,5	;RP0=0, select bank0
  2915  056A  1303               	bcf	3,6	;RP1=0, select bank0
  2916  056B  00AA               	movwf	_min
  2917                           
  2918                           ;mainMaster.c: 376:             write_RTC(hour, min, day1);
  2919  056C  082A               	movf	_min,w
  2920  056D  1683               	bsf	3,5	;RP0=1, select bank1
  2921  056E  1303               	bcf	3,6	;RP1=0, select bank1
  2922  056F  00A0               	movwf	??_main^(0+128)
  2923  0570  0820               	movf	??_main^(0+128),w
  2924  0571  00F5               	movwf	write_RTC@minutes
  2925  0572  0879               	movf	_day1,w
  2926  0573  00A1               	movwf	(??_main+1)^(0+128)
  2927  0574  0821               	movf	(??_main+1)^(0+128),w
  2928  0575  00F6               	movwf	write_RTC@day
  2929  0576  1283               	bcf	3,5	;RP0=0, select bank0
  2930  0577  1303               	bcf	3,6	;RP1=0, select bank0
  2931  0578  082B               	movf	_hour,w
  2932  0579  120A  158A  21CF  120A  118A  	fcall	_write_RTC
  2933                           
  2934                           ;mainMaster.c: 377:         } else if (state == 4){
  2935  057E  28DB               	goto	l4022
  2936  057F                     l4312:	
  2937  057F  3004               	movlw	4
  2938  0580  067A               	xorwf	_state,w
  2939  0581  1D03               	btfss	3,2
  2940  0582  28DB               	goto	l4022
  2941                           
  2942                           ;mainMaster.c: 378:             Lcd_Set_Cursor(1,1);
  2943  0583  01F7               	clrf	Lcd_Set_Cursor@b
  2944  0584  0AF7               	incf	Lcd_Set_Cursor@b,f
  2945  0585  3001               	movlw	1
  2946  0586  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2947                           
  2948                           ;mainMaster.c: 379:             Lcd_Write_String("PASSWORD:       ");
  2949  058B  303B               	movlw	low (STR_27| (0+32768))
  2950  058C  1283               	bcf	3,5	;RP0=0, select bank0
  2951  058D  1303               	bcf	3,6	;RP1=0, select bank0
  2952  058E  00C7               	movwf	Lcd_Write_String@a
  2953  058F  3087               	movlw	high (STR_27| (0+32768))
  2954  0590  00C8               	movwf	Lcd_Write_String@a+1
  2955  0591  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  2956                           
  2957                           ;mainMaster.c: 380:             Lcd_Set_Cursor(2,k + 1);
  2958  0596  0878               	movf	_k,w
  2959  0597  3E01               	addlw	1
  2960  0598  1683               	bsf	3,5	;RP0=1, select bank1
  2961  0599  1303               	bcf	3,6	;RP1=0, select bank1
  2962  059A  00A0               	movwf	??_main^(0+128)
  2963  059B  0820               	movf	??_main^(0+128),w
  2964  059C  00F7               	movwf	Lcd_Set_Cursor@b
  2965  059D  3002               	movlw	2
  2966  059E  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2967                           
  2968                           ;mainMaster.c: 382:             if (k < 5) {
  2969  05A3  3005               	movlw	5
  2970  05A4  0278               	subwf	_k,w
  2971  05A5  1803               	skipnc
  2972  05A6  2E5C               	goto	l4388
  2973                           
  2974                           ;mainMaster.c: 383:                 if (PORTDbits.RD0 == 1){
  2975  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  2976  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  2977  05A9  1C08               	btfss	8,0	;volatile
  2978  05AA  2DC4               	goto	l412
  2979                           
  2980                           ;mainMaster.c: 384:                     if (change4 == 0){
  2981  05AB  0830               	movf	_change4,w
  2982  05AC  1D03               	btfss	3,2
  2983  05AD  2E5C               	goto	l4388
  2984                           
  2985                           ;mainMaster.c: 385:                         passwordu[k] = 0;
  2986  05AE  0878               	movf	_k,w
  2987  05AF  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  2988  05B0  0084               	movwf	4
  2989  05B1  1383               	bcf	3,7	;select IRP bank0
  2990  05B2  0180               	clrf	0
  2991                           
  2992                           ;mainMaster.c: 386:                         k++;
  2993  05B3  3001               	movlw	1
  2994  05B4  1683               	bsf	3,5	;RP0=1, select bank1
  2995  05B5  1303               	bcf	3,6	;RP1=0, select bank1
  2996  05B6  00A0               	movwf	??_main^(0+128)
  2997  05B7  0820               	movf	??_main^(0+128),w
  2998  05B8  07F8               	addwf	_k,f
  2999                           
  3000                           ;mainMaster.c: 387:                         change4 = 1;
  3001  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  3002  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  3003  05BB  01B0               	clrf	_change4
  3004  05BC  0AB0               	incf	_change4,f
  3005                           
  3006                           ;mainMaster.c: 388:                         Lcd_Write_Char('*');
  3007  05BD  302A               	movlw	42
  3008  05BE  120A  158A  20DD  120A  118A  	fcall	_Lcd_Write_Char
  3009  05C3  2E5C               	goto	l4388
  3010  05C4                     l412:	
  3011  05C4  1C88               	btfss	8,1	;volatile
  3012  05C5  2DE0               	goto	l415
  3013                           
  3014                           ;mainMaster.c: 391:                     if (change4 == 0){
  3015  05C6  0830               	movf	_change4,w
  3016  05C7  1D03               	btfss	3,2
  3017  05C8  2E5C               	goto	l4388
  3018                           
  3019                           ;mainMaster.c: 392:                         passwordu[k] = 1;
  3020  05C9  0878               	movf	_k,w
  3021  05CA  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3022  05CB  0084               	movwf	4
  3023  05CC  1383               	bcf	3,7	;select IRP bank0
  3024  05CD  0180               	clrf	0
  3025  05CE  0A80               	incf	0,f
  3026                           
  3027                           ;mainMaster.c: 393:                         k++;
  3028  05CF  3001               	movlw	1
  3029  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  3030  05D1  1303               	bcf	3,6	;RP1=0, select bank1
  3031  05D2  00A0               	movwf	??_main^(0+128)
  3032  05D3  0820               	movf	??_main^(0+128),w
  3033  05D4  07F8               	addwf	_k,f
  3034                           
  3035                           ;mainMaster.c: 394:                         change4 = 1;
  3036  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  3037  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  3038  05D7  01B0               	clrf	_change4
  3039  05D8  0AB0               	incf	_change4,f
  3040                           
  3041                           ;mainMaster.c: 395:                         Lcd_Write_Char('*');
  3042  05D9  302A               	movlw	42
  3043  05DA  120A  158A  20DD  120A  118A  	fcall	_Lcd_Write_Char
  3044  05DF  2E5C               	goto	l4388
  3045  05E0                     l415:	
  3046  05E0  1D08               	btfss	8,2	;volatile
  3047  05E1  2DFE               	goto	l418
  3048                           
  3049                           ;mainMaster.c: 398:                     if (change4 == 0){
  3050  05E2  0830               	movf	_change4,w
  3051  05E3  1D03               	btfss	3,2
  3052  05E4  2E5C               	goto	l4388
  3053                           
  3054                           ;mainMaster.c: 399:                         passwordu[k] = 2;
  3055  05E5  3002               	movlw	2
  3056  05E6  1683               	bsf	3,5	;RP0=1, select bank1
  3057  05E7  1303               	bcf	3,6	;RP1=0, select bank1
  3058  05E8  00A0               	movwf	??_main^(0+128)
  3059  05E9  0878               	movf	_k,w
  3060  05EA  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3061  05EB  0084               	movwf	4
  3062  05EC  0820               	movf	??_main^(0+128),w
  3063  05ED  1383               	bcf	3,7	;select IRP bank0
  3064  05EE  0080               	movwf	0
  3065                           
  3066                           ;mainMaster.c: 400:                         k++;
  3067  05EF  3001               	movlw	1
  3068  05F0  00A0               	movwf	??_main^(0+128)
  3069  05F1  0820               	movf	??_main^(0+128),w
  3070  05F2  07F8               	addwf	_k,f
  3071                           
  3072                           ;mainMaster.c: 401:                         change4 = 1;
  3073  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  3074  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  3075  05F5  01B0               	clrf	_change4
  3076  05F6  0AB0               	incf	_change4,f
  3077                           
  3078                           ;mainMaster.c: 402:                         Lcd_Write_Char('*');
  3079  05F7  302A               	movlw	42
  3080  05F8  120A  158A  20DD  120A  118A  	fcall	_Lcd_Write_Char
  3081  05FD  2E5C               	goto	l4388
  3082  05FE                     l418:	
  3083  05FE  1D88               	btfss	8,3	;volatile
  3084  05FF  2E1C               	goto	l421
  3085                           
  3086                           ;mainMaster.c: 405:                     if (change4 == 0){
  3087  0600  0830               	movf	_change4,w
  3088  0601  1D03               	btfss	3,2
  3089  0602  2E5C               	goto	l4388
  3090                           
  3091                           ;mainMaster.c: 406:                         passwordu[k] = 3;
  3092  0603  3003               	movlw	3
  3093  0604  1683               	bsf	3,5	;RP0=1, select bank1
  3094  0605  1303               	bcf	3,6	;RP1=0, select bank1
  3095  0606  00A0               	movwf	??_main^(0+128)
  3096  0607  0878               	movf	_k,w
  3097  0608  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3098  0609  0084               	movwf	4
  3099  060A  0820               	movf	??_main^(0+128),w
  3100  060B  1383               	bcf	3,7	;select IRP bank0
  3101  060C  0080               	movwf	0
  3102                           
  3103                           ;mainMaster.c: 407:                         k++;
  3104  060D  3001               	movlw	1
  3105  060E  00A0               	movwf	??_main^(0+128)
  3106  060F  0820               	movf	??_main^(0+128),w
  3107  0610  07F8               	addwf	_k,f
  3108                           
  3109                           ;mainMaster.c: 408:                         change4 = 1;
  3110  0611  1283               	bcf	3,5	;RP0=0, select bank0
  3111  0612  1303               	bcf	3,6	;RP1=0, select bank0
  3112  0613  01B0               	clrf	_change4
  3113  0614  0AB0               	incf	_change4,f
  3114                           
  3115                           ;mainMaster.c: 409:                         Lcd_Write_Char('*');
  3116  0615  302A               	movlw	42
  3117  0616  120A  158A  20DD  120A  118A  	fcall	_Lcd_Write_Char
  3118  061B  2E5C               	goto	l4388
  3119  061C                     l421:	
  3120  061C  1E08               	btfss	8,4	;volatile
  3121  061D  2E3A               	goto	l424
  3122                           
  3123                           ;mainMaster.c: 412:                     if (change4 == 0){
  3124  061E  0830               	movf	_change4,w
  3125  061F  1D03               	btfss	3,2
  3126  0620  2E5C               	goto	l4388
  3127                           
  3128                           ;mainMaster.c: 413:                         passwordu[k] = 4;
  3129  0621  3004               	movlw	4
  3130  0622  1683               	bsf	3,5	;RP0=1, select bank1
  3131  0623  1303               	bcf	3,6	;RP1=0, select bank1
  3132  0624  00A0               	movwf	??_main^(0+128)
  3133  0625  0878               	movf	_k,w
  3134  0626  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3135  0627  0084               	movwf	4
  3136  0628  0820               	movf	??_main^(0+128),w
  3137  0629  1383               	bcf	3,7	;select IRP bank0
  3138  062A  0080               	movwf	0
  3139                           
  3140                           ;mainMaster.c: 414:                         k++;
  3141  062B  3001               	movlw	1
  3142  062C  00A0               	movwf	??_main^(0+128)
  3143  062D  0820               	movf	??_main^(0+128),w
  3144  062E  07F8               	addwf	_k,f
  3145                           
  3146                           ;mainMaster.c: 415:                         change4 = 1;
  3147  062F  1283               	bcf	3,5	;RP0=0, select bank0
  3148  0630  1303               	bcf	3,6	;RP1=0, select bank0
  3149  0631  01B0               	clrf	_change4
  3150  0632  0AB0               	incf	_change4,f
  3151                           
  3152                           ;mainMaster.c: 416:                         Lcd_Write_Char('*');
  3153  0633  302A               	movlw	42
  3154  0634  120A  158A  20DD  120A  118A  	fcall	_Lcd_Write_Char
  3155  0639  2E5C               	goto	l4388
  3156  063A                     l424:	
  3157  063A  1E88               	btfss	8,5	;volatile
  3158  063B  2E58               	goto	l4384
  3159                           
  3160                           ;mainMaster.c: 419:                     if (change4 == 0){
  3161  063C  0830               	movf	_change4,w
  3162  063D  1D03               	btfss	3,2
  3163  063E  2E5C               	goto	l4388
  3164                           
  3165                           ;mainMaster.c: 420:                         passwordu[k] = 5;
  3166  063F  3005               	movlw	5
  3167  0640  1683               	bsf	3,5	;RP0=1, select bank1
  3168  0641  1303               	bcf	3,6	;RP1=0, select bank1
  3169  0642  00A0               	movwf	??_main^(0+128)
  3170  0643  0878               	movf	_k,w
  3171  0644  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3172  0645  0084               	movwf	4
  3173  0646  0820               	movf	??_main^(0+128),w
  3174  0647  1383               	bcf	3,7	;select IRP bank0
  3175  0648  0080               	movwf	0
  3176                           
  3177                           ;mainMaster.c: 421:                         k++;
  3178  0649  3001               	movlw	1
  3179  064A  00A0               	movwf	??_main^(0+128)
  3180  064B  0820               	movf	??_main^(0+128),w
  3181  064C  07F8               	addwf	_k,f
  3182                           
  3183                           ;mainMaster.c: 422:                         change4 = 1;
  3184  064D  1283               	bcf	3,5	;RP0=0, select bank0
  3185  064E  1303               	bcf	3,6	;RP1=0, select bank0
  3186  064F  01B0               	clrf	_change4
  3187  0650  0AB0               	incf	_change4,f
  3188                           
  3189                           ;mainMaster.c: 423:                         Lcd_Write_Char('*');
  3190  0651  302A               	movlw	42
  3191  0652  120A  158A  20DD  120A  118A  	fcall	_Lcd_Write_Char
  3192  0657  2E5C               	goto	l4388
  3193  0658                     l4384:	
  3194  0658  0808               	movf	8,w	;volatile
  3195  0659  1D03               	btfss	3,2
  3196  065A  2E5C               	goto	l4388
  3197                           
  3198                           ;mainMaster.c: 426:                         change4 = 0;
  3199  065B  01B0               	clrf	_change4
  3200  065C                     l4388:	
  3201                           
  3202                           ;mainMaster.c: 430:             if (PORTEbits.RE0 == 1){
  3203  065C  1283               	bcf	3,5	;RP0=0, select bank0
  3204  065D  1303               	bcf	3,6	;RP1=0, select bank0
  3205  065E  1C09               	btfss	9,0	;volatile
  3206  065F  2ECC               	goto	l431
  3207                           
  3208                           ;mainMaster.c: 431:                     if (passwordu[0] == password[0] & passwordu[1] =
      +                          = password[1] & passwordu[2] == password[2] & passwordu[3] == password[3] & passwordu[4]
      +                           == password[4]){
  3209  0660  0820               	movf	_passwordu,w
  3210  0661  0668               	xorwf	_password,w
  3211  0662  1D03               	skipz
  3212  0663  2EB8               	goto	l4424
  3213  0664  0821               	movf	_passwordu+1,w
  3214  0665  0669               	xorwf	_password+1,w
  3215  0666  1D03               	skipz
  3216  0667  2EB8               	goto	l4424
  3217  0668  0822               	movf	_passwordu+2,w
  3218  0669  066A               	xorwf	_password+2,w
  3219  066A  1D03               	skipz
  3220  066B  2EB8               	goto	l4424
  3221  066C  0823               	movf	_passwordu+3,w
  3222  066D  066B               	xorwf	_password+3,w
  3223  066E  1D03               	skipz
  3224  066F  2EB8               	goto	l4424
  3225  0670  0824               	movf	_passwordu+4,w
  3226  0671  066C               	xorwf	_password+4,w
  3227  0672  1D03               	skipz
  3228  0673  2EB8               	goto	l4424
  3229                           
  3230                           ;mainMaster.c: 432:                         if (seguridad == 0){
  3231  0674  0829               	movf	_seguridad,w
  3232  0675  1D03               	btfss	3,2
  3233  0676  2EA2               	goto	l4414
  3234                           
  3235                           ;mainMaster.c: 433:                             seguridad = 1;
  3236  0677  01A9               	clrf	_seguridad
  3237  0678  0AA9               	incf	_seguridad,f
  3238                           
  3239                           ;mainMaster.c: 434:                             k = 0;
  3240  0679  01F8               	clrf	_k
  3241                           
  3242                           ;mainMaster.c: 435:                             Lcd_Clear();
  3243  067A  160A  118A  2676  120A  118A  	fcall	_Lcd_Clear
  3244                           
  3245                           ;mainMaster.c: 436:                             Lcd_Set_Cursor(1,1);
  3246  067F  01F7               	clrf	Lcd_Set_Cursor@b
  3247  0680  0AF7               	incf	Lcd_Set_Cursor@b,f
  3248  0681  3001               	movlw	1
  3249  0682  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3250                           
  3251                           ;mainMaster.c: 437:                             Lcd_Write_String("Security ON");
  3252  0687  307E               	movlw	low (STR_28| (0+32768))
  3253  0688  1283               	bcf	3,5	;RP0=0, select bank0
  3254  0689  1303               	bcf	3,6	;RP1=0, select bank0
  3255  068A  00C7               	movwf	Lcd_Write_String@a
  3256  068B  3087               	movlw	high (STR_28| (0+32768))
  3257  068C                     L12:	
  3258  068C  00C8               	movwf	Lcd_Write_String@a+1
  3259  068D  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  3260                           
  3261                           ;mainMaster.c: 438:                             _delay((unsigned long)((2000)*(8000000/4
      +                          000.0)));
  3262  0692  3015               	movlw	21
  3263  0693  1683               	bsf	3,5	;RP0=1, select bank1
  3264  0694  1303               	bcf	3,6	;RP1=0, select bank1
  3265  0695  00A2               	movwf	(??_main^(0+128)+2)
  3266  0696  304B               	movlw	75
  3267  0697  00A1               	movwf	(??_main^(0+128)+1)
  3268  0698  30BD               	movlw	189
  3269  0699  00A0               	movwf	??_main^(0+128)
  3270  069A                     u5037:	
  3271  069A  0BA0               	decfsz	??_main^(0+128),f
  3272  069B  2E9A               	goto	u5037
  3273  069C  0BA1               	decfsz	(??_main^(0+128)+1),f
  3274  069D  2E9A               	goto	u5037
  3275  069E  0BA2               	decfsz	(??_main^(0+128)+2),f
  3276  069F  2E9A               	goto	u5037
  3277  06A0  2EA1               	nop2
  3278                           
  3279                           ;mainMaster.c: 439:                         } else {
  3280  06A1  28DB               	goto	l4022
  3281  06A2                     l4414:	
  3282                           
  3283                           ;mainMaster.c: 440:                             seguridad = 0;
  3284  06A2  01A9               	clrf	_seguridad
  3285                           
  3286                           ;mainMaster.c: 441:                             k = 0;
  3287  06A3  01F8               	clrf	_k
  3288                           
  3289                           ;mainMaster.c: 442:                             alarm = 0;
  3290  06A4  01AF               	clrf	_alarm
  3291                           
  3292                           ;mainMaster.c: 443:                             Lcd_Clear();
  3293  06A5  160A  118A  2676  120A  118A  	fcall	_Lcd_Clear
  3294                           
  3295                           ;mainMaster.c: 444:                             Lcd_Set_Cursor(1,1);
  3296  06AA  01F7               	clrf	Lcd_Set_Cursor@b
  3297  06AB  0AF7               	incf	Lcd_Set_Cursor@b,f
  3298  06AC  3001               	movlw	1
  3299  06AD  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3300                           
  3301                           ;mainMaster.c: 445:                             Lcd_Write_String("Security OFF");
  3302  06B2  3059               	movlw	low (STR_29| (0+32768))
  3303  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  3304  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  3305  06B5  00C7               	movwf	Lcd_Write_String@a
  3306  06B6  3087               	movlw	high (STR_29| (0+32768))
  3307  06B7  2E8C               	goto	L12
  3308  06B8                     l4424:	
  3309                           
  3310                           ;mainMaster.c: 449:                         Lcd_Clear();
  3311  06B8  160A  118A  2676  120A  118A  	fcall	_Lcd_Clear
  3312                           
  3313                           ;mainMaster.c: 450:                         k = 0;
  3314  06BD  01F8               	clrf	_k
  3315                           
  3316                           ;mainMaster.c: 451:                         Lcd_Set_Cursor(1,1);
  3317  06BE  01F7               	clrf	Lcd_Set_Cursor@b
  3318  06BF  0AF7               	incf	Lcd_Set_Cursor@b,f
  3319  06C0  3001               	movlw	1
  3320  06C1  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3321                           
  3322                           ;mainMaster.c: 452:                         Lcd_Write_String("WRONG");
  3323  06C6  3035               	movlw	low (STR_30| (0+32768))
  3324  06C7  1283               	bcf	3,5	;RP0=0, select bank0
  3325  06C8  1303               	bcf	3,6	;RP1=0, select bank0
  3326  06C9  00C7               	movwf	Lcd_Write_String@a
  3327  06CA  3088               	movlw	high (STR_30| (0+32768))
  3328  06CB  2E8C               	goto	L12
  3329  06CC                     l431:	
  3330  06CC  1C89               	btfss	9,1	;volatile
  3331  06CD  28DB               	goto	l4022
  3332                           
  3333                           ;mainMaster.c: 456:                 Lcd_Set_Cursor(2,1);
  3334  06CE  01F7               	clrf	Lcd_Set_Cursor@b
  3335  06CF  0AF7               	incf	Lcd_Set_Cursor@b,f
  3336  06D0  3002               	movlw	2
  3337  06D1  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3338                           
  3339                           ;mainMaster.c: 457:                 Lcd_Write_String("            ");
  3340  06D6  304C               	movlw	low (STR_31| (0+32768))
  3341  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  3342  06D8  1303               	bcf	3,6	;RP1=0, select bank0
  3343  06D9  00C7               	movwf	Lcd_Write_String@a
  3344  06DA  3087               	movlw	high (STR_31| (0+32768))
  3345  06DB  00C8               	movwf	Lcd_Write_String@a+1
  3346  06DC  120A  158A  218E  120A  118A  	fcall	_Lcd_Write_String
  3347                           
  3348                           ;mainMaster.c: 458:                 k = 0;
  3349  06E1  01F8               	clrf	_k
  3350  06E2  28DB               	goto	l4022
  3351  06E3                     __end_of_main:	
  3352                           
  3353                           	psect	text1
  3354  09CF                     __ptext1:	
  3355 ;; *************** function _write_RTC *****************
  3356 ;; Defined at:
  3357 ;;		line 500 in file "mainMaster.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;  hour            1    wreg     unsigned char 
  3360 ;;  minutes         1    5[COMMON] unsigned char 
  3361 ;;  day             1    6[COMMON] unsigned char 
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;  hour            1    7[COMMON] unsigned char 
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  1    wreg      void 
  3366 ;; Registers used:
  3367 ;;		wreg, status,2, status,0, pclath, cstack
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3373 ;;      Params:         2       0       0       0       0
  3374 ;;      Locals:         1       0       0       0       0
  3375 ;;      Temps:          0       2       0       0       0
  3376 ;;      Totals:         3       2       0       0       0
  3377 ;;Total ram usage:        5 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; Hardware stack levels required when called:    3
  3380 ;; This function calls:
  3381 ;;		_I2C_Master_Start
  3382 ;;		_I2C_Master_Stop
  3383 ;;		_I2C_Master_Write
  3384 ;; This function is called by:
  3385 ;;		_main
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           
  3390                           ;psect for function _write_RTC
  3391  09CF                     _write_RTC:	
  3392                           
  3393                           ;incstack = 0
  3394                           ; Regs used in _write_RTC: [wreg+status,2+status,0+pclath+cstack]
  3395                           ;write_RTC@hour stored from wreg
  3396  09CF  00F7               	movwf	write_RTC@hour
  3397                           
  3398                           ;mainMaster.c: 502:     I2C_Master_Start();
  3399  09D0  160A  118A  2647  120A  158A  	fcall	_I2C_Master_Start
  3400                           
  3401                           ;mainMaster.c: 503:     I2C_Master_Write(0xD0);
  3402  09D5  30D0               	movlw	208
  3403  09D6  00F3               	movwf	I2C_Master_Write@d
  3404  09D7  3000               	movlw	0
  3405  09D8  00F4               	movwf	I2C_Master_Write@d+1
  3406  09D9  160A  118A  265C  120A  158A  	fcall	_I2C_Master_Write
  3407                           
  3408                           ;mainMaster.c: 504:     I2C_Master_Write(0x01);
  3409  09DE  3001               	movlw	1
  3410  09DF  00F3               	movwf	I2C_Master_Write@d
  3411  09E0  3000               	movlw	0
  3412  09E1  00F4               	movwf	I2C_Master_Write@d+1
  3413  09E2  160A  118A  265C  120A  158A  	fcall	_I2C_Master_Write
  3414                           
  3415                           ;mainMaster.c: 505:     I2C_Master_Write(minutes);
  3416  09E7  0875               	movf	write_RTC@minutes,w
  3417  09E8  1283               	bcf	3,5	;RP0=0, select bank0
  3418  09E9  1303               	bcf	3,6	;RP1=0, select bank0
  3419  09EA  00C7               	movwf	??_write_RTC
  3420  09EB  01C8               	clrf	??_write_RTC+1
  3421  09EC  0847               	movf	??_write_RTC,w
  3422  09ED  00F3               	movwf	I2C_Master_Write@d
  3423  09EE  0848               	movf	??_write_RTC+1,w
  3424  09EF  00F4               	movwf	I2C_Master_Write@d+1
  3425  09F0  160A  118A  265C  120A  158A  	fcall	_I2C_Master_Write
  3426                           
  3427                           ;mainMaster.c: 506:     I2C_Master_Write(hour);
  3428  09F5  0877               	movf	write_RTC@hour,w
  3429  09F6  1283               	bcf	3,5	;RP0=0, select bank0
  3430  09F7  1303               	bcf	3,6	;RP1=0, select bank0
  3431  09F8  00C7               	movwf	??_write_RTC
  3432  09F9  01C8               	clrf	??_write_RTC+1
  3433  09FA  0847               	movf	??_write_RTC,w
  3434  09FB  00F3               	movwf	I2C_Master_Write@d
  3435  09FC  0848               	movf	??_write_RTC+1,w
  3436  09FD  00F4               	movwf	I2C_Master_Write@d+1
  3437  09FE  160A  118A  265C  120A  158A  	fcall	_I2C_Master_Write
  3438                           
  3439                           ;mainMaster.c: 507:     I2C_Master_Write(day);
  3440  0A03  0876               	movf	write_RTC@day,w
  3441  0A04  1283               	bcf	3,5	;RP0=0, select bank0
  3442  0A05  1303               	bcf	3,6	;RP1=0, select bank0
  3443  0A06  00C7               	movwf	??_write_RTC
  3444  0A07  01C8               	clrf	??_write_RTC+1
  3445  0A08  0847               	movf	??_write_RTC,w
  3446  0A09  00F3               	movwf	I2C_Master_Write@d
  3447  0A0A  0848               	movf	??_write_RTC+1,w
  3448  0A0B  00F4               	movwf	I2C_Master_Write@d+1
  3449  0A0C  160A  118A  265C  120A  158A  	fcall	_I2C_Master_Write
  3450                           
  3451                           ;mainMaster.c: 508:     I2C_Master_Stop();
  3452  0A11  160A  118A  264E   	fcall	_I2C_Master_Stop
  3453  0A14  0008               	return
  3454  0A15                     __end_of_write_RTC:	
  3455                           
  3456                           	psect	text2
  3457  17D0                     __ptext2:	
  3458 ;; *************** function _strcmp *****************
  3459 ;; Defined at:
  3460 ;;		line 33 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;  s1              1    wreg     PTR const unsigned char 
  3463 ;;		 -> time(6), temp(6), 
  3464 ;;  s2              2    3[COMMON] PTR const unsigned char 
  3465 ;;		 -> STR_14(6), STR_13(6), STR_12(6), 
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  s1              1    1[BANK0 ] PTR const unsigned char 
  3468 ;;		 -> time(6), temp(6), 
  3469 ;;  r               1    0[BANK0 ] char 
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  2    3[COMMON] int 
  3472 ;; Registers used:
  3473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3479 ;;      Params:         2       0       0       0       0
  3480 ;;      Locals:         0       2       0       0       0
  3481 ;;      Temps:          3       0       0       0       0
  3482 ;;      Totals:         5       2       0       0       0
  3483 ;;Total ram usage:        7 bytes
  3484 ;; Hardware stack levels used:    2
  3485 ;; Hardware stack levels required when called:    1
  3486 ;; This function calls:
  3487 ;;		Nothing
  3488 ;; This function is called by:
  3489 ;;		_main
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           
  3494                           ;psect for function _strcmp
  3495  17D0                     _strcmp:	
  3496                           
  3497                           ;incstack = 0
  3498                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3499                           ;strcmp@s1 stored from wreg
  3500  17D0  1283               	bcf	3,5	;RP0=0, select bank0
  3501  17D1  1303               	bcf	3,6	;RP1=0, select bank0
  3502  17D2  00C8               	movwf	strcmp@s1
  3503  17D3  2FE3               	goto	l3922
  3504  17D4                     l3924:	
  3505  17D4  0848               	movf	strcmp@s1,w
  3506  17D5  0084               	movwf	4
  3507  17D6  0800               	movf	0,w
  3508  17D7  1903               	btfsc	3,2
  3509  17D8  2FFA               	goto	l3926
  3510  17D9  3001               	movlw	1
  3511  17DA  00F5               	movwf	??_strcmp
  3512  17DB  0875               	movf	??_strcmp,w
  3513  17DC  07C8               	addwf	strcmp@s1,f
  3514  17DD  3001               	movlw	1
  3515  17DE  07F3               	addwf	strcmp@s2,f
  3516  17DF  1803               	skipnc
  3517  17E0  0AF4               	incf	strcmp@s2+1,f
  3518  17E1  3000               	movlw	0
  3519  17E2  07F4               	addwf	strcmp@s2+1,f
  3520  17E3                     l3922:	
  3521  17E3  0874               	movf	strcmp@s2+1,w
  3522  17E4  00FF               	movwf	127
  3523  17E5  0873               	movf	strcmp@s2,w
  3524  17E6  0084               	movwf	4
  3525  17E7  120A  118A  2700  160A  118A  	fcall	stringtab
  3526  17EC  00F5               	movwf	??_strcmp
  3527  17ED  0848               	movf	strcmp@s1,w
  3528  17EE  0084               	movwf	4
  3529  17EF  1383               	bcf	3,7	;select IRP bank0
  3530  17F0  0800               	movf	0,w
  3531  17F1  00F6               	movwf	??_strcmp+1
  3532  17F2  0875               	movf	??_strcmp,w
  3533  17F3  0276               	subwf	??_strcmp+1,w
  3534  17F4  00F7               	movwf	??_strcmp+2
  3535  17F5  0877               	movf	??_strcmp+2,w
  3536  17F6  00C7               	movwf	strcmp@r
  3537  17F7  0847               	movf	strcmp@r,w
  3538  17F8  1903               	btfsc	3,2
  3539  17F9  2FD4               	goto	l3924
  3540  17FA                     l3926:	
  3541  17FA  0847               	movf	strcmp@r,w
  3542  17FB  00F3               	movwf	?_strcmp
  3543  17FC  01F4               	clrf	?_strcmp+1
  3544  17FD  1BF3               	btfsc	?_strcmp,7
  3545  17FE  03F4               	decf	?_strcmp+1,f
  3546  17FF  0008               	return
  3547  1800                     __end_of_strcmp:	
  3548                           
  3549                           	psect	text3
  3550  0B62                     __ptext3:	
  3551 ;; *************** function _setup *****************
  3552 ;; Defined at:
  3553 ;;		line 464 in file "mainMaster.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;		None
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;		None
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  1    wreg      void 
  3560 ;; Registers used:
  3561 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3567 ;;      Params:         0       0       0       0       0
  3568 ;;      Locals:         0       0       0       0       0
  3569 ;;      Temps:          0       0       0       0       0
  3570 ;;      Totals:         0       0       0       0       0
  3571 ;;Total ram usage:        0 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    4
  3574 ;; This function calls:
  3575 ;;		_I2C_Master_Init
  3576 ;;		_Lcd_Init
  3577 ;;		_UART_Init
  3578 ;;		_initOscilador
  3579 ;; This function is called by:
  3580 ;;		_main
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           
  3585                           ;psect for function _setup
  3586  0B62                     _setup:	
  3587                           
  3588                           ;mainMaster.c: 465:     initOscilador(7);
  3589                           
  3590                           ;incstack = 0
  3591                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3592  0B62  3007               	movlw	7
  3593  0B63  120A  158A  22B2  120A  158A  	fcall	_initOscilador
  3594                           
  3595                           ;mainMaster.c: 466:     ANSELH = 0;
  3596  0B68  1683               	bsf	3,5	;RP0=1, select bank3
  3597  0B69  1703               	bsf	3,6	;RP1=1, select bank3
  3598  0B6A  0189               	clrf	9	;volatile
  3599                           
  3600                           ;mainMaster.c: 467:     ANSEL = 0;
  3601  0B6B  0188               	clrf	8	;volatile
  3602                           
  3603                           ;mainMaster.c: 468:     TRISB = 0;
  3604  0B6C  1683               	bsf	3,5	;RP0=1, select bank1
  3605  0B6D  1303               	bcf	3,6	;RP1=0, select bank1
  3606  0B6E  0186               	clrf	6	;volatile
  3607                           
  3608                           ;mainMaster.c: 469:     TRISA = 0;
  3609  0B6F  0185               	clrf	5	;volatile
  3610                           
  3611                           ;mainMaster.c: 470:     TRISD = 0xFF;
  3612  0B70  30FF               	movlw	255
  3613  0B71  0088               	movwf	8	;volatile
  3614                           
  3615                           ;mainMaster.c: 471:     PORTB = 0;
  3616  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  3617  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  3618  0B74  0186               	clrf	6	;volatile
  3619                           
  3620                           ;mainMaster.c: 472:     PORTA = 0;
  3621  0B75  0185               	clrf	5	;volatile
  3622                           
  3623                           ;mainMaster.c: 473:     TRISC = 0x01;
  3624  0B76  3001               	movlw	1
  3625  0B77  1683               	bsf	3,5	;RP0=1, select bank1
  3626  0B78  1303               	bcf	3,6	;RP1=0, select bank1
  3627  0B79  0087               	movwf	7	;volatile
  3628                           
  3629                           ;mainMaster.c: 474:     PORTC = 0;
  3630  0B7A  1283               	bcf	3,5	;RP0=0, select bank0
  3631  0B7B  1303               	bcf	3,6	;RP1=0, select bank0
  3632  0B7C  0187               	clrf	7	;volatile
  3633                           
  3634                           ;mainMaster.c: 475:     PORTE = 0;
  3635  0B7D  0189               	clrf	9	;volatile
  3636                           
  3637                           ;mainMaster.c: 476:     TRISE = 0xFF;
  3638  0B7E  30FF               	movlw	255
  3639  0B7F  1683               	bsf	3,5	;RP0=1, select bank1
  3640  0B80  1303               	bcf	3,6	;RP1=0, select bank1
  3641  0B81  0089               	movwf	9	;volatile
  3642                           
  3643                           ;mainMaster.c: 477:     i = 0;
  3644  0B82  1283               	bcf	3,5	;RP0=0, select bank0
  3645  0B83  1303               	bcf	3,6	;RP1=0, select bank0
  3646  0B84  01B6               	clrf	_i
  3647                           
  3648                           ;mainMaster.c: 478:     door = 0;
  3649  0B85  01BA               	clrf	_door
  3650                           
  3651                           ;mainMaster.c: 479:     trip = 0;
  3652  0B86  01B9               	clrf	_trip
  3653                           
  3654                           ;mainMaster.c: 480:     alarm = 0;
  3655  0B87  01AF               	clrf	_alarm
  3656                           
  3657                           ;mainMaster.c: 481:     change2 = 0;
  3658  0B88  01B2               	clrf	_change2
  3659                           
  3660                           ;mainMaster.c: 482:     change3 = 0;
  3661  0B89  01B1               	clrf	_change3
  3662                           
  3663                           ;mainMaster.c: 483:     IR = 0;
  3664  0B8A  01B7               	clrf	_IR
  3665                           
  3666                           ;mainMaster.c: 484:     PIR = 0;
  3667  0B8B  01B8               	clrf	_PIR
  3668                           
  3669                           ;mainMaster.c: 485:     OPTION_REGbits.T0CS = 0;
  3670  0B8C  1683               	bsf	3,5	;RP0=1, select bank1
  3671  0B8D  1303               	bcf	3,6	;RP1=0, select bank1
  3672  0B8E  1281               	bcf	1,5	;volatile
  3673                           
  3674                           ;mainMaster.c: 486:     OPTION_REGbits.T0SE = 0;
  3675  0B8F  1201               	bcf	1,4	;volatile
  3676                           
  3677                           ;mainMaster.c: 487:     OPTION_REGbits.PSA = 1;
  3678  0B90  1581               	bsf	1,3	;volatile
  3679                           
  3680                           ;mainMaster.c: 488:     OPTION_REGbits.PS2 = 0;
  3681  0B91  1101               	bcf	1,2	;volatile
  3682                           
  3683                           ;mainMaster.c: 489:     OPTION_REGbits.PS1 = 0;
  3684  0B92  1081               	bcf	1,1	;volatile
  3685                           
  3686                           ;mainMaster.c: 490:     OPTION_REGbits.PS0 = 0;
  3687  0B93  1001               	bcf	1,0	;volatile
  3688                           
  3689                           ;mainMaster.c: 491:     TMR0 = 56;
  3690  0B94  3038               	movlw	56
  3691  0B95  1283               	bcf	3,5	;RP0=0, select bank0
  3692  0B96  1303               	bcf	3,6	;RP1=0, select bank0
  3693  0B97  0081               	movwf	1	;volatile
  3694                           
  3695                           ;mainMaster.c: 492:     INTCONbits.T0IF = 0;
  3696  0B98  110B               	bcf	11,2	;volatile
  3697                           
  3698                           ;mainMaster.c: 493:     INTCONbits.T0IE = 1;
  3699  0B99  168B               	bsf	11,5	;volatile
  3700                           
  3701                           ;mainMaster.c: 494:     INTCONbits.GIE = 1;
  3702  0B9A  178B               	bsf	11,7	;volatile
  3703                           
  3704                           ;mainMaster.c: 495:     Lcd_Init();
  3705  0B9B  120A  158A  241D  120A  158A  	fcall	_Lcd_Init
  3706                           
  3707                           ;mainMaster.c: 496:     UART_Init(9600);
  3708  0BA0  3000               	movlw	0
  3709  0BA1  1283               	bcf	3,5	;RP0=0, select bank0
  3710  0BA2  1303               	bcf	3,6	;RP1=0, select bank0
  3711  0BA3  00D8               	movwf	UART_Init@baudrate+3
  3712  0BA4  3000               	movlw	0
  3713  0BA5  00D7               	movwf	UART_Init@baudrate+2
  3714  0BA6  3025               	movlw	37
  3715  0BA7  00D6               	movwf	UART_Init@baudrate+1
  3716  0BA8  3080               	movlw	128
  3717  0BA9  00D5               	movwf	UART_Init@baudrate
  3718  0BAA  120A  158A  263A  120A  158A  	fcall	_UART_Init
  3719                           
  3720                           ;mainMaster.c: 497:     I2C_Master_Init(100000);
  3721  0BAF  3000               	movlw	0
  3722  0BB0  1283               	bcf	3,5	;RP0=0, select bank0
  3723  0BB1  1303               	bcf	3,6	;RP1=0, select bank0
  3724  0BB2  00D7               	movwf	I2C_Master_Init@c+3
  3725  0BB3  3001               	movlw	1
  3726  0BB4  00D6               	movwf	I2C_Master_Init@c+2
  3727  0BB5  3086               	movlw	134
  3728  0BB6  00D5               	movwf	I2C_Master_Init@c+1
  3729  0BB7  30A0               	movlw	160
  3730  0BB8  00D4               	movwf	I2C_Master_Init@c
  3731  0BB9  120A  158A  20A5   	fcall	_I2C_Master_Init
  3732  0BBC  0008               	return
  3733  0BBD                     __end_of_setup:	
  3734                           
  3735                           	psect	text4
  3736  0AB2                     __ptext4:	
  3737 ;; *************** function _initOscilador *****************
  3738 ;; Defined at:
  3739 ;;		line 11 in file "./Oscilador.h"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;  option          1    wreg     unsigned char 
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;  option          1    5[COMMON] unsigned char 
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  1    wreg      void 
  3746 ;; Registers used:
  3747 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3753 ;;      Params:         0       0       0       0       0
  3754 ;;      Locals:         1       0       0       0       0
  3755 ;;      Temps:          2       0       0       0       0
  3756 ;;      Totals:         3       0       0       0       0
  3757 ;;Total ram usage:        3 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; Hardware stack levels required when called:    1
  3760 ;; This function calls:
  3761 ;;		Nothing
  3762 ;; This function is called by:
  3763 ;;		_setup
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767                           
  3768                           ;psect for function _initOscilador
  3769  0AB2                     _initOscilador:	
  3770                           
  3771                           ;incstack = 0
  3772                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  3773                           ;initOscilador@option stored from wreg
  3774  0AB2  00F5               	movwf	initOscilador@option
  3775                           
  3776                           ;./Oscilador.h: 13: 
  3777  0AB3  2AE3               	goto	l2564
  3778  0AB4                     l2544:	
  3779                           
  3780                           ;./Oscilador.h: 16:         case 3:
  3781  0AB4  308F               	movlw	-113
  3782  0AB5  1683               	bsf	3,5	;RP0=1, select bank1
  3783  0AB6  1303               	bcf	3,6	;RP1=0, select bank1
  3784  0AB7  058F               	andwf	15,f	;volatile
  3785                           
  3786                           ;./Oscilador.h: 17: 
  3787  0AB8  2B05               	goto	l203
  3788  0AB9                     l2546:	
  3789                           
  3790                           ;./Oscilador.h: 20:         case 4:
  3791  0AB9  1683               	bsf	3,5	;RP0=1, select bank1
  3792  0ABA  1303               	bcf	3,6	;RP1=0, select bank1
  3793  0ABB  080F               	movf	15,w	;volatile
  3794  0ABC  398F               	andlw	-113
  3795  0ABD  3810               	iorlw	16
  3796  0ABE  2ADC               	goto	L17
  3797  0ABF                     l2548:	
  3798                           ;./Oscilador.h: 21: 
  3799                           
  3800                           
  3801                           ;./Oscilador.h: 24:         case 5:
  3802  0ABF  1683               	bsf	3,5	;RP0=1, select bank1
  3803  0AC0  1303               	bcf	3,6	;RP1=0, select bank1
  3804  0AC1  080F               	movf	15,w	;volatile
  3805  0AC2  398F               	andlw	-113
  3806  0AC3  3820               	iorlw	32
  3807  0AC4  2ADC               	goto	L17
  3808  0AC5                     l2550:	
  3809                           ;./Oscilador.h: 25: 
  3810                           
  3811                           
  3812                           ;./Oscilador.h: 28:         case 6:
  3813  0AC5  1683               	bsf	3,5	;RP0=1, select bank1
  3814  0AC6  1303               	bcf	3,6	;RP1=0, select bank1
  3815  0AC7  080F               	movf	15,w	;volatile
  3816  0AC8  398F               	andlw	-113
  3817  0AC9  3830               	iorlw	48
  3818  0ACA  2ADC               	goto	L17
  3819  0ACB                     l2552:	
  3820                           ;./Oscilador.h: 29: 
  3821                           
  3822                           
  3823                           ;./Oscilador.h: 32:         case 7:
  3824  0ACB  1683               	bsf	3,5	;RP0=1, select bank1
  3825  0ACC  1303               	bcf	3,6	;RP1=0, select bank1
  3826  0ACD  080F               	movf	15,w	;volatile
  3827  0ACE  398F               	andlw	-113
  3828  0ACF  3840               	iorlw	64
  3829  0AD0  2ADC               	goto	L17
  3830  0AD1                     l2554:	
  3831                           ;./Oscilador.h: 33: 
  3832                           
  3833                           
  3834                           ;./Oscilador.h: 36:         default:
  3835  0AD1  1683               	bsf	3,5	;RP0=1, select bank1
  3836  0AD2  1303               	bcf	3,6	;RP1=0, select bank1
  3837  0AD3  080F               	movf	15,w	;volatile
  3838  0AD4  398F               	andlw	-113
  3839  0AD5  3850               	iorlw	80
  3840  0AD6  2ADC               	goto	L17
  3841  0AD7                     l2556:	
  3842                           ;./Oscilador.h: 37: 
  3843                           
  3844                           
  3845                           ;./Oscilador.h: 40:     }
  3846  0AD7  1683               	bsf	3,5	;RP0=1, select bank1
  3847  0AD8  1303               	bcf	3,6	;RP1=0, select bank1
  3848  0AD9  080F               	movf	15,w	;volatile
  3849  0ADA  398F               	andlw	-113
  3850  0ADB  3860               	iorlw	96
  3851  0ADC                     L17:	
  3852  0ADC  008F               	movwf	15	;volatile
  3853                           
  3854                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  3855  0ADD  2B05               	goto	l203
  3856  0ADE                     l2558:	
  3857  0ADE                     l2560:	
  3858  0ADE  3070               	movlw	112
  3859  0ADF  1683               	bsf	3,5	;RP0=1, select bank1
  3860  0AE0  1303               	bcf	3,6	;RP1=0, select bank1
  3861  0AE1  048F               	iorwf	15,f	;volatile
  3862  0AE2  2B05               	goto	l203
  3863  0AE3                     l2564:	
  3864  0AE3  0875               	movf	initOscilador@option,w
  3865  0AE4  00F3               	movwf	??_initOscilador
  3866  0AE5  01F4               	clrf	??_initOscilador+1
  3867                           
  3868                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3869                           ; Switch size 1, requested type "simple"
  3870                           ; Number of cases is 1, Range of values is 0 to 0
  3871                           ; switch strategies available:
  3872                           ; Name         Instructions Cycles
  3873                           ; simple_byte            4     3 (average)
  3874                           ; direct_byte           11     8 (fixed)
  3875                           ; jumptable            260     6 (fixed)
  3876                           ;	Chosen strategy is simple_byte
  3877  0AE6  0874               	movf	??_initOscilador+1,w
  3878  0AE7  3A00               	xorlw	0	; case 0
  3879  0AE8  1903               	skipnz
  3880  0AE9  2AEB               	goto	l4518
  3881  0AEA  2ADE               	goto	l2560
  3882  0AEB                     l4518:	
  3883                           
  3884                           ; Switch size 1, requested type "simple"
  3885                           ; Number of cases is 8, Range of values is 0 to 7
  3886                           ; switch strategies available:
  3887                           ; Name         Instructions Cycles
  3888                           ; simple_byte           25    13 (average)
  3889                           ; direct_byte           32     8 (fixed)
  3890                           ; jumptable            260     6 (fixed)
  3891                           ;	Chosen strategy is simple_byte
  3892  0AEB  0873               	movf	??_initOscilador,w
  3893  0AEC  3A00               	xorlw	0	; case 0
  3894  0AED  1903               	skipnz
  3895  0AEE  2AB4               	goto	l2544
  3896  0AEF  3A01               	xorlw	1	; case 1
  3897  0AF0  1903               	skipnz
  3898  0AF1  2AB9               	goto	l2546
  3899  0AF2  3A03               	xorlw	3	; case 2
  3900  0AF3  1903               	skipnz
  3901  0AF4  2ABF               	goto	l2548
  3902  0AF5  3A01               	xorlw	1	; case 3
  3903  0AF6  1903               	skipnz
  3904  0AF7  2AC5               	goto	l2550
  3905  0AF8  3A07               	xorlw	7	; case 4
  3906  0AF9  1903               	skipnz
  3907  0AFA  2ACB               	goto	l2552
  3908  0AFB  3A01               	xorlw	1	; case 5
  3909  0AFC  1903               	skipnz
  3910  0AFD  2AD1               	goto	l2554
  3911  0AFE  3A03               	xorlw	3	; case 6
  3912  0AFF  1903               	skipnz
  3913  0B00  2AD7               	goto	l2556
  3914  0B01  3A01               	xorlw	1	; case 7
  3915  0B02  1903               	skipnz
  3916  0B03  2ADE               	goto	l2558
  3917  0B04  2ADE               	goto	l2560
  3918  0B05                     l203:	
  3919  0B05  140F               	bsf	15,0	;volatile
  3920  0B06  0008               	return
  3921  0B07                     __end_of_initOscilador:	
  3922                           
  3923                           	psect	text5
  3924  0E3A                     __ptext5:	
  3925 ;; *************** function _UART_Init *****************
  3926 ;; Defined at:
  3927 ;;		line 8 in file "./UART.h"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;  baudrate        4   14[BANK0 ] const long 
  3930 ;; Auto vars:     Size  Location     Type
  3931 ;;  x               2    4[COMMON] unsigned int 
  3932 ;; Return value:  Size  Location     Type
  3933 ;;                  1    wreg      unsigned char 
  3934 ;; Registers used:
  3935 ;;		wreg, status,2, status,0, pclath, cstack
  3936 ;; Tracked objects:
  3937 ;;		On entry : 0/0
  3938 ;;		On exit  : 0/0
  3939 ;;		Unchanged: 0/0
  3940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3941 ;;      Params:         0       4       0       0       0
  3942 ;;      Locals:         2       0       0       0       0
  3943 ;;      Temps:          0      12       0       0       0
  3944 ;;      Totals:         2      16       0       0       0
  3945 ;;Total ram usage:       18 bytes
  3946 ;; Hardware stack levels used:    1
  3947 ;; Hardware stack levels required when called:    2
  3948 ;; This function calls:
  3949 ;;		___aldiv
  3950 ;; This function is called by:
  3951 ;;		_setup
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954                           
  3955                           
  3956                           ;psect for function _UART_Init
  3957  0E3A                     _UART_Init:	
  3958                           
  3959                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
  3960                           
  3961                           ;incstack = 0
  3962                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  3963  0E3A  1283               	bcf	3,5	;RP0=0, select bank0
  3964  0E3B  1303               	bcf	3,6	;RP1=0, select bank0
  3965  0E3C  0855               	movf	UART_Init@baudrate,w
  3966  0E3D  00D9               	movwf	??_UART_Init
  3967  0E3E  0856               	movf	UART_Init@baudrate+1,w
  3968  0E3F  00DA               	movwf	??_UART_Init+1
  3969  0E40  0857               	movf	UART_Init@baudrate+2,w
  3970  0E41  00DB               	movwf	??_UART_Init+2
  3971  0E42  0858               	movf	UART_Init@baudrate+3,w
  3972  0E43  00DC               	movwf	??_UART_Init+3
  3973  0E44  3006               	movlw	6
  3974  0E45                     u3755:	
  3975  0E45  1003               	clrc
  3976  0E46  0DD9               	rlf	??_UART_Init,f
  3977  0E47  0DDA               	rlf	??_UART_Init+1,f
  3978  0E48  0DDB               	rlf	??_UART_Init+2,f
  3979  0E49  0DDC               	rlf	??_UART_Init+3,f
  3980  0E4A  3EFF               	addlw	-1
  3981  0E4B  1D03               	skipz
  3982  0E4C  2E45               	goto	u3755
  3983  0E4D  085C               	movf	??_UART_Init+3,w
  3984  0E4E  00CA               	movwf	___aldiv@divisor+3
  3985  0E4F  085B               	movf	??_UART_Init+2,w
  3986  0E50  00C9               	movwf	___aldiv@divisor+2
  3987  0E51  085A               	movf	??_UART_Init+1,w
  3988  0E52  00C8               	movwf	___aldiv@divisor+1
  3989  0E53  0859               	movf	??_UART_Init,w
  3990  0E54  00C7               	movwf	___aldiv@divisor
  3991  0E55  0855               	movf	UART_Init@baudrate,w
  3992  0E56  00DD               	movwf	??_UART_Init+4
  3993  0E57  0856               	movf	UART_Init@baudrate+1,w
  3994  0E58  00DE               	movwf	??_UART_Init+5
  3995  0E59  0857               	movf	UART_Init@baudrate+2,w
  3996  0E5A  00DF               	movwf	??_UART_Init+6
  3997  0E5B  0858               	movf	UART_Init@baudrate+3,w
  3998  0E5C  00E0               	movwf	??_UART_Init+7
  3999  0E5D  3006               	movlw	6
  4000  0E5E                     u3765:	
  4001  0E5E  1003               	clrc
  4002  0E5F  0DDD               	rlf	??_UART_Init+4,f
  4003  0E60  0DDE               	rlf	??_UART_Init+5,f
  4004  0E61  0DDF               	rlf	??_UART_Init+6,f
  4005  0E62  0DE0               	rlf	??_UART_Init+7,f
  4006  0E63  3EFF               	addlw	-1
  4007  0E64  1D03               	skipz
  4008  0E65  2E5E               	goto	u3765
  4009  0E66  3000               	movlw	0
  4010  0E67  00E1               	movwf	??_UART_Init+8
  4011  0E68  3012               	movlw	18
  4012  0E69  00E2               	movwf	??_UART_Init+9
  4013  0E6A  307A               	movlw	122
  4014  0E6B  00E3               	movwf	??_UART_Init+10
  4015  0E6C  3000               	movlw	0
  4016  0E6D  00E4               	movwf	??_UART_Init+11
  4017  0E6E  085D               	movf	??_UART_Init+4,w
  4018  0E6F  02E1               	subwf	??_UART_Init+8,f
  4019  0E70  085E               	movf	??_UART_Init+5,w
  4020  0E71  1C03               	skipc
  4021  0E72  0F5E               	incfsz	??_UART_Init+5,w
  4022  0E73  2E75               	goto	u3771
  4023  0E74  2E76               	goto	u3772
  4024  0E75                     u3771:	
  4025  0E75  02E2               	subwf	??_UART_Init+9,f
  4026  0E76                     u3772:	
  4027  0E76  085F               	movf	??_UART_Init+6,w
  4028  0E77  1C03               	skipc
  4029  0E78  0F5F               	incfsz	??_UART_Init+6,w
  4030  0E79  2E7B               	goto	u3773
  4031  0E7A  2E7C               	goto	u3774
  4032  0E7B                     u3773:	
  4033  0E7B  02E3               	subwf	??_UART_Init+10,f
  4034  0E7C                     u3774:	
  4035  0E7C  0860               	movf	??_UART_Init+7,w
  4036  0E7D  1C03               	skipc
  4037  0E7E  0F60               	incfsz	??_UART_Init+7,w
  4038  0E7F  2E81               	goto	u3775
  4039  0E80  2E82               	goto	u3776
  4040  0E81                     u3775:	
  4041  0E81  02E4               	subwf	??_UART_Init+11,f
  4042  0E82                     u3776:	
  4043  0E82  0864               	movf	??_UART_Init+11,w
  4044  0E83  00CE               	movwf	___aldiv@dividend+3
  4045  0E84  0863               	movf	??_UART_Init+10,w
  4046  0E85  00CD               	movwf	___aldiv@dividend+2
  4047  0E86  0862               	movf	??_UART_Init+9,w
  4048  0E87  00CC               	movwf	___aldiv@dividend+1
  4049  0E88  0861               	movf	??_UART_Init+8,w
  4050  0E89  00CB               	movwf	___aldiv@dividend
  4051  0E8A  120A  158A  2506  120A  158A  	fcall	___aldiv
  4052  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  4053  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  4054  0E91  0848               	movf	?___aldiv+1,w
  4055  0E92  00F5               	movwf	UART_Init@x+1
  4056  0E93  0847               	movf	?___aldiv,w
  4057  0E94  00F4               	movwf	UART_Init@x
  4058                           
  4059                           ;./UART.h: 12:  if(x>255)
  4060  0E95  3001               	movlw	1
  4061  0E96  0275               	subwf	UART_Init@x+1,w
  4062  0E97  3000               	movlw	0
  4063  0E98  1903               	skipnz
  4064  0E99  0274               	subwf	UART_Init@x,w
  4065  0E9A  1C03               	skipc
  4066  0E9B  2EF8               	goto	l3678
  4067                           
  4068                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  4069  0E9C  0855               	movf	UART_Init@baudrate,w
  4070  0E9D  00D9               	movwf	??_UART_Init
  4071  0E9E  0856               	movf	UART_Init@baudrate+1,w
  4072  0E9F  00DA               	movwf	??_UART_Init+1
  4073  0EA0  0857               	movf	UART_Init@baudrate+2,w
  4074  0EA1  00DB               	movwf	??_UART_Init+2
  4075  0EA2  0858               	movf	UART_Init@baudrate+3,w
  4076  0EA3  00DC               	movwf	??_UART_Init+3
  4077  0EA4  3004               	movlw	4
  4078  0EA5                     u3795:	
  4079  0EA5  1003               	clrc
  4080  0EA6  0DD9               	rlf	??_UART_Init,f
  4081  0EA7  0DDA               	rlf	??_UART_Init+1,f
  4082  0EA8  0DDB               	rlf	??_UART_Init+2,f
  4083  0EA9  0DDC               	rlf	??_UART_Init+3,f
  4084  0EAA  3EFF               	addlw	-1
  4085  0EAB  1D03               	skipz
  4086  0EAC  2EA5               	goto	u3795
  4087  0EAD  085C               	movf	??_UART_Init+3,w
  4088  0EAE  00CA               	movwf	___aldiv@divisor+3
  4089  0EAF  085B               	movf	??_UART_Init+2,w
  4090  0EB0  00C9               	movwf	___aldiv@divisor+2
  4091  0EB1  085A               	movf	??_UART_Init+1,w
  4092  0EB2  00C8               	movwf	___aldiv@divisor+1
  4093  0EB3  0859               	movf	??_UART_Init,w
  4094  0EB4  00C7               	movwf	___aldiv@divisor
  4095  0EB5  0855               	movf	UART_Init@baudrate,w
  4096  0EB6  00DD               	movwf	??_UART_Init+4
  4097  0EB7  0856               	movf	UART_Init@baudrate+1,w
  4098  0EB8  00DE               	movwf	??_UART_Init+5
  4099  0EB9  0857               	movf	UART_Init@baudrate+2,w
  4100  0EBA  00DF               	movwf	??_UART_Init+6
  4101  0EBB  0858               	movf	UART_Init@baudrate+3,w
  4102  0EBC  00E0               	movwf	??_UART_Init+7
  4103  0EBD  3004               	movlw	4
  4104  0EBE                     u3805:	
  4105  0EBE  1003               	clrc
  4106  0EBF  0DDD               	rlf	??_UART_Init+4,f
  4107  0EC0  0DDE               	rlf	??_UART_Init+5,f
  4108  0EC1  0DDF               	rlf	??_UART_Init+6,f
  4109  0EC2  0DE0               	rlf	??_UART_Init+7,f
  4110  0EC3  3EFF               	addlw	-1
  4111  0EC4  1D03               	skipz
  4112  0EC5  2EBE               	goto	u3805
  4113  0EC6  3000               	movlw	0
  4114  0EC7  00E1               	movwf	??_UART_Init+8
  4115  0EC8  3012               	movlw	18
  4116  0EC9  00E2               	movwf	??_UART_Init+9
  4117  0ECA  307A               	movlw	122
  4118  0ECB  00E3               	movwf	??_UART_Init+10
  4119  0ECC  3000               	movlw	0
  4120  0ECD  00E4               	movwf	??_UART_Init+11
  4121  0ECE  085D               	movf	??_UART_Init+4,w
  4122  0ECF  02E1               	subwf	??_UART_Init+8,f
  4123  0ED0  085E               	movf	??_UART_Init+5,w
  4124  0ED1  1C03               	skipc
  4125  0ED2  0F5E               	incfsz	??_UART_Init+5,w
  4126  0ED3  2ED5               	goto	u3811
  4127  0ED4  2ED6               	goto	u3812
  4128  0ED5                     u3811:	
  4129  0ED5  02E2               	subwf	??_UART_Init+9,f
  4130  0ED6                     u3812:	
  4131  0ED6  085F               	movf	??_UART_Init+6,w
  4132  0ED7  1C03               	skipc
  4133  0ED8  0F5F               	incfsz	??_UART_Init+6,w
  4134  0ED9  2EDB               	goto	u3813
  4135  0EDA  2EDC               	goto	u3814
  4136  0EDB                     u3813:	
  4137  0EDB  02E3               	subwf	??_UART_Init+10,f
  4138  0EDC                     u3814:	
  4139  0EDC  0860               	movf	??_UART_Init+7,w
  4140  0EDD  1C03               	skipc
  4141  0EDE  0F60               	incfsz	??_UART_Init+7,w
  4142  0EDF  2EE1               	goto	u3815
  4143  0EE0  2EE2               	goto	u3816
  4144  0EE1                     u3815:	
  4145  0EE1  02E4               	subwf	??_UART_Init+11,f
  4146  0EE2                     u3816:	
  4147  0EE2  0864               	movf	??_UART_Init+11,w
  4148  0EE3  00CE               	movwf	___aldiv@dividend+3
  4149  0EE4  0863               	movf	??_UART_Init+10,w
  4150  0EE5  00CD               	movwf	___aldiv@dividend+2
  4151  0EE6  0862               	movf	??_UART_Init+9,w
  4152  0EE7  00CC               	movwf	___aldiv@dividend+1
  4153  0EE8  0861               	movf	??_UART_Init+8,w
  4154  0EE9  00CB               	movwf	___aldiv@dividend
  4155  0EEA  120A  158A  2506  120A  158A  	fcall	___aldiv
  4156  0EEF  1283               	bcf	3,5	;RP0=0, select bank0
  4157  0EF0  1303               	bcf	3,6	;RP1=0, select bank0
  4158  0EF1  0848               	movf	?___aldiv+1,w
  4159  0EF2  00F5               	movwf	UART_Init@x+1
  4160  0EF3  0847               	movf	?___aldiv,w
  4161  0EF4  00F4               	movwf	UART_Init@x
  4162                           
  4163                           ;./UART.h: 15:   BRGH = 1;
  4164  0EF5  1683               	bsf	3,5	;RP0=1, select bank1
  4165  0EF6  1303               	bcf	3,6	;RP1=0, select bank1
  4166  0EF7  1518               	bsf	24,2	;volatile
  4167  0EF8                     l3678:	
  4168                           
  4169                           ;./UART.h: 17:  if(x<256)
  4170  0EF8  3001               	movlw	1
  4171  0EF9  0275               	subwf	UART_Init@x+1,w
  4172  0EFA  3000               	movlw	0
  4173  0EFB  1903               	skipnz
  4174  0EFC  0274               	subwf	UART_Init@x,w
  4175  0EFD  1803               	skipnc
  4176  0EFE  0008               	return
  4177                           
  4178                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  4179  0EFF  0874               	movf	UART_Init@x,w
  4180  0F00  1683               	bsf	3,5	;RP0=1, select bank1
  4181  0F01  1303               	bcf	3,6	;RP1=0, select bank1
  4182  0F02  0099               	movwf	25	;volatile
  4183                           
  4184                           ;./UART.h: 20:    SYNC = 0;
  4185  0F03  1218               	bcf	24,4	;volatile
  4186                           
  4187                           ;./UART.h: 21:    SPEN = 1;
  4188  0F04  1283               	bcf	3,5	;RP0=0, select bank0
  4189  0F05  1303               	bcf	3,6	;RP1=0, select bank0
  4190  0F06  1798               	bsf	24,7	;volatile
  4191                           
  4192                           ;./UART.h: 22:           TRISC7 = 1;
  4193  0F07  1683               	bsf	3,5	;RP0=1, select bank1
  4194  0F08  1303               	bcf	3,6	;RP1=0, select bank1
  4195  0F09  1787               	bsf	7,7	;volatile
  4196                           
  4197                           ;./UART.h: 23:           TRISC6 = 1;
  4198  0F0A  1707               	bsf	7,6	;volatile
  4199                           
  4200                           ;./UART.h: 24:           CREN = 1;
  4201  0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  4202  0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  4203  0F0D  1618               	bsf	24,4	;volatile
  4204                           
  4205                           ;./UART.h: 25:           TXEN = 1;
  4206  0F0E  1683               	bsf	3,5	;RP0=1, select bank1
  4207  0F0F  1303               	bcf	3,6	;RP1=0, select bank1
  4208  0F10  1698               	bsf	24,5	;volatile
  4209  0F11  0008               	return
  4210  0F12                     __end_of_UART_Init:	
  4211                           
  4212                           	psect	text6
  4213  0D06                     __ptext6:	
  4214 ;; *************** function ___aldiv *****************
  4215 ;; Defined at:
  4216 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  divisor         4    0[BANK0 ] long 
  4219 ;;  dividend        4    4[BANK0 ] long 
  4220 ;; Auto vars:     Size  Location     Type
  4221 ;;  quotient        4   10[BANK0 ] long 
  4222 ;;  sign            1    9[BANK0 ] unsigned char 
  4223 ;;  counter         1    8[BANK0 ] unsigned char 
  4224 ;; Return value:  Size  Location     Type
  4225 ;;                  4    0[BANK0 ] long 
  4226 ;; Registers used:
  4227 ;;		wreg, status,2, status,0
  4228 ;; Tracked objects:
  4229 ;;		On entry : 0/0
  4230 ;;		On exit  : 0/0
  4231 ;;		Unchanged: 0/0
  4232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4233 ;;      Params:         0       8       0       0       0
  4234 ;;      Locals:         0       6       0       0       0
  4235 ;;      Temps:          1       0       0       0       0
  4236 ;;      Totals:         1      14       0       0       0
  4237 ;;Total ram usage:       15 bytes
  4238 ;; Hardware stack levels used:    1
  4239 ;; Hardware stack levels required when called:    1
  4240 ;; This function calls:
  4241 ;;		Nothing
  4242 ;; This function is called by:
  4243 ;;		_UART_Init
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           
  4248                           ;psect for function ___aldiv
  4249  0D06                     ___aldiv:	
  4250                           
  4251                           ;incstack = 0
  4252                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4253  0D06  1283               	bcf	3,5	;RP0=0, select bank0
  4254  0D07  1303               	bcf	3,6	;RP1=0, select bank0
  4255  0D08  01D0               	clrf	___aldiv@sign
  4256  0D09  1FCA               	btfss	___aldiv@divisor+3,7
  4257  0D0A  2D18               	goto	l654
  4258  0D0B  09C7               	comf	___aldiv@divisor,f
  4259  0D0C  09C8               	comf	___aldiv@divisor+1,f
  4260  0D0D  09C9               	comf	___aldiv@divisor+2,f
  4261  0D0E  09CA               	comf	___aldiv@divisor+3,f
  4262  0D0F  0AC7               	incf	___aldiv@divisor,f
  4263  0D10  1903               	skipnz
  4264  0D11  0AC8               	incf	___aldiv@divisor+1,f
  4265  0D12  1903               	skipnz
  4266  0D13  0AC9               	incf	___aldiv@divisor+2,f
  4267  0D14  1903               	skipnz
  4268  0D15  0ACA               	incf	___aldiv@divisor+3,f
  4269  0D16  01D0               	clrf	___aldiv@sign
  4270  0D17  0AD0               	incf	___aldiv@sign,f
  4271  0D18                     l654:	
  4272  0D18  1FCE               	btfss	___aldiv@dividend+3,7
  4273  0D19  2D29               	goto	l3560
  4274  0D1A  09CB               	comf	___aldiv@dividend,f
  4275  0D1B  09CC               	comf	___aldiv@dividend+1,f
  4276  0D1C  09CD               	comf	___aldiv@dividend+2,f
  4277  0D1D  09CE               	comf	___aldiv@dividend+3,f
  4278  0D1E  0ACB               	incf	___aldiv@dividend,f
  4279  0D1F  1903               	skipnz
  4280  0D20  0ACC               	incf	___aldiv@dividend+1,f
  4281  0D21  1903               	skipnz
  4282  0D22  0ACD               	incf	___aldiv@dividend+2,f
  4283  0D23  1903               	skipnz
  4284  0D24  0ACE               	incf	___aldiv@dividend+3,f
  4285  0D25  3001               	movlw	1
  4286  0D26  00F3               	movwf	??___aldiv
  4287  0D27  0873               	movf	??___aldiv,w
  4288  0D28  06D0               	xorwf	___aldiv@sign,f
  4289  0D29                     l3560:	
  4290  0D29  3000               	movlw	0
  4291  0D2A  00D4               	movwf	___aldiv@quotient+3
  4292  0D2B  3000               	movlw	0
  4293  0D2C  00D3               	movwf	___aldiv@quotient+2
  4294  0D2D  3000               	movlw	0
  4295  0D2E  00D2               	movwf	___aldiv@quotient+1
  4296  0D2F  3000               	movlw	0
  4297  0D30  00D1               	movwf	___aldiv@quotient
  4298  0D31  084A               	movf	___aldiv@divisor+3,w
  4299  0D32  0449               	iorwf	___aldiv@divisor+2,w
  4300  0D33  0448               	iorwf	___aldiv@divisor+1,w
  4301  0D34  0447               	iorwf	___aldiv@divisor,w
  4302  0D35  1903               	skipnz
  4303  0D36  2D7E               	goto	l3582
  4304  0D37  01CF               	clrf	___aldiv@counter
  4305  0D38  0ACF               	incf	___aldiv@counter,f
  4306  0D39                     l3568:	
  4307  0D39  1BCA               	btfsc	___aldiv@divisor+3,7
  4308  0D3A  2D49               	goto	l3570
  4309  0D3B  3001               	movlw	1
  4310  0D3C  00F3               	movwf	??___aldiv
  4311  0D3D                     u3595:	
  4312  0D3D  1003               	clrc
  4313  0D3E  0DC7               	rlf	___aldiv@divisor,f
  4314  0D3F  0DC8               	rlf	___aldiv@divisor+1,f
  4315  0D40  0DC9               	rlf	___aldiv@divisor+2,f
  4316  0D41  0DCA               	rlf	___aldiv@divisor+3,f
  4317  0D42  0BF3               	decfsz	??___aldiv,f
  4318  0D43  2D3D               	goto	u3595
  4319  0D44  3001               	movlw	1
  4320  0D45  00F3               	movwf	??___aldiv
  4321  0D46  0873               	movf	??___aldiv,w
  4322  0D47  07CF               	addwf	___aldiv@counter,f
  4323  0D48  2D39               	goto	l3568
  4324  0D49                     l3570:	
  4325  0D49  3001               	movlw	1
  4326  0D4A  00F3               	movwf	??___aldiv
  4327  0D4B                     u3615:	
  4328  0D4B  1003               	clrc
  4329  0D4C  0DD1               	rlf	___aldiv@quotient,f
  4330  0D4D  0DD2               	rlf	___aldiv@quotient+1,f
  4331  0D4E  0DD3               	rlf	___aldiv@quotient+2,f
  4332  0D4F  0DD4               	rlf	___aldiv@quotient+3,f
  4333  0D50  0BF3               	decfsz	??___aldiv,f
  4334  0D51  2D4B               	goto	u3615
  4335  0D52  084A               	movf	___aldiv@divisor+3,w
  4336  0D53  024E               	subwf	___aldiv@dividend+3,w
  4337  0D54  1D03               	skipz
  4338  0D55  2D60               	goto	u3625
  4339  0D56  0849               	movf	___aldiv@divisor+2,w
  4340  0D57  024D               	subwf	___aldiv@dividend+2,w
  4341  0D58  1D03               	skipz
  4342  0D59  2D60               	goto	u3625
  4343  0D5A  0848               	movf	___aldiv@divisor+1,w
  4344  0D5B  024C               	subwf	___aldiv@dividend+1,w
  4345  0D5C  1D03               	skipz
  4346  0D5D  2D60               	goto	u3625
  4347  0D5E  0847               	movf	___aldiv@divisor,w
  4348  0D5F  024B               	subwf	___aldiv@dividend,w
  4349  0D60                     u3625:	
  4350  0D60  1C03               	skipc
  4351  0D61  2D71               	goto	l3578
  4352  0D62  0847               	movf	___aldiv@divisor,w
  4353  0D63  02CB               	subwf	___aldiv@dividend,f
  4354  0D64  0848               	movf	___aldiv@divisor+1,w
  4355  0D65  1C03               	skipc
  4356  0D66  0F48               	incfsz	___aldiv@divisor+1,w
  4357  0D67  02CC               	subwf	___aldiv@dividend+1,f
  4358  0D68  0849               	movf	___aldiv@divisor+2,w
  4359  0D69  1C03               	skipc
  4360  0D6A  0F49               	incfsz	___aldiv@divisor+2,w
  4361  0D6B  02CD               	subwf	___aldiv@dividend+2,f
  4362  0D6C  084A               	movf	___aldiv@divisor+3,w
  4363  0D6D  1C03               	skipc
  4364  0D6E  0F4A               	incfsz	___aldiv@divisor+3,w
  4365  0D6F  02CE               	subwf	___aldiv@dividend+3,f
  4366  0D70  1451               	bsf	___aldiv@quotient,0
  4367  0D71                     l3578:	
  4368  0D71  3001               	movlw	1
  4369  0D72                     u3635:	
  4370  0D72  1003               	clrc
  4371  0D73  0CCA               	rrf	___aldiv@divisor+3,f
  4372  0D74  0CC9               	rrf	___aldiv@divisor+2,f
  4373  0D75  0CC8               	rrf	___aldiv@divisor+1,f
  4374  0D76  0CC7               	rrf	___aldiv@divisor,f
  4375  0D77  3EFF               	addlw	-1
  4376  0D78  1D03               	skipz
  4377  0D79  2D72               	goto	u3635
  4378  0D7A  3001               	movlw	1
  4379  0D7B  02CF               	subwf	___aldiv@counter,f
  4380  0D7C  1D03               	btfss	3,2
  4381  0D7D  2D49               	goto	l3570
  4382  0D7E                     l3582:	
  4383  0D7E  0850               	movf	___aldiv@sign,w
  4384  0D7F  1903               	btfsc	3,2
  4385  0D80  2D8C               	goto	l3586
  4386  0D81  09D1               	comf	___aldiv@quotient,f
  4387  0D82  09D2               	comf	___aldiv@quotient+1,f
  4388  0D83  09D3               	comf	___aldiv@quotient+2,f
  4389  0D84  09D4               	comf	___aldiv@quotient+3,f
  4390  0D85  0AD1               	incf	___aldiv@quotient,f
  4391  0D86  1903               	skipnz
  4392  0D87  0AD2               	incf	___aldiv@quotient+1,f
  4393  0D88  1903               	skipnz
  4394  0D89  0AD3               	incf	___aldiv@quotient+2,f
  4395  0D8A  1903               	skipnz
  4396  0D8B  0AD4               	incf	___aldiv@quotient+3,f
  4397  0D8C                     l3586:	
  4398  0D8C  0854               	movf	___aldiv@quotient+3,w
  4399  0D8D  00CA               	movwf	?___aldiv+3
  4400  0D8E  0853               	movf	___aldiv@quotient+2,w
  4401  0D8F  00C9               	movwf	?___aldiv+2
  4402  0D90  0852               	movf	___aldiv@quotient+1,w
  4403  0D91  00C8               	movwf	?___aldiv+1
  4404  0D92  0851               	movf	___aldiv@quotient,w
  4405  0D93  00C7               	movwf	?___aldiv
  4406  0D94  0008               	return
  4407  0D95                     __end_of___aldiv:	
  4408                           
  4409                           	psect	text7
  4410  0C1D                     __ptext7:	
  4411 ;; *************** function _Lcd_Init *****************
  4412 ;; Defined at:
  4413 ;;		line 65 in file "./LCD4bits.h"
  4414 ;; Parameters:    Size  Location     Type
  4415 ;;		None
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;		None
  4418 ;; Return value:  Size  Location     Type
  4419 ;;                  1    wreg      void 
  4420 ;; Registers used:
  4421 ;;		wreg, status,2, status,0, pclath, cstack
  4422 ;; Tracked objects:
  4423 ;;		On entry : 0/0
  4424 ;;		On exit  : 0/0
  4425 ;;		Unchanged: 0/0
  4426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4427 ;;      Params:         0       0       0       0       0
  4428 ;;      Locals:         0       0       0       0       0
  4429 ;;      Temps:          0       2       0       0       0
  4430 ;;      Totals:         0       2       0       0       0
  4431 ;;Total ram usage:        2 bytes
  4432 ;; Hardware stack levels used:    1
  4433 ;; Hardware stack levels required when called:    3
  4434 ;; This function calls:
  4435 ;;		_Lcd_Cmd
  4436 ;;		_Lcd_Port
  4437 ;; This function is called by:
  4438 ;;		_setup
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           
  4443                           ;psect for function _Lcd_Init
  4444  0C1D                     _Lcd_Init:	
  4445                           
  4446                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  4447                           
  4448                           ;incstack = 0
  4449                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  4450  0C1D  3000               	movlw	0
  4451  0C1E  160A  118A  26A8  120A  158A  	fcall	_Lcd_Port
  4452                           
  4453                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  4454  0C23  3034               	movlw	52
  4455  0C24  1283               	bcf	3,5	;RP0=0, select bank0
  4456  0C25  1303               	bcf	3,6	;RP1=0, select bank0
  4457  0C26  00C8               	movwf	??_Lcd_Init+1
  4458  0C27  30F1               	movlw	241
  4459  0C28  00C7               	movwf	??_Lcd_Init
  4460  0C29                     u5047:	
  4461  0C29  0BC7               	decfsz	??_Lcd_Init,f
  4462  0C2A  2C29               	goto	u5047
  4463  0C2B  0BC8               	decfsz	??_Lcd_Init+1,f
  4464  0C2C  2C29               	goto	u5047
  4465                           
  4466                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  4467  0C2D  3003               	movlw	3
  4468  0C2E  160A  118A  26C2  120A  158A  	fcall	_Lcd_Cmd
  4469                           
  4470                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  4471  0C33  300D               	movlw	13
  4472  0C34  1283               	bcf	3,5	;RP0=0, select bank0
  4473  0C35  1303               	bcf	3,6	;RP1=0, select bank0
  4474  0C36  00C8               	movwf	??_Lcd_Init+1
  4475  0C37  30FB               	movlw	251
  4476  0C38  00C7               	movwf	??_Lcd_Init
  4477  0C39                     u5057:	
  4478  0C39  0BC7               	decfsz	??_Lcd_Init,f
  4479  0C3A  2C39               	goto	u5057
  4480  0C3B  0BC8               	decfsz	??_Lcd_Init+1,f
  4481  0C3C  2C39               	goto	u5057
  4482                           
  4483                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  4484  0C3D  3003               	movlw	3
  4485  0C3E  160A  118A  26C2  120A  158A  	fcall	_Lcd_Cmd
  4486                           
  4487                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  4488  0C43  301D               	movlw	29
  4489  0C44  1283               	bcf	3,5	;RP0=0, select bank0
  4490  0C45  1303               	bcf	3,6	;RP1=0, select bank0
  4491  0C46  00C8               	movwf	??_Lcd_Init+1
  4492  0C47  3090               	movlw	144
  4493  0C48  00C7               	movwf	??_Lcd_Init
  4494  0C49                     u5067:	
  4495  0C49  0BC7               	decfsz	??_Lcd_Init,f
  4496  0C4A  2C49               	goto	u5067
  4497  0C4B  0BC8               	decfsz	??_Lcd_Init+1,f
  4498  0C4C  2C49               	goto	u5067
  4499  0C4D  0000               	nop
  4500                           
  4501                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  4502  0C4E  3003               	movlw	3
  4503  0C4F  160A  118A  26C2  120A  158A  	fcall	_Lcd_Cmd
  4504                           
  4505                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  4506  0C54  3002               	movlw	2
  4507  0C55  160A  118A  26C2  120A  158A  	fcall	_Lcd_Cmd
  4508                           
  4509                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  4510  0C5A  3002               	movlw	2
  4511  0C5B  160A  118A  26C2  120A  158A  	fcall	_Lcd_Cmd
  4512                           
  4513                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  4514  0C60  3008               	movlw	8
  4515  0C61  160A  118A  26C2  120A  158A  	fcall	_Lcd_Cmd
  4516                           
  4517                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  4518  0C66  3000               	movlw	0
  4519  0C67  160A  118A  26C2  120A  158A  	fcall	_Lcd_Cmd
  4520                           
  4521                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  4522  0C6C  300C               	movlw	12
  4523  0C6D  160A  118A  26C2  120A  158A  	fcall	_Lcd_Cmd
  4524                           
  4525                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  4526  0C72  3000               	movlw	0
  4527  0C73  160A  118A  26C2  120A  158A  	fcall	_Lcd_Cmd
  4528                           
  4529                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  4530  0C78  3006               	movlw	6
  4531  0C79  160A  118A  26C2   	fcall	_Lcd_Cmd
  4532  0C7C  0008               	return
  4533  0C7D                     __end_of_Lcd_Init:	
  4534                           
  4535                           	psect	text8
  4536  08A5                     __ptext8:	
  4537 ;; *************** function _I2C_Master_Init *****************
  4538 ;; Defined at:
  4539 ;;		line 16 in file "./I2C.h"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;  c               4   13[BANK0 ] const unsigned long 
  4542 ;; Auto vars:     Size  Location     Type
  4543 ;;		None
  4544 ;; Return value:  Size  Location     Type
  4545 ;;                  1    wreg      void 
  4546 ;; Registers used:
  4547 ;;		wreg, status,2, status,0, pclath, cstack
  4548 ;; Tracked objects:
  4549 ;;		On entry : 0/0
  4550 ;;		On exit  : 0/0
  4551 ;;		Unchanged: 0/0
  4552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4553 ;;      Params:         0       4       0       0       0
  4554 ;;      Locals:         0       0       0       0       0
  4555 ;;      Temps:          4       0       0       0       0
  4556 ;;      Totals:         4       4       0       0       0
  4557 ;;Total ram usage:        8 bytes
  4558 ;; Hardware stack levels used:    1
  4559 ;; Hardware stack levels required when called:    2
  4560 ;; This function calls:
  4561 ;;		___lldiv
  4562 ;; This function is called by:
  4563 ;;		_setup
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           
  4568                           ;psect for function _I2C_Master_Init
  4569  08A5                     _I2C_Master_Init:	
  4570                           
  4571                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  4572                           
  4573                           ;incstack = 0
  4574                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  4575  08A5  3028               	movlw	40
  4576  08A6  1283               	bcf	3,5	;RP0=0, select bank0
  4577  08A7  1303               	bcf	3,6	;RP1=0, select bank0
  4578  08A8  0094               	movwf	20	;volatile
  4579                           
  4580                           ;./I2C.h: 19:     SSPCON2 = 0;
  4581  08A9  1683               	bsf	3,5	;RP0=1, select bank1
  4582  08AA  1303               	bcf	3,6	;RP1=0, select bank1
  4583  08AB  0191               	clrf	17	;volatile
  4584                           
  4585                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  4586  08AC  1283               	bcf	3,5	;RP0=0, select bank0
  4587  08AD  1303               	bcf	3,6	;RP1=0, select bank0
  4588  08AE  0854               	movf	I2C_Master_Init@c,w
  4589  08AF  00F4               	movwf	??_I2C_Master_Init
  4590  08B0  0855               	movf	I2C_Master_Init@c+1,w
  4591  08B1  00F5               	movwf	??_I2C_Master_Init+1
  4592  08B2  0856               	movf	I2C_Master_Init@c+2,w
  4593  08B3  00F6               	movwf	??_I2C_Master_Init+2
  4594  08B4  0857               	movf	I2C_Master_Init@c+3,w
  4595  08B5  00F7               	movwf	??_I2C_Master_Init+3
  4596  08B6  3002               	movlw	2
  4597  08B7                     u3735:	
  4598  08B7  1003               	clrc
  4599  08B8  0DF4               	rlf	??_I2C_Master_Init,f
  4600  08B9  0DF5               	rlf	??_I2C_Master_Init+1,f
  4601  08BA  0DF6               	rlf	??_I2C_Master_Init+2,f
  4602  08BB  0DF7               	rlf	??_I2C_Master_Init+3,f
  4603  08BC  3EFF               	addlw	-1
  4604  08BD  1D03               	skipz
  4605  08BE  28B7               	goto	u3735
  4606  08BF  0877               	movf	??_I2C_Master_Init+3,w
  4607  08C0  00CA               	movwf	___lldiv@divisor+3
  4608  08C1  0876               	movf	??_I2C_Master_Init+2,w
  4609  08C2  00C9               	movwf	___lldiv@divisor+2
  4610  08C3  0875               	movf	??_I2C_Master_Init+1,w
  4611  08C4  00C8               	movwf	___lldiv@divisor+1
  4612  08C5  0874               	movf	??_I2C_Master_Init,w
  4613  08C6  00C7               	movwf	___lldiv@divisor
  4614  08C7  3000               	movlw	0
  4615  08C8  00CE               	movwf	___lldiv@dividend+3
  4616  08C9  307A               	movlw	122
  4617  08CA  00CD               	movwf	___lldiv@dividend+2
  4618  08CB  3012               	movlw	18
  4619  08CC  00CC               	movwf	___lldiv@dividend+1
  4620  08CD  3000               	movlw	0
  4621  08CE  00CB               	movwf	___lldiv@dividend
  4622  08CF  120A  158A  23BD   	fcall	___lldiv
  4623  08D2  1283               	bcf	3,5	;RP0=0, select bank0
  4624  08D3  1303               	bcf	3,6	;RP1=0, select bank0
  4625  08D4  0847               	movf	?___lldiv,w
  4626  08D5  3EFF               	addlw	255
  4627  08D6  1683               	bsf	3,5	;RP0=1, select bank1
  4628  08D7  1303               	bcf	3,6	;RP1=0, select bank1
  4629  08D8  0093               	movwf	19	;volatile
  4630                           
  4631                           ;./I2C.h: 21:     SSPSTAT = 0;
  4632  08D9  0194               	clrf	20	;volatile
  4633                           
  4634                           ;./I2C.h: 22:     TRISCbits.TRISC3 = 1;
  4635  08DA  1587               	bsf	7,3	;volatile
  4636                           
  4637                           ;./I2C.h: 23:     TRISCbits.TRISC4 = 1;
  4638  08DB  1607               	bsf	7,4	;volatile
  4639  08DC  0008               	return
  4640  08DD                     __end_of_I2C_Master_Init:	
  4641                           
  4642                           	psect	text9
  4643  0BBD                     __ptext9:	
  4644 ;; *************** function ___lldiv *****************
  4645 ;; Defined at:
  4646 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;  divisor         4    0[BANK0 ] unsigned long 
  4649 ;;  dividend        4    4[BANK0 ] unsigned long 
  4650 ;; Auto vars:     Size  Location     Type
  4651 ;;  quotient        4    8[BANK0 ] unsigned long 
  4652 ;;  counter         1   12[BANK0 ] unsigned char 
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  4    0[BANK0 ] unsigned long 
  4655 ;; Registers used:
  4656 ;;		wreg, status,2, status,0
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4662 ;;      Params:         0       8       0       0       0
  4663 ;;      Locals:         0       5       0       0       0
  4664 ;;      Temps:          1       0       0       0       0
  4665 ;;      Totals:         1      13       0       0       0
  4666 ;;Total ram usage:       14 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    1
  4669 ;; This function calls:
  4670 ;;		Nothing
  4671 ;; This function is called by:
  4672 ;;		_I2C_Master_Init
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           
  4677                           ;psect for function ___lldiv
  4678  0BBD                     ___lldiv:	
  4679                           
  4680                           ;incstack = 0
  4681                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4682  0BBD  3000               	movlw	0
  4683  0BBE  1283               	bcf	3,5	;RP0=0, select bank0
  4684  0BBF  1303               	bcf	3,6	;RP1=0, select bank0
  4685  0BC0  00D2               	movwf	___lldiv@quotient+3
  4686  0BC1  3000               	movlw	0
  4687  0BC2  00D1               	movwf	___lldiv@quotient+2
  4688  0BC3  3000               	movlw	0
  4689  0BC4  00D0               	movwf	___lldiv@quotient+1
  4690  0BC5  3000               	movlw	0
  4691  0BC6  00CF               	movwf	___lldiv@quotient
  4692  0BC7  084A               	movf	___lldiv@divisor+3,w
  4693  0BC8  0449               	iorwf	___lldiv@divisor+2,w
  4694  0BC9  0448               	iorwf	___lldiv@divisor+1,w
  4695  0BCA  0447               	iorwf	___lldiv@divisor,w
  4696  0BCB  1903               	skipnz
  4697  0BCC  2C14               	goto	l3546
  4698  0BCD  01D3               	clrf	___lldiv@counter
  4699  0BCE  0AD3               	incf	___lldiv@counter,f
  4700  0BCF                     l3532:	
  4701  0BCF  1BCA               	btfsc	___lldiv@divisor+3,7
  4702  0BD0  2BDF               	goto	l3534
  4703  0BD1  3001               	movlw	1
  4704  0BD2  00F3               	movwf	??___lldiv
  4705  0BD3                     u3505:	
  4706  0BD3  1003               	clrc
  4707  0BD4  0DC7               	rlf	___lldiv@divisor,f
  4708  0BD5  0DC8               	rlf	___lldiv@divisor+1,f
  4709  0BD6  0DC9               	rlf	___lldiv@divisor+2,f
  4710  0BD7  0DCA               	rlf	___lldiv@divisor+3,f
  4711  0BD8  0BF3               	decfsz	??___lldiv,f
  4712  0BD9  2BD3               	goto	u3505
  4713  0BDA  3001               	movlw	1
  4714  0BDB  00F3               	movwf	??___lldiv
  4715  0BDC  0873               	movf	??___lldiv,w
  4716  0BDD  07D3               	addwf	___lldiv@counter,f
  4717  0BDE  2BCF               	goto	l3532
  4718  0BDF                     l3534:	
  4719  0BDF  3001               	movlw	1
  4720  0BE0  00F3               	movwf	??___lldiv
  4721  0BE1                     u3525:	
  4722  0BE1  1003               	clrc
  4723  0BE2  0DCF               	rlf	___lldiv@quotient,f
  4724  0BE3  0DD0               	rlf	___lldiv@quotient+1,f
  4725  0BE4  0DD1               	rlf	___lldiv@quotient+2,f
  4726  0BE5  0DD2               	rlf	___lldiv@quotient+3,f
  4727  0BE6  0BF3               	decfsz	??___lldiv,f
  4728  0BE7  2BE1               	goto	u3525
  4729  0BE8  084A               	movf	___lldiv@divisor+3,w
  4730  0BE9  024E               	subwf	___lldiv@dividend+3,w
  4731  0BEA  1D03               	skipz
  4732  0BEB  2BF6               	goto	u3535
  4733  0BEC  0849               	movf	___lldiv@divisor+2,w
  4734  0BED  024D               	subwf	___lldiv@dividend+2,w
  4735  0BEE  1D03               	skipz
  4736  0BEF  2BF6               	goto	u3535
  4737  0BF0  0848               	movf	___lldiv@divisor+1,w
  4738  0BF1  024C               	subwf	___lldiv@dividend+1,w
  4739  0BF2  1D03               	skipz
  4740  0BF3  2BF6               	goto	u3535
  4741  0BF4  0847               	movf	___lldiv@divisor,w
  4742  0BF5  024B               	subwf	___lldiv@dividend,w
  4743  0BF6                     u3535:	
  4744  0BF6  1C03               	skipc
  4745  0BF7  2C07               	goto	l3542
  4746  0BF8  0847               	movf	___lldiv@divisor,w
  4747  0BF9  02CB               	subwf	___lldiv@dividend,f
  4748  0BFA  0848               	movf	___lldiv@divisor+1,w
  4749  0BFB  1C03               	skipc
  4750  0BFC  0F48               	incfsz	___lldiv@divisor+1,w
  4751  0BFD  02CC               	subwf	___lldiv@dividend+1,f
  4752  0BFE  0849               	movf	___lldiv@divisor+2,w
  4753  0BFF  1C03               	skipc
  4754  0C00  0F49               	incfsz	___lldiv@divisor+2,w
  4755  0C01  02CD               	subwf	___lldiv@dividend+2,f
  4756  0C02  084A               	movf	___lldiv@divisor+3,w
  4757  0C03  1C03               	skipc
  4758  0C04  0F4A               	incfsz	___lldiv@divisor+3,w
  4759  0C05  02CE               	subwf	___lldiv@dividend+3,f
  4760  0C06  144F               	bsf	___lldiv@quotient,0
  4761  0C07                     l3542:	
  4762  0C07  3001               	movlw	1
  4763  0C08                     u3545:	
  4764  0C08  1003               	clrc
  4765  0C09  0CCA               	rrf	___lldiv@divisor+3,f
  4766  0C0A  0CC9               	rrf	___lldiv@divisor+2,f
  4767  0C0B  0CC8               	rrf	___lldiv@divisor+1,f
  4768  0C0C  0CC7               	rrf	___lldiv@divisor,f
  4769  0C0D  3EFF               	addlw	-1
  4770  0C0E  1D03               	skipz
  4771  0C0F  2C08               	goto	u3545
  4772  0C10  3001               	movlw	1
  4773  0C11  02D3               	subwf	___lldiv@counter,f
  4774  0C12  1D03               	btfss	3,2
  4775  0C13  2BDF               	goto	l3534
  4776  0C14                     l3546:	
  4777  0C14  0852               	movf	___lldiv@quotient+3,w
  4778  0C15  00CA               	movwf	?___lldiv+3
  4779  0C16  0851               	movf	___lldiv@quotient+2,w
  4780  0C17  00C9               	movwf	?___lldiv+2
  4781  0C18  0850               	movf	___lldiv@quotient+1,w
  4782  0C19  00C8               	movwf	?___lldiv+1
  4783  0C1A  084F               	movf	___lldiv@quotient,w
  4784  0C1B  00C7               	movwf	?___lldiv
  4785  0C1C  0008               	return
  4786  0C1D                     __end_of___lldiv:	
  4787                           
  4788                           	psect	text10
  4789  06E3                     __ptext10:	
  4790 ;; *************** function _open_door *****************
  4791 ;; Defined at:
  4792 ;;		line 622 in file "mainMaster.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;		None
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;		None
  4797 ;; Return value:  Size  Location     Type
  4798 ;;                  1    wreg      void 
  4799 ;; Registers used:
  4800 ;;		wreg, status,2, status,0, pclath, cstack
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4806 ;;      Params:         0       0       0       0       0
  4807 ;;      Locals:         0       0       0       0       0
  4808 ;;      Temps:          0       0       0       0       0
  4809 ;;      Totals:         0       0       0       0       0
  4810 ;;Total ram usage:        0 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; Hardware stack levels required when called:    3
  4813 ;; This function calls:
  4814 ;;		_I2C_Master_Start
  4815 ;;		_I2C_Master_Stop
  4816 ;;		_I2C_Master_Write
  4817 ;; This function is called by:
  4818 ;;		_main
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           
  4823                           ;psect for function _open_door
  4824  06E3                     _open_door:	
  4825                           
  4826                           ;mainMaster.c: 624:     I2C_Master_Start();
  4827                           
  4828                           ;incstack = 0
  4829                           ; Regs used in _open_door: [wreg+status,2+status,0+pclath+cstack]
  4830  06E3  160A  118A  2647  120A  118A  	fcall	_I2C_Master_Start
  4831                           
  4832                           ;mainMaster.c: 625:     I2C_Master_Write(0x20);
  4833  06E8  3020               	movlw	32
  4834  06E9  00F3               	movwf	I2C_Master_Write@d
  4835  06EA  3000               	movlw	0
  4836  06EB  00F4               	movwf	I2C_Master_Write@d+1
  4837  06EC  160A  118A  265C  120A  118A  	fcall	_I2C_Master_Write
  4838                           
  4839                           ;mainMaster.c: 626:     I2C_Master_Write(0xFF);
  4840  06F1  30FF               	movlw	255
  4841  06F2  00F3               	movwf	I2C_Master_Write@d
  4842  06F3  3000               	movlw	0
  4843  06F4  00F4               	movwf	I2C_Master_Write@d+1
  4844  06F5  160A  118A  265C  120A  118A  	fcall	_I2C_Master_Write
  4845                           
  4846                           ;mainMaster.c: 627:     I2C_Master_Stop();
  4847  06FA  160A  118A  264E   	fcall	_I2C_Master_Stop
  4848  06FD  0008               	return
  4849  06FE                     __end_of_open_door:	
  4850                           
  4851                           	psect	text11
  4852  177F                     __ptext11:	
  4853 ;; *************** function _get_tripwire *****************
  4854 ;; Defined at:
  4855 ;;		line 586 in file "mainMaster.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;		None
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;  trip            1    2[BANK0 ] unsigned char 
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  1    wreg      unsigned char 
  4862 ;; Registers used:
  4863 ;;		wreg, status,2, status,0, pclath, cstack
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4869 ;;      Params:         0       0       0       0       0
  4870 ;;      Locals:         0       1       0       0       0
  4871 ;;      Temps:          1       0       0       0       0
  4872 ;;      Totals:         1       1       0       0       0
  4873 ;;Total ram usage:        2 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:    3
  4876 ;; This function calls:
  4877 ;;		_I2C_Master_Read
  4878 ;;		_I2C_Master_Start
  4879 ;;		_I2C_Master_Stop
  4880 ;;		_I2C_Master_Write
  4881 ;; This function is called by:
  4882 ;;		_main
  4883 ;; This function uses a non-reentrant model
  4884 ;;
  4885                           
  4886                           
  4887                           ;psect for function _get_tripwire
  4888  177F                     _get_tripwire:	
  4889                           
  4890                           ;mainMaster.c: 588:     char trip;;mainMaster.c: 590:     I2C_Master_Start();
  4891                           
  4892                           ;incstack = 0
  4893                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  4894  177F  160A  118A  2647  160A  118A  	fcall	_I2C_Master_Start
  4895                           
  4896                           ;mainMaster.c: 591:     I2C_Master_Write(0x21);
  4897  1784  3021               	movlw	33
  4898  1785  00F3               	movwf	I2C_Master_Write@d
  4899  1786  3000               	movlw	0
  4900  1787  00F4               	movwf	I2C_Master_Write@d+1
  4901  1788  160A  118A  265C  160A  118A  	fcall	_I2C_Master_Write
  4902                           
  4903                           ;mainMaster.c: 592:     trip = I2C_Master_Read(0);
  4904  178D  3000               	movlw	0
  4905  178E  00F3               	movwf	I2C_Master_Read@a
  4906  178F  00F4               	movwf	I2C_Master_Read@a+1
  4907  1790  160A  118A  27A2  160A  118A  	fcall	_I2C_Master_Read
  4908  1795  0873               	movf	?_I2C_Master_Read,w
  4909  1796  00F7               	movwf	??_get_tripwire
  4910  1797  0877               	movf	??_get_tripwire,w
  4911  1798  1283               	bcf	3,5	;RP0=0, select bank0
  4912  1799  1303               	bcf	3,6	;RP1=0, select bank0
  4913  179A  00C9               	movwf	get_tripwire@trip
  4914                           
  4915                           ;mainMaster.c: 593:     I2C_Master_Stop();
  4916  179B  160A  118A  264E   	fcall	_I2C_Master_Stop
  4917                           
  4918                           ;mainMaster.c: 595:     return (trip);
  4919  179E  1283               	bcf	3,5	;RP0=0, select bank0
  4920  179F  1303               	bcf	3,6	;RP1=0, select bank0
  4921  17A0  0849               	movf	get_tripwire@trip,w
  4922  17A1  0008               	return
  4923  17A2                     __end_of_get_tripwire:	
  4924                           
  4925                           	psect	text12
  4926  0C7D                     __ptext12:	
  4927 ;; *************** function _get_time *****************
  4928 ;; Defined at:
  4929 ;;		line 511 in file "mainMaster.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;  time_string     1    wreg     PTR unsigned char 
  4932 ;;		 -> time(6), 
  4933 ;; Auto vars:     Size  Location     Type
  4934 ;;  time_string     1    6[BANK0 ] PTR unsigned char 
  4935 ;;		 -> time(6), 
  4936 ;;  min             1    5[BANK0 ] unsigned char 
  4937 ;;  hour            1    4[BANK0 ] unsigned char 
  4938 ;; Return value:  Size  Location     Type
  4939 ;;                  1    wreg      void 
  4940 ;; Registers used:
  4941 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4947 ;;      Params:         0       0       0       0       0
  4948 ;;      Locals:         0       3       0       0       0
  4949 ;;      Temps:          0       2       0       0       0
  4950 ;;      Totals:         0       5       0       0       0
  4951 ;;Total ram usage:        5 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:    3
  4954 ;; This function calls:
  4955 ;;		_I2C_Master_Read
  4956 ;;		_I2C_Master_RepeatedStart
  4957 ;;		_I2C_Master_Start
  4958 ;;		_I2C_Master_Stop
  4959 ;;		_I2C_Master_Write
  4960 ;; This function is called by:
  4961 ;;		_main
  4962 ;; This function uses a non-reentrant model
  4963 ;;
  4964                           
  4965                           
  4966                           ;psect for function _get_time
  4967  0C7D                     _get_time:	
  4968                           
  4969                           ;incstack = 0
  4970                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4971                           ;get_time@time_string stored from wreg
  4972  0C7D  1283               	bcf	3,5	;RP0=0, select bank0
  4973  0C7E  1303               	bcf	3,6	;RP1=0, select bank0
  4974  0C7F  00CD               	movwf	get_time@time_string
  4975                           
  4976                           ;mainMaster.c: 513:     char hour, min;;mainMaster.c: 515:     I2C_Master_Start();
  4977  0C80  160A  118A  2647  120A  158A  	fcall	_I2C_Master_Start
  4978                           
  4979                           ;mainMaster.c: 516:     I2C_Master_Write(0xD0);
  4980  0C85  30D0               	movlw	208
  4981  0C86  00F3               	movwf	I2C_Master_Write@d
  4982  0C87  3000               	movlw	0
  4983  0C88  00F4               	movwf	I2C_Master_Write@d+1
  4984  0C89  160A  118A  265C  120A  158A  	fcall	_I2C_Master_Write
  4985                           
  4986                           ;mainMaster.c: 517:     I2C_Master_Write(0x01);
  4987  0C8E  3001               	movlw	1
  4988  0C8F  00F3               	movwf	I2C_Master_Write@d
  4989  0C90  3000               	movlw	0
  4990  0C91  00F4               	movwf	I2C_Master_Write@d+1
  4991  0C92  160A  118A  265C  120A  158A  	fcall	_I2C_Master_Write
  4992                           
  4993                           ;mainMaster.c: 518:     I2C_Master_RepeatedStart();
  4994  0C97  160A  118A  2655  120A  158A  	fcall	_I2C_Master_RepeatedStart
  4995                           
  4996                           ;mainMaster.c: 519:     I2C_Master_Write(0xD1);
  4997  0C9C  30D1               	movlw	209
  4998  0C9D  00F3               	movwf	I2C_Master_Write@d
  4999  0C9E  3000               	movlw	0
  5000  0C9F  00F4               	movwf	I2C_Master_Write@d+1
  5001  0CA0  160A  118A  265C  120A  158A  	fcall	_I2C_Master_Write
  5002                           
  5003                           ;mainMaster.c: 520:     min = I2C_Master_Read(1);
  5004  0CA5  3001               	movlw	1
  5005  0CA6  00F3               	movwf	I2C_Master_Read@a
  5006  0CA7  3000               	movlw	0
  5007  0CA8  00F4               	movwf	I2C_Master_Read@a+1
  5008  0CA9  160A  118A  27A2  120A  158A  	fcall	_I2C_Master_Read
  5009  0CAE  0873               	movf	?_I2C_Master_Read,w
  5010  0CAF  1283               	bcf	3,5	;RP0=0, select bank0
  5011  0CB0  1303               	bcf	3,6	;RP1=0, select bank0
  5012  0CB1  00C9               	movwf	??_get_time
  5013  0CB2  0849               	movf	??_get_time,w
  5014  0CB3  00CC               	movwf	get_time@min
  5015                           
  5016                           ;mainMaster.c: 521:     hour = I2C_Master_Read(0);
  5017  0CB4  3000               	movlw	0
  5018  0CB5  00F3               	movwf	I2C_Master_Read@a
  5019  0CB6  00F4               	movwf	I2C_Master_Read@a+1
  5020  0CB7  160A  118A  27A2  120A  158A  	fcall	_I2C_Master_Read
  5021  0CBC  0873               	movf	?_I2C_Master_Read,w
  5022  0CBD  1283               	bcf	3,5	;RP0=0, select bank0
  5023  0CBE  1303               	bcf	3,6	;RP1=0, select bank0
  5024  0CBF  00C9               	movwf	??_get_time
  5025  0CC0  0849               	movf	??_get_time,w
  5026  0CC1  00CB               	movwf	get_time@hour
  5027                           
  5028                           ;mainMaster.c: 522:     I2C_Master_Stop();
  5029  0CC2  160A  118A  264E  120A  158A  	fcall	_I2C_Master_Stop
  5030                           
  5031                           ;mainMaster.c: 524:     time_string[0] = (hour >> 4) + '0';
  5032  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  5033  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  5034  0CC9  084B               	movf	get_time@hour,w
  5035  0CCA  00C9               	movwf	??_get_time
  5036  0CCB  3004               	movlw	4
  5037  0CCC                     u3995:	
  5038  0CCC  1003               	clrc
  5039  0CCD  0CC9               	rrf	??_get_time,f
  5040  0CCE  3EFF               	addlw	-1
  5041  0CCF  1D03               	skipz
  5042  0CD0  2CCC               	goto	u3995
  5043  0CD1  0849               	movf	??_get_time,w
  5044  0CD2  3E30               	addlw	48
  5045  0CD3  00CA               	movwf	??_get_time+1
  5046  0CD4  084D               	movf	get_time@time_string,w
  5047  0CD5  0084               	movwf	4
  5048  0CD6  084A               	movf	??_get_time+1,w
  5049  0CD7  1383               	bcf	3,7	;select IRP bank0
  5050  0CD8  0080               	movwf	0
  5051                           
  5052                           ;mainMaster.c: 525:     time_string[1] = (hour & 0x0F) + '0';
  5053  0CD9  084B               	movf	get_time@hour,w
  5054  0CDA  390F               	andlw	15
  5055  0CDB  3E30               	addlw	48
  5056  0CDC  00C9               	movwf	??_get_time
  5057  0CDD  0A4D               	incf	get_time@time_string,w
  5058  0CDE  0084               	movwf	4
  5059  0CDF  0849               	movf	??_get_time,w
  5060  0CE0  0080               	movwf	0
  5061                           
  5062                           ;mainMaster.c: 526:     time_string[2] = ':';
  5063  0CE1  303A               	movlw	58
  5064  0CE2  00C9               	movwf	??_get_time
  5065  0CE3  084D               	movf	get_time@time_string,w
  5066  0CE4  3E02               	addlw	2
  5067  0CE5  0084               	movwf	4
  5068  0CE6  0849               	movf	??_get_time,w
  5069  0CE7  0080               	movwf	0
  5070                           
  5071                           ;mainMaster.c: 527:     time_string[3] = (min >> 4) + '0';
  5072  0CE8  084C               	movf	get_time@min,w
  5073  0CE9  00C9               	movwf	??_get_time
  5074  0CEA  3004               	movlw	4
  5075  0CEB                     u4005:	
  5076  0CEB  1003               	clrc
  5077  0CEC  0CC9               	rrf	??_get_time,f
  5078  0CED  3EFF               	addlw	-1
  5079  0CEE  1D03               	skipz
  5080  0CEF  2CEB               	goto	u4005
  5081  0CF0  0849               	movf	??_get_time,w
  5082  0CF1  3E30               	addlw	48
  5083  0CF2  00CA               	movwf	??_get_time+1
  5084  0CF3  084D               	movf	get_time@time_string,w
  5085  0CF4  3E03               	addlw	3
  5086  0CF5  0084               	movwf	4
  5087  0CF6  084A               	movf	??_get_time+1,w
  5088  0CF7  0080               	movwf	0
  5089                           
  5090                           ;mainMaster.c: 528:     time_string[4] = (min & 0x0F) + '0';
  5091  0CF8  084C               	movf	get_time@min,w
  5092  0CF9  390F               	andlw	15
  5093  0CFA  3E30               	addlw	48
  5094  0CFB  00C9               	movwf	??_get_time
  5095  0CFC  084D               	movf	get_time@time_string,w
  5096  0CFD  3E04               	addlw	4
  5097  0CFE  0084               	movwf	4
  5098  0CFF  0849               	movf	??_get_time,w
  5099  0D00  0080               	movwf	0
  5100                           
  5101                           ;mainMaster.c: 529:     time_string[5] = '\0';
  5102  0D01  084D               	movf	get_time@time_string,w
  5103  0D02  3E05               	addlw	5
  5104  0D03  0084               	movwf	4
  5105  0D04  0180               	clrf	0
  5106  0D05  0008               	return
  5107  0D06                     __end_of_get_time:	
  5108                           
  5109                           	psect	text13
  5110  0D95                     __ptext13:	
  5111 ;; *************** function _get_temp *****************
  5112 ;; Defined at:
  5113 ;;		line 547 in file "mainMaster.c"
  5114 ;; Parameters:    Size  Location     Type
  5115 ;;  temp_string     1    wreg     PTR unsigned char 
  5116 ;;		 -> temp(6), 
  5117 ;; Auto vars:     Size  Location     Type
  5118 ;;  temp_string     1   31[BANK0 ] PTR unsigned char 
  5119 ;;		 -> temp(6), 
  5120 ;;  decimal         3   27[BANK0 ] unsigned char [3]
  5121 ;;  tempLSB         1   32[BANK0 ] unsigned char 
  5122 ;;  tempMSB         1   30[BANK0 ] unsigned char 
  5123 ;; Return value:  Size  Location     Type
  5124 ;;                  1    wreg      void 
  5125 ;; Registers used:
  5126 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5127 ;; Tracked objects:
  5128 ;;		On entry : 0/0
  5129 ;;		On exit  : 0/0
  5130 ;;		Unchanged: 0/0
  5131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5132 ;;      Params:         0       0       0       0       0
  5133 ;;      Locals:         0       6       0       0       0
  5134 ;;      Temps:          0       3       0       0       0
  5135 ;;      Totals:         0       9       0       0       0
  5136 ;;Total ram usage:        9 bytes
  5137 ;; Hardware stack levels used:    1
  5138 ;; Hardware stack levels required when called:    3
  5139 ;; This function calls:
  5140 ;;		_I2C_Master_Read
  5141 ;;		_I2C_Master_RepeatedStart
  5142 ;;		_I2C_Master_Start
  5143 ;;		_I2C_Master_Stop
  5144 ;;		_I2C_Master_Write
  5145 ;;		___bmul
  5146 ;;		_sprintf
  5147 ;;		_strcat
  5148 ;; This function is called by:
  5149 ;;		_main
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           
  5154                           ;psect for function _get_temp
  5155  0D95                     _get_temp:	
  5156                           
  5157                           ;incstack = 0
  5158                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5159                           ;get_temp@temp_string stored from wreg
  5160  0D95  1283               	bcf	3,5	;RP0=0, select bank0
  5161  0D96  1303               	bcf	3,6	;RP1=0, select bank0
  5162  0D97  00E6               	movwf	get_temp@temp_string
  5163                           
  5164                           ;mainMaster.c: 549:     char tempLSB, tempMSB;;mainMaster.c: 550:     char decimal[3];;m
      +                          ainMaster.c: 552:     I2C_Master_Start();
  5165  0D98  160A  118A  2647  120A  158A  	fcall	_I2C_Master_Start
  5166                           
  5167                           ;mainMaster.c: 553:     I2C_Master_Write(0xD0);
  5168  0D9D  30D0               	movlw	208
  5169  0D9E  00F3               	movwf	I2C_Master_Write@d
  5170  0D9F  3000               	movlw	0
  5171  0DA0  00F4               	movwf	I2C_Master_Write@d+1
  5172  0DA1  160A  118A  265C  120A  158A  	fcall	_I2C_Master_Write
  5173                           
  5174                           ;mainMaster.c: 554:     I2C_Master_Write(0x11);
  5175  0DA6  3011               	movlw	17
  5176  0DA7  00F3               	movwf	I2C_Master_Write@d
  5177  0DA8  3000               	movlw	0
  5178  0DA9  00F4               	movwf	I2C_Master_Write@d+1
  5179  0DAA  160A  118A  265C  120A  158A  	fcall	_I2C_Master_Write
  5180                           
  5181                           ;mainMaster.c: 555:     I2C_Master_RepeatedStart();
  5182  0DAF  160A  118A  2655  120A  158A  	fcall	_I2C_Master_RepeatedStart
  5183                           
  5184                           ;mainMaster.c: 556:     I2C_Master_Write(0xD1);
  5185  0DB4  30D1               	movlw	209
  5186  0DB5  00F3               	movwf	I2C_Master_Write@d
  5187  0DB6  3000               	movlw	0
  5188  0DB7  00F4               	movwf	I2C_Master_Write@d+1
  5189  0DB8  160A  118A  265C  120A  158A  	fcall	_I2C_Master_Write
  5190                           
  5191                           ;mainMaster.c: 557:     tempMSB = I2C_Master_Read(1);
  5192  0DBD  3001               	movlw	1
  5193  0DBE  00F3               	movwf	I2C_Master_Read@a
  5194  0DBF  3000               	movlw	0
  5195  0DC0  00F4               	movwf	I2C_Master_Read@a+1
  5196  0DC1  160A  118A  27A2  120A  158A  	fcall	_I2C_Master_Read
  5197  0DC6  0873               	movf	?_I2C_Master_Read,w
  5198  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  5199  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  5200  0DC9  00DF               	movwf	??_get_temp
  5201  0DCA  085F               	movf	??_get_temp,w
  5202  0DCB  00E5               	movwf	get_temp@tempMSB
  5203                           
  5204                           ;mainMaster.c: 558:     tempLSB = I2C_Master_Read(0);
  5205  0DCC  3000               	movlw	0
  5206  0DCD  00F3               	movwf	I2C_Master_Read@a
  5207  0DCE  00F4               	movwf	I2C_Master_Read@a+1
  5208  0DCF  160A  118A  27A2  120A  158A  	fcall	_I2C_Master_Read
  5209  0DD4  0873               	movf	?_I2C_Master_Read,w
  5210  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  5211  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  5212  0DD7  00DF               	movwf	??_get_temp
  5213  0DD8  085F               	movf	??_get_temp,w
  5214  0DD9  00E7               	movwf	get_temp@tempLSB
  5215                           
  5216                           ;mainMaster.c: 559:     I2C_Master_Stop();
  5217  0DDA  160A  118A  264E  120A  158A  	fcall	_I2C_Master_Stop
  5218                           
  5219                           ;mainMaster.c: 561:     tempMSB = tempMSB - 4;
  5220  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  5221  0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  5222  0DE1  0865               	movf	get_temp@tempMSB,w
  5223  0DE2  3EFC               	addlw	252
  5224  0DE3  00DF               	movwf	??_get_temp
  5225  0DE4  085F               	movf	??_get_temp,w
  5226  0DE5  00E5               	movwf	get_temp@tempMSB
  5227                           
  5228                           ;mainMaster.c: 562:     tempLSB = (tempLSB >> 6) * 25;
  5229  0DE6  3019               	movlw	25
  5230  0DE7  00DF               	movwf	??_get_temp
  5231  0DE8  085F               	movf	??_get_temp,w
  5232  0DE9  00F3               	movwf	___bmul@multiplicand
  5233  0DEA  0867               	movf	get_temp@tempLSB,w
  5234  0DEB  00E0               	movwf	??_get_temp+1
  5235  0DEC  3006               	movlw	6
  5236  0DED                     u3975:	
  5237  0DED  1003               	clrc
  5238  0DEE  0CE0               	rrf	??_get_temp+1,f
  5239  0DEF  3EFF               	addlw	-1
  5240  0DF0  1D03               	skipz
  5241  0DF1  2DED               	goto	u3975
  5242  0DF2  0860               	movf	??_get_temp+1,w
  5243  0DF3  160A  118A  2697  120A  158A  	fcall	___bmul
  5244  0DF8  1283               	bcf	3,5	;RP0=0, select bank0
  5245  0DF9  1303               	bcf	3,6	;RP1=0, select bank0
  5246  0DFA  00E1               	movwf	??_get_temp+2
  5247  0DFB  0861               	movf	??_get_temp+2,w
  5248  0DFC  00E7               	movwf	get_temp@tempLSB
  5249                           
  5250                           ;mainMaster.c: 563:     sprintf(temp_string, "%d", tempMSB);
  5251  0DFD  3041               	movlw	low ((STR_34+1)| (0+32768))
  5252  0DFE  00D0               	movwf	sprintf@f
  5253  0DFF  3088               	movlw	high ((STR_34+1)| (0+32768))
  5254  0E00  00D1               	movwf	sprintf@f+1
  5255  0E01  0865               	movf	get_temp@tempMSB,w
  5256  0E02  00DF               	movwf	??_get_temp
  5257  0E03  01E0               	clrf	??_get_temp+1
  5258  0E04  085F               	movf	??_get_temp,w
  5259  0E05  00D2               	movwf	?_sprintf+2
  5260  0E06  0860               	movf	??_get_temp+1,w
  5261  0E07  00D3               	movwf	?_sprintf+3
  5262  0E08  0866               	movf	get_temp@temp_string,w
  5263  0E09  120A  158A  2712  120A  158A  	fcall	_sprintf
  5264                           
  5265                           ;mainMaster.c: 564:     if (tempLSB == 0){
  5266  0E0E  1283               	bcf	3,5	;RP0=0, select bank0
  5267  0E0F  1303               	bcf	3,6	;RP1=0, select bank0
  5268  0E10  0867               	movf	get_temp@tempLSB,w
  5269  0E11  1D03               	btfss	3,2
  5270  0E12  2E17               	goto	l3864
  5271                           
  5272                           ;mainMaster.c: 565:         sprintf(decimal, ".%d0", tempLSB);
  5273  0E13  303B               	movlw	low (STR_33| (0+32768))
  5274  0E14  00D0               	movwf	sprintf@f
  5275  0E15  3088               	movlw	high (STR_33| (0+32768))
  5276  0E16  2E1A               	goto	L18
  5277  0E17                     l3864:	
  5278                           ;mainMaster.c: 566:     } else {
  5279                           
  5280                           
  5281                           ;mainMaster.c: 567:         sprintf(decimal, ".%d", tempLSB);
  5282  0E17  3040               	movlw	low (STR_34| (0+32768))
  5283  0E18  00D0               	movwf	sprintf@f
  5284  0E19  3088               	movlw	high (STR_34| (0+32768))
  5285  0E1A                     L18:	
  5286  0E1A  00D1               	movwf	sprintf@f+1
  5287  0E1B  0867               	movf	get_temp@tempLSB,w
  5288  0E1C  00DF               	movwf	??_get_temp
  5289  0E1D  01E0               	clrf	??_get_temp+1
  5290  0E1E  085F               	movf	??_get_temp,w
  5291  0E1F  00D2               	movwf	?_sprintf+2
  5292  0E20  0860               	movf	??_get_temp+1,w
  5293  0E21  00D3               	movwf	?_sprintf+3
  5294  0E22  3062               	movlw	(low (get_temp@decimal| 0))& (0+255)
  5295  0E23  120A  158A  2712  120A  158A  	fcall	_sprintf
  5296                           
  5297                           ;mainMaster.c: 569:     strcat(temp_string, decimal);
  5298  0E28  3062               	movlw	(low (get_temp@decimal| 0))& (0+255)
  5299  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  5300  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  5301  0E2B  00DF               	movwf	??_get_temp
  5302  0E2C  085F               	movf	??_get_temp,w
  5303  0E2D  00F3               	movwf	strcat@from
  5304  0E2E  0866               	movf	get_temp@temp_string,w
  5305  0E2F  120A  158A  204D   	fcall	_strcat
  5306                           
  5307                           ;mainMaster.c: 570:     temp_string[5] = '\0';
  5308  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  5309  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  5310  0E34  0866               	movf	get_temp@temp_string,w
  5311  0E35  3E05               	addlw	5
  5312  0E36  0084               	movwf	4
  5313  0E37  1383               	bcf	3,7	;select IRP bank0
  5314  0E38  0180               	clrf	0
  5315  0E39  0008               	return
  5316  0E3A                     __end_of_get_temp:	
  5317                           
  5318                           	psect	text14
  5319  084D                     __ptext14:	
  5320 ;; *************** function _strcat *****************
  5321 ;; Defined at:
  5322 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;  to              1    wreg     PTR unsigned char 
  5325 ;;		 -> temp(6), 
  5326 ;;  from            1    3[COMMON] PTR const unsigned char 
  5327 ;;		 -> get_temp@decimal(3), 
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;  to              1    5[COMMON] PTR unsigned char 
  5330 ;;		 -> temp(6), 
  5331 ;;  cp              1    6[COMMON] PTR unsigned char 
  5332 ;;		 -> temp(6), 
  5333 ;; Return value:  Size  Location     Type
  5334 ;;                  1    wreg      PTR unsigned char 
  5335 ;; Registers used:
  5336 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5337 ;; Tracked objects:
  5338 ;;		On entry : 0/0
  5339 ;;		On exit  : 0/0
  5340 ;;		Unchanged: 0/0
  5341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5342 ;;      Params:         1       0       0       0       0
  5343 ;;      Locals:         2       0       0       0       0
  5344 ;;      Temps:          1       0       0       0       0
  5345 ;;      Totals:         4       0       0       0       0
  5346 ;;Total ram usage:        4 bytes
  5347 ;; Hardware stack levels used:    1
  5348 ;; Hardware stack levels required when called:    1
  5349 ;; This function calls:
  5350 ;;		Nothing
  5351 ;; This function is called by:
  5352 ;;		_get_temp
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           
  5357                           ;psect for function _strcat
  5358  084D                     _strcat:	
  5359                           
  5360                           ;incstack = 0
  5361                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  5362                           ;strcat@to stored from wreg
  5363  084D  00F5               	movwf	strcat@to
  5364  084E  0875               	movf	strcat@to,w
  5365  084F  00F4               	movwf	??_strcat
  5366  0850  0874               	movf	??_strcat,w
  5367  0851  00F6               	movwf	strcat@cp
  5368  0852                     l2662:	
  5369  0852  0876               	movf	strcat@cp,w
  5370  0853  0084               	movwf	4
  5371  0854  1383               	bcf	3,7	;select IRP bank0
  5372  0855  0800               	movf	0,w
  5373  0856  1903               	btfsc	3,2
  5374  0857  2865               	goto	l2666
  5375  0858  3001               	movlw	1
  5376  0859  00F4               	movwf	??_strcat
  5377  085A  0874               	movf	??_strcat,w
  5378  085B  07F6               	addwf	strcat@cp,f
  5379  085C  2852               	goto	l2662
  5380  085D                     l2664:	
  5381  085D  3001               	movlw	1
  5382  085E  00F4               	movwf	??_strcat
  5383  085F  0874               	movf	??_strcat,w
  5384  0860  07F6               	addwf	strcat@cp,f
  5385  0861  3001               	movlw	1
  5386  0862  00F4               	movwf	??_strcat
  5387  0863  0874               	movf	??_strcat,w
  5388  0864  07F3               	addwf	strcat@from,f
  5389  0865                     l2666:	
  5390  0865  0873               	movf	strcat@from,w
  5391  0866  0084               	movwf	4
  5392  0867  0800               	movf	0,w
  5393  0868  00F4               	movwf	??_strcat
  5394  0869  0876               	movf	strcat@cp,w
  5395  086A  0084               	movwf	4
  5396  086B  0874               	movf	??_strcat,w
  5397  086C  0080               	movwf	0
  5398  086D  0800               	movf	0,w
  5399  086E  1903               	btfsc	3,2
  5400  086F  0008               	return
  5401  0870  285D               	goto	l2664
  5402  0871                     __end_of_strcat:	
  5403                           
  5404                           	psect	text15
  5405  0F12                     __ptext15:	
  5406 ;; *************** function _sprintf *****************
  5407 ;; Defined at:
  5408 ;;		line 500 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;  sp              1    wreg     PTR unsigned char 
  5411 ;;		 -> get_temp@decimal(3), temp(6), 
  5412 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  5413 ;;		 -> STR_34(4), STR_33(5), STR_32(3), 
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;  sp              1   22[BANK0 ] PTR unsigned char 
  5416 ;;		 -> get_temp@decimal(3), temp(6), 
  5417 ;;  tmpval          4    0        struct .
  5418 ;;  val             2   20[BANK0 ] unsigned int 
  5419 ;;  cp              2    0        PTR const unsigned char 
  5420 ;;  len             2    0        unsigned int 
  5421 ;;  c               1   23[BANK0 ] unsigned char 
  5422 ;;  prec            1   19[BANK0 ] char 
  5423 ;;  flag            1   18[BANK0 ] unsigned char 
  5424 ;;  ap              1   17[BANK0 ] PTR void [1]
  5425 ;;		 -> ?_sprintf(2), 
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  2    9[BANK0 ] int 
  5428 ;; Registers used:
  5429 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5435 ;;      Params:         0       4       0       0       0
  5436 ;;      Locals:         0       7       0       0       0
  5437 ;;      Temps:          0       4       0       0       0
  5438 ;;      Totals:         0      15       0       0       0
  5439 ;;Total ram usage:       15 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; Hardware stack levels required when called:    2
  5442 ;; This function calls:
  5443 ;;		___lwdiv
  5444 ;;		___lwmod
  5445 ;; This function is called by:
  5446 ;;		_get_temp
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           
  5451                           ;psect for function _sprintf
  5452  0F12                     _sprintf:	
  5453                           
  5454                           ;incstack = 0
  5455                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5456                           ;sprintf@sp stored from wreg
  5457  0F12  1283               	bcf	3,5	;RP0=0, select bank0
  5458  0F13  1303               	bcf	3,6	;RP1=0, select bank0
  5459  0F14  00DD               	movwf	sprintf@sp
  5460                           
  5461                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;D:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  5462  0F15  3052               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5463  0F16  00D4               	movwf	??_sprintf
  5464  0F17  0854               	movf	??_sprintf,w
  5465  0F18  00D8               	movwf	sprintf@ap
  5466  0F19                     l3748:	
  5467                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5468                           
  5469                           
  5470                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5471  0F19  0851               	movf	sprintf@f+1,w
  5472  0F1A  00D5               	movwf	??_sprintf+1
  5473  0F1B  0850               	movf	sprintf@f,w
  5474  0F1C  00D4               	movwf	??_sprintf
  5475  0F1D  0AD0               	incf	sprintf@f,f
  5476  0F1E  1903               	skipnz
  5477  0F1F  0AD1               	incf	sprintf@f+1,f
  5478  0F20  0855               	movf	??_sprintf+1,w
  5479  0F21  00FF               	movwf	127
  5480  0F22  0854               	movf	??_sprintf,w
  5481  0F23  0084               	movwf	4
  5482  0F24  120A  118A  2700  120A  158A  	fcall	stringtab
  5483  0F29  00D6               	movwf	??_sprintf+2
  5484  0F2A  0856               	movf	??_sprintf+2,w
  5485  0F2B  00DE               	movwf	sprintf@c
  5486  0F2C  085E               	movf	sprintf@c,w
  5487  0F2D  1903               	btfsc	3,2
  5488  0F2E  2FFB               	goto	l3750
  5489                           
  5490                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  5491  0F2F  3025               	movlw	37
  5492  0F30  065E               	xorwf	sprintf@c,w
  5493  0F31  1903               	btfsc	3,2
  5494  0F32  2F3F               	goto	l3704
  5495                           
  5496                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;D:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  5497  0F33  085E               	movf	sprintf@c,w
  5498  0F34  00D4               	movwf	??_sprintf
  5499  0F35  085D               	movf	sprintf@sp,w
  5500  0F36  0084               	movwf	4
  5501  0F37  0854               	movf	??_sprintf,w
  5502  0F38  1383               	bcf	3,7	;select IRP bank0
  5503  0F39  0080               	movwf	0
  5504  0F3A  3001               	movlw	1
  5505  0F3B  00D4               	movwf	??_sprintf
  5506  0F3C  0854               	movf	??_sprintf,w
  5507  0F3D  07DD               	addwf	sprintf@sp,f
  5508                           
  5509                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  5510  0F3E  2F19               	goto	l3748
  5511  0F3F                     l3704:	
  5512                           
  5513                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  5514  0F3F  01D9               	clrf	sprintf@flag
  5515                           
  5516                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  5517  0F40  0851               	movf	sprintf@f+1,w
  5518  0F41  00D5               	movwf	??_sprintf+1
  5519  0F42  0850               	movf	sprintf@f,w
  5520  0F43  00D4               	movwf	??_sprintf
  5521  0F44  0AD0               	incf	sprintf@f,f
  5522  0F45  1903               	skipnz
  5523  0F46  0AD1               	incf	sprintf@f+1,f
  5524  0F47  0855               	movf	??_sprintf+1,w
  5525  0F48  00FF               	movwf	127
  5526  0F49  0854               	movf	??_sprintf,w
  5527  0F4A  0084               	movwf	4
  5528  0F4B  120A  118A  2700  120A  158A  	fcall	stringtab
  5529  0F50  00DE               	movwf	sprintf@c
  5530  0F51  00D6               	movwf	??_sprintf+2
  5531  0F52  01D7               	clrf	??_sprintf+3
  5532                           
  5533                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5534                           ; Switch size 1, requested type "simple"
  5535                           ; Number of cases is 1, Range of values is 0 to 0
  5536                           ; switch strategies available:
  5537                           ; Name         Instructions Cycles
  5538                           ; simple_byte            4     3 (average)
  5539                           ; direct_byte           11     8 (fixed)
  5540                           ; jumptable            260     6 (fixed)
  5541                           ;	Chosen strategy is simple_byte
  5542  0F53  0857               	movf	??_sprintf+3,w
  5543  0F54  3A00               	xorlw	0	; case 0
  5544  0F55  1903               	skipnz
  5545  0F56  2F58               	goto	l4520
  5546  0F57  2F19               	goto	l3748
  5547  0F58                     l4520:	
  5548                           
  5549                           ; Switch size 1, requested type "simple"
  5550                           ; Number of cases is 3, Range of values is 0 to 105
  5551                           ; switch strategies available:
  5552                           ; Name         Instructions Cycles
  5553                           ; simple_byte           10     6 (average)
  5554                           ; jumptable            260     6 (fixed)
  5555                           ;	Chosen strategy is simple_byte
  5556  0F58  0856               	movf	??_sprintf+2,w
  5557  0F59  3A00               	xorlw	0	; case 0
  5558  0F5A  1903               	skipnz
  5559  0F5B  2FFB               	goto	l3750
  5560  0F5C  3A64               	xorlw	100	; case 100
  5561  0F5D  1903               	skipnz
  5562  0F5E  2F63               	goto	l3710
  5563  0F5F  3A0D               	xorlw	13	; case 105
  5564  0F60  1903               	skipnz
  5565  0F61  2F63               	goto	l3710
  5566  0F62  2F19               	goto	l3748
  5567  0F63                     l3710:	
  5568                           
  5569                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5570  0F63  0858               	movf	sprintf@ap,w
  5571  0F64  0084               	movwf	4
  5572  0F65  1383               	bcf	3,7	;select IRP bank0
  5573  0F66  0800               	movf	0,w
  5574  0F67  00DB               	movwf	sprintf@val
  5575  0F68  0A84               	incf	4,f
  5576  0F69  0800               	movf	0,w
  5577  0F6A  00DC               	movwf	sprintf@val+1
  5578  0F6B  3002               	movlw	2
  5579  0F6C  00D4               	movwf	??_sprintf
  5580  0F6D  0854               	movf	??_sprintf,w
  5581  0F6E  07D8               	addwf	sprintf@ap,f
  5582                           
  5583                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  5584  0F6F  1FDC               	btfss	sprintf@val+1,7
  5585  0F70  2F7A               	goto	l3720
  5586                           
  5587                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  5588  0F71  3003               	movlw	3
  5589  0F72  00D4               	movwf	??_sprintf
  5590  0F73  0854               	movf	??_sprintf,w
  5591  0F74  04D9               	iorwf	sprintf@flag,f
  5592                           
  5593                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  5594  0F75  09DB               	comf	sprintf@val,f
  5595  0F76  09DC               	comf	sprintf@val+1,f
  5596  0F77  0ADB               	incf	sprintf@val,f
  5597  0F78  1903               	skipnz
  5598  0F79  0ADC               	incf	sprintf@val+1,f
  5599  0F7A                     l3720:	
  5600                           
  5601                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5602  0F7A  01DE               	clrf	sprintf@c
  5603  0F7B  0ADE               	incf	sprintf@c,f
  5604  0F7C                     l3726:	
  5605                           
  5606                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  5607  0F7C  085E               	movf	sprintf@c,w
  5608  0F7D  00D4               	movwf	??_sprintf
  5609  0F7E  0754               	addwf	??_sprintf,w
  5610  0F7F  3E12               	addlw	low (_dpowers| (0+32768))
  5611  0F80  0084               	movwf	4
  5612  0F81  3087               	movlw	high (_dpowers| (0+32768))
  5613  0F82  1803               	skipnc
  5614  0F83  3E01               	addlw	1
  5615  0F84  00FF               	movwf	127
  5616  0F85  120A  118A  2700  120A  158A  	fcall	stringtab
  5617  0F8A  00D5               	movwf	??_sprintf+1
  5618  0F8B  120A  118A  2700  120A  158A  	fcall	stringtab
  5619  0F90  00D6               	movwf	??_sprintf+2
  5620  0F91  0856               	movf	??_sprintf+2,w
  5621  0F92  025C               	subwf	sprintf@val+1,w
  5622  0F93  1D03               	skipz
  5623  0F94  2F97               	goto	u3855
  5624  0F95  0855               	movf	??_sprintf+1,w
  5625  0F96  025B               	subwf	sprintf@val,w
  5626  0F97                     u3855:	
  5627  0F97  1C03               	btfss	3,0
  5628  0F98  2FA1               	goto	l3732
  5629  0F99  3001               	movlw	1
  5630  0F9A  00D4               	movwf	??_sprintf
  5631  0F9B  0854               	movf	??_sprintf,w
  5632  0F9C  07DE               	addwf	sprintf@c,f
  5633  0F9D  3005               	movlw	5
  5634  0F9E  065E               	xorwf	sprintf@c,w
  5635  0F9F  1D03               	btfss	3,2
  5636  0FA0  2F7C               	goto	l3726
  5637  0FA1                     l3732:	
  5638                           
  5639                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  5640  0FA1  0859               	movf	sprintf@flag,w
  5641  0FA2  3903               	andlw	3
  5642  0FA3  1903               	btfsc	3,2
  5643  0FA4  2FB0               	goto	l3738
  5644                           
  5645                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  5646  0FA5  302D               	movlw	45
  5647  0FA6  00D4               	movwf	??_sprintf
  5648  0FA7  085D               	movf	sprintf@sp,w
  5649  0FA8  0084               	movwf	4
  5650  0FA9  0854               	movf	??_sprintf,w
  5651  0FAA  1383               	bcf	3,7	;select IRP bank0
  5652  0FAB  0080               	movwf	0
  5653  0FAC  3001               	movlw	1
  5654  0FAD  00D4               	movwf	??_sprintf
  5655  0FAE  0854               	movf	??_sprintf,w
  5656  0FAF  07DD               	addwf	sprintf@sp,f
  5657  0FB0                     l3738:	
  5658                           
  5659                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  5660  0FB0  085E               	movf	sprintf@c,w
  5661  0FB1  00D4               	movwf	??_sprintf
  5662  0FB2  0854               	movf	??_sprintf,w
  5663  0FB3  00DA               	movwf	sprintf@prec
  5664  0FB4                     l3746:	
  5665                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5666                           
  5667                           
  5668                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5669  0FB4  30FF               	movlw	255
  5670  0FB5  00D4               	movwf	??_sprintf
  5671  0FB6  0854               	movf	??_sprintf,w
  5672  0FB7  07DA               	addwf	sprintf@prec,f
  5673  0FB8  0A5A               	incf	sprintf@prec,w
  5674  0FB9  1903               	btfsc	3,2
  5675  0FBA  2F19               	goto	l3748
  5676                           
  5677                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  5678  0FBB  300A               	movlw	10
  5679  0FBC  00CA               	movwf	___lwmod@divisor
  5680  0FBD  3000               	movlw	0
  5681  0FBE  00CB               	movwf	___lwmod@divisor+1
  5682  0FBF  085A               	movf	sprintf@prec,w
  5683  0FC0  00D4               	movwf	??_sprintf
  5684  0FC1  0754               	addwf	??_sprintf,w
  5685  0FC2  3E12               	addlw	low (_dpowers| (0+32768))
  5686  0FC3  0084               	movwf	4
  5687  0FC4  3087               	movlw	high (_dpowers| (0+32768))
  5688  0FC5  1803               	skipnc
  5689  0FC6  3E01               	addlw	1
  5690  0FC7  00FF               	movwf	127
  5691  0FC8  120A  118A  2700  120A  158A  	fcall	stringtab
  5692  0FCD  00F3               	movwf	___lwdiv@divisor
  5693  0FCE  120A  118A  2700  120A  158A  	fcall	stringtab
  5694  0FD3  00F4               	movwf	___lwdiv@divisor+1
  5695  0FD4  085C               	movf	sprintf@val+1,w
  5696  0FD5  00F6               	movwf	___lwdiv@dividend+1
  5697  0FD6  085B               	movf	sprintf@val,w
  5698  0FD7  00F5               	movwf	___lwdiv@dividend
  5699  0FD8  120A  158A  2150  120A  158A  	fcall	___lwdiv
  5700  0FDD  0874               	movf	?___lwdiv+1,w
  5701  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  5702  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  5703  0FE0  00CD               	movwf	___lwmod@dividend+1
  5704  0FE1  0873               	movf	?___lwdiv,w
  5705  0FE2  00CC               	movwf	___lwmod@dividend
  5706  0FE3  120A  158A  2071  120A  158A  	fcall	___lwmod
  5707  0FE8  1283               	bcf	3,5	;RP0=0, select bank0
  5708  0FE9  1303               	bcf	3,6	;RP1=0, select bank0
  5709  0FEA  084A               	movf	?___lwmod,w
  5710  0FEB  3E30               	addlw	48
  5711  0FEC  00D5               	movwf	??_sprintf+1
  5712  0FED  0855               	movf	??_sprintf+1,w
  5713  0FEE  00DE               	movwf	sprintf@c
  5714                           
  5715                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  5716  0FEF  085E               	movf	sprintf@c,w
  5717  0FF0  00D4               	movwf	??_sprintf
  5718  0FF1  085D               	movf	sprintf@sp,w
  5719  0FF2  0084               	movwf	4
  5720  0FF3  0854               	movf	??_sprintf,w
  5721  0FF4  1383               	bcf	3,7	;select IRP bank0
  5722  0FF5  0080               	movwf	0
  5723  0FF6  3001               	movlw	1
  5724  0FF7  00D4               	movwf	??_sprintf
  5725  0FF8  0854               	movf	??_sprintf,w
  5726  0FF9  07DD               	addwf	sprintf@sp,f
  5727  0FFA  2FB4               	goto	l3746
  5728  0FFB                     l3750:	
  5729                           
  5730                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  5731  0FFB  085D               	movf	sprintf@sp,w
  5732  0FFC  0084               	movwf	4
  5733  0FFD  1383               	bcf	3,7	;select IRP bank0
  5734  0FFE  0180               	clrf	0
  5735  0FFF  0008               	return
  5736  1000                     __end_of_sprintf:	
  5737                           
  5738                           	psect	text16
  5739  0871                     __ptext16:	
  5740 ;; *************** function ___lwmod *****************
  5741 ;; Defined at:
  5742 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  5743 ;; Parameters:    Size  Location     Type
  5744 ;;  divisor         2    3[BANK0 ] unsigned int 
  5745 ;;  dividend        2    5[BANK0 ] unsigned int 
  5746 ;; Auto vars:     Size  Location     Type
  5747 ;;  counter         1    8[BANK0 ] unsigned char 
  5748 ;; Return value:  Size  Location     Type
  5749 ;;                  2    3[BANK0 ] unsigned int 
  5750 ;; Registers used:
  5751 ;;		wreg, status,2, status,0
  5752 ;; Tracked objects:
  5753 ;;		On entry : 0/0
  5754 ;;		On exit  : 0/0
  5755 ;;		Unchanged: 0/0
  5756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5757 ;;      Params:         0       4       0       0       0
  5758 ;;      Locals:         0       1       0       0       0
  5759 ;;      Temps:          0       1       0       0       0
  5760 ;;      Totals:         0       6       0       0       0
  5761 ;;Total ram usage:        6 bytes
  5762 ;; Hardware stack levels used:    1
  5763 ;; Hardware stack levels required when called:    1
  5764 ;; This function calls:
  5765 ;;		Nothing
  5766 ;; This function is called by:
  5767 ;;		_sprintf
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           
  5772                           ;psect for function ___lwmod
  5773  0871                     ___lwmod:	
  5774                           
  5775                           ;incstack = 0
  5776                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5777  0871  1283               	bcf	3,5	;RP0=0, select bank0
  5778  0872  1303               	bcf	3,6	;RP1=0, select bank0
  5779  0873  084A               	movf	___lwmod@divisor,w
  5780  0874  044B               	iorwf	___lwmod@divisor+1,w
  5781  0875  1903               	btfsc	3,2
  5782  0876  28A0               	goto	l2464
  5783  0877  01CF               	clrf	___lwmod@counter
  5784  0878  0ACF               	incf	___lwmod@counter,f
  5785  0879                     l2454:	
  5786  0879  1BCB               	btfsc	___lwmod@divisor+1,7
  5787  087A  2887               	goto	l2456
  5788  087B  3001               	movlw	1
  5789  087C                     u2065:	
  5790  087C  1003               	clrc
  5791  087D  0DCA               	rlf	___lwmod@divisor,f
  5792  087E  0DCB               	rlf	___lwmod@divisor+1,f
  5793  087F  3EFF               	addlw	-1
  5794  0880  1D03               	skipz
  5795  0881  287C               	goto	u2065
  5796  0882  3001               	movlw	1
  5797  0883  00CE               	movwf	??___lwmod
  5798  0884  084E               	movf	??___lwmod,w
  5799  0885  07CF               	addwf	___lwmod@counter,f
  5800  0886  2879               	goto	l2454
  5801  0887                     l2456:	
  5802  0887  084B               	movf	___lwmod@divisor+1,w
  5803  0888  024D               	subwf	___lwmod@dividend+1,w
  5804  0889  1D03               	skipz
  5805  088A  288D               	goto	u2085
  5806  088B  084A               	movf	___lwmod@divisor,w
  5807  088C  024C               	subwf	___lwmod@dividend,w
  5808  088D                     u2085:	
  5809  088D  1C03               	skipc
  5810  088E  2895               	goto	l2460
  5811  088F  084A               	movf	___lwmod@divisor,w
  5812  0890  02CC               	subwf	___lwmod@dividend,f
  5813  0891  084B               	movf	___lwmod@divisor+1,w
  5814  0892  1C03               	skipc
  5815  0893  03CD               	decf	___lwmod@dividend+1,f
  5816  0894  02CD               	subwf	___lwmod@dividend+1,f
  5817  0895                     l2460:	
  5818  0895  3001               	movlw	1
  5819  0896                     u2095:	
  5820  0896  1003               	clrc
  5821  0897  0CCB               	rrf	___lwmod@divisor+1,f
  5822  0898  0CCA               	rrf	___lwmod@divisor,f
  5823  0899  3EFF               	addlw	-1
  5824  089A  1D03               	skipz
  5825  089B  2896               	goto	u2095
  5826  089C  3001               	movlw	1
  5827  089D  02CF               	subwf	___lwmod@counter,f
  5828  089E  1D03               	btfss	3,2
  5829  089F  2887               	goto	l2456
  5830  08A0                     l2464:	
  5831  08A0  084D               	movf	___lwmod@dividend+1,w
  5832  08A1  00CB               	movwf	?___lwmod+1
  5833  08A2  084C               	movf	___lwmod@dividend,w
  5834  08A3  00CA               	movwf	?___lwmod
  5835  08A4  0008               	return
  5836  08A5                     __end_of___lwmod:	
  5837                           
  5838                           	psect	text17
  5839  0950                     __ptext17:	
  5840 ;; *************** function ___lwdiv *****************
  5841 ;; Defined at:
  5842 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  divisor         2    3[COMMON] unsigned int 
  5845 ;;  dividend        2    5[COMMON] unsigned int 
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;  quotient        2    1[BANK0 ] unsigned int 
  5848 ;;  counter         1    0[BANK0 ] unsigned char 
  5849 ;; Return value:  Size  Location     Type
  5850 ;;                  2    3[COMMON] unsigned int 
  5851 ;; Registers used:
  5852 ;;		wreg, status,2, status,0
  5853 ;; Tracked objects:
  5854 ;;		On entry : 0/0
  5855 ;;		On exit  : 0/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5858 ;;      Params:         4       0       0       0       0
  5859 ;;      Locals:         0       3       0       0       0
  5860 ;;      Temps:          1       0       0       0       0
  5861 ;;      Totals:         5       3       0       0       0
  5862 ;;Total ram usage:        8 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; Hardware stack levels required when called:    1
  5865 ;; This function calls:
  5866 ;;		Nothing
  5867 ;; This function is called by:
  5868 ;;		_sprintf
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           
  5873                           ;psect for function ___lwdiv
  5874  0950                     ___lwdiv:	
  5875                           
  5876                           ;incstack = 0
  5877                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5878  0950  1283               	bcf	3,5	;RP0=0, select bank0
  5879  0951  1303               	bcf	3,6	;RP1=0, select bank0
  5880  0952  01C8               	clrf	___lwdiv@quotient
  5881  0953  01C9               	clrf	___lwdiv@quotient+1
  5882  0954  0873               	movf	___lwdiv@divisor,w
  5883  0955  0474               	iorwf	___lwdiv@divisor+1,w
  5884  0956  1903               	btfsc	3,2
  5885  0957  2989               	goto	l3612
  5886  0958  01C7               	clrf	___lwdiv@counter
  5887  0959  0AC7               	incf	___lwdiv@counter,f
  5888  095A                     l3600:	
  5889  095A  1BF4               	btfsc	___lwdiv@divisor+1,7
  5890  095B  2968               	goto	l3602
  5891  095C  3001               	movlw	1
  5892  095D                     u3675:	
  5893  095D  1003               	clrc
  5894  095E  0DF3               	rlf	___lwdiv@divisor,f
  5895  095F  0DF4               	rlf	___lwdiv@divisor+1,f
  5896  0960  3EFF               	addlw	-1
  5897  0961  1D03               	skipz
  5898  0962  295D               	goto	u3675
  5899  0963  3001               	movlw	1
  5900  0964  00F7               	movwf	??___lwdiv
  5901  0965  0877               	movf	??___lwdiv,w
  5902  0966  07C7               	addwf	___lwdiv@counter,f
  5903  0967  295A               	goto	l3600
  5904  0968                     l3602:	
  5905  0968  3001               	movlw	1
  5906  0969                     u3695:	
  5907  0969  1003               	clrc
  5908  096A  0DC8               	rlf	___lwdiv@quotient,f
  5909  096B  0DC9               	rlf	___lwdiv@quotient+1,f
  5910  096C  3EFF               	addlw	-1
  5911  096D  1D03               	skipz
  5912  096E  2969               	goto	u3695
  5913  096F  0874               	movf	___lwdiv@divisor+1,w
  5914  0970  0276               	subwf	___lwdiv@dividend+1,w
  5915  0971  1D03               	skipz
  5916  0972  2975               	goto	u3705
  5917  0973  0873               	movf	___lwdiv@divisor,w
  5918  0974  0275               	subwf	___lwdiv@dividend,w
  5919  0975                     u3705:	
  5920  0975  1C03               	skipc
  5921  0976  297E               	goto	l3608
  5922  0977  0873               	movf	___lwdiv@divisor,w
  5923  0978  02F5               	subwf	___lwdiv@dividend,f
  5924  0979  0874               	movf	___lwdiv@divisor+1,w
  5925  097A  1C03               	skipc
  5926  097B  03F6               	decf	___lwdiv@dividend+1,f
  5927  097C  02F6               	subwf	___lwdiv@dividend+1,f
  5928  097D  1448               	bsf	___lwdiv@quotient,0
  5929  097E                     l3608:	
  5930  097E  3001               	movlw	1
  5931  097F                     u3715:	
  5932  097F  1003               	clrc
  5933  0980  0CF4               	rrf	___lwdiv@divisor+1,f
  5934  0981  0CF3               	rrf	___lwdiv@divisor,f
  5935  0982  3EFF               	addlw	-1
  5936  0983  1D03               	skipz
  5937  0984  297F               	goto	u3715
  5938  0985  3001               	movlw	1
  5939  0986  02C7               	subwf	___lwdiv@counter,f
  5940  0987  1D03               	btfss	3,2
  5941  0988  2968               	goto	l3602
  5942  0989                     l3612:	
  5943  0989  0849               	movf	___lwdiv@quotient+1,w
  5944  098A  00F4               	movwf	?___lwdiv+1
  5945  098B  0848               	movf	___lwdiv@quotient,w
  5946  098C  00F3               	movwf	?___lwdiv
  5947  098D  0008               	return
  5948  098E                     __end_of___lwdiv:	
  5949                           
  5950                           	psect	text18
  5951  1697                     __ptext18:	
  5952 ;; *************** function ___bmul *****************
  5953 ;; Defined at:
  5954 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;  multiplier      1    wreg     unsigned char 
  5957 ;;  multiplicand    1    3[COMMON] unsigned char 
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;  multiplier      1    6[COMMON] unsigned char 
  5960 ;;  product         1    5[COMMON] unsigned char 
  5961 ;; Return value:  Size  Location     Type
  5962 ;;                  1    wreg      unsigned char 
  5963 ;; Registers used:
  5964 ;;		wreg, status,2, status,0
  5965 ;; Tracked objects:
  5966 ;;		On entry : 0/0
  5967 ;;		On exit  : 0/0
  5968 ;;		Unchanged: 0/0
  5969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5970 ;;      Params:         1       0       0       0       0
  5971 ;;      Locals:         2       0       0       0       0
  5972 ;;      Temps:          1       0       0       0       0
  5973 ;;      Totals:         4       0       0       0       0
  5974 ;;Total ram usage:        4 bytes
  5975 ;; Hardware stack levels used:    1
  5976 ;; Hardware stack levels required when called:    1
  5977 ;; This function calls:
  5978 ;;		Nothing
  5979 ;; This function is called by:
  5980 ;;		_main
  5981 ;;		_get_temp
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           
  5986                           ;psect for function ___bmul
  5987  1697                     ___bmul:	
  5988                           
  5989                           ;incstack = 0
  5990                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5991                           ;___bmul@multiplier stored from wreg
  5992  1697  00F6               	movwf	___bmul@multiplier
  5993  1698  01F5               	clrf	___bmul@product
  5994  1699                     l2670:	
  5995  1699  1C76               	btfss	___bmul@multiplier,0
  5996  169A  2E9F               	goto	l2674
  5997  169B  0873               	movf	___bmul@multiplicand,w
  5998  169C  00F4               	movwf	??___bmul
  5999  169D  0874               	movf	??___bmul,w
  6000  169E  07F5               	addwf	___bmul@product,f
  6001  169F                     l2674:	
  6002  169F  1003               	clrc
  6003  16A0  0DF3               	rlf	___bmul@multiplicand,f
  6004  16A1  1003               	clrc
  6005  16A2  0CF6               	rrf	___bmul@multiplier,f
  6006  16A3  0876               	movf	___bmul@multiplier,w
  6007  16A4  1D03               	btfss	3,2
  6008  16A5  2E99               	goto	l2670
  6009  16A6  0875               	movf	___bmul@product,w
  6010  16A7  0008               	return
  6011  16A8                     __end_of___bmul:	
  6012                           
  6013                           	psect	text19
  6014  175C                     __ptext19:	
  6015 ;; *************** function _get_hall *****************
  6016 ;; Defined at:
  6017 ;;		line 574 in file "mainMaster.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;		None
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;  key             1    2[BANK0 ] unsigned char 
  6022 ;; Return value:  Size  Location     Type
  6023 ;;                  1    wreg      unsigned char 
  6024 ;; Registers used:
  6025 ;;		wreg, status,2, status,0, pclath, cstack
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6031 ;;      Params:         0       0       0       0       0
  6032 ;;      Locals:         0       1       0       0       0
  6033 ;;      Temps:          1       0       0       0       0
  6034 ;;      Totals:         1       1       0       0       0
  6035 ;;Total ram usage:        2 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:    3
  6038 ;; This function calls:
  6039 ;;		_I2C_Master_Read
  6040 ;;		_I2C_Master_Start
  6041 ;;		_I2C_Master_Stop
  6042 ;;		_I2C_Master_Write
  6043 ;; This function is called by:
  6044 ;;		_main
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           
  6049                           ;psect for function _get_hall
  6050  175C                     _get_hall:	
  6051                           
  6052                           ;mainMaster.c: 576:     char key;;mainMaster.c: 578:     I2C_Master_Start();
  6053                           
  6054                           ;incstack = 0
  6055                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  6056  175C  160A  118A  2647  160A  118A  	fcall	_I2C_Master_Start
  6057                           
  6058                           ;mainMaster.c: 579:     I2C_Master_Write(0x11);
  6059  1761  3011               	movlw	17
  6060  1762  00F3               	movwf	I2C_Master_Write@d
  6061  1763  3000               	movlw	0
  6062  1764  00F4               	movwf	I2C_Master_Write@d+1
  6063  1765  160A  118A  265C  160A  118A  	fcall	_I2C_Master_Write
  6064                           
  6065                           ;mainMaster.c: 580:     key = I2C_Master_Read(0);
  6066  176A  3000               	movlw	0
  6067  176B  00F3               	movwf	I2C_Master_Read@a
  6068  176C  00F4               	movwf	I2C_Master_Read@a+1
  6069  176D  160A  118A  27A2  160A  118A  	fcall	_I2C_Master_Read
  6070  1772  0873               	movf	?_I2C_Master_Read,w
  6071  1773  00F7               	movwf	??_get_hall
  6072  1774  0877               	movf	??_get_hall,w
  6073  1775  1283               	bcf	3,5	;RP0=0, select bank0
  6074  1776  1303               	bcf	3,6	;RP1=0, select bank0
  6075  1777  00C9               	movwf	get_hall@key
  6076                           
  6077                           ;mainMaster.c: 581:     I2C_Master_Stop();
  6078  1778  160A  118A  264E   	fcall	_I2C_Master_Stop
  6079                           
  6080                           ;mainMaster.c: 583:     return (key);
  6081  177B  1283               	bcf	3,5	;RP0=0, select bank0
  6082  177C  1303               	bcf	3,6	;RP1=0, select bank0
  6083  177D  0849               	movf	get_hall@key,w
  6084  177E  0008               	return
  6085  177F                     __end_of_get_hall:	
  6086                           
  6087                           	psect	text20
  6088  0916                     __ptext20:	
  6089 ;; *************** function _get_day *****************
  6090 ;; Defined at:
  6091 ;;		line 532 in file "mainMaster.c"
  6092 ;; Parameters:    Size  Location     Type
  6093 ;;		None
  6094 ;; Auto vars:     Size  Location     Type
  6095 ;;  d               1    2[BANK0 ] unsigned char 
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  1    wreg      unsigned char 
  6098 ;; Registers used:
  6099 ;;		wreg, status,2, status,0, pclath, cstack
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6105 ;;      Params:         0       0       0       0       0
  6106 ;;      Locals:         0       1       0       0       0
  6107 ;;      Temps:          1       0       0       0       0
  6108 ;;      Totals:         1       1       0       0       0
  6109 ;;Total ram usage:        2 bytes
  6110 ;; Hardware stack levels used:    1
  6111 ;; Hardware stack levels required when called:    3
  6112 ;; This function calls:
  6113 ;;		_I2C_Master_Read
  6114 ;;		_I2C_Master_RepeatedStart
  6115 ;;		_I2C_Master_Start
  6116 ;;		_I2C_Master_Stop
  6117 ;;		_I2C_Master_Write
  6118 ;; This function is called by:
  6119 ;;		_main
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           
  6124                           ;psect for function _get_day
  6125  0916                     _get_day:	
  6126                           
  6127                           ;mainMaster.c: 534:     char d;;mainMaster.c: 536:     I2C_Master_Start();
  6128                           
  6129                           ;incstack = 0
  6130                           ; Regs used in _get_day: [wreg+status,2+status,0+pclath+cstack]
  6131  0916  160A  118A  2647  120A  158A  	fcall	_I2C_Master_Start
  6132                           
  6133                           ;mainMaster.c: 537:     I2C_Master_Write(0xD0);
  6134  091B  30D0               	movlw	208
  6135  091C  00F3               	movwf	I2C_Master_Write@d
  6136  091D  3000               	movlw	0
  6137  091E  00F4               	movwf	I2C_Master_Write@d+1
  6138  091F  160A  118A  265C  120A  158A  	fcall	_I2C_Master_Write
  6139                           
  6140                           ;mainMaster.c: 538:     I2C_Master_Write(0x03);
  6141  0924  3003               	movlw	3
  6142  0925  00F3               	movwf	I2C_Master_Write@d
  6143  0926  3000               	movlw	0
  6144  0927  00F4               	movwf	I2C_Master_Write@d+1
  6145  0928  160A  118A  265C  120A  158A  	fcall	_I2C_Master_Write
  6146                           
  6147                           ;mainMaster.c: 539:     I2C_Master_RepeatedStart();
  6148  092D  160A  118A  2655  120A  158A  	fcall	_I2C_Master_RepeatedStart
  6149                           
  6150                           ;mainMaster.c: 540:     I2C_Master_Write(0xD1);
  6151  0932  30D1               	movlw	209
  6152  0933  00F3               	movwf	I2C_Master_Write@d
  6153  0934  3000               	movlw	0
  6154  0935  00F4               	movwf	I2C_Master_Write@d+1
  6155  0936  160A  118A  265C  120A  158A  	fcall	_I2C_Master_Write
  6156                           
  6157                           ;mainMaster.c: 541:     d = I2C_Master_Read(0);
  6158  093B  3000               	movlw	0
  6159  093C  00F3               	movwf	I2C_Master_Read@a
  6160  093D  00F4               	movwf	I2C_Master_Read@a+1
  6161  093E  160A  118A  27A2  120A  158A  	fcall	_I2C_Master_Read
  6162  0943  0873               	movf	?_I2C_Master_Read,w
  6163  0944  00F7               	movwf	??_get_day
  6164  0945  0877               	movf	??_get_day,w
  6165  0946  1283               	bcf	3,5	;RP0=0, select bank0
  6166  0947  1303               	bcf	3,6	;RP1=0, select bank0
  6167  0948  00C9               	movwf	get_day@d
  6168                           
  6169                           ;mainMaster.c: 542:     I2C_Master_Stop();
  6170  0949  160A  118A  264E   	fcall	_I2C_Master_Stop
  6171                           
  6172                           ;mainMaster.c: 544:     return d;
  6173  094C  1283               	bcf	3,5	;RP0=0, select bank0
  6174  094D  1303               	bcf	3,6	;RP1=0, select bank0
  6175  094E  0849               	movf	get_day@d,w
  6176  094F  0008               	return
  6177  0950                     __end_of_get_day:	
  6178                           
  6179                           	psect	text21
  6180  1655                     __ptext21:	
  6181 ;; *************** function _I2C_Master_RepeatedStart *****************
  6182 ;; Defined at:
  6183 ;;		line 47 in file "./I2C.h"
  6184 ;; Parameters:    Size  Location     Type
  6185 ;;		None
  6186 ;; Auto vars:     Size  Location     Type
  6187 ;;		None
  6188 ;; Return value:  Size  Location     Type
  6189 ;;                  1    wreg      void 
  6190 ;; Registers used:
  6191 ;;		wreg, status,2, status,0, pclath, cstack
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6197 ;;      Params:         0       0       0       0       0
  6198 ;;      Locals:         0       0       0       0       0
  6199 ;;      Temps:          0       0       0       0       0
  6200 ;;      Totals:         0       0       0       0       0
  6201 ;;Total ram usage:        0 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; Hardware stack levels required when called:    2
  6204 ;; This function calls:
  6205 ;;		_I2C_Master_Wait
  6206 ;; This function is called by:
  6207 ;;		_get_time
  6208 ;;		_get_day
  6209 ;;		_get_temp
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           
  6214                           ;psect for function _I2C_Master_RepeatedStart
  6215  1655                     _I2C_Master_RepeatedStart:	
  6216                           
  6217                           ;./I2C.h: 49:     I2C_Master_Wait();
  6218                           
  6219                           ;incstack = 0
  6220                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  6221  1655  120A  158A  2044   	fcall	_I2C_Master_Wait
  6222                           
  6223                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  6224  1658  1683               	bsf	3,5	;RP0=1, select bank1
  6225  1659  1303               	bcf	3,6	;RP1=0, select bank1
  6226  165A  1491               	bsf	17,1	;volatile
  6227  165B  0008               	return
  6228  165C                     __end_of_I2C_Master_RepeatedStart:	
  6229                           
  6230                           	psect	text22
  6231  1739                     __ptext22:	
  6232 ;; *************** function _get_PIR *****************
  6233 ;; Defined at:
  6234 ;;		line 598 in file "mainMaster.c"
  6235 ;; Parameters:    Size  Location     Type
  6236 ;;		None
  6237 ;; Auto vars:     Size  Location     Type
  6238 ;;  PIR             1    2[BANK0 ] unsigned char 
  6239 ;; Return value:  Size  Location     Type
  6240 ;;                  1    wreg      unsigned char 
  6241 ;; Registers used:
  6242 ;;		wreg, status,2, status,0, pclath, cstack
  6243 ;; Tracked objects:
  6244 ;;		On entry : 0/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6248 ;;      Params:         0       0       0       0       0
  6249 ;;      Locals:         0       1       0       0       0
  6250 ;;      Temps:          1       0       0       0       0
  6251 ;;      Totals:         1       1       0       0       0
  6252 ;;Total ram usage:        2 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    3
  6255 ;; This function calls:
  6256 ;;		_I2C_Master_Read
  6257 ;;		_I2C_Master_Start
  6258 ;;		_I2C_Master_Stop
  6259 ;;		_I2C_Master_Write
  6260 ;; This function is called by:
  6261 ;;		_main
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           
  6266                           ;psect for function _get_PIR
  6267  1739                     _get_PIR:	
  6268                           
  6269                           ;mainMaster.c: 600:     char PIR;;mainMaster.c: 602:     I2C_Master_Start();
  6270                           
  6271                           ;incstack = 0
  6272                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  6273  1739  160A  118A  2647  160A  118A  	fcall	_I2C_Master_Start
  6274                           
  6275                           ;mainMaster.c: 603:     I2C_Master_Write(0x41);
  6276  173E  3041               	movlw	65
  6277  173F  00F3               	movwf	I2C_Master_Write@d
  6278  1740  3000               	movlw	0
  6279  1741  00F4               	movwf	I2C_Master_Write@d+1
  6280  1742  160A  118A  265C  160A  118A  	fcall	_I2C_Master_Write
  6281                           
  6282                           ;mainMaster.c: 604:     PIR = I2C_Master_Read(0);
  6283  1747  3000               	movlw	0
  6284  1748  00F3               	movwf	I2C_Master_Read@a
  6285  1749  00F4               	movwf	I2C_Master_Read@a+1
  6286  174A  160A  118A  27A2  160A  118A  	fcall	_I2C_Master_Read
  6287  174F  0873               	movf	?_I2C_Master_Read,w
  6288  1750  00F7               	movwf	??_get_PIR
  6289  1751  0877               	movf	??_get_PIR,w
  6290  1752  1283               	bcf	3,5	;RP0=0, select bank0
  6291  1753  1303               	bcf	3,6	;RP1=0, select bank0
  6292  1754  00C9               	movwf	get_PIR@PIR
  6293                           
  6294                           ;mainMaster.c: 605:     I2C_Master_Stop();
  6295  1755  160A  118A  264E   	fcall	_I2C_Master_Stop
  6296                           
  6297                           ;mainMaster.c: 607:     return (PIR);
  6298  1758  1283               	bcf	3,5	;RP0=0, select bank0
  6299  1759  1303               	bcf	3,6	;RP1=0, select bank0
  6300  175A  0849               	movf	get_PIR@PIR,w
  6301  175B  0008               	return
  6302  175C                     __end_of_get_PIR:	
  6303                           
  6304                           	psect	text23
  6305  1716                     __ptext23:	
  6306 ;; *************** function _get_IR *****************
  6307 ;; Defined at:
  6308 ;;		line 610 in file "mainMaster.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;		None
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;  IR              1    2[BANK0 ] unsigned char 
  6313 ;; Return value:  Size  Location     Type
  6314 ;;                  1    wreg      unsigned char 
  6315 ;; Registers used:
  6316 ;;		wreg, status,2, status,0, pclath, cstack
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6322 ;;      Params:         0       0       0       0       0
  6323 ;;      Locals:         0       1       0       0       0
  6324 ;;      Temps:          1       0       0       0       0
  6325 ;;      Totals:         1       1       0       0       0
  6326 ;;Total ram usage:        2 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; Hardware stack levels required when called:    3
  6329 ;; This function calls:
  6330 ;;		_I2C_Master_Read
  6331 ;;		_I2C_Master_Start
  6332 ;;		_I2C_Master_Stop
  6333 ;;		_I2C_Master_Write
  6334 ;; This function is called by:
  6335 ;;		_main
  6336 ;; This function uses a non-reentrant model
  6337 ;;
  6338                           
  6339                           
  6340                           ;psect for function _get_IR
  6341  1716                     _get_IR:	
  6342                           
  6343                           ;mainMaster.c: 612:     char IR;;mainMaster.c: 614:     I2C_Master_Start();
  6344                           
  6345                           ;incstack = 0
  6346                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  6347  1716  160A  118A  2647  160A  118A  	fcall	_I2C_Master_Start
  6348                           
  6349                           ;mainMaster.c: 615:     I2C_Master_Write(0x31);
  6350  171B  3031               	movlw	49
  6351  171C  00F3               	movwf	I2C_Master_Write@d
  6352  171D  3000               	movlw	0
  6353  171E  00F4               	movwf	I2C_Master_Write@d+1
  6354  171F  160A  118A  265C  160A  118A  	fcall	_I2C_Master_Write
  6355                           
  6356                           ;mainMaster.c: 616:     IR = I2C_Master_Read(0);
  6357  1724  3000               	movlw	0
  6358  1725  00F3               	movwf	I2C_Master_Read@a
  6359  1726  00F4               	movwf	I2C_Master_Read@a+1
  6360  1727  160A  118A  27A2  160A  118A  	fcall	_I2C_Master_Read
  6361  172C  0873               	movf	?_I2C_Master_Read,w
  6362  172D  00F7               	movwf	??_get_IR
  6363  172E  0877               	movf	??_get_IR,w
  6364  172F  1283               	bcf	3,5	;RP0=0, select bank0
  6365  1730  1303               	bcf	3,6	;RP1=0, select bank0
  6366  1731  00C9               	movwf	get_IR@IR
  6367                           
  6368                           ;mainMaster.c: 617:     I2C_Master_Stop();
  6369  1732  160A  118A  264E   	fcall	_I2C_Master_Stop
  6370                           
  6371                           ;mainMaster.c: 619:     return (IR);
  6372  1735  1283               	bcf	3,5	;RP0=0, select bank0
  6373  1736  1303               	bcf	3,6	;RP1=0, select bank0
  6374  1737  0849               	movf	get_IR@IR,w
  6375  1738  0008               	return
  6376  1739                     __end_of_get_IR:	
  6377                           
  6378                           	psect	text24
  6379  17A2                     __ptext24:	
  6380 ;; *************** function _I2C_Master_Read *****************
  6381 ;; Defined at:
  6382 ;;		line 74 in file "./I2C.h"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;  a               2    3[COMMON] unsigned short 
  6385 ;; Auto vars:     Size  Location     Type
  6386 ;;  temp            2    0[BANK0 ] unsigned short 
  6387 ;; Return value:  Size  Location     Type
  6388 ;;                  2    3[COMMON] unsigned short 
  6389 ;; Registers used:
  6390 ;;		wreg, status,2, status,0, pclath, cstack
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6396 ;;      Params:         2       0       0       0       0
  6397 ;;      Locals:         0       2       0       0       0
  6398 ;;      Temps:          2       0       0       0       0
  6399 ;;      Totals:         4       2       0       0       0
  6400 ;;Total ram usage:        6 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; Hardware stack levels required when called:    2
  6403 ;; This function calls:
  6404 ;;		_I2C_Master_Wait
  6405 ;; This function is called by:
  6406 ;;		_get_time
  6407 ;;		_get_day
  6408 ;;		_get_temp
  6409 ;;		_get_hall
  6410 ;;		_get_tripwire
  6411 ;;		_get_PIR
  6412 ;;		_get_IR
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           
  6417                           ;psect for function _I2C_Master_Read
  6418  17A2                     _I2C_Master_Read:	
  6419                           
  6420                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  6421                           
  6422                           ;incstack = 0
  6423                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  6424  17A2  120A  158A  2044  160A  118A  	fcall	_I2C_Master_Wait
  6425                           
  6426                           ;./I2C.h: 78:     RCEN = 1;
  6427  17A7  1683               	bsf	3,5	;RP0=1, select bank1
  6428  17A8  1303               	bcf	3,6	;RP1=0, select bank1
  6429  17A9  1591               	bsf	17,3	;volatile
  6430                           
  6431                           ;./I2C.h: 79:     I2C_Master_Wait();
  6432  17AA  120A  158A  2044  160A  118A  	fcall	_I2C_Master_Wait
  6433                           
  6434                           ;./I2C.h: 80:     temp = SSPBUF;
  6435  17AF  1283               	bcf	3,5	;RP0=0, select bank0
  6436  17B0  1303               	bcf	3,6	;RP1=0, select bank0
  6437  17B1  0813               	movf	19,w	;volatile
  6438  17B2  00F5               	movwf	??_I2C_Master_Read
  6439  17B3  01F6               	clrf	??_I2C_Master_Read+1
  6440  17B4  0875               	movf	??_I2C_Master_Read,w
  6441  17B5  00C7               	movwf	I2C_Master_Read@temp
  6442  17B6  0876               	movf	??_I2C_Master_Read+1,w
  6443  17B7  00C8               	movwf	I2C_Master_Read@temp+1
  6444                           
  6445                           ;./I2C.h: 81:     I2C_Master_Wait();
  6446  17B8  120A  158A  2044  160A  118A  	fcall	_I2C_Master_Wait
  6447                           
  6448                           ;./I2C.h: 83:     if(a == 1){
  6449  17BD  0373               	decf	I2C_Master_Read@a,w
  6450  17BE  0474               	iorwf	I2C_Master_Read@a+1,w
  6451  17BF  1D03               	btfss	3,2
  6452  17C0  2FC5               	goto	l152
  6453                           
  6454                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  6455  17C1  1683               	bsf	3,5	;RP0=1, select bank1
  6456  17C2  1303               	bcf	3,6	;RP1=0, select bank1
  6457  17C3  1291               	bcf	17,5	;volatile
  6458                           
  6459                           ;./I2C.h: 85:     }else{
  6460  17C4  2FC8               	goto	l153
  6461  17C5                     l152:	
  6462                           
  6463                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  6464  17C5  1683               	bsf	3,5	;RP0=1, select bank1
  6465  17C6  1303               	bcf	3,6	;RP1=0, select bank1
  6466  17C7  1691               	bsf	17,5	;volatile
  6467  17C8                     l153:	
  6468                           ;./I2C.h: 87:     }
  6469                           
  6470                           
  6471                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  6472  17C8  1611               	bsf	17,4	;volatile
  6473                           
  6474                           ;./I2C.h: 89:     return temp;
  6475  17C9  1283               	bcf	3,5	;RP0=0, select bank0
  6476  17CA  1303               	bcf	3,6	;RP1=0, select bank0
  6477  17CB  0848               	movf	I2C_Master_Read@temp+1,w
  6478  17CC  00F4               	movwf	?_I2C_Master_Read+1
  6479  17CD  0847               	movf	I2C_Master_Read@temp,w
  6480  17CE  00F3               	movwf	?_I2C_Master_Read
  6481  17CF  0008               	return
  6482  17D0                     __end_of_I2C_Master_Read:	
  6483                           
  6484                           	psect	text25
  6485  16DC                     __ptext25:	
  6486 ;; *************** function _close_door *****************
  6487 ;; Defined at:
  6488 ;;		line 631 in file "mainMaster.c"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;		None
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;		None
  6493 ;; Return value:  Size  Location     Type
  6494 ;;                  1    wreg      void 
  6495 ;; Registers used:
  6496 ;;		wreg, status,2, status,0, pclath, cstack
  6497 ;; Tracked objects:
  6498 ;;		On entry : 0/0
  6499 ;;		On exit  : 0/0
  6500 ;;		Unchanged: 0/0
  6501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6502 ;;      Params:         0       0       0       0       0
  6503 ;;      Locals:         0       0       0       0       0
  6504 ;;      Temps:          0       0       0       0       0
  6505 ;;      Totals:         0       0       0       0       0
  6506 ;;Total ram usage:        0 bytes
  6507 ;; Hardware stack levels used:    1
  6508 ;; Hardware stack levels required when called:    3
  6509 ;; This function calls:
  6510 ;;		_I2C_Master_Start
  6511 ;;		_I2C_Master_Stop
  6512 ;;		_I2C_Master_Write
  6513 ;; This function is called by:
  6514 ;;		_main
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518                           
  6519                           ;psect for function _close_door
  6520  16DC                     _close_door:	
  6521                           
  6522                           ;mainMaster.c: 633:     I2C_Master_Start();
  6523                           
  6524                           ;incstack = 0
  6525                           ; Regs used in _close_door: [wreg+status,2+status,0+pclath+cstack]
  6526  16DC  160A  118A  2647  160A  118A  	fcall	_I2C_Master_Start
  6527                           
  6528                           ;mainMaster.c: 634:     I2C_Master_Write(0x20);
  6529  16E1  3020               	movlw	32
  6530  16E2  00F3               	movwf	I2C_Master_Write@d
  6531  16E3  3000               	movlw	0
  6532  16E4  00F4               	movwf	I2C_Master_Write@d+1
  6533  16E5  160A  118A  265C  160A  118A  	fcall	_I2C_Master_Write
  6534                           
  6535                           ;mainMaster.c: 635:     I2C_Master_Write(0xF0);
  6536  16EA  30F0               	movlw	240
  6537  16EB  00F3               	movwf	I2C_Master_Write@d
  6538  16EC  3000               	movlw	0
  6539  16ED  00F4               	movwf	I2C_Master_Write@d+1
  6540  16EE  160A  118A  265C  160A  118A  	fcall	_I2C_Master_Write
  6541                           
  6542                           ;mainMaster.c: 636:     I2C_Master_Stop();
  6543  16F3  160A  118A  264E   	fcall	_I2C_Master_Stop
  6544  16F6  0008               	return
  6545  16F7                     __end_of_close_door:	
  6546                           
  6547                           	psect	text26
  6548  165C                     __ptext26:	
  6549 ;; *************** function _I2C_Master_Write *****************
  6550 ;; Defined at:
  6551 ;;		line 65 in file "./I2C.h"
  6552 ;; Parameters:    Size  Location     Type
  6553 ;;  d               2    3[COMMON] unsigned int 
  6554 ;; Auto vars:     Size  Location     Type
  6555 ;;		None
  6556 ;; Return value:  Size  Location     Type
  6557 ;;                  1    wreg      void 
  6558 ;; Registers used:
  6559 ;;		wreg, status,2, status,0, pclath, cstack
  6560 ;; Tracked objects:
  6561 ;;		On entry : 0/0
  6562 ;;		On exit  : 0/0
  6563 ;;		Unchanged: 0/0
  6564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6565 ;;      Params:         2       0       0       0       0
  6566 ;;      Locals:         0       0       0       0       0
  6567 ;;      Temps:          0       0       0       0       0
  6568 ;;      Totals:         2       0       0       0       0
  6569 ;;Total ram usage:        2 bytes
  6570 ;; Hardware stack levels used:    1
  6571 ;; Hardware stack levels required when called:    2
  6572 ;; This function calls:
  6573 ;;		_I2C_Master_Wait
  6574 ;; This function is called by:
  6575 ;;		_write_RTC
  6576 ;;		_get_time
  6577 ;;		_get_day
  6578 ;;		_get_temp
  6579 ;;		_get_hall
  6580 ;;		_get_tripwire
  6581 ;;		_get_PIR
  6582 ;;		_get_IR
  6583 ;;		_open_door
  6584 ;;		_close_door
  6585 ;; This function uses a non-reentrant model
  6586 ;;
  6587                           
  6588                           
  6589                           ;psect for function _I2C_Master_Write
  6590  165C                     _I2C_Master_Write:	
  6591                           
  6592                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  6593                           
  6594                           ;incstack = 0
  6595                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  6596  165C  120A  158A  2044   	fcall	_I2C_Master_Wait
  6597                           
  6598                           ;./I2C.h: 68:     SSPBUF = d;
  6599  165F  0873               	movf	I2C_Master_Write@d,w
  6600  1660  1283               	bcf	3,5	;RP0=0, select bank0
  6601  1661  1303               	bcf	3,6	;RP1=0, select bank0
  6602  1662  0093               	movwf	19	;volatile
  6603  1663  0008               	return
  6604  1664                     __end_of_I2C_Master_Write:	
  6605                           
  6606                           	psect	text27
  6607  164E                     __ptext27:	
  6608 ;; *************** function _I2C_Master_Stop *****************
  6609 ;; Defined at:
  6610 ;;		line 55 in file "./I2C.h"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;		None
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;		None
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  1    wreg      void 
  6617 ;; Registers used:
  6618 ;;		wreg, status,2, status,0, pclath, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6624 ;;      Params:         0       0       0       0       0
  6625 ;;      Locals:         0       0       0       0       0
  6626 ;;      Temps:          0       0       0       0       0
  6627 ;;      Totals:         0       0       0       0       0
  6628 ;;Total ram usage:        0 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    2
  6631 ;; This function calls:
  6632 ;;		_I2C_Master_Wait
  6633 ;; This function is called by:
  6634 ;;		_write_RTC
  6635 ;;		_get_time
  6636 ;;		_get_day
  6637 ;;		_get_temp
  6638 ;;		_get_hall
  6639 ;;		_get_tripwire
  6640 ;;		_get_PIR
  6641 ;;		_get_IR
  6642 ;;		_open_door
  6643 ;;		_close_door
  6644 ;; This function uses a non-reentrant model
  6645 ;;
  6646                           
  6647                           
  6648                           ;psect for function _I2C_Master_Stop
  6649  164E                     _I2C_Master_Stop:	
  6650                           
  6651                           ;./I2C.h: 57:     I2C_Master_Wait();
  6652                           
  6653                           ;incstack = 0
  6654                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  6655  164E  120A  158A  2044   	fcall	_I2C_Master_Wait
  6656                           
  6657                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  6658  1651  1683               	bsf	3,5	;RP0=1, select bank1
  6659  1652  1303               	bcf	3,6	;RP1=0, select bank1
  6660  1653  1511               	bsf	17,2	;volatile
  6661  1654  0008               	return
  6662  1655                     __end_of_I2C_Master_Stop:	
  6663                           
  6664                           	psect	text28
  6665  1647                     __ptext28:	
  6666 ;; *************** function _I2C_Master_Start *****************
  6667 ;; Defined at:
  6668 ;;		line 39 in file "./I2C.h"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;		None
  6671 ;; Auto vars:     Size  Location     Type
  6672 ;;		None
  6673 ;; Return value:  Size  Location     Type
  6674 ;;                  1    wreg      void 
  6675 ;; Registers used:
  6676 ;;		wreg, status,2, status,0, pclath, cstack
  6677 ;; Tracked objects:
  6678 ;;		On entry : 0/0
  6679 ;;		On exit  : 0/0
  6680 ;;		Unchanged: 0/0
  6681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6682 ;;      Params:         0       0       0       0       0
  6683 ;;      Locals:         0       0       0       0       0
  6684 ;;      Temps:          0       0       0       0       0
  6685 ;;      Totals:         0       0       0       0       0
  6686 ;;Total ram usage:        0 bytes
  6687 ;; Hardware stack levels used:    1
  6688 ;; Hardware stack levels required when called:    2
  6689 ;; This function calls:
  6690 ;;		_I2C_Master_Wait
  6691 ;; This function is called by:
  6692 ;;		_write_RTC
  6693 ;;		_get_time
  6694 ;;		_get_day
  6695 ;;		_get_temp
  6696 ;;		_get_hall
  6697 ;;		_get_tripwire
  6698 ;;		_get_PIR
  6699 ;;		_get_IR
  6700 ;;		_open_door
  6701 ;;		_close_door
  6702 ;; This function uses a non-reentrant model
  6703 ;;
  6704                           
  6705                           
  6706                           ;psect for function _I2C_Master_Start
  6707  1647                     _I2C_Master_Start:	
  6708                           
  6709                           ;./I2C.h: 41:     I2C_Master_Wait();
  6710                           
  6711                           ;incstack = 0
  6712                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  6713  1647  120A  158A  2044   	fcall	_I2C_Master_Wait
  6714                           
  6715                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  6716  164A  1683               	bsf	3,5	;RP0=1, select bank1
  6717  164B  1303               	bcf	3,6	;RP1=0, select bank1
  6718  164C  1411               	bsf	17,0	;volatile
  6719  164D  0008               	return
  6720  164E                     __end_of_I2C_Master_Start:	
  6721                           
  6722                           	psect	text29
  6723  0844                     __ptext29:	
  6724 ;; *************** function _I2C_Master_Wait *****************
  6725 ;; Defined at:
  6726 ;;		line 32 in file "./I2C.h"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;		None
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;		None
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  1    wreg      void 
  6733 ;; Registers used:
  6734 ;;		wreg, status,2
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6740 ;;      Params:         0       0       0       0       0
  6741 ;;      Locals:         0       0       0       0       0
  6742 ;;      Temps:          0       0       0       0       0
  6743 ;;      Totals:         0       0       0       0       0
  6744 ;;Total ram usage:        0 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    1
  6747 ;; This function calls:
  6748 ;;		Nothing
  6749 ;; This function is called by:
  6750 ;;		_I2C_Master_Start
  6751 ;;		_I2C_Master_RepeatedStart
  6752 ;;		_I2C_Master_Stop
  6753 ;;		_I2C_Master_Write
  6754 ;;		_I2C_Master_Read
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           
  6759                           ;psect for function _I2C_Master_Wait
  6760  0844                     _I2C_Master_Wait:	
  6761  0844                     l134:	
  6762                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  6763                           
  6764                           ;incstack = 0
  6765                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  6766                           
  6767  0844  1683               	bsf	3,5	;RP0=1, select bank1
  6768  0845  1303               	bcf	3,6	;RP1=0, select bank1
  6769  0846  1914               	btfsc	20,2	;volatile
  6770  0847  2844               	goto	l134
  6771  0848  0811               	movf	17,w	;volatile
  6772  0849  391F               	andlw	31
  6773  084A  1903               	btfsc	3,2
  6774  084B  0008               	return
  6775  084C  2844               	goto	l134
  6776  084D                     __end_of_I2C_Master_Wait:	
  6777                           
  6778                           	psect	text30
  6779  0A15                     __ptext30:	
  6780 ;; *************** function ___awmod *****************
  6781 ;; Defined at:
  6782 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;  divisor         2    3[COMMON] int 
  6785 ;;  dividend        2    5[COMMON] int 
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;  sign            1    1[BANK0 ] unsigned char 
  6788 ;;  counter         1    0[BANK0 ] unsigned char 
  6789 ;; Return value:  Size  Location     Type
  6790 ;;                  2    3[COMMON] int 
  6791 ;; Registers used:
  6792 ;;		wreg, status,2, status,0
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6798 ;;      Params:         4       0       0       0       0
  6799 ;;      Locals:         0       2       0       0       0
  6800 ;;      Temps:          1       0       0       0       0
  6801 ;;      Totals:         5       2       0       0       0
  6802 ;;Total ram usage:        7 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; Hardware stack levels required when called:    1
  6805 ;; This function calls:
  6806 ;;		Nothing
  6807 ;; This function is called by:
  6808 ;;		_main
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           
  6813                           ;psect for function ___awmod
  6814  0A15                     ___awmod:	
  6815                           
  6816                           ;incstack = 0
  6817                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6818  0A15  1283               	bcf	3,5	;RP0=0, select bank0
  6819  0A16  1303               	bcf	3,6	;RP1=0, select bank0
  6820  0A17  01C8               	clrf	___awmod@sign
  6821  0A18  1FF6               	btfss	___awmod@dividend+1,7
  6822  0A19  2A21               	goto	l3940
  6823  0A1A  09F5               	comf	___awmod@dividend,f
  6824  0A1B  09F6               	comf	___awmod@dividend+1,f
  6825  0A1C  0AF5               	incf	___awmod@dividend,f
  6826  0A1D  1903               	skipnz
  6827  0A1E  0AF6               	incf	___awmod@dividend+1,f
  6828  0A1F  01C8               	clrf	___awmod@sign
  6829  0A20  0AC8               	incf	___awmod@sign,f
  6830  0A21                     l3940:	
  6831  0A21  1FF4               	btfss	___awmod@divisor+1,7
  6832  0A22  2A28               	goto	l3944
  6833  0A23  09F3               	comf	___awmod@divisor,f
  6834  0A24  09F4               	comf	___awmod@divisor+1,f
  6835  0A25  0AF3               	incf	___awmod@divisor,f
  6836  0A26  1903               	skipnz
  6837  0A27  0AF4               	incf	___awmod@divisor+1,f
  6838  0A28                     l3944:	
  6839  0A28  0873               	movf	___awmod@divisor,w
  6840  0A29  0474               	iorwf	___awmod@divisor+1,w
  6841  0A2A  1903               	btfsc	3,2
  6842  0A2B  2A55               	goto	l3962
  6843  0A2C  01C7               	clrf	___awmod@counter
  6844  0A2D  0AC7               	incf	___awmod@counter,f
  6845  0A2E                     l3952:	
  6846  0A2E  1BF4               	btfsc	___awmod@divisor+1,7
  6847  0A2F  2A3C               	goto	l3954
  6848  0A30  3001               	movlw	1
  6849  0A31                     u4065:	
  6850  0A31  1003               	clrc
  6851  0A32  0DF3               	rlf	___awmod@divisor,f
  6852  0A33  0DF4               	rlf	___awmod@divisor+1,f
  6853  0A34  3EFF               	addlw	-1
  6854  0A35  1D03               	skipz
  6855  0A36  2A31               	goto	u4065
  6856  0A37  3001               	movlw	1
  6857  0A38  00F7               	movwf	??___awmod
  6858  0A39  0877               	movf	??___awmod,w
  6859  0A3A  07C7               	addwf	___awmod@counter,f
  6860  0A3B  2A2E               	goto	l3952
  6861  0A3C                     l3954:	
  6862  0A3C  0874               	movf	___awmod@divisor+1,w
  6863  0A3D  0276               	subwf	___awmod@dividend+1,w
  6864  0A3E  1D03               	skipz
  6865  0A3F  2A42               	goto	u4085
  6866  0A40  0873               	movf	___awmod@divisor,w
  6867  0A41  0275               	subwf	___awmod@dividend,w
  6868  0A42                     u4085:	
  6869  0A42  1C03               	skipc
  6870  0A43  2A4A               	goto	l3958
  6871  0A44  0873               	movf	___awmod@divisor,w
  6872  0A45  02F5               	subwf	___awmod@dividend,f
  6873  0A46  0874               	movf	___awmod@divisor+1,w
  6874  0A47  1C03               	skipc
  6875  0A48  03F6               	decf	___awmod@dividend+1,f
  6876  0A49  02F6               	subwf	___awmod@dividend+1,f
  6877  0A4A                     l3958:	
  6878  0A4A  3001               	movlw	1
  6879  0A4B                     u4095:	
  6880  0A4B  1003               	clrc
  6881  0A4C  0CF4               	rrf	___awmod@divisor+1,f
  6882  0A4D  0CF3               	rrf	___awmod@divisor,f
  6883  0A4E  3EFF               	addlw	-1
  6884  0A4F  1D03               	skipz
  6885  0A50  2A4B               	goto	u4095
  6886  0A51  3001               	movlw	1
  6887  0A52  02C7               	subwf	___awmod@counter,f
  6888  0A53  1D03               	btfss	3,2
  6889  0A54  2A3C               	goto	l3954
  6890  0A55                     l3962:	
  6891  0A55  0848               	movf	___awmod@sign,w
  6892  0A56  1903               	btfsc	3,2
  6893  0A57  2A5D               	goto	l3966
  6894  0A58  09F5               	comf	___awmod@dividend,f
  6895  0A59  09F6               	comf	___awmod@dividend+1,f
  6896  0A5A  0AF5               	incf	___awmod@dividend,f
  6897  0A5B  1903               	skipnz
  6898  0A5C  0AF6               	incf	___awmod@dividend+1,f
  6899  0A5D                     l3966:	
  6900  0A5D  0876               	movf	___awmod@dividend+1,w
  6901  0A5E  00F4               	movwf	?___awmod+1
  6902  0A5F  0875               	movf	___awmod@dividend,w
  6903  0A60  00F3               	movwf	?___awmod
  6904  0A61  0008               	return
  6905  0A62                     __end_of___awmod:	
  6906                           
  6907                           	psect	text31
  6908  0B07                     __ptext31:	
  6909 ;; *************** function ___awdiv *****************
  6910 ;; Defined at:
  6911 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  6912 ;; Parameters:    Size  Location     Type
  6913 ;;  divisor         2    3[COMMON] int 
  6914 ;;  dividend        2    5[COMMON] int 
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;  quotient        2    2[BANK0 ] int 
  6917 ;;  sign            1    1[BANK0 ] unsigned char 
  6918 ;;  counter         1    0[BANK0 ] unsigned char 
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  2    3[COMMON] int 
  6921 ;; Registers used:
  6922 ;;		wreg, status,2, status,0
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6928 ;;      Params:         4       0       0       0       0
  6929 ;;      Locals:         0       4       0       0       0
  6930 ;;      Temps:          1       0       0       0       0
  6931 ;;      Totals:         5       4       0       0       0
  6932 ;;Total ram usage:        9 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:    1
  6935 ;; This function calls:
  6936 ;;		Nothing
  6937 ;; This function is called by:
  6938 ;;		_main
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           
  6943                           ;psect for function ___awdiv
  6944  0B07                     ___awdiv:	
  6945                           
  6946                           ;incstack = 0
  6947                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6948  0B07  1283               	bcf	3,5	;RP0=0, select bank0
  6949  0B08  1303               	bcf	3,6	;RP1=0, select bank0
  6950  0B09  01C8               	clrf	___awdiv@sign
  6951  0B0A  1FF4               	btfss	___awdiv@divisor+1,7
  6952  0B0B  2B13               	goto	l2878
  6953  0B0C  09F3               	comf	___awdiv@divisor,f
  6954  0B0D  09F4               	comf	___awdiv@divisor+1,f
  6955  0B0E  0AF3               	incf	___awdiv@divisor,f
  6956  0B0F  1903               	skipnz
  6957  0B10  0AF4               	incf	___awdiv@divisor+1,f
  6958  0B11  01C8               	clrf	___awdiv@sign
  6959  0B12  0AC8               	incf	___awdiv@sign,f
  6960  0B13                     l2878:	
  6961  0B13  1FF6               	btfss	___awdiv@dividend+1,7
  6962  0B14  2B1E               	goto	l2884
  6963  0B15  09F5               	comf	___awdiv@dividend,f
  6964  0B16  09F6               	comf	___awdiv@dividend+1,f
  6965  0B17  0AF5               	incf	___awdiv@dividend,f
  6966  0B18  1903               	skipnz
  6967  0B19  0AF6               	incf	___awdiv@dividend+1,f
  6968  0B1A  3001               	movlw	1
  6969  0B1B  00F7               	movwf	??___awdiv
  6970  0B1C  0877               	movf	??___awdiv,w
  6971  0B1D  06C8               	xorwf	___awdiv@sign,f
  6972  0B1E                     l2884:	
  6973  0B1E  01C9               	clrf	___awdiv@quotient
  6974  0B1F  01CA               	clrf	___awdiv@quotient+1
  6975  0B20  0873               	movf	___awdiv@divisor,w
  6976  0B21  0474               	iorwf	___awdiv@divisor+1,w
  6977  0B22  1903               	btfsc	3,2
  6978  0B23  2B55               	goto	l2906
  6979  0B24  01C7               	clrf	___awdiv@counter
  6980  0B25  0AC7               	incf	___awdiv@counter,f
  6981  0B26                     l2894:	
  6982  0B26  1BF4               	btfsc	___awdiv@divisor+1,7
  6983  0B27  2B34               	goto	l2896
  6984  0B28  3001               	movlw	1
  6985  0B29                     u2505:	
  6986  0B29  1003               	clrc
  6987  0B2A  0DF3               	rlf	___awdiv@divisor,f
  6988  0B2B  0DF4               	rlf	___awdiv@divisor+1,f
  6989  0B2C  3EFF               	addlw	-1
  6990  0B2D  1D03               	skipz
  6991  0B2E  2B29               	goto	u2505
  6992  0B2F  3001               	movlw	1
  6993  0B30  00F7               	movwf	??___awdiv
  6994  0B31  0877               	movf	??___awdiv,w
  6995  0B32  07C7               	addwf	___awdiv@counter,f
  6996  0B33  2B26               	goto	l2894
  6997  0B34                     l2896:	
  6998  0B34  3001               	movlw	1
  6999  0B35                     u2525:	
  7000  0B35  1003               	clrc
  7001  0B36  0DC9               	rlf	___awdiv@quotient,f
  7002  0B37  0DCA               	rlf	___awdiv@quotient+1,f
  7003  0B38  3EFF               	addlw	-1
  7004  0B39  1D03               	skipz
  7005  0B3A  2B35               	goto	u2525
  7006  0B3B  0874               	movf	___awdiv@divisor+1,w
  7007  0B3C  0276               	subwf	___awdiv@dividend+1,w
  7008  0B3D  1D03               	skipz
  7009  0B3E  2B41               	goto	u2535
  7010  0B3F  0873               	movf	___awdiv@divisor,w
  7011  0B40  0275               	subwf	___awdiv@dividend,w
  7012  0B41                     u2535:	
  7013  0B41  1C03               	skipc
  7014  0B42  2B4A               	goto	l2902
  7015  0B43  0873               	movf	___awdiv@divisor,w
  7016  0B44  02F5               	subwf	___awdiv@dividend,f
  7017  0B45  0874               	movf	___awdiv@divisor+1,w
  7018  0B46  1C03               	skipc
  7019  0B47  03F6               	decf	___awdiv@dividend+1,f
  7020  0B48  02F6               	subwf	___awdiv@dividend+1,f
  7021  0B49  1449               	bsf	___awdiv@quotient,0
  7022  0B4A                     l2902:	
  7023  0B4A  3001               	movlw	1
  7024  0B4B                     u2545:	
  7025  0B4B  1003               	clrc
  7026  0B4C  0CF4               	rrf	___awdiv@divisor+1,f
  7027  0B4D  0CF3               	rrf	___awdiv@divisor,f
  7028  0B4E  3EFF               	addlw	-1
  7029  0B4F  1D03               	skipz
  7030  0B50  2B4B               	goto	u2545
  7031  0B51  3001               	movlw	1
  7032  0B52  02C7               	subwf	___awdiv@counter,f
  7033  0B53  1D03               	btfss	3,2
  7034  0B54  2B34               	goto	l2896
  7035  0B55                     l2906:	
  7036  0B55  0848               	movf	___awdiv@sign,w
  7037  0B56  1903               	btfsc	3,2
  7038  0B57  2B5D               	goto	l2910
  7039  0B58  09C9               	comf	___awdiv@quotient,f
  7040  0B59  09CA               	comf	___awdiv@quotient+1,f
  7041  0B5A  0AC9               	incf	___awdiv@quotient,f
  7042  0B5B  1903               	skipnz
  7043  0B5C  0ACA               	incf	___awdiv@quotient+1,f
  7044  0B5D                     l2910:	
  7045  0B5D  084A               	movf	___awdiv@quotient+1,w
  7046  0B5E  00F4               	movwf	?___awdiv+1
  7047  0B5F  0849               	movf	___awdiv@quotient,w
  7048  0B60  00F3               	movwf	?___awdiv
  7049  0B61  0008               	return
  7050  0B62                     __end_of___awdiv:	
  7051                           
  7052                           	psect	text32
  7053  166C                     __ptext32:	
  7054 ;; *************** function _UART_Write *****************
  7055 ;; Defined at:
  7056 ;;		line 54 in file "./UART.h"
  7057 ;; Parameters:    Size  Location     Type
  7058 ;;  data            1    wreg     unsigned char 
  7059 ;; Auto vars:     Size  Location     Type
  7060 ;;  data            1    3[COMMON] unsigned char 
  7061 ;; Return value:  Size  Location     Type
  7062 ;;                  1    wreg      void 
  7063 ;; Registers used:
  7064 ;;		wreg
  7065 ;; Tracked objects:
  7066 ;;		On entry : 0/0
  7067 ;;		On exit  : 0/0
  7068 ;;		Unchanged: 0/0
  7069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7070 ;;      Params:         0       0       0       0       0
  7071 ;;      Locals:         1       0       0       0       0
  7072 ;;      Temps:          0       0       0       0       0
  7073 ;;      Totals:         1       0       0       0       0
  7074 ;;Total ram usage:        1 bytes
  7075 ;; Hardware stack levels used:    1
  7076 ;; Hardware stack levels required when called:    1
  7077 ;; This function calls:
  7078 ;;		Nothing
  7079 ;; This function is called by:
  7080 ;;		_main
  7081 ;;		_UART_Write_Text
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084                           
  7085                           
  7086                           ;psect for function _UART_Write
  7087  166C                     _UART_Write:	
  7088                           
  7089                           ;incstack = 0
  7090                           ; Regs used in _UART_Write: [wreg]
  7091                           ;UART_Write@data stored from wreg
  7092  166C  00F3               	movwf	UART_Write@data
  7093  166D                     l238:	
  7094                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(!TRMT);
  7095                           
  7096  166D  1683               	bsf	3,5	;RP0=1, select bank1
  7097  166E  1303               	bcf	3,6	;RP1=0, select bank1
  7098  166F  1C98               	btfss	24,1	;volatile
  7099  1670  2E6D               	goto	l238
  7100                           
  7101                           ;./UART.h: 57:   TXREG = data;
  7102  1671  0873               	movf	UART_Write@data,w
  7103  1672  1283               	bcf	3,5	;RP0=0, select bank0
  7104  1673  1303               	bcf	3,6	;RP1=0, select bank0
  7105  1674  0099               	movwf	25	;volatile
  7106  1675  0008               	return
  7107  1676                     __end_of_UART_Write:	
  7108                           
  7109                           	psect	text33
  7110  1641                     __ptext33:	
  7111 ;; *************** function _UART_TX_Empty *****************
  7112 ;; Defined at:
  7113 ;;		line 31 in file "./UART.h"
  7114 ;; Parameters:    Size  Location     Type
  7115 ;;		None
  7116 ;; Auto vars:     Size  Location     Type
  7117 ;;		None
  7118 ;; Return value:  Size  Location     Type
  7119 ;;                  1    wreg      unsigned char 
  7120 ;; Registers used:
  7121 ;;		wreg
  7122 ;; Tracked objects:
  7123 ;;		On entry : 0/0
  7124 ;;		On exit  : 0/0
  7125 ;;		Unchanged: 0/0
  7126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7127 ;;      Params:         0       0       0       0       0
  7128 ;;      Locals:         0       0       0       0       0
  7129 ;;      Temps:          0       0       0       0       0
  7130 ;;      Totals:         0       0       0       0       0
  7131 ;;Total ram usage:        0 bytes
  7132 ;; Hardware stack levels used:    1
  7133 ;; Hardware stack levels required when called:    1
  7134 ;; This function calls:
  7135 ;;		Nothing
  7136 ;; This function is called by:
  7137 ;;		_main
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           
  7142                           ;psect for function _UART_TX_Empty
  7143  1641                     _UART_TX_Empty:	
  7144                           
  7145                           ;./UART.h: 33:   return TRMT;
  7146                           
  7147                           ;incstack = 0
  7148                           ; Regs used in _UART_TX_Empty: [wreg]
  7149  1641  3000               	movlw	0
  7150  1642  1683               	bsf	3,5	;RP0=1, select bank1
  7151  1643  1303               	bcf	3,6	;RP1=0, select bank1
  7152  1644  1898               	btfsc	24,1	;volatile
  7153  1645  3001               	movlw	1
  7154  1646  0008               	return
  7155  1647                     __end_of_UART_TX_Empty:	
  7156                           
  7157                           	psect	text34
  7158  098E                     __ptext34:	
  7159 ;; *************** function _Lcd_Write_String *****************
  7160 ;; Defined at:
  7161 ;;		line 100 in file "./LCD4bits.h"
  7162 ;; Parameters:    Size  Location     Type
  7163 ;;  a               2    0[BANK0 ] PTR unsigned char 
  7164 ;;		 -> NULL(0), STR_31(13), STR_30(6), STR_29(13), 
  7165 ;;		 -> STR_28(12), STR_27(17), STR_26(6), STR_25(7), 
  7166 ;;		 -> STR_24(7), STR_23(7), STR_22(8), STR_21(8), 
  7167 ;;		 -> STR_20(9), STR_19(9), STR_18(9), STR_17(9), 
  7168 ;;		 -> STR_16(12), STR_15(12), STR_11(10), STR_10(10), 
  7169 ;;		 -> STR_9(10), STR_8(10), STR_7(10), STR_6(10), 
  7170 ;;		 -> STR_5(10), STR_4(10), time(6), temp(6), 
  7171 ;;		 -> STR_3(11), STR_2(7), STR_1(31), 
  7172 ;; Auto vars:     Size  Location     Type
  7173 ;;  i               2    5[BANK0 ] int 
  7174 ;; Return value:  Size  Location     Type
  7175 ;;                  1    wreg      void 
  7176 ;; Registers used:
  7177 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7183 ;;      Params:         0       2       0       0       0
  7184 ;;      Locals:         0       2       0       0       0
  7185 ;;      Temps:          0       3       0       0       0
  7186 ;;      Totals:         0       7       0       0       0
  7187 ;;Total ram usage:        7 bytes
  7188 ;; Hardware stack levels used:    1
  7189 ;; Hardware stack levels required when called:    3
  7190 ;; This function calls:
  7191 ;;		_Lcd_Write_Char
  7192 ;; This function is called by:
  7193 ;;		_main
  7194 ;; This function uses a non-reentrant model
  7195 ;;
  7196                           
  7197                           
  7198                           ;psect for function _Lcd_Write_String
  7199  098E                     _Lcd_Write_String:	
  7200                           
  7201                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  7202                           
  7203                           ;incstack = 0
  7204                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7205  098E  1283               	bcf	3,5	;RP0=0, select bank0
  7206  098F  1303               	bcf	3,6	;RP1=0, select bank0
  7207  0990  01CC               	clrf	Lcd_Write_String@i
  7208  0991  01CD               	clrf	Lcd_Write_String@i+1
  7209  0992                     l3784:	
  7210  0992  084C               	movf	Lcd_Write_String@i,w
  7211  0993  0747               	addwf	Lcd_Write_String@a,w
  7212  0994  00CA               	movwf	??_Lcd_Write_String+1
  7213  0995  0848               	movf	Lcd_Write_String@a+1,w
  7214  0996  00C9               	movwf	??_Lcd_Write_String
  7215  0997  1803               	skipnc
  7216  0998  0AC9               	incf	??_Lcd_Write_String,f
  7217  0999  1BCC               	btfsc	Lcd_Write_String@i,7
  7218  099A  03C9               	decf	??_Lcd_Write_String,f
  7219  099B  1283               	bcf	3,5	;RP0=0, select bank0
  7220  099C  1303               	bcf	3,6	;RP1=0, select bank0
  7221  099D  0849               	movf	??_Lcd_Write_String,w
  7222  099E  00CB               	movwf	??_Lcd_Write_String+2
  7223  099F  084B               	movf	??_Lcd_Write_String+2,w
  7224  09A0  00FF               	movwf	127
  7225  09A1  084A               	movf	??_Lcd_Write_String+1,w
  7226  09A2  0084               	movwf	4
  7227  09A3  120A  118A  2700  120A  158A  	fcall	stringtab
  7228  09A8  3A00               	xorlw	0
  7229  09A9  1903               	btfsc	3,2
  7230  09AA  0008               	return
  7231                           
  7232                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  7233  09AB  084C               	movf	Lcd_Write_String@i,w
  7234  09AC  0747               	addwf	Lcd_Write_String@a,w
  7235  09AD  00CA               	movwf	??_Lcd_Write_String+1
  7236  09AE  0848               	movf	Lcd_Write_String@a+1,w
  7237  09AF  00C9               	movwf	??_Lcd_Write_String
  7238  09B0  1803               	skipnc
  7239  09B1  0AC9               	incf	??_Lcd_Write_String,f
  7240  09B2  1BCC               	btfsc	Lcd_Write_String@i,7
  7241  09B3  03C9               	decf	??_Lcd_Write_String,f
  7242  09B4  1283               	bcf	3,5	;RP0=0, select bank0
  7243  09B5  1303               	bcf	3,6	;RP1=0, select bank0
  7244  09B6  0849               	movf	??_Lcd_Write_String,w
  7245  09B7  00CB               	movwf	??_Lcd_Write_String+2
  7246  09B8  084B               	movf	??_Lcd_Write_String+2,w
  7247  09B9  00FF               	movwf	127
  7248  09BA  084A               	movf	??_Lcd_Write_String+1,w
  7249  09BB  0084               	movwf	4
  7250  09BC  120A  118A  2700  120A  158A  	fcall	stringtab
  7251  09C1  120A  158A  20DD  120A  158A  	fcall	_Lcd_Write_Char
  7252  09C6  3001               	movlw	1
  7253  09C7  1283               	bcf	3,5	;RP0=0, select bank0
  7254  09C8  1303               	bcf	3,6	;RP1=0, select bank0
  7255  09C9  07CC               	addwf	Lcd_Write_String@i,f
  7256  09CA  1803               	skipnc
  7257  09CB  0ACD               	incf	Lcd_Write_String@i+1,f
  7258  09CC  3000               	movlw	0
  7259  09CD  07CD               	addwf	Lcd_Write_String@i+1,f
  7260  09CE  2992               	goto	l3784
  7261  09CF                     __end_of_Lcd_Write_String:	
  7262                           
  7263                           	psect	text35
  7264  08DD                     __ptext35:	
  7265 ;; *************** function _Lcd_Write_Char *****************
  7266 ;; Defined at:
  7267 ;;		line 84 in file "./LCD4bits.h"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;  a               1    wreg     unsigned char 
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;  a               1    7[COMMON] unsigned char 
  7272 ;;  y               1    6[COMMON] unsigned char 
  7273 ;;  temp            1    5[COMMON] unsigned char 
  7274 ;; Return value:  Size  Location     Type
  7275 ;;                  1    wreg      void 
  7276 ;; Registers used:
  7277 ;;		wreg, status,2, status,0, pclath, cstack
  7278 ;; Tracked objects:
  7279 ;;		On entry : 0/0
  7280 ;;		On exit  : 0/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7283 ;;      Params:         0       0       0       0       0
  7284 ;;      Locals:         3       0       0       0       0
  7285 ;;      Temps:          1       0       0       0       0
  7286 ;;      Totals:         4       0       0       0       0
  7287 ;;Total ram usage:        4 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; Hardware stack levels required when called:    2
  7290 ;; This function calls:
  7291 ;;		_Lcd_Port
  7292 ;; This function is called by:
  7293 ;;		_Lcd_Write_String
  7294 ;;		_main
  7295 ;; This function uses a non-reentrant model
  7296 ;;
  7297                           
  7298                           
  7299                           ;psect for function _Lcd_Write_Char
  7300  08DD                     _Lcd_Write_Char:	
  7301                           
  7302                           ;incstack = 0
  7303                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  7304                           ;Lcd_Write_Char@a stored from wreg
  7305  08DD  00F7               	movwf	Lcd_Write_Char@a
  7306                           
  7307                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  7308  08DE  0877               	movf	Lcd_Write_Char@a,w
  7309  08DF  390F               	andlw	15
  7310  08E0  00F4               	movwf	??_Lcd_Write_Char
  7311  08E1  0874               	movf	??_Lcd_Write_Char,w
  7312  08E2  00F5               	movwf	Lcd_Write_Char@temp
  7313                           
  7314                           ;./LCD4bits.h: 88:    y = a&0xF0;
  7315  08E3  0877               	movf	Lcd_Write_Char@a,w
  7316  08E4  39F0               	andlw	240
  7317  08E5  00F4               	movwf	??_Lcd_Write_Char
  7318  08E6  0874               	movf	??_Lcd_Write_Char,w
  7319  08E7  00F6               	movwf	Lcd_Write_Char@y
  7320                           
  7321                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  7322  08E8  1283               	bcf	3,5	;RP0=0, select bank0
  7323  08E9  1303               	bcf	3,6	;RP1=0, select bank0
  7324  08EA  1606               	bsf	6,4	;volatile
  7325                           
  7326                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  7327  08EB  0876               	movf	Lcd_Write_Char@y,w
  7328  08EC  00F4               	movwf	??_Lcd_Write_Char
  7329  08ED  3004               	movlw	4
  7330  08EE                     u2135:	
  7331  08EE  1003               	clrc
  7332  08EF  0CF4               	rrf	??_Lcd_Write_Char,f
  7333  08F0  3EFF               	addlw	-1
  7334  08F1  1D03               	skipz
  7335  08F2  28EE               	goto	u2135
  7336  08F3  0874               	movf	??_Lcd_Write_Char,w
  7337  08F4  160A  118A  26A8  120A  158A  	fcall	_Lcd_Port
  7338                           
  7339                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  7340  08F9  1283               	bcf	3,5	;RP0=0, select bank0
  7341  08FA  1303               	bcf	3,6	;RP1=0, select bank0
  7342  08FB  1686               	bsf	6,5	;volatile
  7343                           
  7344                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  7345  08FC  301A               	movlw	26
  7346  08FD  00F4               	movwf	??_Lcd_Write_Char
  7347  08FE                     u5077:	
  7348  08FE  0BF4               	decfsz	??_Lcd_Write_Char,f
  7349  08FF  28FE               	goto	u5077
  7350  0900  0000               	nop
  7351                           
  7352                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  7353  0901  1283               	bcf	3,5	;RP0=0, select bank0
  7354  0902  1303               	bcf	3,6	;RP1=0, select bank0
  7355  0903  1286               	bcf	6,5	;volatile
  7356                           
  7357                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  7358  0904  0875               	movf	Lcd_Write_Char@temp,w
  7359  0905  160A  118A  26A8  120A  158A  	fcall	_Lcd_Port
  7360                           
  7361                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  7362  090A  1283               	bcf	3,5	;RP0=0, select bank0
  7363  090B  1303               	bcf	3,6	;RP1=0, select bank0
  7364  090C  1686               	bsf	6,5	;volatile
  7365                           
  7366                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  7367  090D  301A               	movlw	26
  7368  090E  00F4               	movwf	??_Lcd_Write_Char
  7369  090F                     u5087:	
  7370  090F  0BF4               	decfsz	??_Lcd_Write_Char,f
  7371  0910  290F               	goto	u5087
  7372  0911  0000               	nop
  7373                           
  7374                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  7375  0912  1283               	bcf	3,5	;RP0=0, select bank0
  7376  0913  1303               	bcf	3,6	;RP1=0, select bank0
  7377  0914  1286               	bcf	6,5	;volatile
  7378  0915  0008               	return
  7379  0916                     __end_of_Lcd_Write_Char:	
  7380                           
  7381                           	psect	text36
  7382  168C                     __ptext36:	
  7383 ;; *************** function _Lcd_Shift_Right *****************
  7384 ;; Defined at:
  7385 ;;		line 107 in file "./LCD4bits.h"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;		None
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;		None
  7390 ;; Return value:  Size  Location     Type
  7391 ;;                  1    wreg      void 
  7392 ;; Registers used:
  7393 ;;		wreg, status,2, status,0, pclath, cstack
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7399 ;;      Params:         0       0       0       0       0
  7400 ;;      Locals:         0       0       0       0       0
  7401 ;;      Temps:          0       0       0       0       0
  7402 ;;      Totals:         0       0       0       0       0
  7403 ;;Total ram usage:        0 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:    3
  7406 ;; This function calls:
  7407 ;;		_Lcd_Cmd
  7408 ;; This function is called by:
  7409 ;;		_main
  7410 ;; This function uses a non-reentrant model
  7411 ;;
  7412                           
  7413                           
  7414                           ;psect for function _Lcd_Shift_Right
  7415  168C                     _Lcd_Shift_Right:	
  7416                           
  7417                           ;./LCD4bits.h: 109:  Lcd_Cmd(0x01);
  7418                           
  7419                           ;incstack = 0
  7420                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
  7421  168C  3001               	movlw	1
  7422  168D  160A  118A  26C2  160A  118A  	fcall	_Lcd_Cmd
  7423                           
  7424                           ;./LCD4bits.h: 110:  Lcd_Cmd(0x0C);
  7425  1692  300C               	movlw	12
  7426  1693  160A  118A  26C2   	fcall	_Lcd_Cmd
  7427  1696  0008               	return
  7428  1697                     __end_of_Lcd_Shift_Right:	
  7429                           
  7430                           	psect	text37
  7431  1681                     __ptext37:	
  7432 ;; *************** function _Lcd_Shift_Left *****************
  7433 ;; Defined at:
  7434 ;;		line 113 in file "./LCD4bits.h"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;		None
  7437 ;; Auto vars:     Size  Location     Type
  7438 ;;		None
  7439 ;; Return value:  Size  Location     Type
  7440 ;;                  1    wreg      void 
  7441 ;; Registers used:
  7442 ;;		wreg, status,2, status,0, pclath, cstack
  7443 ;; Tracked objects:
  7444 ;;		On entry : 0/0
  7445 ;;		On exit  : 0/0
  7446 ;;		Unchanged: 0/0
  7447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7448 ;;      Params:         0       0       0       0       0
  7449 ;;      Locals:         0       0       0       0       0
  7450 ;;      Temps:          0       0       0       0       0
  7451 ;;      Totals:         0       0       0       0       0
  7452 ;;Total ram usage:        0 bytes
  7453 ;; Hardware stack levels used:    1
  7454 ;; Hardware stack levels required when called:    3
  7455 ;; This function calls:
  7456 ;;		_Lcd_Cmd
  7457 ;; This function is called by:
  7458 ;;		_main
  7459 ;; This function uses a non-reentrant model
  7460 ;;
  7461                           
  7462                           
  7463                           ;psect for function _Lcd_Shift_Left
  7464  1681                     _Lcd_Shift_Left:	
  7465                           
  7466                           ;./LCD4bits.h: 115:  Lcd_Cmd(0x01);
  7467                           
  7468                           ;incstack = 0
  7469                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  7470  1681  3001               	movlw	1
  7471  1682  160A  118A  26C2  160A  118A  	fcall	_Lcd_Cmd
  7472                           
  7473                           ;./LCD4bits.h: 116:  Lcd_Cmd(0x08);
  7474  1687  3008               	movlw	8
  7475  1688  160A  118A  26C2   	fcall	_Lcd_Cmd
  7476  168B  0008               	return
  7477  168C                     __end_of_Lcd_Shift_Left:	
  7478                           
  7479                           	psect	text38
  7480  0A62                     __ptext38:	
  7481 ;; *************** function _Lcd_Set_Cursor *****************
  7482 ;; Defined at:
  7483 ;;		line 44 in file "./LCD4bits.h"
  7484 ;; Parameters:    Size  Location     Type
  7485 ;;  a               1    wreg     unsigned char 
  7486 ;;  b               1    7[COMMON] unsigned char 
  7487 ;; Auto vars:     Size  Location     Type
  7488 ;;  a               1    2[BANK0 ] unsigned char 
  7489 ;;  temp            1    5[BANK0 ] unsigned char 
  7490 ;;  y               1    4[BANK0 ] unsigned char 
  7491 ;;  z               1    3[BANK0 ] unsigned char 
  7492 ;; Return value:  Size  Location     Type
  7493 ;;                  1    wreg      void 
  7494 ;; Registers used:
  7495 ;;		wreg, status,2, status,0, pclath, cstack
  7496 ;; Tracked objects:
  7497 ;;		On entry : 0/0
  7498 ;;		On exit  : 0/0
  7499 ;;		Unchanged: 0/0
  7500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7501 ;;      Params:         1       0       0       0       0
  7502 ;;      Locals:         0       4       0       0       0
  7503 ;;      Temps:          0       2       0       0       0
  7504 ;;      Totals:         1       6       0       0       0
  7505 ;;Total ram usage:        7 bytes
  7506 ;; Hardware stack levels used:    1
  7507 ;; Hardware stack levels required when called:    3
  7508 ;; This function calls:
  7509 ;;		_Lcd_Cmd
  7510 ;; This function is called by:
  7511 ;;		_main
  7512 ;; This function uses a non-reentrant model
  7513 ;;
  7514                           
  7515                           
  7516                           ;psect for function _Lcd_Set_Cursor
  7517  0A62                     _Lcd_Set_Cursor:	
  7518                           
  7519                           ;incstack = 0
  7520                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  7521                           ;Lcd_Set_Cursor@a stored from wreg
  7522  0A62  1283               	bcf	3,5	;RP0=0, select bank0
  7523  0A63  1303               	bcf	3,6	;RP1=0, select bank0
  7524  0A64  00C9               	movwf	Lcd_Set_Cursor@a
  7525                           
  7526                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  7527  0A65  0349               	decf	Lcd_Set_Cursor@a,w
  7528  0A66  1D03               	btfss	3,2
  7529  0A67  2A8B               	goto	l3768
  7530                           
  7531                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  7532  0A68  0877               	movf	Lcd_Set_Cursor@b,w
  7533  0A69  3E7F               	addlw	127
  7534  0A6A  00C7               	movwf	??_Lcd_Set_Cursor
  7535  0A6B  0847               	movf	??_Lcd_Set_Cursor,w
  7536  0A6C  00CC               	movwf	Lcd_Set_Cursor@temp
  7537                           
  7538                           ;./LCD4bits.h: 50:   z = temp>>4;
  7539  0A6D  084C               	movf	Lcd_Set_Cursor@temp,w
  7540  0A6E  00C7               	movwf	??_Lcd_Set_Cursor
  7541  0A6F  3004               	movlw	4
  7542  0A70                     u3915:	
  7543  0A70  1003               	clrc
  7544  0A71  0CC7               	rrf	??_Lcd_Set_Cursor,f
  7545  0A72  3EFF               	addlw	-1
  7546  0A73  1D03               	skipz
  7547  0A74  2A70               	goto	u3915
  7548  0A75  0847               	movf	??_Lcd_Set_Cursor,w
  7549  0A76  00C8               	movwf	??_Lcd_Set_Cursor+1
  7550  0A77  0848               	movf	??_Lcd_Set_Cursor+1,w
  7551  0A78  00CA               	movwf	Lcd_Set_Cursor@z
  7552                           
  7553                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  7554  0A79  084C               	movf	Lcd_Set_Cursor@temp,w
  7555  0A7A  390F               	andlw	15
  7556  0A7B  00C7               	movwf	??_Lcd_Set_Cursor
  7557  0A7C  0847               	movf	??_Lcd_Set_Cursor,w
  7558  0A7D  00CB               	movwf	Lcd_Set_Cursor@y
  7559                           
  7560                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  7561  0A7E  084A               	movf	Lcd_Set_Cursor@z,w
  7562  0A7F  160A  118A  26C2  120A  158A  	fcall	_Lcd_Cmd
  7563                           
  7564                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  7565  0A84  1283               	bcf	3,5	;RP0=0, select bank0
  7566  0A85  1303               	bcf	3,6	;RP1=0, select bank0
  7567  0A86  084B               	movf	Lcd_Set_Cursor@y,w
  7568  0A87  160A  118A  26C2   	fcall	_Lcd_Cmd
  7569                           
  7570                           ;./LCD4bits.h: 54:  }
  7571  0A8A  0008               	return
  7572  0A8B                     l3768:	
  7573  0A8B  3002               	movlw	2
  7574  0A8C  0649               	xorwf	Lcd_Set_Cursor@a,w
  7575  0A8D  1D03               	btfss	3,2
  7576  0A8E  0008               	return
  7577                           
  7578                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  7579  0A8F  0877               	movf	Lcd_Set_Cursor@b,w
  7580  0A90  3EBF               	addlw	191
  7581  0A91  00C7               	movwf	??_Lcd_Set_Cursor
  7582  0A92  0847               	movf	??_Lcd_Set_Cursor,w
  7583  0A93  00CC               	movwf	Lcd_Set_Cursor@temp
  7584                           
  7585                           ;./LCD4bits.h: 58:   z = temp>>4;
  7586  0A94  084C               	movf	Lcd_Set_Cursor@temp,w
  7587  0A95  00C7               	movwf	??_Lcd_Set_Cursor
  7588  0A96  3004               	movlw	4
  7589  0A97                     u3935:	
  7590  0A97  1003               	clrc
  7591  0A98  0CC7               	rrf	??_Lcd_Set_Cursor,f
  7592  0A99  3EFF               	addlw	-1
  7593  0A9A  1D03               	skipz
  7594  0A9B  2A97               	goto	u3935
  7595  0A9C  0847               	movf	??_Lcd_Set_Cursor,w
  7596  0A9D  00C8               	movwf	??_Lcd_Set_Cursor+1
  7597  0A9E  0848               	movf	??_Lcd_Set_Cursor+1,w
  7598  0A9F  00CA               	movwf	Lcd_Set_Cursor@z
  7599                           
  7600                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  7601  0AA0  084C               	movf	Lcd_Set_Cursor@temp,w
  7602  0AA1  390F               	andlw	15
  7603  0AA2  00C7               	movwf	??_Lcd_Set_Cursor
  7604  0AA3  0847               	movf	??_Lcd_Set_Cursor,w
  7605  0AA4  00CB               	movwf	Lcd_Set_Cursor@y
  7606                           
  7607                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  7608  0AA5  084A               	movf	Lcd_Set_Cursor@z,w
  7609  0AA6  160A  118A  26C2  120A  158A  	fcall	_Lcd_Cmd
  7610                           
  7611                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  7612  0AAB  1283               	bcf	3,5	;RP0=0, select bank0
  7613  0AAC  1303               	bcf	3,6	;RP1=0, select bank0
  7614  0AAD  084B               	movf	Lcd_Set_Cursor@y,w
  7615  0AAE  160A  118A  26C2   	fcall	_Lcd_Cmd
  7616  0AB1  0008               	return
  7617  0AB2                     __end_of_Lcd_Set_Cursor:	
  7618                           
  7619                           	psect	text39
  7620  1676                     __ptext39:	
  7621 ;; *************** function _Lcd_Clear *****************
  7622 ;; Defined at:
  7623 ;;		line 38 in file "./LCD4bits.h"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;		None
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;		None
  7628 ;; Return value:  Size  Location     Type
  7629 ;;                  1    wreg      void 
  7630 ;; Registers used:
  7631 ;;		wreg, status,2, status,0, pclath, cstack
  7632 ;; Tracked objects:
  7633 ;;		On entry : 0/0
  7634 ;;		On exit  : 0/0
  7635 ;;		Unchanged: 0/0
  7636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7637 ;;      Params:         0       0       0       0       0
  7638 ;;      Locals:         0       0       0       0       0
  7639 ;;      Temps:          0       0       0       0       0
  7640 ;;      Totals:         0       0       0       0       0
  7641 ;;Total ram usage:        0 bytes
  7642 ;; Hardware stack levels used:    1
  7643 ;; Hardware stack levels required when called:    3
  7644 ;; This function calls:
  7645 ;;		_Lcd_Cmd
  7646 ;; This function is called by:
  7647 ;;		_main
  7648 ;; This function uses a non-reentrant model
  7649 ;;
  7650                           
  7651                           
  7652                           ;psect for function _Lcd_Clear
  7653  1676                     _Lcd_Clear:	
  7654                           
  7655                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  7656                           
  7657                           ;incstack = 0
  7658                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  7659  1676  3000               	movlw	0
  7660  1677  160A  118A  26C2  160A  118A  	fcall	_Lcd_Cmd
  7661                           
  7662                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  7663  167C  3001               	movlw	1
  7664  167D  160A  118A  26C2   	fcall	_Lcd_Cmd
  7665  1680  0008               	return
  7666  1681                     __end_of_Lcd_Clear:	
  7667                           
  7668                           	psect	text40
  7669  16C2                     __ptext40:	
  7670 ;; *************** function _Lcd_Cmd *****************
  7671 ;; Defined at:
  7672 ;;		line 29 in file "./LCD4bits.h"
  7673 ;; Parameters:    Size  Location     Type
  7674 ;;  a               1    wreg     unsigned char 
  7675 ;; Auto vars:     Size  Location     Type
  7676 ;;  a               1    6[COMMON] unsigned char 
  7677 ;; Return value:  Size  Location     Type
  7678 ;;                  1    wreg      void 
  7679 ;; Registers used:
  7680 ;;		wreg, status,2, status,0, pclath, cstack
  7681 ;; Tracked objects:
  7682 ;;		On entry : 0/0
  7683 ;;		On exit  : 0/0
  7684 ;;		Unchanged: 0/0
  7685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7686 ;;      Params:         0       0       0       0       0
  7687 ;;      Locals:         1       0       0       0       0
  7688 ;;      Temps:          2       0       0       0       0
  7689 ;;      Totals:         3       0       0       0       0
  7690 ;;Total ram usage:        3 bytes
  7691 ;; Hardware stack levels used:    1
  7692 ;; Hardware stack levels required when called:    2
  7693 ;; This function calls:
  7694 ;;		_Lcd_Port
  7695 ;; This function is called by:
  7696 ;;		_Lcd_Clear
  7697 ;;		_Lcd_Set_Cursor
  7698 ;;		_Lcd_Init
  7699 ;;		_Lcd_Shift_Right
  7700 ;;		_Lcd_Shift_Left
  7701 ;; This function uses a non-reentrant model
  7702 ;;
  7703                           
  7704                           
  7705                           ;psect for function _Lcd_Cmd
  7706  16C2                     _Lcd_Cmd:	
  7707                           
  7708                           ;incstack = 0
  7709                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  7710                           ;Lcd_Cmd@a stored from wreg
  7711  16C2  00F6               	movwf	Lcd_Cmd@a
  7712                           
  7713                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  7714  16C3  1283               	bcf	3,5	;RP0=0, select bank0
  7715  16C4  1303               	bcf	3,6	;RP1=0, select bank0
  7716  16C5  1206               	bcf	6,4	;volatile
  7717                           
  7718                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  7719  16C6  0876               	movf	Lcd_Cmd@a,w
  7720  16C7  160A  118A  26A8  160A  118A  	fcall	_Lcd_Port
  7721                           
  7722                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  7723  16CC  1283               	bcf	3,5	;RP0=0, select bank0
  7724  16CD  1303               	bcf	3,6	;RP1=0, select bank0
  7725  16CE  1686               	bsf	6,5	;volatile
  7726                           
  7727                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  7728  16CF  300B               	movlw	11
  7729  16D0  00F5               	movwf	??_Lcd_Cmd+1
  7730  16D1  3062               	movlw	98
  7731  16D2  00F4               	movwf	??_Lcd_Cmd
  7732  16D3                     u5097:	
  7733  16D3  0BF4               	decfsz	??_Lcd_Cmd,f
  7734  16D4  2ED3               	goto	u5097
  7735  16D5  0BF5               	decfsz	??_Lcd_Cmd+1,f
  7736  16D6  2ED3               	goto	u5097
  7737  16D7  0000               	nop
  7738                           
  7739                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  7740  16D8  1283               	bcf	3,5	;RP0=0, select bank0
  7741  16D9  1303               	bcf	3,6	;RP1=0, select bank0
  7742  16DA  1286               	bcf	6,5	;volatile
  7743  16DB  0008               	return
  7744  16DC                     __end_of_Lcd_Cmd:	
  7745                           
  7746                           	psect	text41
  7747  16A8                     __ptext41:	
  7748 ;; *************** function _Lcd_Port *****************
  7749 ;; Defined at:
  7750 ;;		line 7 in file "./LCD4bits.h"
  7751 ;; Parameters:    Size  Location     Type
  7752 ;;  a               1    wreg     unsigned char 
  7753 ;; Auto vars:     Size  Location     Type
  7754 ;;  a               1    3[COMMON] unsigned char 
  7755 ;; Return value:  Size  Location     Type
  7756 ;;                  1    wreg      void 
  7757 ;; Registers used:
  7758 ;;		wreg
  7759 ;; Tracked objects:
  7760 ;;		On entry : 0/0
  7761 ;;		On exit  : 0/0
  7762 ;;		Unchanged: 0/0
  7763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7764 ;;      Params:         0       0       0       0       0
  7765 ;;      Locals:         1       0       0       0       0
  7766 ;;      Temps:          0       0       0       0       0
  7767 ;;      Totals:         1       0       0       0       0
  7768 ;;Total ram usage:        1 bytes
  7769 ;; Hardware stack levels used:    1
  7770 ;; Hardware stack levels required when called:    1
  7771 ;; This function calls:
  7772 ;;		Nothing
  7773 ;; This function is called by:
  7774 ;;		_Lcd_Cmd
  7775 ;;		_Lcd_Init
  7776 ;;		_Lcd_Write_Char
  7777 ;; This function uses a non-reentrant model
  7778 ;;
  7779                           
  7780                           
  7781                           ;psect for function _Lcd_Port
  7782  16A8                     _Lcd_Port:	
  7783                           
  7784                           ;incstack = 0
  7785                           ; Regs used in _Lcd_Port: [wreg]
  7786                           ;Lcd_Port@a stored from wreg
  7787  16A8  00F3               	movwf	Lcd_Port@a
  7788                           
  7789                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  7790  16A9  1C73               	btfss	Lcd_Port@a,0
  7791  16AA  2EAF               	goto	l160
  7792                           
  7793                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  7794  16AB  1283               	bcf	3,5	;RP0=0, select bank0
  7795  16AC  1303               	bcf	3,6	;RP1=0, select bank0
  7796  16AD  1406               	bsf	6,0	;volatile
  7797  16AE  2EB2               	goto	l161
  7798  16AF                     l160:	
  7799                           ;./LCD4bits.h: 11:  else
  7800                           
  7801                           
  7802                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  7803  16AF  1283               	bcf	3,5	;RP0=0, select bank0
  7804  16B0  1303               	bcf	3,6	;RP1=0, select bank0
  7805  16B1  1006               	bcf	6,0	;volatile
  7806  16B2                     l161:	
  7807                           
  7808                           ;./LCD4bits.h: 14:  if(a & 2)
  7809  16B2  1CF3               	btfss	Lcd_Port@a,1
  7810  16B3  2EB6               	goto	l162
  7811                           
  7812                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  7813  16B4  1486               	bsf	6,1	;volatile
  7814  16B5  2EB7               	goto	l163
  7815  16B6                     l162:	
  7816                           ;./LCD4bits.h: 16:  else
  7817                           
  7818                           
  7819                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  7820  16B6  1086               	bcf	6,1	;volatile
  7821  16B7                     l163:	
  7822                           
  7823                           ;./LCD4bits.h: 19:  if(a & 4)
  7824  16B7  1D73               	btfss	Lcd_Port@a,2
  7825  16B8  2EBB               	goto	l164
  7826                           
  7827                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  7828  16B9  1506               	bsf	6,2	;volatile
  7829  16BA  2EBC               	goto	l165
  7830  16BB                     l164:	
  7831                           ;./LCD4bits.h: 21:  else
  7832                           
  7833                           
  7834                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  7835  16BB  1106               	bcf	6,2	;volatile
  7836  16BC                     l165:	
  7837                           
  7838                           ;./LCD4bits.h: 24:  if(a & 8)
  7839  16BC  1DF3               	btfss	Lcd_Port@a,3
  7840  16BD  2EC0               	goto	l166
  7841                           
  7842                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  7843  16BE  1586               	bsf	6,3	;volatile
  7844  16BF  0008               	return
  7845  16C0                     l166:	
  7846                           ;./LCD4bits.h: 26:  else
  7847                           
  7848                           
  7849                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  7850  16C0  1186               	bcf	6,3	;volatile
  7851  16C1  0008               	return
  7852  16C2                     __end_of_Lcd_Port:	
  7853                           
  7854                           	psect	text42
  7855  16F7                     __ptext42:	
  7856 ;; *************** function _manual_pwm *****************
  7857 ;; Defined at:
  7858 ;;		line 58 in file "mainMaster.c"
  7859 ;; Parameters:    Size  Location     Type
  7860 ;;		None
  7861 ;; Auto vars:     Size  Location     Type
  7862 ;;		None
  7863 ;; Return value:  Size  Location     Type
  7864 ;;                  1    wreg      void 
  7865 ;; Registers used:
  7866 ;;		wreg, status,2, status,0
  7867 ;; Tracked objects:
  7868 ;;		On entry : 0/0
  7869 ;;		On exit  : 0/0
  7870 ;;		Unchanged: 0/0
  7871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7872 ;;      Params:         0       0       0       0       0
  7873 ;;      Locals:         0       0       0       0       0
  7874 ;;      Temps:          3       0       0       0       0
  7875 ;;      Totals:         3       0       0       0       0
  7876 ;;Total ram usage:        3 bytes
  7877 ;; Hardware stack levels used:    1
  7878 ;; This function calls:
  7879 ;;		Nothing
  7880 ;; This function is called by:
  7881 ;;		Interrupt level 1
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           
  7886                           ;psect for function _manual_pwm
  7887  16F7                     _manual_pwm:	
  7888                           
  7889                           ;mainMaster.c: 59:     if (INTCONbits.T0IF == 1){
  7890  16F7  1D0B               	btfss	11,2	;volatile
  7891  16F8  2F0F               	goto	i1l313
  7892                           
  7893                           ;mainMaster.c: 61:         cont++;
  7894  16F9  3001               	movlw	1
  7895  16FA  00F0               	movwf	??_manual_pwm
  7896  16FB  0870               	movf	??_manual_pwm,w
  7897  16FC  1283               	bcf	3,5	;RP0=0, select bank0
  7898  16FD  1303               	bcf	3,6	;RP1=0, select bank0
  7899  16FE  07AD               	addwf	_cont,f
  7900                           
  7901                           ;mainMaster.c: 62:             if(cont < 200){
  7902  16FF  30C8               	movlw	200
  7903  1700  022D               	subwf	_cont,w
  7904  1701  1803               	skipnc
  7905  1702  2F0B               	goto	i1l2970
  7906                           
  7907                           ;mainMaster.c: 63:                 if(cont < val){
  7908  1703  082C               	movf	_val,w
  7909  1704  022D               	subwf	_cont,w
  7910  1705  1803               	skipnc
  7911  1706  2F09               	goto	i1l310
  7912                           
  7913                           ;mainMaster.c: 64:                     PORTAbits.RA1 = 1;
  7914  1707  1485               	bsf	5,1	;volatile
  7915                           
  7916                           ;mainMaster.c: 65:                 }else{
  7917  1708  2F0C               	goto	i1l2972
  7918  1709                     i1l310:	
  7919                           
  7920                           ;mainMaster.c: 66:                     PORTAbits.RA1 = 0;
  7921  1709  1085               	bcf	5,1	;volatile
  7922  170A  2F0C               	goto	i1l2972
  7923  170B                     i1l2970:	
  7924                           
  7925                           ;mainMaster.c: 69:                 cont = 0;
  7926  170B  01AD               	clrf	_cont
  7927  170C                     i1l2972:	
  7928                           
  7929                           ;mainMaster.c: 71:             TMR0 = 56;
  7930  170C  3038               	movlw	56
  7931  170D  0081               	movwf	1	;volatile
  7932                           
  7933                           ;mainMaster.c: 72:             INTCONbits.T0IF = 0;
  7934  170E  110B               	bcf	11,2	;volatile
  7935  170F                     i1l313:	
  7936  170F  0872               	movf	??_manual_pwm+2,w
  7937  1710  008A               	movwf	10
  7938  1711  0E71               	swapf	(??_manual_pwm+1)^(0+4294967168),w
  7939  1712  0083               	movwf	3
  7940  1713  0EFE               	swapf	126,f
  7941  1714  0E7E               	swapf	126,w
  7942  1715  0009               	retfie
  7943  1716                     __end_of_manual_pwm:	
  7944  007E                     btemp	set	126	;btemp
  7945  007E                     wtemp0	set	126
  7946                           
  7947                           	psect	intentry
  7948  0004                     __pintentry:	
  7949                           ;incstack = 0
  7950                           ; Regs used in _manual_pwm: [wreg+status,2+status,0]
  7951                           
  7952  0004                     interrupt_function:	
  7953  007E                     saved_w	set	btemp
  7954  0004  00FE               	movwf	btemp
  7955  0005  0E03               	swapf	3,w
  7956  0006  00F1               	movwf	??_manual_pwm+1
  7957  0007  080A               	movf	10,w
  7958  0008  00F2               	movwf	??_manual_pwm+2
  7959  0009  160A  118A  2EF7   	ljmp	_manual_pwm


Data Sizes:
    Strings     296
    Constant    10
    Data        5
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     33      77
    BANK1            80      6       6
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), temp(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_34(CODE[4]), STR_33(CODE[5]), STR_32(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), temp(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_temp@temp_string	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_time@time_string	PTR unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), 

    day2	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), STR_11(CODE[10]), STR_10(CODE[10]), STR_9(CODE[10]), 
		 -> STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), STR_31(CODE[13]), STR_30(CODE[6]), STR_29(CODE[13]), 
		 -> STR_28(CODE[12]), STR_27(CODE[17]), STR_26(CODE[6]), STR_25(CODE[7]), 
		 -> STR_24(CODE[7]), STR_23(CODE[7]), STR_22(CODE[8]), STR_21(CODE[8]), 
		 -> STR_20(CODE[9]), STR_19(CODE[9]), STR_18(CODE[9]), STR_17(CODE[9]), 
		 -> STR_16(CODE[12]), STR_15(CODE[12]), STR_11(CODE[10]), STR_10(CODE[10]), 
		 -> STR_9(CODE[10]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[10]), STR_4(CODE[10]), time(BANK0[6]), temp(BANK0[6]), 
		 -> STR_3(CODE[11]), STR_2(CODE[7]), STR_1(CODE[31]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_Char
    _main->___awdiv
    _main->___awmod
    _main->_get_IR
    _main->_get_PIR
    _main->_get_day
    _main->_get_hall
    _main->_get_tripwire
    _main->_strcmp
    _main->_write_RTC
    _write_RTC->_I2C_Master_Write
    _setup->_I2C_Master_Init
    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _open_door->_I2C_Master_Write
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _close_door->_I2C_Master_Write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _manual_pwm in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_UART_Init
    _UART_Init->___aldiv
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _get_temp->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read

Critical Paths under _manual_pwm in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _manual_pwm in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _manual_pwm in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _manual_pwm in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   39216
                                              0 BANK1      6     6      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                     _Lcd_Write_Char
                   _Lcd_Write_String
                      _UART_TX_Empty
                         _UART_Write
                            ___awdiv
                            ___awmod
                             ___bmul
                         _close_door
                             _get_IR
                            _get_PIR
                            _get_day
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                          _open_door
                              _setup
                             _strcmp
                          _write_RTC
 ---------------------------------------------------------------------------------
 (1) _write_RTC                                            5     3      2    2284
                                              5 COMMON     3     1      2
                                              0 BANK0      2     2      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     511
                                              3 COMMON     5     3      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1880
                    _I2C_Master_Init
                           _Lcd_Init
                          _UART_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4    1118
                                              4 COMMON     2     2      0
                                             14 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     805
                                              3 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              0 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     542
                                              4 COMMON     4     4      0
                                             13 BANK0      4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     421
                                              3 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _open_door                                            0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                             5     5      0    3238
                                              2 BANK0      5     5      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             9     9      0    5666
                                             24 BANK0      9     9      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    19      4    1806
                                              9 BANK0     15    11      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     320
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     875
                                              3 COMMON     4     2      2
                                              0 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _close_door                                           0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2011
                                              3 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     793
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     604
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Empty                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    2558
                                              0 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              4 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    2210
                                              7 COMMON     1     0      1
                                              0 BANK0      6     6      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              4 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _manual_pwm                                           3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_TX_Empty
   _UART_Write
   ___awdiv
   ___awmod
   ___bmul
   _close_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_day
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _open_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
     _initOscilador
   _strcmp
   _write_RTC
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _manual_pwm (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      6       6       7        7.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     21      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5E      12        0.0%
ABS                  0      0      5E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Mar 09 22:11:15 2019

                                _i 0036                                  _j 0035  
                                _k 0078                                  pc 0002  
                   ___bmul@product 0075                        __CFG_CP$OFF 0000  
                      get_hall@key 0049                                 _IR 0037  
                     ___awdiv@sign 0048                                 fsr 0004  
                              l203 0B05                                l134 0844  
                              l160 16AF                                l152 17C5  
                              l161 16B2                                l153 17C8  
                              l401 04CB                                l162 16B6  
                              l163 16B7                                l323 016A  
                              l164 16BB                                l412 05C4  
                              l404 04DB                                l165 16BC  
                              l421 061C                                l166 16C0  
                              l238 166D                                l431 06CC  
                              l415 05E0                                l424 063A  
                              l328 014B                                l361 02DE  
                              l337 017C                                l418 05FE  
                              l338 018D                                l376 033C  
                              l395 04AB                                l654 0D18  
                              l398 04BB                                _GIE 005F  
                     __CFG_CPD$OFF 0000                                _PIR 0038  
                    ?_get_tripwire 0070                                _min 002A  
                              _val 002C                                fsr0 0004  
                              indf 0000                       ___awmod@sign 0048  
                     __CFG_LVP$OFF 0000                               l4004 007F  
                             l4022 00DB                               l4200 032F  
                             l4202 033F                               l4050 013E  
                             l2460 0895                               l4204 0340  
                             l4140 0267                               l4132 025E  
                             l4052 014E                               l2454 0879  
                             l2550 0AC5                               l4150 0285  
                             l4062 015D                               l3600 095A  
                             l2456 0887                               l2464 08A0  
                             l2560 0ADE                               l2552 0ACB  
                             l2544 0AB4                               l4312 057F  
                             l4240 03E0                               l4232 03BB  
                             l4224 03A1                               l4216 038D  
                             l4152 028B                               l4144 0273  
                             l3602 0968                               l2554 0AD1  
                             l2546 0AB9                               l4306 04F8  
                             l4250 03FF                               l4242 03EA  
                             l4154 0291                               l4146 0279  
                             l4162 02A4                               l4082 018F  
                             l4066 016C                               l3612 0989  
                             l3532 0BCF                               l2556 0AD7  
                             l2548 0ABF                               l2564 0AE3  
                             l4260 0429                               l4156 0297  
                             l4148 027F                               l4164 02C5  
                             l4092 019D                               l2910 0B5D  
                             l2902 0B4A                               l2670 1699  
                             l3710 0F63                               l2662 0852  
                             l3542 0C07                               l3534 0BDF  
                             l2558 0ADE                               l4414 06A2  
                             l4174 030D                               l4158 029D  
                             l4094 019E                               l3608 097E  
                             l3720 0F7A                               l4520 0F58  
                             l3704 0F3F                               l2664 085D  
                             l3560 0D29                               l4424 06B8  
                             l4280 04E9                               l4184 0312  
                             l4176 02F7                               l4168 02E1  
                             l4096 01A1                               l2906 0B55  
                             l2674 169F                               l2666 0865  
                             l3546 0C14                               l3570 0D49  
                             l4258 041F                               l4098 01A2  
                             l3732 0FA1                               l4516 02AE  
                             l3726 0F7C                               l3750 0FFB  
                             l3582 0D7E                               l4518 0AEB  
                             l3568 0D39                               l4384 0658  
                             l3746 0FB4                               l3738 0FB0  
                             l3586 0D8C                               l3578 0D71  
                             l3922 17E3                               l2884 0B1E  
                             l3940 0A21                               l3748 0F19  
                             l3924 17D4                               l4388 065C  
                             l2894 0B26                               l2878 0B13  
                             l3678 0EF8                               l3926 17FA  
                             l3768 0A8B                               l3784 0992  
                             l2896 0B34                               l3952 0A2E  
                             l3944 0A28                               l3864 0E17  
                             l3954 0A3C                               l3962 0A55  
                             l3966 0A5D                               l3958 0A4A  
                             l3990 0061                               STR_1 071C  
                             STR_2 0816                        get_time@min 004C  
                             STR_3 078A                               STR_4 0795  
                             STR_5 07A9                               STR_6 07D1  
                             STR_7 07B3                               STR_8 07C7  
                             STR_9 079F                               _BRGH 04C2  
                             _CREN 00C4                               u2135 08EE  
                             u2065 087C                               u2085 088D  
                             u4005 0CEB                               u2095 0896  
                             u2505 0B29                               u2525 0B35  
                             u2535 0B41                               u5007 024A  
                             u2545 0B4B                               u4065 0A31  
                             u3505 0BD3                               u5017 025A  
                             u5027 04F1                               u4085 0A42  
                             u3525 0BE1                               u5037 069A  
                             u4095 0A4B                               u3535 0BF6  
                             u5047 0C29                               u3615 0D4B  
                             u4335 02D8                               u3705 0975  
                             u3545 0C08                               u5057 0C39  
                             u3625 0D60                               u3715 097F  
                             u5067 0C49                               u3635 0D72  
                             u3811 0ED5                               _PEIE 005E  
                             u3812 0ED6                               u5077 08FE  
                             u3813 0EDB                               u3805 0EBE  
                             u3814 0EDC                               u5087 090F  
                             u3735 08B7                               u3815 0EE1  
                             u3816 0EE2                               u5097 16D3  
                             u3915 0A70                               u3675 095D  
                             u3595 0D3D                               u3771 0E75  
                             u3755 0E45                               u3772 0E76  
                             _RCEN 048B                               _RCIF 0065  
                             u3773 0E7B                               u3765 0E5E  
                             u4645 0511                               u3774 0E7C  
                             u3935 0A97                               u3695 0969  
                             u3855 0F97                               u3775 0E81  
                             u4655 054A                               u3776 0E82  
                             u3795 0EA5                               u4907 008C  
                             u4917 00CF                               u3975 0DED  
                             u4927 01BA                               u4937 01CC  
                             u3995 0CCC                               u4947 01DE  
                             u4957 01F0                               u4967 0202  
                             u4977 0214                               u4897 006E  
                             u4987 0226                               u4997 0238  
                             _TMR0 0001                               _SPEN 00C7  
                             _TRMT 04C1                               _TXEN 04C5  
                             _SYNC 04C4                       __CFG_WRT$OFF 0000  
                             _day1 0079                               _day2 0025  
                             _bank 002E                  ?_Lcd_Write_String 0047  
 __end_of_I2C_Master_RepeatedStart 165C                               _cont 002D  
                             _door 003A                               _main 003B  
                             _hour 002B                               _temp 003B  
                             _time 0041                               _trip 0039  
                             btemp 007E                               start 000C  
               ??_Lcd_Write_String 0049                      __CFG_IESO$OFF 0000  
                  __end_of_Lcd_Cmd 16DC                  ___bmul@multiplier 0076  
                    __CFG_MCLRE$ON 0000                get_temp@temp_string 0066  
                 ?_I2C_Master_Init 0054                   ?_I2C_Master_Read 0073  
                 ?_I2C_Master_Wait 0070                   ?_I2C_Master_Stop 0070  
                  __end_of___aldiv 0D95                              ?_main 0070  
                  __end_of___awdiv 0B62                              STR_10 07BD  
                            STR_11 074F                              STR_12 082F  
                            STR_20 07ED                              STR_13 0829  
                            STR_21 07FF                              STR_30 0835  
                            STR_14 0823                              STR_22 0807  
                            STR_23 0800                              STR_15 0766  
                            STR_31 074C                              STR_24 0808  
                            STR_32 0841                              STR_16 0772  
                            STR_33 083B                              STR_25 080F  
                            STR_17 07E4                      __CFG_WDTE$OFF 0000  
                            STR_34 0840                              STR_26 081D  
                            STR_18 07F6                              STR_19 07DB  
                            STR_27 073B                              STR_28 077E  
                  __end_of___awmod 0A62                              STR_29 0759  
                     get_time@hour 004B                              _ANSEL 0188  
                  __end_of___lldiv 0C1D                     ??_get_tripwire 0077  
                  ___awdiv@divisor 0073                    __end_of___lwdiv 098E  
                            i1l310 1709                              i1l313 170F  
                  __end_of___lwmod 08A5                    ___awdiv@counter 0047  
                            _RCREG 001A                              _SPBRG 0099  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                              _PORTD 0008  
                            _PORTE 0009            __size_of_Lcd_Set_Cursor 0050  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087                              _TRISD 0088  
                            _SSPIE 0463                              _TRISE 0089  
                            _SSPIF 0063                              _TXREG 0019  
                  __end_of_get_PIR 175C                     __CFG_FCMEN$OFF 0000  
                  __end_of_get_day 0950                        ?_UART_Write 0070  
               __size_of_UART_Init 00D8                              _alarm 002F  
          __size_of_Lcd_Shift_Left 000B                    __end_of_dpowers 071C  
                            _setup 0B62                              _state 007A  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 1000                   __end_of_Lcd_Init 0C7D  
                 __end_of_Lcd_Port 16C2                    __initialization 000F  
                     __end_of_main 06E3             __size_of_initOscilador 0055  
                           ??_main 00A0                 __size_of_Lcd_Clear 000B  
                ?_I2C_Master_Start 0070                  ?_I2C_Master_Write 0073  
               ??_I2C_Master_Start 0073                 ??_I2C_Master_Write 0075  
                 ___awdiv@dividend 0075                             ?_setup 0070  
                           _ANSELH 0189                             i1l2970 170B  
                           i1l2972 170C                          ??_Lcd_Cmd 0074  
          __size_of_Lcd_Write_Char 0039                             _SSPADD 0093  
                           _TRISC3 043B                             _TRISC4 043C  
                           _TRISC6 043E                             _TRISC7 043F  
                           _SSPCON 0014                             _SSPBUF 0013  
                   __CFG_PWRTE$OFF 0000           _I2C_Master_RepeatedStart 1655  
                 __end_of_get_hall 177F                  __end_of_UART_Init 0F12  
                 __end_of_get_temp 0E3A                   __end_of_get_time 0D06  
                           ___bmul 1697                __size_of_UART_Write 000A  
                        ??___aldiv 0073                          ??___awdiv 0077  
                        ??___awmod 0077                             _change 0034  
                        ??___lldiv 0073                             _get_IR 1716  
                        ??___lwdiv 0077                          ??___lwmod 004E  
         __size_of_Lcd_Shift_Right 000B                   ___awdiv@quotient 0049  
                           _newmin 0027                    ___awmod@divisor 0073  
                        ??_get_PIR 0077                    ___awmod@counter 0047  
            __end_of_UART_TX_Empty 1647                          ??_get_day 0077  
                           _strcat 084D                             _strcmp 17D0  
                           saved_w 007E                          ??_sprintf 0054  
                  Lcd_Set_Cursor@a 0049                    Lcd_Set_Cursor@b 0077  
                  Lcd_Set_Cursor@y 004B                    Lcd_Set_Cursor@z 004A  
          __end_of__initialization 0037                      _initOscilador 0AB2  
                __end_of_Lcd_Clear 1681               __end_of_get_tripwire 17A2  
              ___bmul@multiplicand 0073                     __pcstackCOMMON 0070  
                     __pidataBANK0 163C                      __end_of_setup 0BBD  
                   _Lcd_Set_Cursor 0A62                     _OPTION_REGbits 0081  
                   _Lcd_Shift_Left 1681                          ?_Lcd_Init 0070  
                        ?_Lcd_Port 0070                            ??_setup 0078  
                       __pbssBANK0 0020                     ?_initOscilador 0070  
                       __pmaintext 003B                            ?___bmul 0073  
                          ?_get_IR 0070                         __pintentry 0004  
               __size_of_open_door 001B          __size_of_Lcd_Write_String 0041  
           __end_of_Lcd_Set_Cursor 0AB2                            ?_strcat 0073  
                          ?_strcmp 0073             __end_of_Lcd_Shift_Left 168C  
                ??_Lcd_Shift_Right 0077                         _close_door 16DC  
                     ??_UART_Write 0073                         ??_Lcd_Init 0047  
                       ??_Lcd_Port 0073                            _SSPCON2 0091  
                        ?_get_hall 0070                            _SSPSTAT 0094  
                        ?_get_temp 0070                          ?_get_time 0070  
                       __stringtab 0700                initOscilador@option 0075  
                   _Lcd_Write_Char 08DD                            _Lcd_Cmd 16C2  
               __size_of_write_RTC 0046                         _manual_pwm 16F7  
                          ___aldiv 0D06                    __size_of___bmul 0011  
                          ___awdiv 0B07                            ___awmod 0A15  
                          ___lldiv 0BBD                 __end_of_UART_Write 1676  
                          ___lwdiv 0950                            ___lwmod 0871  
                  __size_of_get_IR 0023                            _change1 0033  
                          _change2 0032                            _change3 0031  
                          _change4 0030                    ?_Lcd_Set_Cursor 0077  
                          _get_PIR 1739                            __ptext1 09CF  
                          __ptext2 17D0                            __ptext3 0B62  
                          __ptext4 0AB2                            __ptext5 0E3A  
                          __ptext6 0D06                            __ptext7 0C1D  
                          __ptext8 08A5                            __ptext9 0BBD  
                          _get_day 0916                get_time@time_string 004D  
                  __size_of_strcat 0024                    __size_of_strcmp 0030  
                          _dpowers 0712                    ?_Lcd_Shift_Left 0070  
                 ___awmod@dividend 0075                   ___aldiv@dividend 004B  
                          _newhour 0028           __size_of_I2C_Master_Init 0038  
         __size_of_I2C_Master_Read 002E           __size_of_I2C_Master_Wait 0009  
         __size_of_I2C_Master_Stop 0007                    ??_initOscilador 0073  
                       ??_get_hall 0077                            _sprintf 0F12  
                          clrloop0 1665             __end_of_Lcd_Write_Char 0916  
                       ??_get_temp 005F                         ??_get_time 0049  
             end_of_initialization 0037              __size_of_get_tripwire 0023  
       ??_I2C_Master_RepeatedStart 0073                  __end_of_open_door 06FE  
                       get_PIR@PIR 0049          __size_of_I2C_Master_Start 0007  
        __size_of_I2C_Master_Write 0008                    ___lldiv@divisor 0047  
                  ___lldiv@counter 0053                          _RCSTAbits 0018  
                 ___aldiv@quotient 0051                   I2C_Master_Init@c 0054  
                 I2C_Master_Read@a 0073                          Lcd_Port@a 0073  
                     write_RTC@day 0076                       __pstringtext 0700  
                          strcmp@r 0047                          _UART_Init 0E3A  
                        _PORTAbits 0005                          _PORTBbits 0006  
                        _PORTCbits 0007                          _PORTDbits 0008  
                        _PORTEbits 0009                     UART_Write@data 0073  
                __end_of_write_RTC 0A15                       _get_tripwire 177F  
                      ?_close_door 0070                          _TRISCbits 0087  
                  ?_Lcd_Write_Char 0070                  Lcd_Write_String@a 0047  
                Lcd_Write_String@i 004C                          _Lcd_Clear 1676  
                      ?_manual_pwm 0070                     __end_of___bmul 16A8  
                 _Lcd_Write_String 098E                         ?_UART_Init 0055  
                   __end_of_get_IR 1739                     __end_of_strcat 0871  
                   __end_of_strcmp 1800                start_initialization 000F  
                __size_of_Lcd_Init 0060                  __size_of_Lcd_Port 001A  
                ??_I2C_Master_Init 0074                  ??_I2C_Master_Read 0075  
                ??_I2C_Master_Wait 0073                  ??_I2C_Master_Stop 0073  
           __size_of_UART_TX_Empty 0006           __CFG_FOSC$INTRC_NOCLKOUT 0000  
                       ?_Lcd_Clear 0070                           ??___bmul 0074  
              __size_of_close_door 001B                    _Lcd_Shift_Right 168C  
                         ??_get_IR 0077                        __pdataBANK0 0068  
                  Lcd_Write_Char@a 0077                    Lcd_Write_Char@y 0076  
                         ??_strcat 0074                           ??_strcmp 0075  
                 write_RTC@minutes 0075                        __pbssCOMMON 0078  
                        ___latbits 0002                      __pcstackBANK0 0047  
                    __pcstackBANK1 00A0                __size_of_manual_pwm 001F  
                __size_of_get_hall 0023                           ?_Lcd_Cmd 0070  
                __size_of_get_temp 00A5                  __size_of_get_time 0089  
                      sprintf@flag 0059                        sprintf@prec 005A  
                 _I2C_Master_Start 1647                   _I2C_Master_Write 165C  
                 ___lwdiv@dividend 0075                   ??_Lcd_Set_Cursor 0047  
                  get_temp@decimal 0062                           ?___aldiv 0047  
                         ?___awdiv 0073                           ?___awmod 0073  
                         ?___lldiv 0047                           ?___lwdiv 0073  
                         ?___lwmod 004A                   ??_Lcd_Shift_Left 0077  
                      ??_UART_Init 0059                           ?_get_PIR 0070  
                         ?_get_day 0070                    get_temp@tempLSB 0067  
                  get_temp@tempMSB 0065                      _UART_TX_Empty 1641  
                 ___lwdiv@quotient 0048                           ?_sprintf 0050  
                       UART_Init@x 0074                     __size_of_setup 005B  
                  ___aldiv@divisor 0047                  interrupt_function 0004  
                  ___aldiv@counter 004F            __end_of_Lcd_Shift_Right 1697  
                        clear_ram0 1664                          _passwordu 0020  
                        _open_door 06E3                           Lcd_Cmd@a 0076  
                        _seguridad 0029                        ??_Lcd_Clear 0077  
                UART_Init@baudrate 0055                        __stringbase 0712  
                   ?_UART_TX_Empty 0070                   ??_Lcd_Write_Char 0074  
                     ??_close_door 0075                           _Lcd_Init 0C1D  
                         _Lcd_Port 16A8                          _write_RTC 09CF  
              I2C_Master_Read@temp 0047              __end_of_initOscilador 0B07  
         __end_of_Lcd_Write_String 09CF                   __size_of_Lcd_Cmd 001A  
                       ?_open_door 0070                       ??_manual_pwm 0070  
               __end_of_close_door 16F7                   __size_of___aldiv 008F  
__size_of_I2C_Master_RepeatedStart 0007                   __size_of___awdiv 005B  
                 __size_of___awmod 004D          ?_I2C_Master_RepeatedStart 0070  
                 __size_of___lldiv 0060                   __size_of___lwdiv 003E  
                 __size_of___lwmod 0034                 __end_of__stringtab 0712  
                 __size_of_get_PIR 0023                   __size_of_get_day 003A  
                       sprintf@val 005B                    _I2C_Master_Init 08A5  
                  _I2C_Master_Read 17A2                    _I2C_Master_Wait 0844  
                       strcat@from 0073                    _I2C_Master_Stop 164E  
                  ___lwdiv@divisor 0073                    ___lwdiv@counter 0047  
                         __ptext10 06E3                           __ptext11 177F  
                         __ptext20 0916                           __ptext12 0C7D  
                         __ptext21 1655                           __ptext13 0D95  
                         __ptext30 0A15                           __ptext22 1739  
                         __ptext14 084D                           __ptext31 0B07  
                         __ptext23 1716                           __ptext15 0F12  
                         __ptext40 16C2                           __ptext32 166C  
                         __ptext24 17A2                           __ptext16 0871  
                         __ptext41 16A8                           __ptext33 1641  
                         __ptext25 16DC                           __ptext17 0950  
                         __ptext42 16F7                           __ptext34 098E  
                         __ptext26 165C                           __ptext18 1697  
                         __ptext35 08DD                           __ptext27 164E  
                         __ptext19 175C                           __ptext36 168C  
                         __ptext28 1647                           __ptext37 1681  
                         __ptext29 0844                           __ptext38 0A62  
                         __ptext39 1676                         ?_write_RTC 0075  
                __CFG_BOR4V$BOR40V 0000                           _get_hall 175C  
                         _get_temp 0D95                           _get_time 0C7D  
                 __size_of_sprintf 00EE                 __end_of_manual_pwm 1716  
                    __size_of_main 06A8                   ?_Lcd_Shift_Right 0070  
                         get_IR@IR 0049                           _password 0068  
                         get_day@d 0049                    ??_UART_TX_Empty 0073  
         __end_of_I2C_Master_Start 164E           __end_of_I2C_Master_Write 1664  
                       _INTCONbits 000B                 Lcd_Write_Char@temp 0075  
                         intlevel1 0000                          sprintf@ap 0058  
                        sprintf@sp 005D                   ___lwmod@dividend 004C  
                 ___lldiv@dividend 004B                        ??_open_door 0075  
                        stringcode 070A                         _OSCCONbits 008F  
          __end_of_I2C_Master_Init 08DD            __end_of_I2C_Master_Read 17D0  
          __end_of_I2C_Master_Wait 084D            __end_of_I2C_Master_Stop 1655  
               Lcd_Set_Cursor@temp 004C                      write_RTC@hour 0077  
                         sprintf@c 005E                           sprintf@f 0050  
                         strcat@cp 0076                           strcat@to 0075  
                         strcmp@s1 0048                           strcmp@s2 0073  
                 ___lldiv@quotient 004F                  I2C_Master_Write@d 0073  
                  ___lwmod@divisor 004A                    ___lwmod@counter 004F  
                 get_tripwire@trip 0049                           stringtab 0700  
                     ___aldiv@sign 0050                         _UART_Write 166C  
                      _SSPCON2bits 0091                        ??_write_RTC 0047  
                       _SSPCONbits 0014  

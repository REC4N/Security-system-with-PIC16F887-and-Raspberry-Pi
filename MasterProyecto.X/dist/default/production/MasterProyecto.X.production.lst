

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Mar 09 21:47:28 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	intentry,global,class=CODE,delta=2
    58                           	dabs	1,0x7E,2
    59  0000                     
    60                           ; Version 2.05
    61                           ; Generated 20/12/2018 GMT
    62                           ; 
    63                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC16F887 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000D                     	;# 
   108  000E                     	;# 
   109  000E                     	;# 
   110  000F                     	;# 
   111  0010                     	;# 
   112  0011                     	;# 
   113  0012                     	;# 
   114  0013                     	;# 
   115  0014                     	;# 
   116  0015                     	;# 
   117  0015                     	;# 
   118  0016                     	;# 
   119  0017                     	;# 
   120  0018                     	;# 
   121  0019                     	;# 
   122  001A                     	;# 
   123  001B                     	;# 
   124  001B                     	;# 
   125  001C                     	;# 
   126  001D                     	;# 
   127  001E                     	;# 
   128  001F                     	;# 
   129  0081                     	;# 
   130  0085                     	;# 
   131  0086                     	;# 
   132  0087                     	;# 
   133  0088                     	;# 
   134  0089                     	;# 
   135  008C                     	;# 
   136  008D                     	;# 
   137  008E                     	;# 
   138  008F                     	;# 
   139  0090                     	;# 
   140  0091                     	;# 
   141  0092                     	;# 
   142  0093                     	;# 
   143  0093                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0097                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009A                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  0105                     	;# 
   158  0107                     	;# 
   159  0108                     	;# 
   160  0109                     	;# 
   161  010C                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  0185                     	;# 
   167  0187                     	;# 
   168  0188                     	;# 
   169  0189                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  0007                     	;# 
   180  0008                     	;# 
   181  0009                     	;# 
   182  000A                     	;# 
   183  000B                     	;# 
   184  000C                     	;# 
   185  000D                     	;# 
   186  000E                     	;# 
   187  000E                     	;# 
   188  000F                     	;# 
   189  0010                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0015                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0017                     	;# 
   198  0018                     	;# 
   199  0019                     	;# 
   200  001A                     	;# 
   201  001B                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  001D                     	;# 
   205  001E                     	;# 
   206  001F                     	;# 
   207  0081                     	;# 
   208  0085                     	;# 
   209  0086                     	;# 
   210  0087                     	;# 
   211  0088                     	;# 
   212  0089                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  008F                     	;# 
   217  0090                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0093                     	;# 
   222  0093                     	;# 
   223  0094                     	;# 
   224  0095                     	;# 
   225  0096                     	;# 
   226  0097                     	;# 
   227  0098                     	;# 
   228  0099                     	;# 
   229  009A                     	;# 
   230  009B                     	;# 
   231  009C                     	;# 
   232  009D                     	;# 
   233  009E                     	;# 
   234  009F                     	;# 
   235  0105                     	;# 
   236  0107                     	;# 
   237  0108                     	;# 
   238  0109                     	;# 
   239  010C                     	;# 
   240  010C                     	;# 
   241  010D                     	;# 
   242  010E                     	;# 
   243  010F                     	;# 
   244  0185                     	;# 
   245  0187                     	;# 
   246  0188                     	;# 
   247  0189                     	;# 
   248  018C                     	;# 
   249  018D                     	;# 
   250                           
   251                           	psect	idataBANK0
   252  1687                     __pidataBANK0:	
   253                           
   254                           ;initializer for _password
   255  1687  3401               	retlw	1
   256  1688  3405               	retlw	5
   257  1689  3401               	retlw	1
   258  168A  3400               	retlw	0
   259  168B  3403               	retlw	3
   260                           
   261                           	psect	stringtext
   262  0700                     __pstringtext:	
   263  0700                     stringtab:	
   264  0700                     __stringtab:	
   265                           
   266                           ;	String table - string pointers are 2 bytes each
   267  0700  1BFF               	btfsc	btemp+1,7
   268  0701  2F0A               	ljmp	stringcode
   269  0702  1383               	bcf	3,7
   270  0703  187F               	btfsc	btemp+1,0
   271  0704  1783               	bsf	3,7
   272  0705  0800               	movf	0,w
   273  0706  0A84               	incf	4,f
   274  0707  1903               	skipnz
   275  0708  0AFF               	incf	btemp+1,f
   276  0709  0008               	return
   277  070A                     stringcode:	
   278  070A  087F               	movf	btemp+1,w
   279  070B  397F               	andlw	127
   280  070C  008A               	movwf	10
   281  070D  0804               	movf	4,w
   282  070E  0A84               	incf	4,f
   283  070F  1903               	skipnz
   284  0710  0AFF               	incf	btemp+1,f
   285  0711  0082               	movwf	2
   286  0712                     __stringbase:	
   287  0712                     __end_of__stringtab:	
   288  0712                     _dpowers:	
   289  0712  3401               	retlw	1
   290  0713  3400               	retlw	0
   291  0714  340A               	retlw	10
   292  0715  3400               	retlw	0
   293  0716  3464               	retlw	100
   294  0717  3400               	retlw	0
   295  0718  34E8               	retlw	232
   296  0719  3403               	retlw	3
   297  071A  3410               	retlw	16
   298  071B  3427               	retlw	39
   299  071C                     __end_of_dpowers:	
   300  0009                     _PORTE	set	9
   301  0007                     _PORTC	set	7
   302  0005                     _PORTA	set	5
   303  0006                     _PORTB	set	6
   304  0009                     _PORTEbits	set	9
   305  0008                     _PORTD	set	8
   306  0007                     _PORTCbits	set	7
   307  0018                     _RCSTAbits	set	24
   308  0014                     _SSPCONbits	set	20
   309  0008                     _PORTDbits	set	8
   310  0001                     _TMR0	set	1
   311  0005                     _PORTAbits	set	5
   312  000B                     _INTCONbits	set	11
   313  0019                     _TXREG	set	25
   314  001A                     _RCREG	set	26
   315  0006                     _PORTBbits	set	6
   316  0013                     _SSPBUF	set	19
   317  0014                     _SSPCON	set	20
   318  0065                     _RCIF	set	101
   319  00C4                     _CREN	set	196
   320  00C7                     _SPEN	set	199
   321  0063                     _SSPIF	set	99
   322  005E                     _PEIE	set	94
   323  005F                     _GIE	set	95
   324  0081                     _OPTION_REGbits	set	129
   325  0089                     _TRISE	set	137
   326  0087                     _TRISC	set	135
   327  0088                     _TRISD	set	136
   328  0085                     _TRISA	set	133
   329  0086                     _TRISB	set	134
   330  0099                     _SPBRG	set	153
   331  008F                     _OSCCONbits	set	143
   332  0091                     _SSPCON2bits	set	145
   333  0087                     _TRISCbits	set	135
   334  0094                     _SSPSTAT	set	148
   335  0093                     _SSPADD	set	147
   336  0091                     _SSPCON2	set	145
   337  04C1                     _TRMT	set	1217
   338  04C5                     _TXEN	set	1221
   339  043E                     _TRISC6	set	1086
   340  043F                     _TRISC7	set	1087
   341  04C4                     _SYNC	set	1220
   342  04C2                     _BRGH	set	1218
   343  0463                     _SSPIE	set	1123
   344  043C                     _TRISC4	set	1084
   345  043B                     _TRISC3	set	1083
   346  048B                     _RCEN	set	1163
   347  0188                     _ANSEL	set	392
   348  0189                     _ANSELH	set	393
   349  071C                     STR_1:	
   350  071C  3449               	retlw	73	;'I'
   351  071D  346E               	retlw	110	;'n'
   352  071E  3469               	retlw	105	;'i'
   353  071F  3463               	retlw	99	;'c'
   354  0720  3469               	retlw	105	;'i'
   355  0721  3461               	retlw	97	;'a'
   356  0722  346E               	retlw	110	;'n'
   357  0723  3464               	retlw	100	;'d'
   358  0724  346F               	retlw	111	;'o'
   359  0725  3420               	retlw	32	;' '
   360  0726  3453               	retlw	83	;'S'
   361  0727  3469               	retlw	105	;'i'
   362  0728  3473               	retlw	115	;'s'
   363  0729  3474               	retlw	116	;'t'
   364  072A  3465               	retlw	101	;'e'
   365  072B  346D               	retlw	109	;'m'
   366  072C  3461               	retlw	97	;'a'
   367  072D  3420               	retlw	32	;' '
   368  072E  3464               	retlw	100	;'d'
   369  072F  3465               	retlw	101	;'e'
   370  0730  3420               	retlw	32	;' '
   371  0731  3453               	retlw	83	;'S'
   372  0732  3465               	retlw	101	;'e'
   373  0733  3467               	retlw	103	;'g'
   374  0734  3475               	retlw	117	;'u'
   375  0735  3472               	retlw	114	;'r'
   376  0736  3469               	retlw	105	;'i'
   377  0737  3464               	retlw	100	;'d'
   378  0738  3461               	retlw	97	;'a'
   379  0739  3464               	retlw	100	;'d'
   380  073A  3400               	retlw	0
   381  073B                     STR_29:	
   382  073B  3420               	retlw	32	;' '
   383  073C  3420               	retlw	32	;' '
   384  073D  3420               	retlw	32	;' '
   385  073E  3420               	retlw	32	;' '
   386  073F  3420               	retlw	32	;' '
   387  0740  3420               	retlw	32	;' '
   388  0741  3420               	retlw	32	;' '
   389  0742  3420               	retlw	32	;' '
   390  0743  3420               	retlw	32	;' '
   391  0744  3420               	retlw	32	;' '
   392  0745  3420               	retlw	32	;' '
   393  0746  3420               	retlw	32	;' '
   394  0747  3400               	retlw	0
   395  0748                     STR_27:	
   396  0748  3453               	retlw	83	;'S'
   397  0749  3465               	retlw	101	;'e'
   398  074A  3463               	retlw	99	;'c'
   399  074B  3475               	retlw	117	;'u'
   400  074C  3472               	retlw	114	;'r'
   401  074D  3469               	retlw	105	;'i'
   402  074E  3474               	retlw	116	;'t'
   403  074F  3479               	retlw	121	;'y'
   404  0750  3420               	retlw	32	;' '
   405  0751  344F               	retlw	79	;'O'
   406  0752  3446               	retlw	70	;'F'
   407  0753  3446               	retlw	70	;'F'
   408  0754  3400               	retlw	0
   409  0755                     STR_13:	
   410  0755  3444               	retlw	68	;'D'
   411  0756  344F               	retlw	79	;'O'
   412  0757  344F               	retlw	79	;'O'
   413  0758  3452               	retlw	82	;'R'
   414  0759  3420               	retlw	32	;' '
   415  075A  344F               	retlw	79	;'O'
   416  075B  3450               	retlw	80	;'P'
   417  075C  3445               	retlw	69	;'E'
   418  075D  344E               	retlw	78	;'N'
   419  075E  3420               	retlw	32	;' '
   420  075F  3420               	retlw	32	;' '
   421  0760  3400               	retlw	0
   422  0761                     STR_14:	
   423  0761  3444               	retlw	68	;'D'
   424  0762  344F               	retlw	79	;'O'
   425  0763  344F               	retlw	79	;'O'
   426  0764  3452               	retlw	82	;'R'
   427  0765  3420               	retlw	32	;' '
   428  0766  3443               	retlw	67	;'C'
   429  0767  344C               	retlw	76	;'L'
   430  0768  344F               	retlw	79	;'O'
   431  0769  3453               	retlw	83	;'S'
   432  076A  3445               	retlw	69	;'E'
   433  076B  3444               	retlw	68	;'D'
   434  076C  3400               	retlw	0
   435  076D                     STR_26:	
   436  076D  3453               	retlw	83	;'S'
   437  076E  3465               	retlw	101	;'e'
   438  076F  3463               	retlw	99	;'c'
   439  0770  3475               	retlw	117	;'u'
   440  0771  3472               	retlw	114	;'r'
   441  0772  3469               	retlw	105	;'i'
   442  0773  3474               	retlw	116	;'t'
   443  0774  3479               	retlw	121	;'y'
   444  0775  3420               	retlw	32	;' '
   445  0776  344F               	retlw	79	;'O'
   446  0777  344E               	retlw	78	;'N'
   447  0778  3400               	retlw	0
   448  0779                     STR_2:	
   449  0779  344C               	retlw	76	;'L'
   450  077A  3455               	retlw	85	;'U'
   451  077B  344E               	retlw	78	;'N'
   452  077C  3445               	retlw	69	;'E'
   453  077D  3453               	retlw	83	;'S'
   454  077E  3420               	retlw	32	;' '
   455  077F  3420               	retlw	32	;' '
   456  0780  3420               	retlw	32	;' '
   457  0781  3420               	retlw	32	;' '
   458  0782  3400               	retlw	0
   459  0783                     STR_7:	
   460  0783  3453               	retlw	83	;'S'
   461  0784  3441               	retlw	65	;'A'
   462  0785  3442               	retlw	66	;'B'
   463  0786  3441               	retlw	65	;'A'
   464  0787  3444               	retlw	68	;'D'
   465  0788  344F               	retlw	79	;'O'
   466  0789  3420               	retlw	32	;' '
   467  078A  3420               	retlw	32	;' '
   468  078B  3420               	retlw	32	;' '
   469  078C  3400               	retlw	0
   470  078D                     STR_3:	
   471  078D  344D               	retlw	77	;'M'
   472  078E  3441               	retlw	65	;'A'
   473  078F  3452               	retlw	82	;'R'
   474  0790  3454               	retlw	84	;'T'
   475  0791  3445               	retlw	69	;'E'
   476  0792  3453               	retlw	83	;'S'
   477  0793  3420               	retlw	32	;' '
   478  0794  3420               	retlw	32	;' '
   479  0795  3420               	retlw	32	;' '
   480  0796  3400               	retlw	0
   481  0797                     STR_5:	
   482  0797  344A               	retlw	74	;'J'
   483  0798  3455               	retlw	85	;'U'
   484  0799  3445               	retlw	69	;'E'
   485  079A  3456               	retlw	86	;'V'
   486  079B  3445               	retlw	69	;'E'
   487  079C  3453               	retlw	83	;'S'
   488  079D  3420               	retlw	32	;' '
   489  079E  3420               	retlw	32	;' '
   490  079F  3420               	retlw	32	;' '
   491  07A0  3400               	retlw	0
   492  07A1                     STR_8:	
   493  07A1  3444               	retlw	68	;'D'
   494  07A2  344F               	retlw	79	;'O'
   495  07A3  344D               	retlw	77	;'M'
   496  07A4  3449               	retlw	73	;'I'
   497  07A5  344E               	retlw	78	;'N'
   498  07A6  3447               	retlw	71	;'G'
   499  07A7  344F               	retlw	79	;'O'
   500  07A8  3420               	retlw	32	;' '
   501  07A9  3420               	retlw	32	;' '
   502  07AA  3400               	retlw	0
   503  07AB                     STR_6:	
   504  07AB  3456               	retlw	86	;'V'
   505  07AC  3449               	retlw	73	;'I'
   506  07AD  3445               	retlw	69	;'E'
   507  07AE  3452               	retlw	82	;'R'
   508  07AF  344E               	retlw	78	;'N'
   509  07B0  3445               	retlw	69	;'E'
   510  07B1  3453               	retlw	83	;'S'
   511  07B2  3420               	retlw	32	;' '
   512  07B3  3420               	retlw	32	;' '
   513  07B4  3400               	retlw	0
   514  07B5                     STR_25:	
   515  07B5  3450               	retlw	80	;'P'
   516  07B6  3441               	retlw	65	;'A'
   517  07B7  3453               	retlw	83	;'S'
   518  07B8  3453               	retlw	83	;'S'
   519  07B9  3457               	retlw	87	;'W'
   520  07BA  344F               	retlw	79	;'O'
   521  07BB  3452               	retlw	82	;'R'
   522  07BC  3444               	retlw	68	;'D'
   523  07BD  343A               	retlw	58	;':'
   524  07BE  3400               	retlw	0
   525  07BF                     STR_4:	
   526  07BF  344D               	retlw	77	;'M'
   527  07C0  3449               	retlw	73	;'I'
   528  07C1  3445               	retlw	69	;'E'
   529  07C2  3452               	retlw	82	;'R'
   530  07C3  3443               	retlw	67	;'C'
   531  07C4  344F               	retlw	79	;'O'
   532  07C5  344C               	retlw	76	;'L'
   533  07C6  3445               	retlw	69	;'E'
   534  07C7  3453               	retlw	83	;'S'
   535  07C8  3400               	retlw	0
   536  07C9                     STR_17:	
   537  07C9  3442               	retlw	66	;'B'
   538  07CA  3441               	retlw	65	;'A'
   539  07CB  344E               	retlw	78	;'N'
   540  07CC  344B               	retlw	75	;'K'
   541  07CD  3420               	retlw	32	;' '
   542  07CE  344F               	retlw	79	;'O'
   543  07CF  344E               	retlw	78	;'N'
   544  07D0  3420               	retlw	32	;' '
   545  07D1  3400               	retlw	0
   546  07D2                     STR_15:	
   547  07D2  3454               	retlw	84	;'T'
   548  07D3  3452               	retlw	82	;'R'
   549  07D4  3449               	retlw	73	;'I'
   550  07D5  3450               	retlw	80	;'P'
   551  07D6  3420               	retlw	32	;' '
   552  07D7  344F               	retlw	79	;'O'
   553  07D8  344E               	retlw	78	;'N'
   554  07D9  3420               	retlw	32	;' '
   555  07DA  3400               	retlw	0
   556  07DB                     STR_18:	
   557  07DB  3442               	retlw	66	;'B'
   558  07DC  3441               	retlw	65	;'A'
   559  07DD  344E               	retlw	78	;'N'
   560  07DE  344B               	retlw	75	;'K'
   561  07DF  3420               	retlw	32	;' '
   562  07E0  344F               	retlw	79	;'O'
   563  07E1  3446               	retlw	70	;'F'
   564  07E2  3446               	retlw	70	;'F'
   565  07E3  3400               	retlw	0
   566  07E4                     STR_16:	
   567  07E4  3454               	retlw	84	;'T'
   568  07E5  3452               	retlw	82	;'R'
   569  07E6  3449               	retlw	73	;'I'
   570  07E7  3450               	retlw	80	;'P'
   571  07E8  3420               	retlw	32	;' '
   572  07E9  344F               	retlw	79	;'O'
   573  07EA  3446               	retlw	70	;'F'
   574  07EB  3446               	retlw	70	;'F'
   575  07EC  3400               	retlw	0
   576  07ED                     STR_19:	
   577  07ED  3450               	retlw	80	;'P'
   578  07EE  3449               	retlw	73	;'I'
   579  07EF  3452               	retlw	82	;'R'
   580  07F0  3420               	retlw	32	;' '
   581  07F1  344F               	retlw	79	;'O'
   582  07F2  344E               	retlw	78	;'N'
   583  07F3  3420               	retlw	32	;' '
   584  07F4  3400               	retlw	0
   585  07F5                     STR_20:	
   586  07F5  3450               	retlw	80	;'P'
   587  07F6  3449               	retlw	73	;'I'
   588  07F7  3452               	retlw	82	;'R'
   589  07F8  3420               	retlw	32	;' '
   590  07F9  344F               	retlw	79	;'O'
   591  07FA  3446               	retlw	70	;'F'
   592  07FB  3446               	retlw	70	;'F'
   593  07FC  3400               	retlw	0
   594  07FD                     STR_23:	
   595  07FD  3454               	retlw	84	;'T'
   596  07FE  3449               	retlw	73	;'I'
   597  07FF  344D               	retlw	77	;'M'
   598  0800  3445               	retlw	69	;'E'
   599  0801  343A               	retlw	58	;':'
   600  0802  3420               	retlw	32	;' '
   601  0803  3400               	retlw	0
   602  0804                     STR_24:	
   603  0804  3444               	retlw	68	;'D'
   604  0805  3441               	retlw	65	;'A'
   605  0806  3459               	retlw	89	;'Y'
   606  0807  343A               	retlw	58	;':'
   607  0808  3420               	retlw	32	;' '
   608  0809  3400               	retlw	0
   609  080A                     STR_12:	
   610  080A  3432               	retlw	50	;'2'
   611  080B  3431               	retlw	49	;'1'
   612  080C  343A               	retlw	58	;':'
   613  080D  3430               	retlw	48	;'0'
   614  080E  3430               	retlw	48	;'0'
   615  080F  3400               	retlw	0
   616  0810                     STR_11:	
   617  0810  3432               	retlw	50	;'2'
   618  0811  3432               	retlw	50	;'2'
   619  0812  343A               	retlw	58	;':'
   620  0813  3430               	retlw	48	;'0'
   621  0814  3430               	retlw	48	;'0'
   622  0815  3400               	retlw	0
   623  0816                     STR_10:	
   624  0816  3432               	retlw	50	;'2'
   625  0817  3433               	retlw	51	;'3'
   626  0818  342E               	retlw	46	;'.'
   627  0819  3435               	retlw	53	;'5'
   628  081A  3430               	retlw	48	;'0'
   629  081B  3400               	retlw	0
   630  081C                     STR_28:	
   631  081C  3457               	retlw	87	;'W'
   632  081D  3452               	retlw	82	;'R'
   633  081E  344F               	retlw	79	;'O'
   634  081F  344E               	retlw	78	;'N'
   635  0820  3447               	retlw	71	;'G'
   636  0821  3400               	retlw	0
   637  0822                     STR_31:	
   638  0822  342E               	retlw	46	;'.'
   639  0823  3425               	retlw	37	;'%'
   640  0824  3464               	retlw	100	;'d'
   641  0825  3430               	retlw	48	;'0'
   642  0826  3400               	retlw	0
   643  0827                     STR_32:	
   644  0827  342E               	retlw	46	;'.'
   645  0828  3425               	retlw	37	;'%'
   646  0829  3464               	retlw	100	;'d'
   647  082A  3400               	retlw	0
   648  073E                     
   649                           ; #config settings
   650  0000                     
   651                           	psect	cinit
   652  000F                     start_initialization:	
   653  000F                     __initialization:	
   654                           
   655                           ; Initialize objects allocated to BANK0
   656  000F  160A  118A  2687  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   657  0014  00E8               	movwf	__pdataBANK0& (0+127)
   658  0015  160A  118A  2688  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   659  001A  00E9               	movwf	(__pdataBANK0+1)& (0+127)
   660  001B  160A  118A  2689  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   661  0020  00EA               	movwf	(__pdataBANK0+2)& (0+127)
   662  0021  160A  118A  268A  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   663  0026  00EB               	movwf	(__pdataBANK0+3)& (0+127)
   664  0027  160A  118A  268B  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   665  002C  00EC               	movwf	(__pdataBANK0+4)& (0+127)
   666                           
   667                           ; Clear objects allocated to BANK0
   668  002D  1383               	bcf	3,7	;select IRP bank0
   669  002E  3020               	movlw	low __pbssBANK0
   670  002F  0084               	movwf	4
   671  0030  3047               	movlw	low (__pbssBANK0+39)
   672  0031  160A  118A  26AF   	fcall	clear_ram0
   673                           
   674                           ; Clear objects allocated to COMMON
   675  0034  01F8               	clrf	__pbssCOMMON& (0+127)
   676  0035  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   677  0036  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   678  0037                     end_of_initialization:	
   679                           ;End of C runtime variable initialization code
   680                           
   681  0037                     __end_of__initialization:	
   682  0037  0183               	clrf	3
   683  0038  120A  118A  283B   	ljmp	_main	;jump to C main() function
   684                           
   685                           	psect	bssCOMMON
   686  0078                     __pbssCOMMON:	
   687  0078                     _k:	
   688  0078                     	ds	1
   689  0079                     _day1:	
   690  0079                     	ds	1
   691  007A                     _state:	
   692  007A                     	ds	1
   693                           
   694                           	psect	bssBANK0
   695  0020                     __pbssBANK0:	
   696  0020                     _passwordu:	
   697  0020                     	ds	5
   698  0025                     _day2:	
   699  0025                     	ds	2
   700  0027                     _newmin:	
   701  0027                     	ds	1
   702  0028                     _newhour:	
   703  0028                     	ds	1
   704  0029                     _seguridad:	
   705  0029                     	ds	1
   706  002A                     _min:	
   707  002A                     	ds	1
   708  002B                     _hour:	
   709  002B                     	ds	1
   710  002C                     _val:	
   711  002C                     	ds	1
   712  002D                     _cont:	
   713  002D                     	ds	1
   714  002E                     _bank:	
   715  002E                     	ds	1
   716  002F                     _alarm:	
   717  002F                     	ds	1
   718  0030                     _change4:	
   719  0030                     	ds	1
   720  0031                     _change3:	
   721  0031                     	ds	1
   722  0032                     _change2:	
   723  0032                     	ds	1
   724  0033                     _change1:	
   725  0033                     	ds	1
   726  0034                     _change:	
   727  0034                     	ds	1
   728  0035                     _j:	
   729  0035                     	ds	1
   730  0036                     _i:	
   731  0036                     	ds	1
   732  0037                     _IR:	
   733  0037                     	ds	1
   734  0038                     _PIR:	
   735  0038                     	ds	1
   736  0039                     _trip:	
   737  0039                     	ds	1
   738  003A                     _door:	
   739  003A                     	ds	1
   740  003B                     _temp:	
   741  003B                     	ds	6
   742  0041                     _time:	
   743  0041                     	ds	6
   744                           
   745                           	psect	dataBANK0
   746  0068                     __pdataBANK0:	
   747  0068                     _password:	
   748  0068                     	ds	5
   749                           
   750                           	psect	clrtext
   751  16AF                     clear_ram0:	
   752                           ;	Called with FSR containing the base address, and
   753                           ;	W with the last address+1
   754                           
   755  16AF  0064               	clrwdt	;clear the watchdog before getting into this loop
   756  16B0                     clrloop0:	
   757  16B0  0180               	clrf	0	;clear RAM location pointed to by FSR
   758  16B1  0A84               	incf	4,f	;increment pointer
   759  16B2  0604               	xorwf	4,w	;XOR with final address
   760  16B3  1903               	btfsc	3,2	;have we reached the end yet?
   761  16B4  3400               	retlw	0	;all done for this memory range, return
   762  16B5  0604               	xorwf	4,w	;XOR again to restore value
   763  16B6  2EB0               	goto	clrloop0	;do the next byte
   764                           
   765                           	psect	cstackBANK1
   766  00A0                     __pcstackBANK1:	
   767  00A0                     ??_main:	
   768                           
   769                           ; 1 bytes @ 0x0
   770  00A0                     	ds	6
   771                           
   772                           	psect	cstackCOMMON
   773  0070                     __pcstackCOMMON:	
   774  0070                     ?_setup:	
   775  0070                     ?_get_temp:	
   776                           ; 1 bytes @ 0x0
   777                           
   778  0070                     ?_get_hall:	
   779                           ; 1 bytes @ 0x0
   780                           
   781  0070                     ?_get_tripwire:	
   782                           ; 1 bytes @ 0x0
   783                           
   784  0070                     ?_get_PIR:	
   785                           ; 1 bytes @ 0x0
   786                           
   787  0070                     ?_get_IR:	
   788                           ; 1 bytes @ 0x0
   789                           
   790  0070                     ?_get_time:	
   791                           ; 1 bytes @ 0x0
   792                           
   793  0070                     ?_get_day:	
   794                           ; 1 bytes @ 0x0
   795                           
   796  0070                     ?_open_door:	
   797                           ; 1 bytes @ 0x0
   798                           
   799  0070                     ?_close_door:	
   800                           ; 1 bytes @ 0x0
   801                           
   802  0070                     ?_I2C_Master_Wait:	
   803                           ; 1 bytes @ 0x0
   804                           
   805  0070                     ?_I2C_Master_Start:	
   806                           ; 1 bytes @ 0x0
   807                           
   808  0070                     ?_I2C_Master_RepeatedStart:	
   809                           ; 1 bytes @ 0x0
   810                           
   811  0070                     ?_I2C_Master_Stop:	
   812                           ; 1 bytes @ 0x0
   813                           
   814  0070                     ?_Lcd_Port:	
   815                           ; 1 bytes @ 0x0
   816                           
   817  0070                     ?_Lcd_Cmd:	
   818                           ; 1 bytes @ 0x0
   819                           
   820  0070                     ?_Lcd_Clear:	
   821                           ; 1 bytes @ 0x0
   822                           
   823  0070                     ?_Lcd_Init:	
   824                           ; 1 bytes @ 0x0
   825                           
   826  0070                     ?_Lcd_Write_Char:	
   827                           ; 1 bytes @ 0x0
   828                           
   829  0070                     ?_Lcd_Shift_Right:	
   830                           ; 1 bytes @ 0x0
   831                           
   832  0070                     ?_Lcd_Shift_Left:	
   833                           ; 1 bytes @ 0x0
   834                           
   835  0070                     ?_initOscilador:	
   836                           ; 1 bytes @ 0x0
   837                           
   838  0070                     ?_UART_TX_Empty:	
   839                           ; 1 bytes @ 0x0
   840                           
   841  0070                     ?_UART_Write:	
   842                           ; 1 bytes @ 0x0
   843                           
   844  0070                     ?_manual_pwm:	
   845                           ; 1 bytes @ 0x0
   846                           
   847  0070                     ??_manual_pwm:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0070                     ?_main:	
   851                           ; 1 bytes @ 0x0
   852                           
   853                           
   854                           ; 1 bytes @ 0x0
   855  0070                     	ds	3
   856  0073                     ?_strcat:	
   857  0073                     ??_I2C_Master_Wait:	
   858                           ; 1 bytes @ 0x3
   859                           
   860  0073                     ??_I2C_Master_Start:	
   861                           ; 1 bytes @ 0x3
   862                           
   863  0073                     ??_I2C_Master_RepeatedStart:	
   864                           ; 1 bytes @ 0x3
   865                           
   866  0073                     ??_I2C_Master_Stop:	
   867                           ; 1 bytes @ 0x3
   868                           
   869  0073                     ?_I2C_Master_Write:	
   870                           ; 1 bytes @ 0x3
   871                           
   872  0073                     ??_Lcd_Port:	
   873                           ; 1 bytes @ 0x3
   874                           
   875  0073                     ??_initOscilador:	
   876                           ; 1 bytes @ 0x3
   877                           
   878  0073                     ??_UART_TX_Empty:	
   879                           ; 1 bytes @ 0x3
   880                           
   881  0073                     ??_UART_Write:	
   882                           ; 1 bytes @ 0x3
   883                           
   884  0073                     ?___bmul:	
   885                           ; 1 bytes @ 0x3
   886                           
   887  0073                     ??___lldiv:	
   888                           ; 1 bytes @ 0x3
   889                           
   890  0073                     ??___aldiv:	
   891                           ; 1 bytes @ 0x3
   892                           
   893  0073                     ?_strcmp:	
   894                           ; 1 bytes @ 0x3
   895                           
   896  0073                     ?_I2C_Master_Read:	
   897                           ; 2 bytes @ 0x3
   898                           
   899  0073                     ?___awdiv:	
   900                           ; 2 bytes @ 0x3
   901                           
   902  0073                     ?___awmod:	
   903                           ; 2 bytes @ 0x3
   904                           
   905  0073                     ?___lwdiv:	
   906                           ; 2 bytes @ 0x3
   907                           
   908  0073                     Lcd_Port@a:	
   909                           ; 2 bytes @ 0x3
   910                           
   911  0073                     UART_Write@data:	
   912                           ; 1 bytes @ 0x3
   913                           
   914  0073                     ___bmul@multiplicand:	
   915                           ; 1 bytes @ 0x3
   916                           
   917  0073                     strcat@from:	
   918                           ; 1 bytes @ 0x3
   919                           
   920  0073                     I2C_Master_Write@d:	
   921                           ; 1 bytes @ 0x3
   922                           
   923  0073                     I2C_Master_Read@a:	
   924                           ; 2 bytes @ 0x3
   925                           
   926  0073                     ___awdiv@divisor:	
   927                           ; 2 bytes @ 0x3
   928                           
   929  0073                     ___awmod@divisor:	
   930                           ; 2 bytes @ 0x3
   931                           
   932  0073                     ___lwdiv@divisor:	
   933                           ; 2 bytes @ 0x3
   934                           
   935  0073                     strcmp@s2:	
   936                           ; 2 bytes @ 0x3
   937                           
   938                           
   939                           ; 2 bytes @ 0x3
   940  0073                     	ds	1
   941  0074                     ??_strcat:	
   942  0074                     ??_I2C_Master_Init:	
   943                           ; 1 bytes @ 0x4
   944                           
   945  0074                     ??_Lcd_Cmd:	
   946                           ; 1 bytes @ 0x4
   947                           
   948  0074                     ??_Lcd_Write_Char:	
   949                           ; 1 bytes @ 0x4
   950                           
   951  0074                     ??___bmul:	
   952                           ; 1 bytes @ 0x4
   953                           
   954  0074                     UART_Init@x:	
   955                           ; 1 bytes @ 0x4
   956                           
   957                           
   958                           ; 2 bytes @ 0x4
   959  0074                     	ds	1
   960  0075                     ??_open_door:	
   961  0075                     ??_close_door:	
   962                           ; 1 bytes @ 0x5
   963                           
   964  0075                     ??_strcmp:	
   965                           ; 1 bytes @ 0x5
   966                           
   967  0075                     ?_write_RTC:	
   968                           ; 1 bytes @ 0x5
   969                           
   970  0075                     ??_I2C_Master_Write:	
   971                           ; 1 bytes @ 0x5
   972                           
   973  0075                     ??_I2C_Master_Read:	
   974                           ; 1 bytes @ 0x5
   975                           
   976  0075                     Lcd_Write_Char@temp:	
   977                           ; 1 bytes @ 0x5
   978                           
   979  0075                     initOscilador@option:	
   980                           ; 1 bytes @ 0x5
   981                           
   982  0075                     write_RTC@minutes:	
   983                           ; 1 bytes @ 0x5
   984                           
   985  0075                     ___bmul@product:	
   986                           ; 1 bytes @ 0x5
   987                           
   988  0075                     strcat@to:	
   989                           ; 1 bytes @ 0x5
   990                           
   991  0075                     ___awdiv@dividend:	
   992                           ; 1 bytes @ 0x5
   993                           
   994  0075                     ___awmod@dividend:	
   995                           ; 2 bytes @ 0x5
   996                           
   997  0075                     ___lwdiv@dividend:	
   998                           ; 2 bytes @ 0x5
   999                           
  1000                           
  1001                           ; 2 bytes @ 0x5
  1002  0075                     	ds	1
  1003  0076                     Lcd_Cmd@a:	
  1004  0076                     Lcd_Write_Char@y:	
  1005                           ; 1 bytes @ 0x6
  1006                           
  1007  0076                     write_RTC@day:	
  1008                           ; 1 bytes @ 0x6
  1009                           
  1010  0076                     ___bmul@multiplier:	
  1011                           ; 1 bytes @ 0x6
  1012                           
  1013  0076                     strcat@cp:	
  1014                           ; 1 bytes @ 0x6
  1015                           
  1016                           
  1017                           ; 1 bytes @ 0x6
  1018  0076                     	ds	1
  1019  0077                     ??_get_hall:	
  1020  0077                     ??_get_tripwire:	
  1021                           ; 1 bytes @ 0x7
  1022                           
  1023  0077                     ??_get_PIR:	
  1024                           ; 1 bytes @ 0x7
  1025                           
  1026  0077                     ??_get_IR:	
  1027                           ; 1 bytes @ 0x7
  1028                           
  1029  0077                     ??_get_day:	
  1030                           ; 1 bytes @ 0x7
  1031                           
  1032  0077                     ??_Lcd_Clear:	
  1033                           ; 1 bytes @ 0x7
  1034                           
  1035  0077                     ?_Lcd_Set_Cursor:	
  1036                           ; 1 bytes @ 0x7
  1037                           
  1038  0077                     ??_Lcd_Shift_Right:	
  1039                           ; 1 bytes @ 0x7
  1040                           
  1041  0077                     ??_Lcd_Shift_Left:	
  1042                           ; 1 bytes @ 0x7
  1043                           
  1044  0077                     ??___awdiv:	
  1045                           ; 1 bytes @ 0x7
  1046                           
  1047  0077                     ??___awmod:	
  1048                           ; 1 bytes @ 0x7
  1049                           
  1050  0077                     ??___lwdiv:	
  1051                           ; 1 bytes @ 0x7
  1052                           
  1053  0077                     Lcd_Set_Cursor@b:	
  1054                           ; 1 bytes @ 0x7
  1055                           
  1056  0077                     Lcd_Write_Char@a:	
  1057                           ; 1 bytes @ 0x7
  1058                           
  1059  0077                     write_RTC@hour:	
  1060                           ; 1 bytes @ 0x7
  1061                           
  1062                           
  1063                           ; 1 bytes @ 0x7
  1064  0077                     	ds	1
  1065  0078                     ??_setup:	
  1066                           
  1067                           	psect	cstackBANK0
  1068  0047                     __pcstackBANK0:	
  1069                           ; 1 bytes @ 0x8
  1070                           
  1071  0047                     ??_write_RTC:	
  1072  0047                     ??_Lcd_Set_Cursor:	
  1073                           ; 1 bytes @ 0x0
  1074                           
  1075  0047                     ??_Lcd_Init:	
  1076                           ; 1 bytes @ 0x0
  1077                           
  1078  0047                     ?_Lcd_Write_String:	
  1079                           ; 1 bytes @ 0x0
  1080                           
  1081  0047                     ?___lldiv:	
  1082                           ; 1 bytes @ 0x0
  1083                           
  1084  0047                     ?___aldiv:	
  1085                           ; 4 bytes @ 0x0
  1086                           
  1087  0047                     ___awdiv@counter:	
  1088                           ; 4 bytes @ 0x0
  1089                           
  1090  0047                     ___awmod@counter:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093  0047                     ___lwdiv@counter:	
  1094                           ; 1 bytes @ 0x0
  1095                           
  1096  0047                     strcmp@r:	
  1097                           ; 1 bytes @ 0x0
  1098                           
  1099  0047                     I2C_Master_Read@temp:	
  1100                           ; 1 bytes @ 0x0
  1101                           
  1102  0047                     Lcd_Write_String@a:	
  1103                           ; 2 bytes @ 0x0
  1104                           
  1105  0047                     ___lldiv@divisor:	
  1106                           ; 2 bytes @ 0x0
  1107                           
  1108  0047                     ___aldiv@divisor:	
  1109                           ; 4 bytes @ 0x0
  1110                           
  1111                           
  1112                           ; 4 bytes @ 0x0
  1113  0047                     	ds	1
  1114  0048                     ___awdiv@sign:	
  1115  0048                     ___awmod@sign:	
  1116                           ; 1 bytes @ 0x1
  1117                           
  1118  0048                     strcmp@s1:	
  1119                           ; 1 bytes @ 0x1
  1120                           
  1121  0048                     ___lwdiv@quotient:	
  1122                           ; 1 bytes @ 0x1
  1123                           
  1124                           
  1125                           ; 2 bytes @ 0x1
  1126  0048                     	ds	1
  1127  0049                     ??_get_time:	
  1128  0049                     ??_Lcd_Write_String:	
  1129                           ; 1 bytes @ 0x2
  1130                           
  1131  0049                     Lcd_Set_Cursor@a:	
  1132                           ; 1 bytes @ 0x2
  1133                           
  1134  0049                     get_day@d:	
  1135                           ; 1 bytes @ 0x2
  1136                           
  1137  0049                     get_hall@key:	
  1138                           ; 1 bytes @ 0x2
  1139                           
  1140  0049                     get_tripwire@trip:	
  1141                           ; 1 bytes @ 0x2
  1142                           
  1143  0049                     get_PIR@PIR:	
  1144                           ; 1 bytes @ 0x2
  1145                           
  1146  0049                     get_IR@IR:	
  1147                           ; 1 bytes @ 0x2
  1148                           
  1149  0049                     ___awdiv@quotient:	
  1150                           ; 1 bytes @ 0x2
  1151                           
  1152                           
  1153                           ; 2 bytes @ 0x2
  1154  0049                     	ds	1
  1155  004A                     ?___lwmod:	
  1156  004A                     Lcd_Set_Cursor@z:	
  1157                           ; 2 bytes @ 0x3
  1158                           
  1159  004A                     ___lwmod@divisor:	
  1160                           ; 1 bytes @ 0x3
  1161                           
  1162                           
  1163                           ; 2 bytes @ 0x3
  1164  004A                     	ds	1
  1165  004B                     Lcd_Set_Cursor@y:	
  1166  004B                     get_time@hour:	
  1167                           ; 1 bytes @ 0x4
  1168                           
  1169  004B                     ___lldiv@dividend:	
  1170                           ; 1 bytes @ 0x4
  1171                           
  1172  004B                     ___aldiv@dividend:	
  1173                           ; 4 bytes @ 0x4
  1174                           
  1175                           
  1176                           ; 4 bytes @ 0x4
  1177  004B                     	ds	1
  1178  004C                     Lcd_Set_Cursor@temp:	
  1179  004C                     get_time@min:	
  1180                           ; 1 bytes @ 0x5
  1181                           
  1182  004C                     Lcd_Write_String@i:	
  1183                           ; 1 bytes @ 0x5
  1184                           
  1185  004C                     ___lwmod@dividend:	
  1186                           ; 2 bytes @ 0x5
  1187                           
  1188                           
  1189                           ; 2 bytes @ 0x5
  1190  004C                     	ds	1
  1191  004D                     get_time@time_string:	
  1192                           
  1193                           ; 1 bytes @ 0x6
  1194  004D                     	ds	1
  1195  004E                     ??___lwmod:	
  1196                           
  1197                           ; 1 bytes @ 0x7
  1198  004E                     	ds	1
  1199  004F                     ___aldiv@counter:	
  1200  004F                     ___lwmod@counter:	
  1201                           ; 1 bytes @ 0x8
  1202                           
  1203  004F                     ___lldiv@quotient:	
  1204                           ; 1 bytes @ 0x8
  1205                           
  1206                           
  1207                           ; 4 bytes @ 0x8
  1208  004F                     	ds	1
  1209  0050                     ?_sprintf:	
  1210  0050                     ___aldiv@sign:	
  1211                           ; 2 bytes @ 0x9
  1212                           
  1213  0050                     sprintf@f:	
  1214                           ; 1 bytes @ 0x9
  1215                           
  1216                           
  1217                           ; 2 bytes @ 0x9
  1218  0050                     	ds	1
  1219  0051                     ___aldiv@quotient:	
  1220                           
  1221                           ; 4 bytes @ 0xA
  1222  0051                     	ds	2
  1223  0053                     ___lldiv@counter:	
  1224                           
  1225                           ; 1 bytes @ 0xC
  1226  0053                     	ds	1
  1227  0054                     ??_sprintf:	
  1228  0054                     ?_I2C_Master_Init:	
  1229                           ; 1 bytes @ 0xD
  1230                           
  1231  0054                     I2C_Master_Init@c:	
  1232                           ; 1 bytes @ 0xD
  1233                           
  1234                           
  1235                           ; 4 bytes @ 0xD
  1236  0054                     	ds	1
  1237  0055                     ?_UART_Init:	
  1238  0055                     UART_Init@baudrate:	
  1239                           ; 1 bytes @ 0xE
  1240                           
  1241                           
  1242                           ; 4 bytes @ 0xE
  1243  0055                     	ds	3
  1244  0058                     sprintf@ap:	
  1245                           
  1246                           ; 1 bytes @ 0x11
  1247  0058                     	ds	1
  1248  0059                     ??_UART_Init:	
  1249  0059                     sprintf@flag:	
  1250                           ; 1 bytes @ 0x12
  1251                           
  1252                           
  1253                           ; 1 bytes @ 0x12
  1254  0059                     	ds	1
  1255  005A                     sprintf@prec:	
  1256                           
  1257                           ; 1 bytes @ 0x13
  1258  005A                     	ds	1
  1259  005B                     sprintf@val:	
  1260                           
  1261                           ; 2 bytes @ 0x14
  1262  005B                     	ds	2
  1263  005D                     sprintf@sp:	
  1264                           
  1265                           ; 1 bytes @ 0x16
  1266  005D                     	ds	1
  1267  005E                     sprintf@c:	
  1268                           
  1269                           ; 1 bytes @ 0x17
  1270  005E                     	ds	1
  1271  005F                     ??_get_temp:	
  1272                           
  1273                           ; 1 bytes @ 0x18
  1274  005F                     	ds	3
  1275  0062                     get_temp@decimal:	
  1276                           
  1277                           ; 3 bytes @ 0x1B
  1278  0062                     	ds	3
  1279  0065                     get_temp@tempMSB:	
  1280                           
  1281                           ; 1 bytes @ 0x1E
  1282  0065                     	ds	1
  1283  0066                     get_temp@temp_string:	
  1284                           
  1285                           ; 1 bytes @ 0x1F
  1286  0066                     	ds	1
  1287  0067                     get_temp@tempLSB:	
  1288                           
  1289                           ; 1 bytes @ 0x20
  1290  0067                     	ds	1
  1291                           
  1292                           	psect	maintext
  1293  003B                     __pmaintext:	
  1294 ;;
  1295 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1296 ;;
  1297 ;; *************** function _main *****************
  1298 ;; Defined at:
  1299 ;;		line 77 in file "mainMaster.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : B00/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1313 ;;      Params:         0       0       0       0       0
  1314 ;;      Locals:         0       0       0       0       0
  1315 ;;      Temps:          0       0       6       0       0
  1316 ;;      Totals:         0       0       6       0       0
  1317 ;;Total ram usage:        6 bytes
  1318 ;; Hardware stack levels required when called:    5
  1319 ;; This function calls:
  1320 ;;		_Lcd_Clear
  1321 ;;		_Lcd_Set_Cursor
  1322 ;;		_Lcd_Shift_Left
  1323 ;;		_Lcd_Shift_Right
  1324 ;;		_Lcd_Write_Char
  1325 ;;		_Lcd_Write_String
  1326 ;;		_UART_TX_Empty
  1327 ;;		_UART_Write
  1328 ;;		___awdiv
  1329 ;;		___awmod
  1330 ;;		___bmul
  1331 ;;		_close_door
  1332 ;;		_get_IR
  1333 ;;		_get_PIR
  1334 ;;		_get_day
  1335 ;;		_get_hall
  1336 ;;		_get_temp
  1337 ;;		_get_time
  1338 ;;		_get_tripwire
  1339 ;;		_open_door
  1340 ;;		_setup
  1341 ;;		_strcmp
  1342 ;;		_write_RTC
  1343 ;; This function is called by:
  1344 ;;		Startup code after reset
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347                           
  1348                           
  1349                           ;psect for function _main
  1350  003B                     _main:	
  1351                           
  1352                           ;mainMaster.c: 78:     setup();
  1353                           
  1354                           ;incstack = 0
  1355                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1356  003B  120A  158A  2362  120A  118A  	fcall	_setup
  1357                           
  1358                           ;mainMaster.c: 79:     state = 0;
  1359  0040  01FA               	clrf	_state
  1360                           
  1361                           ;mainMaster.c: 80:     seguridad = 0;
  1362  0041  1283               	bcf	3,5	;RP0=0, select bank0
  1363  0042  1303               	bcf	3,6	;RP1=0, select bank0
  1364  0043  01A9               	clrf	_seguridad
  1365                           
  1366                           ;mainMaster.c: 81:     Lcd_Clear();
  1367  0044  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  1368                           
  1369                           ;mainMaster.c: 82:     PORTAbits.RA7 = 0;
  1370  0049  1283               	bcf	3,5	;RP0=0, select bank0
  1371  004A  1303               	bcf	3,6	;RP1=0, select bank0
  1372  004B  1385               	bcf	5,7	;volatile
  1373                           
  1374                           ;mainMaster.c: 83:     Lcd_Set_Cursor(1,1);
  1375  004C  01F7               	clrf	Lcd_Set_Cursor@b
  1376  004D  0AF7               	incf	Lcd_Set_Cursor@b,f
  1377  004E  3001               	movlw	1
  1378  004F  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  1379                           
  1380                           ;mainMaster.c: 84:     Lcd_Write_String("Iniciando Sistema de Seguridad");
  1381  0054  301C               	movlw	low (STR_1| (0+32768))
  1382  0055  1283               	bcf	3,5	;RP0=0, select bank0
  1383  0056  1303               	bcf	3,6	;RP1=0, select bank0
  1384  0057  00C7               	movwf	Lcd_Write_String@a
  1385  0058  3087               	movlw	high (STR_1| (0+32768))
  1386  0059  00C8               	movwf	Lcd_Write_String@a+1
  1387  005A  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  1388                           
  1389                           ;mainMaster.c: 85:     for (k = 0; k < 14; k++){
  1390  005F  01F8               	clrf	_k
  1391  0060                     l3966:	
  1392                           
  1393                           ;mainMaster.c: 86:         Lcd_Shift_Left();
  1394  0060  160A  118A  26D5  120A  118A  	fcall	_Lcd_Shift_Left
  1395                           
  1396                           ;mainMaster.c: 87:         _delay((unsigned long)((200)*(8000000/4000.0)));
  1397  0065  3003               	movlw	3
  1398  0066  1683               	bsf	3,5	;RP0=1, select bank1
  1399  0067  1303               	bcf	3,6	;RP1=0, select bank1
  1400  0068  00A2               	movwf	(??_main^(0+128)+2)
  1401  0069  3008               	movlw	8
  1402  006A  00A1               	movwf	(??_main^(0+128)+1)
  1403  006B  3076               	movlw	118
  1404  006C  00A0               	movwf	??_main^(0+128)
  1405  006D                     u4837:	
  1406  006D  0BA0               	decfsz	??_main^(0+128),f
  1407  006E  286D               	goto	u4837
  1408  006F  0BA1               	decfsz	(??_main^(0+128)+1),f
  1409  0070  286D               	goto	u4837
  1410  0071  0BA2               	decfsz	(??_main^(0+128)+2),f
  1411  0072  286D               	goto	u4837
  1412  0073  0000               	nop
  1413                           
  1414                           ;mainMaster.c: 88:     }
  1415  0074  3001               	movlw	1
  1416  0075  1683               	bsf	3,5	;RP0=1, select bank1
  1417  0076  1303               	bcf	3,6	;RP1=0, select bank1
  1418  0077  00A0               	movwf	??_main^(0+128)
  1419  0078  0820               	movf	??_main^(0+128),w
  1420  0079  07F8               	addwf	_k,f
  1421  007A  300E               	movlw	14
  1422  007B  0278               	subwf	_k,w
  1423  007C  1C03               	skipc
  1424  007D  2860               	goto	l3966
  1425                           
  1426                           ;mainMaster.c: 89:     for (k = 0; k < 14; k++){
  1427  007E  01F8               	clrf	_k
  1428  007F                     l3980:	
  1429                           
  1430                           ;mainMaster.c: 90:         Lcd_Shift_Right();
  1431  007F  160A  118A  26E0  120A  118A  	fcall	_Lcd_Shift_Right
  1432                           
  1433                           ;mainMaster.c: 91:         _delay((unsigned long)((200)*(8000000/4000.0)));
  1434  0084  3003               	movlw	3
  1435  0085  1683               	bsf	3,5	;RP0=1, select bank1
  1436  0086  1303               	bcf	3,6	;RP1=0, select bank1
  1437  0087  00A2               	movwf	(??_main^(0+128)+2)
  1438  0088  3008               	movlw	8
  1439  0089  00A1               	movwf	(??_main^(0+128)+1)
  1440  008A  3076               	movlw	118
  1441  008B  00A0               	movwf	??_main^(0+128)
  1442  008C                     u4847:	
  1443  008C  0BA0               	decfsz	??_main^(0+128),f
  1444  008D  288C               	goto	u4847
  1445  008E  0BA1               	decfsz	(??_main^(0+128)+1),f
  1446  008F  288C               	goto	u4847
  1447  0090  0BA2               	decfsz	(??_main^(0+128)+2),f
  1448  0091  288C               	goto	u4847
  1449  0092  0000               	nop
  1450                           
  1451                           ;mainMaster.c: 92:     }
  1452  0093  3001               	movlw	1
  1453  0094  1683               	bsf	3,5	;RP0=1, select bank1
  1454  0095  1303               	bcf	3,6	;RP1=0, select bank1
  1455  0096  00A0               	movwf	??_main^(0+128)
  1456  0097  0820               	movf	??_main^(0+128),w
  1457  0098  07F8               	addwf	_k,f
  1458  0099  300E               	movlw	14
  1459  009A  0278               	subwf	_k,w
  1460  009B  1C03               	skipc
  1461  009C  287F               	goto	l3980
  1462                           
  1463                           ;mainMaster.c: 93:     _delay((unsigned long)((2000)*(8000000/4000.0)));
  1464  009D  3015               	movlw	21
  1465  009E  1683               	bsf	3,5	;RP0=1, select bank1
  1466  009F  1303               	bcf	3,6	;RP1=0, select bank1
  1467  00A0  00A2               	movwf	(??_main^(0+128)+2)
  1468  00A1  304B               	movlw	75
  1469  00A2  00A1               	movwf	(??_main^(0+128)+1)
  1470  00A3  30BD               	movlw	189
  1471  00A4  00A0               	movwf	??_main^(0+128)
  1472  00A5                     u4857:	
  1473  00A5  0BA0               	decfsz	??_main^(0+128),f
  1474  00A6  28A5               	goto	u4857
  1475  00A7  0BA1               	decfsz	(??_main^(0+128)+1),f
  1476  00A8  28A5               	goto	u4857
  1477  00A9  0BA2               	decfsz	(??_main^(0+128)+2),f
  1478  00AA  28A5               	goto	u4857
  1479  00AB  28AC               	nop2
  1480                           
  1481                           ;mainMaster.c: 94:     Lcd_Clear();
  1482  00AC  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  1483  00B1                     l3992:	
  1484                           
  1485                           ;mainMaster.c: 99:         get_temp(temp);
  1486  00B1  303B               	movlw	(low (_temp| 0))& (0+255)
  1487  00B2  120A  158A  2595  120A  118A  	fcall	_get_temp
  1488                           
  1489                           ;mainMaster.c: 100:         door = get_hall();
  1490  00B7  160A  118A  27BA  120A  118A  	fcall	_get_hall
  1491  00BC  1683               	bsf	3,5	;RP0=1, select bank1
  1492  00BD  1303               	bcf	3,6	;RP1=0, select bank1
  1493  00BE  00A0               	movwf	??_main^(0+128)
  1494  00BF  0820               	movf	??_main^(0+128),w
  1495  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1496  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  1497  00C2  00BA               	movwf	_door
  1498                           
  1499                           ;mainMaster.c: 101:         trip = get_tripwire();
  1500  00C3  160A  118A  27DD  120A  118A  	fcall	_get_tripwire
  1501  00C8  1683               	bsf	3,5	;RP0=1, select bank1
  1502  00C9  1303               	bcf	3,6	;RP1=0, select bank1
  1503  00CA  00A0               	movwf	??_main^(0+128)
  1504  00CB  0820               	movf	??_main^(0+128),w
  1505  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1506  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  1507  00CE  00B9               	movwf	_trip
  1508                           
  1509                           ;mainMaster.c: 103:         PIR = get_PIR();
  1510  00CF  160A  118A  2797  120A  118A  	fcall	_get_PIR
  1511  00D4  1683               	bsf	3,5	;RP0=1, select bank1
  1512  00D5  1303               	bcf	3,6	;RP1=0, select bank1
  1513  00D6  00A0               	movwf	??_main^(0+128)
  1514  00D7  0820               	movf	??_main^(0+128),w
  1515  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  1516  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  1517  00DA  00B8               	movwf	_PIR
  1518                           
  1519                           ;mainMaster.c: 104:         IR = get_IR();
  1520  00DB  160A  118A  2774  120A  118A  	fcall	_get_IR
  1521  00E0  1683               	bsf	3,5	;RP0=1, select bank1
  1522  00E1  1303               	bcf	3,6	;RP1=0, select bank1
  1523  00E2  00A0               	movwf	??_main^(0+128)
  1524  00E3  0820               	movf	??_main^(0+128),w
  1525  00E4  1283               	bcf	3,5	;RP0=0, select bank0
  1526  00E5  1303               	bcf	3,6	;RP1=0, select bank0
  1527  00E6  00B7               	movwf	_IR
  1528                           
  1529                           ;mainMaster.c: 105:         get_time(time);
  1530  00E7  3041               	movlw	(low (_time| 0))& (0+255)
  1531  00E8  120A  158A  247D  120A  118A  	fcall	_get_time
  1532                           
  1533                           ;mainMaster.c: 106:         day1 = get_day();
  1534  00ED  120A  158A  2163  120A  118A  	fcall	_get_day
  1535  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  1536  00F3  1303               	bcf	3,6	;RP1=0, select bank1
  1537  00F4  00A0               	movwf	??_main^(0+128)
  1538  00F5  0820               	movf	??_main^(0+128),w
  1539  00F6  00F9               	movwf	_day1
  1540                           
  1541                           ;mainMaster.c: 107:         bank = get_tripwire();
  1542  00F7  160A  118A  27DD  120A  118A  	fcall	_get_tripwire
  1543  00FC  1683               	bsf	3,5	;RP0=1, select bank1
  1544  00FD  1303               	bcf	3,6	;RP1=0, select bank1
  1545  00FE  00A0               	movwf	??_main^(0+128)
  1546  00FF  0820               	movf	??_main^(0+128),w
  1547  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1548  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1549  0102  00AE               	movwf	_bank
  1550                           
  1551                           ;mainMaster.c: 110:         if(PORTDbits.RD7 == 1){
  1552  0103  1F88               	btfss	8,7	;volatile
  1553  0104  2940               	goto	l323
  1554                           
  1555                           ;mainMaster.c: 111:             if (bank == 2){
  1556  0105  3002               	movlw	2
  1557  0106  062E               	xorwf	_bank,w
  1558  0107  1D03               	btfss	3,2
  1559  0108  2924               	goto	l4022
  1560                           
  1561                           ;mainMaster.c: 112:                 if (change1 == 0){
  1562  0109  0833               	movf	_change1,w
  1563  010A  1D03               	btfss	3,2
  1564  010B  2942               	goto	l4036
  1565                           
  1566                           ;mainMaster.c: 115:                     open_door();
  1567  010C  160A  118A  273A  120A  118A  	fcall	_open_door
  1568                           
  1569                           ;mainMaster.c: 116:                     j = 0;
  1570  0111  1283               	bcf	3,5	;RP0=0, select bank0
  1571  0112  1303               	bcf	3,6	;RP1=0, select bank0
  1572  0113  01B5               	clrf	_j
  1573  0114                     l4020:	
  1574                           ;mainMaster.c: 117:                     while(j < 50){
  1575                           
  1576                           
  1577                           ;mainMaster.c: 117:                     while(j < 50){
  1578  0114  3032               	movlw	50
  1579  0115  0235               	subwf	_j,w
  1580  0116  1803               	btfsc	3,0
  1581  0117  2921               	goto	l328
  1582                           
  1583                           ;mainMaster.c: 118:                         j++;
  1584  0118  3001               	movlw	1
  1585  0119  1683               	bsf	3,5	;RP0=1, select bank1
  1586  011A  1303               	bcf	3,6	;RP1=0, select bank1
  1587  011B  00A0               	movwf	??_main^(0+128)
  1588  011C  0820               	movf	??_main^(0+128),w
  1589  011D  1283               	bcf	3,5	;RP0=0, select bank0
  1590  011E  1303               	bcf	3,6	;RP1=0, select bank0
  1591  011F  07B5               	addwf	_j,f
  1592  0120  2914               	goto	l4020
  1593  0121                     l328:	
  1594                           
  1595                           ;mainMaster.c: 121:                     change1 = 1;
  1596  0121  01B3               	clrf	_change1
  1597  0122  0AB3               	incf	_change1,f
  1598  0123  2942               	goto	l4036
  1599  0124                     l4022:	
  1600  0124  3003               	movlw	3
  1601  0125  062E               	xorwf	_bank,w
  1602  0126  1D03               	btfss	3,2
  1603  0127  2942               	goto	l4036
  1604                           
  1605                           ;mainMaster.c: 124:                 if (change1 == 0){
  1606  0128  0833               	movf	_change1,w
  1607  0129  1D03               	btfss	3,2
  1608  012A  2942               	goto	l4036
  1609                           
  1610                           ;mainMaster.c: 127:                     close_door();
  1611  012B  160A  118A  271F  120A  118A  	fcall	_close_door
  1612                           
  1613                           ;mainMaster.c: 128:                     j = 0;
  1614  0130  1283               	bcf	3,5	;RP0=0, select bank0
  1615  0131  1303               	bcf	3,6	;RP1=0, select bank0
  1616  0132  01B5               	clrf	_j
  1617  0133                     l4032:	
  1618                           ;mainMaster.c: 129:                     while(j < 50){
  1619                           
  1620                           
  1621                           ;mainMaster.c: 129:                     while(j < 50){
  1622  0133  3032               	movlw	50
  1623  0134  0235               	subwf	_j,w
  1624  0135  1803               	btfsc	3,0
  1625  0136  2921               	goto	l328
  1626                           
  1627                           ;mainMaster.c: 130:                         j++;
  1628  0137  3001               	movlw	1
  1629  0138  1683               	bsf	3,5	;RP0=1, select bank1
  1630  0139  1303               	bcf	3,6	;RP1=0, select bank1
  1631  013A  00A0               	movwf	??_main^(0+128)
  1632  013B  0820               	movf	??_main^(0+128),w
  1633  013C  1283               	bcf	3,5	;RP0=0, select bank0
  1634  013D  1303               	bcf	3,6	;RP1=0, select bank0
  1635  013E  07B5               	addwf	_j,f
  1636  013F  2933               	goto	l4032
  1637  0140                     l323:	
  1638                           ;mainMaster.c: 136:         } else if(PORTDbits.RD7 == 0){
  1639                           
  1640  0140  1F88               	btfss	8,7	;volatile
  1641                           
  1642                           ;mainMaster.c: 137:             change1 = 0;
  1643  0141  01B3               	clrf	_change1
  1644  0142                     l4036:	
  1645                           
  1646                           ;mainMaster.c: 140:         if (alarm == 0){
  1647  0142  082F               	movf	_alarm,w
  1648  0143  1D03               	btfss	3,2
  1649  0144  294F               	goto	l337
  1650                           
  1651                           ;mainMaster.c: 141:             alarm = trip | PIR | IR;
  1652  0145  0839               	movf	_trip,w
  1653  0146  0438               	iorwf	_PIR,w
  1654  0147  0437               	iorwf	_IR,w
  1655  0148  1683               	bsf	3,5	;RP0=1, select bank1
  1656  0149  1303               	bcf	3,6	;RP1=0, select bank1
  1657  014A  00A0               	movwf	??_main^(0+128)
  1658  014B  0820               	movf	??_main^(0+128),w
  1659  014C  1283               	bcf	3,5	;RP0=0, select bank0
  1660  014D  1303               	bcf	3,6	;RP1=0, select bank0
  1661  014E  00AF               	movwf	_alarm
  1662  014F                     l337:	
  1663                           ;mainMaster.c: 142:         }
  1664                           
  1665                           
  1666                           ;mainMaster.c: 146:         if (alarm == 1){
  1667  014F  032F               	decf	_alarm,w
  1668  0150  1D03               	btfss	3,2
  1669  0151  2960               	goto	l338
  1670                           
  1671                           ;mainMaster.c: 148:             if (change2 == 0){
  1672  0152  0832               	movf	_change2,w
  1673  0153  1D03               	btfss	3,2
  1674  0154  2962               	goto	l4050
  1675                           
  1676                           ;mainMaster.c: 149:                 change2 = 1;
  1677  0155  01B2               	clrf	_change2
  1678  0156  0AB2               	incf	_change2,f
  1679                           
  1680                           ;mainMaster.c: 150:                 close_door();
  1681  0157  160A  118A  271F  120A  118A  	fcall	_close_door
  1682                           
  1683                           ;mainMaster.c: 151:                 PORTAbits.RA6 = 1;
  1684  015C  1283               	bcf	3,5	;RP0=0, select bank0
  1685  015D  1303               	bcf	3,6	;RP1=0, select bank0
  1686  015E  1705               	bsf	5,6	;volatile
  1687  015F  2962               	goto	l4050
  1688  0160                     l338:	
  1689                           ;mainMaster.c: 155:         else {
  1690                           
  1691                           
  1692                           ;mainMaster.c: 156:             PORTAbits.RA6 = 0;
  1693  0160  1305               	bcf	5,6	;volatile
  1694                           
  1695                           ;mainMaster.c: 157:             change2 = 0;
  1696  0161  01B2               	clrf	_change2
  1697  0162                     l4050:	
  1698                           
  1699                           ;mainMaster.c: 161:         if (PORTDbits.RD6 == 1){
  1700  0162  1F08               	btfss	8,6	;volatile
  1701  0163  2971               	goto	l4062
  1702                           
  1703                           ;mainMaster.c: 162:             if (change3 == 0){
  1704  0164  0831               	movf	_change3,w
  1705  0165  1D03               	btfss	3,2
  1706  0166  2972               	goto	l4064
  1707                           
  1708                           ;mainMaster.c: 163:                 if (alarm == 0){
  1709  0167  082F               	movf	_alarm,w
  1710  0168  1D03               	btfss	3,2
  1711  0169  296D               	goto	l4058
  1712                           
  1713                           ;mainMaster.c: 164:                     alarm = 1;
  1714  016A  01AF               	clrf	_alarm
  1715  016B  0AAF               	incf	_alarm,f
  1716                           
  1717                           ;mainMaster.c: 165:                 }else {
  1718  016C  296E               	goto	l4060
  1719  016D                     l4058:	
  1720                           
  1721                           ;mainMaster.c: 166:                     alarm = 0;
  1722  016D  01AF               	clrf	_alarm
  1723  016E                     l4060:	
  1724                           
  1725                           ;mainMaster.c: 168:                 change3 = 1;
  1726  016E  01B1               	clrf	_change3
  1727  016F  0AB1               	incf	_change3,f
  1728  0170  2972               	goto	l4064
  1729  0171                     l4062:	
  1730                           
  1731                           ;mainMaster.c: 173:             change3 = 0;
  1732  0171  01B1               	clrf	_change3
  1733  0172                     l4064:	
  1734                           
  1735                           ;mainMaster.c: 177:         SSPCONbits.SSPEN = 0;
  1736  0172  1294               	bcf	20,5	;volatile
  1737                           
  1738                           ;mainMaster.c: 178:         RCSTAbits.SPEN = 1;
  1739  0173  1798               	bsf	24,7	;volatile
  1740                           
  1741                           ;mainMaster.c: 180:         if (UART_TX_Empty()){
  1742  0174  160A  118A  268C  120A  118A  	fcall	_UART_TX_Empty
  1743  0179  3A00               	xorlw	0
  1744  017A  1903               	skipnz
  1745  017B  2A2E               	goto	l4098
  1746                           
  1747                           ;mainMaster.c: 181:             UART_Write(temp[0]);
  1748  017C  1283               	bcf	3,5	;RP0=0, select bank0
  1749  017D  1303               	bcf	3,6	;RP1=0, select bank0
  1750  017E  083B               	movf	_temp,w
  1751  017F  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1752                           
  1753                           ;mainMaster.c: 182:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1754  0184  3003               	movlw	3
  1755  0185  1683               	bsf	3,5	;RP0=1, select bank1
  1756  0186  1303               	bcf	3,6	;RP1=0, select bank1
  1757  0187  00A1               	movwf	(??_main^(0+128)+1)
  1758  0188  3097               	movlw	151
  1759  0189  00A0               	movwf	??_main^(0+128)
  1760  018A                     u4867:	
  1761  018A  0BA0               	decfsz	??_main^(0+128),f
  1762  018B  298A               	goto	u4867
  1763  018C  0BA1               	decfsz	(??_main^(0+128)+1),f
  1764  018D  298A               	goto	u4867
  1765                           
  1766                           ;mainMaster.c: 183:             UART_Write(temp[1]);
  1767  018E  1283               	bcf	3,5	;RP0=0, select bank0
  1768  018F  1303               	bcf	3,6	;RP1=0, select bank0
  1769  0190  083C               	movf	_temp+1,w
  1770  0191  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1771                           
  1772                           ;mainMaster.c: 184:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1773  0196  3003               	movlw	3
  1774  0197  1683               	bsf	3,5	;RP0=1, select bank1
  1775  0198  1303               	bcf	3,6	;RP1=0, select bank1
  1776  0199  00A1               	movwf	(??_main^(0+128)+1)
  1777  019A  3097               	movlw	151
  1778  019B  00A0               	movwf	??_main^(0+128)
  1779  019C                     u4877:	
  1780  019C  0BA0               	decfsz	??_main^(0+128),f
  1781  019D  299C               	goto	u4877
  1782  019E  0BA1               	decfsz	(??_main^(0+128)+1),f
  1783  019F  299C               	goto	u4877
  1784                           
  1785                           ;mainMaster.c: 185:             UART_Write(temp[2]);
  1786  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  1787  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  1788  01A2  083D               	movf	_temp+2,w
  1789  01A3  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1790                           
  1791                           ;mainMaster.c: 186:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1792  01A8  3003               	movlw	3
  1793  01A9  1683               	bsf	3,5	;RP0=1, select bank1
  1794  01AA  1303               	bcf	3,6	;RP1=0, select bank1
  1795  01AB  00A1               	movwf	(??_main^(0+128)+1)
  1796  01AC  3097               	movlw	151
  1797  01AD  00A0               	movwf	??_main^(0+128)
  1798  01AE                     u4887:	
  1799  01AE  0BA0               	decfsz	??_main^(0+128),f
  1800  01AF  29AE               	goto	u4887
  1801  01B0  0BA1               	decfsz	(??_main^(0+128)+1),f
  1802  01B1  29AE               	goto	u4887
  1803                           
  1804                           ;mainMaster.c: 187:             UART_Write(temp[3]);
  1805  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1806  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1807  01B4  083E               	movf	_temp+3,w
  1808  01B5  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1809                           
  1810                           ;mainMaster.c: 188:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1811  01BA  3003               	movlw	3
  1812  01BB  1683               	bsf	3,5	;RP0=1, select bank1
  1813  01BC  1303               	bcf	3,6	;RP1=0, select bank1
  1814  01BD  00A1               	movwf	(??_main^(0+128)+1)
  1815  01BE  3097               	movlw	151
  1816  01BF  00A0               	movwf	??_main^(0+128)
  1817  01C0                     u4897:	
  1818  01C0  0BA0               	decfsz	??_main^(0+128),f
  1819  01C1  29C0               	goto	u4897
  1820  01C2  0BA1               	decfsz	(??_main^(0+128)+1),f
  1821  01C3  29C0               	goto	u4897
  1822                           
  1823                           ;mainMaster.c: 189:             UART_Write(temp[4]);
  1824  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  1825  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  1826  01C6  083F               	movf	_temp+4,w
  1827  01C7  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1828                           
  1829                           ;mainMaster.c: 190:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1830  01CC  3003               	movlw	3
  1831  01CD  1683               	bsf	3,5	;RP0=1, select bank1
  1832  01CE  1303               	bcf	3,6	;RP1=0, select bank1
  1833  01CF  00A1               	movwf	(??_main^(0+128)+1)
  1834  01D0  3097               	movlw	151
  1835  01D1  00A0               	movwf	??_main^(0+128)
  1836  01D2                     u4907:	
  1837  01D2  0BA0               	decfsz	??_main^(0+128),f
  1838  01D3  29D2               	goto	u4907
  1839  01D4  0BA1               	decfsz	(??_main^(0+128)+1),f
  1840  01D5  29D2               	goto	u4907
  1841                           
  1842                           ;mainMaster.c: 191:             UART_Write(door);
  1843  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  1844  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  1845  01D8  083A               	movf	_door,w
  1846  01D9  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1847                           
  1848                           ;mainMaster.c: 192:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1849  01DE  3003               	movlw	3
  1850  01DF  1683               	bsf	3,5	;RP0=1, select bank1
  1851  01E0  1303               	bcf	3,6	;RP1=0, select bank1
  1852  01E1  00A1               	movwf	(??_main^(0+128)+1)
  1853  01E2  3097               	movlw	151
  1854  01E3  00A0               	movwf	??_main^(0+128)
  1855  01E4                     u4917:	
  1856  01E4  0BA0               	decfsz	??_main^(0+128),f
  1857  01E5  29E4               	goto	u4917
  1858  01E6  0BA1               	decfsz	(??_main^(0+128)+1),f
  1859  01E7  29E4               	goto	u4917
  1860                           
  1861                           ;mainMaster.c: 193:             UART_Write(alarm);
  1862  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1863  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  1864  01EA  082F               	movf	_alarm,w
  1865  01EB  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1866                           
  1867                           ;mainMaster.c: 194:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1868  01F0  3003               	movlw	3
  1869  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  1870  01F2  1303               	bcf	3,6	;RP1=0, select bank1
  1871  01F3  00A1               	movwf	(??_main^(0+128)+1)
  1872  01F4  3097               	movlw	151
  1873  01F5  00A0               	movwf	??_main^(0+128)
  1874  01F6                     u4927:	
  1875  01F6  0BA0               	decfsz	??_main^(0+128),f
  1876  01F7  29F6               	goto	u4927
  1877  01F8  0BA1               	decfsz	(??_main^(0+128)+1),f
  1878  01F9  29F6               	goto	u4927
  1879                           
  1880                           ;mainMaster.c: 195:             UART_Write(bank);
  1881  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  1882  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  1883  01FC  082E               	movf	_bank,w
  1884  01FD  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1885                           
  1886                           ;mainMaster.c: 196:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1887  0202  3003               	movlw	3
  1888  0203  1683               	bsf	3,5	;RP0=1, select bank1
  1889  0204  1303               	bcf	3,6	;RP1=0, select bank1
  1890  0205  00A1               	movwf	(??_main^(0+128)+1)
  1891  0206  3097               	movlw	151
  1892  0207  00A0               	movwf	??_main^(0+128)
  1893  0208                     u4937:	
  1894  0208  0BA0               	decfsz	??_main^(0+128),f
  1895  0209  2A08               	goto	u4937
  1896  020A  0BA1               	decfsz	(??_main^(0+128)+1),f
  1897  020B  2A08               	goto	u4937
  1898                           
  1899                           ;mainMaster.c: 197:             UART_Write(seguridad);
  1900  020C  1283               	bcf	3,5	;RP0=0, select bank0
  1901  020D  1303               	bcf	3,6	;RP1=0, select bank0
  1902  020E  0829               	movf	_seguridad,w
  1903  020F  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1904                           
  1905                           ;mainMaster.c: 198:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1906  0214  3003               	movlw	3
  1907  0215  1683               	bsf	3,5	;RP0=1, select bank1
  1908  0216  1303               	bcf	3,6	;RP1=0, select bank1
  1909  0217  00A1               	movwf	(??_main^(0+128)+1)
  1910  0218  3097               	movlw	151
  1911  0219  00A0               	movwf	??_main^(0+128)
  1912  021A                     u4947:	
  1913  021A  0BA0               	decfsz	??_main^(0+128),f
  1914  021B  2A1A               	goto	u4947
  1915  021C  0BA1               	decfsz	(??_main^(0+128)+1),f
  1916  021D  2A1A               	goto	u4947
  1917                           
  1918                           ;mainMaster.c: 199:             UART_Write('A');
  1919  021E  3041               	movlw	65
  1920  021F  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1921                           
  1922                           ;mainMaster.c: 200:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1923  0224  3003               	movlw	3
  1924  0225  1683               	bsf	3,5	;RP0=1, select bank1
  1925  0226  1303               	bcf	3,6	;RP1=0, select bank1
  1926  0227  00A1               	movwf	(??_main^(0+128)+1)
  1927  0228  3097               	movlw	151
  1928  0229  00A0               	movwf	??_main^(0+128)
  1929  022A                     u4957:	
  1930  022A  0BA0               	decfsz	??_main^(0+128),f
  1931  022B  2A2A               	goto	u4957
  1932  022C  0BA1               	decfsz	(??_main^(0+128)+1),f
  1933  022D  2A2A               	goto	u4957
  1934  022E                     l4098:	
  1935                           
  1936                           ;mainMaster.c: 203:         RCSTAbits.SPEN = 0;
  1937  022E  1283               	bcf	3,5	;RP0=0, select bank0
  1938  022F  1303               	bcf	3,6	;RP1=0, select bank0
  1939  0230  1398               	bcf	24,7	;volatile
  1940                           
  1941                           ;mainMaster.c: 204:         SSPCONbits.SSPEN = 1;
  1942  0231  1694               	bsf	20,5	;volatile
  1943                           
  1944                           ;mainMaster.c: 206:         if (door == 1){
  1945  0232  033A               	decf	_door,w
  1946  0233  1D03               	btfss	3,2
  1947  0234  2A37               	goto	l4106
  1948                           
  1949                           ;mainMaster.c: 207:             val = 8;
  1950  0235  3008               	movlw	8
  1951  0236  2A3B               	goto	L1
  1952  0237                     l4106:	
  1953                           ;mainMaster.c: 208:         } else if (door == 0){
  1954                           
  1955  0237  083A               	movf	_door,w
  1956  0238  1D03               	btfss	3,2
  1957  0239  2A74               	goto	l4128
  1958                           
  1959                           ;mainMaster.c: 209:             val = 16;
  1960  023A  3010               	movlw	16
  1961  023B                     L1:	
  1962  023B  1683               	bsf	3,5	;RP0=1, select bank1
  1963  023C  1303               	bcf	3,6	;RP1=0, select bank1
  1964  023D  00A0               	movwf	??_main^(0+128)
  1965  023E  0820               	movf	??_main^(0+128),w
  1966  023F  1283               	bcf	3,5	;RP0=0, select bank0
  1967  0240  1303               	bcf	3,6	;RP1=0, select bank0
  1968  0241  00AC               	movwf	_val
  1969  0242  2A74               	goto	l4128
  1970  0243                     l4110:	
  1971                           
  1972                           ;mainMaster.c: 214:                 day2 = "LUNES    ";
  1973  0243  3079               	movlw	low (STR_2| (0+32768))
  1974  0244  1283               	bcf	3,5	;RP0=0, select bank0
  1975  0245  1303               	bcf	3,6	;RP1=0, select bank0
  1976  0246  00A5               	movwf	_day2
  1977  0247  3087               	movlw	high (STR_2| (0+32768))
  1978  0248  2A72               	goto	L8
  1979  0249                     l4112:	
  1980                           ;mainMaster.c: 215:                 break;
  1981                           
  1982                           
  1983                           ;mainMaster.c: 217:                 day2 = "MARTES   ";
  1984  0249  308D               	movlw	low (STR_3| (0+32768))
  1985  024A  1283               	bcf	3,5	;RP0=0, select bank0
  1986  024B  1303               	bcf	3,6	;RP1=0, select bank0
  1987  024C  00A5               	movwf	_day2
  1988  024D  3087               	movlw	high (STR_3| (0+32768))
  1989  024E  2A72               	goto	L8
  1990  024F                     l4114:	
  1991                           ;mainMaster.c: 218:                 break;
  1992                           
  1993                           
  1994                           ;mainMaster.c: 220:                 day2 = "MIERCOLES";
  1995  024F  30BF               	movlw	low (STR_4| (0+32768))
  1996  0250  1283               	bcf	3,5	;RP0=0, select bank0
  1997  0251  1303               	bcf	3,6	;RP1=0, select bank0
  1998  0252  00A5               	movwf	_day2
  1999  0253  3087               	movlw	high (STR_4| (0+32768))
  2000  0254  2A72               	goto	L8
  2001  0255                     l4116:	
  2002                           ;mainMaster.c: 221:                 break;
  2003                           
  2004                           
  2005                           ;mainMaster.c: 223:                 day2 = "JUEVES   ";
  2006  0255  3097               	movlw	low (STR_5| (0+32768))
  2007  0256  1283               	bcf	3,5	;RP0=0, select bank0
  2008  0257  1303               	bcf	3,6	;RP1=0, select bank0
  2009  0258  00A5               	movwf	_day2
  2010  0259  3087               	movlw	high (STR_5| (0+32768))
  2011  025A  2A72               	goto	L8
  2012  025B                     l4118:	
  2013                           ;mainMaster.c: 224:                 break;
  2014                           
  2015                           
  2016                           ;mainMaster.c: 226:                 day2 = "VIERNES  ";
  2017  025B  30AB               	movlw	low (STR_6| (0+32768))
  2018  025C  1283               	bcf	3,5	;RP0=0, select bank0
  2019  025D  1303               	bcf	3,6	;RP1=0, select bank0
  2020  025E  00A5               	movwf	_day2
  2021  025F  3087               	movlw	high (STR_6| (0+32768))
  2022  0260  2A72               	goto	L8
  2023  0261                     l4120:	
  2024                           ;mainMaster.c: 227:                 break;
  2025                           
  2026                           
  2027                           ;mainMaster.c: 229:                 day2 = "SABADO   ";
  2028  0261  3083               	movlw	low (STR_7| (0+32768))
  2029  0262  1283               	bcf	3,5	;RP0=0, select bank0
  2030  0263  1303               	bcf	3,6	;RP1=0, select bank0
  2031  0264  00A5               	movwf	_day2
  2032  0265  3087               	movlw	high (STR_7| (0+32768))
  2033  0266  2A72               	goto	L8
  2034  0267                     l4122:	
  2035                           ;mainMaster.c: 230:                 break;
  2036                           
  2037                           
  2038                           ;mainMaster.c: 232:                 day2 = "DOMINGO  ";
  2039  0267  30A1               	movlw	low (STR_8| (0+32768))
  2040  0268  1283               	bcf	3,5	;RP0=0, select bank0
  2041  0269  1303               	bcf	3,6	;RP1=0, select bank0
  2042  026A  00A5               	movwf	_day2
  2043  026B  3087               	movlw	high (STR_8| (0+32768))
  2044  026C  2A72               	goto	L8
  2045  026D                     l4124:	
  2046                           ;mainMaster.c: 233:                 break;
  2047                           
  2048                           
  2049                           ;mainMaster.c: 235:                 day2 = "         ";
  2050  026D  303E               	movlw	low ((STR_29+3)| (0+32768))
  2051  026E  1283               	bcf	3,5	;RP0=0, select bank0
  2052  026F  1303               	bcf	3,6	;RP1=0, select bank0
  2053  0270  00A5               	movwf	_day2
  2054  0271  3087               	movlw	high ((STR_29+3)| (0+32768))
  2055  0272                     L8:	
  2056  0272  00A6               	movwf	_day2+1
  2057                           
  2058                           ;mainMaster.c: 236:                 break;
  2059  0273  2A95               	goto	l4130
  2060  0274                     l4128:	
  2061  0274  0879               	movf	_day1,w
  2062  0275  1683               	bsf	3,5	;RP0=1, select bank1
  2063  0276  1303               	bcf	3,6	;RP1=0, select bank1
  2064  0277  00A0               	movwf	??_main^(0+128)
  2065  0278  01A1               	clrf	(??_main^(0+128)+1)
  2066                           
  2067                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2068                           ; Switch size 1, requested type "simple"
  2069                           ; Number of cases is 1, Range of values is 0 to 0
  2070                           ; switch strategies available:
  2071                           ; Name         Instructions Cycles
  2072                           ; simple_byte            4     3 (average)
  2073                           ; direct_byte           11     8 (fixed)
  2074                           ; jumptable            260     6 (fixed)
  2075                           ;	Chosen strategy is simple_byte
  2076  0279  0821               	movf	(??_main+1)^(0+128),w
  2077  027A  3A00               	xorlw	0	; case 0
  2078  027B  1903               	skipnz
  2079  027C  2A7E               	goto	l4480
  2080  027D  2A6D               	goto	l4124
  2081  027E                     l4480:	
  2082                           
  2083                           ; Switch size 1, requested type "simple"
  2084                           ; Number of cases is 7, Range of values is 1 to 7
  2085                           ; switch strategies available:
  2086                           ; Name         Instructions Cycles
  2087                           ; simple_byte           22    12 (average)
  2088                           ; direct_byte           32    11 (fixed)
  2089                           ; jumptable            263     9 (fixed)
  2090                           ;	Chosen strategy is simple_byte
  2091  027E  0820               	movf	??_main^(0+128),w
  2092  027F  3A01               	xorlw	1	; case 1
  2093  0280  1903               	skipnz
  2094  0281  2A43               	goto	l4110
  2095  0282  3A03               	xorlw	3	; case 2
  2096  0283  1903               	skipnz
  2097  0284  2A49               	goto	l4112
  2098  0285  3A01               	xorlw	1	; case 3
  2099  0286  1903               	skipnz
  2100  0287  2A4F               	goto	l4114
  2101  0288  3A07               	xorlw	7	; case 4
  2102  0289  1903               	skipnz
  2103  028A  2A55               	goto	l4116
  2104  028B  3A01               	xorlw	1	; case 5
  2105  028C  1903               	skipnz
  2106  028D  2A5B               	goto	l4118
  2107  028E  3A03               	xorlw	3	; case 6
  2108  028F  1903               	skipnz
  2109  0290  2A61               	goto	l4120
  2110  0291  3A01               	xorlw	1	; case 7
  2111  0292  1903               	skipnz
  2112  0293  2A67               	goto	l4122
  2113  0294  2A6D               	goto	l4124
  2114  0295                     l4130:	
  2115                           
  2116                           ;mainMaster.c: 240:         if (strcmp(temp,"23.50") > 0){
  2117  0295  3016               	movlw	low (STR_10| (0+32768))
  2118  0296  00F3               	movwf	strcmp@s2
  2119  0297  3088               	movlw	high (STR_10| (0+32768))
  2120  0298  00F4               	movwf	strcmp@s2+1
  2121  0299  303B               	movlw	(low (_temp| 0))& (0+255)
  2122  029A  120A  158A  208E  120A  118A  	fcall	_strcmp
  2123  029F  0874               	movf	?_strcmp+1,w
  2124  02A0  3A80               	xorlw	128
  2125  02A1  00FF               	movwf	127
  2126  02A2  3080               	movlw	128
  2127  02A3  027F               	subwf	127,w
  2128  02A4  1D03               	skipz
  2129  02A5  2AA8               	goto	u4275
  2130  02A6  3001               	movlw	1
  2131  02A7  0273               	subwf	?_strcmp,w
  2132  02A8                     u4275:	
  2133  02A8  1C03               	skipc
  2134  02A9  2AAE               	goto	l360
  2135                           
  2136                           ;mainMaster.c: 241:             PORTAbits.RA0 = 1;
  2137  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2138  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  2139  02AC  1405               	bsf	5,0	;volatile
  2140                           
  2141                           ;mainMaster.c: 242:         } else {
  2142  02AD  2AB1               	goto	l4134
  2143  02AE                     l360:	
  2144                           
  2145                           ;mainMaster.c: 243:             PORTAbits.RA0 = 0;
  2146  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  2147  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  2148  02B0  1005               	bcf	5,0	;volatile
  2149  02B1                     l4134:	
  2150                           
  2151                           ;mainMaster.c: 246:         if ((strcmp(time, "22:00") == 0) & ((day1 != 6) | (day1 != 7
      +                          ))){
  2152  02B1  3010               	movlw	low (STR_11| (0+32768))
  2153  02B2  00F3               	movwf	strcmp@s2
  2154  02B3  3088               	movlw	high (STR_11| (0+32768))
  2155  02B4  00F4               	movwf	strcmp@s2+1
  2156  02B5  3041               	movlw	(low (_time| 0))& (0+255)
  2157  02B6  120A  158A  208E  120A  118A  	fcall	_strcmp
  2158  02BB  0873               	movf	?_strcmp,w
  2159  02BC  0474               	iorwf	?_strcmp+1,w
  2160  02BD  1D03               	btfss	3,2
  2161  02BE  2AC7               	goto	l4142
  2162  02BF  3006               	movlw	6
  2163  02C0  0679               	xorwf	_day1,w
  2164  02C1  1D03               	btfss	3,2
  2165  02C2  2ADD               	goto	l4140
  2166  02C3  3007               	movlw	7
  2167  02C4  0679               	xorwf	_day1,w
  2168  02C5  1D03               	btfss	3,2
  2169  02C6  2ADD               	goto	l4140
  2170  02C7                     l4142:	
  2171                           ;mainMaster.c: 248:         } else if ((strcmp(time, "21:00") == 0) & ((day1 == 6) | (da
      +                          y1 == 7))){
  2172                           
  2173  02C7  300A               	movlw	low (STR_12| (0+32768))
  2174  02C8  00F3               	movwf	strcmp@s2
  2175  02C9  3088               	movlw	high (STR_12| (0+32768))
  2176  02CA  00F4               	movwf	strcmp@s2+1
  2177  02CB  3041               	movlw	(low (_time| 0))& (0+255)
  2178  02CC  120A  158A  208E  120A  118A  	fcall	_strcmp
  2179  02D1  0873               	movf	?_strcmp,w
  2180  02D2  0474               	iorwf	?_strcmp+1,w
  2181  02D3  1D03               	btfss	3,2
  2182  02D4  2AE2               	goto	l4150
  2183  02D5  3006               	movlw	6
  2184  02D6  0679               	xorwf	_day1,w
  2185  02D7  1903               	btfsc	3,2
  2186  02D8  2ADD               	goto	l4140
  2187  02D9  3007               	movlw	7
  2188  02DA  0679               	xorwf	_day1,w
  2189  02DB  1D03               	btfss	3,2
  2190  02DC  2AE2               	goto	l4150
  2191  02DD                     l4140:	
  2192                           
  2193                           ;mainMaster.c: 247:             close_door();
  2194  02DD  160A  118A  271F  120A  118A  	fcall	_close_door
  2195  02E2                     l4150:	
  2196                           
  2197                           ;mainMaster.c: 253:         if(PORTCbits.RC0 == 1){
  2198  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  2199  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  2200  02E4  1C07               	btfss	7,0	;volatile
  2201  02E5  2B0F               	goto	l4168
  2202                           
  2203                           ;mainMaster.c: 254:             if (change == 0){
  2204  02E6  0834               	movf	_change,w
  2205  02E7  1D03               	btfss	3,2
  2206  02E8  2B10               	goto	l4170
  2207                           
  2208                           ;mainMaster.c: 255:                 state++;
  2209  02E9  3001               	movlw	1
  2210  02EA  1683               	bsf	3,5	;RP0=1, select bank1
  2211  02EB  1303               	bcf	3,6	;RP1=0, select bank1
  2212  02EC  00A0               	movwf	??_main^(0+128)
  2213  02ED  0820               	movf	??_main^(0+128),w
  2214  02EE  07FA               	addwf	_state,f
  2215                           
  2216                           ;mainMaster.c: 256:                 if (state == 4){
  2217  02EF  3004               	movlw	4
  2218  02F0  067A               	xorwf	_state,w
  2219  02F1  1903               	btfsc	3,2
  2220                           
  2221                           ;mainMaster.c: 257:                     k = 0;
  2222  02F2  01F8               	clrf	_k
  2223                           
  2224                           ;mainMaster.c: 259:                 Lcd_Clear();
  2225  02F3  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  2226                           
  2227                           ;mainMaster.c: 260:                 if (state > 4){
  2228  02F8  3005               	movlw	5
  2229  02F9  027A               	subwf	_state,w
  2230  02FA  1803               	btfsc	3,0
  2231                           
  2232                           ;mainMaster.c: 261:                     state = 0;
  2233  02FB  01FA               	clrf	_state
  2234                           
  2235                           ;mainMaster.c: 263:                 j = 0;
  2236                           
  2237                           ;mainMaster.c: 262:                 }
  2238  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  2239  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  2240  02FE  01B5               	clrf	_j
  2241  02FF                     l4166:	
  2242                           ;mainMaster.c: 264:                 while(j < 50){
  2243                           
  2244                           
  2245                           ;mainMaster.c: 264:                 while(j < 50){
  2246  02FF  3032               	movlw	50
  2247  0300  0235               	subwf	_j,w
  2248  0301  1803               	btfsc	3,0
  2249  0302  2B0C               	goto	l375
  2250                           
  2251                           ;mainMaster.c: 265:                     j++;
  2252  0303  3001               	movlw	1
  2253  0304  1683               	bsf	3,5	;RP0=1, select bank1
  2254  0305  1303               	bcf	3,6	;RP1=0, select bank1
  2255  0306  00A0               	movwf	??_main^(0+128)
  2256  0307  0820               	movf	??_main^(0+128),w
  2257  0308  1283               	bcf	3,5	;RP0=0, select bank0
  2258  0309  1303               	bcf	3,6	;RP1=0, select bank0
  2259  030A  07B5               	addwf	_j,f
  2260  030B  2AFF               	goto	l4166
  2261  030C                     l375:	
  2262                           
  2263                           ;mainMaster.c: 268:                 change = 1;
  2264  030C  01B4               	clrf	_change
  2265  030D  0AB4               	incf	_change,f
  2266  030E  2B10               	goto	l4170
  2267  030F                     l4168:	
  2268                           
  2269                           ;mainMaster.c: 271:             change =0;
  2270  030F  01B4               	clrf	_change
  2271  0310                     l4170:	
  2272                           
  2273                           ;mainMaster.c: 274:         if (state == 0){
  2274  0310  087A               	movf	_state,w
  2275  0311  1D03               	btfss	3,2
  2276  0312  2B5D               	goto	l4182
  2277                           
  2278                           ;mainMaster.c: 276:             Lcd_Set_Cursor(1,1);
  2279  0313  01F7               	clrf	Lcd_Set_Cursor@b
  2280  0314  0AF7               	incf	Lcd_Set_Cursor@b,f
  2281  0315  3001               	movlw	1
  2282  0316  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2283                           
  2284                           ;mainMaster.c: 277:             Lcd_Write_String(time);
  2285  031B  3041               	movlw	(low (_time| 0))& (0+255)
  2286  031C  1283               	bcf	3,5	;RP0=0, select bank0
  2287  031D  1303               	bcf	3,6	;RP1=0, select bank0
  2288  031E  00C7               	movwf	Lcd_Write_String@a
  2289  031F  3000               	movlw	0
  2290  0320  00C8               	movwf	Lcd_Write_String@a+1
  2291  0321  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2292                           
  2293                           ;mainMaster.c: 279:             Lcd_Set_Cursor(1,7);
  2294  0326  3007               	movlw	7
  2295  0327  1683               	bsf	3,5	;RP0=1, select bank1
  2296  0328  1303               	bcf	3,6	;RP1=0, select bank1
  2297  0329  00A0               	movwf	??_main^(0+128)
  2298  032A  0820               	movf	??_main^(0+128),w
  2299  032B  00F7               	movwf	Lcd_Set_Cursor@b
  2300  032C  3001               	movlw	1
  2301  032D  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2302                           
  2303                           ;mainMaster.c: 280:             Lcd_Write_String(day2);
  2304  0332  1283               	bcf	3,5	;RP0=0, select bank0
  2305  0333  1303               	bcf	3,6	;RP1=0, select bank0
  2306  0334  0825               	movf	_day2,w
  2307  0335  00C7               	movwf	Lcd_Write_String@a
  2308  0336  0826               	movf	_day2+1,w
  2309  0337  00C8               	movwf	Lcd_Write_String@a+1
  2310  0338  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2311                           
  2312                           ;mainMaster.c: 282:             Lcd_Set_Cursor(2,1);
  2313  033D  01F7               	clrf	Lcd_Set_Cursor@b
  2314  033E  0AF7               	incf	Lcd_Set_Cursor@b,f
  2315  033F  3002               	movlw	2
  2316  0340  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2317                           
  2318                           ;mainMaster.c: 283:             Lcd_Write_String(temp);
  2319  0345  303B               	movlw	(low (_temp| 0))& (0+255)
  2320  0346  1283               	bcf	3,5	;RP0=0, select bank0
  2321  0347  1303               	bcf	3,6	;RP1=0, select bank0
  2322  0348  00C7               	movwf	Lcd_Write_String@a
  2323  0349  3000               	movlw	0
  2324  034A  00C8               	movwf	Lcd_Write_String@a+1
  2325  034B  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2326                           
  2327                           ;mainMaster.c: 284:             Lcd_Write_Char(223);
  2328  0350  30DF               	movlw	223
  2329  0351  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  2330                           
  2331                           ;mainMaster.c: 285:             Lcd_Write_Char('C');
  2332  0356  3043               	movlw	67
  2333  0357  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  2334                           
  2335                           ;mainMaster.c: 287:         } else if (state == 1){
  2336  035C  28B1               	goto	l3992
  2337  035D                     l4182:	
  2338  035D  037A               	decf	_state,w
  2339  035E  1D03               	btfss	3,2
  2340  035F  2BBA               	goto	l4208
  2341                           
  2342                           ;mainMaster.c: 289:             Lcd_Set_Cursor(1,1);
  2343  0360  01F7               	clrf	Lcd_Set_Cursor@b
  2344  0361  0AF7               	incf	Lcd_Set_Cursor@b,f
  2345  0362  3001               	movlw	1
  2346  0363  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2347                           
  2348                           ;mainMaster.c: 290:             if (door == 1){
  2349  0368  1283               	bcf	3,5	;RP0=0, select bank0
  2350  0369  1303               	bcf	3,6	;RP1=0, select bank0
  2351  036A  033A               	decf	_door,w
  2352  036B  1D03               	btfss	3,2
  2353  036C  2B71               	goto	l4190
  2354                           
  2355                           ;mainMaster.c: 291:                 Lcd_Write_String("DOOR OPEN  ");
  2356  036D  3055               	movlw	low (STR_13| (0+32768))
  2357  036E  00C7               	movwf	Lcd_Write_String@a
  2358  036F  3087               	movlw	high (STR_13| (0+32768))
  2359  0370  2B74               	goto	L9
  2360  0371                     l4190:	
  2361                           ;mainMaster.c: 292:             } else {
  2362                           
  2363                           
  2364                           ;mainMaster.c: 293:                 Lcd_Write_String("DOOR CLOSED");
  2365  0371  3061               	movlw	low (STR_14| (0+32768))
  2366  0372  00C7               	movwf	Lcd_Write_String@a
  2367  0373  3087               	movlw	high (STR_14| (0+32768))
  2368  0374                     L9:	
  2369  0374  00C8               	movwf	Lcd_Write_String@a+1
  2370  0375  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2371                           
  2372                           ;mainMaster.c: 296:             Lcd_Set_Cursor(2,1);
  2373  037A  01F7               	clrf	Lcd_Set_Cursor@b
  2374  037B  0AF7               	incf	Lcd_Set_Cursor@b,f
  2375  037C  3002               	movlw	2
  2376  037D  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2377                           
  2378                           ;mainMaster.c: 297:             if (trip == 1){
  2379  0382  1283               	bcf	3,5	;RP0=0, select bank0
  2380  0383  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0384  0339               	decf	_trip,w
  2382  0385  1D03               	btfss	3,2
  2383  0386  2B8B               	goto	l4198
  2384                           
  2385                           ;mainMaster.c: 298:                 Lcd_Write_String("TRIP ON ");
  2386  0387  30D2               	movlw	low (STR_15| (0+32768))
  2387  0388  00C7               	movwf	Lcd_Write_String@a
  2388  0389  3087               	movlw	high (STR_15| (0+32768))
  2389  038A  2B8E               	goto	L10
  2390  038B                     l4198:	
  2391                           ;mainMaster.c: 299:             } else {
  2392                           
  2393                           
  2394                           ;mainMaster.c: 300:                 Lcd_Write_String("TRIP OFF");
  2395  038B  30E4               	movlw	low (STR_16| (0+32768))
  2396  038C  00C7               	movwf	Lcd_Write_String@a
  2397  038D  3087               	movlw	high (STR_16| (0+32768))
  2398  038E                     L10:	
  2399  038E  00C8               	movwf	Lcd_Write_String@a+1
  2400  038F  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2401                           
  2402                           ;mainMaster.c: 303:             Lcd_Set_Cursor(2,9);
  2403  0394  3009               	movlw	9
  2404  0395  1683               	bsf	3,5	;RP0=1, select bank1
  2405  0396  1303               	bcf	3,6	;RP1=0, select bank1
  2406  0397  00A0               	movwf	??_main^(0+128)
  2407  0398  0820               	movf	??_main^(0+128),w
  2408  0399  00F7               	movwf	Lcd_Set_Cursor@b
  2409  039A  3002               	movlw	2
  2410  039B  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2411                           
  2412                           ;mainMaster.c: 304:             if (bank == 3){
  2413  03A0  3003               	movlw	3
  2414  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  2415  03A2  1303               	bcf	3,6	;RP1=0, select bank0
  2416  03A3  062E               	xorwf	_bank,w
  2417  03A4  1D03               	btfss	3,2
  2418  03A5  2BB0               	goto	l4206
  2419                           
  2420                           ;mainMaster.c: 305:                 Lcd_Write_String("BANK ON ");
  2421  03A6  30C9               	movlw	low (STR_17| (0+32768))
  2422  03A7  00C7               	movwf	Lcd_Write_String@a
  2423  03A8  3087               	movlw	high (STR_17| (0+32768))
  2424  03A9  00C8               	movwf	Lcd_Write_String@a+1
  2425  03AA  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2426                           
  2427                           ;mainMaster.c: 306:             } else {
  2428  03AF  28B1               	goto	l3992
  2429  03B0                     l4206:	
  2430                           
  2431                           ;mainMaster.c: 307:                 Lcd_Write_String("BANK OFF");
  2432  03B0  30DB               	movlw	low (STR_18| (0+32768))
  2433  03B1  00C7               	movwf	Lcd_Write_String@a
  2434  03B2  3087               	movlw	high (STR_18| (0+32768))
  2435  03B3  00C8               	movwf	Lcd_Write_String@a+1
  2436  03B4  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2437  03B9  28B1               	goto	l3992
  2438  03BA                     l4208:	
  2439  03BA  3002               	movlw	2
  2440  03BB  067A               	xorwf	_state,w
  2441  03BC  1D03               	btfss	3,2
  2442  03BD  2BF9               	goto	l4226
  2443                           
  2444                           ;mainMaster.c: 312:             Lcd_Set_Cursor(1,1);
  2445  03BE  01F7               	clrf	Lcd_Set_Cursor@b
  2446  03BF  0AF7               	incf	Lcd_Set_Cursor@b,f
  2447  03C0  3001               	movlw	1
  2448  03C1  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2449                           
  2450                           ;mainMaster.c: 313:             if (PIR == 1){
  2451  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  2452  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  2453  03C8  0338               	decf	_PIR,w
  2454  03C9  1D03               	btfss	3,2
  2455  03CA  2BCF               	goto	l4216
  2456                           
  2457                           ;mainMaster.c: 314:                 Lcd_Write_String("PIR ON ");
  2458  03CB  30ED               	movlw	low (STR_19| (0+32768))
  2459  03CC  00C7               	movwf	Lcd_Write_String@a
  2460  03CD  3087               	movlw	high (STR_19| (0+32768))
  2461  03CE  2BD2               	goto	L11
  2462  03CF                     l4216:	
  2463                           ;mainMaster.c: 315:             } else {
  2464                           
  2465                           
  2466                           ;mainMaster.c: 316:                 Lcd_Write_String("PIR OFF");
  2467  03CF  30F5               	movlw	low (STR_20| (0+32768))
  2468  03D0  00C7               	movwf	Lcd_Write_String@a
  2469  03D1  3087               	movlw	high (STR_20| (0+32768))
  2470  03D2                     L11:	
  2471  03D2  00C8               	movwf	Lcd_Write_String@a+1
  2472  03D3  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2473                           
  2474                           ;mainMaster.c: 319:             Lcd_Set_Cursor(2,1);
  2475  03D8  01F7               	clrf	Lcd_Set_Cursor@b
  2476  03D9  0AF7               	incf	Lcd_Set_Cursor@b,f
  2477  03DA  3002               	movlw	2
  2478  03DB  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2479                           
  2480                           ;mainMaster.c: 320:             if (IR == 1){
  2481  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  2482  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  2483  03E2  0337               	decf	_IR,w
  2484  03E3  1D03               	btfss	3,2
  2485  03E4  2BEF               	goto	l4224
  2486                           
  2487                           ;mainMaster.c: 321:                 Lcd_Write_String("IR ON ");
  2488  03E5  30EE               	movlw	low ((STR_19+1)| (0+32768))
  2489  03E6  00C7               	movwf	Lcd_Write_String@a
  2490  03E7  3087               	movlw	high ((STR_19+1)| (0+32768))
  2491  03E8  00C8               	movwf	Lcd_Write_String@a+1
  2492  03E9  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2493                           
  2494                           ;mainMaster.c: 322:             } else {
  2495  03EE  28B1               	goto	l3992
  2496  03EF                     l4224:	
  2497                           
  2498                           ;mainMaster.c: 323:                 Lcd_Write_String("IR OFF");
  2499  03EF  30F6               	movlw	low ((STR_20+1)| (0+32768))
  2500  03F0  00C7               	movwf	Lcd_Write_String@a
  2501  03F1  3087               	movlw	high ((STR_20+1)| (0+32768))
  2502  03F2  00C8               	movwf	Lcd_Write_String@a+1
  2503  03F3  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2504                           
  2505                           ;mainMaster.c: 325:         } else if (state == 3){
  2506                           
  2507                           ;mainMaster.c: 324:             }
  2508  03F8  28B1               	goto	l3992
  2509  03F9                     l4226:	
  2510  03F9  3003               	movlw	3
  2511  03FA  067A               	xorwf	_state,w
  2512  03FB  1D03               	btfss	3,2
  2513  03FC  2D4F               	goto	l4278
  2514                           
  2515                           ;mainMaster.c: 326:             Lcd_Set_Cursor(1,1);
  2516  03FD  01F7               	clrf	Lcd_Set_Cursor@b
  2517  03FE  0AF7               	incf	Lcd_Set_Cursor@b,f
  2518  03FF  3001               	movlw	1
  2519  0400  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2520                           
  2521                           ;mainMaster.c: 327:             Lcd_Write_String("TIME: ");
  2522  0405  30FD               	movlw	low (STR_23| (0+32768))
  2523  0406  1283               	bcf	3,5	;RP0=0, select bank0
  2524  0407  1303               	bcf	3,6	;RP1=0, select bank0
  2525  0408  00C7               	movwf	Lcd_Write_String@a
  2526  0409  3087               	movlw	high (STR_23| (0+32768))
  2527  040A  00C8               	movwf	Lcd_Write_String@a+1
  2528  040B  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2529                           
  2530                           ;mainMaster.c: 328:             Lcd_Write_String(time);
  2531  0410  3041               	movlw	(low (_time| 0))& (0+255)
  2532  0411  1283               	bcf	3,5	;RP0=0, select bank0
  2533  0412  1303               	bcf	3,6	;RP1=0, select bank0
  2534  0413  00C7               	movwf	Lcd_Write_String@a
  2535  0414  3000               	movlw	0
  2536  0415  00C8               	movwf	Lcd_Write_String@a+1
  2537  0416  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2538                           
  2539                           ;mainMaster.c: 330:             Lcd_Set_Cursor(2,1);
  2540  041B  01F7               	clrf	Lcd_Set_Cursor@b
  2541  041C  0AF7               	incf	Lcd_Set_Cursor@b,f
  2542  041D  3002               	movlw	2
  2543  041E  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2544                           
  2545                           ;mainMaster.c: 331:             Lcd_Write_String("DAY: ");
  2546  0423  3004               	movlw	low (STR_24| (0+32768))
  2547  0424  1283               	bcf	3,5	;RP0=0, select bank0
  2548  0425  1303               	bcf	3,6	;RP1=0, select bank0
  2549  0426  00C7               	movwf	Lcd_Write_String@a
  2550  0427  3088               	movlw	high (STR_24| (0+32768))
  2551  0428  00C8               	movwf	Lcd_Write_String@a+1
  2552  0429  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2553                           
  2554                           ;mainMaster.c: 332:             Lcd_Write_String(day2);
  2555  042E  1283               	bcf	3,5	;RP0=0, select bank0
  2556  042F  1303               	bcf	3,6	;RP1=0, select bank0
  2557  0430  0825               	movf	_day2,w
  2558  0431  00C7               	movwf	Lcd_Write_String@a
  2559  0432  0826               	movf	_day2+1,w
  2560  0433  00C8               	movwf	Lcd_Write_String@a+1
  2561  0434  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2562                           
  2563                           ;mainMaster.c: 334:             newhour = (time[0] - '0') * 10 + (time[1] - '0');
  2564  0439  300A               	movlw	10
  2565  043A  1683               	bsf	3,5	;RP0=1, select bank1
  2566  043B  1303               	bcf	3,6	;RP1=0, select bank1
  2567  043C  00A0               	movwf	??_main^(0+128)
  2568  043D  0820               	movf	??_main^(0+128),w
  2569  043E  00F3               	movwf	___bmul@multiplicand
  2570  043F  1283               	bcf	3,5	;RP0=0, select bank0
  2571  0440  1303               	bcf	3,6	;RP1=0, select bank0
  2572  0441  0841               	movf	_time,w
  2573  0442  120A  158A  202B  120A  118A  	fcall	___bmul
  2574  0447  1283               	bcf	3,5	;RP0=0, select bank0
  2575  0448  1303               	bcf	3,6	;RP1=0, select bank0
  2576  0449  0742               	addwf	_time+1,w
  2577  044A  3EF0               	addlw	240
  2578  044B  1683               	bsf	3,5	;RP0=1, select bank1
  2579  044C  1303               	bcf	3,6	;RP1=0, select bank1
  2580  044D  00A1               	movwf	(??_main+1)^(0+128)
  2581  044E  0821               	movf	(??_main+1)^(0+128),w
  2582  044F  1283               	bcf	3,5	;RP0=0, select bank0
  2583  0450  1303               	bcf	3,6	;RP1=0, select bank0
  2584  0451  00A8               	movwf	_newhour
  2585                           
  2586                           ;mainMaster.c: 335:             newmin = (time[3] - '0') * 10 + (time[4] - '0');
  2587  0452  300A               	movlw	10
  2588  0453  1683               	bsf	3,5	;RP0=1, select bank1
  2589  0454  1303               	bcf	3,6	;RP1=0, select bank1
  2590  0455  00A0               	movwf	??_main^(0+128)
  2591  0456  0820               	movf	??_main^(0+128),w
  2592  0457  00F3               	movwf	___bmul@multiplicand
  2593  0458  1283               	bcf	3,5	;RP0=0, select bank0
  2594  0459  1303               	bcf	3,6	;RP1=0, select bank0
  2595  045A  0844               	movf	_time+3,w
  2596  045B  120A  158A  202B  120A  118A  	fcall	___bmul
  2597  0460  1283               	bcf	3,5	;RP0=0, select bank0
  2598  0461  1303               	bcf	3,6	;RP1=0, select bank0
  2599  0462  0745               	addwf	_time+4,w
  2600  0463  3EF0               	addlw	240
  2601  0464  1683               	bsf	3,5	;RP0=1, select bank1
  2602  0465  1303               	bcf	3,6	;RP1=0, select bank1
  2603  0466  00A1               	movwf	(??_main+1)^(0+128)
  2604  0467  0821               	movf	(??_main+1)^(0+128),w
  2605  0468  1283               	bcf	3,5	;RP0=0, select bank0
  2606  0469  1303               	bcf	3,6	;RP1=0, select bank0
  2607  046A  00A7               	movwf	_newmin
  2608                           
  2609                           ;mainMaster.c: 337:             if (PORTDbits.RD4 == 1){
  2610  046B  1E08               	btfss	8,4	;volatile
  2611  046C  2C7B               	goto	l394
  2612                           
  2613                           ;mainMaster.c: 338:                 newhour++;
  2614  046D  3001               	movlw	1
  2615  046E  1683               	bsf	3,5	;RP0=1, select bank1
  2616  046F  1303               	bcf	3,6	;RP1=0, select bank1
  2617  0470  00A0               	movwf	??_main^(0+128)
  2618  0471  0820               	movf	??_main^(0+128),w
  2619  0472  1283               	bcf	3,5	;RP0=0, select bank0
  2620  0473  1303               	bcf	3,6	;RP1=0, select bank0
  2621  0474  07A8               	addwf	_newhour,f
  2622                           
  2623                           ;mainMaster.c: 339:                 if (newhour > 23){
  2624  0475  3018               	movlw	24
  2625  0476  0228               	subwf	_newhour,w
  2626  0477  1C03               	skipc
  2627  0478  2CB9               	goto	l4246
  2628                           
  2629                           ;mainMaster.c: 340:                     newhour = 0;
  2630  0479  01A8               	clrf	_newhour
  2631                           
  2632                           ;mainMaster.c: 343:             } else if (PORTDbits.RD3 == 1){
  2633  047A  2CB9               	goto	l4246
  2634  047B                     l394:	
  2635  047B  1D88               	btfss	8,3	;volatile
  2636  047C  2C8B               	goto	l397
  2637                           
  2638                           ;mainMaster.c: 344:                 newhour--;
  2639  047D  3001               	movlw	1
  2640  047E  02A8               	subwf	_newhour,f
  2641                           
  2642                           ;mainMaster.c: 345:                 if (newhour == 255){
  2643  047F  0A28               	incf	_newhour,w
  2644  0480  1D03               	btfss	3,2
  2645  0481  2CB9               	goto	l4246
  2646                           
  2647                           ;mainMaster.c: 346:                     newhour = 23;
  2648  0482  3017               	movlw	23
  2649  0483  1683               	bsf	3,5	;RP0=1, select bank1
  2650  0484  1303               	bcf	3,6	;RP1=0, select bank1
  2651  0485  00A0               	movwf	??_main^(0+128)
  2652  0486  0820               	movf	??_main^(0+128),w
  2653  0487  1283               	bcf	3,5	;RP0=0, select bank0
  2654  0488  1303               	bcf	3,6	;RP1=0, select bank0
  2655  0489  00A8               	movwf	_newhour
  2656  048A  2CB9               	goto	l4246
  2657  048B                     l397:	
  2658  048B  1D08               	btfss	8,2	;volatile
  2659  048C  2C9B               	goto	l400
  2660                           
  2661                           ;mainMaster.c: 350:                 newmin++;
  2662  048D  3001               	movlw	1
  2663  048E  1683               	bsf	3,5	;RP0=1, select bank1
  2664  048F  1303               	bcf	3,6	;RP1=0, select bank1
  2665  0490  00A0               	movwf	??_main^(0+128)
  2666  0491  0820               	movf	??_main^(0+128),w
  2667  0492  1283               	bcf	3,5	;RP0=0, select bank0
  2668  0493  1303               	bcf	3,6	;RP1=0, select bank0
  2669  0494  07A7               	addwf	_newmin,f
  2670                           
  2671                           ;mainMaster.c: 351:                 if (newmin > 59){
  2672  0495  303C               	movlw	60
  2673  0496  0227               	subwf	_newmin,w
  2674  0497  1C03               	skipc
  2675  0498  2CB9               	goto	l4246
  2676                           
  2677                           ;mainMaster.c: 352:                     newmin = 0;
  2678  0499  01A7               	clrf	_newmin
  2679  049A  2CB9               	goto	l4246
  2680  049B                     l400:	
  2681  049B  1C88               	btfss	8,1	;volatile
  2682  049C  2CAB               	goto	l403
  2683                           
  2684                           ;mainMaster.c: 356:                 newmin--;
  2685  049D  3001               	movlw	1
  2686  049E  02A7               	subwf	_newmin,f
  2687                           
  2688                           ;mainMaster.c: 357:                 if (newmin == 255){
  2689  049F  0A27               	incf	_newmin,w
  2690  04A0  1D03               	btfss	3,2
  2691  04A1  2CB9               	goto	l4246
  2692                           
  2693                           ;mainMaster.c: 358:                     newmin = 59;
  2694  04A2  303B               	movlw	59
  2695  04A3  1683               	bsf	3,5	;RP0=1, select bank1
  2696  04A4  1303               	bcf	3,6	;RP1=0, select bank1
  2697  04A5  00A0               	movwf	??_main^(0+128)
  2698  04A6  0820               	movf	??_main^(0+128),w
  2699  04A7  1283               	bcf	3,5	;RP0=0, select bank0
  2700  04A8  1303               	bcf	3,6	;RP1=0, select bank0
  2701  04A9  00A7               	movwf	_newmin
  2702  04AA  2CB9               	goto	l4246
  2703  04AB                     l403:	
  2704  04AB  1C08               	btfss	8,0	;volatile
  2705  04AC  2CC8               	goto	l4272
  2706                           
  2707                           ;mainMaster.c: 362:                 day1++;
  2708  04AD  3001               	movlw	1
  2709  04AE  1683               	bsf	3,5	;RP0=1, select bank1
  2710  04AF  1303               	bcf	3,6	;RP1=0, select bank1
  2711  04B0  00A0               	movwf	??_main^(0+128)
  2712  04B1  0820               	movf	??_main^(0+128),w
  2713  04B2  07F9               	addwf	_day1,f
  2714                           
  2715                           ;mainMaster.c: 363:                 if (day1 > 7){
  2716  04B3  3008               	movlw	8
  2717  04B4  0279               	subwf	_day1,w
  2718  04B5  1C03               	skipc
  2719  04B6  2CB9               	goto	l4246
  2720                           
  2721                           ;mainMaster.c: 364:                     day1 = 1;
  2722  04B7  01F9               	clrf	_day1
  2723  04B8  0AF9               	incf	_day1,f
  2724  04B9                     l4246:	
  2725                           
  2726                           ;mainMaster.c: 342:                 _delay((unsigned long)((100)*(8000000/4000.0)));
  2727  04B9  3002               	movlw	2
  2728  04BA  1683               	bsf	3,5	;RP0=1, select bank1
  2729  04BB  1303               	bcf	3,6	;RP1=0, select bank1
  2730  04BC  00A2               	movwf	(??_main^(0+128)+2)
  2731  04BD  3004               	movlw	4
  2732  04BE  00A1               	movwf	(??_main^(0+128)+1)
  2733  04BF  30B9               	movlw	185
  2734  04C0  00A0               	movwf	??_main^(0+128)
  2735  04C1                     u4967:	
  2736  04C1  0BA0               	decfsz	??_main^(0+128),f
  2737  04C2  2CC1               	goto	u4967
  2738  04C3  0BA1               	decfsz	(??_main^(0+128)+1),f
  2739  04C4  2CC1               	goto	u4967
  2740  04C5  0BA2               	decfsz	(??_main^(0+128)+2),f
  2741  04C6  2CC1               	goto	u4967
  2742  04C7  2CC8               	nop2
  2743  04C8                     l4272:	
  2744                           
  2745                           ;mainMaster.c: 369:             hour = ((newhour / 10) << 4) + (newhour % 10);
  2746  04C8  300A               	movlw	10
  2747  04C9  00F3               	movwf	___awdiv@divisor
  2748  04CA  3000               	movlw	0
  2749  04CB  00F4               	movwf	___awdiv@divisor+1
  2750  04CC  1283               	bcf	3,5	;RP0=0, select bank0
  2751  04CD  1303               	bcf	3,6	;RP1=0, select bank0
  2752  04CE  0828               	movf	_newhour,w
  2753  04CF  1683               	bsf	3,5	;RP0=1, select bank1
  2754  04D0  1303               	bcf	3,6	;RP1=0, select bank1
  2755  04D1  00A0               	movwf	??_main^(0+128)
  2756  04D2  01A1               	clrf	(??_main^(0+128)+1)
  2757  04D3  0820               	movf	??_main^(0+128),w
  2758  04D4  00F5               	movwf	___awdiv@dividend
  2759  04D5  0821               	movf	(??_main+1)^(0+128),w
  2760  04D6  00F6               	movwf	___awdiv@dividend+1
  2761  04D7  120A  158A  2307  120A  118A  	fcall	___awdiv
  2762  04DC  0873               	movf	?___awdiv,w
  2763  04DD  1683               	bsf	3,5	;RP0=1, select bank1
  2764  04DE  1303               	bcf	3,6	;RP1=0, select bank1
  2765  04DF  00A2               	movwf	(??_main+2)^(0+128)
  2766  04E0  3004               	movlw	4
  2767  04E1                     u4585:	
  2768  04E1  1003               	clrc
  2769  04E2  0DA2               	rlf	(??_main+2)^(0+128),f
  2770  04E3  3EFF               	addlw	-1
  2771  04E4  1D03               	skipz
  2772  04E5  2CE1               	goto	u4585
  2773  04E6  300A               	movlw	10
  2774  04E7  00F3               	movwf	___awmod@divisor
  2775  04E8  3000               	movlw	0
  2776  04E9  00F4               	movwf	___awmod@divisor+1
  2777  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  2778  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  2779  04EC  0828               	movf	_newhour,w
  2780  04ED  1683               	bsf	3,5	;RP0=1, select bank1
  2781  04EE  1303               	bcf	3,6	;RP1=0, select bank1
  2782  04EF  00A3               	movwf	(??_main+3)^(0+128)
  2783  04F0  01A4               	clrf	((??_main+3)^(0+128)+1)
  2784  04F1  0823               	movf	(??_main+3)^(0+128),w
  2785  04F2  00F5               	movwf	___awmod@dividend
  2786  04F3  0824               	movf	(??_main+4)^(0+128),w
  2787  04F4  00F6               	movwf	___awmod@dividend+1
  2788  04F5  120A  118A  26B1  120A  118A  	fcall	___awmod
  2789  04FA  0873               	movf	?___awmod,w
  2790  04FB  1683               	bsf	3,5	;RP0=1, select bank1
  2791  04FC  1303               	bcf	3,6	;RP1=0, select bank1
  2792  04FD  0722               	addwf	(??_main+2)^(0+128),w
  2793  04FE  00A5               	movwf	(??_main+5)^(0+128)
  2794  04FF  0825               	movf	(??_main+5)^(0+128),w
  2795  0500  1283               	bcf	3,5	;RP0=0, select bank0
  2796  0501  1303               	bcf	3,6	;RP1=0, select bank0
  2797  0502  00AB               	movwf	_hour
  2798                           
  2799                           ;mainMaster.c: 370:             min = ((newmin / 10) << 4) + (newmin % 10);
  2800  0503  300A               	movlw	10
  2801  0504  00F3               	movwf	___awdiv@divisor
  2802  0505  3000               	movlw	0
  2803  0506  00F4               	movwf	___awdiv@divisor+1
  2804  0507  0827               	movf	_newmin,w
  2805  0508  1683               	bsf	3,5	;RP0=1, select bank1
  2806  0509  1303               	bcf	3,6	;RP1=0, select bank1
  2807  050A  00A0               	movwf	??_main^(0+128)
  2808  050B  01A1               	clrf	(??_main^(0+128)+1)
  2809  050C  0820               	movf	??_main^(0+128),w
  2810  050D  00F5               	movwf	___awdiv@dividend
  2811  050E  0821               	movf	(??_main+1)^(0+128),w
  2812  050F  00F6               	movwf	___awdiv@dividend+1
  2813  0510  120A  158A  2307  120A  118A  	fcall	___awdiv
  2814  0515  0873               	movf	?___awdiv,w
  2815  0516  1683               	bsf	3,5	;RP0=1, select bank1
  2816  0517  1303               	bcf	3,6	;RP1=0, select bank1
  2817  0518  00A2               	movwf	(??_main+2)^(0+128)
  2818  0519  3004               	movlw	4
  2819  051A                     u4595:	
  2820  051A  1003               	clrc
  2821  051B  0DA2               	rlf	(??_main+2)^(0+128),f
  2822  051C  3EFF               	addlw	-1
  2823  051D  1D03               	skipz
  2824  051E  2D1A               	goto	u4595
  2825  051F  300A               	movlw	10
  2826  0520  00F3               	movwf	___awmod@divisor
  2827  0521  3000               	movlw	0
  2828  0522  00F4               	movwf	___awmod@divisor+1
  2829  0523  1283               	bcf	3,5	;RP0=0, select bank0
  2830  0524  1303               	bcf	3,6	;RP1=0, select bank0
  2831  0525  0827               	movf	_newmin,w
  2832  0526  1683               	bsf	3,5	;RP0=1, select bank1
  2833  0527  1303               	bcf	3,6	;RP1=0, select bank1
  2834  0528  00A3               	movwf	(??_main+3)^(0+128)
  2835  0529  01A4               	clrf	((??_main+3)^(0+128)+1)
  2836  052A  0823               	movf	(??_main+3)^(0+128),w
  2837  052B  00F5               	movwf	___awmod@dividend
  2838  052C  0824               	movf	(??_main+4)^(0+128),w
  2839  052D  00F6               	movwf	___awmod@dividend+1
  2840  052E  120A  118A  26B1  120A  118A  	fcall	___awmod
  2841  0533  0873               	movf	?___awmod,w
  2842  0534  1683               	bsf	3,5	;RP0=1, select bank1
  2843  0535  1303               	bcf	3,6	;RP1=0, select bank1
  2844  0536  0722               	addwf	(??_main+2)^(0+128),w
  2845  0537  00A5               	movwf	(??_main+5)^(0+128)
  2846  0538  0825               	movf	(??_main+5)^(0+128),w
  2847  0539  1283               	bcf	3,5	;RP0=0, select bank0
  2848  053A  1303               	bcf	3,6	;RP1=0, select bank0
  2849  053B  00AA               	movwf	_min
  2850                           
  2851                           ;mainMaster.c: 371:             write_RTC(hour, min, day1);
  2852  053C  082A               	movf	_min,w
  2853  053D  1683               	bsf	3,5	;RP0=1, select bank1
  2854  053E  1303               	bcf	3,6	;RP1=0, select bank1
  2855  053F  00A0               	movwf	??_main^(0+128)
  2856  0540  0820               	movf	??_main^(0+128),w
  2857  0541  00F5               	movwf	write_RTC@minutes
  2858  0542  0879               	movf	_day1,w
  2859  0543  00A1               	movwf	(??_main+1)^(0+128)
  2860  0544  0821               	movf	(??_main+1)^(0+128),w
  2861  0545  00F6               	movwf	write_RTC@day
  2862  0546  1283               	bcf	3,5	;RP0=0, select bank0
  2863  0547  1303               	bcf	3,6	;RP1=0, select bank0
  2864  0548  082B               	movf	_hour,w
  2865  0549  120A  158A  221C  120A  118A  	fcall	_write_RTC
  2866                           
  2867                           ;mainMaster.c: 372:         } else if (state == 4){
  2868  054E  28B1               	goto	l3992
  2869  054F                     l4278:	
  2870  054F  3004               	movlw	4
  2871  0550  067A               	xorwf	_state,w
  2872  0551  1D03               	btfss	3,2
  2873  0552  28B1               	goto	l3992
  2874                           
  2875                           ;mainMaster.c: 373:             Lcd_Set_Cursor(1,1);
  2876  0553  01F7               	clrf	Lcd_Set_Cursor@b
  2877  0554  0AF7               	incf	Lcd_Set_Cursor@b,f
  2878  0555  3001               	movlw	1
  2879  0556  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2880                           
  2881                           ;mainMaster.c: 374:             Lcd_Write_String("PASSWORD:");
  2882  055B  30B5               	movlw	low (STR_25| (0+32768))
  2883  055C  1283               	bcf	3,5	;RP0=0, select bank0
  2884  055D  1303               	bcf	3,6	;RP1=0, select bank0
  2885  055E  00C7               	movwf	Lcd_Write_String@a
  2886  055F  3087               	movlw	high (STR_25| (0+32768))
  2887  0560  00C8               	movwf	Lcd_Write_String@a+1
  2888  0561  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2889                           
  2890                           ;mainMaster.c: 375:             Lcd_Set_Cursor(2,k + 1);
  2891  0566  0878               	movf	_k,w
  2892  0567  3E01               	addlw	1
  2893  0568  1683               	bsf	3,5	;RP0=1, select bank1
  2894  0569  1303               	bcf	3,6	;RP1=0, select bank1
  2895  056A  00A0               	movwf	??_main^(0+128)
  2896  056B  0820               	movf	??_main^(0+128),w
  2897  056C  00F7               	movwf	Lcd_Set_Cursor@b
  2898  056D  3002               	movlw	2
  2899  056E  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2900                           
  2901                           ;mainMaster.c: 377:             if (k < 5) {
  2902  0573  3005               	movlw	5
  2903  0574  0278               	subwf	_k,w
  2904  0575  1803               	skipnc
  2905  0576  28B1               	goto	l3992
  2906                           
  2907                           ;mainMaster.c: 378:                 if (PORTDbits.RD0 == 1){
  2908  0577  1283               	bcf	3,5	;RP0=0, select bank0
  2909  0578  1303               	bcf	3,6	;RP1=0, select bank0
  2910  0579  1C08               	btfss	8,0	;volatile
  2911  057A  2D94               	goto	l411
  2912                           
  2913                           ;mainMaster.c: 379:                     if (change4 == 0){
  2914  057B  0830               	movf	_change4,w
  2915  057C  1D03               	btfss	3,2
  2916  057D  28B1               	goto	l3992
  2917                           
  2918                           ;mainMaster.c: 380:                         passwordu[k] = 0;
  2919  057E  0878               	movf	_k,w
  2920  057F  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  2921  0580  0084               	movwf	4
  2922  0581  1383               	bcf	3,7	;select IRP bank0
  2923  0582  0180               	clrf	0
  2924                           
  2925                           ;mainMaster.c: 381:                         k++;
  2926  0583  3001               	movlw	1
  2927  0584  1683               	bsf	3,5	;RP0=1, select bank1
  2928  0585  1303               	bcf	3,6	;RP1=0, select bank1
  2929  0586  00A0               	movwf	??_main^(0+128)
  2930  0587  0820               	movf	??_main^(0+128),w
  2931  0588  07F8               	addwf	_k,f
  2932                           
  2933                           ;mainMaster.c: 382:                         change4 = 1;
  2934  0589  1283               	bcf	3,5	;RP0=0, select bank0
  2935  058A  1303               	bcf	3,6	;RP1=0, select bank0
  2936  058B  01B0               	clrf	_change4
  2937  058C  0AB0               	incf	_change4,f
  2938                           
  2939                           ;mainMaster.c: 383:                         Lcd_Write_Char('*');
  2940  058D  302A               	movlw	42
  2941  058E  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  2942  0593  28B1               	goto	l3992
  2943  0594                     l411:	
  2944  0594  1C88               	btfss	8,1	;volatile
  2945  0595  2DB0               	goto	l414
  2946                           
  2947                           ;mainMaster.c: 386:                     if (change4 == 0){
  2948  0596  0830               	movf	_change4,w
  2949  0597  1D03               	btfss	3,2
  2950  0598  28B1               	goto	l3992
  2951                           
  2952                           ;mainMaster.c: 387:                         passwordu[k] = 1;
  2953  0599  0878               	movf	_k,w
  2954  059A  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  2955  059B  0084               	movwf	4
  2956  059C  1383               	bcf	3,7	;select IRP bank0
  2957  059D  0180               	clrf	0
  2958  059E  0A80               	incf	0,f
  2959                           
  2960                           ;mainMaster.c: 388:                         k++;
  2961  059F  3001               	movlw	1
  2962  05A0  1683               	bsf	3,5	;RP0=1, select bank1
  2963  05A1  1303               	bcf	3,6	;RP1=0, select bank1
  2964  05A2  00A0               	movwf	??_main^(0+128)
  2965  05A3  0820               	movf	??_main^(0+128),w
  2966  05A4  07F8               	addwf	_k,f
  2967                           
  2968                           ;mainMaster.c: 389:                         change4 = 1;
  2969  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  2970  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  2971  05A7  01B0               	clrf	_change4
  2972  05A8  0AB0               	incf	_change4,f
  2973                           
  2974                           ;mainMaster.c: 390:                         Lcd_Write_Char('*');
  2975  05A9  302A               	movlw	42
  2976  05AA  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  2977  05AF  28B1               	goto	l3992
  2978  05B0                     l414:	
  2979  05B0  1D08               	btfss	8,2	;volatile
  2980  05B1  2DCE               	goto	l417
  2981                           
  2982                           ;mainMaster.c: 393:                     if (change4 == 0){
  2983  05B2  0830               	movf	_change4,w
  2984  05B3  1D03               	btfss	3,2
  2985  05B4  28B1               	goto	l3992
  2986                           
  2987                           ;mainMaster.c: 394:                         passwordu[k] = 2;
  2988  05B5  3002               	movlw	2
  2989  05B6  1683               	bsf	3,5	;RP0=1, select bank1
  2990  05B7  1303               	bcf	3,6	;RP1=0, select bank1
  2991  05B8  00A0               	movwf	??_main^(0+128)
  2992  05B9  0878               	movf	_k,w
  2993  05BA  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  2994  05BB  0084               	movwf	4
  2995  05BC  0820               	movf	??_main^(0+128),w
  2996  05BD  1383               	bcf	3,7	;select IRP bank0
  2997  05BE  0080               	movwf	0
  2998                           
  2999                           ;mainMaster.c: 395:                         k++;
  3000  05BF  3001               	movlw	1
  3001  05C0  00A0               	movwf	??_main^(0+128)
  3002  05C1  0820               	movf	??_main^(0+128),w
  3003  05C2  07F8               	addwf	_k,f
  3004                           
  3005                           ;mainMaster.c: 396:                         change4 = 1;
  3006  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  3007  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  3008  05C5  01B0               	clrf	_change4
  3009  05C6  0AB0               	incf	_change4,f
  3010                           
  3011                           ;mainMaster.c: 397:                         Lcd_Write_Char('*');
  3012  05C7  302A               	movlw	42
  3013  05C8  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  3014  05CD  28B1               	goto	l3992
  3015  05CE                     l417:	
  3016  05CE  1D88               	btfss	8,3	;volatile
  3017  05CF  2DEC               	goto	l420
  3018                           
  3019                           ;mainMaster.c: 400:                     if (change4 == 0){
  3020  05D0  0830               	movf	_change4,w
  3021  05D1  1D03               	btfss	3,2
  3022  05D2  28B1               	goto	l3992
  3023                           
  3024                           ;mainMaster.c: 401:                         passwordu[k] = 3;
  3025  05D3  3003               	movlw	3
  3026  05D4  1683               	bsf	3,5	;RP0=1, select bank1
  3027  05D5  1303               	bcf	3,6	;RP1=0, select bank1
  3028  05D6  00A0               	movwf	??_main^(0+128)
  3029  05D7  0878               	movf	_k,w
  3030  05D8  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3031  05D9  0084               	movwf	4
  3032  05DA  0820               	movf	??_main^(0+128),w
  3033  05DB  1383               	bcf	3,7	;select IRP bank0
  3034  05DC  0080               	movwf	0
  3035                           
  3036                           ;mainMaster.c: 402:                         k++;
  3037  05DD  3001               	movlw	1
  3038  05DE  00A0               	movwf	??_main^(0+128)
  3039  05DF  0820               	movf	??_main^(0+128),w
  3040  05E0  07F8               	addwf	_k,f
  3041                           
  3042                           ;mainMaster.c: 403:                         change4 = 1;
  3043  05E1  1283               	bcf	3,5	;RP0=0, select bank0
  3044  05E2  1303               	bcf	3,6	;RP1=0, select bank0
  3045  05E3  01B0               	clrf	_change4
  3046  05E4  0AB0               	incf	_change4,f
  3047                           
  3048                           ;mainMaster.c: 404:                         Lcd_Write_Char('*');
  3049  05E5  302A               	movlw	42
  3050  05E6  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  3051  05EB  28B1               	goto	l3992
  3052  05EC                     l420:	
  3053  05EC  1E08               	btfss	8,4	;volatile
  3054  05ED  2E0A               	goto	l423
  3055                           
  3056                           ;mainMaster.c: 407:                     if (change4 == 0){
  3057  05EE  0830               	movf	_change4,w
  3058  05EF  1D03               	btfss	3,2
  3059  05F0  28B1               	goto	l3992
  3060                           
  3061                           ;mainMaster.c: 408:                         passwordu[k] = 4;
  3062  05F1  3004               	movlw	4
  3063  05F2  1683               	bsf	3,5	;RP0=1, select bank1
  3064  05F3  1303               	bcf	3,6	;RP1=0, select bank1
  3065  05F4  00A0               	movwf	??_main^(0+128)
  3066  05F5  0878               	movf	_k,w
  3067  05F6  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3068  05F7  0084               	movwf	4
  3069  05F8  0820               	movf	??_main^(0+128),w
  3070  05F9  1383               	bcf	3,7	;select IRP bank0
  3071  05FA  0080               	movwf	0
  3072                           
  3073                           ;mainMaster.c: 409:                         k++;
  3074  05FB  3001               	movlw	1
  3075  05FC  00A0               	movwf	??_main^(0+128)
  3076  05FD  0820               	movf	??_main^(0+128),w
  3077  05FE  07F8               	addwf	_k,f
  3078                           
  3079                           ;mainMaster.c: 410:                         change4 = 1;
  3080  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  3081  0600  1303               	bcf	3,6	;RP1=0, select bank0
  3082  0601  01B0               	clrf	_change4
  3083  0602  0AB0               	incf	_change4,f
  3084                           
  3085                           ;mainMaster.c: 411:                         Lcd_Write_Char('*');
  3086  0603  302A               	movlw	42
  3087  0604  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  3088  0609  28B1               	goto	l3992
  3089  060A                     l423:	
  3090  060A  1E88               	btfss	8,5	;volatile
  3091  060B  2E28               	goto	l4350
  3092                           
  3093                           ;mainMaster.c: 414:                     if (change4 == 0){
  3094  060C  0830               	movf	_change4,w
  3095  060D  1D03               	btfss	3,2
  3096  060E  28B1               	goto	l3992
  3097                           
  3098                           ;mainMaster.c: 415:                         passwordu[k] = 5;
  3099  060F  3005               	movlw	5
  3100  0610  1683               	bsf	3,5	;RP0=1, select bank1
  3101  0611  1303               	bcf	3,6	;RP1=0, select bank1
  3102  0612  00A0               	movwf	??_main^(0+128)
  3103  0613  0878               	movf	_k,w
  3104  0614  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3105  0615  0084               	movwf	4
  3106  0616  0820               	movf	??_main^(0+128),w
  3107  0617  1383               	bcf	3,7	;select IRP bank0
  3108  0618  0080               	movwf	0
  3109                           
  3110                           ;mainMaster.c: 416:                         k++;
  3111  0619  3001               	movlw	1
  3112  061A  00A0               	movwf	??_main^(0+128)
  3113  061B  0820               	movf	??_main^(0+128),w
  3114  061C  07F8               	addwf	_k,f
  3115                           
  3116                           ;mainMaster.c: 417:                         change4 = 1;
  3117  061D  1283               	bcf	3,5	;RP0=0, select bank0
  3118  061E  1303               	bcf	3,6	;RP1=0, select bank0
  3119  061F  01B0               	clrf	_change4
  3120  0620  0AB0               	incf	_change4,f
  3121                           
  3122                           ;mainMaster.c: 418:                         Lcd_Write_Char('*');
  3123  0621  302A               	movlw	42
  3124  0622  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  3125  0627  28B1               	goto	l3992
  3126  0628                     l4350:	
  3127  0628  0808               	movf	8,w	;volatile
  3128  0629  1D03               	btfss	3,2
  3129  062A  2E2D               	goto	l429
  3130                           
  3131                           ;mainMaster.c: 421:                         change4 = 0;
  3132  062B  01B0               	clrf	_change4
  3133                           
  3134                           ;mainMaster.c: 422:                 } else if (PORTEbits.RE0 == 1){
  3135  062C  28B1               	goto	l3992
  3136  062D                     l429:	
  3137  062D  1C09               	btfss	9,0	;volatile
  3138  062E  2E9A               	goto	l431
  3139                           
  3140                           ;mainMaster.c: 423:                     if (passwordu[0] == password[0] & passwordu[1] =
      +                          = password[1] & passwordu[2] == password[2] & passwordu[3] == password[3] & passwordu[4]
      +                           == password[4]){
  3141  062F  0820               	movf	_passwordu,w
  3142  0630  0668               	xorwf	_password,w
  3143  0631  1D03               	skipz
  3144  0632  2E86               	goto	l4388
  3145  0633  0821               	movf	_passwordu+1,w
  3146  0634  0669               	xorwf	_password+1,w
  3147  0635  1D03               	skipz
  3148  0636  2E86               	goto	l4388
  3149  0637  0822               	movf	_passwordu+2,w
  3150  0638  066A               	xorwf	_password+2,w
  3151  0639  1D03               	skipz
  3152  063A  2E86               	goto	l4388
  3153  063B  0823               	movf	_passwordu+3,w
  3154  063C  066B               	xorwf	_password+3,w
  3155  063D  1D03               	skipz
  3156  063E  2E86               	goto	l4388
  3157  063F  0824               	movf	_passwordu+4,w
  3158  0640  066C               	xorwf	_password+4,w
  3159  0641  1D03               	skipz
  3160  0642  2E86               	goto	l4388
  3161                           
  3162                           ;mainMaster.c: 424:                         if (seguridad == 0){
  3163  0643  0829               	movf	_seguridad,w
  3164  0644  1D03               	btfss	3,2
  3165  0645  2E71               	goto	l4378
  3166                           
  3167                           ;mainMaster.c: 425:                             seguridad = 1;
  3168  0646  01A9               	clrf	_seguridad
  3169  0647  0AA9               	incf	_seguridad,f
  3170                           
  3171                           ;mainMaster.c: 426:                             k = 0;
  3172  0648  01F8               	clrf	_k
  3173                           
  3174                           ;mainMaster.c: 427:                             Lcd_Clear();
  3175  0649  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  3176                           
  3177                           ;mainMaster.c: 428:                             Lcd_Set_Cursor(1,1);
  3178  064E  01F7               	clrf	Lcd_Set_Cursor@b
  3179  064F  0AF7               	incf	Lcd_Set_Cursor@b,f
  3180  0650  3001               	movlw	1
  3181  0651  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3182                           
  3183                           ;mainMaster.c: 429:                             Lcd_Write_String("Security ON");
  3184  0656  306D               	movlw	low (STR_26| (0+32768))
  3185  0657  1283               	bcf	3,5	;RP0=0, select bank0
  3186  0658  1303               	bcf	3,6	;RP1=0, select bank0
  3187  0659  00C7               	movwf	Lcd_Write_String@a
  3188  065A  3087               	movlw	high (STR_26| (0+32768))
  3189  065B                     L12:	
  3190  065B  00C8               	movwf	Lcd_Write_String@a+1
  3191  065C  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  3192                           
  3193                           ;mainMaster.c: 430:                             _delay((unsigned long)((2000)*(8000000/4
      +                          000.0)));
  3194  0661  3015               	movlw	21
  3195  0662  1683               	bsf	3,5	;RP0=1, select bank1
  3196  0663  1303               	bcf	3,6	;RP1=0, select bank1
  3197  0664  00A2               	movwf	(??_main^(0+128)+2)
  3198  0665  304B               	movlw	75
  3199  0666  00A1               	movwf	(??_main^(0+128)+1)
  3200  0667  30BD               	movlw	189
  3201  0668  00A0               	movwf	??_main^(0+128)
  3202  0669                     u4977:	
  3203  0669  0BA0               	decfsz	??_main^(0+128),f
  3204  066A  2E69               	goto	u4977
  3205  066B  0BA1               	decfsz	(??_main^(0+128)+1),f
  3206  066C  2E69               	goto	u4977
  3207  066D  0BA2               	decfsz	(??_main^(0+128)+2),f
  3208  066E  2E69               	goto	u4977
  3209  066F  2E70               	nop2
  3210                           
  3211                           ;mainMaster.c: 431:                         } else {
  3212  0670  28B1               	goto	l3992
  3213  0671                     l4378:	
  3214                           
  3215                           ;mainMaster.c: 432:                             seguridad = 0;
  3216  0671  01A9               	clrf	_seguridad
  3217                           
  3218                           ;mainMaster.c: 433:                             k = 0;
  3219  0672  01F8               	clrf	_k
  3220                           
  3221                           ;mainMaster.c: 434:                             Lcd_Clear();
  3222  0673  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  3223                           
  3224                           ;mainMaster.c: 435:                             Lcd_Set_Cursor(1,1);
  3225  0678  01F7               	clrf	Lcd_Set_Cursor@b
  3226  0679  0AF7               	incf	Lcd_Set_Cursor@b,f
  3227  067A  3001               	movlw	1
  3228  067B  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3229                           
  3230                           ;mainMaster.c: 436:                             Lcd_Write_String("Security OFF");
  3231  0680  3048               	movlw	low (STR_27| (0+32768))
  3232  0681  1283               	bcf	3,5	;RP0=0, select bank0
  3233  0682  1303               	bcf	3,6	;RP1=0, select bank0
  3234  0683  00C7               	movwf	Lcd_Write_String@a
  3235  0684  3087               	movlw	high (STR_27| (0+32768))
  3236  0685  2E5B               	goto	L12
  3237  0686                     l4388:	
  3238                           
  3239                           ;mainMaster.c: 440:                         Lcd_Clear();
  3240  0686  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  3241                           
  3242                           ;mainMaster.c: 441:                         k = 0;
  3243  068B  01F8               	clrf	_k
  3244                           
  3245                           ;mainMaster.c: 442:                         Lcd_Set_Cursor(1,1);
  3246  068C  01F7               	clrf	Lcd_Set_Cursor@b
  3247  068D  0AF7               	incf	Lcd_Set_Cursor@b,f
  3248  068E  3001               	movlw	1
  3249  068F  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3250                           
  3251                           ;mainMaster.c: 443:                         Lcd_Write_String("WRONG");
  3252  0694  301C               	movlw	low (STR_28| (0+32768))
  3253  0695  1283               	bcf	3,5	;RP0=0, select bank0
  3254  0696  1303               	bcf	3,6	;RP1=0, select bank0
  3255  0697  00C7               	movwf	Lcd_Write_String@a
  3256  0698  3088               	movlw	high (STR_28| (0+32768))
  3257  0699  2E5B               	goto	L12
  3258  069A                     l431:	
  3259  069A  1C89               	btfss	9,1	;volatile
  3260  069B  28B1               	goto	l3992
  3261                           
  3262                           ;mainMaster.c: 447:                     Lcd_Set_Cursor(2,1);
  3263  069C  01F7               	clrf	Lcd_Set_Cursor@b
  3264  069D  0AF7               	incf	Lcd_Set_Cursor@b,f
  3265  069E  3002               	movlw	2
  3266  069F  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3267                           
  3268                           ;mainMaster.c: 448:                     Lcd_Write_String("            ");
  3269  06A4  303B               	movlw	low (STR_29| (0+32768))
  3270  06A5  1283               	bcf	3,5	;RP0=0, select bank0
  3271  06A6  1303               	bcf	3,6	;RP1=0, select bank0
  3272  06A7  00C7               	movwf	Lcd_Write_String@a
  3273  06A8  3087               	movlw	high (STR_29| (0+32768))
  3274  06A9  00C8               	movwf	Lcd_Write_String@a+1
  3275  06AA  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  3276                           
  3277                           ;mainMaster.c: 449:                     k = 0;
  3278  06AF  01F8               	clrf	_k
  3279  06B0  28B1               	goto	l3992
  3280  06B1                     __end_of_main:	
  3281                           
  3282                           	psect	text1
  3283  0A1C                     __ptext1:	
  3284 ;; *************** function _write_RTC *****************
  3285 ;; Defined at:
  3286 ;;		line 493 in file "mainMaster.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;  hour            1    wreg     unsigned char 
  3289 ;;  minutes         1    5[COMMON] unsigned char 
  3290 ;;  day             1    6[COMMON] unsigned char 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  hour            1    7[COMMON] unsigned char 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  1    wreg      void 
  3295 ;; Registers used:
  3296 ;;		wreg, status,2, status,0, pclath, cstack
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3302 ;;      Params:         2       0       0       0       0
  3303 ;;      Locals:         1       0       0       0       0
  3304 ;;      Temps:          0       2       0       0       0
  3305 ;;      Totals:         3       2       0       0       0
  3306 ;;Total ram usage:        5 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    3
  3309 ;; This function calls:
  3310 ;;		_I2C_Master_Start
  3311 ;;		_I2C_Master_Stop
  3312 ;;		_I2C_Master_Write
  3313 ;; This function is called by:
  3314 ;;		_main
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           
  3319                           ;psect for function _write_RTC
  3320  0A1C                     _write_RTC:	
  3321                           
  3322                           ;incstack = 0
  3323                           ; Regs used in _write_RTC: [wreg+status,2+status,0+pclath+cstack]
  3324                           ;write_RTC@hour stored from wreg
  3325  0A1C  00F7               	movwf	write_RTC@hour
  3326                           
  3327                           ;mainMaster.c: 495:     I2C_Master_Start();
  3328  0A1D  160A  118A  2692  120A  158A  	fcall	_I2C_Master_Start
  3329                           
  3330                           ;mainMaster.c: 496:     I2C_Master_Write(0xD0);
  3331  0A22  30D0               	movlw	208
  3332  0A23  00F3               	movwf	I2C_Master_Write@d
  3333  0A24  3000               	movlw	0
  3334  0A25  00F4               	movwf	I2C_Master_Write@d+1
  3335  0A26  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  3336                           
  3337                           ;mainMaster.c: 497:     I2C_Master_Write(0x01);
  3338  0A2B  3001               	movlw	1
  3339  0A2C  00F3               	movwf	I2C_Master_Write@d
  3340  0A2D  3000               	movlw	0
  3341  0A2E  00F4               	movwf	I2C_Master_Write@d+1
  3342  0A2F  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  3343                           
  3344                           ;mainMaster.c: 498:     I2C_Master_Write(minutes);
  3345  0A34  0875               	movf	write_RTC@minutes,w
  3346  0A35  1283               	bcf	3,5	;RP0=0, select bank0
  3347  0A36  1303               	bcf	3,6	;RP1=0, select bank0
  3348  0A37  00C7               	movwf	??_write_RTC
  3349  0A38  01C8               	clrf	??_write_RTC+1
  3350  0A39  0847               	movf	??_write_RTC,w
  3351  0A3A  00F3               	movwf	I2C_Master_Write@d
  3352  0A3B  0848               	movf	??_write_RTC+1,w
  3353  0A3C  00F4               	movwf	I2C_Master_Write@d+1
  3354  0A3D  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  3355                           
  3356                           ;mainMaster.c: 499:     I2C_Master_Write(hour);
  3357  0A42  0877               	movf	write_RTC@hour,w
  3358  0A43  1283               	bcf	3,5	;RP0=0, select bank0
  3359  0A44  1303               	bcf	3,6	;RP1=0, select bank0
  3360  0A45  00C7               	movwf	??_write_RTC
  3361  0A46  01C8               	clrf	??_write_RTC+1
  3362  0A47  0847               	movf	??_write_RTC,w
  3363  0A48  00F3               	movwf	I2C_Master_Write@d
  3364  0A49  0848               	movf	??_write_RTC+1,w
  3365  0A4A  00F4               	movwf	I2C_Master_Write@d+1
  3366  0A4B  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  3367                           
  3368                           ;mainMaster.c: 500:     I2C_Master_Write(day);
  3369  0A50  0876               	movf	write_RTC@day,w
  3370  0A51  1283               	bcf	3,5	;RP0=0, select bank0
  3371  0A52  1303               	bcf	3,6	;RP1=0, select bank0
  3372  0A53  00C7               	movwf	??_write_RTC
  3373  0A54  01C8               	clrf	??_write_RTC+1
  3374  0A55  0847               	movf	??_write_RTC,w
  3375  0A56  00F3               	movwf	I2C_Master_Write@d
  3376  0A57  0848               	movf	??_write_RTC+1,w
  3377  0A58  00F4               	movwf	I2C_Master_Write@d+1
  3378  0A59  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  3379                           
  3380                           ;mainMaster.c: 501:     I2C_Master_Stop();
  3381  0A5E  160A  118A  2699   	fcall	_I2C_Master_Stop
  3382  0A61  0008               	return
  3383  0A62                     __end_of_write_RTC:	
  3384                           
  3385                           	psect	text2
  3386  088E                     __ptext2:	
  3387 ;; *************** function _strcmp *****************
  3388 ;; Defined at:
  3389 ;;		line 33 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;  s1              1    wreg     PTR const unsigned char 
  3392 ;;		 -> time(6), temp(6), 
  3393 ;;  s2              2    3[COMMON] PTR const unsigned char 
  3394 ;;		 -> STR_12(6), STR_11(6), STR_10(6), 
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  s1              1    1[BANK0 ] PTR const unsigned char 
  3397 ;;		 -> time(6), temp(6), 
  3398 ;;  r               1    0[BANK0 ] char 
  3399 ;; Return value:  Size  Location     Type
  3400 ;;                  2    3[COMMON] int 
  3401 ;; Registers used:
  3402 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3408 ;;      Params:         2       0       0       0       0
  3409 ;;      Locals:         0       2       0       0       0
  3410 ;;      Temps:          3       0       0       0       0
  3411 ;;      Totals:         5       2       0       0       0
  3412 ;;Total ram usage:        7 bytes
  3413 ;; Hardware stack levels used:    2
  3414 ;; Hardware stack levels required when called:    1
  3415 ;; This function calls:
  3416 ;;		Nothing
  3417 ;; This function is called by:
  3418 ;;		_main
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           
  3423                           ;psect for function _strcmp
  3424  088E                     _strcmp:	
  3425                           
  3426                           ;incstack = 0
  3427                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3428                           ;strcmp@s1 stored from wreg
  3429  088E  1283               	bcf	3,5	;RP0=0, select bank0
  3430  088F  1303               	bcf	3,6	;RP1=0, select bank0
  3431  0890  00C8               	movwf	strcmp@s1
  3432  0891  28A1               	goto	l3898
  3433  0892                     l3900:	
  3434  0892  0848               	movf	strcmp@s1,w
  3435  0893  0084               	movwf	4
  3436  0894  0800               	movf	0,w
  3437  0895  1903               	btfsc	3,2
  3438  0896  28B8               	goto	l3902
  3439  0897  3001               	movlw	1
  3440  0898  00F5               	movwf	??_strcmp
  3441  0899  0875               	movf	??_strcmp,w
  3442  089A  07C8               	addwf	strcmp@s1,f
  3443  089B  3001               	movlw	1
  3444  089C  07F3               	addwf	strcmp@s2,f
  3445  089D  1803               	skipnc
  3446  089E  0AF4               	incf	strcmp@s2+1,f
  3447  089F  3000               	movlw	0
  3448  08A0  07F4               	addwf	strcmp@s2+1,f
  3449  08A1                     l3898:	
  3450  08A1  0874               	movf	strcmp@s2+1,w
  3451  08A2  00FF               	movwf	127
  3452  08A3  0873               	movf	strcmp@s2,w
  3453  08A4  0084               	movwf	4
  3454  08A5  120A  118A  2700  120A  158A  	fcall	stringtab
  3455  08AA  00F5               	movwf	??_strcmp
  3456  08AB  0848               	movf	strcmp@s1,w
  3457  08AC  0084               	movwf	4
  3458  08AD  1383               	bcf	3,7	;select IRP bank0
  3459  08AE  0800               	movf	0,w
  3460  08AF  00F6               	movwf	??_strcmp+1
  3461  08B0  0875               	movf	??_strcmp,w
  3462  08B1  0276               	subwf	??_strcmp+1,w
  3463  08B2  00F7               	movwf	??_strcmp+2
  3464  08B3  0877               	movf	??_strcmp+2,w
  3465  08B4  00C7               	movwf	strcmp@r
  3466  08B5  0847               	movf	strcmp@r,w
  3467  08B6  1903               	btfsc	3,2
  3468  08B7  2892               	goto	l3900
  3469  08B8                     l3902:	
  3470  08B8  0847               	movf	strcmp@r,w
  3471  08B9  00F3               	movwf	?_strcmp
  3472  08BA  01F4               	clrf	?_strcmp+1
  3473  08BB  1BF3               	btfsc	?_strcmp,7
  3474  08BC  03F4               	decf	?_strcmp+1,f
  3475  08BD  0008               	return
  3476  08BE                     __end_of_strcmp:	
  3477                           
  3478                           	psect	text3
  3479  0B62                     __ptext3:	
  3480 ;; *************** function _setup *****************
  3481 ;; Defined at:
  3482 ;;		line 457 in file "mainMaster.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;		None
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;		None
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3496 ;;      Params:         0       0       0       0       0
  3497 ;;      Locals:         0       0       0       0       0
  3498 ;;      Temps:          0       0       0       0       0
  3499 ;;      Totals:         0       0       0       0       0
  3500 ;;Total ram usage:        0 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    4
  3503 ;; This function calls:
  3504 ;;		_I2C_Master_Init
  3505 ;;		_Lcd_Init
  3506 ;;		_UART_Init
  3507 ;;		_initOscilador
  3508 ;; This function is called by:
  3509 ;;		_main
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           
  3514                           ;psect for function _setup
  3515  0B62                     _setup:	
  3516                           
  3517                           ;mainMaster.c: 458:     initOscilador(7);
  3518                           
  3519                           ;incstack = 0
  3520                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3521  0B62  3007               	movlw	7
  3522  0B63  120A  158A  22B2  120A  158A  	fcall	_initOscilador
  3523                           
  3524                           ;mainMaster.c: 459:     ANSELH = 0;
  3525  0B68  1683               	bsf	3,5	;RP0=1, select bank3
  3526  0B69  1703               	bsf	3,6	;RP1=1, select bank3
  3527  0B6A  0189               	clrf	9	;volatile
  3528                           
  3529                           ;mainMaster.c: 460:     ANSEL = 0;
  3530  0B6B  0188               	clrf	8	;volatile
  3531                           
  3532                           ;mainMaster.c: 461:     TRISB = 0;
  3533  0B6C  1683               	bsf	3,5	;RP0=1, select bank1
  3534  0B6D  1303               	bcf	3,6	;RP1=0, select bank1
  3535  0B6E  0186               	clrf	6	;volatile
  3536                           
  3537                           ;mainMaster.c: 462:     TRISA = 0;
  3538  0B6F  0185               	clrf	5	;volatile
  3539                           
  3540                           ;mainMaster.c: 463:     TRISD = 0xFF;
  3541  0B70  30FF               	movlw	255
  3542  0B71  0088               	movwf	8	;volatile
  3543                           
  3544                           ;mainMaster.c: 464:     PORTB = 0;
  3545  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  3546  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  3547  0B74  0186               	clrf	6	;volatile
  3548                           
  3549                           ;mainMaster.c: 465:     PORTA = 0;
  3550  0B75  0185               	clrf	5	;volatile
  3551                           
  3552                           ;mainMaster.c: 466:     TRISC = 0x01;
  3553  0B76  3001               	movlw	1
  3554  0B77  1683               	bsf	3,5	;RP0=1, select bank1
  3555  0B78  1303               	bcf	3,6	;RP1=0, select bank1
  3556  0B79  0087               	movwf	7	;volatile
  3557                           
  3558                           ;mainMaster.c: 467:     PORTC = 0;
  3559  0B7A  1283               	bcf	3,5	;RP0=0, select bank0
  3560  0B7B  1303               	bcf	3,6	;RP1=0, select bank0
  3561  0B7C  0187               	clrf	7	;volatile
  3562                           
  3563                           ;mainMaster.c: 468:     PORTE = 0;
  3564  0B7D  0189               	clrf	9	;volatile
  3565                           
  3566                           ;mainMaster.c: 469:     TRISE = 0x0F;
  3567  0B7E  300F               	movlw	15
  3568  0B7F  1683               	bsf	3,5	;RP0=1, select bank1
  3569  0B80  1303               	bcf	3,6	;RP1=0, select bank1
  3570  0B81  0089               	movwf	9	;volatile
  3571                           
  3572                           ;mainMaster.c: 470:     i = 0;
  3573  0B82  1283               	bcf	3,5	;RP0=0, select bank0
  3574  0B83  1303               	bcf	3,6	;RP1=0, select bank0
  3575  0B84  01B6               	clrf	_i
  3576                           
  3577                           ;mainMaster.c: 471:     door = 0;
  3578  0B85  01BA               	clrf	_door
  3579                           
  3580                           ;mainMaster.c: 472:     trip = 0;
  3581  0B86  01B9               	clrf	_trip
  3582                           
  3583                           ;mainMaster.c: 473:     alarm = 0;
  3584  0B87  01AF               	clrf	_alarm
  3585                           
  3586                           ;mainMaster.c: 474:     change2 = 0;
  3587  0B88  01B2               	clrf	_change2
  3588                           
  3589                           ;mainMaster.c: 475:     change3 = 0;
  3590  0B89  01B1               	clrf	_change3
  3591                           
  3592                           ;mainMaster.c: 476:     IR = 0;
  3593  0B8A  01B7               	clrf	_IR
  3594                           
  3595                           ;mainMaster.c: 477:     PIR = 0;
  3596  0B8B  01B8               	clrf	_PIR
  3597                           
  3598                           ;mainMaster.c: 478:     OPTION_REGbits.T0CS = 0;
  3599  0B8C  1683               	bsf	3,5	;RP0=1, select bank1
  3600  0B8D  1303               	bcf	3,6	;RP1=0, select bank1
  3601  0B8E  1281               	bcf	1,5	;volatile
  3602                           
  3603                           ;mainMaster.c: 479:     OPTION_REGbits.T0SE = 0;
  3604  0B8F  1201               	bcf	1,4	;volatile
  3605                           
  3606                           ;mainMaster.c: 480:     OPTION_REGbits.PSA = 1;
  3607  0B90  1581               	bsf	1,3	;volatile
  3608                           
  3609                           ;mainMaster.c: 481:     OPTION_REGbits.PS2 = 0;
  3610  0B91  1101               	bcf	1,2	;volatile
  3611                           
  3612                           ;mainMaster.c: 482:     OPTION_REGbits.PS1 = 0;
  3613  0B92  1081               	bcf	1,1	;volatile
  3614                           
  3615                           ;mainMaster.c: 483:     OPTION_REGbits.PS0 = 0;
  3616  0B93  1001               	bcf	1,0	;volatile
  3617                           
  3618                           ;mainMaster.c: 484:     TMR0 = 56;
  3619  0B94  3038               	movlw	56
  3620  0B95  1283               	bcf	3,5	;RP0=0, select bank0
  3621  0B96  1303               	bcf	3,6	;RP1=0, select bank0
  3622  0B97  0081               	movwf	1	;volatile
  3623                           
  3624                           ;mainMaster.c: 485:     INTCONbits.T0IF = 0;
  3625  0B98  110B               	bcf	11,2	;volatile
  3626                           
  3627                           ;mainMaster.c: 486:     INTCONbits.T0IE = 1;
  3628  0B99  168B               	bsf	11,5	;volatile
  3629                           
  3630                           ;mainMaster.c: 487:     INTCONbits.GIE = 1;
  3631  0B9A  178B               	bsf	11,7	;volatile
  3632                           
  3633                           ;mainMaster.c: 488:     Lcd_Init();
  3634  0B9B  120A  158A  241D  120A  158A  	fcall	_Lcd_Init
  3635                           
  3636                           ;mainMaster.c: 489:     UART_Init(9600);
  3637  0BA0  3000               	movlw	0
  3638  0BA1  1283               	bcf	3,5	;RP0=0, select bank0
  3639  0BA2  1303               	bcf	3,6	;RP1=0, select bank0
  3640  0BA3  00D8               	movwf	UART_Init@baudrate+3
  3641  0BA4  3000               	movlw	0
  3642  0BA5  00D7               	movwf	UART_Init@baudrate+2
  3643  0BA6  3025               	movlw	37
  3644  0BA7  00D6               	movwf	UART_Init@baudrate+1
  3645  0BA8  3080               	movlw	128
  3646  0BA9  00D5               	movwf	UART_Init@baudrate
  3647  0BAA  120A  158A  263A  120A  158A  	fcall	_UART_Init
  3648                           
  3649                           ;mainMaster.c: 490:     I2C_Master_Init(100000);
  3650  0BAF  3000               	movlw	0
  3651  0BB0  1283               	bcf	3,5	;RP0=0, select bank0
  3652  0BB1  1303               	bcf	3,6	;RP1=0, select bank0
  3653  0BB2  00D7               	movwf	I2C_Master_Init@c+3
  3654  0BB3  3001               	movlw	1
  3655  0BB4  00D6               	movwf	I2C_Master_Init@c+2
  3656  0BB5  3086               	movlw	134
  3657  0BB6  00D5               	movwf	I2C_Master_Init@c+1
  3658  0BB7  30A0               	movlw	160
  3659  0BB8  00D4               	movwf	I2C_Master_Init@c
  3660  0BB9  120A  158A  20F2   	fcall	_I2C_Master_Init
  3661  0BBC  0008               	return
  3662  0BBD                     __end_of_setup:	
  3663                           
  3664                           	psect	text4
  3665  0AB2                     __ptext4:	
  3666 ;; *************** function _initOscilador *****************
  3667 ;; Defined at:
  3668 ;;		line 11 in file "./Oscilador.h"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;  option          1    wreg     unsigned char 
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;  option          1    5[COMMON] unsigned char 
  3673 ;; Return value:  Size  Location     Type
  3674 ;;                  1    wreg      void 
  3675 ;; Registers used:
  3676 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3677 ;; Tracked objects:
  3678 ;;		On entry : 0/0
  3679 ;;		On exit  : 0/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3682 ;;      Params:         0       0       0       0       0
  3683 ;;      Locals:         1       0       0       0       0
  3684 ;;      Temps:          2       0       0       0       0
  3685 ;;      Totals:         3       0       0       0       0
  3686 ;;Total ram usage:        3 bytes
  3687 ;; Hardware stack levels used:    1
  3688 ;; Hardware stack levels required when called:    1
  3689 ;; This function calls:
  3690 ;;		Nothing
  3691 ;; This function is called by:
  3692 ;;		_setup
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           
  3697                           ;psect for function _initOscilador
  3698  0AB2                     _initOscilador:	
  3699                           
  3700                           ;incstack = 0
  3701                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  3702                           ;initOscilador@option stored from wreg
  3703  0AB2  00F5               	movwf	initOscilador@option
  3704                           
  3705                           ;./Oscilador.h: 13: 
  3706  0AB3  2AE3               	goto	l2552
  3707  0AB4                     l2532:	
  3708                           
  3709                           ;./Oscilador.h: 16:         case 3:
  3710  0AB4  308F               	movlw	-113
  3711  0AB5  1683               	bsf	3,5	;RP0=1, select bank1
  3712  0AB6  1303               	bcf	3,6	;RP1=0, select bank1
  3713  0AB7  058F               	andwf	15,f	;volatile
  3714                           
  3715                           ;./Oscilador.h: 17: 
  3716  0AB8  2B05               	goto	l203
  3717  0AB9                     l2534:	
  3718                           
  3719                           ;./Oscilador.h: 20:         case 4:
  3720  0AB9  1683               	bsf	3,5	;RP0=1, select bank1
  3721  0ABA  1303               	bcf	3,6	;RP1=0, select bank1
  3722  0ABB  080F               	movf	15,w	;volatile
  3723  0ABC  398F               	andlw	-113
  3724  0ABD  3810               	iorlw	16
  3725  0ABE  2ADC               	goto	L17
  3726  0ABF                     l2536:	
  3727                           ;./Oscilador.h: 21: 
  3728                           
  3729                           
  3730                           ;./Oscilador.h: 24:         case 5:
  3731  0ABF  1683               	bsf	3,5	;RP0=1, select bank1
  3732  0AC0  1303               	bcf	3,6	;RP1=0, select bank1
  3733  0AC1  080F               	movf	15,w	;volatile
  3734  0AC2  398F               	andlw	-113
  3735  0AC3  3820               	iorlw	32
  3736  0AC4  2ADC               	goto	L17
  3737  0AC5                     l2538:	
  3738                           ;./Oscilador.h: 25: 
  3739                           
  3740                           
  3741                           ;./Oscilador.h: 28:         case 6:
  3742  0AC5  1683               	bsf	3,5	;RP0=1, select bank1
  3743  0AC6  1303               	bcf	3,6	;RP1=0, select bank1
  3744  0AC7  080F               	movf	15,w	;volatile
  3745  0AC8  398F               	andlw	-113
  3746  0AC9  3830               	iorlw	48
  3747  0ACA  2ADC               	goto	L17
  3748  0ACB                     l2540:	
  3749                           ;./Oscilador.h: 29: 
  3750                           
  3751                           
  3752                           ;./Oscilador.h: 32:         case 7:
  3753  0ACB  1683               	bsf	3,5	;RP0=1, select bank1
  3754  0ACC  1303               	bcf	3,6	;RP1=0, select bank1
  3755  0ACD  080F               	movf	15,w	;volatile
  3756  0ACE  398F               	andlw	-113
  3757  0ACF  3840               	iorlw	64
  3758  0AD0  2ADC               	goto	L17
  3759  0AD1                     l2542:	
  3760                           ;./Oscilador.h: 33: 
  3761                           
  3762                           
  3763                           ;./Oscilador.h: 36:         default:
  3764  0AD1  1683               	bsf	3,5	;RP0=1, select bank1
  3765  0AD2  1303               	bcf	3,6	;RP1=0, select bank1
  3766  0AD3  080F               	movf	15,w	;volatile
  3767  0AD4  398F               	andlw	-113
  3768  0AD5  3850               	iorlw	80
  3769  0AD6  2ADC               	goto	L17
  3770  0AD7                     l2544:	
  3771                           ;./Oscilador.h: 37: 
  3772                           
  3773                           
  3774                           ;./Oscilador.h: 40:     }
  3775  0AD7  1683               	bsf	3,5	;RP0=1, select bank1
  3776  0AD8  1303               	bcf	3,6	;RP1=0, select bank1
  3777  0AD9  080F               	movf	15,w	;volatile
  3778  0ADA  398F               	andlw	-113
  3779  0ADB  3860               	iorlw	96
  3780  0ADC                     L17:	
  3781  0ADC  008F               	movwf	15	;volatile
  3782                           
  3783                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  3784  0ADD  2B05               	goto	l203
  3785  0ADE                     l2546:	
  3786  0ADE                     l2548:	
  3787  0ADE  3070               	movlw	112
  3788  0ADF  1683               	bsf	3,5	;RP0=1, select bank1
  3789  0AE0  1303               	bcf	3,6	;RP1=0, select bank1
  3790  0AE1  048F               	iorwf	15,f	;volatile
  3791  0AE2  2B05               	goto	l203
  3792  0AE3                     l2552:	
  3793  0AE3  0875               	movf	initOscilador@option,w
  3794  0AE4  00F3               	movwf	??_initOscilador
  3795  0AE5  01F4               	clrf	??_initOscilador+1
  3796                           
  3797                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3798                           ; Switch size 1, requested type "simple"
  3799                           ; Number of cases is 1, Range of values is 0 to 0
  3800                           ; switch strategies available:
  3801                           ; Name         Instructions Cycles
  3802                           ; simple_byte            4     3 (average)
  3803                           ; direct_byte           11     8 (fixed)
  3804                           ; jumptable            260     6 (fixed)
  3805                           ;	Chosen strategy is simple_byte
  3806  0AE6  0874               	movf	??_initOscilador+1,w
  3807  0AE7  3A00               	xorlw	0	; case 0
  3808  0AE8  1903               	skipnz
  3809  0AE9  2AEB               	goto	l4482
  3810  0AEA  2ADE               	goto	l2548
  3811  0AEB                     l4482:	
  3812                           
  3813                           ; Switch size 1, requested type "simple"
  3814                           ; Number of cases is 8, Range of values is 0 to 7
  3815                           ; switch strategies available:
  3816                           ; Name         Instructions Cycles
  3817                           ; simple_byte           25    13 (average)
  3818                           ; direct_byte           32     8 (fixed)
  3819                           ; jumptable            260     6 (fixed)
  3820                           ;	Chosen strategy is simple_byte
  3821  0AEB  0873               	movf	??_initOscilador,w
  3822  0AEC  3A00               	xorlw	0	; case 0
  3823  0AED  1903               	skipnz
  3824  0AEE  2AB4               	goto	l2532
  3825  0AEF  3A01               	xorlw	1	; case 1
  3826  0AF0  1903               	skipnz
  3827  0AF1  2AB9               	goto	l2534
  3828  0AF2  3A03               	xorlw	3	; case 2
  3829  0AF3  1903               	skipnz
  3830  0AF4  2ABF               	goto	l2536
  3831  0AF5  3A01               	xorlw	1	; case 3
  3832  0AF6  1903               	skipnz
  3833  0AF7  2AC5               	goto	l2538
  3834  0AF8  3A07               	xorlw	7	; case 4
  3835  0AF9  1903               	skipnz
  3836  0AFA  2ACB               	goto	l2540
  3837  0AFB  3A01               	xorlw	1	; case 5
  3838  0AFC  1903               	skipnz
  3839  0AFD  2AD1               	goto	l2542
  3840  0AFE  3A03               	xorlw	3	; case 6
  3841  0AFF  1903               	skipnz
  3842  0B00  2AD7               	goto	l2544
  3843  0B01  3A01               	xorlw	1	; case 7
  3844  0B02  1903               	skipnz
  3845  0B03  2ADE               	goto	l2546
  3846  0B04  2ADE               	goto	l2548
  3847  0B05                     l203:	
  3848  0B05  140F               	bsf	15,0	;volatile
  3849  0B06  0008               	return
  3850  0B07                     __end_of_initOscilador:	
  3851                           
  3852                           	psect	text5
  3853  0E3A                     __ptext5:	
  3854 ;; *************** function _UART_Init *****************
  3855 ;; Defined at:
  3856 ;;		line 8 in file "./UART.h"
  3857 ;; Parameters:    Size  Location     Type
  3858 ;;  baudrate        4   14[BANK0 ] const long 
  3859 ;; Auto vars:     Size  Location     Type
  3860 ;;  x               2    4[COMMON] unsigned int 
  3861 ;; Return value:  Size  Location     Type
  3862 ;;                  1    wreg      unsigned char 
  3863 ;; Registers used:
  3864 ;;		wreg, status,2, status,0, pclath, cstack
  3865 ;; Tracked objects:
  3866 ;;		On entry : 0/0
  3867 ;;		On exit  : 0/0
  3868 ;;		Unchanged: 0/0
  3869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3870 ;;      Params:         0       4       0       0       0
  3871 ;;      Locals:         2       0       0       0       0
  3872 ;;      Temps:          0      12       0       0       0
  3873 ;;      Totals:         2      16       0       0       0
  3874 ;;Total ram usage:       18 bytes
  3875 ;; Hardware stack levels used:    1
  3876 ;; Hardware stack levels required when called:    2
  3877 ;; This function calls:
  3878 ;;		___aldiv
  3879 ;; This function is called by:
  3880 ;;		_setup
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           
  3885                           ;psect for function _UART_Init
  3886  0E3A                     _UART_Init:	
  3887                           
  3888                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
  3889                           
  3890                           ;incstack = 0
  3891                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  3892  0E3A  1283               	bcf	3,5	;RP0=0, select bank0
  3893  0E3B  1303               	bcf	3,6	;RP1=0, select bank0
  3894  0E3C  0855               	movf	UART_Init@baudrate,w
  3895  0E3D  00D9               	movwf	??_UART_Init
  3896  0E3E  0856               	movf	UART_Init@baudrate+1,w
  3897  0E3F  00DA               	movwf	??_UART_Init+1
  3898  0E40  0857               	movf	UART_Init@baudrate+2,w
  3899  0E41  00DB               	movwf	??_UART_Init+2
  3900  0E42  0858               	movf	UART_Init@baudrate+3,w
  3901  0E43  00DC               	movwf	??_UART_Init+3
  3902  0E44  3006               	movlw	6
  3903  0E45                     u3715:	
  3904  0E45  1003               	clrc
  3905  0E46  0DD9               	rlf	??_UART_Init,f
  3906  0E47  0DDA               	rlf	??_UART_Init+1,f
  3907  0E48  0DDB               	rlf	??_UART_Init+2,f
  3908  0E49  0DDC               	rlf	??_UART_Init+3,f
  3909  0E4A  3EFF               	addlw	-1
  3910  0E4B  1D03               	skipz
  3911  0E4C  2E45               	goto	u3715
  3912  0E4D  085C               	movf	??_UART_Init+3,w
  3913  0E4E  00CA               	movwf	___aldiv@divisor+3
  3914  0E4F  085B               	movf	??_UART_Init+2,w
  3915  0E50  00C9               	movwf	___aldiv@divisor+2
  3916  0E51  085A               	movf	??_UART_Init+1,w
  3917  0E52  00C8               	movwf	___aldiv@divisor+1
  3918  0E53  0859               	movf	??_UART_Init,w
  3919  0E54  00C7               	movwf	___aldiv@divisor
  3920  0E55  0855               	movf	UART_Init@baudrate,w
  3921  0E56  00DD               	movwf	??_UART_Init+4
  3922  0E57  0856               	movf	UART_Init@baudrate+1,w
  3923  0E58  00DE               	movwf	??_UART_Init+5
  3924  0E59  0857               	movf	UART_Init@baudrate+2,w
  3925  0E5A  00DF               	movwf	??_UART_Init+6
  3926  0E5B  0858               	movf	UART_Init@baudrate+3,w
  3927  0E5C  00E0               	movwf	??_UART_Init+7
  3928  0E5D  3006               	movlw	6
  3929  0E5E                     u3725:	
  3930  0E5E  1003               	clrc
  3931  0E5F  0DDD               	rlf	??_UART_Init+4,f
  3932  0E60  0DDE               	rlf	??_UART_Init+5,f
  3933  0E61  0DDF               	rlf	??_UART_Init+6,f
  3934  0E62  0DE0               	rlf	??_UART_Init+7,f
  3935  0E63  3EFF               	addlw	-1
  3936  0E64  1D03               	skipz
  3937  0E65  2E5E               	goto	u3725
  3938  0E66  3000               	movlw	0
  3939  0E67  00E1               	movwf	??_UART_Init+8
  3940  0E68  3012               	movlw	18
  3941  0E69  00E2               	movwf	??_UART_Init+9
  3942  0E6A  307A               	movlw	122
  3943  0E6B  00E3               	movwf	??_UART_Init+10
  3944  0E6C  3000               	movlw	0
  3945  0E6D  00E4               	movwf	??_UART_Init+11
  3946  0E6E  085D               	movf	??_UART_Init+4,w
  3947  0E6F  02E1               	subwf	??_UART_Init+8,f
  3948  0E70  085E               	movf	??_UART_Init+5,w
  3949  0E71  1C03               	skipc
  3950  0E72  0F5E               	incfsz	??_UART_Init+5,w
  3951  0E73  2E75               	goto	u3731
  3952  0E74  2E76               	goto	u3732
  3953  0E75                     u3731:	
  3954  0E75  02E2               	subwf	??_UART_Init+9,f
  3955  0E76                     u3732:	
  3956  0E76  085F               	movf	??_UART_Init+6,w
  3957  0E77  1C03               	skipc
  3958  0E78  0F5F               	incfsz	??_UART_Init+6,w
  3959  0E79  2E7B               	goto	u3733
  3960  0E7A  2E7C               	goto	u3734
  3961  0E7B                     u3733:	
  3962  0E7B  02E3               	subwf	??_UART_Init+10,f
  3963  0E7C                     u3734:	
  3964  0E7C  0860               	movf	??_UART_Init+7,w
  3965  0E7D  1C03               	skipc
  3966  0E7E  0F60               	incfsz	??_UART_Init+7,w
  3967  0E7F  2E81               	goto	u3735
  3968  0E80  2E82               	goto	u3736
  3969  0E81                     u3735:	
  3970  0E81  02E4               	subwf	??_UART_Init+11,f
  3971  0E82                     u3736:	
  3972  0E82  0864               	movf	??_UART_Init+11,w
  3973  0E83  00CE               	movwf	___aldiv@dividend+3
  3974  0E84  0863               	movf	??_UART_Init+10,w
  3975  0E85  00CD               	movwf	___aldiv@dividend+2
  3976  0E86  0862               	movf	??_UART_Init+9,w
  3977  0E87  00CC               	movwf	___aldiv@dividend+1
  3978  0E88  0861               	movf	??_UART_Init+8,w
  3979  0E89  00CB               	movwf	___aldiv@dividend
  3980  0E8A  120A  158A  2506  120A  158A  	fcall	___aldiv
  3981  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  3982  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  3983  0E91  0848               	movf	?___aldiv+1,w
  3984  0E92  00F5               	movwf	UART_Init@x+1
  3985  0E93  0847               	movf	?___aldiv,w
  3986  0E94  00F4               	movwf	UART_Init@x
  3987                           
  3988                           ;./UART.h: 12:  if(x>255)
  3989  0E95  3001               	movlw	1
  3990  0E96  0275               	subwf	UART_Init@x+1,w
  3991  0E97  3000               	movlw	0
  3992  0E98  1903               	skipnz
  3993  0E99  0274               	subwf	UART_Init@x,w
  3994  0E9A  1C03               	skipc
  3995  0E9B  2EF8               	goto	l3654
  3996                           
  3997                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  3998  0E9C  0855               	movf	UART_Init@baudrate,w
  3999  0E9D  00D9               	movwf	??_UART_Init
  4000  0E9E  0856               	movf	UART_Init@baudrate+1,w
  4001  0E9F  00DA               	movwf	??_UART_Init+1
  4002  0EA0  0857               	movf	UART_Init@baudrate+2,w
  4003  0EA1  00DB               	movwf	??_UART_Init+2
  4004  0EA2  0858               	movf	UART_Init@baudrate+3,w
  4005  0EA3  00DC               	movwf	??_UART_Init+3
  4006  0EA4  3004               	movlw	4
  4007  0EA5                     u3755:	
  4008  0EA5  1003               	clrc
  4009  0EA6  0DD9               	rlf	??_UART_Init,f
  4010  0EA7  0DDA               	rlf	??_UART_Init+1,f
  4011  0EA8  0DDB               	rlf	??_UART_Init+2,f
  4012  0EA9  0DDC               	rlf	??_UART_Init+3,f
  4013  0EAA  3EFF               	addlw	-1
  4014  0EAB  1D03               	skipz
  4015  0EAC  2EA5               	goto	u3755
  4016  0EAD  085C               	movf	??_UART_Init+3,w
  4017  0EAE  00CA               	movwf	___aldiv@divisor+3
  4018  0EAF  085B               	movf	??_UART_Init+2,w
  4019  0EB0  00C9               	movwf	___aldiv@divisor+2
  4020  0EB1  085A               	movf	??_UART_Init+1,w
  4021  0EB2  00C8               	movwf	___aldiv@divisor+1
  4022  0EB3  0859               	movf	??_UART_Init,w
  4023  0EB4  00C7               	movwf	___aldiv@divisor
  4024  0EB5  0855               	movf	UART_Init@baudrate,w
  4025  0EB6  00DD               	movwf	??_UART_Init+4
  4026  0EB7  0856               	movf	UART_Init@baudrate+1,w
  4027  0EB8  00DE               	movwf	??_UART_Init+5
  4028  0EB9  0857               	movf	UART_Init@baudrate+2,w
  4029  0EBA  00DF               	movwf	??_UART_Init+6
  4030  0EBB  0858               	movf	UART_Init@baudrate+3,w
  4031  0EBC  00E0               	movwf	??_UART_Init+7
  4032  0EBD  3004               	movlw	4
  4033  0EBE                     u3765:	
  4034  0EBE  1003               	clrc
  4035  0EBF  0DDD               	rlf	??_UART_Init+4,f
  4036  0EC0  0DDE               	rlf	??_UART_Init+5,f
  4037  0EC1  0DDF               	rlf	??_UART_Init+6,f
  4038  0EC2  0DE0               	rlf	??_UART_Init+7,f
  4039  0EC3  3EFF               	addlw	-1
  4040  0EC4  1D03               	skipz
  4041  0EC5  2EBE               	goto	u3765
  4042  0EC6  3000               	movlw	0
  4043  0EC7  00E1               	movwf	??_UART_Init+8
  4044  0EC8  3012               	movlw	18
  4045  0EC9  00E2               	movwf	??_UART_Init+9
  4046  0ECA  307A               	movlw	122
  4047  0ECB  00E3               	movwf	??_UART_Init+10
  4048  0ECC  3000               	movlw	0
  4049  0ECD  00E4               	movwf	??_UART_Init+11
  4050  0ECE  085D               	movf	??_UART_Init+4,w
  4051  0ECF  02E1               	subwf	??_UART_Init+8,f
  4052  0ED0  085E               	movf	??_UART_Init+5,w
  4053  0ED1  1C03               	skipc
  4054  0ED2  0F5E               	incfsz	??_UART_Init+5,w
  4055  0ED3  2ED5               	goto	u3771
  4056  0ED4  2ED6               	goto	u3772
  4057  0ED5                     u3771:	
  4058  0ED5  02E2               	subwf	??_UART_Init+9,f
  4059  0ED6                     u3772:	
  4060  0ED6  085F               	movf	??_UART_Init+6,w
  4061  0ED7  1C03               	skipc
  4062  0ED8  0F5F               	incfsz	??_UART_Init+6,w
  4063  0ED9  2EDB               	goto	u3773
  4064  0EDA  2EDC               	goto	u3774
  4065  0EDB                     u3773:	
  4066  0EDB  02E3               	subwf	??_UART_Init+10,f
  4067  0EDC                     u3774:	
  4068  0EDC  0860               	movf	??_UART_Init+7,w
  4069  0EDD  1C03               	skipc
  4070  0EDE  0F60               	incfsz	??_UART_Init+7,w
  4071  0EDF  2EE1               	goto	u3775
  4072  0EE0  2EE2               	goto	u3776
  4073  0EE1                     u3775:	
  4074  0EE1  02E4               	subwf	??_UART_Init+11,f
  4075  0EE2                     u3776:	
  4076  0EE2  0864               	movf	??_UART_Init+11,w
  4077  0EE3  00CE               	movwf	___aldiv@dividend+3
  4078  0EE4  0863               	movf	??_UART_Init+10,w
  4079  0EE5  00CD               	movwf	___aldiv@dividend+2
  4080  0EE6  0862               	movf	??_UART_Init+9,w
  4081  0EE7  00CC               	movwf	___aldiv@dividend+1
  4082  0EE8  0861               	movf	??_UART_Init+8,w
  4083  0EE9  00CB               	movwf	___aldiv@dividend
  4084  0EEA  120A  158A  2506  120A  158A  	fcall	___aldiv
  4085  0EEF  1283               	bcf	3,5	;RP0=0, select bank0
  4086  0EF0  1303               	bcf	3,6	;RP1=0, select bank0
  4087  0EF1  0848               	movf	?___aldiv+1,w
  4088  0EF2  00F5               	movwf	UART_Init@x+1
  4089  0EF3  0847               	movf	?___aldiv,w
  4090  0EF4  00F4               	movwf	UART_Init@x
  4091                           
  4092                           ;./UART.h: 15:   BRGH = 1;
  4093  0EF5  1683               	bsf	3,5	;RP0=1, select bank1
  4094  0EF6  1303               	bcf	3,6	;RP1=0, select bank1
  4095  0EF7  1518               	bsf	24,2	;volatile
  4096  0EF8                     l3654:	
  4097                           
  4098                           ;./UART.h: 17:  if(x<256)
  4099  0EF8  3001               	movlw	1
  4100  0EF9  0275               	subwf	UART_Init@x+1,w
  4101  0EFA  3000               	movlw	0
  4102  0EFB  1903               	skipnz
  4103  0EFC  0274               	subwf	UART_Init@x,w
  4104  0EFD  1803               	skipnc
  4105  0EFE  0008               	return
  4106                           
  4107                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  4108  0EFF  0874               	movf	UART_Init@x,w
  4109  0F00  1683               	bsf	3,5	;RP0=1, select bank1
  4110  0F01  1303               	bcf	3,6	;RP1=0, select bank1
  4111  0F02  0099               	movwf	25	;volatile
  4112                           
  4113                           ;./UART.h: 20:    SYNC = 0;
  4114  0F03  1218               	bcf	24,4	;volatile
  4115                           
  4116                           ;./UART.h: 21:    SPEN = 1;
  4117  0F04  1283               	bcf	3,5	;RP0=0, select bank0
  4118  0F05  1303               	bcf	3,6	;RP1=0, select bank0
  4119  0F06  1798               	bsf	24,7	;volatile
  4120                           
  4121                           ;./UART.h: 22:           TRISC7 = 1;
  4122  0F07  1683               	bsf	3,5	;RP0=1, select bank1
  4123  0F08  1303               	bcf	3,6	;RP1=0, select bank1
  4124  0F09  1787               	bsf	7,7	;volatile
  4125                           
  4126                           ;./UART.h: 23:           TRISC6 = 1;
  4127  0F0A  1707               	bsf	7,6	;volatile
  4128                           
  4129                           ;./UART.h: 24:           CREN = 1;
  4130  0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  4131  0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  4132  0F0D  1618               	bsf	24,4	;volatile
  4133                           
  4134                           ;./UART.h: 25:           TXEN = 1;
  4135  0F0E  1683               	bsf	3,5	;RP0=1, select bank1
  4136  0F0F  1303               	bcf	3,6	;RP1=0, select bank1
  4137  0F10  1698               	bsf	24,5	;volatile
  4138  0F11  0008               	return
  4139  0F12                     __end_of_UART_Init:	
  4140                           
  4141                           	psect	text6
  4142  0D06                     __ptext6:	
  4143 ;; *************** function ___aldiv *****************
  4144 ;; Defined at:
  4145 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  4146 ;; Parameters:    Size  Location     Type
  4147 ;;  divisor         4    0[BANK0 ] long 
  4148 ;;  dividend        4    4[BANK0 ] long 
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;  quotient        4   10[BANK0 ] long 
  4151 ;;  sign            1    9[BANK0 ] unsigned char 
  4152 ;;  counter         1    8[BANK0 ] unsigned char 
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  4    0[BANK0 ] long 
  4155 ;; Registers used:
  4156 ;;		wreg, status,2, status,0
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4162 ;;      Params:         0       8       0       0       0
  4163 ;;      Locals:         0       6       0       0       0
  4164 ;;      Temps:          1       0       0       0       0
  4165 ;;      Totals:         1      14       0       0       0
  4166 ;;Total ram usage:       15 bytes
  4167 ;; Hardware stack levels used:    1
  4168 ;; Hardware stack levels required when called:    1
  4169 ;; This function calls:
  4170 ;;		Nothing
  4171 ;; This function is called by:
  4172 ;;		_UART_Init
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           
  4177                           ;psect for function ___aldiv
  4178  0D06                     ___aldiv:	
  4179                           
  4180                           ;incstack = 0
  4181                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4182  0D06  1283               	bcf	3,5	;RP0=0, select bank0
  4183  0D07  1303               	bcf	3,6	;RP1=0, select bank0
  4184  0D08  01D0               	clrf	___aldiv@sign
  4185  0D09  1FCA               	btfss	___aldiv@divisor+3,7
  4186  0D0A  2D18               	goto	l654
  4187  0D0B  09C7               	comf	___aldiv@divisor,f
  4188  0D0C  09C8               	comf	___aldiv@divisor+1,f
  4189  0D0D  09C9               	comf	___aldiv@divisor+2,f
  4190  0D0E  09CA               	comf	___aldiv@divisor+3,f
  4191  0D0F  0AC7               	incf	___aldiv@divisor,f
  4192  0D10  1903               	skipnz
  4193  0D11  0AC8               	incf	___aldiv@divisor+1,f
  4194  0D12  1903               	skipnz
  4195  0D13  0AC9               	incf	___aldiv@divisor+2,f
  4196  0D14  1903               	skipnz
  4197  0D15  0ACA               	incf	___aldiv@divisor+3,f
  4198  0D16  01D0               	clrf	___aldiv@sign
  4199  0D17  0AD0               	incf	___aldiv@sign,f
  4200  0D18                     l654:	
  4201  0D18  1FCE               	btfss	___aldiv@dividend+3,7
  4202  0D19  2D29               	goto	l3536
  4203  0D1A  09CB               	comf	___aldiv@dividend,f
  4204  0D1B  09CC               	comf	___aldiv@dividend+1,f
  4205  0D1C  09CD               	comf	___aldiv@dividend+2,f
  4206  0D1D  09CE               	comf	___aldiv@dividend+3,f
  4207  0D1E  0ACB               	incf	___aldiv@dividend,f
  4208  0D1F  1903               	skipnz
  4209  0D20  0ACC               	incf	___aldiv@dividend+1,f
  4210  0D21  1903               	skipnz
  4211  0D22  0ACD               	incf	___aldiv@dividend+2,f
  4212  0D23  1903               	skipnz
  4213  0D24  0ACE               	incf	___aldiv@dividend+3,f
  4214  0D25  3001               	movlw	1
  4215  0D26  00F3               	movwf	??___aldiv
  4216  0D27  0873               	movf	??___aldiv,w
  4217  0D28  06D0               	xorwf	___aldiv@sign,f
  4218  0D29                     l3536:	
  4219  0D29  3000               	movlw	0
  4220  0D2A  00D4               	movwf	___aldiv@quotient+3
  4221  0D2B  3000               	movlw	0
  4222  0D2C  00D3               	movwf	___aldiv@quotient+2
  4223  0D2D  3000               	movlw	0
  4224  0D2E  00D2               	movwf	___aldiv@quotient+1
  4225  0D2F  3000               	movlw	0
  4226  0D30  00D1               	movwf	___aldiv@quotient
  4227  0D31  084A               	movf	___aldiv@divisor+3,w
  4228  0D32  0449               	iorwf	___aldiv@divisor+2,w
  4229  0D33  0448               	iorwf	___aldiv@divisor+1,w
  4230  0D34  0447               	iorwf	___aldiv@divisor,w
  4231  0D35  1903               	skipnz
  4232  0D36  2D7E               	goto	l3558
  4233  0D37  01CF               	clrf	___aldiv@counter
  4234  0D38  0ACF               	incf	___aldiv@counter,f
  4235  0D39                     l3544:	
  4236  0D39  1BCA               	btfsc	___aldiv@divisor+3,7
  4237  0D3A  2D49               	goto	l3546
  4238  0D3B  3001               	movlw	1
  4239  0D3C  00F3               	movwf	??___aldiv
  4240  0D3D                     u3555:	
  4241  0D3D  1003               	clrc
  4242  0D3E  0DC7               	rlf	___aldiv@divisor,f
  4243  0D3F  0DC8               	rlf	___aldiv@divisor+1,f
  4244  0D40  0DC9               	rlf	___aldiv@divisor+2,f
  4245  0D41  0DCA               	rlf	___aldiv@divisor+3,f
  4246  0D42  0BF3               	decfsz	??___aldiv,f
  4247  0D43  2D3D               	goto	u3555
  4248  0D44  3001               	movlw	1
  4249  0D45  00F3               	movwf	??___aldiv
  4250  0D46  0873               	movf	??___aldiv,w
  4251  0D47  07CF               	addwf	___aldiv@counter,f
  4252  0D48  2D39               	goto	l3544
  4253  0D49                     l3546:	
  4254  0D49  3001               	movlw	1
  4255  0D4A  00F3               	movwf	??___aldiv
  4256  0D4B                     u3575:	
  4257  0D4B  1003               	clrc
  4258  0D4C  0DD1               	rlf	___aldiv@quotient,f
  4259  0D4D  0DD2               	rlf	___aldiv@quotient+1,f
  4260  0D4E  0DD3               	rlf	___aldiv@quotient+2,f
  4261  0D4F  0DD4               	rlf	___aldiv@quotient+3,f
  4262  0D50  0BF3               	decfsz	??___aldiv,f
  4263  0D51  2D4B               	goto	u3575
  4264  0D52  084A               	movf	___aldiv@divisor+3,w
  4265  0D53  024E               	subwf	___aldiv@dividend+3,w
  4266  0D54  1D03               	skipz
  4267  0D55  2D60               	goto	u3585
  4268  0D56  0849               	movf	___aldiv@divisor+2,w
  4269  0D57  024D               	subwf	___aldiv@dividend+2,w
  4270  0D58  1D03               	skipz
  4271  0D59  2D60               	goto	u3585
  4272  0D5A  0848               	movf	___aldiv@divisor+1,w
  4273  0D5B  024C               	subwf	___aldiv@dividend+1,w
  4274  0D5C  1D03               	skipz
  4275  0D5D  2D60               	goto	u3585
  4276  0D5E  0847               	movf	___aldiv@divisor,w
  4277  0D5F  024B               	subwf	___aldiv@dividend,w
  4278  0D60                     u3585:	
  4279  0D60  1C03               	skipc
  4280  0D61  2D71               	goto	l3554
  4281  0D62  0847               	movf	___aldiv@divisor,w
  4282  0D63  02CB               	subwf	___aldiv@dividend,f
  4283  0D64  0848               	movf	___aldiv@divisor+1,w
  4284  0D65  1C03               	skipc
  4285  0D66  0F48               	incfsz	___aldiv@divisor+1,w
  4286  0D67  02CC               	subwf	___aldiv@dividend+1,f
  4287  0D68  0849               	movf	___aldiv@divisor+2,w
  4288  0D69  1C03               	skipc
  4289  0D6A  0F49               	incfsz	___aldiv@divisor+2,w
  4290  0D6B  02CD               	subwf	___aldiv@dividend+2,f
  4291  0D6C  084A               	movf	___aldiv@divisor+3,w
  4292  0D6D  1C03               	skipc
  4293  0D6E  0F4A               	incfsz	___aldiv@divisor+3,w
  4294  0D6F  02CE               	subwf	___aldiv@dividend+3,f
  4295  0D70  1451               	bsf	___aldiv@quotient,0
  4296  0D71                     l3554:	
  4297  0D71  3001               	movlw	1
  4298  0D72                     u3595:	
  4299  0D72  1003               	clrc
  4300  0D73  0CCA               	rrf	___aldiv@divisor+3,f
  4301  0D74  0CC9               	rrf	___aldiv@divisor+2,f
  4302  0D75  0CC8               	rrf	___aldiv@divisor+1,f
  4303  0D76  0CC7               	rrf	___aldiv@divisor,f
  4304  0D77  3EFF               	addlw	-1
  4305  0D78  1D03               	skipz
  4306  0D79  2D72               	goto	u3595
  4307  0D7A  3001               	movlw	1
  4308  0D7B  02CF               	subwf	___aldiv@counter,f
  4309  0D7C  1D03               	btfss	3,2
  4310  0D7D  2D49               	goto	l3546
  4311  0D7E                     l3558:	
  4312  0D7E  0850               	movf	___aldiv@sign,w
  4313  0D7F  1903               	btfsc	3,2
  4314  0D80  2D8C               	goto	l3562
  4315  0D81  09D1               	comf	___aldiv@quotient,f
  4316  0D82  09D2               	comf	___aldiv@quotient+1,f
  4317  0D83  09D3               	comf	___aldiv@quotient+2,f
  4318  0D84  09D4               	comf	___aldiv@quotient+3,f
  4319  0D85  0AD1               	incf	___aldiv@quotient,f
  4320  0D86  1903               	skipnz
  4321  0D87  0AD2               	incf	___aldiv@quotient+1,f
  4322  0D88  1903               	skipnz
  4323  0D89  0AD3               	incf	___aldiv@quotient+2,f
  4324  0D8A  1903               	skipnz
  4325  0D8B  0AD4               	incf	___aldiv@quotient+3,f
  4326  0D8C                     l3562:	
  4327  0D8C  0854               	movf	___aldiv@quotient+3,w
  4328  0D8D  00CA               	movwf	?___aldiv+3
  4329  0D8E  0853               	movf	___aldiv@quotient+2,w
  4330  0D8F  00C9               	movwf	?___aldiv+2
  4331  0D90  0852               	movf	___aldiv@quotient+1,w
  4332  0D91  00C8               	movwf	?___aldiv+1
  4333  0D92  0851               	movf	___aldiv@quotient,w
  4334  0D93  00C7               	movwf	?___aldiv
  4335  0D94  0008               	return
  4336  0D95                     __end_of___aldiv:	
  4337                           
  4338                           	psect	text7
  4339  0C1D                     __ptext7:	
  4340 ;; *************** function _Lcd_Init *****************
  4341 ;; Defined at:
  4342 ;;		line 65 in file "./LCD4bits.h"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;		None
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;		None
  4347 ;; Return value:  Size  Location     Type
  4348 ;;                  1    wreg      void 
  4349 ;; Registers used:
  4350 ;;		wreg, status,2, status,0, pclath, cstack
  4351 ;; Tracked objects:
  4352 ;;		On entry : 0/0
  4353 ;;		On exit  : 0/0
  4354 ;;		Unchanged: 0/0
  4355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4356 ;;      Params:         0       0       0       0       0
  4357 ;;      Locals:         0       0       0       0       0
  4358 ;;      Temps:          0       2       0       0       0
  4359 ;;      Totals:         0       2       0       0       0
  4360 ;;Total ram usage:        2 bytes
  4361 ;; Hardware stack levels used:    1
  4362 ;; Hardware stack levels required when called:    3
  4363 ;; This function calls:
  4364 ;;		_Lcd_Cmd
  4365 ;;		_Lcd_Port
  4366 ;; This function is called by:
  4367 ;;		_setup
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           
  4372                           ;psect for function _Lcd_Init
  4373  0C1D                     _Lcd_Init:	
  4374                           
  4375                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  4376                           
  4377                           ;incstack = 0
  4378                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  4379  0C1D  3000               	movlw	0
  4380  0C1E  160A  118A  26EB  120A  158A  	fcall	_Lcd_Port
  4381                           
  4382                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  4383  0C23  3034               	movlw	52
  4384  0C24  1283               	bcf	3,5	;RP0=0, select bank0
  4385  0C25  1303               	bcf	3,6	;RP1=0, select bank0
  4386  0C26  00C8               	movwf	??_Lcd_Init+1
  4387  0C27  30F1               	movlw	241
  4388  0C28  00C7               	movwf	??_Lcd_Init
  4389  0C29                     u4987:	
  4390  0C29  0BC7               	decfsz	??_Lcd_Init,f
  4391  0C2A  2C29               	goto	u4987
  4392  0C2B  0BC8               	decfsz	??_Lcd_Init+1,f
  4393  0C2C  2C29               	goto	u4987
  4394                           
  4395                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  4396  0C2D  3003               	movlw	3
  4397  0C2E  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4398                           
  4399                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  4400  0C33  300D               	movlw	13
  4401  0C34  1283               	bcf	3,5	;RP0=0, select bank0
  4402  0C35  1303               	bcf	3,6	;RP1=0, select bank0
  4403  0C36  00C8               	movwf	??_Lcd_Init+1
  4404  0C37  30FB               	movlw	251
  4405  0C38  00C7               	movwf	??_Lcd_Init
  4406  0C39                     u4997:	
  4407  0C39  0BC7               	decfsz	??_Lcd_Init,f
  4408  0C3A  2C39               	goto	u4997
  4409  0C3B  0BC8               	decfsz	??_Lcd_Init+1,f
  4410  0C3C  2C39               	goto	u4997
  4411                           
  4412                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  4413  0C3D  3003               	movlw	3
  4414  0C3E  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4415                           
  4416                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  4417  0C43  301D               	movlw	29
  4418  0C44  1283               	bcf	3,5	;RP0=0, select bank0
  4419  0C45  1303               	bcf	3,6	;RP1=0, select bank0
  4420  0C46  00C8               	movwf	??_Lcd_Init+1
  4421  0C47  3090               	movlw	144
  4422  0C48  00C7               	movwf	??_Lcd_Init
  4423  0C49                     u5007:	
  4424  0C49  0BC7               	decfsz	??_Lcd_Init,f
  4425  0C4A  2C49               	goto	u5007
  4426  0C4B  0BC8               	decfsz	??_Lcd_Init+1,f
  4427  0C4C  2C49               	goto	u5007
  4428  0C4D  0000               	nop
  4429                           
  4430                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  4431  0C4E  3003               	movlw	3
  4432  0C4F  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4433                           
  4434                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  4435  0C54  3002               	movlw	2
  4436  0C55  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4437                           
  4438                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  4439  0C5A  3002               	movlw	2
  4440  0C5B  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4441                           
  4442                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  4443  0C60  3008               	movlw	8
  4444  0C61  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4445                           
  4446                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  4447  0C66  3000               	movlw	0
  4448  0C67  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4449                           
  4450                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  4451  0C6C  300C               	movlw	12
  4452  0C6D  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4453                           
  4454                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  4455  0C72  3000               	movlw	0
  4456  0C73  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4457                           
  4458                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  4459  0C78  3006               	movlw	6
  4460  0C79  160A  118A  2705   	fcall	_Lcd_Cmd
  4461  0C7C  0008               	return
  4462  0C7D                     __end_of_Lcd_Init:	
  4463                           
  4464                           	psect	text8
  4465  08F2                     __ptext8:	
  4466 ;; *************** function _I2C_Master_Init *****************
  4467 ;; Defined at:
  4468 ;;		line 16 in file "./I2C.h"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;  c               4   13[BANK0 ] const unsigned long 
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;		None
  4473 ;; Return value:  Size  Location     Type
  4474 ;;                  1    wreg      void 
  4475 ;; Registers used:
  4476 ;;		wreg, status,2, status,0, pclath, cstack
  4477 ;; Tracked objects:
  4478 ;;		On entry : 0/0
  4479 ;;		On exit  : 0/0
  4480 ;;		Unchanged: 0/0
  4481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4482 ;;      Params:         0       4       0       0       0
  4483 ;;      Locals:         0       0       0       0       0
  4484 ;;      Temps:          4       0       0       0       0
  4485 ;;      Totals:         4       4       0       0       0
  4486 ;;Total ram usage:        8 bytes
  4487 ;; Hardware stack levels used:    1
  4488 ;; Hardware stack levels required when called:    2
  4489 ;; This function calls:
  4490 ;;		___lldiv
  4491 ;; This function is called by:
  4492 ;;		_setup
  4493 ;; This function uses a non-reentrant model
  4494 ;;
  4495                           
  4496                           
  4497                           ;psect for function _I2C_Master_Init
  4498  08F2                     _I2C_Master_Init:	
  4499                           
  4500                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  4501                           
  4502                           ;incstack = 0
  4503                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  4504  08F2  3028               	movlw	40
  4505  08F3  1283               	bcf	3,5	;RP0=0, select bank0
  4506  08F4  1303               	bcf	3,6	;RP1=0, select bank0
  4507  08F5  0094               	movwf	20	;volatile
  4508                           
  4509                           ;./I2C.h: 19:     SSPCON2 = 0;
  4510  08F6  1683               	bsf	3,5	;RP0=1, select bank1
  4511  08F7  1303               	bcf	3,6	;RP1=0, select bank1
  4512  08F8  0191               	clrf	17	;volatile
  4513                           
  4514                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  4515  08F9  1283               	bcf	3,5	;RP0=0, select bank0
  4516  08FA  1303               	bcf	3,6	;RP1=0, select bank0
  4517  08FB  0854               	movf	I2C_Master_Init@c,w
  4518  08FC  00F4               	movwf	??_I2C_Master_Init
  4519  08FD  0855               	movf	I2C_Master_Init@c+1,w
  4520  08FE  00F5               	movwf	??_I2C_Master_Init+1
  4521  08FF  0856               	movf	I2C_Master_Init@c+2,w
  4522  0900  00F6               	movwf	??_I2C_Master_Init+2
  4523  0901  0857               	movf	I2C_Master_Init@c+3,w
  4524  0902  00F7               	movwf	??_I2C_Master_Init+3
  4525  0903  3002               	movlw	2
  4526  0904                     u3695:	
  4527  0904  1003               	clrc
  4528  0905  0DF4               	rlf	??_I2C_Master_Init,f
  4529  0906  0DF5               	rlf	??_I2C_Master_Init+1,f
  4530  0907  0DF6               	rlf	??_I2C_Master_Init+2,f
  4531  0908  0DF7               	rlf	??_I2C_Master_Init+3,f
  4532  0909  3EFF               	addlw	-1
  4533  090A  1D03               	skipz
  4534  090B  2904               	goto	u3695
  4535  090C  0877               	movf	??_I2C_Master_Init+3,w
  4536  090D  00CA               	movwf	___lldiv@divisor+3
  4537  090E  0876               	movf	??_I2C_Master_Init+2,w
  4538  090F  00C9               	movwf	___lldiv@divisor+2
  4539  0910  0875               	movf	??_I2C_Master_Init+1,w
  4540  0911  00C8               	movwf	___lldiv@divisor+1
  4541  0912  0874               	movf	??_I2C_Master_Init,w
  4542  0913  00C7               	movwf	___lldiv@divisor
  4543  0914  3000               	movlw	0
  4544  0915  00CE               	movwf	___lldiv@dividend+3
  4545  0916  307A               	movlw	122
  4546  0917  00CD               	movwf	___lldiv@dividend+2
  4547  0918  3012               	movlw	18
  4548  0919  00CC               	movwf	___lldiv@dividend+1
  4549  091A  3000               	movlw	0
  4550  091B  00CB               	movwf	___lldiv@dividend
  4551  091C  120A  158A  23BD   	fcall	___lldiv
  4552  091F  1283               	bcf	3,5	;RP0=0, select bank0
  4553  0920  1303               	bcf	3,6	;RP1=0, select bank0
  4554  0921  0847               	movf	?___lldiv,w
  4555  0922  3EFF               	addlw	255
  4556  0923  1683               	bsf	3,5	;RP0=1, select bank1
  4557  0924  1303               	bcf	3,6	;RP1=0, select bank1
  4558  0925  0093               	movwf	19	;volatile
  4559                           
  4560                           ;./I2C.h: 21:     SSPSTAT = 0;
  4561  0926  0194               	clrf	20	;volatile
  4562                           
  4563                           ;./I2C.h: 22:     TRISCbits.TRISC3 = 1;
  4564  0927  1587               	bsf	7,3	;volatile
  4565                           
  4566                           ;./I2C.h: 23:     TRISCbits.TRISC4 = 1;
  4567  0928  1607               	bsf	7,4	;volatile
  4568  0929  0008               	return
  4569  092A                     __end_of_I2C_Master_Init:	
  4570                           
  4571                           	psect	text9
  4572  0BBD                     __ptext9:	
  4573 ;; *************** function ___lldiv *****************
  4574 ;; Defined at:
  4575 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;  divisor         4    0[BANK0 ] unsigned long 
  4578 ;;  dividend        4    4[BANK0 ] unsigned long 
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;  quotient        4    8[BANK0 ] unsigned long 
  4581 ;;  counter         1   12[BANK0 ] unsigned char 
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  4    0[BANK0 ] unsigned long 
  4584 ;; Registers used:
  4585 ;;		wreg, status,2, status,0
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4591 ;;      Params:         0       8       0       0       0
  4592 ;;      Locals:         0       5       0       0       0
  4593 ;;      Temps:          1       0       0       0       0
  4594 ;;      Totals:         1      13       0       0       0
  4595 ;;Total ram usage:       14 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    1
  4598 ;; This function calls:
  4599 ;;		Nothing
  4600 ;; This function is called by:
  4601 ;;		_I2C_Master_Init
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           
  4606                           ;psect for function ___lldiv
  4607  0BBD                     ___lldiv:	
  4608                           
  4609                           ;incstack = 0
  4610                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4611  0BBD  3000               	movlw	0
  4612  0BBE  1283               	bcf	3,5	;RP0=0, select bank0
  4613  0BBF  1303               	bcf	3,6	;RP1=0, select bank0
  4614  0BC0  00D2               	movwf	___lldiv@quotient+3
  4615  0BC1  3000               	movlw	0
  4616  0BC2  00D1               	movwf	___lldiv@quotient+2
  4617  0BC3  3000               	movlw	0
  4618  0BC4  00D0               	movwf	___lldiv@quotient+1
  4619  0BC5  3000               	movlw	0
  4620  0BC6  00CF               	movwf	___lldiv@quotient
  4621  0BC7  084A               	movf	___lldiv@divisor+3,w
  4622  0BC8  0449               	iorwf	___lldiv@divisor+2,w
  4623  0BC9  0448               	iorwf	___lldiv@divisor+1,w
  4624  0BCA  0447               	iorwf	___lldiv@divisor,w
  4625  0BCB  1903               	skipnz
  4626  0BCC  2C14               	goto	l3522
  4627  0BCD  01D3               	clrf	___lldiv@counter
  4628  0BCE  0AD3               	incf	___lldiv@counter,f
  4629  0BCF                     l3508:	
  4630  0BCF  1BCA               	btfsc	___lldiv@divisor+3,7
  4631  0BD0  2BDF               	goto	l3510
  4632  0BD1  3001               	movlw	1
  4633  0BD2  00F3               	movwf	??___lldiv
  4634  0BD3                     u3465:	
  4635  0BD3  1003               	clrc
  4636  0BD4  0DC7               	rlf	___lldiv@divisor,f
  4637  0BD5  0DC8               	rlf	___lldiv@divisor+1,f
  4638  0BD6  0DC9               	rlf	___lldiv@divisor+2,f
  4639  0BD7  0DCA               	rlf	___lldiv@divisor+3,f
  4640  0BD8  0BF3               	decfsz	??___lldiv,f
  4641  0BD9  2BD3               	goto	u3465
  4642  0BDA  3001               	movlw	1
  4643  0BDB  00F3               	movwf	??___lldiv
  4644  0BDC  0873               	movf	??___lldiv,w
  4645  0BDD  07D3               	addwf	___lldiv@counter,f
  4646  0BDE  2BCF               	goto	l3508
  4647  0BDF                     l3510:	
  4648  0BDF  3001               	movlw	1
  4649  0BE0  00F3               	movwf	??___lldiv
  4650  0BE1                     u3485:	
  4651  0BE1  1003               	clrc
  4652  0BE2  0DCF               	rlf	___lldiv@quotient,f
  4653  0BE3  0DD0               	rlf	___lldiv@quotient+1,f
  4654  0BE4  0DD1               	rlf	___lldiv@quotient+2,f
  4655  0BE5  0DD2               	rlf	___lldiv@quotient+3,f
  4656  0BE6  0BF3               	decfsz	??___lldiv,f
  4657  0BE7  2BE1               	goto	u3485
  4658  0BE8  084A               	movf	___lldiv@divisor+3,w
  4659  0BE9  024E               	subwf	___lldiv@dividend+3,w
  4660  0BEA  1D03               	skipz
  4661  0BEB  2BF6               	goto	u3495
  4662  0BEC  0849               	movf	___lldiv@divisor+2,w
  4663  0BED  024D               	subwf	___lldiv@dividend+2,w
  4664  0BEE  1D03               	skipz
  4665  0BEF  2BF6               	goto	u3495
  4666  0BF0  0848               	movf	___lldiv@divisor+1,w
  4667  0BF1  024C               	subwf	___lldiv@dividend+1,w
  4668  0BF2  1D03               	skipz
  4669  0BF3  2BF6               	goto	u3495
  4670  0BF4  0847               	movf	___lldiv@divisor,w
  4671  0BF5  024B               	subwf	___lldiv@dividend,w
  4672  0BF6                     u3495:	
  4673  0BF6  1C03               	skipc
  4674  0BF7  2C07               	goto	l3518
  4675  0BF8  0847               	movf	___lldiv@divisor,w
  4676  0BF9  02CB               	subwf	___lldiv@dividend,f
  4677  0BFA  0848               	movf	___lldiv@divisor+1,w
  4678  0BFB  1C03               	skipc
  4679  0BFC  0F48               	incfsz	___lldiv@divisor+1,w
  4680  0BFD  02CC               	subwf	___lldiv@dividend+1,f
  4681  0BFE  0849               	movf	___lldiv@divisor+2,w
  4682  0BFF  1C03               	skipc
  4683  0C00  0F49               	incfsz	___lldiv@divisor+2,w
  4684  0C01  02CD               	subwf	___lldiv@dividend+2,f
  4685  0C02  084A               	movf	___lldiv@divisor+3,w
  4686  0C03  1C03               	skipc
  4687  0C04  0F4A               	incfsz	___lldiv@divisor+3,w
  4688  0C05  02CE               	subwf	___lldiv@dividend+3,f
  4689  0C06  144F               	bsf	___lldiv@quotient,0
  4690  0C07                     l3518:	
  4691  0C07  3001               	movlw	1
  4692  0C08                     u3505:	
  4693  0C08  1003               	clrc
  4694  0C09  0CCA               	rrf	___lldiv@divisor+3,f
  4695  0C0A  0CC9               	rrf	___lldiv@divisor+2,f
  4696  0C0B  0CC8               	rrf	___lldiv@divisor+1,f
  4697  0C0C  0CC7               	rrf	___lldiv@divisor,f
  4698  0C0D  3EFF               	addlw	-1
  4699  0C0E  1D03               	skipz
  4700  0C0F  2C08               	goto	u3505
  4701  0C10  3001               	movlw	1
  4702  0C11  02D3               	subwf	___lldiv@counter,f
  4703  0C12  1D03               	btfss	3,2
  4704  0C13  2BDF               	goto	l3510
  4705  0C14                     l3522:	
  4706  0C14  0852               	movf	___lldiv@quotient+3,w
  4707  0C15  00CA               	movwf	?___lldiv+3
  4708  0C16  0851               	movf	___lldiv@quotient+2,w
  4709  0C17  00C9               	movwf	?___lldiv+2
  4710  0C18  0850               	movf	___lldiv@quotient+1,w
  4711  0C19  00C8               	movwf	?___lldiv+1
  4712  0C1A  084F               	movf	___lldiv@quotient,w
  4713  0C1B  00C7               	movwf	?___lldiv
  4714  0C1C  0008               	return
  4715  0C1D                     __end_of___lldiv:	
  4716                           
  4717                           	psect	text10
  4718  173A                     __ptext10:	
  4719 ;; *************** function _open_door *****************
  4720 ;; Defined at:
  4721 ;;		line 615 in file "mainMaster.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;		None
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;		None
  4726 ;; Return value:  Size  Location     Type
  4727 ;;                  1    wreg      void 
  4728 ;; Registers used:
  4729 ;;		wreg, status,2, status,0, pclath, cstack
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4735 ;;      Params:         0       0       0       0       0
  4736 ;;      Locals:         0       0       0       0       0
  4737 ;;      Temps:          0       0       0       0       0
  4738 ;;      Totals:         0       0       0       0       0
  4739 ;;Total ram usage:        0 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; Hardware stack levels required when called:    3
  4742 ;; This function calls:
  4743 ;;		_I2C_Master_Start
  4744 ;;		_I2C_Master_Stop
  4745 ;;		_I2C_Master_Write
  4746 ;; This function is called by:
  4747 ;;		_main
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           
  4752                           ;psect for function _open_door
  4753  173A                     _open_door:	
  4754                           
  4755                           ;mainMaster.c: 617:     I2C_Master_Start();
  4756                           
  4757                           ;incstack = 0
  4758                           ; Regs used in _open_door: [wreg+status,2+status,0+pclath+cstack]
  4759  173A  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  4760                           
  4761                           ;mainMaster.c: 618:     I2C_Master_Write(0x20);
  4762  173F  3020               	movlw	32
  4763  1740  00F3               	movwf	I2C_Master_Write@d
  4764  1741  3000               	movlw	0
  4765  1742  00F4               	movwf	I2C_Master_Write@d+1
  4766  1743  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  4767                           
  4768                           ;mainMaster.c: 619:     I2C_Master_Write(0xFF);
  4769  1748  30FF               	movlw	255
  4770  1749  00F3               	movwf	I2C_Master_Write@d
  4771  174A  3000               	movlw	0
  4772  174B  00F4               	movwf	I2C_Master_Write@d+1
  4773  174C  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  4774                           
  4775                           ;mainMaster.c: 620:     I2C_Master_Stop();
  4776  1751  160A  118A  2699   	fcall	_I2C_Master_Stop
  4777  1754  0008               	return
  4778  1755                     __end_of_open_door:	
  4779                           
  4780                           	psect	text11
  4781  17DD                     __ptext11:	
  4782 ;; *************** function _get_tripwire *****************
  4783 ;; Defined at:
  4784 ;;		line 579 in file "mainMaster.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;		None
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;  trip            1    2[BANK0 ] unsigned char 
  4789 ;; Return value:  Size  Location     Type
  4790 ;;                  1    wreg      unsigned char 
  4791 ;; Registers used:
  4792 ;;		wreg, status,2, status,0, pclath, cstack
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4798 ;;      Params:         0       0       0       0       0
  4799 ;;      Locals:         0       1       0       0       0
  4800 ;;      Temps:          1       0       0       0       0
  4801 ;;      Totals:         1       1       0       0       0
  4802 ;;Total ram usage:        2 bytes
  4803 ;; Hardware stack levels used:    1
  4804 ;; Hardware stack levels required when called:    3
  4805 ;; This function calls:
  4806 ;;		_I2C_Master_Read
  4807 ;;		_I2C_Master_Start
  4808 ;;		_I2C_Master_Stop
  4809 ;;		_I2C_Master_Write
  4810 ;; This function is called by:
  4811 ;;		_main
  4812 ;; This function uses a non-reentrant model
  4813 ;;
  4814                           
  4815                           
  4816                           ;psect for function _get_tripwire
  4817  17DD                     _get_tripwire:	
  4818                           
  4819                           ;mainMaster.c: 581:     char trip;;mainMaster.c: 583:     I2C_Master_Start();
  4820                           
  4821                           ;incstack = 0
  4822                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  4823  17DD  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  4824                           
  4825                           ;mainMaster.c: 584:     I2C_Master_Write(0x21);
  4826  17E2  3021               	movlw	33
  4827  17E3  00F3               	movwf	I2C_Master_Write@d
  4828  17E4  3000               	movlw	0
  4829  17E5  00F4               	movwf	I2C_Master_Write@d+1
  4830  17E6  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  4831                           
  4832                           ;mainMaster.c: 585:     trip = I2C_Master_Read(0);
  4833  17EB  3000               	movlw	0
  4834  17EC  00F3               	movwf	I2C_Master_Read@a
  4835  17ED  00F4               	movwf	I2C_Master_Read@a+1
  4836  17EE  120A  158A  2060  160A  118A  	fcall	_I2C_Master_Read
  4837  17F3  0873               	movf	?_I2C_Master_Read,w
  4838  17F4  00F7               	movwf	??_get_tripwire
  4839  17F5  0877               	movf	??_get_tripwire,w
  4840  17F6  1283               	bcf	3,5	;RP0=0, select bank0
  4841  17F7  1303               	bcf	3,6	;RP1=0, select bank0
  4842  17F8  00C9               	movwf	get_tripwire@trip
  4843                           
  4844                           ;mainMaster.c: 586:     I2C_Master_Stop();
  4845  17F9  160A  118A  2699   	fcall	_I2C_Master_Stop
  4846                           
  4847                           ;mainMaster.c: 588:     return (trip);
  4848  17FC  1283               	bcf	3,5	;RP0=0, select bank0
  4849  17FD  1303               	bcf	3,6	;RP1=0, select bank0
  4850  17FE  0849               	movf	get_tripwire@trip,w
  4851  17FF  0008               	return
  4852  1800                     __end_of_get_tripwire:	
  4853                           
  4854                           	psect	text12
  4855  0C7D                     __ptext12:	
  4856 ;; *************** function _get_time *****************
  4857 ;; Defined at:
  4858 ;;		line 504 in file "mainMaster.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;  time_string     1    wreg     PTR unsigned char 
  4861 ;;		 -> time(6), 
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;  time_string     1    6[BANK0 ] PTR unsigned char 
  4864 ;;		 -> time(6), 
  4865 ;;  min             1    5[BANK0 ] unsigned char 
  4866 ;;  hour            1    4[BANK0 ] unsigned char 
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  1    wreg      void 
  4869 ;; Registers used:
  4870 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4876 ;;      Params:         0       0       0       0       0
  4877 ;;      Locals:         0       3       0       0       0
  4878 ;;      Temps:          0       2       0       0       0
  4879 ;;      Totals:         0       5       0       0       0
  4880 ;;Total ram usage:        5 bytes
  4881 ;; Hardware stack levels used:    1
  4882 ;; Hardware stack levels required when called:    3
  4883 ;; This function calls:
  4884 ;;		_I2C_Master_Read
  4885 ;;		_I2C_Master_RepeatedStart
  4886 ;;		_I2C_Master_Start
  4887 ;;		_I2C_Master_Stop
  4888 ;;		_I2C_Master_Write
  4889 ;; This function is called by:
  4890 ;;		_main
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           
  4895                           ;psect for function _get_time
  4896  0C7D                     _get_time:	
  4897                           
  4898                           ;incstack = 0
  4899                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4900                           ;get_time@time_string stored from wreg
  4901  0C7D  1283               	bcf	3,5	;RP0=0, select bank0
  4902  0C7E  1303               	bcf	3,6	;RP1=0, select bank0
  4903  0C7F  00CD               	movwf	get_time@time_string
  4904                           
  4905                           ;mainMaster.c: 506:     char hour, min;;mainMaster.c: 508:     I2C_Master_Start();
  4906  0C80  160A  118A  2692  120A  158A  	fcall	_I2C_Master_Start
  4907                           
  4908                           ;mainMaster.c: 509:     I2C_Master_Write(0xD0);
  4909  0C85  30D0               	movlw	208
  4910  0C86  00F3               	movwf	I2C_Master_Write@d
  4911  0C87  3000               	movlw	0
  4912  0C88  00F4               	movwf	I2C_Master_Write@d+1
  4913  0C89  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  4914                           
  4915                           ;mainMaster.c: 510:     I2C_Master_Write(0x01);
  4916  0C8E  3001               	movlw	1
  4917  0C8F  00F3               	movwf	I2C_Master_Write@d
  4918  0C90  3000               	movlw	0
  4919  0C91  00F4               	movwf	I2C_Master_Write@d+1
  4920  0C92  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  4921                           
  4922                           ;mainMaster.c: 511:     I2C_Master_RepeatedStart();
  4923  0C97  160A  118A  26A0  120A  158A  	fcall	_I2C_Master_RepeatedStart
  4924                           
  4925                           ;mainMaster.c: 512:     I2C_Master_Write(0xD1);
  4926  0C9C  30D1               	movlw	209
  4927  0C9D  00F3               	movwf	I2C_Master_Write@d
  4928  0C9E  3000               	movlw	0
  4929  0C9F  00F4               	movwf	I2C_Master_Write@d+1
  4930  0CA0  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  4931                           
  4932                           ;mainMaster.c: 513:     min = I2C_Master_Read(1);
  4933  0CA5  3001               	movlw	1
  4934  0CA6  00F3               	movwf	I2C_Master_Read@a
  4935  0CA7  3000               	movlw	0
  4936  0CA8  00F4               	movwf	I2C_Master_Read@a+1
  4937  0CA9  120A  158A  2060  120A  158A  	fcall	_I2C_Master_Read
  4938  0CAE  0873               	movf	?_I2C_Master_Read,w
  4939  0CAF  1283               	bcf	3,5	;RP0=0, select bank0
  4940  0CB0  1303               	bcf	3,6	;RP1=0, select bank0
  4941  0CB1  00C9               	movwf	??_get_time
  4942  0CB2  0849               	movf	??_get_time,w
  4943  0CB3  00CC               	movwf	get_time@min
  4944                           
  4945                           ;mainMaster.c: 514:     hour = I2C_Master_Read(0);
  4946  0CB4  3000               	movlw	0
  4947  0CB5  00F3               	movwf	I2C_Master_Read@a
  4948  0CB6  00F4               	movwf	I2C_Master_Read@a+1
  4949  0CB7  120A  158A  2060  120A  158A  	fcall	_I2C_Master_Read
  4950  0CBC  0873               	movf	?_I2C_Master_Read,w
  4951  0CBD  1283               	bcf	3,5	;RP0=0, select bank0
  4952  0CBE  1303               	bcf	3,6	;RP1=0, select bank0
  4953  0CBF  00C9               	movwf	??_get_time
  4954  0CC0  0849               	movf	??_get_time,w
  4955  0CC1  00CB               	movwf	get_time@hour
  4956                           
  4957                           ;mainMaster.c: 515:     I2C_Master_Stop();
  4958  0CC2  160A  118A  2699  120A  158A  	fcall	_I2C_Master_Stop
  4959                           
  4960                           ;mainMaster.c: 517:     time_string[0] = (hour >> 4) + '0';
  4961  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  4962  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  4963  0CC9  084B               	movf	get_time@hour,w
  4964  0CCA  00C9               	movwf	??_get_time
  4965  0CCB  3004               	movlw	4
  4966  0CCC                     u3955:	
  4967  0CCC  1003               	clrc
  4968  0CCD  0CC9               	rrf	??_get_time,f
  4969  0CCE  3EFF               	addlw	-1
  4970  0CCF  1D03               	skipz
  4971  0CD0  2CCC               	goto	u3955
  4972  0CD1  0849               	movf	??_get_time,w
  4973  0CD2  3E30               	addlw	48
  4974  0CD3  00CA               	movwf	??_get_time+1
  4975  0CD4  084D               	movf	get_time@time_string,w
  4976  0CD5  0084               	movwf	4
  4977  0CD6  084A               	movf	??_get_time+1,w
  4978  0CD7  1383               	bcf	3,7	;select IRP bank0
  4979  0CD8  0080               	movwf	0
  4980                           
  4981                           ;mainMaster.c: 518:     time_string[1] = (hour & 0x0F) + '0';
  4982  0CD9  084B               	movf	get_time@hour,w
  4983  0CDA  390F               	andlw	15
  4984  0CDB  3E30               	addlw	48
  4985  0CDC  00C9               	movwf	??_get_time
  4986  0CDD  0A4D               	incf	get_time@time_string,w
  4987  0CDE  0084               	movwf	4
  4988  0CDF  0849               	movf	??_get_time,w
  4989  0CE0  0080               	movwf	0
  4990                           
  4991                           ;mainMaster.c: 519:     time_string[2] = ':';
  4992  0CE1  303A               	movlw	58
  4993  0CE2  00C9               	movwf	??_get_time
  4994  0CE3  084D               	movf	get_time@time_string,w
  4995  0CE4  3E02               	addlw	2
  4996  0CE5  0084               	movwf	4
  4997  0CE6  0849               	movf	??_get_time,w
  4998  0CE7  0080               	movwf	0
  4999                           
  5000                           ;mainMaster.c: 520:     time_string[3] = (min >> 4) + '0';
  5001  0CE8  084C               	movf	get_time@min,w
  5002  0CE9  00C9               	movwf	??_get_time
  5003  0CEA  3004               	movlw	4
  5004  0CEB                     u3965:	
  5005  0CEB  1003               	clrc
  5006  0CEC  0CC9               	rrf	??_get_time,f
  5007  0CED  3EFF               	addlw	-1
  5008  0CEE  1D03               	skipz
  5009  0CEF  2CEB               	goto	u3965
  5010  0CF0  0849               	movf	??_get_time,w
  5011  0CF1  3E30               	addlw	48
  5012  0CF2  00CA               	movwf	??_get_time+1
  5013  0CF3  084D               	movf	get_time@time_string,w
  5014  0CF4  3E03               	addlw	3
  5015  0CF5  0084               	movwf	4
  5016  0CF6  084A               	movf	??_get_time+1,w
  5017  0CF7  0080               	movwf	0
  5018                           
  5019                           ;mainMaster.c: 521:     time_string[4] = (min & 0x0F) + '0';
  5020  0CF8  084C               	movf	get_time@min,w
  5021  0CF9  390F               	andlw	15
  5022  0CFA  3E30               	addlw	48
  5023  0CFB  00C9               	movwf	??_get_time
  5024  0CFC  084D               	movf	get_time@time_string,w
  5025  0CFD  3E04               	addlw	4
  5026  0CFE  0084               	movwf	4
  5027  0CFF  0849               	movf	??_get_time,w
  5028  0D00  0080               	movwf	0
  5029                           
  5030                           ;mainMaster.c: 522:     time_string[5] = '\0';
  5031  0D01  084D               	movf	get_time@time_string,w
  5032  0D02  3E05               	addlw	5
  5033  0D03  0084               	movwf	4
  5034  0D04  0180               	clrf	0
  5035  0D05  0008               	return
  5036  0D06                     __end_of_get_time:	
  5037                           
  5038                           	psect	text13
  5039  0D95                     __ptext13:	
  5040 ;; *************** function _get_temp *****************
  5041 ;; Defined at:
  5042 ;;		line 540 in file "mainMaster.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;  temp_string     1    wreg     PTR unsigned char 
  5045 ;;		 -> temp(6), 
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;  temp_string     1   31[BANK0 ] PTR unsigned char 
  5048 ;;		 -> temp(6), 
  5049 ;;  decimal         3   27[BANK0 ] unsigned char [3]
  5050 ;;  tempLSB         1   32[BANK0 ] unsigned char 
  5051 ;;  tempMSB         1   30[BANK0 ] unsigned char 
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      void 
  5054 ;; Registers used:
  5055 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5061 ;;      Params:         0       0       0       0       0
  5062 ;;      Locals:         0       6       0       0       0
  5063 ;;      Temps:          0       3       0       0       0
  5064 ;;      Totals:         0       9       0       0       0
  5065 ;;Total ram usage:        9 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:    3
  5068 ;; This function calls:
  5069 ;;		_I2C_Master_Read
  5070 ;;		_I2C_Master_RepeatedStart
  5071 ;;		_I2C_Master_Start
  5072 ;;		_I2C_Master_Stop
  5073 ;;		_I2C_Master_Write
  5074 ;;		___bmul
  5075 ;;		_sprintf
  5076 ;;		_strcat
  5077 ;; This function is called by:
  5078 ;;		_main
  5079 ;; This function uses a non-reentrant model
  5080 ;;
  5081                           
  5082                           
  5083                           ;psect for function _get_temp
  5084  0D95                     _get_temp:	
  5085                           
  5086                           ;incstack = 0
  5087                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5088                           ;get_temp@temp_string stored from wreg
  5089  0D95  1283               	bcf	3,5	;RP0=0, select bank0
  5090  0D96  1303               	bcf	3,6	;RP1=0, select bank0
  5091  0D97  00E6               	movwf	get_temp@temp_string
  5092                           
  5093                           ;mainMaster.c: 542:     char tempLSB, tempMSB;;mainMaster.c: 543:     char decimal[3];;m
      +                          ainMaster.c: 545:     I2C_Master_Start();
  5094  0D98  160A  118A  2692  120A  158A  	fcall	_I2C_Master_Start
  5095                           
  5096                           ;mainMaster.c: 546:     I2C_Master_Write(0xD0);
  5097  0D9D  30D0               	movlw	208
  5098  0D9E  00F3               	movwf	I2C_Master_Write@d
  5099  0D9F  3000               	movlw	0
  5100  0DA0  00F4               	movwf	I2C_Master_Write@d+1
  5101  0DA1  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  5102                           
  5103                           ;mainMaster.c: 547:     I2C_Master_Write(0x11);
  5104  0DA6  3011               	movlw	17
  5105  0DA7  00F3               	movwf	I2C_Master_Write@d
  5106  0DA8  3000               	movlw	0
  5107  0DA9  00F4               	movwf	I2C_Master_Write@d+1
  5108  0DAA  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  5109                           
  5110                           ;mainMaster.c: 548:     I2C_Master_RepeatedStart();
  5111  0DAF  160A  118A  26A0  120A  158A  	fcall	_I2C_Master_RepeatedStart
  5112                           
  5113                           ;mainMaster.c: 549:     I2C_Master_Write(0xD1);
  5114  0DB4  30D1               	movlw	209
  5115  0DB5  00F3               	movwf	I2C_Master_Write@d
  5116  0DB6  3000               	movlw	0
  5117  0DB7  00F4               	movwf	I2C_Master_Write@d+1
  5118  0DB8  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  5119                           
  5120                           ;mainMaster.c: 550:     tempMSB = I2C_Master_Read(1);
  5121  0DBD  3001               	movlw	1
  5122  0DBE  00F3               	movwf	I2C_Master_Read@a
  5123  0DBF  3000               	movlw	0
  5124  0DC0  00F4               	movwf	I2C_Master_Read@a+1
  5125  0DC1  120A  158A  2060  120A  158A  	fcall	_I2C_Master_Read
  5126  0DC6  0873               	movf	?_I2C_Master_Read,w
  5127  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  5128  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  5129  0DC9  00DF               	movwf	??_get_temp
  5130  0DCA  085F               	movf	??_get_temp,w
  5131  0DCB  00E5               	movwf	get_temp@tempMSB
  5132                           
  5133                           ;mainMaster.c: 551:     tempLSB = I2C_Master_Read(0);
  5134  0DCC  3000               	movlw	0
  5135  0DCD  00F3               	movwf	I2C_Master_Read@a
  5136  0DCE  00F4               	movwf	I2C_Master_Read@a+1
  5137  0DCF  120A  158A  2060  120A  158A  	fcall	_I2C_Master_Read
  5138  0DD4  0873               	movf	?_I2C_Master_Read,w
  5139  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  5140  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  5141  0DD7  00DF               	movwf	??_get_temp
  5142  0DD8  085F               	movf	??_get_temp,w
  5143  0DD9  00E7               	movwf	get_temp@tempLSB
  5144                           
  5145                           ;mainMaster.c: 552:     I2C_Master_Stop();
  5146  0DDA  160A  118A  2699  120A  158A  	fcall	_I2C_Master_Stop
  5147                           
  5148                           ;mainMaster.c: 554:     tempMSB = tempMSB - 4;
  5149  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  5150  0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  5151  0DE1  0865               	movf	get_temp@tempMSB,w
  5152  0DE2  3EFC               	addlw	252
  5153  0DE3  00DF               	movwf	??_get_temp
  5154  0DE4  085F               	movf	??_get_temp,w
  5155  0DE5  00E5               	movwf	get_temp@tempMSB
  5156                           
  5157                           ;mainMaster.c: 555:     tempLSB = (tempLSB >> 6) * 25;
  5158  0DE6  3019               	movlw	25
  5159  0DE7  00DF               	movwf	??_get_temp
  5160  0DE8  085F               	movf	??_get_temp,w
  5161  0DE9  00F3               	movwf	___bmul@multiplicand
  5162  0DEA  0867               	movf	get_temp@tempLSB,w
  5163  0DEB  00E0               	movwf	??_get_temp+1
  5164  0DEC  3006               	movlw	6
  5165  0DED                     u3935:	
  5166  0DED  1003               	clrc
  5167  0DEE  0CE0               	rrf	??_get_temp+1,f
  5168  0DEF  3EFF               	addlw	-1
  5169  0DF0  1D03               	skipz
  5170  0DF1  2DED               	goto	u3935
  5171  0DF2  0860               	movf	??_get_temp+1,w
  5172  0DF3  120A  158A  202B  120A  158A  	fcall	___bmul
  5173  0DF8  1283               	bcf	3,5	;RP0=0, select bank0
  5174  0DF9  1303               	bcf	3,6	;RP1=0, select bank0
  5175  0DFA  00E1               	movwf	??_get_temp+2
  5176  0DFB  0861               	movf	??_get_temp+2,w
  5177  0DFC  00E7               	movwf	get_temp@tempLSB
  5178                           
  5179                           ;mainMaster.c: 556:     sprintf(temp_string, "%d", tempMSB);
  5180  0DFD  3028               	movlw	low ((STR_32+1)| (0+32768))
  5181  0DFE  00D0               	movwf	sprintf@f
  5182  0DFF  3088               	movlw	high ((STR_32+1)| (0+32768))
  5183  0E00  00D1               	movwf	sprintf@f+1
  5184  0E01  0865               	movf	get_temp@tempMSB,w
  5185  0E02  00DF               	movwf	??_get_temp
  5186  0E03  01E0               	clrf	??_get_temp+1
  5187  0E04  085F               	movf	??_get_temp,w
  5188  0E05  00D2               	movwf	?_sprintf+2
  5189  0E06  0860               	movf	??_get_temp+1,w
  5190  0E07  00D3               	movwf	?_sprintf+3
  5191  0E08  0866               	movf	get_temp@temp_string,w
  5192  0E09  120A  158A  2712  120A  158A  	fcall	_sprintf
  5193                           
  5194                           ;mainMaster.c: 557:     if (tempLSB == 0){
  5195  0E0E  1283               	bcf	3,5	;RP0=0, select bank0
  5196  0E0F  1303               	bcf	3,6	;RP1=0, select bank0
  5197  0E10  0867               	movf	get_temp@tempLSB,w
  5198  0E11  1D03               	btfss	3,2
  5199  0E12  2E17               	goto	l3840
  5200                           
  5201                           ;mainMaster.c: 558:         sprintf(decimal, ".%d0", tempLSB);
  5202  0E13  3022               	movlw	low (STR_31| (0+32768))
  5203  0E14  00D0               	movwf	sprintf@f
  5204  0E15  3088               	movlw	high (STR_31| (0+32768))
  5205  0E16  2E1A               	goto	L18
  5206  0E17                     l3840:	
  5207                           ;mainMaster.c: 559:     } else {
  5208                           
  5209                           
  5210                           ;mainMaster.c: 560:         sprintf(decimal, ".%d", tempLSB);
  5211  0E17  3027               	movlw	low (STR_32| (0+32768))
  5212  0E18  00D0               	movwf	sprintf@f
  5213  0E19  3088               	movlw	high (STR_32| (0+32768))
  5214  0E1A                     L18:	
  5215  0E1A  00D1               	movwf	sprintf@f+1
  5216  0E1B  0867               	movf	get_temp@tempLSB,w
  5217  0E1C  00DF               	movwf	??_get_temp
  5218  0E1D  01E0               	clrf	??_get_temp+1
  5219  0E1E  085F               	movf	??_get_temp,w
  5220  0E1F  00D2               	movwf	?_sprintf+2
  5221  0E20  0860               	movf	??_get_temp+1,w
  5222  0E21  00D3               	movwf	?_sprintf+3
  5223  0E22  3062               	movlw	(low (get_temp@decimal| 0))& (0+255)
  5224  0E23  120A  158A  2712  120A  158A  	fcall	_sprintf
  5225                           
  5226                           ;mainMaster.c: 562:     strcat(temp_string, decimal);
  5227  0E28  3062               	movlw	(low (get_temp@decimal| 0))& (0+255)
  5228  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  5229  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  5230  0E2B  00DF               	movwf	??_get_temp
  5231  0E2C  085F               	movf	??_get_temp,w
  5232  0E2D  00F3               	movwf	strcat@from
  5233  0E2E  0866               	movf	get_temp@temp_string,w
  5234  0E2F  120A  158A  203C   	fcall	_strcat
  5235                           
  5236                           ;mainMaster.c: 563:     temp_string[5] = '\0';
  5237  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  5238  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  5239  0E34  0866               	movf	get_temp@temp_string,w
  5240  0E35  3E05               	addlw	5
  5241  0E36  0084               	movwf	4
  5242  0E37  1383               	bcf	3,7	;select IRP bank0
  5243  0E38  0180               	clrf	0
  5244  0E39  0008               	return
  5245  0E3A                     __end_of_get_temp:	
  5246                           
  5247                           	psect	text14
  5248  083C                     __ptext14:	
  5249 ;; *************** function _strcat *****************
  5250 ;; Defined at:
  5251 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;  to              1    wreg     PTR unsigned char 
  5254 ;;		 -> temp(6), 
  5255 ;;  from            1    3[COMMON] PTR const unsigned char 
  5256 ;;		 -> get_temp@decimal(3), 
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;  to              1    5[COMMON] PTR unsigned char 
  5259 ;;		 -> temp(6), 
  5260 ;;  cp              1    6[COMMON] PTR unsigned char 
  5261 ;;		 -> temp(6), 
  5262 ;; Return value:  Size  Location     Type
  5263 ;;                  1    wreg      PTR unsigned char 
  5264 ;; Registers used:
  5265 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5271 ;;      Params:         1       0       0       0       0
  5272 ;;      Locals:         2       0       0       0       0
  5273 ;;      Temps:          1       0       0       0       0
  5274 ;;      Totals:         4       0       0       0       0
  5275 ;;Total ram usage:        4 bytes
  5276 ;; Hardware stack levels used:    1
  5277 ;; Hardware stack levels required when called:    1
  5278 ;; This function calls:
  5279 ;;		Nothing
  5280 ;; This function is called by:
  5281 ;;		_get_temp
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           
  5286                           ;psect for function _strcat
  5287  083C                     _strcat:	
  5288                           
  5289                           ;incstack = 0
  5290                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  5291                           ;strcat@to stored from wreg
  5292  083C  00F5               	movwf	strcat@to
  5293  083D  0875               	movf	strcat@to,w
  5294  083E  00F4               	movwf	??_strcat
  5295  083F  0874               	movf	??_strcat,w
  5296  0840  00F6               	movwf	strcat@cp
  5297  0841                     l2650:	
  5298  0841  0876               	movf	strcat@cp,w
  5299  0842  0084               	movwf	4
  5300  0843  1383               	bcf	3,7	;select IRP bank0
  5301  0844  0800               	movf	0,w
  5302  0845  1903               	btfsc	3,2
  5303  0846  2854               	goto	l2654
  5304  0847  3001               	movlw	1
  5305  0848  00F4               	movwf	??_strcat
  5306  0849  0874               	movf	??_strcat,w
  5307  084A  07F6               	addwf	strcat@cp,f
  5308  084B  2841               	goto	l2650
  5309  084C                     l2652:	
  5310  084C  3001               	movlw	1
  5311  084D  00F4               	movwf	??_strcat
  5312  084E  0874               	movf	??_strcat,w
  5313  084F  07F6               	addwf	strcat@cp,f
  5314  0850  3001               	movlw	1
  5315  0851  00F4               	movwf	??_strcat
  5316  0852  0874               	movf	??_strcat,w
  5317  0853  07F3               	addwf	strcat@from,f
  5318  0854                     l2654:	
  5319  0854  0873               	movf	strcat@from,w
  5320  0855  0084               	movwf	4
  5321  0856  0800               	movf	0,w
  5322  0857  00F4               	movwf	??_strcat
  5323  0858  0876               	movf	strcat@cp,w
  5324  0859  0084               	movwf	4
  5325  085A  0874               	movf	??_strcat,w
  5326  085B  0080               	movwf	0
  5327  085C  0800               	movf	0,w
  5328  085D  1903               	btfsc	3,2
  5329  085E  0008               	return
  5330  085F  284C               	goto	l2652
  5331  0860                     __end_of_strcat:	
  5332                           
  5333                           	psect	text15
  5334  0F12                     __ptext15:	
  5335 ;; *************** function _sprintf *****************
  5336 ;; Defined at:
  5337 ;;		line 500 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  sp              1    wreg     PTR unsigned char 
  5340 ;;		 -> get_temp@decimal(3), temp(6), 
  5341 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  5342 ;;		 -> STR_32(4), STR_31(5), STR_30(3), 
  5343 ;; Auto vars:     Size  Location     Type
  5344 ;;  sp              1   22[BANK0 ] PTR unsigned char 
  5345 ;;		 -> get_temp@decimal(3), temp(6), 
  5346 ;;  tmpval          4    0        struct .
  5347 ;;  val             2   20[BANK0 ] unsigned int 
  5348 ;;  cp              2    0        PTR const unsigned char 
  5349 ;;  len             2    0        unsigned int 
  5350 ;;  c               1   23[BANK0 ] unsigned char 
  5351 ;;  prec            1   19[BANK0 ] char 
  5352 ;;  flag            1   18[BANK0 ] unsigned char 
  5353 ;;  ap              1   17[BANK0 ] PTR void [1]
  5354 ;;		 -> ?_sprintf(2), 
  5355 ;; Return value:  Size  Location     Type
  5356 ;;                  2    9[BANK0 ] int 
  5357 ;; Registers used:
  5358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 0/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5364 ;;      Params:         0       4       0       0       0
  5365 ;;      Locals:         0       7       0       0       0
  5366 ;;      Temps:          0       4       0       0       0
  5367 ;;      Totals:         0      15       0       0       0
  5368 ;;Total ram usage:       15 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; Hardware stack levels required when called:    2
  5371 ;; This function calls:
  5372 ;;		___lwdiv
  5373 ;;		___lwmod
  5374 ;; This function is called by:
  5375 ;;		_get_temp
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           
  5380                           ;psect for function _sprintf
  5381  0F12                     _sprintf:	
  5382                           
  5383                           ;incstack = 0
  5384                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5385                           ;sprintf@sp stored from wreg
  5386  0F12  1283               	bcf	3,5	;RP0=0, select bank0
  5387  0F13  1303               	bcf	3,6	;RP1=0, select bank0
  5388  0F14  00DD               	movwf	sprintf@sp
  5389                           
  5390                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;D:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  5391  0F15  3052               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5392  0F16  00D4               	movwf	??_sprintf
  5393  0F17  0854               	movf	??_sprintf,w
  5394  0F18  00D8               	movwf	sprintf@ap
  5395  0F19                     l3724:	
  5396                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5397                           
  5398                           
  5399                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5400  0F19  0851               	movf	sprintf@f+1,w
  5401  0F1A  00D5               	movwf	??_sprintf+1
  5402  0F1B  0850               	movf	sprintf@f,w
  5403  0F1C  00D4               	movwf	??_sprintf
  5404  0F1D  0AD0               	incf	sprintf@f,f
  5405  0F1E  1903               	skipnz
  5406  0F1F  0AD1               	incf	sprintf@f+1,f
  5407  0F20  0855               	movf	??_sprintf+1,w
  5408  0F21  00FF               	movwf	127
  5409  0F22  0854               	movf	??_sprintf,w
  5410  0F23  0084               	movwf	4
  5411  0F24  120A  118A  2700  120A  158A  	fcall	stringtab
  5412  0F29  00D6               	movwf	??_sprintf+2
  5413  0F2A  0856               	movf	??_sprintf+2,w
  5414  0F2B  00DE               	movwf	sprintf@c
  5415  0F2C  085E               	movf	sprintf@c,w
  5416  0F2D  1903               	btfsc	3,2
  5417  0F2E  2FFB               	goto	l3726
  5418                           
  5419                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  5420  0F2F  3025               	movlw	37
  5421  0F30  065E               	xorwf	sprintf@c,w
  5422  0F31  1903               	btfsc	3,2
  5423  0F32  2F3F               	goto	l3680
  5424                           
  5425                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;D:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  5426  0F33  085E               	movf	sprintf@c,w
  5427  0F34  00D4               	movwf	??_sprintf
  5428  0F35  085D               	movf	sprintf@sp,w
  5429  0F36  0084               	movwf	4
  5430  0F37  0854               	movf	??_sprintf,w
  5431  0F38  1383               	bcf	3,7	;select IRP bank0
  5432  0F39  0080               	movwf	0
  5433  0F3A  3001               	movlw	1
  5434  0F3B  00D4               	movwf	??_sprintf
  5435  0F3C  0854               	movf	??_sprintf,w
  5436  0F3D  07DD               	addwf	sprintf@sp,f
  5437                           
  5438                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  5439  0F3E  2F19               	goto	l3724
  5440  0F3F                     l3680:	
  5441                           
  5442                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  5443  0F3F  01D9               	clrf	sprintf@flag
  5444                           
  5445                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  5446  0F40  0851               	movf	sprintf@f+1,w
  5447  0F41  00D5               	movwf	??_sprintf+1
  5448  0F42  0850               	movf	sprintf@f,w
  5449  0F43  00D4               	movwf	??_sprintf
  5450  0F44  0AD0               	incf	sprintf@f,f
  5451  0F45  1903               	skipnz
  5452  0F46  0AD1               	incf	sprintf@f+1,f
  5453  0F47  0855               	movf	??_sprintf+1,w
  5454  0F48  00FF               	movwf	127
  5455  0F49  0854               	movf	??_sprintf,w
  5456  0F4A  0084               	movwf	4
  5457  0F4B  120A  118A  2700  120A  158A  	fcall	stringtab
  5458  0F50  00DE               	movwf	sprintf@c
  5459  0F51  00D6               	movwf	??_sprintf+2
  5460  0F52  01D7               	clrf	??_sprintf+3
  5461                           
  5462                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5463                           ; Switch size 1, requested type "simple"
  5464                           ; Number of cases is 1, Range of values is 0 to 0
  5465                           ; switch strategies available:
  5466                           ; Name         Instructions Cycles
  5467                           ; simple_byte            4     3 (average)
  5468                           ; direct_byte           11     8 (fixed)
  5469                           ; jumptable            260     6 (fixed)
  5470                           ;	Chosen strategy is simple_byte
  5471  0F53  0857               	movf	??_sprintf+3,w
  5472  0F54  3A00               	xorlw	0	; case 0
  5473  0F55  1903               	skipnz
  5474  0F56  2F58               	goto	l4484
  5475  0F57  2F19               	goto	l3724
  5476  0F58                     l4484:	
  5477                           
  5478                           ; Switch size 1, requested type "simple"
  5479                           ; Number of cases is 3, Range of values is 0 to 105
  5480                           ; switch strategies available:
  5481                           ; Name         Instructions Cycles
  5482                           ; simple_byte           10     6 (average)
  5483                           ; jumptable            260     6 (fixed)
  5484                           ;	Chosen strategy is simple_byte
  5485  0F58  0856               	movf	??_sprintf+2,w
  5486  0F59  3A00               	xorlw	0	; case 0
  5487  0F5A  1903               	skipnz
  5488  0F5B  2FFB               	goto	l3726
  5489  0F5C  3A64               	xorlw	100	; case 100
  5490  0F5D  1903               	skipnz
  5491  0F5E  2F63               	goto	l3686
  5492  0F5F  3A0D               	xorlw	13	; case 105
  5493  0F60  1903               	skipnz
  5494  0F61  2F63               	goto	l3686
  5495  0F62  2F19               	goto	l3724
  5496  0F63                     l3686:	
  5497                           
  5498                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5499  0F63  0858               	movf	sprintf@ap,w
  5500  0F64  0084               	movwf	4
  5501  0F65  1383               	bcf	3,7	;select IRP bank0
  5502  0F66  0800               	movf	0,w
  5503  0F67  00DB               	movwf	sprintf@val
  5504  0F68  0A84               	incf	4,f
  5505  0F69  0800               	movf	0,w
  5506  0F6A  00DC               	movwf	sprintf@val+1
  5507  0F6B  3002               	movlw	2
  5508  0F6C  00D4               	movwf	??_sprintf
  5509  0F6D  0854               	movf	??_sprintf,w
  5510  0F6E  07D8               	addwf	sprintf@ap,f
  5511                           
  5512                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  5513  0F6F  1FDC               	btfss	sprintf@val+1,7
  5514  0F70  2F7A               	goto	l3696
  5515                           
  5516                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  5517  0F71  3003               	movlw	3
  5518  0F72  00D4               	movwf	??_sprintf
  5519  0F73  0854               	movf	??_sprintf,w
  5520  0F74  04D9               	iorwf	sprintf@flag,f
  5521                           
  5522                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  5523  0F75  09DB               	comf	sprintf@val,f
  5524  0F76  09DC               	comf	sprintf@val+1,f
  5525  0F77  0ADB               	incf	sprintf@val,f
  5526  0F78  1903               	skipnz
  5527  0F79  0ADC               	incf	sprintf@val+1,f
  5528  0F7A                     l3696:	
  5529                           
  5530                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5531  0F7A  01DE               	clrf	sprintf@c
  5532  0F7B  0ADE               	incf	sprintf@c,f
  5533  0F7C                     l3702:	
  5534                           
  5535                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  5536  0F7C  085E               	movf	sprintf@c,w
  5537  0F7D  00D4               	movwf	??_sprintf
  5538  0F7E  0754               	addwf	??_sprintf,w
  5539  0F7F  3E12               	addlw	low (_dpowers| (0+32768))
  5540  0F80  0084               	movwf	4
  5541  0F81  3087               	movlw	high (_dpowers| (0+32768))
  5542  0F82  1803               	skipnc
  5543  0F83  3E01               	addlw	1
  5544  0F84  00FF               	movwf	127
  5545  0F85  120A  118A  2700  120A  158A  	fcall	stringtab
  5546  0F8A  00D5               	movwf	??_sprintf+1
  5547  0F8B  120A  118A  2700  120A  158A  	fcall	stringtab
  5548  0F90  00D6               	movwf	??_sprintf+2
  5549  0F91  0856               	movf	??_sprintf+2,w
  5550  0F92  025C               	subwf	sprintf@val+1,w
  5551  0F93  1D03               	skipz
  5552  0F94  2F97               	goto	u3815
  5553  0F95  0855               	movf	??_sprintf+1,w
  5554  0F96  025B               	subwf	sprintf@val,w
  5555  0F97                     u3815:	
  5556  0F97  1C03               	btfss	3,0
  5557  0F98  2FA1               	goto	l3708
  5558  0F99  3001               	movlw	1
  5559  0F9A  00D4               	movwf	??_sprintf
  5560  0F9B  0854               	movf	??_sprintf,w
  5561  0F9C  07DE               	addwf	sprintf@c,f
  5562  0F9D  3005               	movlw	5
  5563  0F9E  065E               	xorwf	sprintf@c,w
  5564  0F9F  1D03               	btfss	3,2
  5565  0FA0  2F7C               	goto	l3702
  5566  0FA1                     l3708:	
  5567                           
  5568                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  5569  0FA1  0859               	movf	sprintf@flag,w
  5570  0FA2  3903               	andlw	3
  5571  0FA3  1903               	btfsc	3,2
  5572  0FA4  2FB0               	goto	l3714
  5573                           
  5574                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  5575  0FA5  302D               	movlw	45
  5576  0FA6  00D4               	movwf	??_sprintf
  5577  0FA7  085D               	movf	sprintf@sp,w
  5578  0FA8  0084               	movwf	4
  5579  0FA9  0854               	movf	??_sprintf,w
  5580  0FAA  1383               	bcf	3,7	;select IRP bank0
  5581  0FAB  0080               	movwf	0
  5582  0FAC  3001               	movlw	1
  5583  0FAD  00D4               	movwf	??_sprintf
  5584  0FAE  0854               	movf	??_sprintf,w
  5585  0FAF  07DD               	addwf	sprintf@sp,f
  5586  0FB0                     l3714:	
  5587                           
  5588                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  5589  0FB0  085E               	movf	sprintf@c,w
  5590  0FB1  00D4               	movwf	??_sprintf
  5591  0FB2  0854               	movf	??_sprintf,w
  5592  0FB3  00DA               	movwf	sprintf@prec
  5593  0FB4                     l3722:	
  5594                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5595                           
  5596                           
  5597                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5598  0FB4  30FF               	movlw	255
  5599  0FB5  00D4               	movwf	??_sprintf
  5600  0FB6  0854               	movf	??_sprintf,w
  5601  0FB7  07DA               	addwf	sprintf@prec,f
  5602  0FB8  0A5A               	incf	sprintf@prec,w
  5603  0FB9  1903               	btfsc	3,2
  5604  0FBA  2F19               	goto	l3724
  5605                           
  5606                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  5607  0FBB  300A               	movlw	10
  5608  0FBC  00CA               	movwf	___lwmod@divisor
  5609  0FBD  3000               	movlw	0
  5610  0FBE  00CB               	movwf	___lwmod@divisor+1
  5611  0FBF  085A               	movf	sprintf@prec,w
  5612  0FC0  00D4               	movwf	??_sprintf
  5613  0FC1  0754               	addwf	??_sprintf,w
  5614  0FC2  3E12               	addlw	low (_dpowers| (0+32768))
  5615  0FC3  0084               	movwf	4
  5616  0FC4  3087               	movlw	high (_dpowers| (0+32768))
  5617  0FC5  1803               	skipnc
  5618  0FC6  3E01               	addlw	1
  5619  0FC7  00FF               	movwf	127
  5620  0FC8  120A  118A  2700  120A  158A  	fcall	stringtab
  5621  0FCD  00F3               	movwf	___lwdiv@divisor
  5622  0FCE  120A  118A  2700  120A  158A  	fcall	stringtab
  5623  0FD3  00F4               	movwf	___lwdiv@divisor+1
  5624  0FD4  085C               	movf	sprintf@val+1,w
  5625  0FD5  00F6               	movwf	___lwdiv@dividend+1
  5626  0FD6  085B               	movf	sprintf@val,w
  5627  0FD7  00F5               	movwf	___lwdiv@dividend
  5628  0FD8  120A  158A  219D  120A  158A  	fcall	___lwdiv
  5629  0FDD  0874               	movf	?___lwdiv+1,w
  5630  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  5631  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  5632  0FE0  00CD               	movwf	___lwmod@dividend+1
  5633  0FE1  0873               	movf	?___lwdiv,w
  5634  0FE2  00CC               	movwf	___lwmod@dividend
  5635  0FE3  120A  158A  20BE  120A  158A  	fcall	___lwmod
  5636  0FE8  1283               	bcf	3,5	;RP0=0, select bank0
  5637  0FE9  1303               	bcf	3,6	;RP1=0, select bank0
  5638  0FEA  084A               	movf	?___lwmod,w
  5639  0FEB  3E30               	addlw	48
  5640  0FEC  00D5               	movwf	??_sprintf+1
  5641  0FED  0855               	movf	??_sprintf+1,w
  5642  0FEE  00DE               	movwf	sprintf@c
  5643                           
  5644                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  5645  0FEF  085E               	movf	sprintf@c,w
  5646  0FF0  00D4               	movwf	??_sprintf
  5647  0FF1  085D               	movf	sprintf@sp,w
  5648  0FF2  0084               	movwf	4
  5649  0FF3  0854               	movf	??_sprintf,w
  5650  0FF4  1383               	bcf	3,7	;select IRP bank0
  5651  0FF5  0080               	movwf	0
  5652  0FF6  3001               	movlw	1
  5653  0FF7  00D4               	movwf	??_sprintf
  5654  0FF8  0854               	movf	??_sprintf,w
  5655  0FF9  07DD               	addwf	sprintf@sp,f
  5656  0FFA  2FB4               	goto	l3722
  5657  0FFB                     l3726:	
  5658                           
  5659                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  5660  0FFB  085D               	movf	sprintf@sp,w
  5661  0FFC  0084               	movwf	4
  5662  0FFD  1383               	bcf	3,7	;select IRP bank0
  5663  0FFE  0180               	clrf	0
  5664  0FFF  0008               	return
  5665  1000                     __end_of_sprintf:	
  5666                           
  5667                           	psect	text16
  5668  08BE                     __ptext16:	
  5669 ;; *************** function ___lwmod *****************
  5670 ;; Defined at:
  5671 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  5672 ;; Parameters:    Size  Location     Type
  5673 ;;  divisor         2    3[BANK0 ] unsigned int 
  5674 ;;  dividend        2    5[BANK0 ] unsigned int 
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;  counter         1    8[BANK0 ] unsigned char 
  5677 ;; Return value:  Size  Location     Type
  5678 ;;                  2    3[BANK0 ] unsigned int 
  5679 ;; Registers used:
  5680 ;;		wreg, status,2, status,0
  5681 ;; Tracked objects:
  5682 ;;		On entry : 0/0
  5683 ;;		On exit  : 0/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5686 ;;      Params:         0       4       0       0       0
  5687 ;;      Locals:         0       1       0       0       0
  5688 ;;      Temps:          0       1       0       0       0
  5689 ;;      Totals:         0       6       0       0       0
  5690 ;;Total ram usage:        6 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; Hardware stack levels required when called:    1
  5693 ;; This function calls:
  5694 ;;		Nothing
  5695 ;; This function is called by:
  5696 ;;		_sprintf
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           
  5701                           ;psect for function ___lwmod
  5702  08BE                     ___lwmod:	
  5703                           
  5704                           ;incstack = 0
  5705                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5706  08BE  1283               	bcf	3,5	;RP0=0, select bank0
  5707  08BF  1303               	bcf	3,6	;RP1=0, select bank0
  5708  08C0  084A               	movf	___lwmod@divisor,w
  5709  08C1  044B               	iorwf	___lwmod@divisor+1,w
  5710  08C2  1903               	btfsc	3,2
  5711  08C3  28ED               	goto	l2452
  5712  08C4  01CF               	clrf	___lwmod@counter
  5713  08C5  0ACF               	incf	___lwmod@counter,f
  5714  08C6                     l2442:	
  5715  08C6  1BCB               	btfsc	___lwmod@divisor+1,7
  5716  08C7  28D4               	goto	l2444
  5717  08C8  3001               	movlw	1
  5718  08C9                     u2045:	
  5719  08C9  1003               	clrc
  5720  08CA  0DCA               	rlf	___lwmod@divisor,f
  5721  08CB  0DCB               	rlf	___lwmod@divisor+1,f
  5722  08CC  3EFF               	addlw	-1
  5723  08CD  1D03               	skipz
  5724  08CE  28C9               	goto	u2045
  5725  08CF  3001               	movlw	1
  5726  08D0  00CE               	movwf	??___lwmod
  5727  08D1  084E               	movf	??___lwmod,w
  5728  08D2  07CF               	addwf	___lwmod@counter,f
  5729  08D3  28C6               	goto	l2442
  5730  08D4                     l2444:	
  5731  08D4  084B               	movf	___lwmod@divisor+1,w
  5732  08D5  024D               	subwf	___lwmod@dividend+1,w
  5733  08D6  1D03               	skipz
  5734  08D7  28DA               	goto	u2065
  5735  08D8  084A               	movf	___lwmod@divisor,w
  5736  08D9  024C               	subwf	___lwmod@dividend,w
  5737  08DA                     u2065:	
  5738  08DA  1C03               	skipc
  5739  08DB  28E2               	goto	l2448
  5740  08DC  084A               	movf	___lwmod@divisor,w
  5741  08DD  02CC               	subwf	___lwmod@dividend,f
  5742  08DE  084B               	movf	___lwmod@divisor+1,w
  5743  08DF  1C03               	skipc
  5744  08E0  03CD               	decf	___lwmod@dividend+1,f
  5745  08E1  02CD               	subwf	___lwmod@dividend+1,f
  5746  08E2                     l2448:	
  5747  08E2  3001               	movlw	1
  5748  08E3                     u2075:	
  5749  08E3  1003               	clrc
  5750  08E4  0CCB               	rrf	___lwmod@divisor+1,f
  5751  08E5  0CCA               	rrf	___lwmod@divisor,f
  5752  08E6  3EFF               	addlw	-1
  5753  08E7  1D03               	skipz
  5754  08E8  28E3               	goto	u2075
  5755  08E9  3001               	movlw	1
  5756  08EA  02CF               	subwf	___lwmod@counter,f
  5757  08EB  1D03               	btfss	3,2
  5758  08EC  28D4               	goto	l2444
  5759  08ED                     l2452:	
  5760  08ED  084D               	movf	___lwmod@dividend+1,w
  5761  08EE  00CB               	movwf	?___lwmod+1
  5762  08EF  084C               	movf	___lwmod@dividend,w
  5763  08F0  00CA               	movwf	?___lwmod
  5764  08F1  0008               	return
  5765  08F2                     __end_of___lwmod:	
  5766                           
  5767                           	psect	text17
  5768  099D                     __ptext17:	
  5769 ;; *************** function ___lwdiv *****************
  5770 ;; Defined at:
  5771 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  5772 ;; Parameters:    Size  Location     Type
  5773 ;;  divisor         2    3[COMMON] unsigned int 
  5774 ;;  dividend        2    5[COMMON] unsigned int 
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;  quotient        2    1[BANK0 ] unsigned int 
  5777 ;;  counter         1    0[BANK0 ] unsigned char 
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  2    3[COMMON] unsigned int 
  5780 ;; Registers used:
  5781 ;;		wreg, status,2, status,0
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5787 ;;      Params:         4       0       0       0       0
  5788 ;;      Locals:         0       3       0       0       0
  5789 ;;      Temps:          1       0       0       0       0
  5790 ;;      Totals:         5       3       0       0       0
  5791 ;;Total ram usage:        8 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:    1
  5794 ;; This function calls:
  5795 ;;		Nothing
  5796 ;; This function is called by:
  5797 ;;		_sprintf
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           
  5802                           ;psect for function ___lwdiv
  5803  099D                     ___lwdiv:	
  5804                           
  5805                           ;incstack = 0
  5806                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5807  099D  1283               	bcf	3,5	;RP0=0, select bank0
  5808  099E  1303               	bcf	3,6	;RP1=0, select bank0
  5809  099F  01C8               	clrf	___lwdiv@quotient
  5810  09A0  01C9               	clrf	___lwdiv@quotient+1
  5811  09A1  0873               	movf	___lwdiv@divisor,w
  5812  09A2  0474               	iorwf	___lwdiv@divisor+1,w
  5813  09A3  1903               	btfsc	3,2
  5814  09A4  29D6               	goto	l3588
  5815  09A5  01C7               	clrf	___lwdiv@counter
  5816  09A6  0AC7               	incf	___lwdiv@counter,f
  5817  09A7                     l3576:	
  5818  09A7  1BF4               	btfsc	___lwdiv@divisor+1,7
  5819  09A8  29B5               	goto	l3578
  5820  09A9  3001               	movlw	1
  5821  09AA                     u3635:	
  5822  09AA  1003               	clrc
  5823  09AB  0DF3               	rlf	___lwdiv@divisor,f
  5824  09AC  0DF4               	rlf	___lwdiv@divisor+1,f
  5825  09AD  3EFF               	addlw	-1
  5826  09AE  1D03               	skipz
  5827  09AF  29AA               	goto	u3635
  5828  09B0  3001               	movlw	1
  5829  09B1  00F7               	movwf	??___lwdiv
  5830  09B2  0877               	movf	??___lwdiv,w
  5831  09B3  07C7               	addwf	___lwdiv@counter,f
  5832  09B4  29A7               	goto	l3576
  5833  09B5                     l3578:	
  5834  09B5  3001               	movlw	1
  5835  09B6                     u3655:	
  5836  09B6  1003               	clrc
  5837  09B7  0DC8               	rlf	___lwdiv@quotient,f
  5838  09B8  0DC9               	rlf	___lwdiv@quotient+1,f
  5839  09B9  3EFF               	addlw	-1
  5840  09BA  1D03               	skipz
  5841  09BB  29B6               	goto	u3655
  5842  09BC  0874               	movf	___lwdiv@divisor+1,w
  5843  09BD  0276               	subwf	___lwdiv@dividend+1,w
  5844  09BE  1D03               	skipz
  5845  09BF  29C2               	goto	u3665
  5846  09C0  0873               	movf	___lwdiv@divisor,w
  5847  09C1  0275               	subwf	___lwdiv@dividend,w
  5848  09C2                     u3665:	
  5849  09C2  1C03               	skipc
  5850  09C3  29CB               	goto	l3584
  5851  09C4  0873               	movf	___lwdiv@divisor,w
  5852  09C5  02F5               	subwf	___lwdiv@dividend,f
  5853  09C6  0874               	movf	___lwdiv@divisor+1,w
  5854  09C7  1C03               	skipc
  5855  09C8  03F6               	decf	___lwdiv@dividend+1,f
  5856  09C9  02F6               	subwf	___lwdiv@dividend+1,f
  5857  09CA  1448               	bsf	___lwdiv@quotient,0
  5858  09CB                     l3584:	
  5859  09CB  3001               	movlw	1
  5860  09CC                     u3675:	
  5861  09CC  1003               	clrc
  5862  09CD  0CF4               	rrf	___lwdiv@divisor+1,f
  5863  09CE  0CF3               	rrf	___lwdiv@divisor,f
  5864  09CF  3EFF               	addlw	-1
  5865  09D0  1D03               	skipz
  5866  09D1  29CC               	goto	u3675
  5867  09D2  3001               	movlw	1
  5868  09D3  02C7               	subwf	___lwdiv@counter,f
  5869  09D4  1D03               	btfss	3,2
  5870  09D5  29B5               	goto	l3578
  5871  09D6                     l3588:	
  5872  09D6  0849               	movf	___lwdiv@quotient+1,w
  5873  09D7  00F4               	movwf	?___lwdiv+1
  5874  09D8  0848               	movf	___lwdiv@quotient,w
  5875  09D9  00F3               	movwf	?___lwdiv
  5876  09DA  0008               	return
  5877  09DB                     __end_of___lwdiv:	
  5878                           
  5879                           	psect	text18
  5880  082B                     __ptext18:	
  5881 ;; *************** function ___bmul *****************
  5882 ;; Defined at:
  5883 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  5884 ;; Parameters:    Size  Location     Type
  5885 ;;  multiplier      1    wreg     unsigned char 
  5886 ;;  multiplicand    1    3[COMMON] unsigned char 
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;  multiplier      1    6[COMMON] unsigned char 
  5889 ;;  product         1    5[COMMON] unsigned char 
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  1    wreg      unsigned char 
  5892 ;; Registers used:
  5893 ;;		wreg, status,2, status,0
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5899 ;;      Params:         1       0       0       0       0
  5900 ;;      Locals:         2       0       0       0       0
  5901 ;;      Temps:          1       0       0       0       0
  5902 ;;      Totals:         4       0       0       0       0
  5903 ;;Total ram usage:        4 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    1
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		_main
  5910 ;;		_get_temp
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           
  5915                           ;psect for function ___bmul
  5916  082B                     ___bmul:	
  5917                           
  5918                           ;incstack = 0
  5919                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5920                           ;___bmul@multiplier stored from wreg
  5921  082B  00F6               	movwf	___bmul@multiplier
  5922  082C  01F5               	clrf	___bmul@product
  5923  082D                     l2658:	
  5924  082D  1C76               	btfss	___bmul@multiplier,0
  5925  082E  2833               	goto	l2662
  5926  082F  0873               	movf	___bmul@multiplicand,w
  5927  0830  00F4               	movwf	??___bmul
  5928  0831  0874               	movf	??___bmul,w
  5929  0832  07F5               	addwf	___bmul@product,f
  5930  0833                     l2662:	
  5931  0833  1003               	clrc
  5932  0834  0DF3               	rlf	___bmul@multiplicand,f
  5933  0835  1003               	clrc
  5934  0836  0CF6               	rrf	___bmul@multiplier,f
  5935  0837  0876               	movf	___bmul@multiplier,w
  5936  0838  1D03               	btfss	3,2
  5937  0839  282D               	goto	l2658
  5938  083A  0875               	movf	___bmul@product,w
  5939  083B  0008               	return
  5940  083C                     __end_of___bmul:	
  5941                           
  5942                           	psect	text19
  5943  17BA                     __ptext19:	
  5944 ;; *************** function _get_hall *****************
  5945 ;; Defined at:
  5946 ;;		line 567 in file "mainMaster.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;		None
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;  key             1    2[BANK0 ] unsigned char 
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  1    wreg      unsigned char 
  5953 ;; Registers used:
  5954 ;;		wreg, status,2, status,0, pclath, cstack
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5960 ;;      Params:         0       0       0       0       0
  5961 ;;      Locals:         0       1       0       0       0
  5962 ;;      Temps:          1       0       0       0       0
  5963 ;;      Totals:         1       1       0       0       0
  5964 ;;Total ram usage:        2 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    3
  5967 ;; This function calls:
  5968 ;;		_I2C_Master_Read
  5969 ;;		_I2C_Master_Start
  5970 ;;		_I2C_Master_Stop
  5971 ;;		_I2C_Master_Write
  5972 ;; This function is called by:
  5973 ;;		_main
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           
  5978                           ;psect for function _get_hall
  5979  17BA                     _get_hall:	
  5980                           
  5981                           ;mainMaster.c: 569:     char key;;mainMaster.c: 571:     I2C_Master_Start();
  5982                           
  5983                           ;incstack = 0
  5984                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  5985  17BA  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  5986                           
  5987                           ;mainMaster.c: 572:     I2C_Master_Write(0x11);
  5988  17BF  3011               	movlw	17
  5989  17C0  00F3               	movwf	I2C_Master_Write@d
  5990  17C1  3000               	movlw	0
  5991  17C2  00F4               	movwf	I2C_Master_Write@d+1
  5992  17C3  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  5993                           
  5994                           ;mainMaster.c: 573:     key = I2C_Master_Read(0);
  5995  17C8  3000               	movlw	0
  5996  17C9  00F3               	movwf	I2C_Master_Read@a
  5997  17CA  00F4               	movwf	I2C_Master_Read@a+1
  5998  17CB  120A  158A  2060  160A  118A  	fcall	_I2C_Master_Read
  5999  17D0  0873               	movf	?_I2C_Master_Read,w
  6000  17D1  00F7               	movwf	??_get_hall
  6001  17D2  0877               	movf	??_get_hall,w
  6002  17D3  1283               	bcf	3,5	;RP0=0, select bank0
  6003  17D4  1303               	bcf	3,6	;RP1=0, select bank0
  6004  17D5  00C9               	movwf	get_hall@key
  6005                           
  6006                           ;mainMaster.c: 574:     I2C_Master_Stop();
  6007  17D6  160A  118A  2699   	fcall	_I2C_Master_Stop
  6008                           
  6009                           ;mainMaster.c: 576:     return (key);
  6010  17D9  1283               	bcf	3,5	;RP0=0, select bank0
  6011  17DA  1303               	bcf	3,6	;RP1=0, select bank0
  6012  17DB  0849               	movf	get_hall@key,w
  6013  17DC  0008               	return
  6014  17DD                     __end_of_get_hall:	
  6015                           
  6016                           	psect	text20
  6017  0963                     __ptext20:	
  6018 ;; *************** function _get_day *****************
  6019 ;; Defined at:
  6020 ;;		line 525 in file "mainMaster.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;		None
  6023 ;; Auto vars:     Size  Location     Type
  6024 ;;  d               1    2[BANK0 ] unsigned char 
  6025 ;; Return value:  Size  Location     Type
  6026 ;;                  1    wreg      unsigned char 
  6027 ;; Registers used:
  6028 ;;		wreg, status,2, status,0, pclath, cstack
  6029 ;; Tracked objects:
  6030 ;;		On entry : 0/0
  6031 ;;		On exit  : 0/0
  6032 ;;		Unchanged: 0/0
  6033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6034 ;;      Params:         0       0       0       0       0
  6035 ;;      Locals:         0       1       0       0       0
  6036 ;;      Temps:          1       0       0       0       0
  6037 ;;      Totals:         1       1       0       0       0
  6038 ;;Total ram usage:        2 bytes
  6039 ;; Hardware stack levels used:    1
  6040 ;; Hardware stack levels required when called:    3
  6041 ;; This function calls:
  6042 ;;		_I2C_Master_Read
  6043 ;;		_I2C_Master_RepeatedStart
  6044 ;;		_I2C_Master_Start
  6045 ;;		_I2C_Master_Stop
  6046 ;;		_I2C_Master_Write
  6047 ;; This function is called by:
  6048 ;;		_main
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           
  6053                           ;psect for function _get_day
  6054  0963                     _get_day:	
  6055                           
  6056                           ;mainMaster.c: 527:     char d;;mainMaster.c: 529:     I2C_Master_Start();
  6057                           
  6058                           ;incstack = 0
  6059                           ; Regs used in _get_day: [wreg+status,2+status,0+pclath+cstack]
  6060  0963  160A  118A  2692  120A  158A  	fcall	_I2C_Master_Start
  6061                           
  6062                           ;mainMaster.c: 530:     I2C_Master_Write(0xD0);
  6063  0968  30D0               	movlw	208
  6064  0969  00F3               	movwf	I2C_Master_Write@d
  6065  096A  3000               	movlw	0
  6066  096B  00F4               	movwf	I2C_Master_Write@d+1
  6067  096C  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  6068                           
  6069                           ;mainMaster.c: 531:     I2C_Master_Write(0x03);
  6070  0971  3003               	movlw	3
  6071  0972  00F3               	movwf	I2C_Master_Write@d
  6072  0973  3000               	movlw	0
  6073  0974  00F4               	movwf	I2C_Master_Write@d+1
  6074  0975  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  6075                           
  6076                           ;mainMaster.c: 532:     I2C_Master_RepeatedStart();
  6077  097A  160A  118A  26A0  120A  158A  	fcall	_I2C_Master_RepeatedStart
  6078                           
  6079                           ;mainMaster.c: 533:     I2C_Master_Write(0xD1);
  6080  097F  30D1               	movlw	209
  6081  0980  00F3               	movwf	I2C_Master_Write@d
  6082  0981  3000               	movlw	0
  6083  0982  00F4               	movwf	I2C_Master_Write@d+1
  6084  0983  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  6085                           
  6086                           ;mainMaster.c: 534:     d = I2C_Master_Read(0);
  6087  0988  3000               	movlw	0
  6088  0989  00F3               	movwf	I2C_Master_Read@a
  6089  098A  00F4               	movwf	I2C_Master_Read@a+1
  6090  098B  120A  158A  2060  120A  158A  	fcall	_I2C_Master_Read
  6091  0990  0873               	movf	?_I2C_Master_Read,w
  6092  0991  00F7               	movwf	??_get_day
  6093  0992  0877               	movf	??_get_day,w
  6094  0993  1283               	bcf	3,5	;RP0=0, select bank0
  6095  0994  1303               	bcf	3,6	;RP1=0, select bank0
  6096  0995  00C9               	movwf	get_day@d
  6097                           
  6098                           ;mainMaster.c: 535:     I2C_Master_Stop();
  6099  0996  160A  118A  2699   	fcall	_I2C_Master_Stop
  6100                           
  6101                           ;mainMaster.c: 537:     return d;
  6102  0999  1283               	bcf	3,5	;RP0=0, select bank0
  6103  099A  1303               	bcf	3,6	;RP1=0, select bank0
  6104  099B  0849               	movf	get_day@d,w
  6105  099C  0008               	return
  6106  099D                     __end_of_get_day:	
  6107                           
  6108                           	psect	text21
  6109  16A0                     __ptext21:	
  6110 ;; *************** function _I2C_Master_RepeatedStart *****************
  6111 ;; Defined at:
  6112 ;;		line 47 in file "./I2C.h"
  6113 ;; Parameters:    Size  Location     Type
  6114 ;;		None
  6115 ;; Auto vars:     Size  Location     Type
  6116 ;;		None
  6117 ;; Return value:  Size  Location     Type
  6118 ;;                  1    wreg      void 
  6119 ;; Registers used:
  6120 ;;		wreg, status,2, status,0, pclath, cstack
  6121 ;; Tracked objects:
  6122 ;;		On entry : 0/0
  6123 ;;		On exit  : 0/0
  6124 ;;		Unchanged: 0/0
  6125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6126 ;;      Params:         0       0       0       0       0
  6127 ;;      Locals:         0       0       0       0       0
  6128 ;;      Temps:          0       0       0       0       0
  6129 ;;      Totals:         0       0       0       0       0
  6130 ;;Total ram usage:        0 bytes
  6131 ;; Hardware stack levels used:    1
  6132 ;; Hardware stack levels required when called:    2
  6133 ;; This function calls:
  6134 ;;		_I2C_Master_Wait
  6135 ;; This function is called by:
  6136 ;;		_get_time
  6137 ;;		_get_day
  6138 ;;		_get_temp
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           
  6143                           ;psect for function _I2C_Master_RepeatedStart
  6144  16A0                     _I2C_Master_RepeatedStart:	
  6145                           
  6146                           ;./I2C.h: 49:     I2C_Master_Wait();
  6147                           
  6148                           ;incstack = 0
  6149                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  6150  16A0  160A  118A  26B7   	fcall	_I2C_Master_Wait
  6151                           
  6152                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  6153  16A3  1683               	bsf	3,5	;RP0=1, select bank1
  6154  16A4  1303               	bcf	3,6	;RP1=0, select bank1
  6155  16A5  1491               	bsf	17,1	;volatile
  6156  16A6  0008               	return
  6157  16A7                     __end_of_I2C_Master_RepeatedStart:	
  6158                           
  6159                           	psect	text22
  6160  1797                     __ptext22:	
  6161 ;; *************** function _get_PIR *****************
  6162 ;; Defined at:
  6163 ;;		line 591 in file "mainMaster.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;		None
  6166 ;; Auto vars:     Size  Location     Type
  6167 ;;  PIR             1    2[BANK0 ] unsigned char 
  6168 ;; Return value:  Size  Location     Type
  6169 ;;                  1    wreg      unsigned char 
  6170 ;; Registers used:
  6171 ;;		wreg, status,2, status,0, pclath, cstack
  6172 ;; Tracked objects:
  6173 ;;		On entry : 0/0
  6174 ;;		On exit  : 0/0
  6175 ;;		Unchanged: 0/0
  6176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6177 ;;      Params:         0       0       0       0       0
  6178 ;;      Locals:         0       1       0       0       0
  6179 ;;      Temps:          1       0       0       0       0
  6180 ;;      Totals:         1       1       0       0       0
  6181 ;;Total ram usage:        2 bytes
  6182 ;; Hardware stack levels used:    1
  6183 ;; Hardware stack levels required when called:    3
  6184 ;; This function calls:
  6185 ;;		_I2C_Master_Read
  6186 ;;		_I2C_Master_Start
  6187 ;;		_I2C_Master_Stop
  6188 ;;		_I2C_Master_Write
  6189 ;; This function is called by:
  6190 ;;		_main
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           
  6195                           ;psect for function _get_PIR
  6196  1797                     _get_PIR:	
  6197                           
  6198                           ;mainMaster.c: 593:     char PIR;;mainMaster.c: 595:     I2C_Master_Start();
  6199                           
  6200                           ;incstack = 0
  6201                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  6202  1797  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  6203                           
  6204                           ;mainMaster.c: 596:     I2C_Master_Write(0x41);
  6205  179C  3041               	movlw	65
  6206  179D  00F3               	movwf	I2C_Master_Write@d
  6207  179E  3000               	movlw	0
  6208  179F  00F4               	movwf	I2C_Master_Write@d+1
  6209  17A0  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  6210                           
  6211                           ;mainMaster.c: 597:     PIR = I2C_Master_Read(0);
  6212  17A5  3000               	movlw	0
  6213  17A6  00F3               	movwf	I2C_Master_Read@a
  6214  17A7  00F4               	movwf	I2C_Master_Read@a+1
  6215  17A8  120A  158A  2060  160A  118A  	fcall	_I2C_Master_Read
  6216  17AD  0873               	movf	?_I2C_Master_Read,w
  6217  17AE  00F7               	movwf	??_get_PIR
  6218  17AF  0877               	movf	??_get_PIR,w
  6219  17B0  1283               	bcf	3,5	;RP0=0, select bank0
  6220  17B1  1303               	bcf	3,6	;RP1=0, select bank0
  6221  17B2  00C9               	movwf	get_PIR@PIR
  6222                           
  6223                           ;mainMaster.c: 598:     I2C_Master_Stop();
  6224  17B3  160A  118A  2699   	fcall	_I2C_Master_Stop
  6225                           
  6226                           ;mainMaster.c: 600:     return (PIR);
  6227  17B6  1283               	bcf	3,5	;RP0=0, select bank0
  6228  17B7  1303               	bcf	3,6	;RP1=0, select bank0
  6229  17B8  0849               	movf	get_PIR@PIR,w
  6230  17B9  0008               	return
  6231  17BA                     __end_of_get_PIR:	
  6232                           
  6233                           	psect	text23
  6234  1774                     __ptext23:	
  6235 ;; *************** function _get_IR *****************
  6236 ;; Defined at:
  6237 ;;		line 603 in file "mainMaster.c"
  6238 ;; Parameters:    Size  Location     Type
  6239 ;;		None
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;  IR              1    2[BANK0 ] unsigned char 
  6242 ;; Return value:  Size  Location     Type
  6243 ;;                  1    wreg      unsigned char 
  6244 ;; Registers used:
  6245 ;;		wreg, status,2, status,0, pclath, cstack
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/0
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6251 ;;      Params:         0       0       0       0       0
  6252 ;;      Locals:         0       1       0       0       0
  6253 ;;      Temps:          1       0       0       0       0
  6254 ;;      Totals:         1       1       0       0       0
  6255 ;;Total ram usage:        2 bytes
  6256 ;; Hardware stack levels used:    1
  6257 ;; Hardware stack levels required when called:    3
  6258 ;; This function calls:
  6259 ;;		_I2C_Master_Read
  6260 ;;		_I2C_Master_Start
  6261 ;;		_I2C_Master_Stop
  6262 ;;		_I2C_Master_Write
  6263 ;; This function is called by:
  6264 ;;		_main
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           
  6269                           ;psect for function _get_IR
  6270  1774                     _get_IR:	
  6271                           
  6272                           ;mainMaster.c: 605:     char IR;;mainMaster.c: 607:     I2C_Master_Start();
  6273                           
  6274                           ;incstack = 0
  6275                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  6276  1774  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  6277                           
  6278                           ;mainMaster.c: 608:     I2C_Master_Write(0x31);
  6279  1779  3031               	movlw	49
  6280  177A  00F3               	movwf	I2C_Master_Write@d
  6281  177B  3000               	movlw	0
  6282  177C  00F4               	movwf	I2C_Master_Write@d+1
  6283  177D  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  6284                           
  6285                           ;mainMaster.c: 609:     IR = I2C_Master_Read(0);
  6286  1782  3000               	movlw	0
  6287  1783  00F3               	movwf	I2C_Master_Read@a
  6288  1784  00F4               	movwf	I2C_Master_Read@a+1
  6289  1785  120A  158A  2060  160A  118A  	fcall	_I2C_Master_Read
  6290  178A  0873               	movf	?_I2C_Master_Read,w
  6291  178B  00F7               	movwf	??_get_IR
  6292  178C  0877               	movf	??_get_IR,w
  6293  178D  1283               	bcf	3,5	;RP0=0, select bank0
  6294  178E  1303               	bcf	3,6	;RP1=0, select bank0
  6295  178F  00C9               	movwf	get_IR@IR
  6296                           
  6297                           ;mainMaster.c: 610:     I2C_Master_Stop();
  6298  1790  160A  118A  2699   	fcall	_I2C_Master_Stop
  6299                           
  6300                           ;mainMaster.c: 612:     return (IR);
  6301  1793  1283               	bcf	3,5	;RP0=0, select bank0
  6302  1794  1303               	bcf	3,6	;RP1=0, select bank0
  6303  1795  0849               	movf	get_IR@IR,w
  6304  1796  0008               	return
  6305  1797                     __end_of_get_IR:	
  6306                           
  6307                           	psect	text24
  6308  0860                     __ptext24:	
  6309 ;; *************** function _I2C_Master_Read *****************
  6310 ;; Defined at:
  6311 ;;		line 74 in file "./I2C.h"
  6312 ;; Parameters:    Size  Location     Type
  6313 ;;  a               2    3[COMMON] unsigned short 
  6314 ;; Auto vars:     Size  Location     Type
  6315 ;;  temp            2    0[BANK0 ] unsigned short 
  6316 ;; Return value:  Size  Location     Type
  6317 ;;                  2    3[COMMON] unsigned short 
  6318 ;; Registers used:
  6319 ;;		wreg, status,2, status,0, pclath, cstack
  6320 ;; Tracked objects:
  6321 ;;		On entry : 0/0
  6322 ;;		On exit  : 0/0
  6323 ;;		Unchanged: 0/0
  6324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6325 ;;      Params:         2       0       0       0       0
  6326 ;;      Locals:         0       2       0       0       0
  6327 ;;      Temps:          2       0       0       0       0
  6328 ;;      Totals:         4       2       0       0       0
  6329 ;;Total ram usage:        6 bytes
  6330 ;; Hardware stack levels used:    1
  6331 ;; Hardware stack levels required when called:    2
  6332 ;; This function calls:
  6333 ;;		_I2C_Master_Wait
  6334 ;; This function is called by:
  6335 ;;		_get_time
  6336 ;;		_get_day
  6337 ;;		_get_temp
  6338 ;;		_get_hall
  6339 ;;		_get_tripwire
  6340 ;;		_get_PIR
  6341 ;;		_get_IR
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           
  6346                           ;psect for function _I2C_Master_Read
  6347  0860                     _I2C_Master_Read:	
  6348                           
  6349                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  6350                           
  6351                           ;incstack = 0
  6352                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  6353  0860  160A  118A  26B7  120A  158A  	fcall	_I2C_Master_Wait
  6354                           
  6355                           ;./I2C.h: 78:     RCEN = 1;
  6356  0865  1683               	bsf	3,5	;RP0=1, select bank1
  6357  0866  1303               	bcf	3,6	;RP1=0, select bank1
  6358  0867  1591               	bsf	17,3	;volatile
  6359                           
  6360                           ;./I2C.h: 79:     I2C_Master_Wait();
  6361  0868  160A  118A  26B7  120A  158A  	fcall	_I2C_Master_Wait
  6362                           
  6363                           ;./I2C.h: 80:     temp = SSPBUF;
  6364  086D  1283               	bcf	3,5	;RP0=0, select bank0
  6365  086E  1303               	bcf	3,6	;RP1=0, select bank0
  6366  086F  0813               	movf	19,w	;volatile
  6367  0870  00F5               	movwf	??_I2C_Master_Read
  6368  0871  01F6               	clrf	??_I2C_Master_Read+1
  6369  0872  0875               	movf	??_I2C_Master_Read,w
  6370  0873  00C7               	movwf	I2C_Master_Read@temp
  6371  0874  0876               	movf	??_I2C_Master_Read+1,w
  6372  0875  00C8               	movwf	I2C_Master_Read@temp+1
  6373                           
  6374                           ;./I2C.h: 81:     I2C_Master_Wait();
  6375  0876  160A  118A  26B7  120A  158A  	fcall	_I2C_Master_Wait
  6376                           
  6377                           ;./I2C.h: 83:     if(a == 1){
  6378  087B  0373               	decf	I2C_Master_Read@a,w
  6379  087C  0474               	iorwf	I2C_Master_Read@a+1,w
  6380  087D  1D03               	btfss	3,2
  6381  087E  2883               	goto	l152
  6382                           
  6383                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  6384  087F  1683               	bsf	3,5	;RP0=1, select bank1
  6385  0880  1303               	bcf	3,6	;RP1=0, select bank1
  6386  0881  1291               	bcf	17,5	;volatile
  6387                           
  6388                           ;./I2C.h: 85:     }else{
  6389  0882  2886               	goto	l153
  6390  0883                     l152:	
  6391                           
  6392                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  6393  0883  1683               	bsf	3,5	;RP0=1, select bank1
  6394  0884  1303               	bcf	3,6	;RP1=0, select bank1
  6395  0885  1691               	bsf	17,5	;volatile
  6396  0886                     l153:	
  6397                           ;./I2C.h: 87:     }
  6398                           
  6399                           
  6400                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  6401  0886  1611               	bsf	17,4	;volatile
  6402                           
  6403                           ;./I2C.h: 89:     return temp;
  6404  0887  1283               	bcf	3,5	;RP0=0, select bank0
  6405  0888  1303               	bcf	3,6	;RP1=0, select bank0
  6406  0889  0848               	movf	I2C_Master_Read@temp+1,w
  6407  088A  00F4               	movwf	?_I2C_Master_Read+1
  6408  088B  0847               	movf	I2C_Master_Read@temp,w
  6409  088C  00F3               	movwf	?_I2C_Master_Read
  6410  088D  0008               	return
  6411  088E                     __end_of_I2C_Master_Read:	
  6412                           
  6413                           	psect	text25
  6414  171F                     __ptext25:	
  6415 ;; *************** function _close_door *****************
  6416 ;; Defined at:
  6417 ;;		line 624 in file "mainMaster.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;		None
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;		None
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      void 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0, pclath, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6431 ;;      Params:         0       0       0       0       0
  6432 ;;      Locals:         0       0       0       0       0
  6433 ;;      Temps:          0       0       0       0       0
  6434 ;;      Totals:         0       0       0       0       0
  6435 ;;Total ram usage:        0 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    3
  6438 ;; This function calls:
  6439 ;;		_I2C_Master_Start
  6440 ;;		_I2C_Master_Stop
  6441 ;;		_I2C_Master_Write
  6442 ;; This function is called by:
  6443 ;;		_main
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           
  6448                           ;psect for function _close_door
  6449  171F                     _close_door:	
  6450                           
  6451                           ;mainMaster.c: 626:     I2C_Master_Start();
  6452                           
  6453                           ;incstack = 0
  6454                           ; Regs used in _close_door: [wreg+status,2+status,0+pclath+cstack]
  6455  171F  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  6456                           
  6457                           ;mainMaster.c: 627:     I2C_Master_Write(0x20);
  6458  1724  3020               	movlw	32
  6459  1725  00F3               	movwf	I2C_Master_Write@d
  6460  1726  3000               	movlw	0
  6461  1727  00F4               	movwf	I2C_Master_Write@d+1
  6462  1728  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  6463                           
  6464                           ;mainMaster.c: 628:     I2C_Master_Write(0xF0);
  6465  172D  30F0               	movlw	240
  6466  172E  00F3               	movwf	I2C_Master_Write@d
  6467  172F  3000               	movlw	0
  6468  1730  00F4               	movwf	I2C_Master_Write@d+1
  6469  1731  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  6470                           
  6471                           ;mainMaster.c: 629:     I2C_Master_Stop();
  6472  1736  160A  118A  2699   	fcall	_I2C_Master_Stop
  6473  1739  0008               	return
  6474  173A                     __end_of_close_door:	
  6475                           
  6476                           	psect	text26
  6477  16A7                     __ptext26:	
  6478 ;; *************** function _I2C_Master_Write *****************
  6479 ;; Defined at:
  6480 ;;		line 65 in file "./I2C.h"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;  d               2    3[COMMON] unsigned int 
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;		None
  6485 ;; Return value:  Size  Location     Type
  6486 ;;                  1    wreg      void 
  6487 ;; Registers used:
  6488 ;;		wreg, status,2, status,0, pclath, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6494 ;;      Params:         2       0       0       0       0
  6495 ;;      Locals:         0       0       0       0       0
  6496 ;;      Temps:          0       0       0       0       0
  6497 ;;      Totals:         2       0       0       0       0
  6498 ;;Total ram usage:        2 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:    2
  6501 ;; This function calls:
  6502 ;;		_I2C_Master_Wait
  6503 ;; This function is called by:
  6504 ;;		_write_RTC
  6505 ;;		_get_time
  6506 ;;		_get_day
  6507 ;;		_get_temp
  6508 ;;		_get_hall
  6509 ;;		_get_tripwire
  6510 ;;		_get_PIR
  6511 ;;		_get_IR
  6512 ;;		_open_door
  6513 ;;		_close_door
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           
  6518                           ;psect for function _I2C_Master_Write
  6519  16A7                     _I2C_Master_Write:	
  6520                           
  6521                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  6522                           
  6523                           ;incstack = 0
  6524                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  6525  16A7  160A  118A  26B7   	fcall	_I2C_Master_Wait
  6526                           
  6527                           ;./I2C.h: 68:     SSPBUF = d;
  6528  16AA  0873               	movf	I2C_Master_Write@d,w
  6529  16AB  1283               	bcf	3,5	;RP0=0, select bank0
  6530  16AC  1303               	bcf	3,6	;RP1=0, select bank0
  6531  16AD  0093               	movwf	19	;volatile
  6532  16AE  0008               	return
  6533  16AF                     __end_of_I2C_Master_Write:	
  6534                           
  6535                           	psect	text27
  6536  1699                     __ptext27:	
  6537 ;; *************** function _I2C_Master_Stop *****************
  6538 ;; Defined at:
  6539 ;;		line 55 in file "./I2C.h"
  6540 ;; Parameters:    Size  Location     Type
  6541 ;;		None
  6542 ;; Auto vars:     Size  Location     Type
  6543 ;;		None
  6544 ;; Return value:  Size  Location     Type
  6545 ;;                  1    wreg      void 
  6546 ;; Registers used:
  6547 ;;		wreg, status,2, status,0, pclath, cstack
  6548 ;; Tracked objects:
  6549 ;;		On entry : 0/0
  6550 ;;		On exit  : 0/0
  6551 ;;		Unchanged: 0/0
  6552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6553 ;;      Params:         0       0       0       0       0
  6554 ;;      Locals:         0       0       0       0       0
  6555 ;;      Temps:          0       0       0       0       0
  6556 ;;      Totals:         0       0       0       0       0
  6557 ;;Total ram usage:        0 bytes
  6558 ;; Hardware stack levels used:    1
  6559 ;; Hardware stack levels required when called:    2
  6560 ;; This function calls:
  6561 ;;		_I2C_Master_Wait
  6562 ;; This function is called by:
  6563 ;;		_write_RTC
  6564 ;;		_get_time
  6565 ;;		_get_day
  6566 ;;		_get_temp
  6567 ;;		_get_hall
  6568 ;;		_get_tripwire
  6569 ;;		_get_PIR
  6570 ;;		_get_IR
  6571 ;;		_open_door
  6572 ;;		_close_door
  6573 ;; This function uses a non-reentrant model
  6574 ;;
  6575                           
  6576                           
  6577                           ;psect for function _I2C_Master_Stop
  6578  1699                     _I2C_Master_Stop:	
  6579                           
  6580                           ;./I2C.h: 57:     I2C_Master_Wait();
  6581                           
  6582                           ;incstack = 0
  6583                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  6584  1699  160A  118A  26B7   	fcall	_I2C_Master_Wait
  6585                           
  6586                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  6587  169C  1683               	bsf	3,5	;RP0=1, select bank1
  6588  169D  1303               	bcf	3,6	;RP1=0, select bank1
  6589  169E  1511               	bsf	17,2	;volatile
  6590  169F  0008               	return
  6591  16A0                     __end_of_I2C_Master_Stop:	
  6592                           
  6593                           	psect	text28
  6594  1692                     __ptext28:	
  6595 ;; *************** function _I2C_Master_Start *****************
  6596 ;; Defined at:
  6597 ;;		line 39 in file "./I2C.h"
  6598 ;; Parameters:    Size  Location     Type
  6599 ;;		None
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;		None
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  1    wreg      void 
  6604 ;; Registers used:
  6605 ;;		wreg, status,2, status,0, pclath, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6611 ;;      Params:         0       0       0       0       0
  6612 ;;      Locals:         0       0       0       0       0
  6613 ;;      Temps:          0       0       0       0       0
  6614 ;;      Totals:         0       0       0       0       0
  6615 ;;Total ram usage:        0 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    2
  6618 ;; This function calls:
  6619 ;;		_I2C_Master_Wait
  6620 ;; This function is called by:
  6621 ;;		_write_RTC
  6622 ;;		_get_time
  6623 ;;		_get_day
  6624 ;;		_get_temp
  6625 ;;		_get_hall
  6626 ;;		_get_tripwire
  6627 ;;		_get_PIR
  6628 ;;		_get_IR
  6629 ;;		_open_door
  6630 ;;		_close_door
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           
  6635                           ;psect for function _I2C_Master_Start
  6636  1692                     _I2C_Master_Start:	
  6637                           
  6638                           ;./I2C.h: 41:     I2C_Master_Wait();
  6639                           
  6640                           ;incstack = 0
  6641                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  6642  1692  160A  118A  26B7   	fcall	_I2C_Master_Wait
  6643                           
  6644                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  6645  1695  1683               	bsf	3,5	;RP0=1, select bank1
  6646  1696  1303               	bcf	3,6	;RP1=0, select bank1
  6647  1697  1411               	bsf	17,0	;volatile
  6648  1698  0008               	return
  6649  1699                     __end_of_I2C_Master_Start:	
  6650                           
  6651                           	psect	text29
  6652  16B7                     __ptext29:	
  6653 ;; *************** function _I2C_Master_Wait *****************
  6654 ;; Defined at:
  6655 ;;		line 32 in file "./I2C.h"
  6656 ;; Parameters:    Size  Location     Type
  6657 ;;		None
  6658 ;; Auto vars:     Size  Location     Type
  6659 ;;		None
  6660 ;; Return value:  Size  Location     Type
  6661 ;;                  1    wreg      void 
  6662 ;; Registers used:
  6663 ;;		wreg, status,2
  6664 ;; Tracked objects:
  6665 ;;		On entry : 0/0
  6666 ;;		On exit  : 0/0
  6667 ;;		Unchanged: 0/0
  6668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6669 ;;      Params:         0       0       0       0       0
  6670 ;;      Locals:         0       0       0       0       0
  6671 ;;      Temps:          0       0       0       0       0
  6672 ;;      Totals:         0       0       0       0       0
  6673 ;;Total ram usage:        0 bytes
  6674 ;; Hardware stack levels used:    1
  6675 ;; Hardware stack levels required when called:    1
  6676 ;; This function calls:
  6677 ;;		Nothing
  6678 ;; This function is called by:
  6679 ;;		_I2C_Master_Start
  6680 ;;		_I2C_Master_RepeatedStart
  6681 ;;		_I2C_Master_Stop
  6682 ;;		_I2C_Master_Write
  6683 ;;		_I2C_Master_Read
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           
  6688                           ;psect for function _I2C_Master_Wait
  6689  16B7                     _I2C_Master_Wait:	
  6690  16B7                     l134:	
  6691                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  6692                           
  6693                           ;incstack = 0
  6694                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  6695                           
  6696  16B7  1683               	bsf	3,5	;RP0=1, select bank1
  6697  16B8  1303               	bcf	3,6	;RP1=0, select bank1
  6698  16B9  1914               	btfsc	20,2	;volatile
  6699  16BA  2EB7               	goto	l134
  6700  16BB  0811               	movf	17,w	;volatile
  6701  16BC  391F               	andlw	31
  6702  16BD  1903               	btfsc	3,2
  6703  16BE  0008               	return
  6704  16BF  2EB7               	goto	l134
  6705  16C0                     __end_of_I2C_Master_Wait:	
  6706                           
  6707                           	psect	text30
  6708  06B1                     __ptext30:	
  6709 ;; *************** function ___awmod *****************
  6710 ;; Defined at:
  6711 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;  divisor         2    3[COMMON] int 
  6714 ;;  dividend        2    5[COMMON] int 
  6715 ;; Auto vars:     Size  Location     Type
  6716 ;;  sign            1    1[BANK0 ] unsigned char 
  6717 ;;  counter         1    0[BANK0 ] unsigned char 
  6718 ;; Return value:  Size  Location     Type
  6719 ;;                  2    3[COMMON] int 
  6720 ;; Registers used:
  6721 ;;		wreg, status,2, status,0
  6722 ;; Tracked objects:
  6723 ;;		On entry : 0/0
  6724 ;;		On exit  : 0/0
  6725 ;;		Unchanged: 0/0
  6726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6727 ;;      Params:         4       0       0       0       0
  6728 ;;      Locals:         0       2       0       0       0
  6729 ;;      Temps:          1       0       0       0       0
  6730 ;;      Totals:         5       2       0       0       0
  6731 ;;Total ram usage:        7 bytes
  6732 ;; Hardware stack levels used:    1
  6733 ;; Hardware stack levels required when called:    1
  6734 ;; This function calls:
  6735 ;;		Nothing
  6736 ;; This function is called by:
  6737 ;;		_main
  6738 ;; This function uses a non-reentrant model
  6739 ;;
  6740                           
  6741                           
  6742                           ;psect for function ___awmod
  6743  06B1                     ___awmod:	
  6744                           
  6745                           ;incstack = 0
  6746                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6747  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  6748  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  6749  06B3  01C8               	clrf	___awmod@sign
  6750  06B4  1FF6               	btfss	___awmod@dividend+1,7
  6751  06B5  2EBD               	goto	l3916
  6752  06B6  09F5               	comf	___awmod@dividend,f
  6753  06B7  09F6               	comf	___awmod@dividend+1,f
  6754  06B8  0AF5               	incf	___awmod@dividend,f
  6755  06B9  1903               	skipnz
  6756  06BA  0AF6               	incf	___awmod@dividend+1,f
  6757  06BB  01C8               	clrf	___awmod@sign
  6758  06BC  0AC8               	incf	___awmod@sign,f
  6759  06BD                     l3916:	
  6760  06BD  1FF4               	btfss	___awmod@divisor+1,7
  6761  06BE  2EC4               	goto	l3920
  6762  06BF  09F3               	comf	___awmod@divisor,f
  6763  06C0  09F4               	comf	___awmod@divisor+1,f
  6764  06C1  0AF3               	incf	___awmod@divisor,f
  6765  06C2  1903               	skipnz
  6766  06C3  0AF4               	incf	___awmod@divisor+1,f
  6767  06C4                     l3920:	
  6768  06C4  0873               	movf	___awmod@divisor,w
  6769  06C5  0474               	iorwf	___awmod@divisor+1,w
  6770  06C6  1903               	btfsc	3,2
  6771  06C7  2EF1               	goto	l3938
  6772  06C8  01C7               	clrf	___awmod@counter
  6773  06C9  0AC7               	incf	___awmod@counter,f
  6774  06CA                     l3928:	
  6775  06CA  1BF4               	btfsc	___awmod@divisor+1,7
  6776  06CB  2ED8               	goto	l3930
  6777  06CC  3001               	movlw	1
  6778  06CD                     u4025:	
  6779  06CD  1003               	clrc
  6780  06CE  0DF3               	rlf	___awmod@divisor,f
  6781  06CF  0DF4               	rlf	___awmod@divisor+1,f
  6782  06D0  3EFF               	addlw	-1
  6783  06D1  1D03               	skipz
  6784  06D2  2ECD               	goto	u4025
  6785  06D3  3001               	movlw	1
  6786  06D4  00F7               	movwf	??___awmod
  6787  06D5  0877               	movf	??___awmod,w
  6788  06D6  07C7               	addwf	___awmod@counter,f
  6789  06D7  2ECA               	goto	l3928
  6790  06D8                     l3930:	
  6791  06D8  0874               	movf	___awmod@divisor+1,w
  6792  06D9  0276               	subwf	___awmod@dividend+1,w
  6793  06DA  1D03               	skipz
  6794  06DB  2EDE               	goto	u4045
  6795  06DC  0873               	movf	___awmod@divisor,w
  6796  06DD  0275               	subwf	___awmod@dividend,w
  6797  06DE                     u4045:	
  6798  06DE  1C03               	skipc
  6799  06DF  2EE6               	goto	l3934
  6800  06E0  0873               	movf	___awmod@divisor,w
  6801  06E1  02F5               	subwf	___awmod@dividend,f
  6802  06E2  0874               	movf	___awmod@divisor+1,w
  6803  06E3  1C03               	skipc
  6804  06E4  03F6               	decf	___awmod@dividend+1,f
  6805  06E5  02F6               	subwf	___awmod@dividend+1,f
  6806  06E6                     l3934:	
  6807  06E6  3001               	movlw	1
  6808  06E7                     u4055:	
  6809  06E7  1003               	clrc
  6810  06E8  0CF4               	rrf	___awmod@divisor+1,f
  6811  06E9  0CF3               	rrf	___awmod@divisor,f
  6812  06EA  3EFF               	addlw	-1
  6813  06EB  1D03               	skipz
  6814  06EC  2EE7               	goto	u4055
  6815  06ED  3001               	movlw	1
  6816  06EE  02C7               	subwf	___awmod@counter,f
  6817  06EF  1D03               	btfss	3,2
  6818  06F0  2ED8               	goto	l3930
  6819  06F1                     l3938:	
  6820  06F1  0848               	movf	___awmod@sign,w
  6821  06F2  1903               	btfsc	3,2
  6822  06F3  2EF9               	goto	l3942
  6823  06F4  09F5               	comf	___awmod@dividend,f
  6824  06F5  09F6               	comf	___awmod@dividend+1,f
  6825  06F6  0AF5               	incf	___awmod@dividend,f
  6826  06F7  1903               	skipnz
  6827  06F8  0AF6               	incf	___awmod@dividend+1,f
  6828  06F9                     l3942:	
  6829  06F9  0876               	movf	___awmod@dividend+1,w
  6830  06FA  00F4               	movwf	?___awmod+1
  6831  06FB  0875               	movf	___awmod@dividend,w
  6832  06FC  00F3               	movwf	?___awmod
  6833  06FD  0008               	return
  6834  06FE                     __end_of___awmod:	
  6835                           
  6836                           	psect	text31
  6837  0B07                     __ptext31:	
  6838 ;; *************** function ___awdiv *****************
  6839 ;; Defined at:
  6840 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;  divisor         2    3[COMMON] int 
  6843 ;;  dividend        2    5[COMMON] int 
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;  quotient        2    2[BANK0 ] int 
  6846 ;;  sign            1    1[BANK0 ] unsigned char 
  6847 ;;  counter         1    0[BANK0 ] unsigned char 
  6848 ;; Return value:  Size  Location     Type
  6849 ;;                  2    3[COMMON] int 
  6850 ;; Registers used:
  6851 ;;		wreg, status,2, status,0
  6852 ;; Tracked objects:
  6853 ;;		On entry : 0/0
  6854 ;;		On exit  : 0/0
  6855 ;;		Unchanged: 0/0
  6856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6857 ;;      Params:         4       0       0       0       0
  6858 ;;      Locals:         0       4       0       0       0
  6859 ;;      Temps:          1       0       0       0       0
  6860 ;;      Totals:         5       4       0       0       0
  6861 ;;Total ram usage:        9 bytes
  6862 ;; Hardware stack levels used:    1
  6863 ;; Hardware stack levels required when called:    1
  6864 ;; This function calls:
  6865 ;;		Nothing
  6866 ;; This function is called by:
  6867 ;;		_main
  6868 ;; This function uses a non-reentrant model
  6869 ;;
  6870                           
  6871                           
  6872                           ;psect for function ___awdiv
  6873  0B07                     ___awdiv:	
  6874                           
  6875                           ;incstack = 0
  6876                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6877  0B07  1283               	bcf	3,5	;RP0=0, select bank0
  6878  0B08  1303               	bcf	3,6	;RP1=0, select bank0
  6879  0B09  01C8               	clrf	___awdiv@sign
  6880  0B0A  1FF4               	btfss	___awdiv@divisor+1,7
  6881  0B0B  2B13               	goto	l2866
  6882  0B0C  09F3               	comf	___awdiv@divisor,f
  6883  0B0D  09F4               	comf	___awdiv@divisor+1,f
  6884  0B0E  0AF3               	incf	___awdiv@divisor,f
  6885  0B0F  1903               	skipnz
  6886  0B10  0AF4               	incf	___awdiv@divisor+1,f
  6887  0B11  01C8               	clrf	___awdiv@sign
  6888  0B12  0AC8               	incf	___awdiv@sign,f
  6889  0B13                     l2866:	
  6890  0B13  1FF6               	btfss	___awdiv@dividend+1,7
  6891  0B14  2B1E               	goto	l2872
  6892  0B15  09F5               	comf	___awdiv@dividend,f
  6893  0B16  09F6               	comf	___awdiv@dividend+1,f
  6894  0B17  0AF5               	incf	___awdiv@dividend,f
  6895  0B18  1903               	skipnz
  6896  0B19  0AF6               	incf	___awdiv@dividend+1,f
  6897  0B1A  3001               	movlw	1
  6898  0B1B  00F7               	movwf	??___awdiv
  6899  0B1C  0877               	movf	??___awdiv,w
  6900  0B1D  06C8               	xorwf	___awdiv@sign,f
  6901  0B1E                     l2872:	
  6902  0B1E  01C9               	clrf	___awdiv@quotient
  6903  0B1F  01CA               	clrf	___awdiv@quotient+1
  6904  0B20  0873               	movf	___awdiv@divisor,w
  6905  0B21  0474               	iorwf	___awdiv@divisor+1,w
  6906  0B22  1903               	btfsc	3,2
  6907  0B23  2B55               	goto	l2894
  6908  0B24  01C7               	clrf	___awdiv@counter
  6909  0B25  0AC7               	incf	___awdiv@counter,f
  6910  0B26                     l2882:	
  6911  0B26  1BF4               	btfsc	___awdiv@divisor+1,7
  6912  0B27  2B34               	goto	l2884
  6913  0B28  3001               	movlw	1
  6914  0B29                     u2485:	
  6915  0B29  1003               	clrc
  6916  0B2A  0DF3               	rlf	___awdiv@divisor,f
  6917  0B2B  0DF4               	rlf	___awdiv@divisor+1,f
  6918  0B2C  3EFF               	addlw	-1
  6919  0B2D  1D03               	skipz
  6920  0B2E  2B29               	goto	u2485
  6921  0B2F  3001               	movlw	1
  6922  0B30  00F7               	movwf	??___awdiv
  6923  0B31  0877               	movf	??___awdiv,w
  6924  0B32  07C7               	addwf	___awdiv@counter,f
  6925  0B33  2B26               	goto	l2882
  6926  0B34                     l2884:	
  6927  0B34  3001               	movlw	1
  6928  0B35                     u2505:	
  6929  0B35  1003               	clrc
  6930  0B36  0DC9               	rlf	___awdiv@quotient,f
  6931  0B37  0DCA               	rlf	___awdiv@quotient+1,f
  6932  0B38  3EFF               	addlw	-1
  6933  0B39  1D03               	skipz
  6934  0B3A  2B35               	goto	u2505
  6935  0B3B  0874               	movf	___awdiv@divisor+1,w
  6936  0B3C  0276               	subwf	___awdiv@dividend+1,w
  6937  0B3D  1D03               	skipz
  6938  0B3E  2B41               	goto	u2515
  6939  0B3F  0873               	movf	___awdiv@divisor,w
  6940  0B40  0275               	subwf	___awdiv@dividend,w
  6941  0B41                     u2515:	
  6942  0B41  1C03               	skipc
  6943  0B42  2B4A               	goto	l2890
  6944  0B43  0873               	movf	___awdiv@divisor,w
  6945  0B44  02F5               	subwf	___awdiv@dividend,f
  6946  0B45  0874               	movf	___awdiv@divisor+1,w
  6947  0B46  1C03               	skipc
  6948  0B47  03F6               	decf	___awdiv@dividend+1,f
  6949  0B48  02F6               	subwf	___awdiv@dividend+1,f
  6950  0B49  1449               	bsf	___awdiv@quotient,0
  6951  0B4A                     l2890:	
  6952  0B4A  3001               	movlw	1
  6953  0B4B                     u2525:	
  6954  0B4B  1003               	clrc
  6955  0B4C  0CF4               	rrf	___awdiv@divisor+1,f
  6956  0B4D  0CF3               	rrf	___awdiv@divisor,f
  6957  0B4E  3EFF               	addlw	-1
  6958  0B4F  1D03               	skipz
  6959  0B50  2B4B               	goto	u2525
  6960  0B51  3001               	movlw	1
  6961  0B52  02C7               	subwf	___awdiv@counter,f
  6962  0B53  1D03               	btfss	3,2
  6963  0B54  2B34               	goto	l2884
  6964  0B55                     l2894:	
  6965  0B55  0848               	movf	___awdiv@sign,w
  6966  0B56  1903               	btfsc	3,2
  6967  0B57  2B5D               	goto	l2898
  6968  0B58  09C9               	comf	___awdiv@quotient,f
  6969  0B59  09CA               	comf	___awdiv@quotient+1,f
  6970  0B5A  0AC9               	incf	___awdiv@quotient,f
  6971  0B5B  1903               	skipnz
  6972  0B5C  0ACA               	incf	___awdiv@quotient+1,f
  6973  0B5D                     l2898:	
  6974  0B5D  084A               	movf	___awdiv@quotient+1,w
  6975  0B5E  00F4               	movwf	?___awdiv+1
  6976  0B5F  0849               	movf	___awdiv@quotient,w
  6977  0B60  00F3               	movwf	?___awdiv
  6978  0B61  0008               	return
  6979  0B62                     __end_of___awdiv:	
  6980                           
  6981                           	psect	text32
  6982  16C0                     __ptext32:	
  6983 ;; *************** function _UART_Write *****************
  6984 ;; Defined at:
  6985 ;;		line 54 in file "./UART.h"
  6986 ;; Parameters:    Size  Location     Type
  6987 ;;  data            1    wreg     unsigned char 
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;  data            1    3[COMMON] unsigned char 
  6990 ;; Return value:  Size  Location     Type
  6991 ;;                  1    wreg      void 
  6992 ;; Registers used:
  6993 ;;		wreg
  6994 ;; Tracked objects:
  6995 ;;		On entry : 0/0
  6996 ;;		On exit  : 0/0
  6997 ;;		Unchanged: 0/0
  6998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6999 ;;      Params:         0       0       0       0       0
  7000 ;;      Locals:         1       0       0       0       0
  7001 ;;      Temps:          0       0       0       0       0
  7002 ;;      Totals:         1       0       0       0       0
  7003 ;;Total ram usage:        1 bytes
  7004 ;; Hardware stack levels used:    1
  7005 ;; Hardware stack levels required when called:    1
  7006 ;; This function calls:
  7007 ;;		Nothing
  7008 ;; This function is called by:
  7009 ;;		_main
  7010 ;;		_UART_Write_Text
  7011 ;; This function uses a non-reentrant model
  7012 ;;
  7013                           
  7014                           
  7015                           ;psect for function _UART_Write
  7016  16C0                     _UART_Write:	
  7017                           
  7018                           ;incstack = 0
  7019                           ; Regs used in _UART_Write: [wreg]
  7020                           ;UART_Write@data stored from wreg
  7021  16C0  00F3               	movwf	UART_Write@data
  7022  16C1                     l238:	
  7023                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(!TRMT);
  7024                           
  7025  16C1  1683               	bsf	3,5	;RP0=1, select bank1
  7026  16C2  1303               	bcf	3,6	;RP1=0, select bank1
  7027  16C3  1C98               	btfss	24,1	;volatile
  7028  16C4  2EC1               	goto	l238
  7029                           
  7030                           ;./UART.h: 57:   TXREG = data;
  7031  16C5  0873               	movf	UART_Write@data,w
  7032  16C6  1283               	bcf	3,5	;RP0=0, select bank0
  7033  16C7  1303               	bcf	3,6	;RP1=0, select bank0
  7034  16C8  0099               	movwf	25	;volatile
  7035  16C9  0008               	return
  7036  16CA                     __end_of_UART_Write:	
  7037                           
  7038                           	psect	text33
  7039  168C                     __ptext33:	
  7040 ;; *************** function _UART_TX_Empty *****************
  7041 ;; Defined at:
  7042 ;;		line 31 in file "./UART.h"
  7043 ;; Parameters:    Size  Location     Type
  7044 ;;		None
  7045 ;; Auto vars:     Size  Location     Type
  7046 ;;		None
  7047 ;; Return value:  Size  Location     Type
  7048 ;;                  1    wreg      unsigned char 
  7049 ;; Registers used:
  7050 ;;		wreg
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7056 ;;      Params:         0       0       0       0       0
  7057 ;;      Locals:         0       0       0       0       0
  7058 ;;      Temps:          0       0       0       0       0
  7059 ;;      Totals:         0       0       0       0       0
  7060 ;;Total ram usage:        0 bytes
  7061 ;; Hardware stack levels used:    1
  7062 ;; Hardware stack levels required when called:    1
  7063 ;; This function calls:
  7064 ;;		Nothing
  7065 ;; This function is called by:
  7066 ;;		_main
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           
  7071                           ;psect for function _UART_TX_Empty
  7072  168C                     _UART_TX_Empty:	
  7073                           
  7074                           ;./UART.h: 33:   return TRMT;
  7075                           
  7076                           ;incstack = 0
  7077                           ; Regs used in _UART_TX_Empty: [wreg]
  7078  168C  3000               	movlw	0
  7079  168D  1683               	bsf	3,5	;RP0=1, select bank1
  7080  168E  1303               	bcf	3,6	;RP1=0, select bank1
  7081  168F  1898               	btfsc	24,1	;volatile
  7082  1690  3001               	movlw	1
  7083  1691  0008               	return
  7084  1692                     __end_of_UART_TX_Empty:	
  7085                           
  7086                           	psect	text34
  7087  09DB                     __ptext34:	
  7088 ;; *************** function _Lcd_Write_String *****************
  7089 ;; Defined at:
  7090 ;;		line 100 in file "./LCD4bits.h"
  7091 ;; Parameters:    Size  Location     Type
  7092 ;;  a               2    0[BANK0 ] PTR unsigned char 
  7093 ;;		 -> NULL(0), STR_29(13), STR_28(6), STR_27(13), 
  7094 ;;		 -> STR_26(12), STR_25(10), STR_24(6), STR_23(7), 
  7095 ;;		 -> STR_22(7), STR_21(7), STR_20(8), STR_19(8), 
  7096 ;;		 -> STR_18(9), STR_17(9), STR_16(9), STR_15(9), 
  7097 ;;		 -> STR_14(12), STR_13(12), STR_9(10), STR_8(10), 
  7098 ;;		 -> STR_7(10), STR_6(10), STR_5(10), STR_4(10), 
  7099 ;;		 -> STR_3(10), STR_2(10), time(6), temp(6), 
  7100 ;;		 -> STR_1(31), 
  7101 ;; Auto vars:     Size  Location     Type
  7102 ;;  i               2    5[BANK0 ] int 
  7103 ;; Return value:  Size  Location     Type
  7104 ;;                  1    wreg      void 
  7105 ;; Registers used:
  7106 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7107 ;; Tracked objects:
  7108 ;;		On entry : 0/0
  7109 ;;		On exit  : 0/0
  7110 ;;		Unchanged: 0/0
  7111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7112 ;;      Params:         0       2       0       0       0
  7113 ;;      Locals:         0       2       0       0       0
  7114 ;;      Temps:          0       3       0       0       0
  7115 ;;      Totals:         0       7       0       0       0
  7116 ;;Total ram usage:        7 bytes
  7117 ;; Hardware stack levels used:    1
  7118 ;; Hardware stack levels required when called:    3
  7119 ;; This function calls:
  7120 ;;		_Lcd_Write_Char
  7121 ;; This function is called by:
  7122 ;;		_main
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           
  7127                           ;psect for function _Lcd_Write_String
  7128  09DB                     _Lcd_Write_String:	
  7129                           
  7130                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  7131                           
  7132                           ;incstack = 0
  7133                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7134  09DB  1283               	bcf	3,5	;RP0=0, select bank0
  7135  09DC  1303               	bcf	3,6	;RP1=0, select bank0
  7136  09DD  01CC               	clrf	Lcd_Write_String@i
  7137  09DE  01CD               	clrf	Lcd_Write_String@i+1
  7138  09DF                     l3760:	
  7139  09DF  084C               	movf	Lcd_Write_String@i,w
  7140  09E0  0747               	addwf	Lcd_Write_String@a,w
  7141  09E1  00CA               	movwf	??_Lcd_Write_String+1
  7142  09E2  0848               	movf	Lcd_Write_String@a+1,w
  7143  09E3  00C9               	movwf	??_Lcd_Write_String
  7144  09E4  1803               	skipnc
  7145  09E5  0AC9               	incf	??_Lcd_Write_String,f
  7146  09E6  1BCC               	btfsc	Lcd_Write_String@i,7
  7147  09E7  03C9               	decf	??_Lcd_Write_String,f
  7148  09E8  1283               	bcf	3,5	;RP0=0, select bank0
  7149  09E9  1303               	bcf	3,6	;RP1=0, select bank0
  7150  09EA  0849               	movf	??_Lcd_Write_String,w
  7151  09EB  00CB               	movwf	??_Lcd_Write_String+2
  7152  09EC  084B               	movf	??_Lcd_Write_String+2,w
  7153  09ED  00FF               	movwf	127
  7154  09EE  084A               	movf	??_Lcd_Write_String+1,w
  7155  09EF  0084               	movwf	4
  7156  09F0  120A  118A  2700  120A  158A  	fcall	stringtab
  7157  09F5  3A00               	xorlw	0
  7158  09F6  1903               	btfsc	3,2
  7159  09F7  0008               	return
  7160                           
  7161                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  7162  09F8  084C               	movf	Lcd_Write_String@i,w
  7163  09F9  0747               	addwf	Lcd_Write_String@a,w
  7164  09FA  00CA               	movwf	??_Lcd_Write_String+1
  7165  09FB  0848               	movf	Lcd_Write_String@a+1,w
  7166  09FC  00C9               	movwf	??_Lcd_Write_String
  7167  09FD  1803               	skipnc
  7168  09FE  0AC9               	incf	??_Lcd_Write_String,f
  7169  09FF  1BCC               	btfsc	Lcd_Write_String@i,7
  7170  0A00  03C9               	decf	??_Lcd_Write_String,f
  7171  0A01  1283               	bcf	3,5	;RP0=0, select bank0
  7172  0A02  1303               	bcf	3,6	;RP1=0, select bank0
  7173  0A03  0849               	movf	??_Lcd_Write_String,w
  7174  0A04  00CB               	movwf	??_Lcd_Write_String+2
  7175  0A05  084B               	movf	??_Lcd_Write_String+2,w
  7176  0A06  00FF               	movwf	127
  7177  0A07  084A               	movf	??_Lcd_Write_String+1,w
  7178  0A08  0084               	movwf	4
  7179  0A09  120A  118A  2700  120A  158A  	fcall	stringtab
  7180  0A0E  120A  158A  212A  120A  158A  	fcall	_Lcd_Write_Char
  7181  0A13  3001               	movlw	1
  7182  0A14  1283               	bcf	3,5	;RP0=0, select bank0
  7183  0A15  1303               	bcf	3,6	;RP1=0, select bank0
  7184  0A16  07CC               	addwf	Lcd_Write_String@i,f
  7185  0A17  1803               	skipnc
  7186  0A18  0ACD               	incf	Lcd_Write_String@i+1,f
  7187  0A19  3000               	movlw	0
  7188  0A1A  07CD               	addwf	Lcd_Write_String@i+1,f
  7189  0A1B  29DF               	goto	l3760
  7190  0A1C                     __end_of_Lcd_Write_String:	
  7191                           
  7192                           	psect	text35
  7193  092A                     __ptext35:	
  7194 ;; *************** function _Lcd_Write_Char *****************
  7195 ;; Defined at:
  7196 ;;		line 84 in file "./LCD4bits.h"
  7197 ;; Parameters:    Size  Location     Type
  7198 ;;  a               1    wreg     unsigned char 
  7199 ;; Auto vars:     Size  Location     Type
  7200 ;;  a               1    7[COMMON] unsigned char 
  7201 ;;  y               1    6[COMMON] unsigned char 
  7202 ;;  temp            1    5[COMMON] unsigned char 
  7203 ;; Return value:  Size  Location     Type
  7204 ;;                  1    wreg      void 
  7205 ;; Registers used:
  7206 ;;		wreg, status,2, status,0, pclath, cstack
  7207 ;; Tracked objects:
  7208 ;;		On entry : 0/0
  7209 ;;		On exit  : 0/0
  7210 ;;		Unchanged: 0/0
  7211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7212 ;;      Params:         0       0       0       0       0
  7213 ;;      Locals:         3       0       0       0       0
  7214 ;;      Temps:          1       0       0       0       0
  7215 ;;      Totals:         4       0       0       0       0
  7216 ;;Total ram usage:        4 bytes
  7217 ;; Hardware stack levels used:    1
  7218 ;; Hardware stack levels required when called:    2
  7219 ;; This function calls:
  7220 ;;		_Lcd_Port
  7221 ;; This function is called by:
  7222 ;;		_Lcd_Write_String
  7223 ;;		_main
  7224 ;; This function uses a non-reentrant model
  7225 ;;
  7226                           
  7227                           
  7228                           ;psect for function _Lcd_Write_Char
  7229  092A                     _Lcd_Write_Char:	
  7230                           
  7231                           ;incstack = 0
  7232                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  7233                           ;Lcd_Write_Char@a stored from wreg
  7234  092A  00F7               	movwf	Lcd_Write_Char@a
  7235                           
  7236                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  7237  092B  0877               	movf	Lcd_Write_Char@a,w
  7238  092C  390F               	andlw	15
  7239  092D  00F4               	movwf	??_Lcd_Write_Char
  7240  092E  0874               	movf	??_Lcd_Write_Char,w
  7241  092F  00F5               	movwf	Lcd_Write_Char@temp
  7242                           
  7243                           ;./LCD4bits.h: 88:    y = a&0xF0;
  7244  0930  0877               	movf	Lcd_Write_Char@a,w
  7245  0931  39F0               	andlw	240
  7246  0932  00F4               	movwf	??_Lcd_Write_Char
  7247  0933  0874               	movf	??_Lcd_Write_Char,w
  7248  0934  00F6               	movwf	Lcd_Write_Char@y
  7249                           
  7250                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  7251  0935  1283               	bcf	3,5	;RP0=0, select bank0
  7252  0936  1303               	bcf	3,6	;RP1=0, select bank0
  7253  0937  1606               	bsf	6,4	;volatile
  7254                           
  7255                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  7256  0938  0876               	movf	Lcd_Write_Char@y,w
  7257  0939  00F4               	movwf	??_Lcd_Write_Char
  7258  093A  3004               	movlw	4
  7259  093B                     u2115:	
  7260  093B  1003               	clrc
  7261  093C  0CF4               	rrf	??_Lcd_Write_Char,f
  7262  093D  3EFF               	addlw	-1
  7263  093E  1D03               	skipz
  7264  093F  293B               	goto	u2115
  7265  0940  0874               	movf	??_Lcd_Write_Char,w
  7266  0941  160A  118A  26EB  120A  158A  	fcall	_Lcd_Port
  7267                           
  7268                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  7269  0946  1283               	bcf	3,5	;RP0=0, select bank0
  7270  0947  1303               	bcf	3,6	;RP1=0, select bank0
  7271  0948  1686               	bsf	6,5	;volatile
  7272                           
  7273                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  7274  0949  301A               	movlw	26
  7275  094A  00F4               	movwf	??_Lcd_Write_Char
  7276  094B                     u5017:	
  7277  094B  0BF4               	decfsz	??_Lcd_Write_Char,f
  7278  094C  294B               	goto	u5017
  7279  094D  0000               	nop
  7280                           
  7281                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  7282  094E  1283               	bcf	3,5	;RP0=0, select bank0
  7283  094F  1303               	bcf	3,6	;RP1=0, select bank0
  7284  0950  1286               	bcf	6,5	;volatile
  7285                           
  7286                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  7287  0951  0875               	movf	Lcd_Write_Char@temp,w
  7288  0952  160A  118A  26EB  120A  158A  	fcall	_Lcd_Port
  7289                           
  7290                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  7291  0957  1283               	bcf	3,5	;RP0=0, select bank0
  7292  0958  1303               	bcf	3,6	;RP1=0, select bank0
  7293  0959  1686               	bsf	6,5	;volatile
  7294                           
  7295                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  7296  095A  301A               	movlw	26
  7297  095B  00F4               	movwf	??_Lcd_Write_Char
  7298  095C                     u5027:	
  7299  095C  0BF4               	decfsz	??_Lcd_Write_Char,f
  7300  095D  295C               	goto	u5027
  7301  095E  0000               	nop
  7302                           
  7303                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  7304  095F  1283               	bcf	3,5	;RP0=0, select bank0
  7305  0960  1303               	bcf	3,6	;RP1=0, select bank0
  7306  0961  1286               	bcf	6,5	;volatile
  7307  0962  0008               	return
  7308  0963                     __end_of_Lcd_Write_Char:	
  7309                           
  7310                           	psect	text36
  7311  16E0                     __ptext36:	
  7312 ;; *************** function _Lcd_Shift_Right *****************
  7313 ;; Defined at:
  7314 ;;		line 107 in file "./LCD4bits.h"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;		None
  7317 ;; Auto vars:     Size  Location     Type
  7318 ;;		None
  7319 ;; Return value:  Size  Location     Type
  7320 ;;                  1    wreg      void 
  7321 ;; Registers used:
  7322 ;;		wreg, status,2, status,0, pclath, cstack
  7323 ;; Tracked objects:
  7324 ;;		On entry : 0/0
  7325 ;;		On exit  : 0/0
  7326 ;;		Unchanged: 0/0
  7327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7328 ;;      Params:         0       0       0       0       0
  7329 ;;      Locals:         0       0       0       0       0
  7330 ;;      Temps:          0       0       0       0       0
  7331 ;;      Totals:         0       0       0       0       0
  7332 ;;Total ram usage:        0 bytes
  7333 ;; Hardware stack levels used:    1
  7334 ;; Hardware stack levels required when called:    3
  7335 ;; This function calls:
  7336 ;;		_Lcd_Cmd
  7337 ;; This function is called by:
  7338 ;;		_main
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           
  7343                           ;psect for function _Lcd_Shift_Right
  7344  16E0                     _Lcd_Shift_Right:	
  7345                           
  7346                           ;./LCD4bits.h: 109:  Lcd_Cmd(0x01);
  7347                           
  7348                           ;incstack = 0
  7349                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
  7350  16E0  3001               	movlw	1
  7351  16E1  160A  118A  2705  160A  118A  	fcall	_Lcd_Cmd
  7352                           
  7353                           ;./LCD4bits.h: 110:  Lcd_Cmd(0x0C);
  7354  16E6  300C               	movlw	12
  7355  16E7  160A  118A  2705   	fcall	_Lcd_Cmd
  7356  16EA  0008               	return
  7357  16EB                     __end_of_Lcd_Shift_Right:	
  7358                           
  7359                           	psect	text37
  7360  16D5                     __ptext37:	
  7361 ;; *************** function _Lcd_Shift_Left *****************
  7362 ;; Defined at:
  7363 ;;		line 113 in file "./LCD4bits.h"
  7364 ;; Parameters:    Size  Location     Type
  7365 ;;		None
  7366 ;; Auto vars:     Size  Location     Type
  7367 ;;		None
  7368 ;; Return value:  Size  Location     Type
  7369 ;;                  1    wreg      void 
  7370 ;; Registers used:
  7371 ;;		wreg, status,2, status,0, pclath, cstack
  7372 ;; Tracked objects:
  7373 ;;		On entry : 0/0
  7374 ;;		On exit  : 0/0
  7375 ;;		Unchanged: 0/0
  7376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7377 ;;      Params:         0       0       0       0       0
  7378 ;;      Locals:         0       0       0       0       0
  7379 ;;      Temps:          0       0       0       0       0
  7380 ;;      Totals:         0       0       0       0       0
  7381 ;;Total ram usage:        0 bytes
  7382 ;; Hardware stack levels used:    1
  7383 ;; Hardware stack levels required when called:    3
  7384 ;; This function calls:
  7385 ;;		_Lcd_Cmd
  7386 ;; This function is called by:
  7387 ;;		_main
  7388 ;; This function uses a non-reentrant model
  7389 ;;
  7390                           
  7391                           
  7392                           ;psect for function _Lcd_Shift_Left
  7393  16D5                     _Lcd_Shift_Left:	
  7394                           
  7395                           ;./LCD4bits.h: 115:  Lcd_Cmd(0x01);
  7396                           
  7397                           ;incstack = 0
  7398                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  7399  16D5  3001               	movlw	1
  7400  16D6  160A  118A  2705  160A  118A  	fcall	_Lcd_Cmd
  7401                           
  7402                           ;./LCD4bits.h: 116:  Lcd_Cmd(0x08);
  7403  16DB  3008               	movlw	8
  7404  16DC  160A  118A  2705   	fcall	_Lcd_Cmd
  7405  16DF  0008               	return
  7406  16E0                     __end_of_Lcd_Shift_Left:	
  7407                           
  7408                           	psect	text38
  7409  0A62                     __ptext38:	
  7410 ;; *************** function _Lcd_Set_Cursor *****************
  7411 ;; Defined at:
  7412 ;;		line 44 in file "./LCD4bits.h"
  7413 ;; Parameters:    Size  Location     Type
  7414 ;;  a               1    wreg     unsigned char 
  7415 ;;  b               1    7[COMMON] unsigned char 
  7416 ;; Auto vars:     Size  Location     Type
  7417 ;;  a               1    2[BANK0 ] unsigned char 
  7418 ;;  temp            1    5[BANK0 ] unsigned char 
  7419 ;;  y               1    4[BANK0 ] unsigned char 
  7420 ;;  z               1    3[BANK0 ] unsigned char 
  7421 ;; Return value:  Size  Location     Type
  7422 ;;                  1    wreg      void 
  7423 ;; Registers used:
  7424 ;;		wreg, status,2, status,0, pclath, cstack
  7425 ;; Tracked objects:
  7426 ;;		On entry : 0/0
  7427 ;;		On exit  : 0/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7430 ;;      Params:         1       0       0       0       0
  7431 ;;      Locals:         0       4       0       0       0
  7432 ;;      Temps:          0       2       0       0       0
  7433 ;;      Totals:         1       6       0       0       0
  7434 ;;Total ram usage:        7 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; Hardware stack levels required when called:    3
  7437 ;; This function calls:
  7438 ;;		_Lcd_Cmd
  7439 ;; This function is called by:
  7440 ;;		_main
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           
  7445                           ;psect for function _Lcd_Set_Cursor
  7446  0A62                     _Lcd_Set_Cursor:	
  7447                           
  7448                           ;incstack = 0
  7449                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  7450                           ;Lcd_Set_Cursor@a stored from wreg
  7451  0A62  1283               	bcf	3,5	;RP0=0, select bank0
  7452  0A63  1303               	bcf	3,6	;RP1=0, select bank0
  7453  0A64  00C9               	movwf	Lcd_Set_Cursor@a
  7454                           
  7455                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  7456  0A65  0349               	decf	Lcd_Set_Cursor@a,w
  7457  0A66  1D03               	btfss	3,2
  7458  0A67  2A8B               	goto	l3744
  7459                           
  7460                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  7461  0A68  0877               	movf	Lcd_Set_Cursor@b,w
  7462  0A69  3E7F               	addlw	127
  7463  0A6A  00C7               	movwf	??_Lcd_Set_Cursor
  7464  0A6B  0847               	movf	??_Lcd_Set_Cursor,w
  7465  0A6C  00CC               	movwf	Lcd_Set_Cursor@temp
  7466                           
  7467                           ;./LCD4bits.h: 50:   z = temp>>4;
  7468  0A6D  084C               	movf	Lcd_Set_Cursor@temp,w
  7469  0A6E  00C7               	movwf	??_Lcd_Set_Cursor
  7470  0A6F  3004               	movlw	4
  7471  0A70                     u3875:	
  7472  0A70  1003               	clrc
  7473  0A71  0CC7               	rrf	??_Lcd_Set_Cursor,f
  7474  0A72  3EFF               	addlw	-1
  7475  0A73  1D03               	skipz
  7476  0A74  2A70               	goto	u3875
  7477  0A75  0847               	movf	??_Lcd_Set_Cursor,w
  7478  0A76  00C8               	movwf	??_Lcd_Set_Cursor+1
  7479  0A77  0848               	movf	??_Lcd_Set_Cursor+1,w
  7480  0A78  00CA               	movwf	Lcd_Set_Cursor@z
  7481                           
  7482                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  7483  0A79  084C               	movf	Lcd_Set_Cursor@temp,w
  7484  0A7A  390F               	andlw	15
  7485  0A7B  00C7               	movwf	??_Lcd_Set_Cursor
  7486  0A7C  0847               	movf	??_Lcd_Set_Cursor,w
  7487  0A7D  00CB               	movwf	Lcd_Set_Cursor@y
  7488                           
  7489                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  7490  0A7E  084A               	movf	Lcd_Set_Cursor@z,w
  7491  0A7F  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  7492                           
  7493                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  7494  0A84  1283               	bcf	3,5	;RP0=0, select bank0
  7495  0A85  1303               	bcf	3,6	;RP1=0, select bank0
  7496  0A86  084B               	movf	Lcd_Set_Cursor@y,w
  7497  0A87  160A  118A  2705   	fcall	_Lcd_Cmd
  7498                           
  7499                           ;./LCD4bits.h: 54:  }
  7500  0A8A  0008               	return
  7501  0A8B                     l3744:	
  7502  0A8B  3002               	movlw	2
  7503  0A8C  0649               	xorwf	Lcd_Set_Cursor@a,w
  7504  0A8D  1D03               	btfss	3,2
  7505  0A8E  0008               	return
  7506                           
  7507                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  7508  0A8F  0877               	movf	Lcd_Set_Cursor@b,w
  7509  0A90  3EBF               	addlw	191
  7510  0A91  00C7               	movwf	??_Lcd_Set_Cursor
  7511  0A92  0847               	movf	??_Lcd_Set_Cursor,w
  7512  0A93  00CC               	movwf	Lcd_Set_Cursor@temp
  7513                           
  7514                           ;./LCD4bits.h: 58:   z = temp>>4;
  7515  0A94  084C               	movf	Lcd_Set_Cursor@temp,w
  7516  0A95  00C7               	movwf	??_Lcd_Set_Cursor
  7517  0A96  3004               	movlw	4
  7518  0A97                     u3895:	
  7519  0A97  1003               	clrc
  7520  0A98  0CC7               	rrf	??_Lcd_Set_Cursor,f
  7521  0A99  3EFF               	addlw	-1
  7522  0A9A  1D03               	skipz
  7523  0A9B  2A97               	goto	u3895
  7524  0A9C  0847               	movf	??_Lcd_Set_Cursor,w
  7525  0A9D  00C8               	movwf	??_Lcd_Set_Cursor+1
  7526  0A9E  0848               	movf	??_Lcd_Set_Cursor+1,w
  7527  0A9F  00CA               	movwf	Lcd_Set_Cursor@z
  7528                           
  7529                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  7530  0AA0  084C               	movf	Lcd_Set_Cursor@temp,w
  7531  0AA1  390F               	andlw	15
  7532  0AA2  00C7               	movwf	??_Lcd_Set_Cursor
  7533  0AA3  0847               	movf	??_Lcd_Set_Cursor,w
  7534  0AA4  00CB               	movwf	Lcd_Set_Cursor@y
  7535                           
  7536                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  7537  0AA5  084A               	movf	Lcd_Set_Cursor@z,w
  7538  0AA6  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  7539                           
  7540                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  7541  0AAB  1283               	bcf	3,5	;RP0=0, select bank0
  7542  0AAC  1303               	bcf	3,6	;RP1=0, select bank0
  7543  0AAD  084B               	movf	Lcd_Set_Cursor@y,w
  7544  0AAE  160A  118A  2705   	fcall	_Lcd_Cmd
  7545  0AB1  0008               	return
  7546  0AB2                     __end_of_Lcd_Set_Cursor:	
  7547                           
  7548                           	psect	text39
  7549  16CA                     __ptext39:	
  7550 ;; *************** function _Lcd_Clear *****************
  7551 ;; Defined at:
  7552 ;;		line 38 in file "./LCD4bits.h"
  7553 ;; Parameters:    Size  Location     Type
  7554 ;;		None
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;		None
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  1    wreg      void 
  7559 ;; Registers used:
  7560 ;;		wreg, status,2, status,0, pclath, cstack
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7566 ;;      Params:         0       0       0       0       0
  7567 ;;      Locals:         0       0       0       0       0
  7568 ;;      Temps:          0       0       0       0       0
  7569 ;;      Totals:         0       0       0       0       0
  7570 ;;Total ram usage:        0 bytes
  7571 ;; Hardware stack levels used:    1
  7572 ;; Hardware stack levels required when called:    3
  7573 ;; This function calls:
  7574 ;;		_Lcd_Cmd
  7575 ;; This function is called by:
  7576 ;;		_main
  7577 ;; This function uses a non-reentrant model
  7578 ;;
  7579                           
  7580                           
  7581                           ;psect for function _Lcd_Clear
  7582  16CA                     _Lcd_Clear:	
  7583                           
  7584                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  7585                           
  7586                           ;incstack = 0
  7587                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  7588  16CA  3000               	movlw	0
  7589  16CB  160A  118A  2705  160A  118A  	fcall	_Lcd_Cmd
  7590                           
  7591                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  7592  16D0  3001               	movlw	1
  7593  16D1  160A  118A  2705   	fcall	_Lcd_Cmd
  7594  16D4  0008               	return
  7595  16D5                     __end_of_Lcd_Clear:	
  7596                           
  7597                           	psect	text40
  7598  1705                     __ptext40:	
  7599 ;; *************** function _Lcd_Cmd *****************
  7600 ;; Defined at:
  7601 ;;		line 29 in file "./LCD4bits.h"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;  a               1    wreg     unsigned char 
  7604 ;; Auto vars:     Size  Location     Type
  7605 ;;  a               1    6[COMMON] unsigned char 
  7606 ;; Return value:  Size  Location     Type
  7607 ;;                  1    wreg      void 
  7608 ;; Registers used:
  7609 ;;		wreg, status,2, status,0, pclath, cstack
  7610 ;; Tracked objects:
  7611 ;;		On entry : 0/0
  7612 ;;		On exit  : 0/0
  7613 ;;		Unchanged: 0/0
  7614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7615 ;;      Params:         0       0       0       0       0
  7616 ;;      Locals:         1       0       0       0       0
  7617 ;;      Temps:          2       0       0       0       0
  7618 ;;      Totals:         3       0       0       0       0
  7619 ;;Total ram usage:        3 bytes
  7620 ;; Hardware stack levels used:    1
  7621 ;; Hardware stack levels required when called:    2
  7622 ;; This function calls:
  7623 ;;		_Lcd_Port
  7624 ;; This function is called by:
  7625 ;;		_Lcd_Clear
  7626 ;;		_Lcd_Set_Cursor
  7627 ;;		_Lcd_Init
  7628 ;;		_Lcd_Shift_Right
  7629 ;;		_Lcd_Shift_Left
  7630 ;; This function uses a non-reentrant model
  7631 ;;
  7632                           
  7633                           
  7634                           ;psect for function _Lcd_Cmd
  7635  1705                     _Lcd_Cmd:	
  7636                           
  7637                           ;incstack = 0
  7638                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  7639                           ;Lcd_Cmd@a stored from wreg
  7640  1705  00F6               	movwf	Lcd_Cmd@a
  7641                           
  7642                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  7643  1706  1283               	bcf	3,5	;RP0=0, select bank0
  7644  1707  1303               	bcf	3,6	;RP1=0, select bank0
  7645  1708  1206               	bcf	6,4	;volatile
  7646                           
  7647                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  7648  1709  0876               	movf	Lcd_Cmd@a,w
  7649  170A  160A  118A  26EB  160A  118A  	fcall	_Lcd_Port
  7650                           
  7651                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  7652  170F  1283               	bcf	3,5	;RP0=0, select bank0
  7653  1710  1303               	bcf	3,6	;RP1=0, select bank0
  7654  1711  1686               	bsf	6,5	;volatile
  7655                           
  7656                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  7657  1712  300B               	movlw	11
  7658  1713  00F5               	movwf	??_Lcd_Cmd+1
  7659  1714  3062               	movlw	98
  7660  1715  00F4               	movwf	??_Lcd_Cmd
  7661  1716                     u5037:	
  7662  1716  0BF4               	decfsz	??_Lcd_Cmd,f
  7663  1717  2F16               	goto	u5037
  7664  1718  0BF5               	decfsz	??_Lcd_Cmd+1,f
  7665  1719  2F16               	goto	u5037
  7666  171A  0000               	nop
  7667                           
  7668                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  7669  171B  1283               	bcf	3,5	;RP0=0, select bank0
  7670  171C  1303               	bcf	3,6	;RP1=0, select bank0
  7671  171D  1286               	bcf	6,5	;volatile
  7672  171E  0008               	return
  7673  171F                     __end_of_Lcd_Cmd:	
  7674                           
  7675                           	psect	text41
  7676  16EB                     __ptext41:	
  7677 ;; *************** function _Lcd_Port *****************
  7678 ;; Defined at:
  7679 ;;		line 7 in file "./LCD4bits.h"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;  a               1    wreg     unsigned char 
  7682 ;; Auto vars:     Size  Location     Type
  7683 ;;  a               1    3[COMMON] unsigned char 
  7684 ;; Return value:  Size  Location     Type
  7685 ;;                  1    wreg      void 
  7686 ;; Registers used:
  7687 ;;		wreg
  7688 ;; Tracked objects:
  7689 ;;		On entry : 0/0
  7690 ;;		On exit  : 0/0
  7691 ;;		Unchanged: 0/0
  7692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7693 ;;      Params:         0       0       0       0       0
  7694 ;;      Locals:         1       0       0       0       0
  7695 ;;      Temps:          0       0       0       0       0
  7696 ;;      Totals:         1       0       0       0       0
  7697 ;;Total ram usage:        1 bytes
  7698 ;; Hardware stack levels used:    1
  7699 ;; Hardware stack levels required when called:    1
  7700 ;; This function calls:
  7701 ;;		Nothing
  7702 ;; This function is called by:
  7703 ;;		_Lcd_Cmd
  7704 ;;		_Lcd_Init
  7705 ;;		_Lcd_Write_Char
  7706 ;; This function uses a non-reentrant model
  7707 ;;
  7708                           
  7709                           
  7710                           ;psect for function _Lcd_Port
  7711  16EB                     _Lcd_Port:	
  7712                           
  7713                           ;incstack = 0
  7714                           ; Regs used in _Lcd_Port: [wreg]
  7715                           ;Lcd_Port@a stored from wreg
  7716  16EB  00F3               	movwf	Lcd_Port@a
  7717                           
  7718                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  7719  16EC  1C73               	btfss	Lcd_Port@a,0
  7720  16ED  2EF2               	goto	l160
  7721                           
  7722                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  7723  16EE  1283               	bcf	3,5	;RP0=0, select bank0
  7724  16EF  1303               	bcf	3,6	;RP1=0, select bank0
  7725  16F0  1406               	bsf	6,0	;volatile
  7726  16F1  2EF5               	goto	l161
  7727  16F2                     l160:	
  7728                           ;./LCD4bits.h: 11:  else
  7729                           
  7730                           
  7731                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  7732  16F2  1283               	bcf	3,5	;RP0=0, select bank0
  7733  16F3  1303               	bcf	3,6	;RP1=0, select bank0
  7734  16F4  1006               	bcf	6,0	;volatile
  7735  16F5                     l161:	
  7736                           
  7737                           ;./LCD4bits.h: 14:  if(a & 2)
  7738  16F5  1CF3               	btfss	Lcd_Port@a,1
  7739  16F6  2EF9               	goto	l162
  7740                           
  7741                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  7742  16F7  1486               	bsf	6,1	;volatile
  7743  16F8  2EFA               	goto	l163
  7744  16F9                     l162:	
  7745                           ;./LCD4bits.h: 16:  else
  7746                           
  7747                           
  7748                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  7749  16F9  1086               	bcf	6,1	;volatile
  7750  16FA                     l163:	
  7751                           
  7752                           ;./LCD4bits.h: 19:  if(a & 4)
  7753  16FA  1D73               	btfss	Lcd_Port@a,2
  7754  16FB  2EFE               	goto	l164
  7755                           
  7756                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  7757  16FC  1506               	bsf	6,2	;volatile
  7758  16FD  2EFF               	goto	l165
  7759  16FE                     l164:	
  7760                           ;./LCD4bits.h: 21:  else
  7761                           
  7762                           
  7763                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  7764  16FE  1106               	bcf	6,2	;volatile
  7765  16FF                     l165:	
  7766                           
  7767                           ;./LCD4bits.h: 24:  if(a & 8)
  7768  16FF  1DF3               	btfss	Lcd_Port@a,3
  7769  1700  2F03               	goto	l166
  7770                           
  7771                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  7772  1701  1586               	bsf	6,3	;volatile
  7773  1702  0008               	return
  7774  1703                     l166:	
  7775                           ;./LCD4bits.h: 26:  else
  7776                           
  7777                           
  7778                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  7779  1703  1186               	bcf	6,3	;volatile
  7780  1704  0008               	return
  7781  1705                     __end_of_Lcd_Port:	
  7782                           
  7783                           	psect	text42
  7784  1755                     __ptext42:	
  7785 ;; *************** function _manual_pwm *****************
  7786 ;; Defined at:
  7787 ;;		line 58 in file "mainMaster.c"
  7788 ;; Parameters:    Size  Location     Type
  7789 ;;		None
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;		None
  7792 ;; Return value:  Size  Location     Type
  7793 ;;                  1    wreg      void 
  7794 ;; Registers used:
  7795 ;;		wreg, status,2, status,0
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7801 ;;      Params:         0       0       0       0       0
  7802 ;;      Locals:         0       0       0       0       0
  7803 ;;      Temps:          3       0       0       0       0
  7804 ;;      Totals:         3       0       0       0       0
  7805 ;;Total ram usage:        3 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; This function calls:
  7808 ;;		Nothing
  7809 ;; This function is called by:
  7810 ;;		Interrupt level 1
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           
  7815                           ;psect for function _manual_pwm
  7816  1755                     _manual_pwm:	
  7817                           
  7818                           ;mainMaster.c: 59:     if (INTCONbits.T0IF == 1){
  7819  1755  1D0B               	btfss	11,2	;volatile
  7820  1756  2F6D               	goto	i1l313
  7821                           
  7822                           ;mainMaster.c: 61:         cont++;
  7823  1757  3001               	movlw	1
  7824  1758  00F0               	movwf	??_manual_pwm
  7825  1759  0870               	movf	??_manual_pwm,w
  7826  175A  1283               	bcf	3,5	;RP0=0, select bank0
  7827  175B  1303               	bcf	3,6	;RP1=0, select bank0
  7828  175C  07AD               	addwf	_cont,f
  7829                           
  7830                           ;mainMaster.c: 62:             if(cont < 200){
  7831  175D  30C8               	movlw	200
  7832  175E  022D               	subwf	_cont,w
  7833  175F  1803               	skipnc
  7834  1760  2F69               	goto	i1l2958
  7835                           
  7836                           ;mainMaster.c: 63:                 if(cont < val){
  7837  1761  082C               	movf	_val,w
  7838  1762  022D               	subwf	_cont,w
  7839  1763  1803               	skipnc
  7840  1764  2F67               	goto	i1l310
  7841                           
  7842                           ;mainMaster.c: 64:                     PORTAbits.RA1 = 1;
  7843  1765  1485               	bsf	5,1	;volatile
  7844                           
  7845                           ;mainMaster.c: 65:                 }else{
  7846  1766  2F6A               	goto	i1l2960
  7847  1767                     i1l310:	
  7848                           
  7849                           ;mainMaster.c: 66:                     PORTAbits.RA1 = 0;
  7850  1767  1085               	bcf	5,1	;volatile
  7851  1768  2F6A               	goto	i1l2960
  7852  1769                     i1l2958:	
  7853                           
  7854                           ;mainMaster.c: 69:                 cont = 0;
  7855  1769  01AD               	clrf	_cont
  7856  176A                     i1l2960:	
  7857                           
  7858                           ;mainMaster.c: 71:             TMR0 = 56;
  7859  176A  3038               	movlw	56
  7860  176B  0081               	movwf	1	;volatile
  7861                           
  7862                           ;mainMaster.c: 72:             INTCONbits.T0IF = 0;
  7863  176C  110B               	bcf	11,2	;volatile
  7864  176D                     i1l313:	
  7865  176D  0872               	movf	??_manual_pwm+2,w
  7866  176E  008A               	movwf	10
  7867  176F  0E71               	swapf	(??_manual_pwm+1)^(0+4294967168),w
  7868  1770  0083               	movwf	3
  7869  1771  0EFE               	swapf	126,f
  7870  1772  0E7E               	swapf	126,w
  7871  1773  0009               	retfie
  7872  1774                     __end_of_manual_pwm:	
  7873  007E                     btemp	set	126	;btemp
  7874  007E                     wtemp0	set	126
  7875                           
  7876                           	psect	intentry
  7877  0004                     __pintentry:	
  7878                           ;incstack = 0
  7879                           ; Regs used in _manual_pwm: [wreg+status,2+status,0]
  7880                           
  7881  0004                     interrupt_function:	
  7882  007E                     saved_w	set	btemp
  7883  0004  00FE               	movwf	btemp
  7884  0005  0E03               	swapf	3,w
  7885  0006  00F1               	movwf	??_manual_pwm+1
  7886  0007  080A               	movf	10,w
  7887  0008  00F2               	movwf	??_manual_pwm+2
  7888  0009  160A  118A  2F55   	ljmp	_manual_pwm


Data Sizes:
    Strings     271
    Constant    10
    Data        5
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     33      77
    BANK1            80      6       6
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_12(CODE[6]), STR_11(CODE[6]), STR_10(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), temp(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_32(CODE[4]), STR_31(CODE[5]), STR_30(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), temp(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_temp@temp_string	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_time@time_string	PTR unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), 

    day2	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), STR_9(CODE[10]), STR_8(CODE[10]), STR_7(CODE[10]), 
		 -> STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), 
		 -> STR_2(CODE[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), STR_29(CODE[13]), STR_28(CODE[6]), STR_27(CODE[13]), 
		 -> STR_26(CODE[12]), STR_25(CODE[10]), STR_24(CODE[6]), STR_23(CODE[7]), 
		 -> STR_22(CODE[7]), STR_21(CODE[7]), STR_20(CODE[8]), STR_19(CODE[8]), 
		 -> STR_18(CODE[9]), STR_17(CODE[9]), STR_16(CODE[9]), STR_15(CODE[9]), 
		 -> STR_14(CODE[12]), STR_13(CODE[12]), STR_9(CODE[10]), STR_8(CODE[10]), 
		 -> STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), 
		 -> STR_3(CODE[10]), STR_2(CODE[10]), time(BANK0[6]), temp(BANK0[6]), 
		 -> STR_1(CODE[31]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_Char
    _main->___awdiv
    _main->___awmod
    _main->_get_IR
    _main->_get_PIR
    _main->_get_day
    _main->_get_hall
    _main->_get_tripwire
    _main->_strcmp
    _main->_write_RTC
    _write_RTC->_I2C_Master_Write
    _setup->_I2C_Master_Init
    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _open_door->_I2C_Master_Write
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _close_door->_I2C_Master_Write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _manual_pwm in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_UART_Init
    _UART_Init->___aldiv
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _get_temp->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read

Critical Paths under _manual_pwm in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _manual_pwm in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _manual_pwm in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _manual_pwm in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   38856
                                              0 BANK1      6     6      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                     _Lcd_Write_Char
                   _Lcd_Write_String
                      _UART_TX_Empty
                         _UART_Write
                            ___awdiv
                            ___awmod
                             ___bmul
                         _close_door
                             _get_IR
                            _get_PIR
                            _get_day
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                          _open_door
                              _setup
                             _strcmp
                          _write_RTC
 ---------------------------------------------------------------------------------
 (1) _write_RTC                                            5     3      2    2284
                                              5 COMMON     3     1      2
                                              0 BANK0      2     2      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     511
                                              3 COMMON     5     3      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1880
                    _I2C_Master_Init
                           _Lcd_Init
                          _UART_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4    1118
                                              4 COMMON     2     2      0
                                             14 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     805
                                              3 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              0 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     542
                                              4 COMMON     4     4      0
                                             13 BANK0      4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     421
                                              3 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _open_door                                            0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                             5     5      0    3238
                                              2 BANK0      5     5      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             9     9      0    5666
                                             24 BANK0      9     9      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    19      4    1806
                                              9 BANK0     15    11      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     320
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     875
                                              3 COMMON     4     2      2
                                              0 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _close_door                                           0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2011
                                              3 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     793
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     604
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Empty                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    2378
                                              0 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              4 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    2030
                                              7 COMMON     1     0      1
                                              0 BANK0      6     6      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              4 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _manual_pwm                                           3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_TX_Empty
   _UART_Write
   ___awdiv
   ___awmod
   ___bmul
   _close_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_day
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _open_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
     _initOscilador
   _strcmp
   _write_RTC
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _manual_pwm (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      6       6       7        7.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     21      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5E      12        0.0%
ABS                  0      0      5E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Mar 09 21:47:28 2019

                                _i 0036                                  _j 0035  
                                _k 0078                                  pc 0002  
                   ___bmul@product 0075                        __CFG_CP$OFF 0000  
                      get_hall@key 0049                                 _IR 0037  
                     ___awdiv@sign 0048                                 fsr 0004  
                              l203 0B05                                l134 16B7  
                              l160 16F2                                l152 0883  
                              l400 049B                                l161 16F5  
                              l153 0886                                l162 16F9  
                              l163 16FA                                l411 0594  
                              l403 04AB                                l323 0140  
                              l164 16FE                                l420 05EC  
                              l165 16FF                                l166 1703  
                              l238 16C1                                l414 05B0  
                              l431 069A                                l423 060A  
                              l360 02AE                                l328 0121  
                              l417 05CE                                l337 014F  
                              l338 0160                                l429 062D  
                              l375 030C                                l394 047B  
                              l397 048B                                l654 0D18  
                              _GIE 005F                       __CFG_CPD$OFF 0000  
                              _PIR 0038                      ?_get_tripwire 0070  
                              _min 002A                                _val 002C  
                              fsr0 0004                                indf 0000  
                     ___awmod@sign 0048                       __CFG_LVP$OFF 0000  
                             l4020 0114                               l4110 0243  
                             l4022 0124                               l4120 0261  
                             l4112 0249                               l4032 0133  
                             l2442 08C6                               l4122 0267  
                             l4114 024F                               l4130 0295  
                             l4106 0237                               l4050 0162  
                             l2444 08D4                               l2452 08ED  
                             l2540 0ACB                               l2532 0AB4  
                             l4140 02DD                               l4124 026D  
                             l4116 0255                               l4060 016E  
                             l4036 0142                               l3510 0BDF  
                             l2542 0AD1                               l2534 0AB9  
                             l4206 03B0                               l4150 02E2  
                             l4142 02C7                               l4134 02B1  
                             l4118 025B                               l4062 0171  
                             l2448 08E2                               l2544 0AD7  
                             l2536 0ABF                               l2552 0AE3  
                             l4224 03EF                               l4216 03CF  
                             l4208 03BA                               l4128 0274  
                             l4064 0172                               l2650 0841  
                             l3522 0C14                               l2546 0ADE  
                             l2538 0AC5                               l4226 03F9  
                             l4170 0310                               l4058 016D  
                             l2652 084C                               l3508 0BCF  
                             l2548 0ADE                               l2662 0833  
                             l3702 0F7C                               l2654 0854  
                             l3518 0C07                               l4350 0628  
                             l4246 04B9                               l4190 0371  
                             l4182 035D                               l4166 02FF  
                             l3544 0D39                               l3536 0D29  
                             l4272 04C8                               l4168 030F  
                             l2658 082D                               l3722 0FB4  
                             l3714 0FB0                               l3562 0D8C  
                             l3554 0D71                               l3546 0D49  
                             l4098 022E                               l3708 0FA1  
                             l3724 0F19                               l3900 0892  
                             l3726 0FFB                               l3558 0D7E  
                             l3654 0EF8                               l3902 08B8  
                             l4278 054F                               l4198 038B  
                             l3744 0A8B                               l3760 09DF  
                             l2872 0B1E                               l3920 06C4  
                             l3584 09CB                               l3576 09A7  
                             l3680 0F3F                               l3840 0E17  
                             l4480 027E                               l2890 0B4A  
                             l2882 0B26                               l2866 0B13  
                             l3930 06D8                               l3578 09B5  
                             l4482 0AEB                               l4378 0671  
                             l2884 0B34                               l3916 06BD  
                             l3588 09D6                               l4484 0F58  
                             l4388 0686                               l2894 0B55  
                             l3942 06F9                               l3934 06E6  
                             l3686 0F63                               l3928 06CA  
                             l3696 0F7A                               l2898 0B5D  
                             l3938 06F1                               l3980 007F  
                             l3966 0060                               l3992 00B1  
                             l3898 08A1                               STR_1 071C  
                             STR_2 0779                        get_time@min 004C  
                             STR_3 078D                               STR_4 07BF  
                             STR_5 0797                               STR_6 07AB  
                             STR_7 0783                               STR_8 07A1  
                             STR_9 073E                               _BRGH 04C2  
                             _CREN 00C4                               u2115 093B  
                             u2045 08C9                               u2065 08DA  
                             u2075 08E3                               u2505 0B35  
                             u4025 06CD                               u2515 0B41  
                             u2525 0B4B                               u4045 06DE  
                             u4055 06E7                               u5007 0C49  
                             u5017 094B                               u3505 0C08  
                             u5027 095C                               u5037 1716  
                             u2485 0B29                               u3465 0BD3  
                             u3635 09AA                               u3555 0D3D  
                             u3731 0E75                               u3715 0E45  
                             u4275 02A8                               _PEIE 005E  
                             u3732 0E76                               u3485 0BE1  
                             u3733 0E7B                               u3725 0E5E  
                             u3734 0E7C                               u3655 09B6  
                             u3815 0F97                               u3495 0BF6  
                             u3575 0D4B                               u3735 0E81  
                             u3736 0E82                               u3665 09C2  
                             u3585 0D60                               u3675 09CC  
                             u3595 0D72                               u3771 0ED5  
                             u3755 0EA5                               u3772 0ED6  
                             _RCEN 048B                               _RCIF 0065  
                             u3773 0EDB                               u3765 0EBE  
                             u3774 0EDC                               u3935 0DED  
                             u3695 0904                               u3775 0EE1  
                             u3776 0EE2                               u4585 04E1  
                             u3875 0A70                               u3955 0CCC  
                             u4595 051A                               u4907 01D2  
                             u3965 0CEB                               u4917 01E4  
                             u4837 006D                               u3895 0A97  
                             u4927 01F6                               u4847 008C  
                             u4937 0208                               u4857 00A5  
                             u4947 021A                               u4867 018A  
                             u4957 022A                               u4877 019C  
                             u4967 04C1                               u4887 01AE  
                             u4977 0669                               u4897 01C0  
                             u4987 0C29                               u4997 0C39  
                             _TMR0 0001                               _SPEN 00C7  
                             _TRMT 04C1                               _TXEN 04C5  
                             _SYNC 04C4                       __CFG_WRT$OFF 0000  
                             _day1 0079                               _day2 0025  
                             _bank 002E                  ?_Lcd_Write_String 0047  
 __end_of_I2C_Master_RepeatedStart 16A7                               _cont 002D  
                             _door 003A                               _main 003B  
                             _hour 002B                               _temp 003B  
                             _time 0041                               _trip 0039  
                             btemp 007E                               start 000C  
               ??_Lcd_Write_String 0049                      __CFG_IESO$OFF 0000  
                  __end_of_Lcd_Cmd 171F                  ___bmul@multiplier 0076  
                    __CFG_MCLRE$ON 0000                get_temp@temp_string 0066  
                 ?_I2C_Master_Init 0054                   ?_I2C_Master_Read 0073  
                 ?_I2C_Master_Wait 0070                   ?_I2C_Master_Stop 0070  
                  __end_of___aldiv 0D95                              ?_main 0070  
                  __end_of___awdiv 0B62                              STR_10 0816  
                            STR_11 0810                              STR_12 080A  
                            STR_20 07F5                              STR_21 07EE  
                            STR_13 0755                              STR_22 07F6  
                            STR_30 0828                              STR_14 0761  
                            STR_31 0822                              STR_23 07FD  
                            STR_15 07D2                              STR_32 0827  
                            STR_24 0804                              STR_16 07E4  
                            STR_17 07C9                              STR_25 07B5  
                    __CFG_WDTE$OFF 0000                              STR_18 07DB  
                            STR_26 076D                              STR_19 07ED  
                            STR_27 0748                              STR_28 081C  
                  __end_of___awmod 06FE                              STR_29 073B  
                     get_time@hour 004B                              _ANSEL 0188  
                  __end_of___lldiv 0C1D                     ??_get_tripwire 0077  
                  ___awdiv@divisor 0073                    __end_of___lwdiv 09DB  
                            i1l310 1767                              i1l313 176D  
                  __end_of___lwmod 08F2                    ___awdiv@counter 0047  
                            _RCREG 001A                              _SPBRG 0099  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                              _PORTD 0008  
                            _PORTE 0009            __size_of_Lcd_Set_Cursor 0050  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087                              _TRISD 0088  
                            _SSPIE 0463                              _TRISE 0089  
                            _SSPIF 0063                              _TXREG 0019  
                  __end_of_get_PIR 17BA                     __CFG_FCMEN$OFF 0000  
                  __end_of_get_day 099D                        ?_UART_Write 0070  
               __size_of_UART_Init 00D8                              _alarm 002F  
          __size_of_Lcd_Shift_Left 000B                    __end_of_dpowers 071C  
                            _setup 0B62                              _state 007A  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 1000                   __end_of_Lcd_Init 0C7D  
                 __end_of_Lcd_Port 1705                    __initialization 000F  
                     __end_of_main 06B1             __size_of_initOscilador 0055  
                           ??_main 00A0                 __size_of_Lcd_Clear 000B  
                ?_I2C_Master_Start 0070                  ?_I2C_Master_Write 0073  
               ??_I2C_Master_Start 0073                 ??_I2C_Master_Write 0075  
                 ___awdiv@dividend 0075                             ?_setup 0070  
                           _ANSELH 0189                             i1l2960 176A  
                           i1l2958 1769                          ??_Lcd_Cmd 0074  
          __size_of_Lcd_Write_Char 0039                             _SSPADD 0093  
                           _TRISC3 043B                             _TRISC4 043C  
                           _TRISC6 043E                             _TRISC7 043F  
                           _SSPCON 0014                             _SSPBUF 0013  
                   __CFG_PWRTE$OFF 0000           _I2C_Master_RepeatedStart 16A0  
                 __end_of_get_hall 17DD                  __end_of_UART_Init 0F12  
                 __end_of_get_temp 0E3A                   __end_of_get_time 0D06  
                           ___bmul 082B                __size_of_UART_Write 000A  
                        ??___aldiv 0073                          ??___awdiv 0077  
                        ??___awmod 0077                             _change 0034  
                        ??___lldiv 0073                             _get_IR 1774  
                        ??___lwdiv 0077                          ??___lwmod 004E  
         __size_of_Lcd_Shift_Right 000B                   ___awdiv@quotient 0049  
                           _newmin 0027                    ___awmod@divisor 0073  
                        ??_get_PIR 0077                    ___awmod@counter 0047  
            __end_of_UART_TX_Empty 1692                          ??_get_day 0077  
                           _strcat 083C                             _strcmp 088E  
                           saved_w 007E                          ??_sprintf 0054  
                  Lcd_Set_Cursor@a 0049                    Lcd_Set_Cursor@b 0077  
                  Lcd_Set_Cursor@y 004B                    Lcd_Set_Cursor@z 004A  
          __end_of__initialization 0037                      _initOscilador 0AB2  
                __end_of_Lcd_Clear 16D5               __end_of_get_tripwire 1800  
              ___bmul@multiplicand 0073                     __pcstackCOMMON 0070  
                     __pidataBANK0 1687                      __end_of_setup 0BBD  
                   _Lcd_Set_Cursor 0A62                     _OPTION_REGbits 0081  
                   _Lcd_Shift_Left 16D5                          ?_Lcd_Init 0070  
                        ?_Lcd_Port 0070                            ??_setup 0078  
                       __pbssBANK0 0020                     ?_initOscilador 0070  
                       __pmaintext 003B                            ?___bmul 0073  
                          ?_get_IR 0070                         __pintentry 0004  
               __size_of_open_door 001B          __size_of_Lcd_Write_String 0041  
           __end_of_Lcd_Set_Cursor 0AB2                            ?_strcat 0073  
                          ?_strcmp 0073             __end_of_Lcd_Shift_Left 16E0  
                ??_Lcd_Shift_Right 0077                         _close_door 171F  
                     ??_UART_Write 0073                         ??_Lcd_Init 0047  
                       ??_Lcd_Port 0073                            _SSPCON2 0091  
                        ?_get_hall 0070                            _SSPSTAT 0094  
                        ?_get_temp 0070                          ?_get_time 0070  
                       __stringtab 0700                initOscilador@option 0075  
                   _Lcd_Write_Char 092A                            _Lcd_Cmd 1705  
               __size_of_write_RTC 0046                         _manual_pwm 1755  
                          ___aldiv 0D06                    __size_of___bmul 0011  
                          ___awdiv 0B07                            ___awmod 06B1  
                          ___lldiv 0BBD                 __end_of_UART_Write 16CA  
                          ___lwdiv 099D                            ___lwmod 08BE  
                  __size_of_get_IR 0023                            _change1 0033  
                          _change2 0032                            _change3 0031  
                          _change4 0030                    ?_Lcd_Set_Cursor 0077  
                          _get_PIR 1797                            __ptext1 0A1C  
                          __ptext2 088E                            __ptext3 0B62  
                          __ptext4 0AB2                            __ptext5 0E3A  
                          __ptext6 0D06                            __ptext7 0C1D  
                          __ptext8 08F2                            __ptext9 0BBD  
                          _get_day 0963                get_time@time_string 004D  
                  __size_of_strcat 0024                    __size_of_strcmp 0030  
                          _dpowers 0712                    ?_Lcd_Shift_Left 0070  
                 ___awmod@dividend 0075                   ___aldiv@dividend 004B  
                          _newhour 0028           __size_of_I2C_Master_Init 0038  
         __size_of_I2C_Master_Read 002E           __size_of_I2C_Master_Wait 0009  
         __size_of_I2C_Master_Stop 0007                    ??_initOscilador 0073  
                       ??_get_hall 0077                            _sprintf 0F12  
                          clrloop0 16B0             __end_of_Lcd_Write_Char 0963  
                       ??_get_temp 005F                         ??_get_time 0049  
             end_of_initialization 0037              __size_of_get_tripwire 0023  
       ??_I2C_Master_RepeatedStart 0073                  __end_of_open_door 1755  
                       get_PIR@PIR 0049          __size_of_I2C_Master_Start 0007  
        __size_of_I2C_Master_Write 0008                    ___lldiv@divisor 0047  
                  ___lldiv@counter 0053                          _RCSTAbits 0018  
                 ___aldiv@quotient 0051                   I2C_Master_Init@c 0054  
                 I2C_Master_Read@a 0073                          Lcd_Port@a 0073  
                     write_RTC@day 0076                       __pstringtext 0700  
                          strcmp@r 0047                          _UART_Init 0E3A  
                        _PORTAbits 0005                          _PORTBbits 0006  
                        _PORTCbits 0007                          _PORTDbits 0008  
                        _PORTEbits 0009                     UART_Write@data 0073  
                __end_of_write_RTC 0A62                       _get_tripwire 17DD  
                      ?_close_door 0070                          _TRISCbits 0087  
                  ?_Lcd_Write_Char 0070                  Lcd_Write_String@a 0047  
                Lcd_Write_String@i 004C                          _Lcd_Clear 16CA  
                      ?_manual_pwm 0070                     __end_of___bmul 083C  
                 _Lcd_Write_String 09DB                         ?_UART_Init 0055  
                   __end_of_get_IR 1797                     __end_of_strcat 0860  
                   __end_of_strcmp 08BE                start_initialization 000F  
                __size_of_Lcd_Init 0060                  __size_of_Lcd_Port 001A  
                ??_I2C_Master_Init 0074                  ??_I2C_Master_Read 0075  
                ??_I2C_Master_Wait 0073                  ??_I2C_Master_Stop 0073  
           __size_of_UART_TX_Empty 0006           __CFG_FOSC$INTRC_NOCLKOUT 0000  
                       ?_Lcd_Clear 0070                           ??___bmul 0074  
              __size_of_close_door 001B                    _Lcd_Shift_Right 16E0  
                         ??_get_IR 0077                        __pdataBANK0 0068  
                  Lcd_Write_Char@a 0077                    Lcd_Write_Char@y 0076  
                         ??_strcat 0074                           ??_strcmp 0075  
                 write_RTC@minutes 0075                        __pbssCOMMON 0078  
                        ___latbits 0002                      __pcstackBANK0 0047  
                    __pcstackBANK1 00A0                __size_of_manual_pwm 001F  
                __size_of_get_hall 0023                           ?_Lcd_Cmd 0070  
                __size_of_get_temp 00A5                  __size_of_get_time 0089  
                      sprintf@flag 0059                        sprintf@prec 005A  
                 _I2C_Master_Start 1692                   _I2C_Master_Write 16A7  
                 ___lwdiv@dividend 0075                   ??_Lcd_Set_Cursor 0047  
                  get_temp@decimal 0062                           ?___aldiv 0047  
                         ?___awdiv 0073                           ?___awmod 0073  
                         ?___lldiv 0047                           ?___lwdiv 0073  
                         ?___lwmod 004A                   ??_Lcd_Shift_Left 0077  
                      ??_UART_Init 0059                           ?_get_PIR 0070  
                         ?_get_day 0070                    get_temp@tempLSB 0067  
                  get_temp@tempMSB 0065                      _UART_TX_Empty 168C  
                 ___lwdiv@quotient 0048                           ?_sprintf 0050  
                       UART_Init@x 0074                     __size_of_setup 005B  
                  ___aldiv@divisor 0047                  interrupt_function 0004  
                  ___aldiv@counter 004F            __end_of_Lcd_Shift_Right 16EB  
                        clear_ram0 16AF                          _passwordu 0020  
                        _open_door 173A                           Lcd_Cmd@a 0076  
                        _seguridad 0029                        ??_Lcd_Clear 0077  
                UART_Init@baudrate 0055                        __stringbase 0712  
                   ?_UART_TX_Empty 0070                   ??_Lcd_Write_Char 0074  
                     ??_close_door 0075                           _Lcd_Init 0C1D  
                         _Lcd_Port 16EB                          _write_RTC 0A1C  
              I2C_Master_Read@temp 0047              __end_of_initOscilador 0B07  
         __end_of_Lcd_Write_String 0A1C                   __size_of_Lcd_Cmd 001A  
                       ?_open_door 0070                       ??_manual_pwm 0070  
               __end_of_close_door 173A                   __size_of___aldiv 008F  
__size_of_I2C_Master_RepeatedStart 0007                   __size_of___awdiv 005B  
                 __size_of___awmod 004D          ?_I2C_Master_RepeatedStart 0070  
                 __size_of___lldiv 0060                   __size_of___lwdiv 003E  
                 __size_of___lwmod 0034                 __end_of__stringtab 0712  
                 __size_of_get_PIR 0023                   __size_of_get_day 003A  
                       sprintf@val 005B                    _I2C_Master_Init 08F2  
                  _I2C_Master_Read 0860                    _I2C_Master_Wait 16B7  
                       strcat@from 0073                    _I2C_Master_Stop 1699  
                  ___lwdiv@divisor 0073                    ___lwdiv@counter 0047  
                         __ptext10 173A                           __ptext11 17DD  
                         __ptext20 0963                           __ptext12 0C7D  
                         __ptext21 16A0                           __ptext13 0D95  
                         __ptext30 06B1                           __ptext22 1797  
                         __ptext14 083C                           __ptext31 0B07  
                         __ptext23 1774                           __ptext15 0F12  
                         __ptext40 1705                           __ptext32 16C0  
                         __ptext24 0860                           __ptext16 08BE  
                         __ptext41 16EB                           __ptext33 168C  
                         __ptext25 171F                           __ptext17 099D  
                         __ptext42 1755                           __ptext34 09DB  
                         __ptext26 16A7                           __ptext18 082B  
                         __ptext35 092A                           __ptext27 1699  
                         __ptext19 17BA                           __ptext36 16E0  
                         __ptext28 1692                           __ptext37 16D5  
                         __ptext29 16B7                           __ptext38 0A62  
                         __ptext39 16CA                         ?_write_RTC 0075  
                __CFG_BOR4V$BOR40V 0000                           _get_hall 17BA  
                         _get_temp 0D95                           _get_time 0C7D  
                 __size_of_sprintf 00EE                 __end_of_manual_pwm 1774  
                    __size_of_main 0676                   ?_Lcd_Shift_Right 0070  
                         get_IR@IR 0049                           _password 0068  
                         get_day@d 0049                    ??_UART_TX_Empty 0073  
         __end_of_I2C_Master_Start 1699           __end_of_I2C_Master_Write 16AF  
                       _INTCONbits 000B                 Lcd_Write_Char@temp 0075  
                         intlevel1 0000                          sprintf@ap 0058  
                        sprintf@sp 005D                   ___lwmod@dividend 004C  
                 ___lldiv@dividend 004B                        ??_open_door 0075  
                        stringcode 070A                         _OSCCONbits 008F  
          __end_of_I2C_Master_Init 092A            __end_of_I2C_Master_Read 088E  
          __end_of_I2C_Master_Wait 16C0            __end_of_I2C_Master_Stop 16A0  
               Lcd_Set_Cursor@temp 004C                      write_RTC@hour 0077  
                         sprintf@c 005E                           sprintf@f 0050  
                         strcat@cp 0076                           strcat@to 0075  
                         strcmp@s1 0048                           strcmp@s2 0073  
                 ___lldiv@quotient 004F                  I2C_Master_Write@d 0073  
                  ___lwmod@divisor 004A                    ___lwmod@counter 004F  
                 get_tripwire@trip 0049                           stringtab 0700  
                     ___aldiv@sign 0050                         _UART_Write 16C0  
                      _SSPCON2bits 0091                        ??_write_RTC 0047  
                       _SSPCONbits 0014  

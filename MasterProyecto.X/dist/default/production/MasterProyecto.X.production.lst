

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Feb 28 16:29:22 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2
    26                           	psect	text17,local,class=CODE,merge=1,delta=2
    27                           	psect	text18,local,class=CODE,merge=1,delta=2
    28                           	psect	text19,local,class=CODE,merge=1,delta=2
    29                           	psect	text20,local,class=CODE,merge=1,delta=2
    30                           	psect	text21,local,class=CODE,merge=1,delta=2
    31                           	psect	text22,local,class=CODE,merge=1,delta=2
    32                           	psect	text23,local,class=CODE,merge=1,delta=2
    33                           	psect	text24,local,class=CODE,merge=1,delta=2
    34                           	psect	text25,local,class=CODE,merge=1,delta=2
    35                           	psect	text26,local,class=CODE,merge=1,delta=2
    36                           	psect	text27,local,class=CODE,merge=1,delta=2
    37                           	psect	text28,local,class=CODE,merge=1,delta=2
    38                           	psect	text29,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     
    41                           ; Version 2.05
    42                           ; Generated 20/12/2018 GMT
    43                           ; 
    44                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16F887 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0008                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  000E                     	;# 
    91  000F                     	;# 
    92  0010                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0013                     	;# 
    96  0014                     	;# 
    97  0015                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  001D                     	;# 
   108  001E                     	;# 
   109  001F                     	;# 
   110  0081                     	;# 
   111  0085                     	;# 
   112  0086                     	;# 
   113  0087                     	;# 
   114  0088                     	;# 
   115  0089                     	;# 
   116  008C                     	;# 
   117  008D                     	;# 
   118  008E                     	;# 
   119  008F                     	;# 
   120  0090                     	;# 
   121  0091                     	;# 
   122  0092                     	;# 
   123  0093                     	;# 
   124  0093                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0095                     	;# 
   128  0096                     	;# 
   129  0097                     	;# 
   130  0098                     	;# 
   131  0099                     	;# 
   132  009A                     	;# 
   133  009B                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  009F                     	;# 
   138  0105                     	;# 
   139  0107                     	;# 
   140  0108                     	;# 
   141  0109                     	;# 
   142  010C                     	;# 
   143  010C                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  0185                     	;# 
   148  0187                     	;# 
   149  0188                     	;# 
   150  0189                     	;# 
   151  018C                     	;# 
   152  018D                     	;# 
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0008                     	;# 
   162  0009                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  000E                     	;# 
   169  000F                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0013                     	;# 
   174  0014                     	;# 
   175  0015                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0017                     	;# 
   179  0018                     	;# 
   180  0019                     	;# 
   181  001A                     	;# 
   182  001B                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  001D                     	;# 
   186  001E                     	;# 
   187  001F                     	;# 
   188  0081                     	;# 
   189  0085                     	;# 
   190  0086                     	;# 
   191  0087                     	;# 
   192  0088                     	;# 
   193  0089                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  008F                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0093                     	;# 
   203  0093                     	;# 
   204  0094                     	;# 
   205  0095                     	;# 
   206  0096                     	;# 
   207  0097                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009C                     	;# 
   213  009D                     	;# 
   214  009E                     	;# 
   215  009F                     	;# 
   216  0105                     	;# 
   217  0107                     	;# 
   218  0108                     	;# 
   219  0109                     	;# 
   220  010C                     	;# 
   221  010C                     	;# 
   222  010D                     	;# 
   223  010E                     	;# 
   224  010F                     	;# 
   225  0185                     	;# 
   226  0187                     	;# 
   227  0188                     	;# 
   228  0189                     	;# 
   229  018C                     	;# 
   230  018D                     	;# 
   231                           
   232                           	psect	strings
   233  0003                     __pstrings:	
   234  0003                     stringtab:	
   235  0003                     __stringtab:	
   236                           
   237                           ;	String table - string pointers are 1 byte each
   238  0003  1BFF               	btfsc	btemp+1,7
   239  0004  280D               	ljmp	stringcode
   240  0005  1383               	bcf	3,7
   241  0006  187F               	btfsc	btemp+1,0
   242  0007  1783               	bsf	3,7
   243  0008  0800               	movf	0,w
   244  0009  0A84               	incf	4,f
   245  000A  1903               	skipnz
   246  000B  0AFF               	incf	btemp+1,f
   247  000C  0008               	return
   248  000D                     stringcode:	
   249  000D                     stringdir:	
   250  000D  3000               	movlw	high stringdir
   251  000E  008A               	movwf	10
   252  000F  0804               	movf	4,w
   253  0010  0A84               	incf	4,f
   254  0011  0782               	addwf	2,f
   255  0012                     __stringbase:	
   256  0012  3400               	retlw	0
   257  0013                     __end_of__stringtab:	
   258  0013                     _dpowers:	
   259  0013  3401               	retlw	1
   260  0014  3400               	retlw	0
   261  0015  340A               	retlw	10
   262  0016  3400               	retlw	0
   263  0017  3464               	retlw	100
   264  0018  3400               	retlw	0
   265  0019  34E8               	retlw	232
   266  001A  3403               	retlw	3
   267  001B  3410               	retlw	16
   268  001C  3427               	retlw	39
   269  001D                     __end_of_dpowers:	
   270  0005                     _PORTA	set	5
   271  0006                     _PORTB	set	6
   272  0007                     _PORTCbits	set	7
   273  0005                     _PORTAbits	set	5
   274  0006                     _PORTBbits	set	6
   275  0013                     _SSPBUF	set	19
   276  0014                     _SSPCON	set	20
   277  0063                     _SSPIF	set	99
   278  005E                     _PEIE	set	94
   279  005F                     _GIE	set	95
   280  0087                     _TRISC	set	135
   281  0085                     _TRISA	set	133
   282  0086                     _TRISB	set	134
   283  008F                     _OSCCONbits	set	143
   284  0091                     _SSPCON2bits	set	145
   285  0094                     _SSPSTAT	set	148
   286  0093                     _SSPADD	set	147
   287  0091                     _SSPCON2	set	145
   288  0463                     _SSPIE	set	1123
   289  048B                     _RCEN	set	1163
   290  043C                     _TRISC4	set	1084
   291  043B                     _TRISC3	set	1083
   292  0188                     _ANSEL	set	392
   293  0189                     _ANSELH	set	393
   294  001D                     STR_1:	
   295  001D  3444               	retlw	68	;'D'
   296  001E  346F               	retlw	111	;'o'
   297  001F  346F               	retlw	111	;'o'
   298  0020  3472               	retlw	114	;'r'
   299  0021  3420               	retlw	32	;' '
   300  0022  344F               	retlw	79	;'O'
   301  0023  3450               	retlw	80	;'P'
   302  0024  3445               	retlw	69	;'E'
   303  0025  344E               	retlw	78	;'N'
   304  0026  3420               	retlw	32	;' '
   305  0027  3420               	retlw	32	;' '
   306  0028  3400               	retlw	0
   307  0029                     STR_2:	
   308  0029  3444               	retlw	68	;'D'
   309  002A  346F               	retlw	111	;'o'
   310  002B  346F               	retlw	111	;'o'
   311  002C  3472               	retlw	114	;'r'
   312  002D  3420               	retlw	32	;' '
   313  002E  3443               	retlw	67	;'C'
   314  002F  344C               	retlw	76	;'L'
   315  0030  344F               	retlw	79	;'O'
   316  0031  3453               	retlw	83	;'S'
   317  0032  3445               	retlw	69	;'E'
   318  0033  3400               	retlw	0
   319  0034                     STR_4:	
   320  0034  3454               	retlw	84	;'T'
   321  0035  3472               	retlw	114	;'r'
   322  0036  3469               	retlw	105	;'i'
   323  0037  3470               	retlw	112	;'p'
   324  0038  3420               	retlw	32	;' '
   325  0039  344F               	retlw	79	;'O'
   326  003A  344E               	retlw	78	;'N'
   327  003B  3420               	retlw	32	;' '
   328  003C  3400               	retlw	0
   329  003D                     STR_5:	
   330  003D  3454               	retlw	84	;'T'
   331  003E  3472               	retlw	114	;'r'
   332  003F  3469               	retlw	105	;'i'
   333  0040  3470               	retlw	112	;'p'
   334  0041  3420               	retlw	32	;' '
   335  0042  344F               	retlw	79	;'O'
   336  0043  3446               	retlw	70	;'F'
   337  0044  3446               	retlw	70	;'F'
   338  0045  3400               	retlw	0
   339  0046                     STR_6:	
   340  0046  3450               	retlw	80	;'P'
   341  0047  3449               	retlw	73	;'I'
   342  0048  3452               	retlw	82	;'R'
   343  0049  3420               	retlw	32	;' '
   344  004A  344F               	retlw	79	;'O'
   345  004B  344E               	retlw	78	;'N'
   346  004C  3420               	retlw	32	;' '
   347  004D  3400               	retlw	0
   348  004E                     STR_7:	
   349  004E  3450               	retlw	80	;'P'
   350  004F  3449               	retlw	73	;'I'
   351  0050  3452               	retlw	82	;'R'
   352  0051  3420               	retlw	32	;' '
   353  0052  344F               	retlw	79	;'O'
   354  0053  3446               	retlw	70	;'F'
   355  0054  3446               	retlw	70	;'F'
   356  0055  3400               	retlw	0
   357  0056                     STR_3:	
   358  0056  3432               	retlw	50	;'2'
   359  0057  3433               	retlw	51	;'3'
   360  0058  342E               	retlw	46	;'.'
   361  0059  3435               	retlw	53	;'5'
   362  005A  3430               	retlw	48	;'0'
   363  005B  3400               	retlw	0
   364  005C                     STR_11:	
   365  005C  342E               	retlw	46	;'.'
   366  005D  3425               	retlw	37	;'%'
   367  005E  3464               	retlw	100	;'d'
   368  005F  3430               	retlw	48	;'0'
   369  0060  3400               	retlw	0
   370  0061                     STR_12:	
   371  0061  342E               	retlw	46	;'.'
   372  0062  3425               	retlw	37	;'%'
   373  0063  3464               	retlw	100	;'d'
   374  0064  3400               	retlw	0
   375  0047                     
   376                           ; #config settings
   377  0000                     
   378                           	psect	cinit
   379  07F3                     start_initialization:	
   380  07F3                     __initialization:	
   381                           
   382                           ; Clear objects allocated to BANK0
   383  07F3  1283               	bcf	3,5	;RP0=0, select bank0
   384  07F4  1303               	bcf	3,6	;RP1=0, select bank0
   385  07F5  01BC               	clrf	__pbssBANK0& (0+127)
   386  07F6  01BD               	clrf	(__pbssBANK0+1)& (0+127)
   387  07F7  01BE               	clrf	(__pbssBANK0+2)& (0+127)
   388  07F8  01BF               	clrf	(__pbssBANK0+3)& (0+127)
   389  07F9  01C0               	clrf	(__pbssBANK0+4)& (0+127)
   390  07FA  01C1               	clrf	(__pbssBANK0+5)& (0+127)
   391  07FB  01C2               	clrf	(__pbssBANK0+6)& (0+127)
   392  07FC                     end_of_initialization:	
   393                           ;End of C runtime variable initialization code
   394                           
   395  07FC                     __end_of__initialization:	
   396  07FC  0183               	clrf	3
   397  07FD  120A  118A  2ED7   	ljmp	_main	;jump to C main() function
   398                           
   399                           	psect	bssBANK0
   400  003C                     __pbssBANK0:	
   401  003C                     _state:	
   402  003C                     	ds	1
   403  003D                     _IR:	
   404  003D                     	ds	1
   405  003E                     _PIR:	
   406  003E                     	ds	1
   407  003F                     _trip:	
   408  003F                     	ds	1
   409  0040                     _door:	
   410  0040                     	ds	1
   411  0041                     _temp:	
   412  0041                     	ds	1
   413  0042                     _time:	
   414  0042                     	ds	1
   415                           
   416                           	psect	cstackCOMMON
   417  0070                     __pcstackCOMMON:	
   418  0070                     ?_setup:	
   419  0070                     ?_get_time:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?_get_temp:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_get_hall:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_get_tripwire:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_get_PIR:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_get_IR:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_strcat:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_I2C_Master_Wait:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ??_I2C_Master_Wait:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?_I2C_Master_Start:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ??_I2C_Master_Start:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_I2C_Master_RepeatedStart:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ??_I2C_Master_RepeatedStart:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ?_I2C_Master_Stop:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ??_I2C_Master_Stop:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ?_I2C_Master_Write:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_Lcd_Port:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ??_Lcd_Port:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_Lcd_Cmd:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ?_Lcd_Clear:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ?_Lcd_Init:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ?_Lcd_Write_Char:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ?_initOscilador:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ??_initOscilador:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     ?_main:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     ?___bmul:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     ?_strcmp:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0070                     ?_I2C_Master_Read:	
   501                           ; 2 bytes @ 0x0
   502                           
   503  0070                     ?___lwdiv:	
   504                           ; 2 bytes @ 0x0
   505                           
   506  0070                     ?___lldiv:	
   507                           ; 2 bytes @ 0x0
   508                           
   509  0070                     Lcd_Port@a:	
   510                           ; 4 bytes @ 0x0
   511                           
   512  0070                     ___bmul@multiplicand:	
   513                           ; 1 bytes @ 0x0
   514                           
   515  0070                     strcat@from:	
   516                           ; 1 bytes @ 0x0
   517                           
   518  0070                     strcmp@s2:	
   519                           ; 1 bytes @ 0x0
   520                           
   521  0070                     I2C_Master_Write@d:	
   522                           ; 1 bytes @ 0x0
   523                           
   524  0070                     I2C_Master_Read@a:	
   525                           ; 2 bytes @ 0x0
   526                           
   527  0070                     ___lwdiv@divisor:	
   528                           ; 2 bytes @ 0x0
   529                           
   530  0070                     ___lldiv@divisor:	
   531                           ; 2 bytes @ 0x0
   532                           
   533                           
   534                           ; 4 bytes @ 0x0
   535  0070                     	ds	1
   536  0071                     ??_strcat:	
   537  0071                     ??_Lcd_Cmd:	
   538                           ; 1 bytes @ 0x1
   539                           
   540  0071                     ??_Lcd_Write_Char:	
   541                           ; 1 bytes @ 0x1
   542                           
   543  0071                     ??___bmul:	
   544                           ; 1 bytes @ 0x1
   545                           
   546                           
   547                           ; 1 bytes @ 0x1
   548  0071                     	ds	1
   549  0072                     ??_strcmp:	
   550  0072                     ??_I2C_Master_Write:	
   551                           ; 1 bytes @ 0x2
   552                           
   553  0072                     ??_I2C_Master_Read:	
   554                           ; 1 bytes @ 0x2
   555                           
   556  0072                     Lcd_Write_Char@temp:	
   557                           ; 1 bytes @ 0x2
   558                           
   559  0072                     initOscilador@option:	
   560                           ; 1 bytes @ 0x2
   561                           
   562  0072                     ___bmul@product:	
   563                           ; 1 bytes @ 0x2
   564                           
   565  0072                     strcat@to:	
   566                           ; 1 bytes @ 0x2
   567                           
   568  0072                     ___lwdiv@dividend:	
   569                           ; 1 bytes @ 0x2
   570                           
   571                           
   572                           ; 2 bytes @ 0x2
   573  0072                     	ds	1
   574  0073                     Lcd_Cmd@a:	
   575  0073                     Lcd_Write_Char@y:	
   576                           ; 1 bytes @ 0x3
   577                           
   578  0073                     ___bmul@multiplier:	
   579                           ; 1 bytes @ 0x3
   580                           
   581  0073                     strcat@cp:	
   582                           ; 1 bytes @ 0x3
   583                           
   584                           
   585                           ; 1 bytes @ 0x3
   586  0073                     	ds	1
   587  0074                     ??_Lcd_Clear:	
   588  0074                     ?_Lcd_Set_Cursor:	
   589                           ; 1 bytes @ 0x4
   590                           
   591  0074                     ??_Lcd_Init:	
   592                           ; 1 bytes @ 0x4
   593                           
   594  0074                     ??___lwdiv:	
   595                           ; 1 bytes @ 0x4
   596                           
   597  0074                     Lcd_Set_Cursor@b:	
   598                           ; 1 bytes @ 0x4
   599                           
   600  0074                     Lcd_Write_Char@a:	
   601                           ; 1 bytes @ 0x4
   602                           
   603  0074                     I2C_Master_Read@temp:	
   604                           ; 1 bytes @ 0x4
   605                           
   606  0074                     ___lldiv@dividend:	
   607                           ; 2 bytes @ 0x4
   608                           
   609                           
   610                           ; 4 bytes @ 0x4
   611  0074                     	ds	1
   612  0075                     ??_Lcd_Set_Cursor:	
   613  0075                     ?_Lcd_Write_String:	
   614                           ; 1 bytes @ 0x5
   615                           
   616  0075                     strcmp@r:	
   617                           ; 1 bytes @ 0x5
   618                           
   619  0075                     Lcd_Write_String@a:	
   620                           ; 1 bytes @ 0x5
   621                           
   622  0075                     ___lwdiv@quotient:	
   623                           ; 2 bytes @ 0x5
   624                           
   625                           
   626                           ; 2 bytes @ 0x5
   627  0075                     	ds	1
   628  0076                     ??_get_time:	
   629  0076                     ??_get_hall:	
   630                           ; 1 bytes @ 0x6
   631                           
   632  0076                     ??_get_tripwire:	
   633                           ; 1 bytes @ 0x6
   634                           
   635  0076                     ??_get_PIR:	
   636                           ; 1 bytes @ 0x6
   637                           
   638  0076                     ??_get_IR:	
   639                           ; 1 bytes @ 0x6
   640                           
   641  0076                     strcmp@s1:	
   642                           ; 1 bytes @ 0x6
   643                           
   644                           
   645                           ; 1 bytes @ 0x6
   646  0076                     	ds	1
   647  0077                     ??_Lcd_Write_String:	
   648  0077                     Lcd_Set_Cursor@a:	
   649                           ; 1 bytes @ 0x7
   650                           
   651  0077                     get_hall@key:	
   652                           ; 1 bytes @ 0x7
   653                           
   654  0077                     get_tripwire@trip:	
   655                           ; 1 bytes @ 0x7
   656                           
   657  0077                     get_PIR@PIR:	
   658                           ; 1 bytes @ 0x7
   659                           
   660  0077                     get_IR@IR:	
   661                           ; 1 bytes @ 0x7
   662                           
   663  0077                     ___lwdiv@counter:	
   664                           ; 1 bytes @ 0x7
   665                           
   666                           
   667                           ; 1 bytes @ 0x7
   668  0077                     	ds	1
   669  0078                     ??___lldiv:	
   670  0078                     ?___lwmod:	
   671                           ; 1 bytes @ 0x8
   672                           
   673  0078                     Lcd_Set_Cursor@z:	
   674                           ; 2 bytes @ 0x8
   675                           
   676  0078                     ___lwmod@divisor:	
   677                           ; 1 bytes @ 0x8
   678                           
   679                           
   680                           ; 2 bytes @ 0x8
   681  0078                     	ds	1
   682  0079                     Lcd_Set_Cursor@y:	
   683  0079                     ___lldiv@quotient:	
   684                           ; 1 bytes @ 0x9
   685                           
   686                           
   687                           ; 4 bytes @ 0x9
   688  0079                     	ds	1
   689  007A                     Lcd_Set_Cursor@temp:	
   690  007A                     Lcd_Write_String@i:	
   691                           ; 1 bytes @ 0xA
   692                           
   693  007A                     ___lwmod@dividend:	
   694                           ; 2 bytes @ 0xA
   695                           
   696                           
   697                           ; 2 bytes @ 0xA
   698  007A                     	ds	2
   699  007C                     ??___lwmod:	
   700                           
   701                           ; 1 bytes @ 0xC
   702  007C                     	ds	1
   703  007D                     ___lldiv@counter:	
   704  007D                     ___lwmod@counter:	
   705                           ; 1 bytes @ 0xD
   706                           
   707                           
   708                           ; 1 bytes @ 0xD
   709  007D                     	ds	1
   710  007E                     ??_setup:	
   711                           
   712                           	psect	cstackBANK0
   713  0020                     __pcstackBANK0:	
   714                           ; 1 bytes @ 0xE
   715                           
   716  0020                     ?_I2C_Master_Init:	
   717  0020                     ?_sprintf:	
   718                           ; 1 bytes @ 0x0
   719                           
   720  0020                     sprintf@f:	
   721                           ; 2 bytes @ 0x0
   722                           
   723  0020                     I2C_Master_Init@c:	
   724                           ; 1 bytes @ 0x0
   725                           
   726  0020                     get_time@string_time:	
   727                           ; 4 bytes @ 0x0
   728                           
   729                           
   730                           ; 6 bytes @ 0x0
   731  0020                     	ds	3
   732  0023                     ??_sprintf:	
   733                           
   734                           ; 1 bytes @ 0x3
   735  0023                     	ds	1
   736  0024                     ??_I2C_Master_Init:	
   737                           
   738                           ; 1 bytes @ 0x4
   739  0024                     	ds	2
   740  0026                     get_time@hour:	
   741  0026                     sprintf@ap:	
   742                           ; 1 bytes @ 0x6
   743                           
   744                           
   745                           ; 1 bytes @ 0x6
   746  0026                     	ds	1
   747  0027                     get_time@min:	
   748  0027                     sprintf@flag:	
   749                           ; 1 bytes @ 0x7
   750                           
   751                           
   752                           ; 1 bytes @ 0x7
   753  0027                     	ds	1
   754  0028                     sprintf@prec:	
   755                           
   756                           ; 1 bytes @ 0x8
   757  0028                     	ds	1
   758  0029                     sprintf@val:	
   759                           
   760                           ; 2 bytes @ 0x9
   761  0029                     	ds	2
   762  002B                     sprintf@sp:	
   763                           
   764                           ; 1 bytes @ 0xB
   765  002B                     	ds	1
   766  002C                     sprintf@c:	
   767                           
   768                           ; 1 bytes @ 0xC
   769  002C                     	ds	1
   770  002D                     ??_get_temp:	
   771                           
   772                           ; 1 bytes @ 0xD
   773  002D                     	ds	3
   774  0030                     get_temp@temperature:	
   775                           
   776                           ; 6 bytes @ 0x10
   777  0030                     	ds	6
   778  0036                     get_temp@decimal:	
   779                           
   780                           ; 3 bytes @ 0x16
   781  0036                     	ds	3
   782  0039                     get_temp@tempMSB:	
   783                           
   784                           ; 1 bytes @ 0x19
   785  0039                     	ds	1
   786  003A                     get_temp@tempLSB:	
   787                           
   788                           ; 1 bytes @ 0x1A
   789  003A                     	ds	1
   790  003B                     ??_main:	
   791                           
   792                           ; 1 bytes @ 0x1B
   793  003B                     	ds	1
   794                           
   795                           	psect	maintext
   796  06D7                     __pmaintext:	
   797 ;;
   798 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   799 ;;
   800 ;; *************** function _main *****************
   801 ;; Defined at:
   802 ;;		line 51 in file "mainMaster.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;		None
   807 ;; Return value:  Size  Location     Type
   808 ;;                  1    wreg      void 
   809 ;; Registers used:
   810 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   811 ;; Tracked objects:
   812 ;;		On entry : B00/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   816 ;;      Params:         0       0       0       0       0
   817 ;;      Locals:         0       0       0       0       0
   818 ;;      Temps:          0       1       0       0       0
   819 ;;      Totals:         0       1       0       0       0
   820 ;;Total ram usage:        1 bytes
   821 ;; Hardware stack levels required when called:    4
   822 ;; This function calls:
   823 ;;		_Lcd_Clear
   824 ;;		_Lcd_Set_Cursor
   825 ;;		_Lcd_Write_Char
   826 ;;		_Lcd_Write_String
   827 ;;		_get_IR
   828 ;;		_get_PIR
   829 ;;		_get_hall
   830 ;;		_get_temp
   831 ;;		_get_time
   832 ;;		_get_tripwire
   833 ;;		_setup
   834 ;;		_strcmp
   835 ;; This function is called by:
   836 ;;		Startup code after reset
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           
   841                           ;psect for function _main
   842  06D7                     _main:	
   843                           
   844                           ;mainMaster.c: 52:     setup();
   845                           
   846                           ;incstack = 0
   847                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   848  06D7  120A  118A  21FB  120A  118A  	fcall	_setup
   849                           
   850                           ;mainMaster.c: 53:     state = 0;
   851  06DC  1283               	bcf	3,5	;RP0=0, select bank0
   852  06DD  1303               	bcf	3,6	;RP1=0, select bank0
   853  06DE  01BC               	clrf	_state
   854                           
   855                           ;mainMaster.c: 54:     Lcd_Clear();
   856  06DF  120A  118A  210B  120A  118A  	fcall	_Lcd_Clear
   857  06E4                     l1836:	
   858                           
   859                           ;mainMaster.c: 57:         if (state == 0){
   860  06E4  1283               	bcf	3,5	;RP0=0, select bank0
   861  06E5  1303               	bcf	3,6	;RP1=0, select bank0
   862  06E6  083C               	movf	_state,w
   863  06E7  1D03               	btfss	3,2
   864  06E8  2F8E               	goto	l1870
   865                           
   866                           ;mainMaster.c: 60:         time = get_time();
   867  06E9  120A  118A  24EC  120A  118A  	fcall	_get_time
   868  06EE  1283               	bcf	3,5	;RP0=0, select bank0
   869  06EF  1303               	bcf	3,6	;RP1=0, select bank0
   870  06F0  00BB               	movwf	??_main
   871  06F1  083B               	movf	??_main,w
   872  06F2  00C2               	movwf	_time
   873                           
   874                           ;mainMaster.c: 61:         Lcd_Set_Cursor(1,1);
   875  06F3  01F4               	clrf	Lcd_Set_Cursor@b
   876  06F4  0AF4               	incf	Lcd_Set_Cursor@b,f
   877  06F5  3001               	movlw	1
   878  06F6  120A  118A  2394  120A  118A  	fcall	_Lcd_Set_Cursor
   879                           
   880                           ;mainMaster.c: 62:         Lcd_Write_String(time);
   881  06FB  1283               	bcf	3,5	;RP0=0, select bank0
   882  06FC  1303               	bcf	3,6	;RP1=0, select bank0
   883  06FD  0842               	movf	_time,w
   884  06FE  00F5               	movwf	Lcd_Write_String@a
   885  06FF  3000               	movlw	0
   886  0700  00F6               	movwf	Lcd_Write_String@a+1
   887  0701  120A  118A  2357  120A  118A  	fcall	_Lcd_Write_String
   888                           
   889                           ;mainMaster.c: 63:         temp = get_temp();
   890  0706  120A  118A  2562  120A  118A  	fcall	_get_temp
   891  070B  1283               	bcf	3,5	;RP0=0, select bank0
   892  070C  1303               	bcf	3,6	;RP1=0, select bank0
   893  070D  00BB               	movwf	??_main
   894  070E  083B               	movf	??_main,w
   895  070F  00C1               	movwf	_temp
   896                           
   897                           ;mainMaster.c: 64:         Lcd_Set_Cursor(2,1);
   898  0710  01F4               	clrf	Lcd_Set_Cursor@b
   899  0711  0AF4               	incf	Lcd_Set_Cursor@b,f
   900  0712  3002               	movlw	2
   901  0713  120A  118A  2394  120A  118A  	fcall	_Lcd_Set_Cursor
   902                           
   903                           ;mainMaster.c: 65:         Lcd_Write_String(temp);
   904  0718  1283               	bcf	3,5	;RP0=0, select bank0
   905  0719  1303               	bcf	3,6	;RP1=0, select bank0
   906  071A  0841               	movf	_temp,w
   907  071B  00F5               	movwf	Lcd_Write_String@a
   908  071C  3000               	movlw	0
   909  071D  00F6               	movwf	Lcd_Write_String@a+1
   910  071E  120A  118A  2357  120A  118A  	fcall	_Lcd_Write_String
   911                           
   912                           ;mainMaster.c: 66:         Lcd_Write_Char(223);
   913  0723  30DF               	movlw	223
   914  0724  120A  118A  22E2  120A  118A  	fcall	_Lcd_Write_Char
   915                           
   916                           ;mainMaster.c: 67:         Lcd_Write_Char('C');
   917  0729  3043               	movlw	67
   918  072A  120A  118A  22E2  120A  118A  	fcall	_Lcd_Write_Char
   919                           
   920                           ;mainMaster.c: 68:         door = get_hall();
   921  072F  120A  118A  2199  120A  118A  	fcall	_get_hall
   922  0734  1283               	bcf	3,5	;RP0=0, select bank0
   923  0735  1303               	bcf	3,6	;RP1=0, select bank0
   924  0736  00BB               	movwf	??_main
   925  0737  083B               	movf	??_main,w
   926  0738  00C0               	movwf	_door
   927                           
   928                           ;mainMaster.c: 69:         Lcd_Set_Cursor(1,7);
   929  0739  3007               	movlw	7
   930  073A  00BB               	movwf	??_main
   931  073B  083B               	movf	??_main,w
   932  073C  00F4               	movwf	Lcd_Set_Cursor@b
   933  073D  3001               	movlw	1
   934  073E  120A  118A  2394  120A  118A  	fcall	_Lcd_Set_Cursor
   935                           
   936                           ;mainMaster.c: 70:         if (door == 1){
   937  0743  1283               	bcf	3,5	;RP0=0, select bank0
   938  0744  1303               	bcf	3,6	;RP1=0, select bank0
   939  0745  0340               	decf	_door,w
   940  0746  1D03               	btfss	3,2
   941  0747  2F4A               	goto	l1858
   942                           
   943                           ;mainMaster.c: 71:             Lcd_Write_String("Door OPEN  ");
   944  0748  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   945  0749  2F4B               	goto	L1
   946  074A                     l1858:	
   947                           ;mainMaster.c: 72:         } else {
   948                           
   949                           
   950                           ;mainMaster.c: 73:             Lcd_Write_String("Door CLOSE");
   951  074A  3017               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   952  074B                     L1:	
   953  074B  00F5               	movwf	Lcd_Write_String@a
   954  074C  3080               	movlw	128
   955  074D  00F6               	movwf	Lcd_Write_String@a+1
   956  074E  120A  118A  2357  120A  118A  	fcall	_Lcd_Write_String
   957                           
   958                           ;mainMaster.c: 76:         if (strcmp(temp,"23.50") > 0){
   959                           
   960                           ;mainMaster.c: 74:         }
   961  0753  3044               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   962  0754  1283               	bcf	3,5	;RP0=0, select bank0
   963  0755  1303               	bcf	3,6	;RP1=0, select bank0
   964  0756  00BB               	movwf	??_main
   965  0757  083B               	movf	??_main,w
   966  0758  00F0               	movwf	strcmp@s2
   967  0759  0841               	movf	_temp,w
   968  075A  120A  118A  2224  120A  118A  	fcall	_strcmp
   969  075F  0871               	movf	?_strcmp+1,w
   970  0760  3A80               	xorlw	128
   971  0761  00FF               	movwf	127
   972  0762  3080               	movlw	128
   973  0763  027F               	subwf	127,w
   974  0764  1D03               	skipz
   975  0765  2F68               	goto	u1185
   976  0766  3001               	movlw	1
   977  0767  0270               	subwf	?_strcmp,w
   978  0768                     u1185:	
   979  0768  1C03               	skipc
   980  0769  2F6E               	goto	l177
   981                           
   982                           ;mainMaster.c: 77:             PORTAbits.RA0 = 1;
   983  076A  1283               	bcf	3,5	;RP0=0, select bank0
   984  076B  1303               	bcf	3,6	;RP1=0, select bank0
   985  076C  1405               	bsf	5,0	;volatile
   986                           
   987                           ;mainMaster.c: 78:         } else {
   988  076D  2F71               	goto	l1862
   989  076E                     l177:	
   990                           
   991                           ;mainMaster.c: 79:             PORTAbits.RA0 = 0;
   992  076E  1283               	bcf	3,5	;RP0=0, select bank0
   993  076F  1303               	bcf	3,6	;RP1=0, select bank0
   994  0770  1005               	bcf	5,0	;volatile
   995  0771                     l1862:	
   996                           
   997                           ;mainMaster.c: 81:         trip = get_tripwire();
   998  0771  120A  118A  21B8  120A  118A  	fcall	_get_tripwire
   999  0776  1283               	bcf	3,5	;RP0=0, select bank0
  1000  0777  1303               	bcf	3,6	;RP1=0, select bank0
  1001  0778  00BB               	movwf	??_main
  1002  0779  083B               	movf	??_main,w
  1003  077A  00BF               	movwf	_trip
  1004                           
  1005                           ;mainMaster.c: 82:         Lcd_Set_Cursor(2,9);
  1006  077B  3009               	movlw	9
  1007  077C  00BB               	movwf	??_main
  1008  077D  083B               	movf	??_main,w
  1009  077E  00F4               	movwf	Lcd_Set_Cursor@b
  1010  077F  3002               	movlw	2
  1011  0780  120A  118A  2394  120A  118A  	fcall	_Lcd_Set_Cursor
  1012                           
  1013                           ;mainMaster.c: 83:         if (trip == 1){
  1014  0785  1283               	bcf	3,5	;RP0=0, select bank0
  1015  0786  1303               	bcf	3,6	;RP1=0, select bank0
  1016  0787  033F               	decf	_trip,w
  1017  0788  1D03               	btfss	3,2
  1018  0789  2F8C               	goto	l1868
  1019                           
  1020                           ;mainMaster.c: 84:             Lcd_Write_String("Trip ON ");
  1021  078A  3022               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1022  078B  2FCA               	goto	L2
  1023  078C                     l1868:	
  1024                           ;mainMaster.c: 85:         } else {
  1025                           
  1026                           
  1027                           ;mainMaster.c: 86:             Lcd_Write_String("Trip OFF");
  1028  078C  302B               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1029  078D  2FCA               	goto	L2
  1030  078E                     l1870:	
  1031                           
  1032                           ;mainMaster.c: 91:             PIR = get_PIR();
  1033  078E  120A  118A  217A  120A  118A  	fcall	_get_PIR
  1034  0793  1283               	bcf	3,5	;RP0=0, select bank0
  1035  0794  1303               	bcf	3,6	;RP1=0, select bank0
  1036  0795  00BB               	movwf	??_main
  1037  0796  083B               	movf	??_main,w
  1038  0797  00BE               	movwf	_PIR
  1039                           
  1040                           ;mainMaster.c: 92:             Lcd_Set_Cursor(1,1);
  1041  0798  01F4               	clrf	Lcd_Set_Cursor@b
  1042  0799  0AF4               	incf	Lcd_Set_Cursor@b,f
  1043  079A  3001               	movlw	1
  1044  079B  120A  118A  2394  120A  118A  	fcall	_Lcd_Set_Cursor
  1045                           
  1046                           ;mainMaster.c: 93:         if (PIR == 1){
  1047  07A0  1283               	bcf	3,5	;RP0=0, select bank0
  1048  07A1  1303               	bcf	3,6	;RP1=0, select bank0
  1049  07A2  033E               	decf	_PIR,w
  1050  07A3  1D03               	btfss	3,2
  1051  07A4  2FA7               	goto	l1876
  1052                           
  1053                           ;mainMaster.c: 94:             Lcd_Write_String("PIR ON ");
  1054  07A5  3034               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1055  07A6  2FA8               	goto	L3
  1056  07A7                     l1876:	
  1057                           ;mainMaster.c: 95:         } else {
  1058                           
  1059                           
  1060                           ;mainMaster.c: 96:             Lcd_Write_String("PIR OFF");
  1061  07A7  303C               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1062  07A8                     L3:	
  1063  07A8  00F5               	movwf	Lcd_Write_String@a
  1064  07A9  3080               	movlw	128
  1065  07AA  00F6               	movwf	Lcd_Write_String@a+1
  1066  07AB  120A  118A  2357  120A  118A  	fcall	_Lcd_Write_String
  1067                           
  1068                           ;mainMaster.c: 98:             IR = get_IR();
  1069  07B0  120A  118A  215B  120A  118A  	fcall	_get_IR
  1070  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  1071  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  1072  07B7  00BB               	movwf	??_main
  1073  07B8  083B               	movf	??_main,w
  1074  07B9  00BD               	movwf	_IR
  1075                           
  1076                           ;mainMaster.c: 99:             Lcd_Set_Cursor(2,1);
  1077  07BA  01F4               	clrf	Lcd_Set_Cursor@b
  1078  07BB  0AF4               	incf	Lcd_Set_Cursor@b,f
  1079  07BC  3002               	movlw	2
  1080  07BD  120A  118A  2394  120A  118A  	fcall	_Lcd_Set_Cursor
  1081                           
  1082                           ;mainMaster.c: 100:             if (IR == 1){
  1083  07C2  1283               	bcf	3,5	;RP0=0, select bank0
  1084  07C3  1303               	bcf	3,6	;RP1=0, select bank0
  1085  07C4  033D               	decf	_IR,w
  1086  07C5  1D03               	btfss	3,2
  1087  07C6  2FC9               	goto	l1886
  1088                           
  1089                           ;mainMaster.c: 101:             Lcd_Write_String("IR ON ");
  1090  07C7  3035               	movlw	(low (((STR_6+1)-__stringbase)| (0+32768)))& (0+255)
  1091  07C8  2FCA               	goto	L2
  1092  07C9                     l1886:	
  1093                           ;mainMaster.c: 102:         } else {
  1094                           
  1095                           
  1096                           ;mainMaster.c: 103:             Lcd_Write_String("IR OFF");
  1097  07C9  303D               	movlw	(low (((STR_7+1)-__stringbase)| (0+32768)))& (0+255)
  1098  07CA                     L2:	
  1099  07CA  00F5               	movwf	Lcd_Write_String@a
  1100  07CB  3080               	movlw	128
  1101  07CC  00F6               	movwf	Lcd_Write_String@a+1
  1102  07CD  120A  118A  2357  120A  118A  	fcall	_Lcd_Write_String
  1103                           
  1104                           ;mainMaster.c: 106:         if(PORTCbits.RC0 == 0){
  1105  07D2  1283               	bcf	3,5	;RP0=0, select bank0
  1106  07D3  1303               	bcf	3,6	;RP1=0, select bank0
  1107  07D4  1807               	btfsc	7,0	;volatile
  1108  07D5  2FE4               	goto	l1900
  1109                           
  1110                           ;mainMaster.c: 107:             if (state == 1){
  1111  07D6  033C               	decf	_state,w
  1112  07D7  1D03               	btfss	3,2
  1113  07D8  2FDE               	goto	l1894
  1114                           
  1115                           ;mainMaster.c: 108:                 Lcd_Clear();
  1116  07D9  120A  118A  210B  120A  118A  	fcall	_Lcd_Clear
  1117  07DE                     l1894:	
  1118                           
  1119                           ;mainMaster.c: 110:             state = 0;
  1120  07DE  1283               	bcf	3,5	;RP0=0, select bank0
  1121  07DF  1303               	bcf	3,6	;RP1=0, select bank0
  1122  07E0  01BC               	clrf	_state
  1123                           
  1124                           ;mainMaster.c: 111:             PORTAbits.RA6 = 1;
  1125  07E1  1705               	bsf	5,6	;volatile
  1126                           
  1127                           ;mainMaster.c: 112:             PORTAbits.RA7 = 0;
  1128  07E2  1385               	bcf	5,7	;volatile
  1129                           
  1130                           ;mainMaster.c: 113:         } else {
  1131  07E3  2EE4               	goto	l1836
  1132  07E4                     l1900:	
  1133                           
  1134                           ;mainMaster.c: 114:             if (state == 0){
  1135  07E4  083C               	movf	_state,w
  1136  07E5  1D03               	btfss	3,2
  1137  07E6  2FEC               	goto	l1904
  1138                           
  1139                           ;mainMaster.c: 115:                 Lcd_Clear();
  1140  07E7  120A  118A  210B  120A  118A  	fcall	_Lcd_Clear
  1141  07EC                     l1904:	
  1142                           
  1143                           ;mainMaster.c: 117:             state = 1;
  1144  07EC  1283               	bcf	3,5	;RP0=0, select bank0
  1145  07ED  1303               	bcf	3,6	;RP1=0, select bank0
  1146  07EE  01BC               	clrf	_state
  1147  07EF  0ABC               	incf	_state,f
  1148                           
  1149                           ;mainMaster.c: 118:             PORTAbits.RA7 = 1;
  1150  07F0  1785               	bsf	5,7	;volatile
  1151                           
  1152                           ;mainMaster.c: 119:             PORTAbits.RA6 = 0;
  1153  07F1  1305               	bcf	5,6	;volatile
  1154  07F2  2EE4               	goto	l1836
  1155  07F3                     __end_of_main:	
  1156                           
  1157                           	psect	text1
  1158  0224                     __ptext1:	
  1159 ;; *************** function _strcmp *****************
  1160 ;; Defined at:
  1161 ;;		line 33 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;  s1              1    wreg     PTR const unsigned char 
  1164 ;;		 -> NULL(0), get_temp@temperature(6), 
  1165 ;;  s2              1    0[COMMON] PTR const unsigned char 
  1166 ;;		 -> STR_3(6), 
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  s1              1    6[COMMON] PTR const unsigned char 
  1169 ;;		 -> NULL(0), get_temp@temperature(6), 
  1170 ;;  r               1    5[COMMON] char 
  1171 ;; Return value:  Size  Location     Type
  1172 ;;                  2    0[COMMON] int 
  1173 ;; Registers used:
  1174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1175 ;; Tracked objects:
  1176 ;;		On entry : 0/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1180 ;;      Params:         2       0       0       0       0
  1181 ;;      Locals:         2       0       0       0       0
  1182 ;;      Temps:          3       0       0       0       0
  1183 ;;      Totals:         7       0       0       0       0
  1184 ;;Total ram usage:        7 bytes
  1185 ;; Hardware stack levels used:    2
  1186 ;; This function calls:
  1187 ;;		Nothing
  1188 ;; This function is called by:
  1189 ;;		_main
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           
  1194                           ;psect for function _strcmp
  1195  0224                     _strcmp:	
  1196                           
  1197                           ;incstack = 0
  1198                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  1199                           ;strcmp@s1 stored from wreg
  1200  0224  00F6               	movwf	strcmp@s1
  1201  0225  2A33               	goto	l1800
  1202  0226                     l1802:	
  1203  0226  0876               	movf	strcmp@s1,w
  1204  0227  0084               	movwf	4
  1205  0228  0800               	movf	0,w
  1206  0229  1903               	btfsc	3,2
  1207  022A  2A48               	goto	l1804
  1208  022B  3001               	movlw	1
  1209  022C  00F2               	movwf	??_strcmp
  1210  022D  0872               	movf	??_strcmp,w
  1211  022E  07F6               	addwf	strcmp@s1,f
  1212  022F  3001               	movlw	1
  1213  0230  00F2               	movwf	??_strcmp
  1214  0231  0872               	movf	??_strcmp,w
  1215  0232  07F0               	addwf	strcmp@s2,f
  1216  0233                     l1800:	
  1217  0233  0870               	movf	strcmp@s2,w
  1218  0234  0084               	movwf	4
  1219  0235  120A  118A  200D  120A  118A  	fcall	stringdir
  1220  023A  00F2               	movwf	??_strcmp
  1221  023B  0876               	movf	strcmp@s1,w
  1222  023C  0084               	movwf	4
  1223  023D  1383               	bcf	3,7	;select IRP bank0
  1224  023E  0800               	movf	0,w
  1225  023F  00F3               	movwf	??_strcmp+1
  1226  0240  0872               	movf	??_strcmp,w
  1227  0241  0273               	subwf	??_strcmp+1,w
  1228  0242  00F4               	movwf	??_strcmp+2
  1229  0243  0874               	movf	??_strcmp+2,w
  1230  0244  00F5               	movwf	strcmp@r
  1231  0245  0875               	movf	strcmp@r,w
  1232  0246  1903               	btfsc	3,2
  1233  0247  2A26               	goto	l1802
  1234  0248                     l1804:	
  1235  0248  0875               	movf	strcmp@r,w
  1236  0249  00F0               	movwf	?_strcmp
  1237  024A  01F1               	clrf	?_strcmp+1
  1238  024B  1BF0               	btfsc	?_strcmp,7
  1239  024C  03F1               	decf	?_strcmp+1,f
  1240  024D  0008               	return
  1241  024E                     __end_of_strcmp:	
  1242                           
  1243                           	psect	text2
  1244  01FB                     __ptext2:	
  1245 ;; *************** function _setup *****************
  1246 ;; Defined at:
  1247 ;;		line 124 in file "mainMaster.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;		None
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1261 ;;      Params:         0       0       0       0       0
  1262 ;;      Locals:         0       0       0       0       0
  1263 ;;      Temps:          0       0       0       0       0
  1264 ;;      Totals:         0       0       0       0       0
  1265 ;;Total ram usage:        0 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    3
  1268 ;; This function calls:
  1269 ;;		_I2C_Master_Init
  1270 ;;		_Lcd_Init
  1271 ;;		_initOscilador
  1272 ;; This function is called by:
  1273 ;;		_main
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           
  1278                           ;psect for function _setup
  1279  01FB                     _setup:	
  1280                           
  1281                           ;mainMaster.c: 125:     initOscilador(7);
  1282                           
  1283                           ;incstack = 0
  1284                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1285  01FB  3007               	movlw	7
  1286  01FC  120A  118A  23DE  120A  118A  	fcall	_initOscilador
  1287                           
  1288                           ;mainMaster.c: 126:     ANSELH = 0;
  1289  0201  1683               	bsf	3,5	;RP0=1, select bank3
  1290  0202  1703               	bsf	3,6	;RP1=1, select bank3
  1291  0203  0189               	clrf	9	;volatile
  1292                           
  1293                           ;mainMaster.c: 127:     ANSEL = 0;
  1294  0204  0188               	clrf	8	;volatile
  1295                           
  1296                           ;mainMaster.c: 128:     TRISB = 0;
  1297  0205  1683               	bsf	3,5	;RP0=1, select bank1
  1298  0206  1303               	bcf	3,6	;RP1=0, select bank1
  1299  0207  0186               	clrf	6	;volatile
  1300                           
  1301                           ;mainMaster.c: 129:     TRISA = 0;
  1302  0208  0185               	clrf	5	;volatile
  1303                           
  1304                           ;mainMaster.c: 130:     PORTB = 0;
  1305  0209  1283               	bcf	3,5	;RP0=0, select bank0
  1306  020A  1303               	bcf	3,6	;RP1=0, select bank0
  1307  020B  0186               	clrf	6	;volatile
  1308                           
  1309                           ;mainMaster.c: 131:     PORTA = 0;
  1310  020C  0185               	clrf	5	;volatile
  1311                           
  1312                           ;mainMaster.c: 133:     TRISC = 0x03;
  1313  020D  3003               	movlw	3
  1314  020E  1683               	bsf	3,5	;RP0=1, select bank1
  1315  020F  1303               	bcf	3,6	;RP1=0, select bank1
  1316  0210  0087               	movwf	7	;volatile
  1317                           
  1318                           ;mainMaster.c: 135:     Lcd_Init();
  1319  0211  120A  118A  2433  120A  118A  	fcall	_Lcd_Init
  1320                           
  1321                           ;mainMaster.c: 136:     I2C_Master_Init(100000);
  1322  0216  3000               	movlw	0
  1323  0217  1283               	bcf	3,5	;RP0=0, select bank0
  1324  0218  1303               	bcf	3,6	;RP1=0, select bank0
  1325  0219  00A3               	movwf	I2C_Master_Init@c+3
  1326  021A  3001               	movlw	1
  1327  021B  00A2               	movwf	I2C_Master_Init@c+2
  1328  021C  3086               	movlw	134
  1329  021D  00A1               	movwf	I2C_Master_Init@c+1
  1330  021E  30A0               	movlw	160
  1331  021F  00A0               	movwf	I2C_Master_Init@c
  1332  0220  120A  118A  22AC   	fcall	_I2C_Master_Init
  1333  0223  0008               	return
  1334  0224                     __end_of_setup:	
  1335                           
  1336                           	psect	text3
  1337  03DE                     __ptext3:	
  1338 ;; *************** function _initOscilador *****************
  1339 ;; Defined at:
  1340 ;;		line 11 in file "./Oscilador.h"
  1341 ;; Parameters:    Size  Location     Type
  1342 ;;  option          1    wreg     unsigned char 
  1343 ;; Auto vars:     Size  Location     Type
  1344 ;;  option          1    2[COMMON] unsigned char 
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  1    wreg      void 
  1347 ;; Registers used:
  1348 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1354 ;;      Params:         0       0       0       0       0
  1355 ;;      Locals:         1       0       0       0       0
  1356 ;;      Temps:          2       0       0       0       0
  1357 ;;      Totals:         3       0       0       0       0
  1358 ;;Total ram usage:        3 bytes
  1359 ;; Hardware stack levels used:    1
  1360 ;; This function calls:
  1361 ;;		Nothing
  1362 ;; This function is called by:
  1363 ;;		_setup
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           
  1368                           ;psect for function _initOscilador
  1369  03DE                     _initOscilador:	
  1370                           
  1371                           ;incstack = 0
  1372                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  1373                           ;initOscilador@option stored from wreg
  1374  03DE  00F2               	movwf	initOscilador@option
  1375                           
  1376                           ;./Oscilador.h: 13: 
  1377  03DF  2C0F               	goto	l1606
  1378  03E0                     l1586:	
  1379                           
  1380                           ;./Oscilador.h: 16:         case 3:
  1381  03E0  308F               	movlw	-113
  1382  03E1  1683               	bsf	3,5	;RP0=1, select bank1
  1383  03E2  1303               	bcf	3,6	;RP1=0, select bank1
  1384  03E3  058F               	andwf	15,f	;volatile
  1385                           
  1386                           ;./Oscilador.h: 17: 
  1387  03E4  2C31               	goto	l145
  1388  03E5                     l1588:	
  1389                           
  1390                           ;./Oscilador.h: 20:         case 4:
  1391  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  1392  03E6  1303               	bcf	3,6	;RP1=0, select bank1
  1393  03E7  080F               	movf	15,w	;volatile
  1394  03E8  398F               	andlw	-113
  1395  03E9  3810               	iorlw	16
  1396  03EA  2C08               	goto	L8
  1397  03EB                     l1590:	
  1398                           ;./Oscilador.h: 21: 
  1399                           
  1400                           
  1401                           ;./Oscilador.h: 24:         case 5:
  1402  03EB  1683               	bsf	3,5	;RP0=1, select bank1
  1403  03EC  1303               	bcf	3,6	;RP1=0, select bank1
  1404  03ED  080F               	movf	15,w	;volatile
  1405  03EE  398F               	andlw	-113
  1406  03EF  3820               	iorlw	32
  1407  03F0  2C08               	goto	L8
  1408  03F1                     l1592:	
  1409                           ;./Oscilador.h: 25: 
  1410                           
  1411                           
  1412                           ;./Oscilador.h: 28:         case 6:
  1413  03F1  1683               	bsf	3,5	;RP0=1, select bank1
  1414  03F2  1303               	bcf	3,6	;RP1=0, select bank1
  1415  03F3  080F               	movf	15,w	;volatile
  1416  03F4  398F               	andlw	-113
  1417  03F5  3830               	iorlw	48
  1418  03F6  2C08               	goto	L8
  1419  03F7                     l1594:	
  1420                           ;./Oscilador.h: 29: 
  1421                           
  1422                           
  1423                           ;./Oscilador.h: 32:         case 7:
  1424  03F7  1683               	bsf	3,5	;RP0=1, select bank1
  1425  03F8  1303               	bcf	3,6	;RP1=0, select bank1
  1426  03F9  080F               	movf	15,w	;volatile
  1427  03FA  398F               	andlw	-113
  1428  03FB  3840               	iorlw	64
  1429  03FC  2C08               	goto	L8
  1430  03FD                     l1596:	
  1431                           ;./Oscilador.h: 33: 
  1432                           
  1433                           
  1434                           ;./Oscilador.h: 36:         default:
  1435  03FD  1683               	bsf	3,5	;RP0=1, select bank1
  1436  03FE  1303               	bcf	3,6	;RP1=0, select bank1
  1437  03FF  080F               	movf	15,w	;volatile
  1438  0400  398F               	andlw	-113
  1439  0401  3850               	iorlw	80
  1440  0402  2C08               	goto	L8
  1441  0403                     l1598:	
  1442                           ;./Oscilador.h: 37: 
  1443                           
  1444                           
  1445                           ;./Oscilador.h: 40:     }
  1446  0403  1683               	bsf	3,5	;RP0=1, select bank1
  1447  0404  1303               	bcf	3,6	;RP1=0, select bank1
  1448  0405  080F               	movf	15,w	;volatile
  1449  0406  398F               	andlw	-113
  1450  0407  3860               	iorlw	96
  1451  0408                     L8:	
  1452  0408  008F               	movwf	15	;volatile
  1453                           
  1454                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  1455  0409  2C31               	goto	l145
  1456  040A                     l1600:	
  1457  040A                     l1602:	
  1458  040A  3070               	movlw	112
  1459  040B  1683               	bsf	3,5	;RP0=1, select bank1
  1460  040C  1303               	bcf	3,6	;RP1=0, select bank1
  1461  040D  048F               	iorwf	15,f	;volatile
  1462  040E  2C31               	goto	l145
  1463  040F                     l1606:	
  1464  040F  0872               	movf	initOscilador@option,w
  1465  0410  00F0               	movwf	??_initOscilador
  1466  0411  01F1               	clrf	??_initOscilador+1
  1467                           
  1468                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1469                           ; Switch size 1, requested type "simple"
  1470                           ; Number of cases is 1, Range of values is 0 to 0
  1471                           ; switch strategies available:
  1472                           ; Name         Instructions Cycles
  1473                           ; simple_byte            4     3 (average)
  1474                           ; direct_byte           11     8 (fixed)
  1475                           ; jumptable            260     6 (fixed)
  1476                           ;	Chosen strategy is simple_byte
  1477  0412  0871               	movf	??_initOscilador+1,w
  1478  0413  3A00               	xorlw	0	; case 0
  1479  0414  1903               	skipnz
  1480  0415  2C17               	goto	l1956
  1481  0416  2C0A               	goto	l1602
  1482  0417                     l1956:	
  1483                           
  1484                           ; Switch size 1, requested type "simple"
  1485                           ; Number of cases is 8, Range of values is 0 to 7
  1486                           ; switch strategies available:
  1487                           ; Name         Instructions Cycles
  1488                           ; simple_byte           25    13 (average)
  1489                           ; direct_byte           32     8 (fixed)
  1490                           ; jumptable            260     6 (fixed)
  1491                           ;	Chosen strategy is simple_byte
  1492  0417  0870               	movf	??_initOscilador,w
  1493  0418  3A00               	xorlw	0	; case 0
  1494  0419  1903               	skipnz
  1495  041A  2BE0               	goto	l1586
  1496  041B  3A01               	xorlw	1	; case 1
  1497  041C  1903               	skipnz
  1498  041D  2BE5               	goto	l1588
  1499  041E  3A03               	xorlw	3	; case 2
  1500  041F  1903               	skipnz
  1501  0420  2BEB               	goto	l1590
  1502  0421  3A01               	xorlw	1	; case 3
  1503  0422  1903               	skipnz
  1504  0423  2BF1               	goto	l1592
  1505  0424  3A07               	xorlw	7	; case 4
  1506  0425  1903               	skipnz
  1507  0426  2BF7               	goto	l1594
  1508  0427  3A01               	xorlw	1	; case 5
  1509  0428  1903               	skipnz
  1510  0429  2BFD               	goto	l1596
  1511  042A  3A03               	xorlw	3	; case 6
  1512  042B  1903               	skipnz
  1513  042C  2C03               	goto	l1598
  1514  042D  3A01               	xorlw	1	; case 7
  1515  042E  1903               	skipnz
  1516  042F  2C0A               	goto	l1600
  1517  0430  2C0A               	goto	l1602
  1518  0431                     l145:	
  1519  0431  140F               	bsf	15,0	;volatile
  1520  0432  0008               	return
  1521  0433                     __end_of_initOscilador:	
  1522                           
  1523                           	psect	text4
  1524  0433                     __ptext4:	
  1525 ;; *************** function _Lcd_Init *****************
  1526 ;; Defined at:
  1527 ;;		line 65 in file "./LCD4bits.h"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;		None
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;		None
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  1    wreg      void 
  1534 ;; Registers used:
  1535 ;;		wreg, status,2, status,0, pclath, cstack
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1541 ;;      Params:         0       0       0       0       0
  1542 ;;      Locals:         0       0       0       0       0
  1543 ;;      Temps:          2       0       0       0       0
  1544 ;;      Totals:         2       0       0       0       0
  1545 ;;Total ram usage:        2 bytes
  1546 ;; Hardware stack levels used:    1
  1547 ;; Hardware stack levels required when called:    2
  1548 ;; This function calls:
  1549 ;;		_Lcd_Cmd
  1550 ;;		_Lcd_Port
  1551 ;; This function is called by:
  1552 ;;		_setup
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           
  1557                           ;psect for function _Lcd_Init
  1558  0433                     _Lcd_Init:	
  1559                           
  1560                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  1561                           
  1562                           ;incstack = 0
  1563                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1564  0433  3000               	movlw	0
  1565  0434  120A  118A  2127  120A  118A  	fcall	_Lcd_Port
  1566                           
  1567                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  1568  0439  3034               	movlw	52
  1569  043A  00F5               	movwf	??_Lcd_Init+1
  1570  043B  30F1               	movlw	241
  1571  043C  00F4               	movwf	??_Lcd_Init
  1572  043D                     u1257:	
  1573  043D  0BF4               	decfsz	??_Lcd_Init,f
  1574  043E  2C3D               	goto	u1257
  1575  043F  0BF5               	decfsz	??_Lcd_Init+1,f
  1576  0440  2C3D               	goto	u1257
  1577  0441  2C42               	nop2
  1578                           
  1579                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  1580  0442  3003               	movlw	3
  1581  0443  120A  118A  2141  120A  118A  	fcall	_Lcd_Cmd
  1582                           
  1583                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1584  0448  300D               	movlw	13
  1585  0449  00F5               	movwf	??_Lcd_Init+1
  1586  044A  30FB               	movlw	251
  1587  044B  00F4               	movwf	??_Lcd_Init
  1588  044C                     u1267:	
  1589  044C  0BF4               	decfsz	??_Lcd_Init,f
  1590  044D  2C4C               	goto	u1267
  1591  044E  0BF5               	decfsz	??_Lcd_Init+1,f
  1592  044F  2C4C               	goto	u1267
  1593  0450  2C51               	nop2
  1594                           
  1595                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  1596  0451  3003               	movlw	3
  1597  0452  120A  118A  2141  120A  118A  	fcall	_Lcd_Cmd
  1598                           
  1599                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  1600  0457  301D               	movlw	29
  1601  0458  00F5               	movwf	??_Lcd_Init+1
  1602  0459  3091               	movlw	145
  1603  045A  00F4               	movwf	??_Lcd_Init
  1604  045B                     u1277:	
  1605  045B  0BF4               	decfsz	??_Lcd_Init,f
  1606  045C  2C5B               	goto	u1277
  1607  045D  0BF5               	decfsz	??_Lcd_Init+1,f
  1608  045E  2C5B               	goto	u1277
  1609                           
  1610                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  1611  045F  3003               	movlw	3
  1612  0460  120A  118A  2141  120A  118A  	fcall	_Lcd_Cmd
  1613                           
  1614                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  1615  0465  3002               	movlw	2
  1616  0466  120A  118A  2141  120A  118A  	fcall	_Lcd_Cmd
  1617                           
  1618                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  1619  046B  3002               	movlw	2
  1620  046C  120A  118A  2141  120A  118A  	fcall	_Lcd_Cmd
  1621                           
  1622                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  1623  0471  3008               	movlw	8
  1624  0472  120A  118A  2141  120A  118A  	fcall	_Lcd_Cmd
  1625                           
  1626                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  1627  0477  3000               	movlw	0
  1628  0478  120A  118A  2141  120A  118A  	fcall	_Lcd_Cmd
  1629                           
  1630                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  1631  047D  300C               	movlw	12
  1632  047E  120A  118A  2141  120A  118A  	fcall	_Lcd_Cmd
  1633                           
  1634                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  1635  0483  3000               	movlw	0
  1636  0484  120A  118A  2141  120A  118A  	fcall	_Lcd_Cmd
  1637                           
  1638                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  1639  0489  3006               	movlw	6
  1640  048A  120A  118A  2141   	fcall	_Lcd_Cmd
  1641  048D  0008               	return
  1642  048E                     __end_of_Lcd_Init:	
  1643                           
  1644                           	psect	text5
  1645  02AC                     __ptext5:	
  1646 ;; *************** function _I2C_Master_Init *****************
  1647 ;; Defined at:
  1648 ;;		line 16 in file "./I2C.h"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;  c               4    0[BANK0 ] const unsigned long 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;		None
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  1    wreg      void 
  1655 ;; Registers used:
  1656 ;;		wreg, status,2, status,0, pclath, cstack
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1662 ;;      Params:         0       4       0       0       0
  1663 ;;      Locals:         0       0       0       0       0
  1664 ;;      Temps:          0       4       0       0       0
  1665 ;;      Totals:         0       8       0       0       0
  1666 ;;Total ram usage:        8 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    1
  1669 ;; This function calls:
  1670 ;;		___lldiv
  1671 ;; This function is called by:
  1672 ;;		_setup
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           
  1677                           ;psect for function _I2C_Master_Init
  1678  02AC                     _I2C_Master_Init:	
  1679                           
  1680                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  1681                           
  1682                           ;incstack = 0
  1683                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  1684  02AC  3028               	movlw	40
  1685  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  1686  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  1687  02AF  0094               	movwf	20	;volatile
  1688                           
  1689                           ;./I2C.h: 19:     SSPCON2 = 0;
  1690  02B0  1683               	bsf	3,5	;RP0=1, select bank1
  1691  02B1  1303               	bcf	3,6	;RP1=0, select bank1
  1692  02B2  0191               	clrf	17	;volatile
  1693                           
  1694                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  1695  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  1696  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  1697  02B5  0820               	movf	I2C_Master_Init@c,w
  1698  02B6  00A4               	movwf	??_I2C_Master_Init
  1699  02B7  0821               	movf	I2C_Master_Init@c+1,w
  1700  02B8  00A5               	movwf	??_I2C_Master_Init+1
  1701  02B9  0822               	movf	I2C_Master_Init@c+2,w
  1702  02BA  00A6               	movwf	??_I2C_Master_Init+2
  1703  02BB  0823               	movf	I2C_Master_Init@c+3,w
  1704  02BC  00A7               	movwf	??_I2C_Master_Init+3
  1705  02BD  3002               	movlw	2
  1706  02BE                     u895:	
  1707  02BE  1003               	clrc
  1708  02BF  0DA4               	rlf	??_I2C_Master_Init,f
  1709  02C0  0DA5               	rlf	??_I2C_Master_Init+1,f
  1710  02C1  0DA6               	rlf	??_I2C_Master_Init+2,f
  1711  02C2  0DA7               	rlf	??_I2C_Master_Init+3,f
  1712  02C3  3EFF               	addlw	-1
  1713  02C4  1D03               	skipz
  1714  02C5  2ABE               	goto	u895
  1715  02C6  0827               	movf	??_I2C_Master_Init+3,w
  1716  02C7  00F3               	movwf	___lldiv@divisor+3
  1717  02C8  0826               	movf	??_I2C_Master_Init+2,w
  1718  02C9  00F2               	movwf	___lldiv@divisor+2
  1719  02CA  0825               	movf	??_I2C_Master_Init+1,w
  1720  02CB  00F1               	movwf	___lldiv@divisor+1
  1721  02CC  0824               	movf	??_I2C_Master_Init,w
  1722  02CD  00F0               	movwf	___lldiv@divisor
  1723  02CE  3000               	movlw	0
  1724  02CF  00F7               	movwf	___lldiv@dividend+3
  1725  02D0  307A               	movlw	122
  1726  02D1  00F6               	movwf	___lldiv@dividend+2
  1727  02D2  3012               	movlw	18
  1728  02D3  00F5               	movwf	___lldiv@dividend+1
  1729  02D4  3000               	movlw	0
  1730  02D5  00F4               	movwf	___lldiv@dividend
  1731  02D6  120A  118A  248E   	fcall	___lldiv
  1732  02D9  0870               	movf	?___lldiv,w
  1733  02DA  3EFF               	addlw	255
  1734  02DB  1683               	bsf	3,5	;RP0=1, select bank1
  1735  02DC  1303               	bcf	3,6	;RP1=0, select bank1
  1736  02DD  0093               	movwf	19	;volatile
  1737                           
  1738                           ;./I2C.h: 21:     SSPSTAT = 0;
  1739  02DE  0194               	clrf	20	;volatile
  1740                           
  1741                           ;./I2C.h: 22:     TRISC3 = 1;
  1742  02DF  1587               	bsf	7,3	;volatile
  1743                           
  1744                           ;./I2C.h: 23:     TRISC4 = 1;
  1745  02E0  1607               	bsf	7,4	;volatile
  1746  02E1  0008               	return
  1747  02E2                     __end_of_I2C_Master_Init:	
  1748                           
  1749                           	psect	text6
  1750  048E                     __ptext6:	
  1751 ;; *************** function ___lldiv *****************
  1752 ;; Defined at:
  1753 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;  divisor         4    0[COMMON] unsigned long 
  1756 ;;  dividend        4    4[COMMON] unsigned long 
  1757 ;; Auto vars:     Size  Location     Type
  1758 ;;  quotient        4    9[COMMON] unsigned long 
  1759 ;;  counter         1   13[COMMON] unsigned char 
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  4    0[COMMON] unsigned long 
  1762 ;; Registers used:
  1763 ;;		wreg, status,2, status,0
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1769 ;;      Params:         8       0       0       0       0
  1770 ;;      Locals:         5       0       0       0       0
  1771 ;;      Temps:          1       0       0       0       0
  1772 ;;      Totals:        14       0       0       0       0
  1773 ;;Total ram usage:       14 bytes
  1774 ;; Hardware stack levels used:    1
  1775 ;; This function calls:
  1776 ;;		Nothing
  1777 ;; This function is called by:
  1778 ;;		_I2C_Master_Init
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782                           
  1783                           ;psect for function ___lldiv
  1784  048E                     ___lldiv:	
  1785                           
  1786                           ;incstack = 0
  1787                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  1788  048E  3000               	movlw	0
  1789  048F  00FC               	movwf	___lldiv@quotient+3
  1790  0490  3000               	movlw	0
  1791  0491  00FB               	movwf	___lldiv@quotient+2
  1792  0492  3000               	movlw	0
  1793  0493  00FA               	movwf	___lldiv@quotient+1
  1794  0494  3000               	movlw	0
  1795  0495  00F9               	movwf	___lldiv@quotient
  1796  0496  0873               	movf	___lldiv@divisor+3,w
  1797  0497  0472               	iorwf	___lldiv@divisor+2,w
  1798  0498  0471               	iorwf	___lldiv@divisor+1,w
  1799  0499  0470               	iorwf	___lldiv@divisor,w
  1800  049A  1903               	skipnz
  1801  049B  2CE3               	goto	l1458
  1802  049C  01FD               	clrf	___lldiv@counter
  1803  049D  0AFD               	incf	___lldiv@counter,f
  1804  049E                     l1444:	
  1805  049E  1BF3               	btfsc	___lldiv@divisor+3,7
  1806  049F  2CAE               	goto	l1446
  1807  04A0  3001               	movlw	1
  1808  04A1  00F8               	movwf	??___lldiv
  1809  04A2                     u705:	
  1810  04A2  1003               	clrc
  1811  04A3  0DF0               	rlf	___lldiv@divisor,f
  1812  04A4  0DF1               	rlf	___lldiv@divisor+1,f
  1813  04A5  0DF2               	rlf	___lldiv@divisor+2,f
  1814  04A6  0DF3               	rlf	___lldiv@divisor+3,f
  1815  04A7  0BF8               	decfsz	??___lldiv,f
  1816  04A8  2CA2               	goto	u705
  1817  04A9  3001               	movlw	1
  1818  04AA  00F8               	movwf	??___lldiv
  1819  04AB  0878               	movf	??___lldiv,w
  1820  04AC  07FD               	addwf	___lldiv@counter,f
  1821  04AD  2C9E               	goto	l1444
  1822  04AE                     l1446:	
  1823  04AE  3001               	movlw	1
  1824  04AF  00F8               	movwf	??___lldiv
  1825  04B0                     u725:	
  1826  04B0  1003               	clrc
  1827  04B1  0DF9               	rlf	___lldiv@quotient,f
  1828  04B2  0DFA               	rlf	___lldiv@quotient+1,f
  1829  04B3  0DFB               	rlf	___lldiv@quotient+2,f
  1830  04B4  0DFC               	rlf	___lldiv@quotient+3,f
  1831  04B5  0BF8               	decfsz	??___lldiv,f
  1832  04B6  2CB0               	goto	u725
  1833  04B7  0873               	movf	___lldiv@divisor+3,w
  1834  04B8  0277               	subwf	___lldiv@dividend+3,w
  1835  04B9  1D03               	skipz
  1836  04BA  2CC5               	goto	u735
  1837  04BB  0872               	movf	___lldiv@divisor+2,w
  1838  04BC  0276               	subwf	___lldiv@dividend+2,w
  1839  04BD  1D03               	skipz
  1840  04BE  2CC5               	goto	u735
  1841  04BF  0871               	movf	___lldiv@divisor+1,w
  1842  04C0  0275               	subwf	___lldiv@dividend+1,w
  1843  04C1  1D03               	skipz
  1844  04C2  2CC5               	goto	u735
  1845  04C3  0870               	movf	___lldiv@divisor,w
  1846  04C4  0274               	subwf	___lldiv@dividend,w
  1847  04C5                     u735:	
  1848  04C5  1C03               	skipc
  1849  04C6  2CD6               	goto	l1454
  1850  04C7  0870               	movf	___lldiv@divisor,w
  1851  04C8  02F4               	subwf	___lldiv@dividend,f
  1852  04C9  0871               	movf	___lldiv@divisor+1,w
  1853  04CA  1C03               	skipc
  1854  04CB  0F71               	incfsz	___lldiv@divisor+1,w
  1855  04CC  02F5               	subwf	___lldiv@dividend+1,f
  1856  04CD  0872               	movf	___lldiv@divisor+2,w
  1857  04CE  1C03               	skipc
  1858  04CF  0F72               	incfsz	___lldiv@divisor+2,w
  1859  04D0  02F6               	subwf	___lldiv@dividend+2,f
  1860  04D1  0873               	movf	___lldiv@divisor+3,w
  1861  04D2  1C03               	skipc
  1862  04D3  0F73               	incfsz	___lldiv@divisor+3,w
  1863  04D4  02F7               	subwf	___lldiv@dividend+3,f
  1864  04D5  1479               	bsf	___lldiv@quotient,0
  1865  04D6                     l1454:	
  1866  04D6  3001               	movlw	1
  1867  04D7                     u745:	
  1868  04D7  1003               	clrc
  1869  04D8  0CF3               	rrf	___lldiv@divisor+3,f
  1870  04D9  0CF2               	rrf	___lldiv@divisor+2,f
  1871  04DA  0CF1               	rrf	___lldiv@divisor+1,f
  1872  04DB  0CF0               	rrf	___lldiv@divisor,f
  1873  04DC  3EFF               	addlw	-1
  1874  04DD  1D03               	skipz
  1875  04DE  2CD7               	goto	u745
  1876  04DF  3001               	movlw	1
  1877  04E0  02FD               	subwf	___lldiv@counter,f
  1878  04E1  1D03               	btfss	3,2
  1879  04E2  2CAE               	goto	l1446
  1880  04E3                     l1458:	
  1881  04E3  087C               	movf	___lldiv@quotient+3,w
  1882  04E4  00F3               	movwf	?___lldiv+3
  1883  04E5  087B               	movf	___lldiv@quotient+2,w
  1884  04E6  00F2               	movwf	?___lldiv+2
  1885  04E7  087A               	movf	___lldiv@quotient+1,w
  1886  04E8  00F1               	movwf	?___lldiv+1
  1887  04E9  0879               	movf	___lldiv@quotient,w
  1888  04EA  00F0               	movwf	?___lldiv
  1889  04EB  0008               	return
  1890  04EC                     __end_of___lldiv:	
  1891                           
  1892                           	psect	text7
  1893  01B8                     __ptext7:	
  1894 ;; *************** function _get_tripwire *****************
  1895 ;; Defined at:
  1896 ;;		line 225 in file "mainMaster.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;  trip            1    7[COMMON] unsigned char 
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      unsigned char 
  1903 ;; Registers used:
  1904 ;;		wreg, status,2, status,0, pclath, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1910 ;;      Params:         0       0       0       0       0
  1911 ;;      Locals:         1       0       0       0       0
  1912 ;;      Temps:          1       0       0       0       0
  1913 ;;      Totals:         2       0       0       0       0
  1914 ;;Total ram usage:        2 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    2
  1917 ;; This function calls:
  1918 ;;		_I2C_Master_Read
  1919 ;;		_I2C_Master_Start
  1920 ;;		_I2C_Master_Stop
  1921 ;;		_I2C_Master_Write
  1922 ;; This function is called by:
  1923 ;;		_main
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           
  1928                           ;psect for function _get_tripwire
  1929  01B8                     _get_tripwire:	
  1930                           
  1931                           ;mainMaster.c: 226:     char trip;;mainMaster.c: 228:     I2C_Master_Start();
  1932                           
  1933                           ;incstack = 0
  1934                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  1935  01B8  120A  118A  20E5  120A  118A  	fcall	_I2C_Master_Start
  1936                           
  1937                           ;mainMaster.c: 229:     I2C_Master_Write(0x21);
  1938  01BD  3021               	movlw	33
  1939  01BE  00F0               	movwf	I2C_Master_Write@d
  1940  01BF  3000               	movlw	0
  1941  01C0  00F1               	movwf	I2C_Master_Write@d+1
  1942  01C1  120A  118A  20FA  120A  118A  	fcall	_I2C_Master_Write
  1943                           
  1944                           ;mainMaster.c: 230:     trip = I2C_Master_Read(0);
  1945  01C6  3000               	movlw	0
  1946  01C7  00F0               	movwf	I2C_Master_Read@a
  1947  01C8  00F1               	movwf	I2C_Master_Read@a+1
  1948  01C9  120A  118A  224E  120A  118A  	fcall	_I2C_Master_Read
  1949  01CE  0870               	movf	?_I2C_Master_Read,w
  1950  01CF  00F6               	movwf	??_get_tripwire
  1951  01D0  0876               	movf	??_get_tripwire,w
  1952  01D1  00F7               	movwf	get_tripwire@trip
  1953                           
  1954                           ;mainMaster.c: 231:     I2C_Master_Stop();
  1955  01D2  120A  118A  20EC   	fcall	_I2C_Master_Stop
  1956                           
  1957                           ;mainMaster.c: 233:     return (trip);
  1958  01D5  0877               	movf	get_tripwire@trip,w
  1959  01D6  0008               	return
  1960  01D7                     __end_of_get_tripwire:	
  1961                           
  1962                           	psect	text8
  1963  04EC                     __ptext8:	
  1964 ;; *************** function _get_time *****************
  1965 ;; Defined at:
  1966 ;;		line 150 in file "mainMaster.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;  string_time     6    0[BANK0 ] unsigned char [6]
  1971 ;;  min             1    7[BANK0 ] unsigned char 
  1972 ;;  hour            1    6[BANK0 ] unsigned char 
  1973 ;; Return value:  Size  Location     Type
  1974 ;;                  1    wreg      PTR unsigned char 
  1975 ;; Registers used:
  1976 ;;		wreg, status,2, status,0, pclath, cstack
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1982 ;;      Params:         0       0       0       0       0
  1983 ;;      Locals:         0       8       0       0       0
  1984 ;;      Temps:          2       0       0       0       0
  1985 ;;      Totals:         2       8       0       0       0
  1986 ;;Total ram usage:       10 bytes
  1987 ;; Hardware stack levels used:    1
  1988 ;; Hardware stack levels required when called:    2
  1989 ;; This function calls:
  1990 ;;		_I2C_Master_Read
  1991 ;;		_I2C_Master_RepeatedStart
  1992 ;;		_I2C_Master_Start
  1993 ;;		_I2C_Master_Stop
  1994 ;;		_I2C_Master_Write
  1995 ;; This function is called by:
  1996 ;;		_main
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           
  2001                           ;psect for function _get_time
  2002  04EC                     _get_time:	
  2003                           
  2004                           ;mainMaster.c: 151:     char hour, min;;mainMaster.c: 152:     char string_time[6];;main
      +                          Master.c: 154:     I2C_Master_Start();
  2005                           
  2006                           ;incstack = 0
  2007                           ; Regs used in _get_time: [wreg+status,2+status,0+pclath+cstack]
  2008  04EC  120A  118A  20E5  120A  118A  	fcall	_I2C_Master_Start
  2009                           
  2010                           ;mainMaster.c: 155:     I2C_Master_Write(0xD0);
  2011  04F1  30D0               	movlw	208
  2012  04F2  00F0               	movwf	I2C_Master_Write@d
  2013  04F3  3000               	movlw	0
  2014  04F4  00F1               	movwf	I2C_Master_Write@d+1
  2015  04F5  120A  118A  20FA  120A  118A  	fcall	_I2C_Master_Write
  2016                           
  2017                           ;mainMaster.c: 156:     I2C_Master_Write(0x01);
  2018  04FA  3001               	movlw	1
  2019  04FB  00F0               	movwf	I2C_Master_Write@d
  2020  04FC  3000               	movlw	0
  2021  04FD  00F1               	movwf	I2C_Master_Write@d+1
  2022  04FE  120A  118A  20FA  120A  118A  	fcall	_I2C_Master_Write
  2023                           
  2024                           ;mainMaster.c: 157:     I2C_Master_RepeatedStart();
  2025  0503  120A  118A  20F3  120A  118A  	fcall	_I2C_Master_RepeatedStart
  2026                           
  2027                           ;mainMaster.c: 158:     I2C_Master_Write(0xD1);
  2028  0508  30D1               	movlw	209
  2029  0509  00F0               	movwf	I2C_Master_Write@d
  2030  050A  3000               	movlw	0
  2031  050B  00F1               	movwf	I2C_Master_Write@d+1
  2032  050C  120A  118A  20FA  120A  118A  	fcall	_I2C_Master_Write
  2033                           
  2034                           ;mainMaster.c: 159:     min = I2C_Master_Read(1);
  2035  0511  3001               	movlw	1
  2036  0512  00F0               	movwf	I2C_Master_Read@a
  2037  0513  3000               	movlw	0
  2038  0514  00F1               	movwf	I2C_Master_Read@a+1
  2039  0515  120A  118A  224E  120A  118A  	fcall	_I2C_Master_Read
  2040  051A  0870               	movf	?_I2C_Master_Read,w
  2041  051B  00F6               	movwf	??_get_time
  2042  051C  0876               	movf	??_get_time,w
  2043  051D  1283               	bcf	3,5	;RP0=0, select bank0
  2044  051E  1303               	bcf	3,6	;RP1=0, select bank0
  2045  051F  00A7               	movwf	get_time@min
  2046                           
  2047                           ;mainMaster.c: 160:     hour = I2C_Master_Read(0);
  2048  0520  3000               	movlw	0
  2049  0521  00F0               	movwf	I2C_Master_Read@a
  2050  0522  00F1               	movwf	I2C_Master_Read@a+1
  2051  0523  120A  118A  224E  120A  118A  	fcall	_I2C_Master_Read
  2052  0528  0870               	movf	?_I2C_Master_Read,w
  2053  0529  00F6               	movwf	??_get_time
  2054  052A  0876               	movf	??_get_time,w
  2055  052B  1283               	bcf	3,5	;RP0=0, select bank0
  2056  052C  1303               	bcf	3,6	;RP1=0, select bank0
  2057  052D  00A6               	movwf	get_time@hour
  2058                           
  2059                           ;mainMaster.c: 161:     I2C_Master_Stop();
  2060  052E  120A  118A  20EC  120A  118A  	fcall	_I2C_Master_Stop
  2061                           
  2062                           ;mainMaster.c: 163:     string_time[0] = (hour >> 4) + '0';
  2063  0533  1283               	bcf	3,5	;RP0=0, select bank0
  2064  0534  1303               	bcf	3,6	;RP1=0, select bank0
  2065  0535  0826               	movf	get_time@hour,w
  2066  0536  00F6               	movwf	??_get_time
  2067  0537  3004               	movlw	4
  2068  0538                     u1105:	
  2069  0538  1003               	clrc
  2070  0539  0CF6               	rrf	??_get_time,f
  2071  053A  3EFF               	addlw	-1
  2072  053B  1D03               	skipz
  2073  053C  2D38               	goto	u1105
  2074  053D  0876               	movf	??_get_time,w
  2075  053E  3E30               	addlw	48
  2076  053F  00F7               	movwf	??_get_time+1
  2077  0540  0877               	movf	??_get_time+1,w
  2078  0541  00A0               	movwf	get_time@string_time
  2079                           
  2080                           ;mainMaster.c: 164:     string_time[1] = (hour & 0x0F) + '0';
  2081  0542  0826               	movf	get_time@hour,w
  2082  0543  390F               	andlw	15
  2083  0544  3E30               	addlw	48
  2084  0545  00F6               	movwf	??_get_time
  2085  0546  0876               	movf	??_get_time,w
  2086  0547  00A1               	movwf	get_time@string_time+1
  2087                           
  2088                           ;mainMaster.c: 165:     string_time[2] = ':';
  2089  0548  303A               	movlw	58
  2090  0549  00F6               	movwf	??_get_time
  2091  054A  0876               	movf	??_get_time,w
  2092  054B  00A2               	movwf	get_time@string_time+2
  2093                           
  2094                           ;mainMaster.c: 166:     string_time[3] = (min >> 4) + '0';
  2095  054C  0827               	movf	get_time@min,w
  2096  054D  00F6               	movwf	??_get_time
  2097  054E  3004               	movlw	4
  2098  054F                     u1115:	
  2099  054F  1003               	clrc
  2100  0550  0CF6               	rrf	??_get_time,f
  2101  0551  3EFF               	addlw	-1
  2102  0552  1D03               	skipz
  2103  0553  2D4F               	goto	u1115
  2104  0554  0876               	movf	??_get_time,w
  2105  0555  3E30               	addlw	48
  2106  0556  00F7               	movwf	??_get_time+1
  2107  0557  0877               	movf	??_get_time+1,w
  2108  0558  00A3               	movwf	get_time@string_time+3
  2109                           
  2110                           ;mainMaster.c: 167:     string_time[4] = (min & 0x0F) + '0';
  2111  0559  0827               	movf	get_time@min,w
  2112  055A  390F               	andlw	15
  2113  055B  3E30               	addlw	48
  2114  055C  00F6               	movwf	??_get_time
  2115  055D  0876               	movf	??_get_time,w
  2116  055E  00A4               	movwf	get_time@string_time+4
  2117                           
  2118                           ;mainMaster.c: 168:     string_time[5] = '\0';
  2119  055F  01A5               	clrf	get_time@string_time+5
  2120                           
  2121                           ;mainMaster.c: 170:     return (string_time);
  2122  0560  3020               	movlw	(low (get_time@string_time| 0))& (0+255)
  2123  0561  0008               	return
  2124  0562                     __end_of_get_time:	
  2125                           
  2126                           	psect	text9
  2127  0562                     __ptext9:	
  2128 ;; *************** function _get_temp *****************
  2129 ;; Defined at:
  2130 ;;		line 187 in file "mainMaster.c"
  2131 ;; Parameters:    Size  Location     Type
  2132 ;;		None
  2133 ;; Auto vars:     Size  Location     Type
  2134 ;;  temperature     6   16[BANK0 ] unsigned char [6]
  2135 ;;  decimal         3   22[BANK0 ] unsigned char [3]
  2136 ;;  tempLSB         1   26[BANK0 ] unsigned char 
  2137 ;;  tempMSB         1   25[BANK0 ] unsigned char 
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  1    wreg      PTR unsigned char 
  2140 ;; Registers used:
  2141 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2147 ;;      Params:         0       0       0       0       0
  2148 ;;      Locals:         0      11       0       0       0
  2149 ;;      Temps:          0       3       0       0       0
  2150 ;;      Totals:         0      14       0       0       0
  2151 ;;Total ram usage:       14 bytes
  2152 ;; Hardware stack levels used:    1
  2153 ;; Hardware stack levels required when called:    2
  2154 ;; This function calls:
  2155 ;;		_I2C_Master_Read
  2156 ;;		_I2C_Master_RepeatedStart
  2157 ;;		_I2C_Master_Start
  2158 ;;		_I2C_Master_Stop
  2159 ;;		_I2C_Master_Write
  2160 ;;		___bmul
  2161 ;;		_sprintf
  2162 ;;		_strcat
  2163 ;; This function is called by:
  2164 ;;		_main
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           
  2169                           ;psect for function _get_temp
  2170  0562                     _get_temp:	
  2171                           
  2172                           ;mainMaster.c: 188:     char tempLSB, tempMSB;;mainMaster.c: 189:     char temperature[6
      +                          ], decimal[3];;mainMaster.c: 191:     I2C_Master_Start();
  2173                           
  2174                           ;incstack = 0
  2175                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2176  0562  120A  118A  20E5  120A  118A  	fcall	_I2C_Master_Start
  2177                           
  2178                           ;mainMaster.c: 192:     I2C_Master_Write(0xD0);
  2179  0567  30D0               	movlw	208
  2180  0568  00F0               	movwf	I2C_Master_Write@d
  2181  0569  3000               	movlw	0
  2182  056A  00F1               	movwf	I2C_Master_Write@d+1
  2183  056B  120A  118A  20FA  120A  118A  	fcall	_I2C_Master_Write
  2184                           
  2185                           ;mainMaster.c: 193:     I2C_Master_Write(0x11);
  2186  0570  3011               	movlw	17
  2187  0571  00F0               	movwf	I2C_Master_Write@d
  2188  0572  3000               	movlw	0
  2189  0573  00F1               	movwf	I2C_Master_Write@d+1
  2190  0574  120A  118A  20FA  120A  118A  	fcall	_I2C_Master_Write
  2191                           
  2192                           ;mainMaster.c: 194:     I2C_Master_RepeatedStart();
  2193  0579  120A  118A  20F3  120A  118A  	fcall	_I2C_Master_RepeatedStart
  2194                           
  2195                           ;mainMaster.c: 195:     I2C_Master_Write(0xD1);
  2196  057E  30D1               	movlw	209
  2197  057F  00F0               	movwf	I2C_Master_Write@d
  2198  0580  3000               	movlw	0
  2199  0581  00F1               	movwf	I2C_Master_Write@d+1
  2200  0582  120A  118A  20FA  120A  118A  	fcall	_I2C_Master_Write
  2201                           
  2202                           ;mainMaster.c: 196:     tempMSB = I2C_Master_Read(1);
  2203  0587  3001               	movlw	1
  2204  0588  00F0               	movwf	I2C_Master_Read@a
  2205  0589  3000               	movlw	0
  2206  058A  00F1               	movwf	I2C_Master_Read@a+1
  2207  058B  120A  118A  224E  120A  118A  	fcall	_I2C_Master_Read
  2208  0590  0870               	movf	?_I2C_Master_Read,w
  2209  0591  1283               	bcf	3,5	;RP0=0, select bank0
  2210  0592  1303               	bcf	3,6	;RP1=0, select bank0
  2211  0593  00AD               	movwf	??_get_temp
  2212  0594  082D               	movf	??_get_temp,w
  2213  0595  00B9               	movwf	get_temp@tempMSB
  2214                           
  2215                           ;mainMaster.c: 197:     tempLSB = I2C_Master_Read(0);
  2216  0596  3000               	movlw	0
  2217  0597  00F0               	movwf	I2C_Master_Read@a
  2218  0598  00F1               	movwf	I2C_Master_Read@a+1
  2219  0599  120A  118A  224E  120A  118A  	fcall	_I2C_Master_Read
  2220  059E  0870               	movf	?_I2C_Master_Read,w
  2221  059F  1283               	bcf	3,5	;RP0=0, select bank0
  2222  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  2223  05A1  00AD               	movwf	??_get_temp
  2224  05A2  082D               	movf	??_get_temp,w
  2225  05A3  00BA               	movwf	get_temp@tempLSB
  2226                           
  2227                           ;mainMaster.c: 198:     I2C_Master_Stop();
  2228  05A4  120A  118A  20EC  120A  118A  	fcall	_I2C_Master_Stop
  2229                           
  2230                           ;mainMaster.c: 200:     tempMSB = tempMSB - 4;
  2231  05A9  1283               	bcf	3,5	;RP0=0, select bank0
  2232  05AA  1303               	bcf	3,6	;RP1=0, select bank0
  2233  05AB  0839               	movf	get_temp@tempMSB,w
  2234  05AC  3EFC               	addlw	252
  2235  05AD  00AD               	movwf	??_get_temp
  2236  05AE  082D               	movf	??_get_temp,w
  2237  05AF  00B9               	movwf	get_temp@tempMSB
  2238                           
  2239                           ;mainMaster.c: 201:     tempLSB = (tempLSB >> 6) * 25;
  2240  05B0  3019               	movlw	25
  2241  05B1  00AD               	movwf	??_get_temp
  2242  05B2  082D               	movf	??_get_temp,w
  2243  05B3  00F0               	movwf	___bmul@multiplicand
  2244  05B4  083A               	movf	get_temp@tempLSB,w
  2245  05B5  00AE               	movwf	??_get_temp+1
  2246  05B6  3006               	movlw	6
  2247  05B7                     u1125:	
  2248  05B7  1003               	clrc
  2249  05B8  0CAE               	rrf	??_get_temp+1,f
  2250  05B9  3EFF               	addlw	-1
  2251  05BA  1D03               	skipz
  2252  05BB  2DB7               	goto	u1125
  2253  05BC  082E               	movf	??_get_temp+1,w
  2254  05BD  120A  118A  2116  120A  118A  	fcall	___bmul
  2255  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  2256  05C3  1303               	bcf	3,6	;RP1=0, select bank0
  2257  05C4  00AF               	movwf	??_get_temp+2
  2258  05C5  082F               	movf	??_get_temp+2,w
  2259  05C6  00BA               	movwf	get_temp@tempLSB
  2260                           
  2261                           ;mainMaster.c: 202:     sprintf(temperature, "%d", tempMSB);
  2262  05C7  3050               	movlw	(low (((STR_12+1)-__stringbase)| (0+32768)))& (0+255)
  2263  05C8  00AD               	movwf	??_get_temp
  2264  05C9  082D               	movf	??_get_temp,w
  2265  05CA  00A0               	movwf	sprintf@f
  2266  05CB  0839               	movf	get_temp@tempMSB,w
  2267  05CC  00AE               	movwf	??_get_temp+1
  2268  05CD  01AF               	clrf	??_get_temp+2
  2269  05CE  082E               	movf	??_get_temp+1,w
  2270  05CF  00A1               	movwf	?_sprintf+1
  2271  05D0  082F               	movf	??_get_temp+2,w
  2272  05D1  00A2               	movwf	?_sprintf+2
  2273  05D2  3030               	movlw	(low (get_temp@temperature| 0))& (0+255)
  2274  05D3  120A  118A  25FF  120A  118A  	fcall	_sprintf
  2275                           
  2276                           ;mainMaster.c: 203:     if (tempLSB == 0){
  2277  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  2278  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  2279  05DA  083A               	movf	get_temp@tempLSB,w
  2280  05DB  1D03               	btfss	3,2
  2281  05DC  2DDF               	goto	l1778
  2282                           
  2283                           ;mainMaster.c: 204:         sprintf(decimal, ".%d0", tempLSB);
  2284  05DD  304A               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2285  05DE  2DE0               	goto	L9
  2286  05DF                     l1778:	
  2287                           ;mainMaster.c: 205:     } else {
  2288                           
  2289                           
  2290                           ;mainMaster.c: 206:         sprintf(decimal, ".%d", tempLSB);
  2291  05DF  304F               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2292  05E0                     L9:	
  2293  05E0  00AD               	movwf	??_get_temp
  2294  05E1  082D               	movf	??_get_temp,w
  2295  05E2  00A0               	movwf	sprintf@f
  2296  05E3  083A               	movf	get_temp@tempLSB,w
  2297  05E4  00AE               	movwf	??_get_temp+1
  2298  05E5  01AF               	clrf	??_get_temp+2
  2299  05E6  082E               	movf	??_get_temp+1,w
  2300  05E7  00A1               	movwf	?_sprintf+1
  2301  05E8  082F               	movf	??_get_temp+2,w
  2302  05E9  00A2               	movwf	?_sprintf+2
  2303  05EA  3036               	movlw	(low (get_temp@decimal| 0))& (0+255)
  2304  05EB  120A  118A  25FF  120A  118A  	fcall	_sprintf
  2305                           
  2306                           ;mainMaster.c: 208:     strcat(temperature, decimal);
  2307  05F0  3036               	movlw	(low (get_temp@decimal| 0))& (0+255)
  2308  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  2309  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  2310  05F3  00AD               	movwf	??_get_temp
  2311  05F4  082D               	movf	??_get_temp,w
  2312  05F5  00F0               	movwf	strcat@from
  2313  05F6  3030               	movlw	(low (get_temp@temperature| 0))& (0+255)
  2314  05F7  120A  118A  21D7   	fcall	_strcat
  2315                           
  2316                           ;mainMaster.c: 209:     temperature[5] = '\0';
  2317  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  2318  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  2319  05FC  01B5               	clrf	get_temp@temperature+5
  2320                           
  2321                           ;mainMaster.c: 211:     return (temperature);
  2322  05FD  3030               	movlw	(low (get_temp@temperature| 0))& (0+255)
  2323  05FE  0008               	return
  2324  05FF                     __end_of_get_temp:	
  2325                           
  2326                           	psect	text10
  2327  01D7                     __ptext10:	
  2328 ;; *************** function _strcat *****************
  2329 ;; Defined at:
  2330 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  2331 ;; Parameters:    Size  Location     Type
  2332 ;;  to              1    wreg     PTR unsigned char 
  2333 ;;		 -> get_temp@temperature(6), 
  2334 ;;  from            1    0[COMMON] PTR const unsigned char 
  2335 ;;		 -> get_temp@decimal(3), 
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;  to              1    2[COMMON] PTR unsigned char 
  2338 ;;		 -> get_temp@temperature(6), 
  2339 ;;  cp              1    3[COMMON] PTR unsigned char 
  2340 ;;		 -> get_temp@temperature(6), 
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  1    wreg      PTR unsigned char 
  2343 ;; Registers used:
  2344 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2350 ;;      Params:         1       0       0       0       0
  2351 ;;      Locals:         2       0       0       0       0
  2352 ;;      Temps:          1       0       0       0       0
  2353 ;;      Totals:         4       0       0       0       0
  2354 ;;Total ram usage:        4 bytes
  2355 ;; Hardware stack levels used:    1
  2356 ;; This function calls:
  2357 ;;		Nothing
  2358 ;; This function is called by:
  2359 ;;		_get_temp
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           
  2364                           ;psect for function _strcat
  2365  01D7                     _strcat:	
  2366                           
  2367                           ;incstack = 0
  2368                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  2369                           ;strcat@to stored from wreg
  2370  01D7  00F2               	movwf	strcat@to
  2371  01D8  0872               	movf	strcat@to,w
  2372  01D9  00F1               	movwf	??_strcat
  2373  01DA  0871               	movf	??_strcat,w
  2374  01DB  00F3               	movwf	strcat@cp
  2375  01DC                     l1678:	
  2376  01DC  0873               	movf	strcat@cp,w
  2377  01DD  0084               	movwf	4
  2378  01DE  1383               	bcf	3,7	;select IRP bank0
  2379  01DF  0800               	movf	0,w
  2380  01E0  1903               	btfsc	3,2
  2381  01E1  29EF               	goto	l1682
  2382  01E2  3001               	movlw	1
  2383  01E3  00F1               	movwf	??_strcat
  2384  01E4  0871               	movf	??_strcat,w
  2385  01E5  07F3               	addwf	strcat@cp,f
  2386  01E6  29DC               	goto	l1678
  2387  01E7                     l1680:	
  2388  01E7  3001               	movlw	1
  2389  01E8  00F1               	movwf	??_strcat
  2390  01E9  0871               	movf	??_strcat,w
  2391  01EA  07F3               	addwf	strcat@cp,f
  2392  01EB  3001               	movlw	1
  2393  01EC  00F1               	movwf	??_strcat
  2394  01ED  0871               	movf	??_strcat,w
  2395  01EE  07F0               	addwf	strcat@from,f
  2396  01EF                     l1682:	
  2397  01EF  0870               	movf	strcat@from,w
  2398  01F0  0084               	movwf	4
  2399  01F1  0800               	movf	0,w
  2400  01F2  00F1               	movwf	??_strcat
  2401  01F3  0873               	movf	strcat@cp,w
  2402  01F4  0084               	movwf	4
  2403  01F5  0871               	movf	??_strcat,w
  2404  01F6  0080               	movwf	0
  2405  01F7  0800               	movf	0,w
  2406  01F8  1903               	btfsc	3,2
  2407  01F9  0008               	return
  2408  01FA  29E7               	goto	l1680
  2409  01FB                     __end_of_strcat:	
  2410                           
  2411                           	psect	text11
  2412  05FF                     __ptext11:	
  2413 ;; *************** function _sprintf *****************
  2414 ;; Defined at:
  2415 ;;		line 500 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  sp              1    wreg     PTR unsigned char 
  2418 ;;		 -> get_temp@decimal(3), get_temp@temperature(6), 
  2419 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  2420 ;;		 -> STR_12(4), STR_11(5), STR_10(3), 
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  2423 ;;		 -> get_temp@decimal(3), get_temp@temperature(6), 
  2424 ;;  tmpval          4    0        struct .
  2425 ;;  val             2    9[BANK0 ] unsigned int 
  2426 ;;  cp              2    0        PTR const unsigned char 
  2427 ;;  len             2    0        unsigned int 
  2428 ;;  c               1   12[BANK0 ] unsigned char 
  2429 ;;  prec            1    8[BANK0 ] char 
  2430 ;;  flag            1    7[BANK0 ] unsigned char 
  2431 ;;  ap              1    6[BANK0 ] PTR void [1]
  2432 ;;		 -> ?_sprintf(2), 
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  2    0[BANK0 ] int 
  2435 ;; Registers used:
  2436 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2442 ;;      Params:         0       3       0       0       0
  2443 ;;      Locals:         0       7       0       0       0
  2444 ;;      Temps:          0       3       0       0       0
  2445 ;;      Totals:         0      13       0       0       0
  2446 ;;Total ram usage:       13 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; Hardware stack levels required when called:    1
  2449 ;; This function calls:
  2450 ;;		___lwdiv
  2451 ;;		___lwmod
  2452 ;; This function is called by:
  2453 ;;		_get_temp
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           
  2458                           ;psect for function _sprintf
  2459  05FF                     _sprintf:	
  2460                           
  2461                           ;incstack = 0
  2462                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2463                           ;sprintf@sp stored from wreg
  2464  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  2465  0600  1303               	bcf	3,6	;RP1=0, select bank0
  2466  0601  00AB               	movwf	sprintf@sp
  2467                           
  2468                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;D:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  2469  0602  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2470  0603  00A3               	movwf	??_sprintf
  2471  0604  0823               	movf	??_sprintf,w
  2472  0605  00A6               	movwf	sprintf@ap
  2473  0606                     l1664:	
  2474                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  2475                           
  2476                           
  2477                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  2478  0606  3001               	movlw	1
  2479  0607  07A0               	addwf	sprintf@f,f
  2480  0608  30FF               	movlw	-1
  2481  0609  0720               	addwf	sprintf@f,w
  2482  060A  0084               	movwf	4
  2483  060B  120A  118A  200D  120A  118A  	fcall	stringdir
  2484  0610  00A3               	movwf	??_sprintf
  2485  0611  0823               	movf	??_sprintf,w
  2486  0612  00AC               	movwf	sprintf@c
  2487  0613  082C               	movf	sprintf@c,w
  2488  0614  1903               	btfsc	3,2
  2489  0615  2ED2               	goto	l1666
  2490                           
  2491                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  2492  0616  3025               	movlw	37
  2493  0617  062C               	xorwf	sprintf@c,w
  2494  0618  1903               	btfsc	3,2
  2495  0619  2E26               	goto	l1620
  2496                           
  2497                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;D:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  2498  061A  082C               	movf	sprintf@c,w
  2499  061B  00A3               	movwf	??_sprintf
  2500  061C  082B               	movf	sprintf@sp,w
  2501  061D  0084               	movwf	4
  2502  061E  0823               	movf	??_sprintf,w
  2503  061F  1383               	bcf	3,7	;select IRP bank0
  2504  0620  0080               	movwf	0
  2505  0621  3001               	movlw	1
  2506  0622  00A3               	movwf	??_sprintf
  2507  0623  0823               	movf	??_sprintf,w
  2508  0624  07AB               	addwf	sprintf@sp,f
  2509                           
  2510                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  2511  0625  2E06               	goto	l1664
  2512  0626                     l1620:	
  2513                           
  2514                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  2515  0626  01A7               	clrf	sprintf@flag
  2516                           
  2517                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  2518  0627  3001               	movlw	1
  2519  0628  07A0               	addwf	sprintf@f,f
  2520  0629  30FF               	movlw	-1
  2521  062A  0720               	addwf	sprintf@f,w
  2522  062B  0084               	movwf	4
  2523  062C  120A  118A  200D  120A  118A  	fcall	stringdir
  2524  0631  00AC               	movwf	sprintf@c
  2525  0632  00A3               	movwf	??_sprintf
  2526  0633  01A4               	clrf	??_sprintf+1
  2527                           
  2528                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2529                           ; Switch size 1, requested type "simple"
  2530                           ; Number of cases is 1, Range of values is 0 to 0
  2531                           ; switch strategies available:
  2532                           ; Name         Instructions Cycles
  2533                           ; simple_byte            4     3 (average)
  2534                           ; direct_byte           11     8 (fixed)
  2535                           ; jumptable            260     6 (fixed)
  2536                           ;	Chosen strategy is simple_byte
  2537  0634  0824               	movf	??_sprintf+1,w
  2538  0635  3A00               	xorlw	0	; case 0
  2539  0636  1903               	skipnz
  2540  0637  2E39               	goto	l1958
  2541  0638  2E06               	goto	l1664
  2542  0639                     l1958:	
  2543                           
  2544                           ; Switch size 1, requested type "simple"
  2545                           ; Number of cases is 3, Range of values is 0 to 105
  2546                           ; switch strategies available:
  2547                           ; Name         Instructions Cycles
  2548                           ; simple_byte           10     6 (average)
  2549                           ; jumptable            260     6 (fixed)
  2550                           ;	Chosen strategy is simple_byte
  2551  0639  0823               	movf	??_sprintf,w
  2552  063A  3A00               	xorlw	0	; case 0
  2553  063B  1903               	skipnz
  2554  063C  2ED2               	goto	l1666
  2555  063D  3A64               	xorlw	100	; case 100
  2556  063E  1903               	skipnz
  2557  063F  2E44               	goto	l1626
  2558  0640  3A0D               	xorlw	13	; case 105
  2559  0641  1903               	skipnz
  2560  0642  2E44               	goto	l1626
  2561  0643  2E06               	goto	l1664
  2562  0644                     l1626:	
  2563                           
  2564                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2565  0644  0826               	movf	sprintf@ap,w
  2566  0645  0084               	movwf	4
  2567  0646  1383               	bcf	3,7	;select IRP bank0
  2568  0647  0800               	movf	0,w
  2569  0648  00A9               	movwf	sprintf@val
  2570  0649  0A84               	incf	4,f
  2571  064A  0800               	movf	0,w
  2572  064B  00AA               	movwf	sprintf@val+1
  2573  064C  3002               	movlw	2
  2574  064D  00A3               	movwf	??_sprintf
  2575  064E  0823               	movf	??_sprintf,w
  2576  064F  07A6               	addwf	sprintf@ap,f
  2577                           
  2578                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  2579  0650  1FAA               	btfss	sprintf@val+1,7
  2580  0651  2E5B               	goto	l1636
  2581                           
  2582                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  2583  0652  3003               	movlw	3
  2584  0653  00A3               	movwf	??_sprintf
  2585  0654  0823               	movf	??_sprintf,w
  2586  0655  04A7               	iorwf	sprintf@flag,f
  2587                           
  2588                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  2589  0656  09A9               	comf	sprintf@val,f
  2590  0657  09AA               	comf	sprintf@val+1,f
  2591  0658  0AA9               	incf	sprintf@val,f
  2592  0659  1903               	skipnz
  2593  065A  0AAA               	incf	sprintf@val+1,f
  2594  065B                     l1636:	
  2595                           
  2596                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2597  065B  01AC               	clrf	sprintf@c
  2598  065C  0AAC               	incf	sprintf@c,f
  2599  065D                     l1642:	
  2600                           
  2601                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  2602  065D  082C               	movf	sprintf@c,w
  2603  065E  00A3               	movwf	??_sprintf
  2604  065F  0723               	addwf	??_sprintf,w
  2605  0660  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2606  0661  0084               	movwf	4
  2607  0662  120A  118A  200D  120A  118A  	fcall	stringdir
  2608  0667  00A4               	movwf	??_sprintf+1
  2609  0668  120A  118A  200D  120A  118A  	fcall	stringdir
  2610  066D  00A5               	movwf	??_sprintf+2
  2611  066E  0825               	movf	??_sprintf+2,w
  2612  066F  022A               	subwf	sprintf@val+1,w
  2613  0670  1D03               	skipz
  2614  0671  2E74               	goto	u945
  2615  0672  0824               	movf	??_sprintf+1,w
  2616  0673  0229               	subwf	sprintf@val,w
  2617  0674                     u945:	
  2618  0674  1C03               	btfss	3,0
  2619  0675  2E7E               	goto	l1648
  2620  0676  3001               	movlw	1
  2621  0677  00A3               	movwf	??_sprintf
  2622  0678  0823               	movf	??_sprintf,w
  2623  0679  07AC               	addwf	sprintf@c,f
  2624  067A  3005               	movlw	5
  2625  067B  062C               	xorwf	sprintf@c,w
  2626  067C  1D03               	btfss	3,2
  2627  067D  2E5D               	goto	l1642
  2628  067E                     l1648:	
  2629                           
  2630                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  2631  067E  0827               	movf	sprintf@flag,w
  2632  067F  3903               	andlw	3
  2633  0680  1903               	btfsc	3,2
  2634  0681  2E8D               	goto	l1654
  2635                           
  2636                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  2637  0682  302D               	movlw	45
  2638  0683  00A3               	movwf	??_sprintf
  2639  0684  082B               	movf	sprintf@sp,w
  2640  0685  0084               	movwf	4
  2641  0686  0823               	movf	??_sprintf,w
  2642  0687  1383               	bcf	3,7	;select IRP bank0
  2643  0688  0080               	movwf	0
  2644  0689  3001               	movlw	1
  2645  068A  00A3               	movwf	??_sprintf
  2646  068B  0823               	movf	??_sprintf,w
  2647  068C  07AB               	addwf	sprintf@sp,f
  2648  068D                     l1654:	
  2649                           
  2650                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  2651  068D  082C               	movf	sprintf@c,w
  2652  068E  00A3               	movwf	??_sprintf
  2653  068F  0823               	movf	??_sprintf,w
  2654  0690  00A8               	movwf	sprintf@prec
  2655  0691                     l1662:	
  2656                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  2657                           
  2658                           
  2659                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  2660  0691  30FF               	movlw	255
  2661  0692  00A3               	movwf	??_sprintf
  2662  0693  0823               	movf	??_sprintf,w
  2663  0694  07A8               	addwf	sprintf@prec,f
  2664  0695  0A28               	incf	sprintf@prec,w
  2665  0696  1903               	btfsc	3,2
  2666  0697  2E06               	goto	l1664
  2667                           
  2668                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  2669  0698  300A               	movlw	10
  2670  0699  00F8               	movwf	___lwmod@divisor
  2671  069A  3000               	movlw	0
  2672  069B  00F9               	movwf	___lwmod@divisor+1
  2673  069C  0828               	movf	sprintf@prec,w
  2674  069D  00A3               	movwf	??_sprintf
  2675  069E  0723               	addwf	??_sprintf,w
  2676  069F  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2677  06A0  0084               	movwf	4
  2678  06A1  120A  118A  200D  120A  118A  	fcall	stringdir
  2679  06A6  00F0               	movwf	___lwdiv@divisor
  2680  06A7  120A  118A  200D  120A  118A  	fcall	stringdir
  2681  06AC  00F1               	movwf	___lwdiv@divisor+1
  2682  06AD  082A               	movf	sprintf@val+1,w
  2683  06AE  00F3               	movwf	___lwdiv@dividend+1
  2684  06AF  0829               	movf	sprintf@val,w
  2685  06B0  00F2               	movwf	___lwdiv@dividend
  2686  06B1  120A  118A  231B  120A  118A  	fcall	___lwdiv
  2687  06B6  0871               	movf	?___lwdiv+1,w
  2688  06B7  00FB               	movwf	___lwmod@dividend+1
  2689  06B8  0870               	movf	?___lwdiv,w
  2690  06B9  00FA               	movwf	___lwmod@dividend
  2691  06BA  120A  118A  227A  120A  118A  	fcall	___lwmod
  2692  06BF  0878               	movf	?___lwmod,w
  2693  06C0  3E30               	addlw	48
  2694  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  2695  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  2696  06C3  00A4               	movwf	??_sprintf+1
  2697  06C4  0824               	movf	??_sprintf+1,w
  2698  06C5  00AC               	movwf	sprintf@c
  2699                           
  2700                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  2701  06C6  082C               	movf	sprintf@c,w
  2702  06C7  00A3               	movwf	??_sprintf
  2703  06C8  082B               	movf	sprintf@sp,w
  2704  06C9  0084               	movwf	4
  2705  06CA  0823               	movf	??_sprintf,w
  2706  06CB  1383               	bcf	3,7	;select IRP bank0
  2707  06CC  0080               	movwf	0
  2708  06CD  3001               	movlw	1
  2709  06CE  00A3               	movwf	??_sprintf
  2710  06CF  0823               	movf	??_sprintf,w
  2711  06D0  07AB               	addwf	sprintf@sp,f
  2712  06D1  2E91               	goto	l1662
  2713  06D2                     l1666:	
  2714                           
  2715                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  2716  06D2  082B               	movf	sprintf@sp,w
  2717  06D3  0084               	movwf	4
  2718  06D4  1383               	bcf	3,7	;select IRP bank0
  2719  06D5  0180               	clrf	0
  2720  06D6  0008               	return
  2721  06D7                     __end_of_sprintf:	
  2722                           
  2723                           	psect	text12
  2724  027A                     __ptext12:	
  2725 ;; *************** function ___lwmod *****************
  2726 ;; Defined at:
  2727 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;  divisor         2    8[COMMON] unsigned int 
  2730 ;;  dividend        2   10[COMMON] unsigned int 
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  counter         1   13[COMMON] unsigned char 
  2733 ;; Return value:  Size  Location     Type
  2734 ;;                  2    8[COMMON] unsigned int 
  2735 ;; Registers used:
  2736 ;;		wreg, status,2, status,0
  2737 ;; Tracked objects:
  2738 ;;		On entry : 0/0
  2739 ;;		On exit  : 0/0
  2740 ;;		Unchanged: 0/0
  2741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2742 ;;      Params:         4       0       0       0       0
  2743 ;;      Locals:         1       0       0       0       0
  2744 ;;      Temps:          1       0       0       0       0
  2745 ;;      Totals:         6       0       0       0       0
  2746 ;;Total ram usage:        6 bytes
  2747 ;; Hardware stack levels used:    1
  2748 ;; This function calls:
  2749 ;;		Nothing
  2750 ;; This function is called by:
  2751 ;;		_sprintf
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           
  2756                           ;psect for function ___lwmod
  2757  027A                     ___lwmod:	
  2758                           
  2759                           ;incstack = 0
  2760                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2761  027A  0878               	movf	___lwmod@divisor,w
  2762  027B  0479               	iorwf	___lwmod@divisor+1,w
  2763  027C  1903               	btfsc	3,2
  2764  027D  2AA7               	goto	l1506
  2765  027E  01FD               	clrf	___lwmod@counter
  2766  027F  0AFD               	incf	___lwmod@counter,f
  2767  0280                     l1496:	
  2768  0280  1BF9               	btfsc	___lwmod@divisor+1,7
  2769  0281  2A8E               	goto	l1498
  2770  0282  3001               	movlw	1
  2771  0283                     u845:	
  2772  0283  1003               	clrc
  2773  0284  0DF8               	rlf	___lwmod@divisor,f
  2774  0285  0DF9               	rlf	___lwmod@divisor+1,f
  2775  0286  3EFF               	addlw	-1
  2776  0287  1D03               	skipz
  2777  0288  2A83               	goto	u845
  2778  0289  3001               	movlw	1
  2779  028A  00FC               	movwf	??___lwmod
  2780  028B  087C               	movf	??___lwmod,w
  2781  028C  07FD               	addwf	___lwmod@counter,f
  2782  028D  2A80               	goto	l1496
  2783  028E                     l1498:	
  2784  028E  0879               	movf	___lwmod@divisor+1,w
  2785  028F  027B               	subwf	___lwmod@dividend+1,w
  2786  0290  1D03               	skipz
  2787  0291  2A94               	goto	u865
  2788  0292  0878               	movf	___lwmod@divisor,w
  2789  0293  027A               	subwf	___lwmod@dividend,w
  2790  0294                     u865:	
  2791  0294  1C03               	skipc
  2792  0295  2A9C               	goto	l1502
  2793  0296  0878               	movf	___lwmod@divisor,w
  2794  0297  02FA               	subwf	___lwmod@dividend,f
  2795  0298  0879               	movf	___lwmod@divisor+1,w
  2796  0299  1C03               	skipc
  2797  029A  03FB               	decf	___lwmod@dividend+1,f
  2798  029B  02FB               	subwf	___lwmod@dividend+1,f
  2799  029C                     l1502:	
  2800  029C  3001               	movlw	1
  2801  029D                     u875:	
  2802  029D  1003               	clrc
  2803  029E  0CF9               	rrf	___lwmod@divisor+1,f
  2804  029F  0CF8               	rrf	___lwmod@divisor,f
  2805  02A0  3EFF               	addlw	-1
  2806  02A1  1D03               	skipz
  2807  02A2  2A9D               	goto	u875
  2808  02A3  3001               	movlw	1
  2809  02A4  02FD               	subwf	___lwmod@counter,f
  2810  02A5  1D03               	btfss	3,2
  2811  02A6  2A8E               	goto	l1498
  2812  02A7                     l1506:	
  2813  02A7  087B               	movf	___lwmod@dividend+1,w
  2814  02A8  00F9               	movwf	?___lwmod+1
  2815  02A9  087A               	movf	___lwmod@dividend,w
  2816  02AA  00F8               	movwf	?___lwmod
  2817  02AB  0008               	return
  2818  02AC                     __end_of___lwmod:	
  2819                           
  2820                           	psect	text13
  2821  031B                     __ptext13:	
  2822 ;; *************** function ___lwdiv *****************
  2823 ;; Defined at:
  2824 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;  divisor         2    0[COMMON] unsigned int 
  2827 ;;  dividend        2    2[COMMON] unsigned int 
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;  quotient        2    5[COMMON] unsigned int 
  2830 ;;  counter         1    7[COMMON] unsigned char 
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  2    0[COMMON] unsigned int 
  2833 ;; Registers used:
  2834 ;;		wreg, status,2, status,0
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2840 ;;      Params:         4       0       0       0       0
  2841 ;;      Locals:         3       0       0       0       0
  2842 ;;      Temps:          1       0       0       0       0
  2843 ;;      Totals:         8       0       0       0       0
  2844 ;;Total ram usage:        8 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; This function calls:
  2847 ;;		Nothing
  2848 ;; This function is called by:
  2849 ;;		_sprintf
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           
  2854                           ;psect for function ___lwdiv
  2855  031B                     ___lwdiv:	
  2856                           
  2857                           ;incstack = 0
  2858                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2859  031B  01F5               	clrf	___lwdiv@quotient
  2860  031C  01F6               	clrf	___lwdiv@quotient+1
  2861  031D  0870               	movf	___lwdiv@divisor,w
  2862  031E  0471               	iorwf	___lwdiv@divisor+1,w
  2863  031F  1903               	btfsc	3,2
  2864  0320  2B52               	goto	l1484
  2865  0321  01F7               	clrf	___lwdiv@counter
  2866  0322  0AF7               	incf	___lwdiv@counter,f
  2867  0323                     l1472:	
  2868  0323  1BF1               	btfsc	___lwdiv@divisor+1,7
  2869  0324  2B31               	goto	l1474
  2870  0325  3001               	movlw	1
  2871  0326                     u775:	
  2872  0326  1003               	clrc
  2873  0327  0DF0               	rlf	___lwdiv@divisor,f
  2874  0328  0DF1               	rlf	___lwdiv@divisor+1,f
  2875  0329  3EFF               	addlw	-1
  2876  032A  1D03               	skipz
  2877  032B  2B26               	goto	u775
  2878  032C  3001               	movlw	1
  2879  032D  00F4               	movwf	??___lwdiv
  2880  032E  0874               	movf	??___lwdiv,w
  2881  032F  07F7               	addwf	___lwdiv@counter,f
  2882  0330  2B23               	goto	l1472
  2883  0331                     l1474:	
  2884  0331  3001               	movlw	1
  2885  0332                     u795:	
  2886  0332  1003               	clrc
  2887  0333  0DF5               	rlf	___lwdiv@quotient,f
  2888  0334  0DF6               	rlf	___lwdiv@quotient+1,f
  2889  0335  3EFF               	addlw	-1
  2890  0336  1D03               	skipz
  2891  0337  2B32               	goto	u795
  2892  0338  0871               	movf	___lwdiv@divisor+1,w
  2893  0339  0273               	subwf	___lwdiv@dividend+1,w
  2894  033A  1D03               	skipz
  2895  033B  2B3E               	goto	u805
  2896  033C  0870               	movf	___lwdiv@divisor,w
  2897  033D  0272               	subwf	___lwdiv@dividend,w
  2898  033E                     u805:	
  2899  033E  1C03               	skipc
  2900  033F  2B47               	goto	l1480
  2901  0340  0870               	movf	___lwdiv@divisor,w
  2902  0341  02F2               	subwf	___lwdiv@dividend,f
  2903  0342  0871               	movf	___lwdiv@divisor+1,w
  2904  0343  1C03               	skipc
  2905  0344  03F3               	decf	___lwdiv@dividend+1,f
  2906  0345  02F3               	subwf	___lwdiv@dividend+1,f
  2907  0346  1475               	bsf	___lwdiv@quotient,0
  2908  0347                     l1480:	
  2909  0347  3001               	movlw	1
  2910  0348                     u815:	
  2911  0348  1003               	clrc
  2912  0349  0CF1               	rrf	___lwdiv@divisor+1,f
  2913  034A  0CF0               	rrf	___lwdiv@divisor,f
  2914  034B  3EFF               	addlw	-1
  2915  034C  1D03               	skipz
  2916  034D  2B48               	goto	u815
  2917  034E  3001               	movlw	1
  2918  034F  02F7               	subwf	___lwdiv@counter,f
  2919  0350  1D03               	btfss	3,2
  2920  0351  2B31               	goto	l1474
  2921  0352                     l1484:	
  2922  0352  0876               	movf	___lwdiv@quotient+1,w
  2923  0353  00F1               	movwf	?___lwdiv+1
  2924  0354  0875               	movf	___lwdiv@quotient,w
  2925  0355  00F0               	movwf	?___lwdiv
  2926  0356  0008               	return
  2927  0357                     __end_of___lwdiv:	
  2928                           
  2929                           	psect	text14
  2930  0116                     __ptext14:	
  2931 ;; *************** function ___bmul *****************
  2932 ;; Defined at:
  2933 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  multiplier      1    wreg     unsigned char 
  2936 ;;  multiplicand    1    0[COMMON] unsigned char 
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;  multiplier      1    3[COMMON] unsigned char 
  2939 ;;  product         1    2[COMMON] unsigned char 
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      unsigned char 
  2942 ;; Registers used:
  2943 ;;		wreg, status,2, status,0
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2949 ;;      Params:         1       0       0       0       0
  2950 ;;      Locals:         2       0       0       0       0
  2951 ;;      Temps:          1       0       0       0       0
  2952 ;;      Totals:         4       0       0       0       0
  2953 ;;Total ram usage:        4 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; This function calls:
  2956 ;;		Nothing
  2957 ;; This function is called by:
  2958 ;;		_get_temp
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           
  2963                           ;psect for function ___bmul
  2964  0116                     ___bmul:	
  2965                           
  2966                           ;incstack = 0
  2967                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2968                           ;___bmul@multiplier stored from wreg
  2969  0116  00F3               	movwf	___bmul@multiplier
  2970  0117  01F2               	clrf	___bmul@product
  2971  0118                     l1686:	
  2972  0118  1C73               	btfss	___bmul@multiplier,0
  2973  0119  291E               	goto	l1690
  2974  011A  0870               	movf	___bmul@multiplicand,w
  2975  011B  00F1               	movwf	??___bmul
  2976  011C  0871               	movf	??___bmul,w
  2977  011D  07F2               	addwf	___bmul@product,f
  2978  011E                     l1690:	
  2979  011E  1003               	clrc
  2980  011F  0DF0               	rlf	___bmul@multiplicand,f
  2981  0120  1003               	clrc
  2982  0121  0CF3               	rrf	___bmul@multiplier,f
  2983  0122  0873               	movf	___bmul@multiplier,w
  2984  0123  1D03               	btfss	3,2
  2985  0124  2918               	goto	l1686
  2986  0125  0872               	movf	___bmul@product,w
  2987  0126  0008               	return
  2988  0127                     __end_of___bmul:	
  2989                           
  2990                           	psect	text15
  2991  00F3                     __ptext15:	
  2992 ;; *************** function _I2C_Master_RepeatedStart *****************
  2993 ;; Defined at:
  2994 ;;		line 47 in file "./I2C.h"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;		None
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;		None
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  1    wreg      void 
  3001 ;; Registers used:
  3002 ;;		wreg, status,2, status,0, pclath, cstack
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3008 ;;      Params:         0       0       0       0       0
  3009 ;;      Locals:         0       0       0       0       0
  3010 ;;      Temps:          0       0       0       0       0
  3011 ;;      Totals:         0       0       0       0       0
  3012 ;;Total ram usage:        0 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    1
  3015 ;; This function calls:
  3016 ;;		_I2C_Master_Wait
  3017 ;; This function is called by:
  3018 ;;		_get_time
  3019 ;;		_get_temp
  3020 ;;		_get_day
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           
  3025                           ;psect for function _I2C_Master_RepeatedStart
  3026  00F3                     _I2C_Master_RepeatedStart:	
  3027                           
  3028                           ;./I2C.h: 49:     I2C_Master_Wait();
  3029                           
  3030                           ;incstack = 0
  3031                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  3032  00F3  120A  118A  2102   	fcall	_I2C_Master_Wait
  3033                           
  3034                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  3035  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  3036  00F7  1303               	bcf	3,6	;RP1=0, select bank1
  3037  00F8  1491               	bsf	17,1	;volatile
  3038  00F9  0008               	return
  3039  00FA                     __end_of_I2C_Master_RepeatedStart:	
  3040                           
  3041                           	psect	text16
  3042  0199                     __ptext16:	
  3043 ;; *************** function _get_hall *****************
  3044 ;; Defined at:
  3045 ;;		line 214 in file "mainMaster.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;		None
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;  key             1    7[COMMON] unsigned char 
  3050 ;; Return value:  Size  Location     Type
  3051 ;;                  1    wreg      unsigned char 
  3052 ;; Registers used:
  3053 ;;		wreg, status,2, status,0, pclath, cstack
  3054 ;; Tracked objects:
  3055 ;;		On entry : 0/0
  3056 ;;		On exit  : 0/0
  3057 ;;		Unchanged: 0/0
  3058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3059 ;;      Params:         0       0       0       0       0
  3060 ;;      Locals:         1       0       0       0       0
  3061 ;;      Temps:          1       0       0       0       0
  3062 ;;      Totals:         2       0       0       0       0
  3063 ;;Total ram usage:        2 bytes
  3064 ;; Hardware stack levels used:    1
  3065 ;; Hardware stack levels required when called:    2
  3066 ;; This function calls:
  3067 ;;		_I2C_Master_Read
  3068 ;;		_I2C_Master_Start
  3069 ;;		_I2C_Master_Stop
  3070 ;;		_I2C_Master_Write
  3071 ;; This function is called by:
  3072 ;;		_main
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           
  3077                           ;psect for function _get_hall
  3078  0199                     _get_hall:	
  3079                           
  3080                           ;mainMaster.c: 215:     char key;;mainMaster.c: 217:     I2C_Master_Start();
  3081                           
  3082                           ;incstack = 0
  3083                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  3084  0199  120A  118A  20E5  120A  118A  	fcall	_I2C_Master_Start
  3085                           
  3086                           ;mainMaster.c: 218:     I2C_Master_Write(0x11);
  3087  019E  3011               	movlw	17
  3088  019F  00F0               	movwf	I2C_Master_Write@d
  3089  01A0  3000               	movlw	0
  3090  01A1  00F1               	movwf	I2C_Master_Write@d+1
  3091  01A2  120A  118A  20FA  120A  118A  	fcall	_I2C_Master_Write
  3092                           
  3093                           ;mainMaster.c: 219:     key = I2C_Master_Read(0);
  3094  01A7  3000               	movlw	0
  3095  01A8  00F0               	movwf	I2C_Master_Read@a
  3096  01A9  00F1               	movwf	I2C_Master_Read@a+1
  3097  01AA  120A  118A  224E  120A  118A  	fcall	_I2C_Master_Read
  3098  01AF  0870               	movf	?_I2C_Master_Read,w
  3099  01B0  00F6               	movwf	??_get_hall
  3100  01B1  0876               	movf	??_get_hall,w
  3101  01B2  00F7               	movwf	get_hall@key
  3102                           
  3103                           ;mainMaster.c: 220:     I2C_Master_Stop();
  3104  01B3  120A  118A  20EC   	fcall	_I2C_Master_Stop
  3105                           
  3106                           ;mainMaster.c: 222:     return (key);
  3107  01B6  0877               	movf	get_hall@key,w
  3108  01B7  0008               	return
  3109  01B8                     __end_of_get_hall:	
  3110                           
  3111                           	psect	text17
  3112  017A                     __ptext17:	
  3113 ;; *************** function _get_PIR *****************
  3114 ;; Defined at:
  3115 ;;		line 236 in file "mainMaster.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;		None
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;  PIR             1    7[COMMON] unsigned char 
  3120 ;; Return value:  Size  Location     Type
  3121 ;;                  1    wreg      unsigned char 
  3122 ;; Registers used:
  3123 ;;		wreg, status,2, status,0, pclath, cstack
  3124 ;; Tracked objects:
  3125 ;;		On entry : 0/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3129 ;;      Params:         0       0       0       0       0
  3130 ;;      Locals:         1       0       0       0       0
  3131 ;;      Temps:          1       0       0       0       0
  3132 ;;      Totals:         2       0       0       0       0
  3133 ;;Total ram usage:        2 bytes
  3134 ;; Hardware stack levels used:    1
  3135 ;; Hardware stack levels required when called:    2
  3136 ;; This function calls:
  3137 ;;		_I2C_Master_Read
  3138 ;;		_I2C_Master_Start
  3139 ;;		_I2C_Master_Stop
  3140 ;;		_I2C_Master_Write
  3141 ;; This function is called by:
  3142 ;;		_main
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           
  3147                           ;psect for function _get_PIR
  3148  017A                     _get_PIR:	
  3149                           
  3150                           ;mainMaster.c: 237:     char PIR;;mainMaster.c: 239:     I2C_Master_Start();
  3151                           
  3152                           ;incstack = 0
  3153                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  3154  017A  120A  118A  20E5  120A  118A  	fcall	_I2C_Master_Start
  3155                           
  3156                           ;mainMaster.c: 240:     I2C_Master_Write(0x41);
  3157  017F  3041               	movlw	65
  3158  0180  00F0               	movwf	I2C_Master_Write@d
  3159  0181  3000               	movlw	0
  3160  0182  00F1               	movwf	I2C_Master_Write@d+1
  3161  0183  120A  118A  20FA  120A  118A  	fcall	_I2C_Master_Write
  3162                           
  3163                           ;mainMaster.c: 241:     PIR = I2C_Master_Read(0);
  3164  0188  3000               	movlw	0
  3165  0189  00F0               	movwf	I2C_Master_Read@a
  3166  018A  00F1               	movwf	I2C_Master_Read@a+1
  3167  018B  120A  118A  224E  120A  118A  	fcall	_I2C_Master_Read
  3168  0190  0870               	movf	?_I2C_Master_Read,w
  3169  0191  00F6               	movwf	??_get_PIR
  3170  0192  0876               	movf	??_get_PIR,w
  3171  0193  00F7               	movwf	get_PIR@PIR
  3172                           
  3173                           ;mainMaster.c: 242:     I2C_Master_Stop();
  3174  0194  120A  118A  20EC   	fcall	_I2C_Master_Stop
  3175                           
  3176                           ;mainMaster.c: 244:     return (PIR);
  3177  0197  0877               	movf	get_PIR@PIR,w
  3178  0198  0008               	return
  3179  0199                     __end_of_get_PIR:	
  3180                           
  3181                           	psect	text18
  3182  015B                     __ptext18:	
  3183 ;; *************** function _get_IR *****************
  3184 ;; Defined at:
  3185 ;;		line 247 in file "mainMaster.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;		None
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;  IR              1    7[COMMON] unsigned char 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  1    wreg      unsigned char 
  3192 ;; Registers used:
  3193 ;;		wreg, status,2, status,0, pclath, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3199 ;;      Params:         0       0       0       0       0
  3200 ;;      Locals:         1       0       0       0       0
  3201 ;;      Temps:          1       0       0       0       0
  3202 ;;      Totals:         2       0       0       0       0
  3203 ;;Total ram usage:        2 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    2
  3206 ;; This function calls:
  3207 ;;		_I2C_Master_Read
  3208 ;;		_I2C_Master_Start
  3209 ;;		_I2C_Master_Stop
  3210 ;;		_I2C_Master_Write
  3211 ;; This function is called by:
  3212 ;;		_main
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           
  3217                           ;psect for function _get_IR
  3218  015B                     _get_IR:	
  3219                           
  3220                           ;mainMaster.c: 248:     char IR;;mainMaster.c: 250:     I2C_Master_Start();
  3221                           
  3222                           ;incstack = 0
  3223                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  3224  015B  120A  118A  20E5  120A  118A  	fcall	_I2C_Master_Start
  3225                           
  3226                           ;mainMaster.c: 251:     I2C_Master_Write(0x31);
  3227  0160  3031               	movlw	49
  3228  0161  00F0               	movwf	I2C_Master_Write@d
  3229  0162  3000               	movlw	0
  3230  0163  00F1               	movwf	I2C_Master_Write@d+1
  3231  0164  120A  118A  20FA  120A  118A  	fcall	_I2C_Master_Write
  3232                           
  3233                           ;mainMaster.c: 252:     IR = I2C_Master_Read(0);
  3234  0169  3000               	movlw	0
  3235  016A  00F0               	movwf	I2C_Master_Read@a
  3236  016B  00F1               	movwf	I2C_Master_Read@a+1
  3237  016C  120A  118A  224E  120A  118A  	fcall	_I2C_Master_Read
  3238  0171  0870               	movf	?_I2C_Master_Read,w
  3239  0172  00F6               	movwf	??_get_IR
  3240  0173  0876               	movf	??_get_IR,w
  3241  0174  00F7               	movwf	get_IR@IR
  3242                           
  3243                           ;mainMaster.c: 253:     I2C_Master_Stop();
  3244  0175  120A  118A  20EC   	fcall	_I2C_Master_Stop
  3245                           
  3246                           ;mainMaster.c: 255:     return (IR);
  3247  0178  0877               	movf	get_IR@IR,w
  3248  0179  0008               	return
  3249  017A                     __end_of_get_IR:	
  3250                           
  3251                           	psect	text19
  3252  00FA                     __ptext19:	
  3253 ;; *************** function _I2C_Master_Write *****************
  3254 ;; Defined at:
  3255 ;;		line 65 in file "./I2C.h"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;  d               2    0[COMMON] unsigned int 
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;		None
  3260 ;; Return value:  Size  Location     Type
  3261 ;;                  1    wreg      void 
  3262 ;; Registers used:
  3263 ;;		wreg, status,2, status,0, pclath, cstack
  3264 ;; Tracked objects:
  3265 ;;		On entry : 0/0
  3266 ;;		On exit  : 0/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3269 ;;      Params:         2       0       0       0       0
  3270 ;;      Locals:         0       0       0       0       0
  3271 ;;      Temps:          0       0       0       0       0
  3272 ;;      Totals:         2       0       0       0       0
  3273 ;;Total ram usage:        2 bytes
  3274 ;; Hardware stack levels used:    1
  3275 ;; Hardware stack levels required when called:    1
  3276 ;; This function calls:
  3277 ;;		_I2C_Master_Wait
  3278 ;; This function is called by:
  3279 ;;		_get_time
  3280 ;;		_get_temp
  3281 ;;		_get_hall
  3282 ;;		_get_tripwire
  3283 ;;		_get_PIR
  3284 ;;		_get_IR
  3285 ;;		_write_RTC
  3286 ;;		_get_day
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           
  3291                           ;psect for function _I2C_Master_Write
  3292  00FA                     _I2C_Master_Write:	
  3293                           
  3294                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  3295                           
  3296                           ;incstack = 0
  3297                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  3298  00FA  120A  118A  2102   	fcall	_I2C_Master_Wait
  3299                           
  3300                           ;./I2C.h: 68:     SSPBUF = d;
  3301  00FD  0870               	movf	I2C_Master_Write@d,w
  3302  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  3303  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  3304  0100  0093               	movwf	19	;volatile
  3305  0101  0008               	return
  3306  0102                     __end_of_I2C_Master_Write:	
  3307                           
  3308                           	psect	text20
  3309  00EC                     __ptext20:	
  3310 ;; *************** function _I2C_Master_Stop *****************
  3311 ;; Defined at:
  3312 ;;		line 55 in file "./I2C.h"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;		None
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;		None
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  1    wreg      void 
  3319 ;; Registers used:
  3320 ;;		wreg, status,2, status,0, pclath, cstack
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3326 ;;      Params:         0       0       0       0       0
  3327 ;;      Locals:         0       0       0       0       0
  3328 ;;      Temps:          0       0       0       0       0
  3329 ;;      Totals:         0       0       0       0       0
  3330 ;;Total ram usage:        0 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    1
  3333 ;; This function calls:
  3334 ;;		_I2C_Master_Wait
  3335 ;; This function is called by:
  3336 ;;		_get_time
  3337 ;;		_get_temp
  3338 ;;		_get_hall
  3339 ;;		_get_tripwire
  3340 ;;		_get_PIR
  3341 ;;		_get_IR
  3342 ;;		_write_RTC
  3343 ;;		_get_day
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           
  3348                           ;psect for function _I2C_Master_Stop
  3349  00EC                     _I2C_Master_Stop:	
  3350                           
  3351                           ;./I2C.h: 57:     I2C_Master_Wait();
  3352                           
  3353                           ;incstack = 0
  3354                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  3355  00EC  120A  118A  2102   	fcall	_I2C_Master_Wait
  3356                           
  3357                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  3358  00EF  1683               	bsf	3,5	;RP0=1, select bank1
  3359  00F0  1303               	bcf	3,6	;RP1=0, select bank1
  3360  00F1  1511               	bsf	17,2	;volatile
  3361  00F2  0008               	return
  3362  00F3                     __end_of_I2C_Master_Stop:	
  3363                           
  3364                           	psect	text21
  3365  00E5                     __ptext21:	
  3366 ;; *************** function _I2C_Master_Start *****************
  3367 ;; Defined at:
  3368 ;;		line 39 in file "./I2C.h"
  3369 ;; Parameters:    Size  Location     Type
  3370 ;;		None
  3371 ;; Auto vars:     Size  Location     Type
  3372 ;;		None
  3373 ;; Return value:  Size  Location     Type
  3374 ;;                  1    wreg      void 
  3375 ;; Registers used:
  3376 ;;		wreg, status,2, status,0, pclath, cstack
  3377 ;; Tracked objects:
  3378 ;;		On entry : 0/0
  3379 ;;		On exit  : 0/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3382 ;;      Params:         0       0       0       0       0
  3383 ;;      Locals:         0       0       0       0       0
  3384 ;;      Temps:          0       0       0       0       0
  3385 ;;      Totals:         0       0       0       0       0
  3386 ;;Total ram usage:        0 bytes
  3387 ;; Hardware stack levels used:    1
  3388 ;; Hardware stack levels required when called:    1
  3389 ;; This function calls:
  3390 ;;		_I2C_Master_Wait
  3391 ;; This function is called by:
  3392 ;;		_get_time
  3393 ;;		_get_temp
  3394 ;;		_get_hall
  3395 ;;		_get_tripwire
  3396 ;;		_get_PIR
  3397 ;;		_get_IR
  3398 ;;		_write_RTC
  3399 ;;		_get_day
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           
  3404                           ;psect for function _I2C_Master_Start
  3405  00E5                     _I2C_Master_Start:	
  3406                           
  3407                           ;./I2C.h: 41:     I2C_Master_Wait();
  3408                           
  3409                           ;incstack = 0
  3410                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  3411  00E5  120A  118A  2102   	fcall	_I2C_Master_Wait
  3412                           
  3413                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  3414  00E8  1683               	bsf	3,5	;RP0=1, select bank1
  3415  00E9  1303               	bcf	3,6	;RP1=0, select bank1
  3416  00EA  1411               	bsf	17,0	;volatile
  3417  00EB  0008               	return
  3418  00EC                     __end_of_I2C_Master_Start:	
  3419                           
  3420                           	psect	text22
  3421  024E                     __ptext22:	
  3422 ;; *************** function _I2C_Master_Read *****************
  3423 ;; Defined at:
  3424 ;;		line 74 in file "./I2C.h"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;  a               2    0[COMMON] unsigned short 
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;  temp            2    4[COMMON] unsigned short 
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  2    0[COMMON] unsigned short 
  3431 ;; Registers used:
  3432 ;;		wreg, status,2, status,0, pclath, cstack
  3433 ;; Tracked objects:
  3434 ;;		On entry : 0/0
  3435 ;;		On exit  : 0/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3438 ;;      Params:         2       0       0       0       0
  3439 ;;      Locals:         2       0       0       0       0
  3440 ;;      Temps:          2       0       0       0       0
  3441 ;;      Totals:         6       0       0       0       0
  3442 ;;Total ram usage:        6 bytes
  3443 ;; Hardware stack levels used:    1
  3444 ;; Hardware stack levels required when called:    1
  3445 ;; This function calls:
  3446 ;;		_I2C_Master_Wait
  3447 ;; This function is called by:
  3448 ;;		_get_time
  3449 ;;		_get_temp
  3450 ;;		_get_hall
  3451 ;;		_get_tripwire
  3452 ;;		_get_PIR
  3453 ;;		_get_IR
  3454 ;;		_get_day
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           
  3459                           ;psect for function _I2C_Master_Read
  3460  024E                     _I2C_Master_Read:	
  3461                           
  3462                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  3463                           
  3464                           ;incstack = 0
  3465                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  3466  024E  120A  118A  2102  120A  118A  	fcall	_I2C_Master_Wait
  3467                           
  3468                           ;./I2C.h: 78:     RCEN = 1;
  3469  0253  1683               	bsf	3,5	;RP0=1, select bank1
  3470  0254  1303               	bcf	3,6	;RP1=0, select bank1
  3471  0255  1591               	bsf	17,3	;volatile
  3472                           
  3473                           ;./I2C.h: 79:     I2C_Master_Wait();
  3474  0256  120A  118A  2102  120A  118A  	fcall	_I2C_Master_Wait
  3475                           
  3476                           ;./I2C.h: 80:     temp = SSPBUF;
  3477  025B  1283               	bcf	3,5	;RP0=0, select bank0
  3478  025C  1303               	bcf	3,6	;RP1=0, select bank0
  3479  025D  0813               	movf	19,w	;volatile
  3480  025E  00F2               	movwf	??_I2C_Master_Read
  3481  025F  01F3               	clrf	??_I2C_Master_Read+1
  3482  0260  0872               	movf	??_I2C_Master_Read,w
  3483  0261  00F4               	movwf	I2C_Master_Read@temp
  3484  0262  0873               	movf	??_I2C_Master_Read+1,w
  3485  0263  00F5               	movwf	I2C_Master_Read@temp+1
  3486                           
  3487                           ;./I2C.h: 81:     I2C_Master_Wait();
  3488  0264  120A  118A  2102  120A  118A  	fcall	_I2C_Master_Wait
  3489                           
  3490                           ;./I2C.h: 83:     if(a == 1){
  3491  0269  0370               	decf	I2C_Master_Read@a,w
  3492  026A  0471               	iorwf	I2C_Master_Read@a+1,w
  3493  026B  1D03               	btfss	3,2
  3494  026C  2A71               	goto	l94
  3495                           
  3496                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  3497  026D  1683               	bsf	3,5	;RP0=1, select bank1
  3498  026E  1303               	bcf	3,6	;RP1=0, select bank1
  3499  026F  1291               	bcf	17,5	;volatile
  3500                           
  3501                           ;./I2C.h: 85:     }else{
  3502  0270  2A74               	goto	l95
  3503  0271                     l94:	
  3504                           
  3505                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  3506  0271  1683               	bsf	3,5	;RP0=1, select bank1
  3507  0272  1303               	bcf	3,6	;RP1=0, select bank1
  3508  0273  1691               	bsf	17,5	;volatile
  3509  0274                     l95:	
  3510                           ;./I2C.h: 87:     }
  3511                           
  3512                           
  3513                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  3514  0274  1611               	bsf	17,4	;volatile
  3515                           
  3516                           ;./I2C.h: 89:     return temp;
  3517  0275  0875               	movf	I2C_Master_Read@temp+1,w
  3518  0276  00F1               	movwf	?_I2C_Master_Read+1
  3519  0277  0874               	movf	I2C_Master_Read@temp,w
  3520  0278  00F0               	movwf	?_I2C_Master_Read
  3521  0279  0008               	return
  3522  027A                     __end_of_I2C_Master_Read:	
  3523                           
  3524                           	psect	text23
  3525  0102                     __ptext23:	
  3526 ;; *************** function _I2C_Master_Wait *****************
  3527 ;; Defined at:
  3528 ;;		line 32 in file "./I2C.h"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;		None
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;		None
  3533 ;; Return value:  Size  Location     Type
  3534 ;;                  1    wreg      void 
  3535 ;; Registers used:
  3536 ;;		wreg, status,2
  3537 ;; Tracked objects:
  3538 ;;		On entry : 0/0
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3542 ;;      Params:         0       0       0       0       0
  3543 ;;      Locals:         0       0       0       0       0
  3544 ;;      Temps:          0       0       0       0       0
  3545 ;;      Totals:         0       0       0       0       0
  3546 ;;Total ram usage:        0 bytes
  3547 ;; Hardware stack levels used:    1
  3548 ;; This function calls:
  3549 ;;		Nothing
  3550 ;; This function is called by:
  3551 ;;		_I2C_Master_Start
  3552 ;;		_I2C_Master_RepeatedStart
  3553 ;;		_I2C_Master_Stop
  3554 ;;		_I2C_Master_Write
  3555 ;;		_I2C_Master_Read
  3556 ;; This function uses a non-reentrant model
  3557 ;;
  3558                           
  3559                           
  3560                           ;psect for function _I2C_Master_Wait
  3561  0102                     _I2C_Master_Wait:	
  3562  0102                     l76:	
  3563                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  3564                           
  3565                           ;incstack = 0
  3566                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  3567                           
  3568  0102  1683               	bsf	3,5	;RP0=1, select bank1
  3569  0103  1303               	bcf	3,6	;RP1=0, select bank1
  3570  0104  1914               	btfsc	20,2	;volatile
  3571  0105  2902               	goto	l76
  3572  0106  0811               	movf	17,w	;volatile
  3573  0107  391F               	andlw	31
  3574  0108  1903               	btfsc	3,2
  3575  0109  0008               	return
  3576  010A  2902               	goto	l76
  3577  010B                     __end_of_I2C_Master_Wait:	
  3578                           
  3579                           	psect	text24
  3580  0357                     __ptext24:	
  3581 ;; *************** function _Lcd_Write_String *****************
  3582 ;; Defined at:
  3583 ;;		line 100 in file "./LCD4bits.h"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;  a               2    5[COMMON] PTR unsigned char 
  3586 ;;		 -> NULL(0), get_temp@temperature(6), get_time@string_time(6), STR_9(7), 
  3587 ;;		 -> STR_8(7), STR_7(8), STR_6(8), STR_5(9), 
  3588 ;;		 -> STR_4(9), STR_2(11), STR_1(12), 
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;  i               2   10[COMMON] int 
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  1    wreg      void 
  3593 ;; Registers used:
  3594 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3600 ;;      Params:         2       0       0       0       0
  3601 ;;      Locals:         2       0       0       0       0
  3602 ;;      Temps:          3       0       0       0       0
  3603 ;;      Totals:         7       0       0       0       0
  3604 ;;Total ram usage:        7 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    2
  3607 ;; This function calls:
  3608 ;;		_Lcd_Write_Char
  3609 ;; This function is called by:
  3610 ;;		_main
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           
  3615                           ;psect for function _Lcd_Write_String
  3616  0357                     _Lcd_Write_String:	
  3617                           
  3618                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  3619                           
  3620                           ;incstack = 0
  3621                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3622  0357  01FA               	clrf	Lcd_Write_String@i
  3623  0358  01FB               	clrf	Lcd_Write_String@i+1
  3624  0359                     l1726:	
  3625  0359  087A               	movf	Lcd_Write_String@i,w
  3626  035A  0775               	addwf	Lcd_Write_String@a,w
  3627  035B  00F8               	movwf	??_Lcd_Write_String+1
  3628  035C  0876               	movf	Lcd_Write_String@a+1,w
  3629  035D  00F7               	movwf	??_Lcd_Write_String
  3630  035E  1803               	skipnc
  3631  035F  0AF7               	incf	??_Lcd_Write_String,f
  3632  0360  1BFA               	btfsc	Lcd_Write_String@i,7
  3633  0361  03F7               	decf	??_Lcd_Write_String,f
  3634  0362  0877               	movf	??_Lcd_Write_String,w
  3635  0363  00F9               	movwf	??_Lcd_Write_String+2
  3636  0364  0879               	movf	??_Lcd_Write_String+2,w
  3637  0365  1283               	bcf	3,5	;RP0=0, select bank0
  3638  0366  1303               	bcf	3,6	;RP1=0, select bank0
  3639  0367  00FF               	movwf	127
  3640  0368  0878               	movf	??_Lcd_Write_String+1,w
  3641  0369  0084               	movwf	4
  3642  036A  120A  118A  2003  120A  118A  	fcall	stringtab
  3643  036F  3A00               	xorlw	0
  3644  0370  1903               	btfsc	3,2
  3645  0371  0008               	return
  3646                           
  3647                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  3648  0372  087A               	movf	Lcd_Write_String@i,w
  3649  0373  0775               	addwf	Lcd_Write_String@a,w
  3650  0374  00F8               	movwf	??_Lcd_Write_String+1
  3651  0375  0876               	movf	Lcd_Write_String@a+1,w
  3652  0376  00F7               	movwf	??_Lcd_Write_String
  3653  0377  1803               	skipnc
  3654  0378  0AF7               	incf	??_Lcd_Write_String,f
  3655  0379  1BFA               	btfsc	Lcd_Write_String@i,7
  3656  037A  03F7               	decf	??_Lcd_Write_String,f
  3657  037B  0877               	movf	??_Lcd_Write_String,w
  3658  037C  00F9               	movwf	??_Lcd_Write_String+2
  3659  037D  0879               	movf	??_Lcd_Write_String+2,w
  3660  037E  1283               	bcf	3,5	;RP0=0, select bank0
  3661  037F  1303               	bcf	3,6	;RP1=0, select bank0
  3662  0380  00FF               	movwf	127
  3663  0381  0878               	movf	??_Lcd_Write_String+1,w
  3664  0382  0084               	movwf	4
  3665  0383  120A  118A  2003  120A  118A  	fcall	stringtab
  3666  0388  120A  118A  22E2  120A  118A  	fcall	_Lcd_Write_Char
  3667  038D  3001               	movlw	1
  3668  038E  07FA               	addwf	Lcd_Write_String@i,f
  3669  038F  1803               	skipnc
  3670  0390  0AFB               	incf	Lcd_Write_String@i+1,f
  3671  0391  3000               	movlw	0
  3672  0392  07FB               	addwf	Lcd_Write_String@i+1,f
  3673  0393  2B59               	goto	l1726
  3674  0394                     __end_of_Lcd_Write_String:	
  3675                           
  3676                           	psect	text25
  3677  02E2                     __ptext25:	
  3678 ;; *************** function _Lcd_Write_Char *****************
  3679 ;; Defined at:
  3680 ;;		line 84 in file "./LCD4bits.h"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;  a               1    wreg     unsigned char 
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;  a               1    4[COMMON] unsigned char 
  3685 ;;  y               1    3[COMMON] unsigned char 
  3686 ;;  temp            1    2[COMMON] unsigned char 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      void 
  3689 ;; Registers used:
  3690 ;;		wreg, status,2, status,0, pclath, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3696 ;;      Params:         0       0       0       0       0
  3697 ;;      Locals:         3       0       0       0       0
  3698 ;;      Temps:          1       0       0       0       0
  3699 ;;      Totals:         4       0       0       0       0
  3700 ;;Total ram usage:        4 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; Hardware stack levels required when called:    1
  3703 ;; This function calls:
  3704 ;;		_Lcd_Port
  3705 ;; This function is called by:
  3706 ;;		_Lcd_Write_String
  3707 ;;		_main
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711                           
  3712                           ;psect for function _Lcd_Write_Char
  3713  02E2                     _Lcd_Write_Char:	
  3714                           
  3715                           ;incstack = 0
  3716                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3717                           ;Lcd_Write_Char@a stored from wreg
  3718  02E2  00F4               	movwf	Lcd_Write_Char@a
  3719                           
  3720                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  3721  02E3  0874               	movf	Lcd_Write_Char@a,w
  3722  02E4  390F               	andlw	15
  3723  02E5  00F1               	movwf	??_Lcd_Write_Char
  3724  02E6  0871               	movf	??_Lcd_Write_Char,w
  3725  02E7  00F2               	movwf	Lcd_Write_Char@temp
  3726                           
  3727                           ;./LCD4bits.h: 88:    y = a&0xF0;
  3728  02E8  0874               	movf	Lcd_Write_Char@a,w
  3729  02E9  39F0               	andlw	240
  3730  02EA  00F1               	movwf	??_Lcd_Write_Char
  3731  02EB  0871               	movf	??_Lcd_Write_Char,w
  3732  02EC  00F3               	movwf	Lcd_Write_Char@y
  3733                           
  3734                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  3735  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  3736  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  3737  02EF  1606               	bsf	6,4	;volatile
  3738                           
  3739                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  3740  02F0  0873               	movf	Lcd_Write_Char@y,w
  3741  02F1  00F1               	movwf	??_Lcd_Write_Char
  3742  02F2  3004               	movlw	4
  3743  02F3                     u915:	
  3744  02F3  1003               	clrc
  3745  02F4  0CF1               	rrf	??_Lcd_Write_Char,f
  3746  02F5  3EFF               	addlw	-1
  3747  02F6  1D03               	skipz
  3748  02F7  2AF3               	goto	u915
  3749  02F8  0871               	movf	??_Lcd_Write_Char,w
  3750  02F9  120A  118A  2127  120A  118A  	fcall	_Lcd_Port
  3751                           
  3752                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  3753  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  3754  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  3755  0300  1686               	bsf	6,5	;volatile
  3756                           
  3757                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3758  0301  301A               	movlw	26
  3759  0302  00F1               	movwf	??_Lcd_Write_Char
  3760  0303                     u1287:	
  3761  0303  0BF1               	decfsz	??_Lcd_Write_Char,f
  3762  0304  2B03               	goto	u1287
  3763  0305  0000               	nop
  3764                           
  3765                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  3766  0306  1283               	bcf	3,5	;RP0=0, select bank0
  3767  0307  1303               	bcf	3,6	;RP1=0, select bank0
  3768  0308  1286               	bcf	6,5	;volatile
  3769                           
  3770                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  3771  0309  0872               	movf	Lcd_Write_Char@temp,w
  3772  030A  120A  118A  2127  120A  118A  	fcall	_Lcd_Port
  3773                           
  3774                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  3775  030F  1283               	bcf	3,5	;RP0=0, select bank0
  3776  0310  1303               	bcf	3,6	;RP1=0, select bank0
  3777  0311  1686               	bsf	6,5	;volatile
  3778                           
  3779                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3780  0312  301A               	movlw	26
  3781  0313  00F1               	movwf	??_Lcd_Write_Char
  3782  0314                     u1297:	
  3783  0314  0BF1               	decfsz	??_Lcd_Write_Char,f
  3784  0315  2B14               	goto	u1297
  3785  0316  0000               	nop
  3786                           
  3787                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  3788  0317  1283               	bcf	3,5	;RP0=0, select bank0
  3789  0318  1303               	bcf	3,6	;RP1=0, select bank0
  3790  0319  1286               	bcf	6,5	;volatile
  3791  031A  0008               	return
  3792  031B                     __end_of_Lcd_Write_Char:	
  3793                           
  3794                           	psect	text26
  3795  0394                     __ptext26:	
  3796 ;; *************** function _Lcd_Set_Cursor *****************
  3797 ;; Defined at:
  3798 ;;		line 44 in file "./LCD4bits.h"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;  a               1    wreg     unsigned char 
  3801 ;;  b               1    4[COMMON] unsigned char 
  3802 ;; Auto vars:     Size  Location     Type
  3803 ;;  a               1    7[COMMON] unsigned char 
  3804 ;;  temp            1   10[COMMON] unsigned char 
  3805 ;;  y               1    9[COMMON] unsigned char 
  3806 ;;  z               1    8[COMMON] unsigned char 
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  1    wreg      void 
  3809 ;; Registers used:
  3810 ;;		wreg, status,2, status,0, pclath, cstack
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3816 ;;      Params:         1       0       0       0       0
  3817 ;;      Locals:         4       0       0       0       0
  3818 ;;      Temps:          2       0       0       0       0
  3819 ;;      Totals:         7       0       0       0       0
  3820 ;;Total ram usage:        7 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; Hardware stack levels required when called:    2
  3823 ;; This function calls:
  3824 ;;		_Lcd_Cmd
  3825 ;; This function is called by:
  3826 ;;		_main
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           
  3831                           ;psect for function _Lcd_Set_Cursor
  3832  0394                     _Lcd_Set_Cursor:	
  3833                           
  3834                           ;incstack = 0
  3835                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3836                           ;Lcd_Set_Cursor@a stored from wreg
  3837  0394  00F7               	movwf	Lcd_Set_Cursor@a
  3838                           
  3839                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  3840  0395  0377               	decf	Lcd_Set_Cursor@a,w
  3841  0396  1D03               	btfss	3,2
  3842  0397  2BB9               	goto	l1710
  3843                           
  3844                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  3845  0398  0874               	movf	Lcd_Set_Cursor@b,w
  3846  0399  3E7F               	addlw	127
  3847  039A  00F5               	movwf	??_Lcd_Set_Cursor
  3848  039B  0875               	movf	??_Lcd_Set_Cursor,w
  3849  039C  00FA               	movwf	Lcd_Set_Cursor@temp
  3850                           
  3851                           ;./LCD4bits.h: 50:   z = temp>>4;
  3852  039D  087A               	movf	Lcd_Set_Cursor@temp,w
  3853  039E  00F5               	movwf	??_Lcd_Set_Cursor
  3854  039F  3004               	movlw	4
  3855  03A0                     u1045:	
  3856  03A0  1003               	clrc
  3857  03A1  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3858  03A2  3EFF               	addlw	-1
  3859  03A3  1D03               	skipz
  3860  03A4  2BA0               	goto	u1045
  3861  03A5  0875               	movf	??_Lcd_Set_Cursor,w
  3862  03A6  00F6               	movwf	??_Lcd_Set_Cursor+1
  3863  03A7  0876               	movf	??_Lcd_Set_Cursor+1,w
  3864  03A8  00F8               	movwf	Lcd_Set_Cursor@z
  3865                           
  3866                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  3867  03A9  087A               	movf	Lcd_Set_Cursor@temp,w
  3868  03AA  390F               	andlw	15
  3869  03AB  00F5               	movwf	??_Lcd_Set_Cursor
  3870  03AC  0875               	movf	??_Lcd_Set_Cursor,w
  3871  03AD  00F9               	movwf	Lcd_Set_Cursor@y
  3872                           
  3873                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  3874  03AE  0878               	movf	Lcd_Set_Cursor@z,w
  3875  03AF  120A  118A  2141  120A  118A  	fcall	_Lcd_Cmd
  3876                           
  3877                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  3878  03B4  0879               	movf	Lcd_Set_Cursor@y,w
  3879  03B5  120A  118A  2141   	fcall	_Lcd_Cmd
  3880                           
  3881                           ;./LCD4bits.h: 54:  }
  3882  03B8  0008               	return
  3883  03B9                     l1710:	
  3884  03B9  3002               	movlw	2
  3885  03BA  0677               	xorwf	Lcd_Set_Cursor@a,w
  3886  03BB  1D03               	btfss	3,2
  3887  03BC  0008               	return
  3888                           
  3889                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  3890  03BD  0874               	movf	Lcd_Set_Cursor@b,w
  3891  03BE  3EBF               	addlw	191
  3892  03BF  00F5               	movwf	??_Lcd_Set_Cursor
  3893  03C0  0875               	movf	??_Lcd_Set_Cursor,w
  3894  03C1  00FA               	movwf	Lcd_Set_Cursor@temp
  3895                           
  3896                           ;./LCD4bits.h: 58:   z = temp>>4;
  3897  03C2  087A               	movf	Lcd_Set_Cursor@temp,w
  3898  03C3  00F5               	movwf	??_Lcd_Set_Cursor
  3899  03C4  3004               	movlw	4
  3900  03C5                     u1065:	
  3901  03C5  1003               	clrc
  3902  03C6  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3903  03C7  3EFF               	addlw	-1
  3904  03C8  1D03               	skipz
  3905  03C9  2BC5               	goto	u1065
  3906  03CA  0875               	movf	??_Lcd_Set_Cursor,w
  3907  03CB  00F6               	movwf	??_Lcd_Set_Cursor+1
  3908  03CC  0876               	movf	??_Lcd_Set_Cursor+1,w
  3909  03CD  00F8               	movwf	Lcd_Set_Cursor@z
  3910                           
  3911                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  3912  03CE  087A               	movf	Lcd_Set_Cursor@temp,w
  3913  03CF  390F               	andlw	15
  3914  03D0  00F5               	movwf	??_Lcd_Set_Cursor
  3915  03D1  0875               	movf	??_Lcd_Set_Cursor,w
  3916  03D2  00F9               	movwf	Lcd_Set_Cursor@y
  3917                           
  3918                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  3919  03D3  0878               	movf	Lcd_Set_Cursor@z,w
  3920  03D4  120A  118A  2141  120A  118A  	fcall	_Lcd_Cmd
  3921                           
  3922                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  3923  03D9  0879               	movf	Lcd_Set_Cursor@y,w
  3924  03DA  120A  118A  2141   	fcall	_Lcd_Cmd
  3925  03DD  0008               	return
  3926  03DE                     __end_of_Lcd_Set_Cursor:	
  3927                           
  3928                           	psect	text27
  3929  010B                     __ptext27:	
  3930 ;; *************** function _Lcd_Clear *****************
  3931 ;; Defined at:
  3932 ;;		line 38 in file "./LCD4bits.h"
  3933 ;; Parameters:    Size  Location     Type
  3934 ;;		None
  3935 ;; Auto vars:     Size  Location     Type
  3936 ;;		None
  3937 ;; Return value:  Size  Location     Type
  3938 ;;                  1    wreg      void 
  3939 ;; Registers used:
  3940 ;;		wreg, status,2, status,0, pclath, cstack
  3941 ;; Tracked objects:
  3942 ;;		On entry : 0/0
  3943 ;;		On exit  : 0/0
  3944 ;;		Unchanged: 0/0
  3945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3946 ;;      Params:         0       0       0       0       0
  3947 ;;      Locals:         0       0       0       0       0
  3948 ;;      Temps:          0       0       0       0       0
  3949 ;;      Totals:         0       0       0       0       0
  3950 ;;Total ram usage:        0 bytes
  3951 ;; Hardware stack levels used:    1
  3952 ;; Hardware stack levels required when called:    2
  3953 ;; This function calls:
  3954 ;;		_Lcd_Cmd
  3955 ;; This function is called by:
  3956 ;;		_main
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           
  3961                           ;psect for function _Lcd_Clear
  3962  010B                     _Lcd_Clear:	
  3963                           
  3964                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  3965                           
  3966                           ;incstack = 0
  3967                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3968  010B  3000               	movlw	0
  3969  010C  120A  118A  2141  120A  118A  	fcall	_Lcd_Cmd
  3970                           
  3971                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  3972  0111  3001               	movlw	1
  3973  0112  120A  118A  2141   	fcall	_Lcd_Cmd
  3974  0115  0008               	return
  3975  0116                     __end_of_Lcd_Clear:	
  3976                           
  3977                           	psect	text28
  3978  0141                     __ptext28:	
  3979 ;; *************** function _Lcd_Cmd *****************
  3980 ;; Defined at:
  3981 ;;		line 29 in file "./LCD4bits.h"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  a               1    wreg     unsigned char 
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;  a               1    3[COMMON] unsigned char 
  3986 ;; Return value:  Size  Location     Type
  3987 ;;                  1    wreg      void 
  3988 ;; Registers used:
  3989 ;;		wreg, status,2, status,0, pclath, cstack
  3990 ;; Tracked objects:
  3991 ;;		On entry : 0/0
  3992 ;;		On exit  : 0/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3995 ;;      Params:         0       0       0       0       0
  3996 ;;      Locals:         1       0       0       0       0
  3997 ;;      Temps:          2       0       0       0       0
  3998 ;;      Totals:         3       0       0       0       0
  3999 ;;Total ram usage:        3 bytes
  4000 ;; Hardware stack levels used:    1
  4001 ;; Hardware stack levels required when called:    1
  4002 ;; This function calls:
  4003 ;;		_Lcd_Port
  4004 ;; This function is called by:
  4005 ;;		_Lcd_Clear
  4006 ;;		_Lcd_Set_Cursor
  4007 ;;		_Lcd_Init
  4008 ;;		_Lcd_Shift_Right
  4009 ;;		_Lcd_Shift_Left
  4010 ;; This function uses a non-reentrant model
  4011 ;;
  4012                           
  4013                           
  4014                           ;psect for function _Lcd_Cmd
  4015  0141                     _Lcd_Cmd:	
  4016                           
  4017                           ;incstack = 0
  4018                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4019                           ;Lcd_Cmd@a stored from wreg
  4020  0141  00F3               	movwf	Lcd_Cmd@a
  4021                           
  4022                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  4023  0142  1283               	bcf	3,5	;RP0=0, select bank0
  4024  0143  1303               	bcf	3,6	;RP1=0, select bank0
  4025  0144  1206               	bcf	6,4	;volatile
  4026                           
  4027                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  4028  0145  0873               	movf	Lcd_Cmd@a,w
  4029  0146  120A  118A  2127  120A  118A  	fcall	_Lcd_Port
  4030                           
  4031                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  4032  014B  1283               	bcf	3,5	;RP0=0, select bank0
  4033  014C  1303               	bcf	3,6	;RP1=0, select bank0
  4034  014D  1686               	bsf	6,5	;volatile
  4035                           
  4036                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  4037  014E  300B               	movlw	11
  4038  014F  00F2               	movwf	??_Lcd_Cmd+1
  4039  0150  3062               	movlw	98
  4040  0151  00F1               	movwf	??_Lcd_Cmd
  4041  0152                     u1307:	
  4042  0152  0BF1               	decfsz	??_Lcd_Cmd,f
  4043  0153  2952               	goto	u1307
  4044  0154  0BF2               	decfsz	??_Lcd_Cmd+1,f
  4045  0155  2952               	goto	u1307
  4046  0156  0000               	nop
  4047                           
  4048                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  4049  0157  1283               	bcf	3,5	;RP0=0, select bank0
  4050  0158  1303               	bcf	3,6	;RP1=0, select bank0
  4051  0159  1286               	bcf	6,5	;volatile
  4052  015A  0008               	return
  4053  015B                     __end_of_Lcd_Cmd:	
  4054                           
  4055                           	psect	text29
  4056  0127                     __ptext29:	
  4057 ;; *************** function _Lcd_Port *****************
  4058 ;; Defined at:
  4059 ;;		line 7 in file "./LCD4bits.h"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;  a               1    wreg     unsigned char 
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;  a               1    0[COMMON] unsigned char 
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1    wreg      void 
  4066 ;; Registers used:
  4067 ;;		wreg
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4073 ;;      Params:         0       0       0       0       0
  4074 ;;      Locals:         1       0       0       0       0
  4075 ;;      Temps:          0       0       0       0       0
  4076 ;;      Totals:         1       0       0       0       0
  4077 ;;Total ram usage:        1 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; This function calls:
  4080 ;;		Nothing
  4081 ;; This function is called by:
  4082 ;;		_Lcd_Cmd
  4083 ;;		_Lcd_Init
  4084 ;;		_Lcd_Write_Char
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088                           
  4089                           ;psect for function _Lcd_Port
  4090  0127                     _Lcd_Port:	
  4091                           
  4092                           ;incstack = 0
  4093                           ; Regs used in _Lcd_Port: [wreg]
  4094                           ;Lcd_Port@a stored from wreg
  4095  0127  00F0               	movwf	Lcd_Port@a
  4096                           
  4097                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  4098  0128  1C70               	btfss	Lcd_Port@a,0
  4099  0129  292E               	goto	l102
  4100                           
  4101                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  4102  012A  1283               	bcf	3,5	;RP0=0, select bank0
  4103  012B  1303               	bcf	3,6	;RP1=0, select bank0
  4104  012C  1406               	bsf	6,0	;volatile
  4105  012D  2931               	goto	l103
  4106  012E                     l102:	
  4107                           ;./LCD4bits.h: 11:  else
  4108                           
  4109                           
  4110                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  4111  012E  1283               	bcf	3,5	;RP0=0, select bank0
  4112  012F  1303               	bcf	3,6	;RP1=0, select bank0
  4113  0130  1006               	bcf	6,0	;volatile
  4114  0131                     l103:	
  4115                           
  4116                           ;./LCD4bits.h: 14:  if(a & 2)
  4117  0131  1CF0               	btfss	Lcd_Port@a,1
  4118  0132  2935               	goto	l104
  4119                           
  4120                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  4121  0133  1486               	bsf	6,1	;volatile
  4122  0134  2936               	goto	l105
  4123  0135                     l104:	
  4124                           ;./LCD4bits.h: 16:  else
  4125                           
  4126                           
  4127                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  4128  0135  1086               	bcf	6,1	;volatile
  4129  0136                     l105:	
  4130                           
  4131                           ;./LCD4bits.h: 19:  if(a & 4)
  4132  0136  1D70               	btfss	Lcd_Port@a,2
  4133  0137  293A               	goto	l106
  4134                           
  4135                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  4136  0138  1506               	bsf	6,2	;volatile
  4137  0139  293B               	goto	l107
  4138  013A                     l106:	
  4139                           ;./LCD4bits.h: 21:  else
  4140                           
  4141                           
  4142                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  4143  013A  1106               	bcf	6,2	;volatile
  4144  013B                     l107:	
  4145                           
  4146                           ;./LCD4bits.h: 24:  if(a & 8)
  4147  013B  1DF0               	btfss	Lcd_Port@a,3
  4148  013C  293F               	goto	l108
  4149                           
  4150                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  4151  013D  1586               	bsf	6,3	;volatile
  4152  013E  0008               	return
  4153  013F                     l108:	
  4154                           ;./LCD4bits.h: 26:  else
  4155                           
  4156                           
  4157                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  4158  013F  1186               	bcf	6,3	;volatile
  4159  0140  0008               	return
  4160  0141                     __end_of_Lcd_Port:	
  4161  007E                     btemp	set	126	;btemp
  4162  007E                     wtemp0	set	126


Data Sizes:
    Strings     72
    Constant    10
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      35
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_3(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), get_temp@temperature(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_12(CODE[4]), STR_11(CODE[5]), STR_10(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), get_temp@temperature(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    sp__get_temp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@temperature(BANK0[6]), 

    temp	PTR unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), get_temp@temperature(BANK0[6]), 

    sp__get_time	PTR unsigned char  size(1) Largest target is 6
		 -> get_time@string_time(BANK0[6]), 

    time	PTR unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), get_time@string_time(BANK0[6]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 12
		 -> NULL(NULL[0]), get_temp@temperature(BANK0[6]), get_time@string_time(BANK0[6]), STR_9(CODE[7]), 
		 -> STR_8(CODE[7]), STR_7(CODE[8]), STR_6(CODE[8]), STR_5(CODE[9]), 
		 -> STR_4(CODE[9]), STR_2(CODE[11]), STR_1(CODE[12]), 


Critical Paths under _main in COMMON

    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_I2C_Master_Init
    _get_temp->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   18601
                                             27 BANK0      1     1      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                             _get_IR
                            _get_PIR
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                              _setup
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     200
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     632
                    _I2C_Master_Init
                           _Lcd_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     412
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                            10    10      0    2430
                                              6 COMMON     2     2      0
                                              0 BANK0      8     8      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                            14    14      0    4315
                                             13 BANK0     14    14      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1429
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     168
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2218
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1466
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     729
                                              0 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1028
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     836
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _initOscilador
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      31       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1C      23       5       43.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      31      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Feb 28 16:29:22 2019

                                pc 0002                     ___bmul@product 0072  
                      __CFG_CP$OFF 0000                                 l76 0102  
                      get_hall@key 0077                                 l94 0271  
                               l95 0274                                 _IR 003D  
                               fsr 0004                                l102 012E  
                              l103 0131                                l104 0135  
                              l105 0136                                l106 013A  
                              l107 013B                                l108 013F  
                              l145 0431                                l177 076E  
                              _GIE 005F                       __CFG_CPD$OFF 0000  
                              u705 04A2                                _PIR 003E  
                              u805 033E                                u725 04B0  
                              u815 0348                                u735 04C5  
                              u745 04D7                                u915 02F3  
                              u845 0283                                u775 0326  
                              u865 0294                                u945 0674  
                              u795 0332                                u875 029D  
                              u895 02BE                      ?_get_tripwire 0070  
                              fsr0 0004                                indf 0000  
                     __CFG_LVP$OFF 0000                               l1502 029C  
                             l1600 040A                               l1506 02A7  
                             l1602 040A                               l1620 0626  
                             l1444 049E                               l1710 03B9  
                             l1454 04D6                               l1446 04AE  
                             l1606 040F                               l1480 0347  
                             l1472 0323                               l1800 0233  
                             l1474 0331                               l1642 065D  
                             l1626 0644                               l1458 04E3  
                             l1802 0226                               l1484 0352  
                             l1636 065B                               l1804 0248  
                             l1900 07E4                               l1726 0359  
                             l1662 0691                               l1654 068D  
                             l1590 03EB                               l1496 0280  
                             l1648 067E                               l1664 0606  
                             l1680 01E7                               l1592 03F1  
                             l1904 07EC                               l1690 011E  
                             l1498 028E                               l1666 06D2  
                             l1682 01EF                               l1594 03F7  
                             l1586 03E0                               l1596 03FD  
                             l1588 03E5                               l1836 06E4  
                             l1686 0118                               l1678 01DC  
                             l1598 0403                               l1862 0771  
                             l1870 078E                               l1778 05DF  
                             l1858 074A                               l1956 0417  
                             l1876 07A7                               l1868 078C  
                             l1958 0639                               l1894 07DE  
                             l1886 07C9                               STR_1 001D  
                             STR_2 0029                        get_time@min 0027  
                             STR_3 0056                               STR_4 0034  
                             STR_5 003D                               STR_6 0046  
                             STR_7 004E                               STR_8 0047  
                             STR_9 004F                               u1105 0538  
                             u1115 054F                               u1045 03A0  
                             u1125 05B7                               u1065 03C5  
                             u1307 0152                               u1257 043D  
                             u1185 0768                               u1267 044C  
                             u1277 045B                               u1287 0303  
                             u1297 0314                               _PEIE 005E  
                             _RCEN 048B                       __CFG_WRT$OFF 0000  
                ?_Lcd_Write_String 0075   __end_of_I2C_Master_RepeatedStart 00FA  
                             _door 0040                               _main 06D7  
                             _temp 0041                               _time 0042  
                             _trip 003F                               btemp 007E  
                             start 0000                 ??_Lcd_Write_String 0077  
                    __CFG_IESO$OFF 0000                    __end_of_Lcd_Cmd 015B  
                ___bmul@multiplier 0073                      __CFG_MCLRE$ON 0000  
              get_temp@temperature 0030                   ?_I2C_Master_Init 0020  
                 ?_I2C_Master_Read 0070                   ?_I2C_Master_Wait 0070  
                 ?_I2C_Master_Stop 0070                              ?_main 0070  
                            STR_10 0062                              STR_11 005C  
                            STR_12 0061                      __CFG_WDTE$OFF 0000  
                     get_time@hour 0026                              _ANSEL 0188  
                  __end_of___lldiv 04EC                     ??_get_tripwire 0076  
                  __end_of___lwdiv 0357                    __end_of___lwmod 02AC  
                            _PORTA 0005                              _PORTB 0006  
          __size_of_Lcd_Set_Cursor 004A                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
                            _SSPIE 0463                              _SSPIF 0063  
                  __end_of_get_PIR 0199                     __CFG_FCMEN$OFF 0000  
                  __end_of_dpowers 001D                              _setup 01FB  
                            _state 003C                     __CFG_BOREN$OFF 0000  
                            pclath 000A                              status 0003  
                            wtemp0 007E                    __end_of_sprintf 06D7  
                 __end_of_Lcd_Init 048E                   __end_of_Lcd_Port 0141  
                  __initialization 07F3                       __end_of_main 07F3  
           __size_of_initOscilador 0055                             ??_main 003B  
               __size_of_Lcd_Clear 000B                  ?_I2C_Master_Start 0070  
                ?_I2C_Master_Write 0070                 ??_I2C_Master_Start 0070  
               ??_I2C_Master_Write 0072                             ?_setup 0070  
                           _ANSELH 0189                          ??_Lcd_Cmd 0071  
          __size_of_Lcd_Write_Char 0039                             _SSPADD 0093  
                           _TRISC3 043B                             _TRISC4 043C  
                           _SSPCON 0014                             _SSPBUF 0013  
                   __CFG_PWRTE$OFF 0000           _I2C_Master_RepeatedStart 00F3  
                 __end_of_get_hall 01B8                   __end_of_get_temp 05FF  
                 __end_of_get_time 0562                             ___bmul 0116  
                        ??___lldiv 0078                             _get_IR 015B  
                        ??___lwdiv 0074                          ??___lwmod 007C  
                        ??_get_PIR 0076                             _strcat 01D7  
                           _strcmp 0224                          ??_sprintf 0023  
                  Lcd_Set_Cursor@a 0077                    Lcd_Set_Cursor@b 0074  
                  Lcd_Set_Cursor@y 0079                    Lcd_Set_Cursor@z 0078  
          __end_of__initialization 07FC                      _initOscilador 03DE  
                __end_of_Lcd_Clear 0116               __end_of_get_tripwire 01D7  
              ___bmul@multiplicand 0070                     __pcstackCOMMON 0070  
                    __end_of_setup 0224                     _Lcd_Set_Cursor 0394  
                        ?_Lcd_Init 0070                          ?_Lcd_Port 0070  
                          ??_setup 007E                         __pbssBANK0 003C  
                   ?_initOscilador 0070                         __pmaintext 06D7  
                          ?___bmul 0070                            ?_get_IR 0070  
        __size_of_Lcd_Write_String 003D             __end_of_Lcd_Set_Cursor 03DE  
                          ?_strcat 0070                            ?_strcmp 0070  
                       ??_Lcd_Init 0074                         ??_Lcd_Port 0070  
                          _SSPCON2 0091                          ?_get_hall 0070  
                          _SSPSTAT 0094                          ?_get_temp 0070  
                        ?_get_time 0070                         __stringtab 0003  
              initOscilador@option 0072                     _Lcd_Write_Char 02E2  
                          _Lcd_Cmd 0141                    __size_of___bmul 0011  
                          ___lldiv 048E                            ___lwdiv 031B  
                          ___lwmod 027A                    __size_of_get_IR 001F  
                  ?_Lcd_Set_Cursor 0074                            _get_PIR 017A  
                          __ptext1 0224                            __ptext2 01FB  
                          __ptext3 03DE                            __ptext4 0433  
                          __ptext5 02AC                            __ptext6 048E  
                          __ptext7 01B8                            __ptext8 04EC  
                          __ptext9 0562                    __size_of_strcat 0024  
                  __size_of_strcmp 002A                            _dpowers 0013  
         __size_of_I2C_Master_Init 0036           __size_of_I2C_Master_Read 002C  
         __size_of_I2C_Master_Wait 0009           __size_of_I2C_Master_Stop 0007  
                  ??_initOscilador 0070                         ??_get_hall 0076  
                          _sprintf 05FF             __end_of_Lcd_Write_Char 031B  
                       ??_get_temp 002D                         ??_get_time 0076  
             end_of_initialization 07FC              __size_of_get_tripwire 001F  
       ??_I2C_Master_RepeatedStart 0070                         get_PIR@PIR 0077  
        __size_of_I2C_Master_Start 0007          __size_of_I2C_Master_Write 0008  
                  ___lldiv@divisor 0070                    ___lldiv@counter 007D  
                 I2C_Master_Init@c 0020                   I2C_Master_Read@a 0070  
                        Lcd_Port@a 0070                            strcmp@r 0075  
                        _PORTAbits 0005                          _PORTBbits 0006  
                        _PORTCbits 0007                       _get_tripwire 01B8  
                  ?_Lcd_Write_Char 0070                  Lcd_Write_String@a 0075  
                Lcd_Write_String@i 007A                get_time@string_time 0020  
                        _Lcd_Clear 010B                     __end_of___bmul 0127  
                 _Lcd_Write_String 0357                     __end_of_get_IR 017A  
                   __end_of_strcat 01FB                     __end_of_strcmp 024E  
              start_initialization 07F3                  __size_of_Lcd_Init 005B  
                __size_of_Lcd_Port 001A                  ??_I2C_Master_Init 0024  
                ??_I2C_Master_Read 0072                  ??_I2C_Master_Wait 0070  
                ??_I2C_Master_Stop 0070           __CFG_FOSC$INTRC_NOCLKOUT 0000  
                       ?_Lcd_Clear 0070                           ??___bmul 0071  
                         ??_get_IR 0076                    Lcd_Write_Char@a 0074  
                  Lcd_Write_Char@y 0073                           ??_strcat 0071  
                         ??_strcmp 0072                          ___latbits 0002  
                    __pcstackBANK0 0020                  __size_of_get_hall 001F  
                         ?_Lcd_Cmd 0070                  __size_of_get_temp 009D  
                __size_of_get_time 0076                        sprintf@flag 0027  
                      sprintf@prec 0028                   _I2C_Master_Start 00E5  
                 _I2C_Master_Write 00FA                   ___lwdiv@dividend 0072  
                 ??_Lcd_Set_Cursor 0075                    get_temp@decimal 0036  
                         ?___lldiv 0070                           ?___lwdiv 0070  
                         ?___lwmod 0078                           ?_get_PIR 0070  
                        __pstrings 0003                    get_temp@tempLSB 003A  
                  get_temp@tempMSB 0039                   ___lwdiv@quotient 0075  
                         ?_sprintf 0020                     __size_of_setup 0029  
                         Lcd_Cmd@a 0073                        ??_Lcd_Clear 0074  
                      __stringbase 0012                   ??_Lcd_Write_Char 0071  
                         _Lcd_Init 0433                           _Lcd_Port 0127  
              I2C_Master_Read@temp 0074              __end_of_initOscilador 0433  
         __end_of_Lcd_Write_String 0394                   __size_of_Lcd_Cmd 001A  
__size_of_I2C_Master_RepeatedStart 0007          ?_I2C_Master_RepeatedStart 0070  
                 __size_of___lldiv 005E                   __size_of___lwdiv 003C  
                 __size_of___lwmod 0032                 __end_of__stringtab 0013  
                 __size_of_get_PIR 001F                         sprintf@val 0029  
                  _I2C_Master_Init 02AC                    _I2C_Master_Read 024E  
                  _I2C_Master_Wait 0102                         strcat@from 0070  
                  _I2C_Master_Stop 00EC                    ___lwdiv@divisor 0070  
                  ___lwdiv@counter 0077                           __ptext10 01D7  
                         __ptext11 05FF                           __ptext20 00EC  
                         __ptext12 027A                           __ptext21 00E5  
                         __ptext13 031B                           __ptext22 024E  
                         __ptext14 0116                           __ptext23 0102  
                         __ptext15 00F3                           __ptext24 0357  
                         __ptext16 0199                           __ptext25 02E2  
                         __ptext17 017A                           __ptext26 0394  
                         __ptext18 015B                           __ptext27 010B  
                         __ptext19 00FA                           __ptext28 0141  
                         __ptext29 0127                  __CFG_BOR4V$BOR40V 0000  
                         _get_hall 0199                           _get_temp 0562  
                         _get_time 04EC                   __size_of_sprintf 00D8  
                    __size_of_main 011C                           get_IR@IR 0077  
         __end_of_I2C_Master_Start 00EC           __end_of_I2C_Master_Write 0102  
               Lcd_Write_Char@temp 0072                          sprintf@ap 0026  
                        sprintf@sp 002B                   ___lwmod@dividend 007A  
                 ___lldiv@dividend 0074                          stringcode 000D  
                       _OSCCONbits 008F            __end_of_I2C_Master_Init 02E2  
          __end_of_I2C_Master_Read 027A            __end_of_I2C_Master_Wait 010B  
          __end_of_I2C_Master_Stop 00F3                 Lcd_Set_Cursor@temp 007A  
                         sprintf@c 002C                           sprintf@f 0020  
                         strcat@cp 0073                           strcat@to 0072  
                         strcmp@s1 0076                           strcmp@s2 0070  
                 ___lldiv@quotient 0079                  I2C_Master_Write@d 0070  
                  ___lwmod@divisor 0078                    ___lwmod@counter 007D  
                         stringdir 000D                   get_tripwire@trip 0077  
                         stringtab 0003                        _SSPCON2bits 0091  

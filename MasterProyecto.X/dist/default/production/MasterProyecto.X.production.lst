

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Mar 07 15:58:13 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	psect	text28,local,class=CODE,merge=1,delta=2
    39                           	psect	text29,local,class=CODE,merge=1,delta=2
    40                           	psect	text30,local,class=CODE,merge=1,delta=2
    41                           	psect	text31,local,class=CODE,merge=1,delta=2
    42                           	psect	text32,local,class=CODE,merge=1,delta=2
    43                           	psect	text33,local,class=CODE,merge=1,delta=2
    44                           	psect	text34,local,class=CODE,merge=1,delta=2
    45                           	psect	text35,local,class=CODE,merge=1,delta=2
    46                           	psect	text36,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     
    49                           ; Version 2.05
    50                           ; Generated 20/12/2018 GMT
    51                           ; 
    52                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC16F887 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     	;# 
    84  0001                     	;# 
    85  0002                     	;# 
    86  0003                     	;# 
    87  0004                     	;# 
    88  0005                     	;# 
    89  0006                     	;# 
    90  0007                     	;# 
    91  0008                     	;# 
    92  0009                     	;# 
    93  000A                     	;# 
    94  000B                     	;# 
    95  000C                     	;# 
    96  000D                     	;# 
    97  000E                     	;# 
    98  000E                     	;# 
    99  000F                     	;# 
   100  0010                     	;# 
   101  0011                     	;# 
   102  0012                     	;# 
   103  0013                     	;# 
   104  0014                     	;# 
   105  0015                     	;# 
   106  0015                     	;# 
   107  0016                     	;# 
   108  0017                     	;# 
   109  0018                     	;# 
   110  0019                     	;# 
   111  001A                     	;# 
   112  001B                     	;# 
   113  001B                     	;# 
   114  001C                     	;# 
   115  001D                     	;# 
   116  001E                     	;# 
   117  001F                     	;# 
   118  0081                     	;# 
   119  0085                     	;# 
   120  0086                     	;# 
   121  0087                     	;# 
   122  0088                     	;# 
   123  0089                     	;# 
   124  008C                     	;# 
   125  008D                     	;# 
   126  008E                     	;# 
   127  008F                     	;# 
   128  0090                     	;# 
   129  0091                     	;# 
   130  0092                     	;# 
   131  0093                     	;# 
   132  0093                     	;# 
   133  0093                     	;# 
   134  0094                     	;# 
   135  0095                     	;# 
   136  0096                     	;# 
   137  0097                     	;# 
   138  0098                     	;# 
   139  0099                     	;# 
   140  009A                     	;# 
   141  009B                     	;# 
   142  009C                     	;# 
   143  009D                     	;# 
   144  009E                     	;# 
   145  009F                     	;# 
   146  0105                     	;# 
   147  0107                     	;# 
   148  0108                     	;# 
   149  0109                     	;# 
   150  010C                     	;# 
   151  010C                     	;# 
   152  010D                     	;# 
   153  010E                     	;# 
   154  010F                     	;# 
   155  0185                     	;# 
   156  0187                     	;# 
   157  0188                     	;# 
   158  0189                     	;# 
   159  018C                     	;# 
   160  018D                     	;# 
   161  0000                     	;# 
   162  0001                     	;# 
   163  0002                     	;# 
   164  0003                     	;# 
   165  0004                     	;# 
   166  0005                     	;# 
   167  0006                     	;# 
   168  0007                     	;# 
   169  0008                     	;# 
   170  0009                     	;# 
   171  000A                     	;# 
   172  000B                     	;# 
   173  000C                     	;# 
   174  000D                     	;# 
   175  000E                     	;# 
   176  000E                     	;# 
   177  000F                     	;# 
   178  0010                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0013                     	;# 
   182  0014                     	;# 
   183  0015                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  001D                     	;# 
   194  001E                     	;# 
   195  001F                     	;# 
   196  0081                     	;# 
   197  0085                     	;# 
   198  0086                     	;# 
   199  0087                     	;# 
   200  0088                     	;# 
   201  0089                     	;# 
   202  008C                     	;# 
   203  008D                     	;# 
   204  008E                     	;# 
   205  008F                     	;# 
   206  0090                     	;# 
   207  0091                     	;# 
   208  0092                     	;# 
   209  0093                     	;# 
   210  0093                     	;# 
   211  0093                     	;# 
   212  0094                     	;# 
   213  0095                     	;# 
   214  0096                     	;# 
   215  0097                     	;# 
   216  0098                     	;# 
   217  0099                     	;# 
   218  009A                     	;# 
   219  009B                     	;# 
   220  009C                     	;# 
   221  009D                     	;# 
   222  009E                     	;# 
   223  009F                     	;# 
   224  0105                     	;# 
   225  0107                     	;# 
   226  0108                     	;# 
   227  0109                     	;# 
   228  010C                     	;# 
   229  010C                     	;# 
   230  010D                     	;# 
   231  010E                     	;# 
   232  010F                     	;# 
   233  0185                     	;# 
   234  0187                     	;# 
   235  0188                     	;# 
   236  0189                     	;# 
   237  018C                     	;# 
   238  018D                     	;# 
   239                           
   240                           	psect	strings
   241  0003                     __pstrings:	
   242  0003                     stringtab:	
   243  0003                     __stringtab:	
   244                           
   245                           ;	String table - string pointers are 1 byte each
   246  0003  1BFF               	btfsc	btemp+1,7
   247  0004  280D               	ljmp	stringcode
   248  0005  1383               	bcf	3,7
   249  0006  187F               	btfsc	btemp+1,0
   250  0007  1783               	bsf	3,7
   251  0008  0800               	movf	0,w
   252  0009  0A84               	incf	4,f
   253  000A  1903               	skipnz
   254  000B  0AFF               	incf	btemp+1,f
   255  000C  0008               	return
   256  000D                     stringcode:	
   257  000D                     stringdir:	
   258  000D  3000               	movlw	high stringdir
   259  000E  008A               	movwf	10
   260  000F  0804               	movf	4,w
   261  0010  0A84               	incf	4,f
   262  0011  0782               	addwf	2,f
   263  0012                     __stringbase:	
   264  0012  3400               	retlw	0
   265  0013                     __end_of__stringtab:	
   266  0013                     _dpowers:	
   267  0013  3401               	retlw	1
   268  0014  3400               	retlw	0
   269  0015  340A               	retlw	10
   270  0016  3400               	retlw	0
   271  0017  3464               	retlw	100
   272  0018  3400               	retlw	0
   273  0019  34E8               	retlw	232
   274  001A  3403               	retlw	3
   275  001B  3410               	retlw	16
   276  001C  3427               	retlw	39
   277  001D                     __end_of_dpowers:	
   278  0007                     _PORTC	set	7
   279  0005                     _PORTA	set	5
   280  0006                     _PORTB	set	6
   281  0007                     _PORTCbits	set	7
   282  0008                     _PORTDbits	set	8
   283  0014                     _SSPCONbits	set	20
   284  0018                     _RCSTAbits	set	24
   285  0005                     _PORTAbits	set	5
   286  0019                     _TXREG	set	25
   287  001A                     _RCREG	set	26
   288  0006                     _PORTBbits	set	6
   289  0013                     _SSPBUF	set	19
   290  0014                     _SSPCON	set	20
   291  0065                     _RCIF	set	101
   292  00C4                     _CREN	set	196
   293  00C7                     _SPEN	set	199
   294  0063                     _SSPIF	set	99
   295  005E                     _PEIE	set	94
   296  005F                     _GIE	set	95
   297  0087                     _TRISC	set	135
   298  0088                     _TRISD	set	136
   299  0085                     _TRISA	set	133
   300  0086                     _TRISB	set	134
   301  0099                     _SPBRG	set	153
   302  008F                     _OSCCONbits	set	143
   303  0091                     _SSPCON2bits	set	145
   304  0087                     _TRISCbits	set	135
   305  0094                     _SSPSTAT	set	148
   306  0093                     _SSPADD	set	147
   307  0091                     _SSPCON2	set	145
   308  04C1                     _TRMT	set	1217
   309  04C5                     _TXEN	set	1221
   310  043E                     _TRISC6	set	1086
   311  043F                     _TRISC7	set	1087
   312  04C4                     _SYNC	set	1220
   313  04C2                     _BRGH	set	1218
   314  0463                     _SSPIE	set	1123
   315  043C                     _TRISC4	set	1084
   316  043B                     _TRISC3	set	1083
   317  048B                     _RCEN	set	1163
   318  0188                     _ANSEL	set	392
   319  0189                     _ANSELH	set	393
   320  001D                     STR_10:	
   321  001D  3444               	retlw	68	;'D'
   322  001E  346F               	retlw	111	;'o'
   323  001F  346F               	retlw	111	;'o'
   324  0020  3472               	retlw	114	;'r'
   325  0021  3420               	retlw	32	;' '
   326  0022  344F               	retlw	79	;'O'
   327  0023  3450               	retlw	80	;'P'
   328  0024  3445               	retlw	69	;'E'
   329  0025  344E               	retlw	78	;'N'
   330  0026  3420               	retlw	32	;' '
   331  0027  3420               	retlw	32	;' '
   332  0028  3400               	retlw	0
   333  0029                     STR_11:	
   334  0029  3444               	retlw	68	;'D'
   335  002A  346F               	retlw	111	;'o'
   336  002B  346F               	retlw	111	;'o'
   337  002C  3472               	retlw	114	;'r'
   338  002D  3420               	retlw	32	;' '
   339  002E  3443               	retlw	67	;'C'
   340  002F  344C               	retlw	76	;'L'
   341  0030  344F               	retlw	79	;'O'
   342  0031  3453               	retlw	83	;'S'
   343  0032  3445               	retlw	69	;'E'
   344  0033  3444               	retlw	68	;'D'
   345  0034  3400               	retlw	0
   346  0035                     STR_8:	
   347  0035  3420               	retlw	32	;' '
   348  0036  3420               	retlw	32	;' '
   349  0037  3420               	retlw	32	;' '
   350  0038  3420               	retlw	32	;' '
   351  0039  3420               	retlw	32	;' '
   352  003A  3420               	retlw	32	;' '
   353  003B  3420               	retlw	32	;' '
   354  003C  3420               	retlw	32	;' '
   355  003D  3420               	retlw	32	;' '
   356  003E  3400               	retlw	0
   357  003F                     STR_1:	
   358  003F  344C               	retlw	76	;'L'
   359  0040  3455               	retlw	85	;'U'
   360  0041  344E               	retlw	78	;'N'
   361  0042  3445               	retlw	69	;'E'
   362  0043  3453               	retlw	83	;'S'
   363  0044  3420               	retlw	32	;' '
   364  0045  3420               	retlw	32	;' '
   365  0046  3420               	retlw	32	;' '
   366  0047  3420               	retlw	32	;' '
   367  0048  3400               	retlw	0
   368  0049                     STR_6:	
   369  0049  3453               	retlw	83	;'S'
   370  004A  3441               	retlw	65	;'A'
   371  004B  3442               	retlw	66	;'B'
   372  004C  3441               	retlw	65	;'A'
   373  004D  3444               	retlw	68	;'D'
   374  004E  344F               	retlw	79	;'O'
   375  004F  3420               	retlw	32	;' '
   376  0050  3420               	retlw	32	;' '
   377  0051  3420               	retlw	32	;' '
   378  0052  3400               	retlw	0
   379  0053                     STR_2:	
   380  0053  344D               	retlw	77	;'M'
   381  0054  3441               	retlw	65	;'A'
   382  0055  3452               	retlw	82	;'R'
   383  0056  3454               	retlw	84	;'T'
   384  0057  3445               	retlw	69	;'E'
   385  0058  3453               	retlw	83	;'S'
   386  0059  3420               	retlw	32	;' '
   387  005A  3420               	retlw	32	;' '
   388  005B  3420               	retlw	32	;' '
   389  005C  3400               	retlw	0
   390  005D                     STR_4:	
   391  005D  344A               	retlw	74	;'J'
   392  005E  3455               	retlw	85	;'U'
   393  005F  3445               	retlw	69	;'E'
   394  0060  3456               	retlw	86	;'V'
   395  0061  3445               	retlw	69	;'E'
   396  0062  3453               	retlw	83	;'S'
   397  0063  3420               	retlw	32	;' '
   398  0064  3420               	retlw	32	;' '
   399  0065  3420               	retlw	32	;' '
   400  0066  3400               	retlw	0
   401  0067                     STR_7:	
   402  0067  3444               	retlw	68	;'D'
   403  0068  344F               	retlw	79	;'O'
   404  0069  344D               	retlw	77	;'M'
   405  006A  3449               	retlw	73	;'I'
   406  006B  344E               	retlw	78	;'N'
   407  006C  3447               	retlw	71	;'G'
   408  006D  344F               	retlw	79	;'O'
   409  006E  3420               	retlw	32	;' '
   410  006F  3420               	retlw	32	;' '
   411  0070  3400               	retlw	0
   412  0071                     STR_5:	
   413  0071  3456               	retlw	86	;'V'
   414  0072  3449               	retlw	73	;'I'
   415  0073  3445               	retlw	69	;'E'
   416  0074  3452               	retlw	82	;'R'
   417  0075  344E               	retlw	78	;'N'
   418  0076  3445               	retlw	69	;'E'
   419  0077  3453               	retlw	83	;'S'
   420  0078  3420               	retlw	32	;' '
   421  0079  3420               	retlw	32	;' '
   422  007A  3400               	retlw	0
   423  007B                     STR_3:	
   424  007B  344D               	retlw	77	;'M'
   425  007C  3449               	retlw	73	;'I'
   426  007D  3445               	retlw	69	;'E'
   427  007E  3452               	retlw	82	;'R'
   428  007F  3443               	retlw	67	;'C'
   429  0080  344F               	retlw	79	;'O'
   430  0081  344C               	retlw	76	;'L'
   431  0082  3445               	retlw	69	;'E'
   432  0083  3453               	retlw	83	;'S'
   433  0084  3400               	retlw	0
   434  0085                     STR_12:	
   435  0085  3454               	retlw	84	;'T'
   436  0086  3472               	retlw	114	;'r'
   437  0087  3469               	retlw	105	;'i'
   438  0088  3470               	retlw	112	;'p'
   439  0089  3420               	retlw	32	;' '
   440  008A  344F               	retlw	79	;'O'
   441  008B  344E               	retlw	78	;'N'
   442  008C  3420               	retlw	32	;' '
   443  008D  3400               	retlw	0
   444  008E                     STR_13:	
   445  008E  3454               	retlw	84	;'T'
   446  008F  3472               	retlw	114	;'r'
   447  0090  3469               	retlw	105	;'i'
   448  0091  3470               	retlw	112	;'p'
   449  0092  3420               	retlw	32	;' '
   450  0093  344F               	retlw	79	;'O'
   451  0094  3446               	retlw	70	;'F'
   452  0095  3446               	retlw	70	;'F'
   453  0096  3400               	retlw	0
   454  0097                     STR_14:	
   455  0097  3450               	retlw	80	;'P'
   456  0098  3449               	retlw	73	;'I'
   457  0099  3452               	retlw	82	;'R'
   458  009A  3420               	retlw	32	;' '
   459  009B  344F               	retlw	79	;'O'
   460  009C  344E               	retlw	78	;'N'
   461  009D  3420               	retlw	32	;' '
   462  009E  3400               	retlw	0
   463  009F                     STR_15:	
   464  009F  3450               	retlw	80	;'P'
   465  00A0  3449               	retlw	73	;'I'
   466  00A1  3452               	retlw	82	;'R'
   467  00A2  3420               	retlw	32	;' '
   468  00A3  344F               	retlw	79	;'O'
   469  00A4  3446               	retlw	70	;'F'
   470  00A5  3446               	retlw	70	;'F'
   471  00A6  3400               	retlw	0
   472  00A7                     STR_9:	
   473  00A7  3432               	retlw	50	;'2'
   474  00A8  3433               	retlw	51	;'3'
   475  00A9  342E               	retlw	46	;'.'
   476  00AA  3435               	retlw	53	;'5'
   477  00AB  3430               	retlw	48	;'0'
   478  00AC  3400               	retlw	0
   479  00AD                     STR_19:	
   480  00AD  342E               	retlw	46	;'.'
   481  00AE  3425               	retlw	37	;'%'
   482  00AF  3464               	retlw	100	;'d'
   483  00B0  3430               	retlw	48	;'0'
   484  00B1  3400               	retlw	0
   485  00B2                     STR_20:	
   486  00B2  342E               	retlw	46	;'.'
   487  00B3  3425               	retlw	37	;'%'
   488  00B4  3464               	retlw	100	;'d'
   489  00B5  3400               	retlw	0
   490  0098                     
   491                           ; #config settings
   492  0000                     
   493                           	psect	cinit
   494  07F5                     start_initialization:	
   495  07F5                     __initialization:	
   496                           
   497                           ; Clear objects allocated to BANK0
   498  07F5  1383               	bcf	3,7	;select IRP bank0
   499  07F6  3020               	movlw	low __pbssBANK0
   500  07F7  0084               	movwf	4
   501  07F8  3041               	movlw	low (__pbssBANK0+33)
   502  07F9  120A  158A  246A   	fcall	clear_ram0
   503  07FC                     end_of_initialization:	
   504                           ;End of C runtime variable initialization code
   505                           
   506  07FC                     __end_of__initialization:	
   507  07FC  0183               	clrf	3
   508  07FD  120A  118A  2D02   	ljmp	_main	;jump to C main() function
   509                           
   510                           	psect	bssBANK0
   511  0020                     __pbssBANK0:	
   512  0020                     _newtime:	
   513  0020                     	ds	6
   514  0026                     _bank:	
   515  0026                     	ds	1
   516  0027                     _alarm:	
   517  0027                     	ds	1
   518  0028                     _change3:	
   519  0028                     	ds	1
   520  0029                     _change2:	
   521  0029                     	ds	1
   522  002A                     _change1:	
   523  002A                     	ds	1
   524  002B                     _change:	
   525  002B                     	ds	1
   526  002C                     _j:	
   527  002C                     	ds	1
   528  002D                     _i:	
   529  002D                     	ds	1
   530  002E                     _day1:	
   531  002E                     	ds	1
   532  002F                     _state:	
   533  002F                     	ds	1
   534  0030                     _IR:	
   535  0030                     	ds	1
   536  0031                     _PIR:	
   537  0031                     	ds	1
   538  0032                     _trip:	
   539  0032                     	ds	1
   540  0033                     _door:	
   541  0033                     	ds	1
   542  0034                     _day2:	
   543  0034                     	ds	1
   544  0035                     _temp:	
   545  0035                     	ds	6
   546  003B                     _time:	
   547  003B                     	ds	6
   548                           
   549                           	psect	clrtext
   550  0C6A                     clear_ram0:	
   551                           ;	Called with FSR containing the base address, and
   552                           ;	W with the last address+1
   553                           
   554  0C6A  0064               	clrwdt	;clear the watchdog before getting into this loop
   555  0C6B                     clrloop0:	
   556  0C6B  0180               	clrf	0	;clear RAM location pointed to by FSR
   557  0C6C  0A84               	incf	4,f	;increment pointer
   558  0C6D  0604               	xorwf	4,w	;XOR with final address
   559  0C6E  1903               	btfsc	3,2	;have we reached the end yet?
   560  0C6F  3400               	retlw	0	;all done for this memory range, return
   561  0C70  0604               	xorwf	4,w	;XOR again to restore value
   562  0C71  2C6B               	goto	clrloop0	;do the next byte
   563                           
   564                           	psect	cstackCOMMON
   565  0070                     __pcstackCOMMON:	
   566  0070                     ?_setup:	
   567  0070                     ?_get_temp:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ?_get_hall:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ?_get_tripwire:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ?_get_PIR:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ?_get_IR:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ?_get_time:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     ?_get_day:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ?_open_door:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0070                     ?_close_door:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0070                     ?_strcat:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0070                     ?_I2C_Master_Wait:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0070                     ??_I2C_Master_Wait:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0070                     ?_I2C_Master_Start:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0070                     ??_I2C_Master_Start:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0070                     ?_I2C_Master_RepeatedStart:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0070                     ??_I2C_Master_RepeatedStart:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0070                     ?_I2C_Master_Stop:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0070                     ??_I2C_Master_Stop:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0070                     ?_I2C_Master_Write:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0070                     ?_Lcd_Port:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0070                     ??_Lcd_Port:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0070                     ?_Lcd_Cmd:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0070                     ?_Lcd_Clear:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0070                     ?_Lcd_Init:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0070                     ?_Lcd_Write_Char:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0070                     ?_initOscilador:	
   643                           ; 1 bytes @ 0x0
   644                           
   645  0070                     ??_initOscilador:	
   646                           ; 1 bytes @ 0x0
   647                           
   648  0070                     ?_UART_TX_Empty:	
   649                           ; 1 bytes @ 0x0
   650                           
   651  0070                     ??_UART_TX_Empty:	
   652                           ; 1 bytes @ 0x0
   653                           
   654  0070                     ?_UART_Write:	
   655                           ; 1 bytes @ 0x0
   656                           
   657  0070                     ??_UART_Write:	
   658                           ; 1 bytes @ 0x0
   659                           
   660  0070                     ?_main:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  0070                     ?___bmul:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0070                     ?_strcmp:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0070                     ?_I2C_Master_Read:	
   670                           ; 2 bytes @ 0x0
   671                           
   672  0070                     ?___lwdiv:	
   673                           ; 2 bytes @ 0x0
   674                           
   675  0070                     ?___lldiv:	
   676                           ; 2 bytes @ 0x0
   677                           
   678  0070                     ?___aldiv:	
   679                           ; 4 bytes @ 0x0
   680                           
   681  0070                     Lcd_Port@a:	
   682                           ; 4 bytes @ 0x0
   683                           
   684  0070                     UART_Write@data:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0070                     ___bmul@multiplicand:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0070                     strcat@from:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0070                     strcmp@s2:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0070                     I2C_Master_Write@d:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0070                     I2C_Master_Read@a:	
   700                           ; 2 bytes @ 0x0
   701                           
   702  0070                     ___lwdiv@divisor:	
   703                           ; 2 bytes @ 0x0
   704                           
   705  0070                     ___lldiv@divisor:	
   706                           ; 2 bytes @ 0x0
   707                           
   708  0070                     ___aldiv@divisor:	
   709                           ; 4 bytes @ 0x0
   710                           
   711                           
   712                           ; 4 bytes @ 0x0
   713  0070                     	ds	1
   714  0071                     ??_strcat:	
   715  0071                     ??_Lcd_Cmd:	
   716                           ; 1 bytes @ 0x1
   717                           
   718  0071                     ??_Lcd_Write_Char:	
   719                           ; 1 bytes @ 0x1
   720                           
   721  0071                     ??___bmul:	
   722                           ; 1 bytes @ 0x1
   723                           
   724                           
   725                           ; 1 bytes @ 0x1
   726  0071                     	ds	1
   727  0072                     ??_open_door:	
   728  0072                     ??_close_door:	
   729                           ; 1 bytes @ 0x2
   730                           
   731  0072                     ??_strcmp:	
   732                           ; 1 bytes @ 0x2
   733                           
   734  0072                     ??_I2C_Master_Write:	
   735                           ; 1 bytes @ 0x2
   736                           
   737  0072                     ??_I2C_Master_Read:	
   738                           ; 1 bytes @ 0x2
   739                           
   740  0072                     Lcd_Write_Char@temp:	
   741                           ; 1 bytes @ 0x2
   742                           
   743  0072                     initOscilador@option:	
   744                           ; 1 bytes @ 0x2
   745                           
   746  0072                     ___bmul@product:	
   747                           ; 1 bytes @ 0x2
   748                           
   749  0072                     strcat@to:	
   750                           ; 1 bytes @ 0x2
   751                           
   752  0072                     ___lwdiv@dividend:	
   753                           ; 1 bytes @ 0x2
   754                           
   755                           
   756                           ; 2 bytes @ 0x2
   757  0072                     	ds	1
   758  0073                     Lcd_Cmd@a:	
   759  0073                     Lcd_Write_Char@y:	
   760                           ; 1 bytes @ 0x3
   761                           
   762  0073                     ___bmul@multiplier:	
   763                           ; 1 bytes @ 0x3
   764                           
   765  0073                     strcat@cp:	
   766                           ; 1 bytes @ 0x3
   767                           
   768                           
   769                           ; 1 bytes @ 0x3
   770  0073                     	ds	1
   771  0074                     ??_Lcd_Clear:	
   772  0074                     ?_Lcd_Set_Cursor:	
   773                           ; 1 bytes @ 0x4
   774                           
   775  0074                     ??_Lcd_Init:	
   776                           ; 1 bytes @ 0x4
   777                           
   778  0074                     ??___lwdiv:	
   779                           ; 1 bytes @ 0x4
   780                           
   781  0074                     Lcd_Set_Cursor@b:	
   782                           ; 1 bytes @ 0x4
   783                           
   784  0074                     Lcd_Write_Char@a:	
   785                           ; 1 bytes @ 0x4
   786                           
   787  0074                     I2C_Master_Read@temp:	
   788                           ; 1 bytes @ 0x4
   789                           
   790  0074                     ___lldiv@dividend:	
   791                           ; 2 bytes @ 0x4
   792                           
   793  0074                     ___aldiv@dividend:	
   794                           ; 4 bytes @ 0x4
   795                           
   796                           
   797                           ; 4 bytes @ 0x4
   798  0074                     	ds	1
   799  0075                     ??_Lcd_Set_Cursor:	
   800  0075                     ?_Lcd_Write_String:	
   801                           ; 1 bytes @ 0x5
   802                           
   803  0075                     strcmp@r:	
   804                           ; 1 bytes @ 0x5
   805                           
   806  0075                     Lcd_Write_String@a:	
   807                           ; 1 bytes @ 0x5
   808                           
   809  0075                     ___lwdiv@quotient:	
   810                           ; 2 bytes @ 0x5
   811                           
   812                           
   813                           ; 2 bytes @ 0x5
   814  0075                     	ds	1
   815  0076                     ??_get_hall:	
   816  0076                     ??_get_tripwire:	
   817                           ; 1 bytes @ 0x6
   818                           
   819  0076                     ??_get_PIR:	
   820                           ; 1 bytes @ 0x6
   821                           
   822  0076                     ??_get_IR:	
   823                           ; 1 bytes @ 0x6
   824                           
   825  0076                     ??_get_time:	
   826                           ; 1 bytes @ 0x6
   827                           
   828  0076                     ??_get_day:	
   829                           ; 1 bytes @ 0x6
   830                           
   831  0076                     strcmp@s1:	
   832                           ; 1 bytes @ 0x6
   833                           
   834                           
   835                           ; 1 bytes @ 0x6
   836  0076                     	ds	1
   837  0077                     ??_Lcd_Write_String:	
   838  0077                     Lcd_Set_Cursor@a:	
   839                           ; 1 bytes @ 0x7
   840                           
   841  0077                     get_day@d:	
   842                           ; 1 bytes @ 0x7
   843                           
   844  0077                     get_hall@key:	
   845                           ; 1 bytes @ 0x7
   846                           
   847  0077                     get_tripwire@trip:	
   848                           ; 1 bytes @ 0x7
   849                           
   850  0077                     get_PIR@PIR:	
   851                           ; 1 bytes @ 0x7
   852                           
   853  0077                     get_IR@IR:	
   854                           ; 1 bytes @ 0x7
   855                           
   856  0077                     ___lwdiv@counter:	
   857                           ; 1 bytes @ 0x7
   858                           
   859                           
   860                           ; 1 bytes @ 0x7
   861  0077                     	ds	1
   862  0078                     ??___lldiv:	
   863  0078                     ??___aldiv:	
   864                           ; 1 bytes @ 0x8
   865                           
   866  0078                     ?___lwmod:	
   867                           ; 1 bytes @ 0x8
   868                           
   869  0078                     Lcd_Set_Cursor@z:	
   870                           ; 2 bytes @ 0x8
   871                           
   872  0078                     get_time@hour:	
   873                           ; 1 bytes @ 0x8
   874                           
   875  0078                     ___lwmod@divisor:	
   876                           ; 1 bytes @ 0x8
   877                           
   878                           
   879                           ; 2 bytes @ 0x8
   880  0078                     	ds	1
   881  0079                     Lcd_Set_Cursor@y:	
   882  0079                     get_time@min:	
   883                           ; 1 bytes @ 0x9
   884                           
   885  0079                     UART_Init@x:	
   886                           ; 1 bytes @ 0x9
   887                           
   888  0079                     ___lldiv@quotient:	
   889                           ; 2 bytes @ 0x9
   890                           
   891                           
   892                           ; 4 bytes @ 0x9
   893  0079                     	ds	1
   894  007A                     Lcd_Set_Cursor@temp:	
   895  007A                     get_time@time_string:	
   896                           ; 1 bytes @ 0xA
   897                           
   898  007A                     Lcd_Write_String@i:	
   899                           ; 1 bytes @ 0xA
   900                           
   901  007A                     ___lwmod@dividend:	
   902                           ; 2 bytes @ 0xA
   903                           
   904                           
   905                           ; 2 bytes @ 0xA
   906  007A                     	ds	2
   907  007C                     ??___lwmod:	
   908                           
   909                           ; 1 bytes @ 0xC
   910  007C                     	ds	1
   911  007D                     ___lldiv@counter:	
   912  007D                     ___lwmod@counter:	
   913                           ; 1 bytes @ 0xD
   914                           
   915                           
   916                           ; 1 bytes @ 0xD
   917  007D                     	ds	1
   918  007E                     ??_setup:	
   919                           
   920                           	psect	cstackBANK0
   921  0041                     __pcstackBANK0:	
   922                           ; 1 bytes @ 0xE
   923                           
   924  0041                     ?_I2C_Master_Init:	
   925  0041                     ?_sprintf:	
   926                           ; 1 bytes @ 0x0
   927                           
   928  0041                     sprintf@f:	
   929                           ; 2 bytes @ 0x0
   930                           
   931  0041                     ___aldiv@counter:	
   932                           ; 1 bytes @ 0x0
   933                           
   934  0041                     I2C_Master_Init@c:	
   935                           ; 1 bytes @ 0x0
   936                           
   937                           
   938                           ; 4 bytes @ 0x0
   939  0041                     	ds	1
   940  0042                     ___aldiv@sign:	
   941                           
   942                           ; 1 bytes @ 0x1
   943  0042                     	ds	1
   944  0043                     ___aldiv@quotient:	
   945                           
   946                           ; 4 bytes @ 0x2
   947  0043                     	ds	1
   948  0044                     ??_sprintf:	
   949                           
   950                           ; 1 bytes @ 0x3
   951  0044                     	ds	1
   952  0045                     ??_I2C_Master_Init:	
   953                           
   954                           ; 1 bytes @ 0x4
   955  0045                     	ds	2
   956  0047                     ?_UART_Init:	
   957  0047                     sprintf@ap:	
   958                           ; 1 bytes @ 0x6
   959                           
   960  0047                     UART_Init@baudrate:	
   961                           ; 1 bytes @ 0x6
   962                           
   963                           
   964                           ; 4 bytes @ 0x6
   965  0047                     	ds	1
   966  0048                     sprintf@flag:	
   967                           
   968                           ; 1 bytes @ 0x7
   969  0048                     	ds	1
   970  0049                     sprintf@prec:	
   971                           
   972                           ; 1 bytes @ 0x8
   973  0049                     	ds	1
   974  004A                     sprintf@val:	
   975                           
   976                           ; 2 bytes @ 0x9
   977  004A                     	ds	1
   978  004B                     ??_UART_Init:	
   979                           
   980                           ; 1 bytes @ 0xA
   981  004B                     	ds	1
   982  004C                     sprintf@sp:	
   983                           
   984                           ; 1 bytes @ 0xB
   985  004C                     	ds	1
   986  004D                     sprintf@c:	
   987                           
   988                           ; 1 bytes @ 0xC
   989  004D                     	ds	1
   990  004E                     ??_get_temp:	
   991                           
   992                           ; 1 bytes @ 0xD
   993  004E                     	ds	3
   994  0051                     get_temp@decimal:	
   995                           
   996                           ; 3 bytes @ 0x10
   997  0051                     	ds	3
   998  0054                     get_temp@tempMSB:	
   999                           
  1000                           ; 1 bytes @ 0x13
  1001  0054                     	ds	1
  1002  0055                     get_temp@temp_string:	
  1003                           
  1004                           ; 1 bytes @ 0x14
  1005  0055                     	ds	1
  1006  0056                     get_temp@tempLSB:	
  1007                           
  1008                           ; 1 bytes @ 0x15
  1009  0056                     	ds	1
  1010  0057                     ??_main:	
  1011                           
  1012                           ; 1 bytes @ 0x16
  1013  0057                     	ds	2
  1014                           
  1015                           	psect	maintext
  1016  0502                     __pmaintext:	
  1017 ;;
  1018 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1019 ;;
  1020 ;; *************** function _main *****************
  1021 ;; Defined at:
  1022 ;;		line 56 in file "mainMaster.c"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;		None
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;		None
  1027 ;; Return value:  Size  Location     Type
  1028 ;;                  1    wreg      void 
  1029 ;; Registers used:
  1030 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1031 ;; Tracked objects:
  1032 ;;		On entry : B00/0
  1033 ;;		On exit  : 0/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1036 ;;      Params:         0       0       0       0       0
  1037 ;;      Locals:         0       0       0       0       0
  1038 ;;      Temps:          0       2       0       0       0
  1039 ;;      Totals:         0       2       0       0       0
  1040 ;;Total ram usage:        2 bytes
  1041 ;; Hardware stack levels required when called:    4
  1042 ;; This function calls:
  1043 ;;		_Lcd_Clear
  1044 ;;		_Lcd_Set_Cursor
  1045 ;;		_Lcd_Write_Char
  1046 ;;		_Lcd_Write_String
  1047 ;;		_UART_TX_Empty
  1048 ;;		_UART_Write
  1049 ;;		_close_door
  1050 ;;		_get_IR
  1051 ;;		_get_PIR
  1052 ;;		_get_day
  1053 ;;		_get_hall
  1054 ;;		_get_temp
  1055 ;;		_get_time
  1056 ;;		_get_tripwire
  1057 ;;		_open_door
  1058 ;;		_setup
  1059 ;;		_strcmp
  1060 ;; This function is called by:
  1061 ;;		Startup code after reset
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065                           
  1066                           ;psect for function _main
  1067  0502                     _main:	
  1068                           
  1069                           ;mainMaster.c: 57:     setup();
  1070                           
  1071                           ;incstack = 0
  1072                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1073  0502  120A  158A  271F  120A  118A  	fcall	_setup
  1074                           
  1075                           ;mainMaster.c: 58:     state = 0;
  1076  0507  1283               	bcf	3,5	;RP0=0, select bank0
  1077  0508  1303               	bcf	3,6	;RP1=0, select bank0
  1078  0509  01AF               	clrf	_state
  1079                           
  1080                           ;mainMaster.c: 59:     Lcd_Clear();
  1081  050A  120A  158A  2485  120A  118A  	fcall	_Lcd_Clear
  1082                           
  1083                           ;mainMaster.c: 60:     PORTAbits.RA7 = 0;
  1084  050F  1283               	bcf	3,5	;RP0=0, select bank0
  1085  0510  1303               	bcf	3,6	;RP1=0, select bank0
  1086  0511  1385               	bcf	5,7	;volatile
  1087  0512                     l2369:	
  1088                           
  1089                           ;mainMaster.c: 65:         RCSTAbits.SPEN = 0;
  1090  0512  1283               	bcf	3,5	;RP0=0, select bank0
  1091  0513  1303               	bcf	3,6	;RP1=0, select bank0
  1092  0514  1398               	bcf	24,7	;volatile
  1093                           
  1094                           ;mainMaster.c: 66:         SSPCONbits.SSPEN = 1;
  1095  0515  1694               	bsf	20,5	;volatile
  1096                           
  1097                           ;mainMaster.c: 68:         get_temp(temp);
  1098  0516  3035               	movlw	(low (_temp| 0))& (0+255)
  1099  0517  120A  118A  22B1  120A  118A  	fcall	_get_temp
  1100                           
  1101                           ;mainMaster.c: 69:         door = get_hall();
  1102  051C  120A  158A  2549  120A  118A  	fcall	_get_hall
  1103  0521  1283               	bcf	3,5	;RP0=0, select bank0
  1104  0522  1303               	bcf	3,6	;RP1=0, select bank0
  1105  0523  00D7               	movwf	??_main
  1106  0524  0857               	movf	??_main,w
  1107  0525  00B3               	movwf	_door
  1108                           
  1109                           ;mainMaster.c: 70:         trip = get_tripwire();
  1110  0526  120A  158A  2568  120A  118A  	fcall	_get_tripwire
  1111  052B  1283               	bcf	3,5	;RP0=0, select bank0
  1112  052C  1303               	bcf	3,6	;RP1=0, select bank0
  1113  052D  00D7               	movwf	??_main
  1114  052E  0857               	movf	??_main,w
  1115  052F  00B2               	movwf	_trip
  1116                           
  1117                           ;mainMaster.c: 71:         PIR = get_PIR();
  1118  0530  120A  158A  252A  120A  118A  	fcall	_get_PIR
  1119  0535  1283               	bcf	3,5	;RP0=0, select bank0
  1120  0536  1303               	bcf	3,6	;RP1=0, select bank0
  1121  0537  00D7               	movwf	??_main
  1122  0538  0857               	movf	??_main,w
  1123  0539  00B1               	movwf	_PIR
  1124                           
  1125                           ;mainMaster.c: 72:         IR = get_IR();
  1126  053A  120A  158A  250B  120A  118A  	fcall	_get_IR
  1127  053F  1283               	bcf	3,5	;RP0=0, select bank0
  1128  0540  1303               	bcf	3,6	;RP1=0, select bank0
  1129  0541  00D7               	movwf	??_main
  1130  0542  0857               	movf	??_main,w
  1131  0543  00B0               	movwf	_IR
  1132                           
  1133                           ;mainMaster.c: 73:         get_time(time);
  1134  0544  303B               	movlw	(low (_time| 0))& (0+255)
  1135  0545  120A  118A  21A1  120A  118A  	fcall	_get_time
  1136                           
  1137                           ;mainMaster.c: 74:         day1 = get_day();
  1138  054A  120A  158A  2601  120A  118A  	fcall	_get_day
  1139  054F  1283               	bcf	3,5	;RP0=0, select bank0
  1140  0550  1303               	bcf	3,6	;RP1=0, select bank0
  1141  0551  00D7               	movwf	??_main
  1142  0552  0857               	movf	??_main,w
  1143  0553  00AE               	movwf	_day1
  1144                           
  1145                           ;mainMaster.c: 76:                 if(PORTDbits.RD0 == 1){
  1146  0554  1C08               	btfss	8,0	;volatile
  1147  0555  2D72               	goto	l273
  1148                           
  1149                           ;mainMaster.c: 77:             if (bank == 1){
  1150  0556  0326               	decf	_bank,w
  1151  0557  1D03               	btfss	3,2
  1152  0558  2D98               	goto	l2427
  1153                           
  1154                           ;mainMaster.c: 78:                 if (change1 == 0){
  1155  0559  082A               	movf	_change1,w
  1156  055A  1D03               	btfss	3,2
  1157  055B  2D98               	goto	l2427
  1158                           
  1159                           ;mainMaster.c: 79:                 bank = 0;
  1160  055C  01A6               	clrf	_bank
  1161                           
  1162                           ;mainMaster.c: 80:                 alarm = 0;
  1163  055D  01A7               	clrf	_alarm
  1164                           
  1165                           ;mainMaster.c: 81:                 open_door();
  1166  055E  120A  158A  24F0  120A  118A  	fcall	_open_door
  1167  0563                     l2399:	
  1168                           ;mainMaster.c: 83:                 while(j < 50){
  1169                           
  1170                           
  1171                           ;mainMaster.c: 83:                 while(j < 50){
  1172  0563  3032               	movlw	50
  1173  0564  1283               	bcf	3,5	;RP0=0, select bank0
  1174  0565  1303               	bcf	3,6	;RP1=0, select bank0
  1175  0566  022C               	subwf	_j,w
  1176  0567  1803               	btfsc	3,0
  1177  0568  2D6E               	goto	l2401
  1178                           
  1179                           ;mainMaster.c: 84:                     j++;
  1180  0569  3001               	movlw	1
  1181  056A  00D7               	movwf	??_main
  1182  056B  0857               	movf	??_main,w
  1183  056C  07AC               	addwf	_j,f
  1184  056D  2D63               	goto	l2399
  1185  056E                     l2401:	
  1186                           
  1187                           ;mainMaster.c: 86:                 j = 0;
  1188  056E  01AC               	clrf	_j
  1189                           
  1190                           ;mainMaster.c: 87:                 change1 = 1;
  1191  056F  01AA               	clrf	_change1
  1192  0570  0AAA               	incf	_change1,f
  1193                           
  1194                           ;mainMaster.c: 90:         } else if(PORTDbits.RD0 == 0){
  1195                           
  1196                           ;mainMaster.c: 89:             }
  1197  0571  2D98               	goto	l2427
  1198  0572                     l273:	
  1199  0572  1808               	btfsc	8,0	;volatile
  1200  0573  2D76               	goto	l280
  1201                           
  1202                           ;mainMaster.c: 91:             change1 =0;
  1203  0574  01AA               	clrf	_change1
  1204                           
  1205                           ;mainMaster.c: 92:         }
  1206  0575  2D98               	goto	l2427
  1207  0576                     l280:	
  1208                           ;mainMaster.c: 94:         else if(PORTDbits.RD1 == 1){
  1209                           
  1210  0576  1C88               	btfss	8,1	;volatile
  1211  0577  2D95               	goto	l282
  1212                           
  1213                           ;mainMaster.c: 95:                 if (bank == 0){
  1214  0578  0826               	movf	_bank,w
  1215  0579  1D03               	btfss	3,2
  1216  057A  2D98               	goto	l2427
  1217                           
  1218                           ;mainMaster.c: 96:                 if (change2 == 0){
  1219  057B  0829               	movf	_change2,w
  1220  057C  1D03               	btfss	3,2
  1221  057D  2D98               	goto	l2427
  1222                           
  1223                           ;mainMaster.c: 97:                 bank = 1;
  1224  057E  01A6               	clrf	_bank
  1225  057F  0AA6               	incf	_bank,f
  1226                           
  1227                           ;mainMaster.c: 98:                 alarm = 0;
  1228  0580  01A7               	clrf	_alarm
  1229                           
  1230                           ;mainMaster.c: 99:                 close_door();
  1231  0581  120A  158A  24D5  120A  118A  	fcall	_close_door
  1232  0586                     l2419:	
  1233                           ;mainMaster.c: 101:                 while(j < 50){
  1234                           
  1235                           
  1236                           ;mainMaster.c: 101:                 while(j < 50){
  1237  0586  3032               	movlw	50
  1238  0587  1283               	bcf	3,5	;RP0=0, select bank0
  1239  0588  1303               	bcf	3,6	;RP1=0, select bank0
  1240  0589  022C               	subwf	_j,w
  1241  058A  1803               	btfsc	3,0
  1242  058B  2D91               	goto	l2421
  1243                           
  1244                           ;mainMaster.c: 102:                     j++;
  1245  058C  3001               	movlw	1
  1246  058D  00D7               	movwf	??_main
  1247  058E  0857               	movf	??_main,w
  1248  058F  07AC               	addwf	_j,f
  1249  0590  2D86               	goto	l2419
  1250  0591                     l2421:	
  1251                           
  1252                           ;mainMaster.c: 104:                 j = 0;
  1253  0591  01AC               	clrf	_j
  1254                           
  1255                           ;mainMaster.c: 105:                 change2 = 1;
  1256  0592  01A9               	clrf	_change2
  1257  0593  0AA9               	incf	_change2,f
  1258  0594  2D98               	goto	l2427
  1259  0595                     l282:	
  1260  0595  1888               	btfsc	8,1	;volatile
  1261  0596  2D98               	goto	l2427
  1262                           
  1263                           ;mainMaster.c: 109:             change2 =0;
  1264  0597  01A9               	clrf	_change2
  1265  0598                     l2427:	
  1266                           
  1267                           ;mainMaster.c: 113:         if (trip | PIR | IR){
  1268  0598  0832               	movf	_trip,w
  1269  0599  0431               	iorwf	_PIR,w
  1270  059A  0430               	iorwf	_IR,w
  1271  059B  1903               	btfsc	3,2
  1272  059C  2DA0               	goto	l2431
  1273                           
  1274                           ;mainMaster.c: 114:             alarm = 1;
  1275  059D  01A7               	clrf	_alarm
  1276  059E  0AA7               	incf	_alarm,f
  1277                           
  1278                           ;mainMaster.c: 116:             PORTAbits.RA7 = 1;
  1279  059F  1785               	bsf	5,7	;volatile
  1280  05A0                     l2431:	
  1281                           
  1282                           ;mainMaster.c: 121:         if (alarm == 1){
  1283  05A0  0327               	decf	_alarm,w
  1284  05A1  1D03               	btfss	3,2
  1285  05A2  2DB1               	goto	l2441
  1286                           
  1287                           ;mainMaster.c: 122:             if (change3 == 0){
  1288  05A3  0828               	movf	_change3,w
  1289  05A4  1D03               	btfss	3,2
  1290  05A5  2DB2               	goto	l2443
  1291                           
  1292                           ;mainMaster.c: 123:                 bank = 0;
  1293  05A6  01A6               	clrf	_bank
  1294                           
  1295                           ;mainMaster.c: 124:                 close_door();
  1296  05A7  120A  158A  24D5  120A  118A  	fcall	_close_door
  1297                           
  1298                           ;mainMaster.c: 125:                 change3 =1;
  1299  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  1300  05AD  1303               	bcf	3,6	;RP1=0, select bank0
  1301  05AE  01A8               	clrf	_change3
  1302  05AF  0AA8               	incf	_change3,f
  1303  05B0  2DB2               	goto	l2443
  1304  05B1                     l2441:	
  1305                           
  1306                           ;mainMaster.c: 130:             change3 = 0;
  1307  05B1  01A8               	clrf	_change3
  1308  05B2                     l2443:	
  1309                           
  1310                           ;mainMaster.c: 133:         SSPCONbits.SSPEN = 0;
  1311  05B2  1294               	bcf	20,5	;volatile
  1312                           
  1313                           ;mainMaster.c: 134:         RCSTAbits.SPEN = 1;
  1314  05B3  1798               	bsf	24,7	;volatile
  1315                           
  1316                           ;mainMaster.c: 136:         if (UART_TX_Empty()){
  1317  05B4  120A  158A  2447  120A  118A  	fcall	_UART_TX_Empty
  1318  05B9  3A00               	xorlw	0
  1319  05BA  1903               	skipnz
  1320  05BB  2ED2               	goto	l2507
  1321                           
  1322                           ;mainMaster.c: 137:             UART_Write(temp[0]);
  1323  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  1324  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  1325  05BE  0835               	movf	_temp,w
  1326  05BF  120A  158A  247B  120A  118A  	fcall	_UART_Write
  1327                           
  1328                           ;mainMaster.c: 138:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1329  05C4  3003               	movlw	3
  1330  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  1331  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  1332  05C7  00D8               	movwf	??_main+1
  1333  05C8  3097               	movlw	151
  1334  05C9  00D7               	movwf	??_main
  1335  05CA                     u2017:	
  1336  05CA  0BD7               	decfsz	??_main,f
  1337  05CB  2DCA               	goto	u2017
  1338  05CC  0BD8               	decfsz	??_main+1,f
  1339  05CD  2DCA               	goto	u2017
  1340                           
  1341                           ;mainMaster.c: 139:             UART_Write(temp[1]);
  1342  05CE  1283               	bcf	3,5	;RP0=0, select bank0
  1343  05CF  1303               	bcf	3,6	;RP1=0, select bank0
  1344  05D0  0836               	movf	_temp+1,w
  1345  05D1  120A  158A  247B  120A  118A  	fcall	_UART_Write
  1346                           
  1347                           ;mainMaster.c: 140:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1348  05D6  3003               	movlw	3
  1349  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  1350  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  1351  05D9  00D8               	movwf	??_main+1
  1352  05DA  3097               	movlw	151
  1353  05DB  00D7               	movwf	??_main
  1354  05DC                     u2027:	
  1355  05DC  0BD7               	decfsz	??_main,f
  1356  05DD  2DDC               	goto	u2027
  1357  05DE  0BD8               	decfsz	??_main+1,f
  1358  05DF  2DDC               	goto	u2027
  1359                           
  1360                           ;mainMaster.c: 141:             UART_Write(temp[2]);
  1361  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  1362  05E1  1303               	bcf	3,6	;RP1=0, select bank0
  1363  05E2  0837               	movf	_temp+2,w
  1364  05E3  120A  158A  247B  120A  118A  	fcall	_UART_Write
  1365                           
  1366                           ;mainMaster.c: 142:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1367  05E8  3003               	movlw	3
  1368  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  1369  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  1370  05EB  00D8               	movwf	??_main+1
  1371  05EC  3097               	movlw	151
  1372  05ED  00D7               	movwf	??_main
  1373  05EE                     u2037:	
  1374  05EE  0BD7               	decfsz	??_main,f
  1375  05EF  2DEE               	goto	u2037
  1376  05F0  0BD8               	decfsz	??_main+1,f
  1377  05F1  2DEE               	goto	u2037
  1378                           
  1379                           ;mainMaster.c: 143:             UART_Write(temp[3]);
  1380  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  1381  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  1382  05F4  0838               	movf	_temp+3,w
  1383  05F5  120A  158A  247B  120A  118A  	fcall	_UART_Write
  1384                           
  1385                           ;mainMaster.c: 144:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1386  05FA  3003               	movlw	3
  1387  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  1388  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  1389  05FD  00D8               	movwf	??_main+1
  1390  05FE  3097               	movlw	151
  1391  05FF  00D7               	movwf	??_main
  1392  0600                     u2047:	
  1393  0600  0BD7               	decfsz	??_main,f
  1394  0601  2E00               	goto	u2047
  1395  0602  0BD8               	decfsz	??_main+1,f
  1396  0603  2E00               	goto	u2047
  1397                           
  1398                           ;mainMaster.c: 145:             UART_Write(temp[4]);
  1399  0604  1283               	bcf	3,5	;RP0=0, select bank0
  1400  0605  1303               	bcf	3,6	;RP1=0, select bank0
  1401  0606  0839               	movf	_temp+4,w
  1402  0607  120A  158A  247B  120A  118A  	fcall	_UART_Write
  1403                           
  1404                           ;mainMaster.c: 146:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1405  060C  3003               	movlw	3
  1406  060D  1283               	bcf	3,5	;RP0=0, select bank0
  1407  060E  1303               	bcf	3,6	;RP1=0, select bank0
  1408  060F  00D8               	movwf	??_main+1
  1409  0610  3097               	movlw	151
  1410  0611  00D7               	movwf	??_main
  1411  0612                     u2057:	
  1412  0612  0BD7               	decfsz	??_main,f
  1413  0613  2E12               	goto	u2057
  1414  0614  0BD8               	decfsz	??_main+1,f
  1415  0615  2E12               	goto	u2057
  1416                           
  1417                           ;mainMaster.c: 147:             UART_Write(time[0]);
  1418  0616  1283               	bcf	3,5	;RP0=0, select bank0
  1419  0617  1303               	bcf	3,6	;RP1=0, select bank0
  1420  0618  083B               	movf	_time,w
  1421  0619  120A  158A  247B  120A  118A  	fcall	_UART_Write
  1422                           
  1423                           ;mainMaster.c: 148:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1424  061E  3003               	movlw	3
  1425  061F  1283               	bcf	3,5	;RP0=0, select bank0
  1426  0620  1303               	bcf	3,6	;RP1=0, select bank0
  1427  0621  00D8               	movwf	??_main+1
  1428  0622  3097               	movlw	151
  1429  0623  00D7               	movwf	??_main
  1430  0624                     u2067:	
  1431  0624  0BD7               	decfsz	??_main,f
  1432  0625  2E24               	goto	u2067
  1433  0626  0BD8               	decfsz	??_main+1,f
  1434  0627  2E24               	goto	u2067
  1435                           
  1436                           ;mainMaster.c: 149:             UART_Write(time[1]);
  1437  0628  1283               	bcf	3,5	;RP0=0, select bank0
  1438  0629  1303               	bcf	3,6	;RP1=0, select bank0
  1439  062A  083C               	movf	_time+1,w
  1440  062B  120A  158A  247B  120A  118A  	fcall	_UART_Write
  1441                           
  1442                           ;mainMaster.c: 150:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1443  0630  3003               	movlw	3
  1444  0631  1283               	bcf	3,5	;RP0=0, select bank0
  1445  0632  1303               	bcf	3,6	;RP1=0, select bank0
  1446  0633  00D8               	movwf	??_main+1
  1447  0634  3097               	movlw	151
  1448  0635  00D7               	movwf	??_main
  1449  0636                     u2077:	
  1450  0636  0BD7               	decfsz	??_main,f
  1451  0637  2E36               	goto	u2077
  1452  0638  0BD8               	decfsz	??_main+1,f
  1453  0639  2E36               	goto	u2077
  1454                           
  1455                           ;mainMaster.c: 151:             UART_Write(time[2]);
  1456  063A  1283               	bcf	3,5	;RP0=0, select bank0
  1457  063B  1303               	bcf	3,6	;RP1=0, select bank0
  1458  063C  083D               	movf	_time+2,w
  1459  063D  120A  158A  247B  120A  118A  	fcall	_UART_Write
  1460                           
  1461                           ;mainMaster.c: 152:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1462  0642  3003               	movlw	3
  1463  0643  1283               	bcf	3,5	;RP0=0, select bank0
  1464  0644  1303               	bcf	3,6	;RP1=0, select bank0
  1465  0645  00D8               	movwf	??_main+1
  1466  0646  3097               	movlw	151
  1467  0647  00D7               	movwf	??_main
  1468  0648                     u2087:	
  1469  0648  0BD7               	decfsz	??_main,f
  1470  0649  2E48               	goto	u2087
  1471  064A  0BD8               	decfsz	??_main+1,f
  1472  064B  2E48               	goto	u2087
  1473                           
  1474                           ;mainMaster.c: 153:             UART_Write(time[3]);
  1475  064C  1283               	bcf	3,5	;RP0=0, select bank0
  1476  064D  1303               	bcf	3,6	;RP1=0, select bank0
  1477  064E  083E               	movf	_time+3,w
  1478  064F  120A  158A  247B  120A  118A  	fcall	_UART_Write
  1479                           
  1480                           ;mainMaster.c: 154:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1481  0654  3003               	movlw	3
  1482  0655  1283               	bcf	3,5	;RP0=0, select bank0
  1483  0656  1303               	bcf	3,6	;RP1=0, select bank0
  1484  0657  00D8               	movwf	??_main+1
  1485  0658  3097               	movlw	151
  1486  0659  00D7               	movwf	??_main
  1487  065A                     u2097:	
  1488  065A  0BD7               	decfsz	??_main,f
  1489  065B  2E5A               	goto	u2097
  1490  065C  0BD8               	decfsz	??_main+1,f
  1491  065D  2E5A               	goto	u2097
  1492                           
  1493                           ;mainMaster.c: 155:             UART_Write(time[4]);
  1494  065E  1283               	bcf	3,5	;RP0=0, select bank0
  1495  065F  1303               	bcf	3,6	;RP1=0, select bank0
  1496  0660  083F               	movf	_time+4,w
  1497  0661  120A  158A  247B  120A  118A  	fcall	_UART_Write
  1498                           
  1499                           ;mainMaster.c: 156:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1500  0666  3003               	movlw	3
  1501  0667  1283               	bcf	3,5	;RP0=0, select bank0
  1502  0668  1303               	bcf	3,6	;RP1=0, select bank0
  1503  0669  00D8               	movwf	??_main+1
  1504  066A  3097               	movlw	151
  1505  066B  00D7               	movwf	??_main
  1506  066C                     u2107:	
  1507  066C  0BD7               	decfsz	??_main,f
  1508  066D  2E6C               	goto	u2107
  1509  066E  0BD8               	decfsz	??_main+1,f
  1510  066F  2E6C               	goto	u2107
  1511                           
  1512                           ;mainMaster.c: 157:             UART_Write(door);
  1513  0670  1283               	bcf	3,5	;RP0=0, select bank0
  1514  0671  1303               	bcf	3,6	;RP1=0, select bank0
  1515  0672  0833               	movf	_door,w
  1516  0673  120A  158A  247B  120A  118A  	fcall	_UART_Write
  1517                           
  1518                           ;mainMaster.c: 158:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1519  0678  3003               	movlw	3
  1520  0679  1283               	bcf	3,5	;RP0=0, select bank0
  1521  067A  1303               	bcf	3,6	;RP1=0, select bank0
  1522  067B  00D8               	movwf	??_main+1
  1523  067C  3097               	movlw	151
  1524  067D  00D7               	movwf	??_main
  1525  067E                     u2117:	
  1526  067E  0BD7               	decfsz	??_main,f
  1527  067F  2E7E               	goto	u2117
  1528  0680  0BD8               	decfsz	??_main+1,f
  1529  0681  2E7E               	goto	u2117
  1530                           
  1531                           ;mainMaster.c: 159:             UART_Write(trip);
  1532  0682  1283               	bcf	3,5	;RP0=0, select bank0
  1533  0683  1303               	bcf	3,6	;RP1=0, select bank0
  1534  0684  0832               	movf	_trip,w
  1535  0685  120A  158A  247B  120A  118A  	fcall	_UART_Write
  1536                           
  1537                           ;mainMaster.c: 160:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1538  068A  3003               	movlw	3
  1539  068B  1283               	bcf	3,5	;RP0=0, select bank0
  1540  068C  1303               	bcf	3,6	;RP1=0, select bank0
  1541  068D  00D8               	movwf	??_main+1
  1542  068E  3097               	movlw	151
  1543  068F  00D7               	movwf	??_main
  1544  0690                     u2127:	
  1545  0690  0BD7               	decfsz	??_main,f
  1546  0691  2E90               	goto	u2127
  1547  0692  0BD8               	decfsz	??_main+1,f
  1548  0693  2E90               	goto	u2127
  1549                           
  1550                           ;mainMaster.c: 161:             UART_Write(PIR);
  1551  0694  1283               	bcf	3,5	;RP0=0, select bank0
  1552  0695  1303               	bcf	3,6	;RP1=0, select bank0
  1553  0696  0831               	movf	_PIR,w
  1554  0697  120A  158A  247B  120A  118A  	fcall	_UART_Write
  1555                           
  1556                           ;mainMaster.c: 162:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1557  069C  3003               	movlw	3
  1558  069D  1283               	bcf	3,5	;RP0=0, select bank0
  1559  069E  1303               	bcf	3,6	;RP1=0, select bank0
  1560  069F  00D8               	movwf	??_main+1
  1561  06A0  3097               	movlw	151
  1562  06A1  00D7               	movwf	??_main
  1563  06A2                     u2137:	
  1564  06A2  0BD7               	decfsz	??_main,f
  1565  06A3  2EA2               	goto	u2137
  1566  06A4  0BD8               	decfsz	??_main+1,f
  1567  06A5  2EA2               	goto	u2137
  1568                           
  1569                           ;mainMaster.c: 163:             UART_Write(IR);
  1570  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  1571  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  1572  06A8  0830               	movf	_IR,w
  1573  06A9  120A  158A  247B  120A  118A  	fcall	_UART_Write
  1574                           
  1575                           ;mainMaster.c: 164:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1576  06AE  3003               	movlw	3
  1577  06AF  1283               	bcf	3,5	;RP0=0, select bank0
  1578  06B0  1303               	bcf	3,6	;RP1=0, select bank0
  1579  06B1  00D8               	movwf	??_main+1
  1580  06B2  3097               	movlw	151
  1581  06B3  00D7               	movwf	??_main
  1582  06B4                     u2147:	
  1583  06B4  0BD7               	decfsz	??_main,f
  1584  06B5  2EB4               	goto	u2147
  1585  06B6  0BD8               	decfsz	??_main+1,f
  1586  06B7  2EB4               	goto	u2147
  1587                           
  1588                           ;mainMaster.c: 165:             UART_Write('A');
  1589  06B8  3041               	movlw	65
  1590  06B9  120A  158A  247B  120A  118A  	fcall	_UART_Write
  1591  06BE  2ED2               	goto	l2507
  1592  06BF                     l2489:	
  1593                           
  1594                           ;mainMaster.c: 172:                 day2 = "LUNES    ";
  1595  06BF  302D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1596  06C0  2ECE               	goto	L7
  1597  06C1                     l2491:	
  1598                           ;mainMaster.c: 173:                 break;
  1599                           
  1600                           
  1601                           ;mainMaster.c: 175:                 day2 = "MARTES   ";
  1602  06C1  3041               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1603  06C2  2ECE               	goto	L7
  1604  06C3                     l2493:	
  1605                           ;mainMaster.c: 176:                 break;
  1606                           
  1607                           
  1608                           ;mainMaster.c: 178:                 day2 = "MIERCOLES";
  1609  06C3  3069               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1610  06C4  2ECE               	goto	L7
  1611  06C5                     l2495:	
  1612                           ;mainMaster.c: 179:                 break;
  1613                           
  1614                           
  1615                           ;mainMaster.c: 181:                 day2 = "JUEVES   ";
  1616  06C5  304B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1617  06C6  2ECE               	goto	L7
  1618  06C7                     l2497:	
  1619                           ;mainMaster.c: 182:                 break;
  1620                           
  1621                           
  1622                           ;mainMaster.c: 184:                 day2 = "VIERNES  ";
  1623  06C7  305F               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1624  06C8  2ECE               	goto	L7
  1625  06C9                     l2499:	
  1626                           ;mainMaster.c: 185:                 break;
  1627                           
  1628                           
  1629                           ;mainMaster.c: 187:                 day2 = "SABADO   ";
  1630  06C9  3037               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1631  06CA  2ECE               	goto	L7
  1632  06CB                     l2501:	
  1633                           ;mainMaster.c: 188:                 break;
  1634                           
  1635                           
  1636                           ;mainMaster.c: 190:                 day2 = "DOMINGO  ";
  1637  06CB  3055               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1638  06CC  2ECE               	goto	L7
  1639  06CD                     l2503:	
  1640                           ;mainMaster.c: 191:                 break;
  1641                           
  1642                           
  1643                           ;mainMaster.c: 193:                 day2 = "         ";
  1644  06CD  3023               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1645  06CE                     L7:	
  1646  06CE  00D7               	movwf	??_main
  1647  06CF  0857               	movf	??_main,w
  1648  06D0  00B4               	movwf	_day2
  1649                           
  1650                           ;mainMaster.c: 194:                 break;
  1651  06D1  2EF3               	goto	l2509
  1652  06D2                     l2507:	
  1653  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  1654  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  1655  06D4  082E               	movf	_day1,w
  1656  06D5  00D7               	movwf	??_main
  1657  06D6  01D8               	clrf	??_main+1
  1658                           
  1659                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1660                           ; Switch size 1, requested type "simple"
  1661                           ; Number of cases is 1, Range of values is 0 to 0
  1662                           ; switch strategies available:
  1663                           ; Name         Instructions Cycles
  1664                           ; simple_byte            4     3 (average)
  1665                           ; direct_byte           11     8 (fixed)
  1666                           ; jumptable            260     6 (fixed)
  1667                           ;	Chosen strategy is simple_byte
  1668  06D7  0858               	movf	??_main+1,w
  1669  06D8  3A00               	xorlw	0	; case 0
  1670  06D9  1903               	skipnz
  1671  06DA  2EDC               	goto	l2659
  1672  06DB  2ECD               	goto	l2503
  1673  06DC                     l2659:	
  1674                           
  1675                           ; Switch size 1, requested type "simple"
  1676                           ; Number of cases is 7, Range of values is 1 to 7
  1677                           ; switch strategies available:
  1678                           ; Name         Instructions Cycles
  1679                           ; simple_byte           22    12 (average)
  1680                           ; direct_byte           32    11 (fixed)
  1681                           ; jumptable            263     9 (fixed)
  1682                           ;	Chosen strategy is simple_byte
  1683  06DC  0857               	movf	??_main,w
  1684  06DD  3A01               	xorlw	1	; case 1
  1685  06DE  1903               	skipnz
  1686  06DF  2EBF               	goto	l2489
  1687  06E0  3A03               	xorlw	3	; case 2
  1688  06E1  1903               	skipnz
  1689  06E2  2EC1               	goto	l2491
  1690  06E3  3A01               	xorlw	1	; case 3
  1691  06E4  1903               	skipnz
  1692  06E5  2EC3               	goto	l2493
  1693  06E6  3A07               	xorlw	7	; case 4
  1694  06E7  1903               	skipnz
  1695  06E8  2EC5               	goto	l2495
  1696  06E9  3A01               	xorlw	1	; case 5
  1697  06EA  1903               	skipnz
  1698  06EB  2EC7               	goto	l2497
  1699  06EC  3A03               	xorlw	3	; case 6
  1700  06ED  1903               	skipnz
  1701  06EE  2EC9               	goto	l2499
  1702  06EF  3A01               	xorlw	1	; case 7
  1703  06F0  1903               	skipnz
  1704  06F1  2ECB               	goto	l2501
  1705  06F2  2ECD               	goto	l2503
  1706  06F3                     l2509:	
  1707                           
  1708                           ;mainMaster.c: 198:         if (strcmp(temp,"23.50") > 0){
  1709  06F3  3095               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1710  06F4  00D7               	movwf	??_main
  1711  06F5  0857               	movf	??_main,w
  1712  06F6  00F0               	movwf	strcmp@s2
  1713  06F7  3035               	movlw	(low (_temp| 0))& (0+255)
  1714  06F8  120A  158A  25AB  120A  118A  	fcall	_strcmp
  1715  06FD  0871               	movf	?_strcmp+1,w
  1716  06FE  3A80               	xorlw	128
  1717  06FF  00FF               	movwf	127
  1718  0700  3080               	movlw	128
  1719  0701  027F               	subwf	127,w
  1720  0702  1D03               	skipz
  1721  0703  2F06               	goto	u1895
  1722  0704  3001               	movlw	1
  1723  0705  0270               	subwf	?_strcmp,w
  1724  0706                     u1895:	
  1725  0706  1C03               	skipc
  1726  0707  2F0C               	goto	l305
  1727                           
  1728                           ;mainMaster.c: 199:             PORTAbits.RA0 = 1;
  1729  0708  1283               	bcf	3,5	;RP0=0, select bank0
  1730  0709  1303               	bcf	3,6	;RP1=0, select bank0
  1731  070A  1405               	bsf	5,0	;volatile
  1732                           
  1733                           ;mainMaster.c: 200:         } else {
  1734  070B  2F0F               	goto	l306
  1735  070C                     l305:	
  1736                           
  1737                           ;mainMaster.c: 201:             PORTAbits.RA0 = 0;
  1738  070C  1283               	bcf	3,5	;RP0=0, select bank0
  1739  070D  1303               	bcf	3,6	;RP1=0, select bank0
  1740  070E  1005               	bcf	5,0	;volatile
  1741  070F                     l306:	
  1742                           ;mainMaster.c: 202:         }
  1743                           
  1744                           
  1745                           ;mainMaster.c: 206:         if(PORTCbits.RC0 == 1){
  1746  070F  1C07               	btfss	7,0	;volatile
  1747  0710  2F30               	goto	l2531
  1748                           
  1749                           ;mainMaster.c: 207:             if (change == 0){
  1750  0711  082B               	movf	_change,w
  1751  0712  1D03               	btfss	3,2
  1752  0713  2F31               	goto	l2533
  1753                           
  1754                           ;mainMaster.c: 208:                 state++;
  1755  0714  3001               	movlw	1
  1756  0715  00D7               	movwf	??_main
  1757  0716  0857               	movf	??_main,w
  1758  0717  07AF               	addwf	_state,f
  1759                           
  1760                           ;mainMaster.c: 209:                 Lcd_Clear();
  1761  0718  120A  158A  2485  120A  118A  	fcall	_Lcd_Clear
  1762                           
  1763                           ;mainMaster.c: 210:                 if (state > 2){
  1764  071D  3003               	movlw	3
  1765  071E  1283               	bcf	3,5	;RP0=0, select bank0
  1766  071F  1303               	bcf	3,6	;RP1=0, select bank0
  1767  0720  022F               	subwf	_state,w
  1768  0721  1803               	btfsc	3,0
  1769                           
  1770                           ;mainMaster.c: 211:                     state = 0;
  1771  0722  01AF               	clrf	_state
  1772  0723                     l2525:	
  1773                           
  1774                           ;mainMaster.c: 213:                 while(j < 50){
  1775  0723  3032               	movlw	50
  1776  0724  022C               	subwf	_j,w
  1777  0725  1803               	btfsc	3,0
  1778  0726  2F2C               	goto	l2527
  1779                           
  1780                           ;mainMaster.c: 214:                     j++;
  1781  0727  3001               	movlw	1
  1782  0728  00D7               	movwf	??_main
  1783  0729  0857               	movf	??_main,w
  1784  072A  07AC               	addwf	_j,f
  1785  072B  2F23               	goto	l2525
  1786  072C                     l2527:	
  1787                           
  1788                           ;mainMaster.c: 216:                 j = 0;
  1789  072C  01AC               	clrf	_j
  1790                           
  1791                           ;mainMaster.c: 217:                 change = 1;
  1792  072D  01AB               	clrf	_change
  1793  072E  0AAB               	incf	_change,f
  1794  072F  2F31               	goto	l2533
  1795  0730                     l2531:	
  1796                           
  1797                           ;mainMaster.c: 220:             change =0;
  1798  0730  01AB               	clrf	_change
  1799  0731                     l2533:	
  1800                           
  1801                           ;mainMaster.c: 226:         if (state == 0){
  1802  0731  082F               	movf	_state,w
  1803  0732  1D03               	btfss	3,2
  1804  0733  2F7C               	goto	l2545
  1805                           
  1806                           ;mainMaster.c: 228:             Lcd_Set_Cursor(1,1);
  1807  0734  01F4               	clrf	Lcd_Set_Cursor@b
  1808  0735  0AF4               	incf	Lcd_Set_Cursor@b,f
  1809  0736  3001               	movlw	1
  1810  0737  120A  158A  2761  120A  118A  	fcall	_Lcd_Set_Cursor
  1811                           
  1812                           ;mainMaster.c: 229:             Lcd_Write_String(time);
  1813  073C  303B               	movlw	(low (_time| 0))& (0+255)
  1814  073D  00F5               	movwf	Lcd_Write_String@a
  1815  073E  3000               	movlw	0
  1816  073F  00F6               	movwf	Lcd_Write_String@a+1
  1817  0740  120A  158A  26E2  120A  118A  	fcall	_Lcd_Write_String
  1818                           
  1819                           ;mainMaster.c: 231:             Lcd_Set_Cursor(1,7);
  1820  0745  3007               	movlw	7
  1821  0746  1283               	bcf	3,5	;RP0=0, select bank0
  1822  0747  1303               	bcf	3,6	;RP1=0, select bank0
  1823  0748  00D7               	movwf	??_main
  1824  0749  0857               	movf	??_main,w
  1825  074A  00F4               	movwf	Lcd_Set_Cursor@b
  1826  074B  3001               	movlw	1
  1827  074C  120A  158A  2761  120A  118A  	fcall	_Lcd_Set_Cursor
  1828                           
  1829                           ;mainMaster.c: 232:             Lcd_Write_String(day2);
  1830  0751  1283               	bcf	3,5	;RP0=0, select bank0
  1831  0752  1303               	bcf	3,6	;RP1=0, select bank0
  1832  0753  0834               	movf	_day2,w
  1833  0754  00F5               	movwf	Lcd_Write_String@a
  1834  0755  3000               	movlw	0
  1835  0756  1D03               	btfss	3,2
  1836  0757  3080               	movlw	128
  1837  0758  00F6               	movwf	Lcd_Write_String@a+1
  1838  0759  120A  158A  26E2  120A  118A  	fcall	_Lcd_Write_String
  1839                           
  1840                           ;mainMaster.c: 234:             Lcd_Set_Cursor(2,1);
  1841  075E  01F4               	clrf	Lcd_Set_Cursor@b
  1842  075F  0AF4               	incf	Lcd_Set_Cursor@b,f
  1843  0760  3002               	movlw	2
  1844  0761  120A  158A  2761  120A  118A  	fcall	_Lcd_Set_Cursor
  1845                           
  1846                           ;mainMaster.c: 235:             Lcd_Write_String(temp);
  1847  0766  3035               	movlw	(low (_temp| 0))& (0+255)
  1848  0767  00F5               	movwf	Lcd_Write_String@a
  1849  0768  3000               	movlw	0
  1850  0769  00F6               	movwf	Lcd_Write_String@a+1
  1851  076A  120A  158A  26E2  120A  118A  	fcall	_Lcd_Write_String
  1852                           
  1853                           ;mainMaster.c: 236:             Lcd_Write_Char(223);
  1854  076F  30DF               	movlw	223
  1855  0770  120A  158A  266D  120A  118A  	fcall	_Lcd_Write_Char
  1856                           
  1857                           ;mainMaster.c: 237:             Lcd_Write_Char('C');
  1858  0775  3043               	movlw	67
  1859  0776  120A  158A  266D  120A  118A  	fcall	_Lcd_Write_Char
  1860                           
  1861                           ;mainMaster.c: 239:         } else if (state == 1){
  1862  077B  2D12               	goto	l2369
  1863  077C                     l2545:	
  1864  077C  032F               	decf	_state,w
  1865  077D  1D03               	btfss	3,2
  1866  077E  2FB8               	goto	l2563
  1867                           
  1868                           ;mainMaster.c: 241:             Lcd_Set_Cursor(1,1);
  1869  077F  01F4               	clrf	Lcd_Set_Cursor@b
  1870  0780  0AF4               	incf	Lcd_Set_Cursor@b,f
  1871  0781  3001               	movlw	1
  1872  0782  120A  158A  2761  120A  118A  	fcall	_Lcd_Set_Cursor
  1873                           
  1874                           ;mainMaster.c: 242:             if (door == 1){
  1875  0787  1283               	bcf	3,5	;RP0=0, select bank0
  1876  0788  1303               	bcf	3,6	;RP1=0, select bank0
  1877  0789  0333               	decf	_door,w
  1878  078A  1D03               	btfss	3,2
  1879  078B  2F8E               	goto	l2553
  1880                           
  1881                           ;mainMaster.c: 243:                 Lcd_Write_String("Door OPEN  ");
  1882  078C  300B               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1883  078D  2F8F               	goto	L8
  1884  078E                     l2553:	
  1885                           ;mainMaster.c: 244:             } else {
  1886                           
  1887                           
  1888                           ;mainMaster.c: 245:                 Lcd_Write_String("Door CLOSED");
  1889  078E  3017               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1890  078F                     L8:	
  1891  078F  00F5               	movwf	Lcd_Write_String@a
  1892  0790  3080               	movlw	128
  1893  0791  00F6               	movwf	Lcd_Write_String@a+1
  1894  0792  120A  158A  26E2  120A  118A  	fcall	_Lcd_Write_String
  1895                           
  1896                           ;mainMaster.c: 248:             Lcd_Set_Cursor(2,1);
  1897  0797  01F4               	clrf	Lcd_Set_Cursor@b
  1898  0798  0AF4               	incf	Lcd_Set_Cursor@b,f
  1899  0799  3002               	movlw	2
  1900  079A  120A  158A  2761  120A  118A  	fcall	_Lcd_Set_Cursor
  1901                           
  1902                           ;mainMaster.c: 249:             if (trip == 1){
  1903  079F  1283               	bcf	3,5	;RP0=0, select bank0
  1904  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  1905  07A1  0332               	decf	_trip,w
  1906  07A2  1D03               	btfss	3,2
  1907  07A3  2FAE               	goto	l2561
  1908                           
  1909                           ;mainMaster.c: 250:                 Lcd_Write_String("Trip ON ");
  1910  07A4  3073               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1911  07A5  00F5               	movwf	Lcd_Write_String@a
  1912  07A6  3080               	movlw	128
  1913  07A7  00F6               	movwf	Lcd_Write_String@a+1
  1914  07A8  120A  158A  26E2  120A  118A  	fcall	_Lcd_Write_String
  1915                           
  1916                           ;mainMaster.c: 251:             } else {
  1917  07AD  2D12               	goto	l2369
  1918  07AE                     l2561:	
  1919                           
  1920                           ;mainMaster.c: 252:                 Lcd_Write_String("Trip OFF");
  1921  07AE  307C               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1922  07AF  00F5               	movwf	Lcd_Write_String@a
  1923  07B0  3080               	movlw	128
  1924  07B1  00F6               	movwf	Lcd_Write_String@a+1
  1925  07B2  120A  158A  26E2  120A  118A  	fcall	_Lcd_Write_String
  1926  07B7  2D12               	goto	l2369
  1927  07B8                     l2563:	
  1928  07B8  3002               	movlw	2
  1929  07B9  062F               	xorwf	_state,w
  1930  07BA  1D03               	btfss	3,2
  1931  07BB  2D12               	goto	l2369
  1932                           
  1933                           ;mainMaster.c: 257:             Lcd_Set_Cursor(1,1);
  1934  07BC  01F4               	clrf	Lcd_Set_Cursor@b
  1935  07BD  0AF4               	incf	Lcd_Set_Cursor@b,f
  1936  07BE  3001               	movlw	1
  1937  07BF  120A  158A  2761  120A  118A  	fcall	_Lcd_Set_Cursor
  1938                           
  1939                           ;mainMaster.c: 258:             if (PIR == 1){
  1940  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  1941  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  1942  07C6  0331               	decf	_PIR,w
  1943  07C7  1D03               	btfss	3,2
  1944  07C8  2FCB               	goto	l2571
  1945                           
  1946                           ;mainMaster.c: 259:                 Lcd_Write_String("PIR ON ");
  1947  07C9  3085               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  1948  07CA  2FCC               	goto	L9
  1949  07CB                     l2571:	
  1950                           ;mainMaster.c: 260:             } else {
  1951                           
  1952                           
  1953                           ;mainMaster.c: 261:                 Lcd_Write_String("PIR OFF");
  1954  07CB  308D               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1955  07CC                     L9:	
  1956  07CC  00F5               	movwf	Lcd_Write_String@a
  1957  07CD  3080               	movlw	128
  1958  07CE  00F6               	movwf	Lcd_Write_String@a+1
  1959  07CF  120A  158A  26E2  120A  118A  	fcall	_Lcd_Write_String
  1960                           
  1961                           ;mainMaster.c: 264:             Lcd_Set_Cursor(2,1);
  1962  07D4  01F4               	clrf	Lcd_Set_Cursor@b
  1963  07D5  0AF4               	incf	Lcd_Set_Cursor@b,f
  1964  07D6  3002               	movlw	2
  1965  07D7  120A  158A  2761  120A  118A  	fcall	_Lcd_Set_Cursor
  1966                           
  1967                           ;mainMaster.c: 265:             if (IR == 1){
  1968  07DC  1283               	bcf	3,5	;RP0=0, select bank0
  1969  07DD  1303               	bcf	3,6	;RP1=0, select bank0
  1970  07DE  0330               	decf	_IR,w
  1971  07DF  1D03               	btfss	3,2
  1972  07E0  2FEB               	goto	l2579
  1973                           
  1974                           ;mainMaster.c: 266:                 Lcd_Write_String("IR ON ");
  1975  07E1  3086               	movlw	(low (((STR_14+1)-__stringbase)| (0+32768)))& (0+255)
  1976  07E2  00F5               	movwf	Lcd_Write_String@a
  1977  07E3  3080               	movlw	128
  1978  07E4  00F6               	movwf	Lcd_Write_String@a+1
  1979  07E5  120A  158A  26E2  120A  118A  	fcall	_Lcd_Write_String
  1980                           
  1981                           ;mainMaster.c: 267:             } else {
  1982  07EA  2D12               	goto	l2369
  1983  07EB                     l2579:	
  1984                           
  1985                           ;mainMaster.c: 268:                 Lcd_Write_String("IR OFF");
  1986  07EB  308E               	movlw	(low (((STR_15+1)-__stringbase)| (0+32768)))& (0+255)
  1987  07EC  00F5               	movwf	Lcd_Write_String@a
  1988  07ED  3080               	movlw	128
  1989  07EE  00F6               	movwf	Lcd_Write_String@a+1
  1990  07EF  120A  158A  26E2  120A  118A  	fcall	_Lcd_Write_String
  1991  07F4  2D12               	goto	l2369
  1992  07F5                     __end_of_main:	
  1993                           
  1994                           	psect	text1
  1995  0DAB                     __ptext1:	
  1996 ;; *************** function _strcmp *****************
  1997 ;; Defined at:
  1998 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;  s1              1    wreg     PTR const unsigned char 
  2001 ;;		 -> temp(6), 
  2002 ;;  s2              1    0[COMMON] PTR const unsigned char 
  2003 ;;		 -> STR_9(6), 
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  s1              1    6[COMMON] PTR const unsigned char 
  2006 ;;		 -> temp(6), 
  2007 ;;  r               1    5[COMMON] char 
  2008 ;; Return value:  Size  Location     Type
  2009 ;;                  2    0[COMMON] int 
  2010 ;; Registers used:
  2011 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2012 ;; Tracked objects:
  2013 ;;		On entry : 0/0
  2014 ;;		On exit  : 0/0
  2015 ;;		Unchanged: 0/0
  2016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2017 ;;      Params:         2       0       0       0       0
  2018 ;;      Locals:         2       0       0       0       0
  2019 ;;      Temps:          3       0       0       0       0
  2020 ;;      Totals:         7       0       0       0       0
  2021 ;;Total ram usage:        7 bytes
  2022 ;; Hardware stack levels used:    2
  2023 ;; This function calls:
  2024 ;;		Nothing
  2025 ;; This function is called by:
  2026 ;;		_main
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           
  2031                           ;psect for function _strcmp
  2032  0DAB                     _strcmp:	
  2033                           
  2034                           ;incstack = 0
  2035                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  2036                           ;strcmp@s1 stored from wreg
  2037  0DAB  00F6               	movwf	strcmp@s1
  2038  0DAC  2DBA               	goto	l2341
  2039  0DAD                     l2343:	
  2040  0DAD  0876               	movf	strcmp@s1,w
  2041  0DAE  0084               	movwf	4
  2042  0DAF  0800               	movf	0,w
  2043  0DB0  1903               	btfsc	3,2
  2044  0DB1  2DCF               	goto	l2345
  2045  0DB2  3001               	movlw	1
  2046  0DB3  00F2               	movwf	??_strcmp
  2047  0DB4  0872               	movf	??_strcmp,w
  2048  0DB5  07F6               	addwf	strcmp@s1,f
  2049  0DB6  3001               	movlw	1
  2050  0DB7  00F2               	movwf	??_strcmp
  2051  0DB8  0872               	movf	??_strcmp,w
  2052  0DB9  07F0               	addwf	strcmp@s2,f
  2053  0DBA                     l2341:	
  2054  0DBA  0870               	movf	strcmp@s2,w
  2055  0DBB  0084               	movwf	4
  2056  0DBC  120A  118A  200D  120A  158A  	fcall	stringdir
  2057  0DC1  00F2               	movwf	??_strcmp
  2058  0DC2  0876               	movf	strcmp@s1,w
  2059  0DC3  0084               	movwf	4
  2060  0DC4  1383               	bcf	3,7	;select IRP bank0
  2061  0DC5  0800               	movf	0,w
  2062  0DC6  00F3               	movwf	??_strcmp+1
  2063  0DC7  0872               	movf	??_strcmp,w
  2064  0DC8  0273               	subwf	??_strcmp+1,w
  2065  0DC9  00F4               	movwf	??_strcmp+2
  2066  0DCA  0874               	movf	??_strcmp+2,w
  2067  0DCB  00F5               	movwf	strcmp@r
  2068  0DCC  0875               	movf	strcmp@r,w
  2069  0DCD  1903               	btfsc	3,2
  2070  0DCE  2DAD               	goto	l2343
  2071  0DCF                     l2345:	
  2072  0DCF  0875               	movf	strcmp@r,w
  2073  0DD0  00F0               	movwf	?_strcmp
  2074  0DD1  01F1               	clrf	?_strcmp+1
  2075  0DD2  1BF0               	btfsc	?_strcmp,7
  2076  0DD3  03F1               	decf	?_strcmp+1,f
  2077  0DD4  0008               	return
  2078  0DD5                     __end_of_strcmp:	
  2079                           
  2080                           	psect	text2
  2081  0F1F                     __ptext2:	
  2082 ;; *************** function _setup *****************
  2083 ;; Defined at:
  2084 ;;		line 274 in file "mainMaster.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;		None
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;		None
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  1    wreg      void 
  2091 ;; Registers used:
  2092 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2093 ;; Tracked objects:
  2094 ;;		On entry : 0/0
  2095 ;;		On exit  : 0/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2098 ;;      Params:         0       0       0       0       0
  2099 ;;      Locals:         0       0       0       0       0
  2100 ;;      Temps:          0       0       0       0       0
  2101 ;;      Totals:         0       0       0       0       0
  2102 ;;Total ram usage:        0 bytes
  2103 ;; Hardware stack levels used:    1
  2104 ;; Hardware stack levels required when called:    3
  2105 ;; This function calls:
  2106 ;;		_I2C_Master_Init
  2107 ;;		_Lcd_Init
  2108 ;;		_UART_Init
  2109 ;;		_initOscilador
  2110 ;; This function is called by:
  2111 ;;		_main
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           
  2116                           ;psect for function _setup
  2117  0F1F                     _setup:	
  2118                           
  2119                           ;mainMaster.c: 275:     initOscilador(7);
  2120                           
  2121                           ;incstack = 0
  2122                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2123  0F1F  3007               	movlw	7
  2124  0F20  120A  158A  27AB  120A  158A  	fcall	_initOscilador
  2125                           
  2126                           ;mainMaster.c: 276:     ANSELH = 0;
  2127  0F25  1683               	bsf	3,5	;RP0=1, select bank3
  2128  0F26  1703               	bsf	3,6	;RP1=1, select bank3
  2129  0F27  0189               	clrf	9	;volatile
  2130                           
  2131                           ;mainMaster.c: 277:     ANSEL = 0;
  2132  0F28  0188               	clrf	8	;volatile
  2133                           
  2134                           ;mainMaster.c: 278:     TRISB = 0;
  2135  0F29  1683               	bsf	3,5	;RP0=1, select bank1
  2136  0F2A  1303               	bcf	3,6	;RP1=0, select bank1
  2137  0F2B  0186               	clrf	6	;volatile
  2138                           
  2139                           ;mainMaster.c: 279:     TRISA = 0;
  2140  0F2C  0185               	clrf	5	;volatile
  2141                           
  2142                           ;mainMaster.c: 280:     TRISD = 15;
  2143  0F2D  300F               	movlw	15
  2144  0F2E  0088               	movwf	8	;volatile
  2145                           
  2146                           ;mainMaster.c: 281:     PORTB = 0;
  2147  0F2F  1283               	bcf	3,5	;RP0=0, select bank0
  2148  0F30  1303               	bcf	3,6	;RP1=0, select bank0
  2149  0F31  0186               	clrf	6	;volatile
  2150                           
  2151                           ;mainMaster.c: 282:     PORTA = 0;
  2152  0F32  0185               	clrf	5	;volatile
  2153                           
  2154                           ;mainMaster.c: 283:     TRISC = 0x01;
  2155  0F33  3001               	movlw	1
  2156  0F34  1683               	bsf	3,5	;RP0=1, select bank1
  2157  0F35  1303               	bcf	3,6	;RP1=0, select bank1
  2158  0F36  0087               	movwf	7	;volatile
  2159                           
  2160                           ;mainMaster.c: 284:     PORTC = 0;
  2161  0F37  1283               	bcf	3,5	;RP0=0, select bank0
  2162  0F38  1303               	bcf	3,6	;RP1=0, select bank0
  2163  0F39  0187               	clrf	7	;volatile
  2164                           
  2165                           ;mainMaster.c: 285:     i = 0;
  2166  0F3A  01AD               	clrf	_i
  2167                           
  2168                           ;mainMaster.c: 286:     door = 0;
  2169  0F3B  01B3               	clrf	_door
  2170                           
  2171                           ;mainMaster.c: 287:     trip = 0;
  2172  0F3C  01B2               	clrf	_trip
  2173                           
  2174                           ;mainMaster.c: 288:     IR = 0;
  2175  0F3D  01B0               	clrf	_IR
  2176                           
  2177                           ;mainMaster.c: 289:     PIR = 0;
  2178  0F3E  01B1               	clrf	_PIR
  2179                           
  2180                           ;mainMaster.c: 290:     Lcd_Init();
  2181  0F3F  120A  118A  20E8  120A  158A  	fcall	_Lcd_Init
  2182                           
  2183                           ;mainMaster.c: 291:     UART_Init(9600);
  2184  0F44  3000               	movlw	0
  2185  0F45  1283               	bcf	3,5	;RP0=0, select bank0
  2186  0F46  1303               	bcf	3,6	;RP1=0, select bank0
  2187  0F47  00CA               	movwf	UART_Init@baudrate+3
  2188  0F48  3000               	movlw	0
  2189  0F49  00C9               	movwf	UART_Init@baudrate+2
  2190  0F4A  3025               	movlw	37
  2191  0F4B  00C8               	movwf	UART_Init@baudrate+1
  2192  0F4C  3080               	movlw	128
  2193  0F4D  00C7               	movwf	UART_Init@baudrate
  2194  0F4E  120A  118A  2354  120A  158A  	fcall	_UART_Init
  2195                           
  2196                           ;mainMaster.c: 292:     I2C_Master_Init(100000);
  2197  0F53  3000               	movlw	0
  2198  0F54  1283               	bcf	3,5	;RP0=0, select bank0
  2199  0F55  1303               	bcf	3,6	;RP1=0, select bank0
  2200  0F56  00C4               	movwf	I2C_Master_Init@c+3
  2201  0F57  3001               	movlw	1
  2202  0F58  00C3               	movwf	I2C_Master_Init@c+2
  2203  0F59  3086               	movlw	134
  2204  0F5A  00C2               	movwf	I2C_Master_Init@c+1
  2205  0F5B  30A0               	movlw	160
  2206  0F5C  00C1               	movwf	I2C_Master_Init@c
  2207  0F5D  120A  158A  2637   	fcall	_I2C_Master_Init
  2208  0F60  0008               	return
  2209  0F61                     __end_of_setup:	
  2210                           
  2211                           	psect	text3
  2212  0FAB                     __ptext3:	
  2213 ;; *************** function _initOscilador *****************
  2214 ;; Defined at:
  2215 ;;		line 11 in file "./Oscilador.h"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;  option          1    wreg     unsigned char 
  2218 ;; Auto vars:     Size  Location     Type
  2219 ;;  option          1    2[COMMON] unsigned char 
  2220 ;; Return value:  Size  Location     Type
  2221 ;;                  1    wreg      void 
  2222 ;; Registers used:
  2223 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2224 ;; Tracked objects:
  2225 ;;		On entry : 0/0
  2226 ;;		On exit  : 0/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2229 ;;      Params:         0       0       0       0       0
  2230 ;;      Locals:         1       0       0       0       0
  2231 ;;      Temps:          2       0       0       0       0
  2232 ;;      Totals:         3       0       0       0       0
  2233 ;;Total ram usage:        3 bytes
  2234 ;; Hardware stack levels used:    1
  2235 ;; This function calls:
  2236 ;;		Nothing
  2237 ;; This function is called by:
  2238 ;;		_setup
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           
  2243                           ;psect for function _initOscilador
  2244  0FAB                     _initOscilador:	
  2245                           
  2246                           ;incstack = 0
  2247                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  2248                           ;initOscilador@option stored from wreg
  2249  0FAB  00F2               	movwf	initOscilador@option
  2250                           
  2251                           ;./Oscilador.h: 13: 
  2252  0FAC  2FDC               	goto	l2077
  2253  0FAD                     l2057:	
  2254                           
  2255                           ;./Oscilador.h: 16:         case 3:
  2256  0FAD  308F               	movlw	-113
  2257  0FAE  1683               	bsf	3,5	;RP0=1, select bank1
  2258  0FAF  1303               	bcf	3,6	;RP1=0, select bank1
  2259  0FB0  058F               	andwf	15,f	;volatile
  2260                           
  2261                           ;./Oscilador.h: 17: 
  2262  0FB1  2FFE               	goto	l187
  2263  0FB2                     l2059:	
  2264                           
  2265                           ;./Oscilador.h: 20:         case 4:
  2266  0FB2  1683               	bsf	3,5	;RP0=1, select bank1
  2267  0FB3  1303               	bcf	3,6	;RP1=0, select bank1
  2268  0FB4  080F               	movf	15,w	;volatile
  2269  0FB5  398F               	andlw	-113
  2270  0FB6  3810               	iorlw	16
  2271  0FB7  2FD5               	goto	L14
  2272  0FB8                     l2061:	
  2273                           ;./Oscilador.h: 21: 
  2274                           
  2275                           
  2276                           ;./Oscilador.h: 24:         case 5:
  2277  0FB8  1683               	bsf	3,5	;RP0=1, select bank1
  2278  0FB9  1303               	bcf	3,6	;RP1=0, select bank1
  2279  0FBA  080F               	movf	15,w	;volatile
  2280  0FBB  398F               	andlw	-113
  2281  0FBC  3820               	iorlw	32
  2282  0FBD  2FD5               	goto	L14
  2283  0FBE                     l2063:	
  2284                           ;./Oscilador.h: 25: 
  2285                           
  2286                           
  2287                           ;./Oscilador.h: 28:         case 6:
  2288  0FBE  1683               	bsf	3,5	;RP0=1, select bank1
  2289  0FBF  1303               	bcf	3,6	;RP1=0, select bank1
  2290  0FC0  080F               	movf	15,w	;volatile
  2291  0FC1  398F               	andlw	-113
  2292  0FC2  3830               	iorlw	48
  2293  0FC3  2FD5               	goto	L14
  2294  0FC4                     l2065:	
  2295                           ;./Oscilador.h: 29: 
  2296                           
  2297                           
  2298                           ;./Oscilador.h: 32:         case 7:
  2299  0FC4  1683               	bsf	3,5	;RP0=1, select bank1
  2300  0FC5  1303               	bcf	3,6	;RP1=0, select bank1
  2301  0FC6  080F               	movf	15,w	;volatile
  2302  0FC7  398F               	andlw	-113
  2303  0FC8  3840               	iorlw	64
  2304  0FC9  2FD5               	goto	L14
  2305  0FCA                     l2067:	
  2306                           ;./Oscilador.h: 33: 
  2307                           
  2308                           
  2309                           ;./Oscilador.h: 36:         default:
  2310  0FCA  1683               	bsf	3,5	;RP0=1, select bank1
  2311  0FCB  1303               	bcf	3,6	;RP1=0, select bank1
  2312  0FCC  080F               	movf	15,w	;volatile
  2313  0FCD  398F               	andlw	-113
  2314  0FCE  3850               	iorlw	80
  2315  0FCF  2FD5               	goto	L14
  2316  0FD0                     l2069:	
  2317                           ;./Oscilador.h: 37: 
  2318                           
  2319                           
  2320                           ;./Oscilador.h: 40:     }
  2321  0FD0  1683               	bsf	3,5	;RP0=1, select bank1
  2322  0FD1  1303               	bcf	3,6	;RP1=0, select bank1
  2323  0FD2  080F               	movf	15,w	;volatile
  2324  0FD3  398F               	andlw	-113
  2325  0FD4  3860               	iorlw	96
  2326  0FD5                     L14:	
  2327  0FD5  008F               	movwf	15	;volatile
  2328                           
  2329                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  2330  0FD6  2FFE               	goto	l187
  2331  0FD7                     l2071:	
  2332  0FD7                     l2073:	
  2333  0FD7  3070               	movlw	112
  2334  0FD8  1683               	bsf	3,5	;RP0=1, select bank1
  2335  0FD9  1303               	bcf	3,6	;RP1=0, select bank1
  2336  0FDA  048F               	iorwf	15,f	;volatile
  2337  0FDB  2FFE               	goto	l187
  2338  0FDC                     l2077:	
  2339  0FDC  0872               	movf	initOscilador@option,w
  2340  0FDD  00F0               	movwf	??_initOscilador
  2341  0FDE  01F1               	clrf	??_initOscilador+1
  2342                           
  2343                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2344                           ; Switch size 1, requested type "simple"
  2345                           ; Number of cases is 1, Range of values is 0 to 0
  2346                           ; switch strategies available:
  2347                           ; Name         Instructions Cycles
  2348                           ; simple_byte            4     3 (average)
  2349                           ; direct_byte           11     8 (fixed)
  2350                           ; jumptable            260     6 (fixed)
  2351                           ;	Chosen strategy is simple_byte
  2352  0FDF  0871               	movf	??_initOscilador+1,w
  2353  0FE0  3A00               	xorlw	0	; case 0
  2354  0FE1  1903               	skipnz
  2355  0FE2  2FE4               	goto	l2661
  2356  0FE3  2FD7               	goto	l2073
  2357  0FE4                     l2661:	
  2358                           
  2359                           ; Switch size 1, requested type "simple"
  2360                           ; Number of cases is 8, Range of values is 0 to 7
  2361                           ; switch strategies available:
  2362                           ; Name         Instructions Cycles
  2363                           ; simple_byte           25    13 (average)
  2364                           ; direct_byte           32     8 (fixed)
  2365                           ; jumptable            260     6 (fixed)
  2366                           ;	Chosen strategy is simple_byte
  2367  0FE4  0870               	movf	??_initOscilador,w
  2368  0FE5  3A00               	xorlw	0	; case 0
  2369  0FE6  1903               	skipnz
  2370  0FE7  2FAD               	goto	l2057
  2371  0FE8  3A01               	xorlw	1	; case 1
  2372  0FE9  1903               	skipnz
  2373  0FEA  2FB2               	goto	l2059
  2374  0FEB  3A03               	xorlw	3	; case 2
  2375  0FEC  1903               	skipnz
  2376  0FED  2FB8               	goto	l2061
  2377  0FEE  3A01               	xorlw	1	; case 3
  2378  0FEF  1903               	skipnz
  2379  0FF0  2FBE               	goto	l2063
  2380  0FF1  3A07               	xorlw	7	; case 4
  2381  0FF2  1903               	skipnz
  2382  0FF3  2FC4               	goto	l2065
  2383  0FF4  3A01               	xorlw	1	; case 5
  2384  0FF5  1903               	skipnz
  2385  0FF6  2FCA               	goto	l2067
  2386  0FF7  3A03               	xorlw	3	; case 6
  2387  0FF8  1903               	skipnz
  2388  0FF9  2FD0               	goto	l2069
  2389  0FFA  3A01               	xorlw	1	; case 7
  2390  0FFB  1903               	skipnz
  2391  0FFC  2FD7               	goto	l2071
  2392  0FFD  2FD7               	goto	l2073
  2393  0FFE                     l187:	
  2394  0FFE  140F               	bsf	15,0	;volatile
  2395  0FFF  0008               	return
  2396  1000                     __end_of_initOscilador:	
  2397                           
  2398                           	psect	text4
  2399  0354                     __ptext4:	
  2400 ;; *************** function _UART_Init *****************
  2401 ;; Defined at:
  2402 ;;		line 8 in file "./UART.h"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;  baudrate        4    6[BANK0 ] const long 
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;  x               2    9[COMMON] unsigned int 
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  1    wreg      unsigned char 
  2409 ;; Registers used:
  2410 ;;		wreg, status,2, status,0, pclath, cstack
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2416 ;;      Params:         0       4       0       0       0
  2417 ;;      Locals:         2       0       0       0       0
  2418 ;;      Temps:          0      12       0       0       0
  2419 ;;      Totals:         2      16       0       0       0
  2420 ;;Total ram usage:       18 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    1
  2423 ;; This function calls:
  2424 ;;		___aldiv
  2425 ;; This function is called by:
  2426 ;;		_setup
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           
  2431                           ;psect for function _UART_Init
  2432  0354                     _UART_Init:	
  2433                           
  2434                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
  2435                           
  2436                           ;incstack = 0
  2437                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  2438  0354  1283               	bcf	3,5	;RP0=0, select bank0
  2439  0355  1303               	bcf	3,6	;RP1=0, select bank0
  2440  0356  0847               	movf	UART_Init@baudrate,w
  2441  0357  00CB               	movwf	??_UART_Init
  2442  0358  0848               	movf	UART_Init@baudrate+1,w
  2443  0359  00CC               	movwf	??_UART_Init+1
  2444  035A  0849               	movf	UART_Init@baudrate+2,w
  2445  035B  00CD               	movwf	??_UART_Init+2
  2446  035C  084A               	movf	UART_Init@baudrate+3,w
  2447  035D  00CE               	movwf	??_UART_Init+3
  2448  035E  3006               	movlw	6
  2449  035F                     u1415:	
  2450  035F  1003               	clrc
  2451  0360  0DCB               	rlf	??_UART_Init,f
  2452  0361  0DCC               	rlf	??_UART_Init+1,f
  2453  0362  0DCD               	rlf	??_UART_Init+2,f
  2454  0363  0DCE               	rlf	??_UART_Init+3,f
  2455  0364  3EFF               	addlw	-1
  2456  0365  1D03               	skipz
  2457  0366  2B5F               	goto	u1415
  2458  0367  084E               	movf	??_UART_Init+3,w
  2459  0368  00F3               	movwf	___aldiv@divisor+3
  2460  0369  084D               	movf	??_UART_Init+2,w
  2461  036A  00F2               	movwf	___aldiv@divisor+2
  2462  036B  084C               	movf	??_UART_Init+1,w
  2463  036C  00F1               	movwf	___aldiv@divisor+1
  2464  036D  084B               	movf	??_UART_Init,w
  2465  036E  00F0               	movwf	___aldiv@divisor
  2466  036F  0847               	movf	UART_Init@baudrate,w
  2467  0370  00CF               	movwf	??_UART_Init+4
  2468  0371  0848               	movf	UART_Init@baudrate+1,w
  2469  0372  00D0               	movwf	??_UART_Init+5
  2470  0373  0849               	movf	UART_Init@baudrate+2,w
  2471  0374  00D1               	movwf	??_UART_Init+6
  2472  0375  084A               	movf	UART_Init@baudrate+3,w
  2473  0376  00D2               	movwf	??_UART_Init+7
  2474  0377  3006               	movlw	6
  2475  0378                     u1425:	
  2476  0378  1003               	clrc
  2477  0379  0DCF               	rlf	??_UART_Init+4,f
  2478  037A  0DD0               	rlf	??_UART_Init+5,f
  2479  037B  0DD1               	rlf	??_UART_Init+6,f
  2480  037C  0DD2               	rlf	??_UART_Init+7,f
  2481  037D  3EFF               	addlw	-1
  2482  037E  1D03               	skipz
  2483  037F  2B78               	goto	u1425
  2484  0380  3000               	movlw	0
  2485  0381  00D3               	movwf	??_UART_Init+8
  2486  0382  3012               	movlw	18
  2487  0383  00D4               	movwf	??_UART_Init+9
  2488  0384  307A               	movlw	122
  2489  0385  00D5               	movwf	??_UART_Init+10
  2490  0386  3000               	movlw	0
  2491  0387  00D6               	movwf	??_UART_Init+11
  2492  0388  084F               	movf	??_UART_Init+4,w
  2493  0389  02D3               	subwf	??_UART_Init+8,f
  2494  038A  0850               	movf	??_UART_Init+5,w
  2495  038B  1C03               	skipc
  2496  038C  0F50               	incfsz	??_UART_Init+5,w
  2497  038D  2B8F               	goto	u1431
  2498  038E  2B90               	goto	u1432
  2499  038F                     u1431:	
  2500  038F  02D4               	subwf	??_UART_Init+9,f
  2501  0390                     u1432:	
  2502  0390  0851               	movf	??_UART_Init+6,w
  2503  0391  1C03               	skipc
  2504  0392  0F51               	incfsz	??_UART_Init+6,w
  2505  0393  2B95               	goto	u1433
  2506  0394  2B96               	goto	u1434
  2507  0395                     u1433:	
  2508  0395  02D5               	subwf	??_UART_Init+10,f
  2509  0396                     u1434:	
  2510  0396  0852               	movf	??_UART_Init+7,w
  2511  0397  1C03               	skipc
  2512  0398  0F52               	incfsz	??_UART_Init+7,w
  2513  0399  2B9B               	goto	u1435
  2514  039A  2B9C               	goto	u1436
  2515  039B                     u1435:	
  2516  039B  02D6               	subwf	??_UART_Init+11,f
  2517  039C                     u1436:	
  2518  039C  0856               	movf	??_UART_Init+11,w
  2519  039D  00F7               	movwf	___aldiv@dividend+3
  2520  039E  0855               	movf	??_UART_Init+10,w
  2521  039F  00F6               	movwf	___aldiv@dividend+2
  2522  03A0  0854               	movf	??_UART_Init+9,w
  2523  03A1  00F5               	movwf	___aldiv@dividend+1
  2524  03A2  0853               	movf	??_UART_Init+8,w
  2525  03A3  00F4               	movwf	___aldiv@dividend
  2526  03A4  120A  118A  2222  120A  118A  	fcall	___aldiv
  2527  03A9  0871               	movf	?___aldiv+1,w
  2528  03AA  00FA               	movwf	UART_Init@x+1
  2529  03AB  0870               	movf	?___aldiv,w
  2530  03AC  00F9               	movwf	UART_Init@x
  2531                           
  2532                           ;./UART.h: 12:  if(x>255)
  2533  03AD  3001               	movlw	1
  2534  03AE  027A               	subwf	UART_Init@x+1,w
  2535  03AF  3000               	movlw	0
  2536  03B0  1903               	skipnz
  2537  03B1  0279               	subwf	UART_Init@x,w
  2538  03B2  1C03               	skipc
  2539  03B3  2C10               	goto	l2091
  2540                           
  2541                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  2542  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  2543  03B5  1303               	bcf	3,6	;RP1=0, select bank0
  2544  03B6  0847               	movf	UART_Init@baudrate,w
  2545  03B7  00CB               	movwf	??_UART_Init
  2546  03B8  0848               	movf	UART_Init@baudrate+1,w
  2547  03B9  00CC               	movwf	??_UART_Init+1
  2548  03BA  0849               	movf	UART_Init@baudrate+2,w
  2549  03BB  00CD               	movwf	??_UART_Init+2
  2550  03BC  084A               	movf	UART_Init@baudrate+3,w
  2551  03BD  00CE               	movwf	??_UART_Init+3
  2552  03BE  3004               	movlw	4
  2553  03BF                     u1455:	
  2554  03BF  1003               	clrc
  2555  03C0  0DCB               	rlf	??_UART_Init,f
  2556  03C1  0DCC               	rlf	??_UART_Init+1,f
  2557  03C2  0DCD               	rlf	??_UART_Init+2,f
  2558  03C3  0DCE               	rlf	??_UART_Init+3,f
  2559  03C4  3EFF               	addlw	-1
  2560  03C5  1D03               	skipz
  2561  03C6  2BBF               	goto	u1455
  2562  03C7  084E               	movf	??_UART_Init+3,w
  2563  03C8  00F3               	movwf	___aldiv@divisor+3
  2564  03C9  084D               	movf	??_UART_Init+2,w
  2565  03CA  00F2               	movwf	___aldiv@divisor+2
  2566  03CB  084C               	movf	??_UART_Init+1,w
  2567  03CC  00F1               	movwf	___aldiv@divisor+1
  2568  03CD  084B               	movf	??_UART_Init,w
  2569  03CE  00F0               	movwf	___aldiv@divisor
  2570  03CF  0847               	movf	UART_Init@baudrate,w
  2571  03D0  00CF               	movwf	??_UART_Init+4
  2572  03D1  0848               	movf	UART_Init@baudrate+1,w
  2573  03D2  00D0               	movwf	??_UART_Init+5
  2574  03D3  0849               	movf	UART_Init@baudrate+2,w
  2575  03D4  00D1               	movwf	??_UART_Init+6
  2576  03D5  084A               	movf	UART_Init@baudrate+3,w
  2577  03D6  00D2               	movwf	??_UART_Init+7
  2578  03D7  3004               	movlw	4
  2579  03D8                     u1465:	
  2580  03D8  1003               	clrc
  2581  03D9  0DCF               	rlf	??_UART_Init+4,f
  2582  03DA  0DD0               	rlf	??_UART_Init+5,f
  2583  03DB  0DD1               	rlf	??_UART_Init+6,f
  2584  03DC  0DD2               	rlf	??_UART_Init+7,f
  2585  03DD  3EFF               	addlw	-1
  2586  03DE  1D03               	skipz
  2587  03DF  2BD8               	goto	u1465
  2588  03E0  3000               	movlw	0
  2589  03E1  00D3               	movwf	??_UART_Init+8
  2590  03E2  3012               	movlw	18
  2591  03E3  00D4               	movwf	??_UART_Init+9
  2592  03E4  307A               	movlw	122
  2593  03E5  00D5               	movwf	??_UART_Init+10
  2594  03E6  3000               	movlw	0
  2595  03E7  00D6               	movwf	??_UART_Init+11
  2596  03E8  084F               	movf	??_UART_Init+4,w
  2597  03E9  02D3               	subwf	??_UART_Init+8,f
  2598  03EA  0850               	movf	??_UART_Init+5,w
  2599  03EB  1C03               	skipc
  2600  03EC  0F50               	incfsz	??_UART_Init+5,w
  2601  03ED  2BEF               	goto	u1471
  2602  03EE  2BF0               	goto	u1472
  2603  03EF                     u1471:	
  2604  03EF  02D4               	subwf	??_UART_Init+9,f
  2605  03F0                     u1472:	
  2606  03F0  0851               	movf	??_UART_Init+6,w
  2607  03F1  1C03               	skipc
  2608  03F2  0F51               	incfsz	??_UART_Init+6,w
  2609  03F3  2BF5               	goto	u1473
  2610  03F4  2BF6               	goto	u1474
  2611  03F5                     u1473:	
  2612  03F5  02D5               	subwf	??_UART_Init+10,f
  2613  03F6                     u1474:	
  2614  03F6  0852               	movf	??_UART_Init+7,w
  2615  03F7  1C03               	skipc
  2616  03F8  0F52               	incfsz	??_UART_Init+7,w
  2617  03F9  2BFB               	goto	u1475
  2618  03FA  2BFC               	goto	u1476
  2619  03FB                     u1475:	
  2620  03FB  02D6               	subwf	??_UART_Init+11,f
  2621  03FC                     u1476:	
  2622  03FC  0856               	movf	??_UART_Init+11,w
  2623  03FD  00F7               	movwf	___aldiv@dividend+3
  2624  03FE  0855               	movf	??_UART_Init+10,w
  2625  03FF  00F6               	movwf	___aldiv@dividend+2
  2626  0400  0854               	movf	??_UART_Init+9,w
  2627  0401  00F5               	movwf	___aldiv@dividend+1
  2628  0402  0853               	movf	??_UART_Init+8,w
  2629  0403  00F4               	movwf	___aldiv@dividend
  2630  0404  120A  118A  2222  120A  118A  	fcall	___aldiv
  2631  0409  0871               	movf	?___aldiv+1,w
  2632  040A  00FA               	movwf	UART_Init@x+1
  2633  040B  0870               	movf	?___aldiv,w
  2634  040C  00F9               	movwf	UART_Init@x
  2635                           
  2636                           ;./UART.h: 15:   BRGH = 1;
  2637  040D  1683               	bsf	3,5	;RP0=1, select bank1
  2638  040E  1303               	bcf	3,6	;RP1=0, select bank1
  2639  040F  1518               	bsf	24,2	;volatile
  2640  0410                     l2091:	
  2641                           
  2642                           ;./UART.h: 17:  if(x<256)
  2643  0410  3001               	movlw	1
  2644  0411  027A               	subwf	UART_Init@x+1,w
  2645  0412  3000               	movlw	0
  2646  0413  1903               	skipnz
  2647  0414  0279               	subwf	UART_Init@x,w
  2648  0415  1803               	skipnc
  2649  0416  0008               	return
  2650                           
  2651                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  2652  0417  0879               	movf	UART_Init@x,w
  2653  0418  1683               	bsf	3,5	;RP0=1, select bank1
  2654  0419  1303               	bcf	3,6	;RP1=0, select bank1
  2655  041A  0099               	movwf	25	;volatile
  2656                           
  2657                           ;./UART.h: 20:    SYNC = 0;
  2658  041B  1218               	bcf	24,4	;volatile
  2659                           
  2660                           ;./UART.h: 21:    SPEN = 1;
  2661  041C  1283               	bcf	3,5	;RP0=0, select bank0
  2662  041D  1303               	bcf	3,6	;RP1=0, select bank0
  2663  041E  1798               	bsf	24,7	;volatile
  2664                           
  2665                           ;./UART.h: 22:           TRISC7 = 1;
  2666  041F  1683               	bsf	3,5	;RP0=1, select bank1
  2667  0420  1303               	bcf	3,6	;RP1=0, select bank1
  2668  0421  1787               	bsf	7,7	;volatile
  2669                           
  2670                           ;./UART.h: 23:           TRISC6 = 1;
  2671  0422  1707               	bsf	7,6	;volatile
  2672                           
  2673                           ;./UART.h: 24:           CREN = 1;
  2674  0423  1283               	bcf	3,5	;RP0=0, select bank0
  2675  0424  1303               	bcf	3,6	;RP1=0, select bank0
  2676  0425  1618               	bsf	24,4	;volatile
  2677                           
  2678                           ;./UART.h: 25:           TXEN = 1;
  2679  0426  1683               	bsf	3,5	;RP0=1, select bank1
  2680  0427  1303               	bcf	3,6	;RP1=0, select bank1
  2681  0428  1698               	bsf	24,5	;volatile
  2682  0429  0008               	return
  2683  042A                     __end_of_UART_Init:	
  2684                           
  2685                           	psect	text5
  2686  0222                     __ptext5:	
  2687 ;; *************** function ___aldiv *****************
  2688 ;; Defined at:
  2689 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  divisor         4    0[COMMON] long 
  2692 ;;  dividend        4    4[COMMON] long 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  quotient        4    2[BANK0 ] long 
  2695 ;;  sign            1    1[BANK0 ] unsigned char 
  2696 ;;  counter         1    0[BANK0 ] unsigned char 
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  4    0[COMMON] long 
  2699 ;; Registers used:
  2700 ;;		wreg, status,2, status,0
  2701 ;; Tracked objects:
  2702 ;;		On entry : 0/0
  2703 ;;		On exit  : 0/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2706 ;;      Params:         8       0       0       0       0
  2707 ;;      Locals:         0       6       0       0       0
  2708 ;;      Temps:          1       0       0       0       0
  2709 ;;      Totals:         9       6       0       0       0
  2710 ;;Total ram usage:       15 bytes
  2711 ;; Hardware stack levels used:    1
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_UART_Init
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           
  2720                           ;psect for function ___aldiv
  2721  0222                     ___aldiv:	
  2722                           
  2723                           ;incstack = 0
  2724                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2725  0222  1283               	bcf	3,5	;RP0=0, select bank0
  2726  0223  1303               	bcf	3,6	;RP1=0, select bank0
  2727  0224  01C2               	clrf	___aldiv@sign
  2728  0225  1FF3               	btfss	___aldiv@divisor+3,7
  2729  0226  2A34               	goto	l543
  2730  0227  09F0               	comf	___aldiv@divisor,f
  2731  0228  09F1               	comf	___aldiv@divisor+1,f
  2732  0229  09F2               	comf	___aldiv@divisor+2,f
  2733  022A  09F3               	comf	___aldiv@divisor+3,f
  2734  022B  0AF0               	incf	___aldiv@divisor,f
  2735  022C  1903               	skipnz
  2736  022D  0AF1               	incf	___aldiv@divisor+1,f
  2737  022E  1903               	skipnz
  2738  022F  0AF2               	incf	___aldiv@divisor+2,f
  2739  0230  1903               	skipnz
  2740  0231  0AF3               	incf	___aldiv@divisor+3,f
  2741  0232  01C2               	clrf	___aldiv@sign
  2742  0233  0AC2               	incf	___aldiv@sign,f
  2743  0234                     l543:	
  2744  0234  1FF7               	btfss	___aldiv@dividend+3,7
  2745  0235  2A45               	goto	l1903
  2746  0236  09F4               	comf	___aldiv@dividend,f
  2747  0237  09F5               	comf	___aldiv@dividend+1,f
  2748  0238  09F6               	comf	___aldiv@dividend+2,f
  2749  0239  09F7               	comf	___aldiv@dividend+3,f
  2750  023A  0AF4               	incf	___aldiv@dividend,f
  2751  023B  1903               	skipnz
  2752  023C  0AF5               	incf	___aldiv@dividend+1,f
  2753  023D  1903               	skipnz
  2754  023E  0AF6               	incf	___aldiv@dividend+2,f
  2755  023F  1903               	skipnz
  2756  0240  0AF7               	incf	___aldiv@dividend+3,f
  2757  0241  3001               	movlw	1
  2758  0242  00F8               	movwf	??___aldiv
  2759  0243  0878               	movf	??___aldiv,w
  2760  0244  06C2               	xorwf	___aldiv@sign,f
  2761  0245                     l1903:	
  2762  0245  3000               	movlw	0
  2763  0246  00C6               	movwf	___aldiv@quotient+3
  2764  0247  3000               	movlw	0
  2765  0248  00C5               	movwf	___aldiv@quotient+2
  2766  0249  3000               	movlw	0
  2767  024A  00C4               	movwf	___aldiv@quotient+1
  2768  024B  3000               	movlw	0
  2769  024C  00C3               	movwf	___aldiv@quotient
  2770  024D  0873               	movf	___aldiv@divisor+3,w
  2771  024E  0472               	iorwf	___aldiv@divisor+2,w
  2772  024F  0471               	iorwf	___aldiv@divisor+1,w
  2773  0250  0470               	iorwf	___aldiv@divisor,w
  2774  0251  1903               	skipnz
  2775  0252  2A9A               	goto	l1925
  2776  0253  01C1               	clrf	___aldiv@counter
  2777  0254  0AC1               	incf	___aldiv@counter,f
  2778  0255                     l1911:	
  2779  0255  1BF3               	btfsc	___aldiv@divisor+3,7
  2780  0256  2A65               	goto	l1913
  2781  0257  3001               	movlw	1
  2782  0258  00F8               	movwf	??___aldiv
  2783  0259                     u1185:	
  2784  0259  1003               	clrc
  2785  025A  0DF0               	rlf	___aldiv@divisor,f
  2786  025B  0DF1               	rlf	___aldiv@divisor+1,f
  2787  025C  0DF2               	rlf	___aldiv@divisor+2,f
  2788  025D  0DF3               	rlf	___aldiv@divisor+3,f
  2789  025E  0BF8               	decfsz	??___aldiv,f
  2790  025F  2A59               	goto	u1185
  2791  0260  3001               	movlw	1
  2792  0261  00F8               	movwf	??___aldiv
  2793  0262  0878               	movf	??___aldiv,w
  2794  0263  07C1               	addwf	___aldiv@counter,f
  2795  0264  2A55               	goto	l1911
  2796  0265                     l1913:	
  2797  0265  3001               	movlw	1
  2798  0266  00F8               	movwf	??___aldiv
  2799  0267                     u1205:	
  2800  0267  1003               	clrc
  2801  0268  0DC3               	rlf	___aldiv@quotient,f
  2802  0269  0DC4               	rlf	___aldiv@quotient+1,f
  2803  026A  0DC5               	rlf	___aldiv@quotient+2,f
  2804  026B  0DC6               	rlf	___aldiv@quotient+3,f
  2805  026C  0BF8               	decfsz	??___aldiv,f
  2806  026D  2A67               	goto	u1205
  2807  026E  0873               	movf	___aldiv@divisor+3,w
  2808  026F  0277               	subwf	___aldiv@dividend+3,w
  2809  0270  1D03               	skipz
  2810  0271  2A7C               	goto	u1215
  2811  0272  0872               	movf	___aldiv@divisor+2,w
  2812  0273  0276               	subwf	___aldiv@dividend+2,w
  2813  0274  1D03               	skipz
  2814  0275  2A7C               	goto	u1215
  2815  0276  0871               	movf	___aldiv@divisor+1,w
  2816  0277  0275               	subwf	___aldiv@dividend+1,w
  2817  0278  1D03               	skipz
  2818  0279  2A7C               	goto	u1215
  2819  027A  0870               	movf	___aldiv@divisor,w
  2820  027B  0274               	subwf	___aldiv@dividend,w
  2821  027C                     u1215:	
  2822  027C  1C03               	skipc
  2823  027D  2A8D               	goto	l1921
  2824  027E  0870               	movf	___aldiv@divisor,w
  2825  027F  02F4               	subwf	___aldiv@dividend,f
  2826  0280  0871               	movf	___aldiv@divisor+1,w
  2827  0281  1C03               	skipc
  2828  0282  0F71               	incfsz	___aldiv@divisor+1,w
  2829  0283  02F5               	subwf	___aldiv@dividend+1,f
  2830  0284  0872               	movf	___aldiv@divisor+2,w
  2831  0285  1C03               	skipc
  2832  0286  0F72               	incfsz	___aldiv@divisor+2,w
  2833  0287  02F6               	subwf	___aldiv@dividend+2,f
  2834  0288  0873               	movf	___aldiv@divisor+3,w
  2835  0289  1C03               	skipc
  2836  028A  0F73               	incfsz	___aldiv@divisor+3,w
  2837  028B  02F7               	subwf	___aldiv@dividend+3,f
  2838  028C  1443               	bsf	___aldiv@quotient,0
  2839  028D                     l1921:	
  2840  028D  3001               	movlw	1
  2841  028E                     u1225:	
  2842  028E  1003               	clrc
  2843  028F  0CF3               	rrf	___aldiv@divisor+3,f
  2844  0290  0CF2               	rrf	___aldiv@divisor+2,f
  2845  0291  0CF1               	rrf	___aldiv@divisor+1,f
  2846  0292  0CF0               	rrf	___aldiv@divisor,f
  2847  0293  3EFF               	addlw	-1
  2848  0294  1D03               	skipz
  2849  0295  2A8E               	goto	u1225
  2850  0296  3001               	movlw	1
  2851  0297  02C1               	subwf	___aldiv@counter,f
  2852  0298  1D03               	btfss	3,2
  2853  0299  2A65               	goto	l1913
  2854  029A                     l1925:	
  2855  029A  0842               	movf	___aldiv@sign,w
  2856  029B  1903               	btfsc	3,2
  2857  029C  2AA8               	goto	l1929
  2858  029D  09C3               	comf	___aldiv@quotient,f
  2859  029E  09C4               	comf	___aldiv@quotient+1,f
  2860  029F  09C5               	comf	___aldiv@quotient+2,f
  2861  02A0  09C6               	comf	___aldiv@quotient+3,f
  2862  02A1  0AC3               	incf	___aldiv@quotient,f
  2863  02A2  1903               	skipnz
  2864  02A3  0AC4               	incf	___aldiv@quotient+1,f
  2865  02A4  1903               	skipnz
  2866  02A5  0AC5               	incf	___aldiv@quotient+2,f
  2867  02A6  1903               	skipnz
  2868  02A7  0AC6               	incf	___aldiv@quotient+3,f
  2869  02A8                     l1929:	
  2870  02A8  0846               	movf	___aldiv@quotient+3,w
  2871  02A9  00F3               	movwf	?___aldiv+3
  2872  02AA  0845               	movf	___aldiv@quotient+2,w
  2873  02AB  00F2               	movwf	?___aldiv+2
  2874  02AC  0844               	movf	___aldiv@quotient+1,w
  2875  02AD  00F1               	movwf	?___aldiv+1
  2876  02AE  0843               	movf	___aldiv@quotient,w
  2877  02AF  00F0               	movwf	?___aldiv
  2878  02B0  0008               	return
  2879  02B1                     __end_of___aldiv:	
  2880                           
  2881                           	psect	text6
  2882  00E8                     __ptext6:	
  2883 ;; *************** function _Lcd_Init *****************
  2884 ;; Defined at:
  2885 ;;		line 65 in file "./LCD4bits.h"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;		None
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;		None
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  1    wreg      void 
  2892 ;; Registers used:
  2893 ;;		wreg, status,2, status,0, pclath, cstack
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2899 ;;      Params:         0       0       0       0       0
  2900 ;;      Locals:         0       0       0       0       0
  2901 ;;      Temps:          2       0       0       0       0
  2902 ;;      Totals:         2       0       0       0       0
  2903 ;;Total ram usage:        2 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    2
  2906 ;; This function calls:
  2907 ;;		_Lcd_Cmd
  2908 ;;		_Lcd_Port
  2909 ;; This function is called by:
  2910 ;;		_setup
  2911 ;; This function uses a non-reentrant model
  2912 ;;
  2913                           
  2914                           
  2915                           ;psect for function _Lcd_Init
  2916  00E8                     _Lcd_Init:	
  2917                           
  2918                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  2919                           
  2920                           ;incstack = 0
  2921                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2922  00E8  3000               	movlw	0
  2923  00E9  120A  158A  24A1  120A  118A  	fcall	_Lcd_Port
  2924                           
  2925                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  2926  00EE  3034               	movlw	52
  2927  00EF  00F5               	movwf	??_Lcd_Init+1
  2928  00F0  30F1               	movlw	241
  2929  00F1  00F4               	movwf	??_Lcd_Init
  2930  00F2                     u2157:	
  2931  00F2  0BF4               	decfsz	??_Lcd_Init,f
  2932  00F3  28F2               	goto	u2157
  2933  00F4  0BF5               	decfsz	??_Lcd_Init+1,f
  2934  00F5  28F2               	goto	u2157
  2935  00F6  28F7               	nop2
  2936                           
  2937                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  2938  00F7  3003               	movlw	3
  2939  00F8  120A  158A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2940                           
  2941                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2942  00FD  300D               	movlw	13
  2943  00FE  00F5               	movwf	??_Lcd_Init+1
  2944  00FF  30FB               	movlw	251
  2945  0100  00F4               	movwf	??_Lcd_Init
  2946  0101                     u2167:	
  2947  0101  0BF4               	decfsz	??_Lcd_Init,f
  2948  0102  2901               	goto	u2167
  2949  0103  0BF5               	decfsz	??_Lcd_Init+1,f
  2950  0104  2901               	goto	u2167
  2951  0105  2906               	nop2
  2952                           
  2953                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  2954  0106  3003               	movlw	3
  2955  0107  120A  158A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2956                           
  2957                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  2958  010C  301D               	movlw	29
  2959  010D  00F5               	movwf	??_Lcd_Init+1
  2960  010E  3091               	movlw	145
  2961  010F  00F4               	movwf	??_Lcd_Init
  2962  0110                     u2177:	
  2963  0110  0BF4               	decfsz	??_Lcd_Init,f
  2964  0111  2910               	goto	u2177
  2965  0112  0BF5               	decfsz	??_Lcd_Init+1,f
  2966  0113  2910               	goto	u2177
  2967                           
  2968                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  2969  0114  3003               	movlw	3
  2970  0115  120A  158A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2971                           
  2972                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  2973  011A  3002               	movlw	2
  2974  011B  120A  158A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2975                           
  2976                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  2977  0120  3002               	movlw	2
  2978  0121  120A  158A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2979                           
  2980                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  2981  0126  3008               	movlw	8
  2982  0127  120A  158A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2983                           
  2984                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  2985  012C  3000               	movlw	0
  2986  012D  120A  158A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2987                           
  2988                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  2989  0132  300C               	movlw	12
  2990  0133  120A  158A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2991                           
  2992                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  2993  0138  3000               	movlw	0
  2994  0139  120A  158A  24BB  120A  118A  	fcall	_Lcd_Cmd
  2995                           
  2996                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  2997  013E  3006               	movlw	6
  2998  013F  120A  158A  24BB   	fcall	_Lcd_Cmd
  2999  0142  0008               	return
  3000  0143                     __end_of_Lcd_Init:	
  3001                           
  3002                           	psect	text7
  3003  0E37                     __ptext7:	
  3004 ;; *************** function _I2C_Master_Init *****************
  3005 ;; Defined at:
  3006 ;;		line 16 in file "./I2C.h"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  c               4    0[BANK0 ] const unsigned long 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;		None
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  1    wreg      void 
  3013 ;; Registers used:
  3014 ;;		wreg, status,2, status,0, pclath, cstack
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3020 ;;      Params:         0       4       0       0       0
  3021 ;;      Locals:         0       0       0       0       0
  3022 ;;      Temps:          0       4       0       0       0
  3023 ;;      Totals:         0       8       0       0       0
  3024 ;;Total ram usage:        8 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    1
  3027 ;; This function calls:
  3028 ;;		___lldiv
  3029 ;; This function is called by:
  3030 ;;		_setup
  3031 ;; This function uses a non-reentrant model
  3032 ;;
  3033                           
  3034                           
  3035                           ;psect for function _I2C_Master_Init
  3036  0E37                     _I2C_Master_Init:	
  3037                           
  3038                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  3039                           
  3040                           ;incstack = 0
  3041                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  3042  0E37  3028               	movlw	40
  3043  0E38  1283               	bcf	3,5	;RP0=0, select bank0
  3044  0E39  1303               	bcf	3,6	;RP1=0, select bank0
  3045  0E3A  0094               	movwf	20	;volatile
  3046                           
  3047                           ;./I2C.h: 19:     SSPCON2 = 0;
  3048  0E3B  1683               	bsf	3,5	;RP0=1, select bank1
  3049  0E3C  1303               	bcf	3,6	;RP1=0, select bank1
  3050  0E3D  0191               	clrf	17	;volatile
  3051                           
  3052                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  3053  0E3E  1283               	bcf	3,5	;RP0=0, select bank0
  3054  0E3F  1303               	bcf	3,6	;RP1=0, select bank0
  3055  0E40  0841               	movf	I2C_Master_Init@c,w
  3056  0E41  00C5               	movwf	??_I2C_Master_Init
  3057  0E42  0842               	movf	I2C_Master_Init@c+1,w
  3058  0E43  00C6               	movwf	??_I2C_Master_Init+1
  3059  0E44  0843               	movf	I2C_Master_Init@c+2,w
  3060  0E45  00C7               	movwf	??_I2C_Master_Init+2
  3061  0E46  0844               	movf	I2C_Master_Init@c+3,w
  3062  0E47  00C8               	movwf	??_I2C_Master_Init+3
  3063  0E48  3002               	movlw	2
  3064  0E49                     u1385:	
  3065  0E49  1003               	clrc
  3066  0E4A  0DC5               	rlf	??_I2C_Master_Init,f
  3067  0E4B  0DC6               	rlf	??_I2C_Master_Init+1,f
  3068  0E4C  0DC7               	rlf	??_I2C_Master_Init+2,f
  3069  0E4D  0DC8               	rlf	??_I2C_Master_Init+3,f
  3070  0E4E  3EFF               	addlw	-1
  3071  0E4F  1D03               	skipz
  3072  0E50  2E49               	goto	u1385
  3073  0E51  0848               	movf	??_I2C_Master_Init+3,w
  3074  0E52  00F3               	movwf	___lldiv@divisor+3
  3075  0E53  0847               	movf	??_I2C_Master_Init+2,w
  3076  0E54  00F2               	movwf	___lldiv@divisor+2
  3077  0E55  0846               	movf	??_I2C_Master_Init+1,w
  3078  0E56  00F1               	movwf	___lldiv@divisor+1
  3079  0E57  0845               	movf	??_I2C_Master_Init,w
  3080  0E58  00F0               	movwf	___lldiv@divisor
  3081  0E59  3000               	movlw	0
  3082  0E5A  00F7               	movwf	___lldiv@dividend+3
  3083  0E5B  307A               	movlw	122
  3084  0E5C  00F6               	movwf	___lldiv@dividend+2
  3085  0E5D  3012               	movlw	18
  3086  0E5E  00F5               	movwf	___lldiv@dividend+1
  3087  0E5F  3000               	movlw	0
  3088  0E60  00F4               	movwf	___lldiv@dividend
  3089  0E61  120A  118A  2143   	fcall	___lldiv
  3090  0E64  0870               	movf	?___lldiv,w
  3091  0E65  3EFF               	addlw	255
  3092  0E66  1683               	bsf	3,5	;RP0=1, select bank1
  3093  0E67  1303               	bcf	3,6	;RP1=0, select bank1
  3094  0E68  0093               	movwf	19	;volatile
  3095                           
  3096                           ;./I2C.h: 21:     SSPSTAT = 0;
  3097  0E69  0194               	clrf	20	;volatile
  3098                           
  3099                           ;./I2C.h: 22:     TRISCbits.TRISC3 = 1;
  3100  0E6A  1587               	bsf	7,3	;volatile
  3101                           
  3102                           ;./I2C.h: 23:     TRISCbits.TRISC4 = 1;
  3103  0E6B  1607               	bsf	7,4	;volatile
  3104  0E6C  0008               	return
  3105  0E6D                     __end_of_I2C_Master_Init:	
  3106                           
  3107                           	psect	text8
  3108  0143                     __ptext8:	
  3109 ;; *************** function ___lldiv *****************
  3110 ;; Defined at:
  3111 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;  divisor         4    0[COMMON] unsigned long 
  3114 ;;  dividend        4    4[COMMON] unsigned long 
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  quotient        4    9[COMMON] unsigned long 
  3117 ;;  counter         1   13[COMMON] unsigned char 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  4    0[COMMON] unsigned long 
  3120 ;; Registers used:
  3121 ;;		wreg, status,2, status,0
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3127 ;;      Params:         8       0       0       0       0
  3128 ;;      Locals:         5       0       0       0       0
  3129 ;;      Temps:          1       0       0       0       0
  3130 ;;      Totals:        14       0       0       0       0
  3131 ;;Total ram usage:       14 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; This function calls:
  3134 ;;		Nothing
  3135 ;; This function is called by:
  3136 ;;		_I2C_Master_Init
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           
  3141                           ;psect for function ___lldiv
  3142  0143                     ___lldiv:	
  3143                           
  3144                           ;incstack = 0
  3145                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3146  0143  3000               	movlw	0
  3147  0144  00FC               	movwf	___lldiv@quotient+3
  3148  0145  3000               	movlw	0
  3149  0146  00FB               	movwf	___lldiv@quotient+2
  3150  0147  3000               	movlw	0
  3151  0148  00FA               	movwf	___lldiv@quotient+1
  3152  0149  3000               	movlw	0
  3153  014A  00F9               	movwf	___lldiv@quotient
  3154  014B  0873               	movf	___lldiv@divisor+3,w
  3155  014C  0472               	iorwf	___lldiv@divisor+2,w
  3156  014D  0471               	iorwf	___lldiv@divisor+1,w
  3157  014E  0470               	iorwf	___lldiv@divisor,w
  3158  014F  1903               	skipnz
  3159  0150  2998               	goto	l1889
  3160  0151  01FD               	clrf	___lldiv@counter
  3161  0152  0AFD               	incf	___lldiv@counter,f
  3162  0153                     l1875:	
  3163  0153  1BF3               	btfsc	___lldiv@divisor+3,7
  3164  0154  2963               	goto	l1877
  3165  0155  3001               	movlw	1
  3166  0156  00F8               	movwf	??___lldiv
  3167  0157                     u1095:	
  3168  0157  1003               	clrc
  3169  0158  0DF0               	rlf	___lldiv@divisor,f
  3170  0159  0DF1               	rlf	___lldiv@divisor+1,f
  3171  015A  0DF2               	rlf	___lldiv@divisor+2,f
  3172  015B  0DF3               	rlf	___lldiv@divisor+3,f
  3173  015C  0BF8               	decfsz	??___lldiv,f
  3174  015D  2957               	goto	u1095
  3175  015E  3001               	movlw	1
  3176  015F  00F8               	movwf	??___lldiv
  3177  0160  0878               	movf	??___lldiv,w
  3178  0161  07FD               	addwf	___lldiv@counter,f
  3179  0162  2953               	goto	l1875
  3180  0163                     l1877:	
  3181  0163  3001               	movlw	1
  3182  0164  00F8               	movwf	??___lldiv
  3183  0165                     u1115:	
  3184  0165  1003               	clrc
  3185  0166  0DF9               	rlf	___lldiv@quotient,f
  3186  0167  0DFA               	rlf	___lldiv@quotient+1,f
  3187  0168  0DFB               	rlf	___lldiv@quotient+2,f
  3188  0169  0DFC               	rlf	___lldiv@quotient+3,f
  3189  016A  0BF8               	decfsz	??___lldiv,f
  3190  016B  2965               	goto	u1115
  3191  016C  0873               	movf	___lldiv@divisor+3,w
  3192  016D  0277               	subwf	___lldiv@dividend+3,w
  3193  016E  1D03               	skipz
  3194  016F  297A               	goto	u1125
  3195  0170  0872               	movf	___lldiv@divisor+2,w
  3196  0171  0276               	subwf	___lldiv@dividend+2,w
  3197  0172  1D03               	skipz
  3198  0173  297A               	goto	u1125
  3199  0174  0871               	movf	___lldiv@divisor+1,w
  3200  0175  0275               	subwf	___lldiv@dividend+1,w
  3201  0176  1D03               	skipz
  3202  0177  297A               	goto	u1125
  3203  0178  0870               	movf	___lldiv@divisor,w
  3204  0179  0274               	subwf	___lldiv@dividend,w
  3205  017A                     u1125:	
  3206  017A  1C03               	skipc
  3207  017B  298B               	goto	l1885
  3208  017C  0870               	movf	___lldiv@divisor,w
  3209  017D  02F4               	subwf	___lldiv@dividend,f
  3210  017E  0871               	movf	___lldiv@divisor+1,w
  3211  017F  1C03               	skipc
  3212  0180  0F71               	incfsz	___lldiv@divisor+1,w
  3213  0181  02F5               	subwf	___lldiv@dividend+1,f
  3214  0182  0872               	movf	___lldiv@divisor+2,w
  3215  0183  1C03               	skipc
  3216  0184  0F72               	incfsz	___lldiv@divisor+2,w
  3217  0185  02F6               	subwf	___lldiv@dividend+2,f
  3218  0186  0873               	movf	___lldiv@divisor+3,w
  3219  0187  1C03               	skipc
  3220  0188  0F73               	incfsz	___lldiv@divisor+3,w
  3221  0189  02F7               	subwf	___lldiv@dividend+3,f
  3222  018A  1479               	bsf	___lldiv@quotient,0
  3223  018B                     l1885:	
  3224  018B  3001               	movlw	1
  3225  018C                     u1135:	
  3226  018C  1003               	clrc
  3227  018D  0CF3               	rrf	___lldiv@divisor+3,f
  3228  018E  0CF2               	rrf	___lldiv@divisor+2,f
  3229  018F  0CF1               	rrf	___lldiv@divisor+1,f
  3230  0190  0CF0               	rrf	___lldiv@divisor,f
  3231  0191  3EFF               	addlw	-1
  3232  0192  1D03               	skipz
  3233  0193  298C               	goto	u1135
  3234  0194  3001               	movlw	1
  3235  0195  02FD               	subwf	___lldiv@counter,f
  3236  0196  1D03               	btfss	3,2
  3237  0197  2963               	goto	l1877
  3238  0198                     l1889:	
  3239  0198  087C               	movf	___lldiv@quotient+3,w
  3240  0199  00F3               	movwf	?___lldiv+3
  3241  019A  087B               	movf	___lldiv@quotient+2,w
  3242  019B  00F2               	movwf	?___lldiv+2
  3243  019C  087A               	movf	___lldiv@quotient+1,w
  3244  019D  00F1               	movwf	?___lldiv+1
  3245  019E  0879               	movf	___lldiv@quotient,w
  3246  019F  00F0               	movwf	?___lldiv
  3247  01A0  0008               	return
  3248  01A1                     __end_of___lldiv:	
  3249                           
  3250                           	psect	text9
  3251  0CF0                     __ptext9:	
  3252 ;; *************** function _open_door *****************
  3253 ;; Defined at:
  3254 ;;		line 418 in file "mainMaster.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;		None
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;		None
  3259 ;; Return value:  Size  Location     Type
  3260 ;;                  1    wreg      void 
  3261 ;; Registers used:
  3262 ;;		wreg, status,2, status,0, pclath, cstack
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3268 ;;      Params:         0       0       0       0       0
  3269 ;;      Locals:         0       0       0       0       0
  3270 ;;      Temps:          0       0       0       0       0
  3271 ;;      Totals:         0       0       0       0       0
  3272 ;;Total ram usage:        0 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:    2
  3275 ;; This function calls:
  3276 ;;		_I2C_Master_Start
  3277 ;;		_I2C_Master_Stop
  3278 ;;		_I2C_Master_Write
  3279 ;; This function is called by:
  3280 ;;		_main
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           
  3285                           ;psect for function _open_door
  3286  0CF0                     _open_door:	
  3287                           
  3288                           ;mainMaster.c: 420:     I2C_Master_Start();
  3289                           
  3290                           ;incstack = 0
  3291                           ; Regs used in _open_door: [wreg+status,2+status,0+pclath+cstack]
  3292  0CF0  120A  158A  244D  120A  158A  	fcall	_I2C_Master_Start
  3293                           
  3294                           ;mainMaster.c: 421:     I2C_Master_Write(0x20);
  3295  0CF5  3020               	movlw	32
  3296  0CF6  00F0               	movwf	I2C_Master_Write@d
  3297  0CF7  3000               	movlw	0
  3298  0CF8  00F1               	movwf	I2C_Master_Write@d+1
  3299  0CF9  120A  158A  2462  120A  158A  	fcall	_I2C_Master_Write
  3300                           
  3301                           ;mainMaster.c: 422:     I2C_Master_Write(0xFF);
  3302  0CFE  30FF               	movlw	255
  3303  0CFF  00F0               	movwf	I2C_Master_Write@d
  3304  0D00  3000               	movlw	0
  3305  0D01  00F1               	movwf	I2C_Master_Write@d+1
  3306  0D02  120A  158A  2462  120A  158A  	fcall	_I2C_Master_Write
  3307                           
  3308                           ;mainMaster.c: 423:     I2C_Master_Stop();
  3309  0D07  120A  158A  2454   	fcall	_I2C_Master_Stop
  3310  0D0A  0008               	return
  3311  0D0B                     __end_of_open_door:	
  3312                           
  3313                           	psect	text10
  3314  0D68                     __ptext10:	
  3315 ;; *************** function _get_tripwire *****************
  3316 ;; Defined at:
  3317 ;;		line 382 in file "mainMaster.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;		None
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  trip            1    7[COMMON] unsigned char 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      unsigned char 
  3324 ;; Registers used:
  3325 ;;		wreg, status,2, status,0, pclath, cstack
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3331 ;;      Params:         0       0       0       0       0
  3332 ;;      Locals:         1       0       0       0       0
  3333 ;;      Temps:          1       0       0       0       0
  3334 ;;      Totals:         2       0       0       0       0
  3335 ;;Total ram usage:        2 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    2
  3338 ;; This function calls:
  3339 ;;		_I2C_Master_Read
  3340 ;;		_I2C_Master_Start
  3341 ;;		_I2C_Master_Stop
  3342 ;;		_I2C_Master_Write
  3343 ;; This function is called by:
  3344 ;;		_main
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           
  3349                           ;psect for function _get_tripwire
  3350  0D68                     _get_tripwire:	
  3351                           
  3352                           ;mainMaster.c: 384:     char trip;;mainMaster.c: 386:     I2C_Master_Start();
  3353                           
  3354                           ;incstack = 0
  3355                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  3356  0D68  120A  158A  244D  120A  158A  	fcall	_I2C_Master_Start
  3357                           
  3358                           ;mainMaster.c: 387:     I2C_Master_Write(0x21);
  3359  0D6D  3021               	movlw	33
  3360  0D6E  00F0               	movwf	I2C_Master_Write@d
  3361  0D6F  3000               	movlw	0
  3362  0D70  00F1               	movwf	I2C_Master_Write@d+1
  3363  0D71  120A  158A  2462  120A  158A  	fcall	_I2C_Master_Write
  3364                           
  3365                           ;mainMaster.c: 388:     trip = I2C_Master_Read(0);
  3366  0D76  3000               	movlw	0
  3367  0D77  00F0               	movwf	I2C_Master_Read@a
  3368  0D78  00F1               	movwf	I2C_Master_Read@a+1
  3369  0D79  120A  158A  25D5  120A  158A  	fcall	_I2C_Master_Read
  3370  0D7E  0870               	movf	?_I2C_Master_Read,w
  3371  0D7F  00F6               	movwf	??_get_tripwire
  3372  0D80  0876               	movf	??_get_tripwire,w
  3373  0D81  00F7               	movwf	get_tripwire@trip
  3374                           
  3375                           ;mainMaster.c: 389:     I2C_Master_Stop();
  3376  0D82  120A  158A  2454   	fcall	_I2C_Master_Stop
  3377                           
  3378                           ;mainMaster.c: 391:     return (trip);
  3379  0D85  0877               	movf	get_tripwire@trip,w
  3380  0D86  0008               	return
  3381  0D87                     __end_of_get_tripwire:	
  3382                           
  3383                           	psect	text11
  3384  01A1                     __ptext11:	
  3385 ;; *************** function _get_time *****************
  3386 ;; Defined at:
  3387 ;;		line 307 in file "mainMaster.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;  time_string     1    wreg     PTR unsigned char 
  3390 ;;		 -> time(6), 
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;  time_string     1   10[COMMON] PTR unsigned char 
  3393 ;;		 -> time(6), 
  3394 ;;  min             1    9[COMMON] unsigned char 
  3395 ;;  hour            1    8[COMMON] unsigned char 
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      void 
  3398 ;; Registers used:
  3399 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3405 ;;      Params:         0       0       0       0       0
  3406 ;;      Locals:         3       0       0       0       0
  3407 ;;      Temps:          2       0       0       0       0
  3408 ;;      Totals:         5       0       0       0       0
  3409 ;;Total ram usage:        5 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    2
  3412 ;; This function calls:
  3413 ;;		_I2C_Master_Read
  3414 ;;		_I2C_Master_RepeatedStart
  3415 ;;		_I2C_Master_Start
  3416 ;;		_I2C_Master_Stop
  3417 ;;		_I2C_Master_Write
  3418 ;; This function is called by:
  3419 ;;		_main
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           
  3424                           ;psect for function _get_time
  3425  01A1                     _get_time:	
  3426                           
  3427                           ;incstack = 0
  3428                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3429                           ;get_time@time_string stored from wreg
  3430  01A1  00FA               	movwf	get_time@time_string
  3431                           
  3432                           ;mainMaster.c: 309:     char hour, min;;mainMaster.c: 311:     I2C_Master_Start();
  3433  01A2  120A  158A  244D  120A  118A  	fcall	_I2C_Master_Start
  3434                           
  3435                           ;mainMaster.c: 312:     I2C_Master_Write(0xD0);
  3436  01A7  30D0               	movlw	208
  3437  01A8  00F0               	movwf	I2C_Master_Write@d
  3438  01A9  3000               	movlw	0
  3439  01AA  00F1               	movwf	I2C_Master_Write@d+1
  3440  01AB  120A  158A  2462  120A  118A  	fcall	_I2C_Master_Write
  3441                           
  3442                           ;mainMaster.c: 313:     I2C_Master_Write(0x01);
  3443  01B0  3001               	movlw	1
  3444  01B1  00F0               	movwf	I2C_Master_Write@d
  3445  01B2  3000               	movlw	0
  3446  01B3  00F1               	movwf	I2C_Master_Write@d+1
  3447  01B4  120A  158A  2462  120A  118A  	fcall	_I2C_Master_Write
  3448                           
  3449                           ;mainMaster.c: 314:     I2C_Master_RepeatedStart();
  3450  01B9  120A  158A  245B  120A  118A  	fcall	_I2C_Master_RepeatedStart
  3451                           
  3452                           ;mainMaster.c: 315:     I2C_Master_Write(0xD1);
  3453  01BE  30D1               	movlw	209
  3454  01BF  00F0               	movwf	I2C_Master_Write@d
  3455  01C0  3000               	movlw	0
  3456  01C1  00F1               	movwf	I2C_Master_Write@d+1
  3457  01C2  120A  158A  2462  120A  118A  	fcall	_I2C_Master_Write
  3458                           
  3459                           ;mainMaster.c: 316:     min = I2C_Master_Read(1);
  3460  01C7  3001               	movlw	1
  3461  01C8  00F0               	movwf	I2C_Master_Read@a
  3462  01C9  3000               	movlw	0
  3463  01CA  00F1               	movwf	I2C_Master_Read@a+1
  3464  01CB  120A  158A  25D5  120A  118A  	fcall	_I2C_Master_Read
  3465  01D0  0870               	movf	?_I2C_Master_Read,w
  3466  01D1  00F6               	movwf	??_get_time
  3467  01D2  0876               	movf	??_get_time,w
  3468  01D3  00F9               	movwf	get_time@min
  3469                           
  3470                           ;mainMaster.c: 317:     hour = I2C_Master_Read(0);
  3471  01D4  3000               	movlw	0
  3472  01D5  00F0               	movwf	I2C_Master_Read@a
  3473  01D6  00F1               	movwf	I2C_Master_Read@a+1
  3474  01D7  120A  158A  25D5  120A  118A  	fcall	_I2C_Master_Read
  3475  01DC  0870               	movf	?_I2C_Master_Read,w
  3476  01DD  00F6               	movwf	??_get_time
  3477  01DE  0876               	movf	??_get_time,w
  3478  01DF  00F8               	movwf	get_time@hour
  3479                           
  3480                           ;mainMaster.c: 318:     I2C_Master_Stop();
  3481  01E0  120A  158A  2454  120A  118A  	fcall	_I2C_Master_Stop
  3482                           
  3483                           ;mainMaster.c: 320:     time_string[0] = (hour >> 4) + '0';
  3484  01E5  0878               	movf	get_time@hour,w
  3485  01E6  00F6               	movwf	??_get_time
  3486  01E7  3004               	movlw	4
  3487  01E8                     u1705:	
  3488  01E8  1003               	clrc
  3489  01E9  0CF6               	rrf	??_get_time,f
  3490  01EA  3EFF               	addlw	-1
  3491  01EB  1D03               	skipz
  3492  01EC  29E8               	goto	u1705
  3493  01ED  0876               	movf	??_get_time,w
  3494  01EE  3E30               	addlw	48
  3495  01EF  00F7               	movwf	??_get_time+1
  3496  01F0  087A               	movf	get_time@time_string,w
  3497  01F1  0084               	movwf	4
  3498  01F2  0877               	movf	??_get_time+1,w
  3499  01F3  1383               	bcf	3,7	;select IRP bank0
  3500  01F4  0080               	movwf	0
  3501                           
  3502                           ;mainMaster.c: 321:     time_string[1] = (hour & 0x0F) + '0';
  3503  01F5  0878               	movf	get_time@hour,w
  3504  01F6  390F               	andlw	15
  3505  01F7  3E30               	addlw	48
  3506  01F8  00F6               	movwf	??_get_time
  3507  01F9  0A7A               	incf	get_time@time_string,w
  3508  01FA  0084               	movwf	4
  3509  01FB  0876               	movf	??_get_time,w
  3510  01FC  0080               	movwf	0
  3511                           
  3512                           ;mainMaster.c: 322:     time_string[2] = ':';
  3513  01FD  303A               	movlw	58
  3514  01FE  00F6               	movwf	??_get_time
  3515  01FF  087A               	movf	get_time@time_string,w
  3516  0200  3E02               	addlw	2
  3517  0201  0084               	movwf	4
  3518  0202  0876               	movf	??_get_time,w
  3519  0203  0080               	movwf	0
  3520                           
  3521                           ;mainMaster.c: 323:     time_string[3] = (min >> 4) + '0';
  3522  0204  0879               	movf	get_time@min,w
  3523  0205  00F6               	movwf	??_get_time
  3524  0206  3004               	movlw	4
  3525  0207                     u1715:	
  3526  0207  1003               	clrc
  3527  0208  0CF6               	rrf	??_get_time,f
  3528  0209  3EFF               	addlw	-1
  3529  020A  1D03               	skipz
  3530  020B  2A07               	goto	u1715
  3531  020C  0876               	movf	??_get_time,w
  3532  020D  3E30               	addlw	48
  3533  020E  00F7               	movwf	??_get_time+1
  3534  020F  087A               	movf	get_time@time_string,w
  3535  0210  3E03               	addlw	3
  3536  0211  0084               	movwf	4
  3537  0212  0877               	movf	??_get_time+1,w
  3538  0213  0080               	movwf	0
  3539                           
  3540                           ;mainMaster.c: 324:     time_string[4] = (min & 0x0F) + '0';
  3541  0214  0879               	movf	get_time@min,w
  3542  0215  390F               	andlw	15
  3543  0216  3E30               	addlw	48
  3544  0217  00F6               	movwf	??_get_time
  3545  0218  087A               	movf	get_time@time_string,w
  3546  0219  3E04               	addlw	4
  3547  021A  0084               	movwf	4
  3548  021B  0876               	movf	??_get_time,w
  3549  021C  0080               	movwf	0
  3550                           
  3551                           ;mainMaster.c: 325:     time_string[5] = '\0';
  3552  021D  087A               	movf	get_time@time_string,w
  3553  021E  3E05               	addlw	5
  3554  021F  0084               	movwf	4
  3555  0220  0180               	clrf	0
  3556  0221  0008               	return
  3557  0222                     __end_of_get_time:	
  3558                           
  3559                           	psect	text12
  3560  02B1                     __ptext12:	
  3561 ;; *************** function _get_temp *****************
  3562 ;; Defined at:
  3563 ;;		line 343 in file "mainMaster.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;  temp_string     1    wreg     PTR unsigned char 
  3566 ;;		 -> temp(6), 
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;  temp_string     1   20[BANK0 ] PTR unsigned char 
  3569 ;;		 -> temp(6), 
  3570 ;;  decimal         3   16[BANK0 ] unsigned char [3]
  3571 ;;  tempLSB         1   21[BANK0 ] unsigned char 
  3572 ;;  tempMSB         1   19[BANK0 ] unsigned char 
  3573 ;; Return value:  Size  Location     Type
  3574 ;;                  1    wreg      void 
  3575 ;; Registers used:
  3576 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3577 ;; Tracked objects:
  3578 ;;		On entry : 0/0
  3579 ;;		On exit  : 0/0
  3580 ;;		Unchanged: 0/0
  3581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3582 ;;      Params:         0       0       0       0       0
  3583 ;;      Locals:         0       6       0       0       0
  3584 ;;      Temps:          0       3       0       0       0
  3585 ;;      Totals:         0       9       0       0       0
  3586 ;;Total ram usage:        9 bytes
  3587 ;; Hardware stack levels used:    1
  3588 ;; Hardware stack levels required when called:    2
  3589 ;; This function calls:
  3590 ;;		_I2C_Master_Read
  3591 ;;		_I2C_Master_RepeatedStart
  3592 ;;		_I2C_Master_Start
  3593 ;;		_I2C_Master_Stop
  3594 ;;		_I2C_Master_Write
  3595 ;;		___bmul
  3596 ;;		_sprintf
  3597 ;;		_strcat
  3598 ;; This function is called by:
  3599 ;;		_main
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           
  3604                           ;psect for function _get_temp
  3605  02B1                     _get_temp:	
  3606                           
  3607                           ;incstack = 0
  3608                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3609                           ;get_temp@temp_string stored from wreg
  3610  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  3611  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  3612  02B3  00D5               	movwf	get_temp@temp_string
  3613                           
  3614                           ;mainMaster.c: 345:     char tempLSB, tempMSB;;mainMaster.c: 346:     char decimal[3];;m
      +                          ainMaster.c: 348:     I2C_Master_Start();
  3615  02B4  120A  158A  244D  120A  118A  	fcall	_I2C_Master_Start
  3616                           
  3617                           ;mainMaster.c: 349:     I2C_Master_Write(0xD0);
  3618  02B9  30D0               	movlw	208
  3619  02BA  00F0               	movwf	I2C_Master_Write@d
  3620  02BB  3000               	movlw	0
  3621  02BC  00F1               	movwf	I2C_Master_Write@d+1
  3622  02BD  120A  158A  2462  120A  118A  	fcall	_I2C_Master_Write
  3623                           
  3624                           ;mainMaster.c: 350:     I2C_Master_Write(0x11);
  3625  02C2  3011               	movlw	17
  3626  02C3  00F0               	movwf	I2C_Master_Write@d
  3627  02C4  3000               	movlw	0
  3628  02C5  00F1               	movwf	I2C_Master_Write@d+1
  3629  02C6  120A  158A  2462  120A  118A  	fcall	_I2C_Master_Write
  3630                           
  3631                           ;mainMaster.c: 351:     I2C_Master_RepeatedStart();
  3632  02CB  120A  158A  245B  120A  118A  	fcall	_I2C_Master_RepeatedStart
  3633                           
  3634                           ;mainMaster.c: 352:     I2C_Master_Write(0xD1);
  3635  02D0  30D1               	movlw	209
  3636  02D1  00F0               	movwf	I2C_Master_Write@d
  3637  02D2  3000               	movlw	0
  3638  02D3  00F1               	movwf	I2C_Master_Write@d+1
  3639  02D4  120A  158A  2462  120A  118A  	fcall	_I2C_Master_Write
  3640                           
  3641                           ;mainMaster.c: 353:     tempMSB = I2C_Master_Read(1);
  3642  02D9  3001               	movlw	1
  3643  02DA  00F0               	movwf	I2C_Master_Read@a
  3644  02DB  3000               	movlw	0
  3645  02DC  00F1               	movwf	I2C_Master_Read@a+1
  3646  02DD  120A  158A  25D5  120A  118A  	fcall	_I2C_Master_Read
  3647  02E2  0870               	movf	?_I2C_Master_Read,w
  3648  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  3649  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  3650  02E5  00CE               	movwf	??_get_temp
  3651  02E6  084E               	movf	??_get_temp,w
  3652  02E7  00D4               	movwf	get_temp@tempMSB
  3653                           
  3654                           ;mainMaster.c: 354:     tempLSB = I2C_Master_Read(0);
  3655  02E8  3000               	movlw	0
  3656  02E9  00F0               	movwf	I2C_Master_Read@a
  3657  02EA  00F1               	movwf	I2C_Master_Read@a+1
  3658  02EB  120A  158A  25D5  120A  118A  	fcall	_I2C_Master_Read
  3659  02F0  0870               	movf	?_I2C_Master_Read,w
  3660  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  3661  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  3662  02F3  00CE               	movwf	??_get_temp
  3663  02F4  084E               	movf	??_get_temp,w
  3664  02F5  00D6               	movwf	get_temp@tempLSB
  3665                           
  3666                           ;mainMaster.c: 355:     I2C_Master_Stop();
  3667  02F6  120A  158A  2454  120A  118A  	fcall	_I2C_Master_Stop
  3668                           
  3669                           ;mainMaster.c: 357:     tempMSB = tempMSB - 4;
  3670  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  3671  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  3672  02FD  0854               	movf	get_temp@tempMSB,w
  3673  02FE  3EFC               	addlw	252
  3674  02FF  00CE               	movwf	??_get_temp
  3675  0300  084E               	movf	??_get_temp,w
  3676  0301  00D4               	movwf	get_temp@tempMSB
  3677                           
  3678                           ;mainMaster.c: 358:     tempLSB = (tempLSB >> 6) * 25;
  3679  0302  3019               	movlw	25
  3680  0303  00CE               	movwf	??_get_temp
  3681  0304  084E               	movf	??_get_temp,w
  3682  0305  00F0               	movwf	___bmul@multiplicand
  3683  0306  0856               	movf	get_temp@tempLSB,w
  3684  0307  00CF               	movwf	??_get_temp+1
  3685  0308  3006               	movlw	6
  3686  0309                     u1685:	
  3687  0309  1003               	clrc
  3688  030A  0CCF               	rrf	??_get_temp+1,f
  3689  030B  3EFF               	addlw	-1
  3690  030C  1D03               	skipz
  3691  030D  2B09               	goto	u1685
  3692  030E  084F               	movf	??_get_temp+1,w
  3693  030F  120A  158A  2490  120A  118A  	fcall	___bmul
  3694  0314  1283               	bcf	3,5	;RP0=0, select bank0
  3695  0315  1303               	bcf	3,6	;RP1=0, select bank0
  3696  0316  00D0               	movwf	??_get_temp+2
  3697  0317  0850               	movf	??_get_temp+2,w
  3698  0318  00D6               	movwf	get_temp@tempLSB
  3699                           
  3700                           ;mainMaster.c: 359:     sprintf(temp_string, "%d", tempMSB);
  3701  0319  30A1               	movlw	(low (((STR_20+1)-__stringbase)| (0+32768)))& (0+255)
  3702  031A  00CE               	movwf	??_get_temp
  3703  031B  084E               	movf	??_get_temp,w
  3704  031C  00C1               	movwf	sprintf@f
  3705  031D  0854               	movf	get_temp@tempMSB,w
  3706  031E  00CF               	movwf	??_get_temp+1
  3707  031F  01D0               	clrf	??_get_temp+2
  3708  0320  084F               	movf	??_get_temp+1,w
  3709  0321  00C2               	movwf	?_sprintf+1
  3710  0322  0850               	movf	??_get_temp+2,w
  3711  0323  00C3               	movwf	?_sprintf+2
  3712  0324  0855               	movf	get_temp@temp_string,w
  3713  0325  120A  118A  242A  120A  118A  	fcall	_sprintf
  3714                           
  3715                           ;mainMaster.c: 360:     if (tempLSB == 0){
  3716  032A  1283               	bcf	3,5	;RP0=0, select bank0
  3717  032B  1303               	bcf	3,6	;RP1=0, select bank0
  3718  032C  0856               	movf	get_temp@tempLSB,w
  3719  032D  1D03               	btfss	3,2
  3720  032E  2B31               	goto	l2281
  3721                           
  3722                           ;mainMaster.c: 361:         sprintf(decimal, ".%d0", tempLSB);
  3723  032F  309B               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  3724  0330  2B32               	goto	L15
  3725  0331                     l2281:	
  3726                           ;mainMaster.c: 362:     } else {
  3727                           
  3728                           
  3729                           ;mainMaster.c: 363:         sprintf(decimal, ".%d", tempLSB);
  3730  0331  30A0               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  3731  0332                     L15:	
  3732  0332  00CE               	movwf	??_get_temp
  3733  0333  084E               	movf	??_get_temp,w
  3734  0334  00C1               	movwf	sprintf@f
  3735  0335  0856               	movf	get_temp@tempLSB,w
  3736  0336  00CF               	movwf	??_get_temp+1
  3737  0337  01D0               	clrf	??_get_temp+2
  3738  0338  084F               	movf	??_get_temp+1,w
  3739  0339  00C2               	movwf	?_sprintf+1
  3740  033A  0850               	movf	??_get_temp+2,w
  3741  033B  00C3               	movwf	?_sprintf+2
  3742  033C  3051               	movlw	(low (get_temp@decimal| 0))& (0+255)
  3743  033D  120A  118A  242A  120A  118A  	fcall	_sprintf
  3744                           
  3745                           ;mainMaster.c: 365:     strcat(temp_string, decimal);
  3746  0342  3051               	movlw	(low (get_temp@decimal| 0))& (0+255)
  3747  0343  1283               	bcf	3,5	;RP0=0, select bank0
  3748  0344  1303               	bcf	3,6	;RP1=0, select bank0
  3749  0345  00CE               	movwf	??_get_temp
  3750  0346  084E               	movf	??_get_temp,w
  3751  0347  00F0               	movwf	strcat@from
  3752  0348  0855               	movf	get_temp@temp_string,w
  3753  0349  120A  158A  2587   	fcall	_strcat
  3754                           
  3755                           ;mainMaster.c: 366:     temp_string[5] = '\0';
  3756  034C  1283               	bcf	3,5	;RP0=0, select bank0
  3757  034D  1303               	bcf	3,6	;RP1=0, select bank0
  3758  034E  0855               	movf	get_temp@temp_string,w
  3759  034F  3E05               	addlw	5
  3760  0350  0084               	movwf	4
  3761  0351  1383               	bcf	3,7	;select IRP bank0
  3762  0352  0180               	clrf	0
  3763  0353  0008               	return
  3764  0354                     __end_of_get_temp:	
  3765                           
  3766                           	psect	text13
  3767  0D87                     __ptext13:	
  3768 ;; *************** function _strcat *****************
  3769 ;; Defined at:
  3770 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;  to              1    wreg     PTR unsigned char 
  3773 ;;		 -> temp(6), 
  3774 ;;  from            1    0[COMMON] PTR const unsigned char 
  3775 ;;		 -> get_temp@decimal(3), 
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;  to              1    2[COMMON] PTR unsigned char 
  3778 ;;		 -> temp(6), 
  3779 ;;  cp              1    3[COMMON] PTR unsigned char 
  3780 ;;		 -> temp(6), 
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  1    wreg      PTR unsigned char 
  3783 ;; Registers used:
  3784 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3790 ;;      Params:         1       0       0       0       0
  3791 ;;      Locals:         2       0       0       0       0
  3792 ;;      Temps:          1       0       0       0       0
  3793 ;;      Totals:         4       0       0       0       0
  3794 ;;Total ram usage:        4 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; This function calls:
  3797 ;;		Nothing
  3798 ;; This function is called by:
  3799 ;;		_get_temp
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803                           
  3804                           ;psect for function _strcat
  3805  0D87                     _strcat:	
  3806                           
  3807                           ;incstack = 0
  3808                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  3809                           ;strcat@to stored from wreg
  3810  0D87  00F2               	movwf	strcat@to
  3811  0D88  0872               	movf	strcat@to,w
  3812  0D89  00F1               	movwf	??_strcat
  3813  0D8A  0871               	movf	??_strcat,w
  3814  0D8B  00F3               	movwf	strcat@cp
  3815  0D8C                     l2175:	
  3816  0D8C  0873               	movf	strcat@cp,w
  3817  0D8D  0084               	movwf	4
  3818  0D8E  1383               	bcf	3,7	;select IRP bank0
  3819  0D8F  0800               	movf	0,w
  3820  0D90  1903               	btfsc	3,2
  3821  0D91  2D9F               	goto	l2179
  3822  0D92  3001               	movlw	1
  3823  0D93  00F1               	movwf	??_strcat
  3824  0D94  0871               	movf	??_strcat,w
  3825  0D95  07F3               	addwf	strcat@cp,f
  3826  0D96  2D8C               	goto	l2175
  3827  0D97                     l2177:	
  3828  0D97  3001               	movlw	1
  3829  0D98  00F1               	movwf	??_strcat
  3830  0D99  0871               	movf	??_strcat,w
  3831  0D9A  07F3               	addwf	strcat@cp,f
  3832  0D9B  3001               	movlw	1
  3833  0D9C  00F1               	movwf	??_strcat
  3834  0D9D  0871               	movf	??_strcat,w
  3835  0D9E  07F0               	addwf	strcat@from,f
  3836  0D9F                     l2179:	
  3837  0D9F  0870               	movf	strcat@from,w
  3838  0DA0  0084               	movwf	4
  3839  0DA1  0800               	movf	0,w
  3840  0DA2  00F1               	movwf	??_strcat
  3841  0DA3  0873               	movf	strcat@cp,w
  3842  0DA4  0084               	movwf	4
  3843  0DA5  0871               	movf	??_strcat,w
  3844  0DA6  0080               	movwf	0
  3845  0DA7  0800               	movf	0,w
  3846  0DA8  1903               	btfsc	3,2
  3847  0DA9  0008               	return
  3848  0DAA  2D97               	goto	l2177
  3849  0DAB                     __end_of_strcat:	
  3850                           
  3851                           	psect	text14
  3852  042A                     __ptext14:	
  3853 ;; *************** function _sprintf *****************
  3854 ;; Defined at:
  3855 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  3856 ;; Parameters:    Size  Location     Type
  3857 ;;  sp              1    wreg     PTR unsigned char 
  3858 ;;		 -> get_temp@decimal(3), temp(6), 
  3859 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  3860 ;;		 -> STR_20(4), STR_19(5), STR_18(3), 
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  3863 ;;		 -> get_temp@decimal(3), temp(6), 
  3864 ;;  tmpval          4    0        struct .
  3865 ;;  val             2    9[BANK0 ] unsigned int 
  3866 ;;  cp              2    0        PTR const unsigned char 
  3867 ;;  len             2    0        unsigned int 
  3868 ;;  c               1   12[BANK0 ] unsigned char 
  3869 ;;  prec            1    8[BANK0 ] char 
  3870 ;;  flag            1    7[BANK0 ] unsigned char 
  3871 ;;  ap              1    6[BANK0 ] PTR void [1]
  3872 ;;		 -> ?_sprintf(2), 
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  2    0[BANK0 ] int 
  3875 ;; Registers used:
  3876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/0
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3882 ;;      Params:         0       3       0       0       0
  3883 ;;      Locals:         0       7       0       0       0
  3884 ;;      Temps:          0       3       0       0       0
  3885 ;;      Totals:         0      13       0       0       0
  3886 ;;Total ram usage:       13 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    1
  3889 ;; This function calls:
  3890 ;;		___lwdiv
  3891 ;;		___lwmod
  3892 ;; This function is called by:
  3893 ;;		_get_temp
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           
  3898                           ;psect for function _sprintf
  3899  042A                     _sprintf:	
  3900                           
  3901                           ;incstack = 0
  3902                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3903                           ;sprintf@sp stored from wreg
  3904  042A  1283               	bcf	3,5	;RP0=0, select bank0
  3905  042B  1303               	bcf	3,6	;RP1=0, select bank0
  3906  042C  00CC               	movwf	sprintf@sp
  3907                           
  3908                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  3909  042D  3042               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  3910  042E  00C4               	movwf	??_sprintf
  3911  042F  0844               	movf	??_sprintf,w
  3912  0430  00C7               	movwf	sprintf@ap
  3913  0431                     l2161:	
  3914                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  3915                           
  3916                           
  3917                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  3918  0431  3001               	movlw	1
  3919  0432  07C1               	addwf	sprintf@f,f
  3920  0433  30FF               	movlw	-1
  3921  0434  0741               	addwf	sprintf@f,w
  3922  0435  0084               	movwf	4
  3923  0436  120A  118A  200D  120A  118A  	fcall	stringdir
  3924  043B  00C4               	movwf	??_sprintf
  3925  043C  0844               	movf	??_sprintf,w
  3926  043D  00CD               	movwf	sprintf@c
  3927  043E  084D               	movf	sprintf@c,w
  3928  043F  1903               	btfsc	3,2
  3929  0440  2CFD               	goto	l2163
  3930                           
  3931                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  3932  0441  3025               	movlw	37
  3933  0442  064D               	xorwf	sprintf@c,w
  3934  0443  1903               	btfsc	3,2
  3935  0444  2C51               	goto	l2117
  3936                           
  3937                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  3938  0445  084D               	movf	sprintf@c,w
  3939  0446  00C4               	movwf	??_sprintf
  3940  0447  084C               	movf	sprintf@sp,w
  3941  0448  0084               	movwf	4
  3942  0449  0844               	movf	??_sprintf,w
  3943  044A  1383               	bcf	3,7	;select IRP bank0
  3944  044B  0080               	movwf	0
  3945  044C  3001               	movlw	1
  3946  044D  00C4               	movwf	??_sprintf
  3947  044E  0844               	movf	??_sprintf,w
  3948  044F  07CC               	addwf	sprintf@sp,f
  3949                           
  3950                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  3951  0450  2C31               	goto	l2161
  3952  0451                     l2117:	
  3953                           
  3954                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  3955  0451  01C8               	clrf	sprintf@flag
  3956                           
  3957                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  3958  0452  3001               	movlw	1
  3959  0453  07C1               	addwf	sprintf@f,f
  3960  0454  30FF               	movlw	-1
  3961  0455  0741               	addwf	sprintf@f,w
  3962  0456  0084               	movwf	4
  3963  0457  120A  118A  200D  120A  118A  	fcall	stringdir
  3964  045C  00CD               	movwf	sprintf@c
  3965  045D  00C4               	movwf	??_sprintf
  3966  045E  01C5               	clrf	??_sprintf+1
  3967                           
  3968                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3969                           ; Switch size 1, requested type "simple"
  3970                           ; Number of cases is 1, Range of values is 0 to 0
  3971                           ; switch strategies available:
  3972                           ; Name         Instructions Cycles
  3973                           ; simple_byte            4     3 (average)
  3974                           ; direct_byte           11     8 (fixed)
  3975                           ; jumptable            260     6 (fixed)
  3976                           ;	Chosen strategy is simple_byte
  3977  045F  0845               	movf	??_sprintf+1,w
  3978  0460  3A00               	xorlw	0	; case 0
  3979  0461  1903               	skipnz
  3980  0462  2C64               	goto	l2663
  3981  0463  2C31               	goto	l2161
  3982  0464                     l2663:	
  3983                           
  3984                           ; Switch size 1, requested type "simple"
  3985                           ; Number of cases is 3, Range of values is 0 to 105
  3986                           ; switch strategies available:
  3987                           ; Name         Instructions Cycles
  3988                           ; simple_byte           10     6 (average)
  3989                           ; jumptable            260     6 (fixed)
  3990                           ;	Chosen strategy is simple_byte
  3991  0464  0844               	movf	??_sprintf,w
  3992  0465  3A00               	xorlw	0	; case 0
  3993  0466  1903               	skipnz
  3994  0467  2CFD               	goto	l2163
  3995  0468  3A64               	xorlw	100	; case 100
  3996  0469  1903               	skipnz
  3997  046A  2C6F               	goto	l2123
  3998  046B  3A0D               	xorlw	13	; case 105
  3999  046C  1903               	skipnz
  4000  046D  2C6F               	goto	l2123
  4001  046E  2C31               	goto	l2161
  4002  046F                     l2123:	
  4003                           
  4004                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4005  046F  0847               	movf	sprintf@ap,w
  4006  0470  0084               	movwf	4
  4007  0471  1383               	bcf	3,7	;select IRP bank0
  4008  0472  0800               	movf	0,w
  4009  0473  00CA               	movwf	sprintf@val
  4010  0474  0A84               	incf	4,f
  4011  0475  0800               	movf	0,w
  4012  0476  00CB               	movwf	sprintf@val+1
  4013  0477  3002               	movlw	2
  4014  0478  00C4               	movwf	??_sprintf
  4015  0479  0844               	movf	??_sprintf,w
  4016  047A  07C7               	addwf	sprintf@ap,f
  4017                           
  4018                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  4019  047B  1FCB               	btfss	sprintf@val+1,7
  4020  047C  2C86               	goto	l2133
  4021                           
  4022                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  4023  047D  3003               	movlw	3
  4024  047E  00C4               	movwf	??_sprintf
  4025  047F  0844               	movf	??_sprintf,w
  4026  0480  04C8               	iorwf	sprintf@flag,f
  4027                           
  4028                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  4029  0481  09CA               	comf	sprintf@val,f
  4030  0482  09CB               	comf	sprintf@val+1,f
  4031  0483  0ACA               	incf	sprintf@val,f
  4032  0484  1903               	skipnz
  4033  0485  0ACB               	incf	sprintf@val+1,f
  4034  0486                     l2133:	
  4035                           
  4036                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4037  0486  01CD               	clrf	sprintf@c
  4038  0487  0ACD               	incf	sprintf@c,f
  4039  0488                     l2139:	
  4040                           
  4041                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  4042  0488  084D               	movf	sprintf@c,w
  4043  0489  00C4               	movwf	??_sprintf
  4044  048A  0744               	addwf	??_sprintf,w
  4045  048B  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4046  048C  0084               	movwf	4
  4047  048D  120A  118A  200D  120A  118A  	fcall	stringdir
  4048  0492  00C5               	movwf	??_sprintf+1
  4049  0493  120A  118A  200D  120A  118A  	fcall	stringdir
  4050  0498  00C6               	movwf	??_sprintf+2
  4051  0499  0846               	movf	??_sprintf+2,w
  4052  049A  024B               	subwf	sprintf@val+1,w
  4053  049B  1D03               	skipz
  4054  049C  2C9F               	goto	u1515
  4055  049D  0845               	movf	??_sprintf+1,w
  4056  049E  024A               	subwf	sprintf@val,w
  4057  049F                     u1515:	
  4058  049F  1C03               	btfss	3,0
  4059  04A0  2CA9               	goto	l2145
  4060  04A1  3001               	movlw	1
  4061  04A2  00C4               	movwf	??_sprintf
  4062  04A3  0844               	movf	??_sprintf,w
  4063  04A4  07CD               	addwf	sprintf@c,f
  4064  04A5  3005               	movlw	5
  4065  04A6  064D               	xorwf	sprintf@c,w
  4066  04A7  1D03               	btfss	3,2
  4067  04A8  2C88               	goto	l2139
  4068  04A9                     l2145:	
  4069                           
  4070                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  4071  04A9  0848               	movf	sprintf@flag,w
  4072  04AA  3903               	andlw	3
  4073  04AB  1903               	btfsc	3,2
  4074  04AC  2CB8               	goto	l2151
  4075                           
  4076                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  4077  04AD  302D               	movlw	45
  4078  04AE  00C4               	movwf	??_sprintf
  4079  04AF  084C               	movf	sprintf@sp,w
  4080  04B0  0084               	movwf	4
  4081  04B1  0844               	movf	??_sprintf,w
  4082  04B2  1383               	bcf	3,7	;select IRP bank0
  4083  04B3  0080               	movwf	0
  4084  04B4  3001               	movlw	1
  4085  04B5  00C4               	movwf	??_sprintf
  4086  04B6  0844               	movf	??_sprintf,w
  4087  04B7  07CC               	addwf	sprintf@sp,f
  4088  04B8                     l2151:	
  4089                           
  4090                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  4091  04B8  084D               	movf	sprintf@c,w
  4092  04B9  00C4               	movwf	??_sprintf
  4093  04BA  0844               	movf	??_sprintf,w
  4094  04BB  00C9               	movwf	sprintf@prec
  4095  04BC                     l2159:	
  4096                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  4097                           
  4098                           
  4099                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  4100  04BC  30FF               	movlw	255
  4101  04BD  00C4               	movwf	??_sprintf
  4102  04BE  0844               	movf	??_sprintf,w
  4103  04BF  07C9               	addwf	sprintf@prec,f
  4104  04C0  0A49               	incf	sprintf@prec,w
  4105  04C1  1903               	btfsc	3,2
  4106  04C2  2C31               	goto	l2161
  4107                           
  4108                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  4109  04C3  300A               	movlw	10
  4110  04C4  00F8               	movwf	___lwmod@divisor
  4111  04C5  3000               	movlw	0
  4112  04C6  00F9               	movwf	___lwmod@divisor+1
  4113  04C7  0849               	movf	sprintf@prec,w
  4114  04C8  00C4               	movwf	??_sprintf
  4115  04C9  0744               	addwf	??_sprintf,w
  4116  04CA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4117  04CB  0084               	movwf	4
  4118  04CC  120A  118A  200D  120A  118A  	fcall	stringdir
  4119  04D1  00F0               	movwf	___lwdiv@divisor
  4120  04D2  120A  118A  200D  120A  118A  	fcall	stringdir
  4121  04D7  00F1               	movwf	___lwdiv@divisor+1
  4122  04D8  084B               	movf	sprintf@val+1,w
  4123  04D9  00F3               	movwf	___lwdiv@dividend+1
  4124  04DA  084A               	movf	sprintf@val,w
  4125  04DB  00F2               	movwf	___lwdiv@dividend
  4126  04DC  120A  158A  26A6  120A  118A  	fcall	___lwdiv
  4127  04E1  0871               	movf	?___lwdiv+1,w
  4128  04E2  00FB               	movwf	___lwmod@dividend+1
  4129  04E3  0870               	movf	?___lwdiv,w
  4130  04E4  00FA               	movwf	___lwmod@dividend
  4131  04E5  120A  118A  20B6  120A  118A  	fcall	___lwmod
  4132  04EA  0878               	movf	?___lwmod,w
  4133  04EB  3E30               	addlw	48
  4134  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  4135  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  4136  04EE  00C5               	movwf	??_sprintf+1
  4137  04EF  0845               	movf	??_sprintf+1,w
  4138  04F0  00CD               	movwf	sprintf@c
  4139                           
  4140                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  4141  04F1  084D               	movf	sprintf@c,w
  4142  04F2  00C4               	movwf	??_sprintf
  4143  04F3  084C               	movf	sprintf@sp,w
  4144  04F4  0084               	movwf	4
  4145  04F5  0844               	movf	??_sprintf,w
  4146  04F6  1383               	bcf	3,7	;select IRP bank0
  4147  04F7  0080               	movwf	0
  4148  04F8  3001               	movlw	1
  4149  04F9  00C4               	movwf	??_sprintf
  4150  04FA  0844               	movf	??_sprintf,w
  4151  04FB  07CC               	addwf	sprintf@sp,f
  4152  04FC  2CBC               	goto	l2159
  4153  04FD                     l2163:	
  4154                           
  4155                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  4156  04FD  084C               	movf	sprintf@sp,w
  4157  04FE  0084               	movwf	4
  4158  04FF  1383               	bcf	3,7	;select IRP bank0
  4159  0500  0180               	clrf	0
  4160  0501  0008               	return
  4161  0502                     __end_of_sprintf:	
  4162                           
  4163                           	psect	text15
  4164  00B6                     __ptext15:	
  4165 ;; *************** function ___lwmod *****************
  4166 ;; Defined at:
  4167 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;  divisor         2    8[COMMON] unsigned int 
  4170 ;;  dividend        2   10[COMMON] unsigned int 
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;  counter         1   13[COMMON] unsigned char 
  4173 ;; Return value:  Size  Location     Type
  4174 ;;                  2    8[COMMON] unsigned int 
  4175 ;; Registers used:
  4176 ;;		wreg, status,2, status,0
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4182 ;;      Params:         4       0       0       0       0
  4183 ;;      Locals:         1       0       0       0       0
  4184 ;;      Temps:          1       0       0       0       0
  4185 ;;      Totals:         6       0       0       0       0
  4186 ;;Total ram usage:        6 bytes
  4187 ;; Hardware stack levels used:    1
  4188 ;; This function calls:
  4189 ;;		Nothing
  4190 ;; This function is called by:
  4191 ;;		_sprintf
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           
  4196                           ;psect for function ___lwmod
  4197  00B6                     ___lwmod:	
  4198                           
  4199                           ;incstack = 0
  4200                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4201  00B6  0878               	movf	___lwmod@divisor,w
  4202  00B7  0479               	iorwf	___lwmod@divisor+1,w
  4203  00B8  1903               	btfsc	3,2
  4204  00B9  28E3               	goto	l1977
  4205  00BA  01FD               	clrf	___lwmod@counter
  4206  00BB  0AFD               	incf	___lwmod@counter,f
  4207  00BC                     l1967:	
  4208  00BC  1BF9               	btfsc	___lwmod@divisor+1,7
  4209  00BD  28CA               	goto	l1969
  4210  00BE  3001               	movlw	1
  4211  00BF                     u1335:	
  4212  00BF  1003               	clrc
  4213  00C0  0DF8               	rlf	___lwmod@divisor,f
  4214  00C1  0DF9               	rlf	___lwmod@divisor+1,f
  4215  00C2  3EFF               	addlw	-1
  4216  00C3  1D03               	skipz
  4217  00C4  28BF               	goto	u1335
  4218  00C5  3001               	movlw	1
  4219  00C6  00FC               	movwf	??___lwmod
  4220  00C7  087C               	movf	??___lwmod,w
  4221  00C8  07FD               	addwf	___lwmod@counter,f
  4222  00C9  28BC               	goto	l1967
  4223  00CA                     l1969:	
  4224  00CA  0879               	movf	___lwmod@divisor+1,w
  4225  00CB  027B               	subwf	___lwmod@dividend+1,w
  4226  00CC  1D03               	skipz
  4227  00CD  28D0               	goto	u1355
  4228  00CE  0878               	movf	___lwmod@divisor,w
  4229  00CF  027A               	subwf	___lwmod@dividend,w
  4230  00D0                     u1355:	
  4231  00D0  1C03               	skipc
  4232  00D1  28D8               	goto	l1973
  4233  00D2  0878               	movf	___lwmod@divisor,w
  4234  00D3  02FA               	subwf	___lwmod@dividend,f
  4235  00D4  0879               	movf	___lwmod@divisor+1,w
  4236  00D5  1C03               	skipc
  4237  00D6  03FB               	decf	___lwmod@dividend+1,f
  4238  00D7  02FB               	subwf	___lwmod@dividend+1,f
  4239  00D8                     l1973:	
  4240  00D8  3001               	movlw	1
  4241  00D9                     u1365:	
  4242  00D9  1003               	clrc
  4243  00DA  0CF9               	rrf	___lwmod@divisor+1,f
  4244  00DB  0CF8               	rrf	___lwmod@divisor,f
  4245  00DC  3EFF               	addlw	-1
  4246  00DD  1D03               	skipz
  4247  00DE  28D9               	goto	u1365
  4248  00DF  3001               	movlw	1
  4249  00E0  02FD               	subwf	___lwmod@counter,f
  4250  00E1  1D03               	btfss	3,2
  4251  00E2  28CA               	goto	l1969
  4252  00E3                     l1977:	
  4253  00E3  087B               	movf	___lwmod@dividend+1,w
  4254  00E4  00F9               	movwf	?___lwmod+1
  4255  00E5  087A               	movf	___lwmod@dividend,w
  4256  00E6  00F8               	movwf	?___lwmod
  4257  00E7  0008               	return
  4258  00E8                     __end_of___lwmod:	
  4259                           
  4260                           	psect	text16
  4261  0EA6                     __ptext16:	
  4262 ;; *************** function ___lwdiv *****************
  4263 ;; Defined at:
  4264 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;  divisor         2    0[COMMON] unsigned int 
  4267 ;;  dividend        2    2[COMMON] unsigned int 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;  quotient        2    5[COMMON] unsigned int 
  4270 ;;  counter         1    7[COMMON] unsigned char 
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  2    0[COMMON] unsigned int 
  4273 ;; Registers used:
  4274 ;;		wreg, status,2, status,0
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4280 ;;      Params:         4       0       0       0       0
  4281 ;;      Locals:         3       0       0       0       0
  4282 ;;      Temps:          1       0       0       0       0
  4283 ;;      Totals:         8       0       0       0       0
  4284 ;;Total ram usage:        8 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; This function calls:
  4287 ;;		Nothing
  4288 ;; This function is called by:
  4289 ;;		_sprintf
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           
  4294                           ;psect for function ___lwdiv
  4295  0EA6                     ___lwdiv:	
  4296                           
  4297                           ;incstack = 0
  4298                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4299  0EA6  01F5               	clrf	___lwdiv@quotient
  4300  0EA7  01F6               	clrf	___lwdiv@quotient+1
  4301  0EA8  0870               	movf	___lwdiv@divisor,w
  4302  0EA9  0471               	iorwf	___lwdiv@divisor+1,w
  4303  0EAA  1903               	btfsc	3,2
  4304  0EAB  2EDD               	goto	l1955
  4305  0EAC  01F7               	clrf	___lwdiv@counter
  4306  0EAD  0AF7               	incf	___lwdiv@counter,f
  4307  0EAE                     l1943:	
  4308  0EAE  1BF1               	btfsc	___lwdiv@divisor+1,7
  4309  0EAF  2EBC               	goto	l1945
  4310  0EB0  3001               	movlw	1
  4311  0EB1                     u1265:	
  4312  0EB1  1003               	clrc
  4313  0EB2  0DF0               	rlf	___lwdiv@divisor,f
  4314  0EB3  0DF1               	rlf	___lwdiv@divisor+1,f
  4315  0EB4  3EFF               	addlw	-1
  4316  0EB5  1D03               	skipz
  4317  0EB6  2EB1               	goto	u1265
  4318  0EB7  3001               	movlw	1
  4319  0EB8  00F4               	movwf	??___lwdiv
  4320  0EB9  0874               	movf	??___lwdiv,w
  4321  0EBA  07F7               	addwf	___lwdiv@counter,f
  4322  0EBB  2EAE               	goto	l1943
  4323  0EBC                     l1945:	
  4324  0EBC  3001               	movlw	1
  4325  0EBD                     u1285:	
  4326  0EBD  1003               	clrc
  4327  0EBE  0DF5               	rlf	___lwdiv@quotient,f
  4328  0EBF  0DF6               	rlf	___lwdiv@quotient+1,f
  4329  0EC0  3EFF               	addlw	-1
  4330  0EC1  1D03               	skipz
  4331  0EC2  2EBD               	goto	u1285
  4332  0EC3  0871               	movf	___lwdiv@divisor+1,w
  4333  0EC4  0273               	subwf	___lwdiv@dividend+1,w
  4334  0EC5  1D03               	skipz
  4335  0EC6  2EC9               	goto	u1295
  4336  0EC7  0870               	movf	___lwdiv@divisor,w
  4337  0EC8  0272               	subwf	___lwdiv@dividend,w
  4338  0EC9                     u1295:	
  4339  0EC9  1C03               	skipc
  4340  0ECA  2ED2               	goto	l1951
  4341  0ECB  0870               	movf	___lwdiv@divisor,w
  4342  0ECC  02F2               	subwf	___lwdiv@dividend,f
  4343  0ECD  0871               	movf	___lwdiv@divisor+1,w
  4344  0ECE  1C03               	skipc
  4345  0ECF  03F3               	decf	___lwdiv@dividend+1,f
  4346  0ED0  02F3               	subwf	___lwdiv@dividend+1,f
  4347  0ED1  1475               	bsf	___lwdiv@quotient,0
  4348  0ED2                     l1951:	
  4349  0ED2  3001               	movlw	1
  4350  0ED3                     u1305:	
  4351  0ED3  1003               	clrc
  4352  0ED4  0CF1               	rrf	___lwdiv@divisor+1,f
  4353  0ED5  0CF0               	rrf	___lwdiv@divisor,f
  4354  0ED6  3EFF               	addlw	-1
  4355  0ED7  1D03               	skipz
  4356  0ED8  2ED3               	goto	u1305
  4357  0ED9  3001               	movlw	1
  4358  0EDA  02F7               	subwf	___lwdiv@counter,f
  4359  0EDB  1D03               	btfss	3,2
  4360  0EDC  2EBC               	goto	l1945
  4361  0EDD                     l1955:	
  4362  0EDD  0876               	movf	___lwdiv@quotient+1,w
  4363  0EDE  00F1               	movwf	?___lwdiv+1
  4364  0EDF  0875               	movf	___lwdiv@quotient,w
  4365  0EE0  00F0               	movwf	?___lwdiv
  4366  0EE1  0008               	return
  4367  0EE2                     __end_of___lwdiv:	
  4368                           
  4369                           	psect	text17
  4370  0C90                     __ptext17:	
  4371 ;; *************** function ___bmul *****************
  4372 ;; Defined at:
  4373 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  4374 ;; Parameters:    Size  Location     Type
  4375 ;;  multiplier      1    wreg     unsigned char 
  4376 ;;  multiplicand    1    0[COMMON] unsigned char 
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;  multiplier      1    3[COMMON] unsigned char 
  4379 ;;  product         1    2[COMMON] unsigned char 
  4380 ;; Return value:  Size  Location     Type
  4381 ;;                  1    wreg      unsigned char 
  4382 ;; Registers used:
  4383 ;;		wreg, status,2, status,0
  4384 ;; Tracked objects:
  4385 ;;		On entry : 0/0
  4386 ;;		On exit  : 0/0
  4387 ;;		Unchanged: 0/0
  4388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4389 ;;      Params:         1       0       0       0       0
  4390 ;;      Locals:         2       0       0       0       0
  4391 ;;      Temps:          1       0       0       0       0
  4392 ;;      Totals:         4       0       0       0       0
  4393 ;;Total ram usage:        4 bytes
  4394 ;; Hardware stack levels used:    1
  4395 ;; This function calls:
  4396 ;;		Nothing
  4397 ;; This function is called by:
  4398 ;;		_get_temp
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           
  4403                           ;psect for function ___bmul
  4404  0C90                     ___bmul:	
  4405                           
  4406                           ;incstack = 0
  4407                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4408                           ;___bmul@multiplier stored from wreg
  4409  0C90  00F3               	movwf	___bmul@multiplier
  4410  0C91  01F2               	clrf	___bmul@product
  4411  0C92                     l2183:	
  4412  0C92  1C73               	btfss	___bmul@multiplier,0
  4413  0C93  2C98               	goto	l2187
  4414  0C94  0870               	movf	___bmul@multiplicand,w
  4415  0C95  00F1               	movwf	??___bmul
  4416  0C96  0871               	movf	??___bmul,w
  4417  0C97  07F2               	addwf	___bmul@product,f
  4418  0C98                     l2187:	
  4419  0C98  1003               	clrc
  4420  0C99  0DF0               	rlf	___bmul@multiplicand,f
  4421  0C9A  1003               	clrc
  4422  0C9B  0CF3               	rrf	___bmul@multiplier,f
  4423  0C9C  0873               	movf	___bmul@multiplier,w
  4424  0C9D  1D03               	btfss	3,2
  4425  0C9E  2C92               	goto	l2183
  4426  0C9F  0872               	movf	___bmul@product,w
  4427  0CA0  0008               	return
  4428  0CA1                     __end_of___bmul:	
  4429                           
  4430                           	psect	text18
  4431  0D49                     __ptext18:	
  4432 ;; *************** function _get_hall *****************
  4433 ;; Defined at:
  4434 ;;		line 370 in file "mainMaster.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;		None
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  key             1    7[COMMON] unsigned char 
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      unsigned char 
  4441 ;; Registers used:
  4442 ;;		wreg, status,2, status,0, pclath, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4448 ;;      Params:         0       0       0       0       0
  4449 ;;      Locals:         1       0       0       0       0
  4450 ;;      Temps:          1       0       0       0       0
  4451 ;;      Totals:         2       0       0       0       0
  4452 ;;Total ram usage:        2 bytes
  4453 ;; Hardware stack levels used:    1
  4454 ;; Hardware stack levels required when called:    2
  4455 ;; This function calls:
  4456 ;;		_I2C_Master_Read
  4457 ;;		_I2C_Master_Start
  4458 ;;		_I2C_Master_Stop
  4459 ;;		_I2C_Master_Write
  4460 ;; This function is called by:
  4461 ;;		_main
  4462 ;; This function uses a non-reentrant model
  4463 ;;
  4464                           
  4465                           
  4466                           ;psect for function _get_hall
  4467  0D49                     _get_hall:	
  4468                           
  4469                           ;mainMaster.c: 372:     char key;;mainMaster.c: 374:     I2C_Master_Start();
  4470                           
  4471                           ;incstack = 0
  4472                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  4473  0D49  120A  158A  244D  120A  158A  	fcall	_I2C_Master_Start
  4474                           
  4475                           ;mainMaster.c: 375:     I2C_Master_Write(0x11);
  4476  0D4E  3011               	movlw	17
  4477  0D4F  00F0               	movwf	I2C_Master_Write@d
  4478  0D50  3000               	movlw	0
  4479  0D51  00F1               	movwf	I2C_Master_Write@d+1
  4480  0D52  120A  158A  2462  120A  158A  	fcall	_I2C_Master_Write
  4481                           
  4482                           ;mainMaster.c: 376:     key = I2C_Master_Read(0);
  4483  0D57  3000               	movlw	0
  4484  0D58  00F0               	movwf	I2C_Master_Read@a
  4485  0D59  00F1               	movwf	I2C_Master_Read@a+1
  4486  0D5A  120A  158A  25D5  120A  158A  	fcall	_I2C_Master_Read
  4487  0D5F  0870               	movf	?_I2C_Master_Read,w
  4488  0D60  00F6               	movwf	??_get_hall
  4489  0D61  0876               	movf	??_get_hall,w
  4490  0D62  00F7               	movwf	get_hall@key
  4491                           
  4492                           ;mainMaster.c: 377:     I2C_Master_Stop();
  4493  0D63  120A  158A  2454   	fcall	_I2C_Master_Stop
  4494                           
  4495                           ;mainMaster.c: 379:     return (key);
  4496  0D66  0877               	movf	get_hall@key,w
  4497  0D67  0008               	return
  4498  0D68                     __end_of_get_hall:	
  4499                           
  4500                           	psect	text19
  4501  0E01                     __ptext19:	
  4502 ;; *************** function _get_day *****************
  4503 ;; Defined at:
  4504 ;;		line 328 in file "mainMaster.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;		None
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;  d               1    7[COMMON] unsigned char 
  4509 ;; Return value:  Size  Location     Type
  4510 ;;                  1    wreg      unsigned char 
  4511 ;; Registers used:
  4512 ;;		wreg, status,2, status,0, pclath, cstack
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4518 ;;      Params:         0       0       0       0       0
  4519 ;;      Locals:         1       0       0       0       0
  4520 ;;      Temps:          1       0       0       0       0
  4521 ;;      Totals:         2       0       0       0       0
  4522 ;;Total ram usage:        2 bytes
  4523 ;; Hardware stack levels used:    1
  4524 ;; Hardware stack levels required when called:    2
  4525 ;; This function calls:
  4526 ;;		_I2C_Master_Read
  4527 ;;		_I2C_Master_RepeatedStart
  4528 ;;		_I2C_Master_Start
  4529 ;;		_I2C_Master_Stop
  4530 ;;		_I2C_Master_Write
  4531 ;; This function is called by:
  4532 ;;		_main
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           
  4537                           ;psect for function _get_day
  4538  0E01                     _get_day:	
  4539                           
  4540                           ;mainMaster.c: 330:     char d;;mainMaster.c: 332:     I2C_Master_Start();
  4541                           
  4542                           ;incstack = 0
  4543                           ; Regs used in _get_day: [wreg+status,2+status,0+pclath+cstack]
  4544  0E01  120A  158A  244D  120A  158A  	fcall	_I2C_Master_Start
  4545                           
  4546                           ;mainMaster.c: 333:     I2C_Master_Write(0xD0);
  4547  0E06  30D0               	movlw	208
  4548  0E07  00F0               	movwf	I2C_Master_Write@d
  4549  0E08  3000               	movlw	0
  4550  0E09  00F1               	movwf	I2C_Master_Write@d+1
  4551  0E0A  120A  158A  2462  120A  158A  	fcall	_I2C_Master_Write
  4552                           
  4553                           ;mainMaster.c: 334:     I2C_Master_Write(0x03);
  4554  0E0F  3003               	movlw	3
  4555  0E10  00F0               	movwf	I2C_Master_Write@d
  4556  0E11  3000               	movlw	0
  4557  0E12  00F1               	movwf	I2C_Master_Write@d+1
  4558  0E13  120A  158A  2462  120A  158A  	fcall	_I2C_Master_Write
  4559                           
  4560                           ;mainMaster.c: 335:     I2C_Master_RepeatedStart();
  4561  0E18  120A  158A  245B  120A  158A  	fcall	_I2C_Master_RepeatedStart
  4562                           
  4563                           ;mainMaster.c: 336:     I2C_Master_Write(0xD1);
  4564  0E1D  30D1               	movlw	209
  4565  0E1E  00F0               	movwf	I2C_Master_Write@d
  4566  0E1F  3000               	movlw	0
  4567  0E20  00F1               	movwf	I2C_Master_Write@d+1
  4568  0E21  120A  158A  2462  120A  158A  	fcall	_I2C_Master_Write
  4569                           
  4570                           ;mainMaster.c: 337:     d = I2C_Master_Read(0);
  4571  0E26  3000               	movlw	0
  4572  0E27  00F0               	movwf	I2C_Master_Read@a
  4573  0E28  00F1               	movwf	I2C_Master_Read@a+1
  4574  0E29  120A  158A  25D5  120A  158A  	fcall	_I2C_Master_Read
  4575  0E2E  0870               	movf	?_I2C_Master_Read,w
  4576  0E2F  00F6               	movwf	??_get_day
  4577  0E30  0876               	movf	??_get_day,w
  4578  0E31  00F7               	movwf	get_day@d
  4579                           
  4580                           ;mainMaster.c: 338:     I2C_Master_Stop();
  4581  0E32  120A  158A  2454   	fcall	_I2C_Master_Stop
  4582                           
  4583                           ;mainMaster.c: 340:     return d;
  4584  0E35  0877               	movf	get_day@d,w
  4585  0E36  0008               	return
  4586  0E37                     __end_of_get_day:	
  4587                           
  4588                           	psect	text20
  4589  0C5B                     __ptext20:	
  4590 ;; *************** function _I2C_Master_RepeatedStart *****************
  4591 ;; Defined at:
  4592 ;;		line 47 in file "./I2C.h"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;		None
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;		None
  4597 ;; Return value:  Size  Location     Type
  4598 ;;                  1    wreg      void 
  4599 ;; Registers used:
  4600 ;;		wreg, status,2, status,0, pclath, cstack
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4606 ;;      Params:         0       0       0       0       0
  4607 ;;      Locals:         0       0       0       0       0
  4608 ;;      Temps:          0       0       0       0       0
  4609 ;;      Totals:         0       0       0       0       0
  4610 ;;Total ram usage:        0 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; Hardware stack levels required when called:    1
  4613 ;; This function calls:
  4614 ;;		_I2C_Master_Wait
  4615 ;; This function is called by:
  4616 ;;		_get_time
  4617 ;;		_get_day
  4618 ;;		_get_temp
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           
  4623                           ;psect for function _I2C_Master_RepeatedStart
  4624  0C5B                     _I2C_Master_RepeatedStart:	
  4625                           
  4626                           ;./I2C.h: 49:     I2C_Master_Wait();
  4627                           
  4628                           ;incstack = 0
  4629                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  4630  0C5B  120A  158A  2472   	fcall	_I2C_Master_Wait
  4631                           
  4632                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  4633  0C5E  1683               	bsf	3,5	;RP0=1, select bank1
  4634  0C5F  1303               	bcf	3,6	;RP1=0, select bank1
  4635  0C60  1491               	bsf	17,1	;volatile
  4636  0C61  0008               	return
  4637  0C62                     __end_of_I2C_Master_RepeatedStart:	
  4638                           
  4639                           	psect	text21
  4640  0D2A                     __ptext21:	
  4641 ;; *************** function _get_PIR *****************
  4642 ;; Defined at:
  4643 ;;		line 394 in file "mainMaster.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;  PIR             1    7[COMMON] unsigned char 
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      unsigned char 
  4650 ;; Registers used:
  4651 ;;		wreg, status,2, status,0, pclath, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4657 ;;      Params:         0       0       0       0       0
  4658 ;;      Locals:         1       0       0       0       0
  4659 ;;      Temps:          1       0       0       0       0
  4660 ;;      Totals:         2       0       0       0       0
  4661 ;;Total ram usage:        2 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    2
  4664 ;; This function calls:
  4665 ;;		_I2C_Master_Read
  4666 ;;		_I2C_Master_Start
  4667 ;;		_I2C_Master_Stop
  4668 ;;		_I2C_Master_Write
  4669 ;; This function is called by:
  4670 ;;		_main
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           
  4675                           ;psect for function _get_PIR
  4676  0D2A                     _get_PIR:	
  4677                           
  4678                           ;mainMaster.c: 396:     char PIR;;mainMaster.c: 398:     I2C_Master_Start();
  4679                           
  4680                           ;incstack = 0
  4681                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  4682  0D2A  120A  158A  244D  120A  158A  	fcall	_I2C_Master_Start
  4683                           
  4684                           ;mainMaster.c: 399:     I2C_Master_Write(0x41);
  4685  0D2F  3041               	movlw	65
  4686  0D30  00F0               	movwf	I2C_Master_Write@d
  4687  0D31  3000               	movlw	0
  4688  0D32  00F1               	movwf	I2C_Master_Write@d+1
  4689  0D33  120A  158A  2462  120A  158A  	fcall	_I2C_Master_Write
  4690                           
  4691                           ;mainMaster.c: 400:     PIR = I2C_Master_Read(0);
  4692  0D38  3000               	movlw	0
  4693  0D39  00F0               	movwf	I2C_Master_Read@a
  4694  0D3A  00F1               	movwf	I2C_Master_Read@a+1
  4695  0D3B  120A  158A  25D5  120A  158A  	fcall	_I2C_Master_Read
  4696  0D40  0870               	movf	?_I2C_Master_Read,w
  4697  0D41  00F6               	movwf	??_get_PIR
  4698  0D42  0876               	movf	??_get_PIR,w
  4699  0D43  00F7               	movwf	get_PIR@PIR
  4700                           
  4701                           ;mainMaster.c: 401:     I2C_Master_Stop();
  4702  0D44  120A  158A  2454   	fcall	_I2C_Master_Stop
  4703                           
  4704                           ;mainMaster.c: 403:     return (PIR);
  4705  0D47  0877               	movf	get_PIR@PIR,w
  4706  0D48  0008               	return
  4707  0D49                     __end_of_get_PIR:	
  4708                           
  4709                           	psect	text22
  4710  0D0B                     __ptext22:	
  4711 ;; *************** function _get_IR *****************
  4712 ;; Defined at:
  4713 ;;		line 406 in file "mainMaster.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;		None
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;  IR              1    7[COMMON] unsigned char 
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  1    wreg      unsigned char 
  4720 ;; Registers used:
  4721 ;;		wreg, status,2, status,0, pclath, cstack
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4727 ;;      Params:         0       0       0       0       0
  4728 ;;      Locals:         1       0       0       0       0
  4729 ;;      Temps:          1       0       0       0       0
  4730 ;;      Totals:         2       0       0       0       0
  4731 ;;Total ram usage:        2 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:    2
  4734 ;; This function calls:
  4735 ;;		_I2C_Master_Read
  4736 ;;		_I2C_Master_Start
  4737 ;;		_I2C_Master_Stop
  4738 ;;		_I2C_Master_Write
  4739 ;; This function is called by:
  4740 ;;		_main
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           
  4745                           ;psect for function _get_IR
  4746  0D0B                     _get_IR:	
  4747                           
  4748                           ;mainMaster.c: 408:     char IR;;mainMaster.c: 410:     I2C_Master_Start();
  4749                           
  4750                           ;incstack = 0
  4751                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  4752  0D0B  120A  158A  244D  120A  158A  	fcall	_I2C_Master_Start
  4753                           
  4754                           ;mainMaster.c: 411:     I2C_Master_Write(0x31);
  4755  0D10  3031               	movlw	49
  4756  0D11  00F0               	movwf	I2C_Master_Write@d
  4757  0D12  3000               	movlw	0
  4758  0D13  00F1               	movwf	I2C_Master_Write@d+1
  4759  0D14  120A  158A  2462  120A  158A  	fcall	_I2C_Master_Write
  4760                           
  4761                           ;mainMaster.c: 412:     IR = I2C_Master_Read(0);
  4762  0D19  3000               	movlw	0
  4763  0D1A  00F0               	movwf	I2C_Master_Read@a
  4764  0D1B  00F1               	movwf	I2C_Master_Read@a+1
  4765  0D1C  120A  158A  25D5  120A  158A  	fcall	_I2C_Master_Read
  4766  0D21  0870               	movf	?_I2C_Master_Read,w
  4767  0D22  00F6               	movwf	??_get_IR
  4768  0D23  0876               	movf	??_get_IR,w
  4769  0D24  00F7               	movwf	get_IR@IR
  4770                           
  4771                           ;mainMaster.c: 413:     I2C_Master_Stop();
  4772  0D25  120A  158A  2454   	fcall	_I2C_Master_Stop
  4773                           
  4774                           ;mainMaster.c: 415:     return (IR);
  4775  0D28  0877               	movf	get_IR@IR,w
  4776  0D29  0008               	return
  4777  0D2A                     __end_of_get_IR:	
  4778                           
  4779                           	psect	text23
  4780  0DD5                     __ptext23:	
  4781 ;; *************** function _I2C_Master_Read *****************
  4782 ;; Defined at:
  4783 ;;		line 74 in file "./I2C.h"
  4784 ;; Parameters:    Size  Location     Type
  4785 ;;  a               2    0[COMMON] unsigned short 
  4786 ;; Auto vars:     Size  Location     Type
  4787 ;;  temp            2    4[COMMON] unsigned short 
  4788 ;; Return value:  Size  Location     Type
  4789 ;;                  2    0[COMMON] unsigned short 
  4790 ;; Registers used:
  4791 ;;		wreg, status,2, status,0, pclath, cstack
  4792 ;; Tracked objects:
  4793 ;;		On entry : 0/0
  4794 ;;		On exit  : 0/0
  4795 ;;		Unchanged: 0/0
  4796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4797 ;;      Params:         2       0       0       0       0
  4798 ;;      Locals:         2       0       0       0       0
  4799 ;;      Temps:          2       0       0       0       0
  4800 ;;      Totals:         6       0       0       0       0
  4801 ;;Total ram usage:        6 bytes
  4802 ;; Hardware stack levels used:    1
  4803 ;; Hardware stack levels required when called:    1
  4804 ;; This function calls:
  4805 ;;		_I2C_Master_Wait
  4806 ;; This function is called by:
  4807 ;;		_get_time
  4808 ;;		_get_day
  4809 ;;		_get_temp
  4810 ;;		_get_hall
  4811 ;;		_get_tripwire
  4812 ;;		_get_PIR
  4813 ;;		_get_IR
  4814 ;; This function uses a non-reentrant model
  4815 ;;
  4816                           
  4817                           
  4818                           ;psect for function _I2C_Master_Read
  4819  0DD5                     _I2C_Master_Read:	
  4820                           
  4821                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  4822                           
  4823                           ;incstack = 0
  4824                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  4825  0DD5  120A  158A  2472  120A  158A  	fcall	_I2C_Master_Wait
  4826                           
  4827                           ;./I2C.h: 78:     RCEN = 1;
  4828  0DDA  1683               	bsf	3,5	;RP0=1, select bank1
  4829  0DDB  1303               	bcf	3,6	;RP1=0, select bank1
  4830  0DDC  1591               	bsf	17,3	;volatile
  4831                           
  4832                           ;./I2C.h: 79:     I2C_Master_Wait();
  4833  0DDD  120A  158A  2472  120A  158A  	fcall	_I2C_Master_Wait
  4834                           
  4835                           ;./I2C.h: 80:     temp = SSPBUF;
  4836  0DE2  1283               	bcf	3,5	;RP0=0, select bank0
  4837  0DE3  1303               	bcf	3,6	;RP1=0, select bank0
  4838  0DE4  0813               	movf	19,w	;volatile
  4839  0DE5  00F2               	movwf	??_I2C_Master_Read
  4840  0DE6  01F3               	clrf	??_I2C_Master_Read+1
  4841  0DE7  0872               	movf	??_I2C_Master_Read,w
  4842  0DE8  00F4               	movwf	I2C_Master_Read@temp
  4843  0DE9  0873               	movf	??_I2C_Master_Read+1,w
  4844  0DEA  00F5               	movwf	I2C_Master_Read@temp+1
  4845                           
  4846                           ;./I2C.h: 81:     I2C_Master_Wait();
  4847  0DEB  120A  158A  2472  120A  158A  	fcall	_I2C_Master_Wait
  4848                           
  4849                           ;./I2C.h: 83:     if(a == 1){
  4850  0DF0  0370               	decf	I2C_Master_Read@a,w
  4851  0DF1  0471               	iorwf	I2C_Master_Read@a+1,w
  4852  0DF2  1D03               	btfss	3,2
  4853  0DF3  2DF8               	goto	l136
  4854                           
  4855                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  4856  0DF4  1683               	bsf	3,5	;RP0=1, select bank1
  4857  0DF5  1303               	bcf	3,6	;RP1=0, select bank1
  4858  0DF6  1291               	bcf	17,5	;volatile
  4859                           
  4860                           ;./I2C.h: 85:     }else{
  4861  0DF7  2DFB               	goto	l137
  4862  0DF8                     l136:	
  4863                           
  4864                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  4865  0DF8  1683               	bsf	3,5	;RP0=1, select bank1
  4866  0DF9  1303               	bcf	3,6	;RP1=0, select bank1
  4867  0DFA  1691               	bsf	17,5	;volatile
  4868  0DFB                     l137:	
  4869                           ;./I2C.h: 87:     }
  4870                           
  4871                           
  4872                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  4873  0DFB  1611               	bsf	17,4	;volatile
  4874                           
  4875                           ;./I2C.h: 89:     return temp;
  4876  0DFC  0875               	movf	I2C_Master_Read@temp+1,w
  4877  0DFD  00F1               	movwf	?_I2C_Master_Read+1
  4878  0DFE  0874               	movf	I2C_Master_Read@temp,w
  4879  0DFF  00F0               	movwf	?_I2C_Master_Read
  4880  0E00  0008               	return
  4881  0E01                     __end_of_I2C_Master_Read:	
  4882                           
  4883                           	psect	text24
  4884  0CD5                     __ptext24:	
  4885 ;; *************** function _close_door *****************
  4886 ;; Defined at:
  4887 ;;		line 427 in file "mainMaster.c"
  4888 ;; Parameters:    Size  Location     Type
  4889 ;;		None
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;		None
  4892 ;; Return value:  Size  Location     Type
  4893 ;;                  1    wreg      void 
  4894 ;; Registers used:
  4895 ;;		wreg, status,2, status,0, pclath, cstack
  4896 ;; Tracked objects:
  4897 ;;		On entry : 0/0
  4898 ;;		On exit  : 0/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4901 ;;      Params:         0       0       0       0       0
  4902 ;;      Locals:         0       0       0       0       0
  4903 ;;      Temps:          0       0       0       0       0
  4904 ;;      Totals:         0       0       0       0       0
  4905 ;;Total ram usage:        0 bytes
  4906 ;; Hardware stack levels used:    1
  4907 ;; Hardware stack levels required when called:    2
  4908 ;; This function calls:
  4909 ;;		_I2C_Master_Start
  4910 ;;		_I2C_Master_Stop
  4911 ;;		_I2C_Master_Write
  4912 ;; This function is called by:
  4913 ;;		_main
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           
  4918                           ;psect for function _close_door
  4919  0CD5                     _close_door:	
  4920                           
  4921                           ;mainMaster.c: 429:     I2C_Master_Start();
  4922                           
  4923                           ;incstack = 0
  4924                           ; Regs used in _close_door: [wreg+status,2+status,0+pclath+cstack]
  4925  0CD5  120A  158A  244D  120A  158A  	fcall	_I2C_Master_Start
  4926                           
  4927                           ;mainMaster.c: 430:     I2C_Master_Write(0x20);
  4928  0CDA  3020               	movlw	32
  4929  0CDB  00F0               	movwf	I2C_Master_Write@d
  4930  0CDC  3000               	movlw	0
  4931  0CDD  00F1               	movwf	I2C_Master_Write@d+1
  4932  0CDE  120A  158A  2462  120A  158A  	fcall	_I2C_Master_Write
  4933                           
  4934                           ;mainMaster.c: 431:     I2C_Master_Write(0xF0);
  4935  0CE3  30F0               	movlw	240
  4936  0CE4  00F0               	movwf	I2C_Master_Write@d
  4937  0CE5  3000               	movlw	0
  4938  0CE6  00F1               	movwf	I2C_Master_Write@d+1
  4939  0CE7  120A  158A  2462  120A  158A  	fcall	_I2C_Master_Write
  4940                           
  4941                           ;mainMaster.c: 432:     I2C_Master_Stop();
  4942  0CEC  120A  158A  2454   	fcall	_I2C_Master_Stop
  4943  0CEF  0008               	return
  4944  0CF0                     __end_of_close_door:	
  4945                           
  4946                           	psect	text25
  4947  0C62                     __ptext25:	
  4948 ;; *************** function _I2C_Master_Write *****************
  4949 ;; Defined at:
  4950 ;;		line 65 in file "./I2C.h"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;  d               2    0[COMMON] unsigned int 
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;		None
  4955 ;; Return value:  Size  Location     Type
  4956 ;;                  1    wreg      void 
  4957 ;; Registers used:
  4958 ;;		wreg, status,2, status,0, pclath, cstack
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4964 ;;      Params:         2       0       0       0       0
  4965 ;;      Locals:         0       0       0       0       0
  4966 ;;      Temps:          0       0       0       0       0
  4967 ;;      Totals:         2       0       0       0       0
  4968 ;;Total ram usage:        2 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; Hardware stack levels required when called:    1
  4971 ;; This function calls:
  4972 ;;		_I2C_Master_Wait
  4973 ;; This function is called by:
  4974 ;;		_get_time
  4975 ;;		_get_day
  4976 ;;		_get_temp
  4977 ;;		_get_hall
  4978 ;;		_get_tripwire
  4979 ;;		_get_PIR
  4980 ;;		_get_IR
  4981 ;;		_open_door
  4982 ;;		_close_door
  4983 ;;		_write_RTC
  4984 ;; This function uses a non-reentrant model
  4985 ;;
  4986                           
  4987                           
  4988                           ;psect for function _I2C_Master_Write
  4989  0C62                     _I2C_Master_Write:	
  4990                           
  4991                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  4992                           
  4993                           ;incstack = 0
  4994                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  4995  0C62  120A  158A  2472   	fcall	_I2C_Master_Wait
  4996                           
  4997                           ;./I2C.h: 68:     SSPBUF = d;
  4998  0C65  0870               	movf	I2C_Master_Write@d,w
  4999  0C66  1283               	bcf	3,5	;RP0=0, select bank0
  5000  0C67  1303               	bcf	3,6	;RP1=0, select bank0
  5001  0C68  0093               	movwf	19	;volatile
  5002  0C69  0008               	return
  5003  0C6A                     __end_of_I2C_Master_Write:	
  5004                           
  5005                           	psect	text26
  5006  0C54                     __ptext26:	
  5007 ;; *************** function _I2C_Master_Stop *****************
  5008 ;; Defined at:
  5009 ;;		line 55 in file "./I2C.h"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;		None
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;		None
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  1    wreg      void 
  5016 ;; Registers used:
  5017 ;;		wreg, status,2, status,0, pclath, cstack
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5023 ;;      Params:         0       0       0       0       0
  5024 ;;      Locals:         0       0       0       0       0
  5025 ;;      Temps:          0       0       0       0       0
  5026 ;;      Totals:         0       0       0       0       0
  5027 ;;Total ram usage:        0 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    1
  5030 ;; This function calls:
  5031 ;;		_I2C_Master_Wait
  5032 ;; This function is called by:
  5033 ;;		_get_time
  5034 ;;		_get_day
  5035 ;;		_get_temp
  5036 ;;		_get_hall
  5037 ;;		_get_tripwire
  5038 ;;		_get_PIR
  5039 ;;		_get_IR
  5040 ;;		_open_door
  5041 ;;		_close_door
  5042 ;;		_write_RTC
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           
  5047                           ;psect for function _I2C_Master_Stop
  5048  0C54                     _I2C_Master_Stop:	
  5049                           
  5050                           ;./I2C.h: 57:     I2C_Master_Wait();
  5051                           
  5052                           ;incstack = 0
  5053                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5054  0C54  120A  158A  2472   	fcall	_I2C_Master_Wait
  5055                           
  5056                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  5057  0C57  1683               	bsf	3,5	;RP0=1, select bank1
  5058  0C58  1303               	bcf	3,6	;RP1=0, select bank1
  5059  0C59  1511               	bsf	17,2	;volatile
  5060  0C5A  0008               	return
  5061  0C5B                     __end_of_I2C_Master_Stop:	
  5062                           
  5063                           	psect	text27
  5064  0C4D                     __ptext27:	
  5065 ;; *************** function _I2C_Master_Start *****************
  5066 ;; Defined at:
  5067 ;;		line 39 in file "./I2C.h"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;		None
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;		None
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  1    wreg      void 
  5074 ;; Registers used:
  5075 ;;		wreg, status,2, status,0, pclath, cstack
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5081 ;;      Params:         0       0       0       0       0
  5082 ;;      Locals:         0       0       0       0       0
  5083 ;;      Temps:          0       0       0       0       0
  5084 ;;      Totals:         0       0       0       0       0
  5085 ;;Total ram usage:        0 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    1
  5088 ;; This function calls:
  5089 ;;		_I2C_Master_Wait
  5090 ;; This function is called by:
  5091 ;;		_get_time
  5092 ;;		_get_day
  5093 ;;		_get_temp
  5094 ;;		_get_hall
  5095 ;;		_get_tripwire
  5096 ;;		_get_PIR
  5097 ;;		_get_IR
  5098 ;;		_open_door
  5099 ;;		_close_door
  5100 ;;		_write_RTC
  5101 ;; This function uses a non-reentrant model
  5102 ;;
  5103                           
  5104                           
  5105                           ;psect for function _I2C_Master_Start
  5106  0C4D                     _I2C_Master_Start:	
  5107                           
  5108                           ;./I2C.h: 41:     I2C_Master_Wait();
  5109                           
  5110                           ;incstack = 0
  5111                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5112  0C4D  120A  158A  2472   	fcall	_I2C_Master_Wait
  5113                           
  5114                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  5115  0C50  1683               	bsf	3,5	;RP0=1, select bank1
  5116  0C51  1303               	bcf	3,6	;RP1=0, select bank1
  5117  0C52  1411               	bsf	17,0	;volatile
  5118  0C53  0008               	return
  5119  0C54                     __end_of_I2C_Master_Start:	
  5120                           
  5121                           	psect	text28
  5122  0C72                     __ptext28:	
  5123 ;; *************** function _I2C_Master_Wait *****************
  5124 ;; Defined at:
  5125 ;;		line 32 in file "./I2C.h"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;		None
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;		None
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  1    wreg      void 
  5132 ;; Registers used:
  5133 ;;		wreg, status,2
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5139 ;;      Params:         0       0       0       0       0
  5140 ;;      Locals:         0       0       0       0       0
  5141 ;;      Temps:          0       0       0       0       0
  5142 ;;      Totals:         0       0       0       0       0
  5143 ;;Total ram usage:        0 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; This function calls:
  5146 ;;		Nothing
  5147 ;; This function is called by:
  5148 ;;		_I2C_Master_Start
  5149 ;;		_I2C_Master_RepeatedStart
  5150 ;;		_I2C_Master_Stop
  5151 ;;		_I2C_Master_Write
  5152 ;;		_I2C_Master_Read
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           
  5157                           ;psect for function _I2C_Master_Wait
  5158  0C72                     _I2C_Master_Wait:	
  5159  0C72                     l118:	
  5160                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5161                           
  5162                           ;incstack = 0
  5163                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5164                           
  5165  0C72  1683               	bsf	3,5	;RP0=1, select bank1
  5166  0C73  1303               	bcf	3,6	;RP1=0, select bank1
  5167  0C74  1914               	btfsc	20,2	;volatile
  5168  0C75  2C72               	goto	l118
  5169  0C76  0811               	movf	17,w	;volatile
  5170  0C77  391F               	andlw	31
  5171  0C78  1903               	btfsc	3,2
  5172  0C79  0008               	return
  5173  0C7A  2C72               	goto	l118
  5174  0C7B                     __end_of_I2C_Master_Wait:	
  5175                           
  5176                           	psect	text29
  5177  0C7B                     __ptext29:	
  5178 ;; *************** function _UART_Write *****************
  5179 ;; Defined at:
  5180 ;;		line 54 in file "./UART.h"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;  data            1    wreg     unsigned char 
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;  data            1    0[COMMON] unsigned char 
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  1    wreg      void 
  5187 ;; Registers used:
  5188 ;;		wreg
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5194 ;;      Params:         0       0       0       0       0
  5195 ;;      Locals:         1       0       0       0       0
  5196 ;;      Temps:          0       0       0       0       0
  5197 ;;      Totals:         1       0       0       0       0
  5198 ;;Total ram usage:        1 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; This function calls:
  5201 ;;		Nothing
  5202 ;; This function is called by:
  5203 ;;		_main
  5204 ;;		_UART_Write_Text
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           
  5209                           ;psect for function _UART_Write
  5210  0C7B                     _UART_Write:	
  5211                           
  5212                           ;incstack = 0
  5213                           ; Regs used in _UART_Write: [wreg]
  5214                           ;UART_Write@data stored from wreg
  5215  0C7B  00F0               	movwf	UART_Write@data
  5216  0C7C                     l222:	
  5217                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(!TRMT);
  5218                           
  5219  0C7C  1683               	bsf	3,5	;RP0=1, select bank1
  5220  0C7D  1303               	bcf	3,6	;RP1=0, select bank1
  5221  0C7E  1C98               	btfss	24,1	;volatile
  5222  0C7F  2C7C               	goto	l222
  5223                           
  5224                           ;./UART.h: 57:   TXREG = data;
  5225  0C80  0870               	movf	UART_Write@data,w
  5226  0C81  1283               	bcf	3,5	;RP0=0, select bank0
  5227  0C82  1303               	bcf	3,6	;RP1=0, select bank0
  5228  0C83  0099               	movwf	25	;volatile
  5229  0C84  0008               	return
  5230  0C85                     __end_of_UART_Write:	
  5231                           
  5232                           	psect	text30
  5233  0C47                     __ptext30:	
  5234 ;; *************** function _UART_TX_Empty *****************
  5235 ;; Defined at:
  5236 ;;		line 31 in file "./UART.h"
  5237 ;; Parameters:    Size  Location     Type
  5238 ;;		None
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;		None
  5241 ;; Return value:  Size  Location     Type
  5242 ;;                  1    wreg      unsigned char 
  5243 ;; Registers used:
  5244 ;;		wreg
  5245 ;; Tracked objects:
  5246 ;;		On entry : 0/0
  5247 ;;		On exit  : 0/0
  5248 ;;		Unchanged: 0/0
  5249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5250 ;;      Params:         0       0       0       0       0
  5251 ;;      Locals:         0       0       0       0       0
  5252 ;;      Temps:          0       0       0       0       0
  5253 ;;      Totals:         0       0       0       0       0
  5254 ;;Total ram usage:        0 bytes
  5255 ;; Hardware stack levels used:    1
  5256 ;; This function calls:
  5257 ;;		Nothing
  5258 ;; This function is called by:
  5259 ;;		_main
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           
  5264                           ;psect for function _UART_TX_Empty
  5265  0C47                     _UART_TX_Empty:	
  5266                           
  5267                           ;./UART.h: 33:   return TRMT;
  5268                           
  5269                           ;incstack = 0
  5270                           ; Regs used in _UART_TX_Empty: [wreg]
  5271  0C47  3000               	movlw	0
  5272  0C48  1683               	bsf	3,5	;RP0=1, select bank1
  5273  0C49  1303               	bcf	3,6	;RP1=0, select bank1
  5274  0C4A  1898               	btfsc	24,1	;volatile
  5275  0C4B  3001               	movlw	1
  5276  0C4C  0008               	return
  5277  0C4D                     __end_of_UART_TX_Empty:	
  5278                           
  5279                           	psect	text31
  5280  0EE2                     __ptext31:	
  5281 ;; *************** function _Lcd_Write_String *****************
  5282 ;; Defined at:
  5283 ;;		line 100 in file "./LCD4bits.h"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;  a               2    5[COMMON] PTR unsigned char 
  5286 ;;		 -> NULL(0), STR_17(7), STR_16(7), STR_15(8), 
  5287 ;;		 -> STR_14(8), STR_13(9), STR_12(9), STR_11(12), 
  5288 ;;		 -> STR_10(12), STR_8(10), STR_7(10), STR_6(10), 
  5289 ;;		 -> STR_5(10), STR_4(10), STR_3(10), STR_2(10), 
  5290 ;;		 -> STR_1(10), time(6), temp(6), 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  i               2   10[COMMON] int 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      void 
  5295 ;; Registers used:
  5296 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5302 ;;      Params:         2       0       0       0       0
  5303 ;;      Locals:         2       0       0       0       0
  5304 ;;      Temps:          3       0       0       0       0
  5305 ;;      Totals:         7       0       0       0       0
  5306 ;;Total ram usage:        7 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    2
  5309 ;; This function calls:
  5310 ;;		_Lcd_Write_Char
  5311 ;; This function is called by:
  5312 ;;		_main
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           
  5317                           ;psect for function _Lcd_Write_String
  5318  0EE2                     _Lcd_Write_String:	
  5319                           
  5320                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  5321                           
  5322                           ;incstack = 0
  5323                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5324  0EE2  01FA               	clrf	Lcd_Write_String@i
  5325  0EE3  01FB               	clrf	Lcd_Write_String@i+1
  5326  0EE4                     l2223:	
  5327  0EE4  087A               	movf	Lcd_Write_String@i,w
  5328  0EE5  0775               	addwf	Lcd_Write_String@a,w
  5329  0EE6  00F8               	movwf	??_Lcd_Write_String+1
  5330  0EE7  0876               	movf	Lcd_Write_String@a+1,w
  5331  0EE8  00F7               	movwf	??_Lcd_Write_String
  5332  0EE9  1803               	skipnc
  5333  0EEA  0AF7               	incf	??_Lcd_Write_String,f
  5334  0EEB  1BFA               	btfsc	Lcd_Write_String@i,7
  5335  0EEC  03F7               	decf	??_Lcd_Write_String,f
  5336  0EED  0877               	movf	??_Lcd_Write_String,w
  5337  0EEE  00F9               	movwf	??_Lcd_Write_String+2
  5338  0EEF  0879               	movf	??_Lcd_Write_String+2,w
  5339  0EF0  1283               	bcf	3,5	;RP0=0, select bank0
  5340  0EF1  1303               	bcf	3,6	;RP1=0, select bank0
  5341  0EF2  00FF               	movwf	127
  5342  0EF3  0878               	movf	??_Lcd_Write_String+1,w
  5343  0EF4  0084               	movwf	4
  5344  0EF5  120A  118A  2003  120A  158A  	fcall	stringtab
  5345  0EFA  3A00               	xorlw	0
  5346  0EFB  1903               	btfsc	3,2
  5347  0EFC  0008               	return
  5348                           
  5349                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  5350  0EFD  087A               	movf	Lcd_Write_String@i,w
  5351  0EFE  0775               	addwf	Lcd_Write_String@a,w
  5352  0EFF  00F8               	movwf	??_Lcd_Write_String+1
  5353  0F00  0876               	movf	Lcd_Write_String@a+1,w
  5354  0F01  00F7               	movwf	??_Lcd_Write_String
  5355  0F02  1803               	skipnc
  5356  0F03  0AF7               	incf	??_Lcd_Write_String,f
  5357  0F04  1BFA               	btfsc	Lcd_Write_String@i,7
  5358  0F05  03F7               	decf	??_Lcd_Write_String,f
  5359  0F06  0877               	movf	??_Lcd_Write_String,w
  5360  0F07  00F9               	movwf	??_Lcd_Write_String+2
  5361  0F08  0879               	movf	??_Lcd_Write_String+2,w
  5362  0F09  1283               	bcf	3,5	;RP0=0, select bank0
  5363  0F0A  1303               	bcf	3,6	;RP1=0, select bank0
  5364  0F0B  00FF               	movwf	127
  5365  0F0C  0878               	movf	??_Lcd_Write_String+1,w
  5366  0F0D  0084               	movwf	4
  5367  0F0E  120A  118A  2003  120A  158A  	fcall	stringtab
  5368  0F13  120A  158A  266D  120A  158A  	fcall	_Lcd_Write_Char
  5369  0F18  3001               	movlw	1
  5370  0F19  07FA               	addwf	Lcd_Write_String@i,f
  5371  0F1A  1803               	skipnc
  5372  0F1B  0AFB               	incf	Lcd_Write_String@i+1,f
  5373  0F1C  3000               	movlw	0
  5374  0F1D  07FB               	addwf	Lcd_Write_String@i+1,f
  5375  0F1E  2EE4               	goto	l2223
  5376  0F1F                     __end_of_Lcd_Write_String:	
  5377                           
  5378                           	psect	text32
  5379  0E6D                     __ptext32:	
  5380 ;; *************** function _Lcd_Write_Char *****************
  5381 ;; Defined at:
  5382 ;;		line 84 in file "./LCD4bits.h"
  5383 ;; Parameters:    Size  Location     Type
  5384 ;;  a               1    wreg     unsigned char 
  5385 ;; Auto vars:     Size  Location     Type
  5386 ;;  a               1    4[COMMON] unsigned char 
  5387 ;;  y               1    3[COMMON] unsigned char 
  5388 ;;  temp            1    2[COMMON] unsigned char 
  5389 ;; Return value:  Size  Location     Type
  5390 ;;                  1    wreg      void 
  5391 ;; Registers used:
  5392 ;;		wreg, status,2, status,0, pclath, cstack
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5398 ;;      Params:         0       0       0       0       0
  5399 ;;      Locals:         3       0       0       0       0
  5400 ;;      Temps:          1       0       0       0       0
  5401 ;;      Totals:         4       0       0       0       0
  5402 ;;Total ram usage:        4 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:    1
  5405 ;; This function calls:
  5406 ;;		_Lcd_Port
  5407 ;; This function is called by:
  5408 ;;		_Lcd_Write_String
  5409 ;;		_main
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           
  5414                           ;psect for function _Lcd_Write_Char
  5415  0E6D                     _Lcd_Write_Char:	
  5416                           
  5417                           ;incstack = 0
  5418                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  5419                           ;Lcd_Write_Char@a stored from wreg
  5420  0E6D  00F4               	movwf	Lcd_Write_Char@a
  5421                           
  5422                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  5423  0E6E  0874               	movf	Lcd_Write_Char@a,w
  5424  0E6F  390F               	andlw	15
  5425  0E70  00F1               	movwf	??_Lcd_Write_Char
  5426  0E71  0871               	movf	??_Lcd_Write_Char,w
  5427  0E72  00F2               	movwf	Lcd_Write_Char@temp
  5428                           
  5429                           ;./LCD4bits.h: 88:    y = a&0xF0;
  5430  0E73  0874               	movf	Lcd_Write_Char@a,w
  5431  0E74  39F0               	andlw	240
  5432  0E75  00F1               	movwf	??_Lcd_Write_Char
  5433  0E76  0871               	movf	??_Lcd_Write_Char,w
  5434  0E77  00F3               	movwf	Lcd_Write_Char@y
  5435                           
  5436                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  5437  0E78  1283               	bcf	3,5	;RP0=0, select bank0
  5438  0E79  1303               	bcf	3,6	;RP1=0, select bank0
  5439  0E7A  1606               	bsf	6,4	;volatile
  5440                           
  5441                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  5442  0E7B  0873               	movf	Lcd_Write_Char@y,w
  5443  0E7C  00F1               	movwf	??_Lcd_Write_Char
  5444  0E7D  3004               	movlw	4
  5445  0E7E                     u1405:	
  5446  0E7E  1003               	clrc
  5447  0E7F  0CF1               	rrf	??_Lcd_Write_Char,f
  5448  0E80  3EFF               	addlw	-1
  5449  0E81  1D03               	skipz
  5450  0E82  2E7E               	goto	u1405
  5451  0E83  0871               	movf	??_Lcd_Write_Char,w
  5452  0E84  120A  158A  24A1  120A  158A  	fcall	_Lcd_Port
  5453                           
  5454                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  5455  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  5456  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  5457  0E8B  1686               	bsf	6,5	;volatile
  5458                           
  5459                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  5460  0E8C  301A               	movlw	26
  5461  0E8D  00F1               	movwf	??_Lcd_Write_Char
  5462  0E8E                     u2187:	
  5463  0E8E  0BF1               	decfsz	??_Lcd_Write_Char,f
  5464  0E8F  2E8E               	goto	u2187
  5465  0E90  0000               	nop
  5466                           
  5467                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  5468  0E91  1283               	bcf	3,5	;RP0=0, select bank0
  5469  0E92  1303               	bcf	3,6	;RP1=0, select bank0
  5470  0E93  1286               	bcf	6,5	;volatile
  5471                           
  5472                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  5473  0E94  0872               	movf	Lcd_Write_Char@temp,w
  5474  0E95  120A  158A  24A1  120A  158A  	fcall	_Lcd_Port
  5475                           
  5476                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  5477  0E9A  1283               	bcf	3,5	;RP0=0, select bank0
  5478  0E9B  1303               	bcf	3,6	;RP1=0, select bank0
  5479  0E9C  1686               	bsf	6,5	;volatile
  5480                           
  5481                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  5482  0E9D  301A               	movlw	26
  5483  0E9E  00F1               	movwf	??_Lcd_Write_Char
  5484  0E9F                     u2197:	
  5485  0E9F  0BF1               	decfsz	??_Lcd_Write_Char,f
  5486  0EA0  2E9F               	goto	u2197
  5487  0EA1  0000               	nop
  5488                           
  5489                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  5490  0EA2  1283               	bcf	3,5	;RP0=0, select bank0
  5491  0EA3  1303               	bcf	3,6	;RP1=0, select bank0
  5492  0EA4  1286               	bcf	6,5	;volatile
  5493  0EA5  0008               	return
  5494  0EA6                     __end_of_Lcd_Write_Char:	
  5495                           
  5496                           	psect	text33
  5497  0F61                     __ptext33:	
  5498 ;; *************** function _Lcd_Set_Cursor *****************
  5499 ;; Defined at:
  5500 ;;		line 44 in file "./LCD4bits.h"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;  a               1    wreg     unsigned char 
  5503 ;;  b               1    4[COMMON] unsigned char 
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;  a               1    7[COMMON] unsigned char 
  5506 ;;  temp            1   10[COMMON] unsigned char 
  5507 ;;  y               1    9[COMMON] unsigned char 
  5508 ;;  z               1    8[COMMON] unsigned char 
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  1    wreg      void 
  5511 ;; Registers used:
  5512 ;;		wreg, status,2, status,0, pclath, cstack
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5518 ;;      Params:         1       0       0       0       0
  5519 ;;      Locals:         4       0       0       0       0
  5520 ;;      Temps:          2       0       0       0       0
  5521 ;;      Totals:         7       0       0       0       0
  5522 ;;Total ram usage:        7 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    2
  5525 ;; This function calls:
  5526 ;;		_Lcd_Cmd
  5527 ;; This function is called by:
  5528 ;;		_main
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           
  5533                           ;psect for function _Lcd_Set_Cursor
  5534  0F61                     _Lcd_Set_Cursor:	
  5535                           
  5536                           ;incstack = 0
  5537                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  5538                           ;Lcd_Set_Cursor@a stored from wreg
  5539  0F61  00F7               	movwf	Lcd_Set_Cursor@a
  5540                           
  5541                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  5542  0F62  0377               	decf	Lcd_Set_Cursor@a,w
  5543  0F63  1D03               	btfss	3,2
  5544  0F64  2F86               	goto	l2207
  5545                           
  5546                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  5547  0F65  0874               	movf	Lcd_Set_Cursor@b,w
  5548  0F66  3E7F               	addlw	127
  5549  0F67  00F5               	movwf	??_Lcd_Set_Cursor
  5550  0F68  0875               	movf	??_Lcd_Set_Cursor,w
  5551  0F69  00FA               	movwf	Lcd_Set_Cursor@temp
  5552                           
  5553                           ;./LCD4bits.h: 50:   z = temp>>4;
  5554  0F6A  087A               	movf	Lcd_Set_Cursor@temp,w
  5555  0F6B  00F5               	movwf	??_Lcd_Set_Cursor
  5556  0F6C  3004               	movlw	4
  5557  0F6D                     u1615:	
  5558  0F6D  1003               	clrc
  5559  0F6E  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5560  0F6F  3EFF               	addlw	-1
  5561  0F70  1D03               	skipz
  5562  0F71  2F6D               	goto	u1615
  5563  0F72  0875               	movf	??_Lcd_Set_Cursor,w
  5564  0F73  00F6               	movwf	??_Lcd_Set_Cursor+1
  5565  0F74  0876               	movf	??_Lcd_Set_Cursor+1,w
  5566  0F75  00F8               	movwf	Lcd_Set_Cursor@z
  5567                           
  5568                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  5569  0F76  087A               	movf	Lcd_Set_Cursor@temp,w
  5570  0F77  390F               	andlw	15
  5571  0F78  00F5               	movwf	??_Lcd_Set_Cursor
  5572  0F79  0875               	movf	??_Lcd_Set_Cursor,w
  5573  0F7A  00F9               	movwf	Lcd_Set_Cursor@y
  5574                           
  5575                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  5576  0F7B  0878               	movf	Lcd_Set_Cursor@z,w
  5577  0F7C  120A  158A  24BB  120A  158A  	fcall	_Lcd_Cmd
  5578                           
  5579                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  5580  0F81  0879               	movf	Lcd_Set_Cursor@y,w
  5581  0F82  120A  158A  24BB   	fcall	_Lcd_Cmd
  5582                           
  5583                           ;./LCD4bits.h: 54:  }
  5584  0F85  0008               	return
  5585  0F86                     l2207:	
  5586  0F86  3002               	movlw	2
  5587  0F87  0677               	xorwf	Lcd_Set_Cursor@a,w
  5588  0F88  1D03               	btfss	3,2
  5589  0F89  0008               	return
  5590                           
  5591                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  5592  0F8A  0874               	movf	Lcd_Set_Cursor@b,w
  5593  0F8B  3EBF               	addlw	191
  5594  0F8C  00F5               	movwf	??_Lcd_Set_Cursor
  5595  0F8D  0875               	movf	??_Lcd_Set_Cursor,w
  5596  0F8E  00FA               	movwf	Lcd_Set_Cursor@temp
  5597                           
  5598                           ;./LCD4bits.h: 58:   z = temp>>4;
  5599  0F8F  087A               	movf	Lcd_Set_Cursor@temp,w
  5600  0F90  00F5               	movwf	??_Lcd_Set_Cursor
  5601  0F91  3004               	movlw	4
  5602  0F92                     u1635:	
  5603  0F92  1003               	clrc
  5604  0F93  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5605  0F94  3EFF               	addlw	-1
  5606  0F95  1D03               	skipz
  5607  0F96  2F92               	goto	u1635
  5608  0F97  0875               	movf	??_Lcd_Set_Cursor,w
  5609  0F98  00F6               	movwf	??_Lcd_Set_Cursor+1
  5610  0F99  0876               	movf	??_Lcd_Set_Cursor+1,w
  5611  0F9A  00F8               	movwf	Lcd_Set_Cursor@z
  5612                           
  5613                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  5614  0F9B  087A               	movf	Lcd_Set_Cursor@temp,w
  5615  0F9C  390F               	andlw	15
  5616  0F9D  00F5               	movwf	??_Lcd_Set_Cursor
  5617  0F9E  0875               	movf	??_Lcd_Set_Cursor,w
  5618  0F9F  00F9               	movwf	Lcd_Set_Cursor@y
  5619                           
  5620                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  5621  0FA0  0878               	movf	Lcd_Set_Cursor@z,w
  5622  0FA1  120A  158A  24BB  120A  158A  	fcall	_Lcd_Cmd
  5623                           
  5624                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  5625  0FA6  0879               	movf	Lcd_Set_Cursor@y,w
  5626  0FA7  120A  158A  24BB   	fcall	_Lcd_Cmd
  5627  0FAA  0008               	return
  5628  0FAB                     __end_of_Lcd_Set_Cursor:	
  5629                           
  5630                           	psect	text34
  5631  0C85                     __ptext34:	
  5632 ;; *************** function _Lcd_Clear *****************
  5633 ;; Defined at:
  5634 ;;		line 38 in file "./LCD4bits.h"
  5635 ;; Parameters:    Size  Location     Type
  5636 ;;		None
  5637 ;; Auto vars:     Size  Location     Type
  5638 ;;		None
  5639 ;; Return value:  Size  Location     Type
  5640 ;;                  1    wreg      void 
  5641 ;; Registers used:
  5642 ;;		wreg, status,2, status,0, pclath, cstack
  5643 ;; Tracked objects:
  5644 ;;		On entry : 0/0
  5645 ;;		On exit  : 0/0
  5646 ;;		Unchanged: 0/0
  5647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5648 ;;      Params:         0       0       0       0       0
  5649 ;;      Locals:         0       0       0       0       0
  5650 ;;      Temps:          0       0       0       0       0
  5651 ;;      Totals:         0       0       0       0       0
  5652 ;;Total ram usage:        0 bytes
  5653 ;; Hardware stack levels used:    1
  5654 ;; Hardware stack levels required when called:    2
  5655 ;; This function calls:
  5656 ;;		_Lcd_Cmd
  5657 ;; This function is called by:
  5658 ;;		_main
  5659 ;; This function uses a non-reentrant model
  5660 ;;
  5661                           
  5662                           
  5663                           ;psect for function _Lcd_Clear
  5664  0C85                     _Lcd_Clear:	
  5665                           
  5666                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  5667                           
  5668                           ;incstack = 0
  5669                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  5670  0C85  3000               	movlw	0
  5671  0C86  120A  158A  24BB  120A  158A  	fcall	_Lcd_Cmd
  5672                           
  5673                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  5674  0C8B  3001               	movlw	1
  5675  0C8C  120A  158A  24BB   	fcall	_Lcd_Cmd
  5676  0C8F  0008               	return
  5677  0C90                     __end_of_Lcd_Clear:	
  5678                           
  5679                           	psect	text35
  5680  0CBB                     __ptext35:	
  5681 ;; *************** function _Lcd_Cmd *****************
  5682 ;; Defined at:
  5683 ;;		line 29 in file "./LCD4bits.h"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;  a               1    wreg     unsigned char 
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;  a               1    3[COMMON] unsigned char 
  5688 ;; Return value:  Size  Location     Type
  5689 ;;                  1    wreg      void 
  5690 ;; Registers used:
  5691 ;;		wreg, status,2, status,0, pclath, cstack
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5697 ;;      Params:         0       0       0       0       0
  5698 ;;      Locals:         1       0       0       0       0
  5699 ;;      Temps:          2       0       0       0       0
  5700 ;;      Totals:         3       0       0       0       0
  5701 ;;Total ram usage:        3 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:    1
  5704 ;; This function calls:
  5705 ;;		_Lcd_Port
  5706 ;; This function is called by:
  5707 ;;		_Lcd_Clear
  5708 ;;		_Lcd_Set_Cursor
  5709 ;;		_Lcd_Init
  5710 ;;		_Lcd_Shift_Right
  5711 ;;		_Lcd_Shift_Left
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           
  5716                           ;psect for function _Lcd_Cmd
  5717  0CBB                     _Lcd_Cmd:	
  5718                           
  5719                           ;incstack = 0
  5720                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  5721                           ;Lcd_Cmd@a stored from wreg
  5722  0CBB  00F3               	movwf	Lcd_Cmd@a
  5723                           
  5724                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  5725  0CBC  1283               	bcf	3,5	;RP0=0, select bank0
  5726  0CBD  1303               	bcf	3,6	;RP1=0, select bank0
  5727  0CBE  1206               	bcf	6,4	;volatile
  5728                           
  5729                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  5730  0CBF  0873               	movf	Lcd_Cmd@a,w
  5731  0CC0  120A  158A  24A1  120A  158A  	fcall	_Lcd_Port
  5732                           
  5733                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  5734  0CC5  1283               	bcf	3,5	;RP0=0, select bank0
  5735  0CC6  1303               	bcf	3,6	;RP1=0, select bank0
  5736  0CC7  1686               	bsf	6,5	;volatile
  5737                           
  5738                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  5739  0CC8  300B               	movlw	11
  5740  0CC9  00F2               	movwf	??_Lcd_Cmd+1
  5741  0CCA  3062               	movlw	98
  5742  0CCB  00F1               	movwf	??_Lcd_Cmd
  5743  0CCC                     u2207:	
  5744  0CCC  0BF1               	decfsz	??_Lcd_Cmd,f
  5745  0CCD  2CCC               	goto	u2207
  5746  0CCE  0BF2               	decfsz	??_Lcd_Cmd+1,f
  5747  0CCF  2CCC               	goto	u2207
  5748  0CD0  0000               	nop
  5749                           
  5750                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  5751  0CD1  1283               	bcf	3,5	;RP0=0, select bank0
  5752  0CD2  1303               	bcf	3,6	;RP1=0, select bank0
  5753  0CD3  1286               	bcf	6,5	;volatile
  5754  0CD4  0008               	return
  5755  0CD5                     __end_of_Lcd_Cmd:	
  5756                           
  5757                           	psect	text36
  5758  0CA1                     __ptext36:	
  5759 ;; *************** function _Lcd_Port *****************
  5760 ;; Defined at:
  5761 ;;		line 7 in file "./LCD4bits.h"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;  a               1    wreg     unsigned char 
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;  a               1    0[COMMON] unsigned char 
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  1    wreg      void 
  5768 ;; Registers used:
  5769 ;;		wreg
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5775 ;;      Params:         0       0       0       0       0
  5776 ;;      Locals:         1       0       0       0       0
  5777 ;;      Temps:          0       0       0       0       0
  5778 ;;      Totals:         1       0       0       0       0
  5779 ;;Total ram usage:        1 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; This function calls:
  5782 ;;		Nothing
  5783 ;; This function is called by:
  5784 ;;		_Lcd_Cmd
  5785 ;;		_Lcd_Init
  5786 ;;		_Lcd_Write_Char
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           
  5791                           ;psect for function _Lcd_Port
  5792  0CA1                     _Lcd_Port:	
  5793                           
  5794                           ;incstack = 0
  5795                           ; Regs used in _Lcd_Port: [wreg]
  5796                           ;Lcd_Port@a stored from wreg
  5797  0CA1  00F0               	movwf	Lcd_Port@a
  5798                           
  5799                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  5800  0CA2  1C70               	btfss	Lcd_Port@a,0
  5801  0CA3  2CA8               	goto	l144
  5802                           
  5803                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  5804  0CA4  1283               	bcf	3,5	;RP0=0, select bank0
  5805  0CA5  1303               	bcf	3,6	;RP1=0, select bank0
  5806  0CA6  1406               	bsf	6,0	;volatile
  5807  0CA7  2CAB               	goto	l145
  5808  0CA8                     l144:	
  5809                           ;./LCD4bits.h: 11:  else
  5810                           
  5811                           
  5812                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  5813  0CA8  1283               	bcf	3,5	;RP0=0, select bank0
  5814  0CA9  1303               	bcf	3,6	;RP1=0, select bank0
  5815  0CAA  1006               	bcf	6,0	;volatile
  5816  0CAB                     l145:	
  5817                           
  5818                           ;./LCD4bits.h: 14:  if(a & 2)
  5819  0CAB  1CF0               	btfss	Lcd_Port@a,1
  5820  0CAC  2CAF               	goto	l146
  5821                           
  5822                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  5823  0CAD  1486               	bsf	6,1	;volatile
  5824  0CAE  2CB0               	goto	l147
  5825  0CAF                     l146:	
  5826                           ;./LCD4bits.h: 16:  else
  5827                           
  5828                           
  5829                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  5830  0CAF  1086               	bcf	6,1	;volatile
  5831  0CB0                     l147:	
  5832                           
  5833                           ;./LCD4bits.h: 19:  if(a & 4)
  5834  0CB0  1D70               	btfss	Lcd_Port@a,2
  5835  0CB1  2CB4               	goto	l148
  5836                           
  5837                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  5838  0CB2  1506               	bsf	6,2	;volatile
  5839  0CB3  2CB5               	goto	l149
  5840  0CB4                     l148:	
  5841                           ;./LCD4bits.h: 21:  else
  5842                           
  5843                           
  5844                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  5845  0CB4  1106               	bcf	6,2	;volatile
  5846  0CB5                     l149:	
  5847                           
  5848                           ;./LCD4bits.h: 24:  if(a & 8)
  5849  0CB5  1DF0               	btfss	Lcd_Port@a,3
  5850  0CB6  2CB9               	goto	l150
  5851                           
  5852                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  5853  0CB7  1586               	bsf	6,3	;volatile
  5854  0CB8  0008               	return
  5855  0CB9                     l150:	
  5856                           ;./LCD4bits.h: 26:  else
  5857                           
  5858                           
  5859                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  5860  0CB9  1186               	bcf	6,3	;volatile
  5861  0CBA  0008               	return
  5862  0CBB                     __end_of_Lcd_Port:	
  5863  007E                     btemp	set	126	;btemp
  5864  007E                     wtemp0	set	126


Data Sizes:
    Strings     153
    Constant    10
    Data        0
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     24      57
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_9(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_20(CODE[4]), STR_19(CODE[5]), STR_18(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), temp(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_temp@temp_string	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_time@time_string	PTR unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), 

    day2	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[10]), 
		 -> STR_1(CODE[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 12
		 -> NULL(NULL[0]), STR_17(CODE[7]), STR_16(CODE[7]), STR_15(CODE[8]), 
		 -> STR_14(CODE[8]), STR_13(CODE[9]), STR_12(CODE[9]), STR_11(CODE[12]), 
		 -> STR_10(CODE[12]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[10]), 
		 -> STR_1(CODE[10]), time(BANK0[6]), temp(BANK0[6]), 


Critical Paths under _main in COMMON

    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _open_door->_I2C_Master_Write
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _close_door->_I2C_Master_Write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_UART_Init
    _UART_Init->___aldiv
    _get_temp->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   27511
                                             22 BANK0      2     2      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                      _UART_TX_Empty
                         _UART_Write
                         _close_door
                             _get_IR
                            _get_PIR
                            _get_day
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                          _open_door
                              _setup
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     200
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1468
                    _I2C_Master_Init
                           _Lcd_Init
                          _UART_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     412
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _open_door                                            0     0      0    1770
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2522
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                             5     5      0    2754
                                              6 COMMON     5     5      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             9     9      0    4613
                                             13 BANK0      9     9      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1429
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     168
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2522
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     2      0    2522
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2522
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2522
                                              6 COMMON     2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     729
                                              0 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _close_door                                           0     0      0    1770
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1770
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Empty                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1104
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     912
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_TX_Empty
   _UART_Write
   _close_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_day
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _open_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
     _initOscilador
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      47       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     18      39       5       71.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      47      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Mar 07 15:58:13 2019

                                _i 002D                                  _j 002C  
                                pc 0002                     ___bmul@product 0072  
                      __CFG_CP$OFF 0000                        get_hall@key 0077  
                               _IR 0030                                 fsr 0004  
                              l150 0CB9                                l222 0C7C  
                              l118 0C72                                l144 0CA8  
                              l136 0DF8                                l145 0CAB  
                              l137 0DFB                                l305 070C  
                              l146 0CAF                                l306 070F  
                              l147 0CB0                                l148 0CB4  
                              l149 0CB5                                l280 0576  
                              l273 0572                                l282 0595  
                              l187 0FFE                                l543 0234  
                              _GIE 005F                       __CFG_CPD$OFF 0000  
                              _PIR 0031                      ?_get_tripwire 0070  
                              fsr0 0004                                indf 0000  
                     __CFG_LVP$OFF 0000                               l2123 046F  
                             l2133 0486                               l2117 0451  
                             l2061 0FB8                               l2207 0F86  
                             l2223 0EE4                               l2151 04B8  
                             l2071 0FD7                               l2063 0FBE  
                             l2145 04A9                               l2161 0431  
                             l2073 0FD7                               l2065 0FC4  
                             l2057 0FAD                               l2401 056E  
                             l2139 0488                               l2163 04FD  
                             l2091 0410                               l2067 0FCA  
                             l2059 0FB2                               l2069 0FD0  
                             l2077 0FDC                               l2341 0DBA  
                             l2501 06CB                               l2421 0591  
                             l2183 0C92                               l2159 04BC  
                             l2175 0D8C                               l2343 0DAD  
                             l2503 06CD                               l2431 05A0  
                             l2177 0D97                               l2281 0331  
                             l2345 0DCF                               l2441 05B1  
                             l2187 0C98                               l2179 0D9F  
                             l2531 0730                               l2507 06D2  
                             l2443 05B2                               l2419 0586  
                             l2427 0598                               l2525 0723  
                             l2533 0731                               l2509 06F3  
                             l1911 0255                               l1903 0245  
                             l2527 072C                               l1921 028D  
                             l1913 0265                               l2561 07AE  
                             l2553 078E                               l2545 077C  
                             l2369 0512                               l2571 07CB  
                             l2563 07B8                               l2491 06C1  
                             l1925 029A                               l2661 0FE4  
                             l2493 06C3                               l1951 0ED2  
                             l1943 0EAE                               l2663 0464  
                             l2495 06C5                               l2399 0563  
                             l1945 0EBC                               l1929 02A8  
                             l2497 06C7                               l2489 06BF  
                             l1955 0EDD                               l1875 0153  
                             l2579 07EB                               l2659 06DC  
                             l2499 06C9                               l1973 00D8  
                             l1885 018B                               l1877 0163  
                             l1967 00BC                               l1969 00CA  
                             l1977 00E3                               l1889 0198  
                             STR_1 003F                               STR_2 0053  
                      get_time@min 0079                               STR_3 007B  
                             STR_4 005D                               STR_5 0071  
                             STR_6 0049                               STR_7 0067  
                             STR_8 0035                               STR_9 00A7  
                             _BRGH 04C2                               _CREN 00C4  
                             u1115 0165                               u1125 017A  
                             u1205 0267                               u1135 018C  
                             u1215 027C                               u1305 0ED3  
                             u1225 028E                               u2017 05CA  
                             u2107 066C                               u2027 05DC  
                             u1405 0E7E                               u2117 067E  
                             u2037 05EE                               u2207 0CCC  
                             u1335 00BF                               u1095 0157  
                             u1431 038F                               u1415 035F  
                             u2127 0690                               u2047 0600  
                             u1432 0390                               u1265 0EB1  
                             u1185 0259                               u1433 0395  
                             u1425 0378                               u2137 06A2  
                             u2057 0612                               u1434 0396  
                             u1355 00D0                               u1515 049F  
                             u1435 039B                               u2147 06B4  
                             u2067 0624                               u1436 039C  
                             u1285 0EBD                               u1365 00D9  
                             u2157 00F2                               u2077 0636  
                             u1615 0F6D                               u1295 0EC9  
                             u2167 0101                               u1471 03EF  
                             u1455 03BF                               u2087 0648  
                             u1472 03F0                               u1705 01E8  
                             u1385 0E49                               u2177 0110  
                             u1473 03F5                               u1465 03D8  
                             u2097 065A                               u1474 03F6  
                             u1635 0F92                               u2187 0E8E  
                             u1715 0207                               u1475 03FB  
                             u1476 03FC                               u2197 0E9F  
                             u1685 0309                               _PEIE 005E  
                             u1895 0706                               _RCEN 048B  
                             _RCIF 0065                               _SPEN 00C7  
                             _TRMT 04C1                               _TXEN 04C5  
                             _SYNC 04C4                       __CFG_WRT$OFF 0000  
                             _day1 002E                               _day2 0034  
                             _bank 0026                  ?_Lcd_Write_String 0075  
 __end_of_I2C_Master_RepeatedStart 0C62                               _door 0033  
                             _main 0502                               _temp 0035  
                             _time 003B                               _trip 0032  
                             btemp 007E                               start 0000  
               ??_Lcd_Write_String 0077                      __CFG_IESO$OFF 0000  
                  __end_of_Lcd_Cmd 0CD5                  ___bmul@multiplier 0073  
                    __CFG_MCLRE$ON 0000                get_temp@temp_string 0055  
                 ?_I2C_Master_Init 0041                   ?_I2C_Master_Read 0070  
                 ?_I2C_Master_Wait 0070                   ?_I2C_Master_Stop 0070  
                  __end_of___aldiv 02B1                              ?_main 0070  
                            STR_10 001D                              STR_11 0029  
                            STR_20 00B2                              STR_12 0085  
                            STR_13 008E                              STR_14 0097  
                            STR_15 009F                              STR_16 0098  
                            STR_17 00A0                      __CFG_WDTE$OFF 0000  
                            STR_18 00B3                              STR_19 00AD  
                     get_time@hour 0078                              _ANSEL 0188  
                  __end_of___lldiv 01A1                     ??_get_tripwire 0076  
                  __end_of___lwdiv 0EE2                    __end_of___lwmod 00E8  
                            _RCREG 001A                              _SPBRG 0099  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007            __size_of_Lcd_Set_Cursor 004A  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087                              _TRISD 0088  
                            _SSPIE 0463                              _SSPIF 0063  
                            _TXREG 0019                    __end_of_get_PIR 0D49  
                   __CFG_FCMEN$OFF 0000                    __end_of_get_day 0E37  
                      ?_UART_Write 0070                 __size_of_UART_Init 00D6  
                            _alarm 0027                    __end_of_dpowers 001D  
                            _setup 0F1F                              _state 002F  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 0502                   __end_of_Lcd_Init 0143  
                 __end_of_Lcd_Port 0CBB                    __initialization 07F5  
                     __end_of_main 07F5             __size_of_initOscilador 0055  
                           ??_main 0057                 __size_of_Lcd_Clear 000B  
                ?_I2C_Master_Start 0070                  ?_I2C_Master_Write 0070  
               ??_I2C_Master_Start 0070                 ??_I2C_Master_Write 0072  
                           ?_setup 0070                             _ANSELH 0189  
                        ??_Lcd_Cmd 0071            __size_of_Lcd_Write_Char 0039  
                           _SSPADD 0093                             _TRISC3 043B  
                           _TRISC4 043C                             _TRISC6 043E  
                           _TRISC7 043F                             _SSPCON 0014  
                           _SSPBUF 0013                     __CFG_PWRTE$OFF 0000  
         _I2C_Master_RepeatedStart 0C5B                   __end_of_get_hall 0D68  
                __end_of_UART_Init 042A                   __end_of_get_temp 0354  
                 __end_of_get_time 0222                             ___bmul 0C90  
              __size_of_UART_Write 000A                          ??___aldiv 0078  
                           _change 002B                          ??___lldiv 0078  
                           _get_IR 0D0B                          ??___lwdiv 0074  
                        ??___lwmod 007C                          ??_get_PIR 0076  
            __end_of_UART_TX_Empty 0C4D                          ??_get_day 0076  
                           _strcat 0D87                             _strcmp 0DAB  
                        ??_sprintf 0044                    Lcd_Set_Cursor@a 0077  
                  Lcd_Set_Cursor@b 0074                    Lcd_Set_Cursor@y 0079  
                  Lcd_Set_Cursor@z 0078            __end_of__initialization 07FC  
                    _initOscilador 0FAB                  __end_of_Lcd_Clear 0C90  
             __end_of_get_tripwire 0D87                ___bmul@multiplicand 0070  
                   __pcstackCOMMON 0070                      __end_of_setup 0F61  
                   _Lcd_Set_Cursor 0F61                          ?_Lcd_Init 0070  
                        ?_Lcd_Port 0070                            ??_setup 007E  
                       __pbssBANK0 0020                     ?_initOscilador 0070  
                       __pmaintext 0502                            ?___bmul 0070  
                          ?_get_IR 0070                 __size_of_open_door 001B  
        __size_of_Lcd_Write_String 003D             __end_of_Lcd_Set_Cursor 0FAB  
                          ?_strcat 0070                            ?_strcmp 0070  
                       _close_door 0CD5                       ??_UART_Write 0070  
                       ??_Lcd_Init 0074                         ??_Lcd_Port 0070  
                          _SSPCON2 0091                          ?_get_hall 0070  
                          _SSPSTAT 0094                          ?_get_temp 0070  
                        ?_get_time 0070                         __stringtab 0003  
              initOscilador@option 0072                     _Lcd_Write_Char 0E6D  
                          _Lcd_Cmd 0CBB                            ___aldiv 0222  
                  __size_of___bmul 0011                            ___lldiv 0143  
               __end_of_UART_Write 0C85                            ___lwdiv 0EA6  
                          ___lwmod 00B6                    __size_of_get_IR 001F  
                          _change1 002A                            _change2 0029  
                          _change3 0028                    ?_Lcd_Set_Cursor 0074  
                          _get_PIR 0D2A                            __ptext1 0DAB  
                          __ptext2 0F1F                            __ptext3 0FAB  
                          __ptext4 0354                            __ptext5 0222  
                          __ptext6 00E8                            __ptext7 0E37  
                          __ptext8 0143                            __ptext9 0CF0  
                          _get_day 0E01                get_time@time_string 007A  
                  __size_of_strcat 0024                    __size_of_strcmp 002A  
                          _dpowers 0013                   ___aldiv@dividend 0074  
                          _newtime 0020           __size_of_I2C_Master_Init 0036  
         __size_of_I2C_Master_Read 002C           __size_of_I2C_Master_Wait 0009  
         __size_of_I2C_Master_Stop 0007                    ??_initOscilador 0070  
                       ??_get_hall 0076                            _sprintf 042A  
                          clrloop0 0C6B             __end_of_Lcd_Write_Char 0EA6  
                       ??_get_temp 004E                         ??_get_time 0076  
             end_of_initialization 07FC              __size_of_get_tripwire 001F  
       ??_I2C_Master_RepeatedStart 0070                  __end_of_open_door 0D0B  
                       get_PIR@PIR 0077          __size_of_I2C_Master_Start 0007  
        __size_of_I2C_Master_Write 0008                    ___lldiv@divisor 0070  
                  ___lldiv@counter 007D                          _RCSTAbits 0018  
                 ___aldiv@quotient 0043                   I2C_Master_Init@c 0041  
                 I2C_Master_Read@a 0070                          Lcd_Port@a 0070  
                          strcmp@r 0075                          _UART_Init 0354  
                        _PORTAbits 0005                          _PORTBbits 0006  
                        _PORTCbits 0007                          _PORTDbits 0008  
                   UART_Write@data 0070                       _get_tripwire 0D68  
                      ?_close_door 0070                          _TRISCbits 0087  
                  ?_Lcd_Write_Char 0070                  Lcd_Write_String@a 0075  
                Lcd_Write_String@i 007A                          _Lcd_Clear 0C85  
                   __end_of___bmul 0CA1                   _Lcd_Write_String 0EE2  
                       ?_UART_Init 0047                     __end_of_get_IR 0D2A  
                   __end_of_strcat 0DAB                     __end_of_strcmp 0DD5  
              start_initialization 07F5                  __size_of_Lcd_Init 005B  
                __size_of_Lcd_Port 001A                  ??_I2C_Master_Init 0045  
                ??_I2C_Master_Read 0072                  ??_I2C_Master_Wait 0070  
                ??_I2C_Master_Stop 0070             __size_of_UART_TX_Empty 0006  
         __CFG_FOSC$INTRC_NOCLKOUT 0000                         ?_Lcd_Clear 0070  
                         ??___bmul 0071                __size_of_close_door 001B  
                         ??_get_IR 0076                    Lcd_Write_Char@a 0074  
                  Lcd_Write_Char@y 0073                           ??_strcat 0071  
                         ??_strcmp 0072                          ___latbits 0002  
                    __pcstackBANK0 0041                  __size_of_get_hall 001F  
                         ?_Lcd_Cmd 0070                  __size_of_get_temp 00A3  
                __size_of_get_time 0081                        sprintf@flag 0048  
                      sprintf@prec 0049                   _I2C_Master_Start 0C4D  
                 _I2C_Master_Write 0C62                   ___lwdiv@dividend 0072  
                 ??_Lcd_Set_Cursor 0075                    get_temp@decimal 0051  
                         ?___aldiv 0070                           ?___lldiv 0070  
                         ?___lwdiv 0070                           ?___lwmod 0078  
                      ??_UART_Init 004B                           ?_get_PIR 0070  
                        __pstrings 0003                           ?_get_day 0070  
                  get_temp@tempLSB 0056                    get_temp@tempMSB 0054  
                    _UART_TX_Empty 0C47                   ___lwdiv@quotient 0075  
                         ?_sprintf 0041                         UART_Init@x 0079  
                   __size_of_setup 0042                    ___aldiv@divisor 0070  
                  ___aldiv@counter 0041                          clear_ram0 0C6A  
                        _open_door 0CF0                           Lcd_Cmd@a 0073  
                      ??_Lcd_Clear 0074                  UART_Init@baudrate 0047  
                      __stringbase 0012                     ?_UART_TX_Empty 0070  
                 ??_Lcd_Write_Char 0071                       ??_close_door 0072  
                         _Lcd_Init 00E8                           _Lcd_Port 0CA1  
              I2C_Master_Read@temp 0074              __end_of_initOscilador 1000  
         __end_of_Lcd_Write_String 0F1F                   __size_of_Lcd_Cmd 001A  
                       ?_open_door 0070                 __end_of_close_door 0CF0  
                 __size_of___aldiv 008F  __size_of_I2C_Master_RepeatedStart 0007  
        ?_I2C_Master_RepeatedStart 0070                   __size_of___lldiv 005E  
                 __size_of___lwdiv 003C                   __size_of___lwmod 0032  
               __end_of__stringtab 0013                   __size_of_get_PIR 001F  
                 __size_of_get_day 0036                         sprintf@val 004A  
                  _I2C_Master_Init 0E37                    _I2C_Master_Read 0DD5  
                  _I2C_Master_Wait 0C72                         strcat@from 0070  
                  _I2C_Master_Stop 0C54                    ___lwdiv@divisor 0070  
                  ___lwdiv@counter 0077                           __ptext10 0D68  
                         __ptext11 01A1                           __ptext20 0C5B  
                         __ptext12 02B1                           __ptext21 0D2A  
                         __ptext13 0D87                           __ptext30 0C47  
                         __ptext22 0D0B                           __ptext14 042A  
                         __ptext31 0EE2                           __ptext23 0DD5  
                         __ptext15 00B6                           __ptext32 0E6D  
                         __ptext24 0CD5                           __ptext16 0EA6  
                         __ptext33 0F61                           __ptext25 0C62  
                         __ptext17 0C90                           __ptext34 0C85  
                         __ptext26 0C54                           __ptext18 0D49  
                         __ptext35 0CBB                           __ptext27 0C4D  
                         __ptext19 0E01                           __ptext36 0CA1  
                         __ptext28 0C72                           __ptext29 0C7B  
                __CFG_BOR4V$BOR40V 0000                           _get_hall 0D49  
                         _get_temp 02B1                           _get_time 01A1  
                 __size_of_sprintf 00D8                      __size_of_main 02F3  
                         get_IR@IR 0077                           get_day@d 0077  
                  ??_UART_TX_Empty 0070           __end_of_I2C_Master_Start 0C54  
         __end_of_I2C_Master_Write 0C6A                 Lcd_Write_Char@temp 0072  
                        sprintf@ap 0047                          sprintf@sp 004C  
                 ___lwmod@dividend 007A                   ___lldiv@dividend 0074  
                      ??_open_door 0072                          stringcode 000D  
                       _OSCCONbits 008F            __end_of_I2C_Master_Init 0E6D  
          __end_of_I2C_Master_Read 0E01            __end_of_I2C_Master_Wait 0C7B  
          __end_of_I2C_Master_Stop 0C5B                 Lcd_Set_Cursor@temp 007A  
                         sprintf@c 004D                           sprintf@f 0041  
                         strcat@cp 0073                           strcat@to 0072  
                         strcmp@s1 0076                           strcmp@s2 0070  
                 ___lldiv@quotient 0079                  I2C_Master_Write@d 0070  
                  ___lwmod@divisor 0078                    ___lwmod@counter 007D  
                         stringdir 000D                   get_tripwire@trip 0077  
                         stringtab 0003                       ___aldiv@sign 0042  
                       _UART_Write 0C7B                        _SSPCON2bits 0091  
                       _SSPCONbits 0014  

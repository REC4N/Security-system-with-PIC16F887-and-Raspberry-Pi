

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Mar 08 22:40:54 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	psect	text29,local,class=CODE,merge=1,delta=2
    41                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text32,local,class=CODE,merge=1,delta=2
    44                           	psect	text33,local,class=CODE,merge=1,delta=2
    45                           	psect	text34,local,class=CODE,merge=1,delta=2
    46                           	psect	text35,local,class=CODE,merge=1,delta=2
    47                           	psect	text36,local,class=CODE,merge=1,delta=2
    48                           	psect	text37,local,class=CODE,merge=1,delta=2
    49                           	psect	text38,local,class=CODE,merge=1,delta=2
    50                           	psect	text39,local,class=CODE,merge=1,delta=2
    51                           	psect	text40,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	dabs	1,0x7E,2
    54  0000                     
    55                           ; Version 2.05
    56                           ; Generated 20/12/2018 GMT
    57                           ; 
    58                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC16F887 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  0007                     	;# 
    97  0008                     	;# 
    98  0009                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000D                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0013                     	;# 
   110  0014                     	;# 
   111  0015                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001D                     	;# 
   122  001E                     	;# 
   123  001F                     	;# 
   124  0081                     	;# 
   125  0085                     	;# 
   126  0086                     	;# 
   127  0087                     	;# 
   128  0088                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  008F                     	;# 
   134  0090                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0093                     	;# 
   139  0093                     	;# 
   140  0094                     	;# 
   141  0095                     	;# 
   142  0096                     	;# 
   143  0097                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009A                     	;# 
   147  009B                     	;# 
   148  009C                     	;# 
   149  009D                     	;# 
   150  009E                     	;# 
   151  009F                     	;# 
   152  0105                     	;# 
   153  0107                     	;# 
   154  0108                     	;# 
   155  0109                     	;# 
   156  010C                     	;# 
   157  010C                     	;# 
   158  010D                     	;# 
   159  010E                     	;# 
   160  010F                     	;# 
   161  0185                     	;# 
   162  0187                     	;# 
   163  0188                     	;# 
   164  0189                     	;# 
   165  018C                     	;# 
   166  018D                     	;# 
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  000E                     	;# 
   183  000F                     	;# 
   184  0010                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0013                     	;# 
   188  0014                     	;# 
   189  0015                     	;# 
   190  0015                     	;# 
   191  0016                     	;# 
   192  0017                     	;# 
   193  0018                     	;# 
   194  0019                     	;# 
   195  001A                     	;# 
   196  001B                     	;# 
   197  001B                     	;# 
   198  001C                     	;# 
   199  001D                     	;# 
   200  001E                     	;# 
   201  001F                     	;# 
   202  0081                     	;# 
   203  0085                     	;# 
   204  0086                     	;# 
   205  0087                     	;# 
   206  0088                     	;# 
   207  0089                     	;# 
   208  008C                     	;# 
   209  008D                     	;# 
   210  008E                     	;# 
   211  008F                     	;# 
   212  0090                     	;# 
   213  0091                     	;# 
   214  0092                     	;# 
   215  0093                     	;# 
   216  0093                     	;# 
   217  0093                     	;# 
   218  0094                     	;# 
   219  0095                     	;# 
   220  0096                     	;# 
   221  0097                     	;# 
   222  0098                     	;# 
   223  0099                     	;# 
   224  009A                     	;# 
   225  009B                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  009F                     	;# 
   230  0105                     	;# 
   231  0107                     	;# 
   232  0108                     	;# 
   233  0109                     	;# 
   234  010C                     	;# 
   235  010C                     	;# 
   236  010D                     	;# 
   237  010E                     	;# 
   238  010F                     	;# 
   239  0185                     	;# 
   240  0187                     	;# 
   241  0188                     	;# 
   242  0189                     	;# 
   243  018C                     	;# 
   244  018D                     	;# 
   245                           
   246                           	psect	strings
   247  0600                     __pstrings:	
   248  0600                     stringtab:	
   249  0600                     __stringtab:	
   250                           
   251                           ;	String table - string pointers are 1 byte each
   252  0600  1BFF               	btfsc	btemp+1,7
   253  0601  2E0A               	ljmp	stringcode
   254  0602  1383               	bcf	3,7
   255  0603  187F               	btfsc	btemp+1,0
   256  0604  1783               	bsf	3,7
   257  0605  0800               	movf	0,w
   258  0606  0A84               	incf	4,f
   259  0607  1903               	skipnz
   260  0608  0AFF               	incf	btemp+1,f
   261  0609  0008               	return
   262  060A                     stringcode:	
   263  060A                     stringdir:	
   264  060A  3006               	movlw	high stringdir
   265  060B  008A               	movwf	10
   266  060C  0804               	movf	4,w
   267  060D  0A84               	incf	4,f
   268  060E  0782               	addwf	2,f
   269  060F                     __stringbase:	
   270  060F  3400               	retlw	0
   271  0610                     __end_of__stringtab:	
   272  0610                     _dpowers:	
   273  0610  3401               	retlw	1
   274  0611  3400               	retlw	0
   275  0612  340A               	retlw	10
   276  0613  3400               	retlw	0
   277  0614  3464               	retlw	100
   278  0615  3400               	retlw	0
   279  0616  34E8               	retlw	232
   280  0617  3403               	retlw	3
   281  0618  3410               	retlw	16
   282  0619  3427               	retlw	39
   283  061A                     __end_of_dpowers:	
   284  0007                     _PORTC	set	7
   285  0005                     _PORTA	set	5
   286  0006                     _PORTB	set	6
   287  0007                     _PORTCbits	set	7
   288  0018                     _RCSTAbits	set	24
   289  0014                     _SSPCONbits	set	20
   290  0008                     _PORTDbits	set	8
   291  0001                     _TMR0	set	1
   292  0005                     _PORTAbits	set	5
   293  000B                     _INTCONbits	set	11
   294  0019                     _TXREG	set	25
   295  001A                     _RCREG	set	26
   296  0006                     _PORTBbits	set	6
   297  0013                     _SSPBUF	set	19
   298  0014                     _SSPCON	set	20
   299  0065                     _RCIF	set	101
   300  00C4                     _CREN	set	196
   301  00C7                     _SPEN	set	199
   302  0063                     _SSPIF	set	99
   303  005E                     _PEIE	set	94
   304  005F                     _GIE	set	95
   305  0081                     _OPTION_REGbits	set	129
   306  0087                     _TRISC	set	135
   307  0088                     _TRISD	set	136
   308  0085                     _TRISA	set	133
   309  0086                     _TRISB	set	134
   310  0099                     _SPBRG	set	153
   311  008F                     _OSCCONbits	set	143
   312  0091                     _SSPCON2bits	set	145
   313  0087                     _TRISCbits	set	135
   314  0094                     _SSPSTAT	set	148
   315  0093                     _SSPADD	set	147
   316  0091                     _SSPCON2	set	145
   317  04C1                     _TRMT	set	1217
   318  04C5                     _TXEN	set	1221
   319  043E                     _TRISC6	set	1086
   320  043F                     _TRISC7	set	1087
   321  04C4                     _SYNC	set	1220
   322  04C2                     _BRGH	set	1218
   323  0463                     _SSPIE	set	1123
   324  043C                     _TRISC4	set	1084
   325  043B                     _TRISC3	set	1083
   326  048B                     _RCEN	set	1163
   327  0188                     _ANSEL	set	392
   328  0189                     _ANSELH	set	393
   329  061A                     STR_10:	
   330  061A  3444               	retlw	68	;'D'
   331  061B  346F               	retlw	111	;'o'
   332  061C  346F               	retlw	111	;'o'
   333  061D  3472               	retlw	114	;'r'
   334  061E  3420               	retlw	32	;' '
   335  061F  344F               	retlw	79	;'O'
   336  0620  3450               	retlw	80	;'P'
   337  0621  3445               	retlw	69	;'E'
   338  0622  344E               	retlw	78	;'N'
   339  0623  3420               	retlw	32	;' '
   340  0624  3420               	retlw	32	;' '
   341  0625  3400               	retlw	0
   342  0626                     STR_11:	
   343  0626  3444               	retlw	68	;'D'
   344  0627  346F               	retlw	111	;'o'
   345  0628  346F               	retlw	111	;'o'
   346  0629  3472               	retlw	114	;'r'
   347  062A  3420               	retlw	32	;' '
   348  062B  3443               	retlw	67	;'C'
   349  062C  344C               	retlw	76	;'L'
   350  062D  344F               	retlw	79	;'O'
   351  062E  3453               	retlw	83	;'S'
   352  062F  3445               	retlw	69	;'E'
   353  0630  3444               	retlw	68	;'D'
   354  0631  3400               	retlw	0
   355  0632                     STR_8:	
   356  0632  3420               	retlw	32	;' '
   357  0633  3420               	retlw	32	;' '
   358  0634  3420               	retlw	32	;' '
   359  0635  3420               	retlw	32	;' '
   360  0636  3420               	retlw	32	;' '
   361  0637  3420               	retlw	32	;' '
   362  0638  3420               	retlw	32	;' '
   363  0639  3420               	retlw	32	;' '
   364  063A  3420               	retlw	32	;' '
   365  063B  3400               	retlw	0
   366  063C                     STR_1:	
   367  063C  344C               	retlw	76	;'L'
   368  063D  3455               	retlw	85	;'U'
   369  063E  344E               	retlw	78	;'N'
   370  063F  3445               	retlw	69	;'E'
   371  0640  3453               	retlw	83	;'S'
   372  0641  3420               	retlw	32	;' '
   373  0642  3420               	retlw	32	;' '
   374  0643  3420               	retlw	32	;' '
   375  0644  3420               	retlw	32	;' '
   376  0645  3400               	retlw	0
   377  0646                     STR_6:	
   378  0646  3453               	retlw	83	;'S'
   379  0647  3441               	retlw	65	;'A'
   380  0648  3442               	retlw	66	;'B'
   381  0649  3441               	retlw	65	;'A'
   382  064A  3444               	retlw	68	;'D'
   383  064B  344F               	retlw	79	;'O'
   384  064C  3420               	retlw	32	;' '
   385  064D  3420               	retlw	32	;' '
   386  064E  3420               	retlw	32	;' '
   387  064F  3400               	retlw	0
   388  0650                     STR_2:	
   389  0650  344D               	retlw	77	;'M'
   390  0651  3441               	retlw	65	;'A'
   391  0652  3452               	retlw	82	;'R'
   392  0653  3454               	retlw	84	;'T'
   393  0654  3445               	retlw	69	;'E'
   394  0655  3453               	retlw	83	;'S'
   395  0656  3420               	retlw	32	;' '
   396  0657  3420               	retlw	32	;' '
   397  0658  3420               	retlw	32	;' '
   398  0659  3400               	retlw	0
   399  065A                     STR_4:	
   400  065A  344A               	retlw	74	;'J'
   401  065B  3455               	retlw	85	;'U'
   402  065C  3445               	retlw	69	;'E'
   403  065D  3456               	retlw	86	;'V'
   404  065E  3445               	retlw	69	;'E'
   405  065F  3453               	retlw	83	;'S'
   406  0660  3420               	retlw	32	;' '
   407  0661  3420               	retlw	32	;' '
   408  0662  3420               	retlw	32	;' '
   409  0663  3400               	retlw	0
   410  0664                     STR_7:	
   411  0664  3444               	retlw	68	;'D'
   412  0665  344F               	retlw	79	;'O'
   413  0666  344D               	retlw	77	;'M'
   414  0667  3449               	retlw	73	;'I'
   415  0668  344E               	retlw	78	;'N'
   416  0669  3447               	retlw	71	;'G'
   417  066A  344F               	retlw	79	;'O'
   418  066B  3420               	retlw	32	;' '
   419  066C  3420               	retlw	32	;' '
   420  066D  3400               	retlw	0
   421  066E                     STR_5:	
   422  066E  3456               	retlw	86	;'V'
   423  066F  3449               	retlw	73	;'I'
   424  0670  3445               	retlw	69	;'E'
   425  0671  3452               	retlw	82	;'R'
   426  0672  344E               	retlw	78	;'N'
   427  0673  3445               	retlw	69	;'E'
   428  0674  3453               	retlw	83	;'S'
   429  0675  3420               	retlw	32	;' '
   430  0676  3420               	retlw	32	;' '
   431  0677  3400               	retlw	0
   432  0678                     STR_3:	
   433  0678  344D               	retlw	77	;'M'
   434  0679  3449               	retlw	73	;'I'
   435  067A  3445               	retlw	69	;'E'
   436  067B  3452               	retlw	82	;'R'
   437  067C  3443               	retlw	67	;'C'
   438  067D  344F               	retlw	79	;'O'
   439  067E  344C               	retlw	76	;'L'
   440  067F  3445               	retlw	69	;'E'
   441  0680  3453               	retlw	83	;'S'
   442  0681  3400               	retlw	0
   443  0682                     STR_12:	
   444  0682  3454               	retlw	84	;'T'
   445  0683  3472               	retlw	114	;'r'
   446  0684  3469               	retlw	105	;'i'
   447  0685  3470               	retlw	112	;'p'
   448  0686  3420               	retlw	32	;' '
   449  0687  344F               	retlw	79	;'O'
   450  0688  344E               	retlw	78	;'N'
   451  0689  3420               	retlw	32	;' '
   452  068A  3400               	retlw	0
   453  068B                     STR_13:	
   454  068B  3454               	retlw	84	;'T'
   455  068C  3472               	retlw	114	;'r'
   456  068D  3469               	retlw	105	;'i'
   457  068E  3470               	retlw	112	;'p'
   458  068F  3420               	retlw	32	;' '
   459  0690  344F               	retlw	79	;'O'
   460  0691  3446               	retlw	70	;'F'
   461  0692  3446               	retlw	70	;'F'
   462  0693  3400               	retlw	0
   463  0694                     STR_14:	
   464  0694  3450               	retlw	80	;'P'
   465  0695  3449               	retlw	73	;'I'
   466  0696  3452               	retlw	82	;'R'
   467  0697  3420               	retlw	32	;' '
   468  0698  344F               	retlw	79	;'O'
   469  0699  344E               	retlw	78	;'N'
   470  069A  3420               	retlw	32	;' '
   471  069B  3400               	retlw	0
   472  069C                     STR_15:	
   473  069C  3450               	retlw	80	;'P'
   474  069D  3449               	retlw	73	;'I'
   475  069E  3452               	retlw	82	;'R'
   476  069F  3420               	retlw	32	;' '
   477  06A0  344F               	retlw	79	;'O'
   478  06A1  3446               	retlw	70	;'F'
   479  06A2  3446               	retlw	70	;'F'
   480  06A3  3400               	retlw	0
   481  06A4                     STR_18:	
   482  06A4  3448               	retlw	72	;'H'
   483  06A5  344F               	retlw	79	;'O'
   484  06A6  3452               	retlw	82	;'R'
   485  06A7  3441               	retlw	65	;'A'
   486  06A8  343A               	retlw	58	;':'
   487  06A9  3420               	retlw	32	;' '
   488  06AA  3400               	retlw	0
   489  06AB                     STR_19:	
   490  06AB  3444               	retlw	68	;'D'
   491  06AC  3449               	retlw	73	;'I'
   492  06AD  3441               	retlw	65	;'A'
   493  06AE  343A               	retlw	58	;':'
   494  06AF  3420               	retlw	32	;' '
   495  06B0  3400               	retlw	0
   496  06B1                     STR_9:	
   497  06B1  3432               	retlw	50	;'2'
   498  06B2  3433               	retlw	51	;'3'
   499  06B3  342E               	retlw	46	;'.'
   500  06B4  3435               	retlw	53	;'5'
   501  06B5  3430               	retlw	48	;'0'
   502  06B6  3400               	retlw	0
   503  06B7                     STR_21:	
   504  06B7  342E               	retlw	46	;'.'
   505  06B8  3425               	retlw	37	;'%'
   506  06B9  3464               	retlw	100	;'d'
   507  06BA  3430               	retlw	48	;'0'
   508  06BB  3400               	retlw	0
   509  06BC                     STR_22:	
   510  06BC  342E               	retlw	46	;'.'
   511  06BD  3425               	retlw	37	;'%'
   512  06BE  3464               	retlw	100	;'d'
   513  06BF  3400               	retlw	0
   514  0695                     
   515                           ; #config settings
   516  0000                     
   517                           	psect	cinit
   518  000F                     start_initialization:	
   519  000F                     __initialization:	
   520                           
   521                           ; Clear objects allocated to COMMON
   522  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   523  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   524  0011  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   525                           
   526                           ; Clear objects allocated to BANK0
   527  0012  1383               	bcf	3,7	;select IRP bank0
   528  0013  3045               	movlw	low __pbssBANK0
   529  0014  0084               	movwf	4
   530  0015  3065               	movlw	low (__pbssBANK0+32)
   531  0016  120A  158A  21E4   	fcall	clear_ram0
   532  0019                     end_of_initialization:	
   533                           ;End of C runtime variable initialization code
   534                           
   535  0019                     __end_of__initialization:	
   536  0019  0183               	clrf	3
   537  001A  120A  118A  281D   	ljmp	_main	;jump to C main() function
   538                           
   539                           	psect	bssCOMMON
   540  0078                     __pbssCOMMON:	
   541  0078                     _newhour:	
   542  0078                     	ds	1
   543  0079                     _state:	
   544  0079                     	ds	1
   545  007A                     _door:	
   546  007A                     	ds	1
   547                           
   548                           	psect	bssBANK0
   549  0045                     __pbssBANK0:	
   550  0045                     _k:	
   551  0045                     	ds	2
   552  0047                     _newmin:	
   553  0047                     	ds	1
   554  0048                     _min:	
   555  0048                     	ds	1
   556  0049                     _hour:	
   557  0049                     	ds	1
   558  004A                     _val:	
   559  004A                     	ds	1
   560  004B                     _cont:	
   561  004B                     	ds	1
   562  004C                     _bank:	
   563  004C                     	ds	1
   564  004D                     _alarm:	
   565  004D                     	ds	1
   566  004E                     _change3:	
   567  004E                     	ds	1
   568  004F                     _change2:	
   569  004F                     	ds	1
   570  0050                     _change1:	
   571  0050                     	ds	1
   572  0051                     _change:	
   573  0051                     	ds	1
   574  0052                     _j:	
   575  0052                     	ds	1
   576  0053                     _i:	
   577  0053                     	ds	1
   578  0054                     _day1:	
   579  0054                     	ds	1
   580  0055                     _IR:	
   581  0055                     	ds	1
   582  0056                     _PIR:	
   583  0056                     	ds	1
   584  0057                     _trip:	
   585  0057                     	ds	1
   586  0058                     _day2:	
   587  0058                     	ds	1
   588  0059                     _temp:	
   589  0059                     	ds	6
   590  005F                     _time:	
   591  005F                     	ds	6
   592                           
   593                           	psect	clrtext
   594  09E4                     clear_ram0:	
   595                           ;	Called with FSR containing the base address, and
   596                           ;	W with the last address+1
   597                           
   598  09E4  0064               	clrwdt	;clear the watchdog before getting into this loop
   599  09E5                     clrloop0:	
   600  09E5  0180               	clrf	0	;clear RAM location pointed to by FSR
   601  09E6  0A84               	incf	4,f	;increment pointer
   602  09E7  0604               	xorwf	4,w	;XOR with final address
   603  09E8  1903               	btfsc	3,2	;have we reached the end yet?
   604  09E9  3400               	retlw	0	;all done for this memory range, return
   605  09EA  0604               	xorwf	4,w	;XOR again to restore value
   606  09EB  29E5               	goto	clrloop0	;do the next byte
   607                           
   608                           	psect	cstackCOMMON
   609  0070                     __pcstackCOMMON:	
   610  0070                     ?_setup:	
   611  0070                     ?_get_temp:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0070                     ?_get_hall:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0070                     ?_get_tripwire:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0070                     ?_get_PIR:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0070                     ?_get_IR:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0070                     ?_get_time:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0070                     ?_get_day:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0070                     ?_open_door:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0070                     ?_close_door:	
   636                           ; 1 bytes @ 0x0
   637                           
   638  0070                     ?_I2C_Master_Wait:	
   639                           ; 1 bytes @ 0x0
   640                           
   641  0070                     ?_I2C_Master_Start:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0070                     ?_I2C_Master_RepeatedStart:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0070                     ?_I2C_Master_Stop:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0070                     ?_Lcd_Port:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0070                     ?_Lcd_Cmd:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ?_Lcd_Clear:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ?_Lcd_Init:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ?_Lcd_Write_Char:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ?_initOscilador:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_UART_TX_Empty:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_UART_Write:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ?_manual_pwm:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ??_manual_pwm:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ?_main:	
   681                           ; 1 bytes @ 0x0
   682                           
   683                           
   684                           ; 1 bytes @ 0x0
   685  0070                     	ds	3
   686  0073                     ?_strcat:	
   687  0073                     ??_I2C_Master_Wait:	
   688                           ; 1 bytes @ 0x3
   689                           
   690  0073                     ??_I2C_Master_Start:	
   691                           ; 1 bytes @ 0x3
   692                           
   693  0073                     ??_I2C_Master_RepeatedStart:	
   694                           ; 1 bytes @ 0x3
   695                           
   696  0073                     ??_I2C_Master_Stop:	
   697                           ; 1 bytes @ 0x3
   698                           
   699  0073                     ?_I2C_Master_Write:	
   700                           ; 1 bytes @ 0x3
   701                           
   702  0073                     ??_Lcd_Port:	
   703                           ; 1 bytes @ 0x3
   704                           
   705  0073                     ??_initOscilador:	
   706                           ; 1 bytes @ 0x3
   707                           
   708  0073                     ??_UART_TX_Empty:	
   709                           ; 1 bytes @ 0x3
   710                           
   711  0073                     ??_UART_Write:	
   712                           ; 1 bytes @ 0x3
   713                           
   714  0073                     ?___bmul:	
   715                           ; 1 bytes @ 0x3
   716                           
   717  0073                     ??___lldiv:	
   718                           ; 1 bytes @ 0x3
   719                           
   720  0073                     ??___aldiv:	
   721                           ; 1 bytes @ 0x3
   722                           
   723  0073                     ?_strcmp:	
   724                           ; 1 bytes @ 0x3
   725                           
   726  0073                     ?_I2C_Master_Read:	
   727                           ; 2 bytes @ 0x3
   728                           
   729  0073                     ?___awdiv:	
   730                           ; 2 bytes @ 0x3
   731                           
   732  0073                     ?___awmod:	
   733                           ; 2 bytes @ 0x3
   734                           
   735  0073                     ?___lwdiv:	
   736                           ; 2 bytes @ 0x3
   737                           
   738  0073                     Lcd_Port@a:	
   739                           ; 2 bytes @ 0x3
   740                           
   741  0073                     UART_Write@data:	
   742                           ; 1 bytes @ 0x3
   743                           
   744  0073                     ___bmul@multiplicand:	
   745                           ; 1 bytes @ 0x3
   746                           
   747  0073                     strcat@from:	
   748                           ; 1 bytes @ 0x3
   749                           
   750  0073                     strcmp@s2:	
   751                           ; 1 bytes @ 0x3
   752                           
   753  0073                     I2C_Master_Write@d:	
   754                           ; 1 bytes @ 0x3
   755                           
   756  0073                     I2C_Master_Read@a:	
   757                           ; 2 bytes @ 0x3
   758                           
   759  0073                     ___awdiv@divisor:	
   760                           ; 2 bytes @ 0x3
   761                           
   762  0073                     ___awmod@divisor:	
   763                           ; 2 bytes @ 0x3
   764                           
   765  0073                     ___lwdiv@divisor:	
   766                           ; 2 bytes @ 0x3
   767                           
   768                           
   769                           ; 2 bytes @ 0x3
   770  0073                     	ds	1
   771  0074                     ??_strcat:	
   772  0074                     ??_I2C_Master_Init:	
   773                           ; 1 bytes @ 0x4
   774                           
   775  0074                     ??_Lcd_Cmd:	
   776                           ; 1 bytes @ 0x4
   777                           
   778  0074                     ??_Lcd_Write_Char:	
   779                           ; 1 bytes @ 0x4
   780                           
   781  0074                     ??___bmul:	
   782                           ; 1 bytes @ 0x4
   783                           
   784  0074                     UART_Init@x:	
   785                           ; 1 bytes @ 0x4
   786                           
   787                           
   788                           ; 2 bytes @ 0x4
   789  0074                     	ds	1
   790  0075                     ??_open_door:	
   791  0075                     ??_close_door:	
   792                           ; 1 bytes @ 0x5
   793                           
   794  0075                     ??_strcmp:	
   795                           ; 1 bytes @ 0x5
   796                           
   797  0075                     ?_write_RTC:	
   798                           ; 1 bytes @ 0x5
   799                           
   800  0075                     ??_I2C_Master_Write:	
   801                           ; 1 bytes @ 0x5
   802                           
   803  0075                     ??_I2C_Master_Read:	
   804                           ; 1 bytes @ 0x5
   805                           
   806  0075                     Lcd_Write_Char@temp:	
   807                           ; 1 bytes @ 0x5
   808                           
   809  0075                     initOscilador@option:	
   810                           ; 1 bytes @ 0x5
   811                           
   812  0075                     write_RTC@minutes:	
   813                           ; 1 bytes @ 0x5
   814                           
   815  0075                     ___bmul@product:	
   816                           ; 1 bytes @ 0x5
   817                           
   818  0075                     strcat@to:	
   819                           ; 1 bytes @ 0x5
   820                           
   821  0075                     ___awdiv@dividend:	
   822                           ; 1 bytes @ 0x5
   823                           
   824  0075                     ___awmod@dividend:	
   825                           ; 2 bytes @ 0x5
   826                           
   827  0075                     ___lwdiv@dividend:	
   828                           ; 2 bytes @ 0x5
   829                           
   830                           
   831                           ; 2 bytes @ 0x5
   832  0075                     	ds	1
   833  0076                     Lcd_Cmd@a:	
   834  0076                     Lcd_Write_Char@y:	
   835                           ; 1 bytes @ 0x6
   836                           
   837  0076                     write_RTC@day:	
   838                           ; 1 bytes @ 0x6
   839                           
   840  0076                     ___bmul@multiplier:	
   841                           ; 1 bytes @ 0x6
   842                           
   843  0076                     strcat@cp:	
   844                           ; 1 bytes @ 0x6
   845                           
   846                           
   847                           ; 1 bytes @ 0x6
   848  0076                     	ds	1
   849  0077                     ??_get_hall:	
   850  0077                     ??_get_tripwire:	
   851                           ; 1 bytes @ 0x7
   852                           
   853  0077                     ??_get_PIR:	
   854                           ; 1 bytes @ 0x7
   855                           
   856  0077                     ??_get_IR:	
   857                           ; 1 bytes @ 0x7
   858                           
   859  0077                     ??_get_day:	
   860                           ; 1 bytes @ 0x7
   861                           
   862  0077                     ??_Lcd_Clear:	
   863                           ; 1 bytes @ 0x7
   864                           
   865  0077                     ?_Lcd_Set_Cursor:	
   866                           ; 1 bytes @ 0x7
   867                           
   868  0077                     ??___awdiv:	
   869                           ; 1 bytes @ 0x7
   870                           
   871  0077                     ??___awmod:	
   872                           ; 1 bytes @ 0x7
   873                           
   874  0077                     ??___lwdiv:	
   875                           ; 1 bytes @ 0x7
   876                           
   877  0077                     Lcd_Set_Cursor@b:	
   878                           ; 1 bytes @ 0x7
   879                           
   880  0077                     Lcd_Write_Char@a:	
   881                           ; 1 bytes @ 0x7
   882                           
   883  0077                     write_RTC@hour:	
   884                           ; 1 bytes @ 0x7
   885                           
   886                           
   887                           ; 1 bytes @ 0x7
   888  0077                     	ds	1
   889  0078                     ??_setup:	
   890                           
   891                           	psect	cstackBANK0
   892  0020                     __pcstackBANK0:	
   893                           ; 1 bytes @ 0x8
   894                           
   895  0020                     ??_write_RTC:	
   896  0020                     ??_Lcd_Set_Cursor:	
   897                           ; 1 bytes @ 0x0
   898                           
   899  0020                     ??_Lcd_Init:	
   900                           ; 1 bytes @ 0x0
   901                           
   902  0020                     ?_Lcd_Write_String:	
   903                           ; 1 bytes @ 0x0
   904                           
   905  0020                     ?___lldiv:	
   906                           ; 1 bytes @ 0x0
   907                           
   908  0020                     ?___aldiv:	
   909                           ; 4 bytes @ 0x0
   910                           
   911  0020                     ___awdiv@counter:	
   912                           ; 4 bytes @ 0x0
   913                           
   914  0020                     ___awmod@counter:	
   915                           ; 1 bytes @ 0x0
   916                           
   917  0020                     ___lwdiv@counter:	
   918                           ; 1 bytes @ 0x0
   919                           
   920  0020                     strcmp@r:	
   921                           ; 1 bytes @ 0x0
   922                           
   923  0020                     I2C_Master_Read@temp:	
   924                           ; 1 bytes @ 0x0
   925                           
   926  0020                     Lcd_Write_String@a:	
   927                           ; 2 bytes @ 0x0
   928                           
   929  0020                     ___lldiv@divisor:	
   930                           ; 2 bytes @ 0x0
   931                           
   932  0020                     ___aldiv@divisor:	
   933                           ; 4 bytes @ 0x0
   934                           
   935                           
   936                           ; 4 bytes @ 0x0
   937  0020                     	ds	1
   938  0021                     ___awdiv@sign:	
   939  0021                     ___awmod@sign:	
   940                           ; 1 bytes @ 0x1
   941                           
   942  0021                     strcmp@s1:	
   943                           ; 1 bytes @ 0x1
   944                           
   945  0021                     ___lwdiv@quotient:	
   946                           ; 1 bytes @ 0x1
   947                           
   948                           
   949                           ; 2 bytes @ 0x1
   950  0021                     	ds	1
   951  0022                     ??_get_time:	
   952  0022                     ??_Lcd_Write_String:	
   953                           ; 1 bytes @ 0x2
   954                           
   955  0022                     Lcd_Set_Cursor@a:	
   956                           ; 1 bytes @ 0x2
   957                           
   958  0022                     get_day@d:	
   959                           ; 1 bytes @ 0x2
   960                           
   961  0022                     get_hall@key:	
   962                           ; 1 bytes @ 0x2
   963                           
   964  0022                     get_tripwire@trip:	
   965                           ; 1 bytes @ 0x2
   966                           
   967  0022                     get_PIR@PIR:	
   968                           ; 1 bytes @ 0x2
   969                           
   970  0022                     get_IR@IR:	
   971                           ; 1 bytes @ 0x2
   972                           
   973  0022                     ___awdiv@quotient:	
   974                           ; 1 bytes @ 0x2
   975                           
   976                           
   977                           ; 2 bytes @ 0x2
   978  0022                     	ds	1
   979  0023                     ?___lwmod:	
   980  0023                     Lcd_Set_Cursor@z:	
   981                           ; 2 bytes @ 0x3
   982                           
   983  0023                     ___lwmod@divisor:	
   984                           ; 1 bytes @ 0x3
   985                           
   986                           
   987                           ; 2 bytes @ 0x3
   988  0023                     	ds	1
   989  0024                     Lcd_Set_Cursor@y:	
   990  0024                     get_time@hour:	
   991                           ; 1 bytes @ 0x4
   992                           
   993  0024                     ___lldiv@dividend:	
   994                           ; 1 bytes @ 0x4
   995                           
   996  0024                     ___aldiv@dividend:	
   997                           ; 4 bytes @ 0x4
   998                           
   999                           
  1000                           ; 4 bytes @ 0x4
  1001  0024                     	ds	1
  1002  0025                     Lcd_Set_Cursor@temp:	
  1003  0025                     get_time@min:	
  1004                           ; 1 bytes @ 0x5
  1005                           
  1006  0025                     Lcd_Write_String@i:	
  1007                           ; 1 bytes @ 0x5
  1008                           
  1009  0025                     ___lwmod@dividend:	
  1010                           ; 2 bytes @ 0x5
  1011                           
  1012                           
  1013                           ; 2 bytes @ 0x5
  1014  0025                     	ds	1
  1015  0026                     get_time@time_string:	
  1016                           
  1017                           ; 1 bytes @ 0x6
  1018  0026                     	ds	1
  1019  0027                     ??___lwmod:	
  1020                           
  1021                           ; 1 bytes @ 0x7
  1022  0027                     	ds	1
  1023  0028                     ___aldiv@counter:	
  1024  0028                     ___lwmod@counter:	
  1025                           ; 1 bytes @ 0x8
  1026                           
  1027  0028                     ___lldiv@quotient:	
  1028                           ; 1 bytes @ 0x8
  1029                           
  1030                           
  1031                           ; 4 bytes @ 0x8
  1032  0028                     	ds	1
  1033  0029                     ?_sprintf:	
  1034  0029                     sprintf@f:	
  1035                           ; 2 bytes @ 0x9
  1036                           
  1037  0029                     ___aldiv@sign:	
  1038                           ; 1 bytes @ 0x9
  1039                           
  1040                           
  1041                           ; 1 bytes @ 0x9
  1042  0029                     	ds	1
  1043  002A                     ___aldiv@quotient:	
  1044                           
  1045                           ; 4 bytes @ 0xA
  1046  002A                     	ds	2
  1047  002C                     ??_sprintf:	
  1048  002C                     ___lldiv@counter:	
  1049                           ; 1 bytes @ 0xC
  1050                           
  1051                           
  1052                           ; 1 bytes @ 0xC
  1053  002C                     	ds	1
  1054  002D                     ?_I2C_Master_Init:	
  1055  002D                     I2C_Master_Init@c:	
  1056                           ; 1 bytes @ 0xD
  1057                           
  1058                           
  1059                           ; 4 bytes @ 0xD
  1060  002D                     	ds	1
  1061  002E                     ?_UART_Init:	
  1062  002E                     UART_Init@baudrate:	
  1063                           ; 1 bytes @ 0xE
  1064                           
  1065                           
  1066                           ; 4 bytes @ 0xE
  1067  002E                     	ds	1
  1068  002F                     sprintf@ap:	
  1069                           
  1070                           ; 1 bytes @ 0xF
  1071  002F                     	ds	1
  1072  0030                     sprintf@flag:	
  1073                           
  1074                           ; 1 bytes @ 0x10
  1075  0030                     	ds	1
  1076  0031                     sprintf@prec:	
  1077                           
  1078                           ; 1 bytes @ 0x11
  1079  0031                     	ds	1
  1080  0032                     ??_UART_Init:	
  1081  0032                     sprintf@val:	
  1082                           ; 1 bytes @ 0x12
  1083                           
  1084                           
  1085                           ; 2 bytes @ 0x12
  1086  0032                     	ds	2
  1087  0034                     sprintf@sp:	
  1088                           
  1089                           ; 1 bytes @ 0x14
  1090  0034                     	ds	1
  1091  0035                     sprintf@c:	
  1092                           
  1093                           ; 1 bytes @ 0x15
  1094  0035                     	ds	1
  1095  0036                     ??_get_temp:	
  1096                           
  1097                           ; 1 bytes @ 0x16
  1098  0036                     	ds	3
  1099  0039                     get_temp@decimal:	
  1100                           
  1101                           ; 3 bytes @ 0x19
  1102  0039                     	ds	3
  1103  003C                     get_temp@tempMSB:	
  1104                           
  1105                           ; 1 bytes @ 0x1C
  1106  003C                     	ds	1
  1107  003D                     get_temp@temp_string:	
  1108                           
  1109                           ; 1 bytes @ 0x1D
  1110  003D                     	ds	1
  1111  003E                     get_temp@tempLSB:	
  1112                           
  1113                           ; 1 bytes @ 0x1E
  1114  003E                     	ds	1
  1115  003F                     ??_main:	
  1116                           
  1117                           ; 1 bytes @ 0x1F
  1118  003F                     	ds	6
  1119                           
  1120                           	psect	maintext
  1121  001D                     __pmaintext:	
  1122 ;;
  1123 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1124 ;;
  1125 ;; *************** function _main *****************
  1126 ;; Defined at:
  1127 ;;		line 78 in file "mainMaster.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;		None
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;		None
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : B00/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1141 ;;      Params:         0       0       0       0       0
  1142 ;;      Locals:         0       0       0       0       0
  1143 ;;      Temps:          0       6       0       0       0
  1144 ;;      Totals:         0       6       0       0       0
  1145 ;;Total ram usage:        6 bytes
  1146 ;; Hardware stack levels required when called:    5
  1147 ;; This function calls:
  1148 ;;		_Lcd_Clear
  1149 ;;		_Lcd_Set_Cursor
  1150 ;;		_Lcd_Write_Char
  1151 ;;		_Lcd_Write_String
  1152 ;;		_UART_TX_Empty
  1153 ;;		_UART_Write
  1154 ;;		___awdiv
  1155 ;;		___awmod
  1156 ;;		___bmul
  1157 ;;		_close_door
  1158 ;;		_get_IR
  1159 ;;		_get_PIR
  1160 ;;		_get_day
  1161 ;;		_get_hall
  1162 ;;		_get_temp
  1163 ;;		_get_time
  1164 ;;		_get_tripwire
  1165 ;;		_open_door
  1166 ;;		_setup
  1167 ;;		_strcmp
  1168 ;;		_write_RTC
  1169 ;; This function is called by:
  1170 ;;		Startup code after reset
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           
  1175                           ;psect for function _main
  1176  001D                     _main:	
  1177                           
  1178                           ;mainMaster.c: 79:     setup();
  1179                           
  1180                           ;incstack = 0
  1181                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1182  001D  120A  158A  25B6  120A  118A  	fcall	_setup
  1183                           
  1184                           ;mainMaster.c: 80:     state = 0;
  1185  0022  01F9               	clrf	_state
  1186                           
  1187                           ;mainMaster.c: 81:     Lcd_Clear();
  1188  0023  120A  118A  27F2  120A  118A  	fcall	_Lcd_Clear
  1189                           
  1190                           ;mainMaster.c: 82:     PORTAbits.RA7 = 0;
  1191  0028  1283               	bcf	3,5	;RP0=0, select bank0
  1192  0029  1303               	bcf	3,6	;RP1=0, select bank0
  1193  002A  1385               	bcf	5,7	;volatile
  1194  002B                     l3441:	
  1195                           
  1196                           ;mainMaster.c: 86:         get_temp(temp);
  1197  002B  3059               	movlw	(low (_temp| 0))& (0+255)
  1198  002C  120A  118A  26C0  120A  118A  	fcall	_get_temp
  1199                           
  1200                           ;mainMaster.c: 87:         door = get_hall();
  1201  0031  120A  158A  22DF  120A  118A  	fcall	_get_hall
  1202  0036  1283               	bcf	3,5	;RP0=0, select bank0
  1203  0037  1303               	bcf	3,6	;RP1=0, select bank0
  1204  0038  00BF               	movwf	??_main
  1205  0039  083F               	movf	??_main,w
  1206  003A  00FA               	movwf	_door
  1207                           
  1208                           ;mainMaster.c: 88:         trip = get_tripwire();
  1209  003B  120A  158A  2302  120A  118A  	fcall	_get_tripwire
  1210  0040  1283               	bcf	3,5	;RP0=0, select bank0
  1211  0041  1303               	bcf	3,6	;RP1=0, select bank0
  1212  0042  00BF               	movwf	??_main
  1213  0043  083F               	movf	??_main,w
  1214  0044  00D7               	movwf	_trip
  1215                           
  1216                           ;mainMaster.c: 89:         PIR = get_PIR();
  1217  0045  120A  158A  22BC  120A  118A  	fcall	_get_PIR
  1218  004A  1283               	bcf	3,5	;RP0=0, select bank0
  1219  004B  1303               	bcf	3,6	;RP1=0, select bank0
  1220  004C  00BF               	movwf	??_main
  1221  004D  083F               	movf	??_main,w
  1222  004E  00D6               	movwf	_PIR
  1223                           
  1224                           ;mainMaster.c: 90:         IR = get_IR();
  1225  004F  120A  158A  2299  120A  118A  	fcall	_get_IR
  1226  0054  1283               	bcf	3,5	;RP0=0, select bank0
  1227  0055  1303               	bcf	3,6	;RP1=0, select bank0
  1228  0056  00BF               	movwf	??_main
  1229  0057  083F               	movf	??_main,w
  1230  0058  00D5               	movwf	_IR
  1231                           
  1232                           ;mainMaster.c: 91:         get_time(time);
  1233  0059  305F               	movlw	(low (_time| 0))& (0+255)
  1234  005A  120A  158A  2777  120A  118A  	fcall	_get_time
  1235                           
  1236                           ;mainMaster.c: 92:         day1 = get_day();
  1237  005F  120A  158A  241A  120A  118A  	fcall	_get_day
  1238  0064  1283               	bcf	3,5	;RP0=0, select bank0
  1239  0065  1303               	bcf	3,6	;RP1=0, select bank0
  1240  0066  00BF               	movwf	??_main
  1241  0067  083F               	movf	??_main,w
  1242  0068  00D4               	movwf	_day1
  1243                           
  1244                           ;mainMaster.c: 94:         if(PORTDbits.RD7 == 1){
  1245  0069  1F88               	btfss	8,7	;volatile
  1246  006A  28A0               	goto	l303
  1247                           
  1248                           ;mainMaster.c: 95:             if (bank == 1){
  1249  006B  034C               	decf	_bank,w
  1250  006C  1D03               	btfss	3,2
  1251  006D  2887               	goto	l3471
  1252                           
  1253                           ;mainMaster.c: 96:                 if (change1 == 0){
  1254  006E  0850               	movf	_change1,w
  1255  006F  1D03               	btfss	3,2
  1256  0070  28A2               	goto	l3487
  1257                           
  1258                           ;mainMaster.c: 97:                     bank = 0;
  1259  0071  01CC               	clrf	_bank
  1260                           
  1261                           ;mainMaster.c: 98:                     alarm = 0;
  1262  0072  01CD               	clrf	_alarm
  1263                           
  1264                           ;mainMaster.c: 99:                     open_door();
  1265  0073  120A  158A  225F  120A  118A  	fcall	_open_door
  1266                           
  1267                           ;mainMaster.c: 100:                     j = 0;
  1268  0078  1283               	bcf	3,5	;RP0=0, select bank0
  1269  0079  1303               	bcf	3,6	;RP1=0, select bank0
  1270  007A  01D2               	clrf	_j
  1271  007B                     l3469:	
  1272                           ;mainMaster.c: 101:                     while(j < 50){
  1273                           
  1274                           
  1275                           ;mainMaster.c: 101:                     while(j < 50){
  1276  007B  3032               	movlw	50
  1277  007C  0252               	subwf	_j,w
  1278  007D  1803               	btfsc	3,0
  1279  007E  2884               	goto	l308
  1280                           
  1281                           ;mainMaster.c: 102:                         j++;
  1282  007F  3001               	movlw	1
  1283  0080  00BF               	movwf	??_main
  1284  0081  083F               	movf	??_main,w
  1285  0082  07D2               	addwf	_j,f
  1286  0083  287B               	goto	l3469
  1287  0084                     l308:	
  1288                           
  1289                           ;mainMaster.c: 105:                     change1 = 1;
  1290  0084  01D0               	clrf	_change1
  1291  0085  0AD0               	incf	_change1,f
  1292  0086  28A2               	goto	l3487
  1293  0087                     l3471:	
  1294  0087  084C               	movf	_bank,w
  1295  0088  1D03               	btfss	3,2
  1296  0089  28A2               	goto	l3487
  1297                           
  1298                           ;mainMaster.c: 108:                 if (change1 == 0){
  1299  008A  0850               	movf	_change1,w
  1300  008B  1D03               	btfss	3,2
  1301  008C  28A2               	goto	l3487
  1302                           
  1303                           ;mainMaster.c: 109:                     bank = 1;
  1304  008D  01CC               	clrf	_bank
  1305  008E  0ACC               	incf	_bank,f
  1306                           
  1307                           ;mainMaster.c: 111:                     close_door();
  1308  008F  120A  158A  2244  120A  118A  	fcall	_close_door
  1309                           
  1310                           ;mainMaster.c: 112:                     j = 0;
  1311  0094  1283               	bcf	3,5	;RP0=0, select bank0
  1312  0095  1303               	bcf	3,6	;RP1=0, select bank0
  1313  0096  01D2               	clrf	_j
  1314  0097                     l3483:	
  1315                           ;mainMaster.c: 113:                     while(j < 50){
  1316                           
  1317                           
  1318                           ;mainMaster.c: 113:                     while(j < 50){
  1319  0097  3032               	movlw	50
  1320  0098  0252               	subwf	_j,w
  1321  0099  1803               	btfsc	3,0
  1322  009A  2884               	goto	l308
  1323                           
  1324                           ;mainMaster.c: 114:                         j++;
  1325  009B  3001               	movlw	1
  1326  009C  00BF               	movwf	??_main
  1327  009D  083F               	movf	??_main,w
  1328  009E  07D2               	addwf	_j,f
  1329  009F  2897               	goto	l3483
  1330  00A0                     l303:	
  1331                           ;mainMaster.c: 120:         } else if(PORTDbits.RD7 == 0){
  1332                           
  1333  00A0  1F88               	btfss	8,7	;volatile
  1334                           
  1335                           ;mainMaster.c: 121:             change1 = 0;
  1336  00A1  01D0               	clrf	_change1
  1337  00A2                     l3487:	
  1338                           
  1339                           ;mainMaster.c: 142:         alarm = trip | PIR | IR;
  1340  00A2  0857               	movf	_trip,w
  1341  00A3  0456               	iorwf	_PIR,w
  1342  00A4  0455               	iorwf	_IR,w
  1343  00A5  00BF               	movwf	??_main
  1344  00A6  083F               	movf	??_main,w
  1345  00A7  00CD               	movwf	_alarm
  1346                           
  1347                           ;mainMaster.c: 161:         SSPCONbits.SSPEN = 0;
  1348  00A8  1294               	bcf	20,5	;volatile
  1349                           
  1350                           ;mainMaster.c: 162:         RCSTAbits.SPEN = 1;
  1351  00A9  1798               	bsf	24,7	;volatile
  1352                           
  1353                           ;mainMaster.c: 164:         if (UART_TX_Empty()){
  1354  00AA  120A  158A  21C1  120A  118A  	fcall	_UART_TX_Empty
  1355  00AF  3A00               	xorlw	0
  1356  00B0  1903               	skipnz
  1357  00B1  29B2               	goto	l3535
  1358                           
  1359                           ;mainMaster.c: 165:             UART_Write(temp[0]);
  1360  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  1361  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  1362  00B4  0859               	movf	_temp,w
  1363  00B5  120A  158A  21F5  120A  118A  	fcall	_UART_Write
  1364                           
  1365                           ;mainMaster.c: 166:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1366  00BA  3003               	movlw	3
  1367  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  1368  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  1369  00BD  00C0               	movwf	??_main+1
  1370  00BE  3097               	movlw	151
  1371  00BF  00BF               	movwf	??_main
  1372  00C0                     u3667:	
  1373  00C0  0BBF               	decfsz	??_main,f
  1374  00C1  28C0               	goto	u3667
  1375  00C2  0BC0               	decfsz	??_main+1,f
  1376  00C3  28C0               	goto	u3667
  1377                           
  1378                           ;mainMaster.c: 167:             UART_Write(temp[1]);
  1379  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  1380  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  1381  00C6  085A               	movf	_temp+1,w
  1382  00C7  120A  158A  21F5  120A  118A  	fcall	_UART_Write
  1383                           
  1384                           ;mainMaster.c: 168:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1385  00CC  3003               	movlw	3
  1386  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1387  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1388  00CF  00C0               	movwf	??_main+1
  1389  00D0  3097               	movlw	151
  1390  00D1  00BF               	movwf	??_main
  1391  00D2                     u3677:	
  1392  00D2  0BBF               	decfsz	??_main,f
  1393  00D3  28D2               	goto	u3677
  1394  00D4  0BC0               	decfsz	??_main+1,f
  1395  00D5  28D2               	goto	u3677
  1396                           
  1397                           ;mainMaster.c: 169:             UART_Write(temp[2]);
  1398  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  1399  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  1400  00D8  085B               	movf	_temp+2,w
  1401  00D9  120A  158A  21F5  120A  118A  	fcall	_UART_Write
  1402                           
  1403                           ;mainMaster.c: 170:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1404  00DE  3003               	movlw	3
  1405  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  1406  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  1407  00E1  00C0               	movwf	??_main+1
  1408  00E2  3097               	movlw	151
  1409  00E3  00BF               	movwf	??_main
  1410  00E4                     u3687:	
  1411  00E4  0BBF               	decfsz	??_main,f
  1412  00E5  28E4               	goto	u3687
  1413  00E6  0BC0               	decfsz	??_main+1,f
  1414  00E7  28E4               	goto	u3687
  1415                           
  1416                           ;mainMaster.c: 171:             UART_Write(temp[3]);
  1417  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  1418  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  1419  00EA  085C               	movf	_temp+3,w
  1420  00EB  120A  158A  21F5  120A  118A  	fcall	_UART_Write
  1421                           
  1422                           ;mainMaster.c: 172:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1423  00F0  3003               	movlw	3
  1424  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  1425  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  1426  00F3  00C0               	movwf	??_main+1
  1427  00F4  3097               	movlw	151
  1428  00F5  00BF               	movwf	??_main
  1429  00F6                     u3697:	
  1430  00F6  0BBF               	decfsz	??_main,f
  1431  00F7  28F6               	goto	u3697
  1432  00F8  0BC0               	decfsz	??_main+1,f
  1433  00F9  28F6               	goto	u3697
  1434                           
  1435                           ;mainMaster.c: 173:             UART_Write(temp[4]);
  1436  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  1437  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  1438  00FC  085D               	movf	_temp+4,w
  1439  00FD  120A  158A  21F5  120A  118A  	fcall	_UART_Write
  1440                           
  1441                           ;mainMaster.c: 174:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1442  0102  3003               	movlw	3
  1443  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1444  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1445  0105  00C0               	movwf	??_main+1
  1446  0106  3097               	movlw	151
  1447  0107  00BF               	movwf	??_main
  1448  0108                     u3707:	
  1449  0108  0BBF               	decfsz	??_main,f
  1450  0109  2908               	goto	u3707
  1451  010A  0BC0               	decfsz	??_main+1,f
  1452  010B  2908               	goto	u3707
  1453                           
  1454                           ;mainMaster.c: 175:             UART_Write(time[0]);
  1455  010C  1283               	bcf	3,5	;RP0=0, select bank0
  1456  010D  1303               	bcf	3,6	;RP1=0, select bank0
  1457  010E  085F               	movf	_time,w
  1458  010F  120A  158A  21F5  120A  118A  	fcall	_UART_Write
  1459                           
  1460                           ;mainMaster.c: 176:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1461  0114  3003               	movlw	3
  1462  0115  1283               	bcf	3,5	;RP0=0, select bank0
  1463  0116  1303               	bcf	3,6	;RP1=0, select bank0
  1464  0117  00C0               	movwf	??_main+1
  1465  0118  3097               	movlw	151
  1466  0119  00BF               	movwf	??_main
  1467  011A                     u3717:	
  1468  011A  0BBF               	decfsz	??_main,f
  1469  011B  291A               	goto	u3717
  1470  011C  0BC0               	decfsz	??_main+1,f
  1471  011D  291A               	goto	u3717
  1472                           
  1473                           ;mainMaster.c: 177:             UART_Write(time[1]);
  1474  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1475  011F  1303               	bcf	3,6	;RP1=0, select bank0
  1476  0120  0860               	movf	_time+1,w
  1477  0121  120A  158A  21F5  120A  118A  	fcall	_UART_Write
  1478                           
  1479                           ;mainMaster.c: 178:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1480  0126  3003               	movlw	3
  1481  0127  1283               	bcf	3,5	;RP0=0, select bank0
  1482  0128  1303               	bcf	3,6	;RP1=0, select bank0
  1483  0129  00C0               	movwf	??_main+1
  1484  012A  3097               	movlw	151
  1485  012B  00BF               	movwf	??_main
  1486  012C                     u3727:	
  1487  012C  0BBF               	decfsz	??_main,f
  1488  012D  292C               	goto	u3727
  1489  012E  0BC0               	decfsz	??_main+1,f
  1490  012F  292C               	goto	u3727
  1491                           
  1492                           ;mainMaster.c: 179:             UART_Write(time[2]);
  1493  0130  1283               	bcf	3,5	;RP0=0, select bank0
  1494  0131  1303               	bcf	3,6	;RP1=0, select bank0
  1495  0132  0861               	movf	_time+2,w
  1496  0133  120A  158A  21F5  120A  118A  	fcall	_UART_Write
  1497                           
  1498                           ;mainMaster.c: 180:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1499  0138  3003               	movlw	3
  1500  0139  1283               	bcf	3,5	;RP0=0, select bank0
  1501  013A  1303               	bcf	3,6	;RP1=0, select bank0
  1502  013B  00C0               	movwf	??_main+1
  1503  013C  3097               	movlw	151
  1504  013D  00BF               	movwf	??_main
  1505  013E                     u3737:	
  1506  013E  0BBF               	decfsz	??_main,f
  1507  013F  293E               	goto	u3737
  1508  0140  0BC0               	decfsz	??_main+1,f
  1509  0141  293E               	goto	u3737
  1510                           
  1511                           ;mainMaster.c: 181:             UART_Write(time[3]);
  1512  0142  1283               	bcf	3,5	;RP0=0, select bank0
  1513  0143  1303               	bcf	3,6	;RP1=0, select bank0
  1514  0144  0862               	movf	_time+3,w
  1515  0145  120A  158A  21F5  120A  118A  	fcall	_UART_Write
  1516                           
  1517                           ;mainMaster.c: 182:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1518  014A  3003               	movlw	3
  1519  014B  1283               	bcf	3,5	;RP0=0, select bank0
  1520  014C  1303               	bcf	3,6	;RP1=0, select bank0
  1521  014D  00C0               	movwf	??_main+1
  1522  014E  3097               	movlw	151
  1523  014F  00BF               	movwf	??_main
  1524  0150                     u3747:	
  1525  0150  0BBF               	decfsz	??_main,f
  1526  0151  2950               	goto	u3747
  1527  0152  0BC0               	decfsz	??_main+1,f
  1528  0153  2950               	goto	u3747
  1529                           
  1530                           ;mainMaster.c: 183:             UART_Write(time[4]);
  1531  0154  1283               	bcf	3,5	;RP0=0, select bank0
  1532  0155  1303               	bcf	3,6	;RP1=0, select bank0
  1533  0156  0863               	movf	_time+4,w
  1534  0157  120A  158A  21F5  120A  118A  	fcall	_UART_Write
  1535                           
  1536                           ;mainMaster.c: 184:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1537  015C  3003               	movlw	3
  1538  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1539  015E  1303               	bcf	3,6	;RP1=0, select bank0
  1540  015F  00C0               	movwf	??_main+1
  1541  0160  3097               	movlw	151
  1542  0161  00BF               	movwf	??_main
  1543  0162                     u3757:	
  1544  0162  0BBF               	decfsz	??_main,f
  1545  0163  2962               	goto	u3757
  1546  0164  0BC0               	decfsz	??_main+1,f
  1547  0165  2962               	goto	u3757
  1548                           
  1549                           ;mainMaster.c: 185:             UART_Write(door);
  1550  0166  087A               	movf	_door,w
  1551  0167  120A  158A  21F5  120A  118A  	fcall	_UART_Write
  1552                           
  1553                           ;mainMaster.c: 186:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1554  016C  3003               	movlw	3
  1555  016D  1283               	bcf	3,5	;RP0=0, select bank0
  1556  016E  1303               	bcf	3,6	;RP1=0, select bank0
  1557  016F  00C0               	movwf	??_main+1
  1558  0170  3097               	movlw	151
  1559  0171  00BF               	movwf	??_main
  1560  0172                     u3767:	
  1561  0172  0BBF               	decfsz	??_main,f
  1562  0173  2972               	goto	u3767
  1563  0174  0BC0               	decfsz	??_main+1,f
  1564  0175  2972               	goto	u3767
  1565                           
  1566                           ;mainMaster.c: 187:             UART_Write(trip);
  1567  0176  1283               	bcf	3,5	;RP0=0, select bank0
  1568  0177  1303               	bcf	3,6	;RP1=0, select bank0
  1569  0178  0857               	movf	_trip,w
  1570  0179  120A  158A  21F5  120A  118A  	fcall	_UART_Write
  1571                           
  1572                           ;mainMaster.c: 188:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1573  017E  3003               	movlw	3
  1574  017F  1283               	bcf	3,5	;RP0=0, select bank0
  1575  0180  1303               	bcf	3,6	;RP1=0, select bank0
  1576  0181  00C0               	movwf	??_main+1
  1577  0182  3097               	movlw	151
  1578  0183  00BF               	movwf	??_main
  1579  0184                     u3777:	
  1580  0184  0BBF               	decfsz	??_main,f
  1581  0185  2984               	goto	u3777
  1582  0186  0BC0               	decfsz	??_main+1,f
  1583  0187  2984               	goto	u3777
  1584                           
  1585                           ;mainMaster.c: 189:             UART_Write(PIR);
  1586  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1587  0189  1303               	bcf	3,6	;RP1=0, select bank0
  1588  018A  0856               	movf	_PIR,w
  1589  018B  120A  158A  21F5  120A  118A  	fcall	_UART_Write
  1590                           
  1591                           ;mainMaster.c: 190:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1592  0190  3003               	movlw	3
  1593  0191  1283               	bcf	3,5	;RP0=0, select bank0
  1594  0192  1303               	bcf	3,6	;RP1=0, select bank0
  1595  0193  00C0               	movwf	??_main+1
  1596  0194  3097               	movlw	151
  1597  0195  00BF               	movwf	??_main
  1598  0196                     u3787:	
  1599  0196  0BBF               	decfsz	??_main,f
  1600  0197  2996               	goto	u3787
  1601  0198  0BC0               	decfsz	??_main+1,f
  1602  0199  2996               	goto	u3787
  1603                           
  1604                           ;mainMaster.c: 191:             UART_Write(IR);
  1605  019A  1283               	bcf	3,5	;RP0=0, select bank0
  1606  019B  1303               	bcf	3,6	;RP1=0, select bank0
  1607  019C  0855               	movf	_IR,w
  1608  019D  120A  158A  21F5  120A  118A  	fcall	_UART_Write
  1609                           
  1610                           ;mainMaster.c: 192:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1611  01A2  3003               	movlw	3
  1612  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  1613  01A4  1303               	bcf	3,6	;RP1=0, select bank0
  1614  01A5  00C0               	movwf	??_main+1
  1615  01A6  3097               	movlw	151
  1616  01A7  00BF               	movwf	??_main
  1617  01A8                     u3797:	
  1618  01A8  0BBF               	decfsz	??_main,f
  1619  01A9  29A8               	goto	u3797
  1620  01AA  0BC0               	decfsz	??_main+1,f
  1621  01AB  29A8               	goto	u3797
  1622                           
  1623                           ;mainMaster.c: 193:             UART_Write('A');
  1624  01AC  3041               	movlw	65
  1625  01AD  120A  158A  21F5  120A  118A  	fcall	_UART_Write
  1626  01B2                     l3535:	
  1627                           
  1628                           ;mainMaster.c: 196:         RCSTAbits.SPEN = 0;
  1629  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1630  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1631  01B4  1398               	bcf	24,7	;volatile
  1632                           
  1633                           ;mainMaster.c: 197:         SSPCONbits.SSPEN = 1;
  1634  01B5  1694               	bsf	20,5	;volatile
  1635                           
  1636                           ;mainMaster.c: 199:         if (door == 1){
  1637  01B6  037A               	decf	_door,w
  1638  01B7  1D03               	btfss	3,2
  1639  01B8  29BB               	goto	l3543
  1640                           
  1641                           ;mainMaster.c: 200:             val = 8;
  1642  01B9  3008               	movlw	8
  1643  01BA  29BF               	goto	L1
  1644  01BB                     l3543:	
  1645                           ;mainMaster.c: 201:         } else if (door == 0){
  1646                           
  1647  01BB  087A               	movf	_door,w
  1648  01BC  1D03               	btfss	3,2
  1649  01BD  29D6               	goto	l3565
  1650                           
  1651                           ;mainMaster.c: 202:             val = 17;
  1652  01BE  3011               	movlw	17
  1653  01BF                     L1:	
  1654  01BF  00BF               	movwf	??_main
  1655  01C0  083F               	movf	??_main,w
  1656  01C1  00CA               	movwf	_val
  1657  01C2  29D6               	goto	l3565
  1658  01C3                     l3547:	
  1659                           
  1660                           ;mainMaster.c: 207:                 day2 = "LUNES    ";
  1661  01C3  302D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1662  01C4  29D2               	goto	L8
  1663  01C5                     l3549:	
  1664                           ;mainMaster.c: 208:                 break;
  1665                           
  1666                           
  1667                           ;mainMaster.c: 210:                 day2 = "MARTES   ";
  1668  01C5  3041               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1669  01C6  29D2               	goto	L8
  1670  01C7                     l3551:	
  1671                           ;mainMaster.c: 211:                 break;
  1672                           
  1673                           
  1674                           ;mainMaster.c: 213:                 day2 = "MIERCOLES";
  1675  01C7  3069               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1676  01C8  29D2               	goto	L8
  1677  01C9                     l3553:	
  1678                           ;mainMaster.c: 214:                 break;
  1679                           
  1680                           
  1681                           ;mainMaster.c: 216:                 day2 = "JUEVES   ";
  1682  01C9  304B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1683  01CA  29D2               	goto	L8
  1684  01CB                     l3555:	
  1685                           ;mainMaster.c: 217:                 break;
  1686                           
  1687                           
  1688                           ;mainMaster.c: 219:                 day2 = "VIERNES  ";
  1689  01CB  305F               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1690  01CC  29D2               	goto	L8
  1691  01CD                     l3557:	
  1692                           ;mainMaster.c: 220:                 break;
  1693                           
  1694                           
  1695                           ;mainMaster.c: 222:                 day2 = "SABADO   ";
  1696  01CD  3037               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1697  01CE  29D2               	goto	L8
  1698  01CF                     l3559:	
  1699                           ;mainMaster.c: 223:                 break;
  1700                           
  1701                           
  1702                           ;mainMaster.c: 225:                 day2 = "DOMINGO  ";
  1703  01CF  3055               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1704  01D0  29D2               	goto	L8
  1705  01D1                     l3561:	
  1706                           ;mainMaster.c: 226:                 break;
  1707                           
  1708                           
  1709                           ;mainMaster.c: 228:                 day2 = "         ";
  1710  01D1  3023               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1711  01D2                     L8:	
  1712  01D2  00BF               	movwf	??_main
  1713  01D3  083F               	movf	??_main,w
  1714  01D4  00D8               	movwf	_day2
  1715                           
  1716                           ;mainMaster.c: 229:                 break;
  1717  01D5  29F5               	goto	l3567
  1718  01D6                     l3565:	
  1719  01D6  0854               	movf	_day1,w
  1720  01D7  00BF               	movwf	??_main
  1721  01D8  01C0               	clrf	??_main+1
  1722                           
  1723                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1724                           ; Switch size 1, requested type "simple"
  1725                           ; Number of cases is 1, Range of values is 0 to 0
  1726                           ; switch strategies available:
  1727                           ; Name         Instructions Cycles
  1728                           ; simple_byte            4     3 (average)
  1729                           ; direct_byte           11     8 (fixed)
  1730                           ; jumptable            260     6 (fixed)
  1731                           ;	Chosen strategy is simple_byte
  1732  01D9  0840               	movf	??_main+1,w
  1733  01DA  3A00               	xorlw	0	; case 0
  1734  01DB  1903               	skipnz
  1735  01DC  29DE               	goto	l3751
  1736  01DD  29D1               	goto	l3561
  1737  01DE                     l3751:	
  1738                           
  1739                           ; Switch size 1, requested type "simple"
  1740                           ; Number of cases is 7, Range of values is 1 to 7
  1741                           ; switch strategies available:
  1742                           ; Name         Instructions Cycles
  1743                           ; simple_byte           22    12 (average)
  1744                           ; direct_byte           32    11 (fixed)
  1745                           ; jumptable            263     9 (fixed)
  1746                           ;	Chosen strategy is simple_byte
  1747  01DE  083F               	movf	??_main,w
  1748  01DF  3A01               	xorlw	1	; case 1
  1749  01E0  1903               	skipnz
  1750  01E1  29C3               	goto	l3547
  1751  01E2  3A03               	xorlw	3	; case 2
  1752  01E3  1903               	skipnz
  1753  01E4  29C5               	goto	l3549
  1754  01E5  3A01               	xorlw	1	; case 3
  1755  01E6  1903               	skipnz
  1756  01E7  29C7               	goto	l3551
  1757  01E8  3A07               	xorlw	7	; case 4
  1758  01E9  1903               	skipnz
  1759  01EA  29C9               	goto	l3553
  1760  01EB  3A01               	xorlw	1	; case 5
  1761  01EC  1903               	skipnz
  1762  01ED  29CB               	goto	l3555
  1763  01EE  3A03               	xorlw	3	; case 6
  1764  01EF  1903               	skipnz
  1765  01F0  29CD               	goto	l3557
  1766  01F1  3A01               	xorlw	1	; case 7
  1767  01F2  1903               	skipnz
  1768  01F3  29CF               	goto	l3559
  1769  01F4  29D1               	goto	l3561
  1770  01F5                     l3567:	
  1771                           
  1772                           ;mainMaster.c: 233:         if (strcmp(temp,"23.50") > 0){
  1773  01F5  30A2               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1774  01F6  00BF               	movwf	??_main
  1775  01F7  083F               	movf	??_main,w
  1776  01F8  00F3               	movwf	strcmp@s2
  1777  01F9  3059               	movlw	(low (_temp| 0))& (0+255)
  1778  01FA  120A  158A  2349  120A  118A  	fcall	_strcmp
  1779  01FF  0874               	movf	?_strcmp+1,w
  1780  0200  3A80               	xorlw	128
  1781  0201  00FF               	movwf	127
  1782  0202  3080               	movlw	128
  1783  0203  027F               	subwf	127,w
  1784  0204  1D03               	skipz
  1785  0205  2A08               	goto	u3415
  1786  0206  3001               	movlw	1
  1787  0207  0273               	subwf	?_strcmp,w
  1788  0208                     u3415:	
  1789  0208  1C03               	skipc
  1790  0209  2A0E               	goto	l331
  1791                           
  1792                           ;mainMaster.c: 234:             PORTAbits.RA0 = 1;
  1793  020A  1283               	bcf	3,5	;RP0=0, select bank0
  1794  020B  1303               	bcf	3,6	;RP1=0, select bank0
  1795  020C  1405               	bsf	5,0	;volatile
  1796                           
  1797                           ;mainMaster.c: 235:         } else {
  1798  020D  2A11               	goto	l332
  1799  020E                     l331:	
  1800                           
  1801                           ;mainMaster.c: 236:             PORTAbits.RA0 = 0;
  1802  020E  1283               	bcf	3,5	;RP0=0, select bank0
  1803  020F  1303               	bcf	3,6	;RP1=0, select bank0
  1804  0210  1005               	bcf	5,0	;volatile
  1805  0211                     l332:	
  1806                           ;mainMaster.c: 237:         }
  1807                           
  1808                           
  1809                           ;mainMaster.c: 240:         if(PORTCbits.RC0 == 1){
  1810  0211  1C07               	btfss	7,0	;volatile
  1811  0212  2A32               	goto	l3585
  1812                           
  1813                           ;mainMaster.c: 241:             if (change == 0){
  1814  0213  0851               	movf	_change,w
  1815  0214  1D03               	btfss	3,2
  1816  0215  2A33               	goto	l3587
  1817                           
  1818                           ;mainMaster.c: 242:                 state++;
  1819  0216  3001               	movlw	1
  1820  0217  00BF               	movwf	??_main
  1821  0218  083F               	movf	??_main,w
  1822  0219  07F9               	addwf	_state,f
  1823                           
  1824                           ;mainMaster.c: 243:                 Lcd_Clear();
  1825  021A  120A  118A  27F2  120A  118A  	fcall	_Lcd_Clear
  1826                           
  1827                           ;mainMaster.c: 244:                 if (state > 3){
  1828  021F  3004               	movlw	4
  1829  0220  0279               	subwf	_state,w
  1830  0221  1803               	btfsc	3,0
  1831                           
  1832                           ;mainMaster.c: 245:                     state = 0;
  1833  0222  01F9               	clrf	_state
  1834                           
  1835                           ;mainMaster.c: 247:                 j = 0;
  1836                           
  1837                           ;mainMaster.c: 246:                 }
  1838  0223  1283               	bcf	3,5	;RP0=0, select bank0
  1839  0224  1303               	bcf	3,6	;RP1=0, select bank0
  1840  0225  01D2               	clrf	_j
  1841  0226                     l3583:	
  1842                           ;mainMaster.c: 248:                 while(j < 50){
  1843                           
  1844                           
  1845                           ;mainMaster.c: 248:                 while(j < 50){
  1846  0226  3032               	movlw	50
  1847  0227  0252               	subwf	_j,w
  1848  0228  1803               	btfsc	3,0
  1849  0229  2A2F               	goto	l338
  1850                           
  1851                           ;mainMaster.c: 249:                     j++;
  1852  022A  3001               	movlw	1
  1853  022B  00BF               	movwf	??_main
  1854  022C  083F               	movf	??_main,w
  1855  022D  07D2               	addwf	_j,f
  1856  022E  2A26               	goto	l3583
  1857  022F                     l338:	
  1858                           
  1859                           ;mainMaster.c: 252:                 change = 1;
  1860  022F  01D1               	clrf	_change
  1861  0230  0AD1               	incf	_change,f
  1862  0231  2A33               	goto	l3587
  1863  0232                     l3585:	
  1864                           
  1865                           ;mainMaster.c: 255:             change =0;
  1866  0232  01D1               	clrf	_change
  1867  0233                     l3587:	
  1868                           
  1869                           ;mainMaster.c: 258:         if (state == 0){
  1870  0233  0879               	movf	_state,w
  1871  0234  1D03               	btfss	3,2
  1872  0235  2A82               	goto	l3599
  1873                           
  1874                           ;mainMaster.c: 260:             Lcd_Set_Cursor(1,1);
  1875  0236  01F7               	clrf	Lcd_Set_Cursor@b
  1876  0237  0AF7               	incf	Lcd_Set_Cursor@b,f
  1877  0238  3001               	movlw	1
  1878  0239  120A  158A  2566  120A  118A  	fcall	_Lcd_Set_Cursor
  1879                           
  1880                           ;mainMaster.c: 261:             Lcd_Write_String(time);
  1881  023E  305F               	movlw	(low (_time| 0))& (0+255)
  1882  023F  1283               	bcf	3,5	;RP0=0, select bank0
  1883  0240  1303               	bcf	3,6	;RP1=0, select bank0
  1884  0241  00A0               	movwf	Lcd_Write_String@a
  1885  0242  3000               	movlw	0
  1886  0243  00A1               	movwf	Lcd_Write_String@a+1
  1887  0244  120A  158A  2492  120A  118A  	fcall	_Lcd_Write_String
  1888                           
  1889                           ;mainMaster.c: 263:             Lcd_Set_Cursor(1,7);
  1890  0249  3007               	movlw	7
  1891  024A  1283               	bcf	3,5	;RP0=0, select bank0
  1892  024B  1303               	bcf	3,6	;RP1=0, select bank0
  1893  024C  00BF               	movwf	??_main
  1894  024D  083F               	movf	??_main,w
  1895  024E  00F7               	movwf	Lcd_Set_Cursor@b
  1896  024F  3001               	movlw	1
  1897  0250  120A  158A  2566  120A  118A  	fcall	_Lcd_Set_Cursor
  1898                           
  1899                           ;mainMaster.c: 264:             Lcd_Write_String(day2);
  1900  0255  1283               	bcf	3,5	;RP0=0, select bank0
  1901  0256  1303               	bcf	3,6	;RP1=0, select bank0
  1902  0257  0858               	movf	_day2,w
  1903  0258  00A0               	movwf	Lcd_Write_String@a
  1904  0259  3000               	movlw	0
  1905  025A  1D03               	btfss	3,2
  1906  025B  3080               	movlw	128
  1907  025C  00A1               	movwf	Lcd_Write_String@a+1
  1908  025D  120A  158A  2492  120A  118A  	fcall	_Lcd_Write_String
  1909                           
  1910                           ;mainMaster.c: 266:             Lcd_Set_Cursor(2,1);
  1911  0262  01F7               	clrf	Lcd_Set_Cursor@b
  1912  0263  0AF7               	incf	Lcd_Set_Cursor@b,f
  1913  0264  3002               	movlw	2
  1914  0265  120A  158A  2566  120A  118A  	fcall	_Lcd_Set_Cursor
  1915                           
  1916                           ;mainMaster.c: 267:             Lcd_Write_String(temp);
  1917  026A  3059               	movlw	(low (_temp| 0))& (0+255)
  1918  026B  1283               	bcf	3,5	;RP0=0, select bank0
  1919  026C  1303               	bcf	3,6	;RP1=0, select bank0
  1920  026D  00A0               	movwf	Lcd_Write_String@a
  1921  026E  3000               	movlw	0
  1922  026F  00A1               	movwf	Lcd_Write_String@a+1
  1923  0270  120A  158A  2492  120A  118A  	fcall	_Lcd_Write_String
  1924                           
  1925                           ;mainMaster.c: 268:             Lcd_Write_Char(223);
  1926  0275  30DF               	movlw	223
  1927  0276  120A  158A  23E1  120A  118A  	fcall	_Lcd_Write_Char
  1928                           
  1929                           ;mainMaster.c: 269:             Lcd_Write_Char('C');
  1930  027B  3043               	movlw	67
  1931  027C  120A  158A  23E1  120A  118A  	fcall	_Lcd_Write_Char
  1932                           
  1933                           ;mainMaster.c: 271:         } else if (state == 1){
  1934  0281  282B               	goto	l3441
  1935  0282                     l3599:	
  1936  0282  0379               	decf	_state,w
  1937  0283  1D03               	btfss	3,2
  1938  0284  2ABE               	goto	l3617
  1939                           
  1940                           ;mainMaster.c: 273:             Lcd_Set_Cursor(1,1);
  1941  0285  01F7               	clrf	Lcd_Set_Cursor@b
  1942  0286  0AF7               	incf	Lcd_Set_Cursor@b,f
  1943  0287  3001               	movlw	1
  1944  0288  120A  158A  2566  120A  118A  	fcall	_Lcd_Set_Cursor
  1945                           
  1946                           ;mainMaster.c: 274:             if (door == 1){
  1947  028D  037A               	decf	_door,w
  1948  028E  1D03               	btfss	3,2
  1949  028F  2A92               	goto	l3607
  1950                           
  1951                           ;mainMaster.c: 275:                 Lcd_Write_String("Door OPEN  ");
  1952  0290  300B               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1953  0291  2A93               	goto	L9
  1954  0292                     l3607:	
  1955                           ;mainMaster.c: 276:             } else {
  1956                           
  1957                           
  1958                           ;mainMaster.c: 277:                 Lcd_Write_String("Door CLOSED");
  1959  0292  3017               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1960  0293                     L9:	
  1961  0293  1283               	bcf	3,5	;RP0=0, select bank0
  1962  0294  1303               	bcf	3,6	;RP1=0, select bank0
  1963  0295  00A0               	movwf	Lcd_Write_String@a
  1964  0296  3080               	movlw	128
  1965  0297  00A1               	movwf	Lcd_Write_String@a+1
  1966  0298  120A  158A  2492  120A  118A  	fcall	_Lcd_Write_String
  1967                           
  1968                           ;mainMaster.c: 280:             Lcd_Set_Cursor(2,1);
  1969  029D  01F7               	clrf	Lcd_Set_Cursor@b
  1970  029E  0AF7               	incf	Lcd_Set_Cursor@b,f
  1971  029F  3002               	movlw	2
  1972  02A0  120A  158A  2566  120A  118A  	fcall	_Lcd_Set_Cursor
  1973                           
  1974                           ;mainMaster.c: 281:             if (trip == 1){
  1975  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  1976  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  1977  02A7  0357               	decf	_trip,w
  1978  02A8  1D03               	btfss	3,2
  1979  02A9  2AB4               	goto	l3615
  1980                           
  1981                           ;mainMaster.c: 282:                 Lcd_Write_String("Trip ON ");
  1982  02AA  3073               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1983  02AB  00A0               	movwf	Lcd_Write_String@a
  1984  02AC  3080               	movlw	128
  1985  02AD  00A1               	movwf	Lcd_Write_String@a+1
  1986  02AE  120A  158A  2492  120A  118A  	fcall	_Lcd_Write_String
  1987                           
  1988                           ;mainMaster.c: 283:             } else {
  1989  02B3  282B               	goto	l3441
  1990  02B4                     l3615:	
  1991                           
  1992                           ;mainMaster.c: 284:                 Lcd_Write_String("Trip OFF");
  1993  02B4  307C               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1994  02B5  00A0               	movwf	Lcd_Write_String@a
  1995  02B6  3080               	movlw	128
  1996  02B7  00A1               	movwf	Lcd_Write_String@a+1
  1997  02B8  120A  158A  2492  120A  118A  	fcall	_Lcd_Write_String
  1998  02BD  282B               	goto	l3441
  1999  02BE                     l3617:	
  2000  02BE  3002               	movlw	2
  2001  02BF  0679               	xorwf	_state,w
  2002  02C0  1D03               	btfss	3,2
  2003  02C1  2AFB               	goto	l3635
  2004                           
  2005                           ;mainMaster.c: 289:             Lcd_Set_Cursor(1,1);
  2006  02C2  01F7               	clrf	Lcd_Set_Cursor@b
  2007  02C3  0AF7               	incf	Lcd_Set_Cursor@b,f
  2008  02C4  3001               	movlw	1
  2009  02C5  120A  158A  2566  120A  118A  	fcall	_Lcd_Set_Cursor
  2010                           
  2011                           ;mainMaster.c: 290:             if (PIR == 1){
  2012  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  2013  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  2014  02CC  0356               	decf	_PIR,w
  2015  02CD  1D03               	btfss	3,2
  2016  02CE  2AD1               	goto	l3625
  2017                           
  2018                           ;mainMaster.c: 291:                 Lcd_Write_String("PIR ON ");
  2019  02CF  3085               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2020  02D0  2AD2               	goto	L10
  2021  02D1                     l3625:	
  2022                           ;mainMaster.c: 292:             } else {
  2023                           
  2024                           
  2025                           ;mainMaster.c: 293:                 Lcd_Write_String("PIR OFF");
  2026  02D1  308D               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2027  02D2                     L10:	
  2028  02D2  00A0               	movwf	Lcd_Write_String@a
  2029  02D3  3080               	movlw	128
  2030  02D4  00A1               	movwf	Lcd_Write_String@a+1
  2031  02D5  120A  158A  2492  120A  118A  	fcall	_Lcd_Write_String
  2032                           
  2033                           ;mainMaster.c: 296:             Lcd_Set_Cursor(2,1);
  2034  02DA  01F7               	clrf	Lcd_Set_Cursor@b
  2035  02DB  0AF7               	incf	Lcd_Set_Cursor@b,f
  2036  02DC  3002               	movlw	2
  2037  02DD  120A  158A  2566  120A  118A  	fcall	_Lcd_Set_Cursor
  2038                           
  2039                           ;mainMaster.c: 297:             if (IR == 1){
  2040  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  2041  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  2042  02E4  0355               	decf	_IR,w
  2043  02E5  1D03               	btfss	3,2
  2044  02E6  2AF1               	goto	l3633
  2045                           
  2046                           ;mainMaster.c: 298:                 Lcd_Write_String("IR ON ");
  2047  02E7  3086               	movlw	(low (((STR_14+1)-__stringbase)| (0+32768)))& (0+255)
  2048  02E8  00A0               	movwf	Lcd_Write_String@a
  2049  02E9  3080               	movlw	128
  2050  02EA  00A1               	movwf	Lcd_Write_String@a+1
  2051  02EB  120A  158A  2492  120A  118A  	fcall	_Lcd_Write_String
  2052                           
  2053                           ;mainMaster.c: 299:             } else {
  2054  02F0  282B               	goto	l3441
  2055  02F1                     l3633:	
  2056                           
  2057                           ;mainMaster.c: 300:                 Lcd_Write_String("IR OFF");
  2058  02F1  308E               	movlw	(low (((STR_15+1)-__stringbase)| (0+32768)))& (0+255)
  2059  02F2  00A0               	movwf	Lcd_Write_String@a
  2060  02F3  3080               	movlw	128
  2061  02F4  00A1               	movwf	Lcd_Write_String@a+1
  2062  02F5  120A  158A  2492  120A  118A  	fcall	_Lcd_Write_String
  2063  02FA  282B               	goto	l3441
  2064  02FB                     l3635:	
  2065  02FB  3003               	movlw	3
  2066  02FC  0679               	xorwf	_state,w
  2067  02FD  1D03               	btfss	3,2
  2068  02FE  282B               	goto	l3441
  2069                           
  2070                           ;mainMaster.c: 303:             Lcd_Set_Cursor(1,1);
  2071  02FF  01F7               	clrf	Lcd_Set_Cursor@b
  2072  0300  0AF7               	incf	Lcd_Set_Cursor@b,f
  2073  0301  3001               	movlw	1
  2074  0302  120A  158A  2566  120A  118A  	fcall	_Lcd_Set_Cursor
  2075                           
  2076                           ;mainMaster.c: 304:             Lcd_Write_String("HORA: ");
  2077  0307  3095               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  2078  0308  1283               	bcf	3,5	;RP0=0, select bank0
  2079  0309  1303               	bcf	3,6	;RP1=0, select bank0
  2080  030A  00A0               	movwf	Lcd_Write_String@a
  2081  030B  3080               	movlw	128
  2082  030C  00A1               	movwf	Lcd_Write_String@a+1
  2083  030D  120A  158A  2492  120A  118A  	fcall	_Lcd_Write_String
  2084                           
  2085                           ;mainMaster.c: 305:             Lcd_Write_String(time);
  2086  0312  305F               	movlw	(low (_time| 0))& (0+255)
  2087  0313  1283               	bcf	3,5	;RP0=0, select bank0
  2088  0314  1303               	bcf	3,6	;RP1=0, select bank0
  2089  0315  00A0               	movwf	Lcd_Write_String@a
  2090  0316  3000               	movlw	0
  2091  0317  00A1               	movwf	Lcd_Write_String@a+1
  2092  0318  120A  158A  2492  120A  118A  	fcall	_Lcd_Write_String
  2093                           
  2094                           ;mainMaster.c: 307:             Lcd_Set_Cursor(2,1);
  2095  031D  01F7               	clrf	Lcd_Set_Cursor@b
  2096  031E  0AF7               	incf	Lcd_Set_Cursor@b,f
  2097  031F  3002               	movlw	2
  2098  0320  120A  158A  2566  120A  118A  	fcall	_Lcd_Set_Cursor
  2099                           
  2100                           ;mainMaster.c: 308:             Lcd_Write_String("DIA: ");
  2101  0325  309C               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  2102  0326  1283               	bcf	3,5	;RP0=0, select bank0
  2103  0327  1303               	bcf	3,6	;RP1=0, select bank0
  2104  0328  00A0               	movwf	Lcd_Write_String@a
  2105  0329  3080               	movlw	128
  2106  032A  00A1               	movwf	Lcd_Write_String@a+1
  2107  032B  120A  158A  2492  120A  118A  	fcall	_Lcd_Write_String
  2108                           
  2109                           ;mainMaster.c: 309:             Lcd_Write_String(day2);
  2110  0330  1283               	bcf	3,5	;RP0=0, select bank0
  2111  0331  1303               	bcf	3,6	;RP1=0, select bank0
  2112  0332  0858               	movf	_day2,w
  2113  0333  00A0               	movwf	Lcd_Write_String@a
  2114  0334  3000               	movlw	0
  2115  0335  1D03               	btfss	3,2
  2116  0336  3080               	movlw	128
  2117  0337  00A1               	movwf	Lcd_Write_String@a+1
  2118  0338  120A  158A  2492  120A  118A  	fcall	_Lcd_Write_String
  2119                           
  2120                           ;mainMaster.c: 311:             newhour = (time[0] - '0') * 10 + (time[1] - '0');
  2121  033D  300A               	movlw	10
  2122  033E  1283               	bcf	3,5	;RP0=0, select bank0
  2123  033F  1303               	bcf	3,6	;RP1=0, select bank0
  2124  0340  00BF               	movwf	??_main
  2125  0341  083F               	movf	??_main,w
  2126  0342  00F3               	movwf	___bmul@multiplicand
  2127  0343  085F               	movf	_time,w
  2128  0344  120A  158A  21FF  120A  118A  	fcall	___bmul
  2129  0349  1283               	bcf	3,5	;RP0=0, select bank0
  2130  034A  1303               	bcf	3,6	;RP1=0, select bank0
  2131  034B  0760               	addwf	_time+1,w
  2132  034C  3EF0               	addlw	240
  2133  034D  00C0               	movwf	??_main+1
  2134  034E  0840               	movf	??_main+1,w
  2135  034F  00F8               	movwf	_newhour
  2136                           
  2137                           ;mainMaster.c: 312:             newmin = (time[3] - '0') * 10 + (time[4] - '0');
  2138  0350  300A               	movlw	10
  2139  0351  00BF               	movwf	??_main
  2140  0352  083F               	movf	??_main,w
  2141  0353  00F3               	movwf	___bmul@multiplicand
  2142  0354  0862               	movf	_time+3,w
  2143  0355  120A  158A  21FF  120A  118A  	fcall	___bmul
  2144  035A  1283               	bcf	3,5	;RP0=0, select bank0
  2145  035B  1303               	bcf	3,6	;RP1=0, select bank0
  2146  035C  0763               	addwf	_time+4,w
  2147  035D  3EF0               	addlw	240
  2148  035E  00C0               	movwf	??_main+1
  2149  035F  0840               	movf	??_main+1,w
  2150  0360  00C7               	movwf	_newmin
  2151                           
  2152                           ;mainMaster.c: 314:             if (PORTDbits.RD4 == 1){
  2153  0361  1E08               	btfss	8,4	;volatile
  2154  0362  2B6D               	goto	l355
  2155                           
  2156                           ;mainMaster.c: 315:                 newhour++;
  2157  0363  3001               	movlw	1
  2158  0364  00BF               	movwf	??_main
  2159  0365  083F               	movf	??_main,w
  2160  0366  07F8               	addwf	_newhour,f
  2161                           
  2162                           ;mainMaster.c: 316:                 if (newhour > 23){
  2163  0367  3018               	movlw	24
  2164  0368  0278               	subwf	_newhour,w
  2165  0369  1C03               	skipc
  2166  036A  2B9D               	goto	l3655
  2167                           
  2168                           ;mainMaster.c: 317:                     newhour = 0;
  2169  036B  01F8               	clrf	_newhour
  2170                           
  2171                           ;mainMaster.c: 320:             } else if (PORTDbits.RD3 == 1){
  2172  036C  2B9D               	goto	l3655
  2173  036D                     l355:	
  2174  036D  1D88               	btfss	8,3	;volatile
  2175  036E  2B79               	goto	l358
  2176                           
  2177                           ;mainMaster.c: 321:                 newhour--;
  2178  036F  3001               	movlw	1
  2179  0370  02F8               	subwf	_newhour,f
  2180                           
  2181                           ;mainMaster.c: 322:                 if (newhour == 255){
  2182  0371  0A78               	incf	_newhour,w
  2183  0372  1D03               	btfss	3,2
  2184  0373  2B9D               	goto	l3655
  2185                           
  2186                           ;mainMaster.c: 323:                     newhour = 23;
  2187  0374  3017               	movlw	23
  2188  0375  00BF               	movwf	??_main
  2189  0376  083F               	movf	??_main,w
  2190  0377  00F8               	movwf	_newhour
  2191  0378  2B9D               	goto	l3655
  2192  0379                     l358:	
  2193  0379  1D08               	btfss	8,2	;volatile
  2194  037A  2B85               	goto	l361
  2195                           
  2196                           ;mainMaster.c: 327:                 newmin++;
  2197  037B  3001               	movlw	1
  2198  037C  00BF               	movwf	??_main
  2199  037D  083F               	movf	??_main,w
  2200  037E  07C7               	addwf	_newmin,f
  2201                           
  2202                           ;mainMaster.c: 328:                 if (newmin > 59){
  2203  037F  303C               	movlw	60
  2204  0380  0247               	subwf	_newmin,w
  2205  0381  1C03               	skipc
  2206  0382  2B9D               	goto	l3655
  2207                           
  2208                           ;mainMaster.c: 329:                     newmin = 0;
  2209  0383  01C7               	clrf	_newmin
  2210  0384  2B9D               	goto	l3655
  2211  0385                     l361:	
  2212  0385  1C88               	btfss	8,1	;volatile
  2213  0386  2B91               	goto	l364
  2214                           
  2215                           ;mainMaster.c: 333:                 newmin--;
  2216  0387  3001               	movlw	1
  2217  0388  02C7               	subwf	_newmin,f
  2218                           
  2219                           ;mainMaster.c: 334:                 if (newmin == 255){
  2220  0389  0A47               	incf	_newmin,w
  2221  038A  1D03               	btfss	3,2
  2222  038B  2B9D               	goto	l3655
  2223                           
  2224                           ;mainMaster.c: 335:                     newmin = 59;
  2225  038C  303B               	movlw	59
  2226  038D  00BF               	movwf	??_main
  2227  038E  083F               	movf	??_main,w
  2228  038F  00C7               	movwf	_newmin
  2229  0390  2B9D               	goto	l3655
  2230  0391                     l364:	
  2231  0391  1C08               	btfss	8,0	;volatile
  2232  0392  2BAC               	goto	l3681
  2233                           
  2234                           ;mainMaster.c: 339:                 day1++;
  2235  0393  3001               	movlw	1
  2236  0394  00BF               	movwf	??_main
  2237  0395  083F               	movf	??_main,w
  2238  0396  07D4               	addwf	_day1,f
  2239                           
  2240                           ;mainMaster.c: 340:                 if (day1 > 7){
  2241  0397  3008               	movlw	8
  2242  0398  0254               	subwf	_day1,w
  2243  0399  1C03               	skipc
  2244  039A  2B9D               	goto	l3655
  2245                           
  2246                           ;mainMaster.c: 341:                     day1 = 1;
  2247  039B  01D4               	clrf	_day1
  2248  039C  0AD4               	incf	_day1,f
  2249  039D                     l3655:	
  2250                           
  2251                           ;mainMaster.c: 319:                 _delay((unsigned long)((100)*(8000000/4000.0)));
  2252  039D  3002               	movlw	2
  2253  039E  1283               	bcf	3,5	;RP0=0, select bank0
  2254  039F  1303               	bcf	3,6	;RP1=0, select bank0
  2255  03A0  00C1               	movwf	??_main+2
  2256  03A1  3004               	movlw	4
  2257  03A2  00C0               	movwf	??_main+1
  2258  03A3  30B9               	movlw	185
  2259  03A4  00BF               	movwf	??_main
  2260  03A5                     u3807:	
  2261  03A5  0BBF               	decfsz	??_main,f
  2262  03A6  2BA5               	goto	u3807
  2263  03A7  0BC0               	decfsz	??_main+1,f
  2264  03A8  2BA5               	goto	u3807
  2265  03A9  0BC1               	decfsz	??_main+2,f
  2266  03AA  2BA5               	goto	u3807
  2267  03AB  2BAC               	nop2
  2268  03AC                     l3681:	
  2269                           
  2270                           ;mainMaster.c: 346:             hour = ((newhour / 10) << 4) + (newhour % 10);
  2271  03AC  300A               	movlw	10
  2272  03AD  00F3               	movwf	___awdiv@divisor
  2273  03AE  3000               	movlw	0
  2274  03AF  00F4               	movwf	___awdiv@divisor+1
  2275  03B0  0878               	movf	_newhour,w
  2276  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  2277  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  2278  03B3  00BF               	movwf	??_main
  2279  03B4  01C0               	clrf	??_main+1
  2280  03B5  083F               	movf	??_main,w
  2281  03B6  00F5               	movwf	___awdiv@dividend
  2282  03B7  0840               	movf	??_main+1,w
  2283  03B8  00F6               	movwf	___awdiv@dividend+1
  2284  03B9  120A  158A  265C  120A  118A  	fcall	___awdiv
  2285  03BE  0873               	movf	?___awdiv,w
  2286  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  2287  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  2288  03C1  00C1               	movwf	??_main+2
  2289  03C2  3004               	movlw	4
  2290  03C3                     u3645:	
  2291  03C3  1003               	clrc
  2292  03C4  0DC1               	rlf	??_main+2,f
  2293  03C5  3EFF               	addlw	-1
  2294  03C6  1D03               	skipz
  2295  03C7  2BC3               	goto	u3645
  2296  03C8  300A               	movlw	10
  2297  03C9  00F3               	movwf	___awmod@divisor
  2298  03CA  3000               	movlw	0
  2299  03CB  00F4               	movwf	___awmod@divisor+1
  2300  03CC  0878               	movf	_newhour,w
  2301  03CD  00C2               	movwf	??_main+3
  2302  03CE  01C3               	clrf	??_main+4
  2303  03CF  0842               	movf	??_main+3,w
  2304  03D0  00F5               	movwf	___awmod@dividend
  2305  03D1  0843               	movf	??_main+4,w
  2306  03D2  00F6               	movwf	___awmod@dividend+1
  2307  03D3  120A  158A  2519  120A  118A  	fcall	___awmod
  2308  03D8  0873               	movf	?___awmod,w
  2309  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  2310  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  2311  03DB  0741               	addwf	??_main+2,w
  2312  03DC  00C4               	movwf	??_main+5
  2313  03DD  0844               	movf	??_main+5,w
  2314  03DE  00C9               	movwf	_hour
  2315                           
  2316                           ;mainMaster.c: 347:             min = ((newmin / 10) << 4) + (newmin % 10);
  2317  03DF  300A               	movlw	10
  2318  03E0  00F3               	movwf	___awdiv@divisor
  2319  03E1  3000               	movlw	0
  2320  03E2  00F4               	movwf	___awdiv@divisor+1
  2321  03E3  0847               	movf	_newmin,w
  2322  03E4  00BF               	movwf	??_main
  2323  03E5  01C0               	clrf	??_main+1
  2324  03E6  083F               	movf	??_main,w
  2325  03E7  00F5               	movwf	___awdiv@dividend
  2326  03E8  0840               	movf	??_main+1,w
  2327  03E9  00F6               	movwf	___awdiv@dividend+1
  2328  03EA  120A  158A  265C  120A  118A  	fcall	___awdiv
  2329  03EF  0873               	movf	?___awdiv,w
  2330  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  2331  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  2332  03F2  00C1               	movwf	??_main+2
  2333  03F3  3004               	movlw	4
  2334  03F4                     u3655:	
  2335  03F4  1003               	clrc
  2336  03F5  0DC1               	rlf	??_main+2,f
  2337  03F6  3EFF               	addlw	-1
  2338  03F7  1D03               	skipz
  2339  03F8  2BF4               	goto	u3655
  2340  03F9  300A               	movlw	10
  2341  03FA  00F3               	movwf	___awmod@divisor
  2342  03FB  3000               	movlw	0
  2343  03FC  00F4               	movwf	___awmod@divisor+1
  2344  03FD  0847               	movf	_newmin,w
  2345  03FE  00C2               	movwf	??_main+3
  2346  03FF  01C3               	clrf	??_main+4
  2347  0400  0842               	movf	??_main+3,w
  2348  0401  00F5               	movwf	___awmod@dividend
  2349  0402  0843               	movf	??_main+4,w
  2350  0403  00F6               	movwf	___awmod@dividend+1
  2351  0404  120A  158A  2519  120A  118A  	fcall	___awmod
  2352  0409  0873               	movf	?___awmod,w
  2353  040A  1283               	bcf	3,5	;RP0=0, select bank0
  2354  040B  1303               	bcf	3,6	;RP1=0, select bank0
  2355  040C  0741               	addwf	??_main+2,w
  2356  040D  00C4               	movwf	??_main+5
  2357  040E  0844               	movf	??_main+5,w
  2358  040F  00C8               	movwf	_min
  2359                           
  2360                           ;mainMaster.c: 348:             write_RTC(hour, min, day1);
  2361  0410  0848               	movf	_min,w
  2362  0411  00BF               	movwf	??_main
  2363  0412  083F               	movf	??_main,w
  2364  0413  00F5               	movwf	write_RTC@minutes
  2365  0414  0854               	movf	_day1,w
  2366  0415  00C0               	movwf	??_main+1
  2367  0416  0840               	movf	??_main+1,w
  2368  0417  00F6               	movwf	write_RTC@day
  2369  0418  0849               	movf	_hour,w
  2370  0419  120A  158A  24D3  120A  118A  	fcall	_write_RTC
  2371  041E  282B               	goto	l3441
  2372  041F                     __end_of_main:	
  2373                           
  2374                           	psect	text1
  2375  0CD3                     __ptext1:	
  2376 ;; *************** function _write_RTC *****************
  2377 ;; Defined at:
  2378 ;;		line 384 in file "mainMaster.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;  hour            1    wreg     unsigned char 
  2381 ;;  minutes         1    5[COMMON] unsigned char 
  2382 ;;  day             1    6[COMMON] unsigned char 
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;  hour            1    7[COMMON] unsigned char 
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  1    wreg      void 
  2387 ;; Registers used:
  2388 ;;		wreg, status,2, status,0, pclath, cstack
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2394 ;;      Params:         2       0       0       0       0
  2395 ;;      Locals:         1       0       0       0       0
  2396 ;;      Temps:          0       2       0       0       0
  2397 ;;      Totals:         3       2       0       0       0
  2398 ;;Total ram usage:        5 bytes
  2399 ;; Hardware stack levels used:    1
  2400 ;; Hardware stack levels required when called:    3
  2401 ;; This function calls:
  2402 ;;		_I2C_Master_Start
  2403 ;;		_I2C_Master_Stop
  2404 ;;		_I2C_Master_Write
  2405 ;; This function is called by:
  2406 ;;		_main
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           
  2411                           ;psect for function _write_RTC
  2412  0CD3                     _write_RTC:	
  2413                           
  2414                           ;incstack = 0
  2415                           ; Regs used in _write_RTC: [wreg+status,2+status,0+pclath+cstack]
  2416                           ;write_RTC@hour stored from wreg
  2417  0CD3  00F7               	movwf	write_RTC@hour
  2418                           
  2419                           ;mainMaster.c: 386:     I2C_Master_Start();
  2420  0CD4  120A  158A  21C7  120A  158A  	fcall	_I2C_Master_Start
  2421                           
  2422                           ;mainMaster.c: 387:     I2C_Master_Write(0xD0);
  2423  0CD9  30D0               	movlw	208
  2424  0CDA  00F3               	movwf	I2C_Master_Write@d
  2425  0CDB  3000               	movlw	0
  2426  0CDC  00F4               	movwf	I2C_Master_Write@d+1
  2427  0CDD  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  2428                           
  2429                           ;mainMaster.c: 388:     I2C_Master_Write(0x01);
  2430  0CE2  3001               	movlw	1
  2431  0CE3  00F3               	movwf	I2C_Master_Write@d
  2432  0CE4  3000               	movlw	0
  2433  0CE5  00F4               	movwf	I2C_Master_Write@d+1
  2434  0CE6  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  2435                           
  2436                           ;mainMaster.c: 389:     I2C_Master_Write(minutes);
  2437  0CEB  0875               	movf	write_RTC@minutes,w
  2438  0CEC  1283               	bcf	3,5	;RP0=0, select bank0
  2439  0CED  1303               	bcf	3,6	;RP1=0, select bank0
  2440  0CEE  00A0               	movwf	??_write_RTC
  2441  0CEF  01A1               	clrf	??_write_RTC+1
  2442  0CF0  0820               	movf	??_write_RTC,w
  2443  0CF1  00F3               	movwf	I2C_Master_Write@d
  2444  0CF2  0821               	movf	??_write_RTC+1,w
  2445  0CF3  00F4               	movwf	I2C_Master_Write@d+1
  2446  0CF4  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  2447                           
  2448                           ;mainMaster.c: 390:     I2C_Master_Write(hour);
  2449  0CF9  0877               	movf	write_RTC@hour,w
  2450  0CFA  1283               	bcf	3,5	;RP0=0, select bank0
  2451  0CFB  1303               	bcf	3,6	;RP1=0, select bank0
  2452  0CFC  00A0               	movwf	??_write_RTC
  2453  0CFD  01A1               	clrf	??_write_RTC+1
  2454  0CFE  0820               	movf	??_write_RTC,w
  2455  0CFF  00F3               	movwf	I2C_Master_Write@d
  2456  0D00  0821               	movf	??_write_RTC+1,w
  2457  0D01  00F4               	movwf	I2C_Master_Write@d+1
  2458  0D02  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  2459                           
  2460                           ;mainMaster.c: 391:     I2C_Master_Write(day);
  2461  0D07  0876               	movf	write_RTC@day,w
  2462  0D08  1283               	bcf	3,5	;RP0=0, select bank0
  2463  0D09  1303               	bcf	3,6	;RP1=0, select bank0
  2464  0D0A  00A0               	movwf	??_write_RTC
  2465  0D0B  01A1               	clrf	??_write_RTC+1
  2466  0D0C  0820               	movf	??_write_RTC,w
  2467  0D0D  00F3               	movwf	I2C_Master_Write@d
  2468  0D0E  0821               	movf	??_write_RTC+1,w
  2469  0D0F  00F4               	movwf	I2C_Master_Write@d+1
  2470  0D10  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  2471                           
  2472                           ;mainMaster.c: 392:     I2C_Master_Stop();
  2473  0D15  120A  158A  21CE   	fcall	_I2C_Master_Stop
  2474  0D18  0008               	return
  2475  0D19                     __end_of_write_RTC:	
  2476                           
  2477                           	psect	text2
  2478  0B49                     __ptext2:	
  2479 ;; *************** function _strcmp *****************
  2480 ;; Defined at:
  2481 ;;		line 33 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;  s1              1    wreg     PTR const unsigned char 
  2484 ;;		 -> temp(6), 
  2485 ;;  s2              1    3[COMMON] PTR const unsigned char 
  2486 ;;		 -> STR_9(6), 
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;  s1              1    1[BANK0 ] PTR const unsigned char 
  2489 ;;		 -> temp(6), 
  2490 ;;  r               1    0[BANK0 ] char 
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  2    3[COMMON] int 
  2493 ;; Registers used:
  2494 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2500 ;;      Params:         2       0       0       0       0
  2501 ;;      Locals:         0       2       0       0       0
  2502 ;;      Temps:          3       0       0       0       0
  2503 ;;      Totals:         5       2       0       0       0
  2504 ;;Total ram usage:        7 bytes
  2505 ;; Hardware stack levels used:    2
  2506 ;; Hardware stack levels required when called:    1
  2507 ;; This function calls:
  2508 ;;		Nothing
  2509 ;; This function is called by:
  2510 ;;		_main
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           
  2515                           ;psect for function _strcmp
  2516  0B49                     _strcmp:	
  2517                           
  2518                           ;incstack = 0
  2519                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  2520                           ;strcmp@s1 stored from wreg
  2521  0B49  1283               	bcf	3,5	;RP0=0, select bank0
  2522  0B4A  1303               	bcf	3,6	;RP1=0, select bank0
  2523  0B4B  00A1               	movwf	strcmp@s1
  2524  0B4C  2B5A               	goto	l3385
  2525  0B4D                     l3387:	
  2526  0B4D  0821               	movf	strcmp@s1,w
  2527  0B4E  0084               	movwf	4
  2528  0B4F  0800               	movf	0,w
  2529  0B50  1903               	btfsc	3,2
  2530  0B51  2B6F               	goto	l3389
  2531  0B52  3001               	movlw	1
  2532  0B53  00F5               	movwf	??_strcmp
  2533  0B54  0875               	movf	??_strcmp,w
  2534  0B55  07A1               	addwf	strcmp@s1,f
  2535  0B56  3001               	movlw	1
  2536  0B57  00F5               	movwf	??_strcmp
  2537  0B58  0875               	movf	??_strcmp,w
  2538  0B59  07F3               	addwf	strcmp@s2,f
  2539  0B5A                     l3385:	
  2540  0B5A  0873               	movf	strcmp@s2,w
  2541  0B5B  0084               	movwf	4
  2542  0B5C  120A  118A  260A  120A  158A  	fcall	stringdir
  2543  0B61  00F5               	movwf	??_strcmp
  2544  0B62  0821               	movf	strcmp@s1,w
  2545  0B63  0084               	movwf	4
  2546  0B64  1383               	bcf	3,7	;select IRP bank0
  2547  0B65  0800               	movf	0,w
  2548  0B66  00F6               	movwf	??_strcmp+1
  2549  0B67  0875               	movf	??_strcmp,w
  2550  0B68  0276               	subwf	??_strcmp+1,w
  2551  0B69  00F7               	movwf	??_strcmp+2
  2552  0B6A  0877               	movf	??_strcmp+2,w
  2553  0B6B  00A0               	movwf	strcmp@r
  2554  0B6C  0820               	movf	strcmp@r,w
  2555  0B6D  1903               	btfsc	3,2
  2556  0B6E  2B4D               	goto	l3387
  2557  0B6F                     l3389:	
  2558  0B6F  0820               	movf	strcmp@r,w
  2559  0B70  00F3               	movwf	?_strcmp
  2560  0B71  01F4               	clrf	?_strcmp+1
  2561  0B72  1BF3               	btfsc	?_strcmp,7
  2562  0B73  03F4               	decf	?_strcmp+1,f
  2563  0B74  0008               	return
  2564  0B75                     __end_of_strcmp:	
  2565                           
  2566                           	psect	text3
  2567  0DB6                     __ptext3:	
  2568 ;; *************** function _setup *****************
  2569 ;; Defined at:
  2570 ;;		line 353 in file "mainMaster.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;		None
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;		None
  2575 ;; Return value:  Size  Location     Type
  2576 ;;                  1    wreg      void 
  2577 ;; Registers used:
  2578 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2579 ;; Tracked objects:
  2580 ;;		On entry : 0/0
  2581 ;;		On exit  : 0/0
  2582 ;;		Unchanged: 0/0
  2583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2584 ;;      Params:         0       0       0       0       0
  2585 ;;      Locals:         0       0       0       0       0
  2586 ;;      Temps:          0       0       0       0       0
  2587 ;;      Totals:         0       0       0       0       0
  2588 ;;Total ram usage:        0 bytes
  2589 ;; Hardware stack levels used:    1
  2590 ;; Hardware stack levels required when called:    4
  2591 ;; This function calls:
  2592 ;;		_I2C_Master_Init
  2593 ;;		_Lcd_Init
  2594 ;;		_UART_Init
  2595 ;;		_initOscilador
  2596 ;; This function is called by:
  2597 ;;		_main
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           
  2602                           ;psect for function _setup
  2603  0DB6                     _setup:	
  2604                           
  2605                           ;mainMaster.c: 354:     initOscilador(7);
  2606                           
  2607                           ;incstack = 0
  2608                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2609  0DB6  3007               	movlw	7
  2610  0DB7  120A  158A  2607  120A  158A  	fcall	_initOscilador
  2611                           
  2612                           ;mainMaster.c: 355:     ANSELH = 0;
  2613  0DBC  1683               	bsf	3,5	;RP0=1, select bank3
  2614  0DBD  1703               	bsf	3,6	;RP1=1, select bank3
  2615  0DBE  0189               	clrf	9	;volatile
  2616                           
  2617                           ;mainMaster.c: 356:     ANSEL = 0;
  2618  0DBF  0188               	clrf	8	;volatile
  2619                           
  2620                           ;mainMaster.c: 357:     TRISB = 0;
  2621  0DC0  1683               	bsf	3,5	;RP0=1, select bank1
  2622  0DC1  1303               	bcf	3,6	;RP1=0, select bank1
  2623  0DC2  0186               	clrf	6	;volatile
  2624                           
  2625                           ;mainMaster.c: 358:     TRISA = 0;
  2626  0DC3  0185               	clrf	5	;volatile
  2627                           
  2628                           ;mainMaster.c: 359:     TRISD = 0xFF;
  2629  0DC4  30FF               	movlw	255
  2630  0DC5  0088               	movwf	8	;volatile
  2631                           
  2632                           ;mainMaster.c: 360:     PORTB = 0;
  2633  0DC6  1283               	bcf	3,5	;RP0=0, select bank0
  2634  0DC7  1303               	bcf	3,6	;RP1=0, select bank0
  2635  0DC8  0186               	clrf	6	;volatile
  2636                           
  2637                           ;mainMaster.c: 361:     PORTA = 0;
  2638  0DC9  0185               	clrf	5	;volatile
  2639                           
  2640                           ;mainMaster.c: 362:     TRISC = 0x01;
  2641  0DCA  3001               	movlw	1
  2642  0DCB  1683               	bsf	3,5	;RP0=1, select bank1
  2643  0DCC  1303               	bcf	3,6	;RP1=0, select bank1
  2644  0DCD  0087               	movwf	7	;volatile
  2645                           
  2646                           ;mainMaster.c: 363:     PORTC = 0;
  2647  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
  2648  0DCF  1303               	bcf	3,6	;RP1=0, select bank0
  2649  0DD0  0187               	clrf	7	;volatile
  2650                           
  2651                           ;mainMaster.c: 364:     i = 0;
  2652  0DD1  01D3               	clrf	_i
  2653                           
  2654                           ;mainMaster.c: 365:     door = 0;
  2655  0DD2  01FA               	clrf	_door
  2656                           
  2657                           ;mainMaster.c: 366:     trip = 0;
  2658  0DD3  01D7               	clrf	_trip
  2659                           
  2660                           ;mainMaster.c: 367:     IR = 0;
  2661  0DD4  01D5               	clrf	_IR
  2662                           
  2663                           ;mainMaster.c: 368:     PIR = 0;
  2664  0DD5  01D6               	clrf	_PIR
  2665                           
  2666                           ;mainMaster.c: 369:     OPTION_REGbits.T0CS = 0;
  2667  0DD6  1683               	bsf	3,5	;RP0=1, select bank1
  2668  0DD7  1303               	bcf	3,6	;RP1=0, select bank1
  2669  0DD8  1281               	bcf	1,5	;volatile
  2670                           
  2671                           ;mainMaster.c: 370:     OPTION_REGbits.T0SE = 0;
  2672  0DD9  1201               	bcf	1,4	;volatile
  2673                           
  2674                           ;mainMaster.c: 371:     OPTION_REGbits.PSA = 1;
  2675  0DDA  1581               	bsf	1,3	;volatile
  2676                           
  2677                           ;mainMaster.c: 372:     OPTION_REGbits.PS2 = 0;
  2678  0DDB  1101               	bcf	1,2	;volatile
  2679                           
  2680                           ;mainMaster.c: 373:     OPTION_REGbits.PS1 = 0;
  2681  0DDC  1081               	bcf	1,1	;volatile
  2682                           
  2683                           ;mainMaster.c: 374:     OPTION_REGbits.PS0 = 0;
  2684  0DDD  1001               	bcf	1,0	;volatile
  2685                           
  2686                           ;mainMaster.c: 375:     TMR0 = 56;
  2687  0DDE  3038               	movlw	56
  2688  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  2689  0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  2690  0DE1  0081               	movwf	1	;volatile
  2691                           
  2692                           ;mainMaster.c: 376:     INTCONbits.T0IF = 0;
  2693  0DE2  110B               	bcf	11,2	;volatile
  2694                           
  2695                           ;mainMaster.c: 377:     INTCONbits.T0IE = 1;
  2696  0DE3  168B               	bsf	11,5	;volatile
  2697                           
  2698                           ;mainMaster.c: 378:     INTCONbits.GIE = 1;
  2699  0DE4  178B               	bsf	11,7	;volatile
  2700                           
  2701                           ;mainMaster.c: 379:     Lcd_Init();
  2702  0DE5  120A  158A  2717  120A  158A  	fcall	_Lcd_Init
  2703                           
  2704                           ;mainMaster.c: 380:     UART_Init(9600);
  2705  0DEA  3000               	movlw	0
  2706  0DEB  1283               	bcf	3,5	;RP0=0, select bank0
  2707  0DEC  1303               	bcf	3,6	;RP1=0, select bank0
  2708  0DED  00B1               	movwf	UART_Init@baudrate+3
  2709  0DEE  3000               	movlw	0
  2710  0DEF  00B0               	movwf	UART_Init@baudrate+2
  2711  0DF0  3025               	movlw	37
  2712  0DF1  00AF               	movwf	UART_Init@baudrate+1
  2713  0DF2  3080               	movlw	128
  2714  0DF3  00AE               	movwf	UART_Init@baudrate
  2715  0DF4  120A  118A  24F9  120A  158A  	fcall	_UART_Init
  2716                           
  2717                           ;mainMaster.c: 381:     I2C_Master_Init(100000);
  2718  0DF9  3000               	movlw	0
  2719  0DFA  1283               	bcf	3,5	;RP0=0, select bank0
  2720  0DFB  1303               	bcf	3,6	;RP1=0, select bank0
  2721  0DFC  00B0               	movwf	I2C_Master_Init@c+3
  2722  0DFD  3001               	movlw	1
  2723  0DFE  00AF               	movwf	I2C_Master_Init@c+2
  2724  0DFF  3086               	movlw	134
  2725  0E00  00AE               	movwf	I2C_Master_Init@c+1
  2726  0E01  30A0               	movlw	160
  2727  0E02  00AD               	movwf	I2C_Master_Init@c
  2728  0E03  120A  158A  23A9   	fcall	_I2C_Master_Init
  2729  0E06  0008               	return
  2730  0E07                     __end_of_setup:	
  2731                           
  2732                           	psect	text4
  2733  0E07                     __ptext4:	
  2734 ;; *************** function _initOscilador *****************
  2735 ;; Defined at:
  2736 ;;		line 11 in file "./Oscilador.h"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;  option          1    wreg     unsigned char 
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;  option          1    5[COMMON] unsigned char 
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  1    wreg      void 
  2743 ;; Registers used:
  2744 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2750 ;;      Params:         0       0       0       0       0
  2751 ;;      Locals:         1       0       0       0       0
  2752 ;;      Temps:          2       0       0       0       0
  2753 ;;      Totals:         3       0       0       0       0
  2754 ;;Total ram usage:        3 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    1
  2757 ;; This function calls:
  2758 ;;		Nothing
  2759 ;; This function is called by:
  2760 ;;		_setup
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           
  2765                           ;psect for function _initOscilador
  2766  0E07                     _initOscilador:	
  2767                           
  2768                           ;incstack = 0
  2769                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  2770                           ;initOscilador@option stored from wreg
  2771  0E07  00F5               	movwf	initOscilador@option
  2772                           
  2773                           ;./Oscilador.h: 13: 
  2774  0E08  2E38               	goto	l2271
  2775  0E09                     l2251:	
  2776                           
  2777                           ;./Oscilador.h: 16:         case 3:
  2778  0E09  308F               	movlw	-113
  2779  0E0A  1683               	bsf	3,5	;RP0=1, select bank1
  2780  0E0B  1303               	bcf	3,6	;RP1=0, select bank1
  2781  0E0C  058F               	andwf	15,f	;volatile
  2782                           
  2783                           ;./Oscilador.h: 17: 
  2784  0E0D  2E5A               	goto	l195
  2785  0E0E                     l2253:	
  2786                           
  2787                           ;./Oscilador.h: 20:         case 4:
  2788  0E0E  1683               	bsf	3,5	;RP0=1, select bank1
  2789  0E0F  1303               	bcf	3,6	;RP1=0, select bank1
  2790  0E10  080F               	movf	15,w	;volatile
  2791  0E11  398F               	andlw	-113
  2792  0E12  3810               	iorlw	16
  2793  0E13  2E31               	goto	L15
  2794  0E14                     l2255:	
  2795                           ;./Oscilador.h: 21: 
  2796                           
  2797                           
  2798                           ;./Oscilador.h: 24:         case 5:
  2799  0E14  1683               	bsf	3,5	;RP0=1, select bank1
  2800  0E15  1303               	bcf	3,6	;RP1=0, select bank1
  2801  0E16  080F               	movf	15,w	;volatile
  2802  0E17  398F               	andlw	-113
  2803  0E18  3820               	iorlw	32
  2804  0E19  2E31               	goto	L15
  2805  0E1A                     l2257:	
  2806                           ;./Oscilador.h: 25: 
  2807                           
  2808                           
  2809                           ;./Oscilador.h: 28:         case 6:
  2810  0E1A  1683               	bsf	3,5	;RP0=1, select bank1
  2811  0E1B  1303               	bcf	3,6	;RP1=0, select bank1
  2812  0E1C  080F               	movf	15,w	;volatile
  2813  0E1D  398F               	andlw	-113
  2814  0E1E  3830               	iorlw	48
  2815  0E1F  2E31               	goto	L15
  2816  0E20                     l2259:	
  2817                           ;./Oscilador.h: 29: 
  2818                           
  2819                           
  2820                           ;./Oscilador.h: 32:         case 7:
  2821  0E20  1683               	bsf	3,5	;RP0=1, select bank1
  2822  0E21  1303               	bcf	3,6	;RP1=0, select bank1
  2823  0E22  080F               	movf	15,w	;volatile
  2824  0E23  398F               	andlw	-113
  2825  0E24  3840               	iorlw	64
  2826  0E25  2E31               	goto	L15
  2827  0E26                     l2261:	
  2828                           ;./Oscilador.h: 33: 
  2829                           
  2830                           
  2831                           ;./Oscilador.h: 36:         default:
  2832  0E26  1683               	bsf	3,5	;RP0=1, select bank1
  2833  0E27  1303               	bcf	3,6	;RP1=0, select bank1
  2834  0E28  080F               	movf	15,w	;volatile
  2835  0E29  398F               	andlw	-113
  2836  0E2A  3850               	iorlw	80
  2837  0E2B  2E31               	goto	L15
  2838  0E2C                     l2263:	
  2839                           ;./Oscilador.h: 37: 
  2840                           
  2841                           
  2842                           ;./Oscilador.h: 40:     }
  2843  0E2C  1683               	bsf	3,5	;RP0=1, select bank1
  2844  0E2D  1303               	bcf	3,6	;RP1=0, select bank1
  2845  0E2E  080F               	movf	15,w	;volatile
  2846  0E2F  398F               	andlw	-113
  2847  0E30  3860               	iorlw	96
  2848  0E31                     L15:	
  2849  0E31  008F               	movwf	15	;volatile
  2850                           
  2851                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  2852  0E32  2E5A               	goto	l195
  2853  0E33                     l2265:	
  2854  0E33                     l2267:	
  2855  0E33  3070               	movlw	112
  2856  0E34  1683               	bsf	3,5	;RP0=1, select bank1
  2857  0E35  1303               	bcf	3,6	;RP1=0, select bank1
  2858  0E36  048F               	iorwf	15,f	;volatile
  2859  0E37  2E5A               	goto	l195
  2860  0E38                     l2271:	
  2861  0E38  0875               	movf	initOscilador@option,w
  2862  0E39  00F3               	movwf	??_initOscilador
  2863  0E3A  01F4               	clrf	??_initOscilador+1
  2864                           
  2865                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2866                           ; Switch size 1, requested type "simple"
  2867                           ; Number of cases is 1, Range of values is 0 to 0
  2868                           ; switch strategies available:
  2869                           ; Name         Instructions Cycles
  2870                           ; simple_byte            4     3 (average)
  2871                           ; direct_byte           11     8 (fixed)
  2872                           ; jumptable            260     6 (fixed)
  2873                           ;	Chosen strategy is simple_byte
  2874  0E3B  0874               	movf	??_initOscilador+1,w
  2875  0E3C  3A00               	xorlw	0	; case 0
  2876  0E3D  1903               	skipnz
  2877  0E3E  2E40               	goto	l3753
  2878  0E3F  2E33               	goto	l2267
  2879  0E40                     l3753:	
  2880                           
  2881                           ; Switch size 1, requested type "simple"
  2882                           ; Number of cases is 8, Range of values is 0 to 7
  2883                           ; switch strategies available:
  2884                           ; Name         Instructions Cycles
  2885                           ; simple_byte           25    13 (average)
  2886                           ; direct_byte           32     8 (fixed)
  2887                           ; jumptable            260     6 (fixed)
  2888                           ;	Chosen strategy is simple_byte
  2889  0E40  0873               	movf	??_initOscilador,w
  2890  0E41  3A00               	xorlw	0	; case 0
  2891  0E42  1903               	skipnz
  2892  0E43  2E09               	goto	l2251
  2893  0E44  3A01               	xorlw	1	; case 1
  2894  0E45  1903               	skipnz
  2895  0E46  2E0E               	goto	l2253
  2896  0E47  3A03               	xorlw	3	; case 2
  2897  0E48  1903               	skipnz
  2898  0E49  2E14               	goto	l2255
  2899  0E4A  3A01               	xorlw	1	; case 3
  2900  0E4B  1903               	skipnz
  2901  0E4C  2E1A               	goto	l2257
  2902  0E4D  3A07               	xorlw	7	; case 4
  2903  0E4E  1903               	skipnz
  2904  0E4F  2E20               	goto	l2259
  2905  0E50  3A01               	xorlw	1	; case 5
  2906  0E51  1903               	skipnz
  2907  0E52  2E26               	goto	l2261
  2908  0E53  3A03               	xorlw	3	; case 6
  2909  0E54  1903               	skipnz
  2910  0E55  2E2C               	goto	l2263
  2911  0E56  3A01               	xorlw	1	; case 7
  2912  0E57  1903               	skipnz
  2913  0E58  2E33               	goto	l2265
  2914  0E59  2E33               	goto	l2267
  2915  0E5A                     l195:	
  2916  0E5A  140F               	bsf	15,0	;volatile
  2917  0E5B  0008               	return
  2918  0E5C                     __end_of_initOscilador:	
  2919                           
  2920                           	psect	text5
  2921  04F9                     __ptext5:	
  2922 ;; *************** function _UART_Init *****************
  2923 ;; Defined at:
  2924 ;;		line 8 in file "./UART.h"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;  baudrate        4   14[BANK0 ] const long 
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;  x               2    4[COMMON] unsigned int 
  2929 ;; Return value:  Size  Location     Type
  2930 ;;                  1    wreg      unsigned char 
  2931 ;; Registers used:
  2932 ;;		wreg, status,2, status,0, pclath, cstack
  2933 ;; Tracked objects:
  2934 ;;		On entry : 0/0
  2935 ;;		On exit  : 0/0
  2936 ;;		Unchanged: 0/0
  2937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2938 ;;      Params:         0       4       0       0       0
  2939 ;;      Locals:         2       0       0       0       0
  2940 ;;      Temps:          0      12       0       0       0
  2941 ;;      Totals:         2      16       0       0       0
  2942 ;;Total ram usage:       18 bytes
  2943 ;; Hardware stack levels used:    1
  2944 ;; Hardware stack levels required when called:    2
  2945 ;; This function calls:
  2946 ;;		___aldiv
  2947 ;; This function is called by:
  2948 ;;		_setup
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           
  2953                           ;psect for function _UART_Init
  2954  04F9                     _UART_Init:	
  2955                           
  2956                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
  2957                           
  2958                           ;incstack = 0
  2959                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  2960  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  2961  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  2962  04FB  082E               	movf	UART_Init@baudrate,w
  2963  04FC  00B2               	movwf	??_UART_Init
  2964  04FD  082F               	movf	UART_Init@baudrate+1,w
  2965  04FE  00B3               	movwf	??_UART_Init+1
  2966  04FF  0830               	movf	UART_Init@baudrate+2,w
  2967  0500  00B4               	movwf	??_UART_Init+2
  2968  0501  0831               	movf	UART_Init@baudrate+3,w
  2969  0502  00B5               	movwf	??_UART_Init+3
  2970  0503  3006               	movlw	6
  2971  0504                     u2935:	
  2972  0504  1003               	clrc
  2973  0505  0DB2               	rlf	??_UART_Init,f
  2974  0506  0DB3               	rlf	??_UART_Init+1,f
  2975  0507  0DB4               	rlf	??_UART_Init+2,f
  2976  0508  0DB5               	rlf	??_UART_Init+3,f
  2977  0509  3EFF               	addlw	-1
  2978  050A  1D03               	skipz
  2979  050B  2D04               	goto	u2935
  2980  050C  0835               	movf	??_UART_Init+3,w
  2981  050D  00A3               	movwf	___aldiv@divisor+3
  2982  050E  0834               	movf	??_UART_Init+2,w
  2983  050F  00A2               	movwf	___aldiv@divisor+2
  2984  0510  0833               	movf	??_UART_Init+1,w
  2985  0511  00A1               	movwf	___aldiv@divisor+1
  2986  0512  0832               	movf	??_UART_Init,w
  2987  0513  00A0               	movwf	___aldiv@divisor
  2988  0514  082E               	movf	UART_Init@baudrate,w
  2989  0515  00B6               	movwf	??_UART_Init+4
  2990  0516  082F               	movf	UART_Init@baudrate+1,w
  2991  0517  00B7               	movwf	??_UART_Init+5
  2992  0518  0830               	movf	UART_Init@baudrate+2,w
  2993  0519  00B8               	movwf	??_UART_Init+6
  2994  051A  0831               	movf	UART_Init@baudrate+3,w
  2995  051B  00B9               	movwf	??_UART_Init+7
  2996  051C  3006               	movlw	6
  2997  051D                     u2945:	
  2998  051D  1003               	clrc
  2999  051E  0DB6               	rlf	??_UART_Init+4,f
  3000  051F  0DB7               	rlf	??_UART_Init+5,f
  3001  0520  0DB8               	rlf	??_UART_Init+6,f
  3002  0521  0DB9               	rlf	??_UART_Init+7,f
  3003  0522  3EFF               	addlw	-1
  3004  0523  1D03               	skipz
  3005  0524  2D1D               	goto	u2945
  3006  0525  3000               	movlw	0
  3007  0526  00BA               	movwf	??_UART_Init+8
  3008  0527  3012               	movlw	18
  3009  0528  00BB               	movwf	??_UART_Init+9
  3010  0529  307A               	movlw	122
  3011  052A  00BC               	movwf	??_UART_Init+10
  3012  052B  3000               	movlw	0
  3013  052C  00BD               	movwf	??_UART_Init+11
  3014  052D  0836               	movf	??_UART_Init+4,w
  3015  052E  02BA               	subwf	??_UART_Init+8,f
  3016  052F  0837               	movf	??_UART_Init+5,w
  3017  0530  1C03               	skipc
  3018  0531  0F37               	incfsz	??_UART_Init+5,w
  3019  0532  2D34               	goto	u2951
  3020  0533  2D35               	goto	u2952
  3021  0534                     u2951:	
  3022  0534  02BB               	subwf	??_UART_Init+9,f
  3023  0535                     u2952:	
  3024  0535  0838               	movf	??_UART_Init+6,w
  3025  0536  1C03               	skipc
  3026  0537  0F38               	incfsz	??_UART_Init+6,w
  3027  0538  2D3A               	goto	u2953
  3028  0539  2D3B               	goto	u2954
  3029  053A                     u2953:	
  3030  053A  02BC               	subwf	??_UART_Init+10,f
  3031  053B                     u2954:	
  3032  053B  0839               	movf	??_UART_Init+7,w
  3033  053C  1C03               	skipc
  3034  053D  0F39               	incfsz	??_UART_Init+7,w
  3035  053E  2D40               	goto	u2955
  3036  053F  2D41               	goto	u2956
  3037  0540                     u2955:	
  3038  0540  02BD               	subwf	??_UART_Init+11,f
  3039  0541                     u2956:	
  3040  0541  083D               	movf	??_UART_Init+11,w
  3041  0542  00A7               	movwf	___aldiv@dividend+3
  3042  0543  083C               	movf	??_UART_Init+10,w
  3043  0544  00A6               	movwf	___aldiv@dividend+2
  3044  0545  083B               	movf	??_UART_Init+9,w
  3045  0546  00A5               	movwf	___aldiv@dividend+1
  3046  0547  083A               	movf	??_UART_Init+8,w
  3047  0548  00A4               	movwf	___aldiv@dividend
  3048  0549  120A  118A  2763  120A  118A  	fcall	___aldiv
  3049  054E  1283               	bcf	3,5	;RP0=0, select bank0
  3050  054F  1303               	bcf	3,6	;RP1=0, select bank0
  3051  0550  0821               	movf	?___aldiv+1,w
  3052  0551  00F5               	movwf	UART_Init@x+1
  3053  0552  0820               	movf	?___aldiv,w
  3054  0553  00F4               	movwf	UART_Init@x
  3055                           
  3056                           ;./UART.h: 12:  if(x>255)
  3057  0554  3001               	movlw	1
  3058  0555  0275               	subwf	UART_Init@x+1,w
  3059  0556  3000               	movlw	0
  3060  0557  1903               	skipnz
  3061  0558  0274               	subwf	UART_Init@x,w
  3062  0559  1C03               	skipc
  3063  055A  2DB7               	goto	l3149
  3064                           
  3065                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  3066  055B  082E               	movf	UART_Init@baudrate,w
  3067  055C  00B2               	movwf	??_UART_Init
  3068  055D  082F               	movf	UART_Init@baudrate+1,w
  3069  055E  00B3               	movwf	??_UART_Init+1
  3070  055F  0830               	movf	UART_Init@baudrate+2,w
  3071  0560  00B4               	movwf	??_UART_Init+2
  3072  0561  0831               	movf	UART_Init@baudrate+3,w
  3073  0562  00B5               	movwf	??_UART_Init+3
  3074  0563  3004               	movlw	4
  3075  0564                     u2975:	
  3076  0564  1003               	clrc
  3077  0565  0DB2               	rlf	??_UART_Init,f
  3078  0566  0DB3               	rlf	??_UART_Init+1,f
  3079  0567  0DB4               	rlf	??_UART_Init+2,f
  3080  0568  0DB5               	rlf	??_UART_Init+3,f
  3081  0569  3EFF               	addlw	-1
  3082  056A  1D03               	skipz
  3083  056B  2D64               	goto	u2975
  3084  056C  0835               	movf	??_UART_Init+3,w
  3085  056D  00A3               	movwf	___aldiv@divisor+3
  3086  056E  0834               	movf	??_UART_Init+2,w
  3087  056F  00A2               	movwf	___aldiv@divisor+2
  3088  0570  0833               	movf	??_UART_Init+1,w
  3089  0571  00A1               	movwf	___aldiv@divisor+1
  3090  0572  0832               	movf	??_UART_Init,w
  3091  0573  00A0               	movwf	___aldiv@divisor
  3092  0574  082E               	movf	UART_Init@baudrate,w
  3093  0575  00B6               	movwf	??_UART_Init+4
  3094  0576  082F               	movf	UART_Init@baudrate+1,w
  3095  0577  00B7               	movwf	??_UART_Init+5
  3096  0578  0830               	movf	UART_Init@baudrate+2,w
  3097  0579  00B8               	movwf	??_UART_Init+6
  3098  057A  0831               	movf	UART_Init@baudrate+3,w
  3099  057B  00B9               	movwf	??_UART_Init+7
  3100  057C  3004               	movlw	4
  3101  057D                     u2985:	
  3102  057D  1003               	clrc
  3103  057E  0DB6               	rlf	??_UART_Init+4,f
  3104  057F  0DB7               	rlf	??_UART_Init+5,f
  3105  0580  0DB8               	rlf	??_UART_Init+6,f
  3106  0581  0DB9               	rlf	??_UART_Init+7,f
  3107  0582  3EFF               	addlw	-1
  3108  0583  1D03               	skipz
  3109  0584  2D7D               	goto	u2985
  3110  0585  3000               	movlw	0
  3111  0586  00BA               	movwf	??_UART_Init+8
  3112  0587  3012               	movlw	18
  3113  0588  00BB               	movwf	??_UART_Init+9
  3114  0589  307A               	movlw	122
  3115  058A  00BC               	movwf	??_UART_Init+10
  3116  058B  3000               	movlw	0
  3117  058C  00BD               	movwf	??_UART_Init+11
  3118  058D  0836               	movf	??_UART_Init+4,w
  3119  058E  02BA               	subwf	??_UART_Init+8,f
  3120  058F  0837               	movf	??_UART_Init+5,w
  3121  0590  1C03               	skipc
  3122  0591  0F37               	incfsz	??_UART_Init+5,w
  3123  0592  2D94               	goto	u2991
  3124  0593  2D95               	goto	u2992
  3125  0594                     u2991:	
  3126  0594  02BB               	subwf	??_UART_Init+9,f
  3127  0595                     u2992:	
  3128  0595  0838               	movf	??_UART_Init+6,w
  3129  0596  1C03               	skipc
  3130  0597  0F38               	incfsz	??_UART_Init+6,w
  3131  0598  2D9A               	goto	u2993
  3132  0599  2D9B               	goto	u2994
  3133  059A                     u2993:	
  3134  059A  02BC               	subwf	??_UART_Init+10,f
  3135  059B                     u2994:	
  3136  059B  0839               	movf	??_UART_Init+7,w
  3137  059C  1C03               	skipc
  3138  059D  0F39               	incfsz	??_UART_Init+7,w
  3139  059E  2DA0               	goto	u2995
  3140  059F  2DA1               	goto	u2996
  3141  05A0                     u2995:	
  3142  05A0  02BD               	subwf	??_UART_Init+11,f
  3143  05A1                     u2996:	
  3144  05A1  083D               	movf	??_UART_Init+11,w
  3145  05A2  00A7               	movwf	___aldiv@dividend+3
  3146  05A3  083C               	movf	??_UART_Init+10,w
  3147  05A4  00A6               	movwf	___aldiv@dividend+2
  3148  05A5  083B               	movf	??_UART_Init+9,w
  3149  05A6  00A5               	movwf	___aldiv@dividend+1
  3150  05A7  083A               	movf	??_UART_Init+8,w
  3151  05A8  00A4               	movwf	___aldiv@dividend
  3152  05A9  120A  118A  2763  120A  118A  	fcall	___aldiv
  3153  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  3154  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  3155  05B0  0821               	movf	?___aldiv+1,w
  3156  05B1  00F5               	movwf	UART_Init@x+1
  3157  05B2  0820               	movf	?___aldiv,w
  3158  05B3  00F4               	movwf	UART_Init@x
  3159                           
  3160                           ;./UART.h: 15:   BRGH = 1;
  3161  05B4  1683               	bsf	3,5	;RP0=1, select bank1
  3162  05B5  1303               	bcf	3,6	;RP1=0, select bank1
  3163  05B6  1518               	bsf	24,2	;volatile
  3164  05B7                     l3149:	
  3165                           
  3166                           ;./UART.h: 17:  if(x<256)
  3167  05B7  3001               	movlw	1
  3168  05B8  0275               	subwf	UART_Init@x+1,w
  3169  05B9  3000               	movlw	0
  3170  05BA  1903               	skipnz
  3171  05BB  0274               	subwf	UART_Init@x,w
  3172  05BC  1803               	skipnc
  3173  05BD  0008               	return
  3174                           
  3175                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  3176  05BE  0874               	movf	UART_Init@x,w
  3177  05BF  1683               	bsf	3,5	;RP0=1, select bank1
  3178  05C0  1303               	bcf	3,6	;RP1=0, select bank1
  3179  05C1  0099               	movwf	25	;volatile
  3180                           
  3181                           ;./UART.h: 20:    SYNC = 0;
  3182  05C2  1218               	bcf	24,4	;volatile
  3183                           
  3184                           ;./UART.h: 21:    SPEN = 1;
  3185  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  3186  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  3187  05C5  1798               	bsf	24,7	;volatile
  3188                           
  3189                           ;./UART.h: 22:           TRISC7 = 1;
  3190  05C6  1683               	bsf	3,5	;RP0=1, select bank1
  3191  05C7  1303               	bcf	3,6	;RP1=0, select bank1
  3192  05C8  1787               	bsf	7,7	;volatile
  3193                           
  3194                           ;./UART.h: 23:           TRISC6 = 1;
  3195  05C9  1707               	bsf	7,6	;volatile
  3196                           
  3197                           ;./UART.h: 24:           CREN = 1;
  3198  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  3199  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  3200  05CC  1618               	bsf	24,4	;volatile
  3201                           
  3202                           ;./UART.h: 25:           TXEN = 1;
  3203  05CD  1683               	bsf	3,5	;RP0=1, select bank1
  3204  05CE  1303               	bcf	3,6	;RP1=0, select bank1
  3205  05CF  1698               	bsf	24,5	;volatile
  3206  05D0  0008               	return
  3207  05D1                     __end_of_UART_Init:	
  3208                           
  3209                           	psect	text6
  3210  0763                     __ptext6:	
  3211 ;; *************** function ___aldiv *****************
  3212 ;; Defined at:
  3213 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;  divisor         4    0[BANK0 ] long 
  3216 ;;  dividend        4    4[BANK0 ] long 
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;  quotient        4   10[BANK0 ] long 
  3219 ;;  sign            1    9[BANK0 ] unsigned char 
  3220 ;;  counter         1    8[BANK0 ] unsigned char 
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  4    0[BANK0 ] long 
  3223 ;; Registers used:
  3224 ;;		wreg, status,2, status,0
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3230 ;;      Params:         0       8       0       0       0
  3231 ;;      Locals:         0       6       0       0       0
  3232 ;;      Temps:          1       0       0       0       0
  3233 ;;      Totals:         1      14       0       0       0
  3234 ;;Total ram usage:       15 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:    1
  3237 ;; This function calls:
  3238 ;;		Nothing
  3239 ;; This function is called by:
  3240 ;;		_UART_Init
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           
  3245                           ;psect for function ___aldiv
  3246  0763                     ___aldiv:	
  3247                           
  3248                           ;incstack = 0
  3249                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3250  0763  1283               	bcf	3,5	;RP0=0, select bank0
  3251  0764  1303               	bcf	3,6	;RP1=0, select bank0
  3252  0765  01A9               	clrf	___aldiv@sign
  3253  0766  1FA3               	btfss	___aldiv@divisor+3,7
  3254  0767  2F75               	goto	l585
  3255  0768  09A0               	comf	___aldiv@divisor,f
  3256  0769  09A1               	comf	___aldiv@divisor+1,f
  3257  076A  09A2               	comf	___aldiv@divisor+2,f
  3258  076B  09A3               	comf	___aldiv@divisor+3,f
  3259  076C  0AA0               	incf	___aldiv@divisor,f
  3260  076D  1903               	skipnz
  3261  076E  0AA1               	incf	___aldiv@divisor+1,f
  3262  076F  1903               	skipnz
  3263  0770  0AA2               	incf	___aldiv@divisor+2,f
  3264  0771  1903               	skipnz
  3265  0772  0AA3               	incf	___aldiv@divisor+3,f
  3266  0773  01A9               	clrf	___aldiv@sign
  3267  0774  0AA9               	incf	___aldiv@sign,f
  3268  0775                     l585:	
  3269  0775  1FA7               	btfss	___aldiv@dividend+3,7
  3270  0776  2F86               	goto	l3031
  3271  0777  09A4               	comf	___aldiv@dividend,f
  3272  0778  09A5               	comf	___aldiv@dividend+1,f
  3273  0779  09A6               	comf	___aldiv@dividend+2,f
  3274  077A  09A7               	comf	___aldiv@dividend+3,f
  3275  077B  0AA4               	incf	___aldiv@dividend,f
  3276  077C  1903               	skipnz
  3277  077D  0AA5               	incf	___aldiv@dividend+1,f
  3278  077E  1903               	skipnz
  3279  077F  0AA6               	incf	___aldiv@dividend+2,f
  3280  0780  1903               	skipnz
  3281  0781  0AA7               	incf	___aldiv@dividend+3,f
  3282  0782  3001               	movlw	1
  3283  0783  00F3               	movwf	??___aldiv
  3284  0784  0873               	movf	??___aldiv,w
  3285  0785  06A9               	xorwf	___aldiv@sign,f
  3286  0786                     l3031:	
  3287  0786  3000               	movlw	0
  3288  0787  00AD               	movwf	___aldiv@quotient+3
  3289  0788  3000               	movlw	0
  3290  0789  00AC               	movwf	___aldiv@quotient+2
  3291  078A  3000               	movlw	0
  3292  078B  00AB               	movwf	___aldiv@quotient+1
  3293  078C  3000               	movlw	0
  3294  078D  00AA               	movwf	___aldiv@quotient
  3295  078E  0823               	movf	___aldiv@divisor+3,w
  3296  078F  0422               	iorwf	___aldiv@divisor+2,w
  3297  0790  0421               	iorwf	___aldiv@divisor+1,w
  3298  0791  0420               	iorwf	___aldiv@divisor,w
  3299  0792  1903               	skipnz
  3300  0793  2FDB               	goto	l3053
  3301  0794  01A8               	clrf	___aldiv@counter
  3302  0795  0AA8               	incf	___aldiv@counter,f
  3303  0796                     l3039:	
  3304  0796  1BA3               	btfsc	___aldiv@divisor+3,7
  3305  0797  2FA6               	goto	l3041
  3306  0798  3001               	movlw	1
  3307  0799  00F3               	movwf	??___aldiv
  3308  079A                     u2775:	
  3309  079A  1003               	clrc
  3310  079B  0DA0               	rlf	___aldiv@divisor,f
  3311  079C  0DA1               	rlf	___aldiv@divisor+1,f
  3312  079D  0DA2               	rlf	___aldiv@divisor+2,f
  3313  079E  0DA3               	rlf	___aldiv@divisor+3,f
  3314  079F  0BF3               	decfsz	??___aldiv,f
  3315  07A0  2F9A               	goto	u2775
  3316  07A1  3001               	movlw	1
  3317  07A2  00F3               	movwf	??___aldiv
  3318  07A3  0873               	movf	??___aldiv,w
  3319  07A4  07A8               	addwf	___aldiv@counter,f
  3320  07A5  2F96               	goto	l3039
  3321  07A6                     l3041:	
  3322  07A6  3001               	movlw	1
  3323  07A7  00F3               	movwf	??___aldiv
  3324  07A8                     u2795:	
  3325  07A8  1003               	clrc
  3326  07A9  0DAA               	rlf	___aldiv@quotient,f
  3327  07AA  0DAB               	rlf	___aldiv@quotient+1,f
  3328  07AB  0DAC               	rlf	___aldiv@quotient+2,f
  3329  07AC  0DAD               	rlf	___aldiv@quotient+3,f
  3330  07AD  0BF3               	decfsz	??___aldiv,f
  3331  07AE  2FA8               	goto	u2795
  3332  07AF  0823               	movf	___aldiv@divisor+3,w
  3333  07B0  0227               	subwf	___aldiv@dividend+3,w
  3334  07B1  1D03               	skipz
  3335  07B2  2FBD               	goto	u2805
  3336  07B3  0822               	movf	___aldiv@divisor+2,w
  3337  07B4  0226               	subwf	___aldiv@dividend+2,w
  3338  07B5  1D03               	skipz
  3339  07B6  2FBD               	goto	u2805
  3340  07B7  0821               	movf	___aldiv@divisor+1,w
  3341  07B8  0225               	subwf	___aldiv@dividend+1,w
  3342  07B9  1D03               	skipz
  3343  07BA  2FBD               	goto	u2805
  3344  07BB  0820               	movf	___aldiv@divisor,w
  3345  07BC  0224               	subwf	___aldiv@dividend,w
  3346  07BD                     u2805:	
  3347  07BD  1C03               	skipc
  3348  07BE  2FCE               	goto	l3049
  3349  07BF  0820               	movf	___aldiv@divisor,w
  3350  07C0  02A4               	subwf	___aldiv@dividend,f
  3351  07C1  0821               	movf	___aldiv@divisor+1,w
  3352  07C2  1C03               	skipc
  3353  07C3  0F21               	incfsz	___aldiv@divisor+1,w
  3354  07C4  02A5               	subwf	___aldiv@dividend+1,f
  3355  07C5  0822               	movf	___aldiv@divisor+2,w
  3356  07C6  1C03               	skipc
  3357  07C7  0F22               	incfsz	___aldiv@divisor+2,w
  3358  07C8  02A6               	subwf	___aldiv@dividend+2,f
  3359  07C9  0823               	movf	___aldiv@divisor+3,w
  3360  07CA  1C03               	skipc
  3361  07CB  0F23               	incfsz	___aldiv@divisor+3,w
  3362  07CC  02A7               	subwf	___aldiv@dividend+3,f
  3363  07CD  142A               	bsf	___aldiv@quotient,0
  3364  07CE                     l3049:	
  3365  07CE  3001               	movlw	1
  3366  07CF                     u2815:	
  3367  07CF  1003               	clrc
  3368  07D0  0CA3               	rrf	___aldiv@divisor+3,f
  3369  07D1  0CA2               	rrf	___aldiv@divisor+2,f
  3370  07D2  0CA1               	rrf	___aldiv@divisor+1,f
  3371  07D3  0CA0               	rrf	___aldiv@divisor,f
  3372  07D4  3EFF               	addlw	-1
  3373  07D5  1D03               	skipz
  3374  07D6  2FCF               	goto	u2815
  3375  07D7  3001               	movlw	1
  3376  07D8  02A8               	subwf	___aldiv@counter,f
  3377  07D9  1D03               	btfss	3,2
  3378  07DA  2FA6               	goto	l3041
  3379  07DB                     l3053:	
  3380  07DB  0829               	movf	___aldiv@sign,w
  3381  07DC  1903               	btfsc	3,2
  3382  07DD  2FE9               	goto	l3057
  3383  07DE  09AA               	comf	___aldiv@quotient,f
  3384  07DF  09AB               	comf	___aldiv@quotient+1,f
  3385  07E0  09AC               	comf	___aldiv@quotient+2,f
  3386  07E1  09AD               	comf	___aldiv@quotient+3,f
  3387  07E2  0AAA               	incf	___aldiv@quotient,f
  3388  07E3  1903               	skipnz
  3389  07E4  0AAB               	incf	___aldiv@quotient+1,f
  3390  07E5  1903               	skipnz
  3391  07E6  0AAC               	incf	___aldiv@quotient+2,f
  3392  07E7  1903               	skipnz
  3393  07E8  0AAD               	incf	___aldiv@quotient+3,f
  3394  07E9                     l3057:	
  3395  07E9  082D               	movf	___aldiv@quotient+3,w
  3396  07EA  00A3               	movwf	?___aldiv+3
  3397  07EB  082C               	movf	___aldiv@quotient+2,w
  3398  07EC  00A2               	movwf	?___aldiv+2
  3399  07ED  082B               	movf	___aldiv@quotient+1,w
  3400  07EE  00A1               	movwf	?___aldiv+1
  3401  07EF  082A               	movf	___aldiv@quotient,w
  3402  07F0  00A0               	movwf	?___aldiv
  3403  07F1  0008               	return
  3404  07F2                     __end_of___aldiv:	
  3405                           
  3406                           	psect	text7
  3407  0F17                     __ptext7:	
  3408 ;; *************** function _Lcd_Init *****************
  3409 ;; Defined at:
  3410 ;;		line 65 in file "./LCD4bits.h"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;		None
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;		None
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  1    wreg      void 
  3417 ;; Registers used:
  3418 ;;		wreg, status,2, status,0, pclath, cstack
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3424 ;;      Params:         0       0       0       0       0
  3425 ;;      Locals:         0       0       0       0       0
  3426 ;;      Temps:          0       2       0       0       0
  3427 ;;      Totals:         0       2       0       0       0
  3428 ;;Total ram usage:        2 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    3
  3431 ;; This function calls:
  3432 ;;		_Lcd_Cmd
  3433 ;;		_Lcd_Port
  3434 ;; This function is called by:
  3435 ;;		_setup
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           
  3440                           ;psect for function _Lcd_Init
  3441  0F17                     _Lcd_Init:	
  3442                           
  3443                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  3444                           
  3445                           ;incstack = 0
  3446                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3447  0F17  3000               	movlw	0
  3448  0F18  120A  158A  2210  120A  158A  	fcall	_Lcd_Port
  3449                           
  3450                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  3451  0F1D  3034               	movlw	52
  3452  0F1E  1283               	bcf	3,5	;RP0=0, select bank0
  3453  0F1F  1303               	bcf	3,6	;RP1=0, select bank0
  3454  0F20  00A1               	movwf	??_Lcd_Init+1
  3455  0F21  30F1               	movlw	241
  3456  0F22  00A0               	movwf	??_Lcd_Init
  3457  0F23                     u3817:	
  3458  0F23  0BA0               	decfsz	??_Lcd_Init,f
  3459  0F24  2F23               	goto	u3817
  3460  0F25  0BA1               	decfsz	??_Lcd_Init+1,f
  3461  0F26  2F23               	goto	u3817
  3462                           
  3463                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  3464  0F27  3003               	movlw	3
  3465  0F28  120A  158A  222A  120A  158A  	fcall	_Lcd_Cmd
  3466                           
  3467                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  3468  0F2D  300D               	movlw	13
  3469  0F2E  1283               	bcf	3,5	;RP0=0, select bank0
  3470  0F2F  1303               	bcf	3,6	;RP1=0, select bank0
  3471  0F30  00A1               	movwf	??_Lcd_Init+1
  3472  0F31  30FB               	movlw	251
  3473  0F32  00A0               	movwf	??_Lcd_Init
  3474  0F33                     u3827:	
  3475  0F33  0BA0               	decfsz	??_Lcd_Init,f
  3476  0F34  2F33               	goto	u3827
  3477  0F35  0BA1               	decfsz	??_Lcd_Init+1,f
  3478  0F36  2F33               	goto	u3827
  3479                           
  3480                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  3481  0F37  3003               	movlw	3
  3482  0F38  120A  158A  222A  120A  158A  	fcall	_Lcd_Cmd
  3483                           
  3484                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  3485  0F3D  301D               	movlw	29
  3486  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  3487  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  3488  0F40  00A1               	movwf	??_Lcd_Init+1
  3489  0F41  3090               	movlw	144
  3490  0F42  00A0               	movwf	??_Lcd_Init
  3491  0F43                     u3837:	
  3492  0F43  0BA0               	decfsz	??_Lcd_Init,f
  3493  0F44  2F43               	goto	u3837
  3494  0F45  0BA1               	decfsz	??_Lcd_Init+1,f
  3495  0F46  2F43               	goto	u3837
  3496  0F47  0000               	nop
  3497                           
  3498                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  3499  0F48  3003               	movlw	3
  3500  0F49  120A  158A  222A  120A  158A  	fcall	_Lcd_Cmd
  3501                           
  3502                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  3503  0F4E  3002               	movlw	2
  3504  0F4F  120A  158A  222A  120A  158A  	fcall	_Lcd_Cmd
  3505                           
  3506                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  3507  0F54  3002               	movlw	2
  3508  0F55  120A  158A  222A  120A  158A  	fcall	_Lcd_Cmd
  3509                           
  3510                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  3511  0F5A  3008               	movlw	8
  3512  0F5B  120A  158A  222A  120A  158A  	fcall	_Lcd_Cmd
  3513                           
  3514                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  3515  0F60  3000               	movlw	0
  3516  0F61  120A  158A  222A  120A  158A  	fcall	_Lcd_Cmd
  3517                           
  3518                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  3519  0F66  300C               	movlw	12
  3520  0F67  120A  158A  222A  120A  158A  	fcall	_Lcd_Cmd
  3521                           
  3522                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  3523  0F6C  3000               	movlw	0
  3524  0F6D  120A  158A  222A  120A  158A  	fcall	_Lcd_Cmd
  3525                           
  3526                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  3527  0F72  3006               	movlw	6
  3528  0F73  120A  158A  222A   	fcall	_Lcd_Cmd
  3529  0F76  0008               	return
  3530  0F77                     __end_of_Lcd_Init:	
  3531                           
  3532                           	psect	text8
  3533  0BA9                     __ptext8:	
  3534 ;; *************** function _I2C_Master_Init *****************
  3535 ;; Defined at:
  3536 ;;		line 16 in file "./I2C.h"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;  c               4   13[BANK0 ] const unsigned long 
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;		None
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      void 
  3543 ;; Registers used:
  3544 ;;		wreg, status,2, status,0, pclath, cstack
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3550 ;;      Params:         0       4       0       0       0
  3551 ;;      Locals:         0       0       0       0       0
  3552 ;;      Temps:          4       0       0       0       0
  3553 ;;      Totals:         4       4       0       0       0
  3554 ;;Total ram usage:        8 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:    2
  3557 ;; This function calls:
  3558 ;;		___lldiv
  3559 ;; This function is called by:
  3560 ;;		_setup
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           
  3565                           ;psect for function _I2C_Master_Init
  3566  0BA9                     _I2C_Master_Init:	
  3567                           
  3568                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  3569                           
  3570                           ;incstack = 0
  3571                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  3572  0BA9  3028               	movlw	40
  3573  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
  3574  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
  3575  0BAC  0094               	movwf	20	;volatile
  3576                           
  3577                           ;./I2C.h: 19:     SSPCON2 = 0;
  3578  0BAD  1683               	bsf	3,5	;RP0=1, select bank1
  3579  0BAE  1303               	bcf	3,6	;RP1=0, select bank1
  3580  0BAF  0191               	clrf	17	;volatile
  3581                           
  3582                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  3583  0BB0  1283               	bcf	3,5	;RP0=0, select bank0
  3584  0BB1  1303               	bcf	3,6	;RP1=0, select bank0
  3585  0BB2  082D               	movf	I2C_Master_Init@c,w
  3586  0BB3  00F4               	movwf	??_I2C_Master_Init
  3587  0BB4  082E               	movf	I2C_Master_Init@c+1,w
  3588  0BB5  00F5               	movwf	??_I2C_Master_Init+1
  3589  0BB6  082F               	movf	I2C_Master_Init@c+2,w
  3590  0BB7  00F6               	movwf	??_I2C_Master_Init+2
  3591  0BB8  0830               	movf	I2C_Master_Init@c+3,w
  3592  0BB9  00F7               	movwf	??_I2C_Master_Init+3
  3593  0BBA  3002               	movlw	2
  3594  0BBB                     u2915:	
  3595  0BBB  1003               	clrc
  3596  0BBC  0DF4               	rlf	??_I2C_Master_Init,f
  3597  0BBD  0DF5               	rlf	??_I2C_Master_Init+1,f
  3598  0BBE  0DF6               	rlf	??_I2C_Master_Init+2,f
  3599  0BBF  0DF7               	rlf	??_I2C_Master_Init+3,f
  3600  0BC0  3EFF               	addlw	-1
  3601  0BC1  1D03               	skipz
  3602  0BC2  2BBB               	goto	u2915
  3603  0BC3  0877               	movf	??_I2C_Master_Init+3,w
  3604  0BC4  00A3               	movwf	___lldiv@divisor+3
  3605  0BC5  0876               	movf	??_I2C_Master_Init+2,w
  3606  0BC6  00A2               	movwf	___lldiv@divisor+2
  3607  0BC7  0875               	movf	??_I2C_Master_Init+1,w
  3608  0BC8  00A1               	movwf	___lldiv@divisor+1
  3609  0BC9  0874               	movf	??_I2C_Master_Init,w
  3610  0BCA  00A0               	movwf	___lldiv@divisor
  3611  0BCB  3000               	movlw	0
  3612  0BCC  00A7               	movwf	___lldiv@dividend+3
  3613  0BCD  307A               	movlw	122
  3614  0BCE  00A6               	movwf	___lldiv@dividend+2
  3615  0BCF  3012               	movlw	18
  3616  0BD0  00A5               	movwf	___lldiv@dividend+1
  3617  0BD1  3000               	movlw	0
  3618  0BD2  00A4               	movwf	___lldiv@dividend
  3619  0BD3  120A  158A  26B7   	fcall	___lldiv
  3620  0BD6  1283               	bcf	3,5	;RP0=0, select bank0
  3621  0BD7  1303               	bcf	3,6	;RP1=0, select bank0
  3622  0BD8  0820               	movf	?___lldiv,w
  3623  0BD9  3EFF               	addlw	255
  3624  0BDA  1683               	bsf	3,5	;RP0=1, select bank1
  3625  0BDB  1303               	bcf	3,6	;RP1=0, select bank1
  3626  0BDC  0093               	movwf	19	;volatile
  3627                           
  3628                           ;./I2C.h: 21:     SSPSTAT = 0;
  3629  0BDD  0194               	clrf	20	;volatile
  3630                           
  3631                           ;./I2C.h: 22:     TRISCbits.TRISC3 = 1;
  3632  0BDE  1587               	bsf	7,3	;volatile
  3633                           
  3634                           ;./I2C.h: 23:     TRISCbits.TRISC4 = 1;
  3635  0BDF  1607               	bsf	7,4	;volatile
  3636  0BE0  0008               	return
  3637  0BE1                     __end_of_I2C_Master_Init:	
  3638                           
  3639                           	psect	text9
  3640  0EB7                     __ptext9:	
  3641 ;; *************** function ___lldiv *****************
  3642 ;; Defined at:
  3643 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;  divisor         4    0[BANK0 ] unsigned long 
  3646 ;;  dividend        4    4[BANK0 ] unsigned long 
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;  quotient        4    8[BANK0 ] unsigned long 
  3649 ;;  counter         1   12[BANK0 ] unsigned char 
  3650 ;; Return value:  Size  Location     Type
  3651 ;;                  4    0[BANK0 ] unsigned long 
  3652 ;; Registers used:
  3653 ;;		wreg, status,2, status,0
  3654 ;; Tracked objects:
  3655 ;;		On entry : 0/0
  3656 ;;		On exit  : 0/0
  3657 ;;		Unchanged: 0/0
  3658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3659 ;;      Params:         0       8       0       0       0
  3660 ;;      Locals:         0       5       0       0       0
  3661 ;;      Temps:          1       0       0       0       0
  3662 ;;      Totals:         1      13       0       0       0
  3663 ;;Total ram usage:       14 bytes
  3664 ;; Hardware stack levels used:    1
  3665 ;; Hardware stack levels required when called:    1
  3666 ;; This function calls:
  3667 ;;		Nothing
  3668 ;; This function is called by:
  3669 ;;		_I2C_Master_Init
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           
  3674                           ;psect for function ___lldiv
  3675  0EB7                     ___lldiv:	
  3676                           
  3677                           ;incstack = 0
  3678                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3679  0EB7  3000               	movlw	0
  3680  0EB8  1283               	bcf	3,5	;RP0=0, select bank0
  3681  0EB9  1303               	bcf	3,6	;RP1=0, select bank0
  3682  0EBA  00AB               	movwf	___lldiv@quotient+3
  3683  0EBB  3000               	movlw	0
  3684  0EBC  00AA               	movwf	___lldiv@quotient+2
  3685  0EBD  3000               	movlw	0
  3686  0EBE  00A9               	movwf	___lldiv@quotient+1
  3687  0EBF  3000               	movlw	0
  3688  0EC0  00A8               	movwf	___lldiv@quotient
  3689  0EC1  0823               	movf	___lldiv@divisor+3,w
  3690  0EC2  0422               	iorwf	___lldiv@divisor+2,w
  3691  0EC3  0421               	iorwf	___lldiv@divisor+1,w
  3692  0EC4  0420               	iorwf	___lldiv@divisor,w
  3693  0EC5  1903               	skipnz
  3694  0EC6  2F0E               	goto	l3017
  3695  0EC7  01AC               	clrf	___lldiv@counter
  3696  0EC8  0AAC               	incf	___lldiv@counter,f
  3697  0EC9                     l3003:	
  3698  0EC9  1BA3               	btfsc	___lldiv@divisor+3,7
  3699  0ECA  2ED9               	goto	l3005
  3700  0ECB  3001               	movlw	1
  3701  0ECC  00F3               	movwf	??___lldiv
  3702  0ECD                     u2685:	
  3703  0ECD  1003               	clrc
  3704  0ECE  0DA0               	rlf	___lldiv@divisor,f
  3705  0ECF  0DA1               	rlf	___lldiv@divisor+1,f
  3706  0ED0  0DA2               	rlf	___lldiv@divisor+2,f
  3707  0ED1  0DA3               	rlf	___lldiv@divisor+3,f
  3708  0ED2  0BF3               	decfsz	??___lldiv,f
  3709  0ED3  2ECD               	goto	u2685
  3710  0ED4  3001               	movlw	1
  3711  0ED5  00F3               	movwf	??___lldiv
  3712  0ED6  0873               	movf	??___lldiv,w
  3713  0ED7  07AC               	addwf	___lldiv@counter,f
  3714  0ED8  2EC9               	goto	l3003
  3715  0ED9                     l3005:	
  3716  0ED9  3001               	movlw	1
  3717  0EDA  00F3               	movwf	??___lldiv
  3718  0EDB                     u2705:	
  3719  0EDB  1003               	clrc
  3720  0EDC  0DA8               	rlf	___lldiv@quotient,f
  3721  0EDD  0DA9               	rlf	___lldiv@quotient+1,f
  3722  0EDE  0DAA               	rlf	___lldiv@quotient+2,f
  3723  0EDF  0DAB               	rlf	___lldiv@quotient+3,f
  3724  0EE0  0BF3               	decfsz	??___lldiv,f
  3725  0EE1  2EDB               	goto	u2705
  3726  0EE2  0823               	movf	___lldiv@divisor+3,w
  3727  0EE3  0227               	subwf	___lldiv@dividend+3,w
  3728  0EE4  1D03               	skipz
  3729  0EE5  2EF0               	goto	u2715
  3730  0EE6  0822               	movf	___lldiv@divisor+2,w
  3731  0EE7  0226               	subwf	___lldiv@dividend+2,w
  3732  0EE8  1D03               	skipz
  3733  0EE9  2EF0               	goto	u2715
  3734  0EEA  0821               	movf	___lldiv@divisor+1,w
  3735  0EEB  0225               	subwf	___lldiv@dividend+1,w
  3736  0EEC  1D03               	skipz
  3737  0EED  2EF0               	goto	u2715
  3738  0EEE  0820               	movf	___lldiv@divisor,w
  3739  0EEF  0224               	subwf	___lldiv@dividend,w
  3740  0EF0                     u2715:	
  3741  0EF0  1C03               	skipc
  3742  0EF1  2F01               	goto	l3013
  3743  0EF2  0820               	movf	___lldiv@divisor,w
  3744  0EF3  02A4               	subwf	___lldiv@dividend,f
  3745  0EF4  0821               	movf	___lldiv@divisor+1,w
  3746  0EF5  1C03               	skipc
  3747  0EF6  0F21               	incfsz	___lldiv@divisor+1,w
  3748  0EF7  02A5               	subwf	___lldiv@dividend+1,f
  3749  0EF8  0822               	movf	___lldiv@divisor+2,w
  3750  0EF9  1C03               	skipc
  3751  0EFA  0F22               	incfsz	___lldiv@divisor+2,w
  3752  0EFB  02A6               	subwf	___lldiv@dividend+2,f
  3753  0EFC  0823               	movf	___lldiv@divisor+3,w
  3754  0EFD  1C03               	skipc
  3755  0EFE  0F23               	incfsz	___lldiv@divisor+3,w
  3756  0EFF  02A7               	subwf	___lldiv@dividend+3,f
  3757  0F00  1428               	bsf	___lldiv@quotient,0
  3758  0F01                     l3013:	
  3759  0F01  3001               	movlw	1
  3760  0F02                     u2725:	
  3761  0F02  1003               	clrc
  3762  0F03  0CA3               	rrf	___lldiv@divisor+3,f
  3763  0F04  0CA2               	rrf	___lldiv@divisor+2,f
  3764  0F05  0CA1               	rrf	___lldiv@divisor+1,f
  3765  0F06  0CA0               	rrf	___lldiv@divisor,f
  3766  0F07  3EFF               	addlw	-1
  3767  0F08  1D03               	skipz
  3768  0F09  2F02               	goto	u2725
  3769  0F0A  3001               	movlw	1
  3770  0F0B  02AC               	subwf	___lldiv@counter,f
  3771  0F0C  1D03               	btfss	3,2
  3772  0F0D  2ED9               	goto	l3005
  3773  0F0E                     l3017:	
  3774  0F0E  082B               	movf	___lldiv@quotient+3,w
  3775  0F0F  00A3               	movwf	?___lldiv+3
  3776  0F10  082A               	movf	___lldiv@quotient+2,w
  3777  0F11  00A2               	movwf	?___lldiv+2
  3778  0F12  0829               	movf	___lldiv@quotient+1,w
  3779  0F13  00A1               	movwf	?___lldiv+1
  3780  0F14  0828               	movf	___lldiv@quotient,w
  3781  0F15  00A0               	movwf	?___lldiv
  3782  0F16  0008               	return
  3783  0F17                     __end_of___lldiv:	
  3784                           
  3785                           	psect	text10
  3786  0A5F                     __ptext10:	
  3787 ;; *************** function _open_door *****************
  3788 ;; Defined at:
  3789 ;;		line 506 in file "mainMaster.c"
  3790 ;; Parameters:    Size  Location     Type
  3791 ;;		None
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;		None
  3794 ;; Return value:  Size  Location     Type
  3795 ;;                  1    wreg      void 
  3796 ;; Registers used:
  3797 ;;		wreg, status,2, status,0, pclath, cstack
  3798 ;; Tracked objects:
  3799 ;;		On entry : 0/0
  3800 ;;		On exit  : 0/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3803 ;;      Params:         0       0       0       0       0
  3804 ;;      Locals:         0       0       0       0       0
  3805 ;;      Temps:          0       0       0       0       0
  3806 ;;      Totals:         0       0       0       0       0
  3807 ;;Total ram usage:        0 bytes
  3808 ;; Hardware stack levels used:    1
  3809 ;; Hardware stack levels required when called:    3
  3810 ;; This function calls:
  3811 ;;		_I2C_Master_Start
  3812 ;;		_I2C_Master_Stop
  3813 ;;		_I2C_Master_Write
  3814 ;; This function is called by:
  3815 ;;		_main
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           
  3820                           ;psect for function _open_door
  3821  0A5F                     _open_door:	
  3822                           
  3823                           ;mainMaster.c: 508:     I2C_Master_Start();
  3824                           
  3825                           ;incstack = 0
  3826                           ; Regs used in _open_door: [wreg+status,2+status,0+pclath+cstack]
  3827  0A5F  120A  158A  21C7  120A  158A  	fcall	_I2C_Master_Start
  3828                           
  3829                           ;mainMaster.c: 509:     I2C_Master_Write(0x20);
  3830  0A64  3020               	movlw	32
  3831  0A65  00F3               	movwf	I2C_Master_Write@d
  3832  0A66  3000               	movlw	0
  3833  0A67  00F4               	movwf	I2C_Master_Write@d+1
  3834  0A68  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  3835                           
  3836                           ;mainMaster.c: 510:     I2C_Master_Write(0xFF);
  3837  0A6D  30FF               	movlw	255
  3838  0A6E  00F3               	movwf	I2C_Master_Write@d
  3839  0A6F  3000               	movlw	0
  3840  0A70  00F4               	movwf	I2C_Master_Write@d+1
  3841  0A71  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  3842                           
  3843                           ;mainMaster.c: 511:     I2C_Master_Stop();
  3844  0A76  120A  158A  21CE   	fcall	_I2C_Master_Stop
  3845  0A79  0008               	return
  3846  0A7A                     __end_of_open_door:	
  3847                           
  3848                           	psect	text11
  3849  0B02                     __ptext11:	
  3850 ;; *************** function _get_tripwire *****************
  3851 ;; Defined at:
  3852 ;;		line 470 in file "mainMaster.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;		None
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;  trip            1    2[BANK0 ] unsigned char 
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      unsigned char 
  3859 ;; Registers used:
  3860 ;;		wreg, status,2, status,0, pclath, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3866 ;;      Params:         0       0       0       0       0
  3867 ;;      Locals:         0       1       0       0       0
  3868 ;;      Temps:          1       0       0       0       0
  3869 ;;      Totals:         1       1       0       0       0
  3870 ;;Total ram usage:        2 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    3
  3873 ;; This function calls:
  3874 ;;		_I2C_Master_Read
  3875 ;;		_I2C_Master_Start
  3876 ;;		_I2C_Master_Stop
  3877 ;;		_I2C_Master_Write
  3878 ;; This function is called by:
  3879 ;;		_main
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           
  3884                           ;psect for function _get_tripwire
  3885  0B02                     _get_tripwire:	
  3886                           
  3887                           ;mainMaster.c: 472:     char trip;;mainMaster.c: 474:     I2C_Master_Start();
  3888                           
  3889                           ;incstack = 0
  3890                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  3891  0B02  120A  158A  21C7  120A  158A  	fcall	_I2C_Master_Start
  3892                           
  3893                           ;mainMaster.c: 475:     I2C_Master_Write(0x21);
  3894  0B07  3021               	movlw	33
  3895  0B08  00F3               	movwf	I2C_Master_Write@d
  3896  0B09  3000               	movlw	0
  3897  0B0A  00F4               	movwf	I2C_Master_Write@d+1
  3898  0B0B  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  3899                           
  3900                           ;mainMaster.c: 476:     trip = I2C_Master_Read(0);
  3901  0B10  3000               	movlw	0
  3902  0B11  00F3               	movwf	I2C_Master_Read@a
  3903  0B12  00F4               	movwf	I2C_Master_Read@a+1
  3904  0B13  120A  118A  25D1  120A  158A  	fcall	_I2C_Master_Read
  3905  0B18  0873               	movf	?_I2C_Master_Read,w
  3906  0B19  00F7               	movwf	??_get_tripwire
  3907  0B1A  0877               	movf	??_get_tripwire,w
  3908  0B1B  1283               	bcf	3,5	;RP0=0, select bank0
  3909  0B1C  1303               	bcf	3,6	;RP1=0, select bank0
  3910  0B1D  00A2               	movwf	get_tripwire@trip
  3911                           
  3912                           ;mainMaster.c: 477:     I2C_Master_Stop();
  3913  0B1E  120A  158A  21CE   	fcall	_I2C_Master_Stop
  3914                           
  3915                           ;mainMaster.c: 479:     return (trip);
  3916  0B21  1283               	bcf	3,5	;RP0=0, select bank0
  3917  0B22  1303               	bcf	3,6	;RP1=0, select bank0
  3918  0B23  0822               	movf	get_tripwire@trip,w
  3919  0B24  0008               	return
  3920  0B25                     __end_of_get_tripwire:	
  3921                           
  3922                           	psect	text12
  3923  0F77                     __ptext12:	
  3924 ;; *************** function _get_time *****************
  3925 ;; Defined at:
  3926 ;;		line 395 in file "mainMaster.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;  time_string     1    wreg     PTR unsigned char 
  3929 ;;		 -> time(6), 
  3930 ;; Auto vars:     Size  Location     Type
  3931 ;;  time_string     1    6[BANK0 ] PTR unsigned char 
  3932 ;;		 -> time(6), 
  3933 ;;  min             1    5[BANK0 ] unsigned char 
  3934 ;;  hour            1    4[BANK0 ] unsigned char 
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  1    wreg      void 
  3937 ;; Registers used:
  3938 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3944 ;;      Params:         0       0       0       0       0
  3945 ;;      Locals:         0       3       0       0       0
  3946 ;;      Temps:          0       2       0       0       0
  3947 ;;      Totals:         0       5       0       0       0
  3948 ;;Total ram usage:        5 bytes
  3949 ;; Hardware stack levels used:    1
  3950 ;; Hardware stack levels required when called:    3
  3951 ;; This function calls:
  3952 ;;		_I2C_Master_Read
  3953 ;;		_I2C_Master_RepeatedStart
  3954 ;;		_I2C_Master_Start
  3955 ;;		_I2C_Master_Stop
  3956 ;;		_I2C_Master_Write
  3957 ;; This function is called by:
  3958 ;;		_main
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           
  3963                           ;psect for function _get_time
  3964  0F77                     _get_time:	
  3965                           
  3966                           ;incstack = 0
  3967                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3968                           ;get_time@time_string stored from wreg
  3969  0F77  1283               	bcf	3,5	;RP0=0, select bank0
  3970  0F78  1303               	bcf	3,6	;RP1=0, select bank0
  3971  0F79  00A6               	movwf	get_time@time_string
  3972                           
  3973                           ;mainMaster.c: 397:     char hour, min;;mainMaster.c: 399:     I2C_Master_Start();
  3974  0F7A  120A  158A  21C7  120A  158A  	fcall	_I2C_Master_Start
  3975                           
  3976                           ;mainMaster.c: 400:     I2C_Master_Write(0xD0);
  3977  0F7F  30D0               	movlw	208
  3978  0F80  00F3               	movwf	I2C_Master_Write@d
  3979  0F81  3000               	movlw	0
  3980  0F82  00F4               	movwf	I2C_Master_Write@d+1
  3981  0F83  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  3982                           
  3983                           ;mainMaster.c: 401:     I2C_Master_Write(0x01);
  3984  0F88  3001               	movlw	1
  3985  0F89  00F3               	movwf	I2C_Master_Write@d
  3986  0F8A  3000               	movlw	0
  3987  0F8B  00F4               	movwf	I2C_Master_Write@d+1
  3988  0F8C  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  3989                           
  3990                           ;mainMaster.c: 402:     I2C_Master_RepeatedStart();
  3991  0F91  120A  158A  21D5  120A  158A  	fcall	_I2C_Master_RepeatedStart
  3992                           
  3993                           ;mainMaster.c: 403:     I2C_Master_Write(0xD1);
  3994  0F96  30D1               	movlw	209
  3995  0F97  00F3               	movwf	I2C_Master_Write@d
  3996  0F98  3000               	movlw	0
  3997  0F99  00F4               	movwf	I2C_Master_Write@d+1
  3998  0F9A  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  3999                           
  4000                           ;mainMaster.c: 404:     min = I2C_Master_Read(1);
  4001  0F9F  3001               	movlw	1
  4002  0FA0  00F3               	movwf	I2C_Master_Read@a
  4003  0FA1  3000               	movlw	0
  4004  0FA2  00F4               	movwf	I2C_Master_Read@a+1
  4005  0FA3  120A  118A  25D1  120A  158A  	fcall	_I2C_Master_Read
  4006  0FA8  0873               	movf	?_I2C_Master_Read,w
  4007  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  4008  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  4009  0FAB  00A2               	movwf	??_get_time
  4010  0FAC  0822               	movf	??_get_time,w
  4011  0FAD  00A5               	movwf	get_time@min
  4012                           
  4013                           ;mainMaster.c: 405:     hour = I2C_Master_Read(0);
  4014  0FAE  3000               	movlw	0
  4015  0FAF  00F3               	movwf	I2C_Master_Read@a
  4016  0FB0  00F4               	movwf	I2C_Master_Read@a+1
  4017  0FB1  120A  118A  25D1  120A  158A  	fcall	_I2C_Master_Read
  4018  0FB6  0873               	movf	?_I2C_Master_Read,w
  4019  0FB7  1283               	bcf	3,5	;RP0=0, select bank0
  4020  0FB8  1303               	bcf	3,6	;RP1=0, select bank0
  4021  0FB9  00A2               	movwf	??_get_time
  4022  0FBA  0822               	movf	??_get_time,w
  4023  0FBB  00A4               	movwf	get_time@hour
  4024                           
  4025                           ;mainMaster.c: 406:     I2C_Master_Stop();
  4026  0FBC  120A  158A  21CE  120A  158A  	fcall	_I2C_Master_Stop
  4027                           
  4028                           ;mainMaster.c: 408:     time_string[0] = (hour >> 4) + '0';
  4029  0FC1  1283               	bcf	3,5	;RP0=0, select bank0
  4030  0FC2  1303               	bcf	3,6	;RP1=0, select bank0
  4031  0FC3  0824               	movf	get_time@hour,w
  4032  0FC4  00A2               	movwf	??_get_time
  4033  0FC5  3004               	movlw	4
  4034  0FC6                     u3175:	
  4035  0FC6  1003               	clrc
  4036  0FC7  0CA2               	rrf	??_get_time,f
  4037  0FC8  3EFF               	addlw	-1
  4038  0FC9  1D03               	skipz
  4039  0FCA  2FC6               	goto	u3175
  4040  0FCB  0822               	movf	??_get_time,w
  4041  0FCC  3E30               	addlw	48
  4042  0FCD  00A3               	movwf	??_get_time+1
  4043  0FCE  0826               	movf	get_time@time_string,w
  4044  0FCF  0084               	movwf	4
  4045  0FD0  0823               	movf	??_get_time+1,w
  4046  0FD1  1383               	bcf	3,7	;select IRP bank0
  4047  0FD2  0080               	movwf	0
  4048                           
  4049                           ;mainMaster.c: 409:     time_string[1] = (hour & 0x0F) + '0';
  4050  0FD3  0824               	movf	get_time@hour,w
  4051  0FD4  390F               	andlw	15
  4052  0FD5  3E30               	addlw	48
  4053  0FD6  00A2               	movwf	??_get_time
  4054  0FD7  0A26               	incf	get_time@time_string,w
  4055  0FD8  0084               	movwf	4
  4056  0FD9  0822               	movf	??_get_time,w
  4057  0FDA  0080               	movwf	0
  4058                           
  4059                           ;mainMaster.c: 410:     time_string[2] = ':';
  4060  0FDB  303A               	movlw	58
  4061  0FDC  00A2               	movwf	??_get_time
  4062  0FDD  0826               	movf	get_time@time_string,w
  4063  0FDE  3E02               	addlw	2
  4064  0FDF  0084               	movwf	4
  4065  0FE0  0822               	movf	??_get_time,w
  4066  0FE1  0080               	movwf	0
  4067                           
  4068                           ;mainMaster.c: 411:     time_string[3] = (min >> 4) + '0';
  4069  0FE2  0825               	movf	get_time@min,w
  4070  0FE3  00A2               	movwf	??_get_time
  4071  0FE4  3004               	movlw	4
  4072  0FE5                     u3185:	
  4073  0FE5  1003               	clrc
  4074  0FE6  0CA2               	rrf	??_get_time,f
  4075  0FE7  3EFF               	addlw	-1
  4076  0FE8  1D03               	skipz
  4077  0FE9  2FE5               	goto	u3185
  4078  0FEA  0822               	movf	??_get_time,w
  4079  0FEB  3E30               	addlw	48
  4080  0FEC  00A3               	movwf	??_get_time+1
  4081  0FED  0826               	movf	get_time@time_string,w
  4082  0FEE  3E03               	addlw	3
  4083  0FEF  0084               	movwf	4
  4084  0FF0  0823               	movf	??_get_time+1,w
  4085  0FF1  0080               	movwf	0
  4086                           
  4087                           ;mainMaster.c: 412:     time_string[4] = (min & 0x0F) + '0';
  4088  0FF2  0825               	movf	get_time@min,w
  4089  0FF3  390F               	andlw	15
  4090  0FF4  3E30               	addlw	48
  4091  0FF5  00A2               	movwf	??_get_time
  4092  0FF6  0826               	movf	get_time@time_string,w
  4093  0FF7  3E04               	addlw	4
  4094  0FF8  0084               	movwf	4
  4095  0FF9  0822               	movf	??_get_time,w
  4096  0FFA  0080               	movwf	0
  4097                           
  4098                           ;mainMaster.c: 413:     time_string[5] = '\0';
  4099  0FFB  0826               	movf	get_time@time_string,w
  4100  0FFC  3E05               	addlw	5
  4101  0FFD  0084               	movwf	4
  4102  0FFE  0180               	clrf	0
  4103  0FFF  0008               	return
  4104  1000                     __end_of_get_time:	
  4105                           
  4106                           	psect	text13
  4107  06C0                     __ptext13:	
  4108 ;; *************** function _get_temp *****************
  4109 ;; Defined at:
  4110 ;;		line 431 in file "mainMaster.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;  temp_string     1    wreg     PTR unsigned char 
  4113 ;;		 -> temp(6), 
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;  temp_string     1   29[BANK0 ] PTR unsigned char 
  4116 ;;		 -> temp(6), 
  4117 ;;  decimal         3   25[BANK0 ] unsigned char [3]
  4118 ;;  tempLSB         1   30[BANK0 ] unsigned char 
  4119 ;;  tempMSB         1   28[BANK0 ] unsigned char 
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  1    wreg      void 
  4122 ;; Registers used:
  4123 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4129 ;;      Params:         0       0       0       0       0
  4130 ;;      Locals:         0       6       0       0       0
  4131 ;;      Temps:          0       3       0       0       0
  4132 ;;      Totals:         0       9       0       0       0
  4133 ;;Total ram usage:        9 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; Hardware stack levels required when called:    3
  4136 ;; This function calls:
  4137 ;;		_I2C_Master_Read
  4138 ;;		_I2C_Master_RepeatedStart
  4139 ;;		_I2C_Master_Start
  4140 ;;		_I2C_Master_Stop
  4141 ;;		_I2C_Master_Write
  4142 ;;		___bmul
  4143 ;;		_sprintf
  4144 ;;		_strcat
  4145 ;; This function is called by:
  4146 ;;		_main
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           
  4151                           ;psect for function _get_temp
  4152  06C0                     _get_temp:	
  4153                           
  4154                           ;incstack = 0
  4155                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4156                           ;get_temp@temp_string stored from wreg
  4157  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  4158  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  4159  06C2  00BD               	movwf	get_temp@temp_string
  4160                           
  4161                           ;mainMaster.c: 433:     char tempLSB, tempMSB;;mainMaster.c: 434:     char decimal[3];;m
      +                          ainMaster.c: 436:     I2C_Master_Start();
  4162  06C3  120A  158A  21C7  120A  118A  	fcall	_I2C_Master_Start
  4163                           
  4164                           ;mainMaster.c: 437:     I2C_Master_Write(0xD0);
  4165  06C8  30D0               	movlw	208
  4166  06C9  00F3               	movwf	I2C_Master_Write@d
  4167  06CA  3000               	movlw	0
  4168  06CB  00F4               	movwf	I2C_Master_Write@d+1
  4169  06CC  120A  158A  21DC  120A  118A  	fcall	_I2C_Master_Write
  4170                           
  4171                           ;mainMaster.c: 438:     I2C_Master_Write(0x11);
  4172  06D1  3011               	movlw	17
  4173  06D2  00F3               	movwf	I2C_Master_Write@d
  4174  06D3  3000               	movlw	0
  4175  06D4  00F4               	movwf	I2C_Master_Write@d+1
  4176  06D5  120A  158A  21DC  120A  118A  	fcall	_I2C_Master_Write
  4177                           
  4178                           ;mainMaster.c: 439:     I2C_Master_RepeatedStart();
  4179  06DA  120A  158A  21D5  120A  118A  	fcall	_I2C_Master_RepeatedStart
  4180                           
  4181                           ;mainMaster.c: 440:     I2C_Master_Write(0xD1);
  4182  06DF  30D1               	movlw	209
  4183  06E0  00F3               	movwf	I2C_Master_Write@d
  4184  06E1  3000               	movlw	0
  4185  06E2  00F4               	movwf	I2C_Master_Write@d+1
  4186  06E3  120A  158A  21DC  120A  118A  	fcall	_I2C_Master_Write
  4187                           
  4188                           ;mainMaster.c: 441:     tempMSB = I2C_Master_Read(1);
  4189  06E8  3001               	movlw	1
  4190  06E9  00F3               	movwf	I2C_Master_Read@a
  4191  06EA  3000               	movlw	0
  4192  06EB  00F4               	movwf	I2C_Master_Read@a+1
  4193  06EC  120A  118A  25D1  120A  118A  	fcall	_I2C_Master_Read
  4194  06F1  0873               	movf	?_I2C_Master_Read,w
  4195  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  4196  06F3  1303               	bcf	3,6	;RP1=0, select bank0
  4197  06F4  00B6               	movwf	??_get_temp
  4198  06F5  0836               	movf	??_get_temp,w
  4199  06F6  00BC               	movwf	get_temp@tempMSB
  4200                           
  4201                           ;mainMaster.c: 442:     tempLSB = I2C_Master_Read(0);
  4202  06F7  3000               	movlw	0
  4203  06F8  00F3               	movwf	I2C_Master_Read@a
  4204  06F9  00F4               	movwf	I2C_Master_Read@a+1
  4205  06FA  120A  118A  25D1  120A  118A  	fcall	_I2C_Master_Read
  4206  06FF  0873               	movf	?_I2C_Master_Read,w
  4207  0700  1283               	bcf	3,5	;RP0=0, select bank0
  4208  0701  1303               	bcf	3,6	;RP1=0, select bank0
  4209  0702  00B6               	movwf	??_get_temp
  4210  0703  0836               	movf	??_get_temp,w
  4211  0704  00BE               	movwf	get_temp@tempLSB
  4212                           
  4213                           ;mainMaster.c: 443:     I2C_Master_Stop();
  4214  0705  120A  158A  21CE  120A  118A  	fcall	_I2C_Master_Stop
  4215                           
  4216                           ;mainMaster.c: 445:     tempMSB = tempMSB - 4;
  4217  070A  1283               	bcf	3,5	;RP0=0, select bank0
  4218  070B  1303               	bcf	3,6	;RP1=0, select bank0
  4219  070C  083C               	movf	get_temp@tempMSB,w
  4220  070D  3EFC               	addlw	252
  4221  070E  00B6               	movwf	??_get_temp
  4222  070F  0836               	movf	??_get_temp,w
  4223  0710  00BC               	movwf	get_temp@tempMSB
  4224                           
  4225                           ;mainMaster.c: 446:     tempLSB = (tempLSB >> 6) * 25;
  4226  0711  3019               	movlw	25
  4227  0712  00B6               	movwf	??_get_temp
  4228  0713  0836               	movf	??_get_temp,w
  4229  0714  00F3               	movwf	___bmul@multiplicand
  4230  0715  083E               	movf	get_temp@tempLSB,w
  4231  0716  00B7               	movwf	??_get_temp+1
  4232  0717  3006               	movlw	6
  4233  0718                     u3155:	
  4234  0718  1003               	clrc
  4235  0719  0CB7               	rrf	??_get_temp+1,f
  4236  071A  3EFF               	addlw	-1
  4237  071B  1D03               	skipz
  4238  071C  2F18               	goto	u3155
  4239  071D  0837               	movf	??_get_temp+1,w
  4240  071E  120A  158A  21FF  120A  118A  	fcall	___bmul
  4241  0723  1283               	bcf	3,5	;RP0=0, select bank0
  4242  0724  1303               	bcf	3,6	;RP1=0, select bank0
  4243  0725  00B8               	movwf	??_get_temp+2
  4244  0726  0838               	movf	??_get_temp+2,w
  4245  0727  00BE               	movwf	get_temp@tempLSB
  4246                           
  4247                           ;mainMaster.c: 447:     sprintf(temp_string, "%d", tempMSB);
  4248  0728  30AE               	movlw	(low (((STR_22+1)-__stringbase)| (0+32768)))& (0+255)
  4249  0729  00B6               	movwf	??_get_temp
  4250  072A  0836               	movf	??_get_temp,w
  4251  072B  00A9               	movwf	sprintf@f
  4252  072C  083C               	movf	get_temp@tempMSB,w
  4253  072D  00B7               	movwf	??_get_temp+1
  4254  072E  01B8               	clrf	??_get_temp+2
  4255  072F  0837               	movf	??_get_temp+1,w
  4256  0730  00AA               	movwf	?_sprintf+1
  4257  0731  0838               	movf	??_get_temp+2,w
  4258  0732  00AB               	movwf	?_sprintf+2
  4259  0733  083D               	movf	get_temp@temp_string,w
  4260  0734  120A  118A  241F  120A  118A  	fcall	_sprintf
  4261                           
  4262                           ;mainMaster.c: 448:     if (tempLSB == 0){
  4263  0739  1283               	bcf	3,5	;RP0=0, select bank0
  4264  073A  1303               	bcf	3,6	;RP1=0, select bank0
  4265  073B  083E               	movf	get_temp@tempLSB,w
  4266  073C  1D03               	btfss	3,2
  4267  073D  2F40               	goto	l3325
  4268                           
  4269                           ;mainMaster.c: 449:         sprintf(decimal, ".%d0", tempLSB);
  4270  073E  30A8               	movlw	(low ((STR_21-__stringbase)| (0+32768)))& (0+255)
  4271  073F  2F41               	goto	L16
  4272  0740                     l3325:	
  4273                           ;mainMaster.c: 450:     } else {
  4274                           
  4275                           
  4276                           ;mainMaster.c: 451:         sprintf(decimal, ".%d", tempLSB);
  4277  0740  30AD               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  4278  0741                     L16:	
  4279  0741  00B6               	movwf	??_get_temp
  4280  0742  0836               	movf	??_get_temp,w
  4281  0743  00A9               	movwf	sprintf@f
  4282  0744  083E               	movf	get_temp@tempLSB,w
  4283  0745  00B7               	movwf	??_get_temp+1
  4284  0746  01B8               	clrf	??_get_temp+2
  4285  0747  0837               	movf	??_get_temp+1,w
  4286  0748  00AA               	movwf	?_sprintf+1
  4287  0749  0838               	movf	??_get_temp+2,w
  4288  074A  00AB               	movwf	?_sprintf+2
  4289  074B  3039               	movlw	(low (get_temp@decimal| 0))& (0+255)
  4290  074C  120A  118A  241F  120A  118A  	fcall	_sprintf
  4291                           
  4292                           ;mainMaster.c: 453:     strcat(temp_string, decimal);
  4293  0751  3039               	movlw	(low (get_temp@decimal| 0))& (0+255)
  4294  0752  1283               	bcf	3,5	;RP0=0, select bank0
  4295  0753  1303               	bcf	3,6	;RP1=0, select bank0
  4296  0754  00B6               	movwf	??_get_temp
  4297  0755  0836               	movf	??_get_temp,w
  4298  0756  00F3               	movwf	strcat@from
  4299  0757  083D               	movf	get_temp@temp_string,w
  4300  0758  120A  158A  2325   	fcall	_strcat
  4301                           
  4302                           ;mainMaster.c: 454:     temp_string[5] = '\0';
  4303  075B  1283               	bcf	3,5	;RP0=0, select bank0
  4304  075C  1303               	bcf	3,6	;RP1=0, select bank0
  4305  075D  083D               	movf	get_temp@temp_string,w
  4306  075E  3E05               	addlw	5
  4307  075F  0084               	movwf	4
  4308  0760  1383               	bcf	3,7	;select IRP bank0
  4309  0761  0180               	clrf	0
  4310  0762  0008               	return
  4311  0763                     __end_of_get_temp:	
  4312                           
  4313                           	psect	text14
  4314  0B25                     __ptext14:	
  4315 ;; *************** function _strcat *****************
  4316 ;; Defined at:
  4317 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;  to              1    wreg     PTR unsigned char 
  4320 ;;		 -> temp(6), 
  4321 ;;  from            1    3[COMMON] PTR const unsigned char 
  4322 ;;		 -> get_temp@decimal(3), 
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;  to              1    5[COMMON] PTR unsigned char 
  4325 ;;		 -> temp(6), 
  4326 ;;  cp              1    6[COMMON] PTR unsigned char 
  4327 ;;		 -> temp(6), 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      PTR unsigned char 
  4330 ;; Registers used:
  4331 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4337 ;;      Params:         1       0       0       0       0
  4338 ;;      Locals:         2       0       0       0       0
  4339 ;;      Temps:          1       0       0       0       0
  4340 ;;      Totals:         4       0       0       0       0
  4341 ;;Total ram usage:        4 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    1
  4344 ;; This function calls:
  4345 ;;		Nothing
  4346 ;; This function is called by:
  4347 ;;		_get_temp
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           
  4352                           ;psect for function _strcat
  4353  0B25                     _strcat:	
  4354                           
  4355                           ;incstack = 0
  4356                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  4357                           ;strcat@to stored from wreg
  4358  0B25  00F5               	movwf	strcat@to
  4359  0B26  0875               	movf	strcat@to,w
  4360  0B27  00F4               	movwf	??_strcat
  4361  0B28  0874               	movf	??_strcat,w
  4362  0B29  00F6               	movwf	strcat@cp
  4363  0B2A                     l2369:	
  4364  0B2A  0876               	movf	strcat@cp,w
  4365  0B2B  0084               	movwf	4
  4366  0B2C  1383               	bcf	3,7	;select IRP bank0
  4367  0B2D  0800               	movf	0,w
  4368  0B2E  1903               	btfsc	3,2
  4369  0B2F  2B3D               	goto	l2373
  4370  0B30  3001               	movlw	1
  4371  0B31  00F4               	movwf	??_strcat
  4372  0B32  0874               	movf	??_strcat,w
  4373  0B33  07F6               	addwf	strcat@cp,f
  4374  0B34  2B2A               	goto	l2369
  4375  0B35                     l2371:	
  4376  0B35  3001               	movlw	1
  4377  0B36  00F4               	movwf	??_strcat
  4378  0B37  0874               	movf	??_strcat,w
  4379  0B38  07F6               	addwf	strcat@cp,f
  4380  0B39  3001               	movlw	1
  4381  0B3A  00F4               	movwf	??_strcat
  4382  0B3B  0874               	movf	??_strcat,w
  4383  0B3C  07F3               	addwf	strcat@from,f
  4384  0B3D                     l2373:	
  4385  0B3D  0873               	movf	strcat@from,w
  4386  0B3E  0084               	movwf	4
  4387  0B3F  0800               	movf	0,w
  4388  0B40  00F4               	movwf	??_strcat
  4389  0B41  0876               	movf	strcat@cp,w
  4390  0B42  0084               	movwf	4
  4391  0B43  0874               	movf	??_strcat,w
  4392  0B44  0080               	movwf	0
  4393  0B45  0800               	movf	0,w
  4394  0B46  1903               	btfsc	3,2
  4395  0B47  0008               	return
  4396  0B48  2B35               	goto	l2371
  4397  0B49                     __end_of_strcat:	
  4398                           
  4399                           	psect	text15
  4400  041F                     __ptext15:	
  4401 ;; *************** function _sprintf *****************
  4402 ;; Defined at:
  4403 ;;		line 500 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;  sp              1    wreg     PTR unsigned char 
  4406 ;;		 -> get_temp@decimal(3), temp(6), 
  4407 ;;  f               1    9[BANK0 ] PTR const unsigned char 
  4408 ;;		 -> STR_22(4), STR_21(5), STR_20(3), 
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;  sp              1   20[BANK0 ] PTR unsigned char 
  4411 ;;		 -> get_temp@decimal(3), temp(6), 
  4412 ;;  tmpval          4    0        struct .
  4413 ;;  val             2   18[BANK0 ] unsigned int 
  4414 ;;  cp              2    0        PTR const unsigned char 
  4415 ;;  len             2    0        unsigned int 
  4416 ;;  c               1   21[BANK0 ] unsigned char 
  4417 ;;  prec            1   17[BANK0 ] char 
  4418 ;;  flag            1   16[BANK0 ] unsigned char 
  4419 ;;  ap              1   15[BANK0 ] PTR void [1]
  4420 ;;		 -> ?_sprintf(2), 
  4421 ;; Return value:  Size  Location     Type
  4422 ;;                  2    9[BANK0 ] int 
  4423 ;; Registers used:
  4424 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4430 ;;      Params:         0       3       0       0       0
  4431 ;;      Locals:         0       7       0       0       0
  4432 ;;      Temps:          0       3       0       0       0
  4433 ;;      Totals:         0      13       0       0       0
  4434 ;;Total ram usage:       13 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:    2
  4437 ;; This function calls:
  4438 ;;		___lwdiv
  4439 ;;		___lwmod
  4440 ;; This function is called by:
  4441 ;;		_get_temp
  4442 ;; This function uses a non-reentrant model
  4443 ;;
  4444                           
  4445                           
  4446                           ;psect for function _sprintf
  4447  041F                     _sprintf:	
  4448                           
  4449                           ;incstack = 0
  4450                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4451                           ;sprintf@sp stored from wreg
  4452  041F  1283               	bcf	3,5	;RP0=0, select bank0
  4453  0420  1303               	bcf	3,6	;RP1=0, select bank0
  4454  0421  00B4               	movwf	sprintf@sp
  4455                           
  4456                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;D:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  4457  0422  302A               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  4458  0423  00AC               	movwf	??_sprintf
  4459  0424  082C               	movf	??_sprintf,w
  4460  0425  00AF               	movwf	sprintf@ap
  4461  0426                     l3219:	
  4462                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  4463                           
  4464                           
  4465                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  4466  0426  3001               	movlw	1
  4467  0427  07A9               	addwf	sprintf@f,f
  4468  0428  30FF               	movlw	-1
  4469  0429  0729               	addwf	sprintf@f,w
  4470  042A  0084               	movwf	4
  4471  042B  120A  118A  260A  120A  118A  	fcall	stringdir
  4472  0430  00AC               	movwf	??_sprintf
  4473  0431  082C               	movf	??_sprintf,w
  4474  0432  00B5               	movwf	sprintf@c
  4475  0433  0835               	movf	sprintf@c,w
  4476  0434  1903               	btfsc	3,2
  4477  0435  2CF4               	goto	l3221
  4478                           
  4479                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  4480  0436  3025               	movlw	37
  4481  0437  0635               	xorwf	sprintf@c,w
  4482  0438  1903               	btfsc	3,2
  4483  0439  2C46               	goto	l3175
  4484                           
  4485                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;D:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  4486  043A  0835               	movf	sprintf@c,w
  4487  043B  00AC               	movwf	??_sprintf
  4488  043C  0834               	movf	sprintf@sp,w
  4489  043D  0084               	movwf	4
  4490  043E  082C               	movf	??_sprintf,w
  4491  043F  1383               	bcf	3,7	;select IRP bank0
  4492  0440  0080               	movwf	0
  4493  0441  3001               	movlw	1
  4494  0442  00AC               	movwf	??_sprintf
  4495  0443  082C               	movf	??_sprintf,w
  4496  0444  07B4               	addwf	sprintf@sp,f
  4497                           
  4498                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  4499  0445  2C26               	goto	l3219
  4500  0446                     l3175:	
  4501                           
  4502                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  4503  0446  01B0               	clrf	sprintf@flag
  4504                           
  4505                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  4506  0447  3001               	movlw	1
  4507  0448  07A9               	addwf	sprintf@f,f
  4508  0449  30FF               	movlw	-1
  4509  044A  0729               	addwf	sprintf@f,w
  4510  044B  0084               	movwf	4
  4511  044C  120A  118A  260A  120A  118A  	fcall	stringdir
  4512  0451  00B5               	movwf	sprintf@c
  4513  0452  00AC               	movwf	??_sprintf
  4514  0453  01AD               	clrf	??_sprintf+1
  4515                           
  4516                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4517                           ; Switch size 1, requested type "simple"
  4518                           ; Number of cases is 1, Range of values is 0 to 0
  4519                           ; switch strategies available:
  4520                           ; Name         Instructions Cycles
  4521                           ; simple_byte            4     3 (average)
  4522                           ; direct_byte           11     8 (fixed)
  4523                           ; jumptable            260     6 (fixed)
  4524                           ;	Chosen strategy is simple_byte
  4525  0454  082D               	movf	??_sprintf+1,w
  4526  0455  3A00               	xorlw	0	; case 0
  4527  0456  1903               	skipnz
  4528  0457  2C59               	goto	l3755
  4529  0458  2C26               	goto	l3219
  4530  0459                     l3755:	
  4531                           
  4532                           ; Switch size 1, requested type "simple"
  4533                           ; Number of cases is 3, Range of values is 0 to 105
  4534                           ; switch strategies available:
  4535                           ; Name         Instructions Cycles
  4536                           ; simple_byte           10     6 (average)
  4537                           ; jumptable            260     6 (fixed)
  4538                           ;	Chosen strategy is simple_byte
  4539  0459  082C               	movf	??_sprintf,w
  4540  045A  3A00               	xorlw	0	; case 0
  4541  045B  1903               	skipnz
  4542  045C  2CF4               	goto	l3221
  4543  045D  3A64               	xorlw	100	; case 100
  4544  045E  1903               	skipnz
  4545  045F  2C64               	goto	l3181
  4546  0460  3A0D               	xorlw	13	; case 105
  4547  0461  1903               	skipnz
  4548  0462  2C64               	goto	l3181
  4549  0463  2C26               	goto	l3219
  4550  0464                     l3181:	
  4551                           
  4552                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4553  0464  082F               	movf	sprintf@ap,w
  4554  0465  0084               	movwf	4
  4555  0466  1383               	bcf	3,7	;select IRP bank0
  4556  0467  0800               	movf	0,w
  4557  0468  00B2               	movwf	sprintf@val
  4558  0469  0A84               	incf	4,f
  4559  046A  0800               	movf	0,w
  4560  046B  00B3               	movwf	sprintf@val+1
  4561  046C  3002               	movlw	2
  4562  046D  00AC               	movwf	??_sprintf
  4563  046E  082C               	movf	??_sprintf,w
  4564  046F  07AF               	addwf	sprintf@ap,f
  4565                           
  4566                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  4567  0470  1FB3               	btfss	sprintf@val+1,7
  4568  0471  2C7B               	goto	l3191
  4569                           
  4570                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  4571  0472  3003               	movlw	3
  4572  0473  00AC               	movwf	??_sprintf
  4573  0474  082C               	movf	??_sprintf,w
  4574  0475  04B0               	iorwf	sprintf@flag,f
  4575                           
  4576                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  4577  0476  09B2               	comf	sprintf@val,f
  4578  0477  09B3               	comf	sprintf@val+1,f
  4579  0478  0AB2               	incf	sprintf@val,f
  4580  0479  1903               	skipnz
  4581  047A  0AB3               	incf	sprintf@val+1,f
  4582  047B                     l3191:	
  4583                           
  4584                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4585  047B  01B5               	clrf	sprintf@c
  4586  047C  0AB5               	incf	sprintf@c,f
  4587  047D                     l3197:	
  4588                           
  4589                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  4590  047D  0835               	movf	sprintf@c,w
  4591  047E  00AC               	movwf	??_sprintf
  4592  047F  072C               	addwf	??_sprintf,w
  4593  0480  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4594  0481  0084               	movwf	4
  4595  0482  120A  118A  260A  120A  118A  	fcall	stringdir
  4596  0487  00AD               	movwf	??_sprintf+1
  4597  0488  120A  118A  260A  120A  118A  	fcall	stringdir
  4598  048D  00AE               	movwf	??_sprintf+2
  4599  048E  082E               	movf	??_sprintf+2,w
  4600  048F  0233               	subwf	sprintf@val+1,w
  4601  0490  1D03               	skipz
  4602  0491  2C94               	goto	u3035
  4603  0492  082D               	movf	??_sprintf+1,w
  4604  0493  0232               	subwf	sprintf@val,w
  4605  0494                     u3035:	
  4606  0494  1C03               	btfss	3,0
  4607  0495  2C9E               	goto	l3203
  4608  0496  3001               	movlw	1
  4609  0497  00AC               	movwf	??_sprintf
  4610  0498  082C               	movf	??_sprintf,w
  4611  0499  07B5               	addwf	sprintf@c,f
  4612  049A  3005               	movlw	5
  4613  049B  0635               	xorwf	sprintf@c,w
  4614  049C  1D03               	btfss	3,2
  4615  049D  2C7D               	goto	l3197
  4616  049E                     l3203:	
  4617                           
  4618                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  4619  049E  0830               	movf	sprintf@flag,w
  4620  049F  3903               	andlw	3
  4621  04A0  1903               	btfsc	3,2
  4622  04A1  2CAD               	goto	l3209
  4623                           
  4624                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  4625  04A2  302D               	movlw	45
  4626  04A3  00AC               	movwf	??_sprintf
  4627  04A4  0834               	movf	sprintf@sp,w
  4628  04A5  0084               	movwf	4
  4629  04A6  082C               	movf	??_sprintf,w
  4630  04A7  1383               	bcf	3,7	;select IRP bank0
  4631  04A8  0080               	movwf	0
  4632  04A9  3001               	movlw	1
  4633  04AA  00AC               	movwf	??_sprintf
  4634  04AB  082C               	movf	??_sprintf,w
  4635  04AC  07B4               	addwf	sprintf@sp,f
  4636  04AD                     l3209:	
  4637                           
  4638                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  4639  04AD  0835               	movf	sprintf@c,w
  4640  04AE  00AC               	movwf	??_sprintf
  4641  04AF  082C               	movf	??_sprintf,w
  4642  04B0  00B1               	movwf	sprintf@prec
  4643  04B1                     l3217:	
  4644                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  4645                           
  4646                           
  4647                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  4648  04B1  30FF               	movlw	255
  4649  04B2  00AC               	movwf	??_sprintf
  4650  04B3  082C               	movf	??_sprintf,w
  4651  04B4  07B1               	addwf	sprintf@prec,f
  4652  04B5  0A31               	incf	sprintf@prec,w
  4653  04B6  1903               	btfsc	3,2
  4654  04B7  2C26               	goto	l3219
  4655                           
  4656                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  4657  04B8  300A               	movlw	10
  4658  04B9  00A3               	movwf	___lwmod@divisor
  4659  04BA  3000               	movlw	0
  4660  04BB  00A4               	movwf	___lwmod@divisor+1
  4661  04BC  0831               	movf	sprintf@prec,w
  4662  04BD  00AC               	movwf	??_sprintf
  4663  04BE  072C               	addwf	??_sprintf,w
  4664  04BF  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4665  04C0  0084               	movwf	4
  4666  04C1  120A  118A  260A  120A  118A  	fcall	stringdir
  4667  04C6  00F3               	movwf	___lwdiv@divisor
  4668  04C7  120A  118A  260A  120A  118A  	fcall	stringdir
  4669  04CC  00F4               	movwf	___lwdiv@divisor+1
  4670  04CD  0833               	movf	sprintf@val+1,w
  4671  04CE  00F6               	movwf	___lwdiv@dividend+1
  4672  04CF  0832               	movf	sprintf@val,w
  4673  04D0  00F5               	movwf	___lwdiv@dividend
  4674  04D1  120A  158A  2454  120A  118A  	fcall	___lwdiv
  4675  04D6  0874               	movf	?___lwdiv+1,w
  4676  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  4677  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  4678  04D9  00A6               	movwf	___lwmod@dividend+1
  4679  04DA  0873               	movf	?___lwdiv,w
  4680  04DB  00A5               	movwf	___lwmod@dividend
  4681  04DC  120A  158A  2375  120A  118A  	fcall	___lwmod
  4682  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  4683  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  4684  04E3  0823               	movf	?___lwmod,w
  4685  04E4  3E30               	addlw	48
  4686  04E5  00AD               	movwf	??_sprintf+1
  4687  04E6  082D               	movf	??_sprintf+1,w
  4688  04E7  00B5               	movwf	sprintf@c
  4689                           
  4690                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  4691  04E8  0835               	movf	sprintf@c,w
  4692  04E9  00AC               	movwf	??_sprintf
  4693  04EA  0834               	movf	sprintf@sp,w
  4694  04EB  0084               	movwf	4
  4695  04EC  082C               	movf	??_sprintf,w
  4696  04ED  1383               	bcf	3,7	;select IRP bank0
  4697  04EE  0080               	movwf	0
  4698  04EF  3001               	movlw	1
  4699  04F0  00AC               	movwf	??_sprintf
  4700  04F1  082C               	movf	??_sprintf,w
  4701  04F2  07B4               	addwf	sprintf@sp,f
  4702  04F3  2CB1               	goto	l3217
  4703  04F4                     l3221:	
  4704                           
  4705                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  4706  04F4  0834               	movf	sprintf@sp,w
  4707  04F5  0084               	movwf	4
  4708  04F6  1383               	bcf	3,7	;select IRP bank0
  4709  04F7  0180               	clrf	0
  4710  04F8  0008               	return
  4711  04F9                     __end_of_sprintf:	
  4712                           
  4713                           	psect	text16
  4714  0B75                     __ptext16:	
  4715 ;; *************** function ___lwmod *****************
  4716 ;; Defined at:
  4717 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;  divisor         2    3[BANK0 ] unsigned int 
  4720 ;;  dividend        2    5[BANK0 ] unsigned int 
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;  counter         1    8[BANK0 ] unsigned char 
  4723 ;; Return value:  Size  Location     Type
  4724 ;;                  2    3[BANK0 ] unsigned int 
  4725 ;; Registers used:
  4726 ;;		wreg, status,2, status,0
  4727 ;; Tracked objects:
  4728 ;;		On entry : 0/0
  4729 ;;		On exit  : 0/0
  4730 ;;		Unchanged: 0/0
  4731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4732 ;;      Params:         0       4       0       0       0
  4733 ;;      Locals:         0       1       0       0       0
  4734 ;;      Temps:          0       1       0       0       0
  4735 ;;      Totals:         0       6       0       0       0
  4736 ;;Total ram usage:        6 bytes
  4737 ;; Hardware stack levels used:    1
  4738 ;; Hardware stack levels required when called:    1
  4739 ;; This function calls:
  4740 ;;		Nothing
  4741 ;; This function is called by:
  4742 ;;		_sprintf
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           
  4747                           ;psect for function ___lwmod
  4748  0B75                     ___lwmod:	
  4749                           
  4750                           ;incstack = 0
  4751                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4752  0B75  1283               	bcf	3,5	;RP0=0, select bank0
  4753  0B76  1303               	bcf	3,6	;RP1=0, select bank0
  4754  0B77  0823               	movf	___lwmod@divisor,w
  4755  0B78  0424               	iorwf	___lwmod@divisor+1,w
  4756  0B79  1903               	btfsc	3,2
  4757  0B7A  2BA4               	goto	l2171
  4758  0B7B  01A8               	clrf	___lwmod@counter
  4759  0B7C  0AA8               	incf	___lwmod@counter,f
  4760  0B7D                     l2161:	
  4761  0B7D  1BA4               	btfsc	___lwmod@divisor+1,7
  4762  0B7E  2B8B               	goto	l2163
  4763  0B7F  3001               	movlw	1
  4764  0B80                     u1655:	
  4765  0B80  1003               	clrc
  4766  0B81  0DA3               	rlf	___lwmod@divisor,f
  4767  0B82  0DA4               	rlf	___lwmod@divisor+1,f
  4768  0B83  3EFF               	addlw	-1
  4769  0B84  1D03               	skipz
  4770  0B85  2B80               	goto	u1655
  4771  0B86  3001               	movlw	1
  4772  0B87  00A7               	movwf	??___lwmod
  4773  0B88  0827               	movf	??___lwmod,w
  4774  0B89  07A8               	addwf	___lwmod@counter,f
  4775  0B8A  2B7D               	goto	l2161
  4776  0B8B                     l2163:	
  4777  0B8B  0824               	movf	___lwmod@divisor+1,w
  4778  0B8C  0226               	subwf	___lwmod@dividend+1,w
  4779  0B8D  1D03               	skipz
  4780  0B8E  2B91               	goto	u1675
  4781  0B8F  0823               	movf	___lwmod@divisor,w
  4782  0B90  0225               	subwf	___lwmod@dividend,w
  4783  0B91                     u1675:	
  4784  0B91  1C03               	skipc
  4785  0B92  2B99               	goto	l2167
  4786  0B93  0823               	movf	___lwmod@divisor,w
  4787  0B94  02A5               	subwf	___lwmod@dividend,f
  4788  0B95  0824               	movf	___lwmod@divisor+1,w
  4789  0B96  1C03               	skipc
  4790  0B97  03A6               	decf	___lwmod@dividend+1,f
  4791  0B98  02A6               	subwf	___lwmod@dividend+1,f
  4792  0B99                     l2167:	
  4793  0B99  3001               	movlw	1
  4794  0B9A                     u1685:	
  4795  0B9A  1003               	clrc
  4796  0B9B  0CA4               	rrf	___lwmod@divisor+1,f
  4797  0B9C  0CA3               	rrf	___lwmod@divisor,f
  4798  0B9D  3EFF               	addlw	-1
  4799  0B9E  1D03               	skipz
  4800  0B9F  2B9A               	goto	u1685
  4801  0BA0  3001               	movlw	1
  4802  0BA1  02A8               	subwf	___lwmod@counter,f
  4803  0BA2  1D03               	btfss	3,2
  4804  0BA3  2B8B               	goto	l2163
  4805  0BA4                     l2171:	
  4806  0BA4  0826               	movf	___lwmod@dividend+1,w
  4807  0BA5  00A4               	movwf	?___lwmod+1
  4808  0BA6  0825               	movf	___lwmod@dividend,w
  4809  0BA7  00A3               	movwf	?___lwmod
  4810  0BA8  0008               	return
  4811  0BA9                     __end_of___lwmod:	
  4812                           
  4813                           	psect	text17
  4814  0C54                     __ptext17:	
  4815 ;; *************** function ___lwdiv *****************
  4816 ;; Defined at:
  4817 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  4818 ;; Parameters:    Size  Location     Type
  4819 ;;  divisor         2    3[COMMON] unsigned int 
  4820 ;;  dividend        2    5[COMMON] unsigned int 
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  quotient        2    1[BANK0 ] unsigned int 
  4823 ;;  counter         1    0[BANK0 ] unsigned char 
  4824 ;; Return value:  Size  Location     Type
  4825 ;;                  2    3[COMMON] unsigned int 
  4826 ;; Registers used:
  4827 ;;		wreg, status,2, status,0
  4828 ;; Tracked objects:
  4829 ;;		On entry : 0/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4833 ;;      Params:         4       0       0       0       0
  4834 ;;      Locals:         0       3       0       0       0
  4835 ;;      Temps:          1       0       0       0       0
  4836 ;;      Totals:         5       3       0       0       0
  4837 ;;Total ram usage:        8 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; Hardware stack levels required when called:    1
  4840 ;; This function calls:
  4841 ;;		Nothing
  4842 ;; This function is called by:
  4843 ;;		_sprintf
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           
  4848                           ;psect for function ___lwdiv
  4849  0C54                     ___lwdiv:	
  4850                           
  4851                           ;incstack = 0
  4852                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4853  0C54  1283               	bcf	3,5	;RP0=0, select bank0
  4854  0C55  1303               	bcf	3,6	;RP1=0, select bank0
  4855  0C56  01A1               	clrf	___lwdiv@quotient
  4856  0C57  01A2               	clrf	___lwdiv@quotient+1
  4857  0C58  0873               	movf	___lwdiv@divisor,w
  4858  0C59  0474               	iorwf	___lwdiv@divisor+1,w
  4859  0C5A  1903               	btfsc	3,2
  4860  0C5B  2C8D               	goto	l3083
  4861  0C5C  01A0               	clrf	___lwdiv@counter
  4862  0C5D  0AA0               	incf	___lwdiv@counter,f
  4863  0C5E                     l3071:	
  4864  0C5E  1BF4               	btfsc	___lwdiv@divisor+1,7
  4865  0C5F  2C6C               	goto	l3073
  4866  0C60  3001               	movlw	1
  4867  0C61                     u2855:	
  4868  0C61  1003               	clrc
  4869  0C62  0DF3               	rlf	___lwdiv@divisor,f
  4870  0C63  0DF4               	rlf	___lwdiv@divisor+1,f
  4871  0C64  3EFF               	addlw	-1
  4872  0C65  1D03               	skipz
  4873  0C66  2C61               	goto	u2855
  4874  0C67  3001               	movlw	1
  4875  0C68  00F7               	movwf	??___lwdiv
  4876  0C69  0877               	movf	??___lwdiv,w
  4877  0C6A  07A0               	addwf	___lwdiv@counter,f
  4878  0C6B  2C5E               	goto	l3071
  4879  0C6C                     l3073:	
  4880  0C6C  3001               	movlw	1
  4881  0C6D                     u2875:	
  4882  0C6D  1003               	clrc
  4883  0C6E  0DA1               	rlf	___lwdiv@quotient,f
  4884  0C6F  0DA2               	rlf	___lwdiv@quotient+1,f
  4885  0C70  3EFF               	addlw	-1
  4886  0C71  1D03               	skipz
  4887  0C72  2C6D               	goto	u2875
  4888  0C73  0874               	movf	___lwdiv@divisor+1,w
  4889  0C74  0276               	subwf	___lwdiv@dividend+1,w
  4890  0C75  1D03               	skipz
  4891  0C76  2C79               	goto	u2885
  4892  0C77  0873               	movf	___lwdiv@divisor,w
  4893  0C78  0275               	subwf	___lwdiv@dividend,w
  4894  0C79                     u2885:	
  4895  0C79  1C03               	skipc
  4896  0C7A  2C82               	goto	l3079
  4897  0C7B  0873               	movf	___lwdiv@divisor,w
  4898  0C7C  02F5               	subwf	___lwdiv@dividend,f
  4899  0C7D  0874               	movf	___lwdiv@divisor+1,w
  4900  0C7E  1C03               	skipc
  4901  0C7F  03F6               	decf	___lwdiv@dividend+1,f
  4902  0C80  02F6               	subwf	___lwdiv@dividend+1,f
  4903  0C81  1421               	bsf	___lwdiv@quotient,0
  4904  0C82                     l3079:	
  4905  0C82  3001               	movlw	1
  4906  0C83                     u2895:	
  4907  0C83  1003               	clrc
  4908  0C84  0CF4               	rrf	___lwdiv@divisor+1,f
  4909  0C85  0CF3               	rrf	___lwdiv@divisor,f
  4910  0C86  3EFF               	addlw	-1
  4911  0C87  1D03               	skipz
  4912  0C88  2C83               	goto	u2895
  4913  0C89  3001               	movlw	1
  4914  0C8A  02A0               	subwf	___lwdiv@counter,f
  4915  0C8B  1D03               	btfss	3,2
  4916  0C8C  2C6C               	goto	l3073
  4917  0C8D                     l3083:	
  4918  0C8D  0822               	movf	___lwdiv@quotient+1,w
  4919  0C8E  00F4               	movwf	?___lwdiv+1
  4920  0C8F  0821               	movf	___lwdiv@quotient,w
  4921  0C90  00F3               	movwf	?___lwdiv
  4922  0C91  0008               	return
  4923  0C92                     __end_of___lwdiv:	
  4924                           
  4925                           	psect	text18
  4926  09FF                     __ptext18:	
  4927 ;; *************** function ___bmul *****************
  4928 ;; Defined at:
  4929 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;  multiplier      1    wreg     unsigned char 
  4932 ;;  multiplicand    1    3[COMMON] unsigned char 
  4933 ;; Auto vars:     Size  Location     Type
  4934 ;;  multiplier      1    6[COMMON] unsigned char 
  4935 ;;  product         1    5[COMMON] unsigned char 
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  1    wreg      unsigned char 
  4938 ;; Registers used:
  4939 ;;		wreg, status,2, status,0
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4945 ;;      Params:         1       0       0       0       0
  4946 ;;      Locals:         2       0       0       0       0
  4947 ;;      Temps:          1       0       0       0       0
  4948 ;;      Totals:         4       0       0       0       0
  4949 ;;Total ram usage:        4 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    1
  4952 ;; This function calls:
  4953 ;;		Nothing
  4954 ;; This function is called by:
  4955 ;;		_main
  4956 ;;		_get_temp
  4957 ;; This function uses a non-reentrant model
  4958 ;;
  4959                           
  4960                           
  4961                           ;psect for function ___bmul
  4962  09FF                     ___bmul:	
  4963                           
  4964                           ;incstack = 0
  4965                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4966                           ;___bmul@multiplier stored from wreg
  4967  09FF  00F6               	movwf	___bmul@multiplier
  4968  0A00  01F5               	clrf	___bmul@product
  4969  0A01                     l2377:	
  4970  0A01  1C76               	btfss	___bmul@multiplier,0
  4971  0A02  2A07               	goto	l2381
  4972  0A03  0873               	movf	___bmul@multiplicand,w
  4973  0A04  00F4               	movwf	??___bmul
  4974  0A05  0874               	movf	??___bmul,w
  4975  0A06  07F5               	addwf	___bmul@product,f
  4976  0A07                     l2381:	
  4977  0A07  1003               	clrc
  4978  0A08  0DF3               	rlf	___bmul@multiplicand,f
  4979  0A09  1003               	clrc
  4980  0A0A  0CF6               	rrf	___bmul@multiplier,f
  4981  0A0B  0876               	movf	___bmul@multiplier,w
  4982  0A0C  1D03               	btfss	3,2
  4983  0A0D  2A01               	goto	l2377
  4984  0A0E  0875               	movf	___bmul@product,w
  4985  0A0F  0008               	return
  4986  0A10                     __end_of___bmul:	
  4987                           
  4988                           	psect	text19
  4989  0ADF                     __ptext19:	
  4990 ;; *************** function _get_hall *****************
  4991 ;; Defined at:
  4992 ;;		line 458 in file "mainMaster.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;		None
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;  key             1    2[BANK0 ] unsigned char 
  4997 ;; Return value:  Size  Location     Type
  4998 ;;                  1    wreg      unsigned char 
  4999 ;; Registers used:
  5000 ;;		wreg, status,2, status,0, pclath, cstack
  5001 ;; Tracked objects:
  5002 ;;		On entry : 0/0
  5003 ;;		On exit  : 0/0
  5004 ;;		Unchanged: 0/0
  5005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5006 ;;      Params:         0       0       0       0       0
  5007 ;;      Locals:         0       1       0       0       0
  5008 ;;      Temps:          1       0       0       0       0
  5009 ;;      Totals:         1       1       0       0       0
  5010 ;;Total ram usage:        2 bytes
  5011 ;; Hardware stack levels used:    1
  5012 ;; Hardware stack levels required when called:    3
  5013 ;; This function calls:
  5014 ;;		_I2C_Master_Read
  5015 ;;		_I2C_Master_Start
  5016 ;;		_I2C_Master_Stop
  5017 ;;		_I2C_Master_Write
  5018 ;; This function is called by:
  5019 ;;		_main
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           
  5024                           ;psect for function _get_hall
  5025  0ADF                     _get_hall:	
  5026                           
  5027                           ;mainMaster.c: 460:     char key;;mainMaster.c: 462:     I2C_Master_Start();
  5028                           
  5029                           ;incstack = 0
  5030                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  5031  0ADF  120A  158A  21C7  120A  158A  	fcall	_I2C_Master_Start
  5032                           
  5033                           ;mainMaster.c: 463:     I2C_Master_Write(0x11);
  5034  0AE4  3011               	movlw	17
  5035  0AE5  00F3               	movwf	I2C_Master_Write@d
  5036  0AE6  3000               	movlw	0
  5037  0AE7  00F4               	movwf	I2C_Master_Write@d+1
  5038  0AE8  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  5039                           
  5040                           ;mainMaster.c: 464:     key = I2C_Master_Read(0);
  5041  0AED  3000               	movlw	0
  5042  0AEE  00F3               	movwf	I2C_Master_Read@a
  5043  0AEF  00F4               	movwf	I2C_Master_Read@a+1
  5044  0AF0  120A  118A  25D1  120A  158A  	fcall	_I2C_Master_Read
  5045  0AF5  0873               	movf	?_I2C_Master_Read,w
  5046  0AF6  00F7               	movwf	??_get_hall
  5047  0AF7  0877               	movf	??_get_hall,w
  5048  0AF8  1283               	bcf	3,5	;RP0=0, select bank0
  5049  0AF9  1303               	bcf	3,6	;RP1=0, select bank0
  5050  0AFA  00A2               	movwf	get_hall@key
  5051                           
  5052                           ;mainMaster.c: 465:     I2C_Master_Stop();
  5053  0AFB  120A  158A  21CE   	fcall	_I2C_Master_Stop
  5054                           
  5055                           ;mainMaster.c: 467:     return (key);
  5056  0AFE  1283               	bcf	3,5	;RP0=0, select bank0
  5057  0AFF  1303               	bcf	3,6	;RP1=0, select bank0
  5058  0B00  0822               	movf	get_hall@key,w
  5059  0B01  0008               	return
  5060  0B02                     __end_of_get_hall:	
  5061                           
  5062                           	psect	text20
  5063  0C1A                     __ptext20:	
  5064 ;; *************** function _get_day *****************
  5065 ;; Defined at:
  5066 ;;		line 416 in file "mainMaster.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;		None
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;  d               1    2[BANK0 ] unsigned char 
  5071 ;; Return value:  Size  Location     Type
  5072 ;;                  1    wreg      unsigned char 
  5073 ;; Registers used:
  5074 ;;		wreg, status,2, status,0, pclath, cstack
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5080 ;;      Params:         0       0       0       0       0
  5081 ;;      Locals:         0       1       0       0       0
  5082 ;;      Temps:          1       0       0       0       0
  5083 ;;      Totals:         1       1       0       0       0
  5084 ;;Total ram usage:        2 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    3
  5087 ;; This function calls:
  5088 ;;		_I2C_Master_Read
  5089 ;;		_I2C_Master_RepeatedStart
  5090 ;;		_I2C_Master_Start
  5091 ;;		_I2C_Master_Stop
  5092 ;;		_I2C_Master_Write
  5093 ;; This function is called by:
  5094 ;;		_main
  5095 ;; This function uses a non-reentrant model
  5096 ;;
  5097                           
  5098                           
  5099                           ;psect for function _get_day
  5100  0C1A                     _get_day:	
  5101                           
  5102                           ;mainMaster.c: 418:     char d;;mainMaster.c: 420:     I2C_Master_Start();
  5103                           
  5104                           ;incstack = 0
  5105                           ; Regs used in _get_day: [wreg+status,2+status,0+pclath+cstack]
  5106  0C1A  120A  158A  21C7  120A  158A  	fcall	_I2C_Master_Start
  5107                           
  5108                           ;mainMaster.c: 421:     I2C_Master_Write(0xD0);
  5109  0C1F  30D0               	movlw	208
  5110  0C20  00F3               	movwf	I2C_Master_Write@d
  5111  0C21  3000               	movlw	0
  5112  0C22  00F4               	movwf	I2C_Master_Write@d+1
  5113  0C23  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  5114                           
  5115                           ;mainMaster.c: 422:     I2C_Master_Write(0x03);
  5116  0C28  3003               	movlw	3
  5117  0C29  00F3               	movwf	I2C_Master_Write@d
  5118  0C2A  3000               	movlw	0
  5119  0C2B  00F4               	movwf	I2C_Master_Write@d+1
  5120  0C2C  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  5121                           
  5122                           ;mainMaster.c: 423:     I2C_Master_RepeatedStart();
  5123  0C31  120A  158A  21D5  120A  158A  	fcall	_I2C_Master_RepeatedStart
  5124                           
  5125                           ;mainMaster.c: 424:     I2C_Master_Write(0xD1);
  5126  0C36  30D1               	movlw	209
  5127  0C37  00F3               	movwf	I2C_Master_Write@d
  5128  0C38  3000               	movlw	0
  5129  0C39  00F4               	movwf	I2C_Master_Write@d+1
  5130  0C3A  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  5131                           
  5132                           ;mainMaster.c: 425:     d = I2C_Master_Read(0);
  5133  0C3F  3000               	movlw	0
  5134  0C40  00F3               	movwf	I2C_Master_Read@a
  5135  0C41  00F4               	movwf	I2C_Master_Read@a+1
  5136  0C42  120A  118A  25D1  120A  158A  	fcall	_I2C_Master_Read
  5137  0C47  0873               	movf	?_I2C_Master_Read,w
  5138  0C48  00F7               	movwf	??_get_day
  5139  0C49  0877               	movf	??_get_day,w
  5140  0C4A  1283               	bcf	3,5	;RP0=0, select bank0
  5141  0C4B  1303               	bcf	3,6	;RP1=0, select bank0
  5142  0C4C  00A2               	movwf	get_day@d
  5143                           
  5144                           ;mainMaster.c: 426:     I2C_Master_Stop();
  5145  0C4D  120A  158A  21CE   	fcall	_I2C_Master_Stop
  5146                           
  5147                           ;mainMaster.c: 428:     return d;
  5148  0C50  1283               	bcf	3,5	;RP0=0, select bank0
  5149  0C51  1303               	bcf	3,6	;RP1=0, select bank0
  5150  0C52  0822               	movf	get_day@d,w
  5151  0C53  0008               	return
  5152  0C54                     __end_of_get_day:	
  5153                           
  5154                           	psect	text21
  5155  09D5                     __ptext21:	
  5156 ;; *************** function _I2C_Master_RepeatedStart *****************
  5157 ;; Defined at:
  5158 ;;		line 47 in file "./I2C.h"
  5159 ;; Parameters:    Size  Location     Type
  5160 ;;		None
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;		None
  5163 ;; Return value:  Size  Location     Type
  5164 ;;                  1    wreg      void 
  5165 ;; Registers used:
  5166 ;;		wreg, status,2, status,0, pclath, cstack
  5167 ;; Tracked objects:
  5168 ;;		On entry : 0/0
  5169 ;;		On exit  : 0/0
  5170 ;;		Unchanged: 0/0
  5171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5172 ;;      Params:         0       0       0       0       0
  5173 ;;      Locals:         0       0       0       0       0
  5174 ;;      Temps:          0       0       0       0       0
  5175 ;;      Totals:         0       0       0       0       0
  5176 ;;Total ram usage:        0 bytes
  5177 ;; Hardware stack levels used:    1
  5178 ;; Hardware stack levels required when called:    2
  5179 ;; This function calls:
  5180 ;;		_I2C_Master_Wait
  5181 ;; This function is called by:
  5182 ;;		_get_time
  5183 ;;		_get_day
  5184 ;;		_get_temp
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           
  5189                           ;psect for function _I2C_Master_RepeatedStart
  5190  09D5                     _I2C_Master_RepeatedStart:	
  5191                           
  5192                           ;./I2C.h: 49:     I2C_Master_Wait();
  5193                           
  5194                           ;incstack = 0
  5195                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  5196  09D5  120A  158A  21EC   	fcall	_I2C_Master_Wait
  5197                           
  5198                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  5199  09D8  1683               	bsf	3,5	;RP0=1, select bank1
  5200  09D9  1303               	bcf	3,6	;RP1=0, select bank1
  5201  09DA  1491               	bsf	17,1	;volatile
  5202  09DB  0008               	return
  5203  09DC                     __end_of_I2C_Master_RepeatedStart:	
  5204                           
  5205                           	psect	text22
  5206  0ABC                     __ptext22:	
  5207 ;; *************** function _get_PIR *****************
  5208 ;; Defined at:
  5209 ;;		line 482 in file "mainMaster.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;		None
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;  PIR             1    2[BANK0 ] unsigned char 
  5214 ;; Return value:  Size  Location     Type
  5215 ;;                  1    wreg      unsigned char 
  5216 ;; Registers used:
  5217 ;;		wreg, status,2, status,0, pclath, cstack
  5218 ;; Tracked objects:
  5219 ;;		On entry : 0/0
  5220 ;;		On exit  : 0/0
  5221 ;;		Unchanged: 0/0
  5222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5223 ;;      Params:         0       0       0       0       0
  5224 ;;      Locals:         0       1       0       0       0
  5225 ;;      Temps:          1       0       0       0       0
  5226 ;;      Totals:         1       1       0       0       0
  5227 ;;Total ram usage:        2 bytes
  5228 ;; Hardware stack levels used:    1
  5229 ;; Hardware stack levels required when called:    3
  5230 ;; This function calls:
  5231 ;;		_I2C_Master_Read
  5232 ;;		_I2C_Master_Start
  5233 ;;		_I2C_Master_Stop
  5234 ;;		_I2C_Master_Write
  5235 ;; This function is called by:
  5236 ;;		_main
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           
  5241                           ;psect for function _get_PIR
  5242  0ABC                     _get_PIR:	
  5243                           
  5244                           ;mainMaster.c: 484:     char PIR;;mainMaster.c: 486:     I2C_Master_Start();
  5245                           
  5246                           ;incstack = 0
  5247                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  5248  0ABC  120A  158A  21C7  120A  158A  	fcall	_I2C_Master_Start
  5249                           
  5250                           ;mainMaster.c: 487:     I2C_Master_Write(0x41);
  5251  0AC1  3041               	movlw	65
  5252  0AC2  00F3               	movwf	I2C_Master_Write@d
  5253  0AC3  3000               	movlw	0
  5254  0AC4  00F4               	movwf	I2C_Master_Write@d+1
  5255  0AC5  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  5256                           
  5257                           ;mainMaster.c: 488:     PIR = I2C_Master_Read(0);
  5258  0ACA  3000               	movlw	0
  5259  0ACB  00F3               	movwf	I2C_Master_Read@a
  5260  0ACC  00F4               	movwf	I2C_Master_Read@a+1
  5261  0ACD  120A  118A  25D1  120A  158A  	fcall	_I2C_Master_Read
  5262  0AD2  0873               	movf	?_I2C_Master_Read,w
  5263  0AD3  00F7               	movwf	??_get_PIR
  5264  0AD4  0877               	movf	??_get_PIR,w
  5265  0AD5  1283               	bcf	3,5	;RP0=0, select bank0
  5266  0AD6  1303               	bcf	3,6	;RP1=0, select bank0
  5267  0AD7  00A2               	movwf	get_PIR@PIR
  5268                           
  5269                           ;mainMaster.c: 489:     I2C_Master_Stop();
  5270  0AD8  120A  158A  21CE   	fcall	_I2C_Master_Stop
  5271                           
  5272                           ;mainMaster.c: 491:     return (PIR);
  5273  0ADB  1283               	bcf	3,5	;RP0=0, select bank0
  5274  0ADC  1303               	bcf	3,6	;RP1=0, select bank0
  5275  0ADD  0822               	movf	get_PIR@PIR,w
  5276  0ADE  0008               	return
  5277  0ADF                     __end_of_get_PIR:	
  5278                           
  5279                           	psect	text23
  5280  0A99                     __ptext23:	
  5281 ;; *************** function _get_IR *****************
  5282 ;; Defined at:
  5283 ;;		line 494 in file "mainMaster.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;		None
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;  IR              1    2[BANK0 ] unsigned char 
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  1    wreg      unsigned char 
  5290 ;; Registers used:
  5291 ;;		wreg, status,2, status,0, pclath, cstack
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 0/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5297 ;;      Params:         0       0       0       0       0
  5298 ;;      Locals:         0       1       0       0       0
  5299 ;;      Temps:          1       0       0       0       0
  5300 ;;      Totals:         1       1       0       0       0
  5301 ;;Total ram usage:        2 bytes
  5302 ;; Hardware stack levels used:    1
  5303 ;; Hardware stack levels required when called:    3
  5304 ;; This function calls:
  5305 ;;		_I2C_Master_Read
  5306 ;;		_I2C_Master_Start
  5307 ;;		_I2C_Master_Stop
  5308 ;;		_I2C_Master_Write
  5309 ;; This function is called by:
  5310 ;;		_main
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           
  5315                           ;psect for function _get_IR
  5316  0A99                     _get_IR:	
  5317                           
  5318                           ;mainMaster.c: 496:     char IR;;mainMaster.c: 498:     I2C_Master_Start();
  5319                           
  5320                           ;incstack = 0
  5321                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  5322  0A99  120A  158A  21C7  120A  158A  	fcall	_I2C_Master_Start
  5323                           
  5324                           ;mainMaster.c: 499:     I2C_Master_Write(0x31);
  5325  0A9E  3031               	movlw	49
  5326  0A9F  00F3               	movwf	I2C_Master_Write@d
  5327  0AA0  3000               	movlw	0
  5328  0AA1  00F4               	movwf	I2C_Master_Write@d+1
  5329  0AA2  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  5330                           
  5331                           ;mainMaster.c: 500:     IR = I2C_Master_Read(0);
  5332  0AA7  3000               	movlw	0
  5333  0AA8  00F3               	movwf	I2C_Master_Read@a
  5334  0AA9  00F4               	movwf	I2C_Master_Read@a+1
  5335  0AAA  120A  118A  25D1  120A  158A  	fcall	_I2C_Master_Read
  5336  0AAF  0873               	movf	?_I2C_Master_Read,w
  5337  0AB0  00F7               	movwf	??_get_IR
  5338  0AB1  0877               	movf	??_get_IR,w
  5339  0AB2  1283               	bcf	3,5	;RP0=0, select bank0
  5340  0AB3  1303               	bcf	3,6	;RP1=0, select bank0
  5341  0AB4  00A2               	movwf	get_IR@IR
  5342                           
  5343                           ;mainMaster.c: 501:     I2C_Master_Stop();
  5344  0AB5  120A  158A  21CE   	fcall	_I2C_Master_Stop
  5345                           
  5346                           ;mainMaster.c: 503:     return (IR);
  5347  0AB8  1283               	bcf	3,5	;RP0=0, select bank0
  5348  0AB9  1303               	bcf	3,6	;RP1=0, select bank0
  5349  0ABA  0822               	movf	get_IR@IR,w
  5350  0ABB  0008               	return
  5351  0ABC                     __end_of_get_IR:	
  5352                           
  5353                           	psect	text24
  5354  05D1                     __ptext24:	
  5355 ;; *************** function _I2C_Master_Read *****************
  5356 ;; Defined at:
  5357 ;;		line 74 in file "./I2C.h"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  a               2    3[COMMON] unsigned short 
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;  temp            2    0[BANK0 ] unsigned short 
  5362 ;; Return value:  Size  Location     Type
  5363 ;;                  2    3[COMMON] unsigned short 
  5364 ;; Registers used:
  5365 ;;		wreg, status,2, status,0, pclath, cstack
  5366 ;; Tracked objects:
  5367 ;;		On entry : 0/0
  5368 ;;		On exit  : 0/0
  5369 ;;		Unchanged: 0/0
  5370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5371 ;;      Params:         2       0       0       0       0
  5372 ;;      Locals:         0       2       0       0       0
  5373 ;;      Temps:          2       0       0       0       0
  5374 ;;      Totals:         4       2       0       0       0
  5375 ;;Total ram usage:        6 bytes
  5376 ;; Hardware stack levels used:    1
  5377 ;; Hardware stack levels required when called:    2
  5378 ;; This function calls:
  5379 ;;		_I2C_Master_Wait
  5380 ;; This function is called by:
  5381 ;;		_get_time
  5382 ;;		_get_day
  5383 ;;		_get_temp
  5384 ;;		_get_hall
  5385 ;;		_get_tripwire
  5386 ;;		_get_PIR
  5387 ;;		_get_IR
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391                           
  5392                           ;psect for function _I2C_Master_Read
  5393  05D1                     _I2C_Master_Read:	
  5394                           
  5395                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  5396                           
  5397                           ;incstack = 0
  5398                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  5399  05D1  120A  158A  21EC  120A  118A  	fcall	_I2C_Master_Wait
  5400                           
  5401                           ;./I2C.h: 78:     RCEN = 1;
  5402  05D6  1683               	bsf	3,5	;RP0=1, select bank1
  5403  05D7  1303               	bcf	3,6	;RP1=0, select bank1
  5404  05D8  1591               	bsf	17,3	;volatile
  5405                           
  5406                           ;./I2C.h: 79:     I2C_Master_Wait();
  5407  05D9  120A  158A  21EC  120A  118A  	fcall	_I2C_Master_Wait
  5408                           
  5409                           ;./I2C.h: 80:     temp = SSPBUF;
  5410  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  5411  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  5412  05E0  0813               	movf	19,w	;volatile
  5413  05E1  00F5               	movwf	??_I2C_Master_Read
  5414  05E2  01F6               	clrf	??_I2C_Master_Read+1
  5415  05E3  0875               	movf	??_I2C_Master_Read,w
  5416  05E4  00A0               	movwf	I2C_Master_Read@temp
  5417  05E5  0876               	movf	??_I2C_Master_Read+1,w
  5418  05E6  00A1               	movwf	I2C_Master_Read@temp+1
  5419                           
  5420                           ;./I2C.h: 81:     I2C_Master_Wait();
  5421  05E7  120A  158A  21EC  120A  118A  	fcall	_I2C_Master_Wait
  5422                           
  5423                           ;./I2C.h: 83:     if(a == 1){
  5424  05EC  0373               	decf	I2C_Master_Read@a,w
  5425  05ED  0474               	iorwf	I2C_Master_Read@a+1,w
  5426  05EE  1D03               	btfss	3,2
  5427  05EF  2DF4               	goto	l144
  5428                           
  5429                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  5430  05F0  1683               	bsf	3,5	;RP0=1, select bank1
  5431  05F1  1303               	bcf	3,6	;RP1=0, select bank1
  5432  05F2  1291               	bcf	17,5	;volatile
  5433                           
  5434                           ;./I2C.h: 85:     }else{
  5435  05F3  2DF7               	goto	l145
  5436  05F4                     l144:	
  5437                           
  5438                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  5439  05F4  1683               	bsf	3,5	;RP0=1, select bank1
  5440  05F5  1303               	bcf	3,6	;RP1=0, select bank1
  5441  05F6  1691               	bsf	17,5	;volatile
  5442  05F7                     l145:	
  5443                           ;./I2C.h: 87:     }
  5444                           
  5445                           
  5446                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  5447  05F7  1611               	bsf	17,4	;volatile
  5448                           
  5449                           ;./I2C.h: 89:     return temp;
  5450  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  5451  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  5452  05FA  0821               	movf	I2C_Master_Read@temp+1,w
  5453  05FB  00F4               	movwf	?_I2C_Master_Read+1
  5454  05FC  0820               	movf	I2C_Master_Read@temp,w
  5455  05FD  00F3               	movwf	?_I2C_Master_Read
  5456  05FE  0008               	return
  5457  05FF                     __end_of_I2C_Master_Read:	
  5458                           
  5459                           	psect	text25
  5460  0A44                     __ptext25:	
  5461 ;; *************** function _close_door *****************
  5462 ;; Defined at:
  5463 ;;		line 515 in file "mainMaster.c"
  5464 ;; Parameters:    Size  Location     Type
  5465 ;;		None
  5466 ;; Auto vars:     Size  Location     Type
  5467 ;;		None
  5468 ;; Return value:  Size  Location     Type
  5469 ;;                  1    wreg      void 
  5470 ;; Registers used:
  5471 ;;		wreg, status,2, status,0, pclath, cstack
  5472 ;; Tracked objects:
  5473 ;;		On entry : 0/0
  5474 ;;		On exit  : 0/0
  5475 ;;		Unchanged: 0/0
  5476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5477 ;;      Params:         0       0       0       0       0
  5478 ;;      Locals:         0       0       0       0       0
  5479 ;;      Temps:          0       0       0       0       0
  5480 ;;      Totals:         0       0       0       0       0
  5481 ;;Total ram usage:        0 bytes
  5482 ;; Hardware stack levels used:    1
  5483 ;; Hardware stack levels required when called:    3
  5484 ;; This function calls:
  5485 ;;		_I2C_Master_Start
  5486 ;;		_I2C_Master_Stop
  5487 ;;		_I2C_Master_Write
  5488 ;; This function is called by:
  5489 ;;		_main
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           
  5494                           ;psect for function _close_door
  5495  0A44                     _close_door:	
  5496                           
  5497                           ;mainMaster.c: 517:     I2C_Master_Start();
  5498                           
  5499                           ;incstack = 0
  5500                           ; Regs used in _close_door: [wreg+status,2+status,0+pclath+cstack]
  5501  0A44  120A  158A  21C7  120A  158A  	fcall	_I2C_Master_Start
  5502                           
  5503                           ;mainMaster.c: 518:     I2C_Master_Write(0x20);
  5504  0A49  3020               	movlw	32
  5505  0A4A  00F3               	movwf	I2C_Master_Write@d
  5506  0A4B  3000               	movlw	0
  5507  0A4C  00F4               	movwf	I2C_Master_Write@d+1
  5508  0A4D  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  5509                           
  5510                           ;mainMaster.c: 519:     I2C_Master_Write(0xF0);
  5511  0A52  30F0               	movlw	240
  5512  0A53  00F3               	movwf	I2C_Master_Write@d
  5513  0A54  3000               	movlw	0
  5514  0A55  00F4               	movwf	I2C_Master_Write@d+1
  5515  0A56  120A  158A  21DC  120A  158A  	fcall	_I2C_Master_Write
  5516                           
  5517                           ;mainMaster.c: 520:     I2C_Master_Stop();
  5518  0A5B  120A  158A  21CE   	fcall	_I2C_Master_Stop
  5519  0A5E  0008               	return
  5520  0A5F                     __end_of_close_door:	
  5521                           
  5522                           	psect	text26
  5523  09DC                     __ptext26:	
  5524 ;; *************** function _I2C_Master_Write *****************
  5525 ;; Defined at:
  5526 ;;		line 65 in file "./I2C.h"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;  d               2    3[COMMON] unsigned int 
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;		None
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  1    wreg      void 
  5533 ;; Registers used:
  5534 ;;		wreg, status,2, status,0, pclath, cstack
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5540 ;;      Params:         2       0       0       0       0
  5541 ;;      Locals:         0       0       0       0       0
  5542 ;;      Temps:          0       0       0       0       0
  5543 ;;      Totals:         2       0       0       0       0
  5544 ;;Total ram usage:        2 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:    2
  5547 ;; This function calls:
  5548 ;;		_I2C_Master_Wait
  5549 ;; This function is called by:
  5550 ;;		_write_RTC
  5551 ;;		_get_time
  5552 ;;		_get_day
  5553 ;;		_get_temp
  5554 ;;		_get_hall
  5555 ;;		_get_tripwire
  5556 ;;		_get_PIR
  5557 ;;		_get_IR
  5558 ;;		_open_door
  5559 ;;		_close_door
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           
  5564                           ;psect for function _I2C_Master_Write
  5565  09DC                     _I2C_Master_Write:	
  5566                           
  5567                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  5568                           
  5569                           ;incstack = 0
  5570                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5571  09DC  120A  158A  21EC   	fcall	_I2C_Master_Wait
  5572                           
  5573                           ;./I2C.h: 68:     SSPBUF = d;
  5574  09DF  0873               	movf	I2C_Master_Write@d,w
  5575  09E0  1283               	bcf	3,5	;RP0=0, select bank0
  5576  09E1  1303               	bcf	3,6	;RP1=0, select bank0
  5577  09E2  0093               	movwf	19	;volatile
  5578  09E3  0008               	return
  5579  09E4                     __end_of_I2C_Master_Write:	
  5580                           
  5581                           	psect	text27
  5582  09CE                     __ptext27:	
  5583 ;; *************** function _I2C_Master_Stop *****************
  5584 ;; Defined at:
  5585 ;;		line 55 in file "./I2C.h"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;		None
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;		None
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  1    wreg      void 
  5592 ;; Registers used:
  5593 ;;		wreg, status,2, status,0, pclath, cstack
  5594 ;; Tracked objects:
  5595 ;;		On entry : 0/0
  5596 ;;		On exit  : 0/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5599 ;;      Params:         0       0       0       0       0
  5600 ;;      Locals:         0       0       0       0       0
  5601 ;;      Temps:          0       0       0       0       0
  5602 ;;      Totals:         0       0       0       0       0
  5603 ;;Total ram usage:        0 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; Hardware stack levels required when called:    2
  5606 ;; This function calls:
  5607 ;;		_I2C_Master_Wait
  5608 ;; This function is called by:
  5609 ;;		_write_RTC
  5610 ;;		_get_time
  5611 ;;		_get_day
  5612 ;;		_get_temp
  5613 ;;		_get_hall
  5614 ;;		_get_tripwire
  5615 ;;		_get_PIR
  5616 ;;		_get_IR
  5617 ;;		_open_door
  5618 ;;		_close_door
  5619 ;; This function uses a non-reentrant model
  5620 ;;
  5621                           
  5622                           
  5623                           ;psect for function _I2C_Master_Stop
  5624  09CE                     _I2C_Master_Stop:	
  5625                           
  5626                           ;./I2C.h: 57:     I2C_Master_Wait();
  5627                           
  5628                           ;incstack = 0
  5629                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5630  09CE  120A  158A  21EC   	fcall	_I2C_Master_Wait
  5631                           
  5632                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  5633  09D1  1683               	bsf	3,5	;RP0=1, select bank1
  5634  09D2  1303               	bcf	3,6	;RP1=0, select bank1
  5635  09D3  1511               	bsf	17,2	;volatile
  5636  09D4  0008               	return
  5637  09D5                     __end_of_I2C_Master_Stop:	
  5638                           
  5639                           	psect	text28
  5640  09C7                     __ptext28:	
  5641 ;; *************** function _I2C_Master_Start *****************
  5642 ;; Defined at:
  5643 ;;		line 39 in file "./I2C.h"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;		None
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;		None
  5648 ;; Return value:  Size  Location     Type
  5649 ;;                  1    wreg      void 
  5650 ;; Registers used:
  5651 ;;		wreg, status,2, status,0, pclath, cstack
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5657 ;;      Params:         0       0       0       0       0
  5658 ;;      Locals:         0       0       0       0       0
  5659 ;;      Temps:          0       0       0       0       0
  5660 ;;      Totals:         0       0       0       0       0
  5661 ;;Total ram usage:        0 bytes
  5662 ;; Hardware stack levels used:    1
  5663 ;; Hardware stack levels required when called:    2
  5664 ;; This function calls:
  5665 ;;		_I2C_Master_Wait
  5666 ;; This function is called by:
  5667 ;;		_write_RTC
  5668 ;;		_get_time
  5669 ;;		_get_day
  5670 ;;		_get_temp
  5671 ;;		_get_hall
  5672 ;;		_get_tripwire
  5673 ;;		_get_PIR
  5674 ;;		_get_IR
  5675 ;;		_open_door
  5676 ;;		_close_door
  5677 ;; This function uses a non-reentrant model
  5678 ;;
  5679                           
  5680                           
  5681                           ;psect for function _I2C_Master_Start
  5682  09C7                     _I2C_Master_Start:	
  5683                           
  5684                           ;./I2C.h: 41:     I2C_Master_Wait();
  5685                           
  5686                           ;incstack = 0
  5687                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5688  09C7  120A  158A  21EC   	fcall	_I2C_Master_Wait
  5689                           
  5690                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  5691  09CA  1683               	bsf	3,5	;RP0=1, select bank1
  5692  09CB  1303               	bcf	3,6	;RP1=0, select bank1
  5693  09CC  1411               	bsf	17,0	;volatile
  5694  09CD  0008               	return
  5695  09CE                     __end_of_I2C_Master_Start:	
  5696                           
  5697                           	psect	text29
  5698  09EC                     __ptext29:	
  5699 ;; *************** function _I2C_Master_Wait *****************
  5700 ;; Defined at:
  5701 ;;		line 32 in file "./I2C.h"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;		None
  5704 ;; Auto vars:     Size  Location     Type
  5705 ;;		None
  5706 ;; Return value:  Size  Location     Type
  5707 ;;                  1    wreg      void 
  5708 ;; Registers used:
  5709 ;;		wreg, status,2
  5710 ;; Tracked objects:
  5711 ;;		On entry : 0/0
  5712 ;;		On exit  : 0/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5715 ;;      Params:         0       0       0       0       0
  5716 ;;      Locals:         0       0       0       0       0
  5717 ;;      Temps:          0       0       0       0       0
  5718 ;;      Totals:         0       0       0       0       0
  5719 ;;Total ram usage:        0 bytes
  5720 ;; Hardware stack levels used:    1
  5721 ;; Hardware stack levels required when called:    1
  5722 ;; This function calls:
  5723 ;;		Nothing
  5724 ;; This function is called by:
  5725 ;;		_I2C_Master_Start
  5726 ;;		_I2C_Master_RepeatedStart
  5727 ;;		_I2C_Master_Stop
  5728 ;;		_I2C_Master_Write
  5729 ;;		_I2C_Master_Read
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           
  5734                           ;psect for function _I2C_Master_Wait
  5735  09EC                     _I2C_Master_Wait:	
  5736  09EC                     l126:	
  5737                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5738                           
  5739                           ;incstack = 0
  5740                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5741                           
  5742  09EC  1683               	bsf	3,5	;RP0=1, select bank1
  5743  09ED  1303               	bcf	3,6	;RP1=0, select bank1
  5744  09EE  1914               	btfsc	20,2	;volatile
  5745  09EF  29EC               	goto	l126
  5746  09F0  0811               	movf	17,w	;volatile
  5747  09F1  391F               	andlw	31
  5748  09F2  1903               	btfsc	3,2
  5749  09F3  0008               	return
  5750  09F4  29EC               	goto	l126
  5751  09F5                     __end_of_I2C_Master_Wait:	
  5752                           
  5753                           	psect	text30
  5754  0D19                     __ptext30:	
  5755 ;; *************** function ___awmod *****************
  5756 ;; Defined at:
  5757 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;  divisor         2    3[COMMON] int 
  5760 ;;  dividend        2    5[COMMON] int 
  5761 ;; Auto vars:     Size  Location     Type
  5762 ;;  sign            1    1[BANK0 ] unsigned char 
  5763 ;;  counter         1    0[BANK0 ] unsigned char 
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  2    3[COMMON] int 
  5766 ;; Registers used:
  5767 ;;		wreg, status,2, status,0
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5773 ;;      Params:         4       0       0       0       0
  5774 ;;      Locals:         0       2       0       0       0
  5775 ;;      Temps:          1       0       0       0       0
  5776 ;;      Totals:         5       2       0       0       0
  5777 ;;Total ram usage:        7 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:    1
  5780 ;; This function calls:
  5781 ;;		Nothing
  5782 ;; This function is called by:
  5783 ;;		_main
  5784 ;; This function uses a non-reentrant model
  5785 ;;
  5786                           
  5787                           
  5788                           ;psect for function ___awmod
  5789  0D19                     ___awmod:	
  5790                           
  5791                           ;incstack = 0
  5792                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5793  0D19  1283               	bcf	3,5	;RP0=0, select bank0
  5794  0D1A  1303               	bcf	3,6	;RP1=0, select bank0
  5795  0D1B  01A1               	clrf	___awmod@sign
  5796  0D1C  1FF6               	btfss	___awmod@dividend+1,7
  5797  0D1D  2D25               	goto	l3403
  5798  0D1E  09F5               	comf	___awmod@dividend,f
  5799  0D1F  09F6               	comf	___awmod@dividend+1,f
  5800  0D20  0AF5               	incf	___awmod@dividend,f
  5801  0D21  1903               	skipnz
  5802  0D22  0AF6               	incf	___awmod@dividend+1,f
  5803  0D23  01A1               	clrf	___awmod@sign
  5804  0D24  0AA1               	incf	___awmod@sign,f
  5805  0D25                     l3403:	
  5806  0D25  1FF4               	btfss	___awmod@divisor+1,7
  5807  0D26  2D2C               	goto	l3407
  5808  0D27  09F3               	comf	___awmod@divisor,f
  5809  0D28  09F4               	comf	___awmod@divisor+1,f
  5810  0D29  0AF3               	incf	___awmod@divisor,f
  5811  0D2A  1903               	skipnz
  5812  0D2B  0AF4               	incf	___awmod@divisor+1,f
  5813  0D2C                     l3407:	
  5814  0D2C  0873               	movf	___awmod@divisor,w
  5815  0D2D  0474               	iorwf	___awmod@divisor+1,w
  5816  0D2E  1903               	btfsc	3,2
  5817  0D2F  2D59               	goto	l3425
  5818  0D30  01A0               	clrf	___awmod@counter
  5819  0D31  0AA0               	incf	___awmod@counter,f
  5820  0D32                     l3415:	
  5821  0D32  1BF4               	btfsc	___awmod@divisor+1,7
  5822  0D33  2D40               	goto	l3417
  5823  0D34  3001               	movlw	1
  5824  0D35                     u3245:	
  5825  0D35  1003               	clrc
  5826  0D36  0DF3               	rlf	___awmod@divisor,f
  5827  0D37  0DF4               	rlf	___awmod@divisor+1,f
  5828  0D38  3EFF               	addlw	-1
  5829  0D39  1D03               	skipz
  5830  0D3A  2D35               	goto	u3245
  5831  0D3B  3001               	movlw	1
  5832  0D3C  00F7               	movwf	??___awmod
  5833  0D3D  0877               	movf	??___awmod,w
  5834  0D3E  07A0               	addwf	___awmod@counter,f
  5835  0D3F  2D32               	goto	l3415
  5836  0D40                     l3417:	
  5837  0D40  0874               	movf	___awmod@divisor+1,w
  5838  0D41  0276               	subwf	___awmod@dividend+1,w
  5839  0D42  1D03               	skipz
  5840  0D43  2D46               	goto	u3265
  5841  0D44  0873               	movf	___awmod@divisor,w
  5842  0D45  0275               	subwf	___awmod@dividend,w
  5843  0D46                     u3265:	
  5844  0D46  1C03               	skipc
  5845  0D47  2D4E               	goto	l3421
  5846  0D48  0873               	movf	___awmod@divisor,w
  5847  0D49  02F5               	subwf	___awmod@dividend,f
  5848  0D4A  0874               	movf	___awmod@divisor+1,w
  5849  0D4B  1C03               	skipc
  5850  0D4C  03F6               	decf	___awmod@dividend+1,f
  5851  0D4D  02F6               	subwf	___awmod@dividend+1,f
  5852  0D4E                     l3421:	
  5853  0D4E  3001               	movlw	1
  5854  0D4F                     u3275:	
  5855  0D4F  1003               	clrc
  5856  0D50  0CF4               	rrf	___awmod@divisor+1,f
  5857  0D51  0CF3               	rrf	___awmod@divisor,f
  5858  0D52  3EFF               	addlw	-1
  5859  0D53  1D03               	skipz
  5860  0D54  2D4F               	goto	u3275
  5861  0D55  3001               	movlw	1
  5862  0D56  02A0               	subwf	___awmod@counter,f
  5863  0D57  1D03               	btfss	3,2
  5864  0D58  2D40               	goto	l3417
  5865  0D59                     l3425:	
  5866  0D59  0821               	movf	___awmod@sign,w
  5867  0D5A  1903               	btfsc	3,2
  5868  0D5B  2D61               	goto	l3429
  5869  0D5C  09F5               	comf	___awmod@dividend,f
  5870  0D5D  09F6               	comf	___awmod@dividend+1,f
  5871  0D5E  0AF5               	incf	___awmod@dividend,f
  5872  0D5F  1903               	skipnz
  5873  0D60  0AF6               	incf	___awmod@dividend+1,f
  5874  0D61                     l3429:	
  5875  0D61  0876               	movf	___awmod@dividend+1,w
  5876  0D62  00F4               	movwf	?___awmod+1
  5877  0D63  0875               	movf	___awmod@dividend,w
  5878  0D64  00F3               	movwf	?___awmod
  5879  0D65  0008               	return
  5880  0D66                     __end_of___awmod:	
  5881                           
  5882                           	psect	text31
  5883  0E5C                     __ptext31:	
  5884 ;; *************** function ___awdiv *****************
  5885 ;; Defined at:
  5886 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  divisor         2    3[COMMON] int 
  5889 ;;  dividend        2    5[COMMON] int 
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;  quotient        2    2[BANK0 ] int 
  5892 ;;  sign            1    1[BANK0 ] unsigned char 
  5893 ;;  counter         1    0[BANK0 ] unsigned char 
  5894 ;; Return value:  Size  Location     Type
  5895 ;;                  2    3[COMMON] int 
  5896 ;; Registers used:
  5897 ;;		wreg, status,2, status,0
  5898 ;; Tracked objects:
  5899 ;;		On entry : 0/0
  5900 ;;		On exit  : 0/0
  5901 ;;		Unchanged: 0/0
  5902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5903 ;;      Params:         4       0       0       0       0
  5904 ;;      Locals:         0       4       0       0       0
  5905 ;;      Temps:          1       0       0       0       0
  5906 ;;      Totals:         5       4       0       0       0
  5907 ;;Total ram usage:        9 bytes
  5908 ;; Hardware stack levels used:    1
  5909 ;; Hardware stack levels required when called:    1
  5910 ;; This function calls:
  5911 ;;		Nothing
  5912 ;; This function is called by:
  5913 ;;		_main
  5914 ;; This function uses a non-reentrant model
  5915 ;;
  5916                           
  5917                           
  5918                           ;psect for function ___awdiv
  5919  0E5C                     ___awdiv:	
  5920                           
  5921                           ;incstack = 0
  5922                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5923  0E5C  1283               	bcf	3,5	;RP0=0, select bank0
  5924  0E5D  1303               	bcf	3,6	;RP1=0, select bank0
  5925  0E5E  01A1               	clrf	___awdiv@sign
  5926  0E5F  1FF4               	btfss	___awdiv@divisor+1,7
  5927  0E60  2E68               	goto	l2573
  5928  0E61  09F3               	comf	___awdiv@divisor,f
  5929  0E62  09F4               	comf	___awdiv@divisor+1,f
  5930  0E63  0AF3               	incf	___awdiv@divisor,f
  5931  0E64  1903               	skipnz
  5932  0E65  0AF4               	incf	___awdiv@divisor+1,f
  5933  0E66  01A1               	clrf	___awdiv@sign
  5934  0E67  0AA1               	incf	___awdiv@sign,f
  5935  0E68                     l2573:	
  5936  0E68  1FF6               	btfss	___awdiv@dividend+1,7
  5937  0E69  2E73               	goto	l2579
  5938  0E6A  09F5               	comf	___awdiv@dividend,f
  5939  0E6B  09F6               	comf	___awdiv@dividend+1,f
  5940  0E6C  0AF5               	incf	___awdiv@dividend,f
  5941  0E6D  1903               	skipnz
  5942  0E6E  0AF6               	incf	___awdiv@dividend+1,f
  5943  0E6F  3001               	movlw	1
  5944  0E70  00F7               	movwf	??___awdiv
  5945  0E71  0877               	movf	??___awdiv,w
  5946  0E72  06A1               	xorwf	___awdiv@sign,f
  5947  0E73                     l2579:	
  5948  0E73  01A2               	clrf	___awdiv@quotient
  5949  0E74  01A3               	clrf	___awdiv@quotient+1
  5950  0E75  0873               	movf	___awdiv@divisor,w
  5951  0E76  0474               	iorwf	___awdiv@divisor+1,w
  5952  0E77  1903               	btfsc	3,2
  5953  0E78  2EAA               	goto	l2601
  5954  0E79  01A0               	clrf	___awdiv@counter
  5955  0E7A  0AA0               	incf	___awdiv@counter,f
  5956  0E7B                     l2589:	
  5957  0E7B  1BF4               	btfsc	___awdiv@divisor+1,7
  5958  0E7C  2E89               	goto	l2591
  5959  0E7D  3001               	movlw	1
  5960  0E7E                     u2095:	
  5961  0E7E  1003               	clrc
  5962  0E7F  0DF3               	rlf	___awdiv@divisor,f
  5963  0E80  0DF4               	rlf	___awdiv@divisor+1,f
  5964  0E81  3EFF               	addlw	-1
  5965  0E82  1D03               	skipz
  5966  0E83  2E7E               	goto	u2095
  5967  0E84  3001               	movlw	1
  5968  0E85  00F7               	movwf	??___awdiv
  5969  0E86  0877               	movf	??___awdiv,w
  5970  0E87  07A0               	addwf	___awdiv@counter,f
  5971  0E88  2E7B               	goto	l2589
  5972  0E89                     l2591:	
  5973  0E89  3001               	movlw	1
  5974  0E8A                     u2115:	
  5975  0E8A  1003               	clrc
  5976  0E8B  0DA2               	rlf	___awdiv@quotient,f
  5977  0E8C  0DA3               	rlf	___awdiv@quotient+1,f
  5978  0E8D  3EFF               	addlw	-1
  5979  0E8E  1D03               	skipz
  5980  0E8F  2E8A               	goto	u2115
  5981  0E90  0874               	movf	___awdiv@divisor+1,w
  5982  0E91  0276               	subwf	___awdiv@dividend+1,w
  5983  0E92  1D03               	skipz
  5984  0E93  2E96               	goto	u2125
  5985  0E94  0873               	movf	___awdiv@divisor,w
  5986  0E95  0275               	subwf	___awdiv@dividend,w
  5987  0E96                     u2125:	
  5988  0E96  1C03               	skipc
  5989  0E97  2E9F               	goto	l2597
  5990  0E98  0873               	movf	___awdiv@divisor,w
  5991  0E99  02F5               	subwf	___awdiv@dividend,f
  5992  0E9A  0874               	movf	___awdiv@divisor+1,w
  5993  0E9B  1C03               	skipc
  5994  0E9C  03F6               	decf	___awdiv@dividend+1,f
  5995  0E9D  02F6               	subwf	___awdiv@dividend+1,f
  5996  0E9E  1422               	bsf	___awdiv@quotient,0
  5997  0E9F                     l2597:	
  5998  0E9F  3001               	movlw	1
  5999  0EA0                     u2135:	
  6000  0EA0  1003               	clrc
  6001  0EA1  0CF4               	rrf	___awdiv@divisor+1,f
  6002  0EA2  0CF3               	rrf	___awdiv@divisor,f
  6003  0EA3  3EFF               	addlw	-1
  6004  0EA4  1D03               	skipz
  6005  0EA5  2EA0               	goto	u2135
  6006  0EA6  3001               	movlw	1
  6007  0EA7  02A0               	subwf	___awdiv@counter,f
  6008  0EA8  1D03               	btfss	3,2
  6009  0EA9  2E89               	goto	l2591
  6010  0EAA                     l2601:	
  6011  0EAA  0821               	movf	___awdiv@sign,w
  6012  0EAB  1903               	btfsc	3,2
  6013  0EAC  2EB2               	goto	l2605
  6014  0EAD  09A2               	comf	___awdiv@quotient,f
  6015  0EAE  09A3               	comf	___awdiv@quotient+1,f
  6016  0EAF  0AA2               	incf	___awdiv@quotient,f
  6017  0EB0  1903               	skipnz
  6018  0EB1  0AA3               	incf	___awdiv@quotient+1,f
  6019  0EB2                     l2605:	
  6020  0EB2  0823               	movf	___awdiv@quotient+1,w
  6021  0EB3  00F4               	movwf	?___awdiv+1
  6022  0EB4  0822               	movf	___awdiv@quotient,w
  6023  0EB5  00F3               	movwf	?___awdiv
  6024  0EB6  0008               	return
  6025  0EB7                     __end_of___awdiv:	
  6026                           
  6027                           	psect	text32
  6028  09F5                     __ptext32:	
  6029 ;; *************** function _UART_Write *****************
  6030 ;; Defined at:
  6031 ;;		line 54 in file "./UART.h"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;  data            1    wreg     unsigned char 
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;  data            1    3[COMMON] unsigned char 
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  1    wreg      void 
  6038 ;; Registers used:
  6039 ;;		wreg
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6045 ;;      Params:         0       0       0       0       0
  6046 ;;      Locals:         1       0       0       0       0
  6047 ;;      Temps:          0       0       0       0       0
  6048 ;;      Totals:         1       0       0       0       0
  6049 ;;Total ram usage:        1 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:    1
  6052 ;; This function calls:
  6053 ;;		Nothing
  6054 ;; This function is called by:
  6055 ;;		_main
  6056 ;;		_UART_Write_Text
  6057 ;; This function uses a non-reentrant model
  6058 ;;
  6059                           
  6060                           
  6061                           ;psect for function _UART_Write
  6062  09F5                     _UART_Write:	
  6063                           
  6064                           ;incstack = 0
  6065                           ; Regs used in _UART_Write: [wreg]
  6066                           ;UART_Write@data stored from wreg
  6067  09F5  00F3               	movwf	UART_Write@data
  6068  09F6                     l230:	
  6069                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(!TRMT);
  6070                           
  6071  09F6  1683               	bsf	3,5	;RP0=1, select bank1
  6072  09F7  1303               	bcf	3,6	;RP1=0, select bank1
  6073  09F8  1C98               	btfss	24,1	;volatile
  6074  09F9  29F6               	goto	l230
  6075                           
  6076                           ;./UART.h: 57:   TXREG = data;
  6077  09FA  0873               	movf	UART_Write@data,w
  6078  09FB  1283               	bcf	3,5	;RP0=0, select bank0
  6079  09FC  1303               	bcf	3,6	;RP1=0, select bank0
  6080  09FD  0099               	movwf	25	;volatile
  6081  09FE  0008               	return
  6082  09FF                     __end_of_UART_Write:	
  6083                           
  6084                           	psect	text33
  6085  09C1                     __ptext33:	
  6086 ;; *************** function _UART_TX_Empty *****************
  6087 ;; Defined at:
  6088 ;;		line 31 in file "./UART.h"
  6089 ;; Parameters:    Size  Location     Type
  6090 ;;		None
  6091 ;; Auto vars:     Size  Location     Type
  6092 ;;		None
  6093 ;; Return value:  Size  Location     Type
  6094 ;;                  1    wreg      unsigned char 
  6095 ;; Registers used:
  6096 ;;		wreg
  6097 ;; Tracked objects:
  6098 ;;		On entry : 0/0
  6099 ;;		On exit  : 0/0
  6100 ;;		Unchanged: 0/0
  6101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6102 ;;      Params:         0       0       0       0       0
  6103 ;;      Locals:         0       0       0       0       0
  6104 ;;      Temps:          0       0       0       0       0
  6105 ;;      Totals:         0       0       0       0       0
  6106 ;;Total ram usage:        0 bytes
  6107 ;; Hardware stack levels used:    1
  6108 ;; Hardware stack levels required when called:    1
  6109 ;; This function calls:
  6110 ;;		Nothing
  6111 ;; This function is called by:
  6112 ;;		_main
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           
  6117                           ;psect for function _UART_TX_Empty
  6118  09C1                     _UART_TX_Empty:	
  6119                           
  6120                           ;./UART.h: 33:   return TRMT;
  6121                           
  6122                           ;incstack = 0
  6123                           ; Regs used in _UART_TX_Empty: [wreg]
  6124  09C1  3000               	movlw	0
  6125  09C2  1683               	bsf	3,5	;RP0=1, select bank1
  6126  09C3  1303               	bcf	3,6	;RP1=0, select bank1
  6127  09C4  1898               	btfsc	24,1	;volatile
  6128  09C5  3001               	movlw	1
  6129  09C6  0008               	return
  6130  09C7                     __end_of_UART_TX_Empty:	
  6131                           
  6132                           	psect	text34
  6133  0C92                     __ptext34:	
  6134 ;; *************** function _Lcd_Write_String *****************
  6135 ;; Defined at:
  6136 ;;		line 100 in file "./LCD4bits.h"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;  a               2    0[BANK0 ] PTR unsigned char 
  6139 ;;		 -> NULL(0), STR_19(6), STR_18(7), STR_17(7), 
  6140 ;;		 -> STR_16(7), STR_15(8), STR_14(8), STR_13(9), 
  6141 ;;		 -> STR_12(9), STR_11(12), STR_10(12), STR_8(10), 
  6142 ;;		 -> STR_7(10), STR_6(10), STR_5(10), STR_4(10), 
  6143 ;;		 -> STR_3(10), STR_2(10), STR_1(10), time(6), 
  6144 ;;		 -> temp(6), 
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;  i               2    5[BANK0 ] int 
  6147 ;; Return value:  Size  Location     Type
  6148 ;;                  1    wreg      void 
  6149 ;; Registers used:
  6150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6156 ;;      Params:         0       2       0       0       0
  6157 ;;      Locals:         0       2       0       0       0
  6158 ;;      Temps:          0       3       0       0       0
  6159 ;;      Totals:         0       7       0       0       0
  6160 ;;Total ram usage:        7 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; Hardware stack levels required when called:    3
  6163 ;; This function calls:
  6164 ;;		_Lcd_Write_Char
  6165 ;; This function is called by:
  6166 ;;		_main
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           
  6171                           ;psect for function _Lcd_Write_String
  6172  0C92                     _Lcd_Write_String:	
  6173                           
  6174                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  6175                           
  6176                           ;incstack = 0
  6177                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6178  0C92  1283               	bcf	3,5	;RP0=0, select bank0
  6179  0C93  1303               	bcf	3,6	;RP1=0, select bank0
  6180  0C94  01A5               	clrf	Lcd_Write_String@i
  6181  0C95  01A6               	clrf	Lcd_Write_String@i+1
  6182  0C96                     l3255:	
  6183  0C96  0825               	movf	Lcd_Write_String@i,w
  6184  0C97  0720               	addwf	Lcd_Write_String@a,w
  6185  0C98  00A3               	movwf	??_Lcd_Write_String+1
  6186  0C99  0821               	movf	Lcd_Write_String@a+1,w
  6187  0C9A  00A2               	movwf	??_Lcd_Write_String
  6188  0C9B  1803               	skipnc
  6189  0C9C  0AA2               	incf	??_Lcd_Write_String,f
  6190  0C9D  1BA5               	btfsc	Lcd_Write_String@i,7
  6191  0C9E  03A2               	decf	??_Lcd_Write_String,f
  6192  0C9F  1283               	bcf	3,5	;RP0=0, select bank0
  6193  0CA0  1303               	bcf	3,6	;RP1=0, select bank0
  6194  0CA1  0822               	movf	??_Lcd_Write_String,w
  6195  0CA2  00A4               	movwf	??_Lcd_Write_String+2
  6196  0CA3  0824               	movf	??_Lcd_Write_String+2,w
  6197  0CA4  00FF               	movwf	127
  6198  0CA5  0823               	movf	??_Lcd_Write_String+1,w
  6199  0CA6  0084               	movwf	4
  6200  0CA7  120A  118A  2600  120A  158A  	fcall	stringtab
  6201  0CAC  3A00               	xorlw	0
  6202  0CAD  1903               	btfsc	3,2
  6203  0CAE  0008               	return
  6204                           
  6205                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  6206  0CAF  0825               	movf	Lcd_Write_String@i,w
  6207  0CB0  0720               	addwf	Lcd_Write_String@a,w
  6208  0CB1  00A3               	movwf	??_Lcd_Write_String+1
  6209  0CB2  0821               	movf	Lcd_Write_String@a+1,w
  6210  0CB3  00A2               	movwf	??_Lcd_Write_String
  6211  0CB4  1803               	skipnc
  6212  0CB5  0AA2               	incf	??_Lcd_Write_String,f
  6213  0CB6  1BA5               	btfsc	Lcd_Write_String@i,7
  6214  0CB7  03A2               	decf	??_Lcd_Write_String,f
  6215  0CB8  1283               	bcf	3,5	;RP0=0, select bank0
  6216  0CB9  1303               	bcf	3,6	;RP1=0, select bank0
  6217  0CBA  0822               	movf	??_Lcd_Write_String,w
  6218  0CBB  00A4               	movwf	??_Lcd_Write_String+2
  6219  0CBC  0824               	movf	??_Lcd_Write_String+2,w
  6220  0CBD  00FF               	movwf	127
  6221  0CBE  0823               	movf	??_Lcd_Write_String+1,w
  6222  0CBF  0084               	movwf	4
  6223  0CC0  120A  118A  2600  120A  158A  	fcall	stringtab
  6224  0CC5  120A  158A  23E1  120A  158A  	fcall	_Lcd_Write_Char
  6225  0CCA  3001               	movlw	1
  6226  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  6227  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  6228  0CCD  07A5               	addwf	Lcd_Write_String@i,f
  6229  0CCE  1803               	skipnc
  6230  0CCF  0AA6               	incf	Lcd_Write_String@i+1,f
  6231  0CD0  3000               	movlw	0
  6232  0CD1  07A6               	addwf	Lcd_Write_String@i+1,f
  6233  0CD2  2C96               	goto	l3255
  6234  0CD3                     __end_of_Lcd_Write_String:	
  6235                           
  6236                           	psect	text35
  6237  0BE1                     __ptext35:	
  6238 ;; *************** function _Lcd_Write_Char *****************
  6239 ;; Defined at:
  6240 ;;		line 84 in file "./LCD4bits.h"
  6241 ;; Parameters:    Size  Location     Type
  6242 ;;  a               1    wreg     unsigned char 
  6243 ;; Auto vars:     Size  Location     Type
  6244 ;;  a               1    7[COMMON] unsigned char 
  6245 ;;  y               1    6[COMMON] unsigned char 
  6246 ;;  temp            1    5[COMMON] unsigned char 
  6247 ;; Return value:  Size  Location     Type
  6248 ;;                  1    wreg      void 
  6249 ;; Registers used:
  6250 ;;		wreg, status,2, status,0, pclath, cstack
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6256 ;;      Params:         0       0       0       0       0
  6257 ;;      Locals:         3       0       0       0       0
  6258 ;;      Temps:          1       0       0       0       0
  6259 ;;      Totals:         4       0       0       0       0
  6260 ;;Total ram usage:        4 bytes
  6261 ;; Hardware stack levels used:    1
  6262 ;; Hardware stack levels required when called:    2
  6263 ;; This function calls:
  6264 ;;		_Lcd_Port
  6265 ;; This function is called by:
  6266 ;;		_Lcd_Write_String
  6267 ;;		_main
  6268 ;; This function uses a non-reentrant model
  6269 ;;
  6270                           
  6271                           
  6272                           ;psect for function _Lcd_Write_Char
  6273  0BE1                     _Lcd_Write_Char:	
  6274                           
  6275                           ;incstack = 0
  6276                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  6277                           ;Lcd_Write_Char@a stored from wreg
  6278  0BE1  00F7               	movwf	Lcd_Write_Char@a
  6279                           
  6280                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  6281  0BE2  0877               	movf	Lcd_Write_Char@a,w
  6282  0BE3  390F               	andlw	15
  6283  0BE4  00F4               	movwf	??_Lcd_Write_Char
  6284  0BE5  0874               	movf	??_Lcd_Write_Char,w
  6285  0BE6  00F5               	movwf	Lcd_Write_Char@temp
  6286                           
  6287                           ;./LCD4bits.h: 88:    y = a&0xF0;
  6288  0BE7  0877               	movf	Lcd_Write_Char@a,w
  6289  0BE8  39F0               	andlw	240
  6290  0BE9  00F4               	movwf	??_Lcd_Write_Char
  6291  0BEA  0874               	movf	??_Lcd_Write_Char,w
  6292  0BEB  00F6               	movwf	Lcd_Write_Char@y
  6293                           
  6294                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  6295  0BEC  1283               	bcf	3,5	;RP0=0, select bank0
  6296  0BED  1303               	bcf	3,6	;RP1=0, select bank0
  6297  0BEE  1606               	bsf	6,4	;volatile
  6298                           
  6299                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  6300  0BEF  0876               	movf	Lcd_Write_Char@y,w
  6301  0BF0  00F4               	movwf	??_Lcd_Write_Char
  6302  0BF1  3004               	movlw	4
  6303  0BF2                     u1725:	
  6304  0BF2  1003               	clrc
  6305  0BF3  0CF4               	rrf	??_Lcd_Write_Char,f
  6306  0BF4  3EFF               	addlw	-1
  6307  0BF5  1D03               	skipz
  6308  0BF6  2BF2               	goto	u1725
  6309  0BF7  0874               	movf	??_Lcd_Write_Char,w
  6310  0BF8  120A  158A  2210  120A  158A  	fcall	_Lcd_Port
  6311                           
  6312                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  6313  0BFD  1283               	bcf	3,5	;RP0=0, select bank0
  6314  0BFE  1303               	bcf	3,6	;RP1=0, select bank0
  6315  0BFF  1686               	bsf	6,5	;volatile
  6316                           
  6317                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  6318  0C00  301A               	movlw	26
  6319  0C01  00F4               	movwf	??_Lcd_Write_Char
  6320  0C02                     u3847:	
  6321  0C02  0BF4               	decfsz	??_Lcd_Write_Char,f
  6322  0C03  2C02               	goto	u3847
  6323  0C04  0000               	nop
  6324                           
  6325                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  6326  0C05  1283               	bcf	3,5	;RP0=0, select bank0
  6327  0C06  1303               	bcf	3,6	;RP1=0, select bank0
  6328  0C07  1286               	bcf	6,5	;volatile
  6329                           
  6330                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  6331  0C08  0875               	movf	Lcd_Write_Char@temp,w
  6332  0C09  120A  158A  2210  120A  158A  	fcall	_Lcd_Port
  6333                           
  6334                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  6335  0C0E  1283               	bcf	3,5	;RP0=0, select bank0
  6336  0C0F  1303               	bcf	3,6	;RP1=0, select bank0
  6337  0C10  1686               	bsf	6,5	;volatile
  6338                           
  6339                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  6340  0C11  301A               	movlw	26
  6341  0C12  00F4               	movwf	??_Lcd_Write_Char
  6342  0C13                     u3857:	
  6343  0C13  0BF4               	decfsz	??_Lcd_Write_Char,f
  6344  0C14  2C13               	goto	u3857
  6345  0C15  0000               	nop
  6346                           
  6347                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  6348  0C16  1283               	bcf	3,5	;RP0=0, select bank0
  6349  0C17  1303               	bcf	3,6	;RP1=0, select bank0
  6350  0C18  1286               	bcf	6,5	;volatile
  6351  0C19  0008               	return
  6352  0C1A                     __end_of_Lcd_Write_Char:	
  6353                           
  6354                           	psect	text36
  6355  0D66                     __ptext36:	
  6356 ;; *************** function _Lcd_Set_Cursor *****************
  6357 ;; Defined at:
  6358 ;;		line 44 in file "./LCD4bits.h"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;  a               1    wreg     unsigned char 
  6361 ;;  b               1    7[COMMON] unsigned char 
  6362 ;; Auto vars:     Size  Location     Type
  6363 ;;  a               1    2[BANK0 ] unsigned char 
  6364 ;;  temp            1    5[BANK0 ] unsigned char 
  6365 ;;  y               1    4[BANK0 ] unsigned char 
  6366 ;;  z               1    3[BANK0 ] unsigned char 
  6367 ;; Return value:  Size  Location     Type
  6368 ;;                  1    wreg      void 
  6369 ;; Registers used:
  6370 ;;		wreg, status,2, status,0, pclath, cstack
  6371 ;; Tracked objects:
  6372 ;;		On entry : 0/0
  6373 ;;		On exit  : 0/0
  6374 ;;		Unchanged: 0/0
  6375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6376 ;;      Params:         1       0       0       0       0
  6377 ;;      Locals:         0       4       0       0       0
  6378 ;;      Temps:          0       2       0       0       0
  6379 ;;      Totals:         1       6       0       0       0
  6380 ;;Total ram usage:        7 bytes
  6381 ;; Hardware stack levels used:    1
  6382 ;; Hardware stack levels required when called:    3
  6383 ;; This function calls:
  6384 ;;		_Lcd_Cmd
  6385 ;; This function is called by:
  6386 ;;		_main
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           
  6391                           ;psect for function _Lcd_Set_Cursor
  6392  0D66                     _Lcd_Set_Cursor:	
  6393                           
  6394                           ;incstack = 0
  6395                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  6396                           ;Lcd_Set_Cursor@a stored from wreg
  6397  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  6398  0D67  1303               	bcf	3,6	;RP1=0, select bank0
  6399  0D68  00A2               	movwf	Lcd_Set_Cursor@a
  6400                           
  6401                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  6402  0D69  0322               	decf	Lcd_Set_Cursor@a,w
  6403  0D6A  1D03               	btfss	3,2
  6404  0D6B  2D8F               	goto	l3239
  6405                           
  6406                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  6407  0D6C  0877               	movf	Lcd_Set_Cursor@b,w
  6408  0D6D  3E7F               	addlw	127
  6409  0D6E  00A0               	movwf	??_Lcd_Set_Cursor
  6410  0D6F  0820               	movf	??_Lcd_Set_Cursor,w
  6411  0D70  00A5               	movwf	Lcd_Set_Cursor@temp
  6412                           
  6413                           ;./LCD4bits.h: 50:   z = temp>>4;
  6414  0D71  0825               	movf	Lcd_Set_Cursor@temp,w
  6415  0D72  00A0               	movwf	??_Lcd_Set_Cursor
  6416  0D73  3004               	movlw	4
  6417  0D74                     u3095:	
  6418  0D74  1003               	clrc
  6419  0D75  0CA0               	rrf	??_Lcd_Set_Cursor,f
  6420  0D76  3EFF               	addlw	-1
  6421  0D77  1D03               	skipz
  6422  0D78  2D74               	goto	u3095
  6423  0D79  0820               	movf	??_Lcd_Set_Cursor,w
  6424  0D7A  00A1               	movwf	??_Lcd_Set_Cursor+1
  6425  0D7B  0821               	movf	??_Lcd_Set_Cursor+1,w
  6426  0D7C  00A3               	movwf	Lcd_Set_Cursor@z
  6427                           
  6428                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  6429  0D7D  0825               	movf	Lcd_Set_Cursor@temp,w
  6430  0D7E  390F               	andlw	15
  6431  0D7F  00A0               	movwf	??_Lcd_Set_Cursor
  6432  0D80  0820               	movf	??_Lcd_Set_Cursor,w
  6433  0D81  00A4               	movwf	Lcd_Set_Cursor@y
  6434                           
  6435                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  6436  0D82  0823               	movf	Lcd_Set_Cursor@z,w
  6437  0D83  120A  158A  222A  120A  158A  	fcall	_Lcd_Cmd
  6438                           
  6439                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  6440  0D88  1283               	bcf	3,5	;RP0=0, select bank0
  6441  0D89  1303               	bcf	3,6	;RP1=0, select bank0
  6442  0D8A  0824               	movf	Lcd_Set_Cursor@y,w
  6443  0D8B  120A  158A  222A   	fcall	_Lcd_Cmd
  6444                           
  6445                           ;./LCD4bits.h: 54:  }
  6446  0D8E  0008               	return
  6447  0D8F                     l3239:	
  6448  0D8F  3002               	movlw	2
  6449  0D90  0622               	xorwf	Lcd_Set_Cursor@a,w
  6450  0D91  1D03               	btfss	3,2
  6451  0D92  0008               	return
  6452                           
  6453                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  6454  0D93  0877               	movf	Lcd_Set_Cursor@b,w
  6455  0D94  3EBF               	addlw	191
  6456  0D95  00A0               	movwf	??_Lcd_Set_Cursor
  6457  0D96  0820               	movf	??_Lcd_Set_Cursor,w
  6458  0D97  00A5               	movwf	Lcd_Set_Cursor@temp
  6459                           
  6460                           ;./LCD4bits.h: 58:   z = temp>>4;
  6461  0D98  0825               	movf	Lcd_Set_Cursor@temp,w
  6462  0D99  00A0               	movwf	??_Lcd_Set_Cursor
  6463  0D9A  3004               	movlw	4
  6464  0D9B                     u3115:	
  6465  0D9B  1003               	clrc
  6466  0D9C  0CA0               	rrf	??_Lcd_Set_Cursor,f
  6467  0D9D  3EFF               	addlw	-1
  6468  0D9E  1D03               	skipz
  6469  0D9F  2D9B               	goto	u3115
  6470  0DA0  0820               	movf	??_Lcd_Set_Cursor,w
  6471  0DA1  00A1               	movwf	??_Lcd_Set_Cursor+1
  6472  0DA2  0821               	movf	??_Lcd_Set_Cursor+1,w
  6473  0DA3  00A3               	movwf	Lcd_Set_Cursor@z
  6474                           
  6475                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  6476  0DA4  0825               	movf	Lcd_Set_Cursor@temp,w
  6477  0DA5  390F               	andlw	15
  6478  0DA6  00A0               	movwf	??_Lcd_Set_Cursor
  6479  0DA7  0820               	movf	??_Lcd_Set_Cursor,w
  6480  0DA8  00A4               	movwf	Lcd_Set_Cursor@y
  6481                           
  6482                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  6483  0DA9  0823               	movf	Lcd_Set_Cursor@z,w
  6484  0DAA  120A  158A  222A  120A  158A  	fcall	_Lcd_Cmd
  6485                           
  6486                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  6487  0DAF  1283               	bcf	3,5	;RP0=0, select bank0
  6488  0DB0  1303               	bcf	3,6	;RP1=0, select bank0
  6489  0DB1  0824               	movf	Lcd_Set_Cursor@y,w
  6490  0DB2  120A  158A  222A   	fcall	_Lcd_Cmd
  6491  0DB5  0008               	return
  6492  0DB6                     __end_of_Lcd_Set_Cursor:	
  6493                           
  6494                           	psect	text37
  6495  07F2                     __ptext37:	
  6496 ;; *************** function _Lcd_Clear *****************
  6497 ;; Defined at:
  6498 ;;		line 38 in file "./LCD4bits.h"
  6499 ;; Parameters:    Size  Location     Type
  6500 ;;		None
  6501 ;; Auto vars:     Size  Location     Type
  6502 ;;		None
  6503 ;; Return value:  Size  Location     Type
  6504 ;;                  1    wreg      void 
  6505 ;; Registers used:
  6506 ;;		wreg, status,2, status,0, pclath, cstack
  6507 ;; Tracked objects:
  6508 ;;		On entry : 0/0
  6509 ;;		On exit  : 0/0
  6510 ;;		Unchanged: 0/0
  6511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6512 ;;      Params:         0       0       0       0       0
  6513 ;;      Locals:         0       0       0       0       0
  6514 ;;      Temps:          0       0       0       0       0
  6515 ;;      Totals:         0       0       0       0       0
  6516 ;;Total ram usage:        0 bytes
  6517 ;; Hardware stack levels used:    1
  6518 ;; Hardware stack levels required when called:    3
  6519 ;; This function calls:
  6520 ;;		_Lcd_Cmd
  6521 ;; This function is called by:
  6522 ;;		_main
  6523 ;; This function uses a non-reentrant model
  6524 ;;
  6525                           
  6526                           
  6527                           ;psect for function _Lcd_Clear
  6528  07F2                     _Lcd_Clear:	
  6529                           
  6530                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  6531                           
  6532                           ;incstack = 0
  6533                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  6534  07F2  3000               	movlw	0
  6535  07F3  120A  158A  222A  120A  118A  	fcall	_Lcd_Cmd
  6536                           
  6537                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  6538  07F8  3001               	movlw	1
  6539  07F9  120A  158A  222A   	fcall	_Lcd_Cmd
  6540  07FC  0008               	return
  6541  07FD                     __end_of_Lcd_Clear:	
  6542                           
  6543                           	psect	text38
  6544  0A2A                     __ptext38:	
  6545 ;; *************** function _Lcd_Cmd *****************
  6546 ;; Defined at:
  6547 ;;		line 29 in file "./LCD4bits.h"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;  a               1    wreg     unsigned char 
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  a               1    6[COMMON] unsigned char 
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      void 
  6554 ;; Registers used:
  6555 ;;		wreg, status,2, status,0, pclath, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6561 ;;      Params:         0       0       0       0       0
  6562 ;;      Locals:         1       0       0       0       0
  6563 ;;      Temps:          2       0       0       0       0
  6564 ;;      Totals:         3       0       0       0       0
  6565 ;;Total ram usage:        3 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; Hardware stack levels required when called:    2
  6568 ;; This function calls:
  6569 ;;		_Lcd_Port
  6570 ;; This function is called by:
  6571 ;;		_Lcd_Clear
  6572 ;;		_Lcd_Set_Cursor
  6573 ;;		_Lcd_Init
  6574 ;;		_Lcd_Shift_Right
  6575 ;;		_Lcd_Shift_Left
  6576 ;; This function uses a non-reentrant model
  6577 ;;
  6578                           
  6579                           
  6580                           ;psect for function _Lcd_Cmd
  6581  0A2A                     _Lcd_Cmd:	
  6582                           
  6583                           ;incstack = 0
  6584                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  6585                           ;Lcd_Cmd@a stored from wreg
  6586  0A2A  00F6               	movwf	Lcd_Cmd@a
  6587                           
  6588                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  6589  0A2B  1283               	bcf	3,5	;RP0=0, select bank0
  6590  0A2C  1303               	bcf	3,6	;RP1=0, select bank0
  6591  0A2D  1206               	bcf	6,4	;volatile
  6592                           
  6593                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  6594  0A2E  0876               	movf	Lcd_Cmd@a,w
  6595  0A2F  120A  158A  2210  120A  158A  	fcall	_Lcd_Port
  6596                           
  6597                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  6598  0A34  1283               	bcf	3,5	;RP0=0, select bank0
  6599  0A35  1303               	bcf	3,6	;RP1=0, select bank0
  6600  0A36  1686               	bsf	6,5	;volatile
  6601                           
  6602                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  6603  0A37  300B               	movlw	11
  6604  0A38  00F5               	movwf	??_Lcd_Cmd+1
  6605  0A39  3062               	movlw	98
  6606  0A3A  00F4               	movwf	??_Lcd_Cmd
  6607  0A3B                     u3867:	
  6608  0A3B  0BF4               	decfsz	??_Lcd_Cmd,f
  6609  0A3C  2A3B               	goto	u3867
  6610  0A3D  0BF5               	decfsz	??_Lcd_Cmd+1,f
  6611  0A3E  2A3B               	goto	u3867
  6612  0A3F  0000               	nop
  6613                           
  6614                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  6615  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  6616  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  6617  0A42  1286               	bcf	6,5	;volatile
  6618  0A43  0008               	return
  6619  0A44                     __end_of_Lcd_Cmd:	
  6620                           
  6621                           	psect	text39
  6622  0A10                     __ptext39:	
  6623 ;; *************** function _Lcd_Port *****************
  6624 ;; Defined at:
  6625 ;;		line 7 in file "./LCD4bits.h"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;  a               1    wreg     unsigned char 
  6628 ;; Auto vars:     Size  Location     Type
  6629 ;;  a               1    3[COMMON] unsigned char 
  6630 ;; Return value:  Size  Location     Type
  6631 ;;                  1    wreg      void 
  6632 ;; Registers used:
  6633 ;;		wreg
  6634 ;; Tracked objects:
  6635 ;;		On entry : 0/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6639 ;;      Params:         0       0       0       0       0
  6640 ;;      Locals:         1       0       0       0       0
  6641 ;;      Temps:          0       0       0       0       0
  6642 ;;      Totals:         1       0       0       0       0
  6643 ;;Total ram usage:        1 bytes
  6644 ;; Hardware stack levels used:    1
  6645 ;; Hardware stack levels required when called:    1
  6646 ;; This function calls:
  6647 ;;		Nothing
  6648 ;; This function is called by:
  6649 ;;		_Lcd_Cmd
  6650 ;;		_Lcd_Init
  6651 ;;		_Lcd_Write_Char
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           
  6656                           ;psect for function _Lcd_Port
  6657  0A10                     _Lcd_Port:	
  6658                           
  6659                           ;incstack = 0
  6660                           ; Regs used in _Lcd_Port: [wreg]
  6661                           ;Lcd_Port@a stored from wreg
  6662  0A10  00F3               	movwf	Lcd_Port@a
  6663                           
  6664                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  6665  0A11  1C73               	btfss	Lcd_Port@a,0
  6666  0A12  2A17               	goto	l152
  6667                           
  6668                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  6669  0A13  1283               	bcf	3,5	;RP0=0, select bank0
  6670  0A14  1303               	bcf	3,6	;RP1=0, select bank0
  6671  0A15  1406               	bsf	6,0	;volatile
  6672  0A16  2A1A               	goto	l153
  6673  0A17                     l152:	
  6674                           ;./LCD4bits.h: 11:  else
  6675                           
  6676                           
  6677                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  6678  0A17  1283               	bcf	3,5	;RP0=0, select bank0
  6679  0A18  1303               	bcf	3,6	;RP1=0, select bank0
  6680  0A19  1006               	bcf	6,0	;volatile
  6681  0A1A                     l153:	
  6682                           
  6683                           ;./LCD4bits.h: 14:  if(a & 2)
  6684  0A1A  1CF3               	btfss	Lcd_Port@a,1
  6685  0A1B  2A1E               	goto	l154
  6686                           
  6687                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  6688  0A1C  1486               	bsf	6,1	;volatile
  6689  0A1D  2A1F               	goto	l155
  6690  0A1E                     l154:	
  6691                           ;./LCD4bits.h: 16:  else
  6692                           
  6693                           
  6694                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  6695  0A1E  1086               	bcf	6,1	;volatile
  6696  0A1F                     l155:	
  6697                           
  6698                           ;./LCD4bits.h: 19:  if(a & 4)
  6699  0A1F  1D73               	btfss	Lcd_Port@a,2
  6700  0A20  2A23               	goto	l156
  6701                           
  6702                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  6703  0A21  1506               	bsf	6,2	;volatile
  6704  0A22  2A24               	goto	l157
  6705  0A23                     l156:	
  6706                           ;./LCD4bits.h: 21:  else
  6707                           
  6708                           
  6709                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  6710  0A23  1106               	bcf	6,2	;volatile
  6711  0A24                     l157:	
  6712                           
  6713                           ;./LCD4bits.h: 24:  if(a & 8)
  6714  0A24  1DF3               	btfss	Lcd_Port@a,3
  6715  0A25  2A28               	goto	l158
  6716                           
  6717                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  6718  0A26  1586               	bsf	6,3	;volatile
  6719  0A27  0008               	return
  6720  0A28                     l158:	
  6721                           ;./LCD4bits.h: 26:  else
  6722                           
  6723                           
  6724                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  6725  0A28  1186               	bcf	6,3	;volatile
  6726  0A29  0008               	return
  6727  0A2A                     __end_of_Lcd_Port:	
  6728                           
  6729                           	psect	text40
  6730  0A7A                     __ptext40:	
  6731 ;; *************** function _manual_pwm *****************
  6732 ;; Defined at:
  6733 ;;		line 59 in file "mainMaster.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;		None
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;		None
  6738 ;; Return value:  Size  Location     Type
  6739 ;;                  1    wreg      void 
  6740 ;; Registers used:
  6741 ;;		wreg, status,2, status,0
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6747 ;;      Params:         0       0       0       0       0
  6748 ;;      Locals:         0       0       0       0       0
  6749 ;;      Temps:          3       0       0       0       0
  6750 ;;      Totals:         3       0       0       0       0
  6751 ;;Total ram usage:        3 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; This function calls:
  6754 ;;		Nothing
  6755 ;; This function is called by:
  6756 ;;		Interrupt level 1
  6757 ;; This function uses a non-reentrant model
  6758 ;;
  6759                           
  6760                           
  6761                           ;psect for function _manual_pwm
  6762  0A7A                     _manual_pwm:	
  6763                           
  6764                           ;mainMaster.c: 60:     if (INTCONbits.T0IF == 1){
  6765  0A7A  1D0B               	btfss	11,2	;volatile
  6766  0A7B  2A92               	goto	i1l297
  6767                           
  6768                           ;mainMaster.c: 62:         cont++;
  6769  0A7C  3001               	movlw	1
  6770  0A7D  00F0               	movwf	??_manual_pwm
  6771  0A7E  0870               	movf	??_manual_pwm,w
  6772  0A7F  1283               	bcf	3,5	;RP0=0, select bank0
  6773  0A80  1303               	bcf	3,6	;RP1=0, select bank0
  6774  0A81  07CB               	addwf	_cont,f
  6775                           
  6776                           ;mainMaster.c: 63:             if(cont < 200){
  6777  0A82  30C8               	movlw	200
  6778  0A83  024B               	subwf	_cont,w
  6779  0A84  1803               	skipnc
  6780  0A85  2A8E               	goto	i1l2669
  6781                           
  6782                           ;mainMaster.c: 64:                 if(cont < val){
  6783  0A86  084A               	movf	_val,w
  6784  0A87  024B               	subwf	_cont,w
  6785  0A88  1803               	skipnc
  6786  0A89  2A8C               	goto	i1l294
  6787                           
  6788                           ;mainMaster.c: 65:                     PORTAbits.RA1 = 1;
  6789  0A8A  1485               	bsf	5,1	;volatile
  6790                           
  6791                           ;mainMaster.c: 66:                 }else{
  6792  0A8B  2A8F               	goto	i1l2671
  6793  0A8C                     i1l294:	
  6794                           
  6795                           ;mainMaster.c: 67:                     PORTAbits.RA1 = 0;
  6796  0A8C  1085               	bcf	5,1	;volatile
  6797  0A8D  2A8F               	goto	i1l2671
  6798  0A8E                     i1l2669:	
  6799                           
  6800                           ;mainMaster.c: 70:                 cont = 0;
  6801  0A8E  01CB               	clrf	_cont
  6802  0A8F                     i1l2671:	
  6803                           
  6804                           ;mainMaster.c: 72:             TMR0 = 56;
  6805  0A8F  3038               	movlw	56
  6806  0A90  0081               	movwf	1	;volatile
  6807                           
  6808                           ;mainMaster.c: 73:             INTCONbits.T0IF = 0;
  6809  0A91  110B               	bcf	11,2	;volatile
  6810  0A92                     i1l297:	
  6811  0A92  0872               	movf	??_manual_pwm+2,w
  6812  0A93  008A               	movwf	10
  6813  0A94  0E71               	swapf	(??_manual_pwm+1)^(0+4294967168),w
  6814  0A95  0083               	movwf	3
  6815  0A96  0EFE               	swapf	126,f
  6816  0A97  0E7E               	swapf	126,w
  6817  0A98  0009               	retfie
  6818  0A99                     __end_of_manual_pwm:	
  6819  007E                     btemp	set	126	;btemp
  6820  007E                     wtemp0	set	126
  6821                           
  6822                           	psect	intentry
  6823  0004                     __pintentry:	
  6824                           ;incstack = 0
  6825                           ; Regs used in _manual_pwm: [wreg+status,2+status,0]
  6826                           
  6827  0004                     interrupt_function:	
  6828  007E                     saved_w	set	btemp
  6829  0004  00FE               	movwf	btemp
  6830  0005  0E03               	swapf	3,w
  6831  0006  00F1               	movwf	??_manual_pwm+1
  6832  0007  080A               	movf	10,w
  6833  0008  00F2               	movwf	??_manual_pwm+2
  6834  0009  120A  158A  2A7A   	ljmp	_manual_pwm


Data Sizes:
    Strings     166
    Constant    10
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     37      69
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_9(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_22(CODE[4]), STR_21(CODE[5]), STR_20(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), temp(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_temp@temp_string	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_time@time_string	PTR unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), 

    day2	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[10]), 
		 -> STR_1(CODE[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 12
		 -> NULL(NULL[0]), STR_19(CODE[6]), STR_18(CODE[7]), STR_17(CODE[7]), 
		 -> STR_16(CODE[7]), STR_15(CODE[8]), STR_14(CODE[8]), STR_13(CODE[9]), 
		 -> STR_12(CODE[9]), STR_11(CODE[12]), STR_10(CODE[12]), STR_8(CODE[10]), 
		 -> STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), 
		 -> STR_3(CODE[10]), STR_2(CODE[10]), STR_1(CODE[10]), time(BANK0[6]), 
		 -> temp(BANK0[6]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_Char
    _main->___awdiv
    _main->___awmod
    _main->_get_IR
    _main->_get_PIR
    _main->_get_day
    _main->_get_hall
    _main->_get_tripwire
    _main->_strcmp
    _main->_write_RTC
    _write_RTC->_I2C_Master_Write
    _setup->_I2C_Master_Init
    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _open_door->_I2C_Master_Write
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _close_door->_I2C_Master_Write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _manual_pwm in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_UART_Init
    _UART_Init->___aldiv
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _get_temp->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read

Critical Paths under _manual_pwm in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _manual_pwm in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _manual_pwm in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _manual_pwm in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   36944
                                             31 BANK0      6     6      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                      _UART_TX_Empty
                         _UART_Write
                            ___awdiv
                            ___awmod
                             ___bmul
                         _close_door
                             _get_IR
                            _get_PIR
                            _get_day
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                          _open_door
                              _setup
                             _strcmp
                          _write_RTC
 ---------------------------------------------------------------------------------
 (1) _write_RTC                                            5     3      2    2284
                                              5 COMMON     3     1      2
                                              0 BANK0      2     2      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     259
                                              3 COMMON     5     3      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1880
                    _I2C_Master_Init
                           _Lcd_Init
                          _UART_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4    1118
                                              4 COMMON     2     2      0
                                             14 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     805
                                              3 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              0 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     542
                                              4 COMMON     4     4      0
                                             13 BANK0      4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     421
                                              3 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _open_door                                            0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                             5     5      0    3238
                                              2 BANK0      5     5      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             9     9      0    5666
                                             22 BANK0      9     9      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1806
                                              9 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     320
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     875
                                              3 COMMON     4     2      2
                                              0 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _close_door                                           0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2011
                                              3 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     793
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     604
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Empty                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1658
                                              0 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              4 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1310
                                              7 COMMON     1     0      1
                                              0 BANK0      6     6      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              4 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _manual_pwm                                           3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_TX_Empty
   _UART_Write
   ___awdiv
   ___awmod
   ___bmul
   _close_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_day
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _open_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
     _initOscilador
   _strcmp
   _write_RTC
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _manual_pwm (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      50       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      45       5       86.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      50      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Mar 08 22:40:54 2019

                                _i 0053                                  _j 0052  
                                _k 0045                                  pc 0002  
                   ___bmul@product 0075                        __CFG_CP$OFF 0000  
                      get_hall@key 0022                                 _IR 0055  
                     ___awdiv@sign 0021                                 fsr 0004  
                              l230 09F6                                l126 09EC  
                              l303 00A0                                l152 0A17  
                              l144 05F4                                l153 0A1A  
                              l145 05F7                                l154 0A1E  
                              l155 0A1F                                l331 020E  
                              l156 0A23                                l332 0211  
                              l308 0084                                l157 0A24  
                              l158 0A28                                l361 0385  
                              l338 022F                                l195 0E5A  
                              l355 036D                                l364 0391  
                              l358 0379                                l585 0775  
                              _GIE 005F                       __CFG_CPD$OFF 0000  
                              _PIR 0056                      ?_get_tripwire 0070  
                              _min 0048                                _val 004A  
                              fsr0 0004                                indf 0000  
                     ___awmod@sign 0021                       __CFG_LVP$OFF 0000  
                             l3003 0EC9                               l3013 0F01  
                             l3005 0ED9                               l3031 0786  
                             l2161 0B7D                               l3017 0F0E  
                             l3041 07A6                               l2163 0B8B  
                             l2171 0BA4                               l3203 049E  
                             l2251 0E09                               l3221 04F4  
                             l3053 07DB                               l2261 0E26  
                             l2253 0E0E                               l3071 0C5E  
                             l2167 0B99                               l3039 0796  
                             l2263 0E2C                               l2255 0E14  
                             l2271 0E38                               l2601 0EAA  
                             l3073 0C6C                               l3217 04B1  
                             l3209 04AD                               l3057 07E9  
                             l3049 07CE                               l2265 0E33  
                             l2257 0E1A                               l3403 0D25  
                             l3083 0C8D                               l3219 0426  
                             l2371 0B35                               l2267 0E33  
                             l2259 0E20                               l2605 0EB2  
                             l3421 0D4E                               l2381 0A07  
                             l3181 0464                               l2373 0B3D  
                             l3325 0740                               l3149 05B7  
                             l3239 0D8F                               l3255 0C96  
                             l3415 0D32                               l3407 0D2C  
                             l3079 0C82                               l3191 047B  
                             l3175 0446                               l3417 0D40  
                             l3425 0D59                               l2377 0A01  
                             l2369 0B2A                               l3441 002B  
                             l2573 0E68                               l3429 0D61  
                             l3197 047D                               l2591 0E89  
                             l3615 02B4                               l3607 0292  
                             l3551 01C7                               l3543 01BB  
                             l3535 01B2                               l3471 0087  
                             l3385 0B5A                               l3633 02F1  
                             l3625 02D1                               l3617 02BE  
                             l3561 01D1                               l3553 01C9  
                             l2579 0E73                               l3387 0B4D  
                             l3635 02FB                               l3555 01CB  
                             l3547 01C3                               l3483 0097  
                             l2597 0E9F                               l2589 0E7B  
                             l3389 0B6F                               l3557 01CD  
                             l3549 01C5                               l3565 01D6  
                             l3469 007B                               l3655 039D  
                             l3583 0226                               l3751 01DE  
                             l3559 01CF                               l3567 01F5  
                             l3487 00A2                               l3753 0E40  
                             l3681 03AC                               l3585 0232  
                             l3755 0459                               l3587 0233  
                             l3599 0282                               STR_1 063C  
                             STR_2 0650                        get_time@min 0025  
                             STR_3 0678                               STR_4 065A  
                             STR_5 066E                               STR_6 0646  
                             STR_7 0664                               STR_8 0632  
                             STR_9 06B1                               _BRGH 04C2  
                             _CREN 00C4                               u2115 0E8A  
                             u2125 0E96                               u2135 0EA0  
                             u3115 0D9B                               u3035 0494  
                             u2095 0E7E                               u3155 0718  
                             u1725 0BF2                               u3245 0D35  
                             u3095 0D74                               u1655 0B80  
                             u3175 0FC6                               u3415 0208  
                             u3265 0D46                               u3185 0FE5  
                             u2705 0EDB                               u3275 0D4F  
                             u1675 0B91                               u2715 0EF0  
                             u1685 0B9A                               u2725 0F02  
                             u2805 07BD                               u2815 07CF  
                             u2915 0BBB                               u3707 0108  
                             _PEIE 005E                               u2685 0ECD  
                             u3645 03C3                               u3717 011A  
                             u2855 0C61                               u2775 079A  
                             u2951 0534                               u2935 0504  
                             u3655 03F4                               u3807 03A5  
                             u3727 012C                               u2952 0535  
                             u3817 0F23                               u2953 053A  
                             u2945 051D                               u3737 013E  
                             u2954 053B                               u2875 0C6D  
                             u3827 0F33                               u2795 07A8  
                             u2955 0540                               u3747 0150  
                             u3667 00C0                               u2956 0541  
                             _RCEN 048B                               _RCIF 0065  
                             u2885 0C79                               u3837 0F43  
                             u3757 0162                               u3677 00D2  
                             u3847 0C02                               u2895 0C83  
                             u2991 0594                               u2975 0564  
                             u3767 0172                               u3687 00E4  
                             u2992 0595                               u3857 0C13  
                             u2993 059A                               u2985 057D  
                             u3777 0184                               u3697 00F6  
                             u2994 059B                               u3867 0A3B  
                             u2995 05A0                               u3787 0196  
                             u2996 05A1                               u3797 01A8  
                             _TMR0 0001                               _SPEN 00C7  
                             _TRMT 04C1                               _TXEN 04C5  
                             _SYNC 04C4                       __CFG_WRT$OFF 0000  
                             _day1 0054                               _day2 0058  
                             _bank 004C                  ?_Lcd_Write_String 0020  
 __end_of_I2C_Master_RepeatedStart 09DC                               _cont 004B  
                             _door 007A                               _main 001D  
                             _hour 0049                               _temp 0059  
                             _time 005F                               _trip 0057  
                             btemp 007E                               start 000C  
               ??_Lcd_Write_String 0022                      __CFG_IESO$OFF 0000  
                  __end_of_Lcd_Cmd 0A44                  ___bmul@multiplier 0076  
                    __CFG_MCLRE$ON 0000                get_temp@temp_string 003D  
                 ?_I2C_Master_Init 002D                   ?_I2C_Master_Read 0073  
                 ?_I2C_Master_Wait 0070                   ?_I2C_Master_Stop 0070  
                  __end_of___aldiv 07F2                              ?_main 0070  
                  __end_of___awdiv 0EB7                              STR_10 061A  
                            STR_11 0626                              STR_20 06BD  
                            STR_12 0682                              STR_21 06B7  
                            STR_13 068B                              STR_22 06BC  
                            STR_14 0694                              STR_15 069C  
                            STR_16 0695                              STR_17 069D  
                    __CFG_WDTE$OFF 0000                              STR_18 06A4  
                            STR_19 06AB                    __end_of___awmod 0D66  
                     get_time@hour 0024                              _ANSEL 0188  
                  __end_of___lldiv 0F17                     ??_get_tripwire 0077  
                  ___awdiv@divisor 0073                    __end_of___lwdiv 0C92  
                  __end_of___lwmod 0BA9                              i1l294 0A8C  
                            i1l297 0A92                    ___awdiv@counter 0020  
                            _RCREG 001A                              _SPBRG 0099  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007            __size_of_Lcd_Set_Cursor 0050  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087                              _TRISD 0088  
                            _SSPIE 0463                              _SSPIF 0063  
                            _TXREG 0019                    __end_of_get_PIR 0ADF  
                   __CFG_FCMEN$OFF 0000                    __end_of_get_day 0C54  
                      ?_UART_Write 0070                 __size_of_UART_Init 00D8  
                            _alarm 004D                    __end_of_dpowers 061A  
                            _setup 0DB6                              _state 0079  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 04F9                   __end_of_Lcd_Init 0F77  
                 __end_of_Lcd_Port 0A2A                    __initialization 000F  
                     __end_of_main 041F             __size_of_initOscilador 0055  
                           ??_main 003F                 __size_of_Lcd_Clear 000B  
                ?_I2C_Master_Start 0070                  ?_I2C_Master_Write 0073  
               ??_I2C_Master_Start 0073                 ??_I2C_Master_Write 0075  
                 ___awdiv@dividend 0075                             ?_setup 0070  
                           _ANSELH 0189                             i1l2671 0A8F  
                           i1l2669 0A8E                          ??_Lcd_Cmd 0074  
          __size_of_Lcd_Write_Char 0039                             _SSPADD 0093  
                           _TRISC3 043B                             _TRISC4 043C  
                           _TRISC6 043E                             _TRISC7 043F  
                           _SSPCON 0014                             _SSPBUF 0013  
                   __CFG_PWRTE$OFF 0000           _I2C_Master_RepeatedStart 09D5  
                 __end_of_get_hall 0B02                  __end_of_UART_Init 05D1  
                 __end_of_get_temp 0763                   __end_of_get_time 1000  
                           ___bmul 09FF                __size_of_UART_Write 000A  
                        ??___aldiv 0073                          ??___awdiv 0077  
                        ??___awmod 0077                             _change 0051  
                        ??___lldiv 0073                             _get_IR 0A99  
                        ??___lwdiv 0077                          ??___lwmod 0027  
                 ___awdiv@quotient 0022                             _newmin 0047  
                  ___awmod@divisor 0073                          ??_get_PIR 0077  
                  ___awmod@counter 0020              __end_of_UART_TX_Empty 09C7  
                        ??_get_day 0077                             _strcat 0B25  
                           _strcmp 0B49                             saved_w 007E  
                        ??_sprintf 002C                    Lcd_Set_Cursor@a 0022  
                  Lcd_Set_Cursor@b 0077                    Lcd_Set_Cursor@y 0024  
                  Lcd_Set_Cursor@z 0023            __end_of__initialization 0019  
                    _initOscilador 0E07                  __end_of_Lcd_Clear 07FD  
             __end_of_get_tripwire 0B25                ___bmul@multiplicand 0073  
                   __pcstackCOMMON 0070                      __end_of_setup 0E07  
                   _Lcd_Set_Cursor 0D66                     _OPTION_REGbits 0081  
                        ?_Lcd_Init 0070                          ?_Lcd_Port 0070  
                          ??_setup 0078                         __pbssBANK0 0045  
                   ?_initOscilador 0070                         __pmaintext 001D  
                          ?___bmul 0073                            ?_get_IR 0070  
                       __pintentry 0004                 __size_of_open_door 001B  
        __size_of_Lcd_Write_String 0041             __end_of_Lcd_Set_Cursor 0DB6  
                          ?_strcat 0073                            ?_strcmp 0073  
                       _close_door 0A44                       ??_UART_Write 0073  
                       ??_Lcd_Init 0020                         ??_Lcd_Port 0073  
                          _SSPCON2 0091                          ?_get_hall 0070  
                          _SSPSTAT 0094                          ?_get_temp 0070  
                        ?_get_time 0070                         __stringtab 0600  
              initOscilador@option 0075                     _Lcd_Write_Char 0BE1  
                          _Lcd_Cmd 0A2A                 __size_of_write_RTC 0046  
                       _manual_pwm 0A7A                            ___aldiv 0763  
                  __size_of___bmul 0011                            ___awdiv 0E5C  
                          ___awmod 0D19                            ___lldiv 0EB7  
               __end_of_UART_Write 09FF                            ___lwdiv 0C54  
                          ___lwmod 0B75                    __size_of_get_IR 0023  
                          _change1 0050                            _change2 004F  
                          _change3 004E                    ?_Lcd_Set_Cursor 0077  
                          _get_PIR 0ABC                            __ptext1 0CD3  
                          __ptext2 0B49                            __ptext3 0DB6  
                          __ptext4 0E07                            __ptext5 04F9  
                          __ptext6 0763                            __ptext7 0F17  
                          __ptext8 0BA9                            __ptext9 0EB7  
                          _get_day 0C1A                get_time@time_string 0026  
                  __size_of_strcat 0024                    __size_of_strcmp 002C  
                          _dpowers 0610                   ___awmod@dividend 0075  
                 ___aldiv@dividend 0024                            _newhour 0078  
         __size_of_I2C_Master_Init 0038           __size_of_I2C_Master_Read 002E  
         __size_of_I2C_Master_Wait 0009           __size_of_I2C_Master_Stop 0007  
                  ??_initOscilador 0073                         ??_get_hall 0077  
                          _sprintf 041F                            clrloop0 09E5  
           __end_of_Lcd_Write_Char 0C1A                         ??_get_temp 0036  
                       ??_get_time 0022               end_of_initialization 0019  
            __size_of_get_tripwire 0023         ??_I2C_Master_RepeatedStart 0073  
                __end_of_open_door 0A7A                         get_PIR@PIR 0022  
        __size_of_I2C_Master_Start 0007          __size_of_I2C_Master_Write 0008  
                  ___lldiv@divisor 0020                    ___lldiv@counter 002C  
                        _RCSTAbits 0018                   ___aldiv@quotient 002A  
                 I2C_Master_Init@c 002D                   I2C_Master_Read@a 0073  
                        Lcd_Port@a 0073                       write_RTC@day 0076  
                          strcmp@r 0020                          _UART_Init 04F9  
                        _PORTAbits 0005                          _PORTBbits 0006  
                        _PORTCbits 0007                          _PORTDbits 0008  
                   UART_Write@data 0073                  __end_of_write_RTC 0D19  
                     _get_tripwire 0B02                        ?_close_door 0070  
                        _TRISCbits 0087                    ?_Lcd_Write_Char 0070  
                Lcd_Write_String@a 0020                  Lcd_Write_String@i 0025  
                        _Lcd_Clear 07F2                        ?_manual_pwm 0070  
                   __end_of___bmul 0A10                   _Lcd_Write_String 0C92  
                       ?_UART_Init 002E                     __end_of_get_IR 0ABC  
                   __end_of_strcat 0B49                     __end_of_strcmp 0B75  
              start_initialization 000F                  __size_of_Lcd_Init 0060  
                __size_of_Lcd_Port 001A                  ??_I2C_Master_Init 0074  
                ??_I2C_Master_Read 0075                  ??_I2C_Master_Wait 0073  
                ??_I2C_Master_Stop 0073             __size_of_UART_TX_Empty 0006  
         __CFG_FOSC$INTRC_NOCLKOUT 0000                         ?_Lcd_Clear 0070  
                         ??___bmul 0074                __size_of_close_door 001B  
                         ??_get_IR 0077                    Lcd_Write_Char@a 0077  
                  Lcd_Write_Char@y 0076                           ??_strcat 0074  
                         ??_strcmp 0075                   write_RTC@minutes 0075  
                      __pbssCOMMON 0078                          ___latbits 0002  
                    __pcstackBANK0 0020                __size_of_manual_pwm 001F  
                __size_of_get_hall 0023                           ?_Lcd_Cmd 0070  
                __size_of_get_temp 00A3                  __size_of_get_time 0089  
                      sprintf@flag 0030                        sprintf@prec 0031  
                 _I2C_Master_Start 09C7                   _I2C_Master_Write 09DC  
                 ___lwdiv@dividend 0075                   ??_Lcd_Set_Cursor 0020  
                  get_temp@decimal 0039                           ?___aldiv 0020  
                         ?___awdiv 0073                           ?___awmod 0073  
                         ?___lldiv 0020                           ?___lwdiv 0073  
                         ?___lwmod 0023                        ??_UART_Init 0032  
                         ?_get_PIR 0070                          __pstrings 0600  
                         ?_get_day 0070                    get_temp@tempLSB 003E  
                  get_temp@tempMSB 003C                      _UART_TX_Empty 09C1  
                 ___lwdiv@quotient 0021                           ?_sprintf 0029  
                       UART_Init@x 0074                     __size_of_setup 0051  
                  ___aldiv@divisor 0020                  interrupt_function 0004  
                  ___aldiv@counter 0028                          clear_ram0 09E4  
                        _open_door 0A5F                           Lcd_Cmd@a 0076  
                      ??_Lcd_Clear 0077                  UART_Init@baudrate 002E  
                      __stringbase 060F                     ?_UART_TX_Empty 0070  
                 ??_Lcd_Write_Char 0074                       ??_close_door 0075  
                         _Lcd_Init 0F17                           _Lcd_Port 0A10  
                        _write_RTC 0CD3                I2C_Master_Read@temp 0020  
            __end_of_initOscilador 0E5C           __end_of_Lcd_Write_String 0CD3  
                 __size_of_Lcd_Cmd 001A                         ?_open_door 0070  
                     ??_manual_pwm 0070                 __end_of_close_door 0A5F  
                 __size_of___aldiv 008F  __size_of_I2C_Master_RepeatedStart 0007  
                 __size_of___awdiv 005B                   __size_of___awmod 004D  
        ?_I2C_Master_RepeatedStart 0070                   __size_of___lldiv 0060  
                 __size_of___lwdiv 003E                   __size_of___lwmod 0034  
               __end_of__stringtab 0610                   __size_of_get_PIR 0023  
                 __size_of_get_day 003A                         sprintf@val 0032  
                  _I2C_Master_Init 0BA9                    _I2C_Master_Read 05D1  
                  _I2C_Master_Wait 09EC                         strcat@from 0073  
                  _I2C_Master_Stop 09CE                    ___lwdiv@divisor 0073  
                  ___lwdiv@counter 0020                           __ptext10 0A5F  
                         __ptext11 0B02                           __ptext20 0C1A  
                         __ptext12 0F77                           __ptext21 09D5  
                         __ptext13 06C0                           __ptext30 0D19  
                         __ptext22 0ABC                           __ptext14 0B25  
                         __ptext31 0E5C                           __ptext23 0A99  
                         __ptext15 041F                           __ptext40 0A7A  
                         __ptext32 09F5                           __ptext24 05D1  
                         __ptext16 0B75                           __ptext33 09C1  
                         __ptext25 0A44                           __ptext17 0C54  
                         __ptext34 0C92                           __ptext26 09DC  
                         __ptext18 09FF                           __ptext35 0BE1  
                         __ptext27 09CE                           __ptext19 0ADF  
                         __ptext36 0D66                           __ptext28 09C7  
                         __ptext37 07F2                           __ptext29 09EC  
                         __ptext38 0A2A                           __ptext39 0A10  
                       ?_write_RTC 0075                  __CFG_BOR4V$BOR40V 0000  
                         _get_hall 0ADF                           _get_temp 06C0  
                         _get_time 0F77                   __size_of_sprintf 00DA  
               __end_of_manual_pwm 0A99                      __size_of_main 0402  
                         get_IR@IR 0022                           get_day@d 0022  
                  ??_UART_TX_Empty 0073           __end_of_I2C_Master_Start 09CE  
         __end_of_I2C_Master_Write 09E4                         _INTCONbits 000B  
               Lcd_Write_Char@temp 0075                           intlevel1 0000  
                        sprintf@ap 002F                          sprintf@sp 0034  
                 ___lwmod@dividend 0025                   ___lldiv@dividend 0024  
                      ??_open_door 0075                          stringcode 060A  
                       _OSCCONbits 008F            __end_of_I2C_Master_Init 0BE1  
          __end_of_I2C_Master_Read 05FF            __end_of_I2C_Master_Wait 09F5  
          __end_of_I2C_Master_Stop 09D5                 Lcd_Set_Cursor@temp 0025  
                    write_RTC@hour 0077                           sprintf@c 0035  
                         sprintf@f 0029                           strcat@cp 0076  
                         strcat@to 0075                           strcmp@s1 0021  
                         strcmp@s2 0073                   ___lldiv@quotient 0028  
                I2C_Master_Write@d 0073                    ___lwmod@divisor 0023  
                  ___lwmod@counter 0028                           stringdir 060A  
                 get_tripwire@trip 0022                           stringtab 0600  
                     ___aldiv@sign 0029                         _UART_Write 09F5  
                      _SSPCON2bits 0091                        ??_write_RTC 0020  
                       _SSPCONbits 0014  



Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Mar 09 22:02:09 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	intentry,global,class=CODE,delta=2
    58                           	dabs	1,0x7E,2
    59  0000                     
    60                           ; Version 2.05
    61                           ; Generated 20/12/2018 GMT
    62                           ; 
    63                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC16F887 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000D                     	;# 
   108  000E                     	;# 
   109  000E                     	;# 
   110  000F                     	;# 
   111  0010                     	;# 
   112  0011                     	;# 
   113  0012                     	;# 
   114  0013                     	;# 
   115  0014                     	;# 
   116  0015                     	;# 
   117  0015                     	;# 
   118  0016                     	;# 
   119  0017                     	;# 
   120  0018                     	;# 
   121  0019                     	;# 
   122  001A                     	;# 
   123  001B                     	;# 
   124  001B                     	;# 
   125  001C                     	;# 
   126  001D                     	;# 
   127  001E                     	;# 
   128  001F                     	;# 
   129  0081                     	;# 
   130  0085                     	;# 
   131  0086                     	;# 
   132  0087                     	;# 
   133  0088                     	;# 
   134  0089                     	;# 
   135  008C                     	;# 
   136  008D                     	;# 
   137  008E                     	;# 
   138  008F                     	;# 
   139  0090                     	;# 
   140  0091                     	;# 
   141  0092                     	;# 
   142  0093                     	;# 
   143  0093                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0097                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009A                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  0105                     	;# 
   158  0107                     	;# 
   159  0108                     	;# 
   160  0109                     	;# 
   161  010C                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  0185                     	;# 
   167  0187                     	;# 
   168  0188                     	;# 
   169  0189                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  0007                     	;# 
   180  0008                     	;# 
   181  0009                     	;# 
   182  000A                     	;# 
   183  000B                     	;# 
   184  000C                     	;# 
   185  000D                     	;# 
   186  000E                     	;# 
   187  000E                     	;# 
   188  000F                     	;# 
   189  0010                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0015                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0017                     	;# 
   198  0018                     	;# 
   199  0019                     	;# 
   200  001A                     	;# 
   201  001B                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  001D                     	;# 
   205  001E                     	;# 
   206  001F                     	;# 
   207  0081                     	;# 
   208  0085                     	;# 
   209  0086                     	;# 
   210  0087                     	;# 
   211  0088                     	;# 
   212  0089                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  008F                     	;# 
   217  0090                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0093                     	;# 
   222  0093                     	;# 
   223  0094                     	;# 
   224  0095                     	;# 
   225  0096                     	;# 
   226  0097                     	;# 
   227  0098                     	;# 
   228  0099                     	;# 
   229  009A                     	;# 
   230  009B                     	;# 
   231  009C                     	;# 
   232  009D                     	;# 
   233  009E                     	;# 
   234  009F                     	;# 
   235  0105                     	;# 
   236  0107                     	;# 
   237  0108                     	;# 
   238  0109                     	;# 
   239  010C                     	;# 
   240  010C                     	;# 
   241  010D                     	;# 
   242  010E                     	;# 
   243  010F                     	;# 
   244  0185                     	;# 
   245  0187                     	;# 
   246  0188                     	;# 
   247  0189                     	;# 
   248  018C                     	;# 
   249  018D                     	;# 
   250                           
   251                           	psect	idataBANK0
   252  1687                     __pidataBANK0:	
   253                           
   254                           ;initializer for _password
   255  1687  3401               	retlw	1
   256  1688  3405               	retlw	5
   257  1689  3401               	retlw	1
   258  168A  3400               	retlw	0
   259  168B  3403               	retlw	3
   260                           
   261                           	psect	stringtext
   262  0700                     __pstringtext:	
   263  0700                     stringtab:	
   264  0700                     __stringtab:	
   265                           
   266                           ;	String table - string pointers are 2 bytes each
   267  0700  1BFF               	btfsc	btemp+1,7
   268  0701  2F0A               	ljmp	stringcode
   269  0702  1383               	bcf	3,7
   270  0703  187F               	btfsc	btemp+1,0
   271  0704  1783               	bsf	3,7
   272  0705  0800               	movf	0,w
   273  0706  0A84               	incf	4,f
   274  0707  1903               	skipnz
   275  0708  0AFF               	incf	btemp+1,f
   276  0709  0008               	return
   277  070A                     stringcode:	
   278  070A  087F               	movf	btemp+1,w
   279  070B  397F               	andlw	127
   280  070C  008A               	movwf	10
   281  070D  0804               	movf	4,w
   282  070E  0A84               	incf	4,f
   283  070F  1903               	skipnz
   284  0710  0AFF               	incf	btemp+1,f
   285  0711  0082               	movwf	2
   286  0712                     __stringbase:	
   287  0712                     __end_of__stringtab:	
   288  0712                     _dpowers:	
   289  0712  3401               	retlw	1
   290  0713  3400               	retlw	0
   291  0714  340A               	retlw	10
   292  0715  3400               	retlw	0
   293  0716  3464               	retlw	100
   294  0717  3400               	retlw	0
   295  0718  34E8               	retlw	232
   296  0719  3403               	retlw	3
   297  071A  3410               	retlw	16
   298  071B  3427               	retlw	39
   299  071C                     __end_of_dpowers:	
   300  0009                     _PORTE	set	9
   301  0007                     _PORTC	set	7
   302  0005                     _PORTA	set	5
   303  0006                     _PORTB	set	6
   304  0009                     _PORTEbits	set	9
   305  0008                     _PORTD	set	8
   306  0007                     _PORTCbits	set	7
   307  0018                     _RCSTAbits	set	24
   308  0014                     _SSPCONbits	set	20
   309  0008                     _PORTDbits	set	8
   310  0001                     _TMR0	set	1
   311  0005                     _PORTAbits	set	5
   312  000B                     _INTCONbits	set	11
   313  0019                     _TXREG	set	25
   314  001A                     _RCREG	set	26
   315  0006                     _PORTBbits	set	6
   316  0013                     _SSPBUF	set	19
   317  0014                     _SSPCON	set	20
   318  0065                     _RCIF	set	101
   319  00C4                     _CREN	set	196
   320  00C7                     _SPEN	set	199
   321  0063                     _SSPIF	set	99
   322  005E                     _PEIE	set	94
   323  005F                     _GIE	set	95
   324  0081                     _OPTION_REGbits	set	129
   325  0089                     _TRISE	set	137
   326  0087                     _TRISC	set	135
   327  0088                     _TRISD	set	136
   328  0085                     _TRISA	set	133
   329  0086                     _TRISB	set	134
   330  0099                     _SPBRG	set	153
   331  008F                     _OSCCONbits	set	143
   332  0091                     _SSPCON2bits	set	145
   333  0087                     _TRISCbits	set	135
   334  0094                     _SSPSTAT	set	148
   335  0093                     _SSPADD	set	147
   336  0091                     _SSPCON2	set	145
   337  04C1                     _TRMT	set	1217
   338  04C5                     _TXEN	set	1221
   339  043E                     _TRISC6	set	1086
   340  043F                     _TRISC7	set	1087
   341  04C4                     _SYNC	set	1220
   342  04C2                     _BRGH	set	1218
   343  0463                     _SSPIE	set	1123
   344  043C                     _TRISC4	set	1084
   345  043B                     _TRISC3	set	1083
   346  048B                     _RCEN	set	1163
   347  0188                     _ANSEL	set	392
   348  0189                     _ANSELH	set	393
   349  071C                     STR_1:	
   350  071C  3449               	retlw	73	;'I'
   351  071D  346E               	retlw	110	;'n'
   352  071E  3469               	retlw	105	;'i'
   353  071F  3463               	retlw	99	;'c'
   354  0720  3469               	retlw	105	;'i'
   355  0721  3461               	retlw	97	;'a'
   356  0722  346E               	retlw	110	;'n'
   357  0723  3464               	retlw	100	;'d'
   358  0724  346F               	retlw	111	;'o'
   359  0725  3420               	retlw	32	;' '
   360  0726  3453               	retlw	83	;'S'
   361  0727  3469               	retlw	105	;'i'
   362  0728  3473               	retlw	115	;'s'
   363  0729  3474               	retlw	116	;'t'
   364  072A  3465               	retlw	101	;'e'
   365  072B  346D               	retlw	109	;'m'
   366  072C  3461               	retlw	97	;'a'
   367  072D  3420               	retlw	32	;' '
   368  072E  3464               	retlw	100	;'d'
   369  072F  3465               	retlw	101	;'e'
   370  0730  3420               	retlw	32	;' '
   371  0731  3453               	retlw	83	;'S'
   372  0732  3465               	retlw	101	;'e'
   373  0733  3467               	retlw	103	;'g'
   374  0734  3475               	retlw	117	;'u'
   375  0735  3472               	retlw	114	;'r'
   376  0736  3469               	retlw	105	;'i'
   377  0737  3464               	retlw	100	;'d'
   378  0738  3461               	retlw	97	;'a'
   379  0739  3464               	retlw	100	;'d'
   380  073A  3400               	retlw	0
   381  073B                     STR_29:	
   382  073B  3420               	retlw	32	;' '
   383  073C  3420               	retlw	32	;' '
   384  073D  3420               	retlw	32	;' '
   385  073E  3420               	retlw	32	;' '
   386  073F  3420               	retlw	32	;' '
   387  0740  3420               	retlw	32	;' '
   388  0741  3420               	retlw	32	;' '
   389  0742  3420               	retlw	32	;' '
   390  0743  3420               	retlw	32	;' '
   391  0744  3420               	retlw	32	;' '
   392  0745  3420               	retlw	32	;' '
   393  0746  3420               	retlw	32	;' '
   394  0747  3400               	retlw	0
   395  0748                     STR_27:	
   396  0748  3453               	retlw	83	;'S'
   397  0749  3465               	retlw	101	;'e'
   398  074A  3463               	retlw	99	;'c'
   399  074B  3475               	retlw	117	;'u'
   400  074C  3472               	retlw	114	;'r'
   401  074D  3469               	retlw	105	;'i'
   402  074E  3474               	retlw	116	;'t'
   403  074F  3479               	retlw	121	;'y'
   404  0750  3420               	retlw	32	;' '
   405  0751  344F               	retlw	79	;'O'
   406  0752  3446               	retlw	70	;'F'
   407  0753  3446               	retlw	70	;'F'
   408  0754  3400               	retlw	0
   409  0755                     STR_13:	
   410  0755  3444               	retlw	68	;'D'
   411  0756  344F               	retlw	79	;'O'
   412  0757  344F               	retlw	79	;'O'
   413  0758  3452               	retlw	82	;'R'
   414  0759  3420               	retlw	32	;' '
   415  075A  344F               	retlw	79	;'O'
   416  075B  3450               	retlw	80	;'P'
   417  075C  3445               	retlw	69	;'E'
   418  075D  344E               	retlw	78	;'N'
   419  075E  3420               	retlw	32	;' '
   420  075F  3420               	retlw	32	;' '
   421  0760  3400               	retlw	0
   422  0761                     STR_14:	
   423  0761  3444               	retlw	68	;'D'
   424  0762  344F               	retlw	79	;'O'
   425  0763  344F               	retlw	79	;'O'
   426  0764  3452               	retlw	82	;'R'
   427  0765  3420               	retlw	32	;' '
   428  0766  3443               	retlw	67	;'C'
   429  0767  344C               	retlw	76	;'L'
   430  0768  344F               	retlw	79	;'O'
   431  0769  3453               	retlw	83	;'S'
   432  076A  3445               	retlw	69	;'E'
   433  076B  3444               	retlw	68	;'D'
   434  076C  3400               	retlw	0
   435  076D                     STR_26:	
   436  076D  3453               	retlw	83	;'S'
   437  076E  3465               	retlw	101	;'e'
   438  076F  3463               	retlw	99	;'c'
   439  0770  3475               	retlw	117	;'u'
   440  0771  3472               	retlw	114	;'r'
   441  0772  3469               	retlw	105	;'i'
   442  0773  3474               	retlw	116	;'t'
   443  0774  3479               	retlw	121	;'y'
   444  0775  3420               	retlw	32	;' '
   445  0776  344F               	retlw	79	;'O'
   446  0777  344E               	retlw	78	;'N'
   447  0778  3400               	retlw	0
   448  0779                     STR_2:	
   449  0779  344C               	retlw	76	;'L'
   450  077A  3455               	retlw	85	;'U'
   451  077B  344E               	retlw	78	;'N'
   452  077C  3445               	retlw	69	;'E'
   453  077D  3453               	retlw	83	;'S'
   454  077E  3420               	retlw	32	;' '
   455  077F  3420               	retlw	32	;' '
   456  0780  3420               	retlw	32	;' '
   457  0781  3420               	retlw	32	;' '
   458  0782  3400               	retlw	0
   459  0783                     STR_7:	
   460  0783  3453               	retlw	83	;'S'
   461  0784  3441               	retlw	65	;'A'
   462  0785  3442               	retlw	66	;'B'
   463  0786  3441               	retlw	65	;'A'
   464  0787  3444               	retlw	68	;'D'
   465  0788  344F               	retlw	79	;'O'
   466  0789  3420               	retlw	32	;' '
   467  078A  3420               	retlw	32	;' '
   468  078B  3420               	retlw	32	;' '
   469  078C  3400               	retlw	0
   470  078D                     STR_3:	
   471  078D  344D               	retlw	77	;'M'
   472  078E  3441               	retlw	65	;'A'
   473  078F  3452               	retlw	82	;'R'
   474  0790  3454               	retlw	84	;'T'
   475  0791  3445               	retlw	69	;'E'
   476  0792  3453               	retlw	83	;'S'
   477  0793  3420               	retlw	32	;' '
   478  0794  3420               	retlw	32	;' '
   479  0795  3420               	retlw	32	;' '
   480  0796  3400               	retlw	0
   481  0797                     STR_5:	
   482  0797  344A               	retlw	74	;'J'
   483  0798  3455               	retlw	85	;'U'
   484  0799  3445               	retlw	69	;'E'
   485  079A  3456               	retlw	86	;'V'
   486  079B  3445               	retlw	69	;'E'
   487  079C  3453               	retlw	83	;'S'
   488  079D  3420               	retlw	32	;' '
   489  079E  3420               	retlw	32	;' '
   490  079F  3420               	retlw	32	;' '
   491  07A0  3400               	retlw	0
   492  07A1                     STR_8:	
   493  07A1  3444               	retlw	68	;'D'
   494  07A2  344F               	retlw	79	;'O'
   495  07A3  344D               	retlw	77	;'M'
   496  07A4  3449               	retlw	73	;'I'
   497  07A5  344E               	retlw	78	;'N'
   498  07A6  3447               	retlw	71	;'G'
   499  07A7  344F               	retlw	79	;'O'
   500  07A8  3420               	retlw	32	;' '
   501  07A9  3420               	retlw	32	;' '
   502  07AA  3400               	retlw	0
   503  07AB                     STR_6:	
   504  07AB  3456               	retlw	86	;'V'
   505  07AC  3449               	retlw	73	;'I'
   506  07AD  3445               	retlw	69	;'E'
   507  07AE  3452               	retlw	82	;'R'
   508  07AF  344E               	retlw	78	;'N'
   509  07B0  3445               	retlw	69	;'E'
   510  07B1  3453               	retlw	83	;'S'
   511  07B2  3420               	retlw	32	;' '
   512  07B3  3420               	retlw	32	;' '
   513  07B4  3400               	retlw	0
   514  07B5                     STR_25:	
   515  07B5  3450               	retlw	80	;'P'
   516  07B6  3441               	retlw	65	;'A'
   517  07B7  3453               	retlw	83	;'S'
   518  07B8  3453               	retlw	83	;'S'
   519  07B9  3457               	retlw	87	;'W'
   520  07BA  344F               	retlw	79	;'O'
   521  07BB  3452               	retlw	82	;'R'
   522  07BC  3444               	retlw	68	;'D'
   523  07BD  343A               	retlw	58	;':'
   524  07BE  3400               	retlw	0
   525  07BF                     STR_4:	
   526  07BF  344D               	retlw	77	;'M'
   527  07C0  3449               	retlw	73	;'I'
   528  07C1  3445               	retlw	69	;'E'
   529  07C2  3452               	retlw	82	;'R'
   530  07C3  3443               	retlw	67	;'C'
   531  07C4  344F               	retlw	79	;'O'
   532  07C5  344C               	retlw	76	;'L'
   533  07C6  3445               	retlw	69	;'E'
   534  07C7  3453               	retlw	83	;'S'
   535  07C8  3400               	retlw	0
   536  07C9                     STR_17:	
   537  07C9  3442               	retlw	66	;'B'
   538  07CA  3441               	retlw	65	;'A'
   539  07CB  344E               	retlw	78	;'N'
   540  07CC  344B               	retlw	75	;'K'
   541  07CD  3420               	retlw	32	;' '
   542  07CE  344F               	retlw	79	;'O'
   543  07CF  344E               	retlw	78	;'N'
   544  07D0  3420               	retlw	32	;' '
   545  07D1  3400               	retlw	0
   546  07D2                     STR_15:	
   547  07D2  3454               	retlw	84	;'T'
   548  07D3  3452               	retlw	82	;'R'
   549  07D4  3449               	retlw	73	;'I'
   550  07D5  3450               	retlw	80	;'P'
   551  07D6  3420               	retlw	32	;' '
   552  07D7  344F               	retlw	79	;'O'
   553  07D8  344E               	retlw	78	;'N'
   554  07D9  3420               	retlw	32	;' '
   555  07DA  3400               	retlw	0
   556  07DB                     STR_18:	
   557  07DB  3442               	retlw	66	;'B'
   558  07DC  3441               	retlw	65	;'A'
   559  07DD  344E               	retlw	78	;'N'
   560  07DE  344B               	retlw	75	;'K'
   561  07DF  3420               	retlw	32	;' '
   562  07E0  344F               	retlw	79	;'O'
   563  07E1  3446               	retlw	70	;'F'
   564  07E2  3446               	retlw	70	;'F'
   565  07E3  3400               	retlw	0
   566  07E4                     STR_16:	
   567  07E4  3454               	retlw	84	;'T'
   568  07E5  3452               	retlw	82	;'R'
   569  07E6  3449               	retlw	73	;'I'
   570  07E7  3450               	retlw	80	;'P'
   571  07E8  3420               	retlw	32	;' '
   572  07E9  344F               	retlw	79	;'O'
   573  07EA  3446               	retlw	70	;'F'
   574  07EB  3446               	retlw	70	;'F'
   575  07EC  3400               	retlw	0
   576  07ED                     STR_19:	
   577  07ED  3450               	retlw	80	;'P'
   578  07EE  3449               	retlw	73	;'I'
   579  07EF  3452               	retlw	82	;'R'
   580  07F0  3420               	retlw	32	;' '
   581  07F1  344F               	retlw	79	;'O'
   582  07F2  344E               	retlw	78	;'N'
   583  07F3  3420               	retlw	32	;' '
   584  07F4  3400               	retlw	0
   585  07F5                     STR_20:	
   586  07F5  3450               	retlw	80	;'P'
   587  07F6  3449               	retlw	73	;'I'
   588  07F7  3452               	retlw	82	;'R'
   589  07F8  3420               	retlw	32	;' '
   590  07F9  344F               	retlw	79	;'O'
   591  07FA  3446               	retlw	70	;'F'
   592  07FB  3446               	retlw	70	;'F'
   593  07FC  3400               	retlw	0
   594  07FD                     STR_23:	
   595  07FD  3454               	retlw	84	;'T'
   596  07FE  3449               	retlw	73	;'I'
   597  07FF  344D               	retlw	77	;'M'
   598  0800  3445               	retlw	69	;'E'
   599  0801  343A               	retlw	58	;':'
   600  0802  3420               	retlw	32	;' '
   601  0803  3400               	retlw	0
   602  0804                     STR_24:	
   603  0804  3444               	retlw	68	;'D'
   604  0805  3441               	retlw	65	;'A'
   605  0806  3459               	retlw	89	;'Y'
   606  0807  343A               	retlw	58	;':'
   607  0808  3420               	retlw	32	;' '
   608  0809  3400               	retlw	0
   609  080A                     STR_12:	
   610  080A  3432               	retlw	50	;'2'
   611  080B  3431               	retlw	49	;'1'
   612  080C  343A               	retlw	58	;':'
   613  080D  3430               	retlw	48	;'0'
   614  080E  3430               	retlw	48	;'0'
   615  080F  3400               	retlw	0
   616  0810                     STR_11:	
   617  0810  3432               	retlw	50	;'2'
   618  0811  3432               	retlw	50	;'2'
   619  0812  343A               	retlw	58	;':'
   620  0813  3430               	retlw	48	;'0'
   621  0814  3430               	retlw	48	;'0'
   622  0815  3400               	retlw	0
   623  0816                     STR_10:	
   624  0816  3432               	retlw	50	;'2'
   625  0817  3433               	retlw	51	;'3'
   626  0818  342E               	retlw	46	;'.'
   627  0819  3435               	retlw	53	;'5'
   628  081A  3430               	retlw	48	;'0'
   629  081B  3400               	retlw	0
   630  081C                     STR_28:	
   631  081C  3457               	retlw	87	;'W'
   632  081D  3452               	retlw	82	;'R'
   633  081E  344F               	retlw	79	;'O'
   634  081F  344E               	retlw	78	;'N'
   635  0820  3447               	retlw	71	;'G'
   636  0821  3400               	retlw	0
   637  0822                     STR_31:	
   638  0822  342E               	retlw	46	;'.'
   639  0823  3425               	retlw	37	;'%'
   640  0824  3464               	retlw	100	;'d'
   641  0825  3430               	retlw	48	;'0'
   642  0826  3400               	retlw	0
   643  0827                     STR_32:	
   644  0827  342E               	retlw	46	;'.'
   645  0828  3425               	retlw	37	;'%'
   646  0829  3464               	retlw	100	;'d'
   647  082A  3400               	retlw	0
   648  073E                     
   649                           ; #config settings
   650  0000                     
   651                           	psect	cinit
   652  000F                     start_initialization:	
   653  000F                     __initialization:	
   654                           
   655                           ; Initialize objects allocated to BANK0
   656  000F  160A  118A  2687  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   657  0014  00E8               	movwf	__pdataBANK0& (0+127)
   658  0015  160A  118A  2688  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   659  001A  00E9               	movwf	(__pdataBANK0+1)& (0+127)
   660  001B  160A  118A  2689  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   661  0020  00EA               	movwf	(__pdataBANK0+2)& (0+127)
   662  0021  160A  118A  268A  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   663  0026  00EB               	movwf	(__pdataBANK0+3)& (0+127)
   664  0027  160A  118A  268B  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   665  002C  00EC               	movwf	(__pdataBANK0+4)& (0+127)
   666                           
   667                           ; Clear objects allocated to BANK0
   668  002D  1383               	bcf	3,7	;select IRP bank0
   669  002E  3020               	movlw	low __pbssBANK0
   670  002F  0084               	movwf	4
   671  0030  3047               	movlw	low (__pbssBANK0+39)
   672  0031  160A  118A  26AF   	fcall	clear_ram0
   673                           
   674                           ; Clear objects allocated to COMMON
   675  0034  01F8               	clrf	__pbssCOMMON& (0+127)
   676  0035  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   677  0036  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   678  0037                     end_of_initialization:	
   679                           ;End of C runtime variable initialization code
   680                           
   681  0037                     __end_of__initialization:	
   682  0037  0183               	clrf	3
   683  0038  120A  118A  283B   	ljmp	_main	;jump to C main() function
   684                           
   685                           	psect	bssCOMMON
   686  0078                     __pbssCOMMON:	
   687  0078                     _k:	
   688  0078                     	ds	1
   689  0079                     _day1:	
   690  0079                     	ds	1
   691  007A                     _state:	
   692  007A                     	ds	1
   693                           
   694                           	psect	bssBANK0
   695  0020                     __pbssBANK0:	
   696  0020                     _passwordu:	
   697  0020                     	ds	5
   698  0025                     _day2:	
   699  0025                     	ds	2
   700  0027                     _newmin:	
   701  0027                     	ds	1
   702  0028                     _newhour:	
   703  0028                     	ds	1
   704  0029                     _seguridad:	
   705  0029                     	ds	1
   706  002A                     _min:	
   707  002A                     	ds	1
   708  002B                     _hour:	
   709  002B                     	ds	1
   710  002C                     _val:	
   711  002C                     	ds	1
   712  002D                     _cont:	
   713  002D                     	ds	1
   714  002E                     _bank:	
   715  002E                     	ds	1
   716  002F                     _alarm:	
   717  002F                     	ds	1
   718  0030                     _change4:	
   719  0030                     	ds	1
   720  0031                     _change3:	
   721  0031                     	ds	1
   722  0032                     _change2:	
   723  0032                     	ds	1
   724  0033                     _change1:	
   725  0033                     	ds	1
   726  0034                     _change:	
   727  0034                     	ds	1
   728  0035                     _j:	
   729  0035                     	ds	1
   730  0036                     _i:	
   731  0036                     	ds	1
   732  0037                     _IR:	
   733  0037                     	ds	1
   734  0038                     _PIR:	
   735  0038                     	ds	1
   736  0039                     _trip:	
   737  0039                     	ds	1
   738  003A                     _door:	
   739  003A                     	ds	1
   740  003B                     _temp:	
   741  003B                     	ds	6
   742  0041                     _time:	
   743  0041                     	ds	6
   744                           
   745                           	psect	dataBANK0
   746  0068                     __pdataBANK0:	
   747  0068                     _password:	
   748  0068                     	ds	5
   749                           
   750                           	psect	clrtext
   751  16AF                     clear_ram0:	
   752                           ;	Called with FSR containing the base address, and
   753                           ;	W with the last address+1
   754                           
   755  16AF  0064               	clrwdt	;clear the watchdog before getting into this loop
   756  16B0                     clrloop0:	
   757  16B0  0180               	clrf	0	;clear RAM location pointed to by FSR
   758  16B1  0A84               	incf	4,f	;increment pointer
   759  16B2  0604               	xorwf	4,w	;XOR with final address
   760  16B3  1903               	btfsc	3,2	;have we reached the end yet?
   761  16B4  3400               	retlw	0	;all done for this memory range, return
   762  16B5  0604               	xorwf	4,w	;XOR again to restore value
   763  16B6  2EB0               	goto	clrloop0	;do the next byte
   764                           
   765                           	psect	cstackBANK1
   766  00A0                     __pcstackBANK1:	
   767  00A0                     ??_main:	
   768                           
   769                           ; 1 bytes @ 0x0
   770  00A0                     	ds	6
   771                           
   772                           	psect	cstackCOMMON
   773  0070                     __pcstackCOMMON:	
   774  0070                     ?_setup:	
   775  0070                     ?_get_temp:	
   776                           ; 1 bytes @ 0x0
   777                           
   778  0070                     ?_get_hall:	
   779                           ; 1 bytes @ 0x0
   780                           
   781  0070                     ?_get_tripwire:	
   782                           ; 1 bytes @ 0x0
   783                           
   784  0070                     ?_get_PIR:	
   785                           ; 1 bytes @ 0x0
   786                           
   787  0070                     ?_get_IR:	
   788                           ; 1 bytes @ 0x0
   789                           
   790  0070                     ?_get_time:	
   791                           ; 1 bytes @ 0x0
   792                           
   793  0070                     ?_get_day:	
   794                           ; 1 bytes @ 0x0
   795                           
   796  0070                     ?_open_door:	
   797                           ; 1 bytes @ 0x0
   798                           
   799  0070                     ?_close_door:	
   800                           ; 1 bytes @ 0x0
   801                           
   802  0070                     ?_I2C_Master_Wait:	
   803                           ; 1 bytes @ 0x0
   804                           
   805  0070                     ?_I2C_Master_Start:	
   806                           ; 1 bytes @ 0x0
   807                           
   808  0070                     ?_I2C_Master_RepeatedStart:	
   809                           ; 1 bytes @ 0x0
   810                           
   811  0070                     ?_I2C_Master_Stop:	
   812                           ; 1 bytes @ 0x0
   813                           
   814  0070                     ?_Lcd_Port:	
   815                           ; 1 bytes @ 0x0
   816                           
   817  0070                     ?_Lcd_Cmd:	
   818                           ; 1 bytes @ 0x0
   819                           
   820  0070                     ?_Lcd_Clear:	
   821                           ; 1 bytes @ 0x0
   822                           
   823  0070                     ?_Lcd_Init:	
   824                           ; 1 bytes @ 0x0
   825                           
   826  0070                     ?_Lcd_Write_Char:	
   827                           ; 1 bytes @ 0x0
   828                           
   829  0070                     ?_Lcd_Shift_Right:	
   830                           ; 1 bytes @ 0x0
   831                           
   832  0070                     ?_Lcd_Shift_Left:	
   833                           ; 1 bytes @ 0x0
   834                           
   835  0070                     ?_initOscilador:	
   836                           ; 1 bytes @ 0x0
   837                           
   838  0070                     ?_UART_TX_Empty:	
   839                           ; 1 bytes @ 0x0
   840                           
   841  0070                     ?_UART_Write:	
   842                           ; 1 bytes @ 0x0
   843                           
   844  0070                     ?_manual_pwm:	
   845                           ; 1 bytes @ 0x0
   846                           
   847  0070                     ??_manual_pwm:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0070                     ?_main:	
   851                           ; 1 bytes @ 0x0
   852                           
   853                           
   854                           ; 1 bytes @ 0x0
   855  0070                     	ds	3
   856  0073                     ?_strcat:	
   857  0073                     ??_I2C_Master_Wait:	
   858                           ; 1 bytes @ 0x3
   859                           
   860  0073                     ??_I2C_Master_Start:	
   861                           ; 1 bytes @ 0x3
   862                           
   863  0073                     ??_I2C_Master_RepeatedStart:	
   864                           ; 1 bytes @ 0x3
   865                           
   866  0073                     ??_I2C_Master_Stop:	
   867                           ; 1 bytes @ 0x3
   868                           
   869  0073                     ?_I2C_Master_Write:	
   870                           ; 1 bytes @ 0x3
   871                           
   872  0073                     ??_Lcd_Port:	
   873                           ; 1 bytes @ 0x3
   874                           
   875  0073                     ??_initOscilador:	
   876                           ; 1 bytes @ 0x3
   877                           
   878  0073                     ??_UART_TX_Empty:	
   879                           ; 1 bytes @ 0x3
   880                           
   881  0073                     ??_UART_Write:	
   882                           ; 1 bytes @ 0x3
   883                           
   884  0073                     ?___bmul:	
   885                           ; 1 bytes @ 0x3
   886                           
   887  0073                     ??___lldiv:	
   888                           ; 1 bytes @ 0x3
   889                           
   890  0073                     ??___aldiv:	
   891                           ; 1 bytes @ 0x3
   892                           
   893  0073                     ?_strcmp:	
   894                           ; 1 bytes @ 0x3
   895                           
   896  0073                     ?_I2C_Master_Read:	
   897                           ; 2 bytes @ 0x3
   898                           
   899  0073                     ?___awdiv:	
   900                           ; 2 bytes @ 0x3
   901                           
   902  0073                     ?___awmod:	
   903                           ; 2 bytes @ 0x3
   904                           
   905  0073                     ?___lwdiv:	
   906                           ; 2 bytes @ 0x3
   907                           
   908  0073                     Lcd_Port@a:	
   909                           ; 2 bytes @ 0x3
   910                           
   911  0073                     UART_Write@data:	
   912                           ; 1 bytes @ 0x3
   913                           
   914  0073                     ___bmul@multiplicand:	
   915                           ; 1 bytes @ 0x3
   916                           
   917  0073                     strcat@from:	
   918                           ; 1 bytes @ 0x3
   919                           
   920  0073                     I2C_Master_Write@d:	
   921                           ; 1 bytes @ 0x3
   922                           
   923  0073                     I2C_Master_Read@a:	
   924                           ; 2 bytes @ 0x3
   925                           
   926  0073                     ___awdiv@divisor:	
   927                           ; 2 bytes @ 0x3
   928                           
   929  0073                     ___awmod@divisor:	
   930                           ; 2 bytes @ 0x3
   931                           
   932  0073                     ___lwdiv@divisor:	
   933                           ; 2 bytes @ 0x3
   934                           
   935  0073                     strcmp@s2:	
   936                           ; 2 bytes @ 0x3
   937                           
   938                           
   939                           ; 2 bytes @ 0x3
   940  0073                     	ds	1
   941  0074                     ??_strcat:	
   942  0074                     ??_I2C_Master_Init:	
   943                           ; 1 bytes @ 0x4
   944                           
   945  0074                     ??_Lcd_Cmd:	
   946                           ; 1 bytes @ 0x4
   947                           
   948  0074                     ??_Lcd_Write_Char:	
   949                           ; 1 bytes @ 0x4
   950                           
   951  0074                     ??___bmul:	
   952                           ; 1 bytes @ 0x4
   953                           
   954  0074                     UART_Init@x:	
   955                           ; 1 bytes @ 0x4
   956                           
   957                           
   958                           ; 2 bytes @ 0x4
   959  0074                     	ds	1
   960  0075                     ??_open_door:	
   961  0075                     ??_close_door:	
   962                           ; 1 bytes @ 0x5
   963                           
   964  0075                     ??_strcmp:	
   965                           ; 1 bytes @ 0x5
   966                           
   967  0075                     ?_write_RTC:	
   968                           ; 1 bytes @ 0x5
   969                           
   970  0075                     ??_I2C_Master_Write:	
   971                           ; 1 bytes @ 0x5
   972                           
   973  0075                     ??_I2C_Master_Read:	
   974                           ; 1 bytes @ 0x5
   975                           
   976  0075                     Lcd_Write_Char@temp:	
   977                           ; 1 bytes @ 0x5
   978                           
   979  0075                     initOscilador@option:	
   980                           ; 1 bytes @ 0x5
   981                           
   982  0075                     write_RTC@minutes:	
   983                           ; 1 bytes @ 0x5
   984                           
   985  0075                     ___bmul@product:	
   986                           ; 1 bytes @ 0x5
   987                           
   988  0075                     strcat@to:	
   989                           ; 1 bytes @ 0x5
   990                           
   991  0075                     ___awdiv@dividend:	
   992                           ; 1 bytes @ 0x5
   993                           
   994  0075                     ___awmod@dividend:	
   995                           ; 2 bytes @ 0x5
   996                           
   997  0075                     ___lwdiv@dividend:	
   998                           ; 2 bytes @ 0x5
   999                           
  1000                           
  1001                           ; 2 bytes @ 0x5
  1002  0075                     	ds	1
  1003  0076                     Lcd_Cmd@a:	
  1004  0076                     Lcd_Write_Char@y:	
  1005                           ; 1 bytes @ 0x6
  1006                           
  1007  0076                     write_RTC@day:	
  1008                           ; 1 bytes @ 0x6
  1009                           
  1010  0076                     ___bmul@multiplier:	
  1011                           ; 1 bytes @ 0x6
  1012                           
  1013  0076                     strcat@cp:	
  1014                           ; 1 bytes @ 0x6
  1015                           
  1016                           
  1017                           ; 1 bytes @ 0x6
  1018  0076                     	ds	1
  1019  0077                     ??_get_hall:	
  1020  0077                     ??_get_tripwire:	
  1021                           ; 1 bytes @ 0x7
  1022                           
  1023  0077                     ??_get_PIR:	
  1024                           ; 1 bytes @ 0x7
  1025                           
  1026  0077                     ??_get_IR:	
  1027                           ; 1 bytes @ 0x7
  1028                           
  1029  0077                     ??_get_day:	
  1030                           ; 1 bytes @ 0x7
  1031                           
  1032  0077                     ??_Lcd_Clear:	
  1033                           ; 1 bytes @ 0x7
  1034                           
  1035  0077                     ?_Lcd_Set_Cursor:	
  1036                           ; 1 bytes @ 0x7
  1037                           
  1038  0077                     ??_Lcd_Shift_Right:	
  1039                           ; 1 bytes @ 0x7
  1040                           
  1041  0077                     ??_Lcd_Shift_Left:	
  1042                           ; 1 bytes @ 0x7
  1043                           
  1044  0077                     ??___awdiv:	
  1045                           ; 1 bytes @ 0x7
  1046                           
  1047  0077                     ??___awmod:	
  1048                           ; 1 bytes @ 0x7
  1049                           
  1050  0077                     ??___lwdiv:	
  1051                           ; 1 bytes @ 0x7
  1052                           
  1053  0077                     Lcd_Set_Cursor@b:	
  1054                           ; 1 bytes @ 0x7
  1055                           
  1056  0077                     Lcd_Write_Char@a:	
  1057                           ; 1 bytes @ 0x7
  1058                           
  1059  0077                     write_RTC@hour:	
  1060                           ; 1 bytes @ 0x7
  1061                           
  1062                           
  1063                           ; 1 bytes @ 0x7
  1064  0077                     	ds	1
  1065  0078                     ??_setup:	
  1066                           
  1067                           	psect	cstackBANK0
  1068  0047                     __pcstackBANK0:	
  1069                           ; 1 bytes @ 0x8
  1070                           
  1071  0047                     ??_write_RTC:	
  1072  0047                     ??_Lcd_Set_Cursor:	
  1073                           ; 1 bytes @ 0x0
  1074                           
  1075  0047                     ??_Lcd_Init:	
  1076                           ; 1 bytes @ 0x0
  1077                           
  1078  0047                     ?_Lcd_Write_String:	
  1079                           ; 1 bytes @ 0x0
  1080                           
  1081  0047                     ?___lldiv:	
  1082                           ; 1 bytes @ 0x0
  1083                           
  1084  0047                     ?___aldiv:	
  1085                           ; 4 bytes @ 0x0
  1086                           
  1087  0047                     ___awdiv@counter:	
  1088                           ; 4 bytes @ 0x0
  1089                           
  1090  0047                     ___awmod@counter:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093  0047                     ___lwdiv@counter:	
  1094                           ; 1 bytes @ 0x0
  1095                           
  1096  0047                     strcmp@r:	
  1097                           ; 1 bytes @ 0x0
  1098                           
  1099  0047                     I2C_Master_Read@temp:	
  1100                           ; 1 bytes @ 0x0
  1101                           
  1102  0047                     Lcd_Write_String@a:	
  1103                           ; 2 bytes @ 0x0
  1104                           
  1105  0047                     ___lldiv@divisor:	
  1106                           ; 2 bytes @ 0x0
  1107                           
  1108  0047                     ___aldiv@divisor:	
  1109                           ; 4 bytes @ 0x0
  1110                           
  1111                           
  1112                           ; 4 bytes @ 0x0
  1113  0047                     	ds	1
  1114  0048                     ___awdiv@sign:	
  1115  0048                     ___awmod@sign:	
  1116                           ; 1 bytes @ 0x1
  1117                           
  1118  0048                     strcmp@s1:	
  1119                           ; 1 bytes @ 0x1
  1120                           
  1121  0048                     ___lwdiv@quotient:	
  1122                           ; 1 bytes @ 0x1
  1123                           
  1124                           
  1125                           ; 2 bytes @ 0x1
  1126  0048                     	ds	1
  1127  0049                     ??_get_time:	
  1128  0049                     ??_Lcd_Write_String:	
  1129                           ; 1 bytes @ 0x2
  1130                           
  1131  0049                     Lcd_Set_Cursor@a:	
  1132                           ; 1 bytes @ 0x2
  1133                           
  1134  0049                     get_day@d:	
  1135                           ; 1 bytes @ 0x2
  1136                           
  1137  0049                     get_hall@key:	
  1138                           ; 1 bytes @ 0x2
  1139                           
  1140  0049                     get_tripwire@trip:	
  1141                           ; 1 bytes @ 0x2
  1142                           
  1143  0049                     get_PIR@PIR:	
  1144                           ; 1 bytes @ 0x2
  1145                           
  1146  0049                     get_IR@IR:	
  1147                           ; 1 bytes @ 0x2
  1148                           
  1149  0049                     ___awdiv@quotient:	
  1150                           ; 1 bytes @ 0x2
  1151                           
  1152                           
  1153                           ; 2 bytes @ 0x2
  1154  0049                     	ds	1
  1155  004A                     ?___lwmod:	
  1156  004A                     Lcd_Set_Cursor@z:	
  1157                           ; 2 bytes @ 0x3
  1158                           
  1159  004A                     ___lwmod@divisor:	
  1160                           ; 1 bytes @ 0x3
  1161                           
  1162                           
  1163                           ; 2 bytes @ 0x3
  1164  004A                     	ds	1
  1165  004B                     Lcd_Set_Cursor@y:	
  1166  004B                     get_time@hour:	
  1167                           ; 1 bytes @ 0x4
  1168                           
  1169  004B                     ___lldiv@dividend:	
  1170                           ; 1 bytes @ 0x4
  1171                           
  1172  004B                     ___aldiv@dividend:	
  1173                           ; 4 bytes @ 0x4
  1174                           
  1175                           
  1176                           ; 4 bytes @ 0x4
  1177  004B                     	ds	1
  1178  004C                     Lcd_Set_Cursor@temp:	
  1179  004C                     get_time@min:	
  1180                           ; 1 bytes @ 0x5
  1181                           
  1182  004C                     Lcd_Write_String@i:	
  1183                           ; 1 bytes @ 0x5
  1184                           
  1185  004C                     ___lwmod@dividend:	
  1186                           ; 2 bytes @ 0x5
  1187                           
  1188                           
  1189                           ; 2 bytes @ 0x5
  1190  004C                     	ds	1
  1191  004D                     get_time@time_string:	
  1192                           
  1193                           ; 1 bytes @ 0x6
  1194  004D                     	ds	1
  1195  004E                     ??___lwmod:	
  1196                           
  1197                           ; 1 bytes @ 0x7
  1198  004E                     	ds	1
  1199  004F                     ___aldiv@counter:	
  1200  004F                     ___lwmod@counter:	
  1201                           ; 1 bytes @ 0x8
  1202                           
  1203  004F                     ___lldiv@quotient:	
  1204                           ; 1 bytes @ 0x8
  1205                           
  1206                           
  1207                           ; 4 bytes @ 0x8
  1208  004F                     	ds	1
  1209  0050                     ?_sprintf:	
  1210  0050                     ___aldiv@sign:	
  1211                           ; 2 bytes @ 0x9
  1212                           
  1213  0050                     sprintf@f:	
  1214                           ; 1 bytes @ 0x9
  1215                           
  1216                           
  1217                           ; 2 bytes @ 0x9
  1218  0050                     	ds	1
  1219  0051                     ___aldiv@quotient:	
  1220                           
  1221                           ; 4 bytes @ 0xA
  1222  0051                     	ds	2
  1223  0053                     ___lldiv@counter:	
  1224                           
  1225                           ; 1 bytes @ 0xC
  1226  0053                     	ds	1
  1227  0054                     ??_sprintf:	
  1228  0054                     ?_I2C_Master_Init:	
  1229                           ; 1 bytes @ 0xD
  1230                           
  1231  0054                     I2C_Master_Init@c:	
  1232                           ; 1 bytes @ 0xD
  1233                           
  1234                           
  1235                           ; 4 bytes @ 0xD
  1236  0054                     	ds	1
  1237  0055                     ?_UART_Init:	
  1238  0055                     UART_Init@baudrate:	
  1239                           ; 1 bytes @ 0xE
  1240                           
  1241                           
  1242                           ; 4 bytes @ 0xE
  1243  0055                     	ds	3
  1244  0058                     sprintf@ap:	
  1245                           
  1246                           ; 1 bytes @ 0x11
  1247  0058                     	ds	1
  1248  0059                     ??_UART_Init:	
  1249  0059                     sprintf@flag:	
  1250                           ; 1 bytes @ 0x12
  1251                           
  1252                           
  1253                           ; 1 bytes @ 0x12
  1254  0059                     	ds	1
  1255  005A                     sprintf@prec:	
  1256                           
  1257                           ; 1 bytes @ 0x13
  1258  005A                     	ds	1
  1259  005B                     sprintf@val:	
  1260                           
  1261                           ; 2 bytes @ 0x14
  1262  005B                     	ds	2
  1263  005D                     sprintf@sp:	
  1264                           
  1265                           ; 1 bytes @ 0x16
  1266  005D                     	ds	1
  1267  005E                     sprintf@c:	
  1268                           
  1269                           ; 1 bytes @ 0x17
  1270  005E                     	ds	1
  1271  005F                     ??_get_temp:	
  1272                           
  1273                           ; 1 bytes @ 0x18
  1274  005F                     	ds	3
  1275  0062                     get_temp@decimal:	
  1276                           
  1277                           ; 3 bytes @ 0x1B
  1278  0062                     	ds	3
  1279  0065                     get_temp@tempMSB:	
  1280                           
  1281                           ; 1 bytes @ 0x1E
  1282  0065                     	ds	1
  1283  0066                     get_temp@temp_string:	
  1284                           
  1285                           ; 1 bytes @ 0x1F
  1286  0066                     	ds	1
  1287  0067                     get_temp@tempLSB:	
  1288                           
  1289                           ; 1 bytes @ 0x20
  1290  0067                     	ds	1
  1291                           
  1292                           	psect	maintext
  1293  003B                     __pmaintext:	
  1294 ;;
  1295 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1296 ;;
  1297 ;; *************** function _main *****************
  1298 ;; Defined at:
  1299 ;;		line 77 in file "mainMaster.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : B00/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1313 ;;      Params:         0       0       0       0       0
  1314 ;;      Locals:         0       0       0       0       0
  1315 ;;      Temps:          0       0       6       0       0
  1316 ;;      Totals:         0       0       6       0       0
  1317 ;;Total ram usage:        6 bytes
  1318 ;; Hardware stack levels required when called:    5
  1319 ;; This function calls:
  1320 ;;		_Lcd_Clear
  1321 ;;		_Lcd_Set_Cursor
  1322 ;;		_Lcd_Shift_Left
  1323 ;;		_Lcd_Shift_Right
  1324 ;;		_Lcd_Write_Char
  1325 ;;		_Lcd_Write_String
  1326 ;;		_UART_TX_Empty
  1327 ;;		_UART_Write
  1328 ;;		___awdiv
  1329 ;;		___awmod
  1330 ;;		___bmul
  1331 ;;		_close_door
  1332 ;;		_get_IR
  1333 ;;		_get_PIR
  1334 ;;		_get_day
  1335 ;;		_get_hall
  1336 ;;		_get_temp
  1337 ;;		_get_time
  1338 ;;		_get_tripwire
  1339 ;;		_open_door
  1340 ;;		_setup
  1341 ;;		_strcmp
  1342 ;;		_write_RTC
  1343 ;; This function is called by:
  1344 ;;		Startup code after reset
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347                           
  1348                           
  1349                           ;psect for function _main
  1350  003B                     _main:	
  1351                           
  1352                           ;mainMaster.c: 78:     setup();
  1353                           
  1354                           ;incstack = 0
  1355                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1356  003B  120A  158A  2362  120A  118A  	fcall	_setup
  1357                           
  1358                           ;mainMaster.c: 79:     state = 0;
  1359  0040  01FA               	clrf	_state
  1360                           
  1361                           ;mainMaster.c: 80:     seguridad = 1;
  1362  0041  1283               	bcf	3,5	;RP0=0, select bank0
  1363  0042  1303               	bcf	3,6	;RP1=0, select bank0
  1364  0043  01A9               	clrf	_seguridad
  1365  0044  0AA9               	incf	_seguridad,f
  1366                           
  1367                           ;mainMaster.c: 81:     Lcd_Clear();
  1368  0045  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  1369                           
  1370                           ;mainMaster.c: 82:     PORTAbits.RA7 = 0;
  1371  004A  1283               	bcf	3,5	;RP0=0, select bank0
  1372  004B  1303               	bcf	3,6	;RP1=0, select bank0
  1373  004C  1385               	bcf	5,7	;volatile
  1374                           
  1375                           ;mainMaster.c: 83:     Lcd_Set_Cursor(1,1);
  1376  004D  01F7               	clrf	Lcd_Set_Cursor@b
  1377  004E  0AF7               	incf	Lcd_Set_Cursor@b,f
  1378  004F  3001               	movlw	1
  1379  0050  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  1380                           
  1381                           ;mainMaster.c: 84:     Lcd_Write_String("Iniciando Sistema de Seguridad");
  1382  0055  301C               	movlw	low (STR_1| (0+32768))
  1383  0056  1283               	bcf	3,5	;RP0=0, select bank0
  1384  0057  1303               	bcf	3,6	;RP1=0, select bank0
  1385  0058  00C7               	movwf	Lcd_Write_String@a
  1386  0059  3087               	movlw	high (STR_1| (0+32768))
  1387  005A  00C8               	movwf	Lcd_Write_String@a+1
  1388  005B  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  1389                           
  1390                           ;mainMaster.c: 85:     for (k = 0; k < 16; k++){
  1391  0060  01F8               	clrf	_k
  1392  0061                     l3973:	
  1393                           
  1394                           ;mainMaster.c: 86:         Lcd_Shift_Left();
  1395  0061  160A  118A  26D5  120A  118A  	fcall	_Lcd_Shift_Left
  1396                           
  1397                           ;mainMaster.c: 87:         _delay((unsigned long)((300)*(8000000/4000.0)));
  1398  0066  3004               	movlw	4
  1399  0067  1683               	bsf	3,5	;RP0=1, select bank1
  1400  0068  1303               	bcf	3,6	;RP1=0, select bank1
  1401  0069  00A2               	movwf	(??_main^(0+128)+2)
  1402  006A  300C               	movlw	12
  1403  006B  00A1               	movwf	(??_main^(0+128)+1)
  1404  006C  3033               	movlw	51
  1405  006D  00A0               	movwf	??_main^(0+128)
  1406  006E                     u4867:	
  1407  006E  0BA0               	decfsz	??_main^(0+128),f
  1408  006F  286E               	goto	u4867
  1409  0070  0BA1               	decfsz	(??_main^(0+128)+1),f
  1410  0071  286E               	goto	u4867
  1411  0072  0BA2               	decfsz	(??_main^(0+128)+2),f
  1412  0073  286E               	goto	u4867
  1413                           
  1414                           ;mainMaster.c: 88:     }
  1415  0074  3001               	movlw	1
  1416  0075  1683               	bsf	3,5	;RP0=1, select bank1
  1417  0076  1303               	bcf	3,6	;RP1=0, select bank1
  1418  0077  00A0               	movwf	??_main^(0+128)
  1419  0078  0820               	movf	??_main^(0+128),w
  1420  0079  07F8               	addwf	_k,f
  1421  007A  3010               	movlw	16
  1422  007B  0278               	subwf	_k,w
  1423  007C  1C03               	skipc
  1424  007D  2861               	goto	l3973
  1425                           
  1426                           ;mainMaster.c: 89:     for (k = 0; k < 14; k++){
  1427  007E  01F8               	clrf	_k
  1428  007F                     l3987:	
  1429                           
  1430                           ;mainMaster.c: 90:         Lcd_Shift_Right();
  1431  007F  160A  118A  26E0  120A  118A  	fcall	_Lcd_Shift_Right
  1432                           
  1433                           ;mainMaster.c: 91:         _delay((unsigned long)((300)*(8000000/4000.0)));
  1434  0084  3004               	movlw	4
  1435  0085  1683               	bsf	3,5	;RP0=1, select bank1
  1436  0086  1303               	bcf	3,6	;RP1=0, select bank1
  1437  0087  00A2               	movwf	(??_main^(0+128)+2)
  1438  0088  300C               	movlw	12
  1439  0089  00A1               	movwf	(??_main^(0+128)+1)
  1440  008A  3033               	movlw	51
  1441  008B  00A0               	movwf	??_main^(0+128)
  1442  008C                     u4877:	
  1443  008C  0BA0               	decfsz	??_main^(0+128),f
  1444  008D  288C               	goto	u4877
  1445  008E  0BA1               	decfsz	(??_main^(0+128)+1),f
  1446  008F  288C               	goto	u4877
  1447  0090  0BA2               	decfsz	(??_main^(0+128)+2),f
  1448  0091  288C               	goto	u4877
  1449                           
  1450                           ;mainMaster.c: 92:     }
  1451  0092  3001               	movlw	1
  1452  0093  1683               	bsf	3,5	;RP0=1, select bank1
  1453  0094  1303               	bcf	3,6	;RP1=0, select bank1
  1454  0095  00A0               	movwf	??_main^(0+128)
  1455  0096  0820               	movf	??_main^(0+128),w
  1456  0097  07F8               	addwf	_k,f
  1457  0098  300E               	movlw	14
  1458  0099  0278               	subwf	_k,w
  1459  009A  1C03               	skipc
  1460  009B  287F               	goto	l3987
  1461                           
  1462                           ;mainMaster.c: 93:     _delay((unsigned long)((5000)*(8000000/4000.0)));
  1463  009C  3033               	movlw	51
  1464  009D  1683               	bsf	3,5	;RP0=1, select bank1
  1465  009E  1303               	bcf	3,6	;RP1=0, select bank1
  1466  009F  00A2               	movwf	(??_main^(0+128)+2)
  1467  00A0  30BB               	movlw	187
  1468  00A1  00A1               	movwf	(??_main^(0+128)+1)
  1469  00A2  30DF               	movlw	223
  1470  00A3  00A0               	movwf	??_main^(0+128)
  1471  00A4                     u4887:	
  1472  00A4  0BA0               	decfsz	??_main^(0+128),f
  1473  00A5  28A4               	goto	u4887
  1474  00A6  0BA1               	decfsz	(??_main^(0+128)+1),f
  1475  00A7  28A4               	goto	u4887
  1476  00A8  0BA2               	decfsz	(??_main^(0+128)+2),f
  1477  00A9  28A4               	goto	u4887
  1478                           
  1479                           ;mainMaster.c: 94:     Lcd_Clear();
  1480  00AA  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  1481  00AF                     l3999:	
  1482                           
  1483                           ;mainMaster.c: 99:         get_temp(temp);
  1484  00AF  303B               	movlw	(low (_temp| 0))& (0+255)
  1485  00B0  120A  158A  2595  120A  118A  	fcall	_get_temp
  1486                           
  1487                           ;mainMaster.c: 100:         door = get_hall();
  1488  00B5  160A  118A  27BA  120A  118A  	fcall	_get_hall
  1489  00BA  1683               	bsf	3,5	;RP0=1, select bank1
  1490  00BB  1303               	bcf	3,6	;RP1=0, select bank1
  1491  00BC  00A0               	movwf	??_main^(0+128)
  1492  00BD  0820               	movf	??_main^(0+128),w
  1493  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  1494  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  1495  00C0  00BA               	movwf	_door
  1496                           
  1497                           ;mainMaster.c: 101:         trip = get_tripwire();
  1498  00C1  160A  118A  27DD  120A  118A  	fcall	_get_tripwire
  1499  00C6  1683               	bsf	3,5	;RP0=1, select bank1
  1500  00C7  1303               	bcf	3,6	;RP1=0, select bank1
  1501  00C8  00A0               	movwf	??_main^(0+128)
  1502  00C9  0820               	movf	??_main^(0+128),w
  1503  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  1504  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  1505  00CC  00B9               	movwf	_trip
  1506                           
  1507                           ;mainMaster.c: 103:         PIR = get_PIR();
  1508  00CD  160A  118A  2797  120A  118A  	fcall	_get_PIR
  1509  00D2  1683               	bsf	3,5	;RP0=1, select bank1
  1510  00D3  1303               	bcf	3,6	;RP1=0, select bank1
  1511  00D4  00A0               	movwf	??_main^(0+128)
  1512  00D5  0820               	movf	??_main^(0+128),w
  1513  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  1514  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  1515  00D8  00B8               	movwf	_PIR
  1516                           
  1517                           ;mainMaster.c: 104:         IR = get_IR();
  1518  00D9  160A  118A  2774  120A  118A  	fcall	_get_IR
  1519  00DE  1683               	bsf	3,5	;RP0=1, select bank1
  1520  00DF  1303               	bcf	3,6	;RP1=0, select bank1
  1521  00E0  00A0               	movwf	??_main^(0+128)
  1522  00E1  0820               	movf	??_main^(0+128),w
  1523  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1524  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1525  00E4  00B7               	movwf	_IR
  1526                           
  1527                           ;mainMaster.c: 105:         get_time(time);
  1528  00E5  3041               	movlw	(low (_time| 0))& (0+255)
  1529  00E6  120A  158A  247D  120A  118A  	fcall	_get_time
  1530                           
  1531                           ;mainMaster.c: 106:         day1 = get_day();
  1532  00EB  120A  158A  2163  120A  118A  	fcall	_get_day
  1533  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  1534  00F1  1303               	bcf	3,6	;RP1=0, select bank1
  1535  00F2  00A0               	movwf	??_main^(0+128)
  1536  00F3  0820               	movf	??_main^(0+128),w
  1537  00F4  00F9               	movwf	_day1
  1538                           
  1539                           ;mainMaster.c: 107:         bank = get_tripwire();
  1540  00F5  160A  118A  27DD  120A  118A  	fcall	_get_tripwire
  1541  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  1542  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  1543  00FC  00A0               	movwf	??_main^(0+128)
  1544  00FD  0820               	movf	??_main^(0+128),w
  1545  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  1546  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  1547  0100  00AE               	movwf	_bank
  1548                           
  1549                           ;mainMaster.c: 110:         if(PORTDbits.RD7 == 1){
  1550  0101  1F88               	btfss	8,7	;volatile
  1551  0102  293E               	goto	l323
  1552                           
  1553                           ;mainMaster.c: 111:             if (bank == 2){
  1554  0103  3002               	movlw	2
  1555  0104  062E               	xorwf	_bank,w
  1556  0105  1D03               	btfss	3,2
  1557  0106  2922               	goto	l4029
  1558                           
  1559                           ;mainMaster.c: 112:                 if (change1 == 0){
  1560  0107  0833               	movf	_change1,w
  1561  0108  1D03               	btfss	3,2
  1562  0109  2940               	goto	l4043
  1563                           
  1564                           ;mainMaster.c: 115:                     open_door();
  1565  010A  160A  118A  273A  120A  118A  	fcall	_open_door
  1566                           
  1567                           ;mainMaster.c: 116:                     j = 0;
  1568  010F  1283               	bcf	3,5	;RP0=0, select bank0
  1569  0110  1303               	bcf	3,6	;RP1=0, select bank0
  1570  0111  01B5               	clrf	_j
  1571  0112                     l4027:	
  1572                           ;mainMaster.c: 117:                     while(j < 50){
  1573                           
  1574                           
  1575                           ;mainMaster.c: 117:                     while(j < 50){
  1576  0112  3032               	movlw	50
  1577  0113  0235               	subwf	_j,w
  1578  0114  1803               	btfsc	3,0
  1579  0115  291F               	goto	l328
  1580                           
  1581                           ;mainMaster.c: 118:                         j++;
  1582  0116  3001               	movlw	1
  1583  0117  1683               	bsf	3,5	;RP0=1, select bank1
  1584  0118  1303               	bcf	3,6	;RP1=0, select bank1
  1585  0119  00A0               	movwf	??_main^(0+128)
  1586  011A  0820               	movf	??_main^(0+128),w
  1587  011B  1283               	bcf	3,5	;RP0=0, select bank0
  1588  011C  1303               	bcf	3,6	;RP1=0, select bank0
  1589  011D  07B5               	addwf	_j,f
  1590  011E  2912               	goto	l4027
  1591  011F                     l328:	
  1592                           
  1593                           ;mainMaster.c: 121:                     change1 = 1;
  1594  011F  01B3               	clrf	_change1
  1595  0120  0AB3               	incf	_change1,f
  1596  0121  2940               	goto	l4043
  1597  0122                     l4029:	
  1598  0122  3003               	movlw	3
  1599  0123  062E               	xorwf	_bank,w
  1600  0124  1D03               	btfss	3,2
  1601  0125  2940               	goto	l4043
  1602                           
  1603                           ;mainMaster.c: 124:                 if (change1 == 0){
  1604  0126  0833               	movf	_change1,w
  1605  0127  1D03               	btfss	3,2
  1606  0128  2940               	goto	l4043
  1607                           
  1608                           ;mainMaster.c: 127:                     close_door();
  1609  0129  160A  118A  271F  120A  118A  	fcall	_close_door
  1610                           
  1611                           ;mainMaster.c: 128:                     j = 0;
  1612  012E  1283               	bcf	3,5	;RP0=0, select bank0
  1613  012F  1303               	bcf	3,6	;RP1=0, select bank0
  1614  0130  01B5               	clrf	_j
  1615  0131                     l4039:	
  1616                           ;mainMaster.c: 129:                     while(j < 50){
  1617                           
  1618                           
  1619                           ;mainMaster.c: 129:                     while(j < 50){
  1620  0131  3032               	movlw	50
  1621  0132  0235               	subwf	_j,w
  1622  0133  1803               	btfsc	3,0
  1623  0134  291F               	goto	l328
  1624                           
  1625                           ;mainMaster.c: 130:                         j++;
  1626  0135  3001               	movlw	1
  1627  0136  1683               	bsf	3,5	;RP0=1, select bank1
  1628  0137  1303               	bcf	3,6	;RP1=0, select bank1
  1629  0138  00A0               	movwf	??_main^(0+128)
  1630  0139  0820               	movf	??_main^(0+128),w
  1631  013A  1283               	bcf	3,5	;RP0=0, select bank0
  1632  013B  1303               	bcf	3,6	;RP1=0, select bank0
  1633  013C  07B5               	addwf	_j,f
  1634  013D  2931               	goto	l4039
  1635  013E                     l323:	
  1636                           ;mainMaster.c: 136:         } else if(PORTDbits.RD7 == 0){
  1637                           
  1638  013E  1F88               	btfss	8,7	;volatile
  1639                           
  1640                           ;mainMaster.c: 137:             change1 = 0;
  1641  013F  01B3               	clrf	_change1
  1642  0140                     l4043:	
  1643                           
  1644                           ;mainMaster.c: 140:         if (alarm == 0 & seguridad == 1){
  1645  0140  082F               	movf	_alarm,w
  1646  0141  1D03               	btfss	3,2
  1647  0142  2950               	goto	l337
  1648  0143  0329               	decf	_seguridad,w
  1649  0144  1D03               	btfss	3,2
  1650  0145  2950               	goto	l337
  1651                           
  1652                           ;mainMaster.c: 141:             alarm = trip | PIR | IR;
  1653  0146  0839               	movf	_trip,w
  1654  0147  0438               	iorwf	_PIR,w
  1655  0148  0437               	iorwf	_IR,w
  1656  0149  1683               	bsf	3,5	;RP0=1, select bank1
  1657  014A  1303               	bcf	3,6	;RP1=0, select bank1
  1658  014B  00A0               	movwf	??_main^(0+128)
  1659  014C  0820               	movf	??_main^(0+128),w
  1660  014D  1283               	bcf	3,5	;RP0=0, select bank0
  1661  014E  1303               	bcf	3,6	;RP1=0, select bank0
  1662  014F  00AF               	movwf	_alarm
  1663  0150                     l337:	
  1664                           ;mainMaster.c: 142:         }
  1665                           
  1666                           
  1667                           ;mainMaster.c: 146:         if (alarm == 1){
  1668  0150  032F               	decf	_alarm,w
  1669  0151  1D03               	btfss	3,2
  1670  0152  2961               	goto	l338
  1671                           
  1672                           ;mainMaster.c: 148:             if (change2 == 0){
  1673  0153  0832               	movf	_change2,w
  1674  0154  1D03               	btfss	3,2
  1675  0155  2963               	goto	l4059
  1676                           
  1677                           ;mainMaster.c: 149:                 change2 = 1;
  1678  0156  01B2               	clrf	_change2
  1679  0157  0AB2               	incf	_change2,f
  1680                           
  1681                           ;mainMaster.c: 150:                 close_door();
  1682  0158  160A  118A  271F  120A  118A  	fcall	_close_door
  1683                           
  1684                           ;mainMaster.c: 151:                 PORTAbits.RA6 = 1;
  1685  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1686  015E  1303               	bcf	3,6	;RP1=0, select bank0
  1687  015F  1705               	bsf	5,6	;volatile
  1688  0160  2963               	goto	l4059
  1689  0161                     l338:	
  1690                           ;mainMaster.c: 155:         else {
  1691                           
  1692                           
  1693                           ;mainMaster.c: 156:             PORTAbits.RA6 = 0;
  1694  0161  1305               	bcf	5,6	;volatile
  1695                           
  1696                           ;mainMaster.c: 157:             change2 = 0;
  1697  0162  01B2               	clrf	_change2
  1698  0163                     l4059:	
  1699                           
  1700                           ;mainMaster.c: 161:         if (PORTDbits.RD6 == 1){
  1701  0163  1F08               	btfss	8,6	;volatile
  1702  0164  2972               	goto	l4071
  1703                           
  1704                           ;mainMaster.c: 162:             if (change3 == 0){
  1705  0165  0831               	movf	_change3,w
  1706  0166  1D03               	btfss	3,2
  1707  0167  2973               	goto	l4073
  1708                           
  1709                           ;mainMaster.c: 163:                 if (alarm == 0){
  1710  0168  082F               	movf	_alarm,w
  1711  0169  1D03               	btfss	3,2
  1712  016A  296E               	goto	l4067
  1713                           
  1714                           ;mainMaster.c: 164:                     alarm = 1;
  1715  016B  01AF               	clrf	_alarm
  1716  016C  0AAF               	incf	_alarm,f
  1717                           
  1718                           ;mainMaster.c: 165:                 }else {
  1719  016D  296F               	goto	l4069
  1720  016E                     l4067:	
  1721                           
  1722                           ;mainMaster.c: 166:                     alarm = 0;
  1723  016E  01AF               	clrf	_alarm
  1724  016F                     l4069:	
  1725                           
  1726                           ;mainMaster.c: 168:                 change3 = 1;
  1727  016F  01B1               	clrf	_change3
  1728  0170  0AB1               	incf	_change3,f
  1729  0171  2973               	goto	l4073
  1730  0172                     l4071:	
  1731                           
  1732                           ;mainMaster.c: 173:             change3 = 0;
  1733  0172  01B1               	clrf	_change3
  1734  0173                     l4073:	
  1735                           
  1736                           ;mainMaster.c: 177:         SSPCONbits.SSPEN = 0;
  1737  0173  1294               	bcf	20,5	;volatile
  1738                           
  1739                           ;mainMaster.c: 178:         RCSTAbits.SPEN = 1;
  1740  0174  1798               	bsf	24,7	;volatile
  1741                           
  1742                           ;mainMaster.c: 180:         if (UART_TX_Empty()){
  1743  0175  160A  118A  268C  120A  118A  	fcall	_UART_TX_Empty
  1744  017A  3A00               	xorlw	0
  1745  017B  1903               	skipnz
  1746  017C  2A2F               	goto	l4107
  1747                           
  1748                           ;mainMaster.c: 181:             UART_Write(temp[0]);
  1749  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1750  017E  1303               	bcf	3,6	;RP1=0, select bank0
  1751  017F  083B               	movf	_temp,w
  1752  0180  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1753                           
  1754                           ;mainMaster.c: 182:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1755  0185  3003               	movlw	3
  1756  0186  1683               	bsf	3,5	;RP0=1, select bank1
  1757  0187  1303               	bcf	3,6	;RP1=0, select bank1
  1758  0188  00A1               	movwf	(??_main^(0+128)+1)
  1759  0189  3097               	movlw	151
  1760  018A  00A0               	movwf	??_main^(0+128)
  1761  018B                     u4897:	
  1762  018B  0BA0               	decfsz	??_main^(0+128),f
  1763  018C  298B               	goto	u4897
  1764  018D  0BA1               	decfsz	(??_main^(0+128)+1),f
  1765  018E  298B               	goto	u4897
  1766                           
  1767                           ;mainMaster.c: 183:             UART_Write(temp[1]);
  1768  018F  1283               	bcf	3,5	;RP0=0, select bank0
  1769  0190  1303               	bcf	3,6	;RP1=0, select bank0
  1770  0191  083C               	movf	_temp+1,w
  1771  0192  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1772                           
  1773                           ;mainMaster.c: 184:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1774  0197  3003               	movlw	3
  1775  0198  1683               	bsf	3,5	;RP0=1, select bank1
  1776  0199  1303               	bcf	3,6	;RP1=0, select bank1
  1777  019A  00A1               	movwf	(??_main^(0+128)+1)
  1778  019B  3097               	movlw	151
  1779  019C  00A0               	movwf	??_main^(0+128)
  1780  019D                     u4907:	
  1781  019D  0BA0               	decfsz	??_main^(0+128),f
  1782  019E  299D               	goto	u4907
  1783  019F  0BA1               	decfsz	(??_main^(0+128)+1),f
  1784  01A0  299D               	goto	u4907
  1785                           
  1786                           ;mainMaster.c: 185:             UART_Write(temp[2]);
  1787  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  1788  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  1789  01A3  083D               	movf	_temp+2,w
  1790  01A4  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1791                           
  1792                           ;mainMaster.c: 186:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1793  01A9  3003               	movlw	3
  1794  01AA  1683               	bsf	3,5	;RP0=1, select bank1
  1795  01AB  1303               	bcf	3,6	;RP1=0, select bank1
  1796  01AC  00A1               	movwf	(??_main^(0+128)+1)
  1797  01AD  3097               	movlw	151
  1798  01AE  00A0               	movwf	??_main^(0+128)
  1799  01AF                     u4917:	
  1800  01AF  0BA0               	decfsz	??_main^(0+128),f
  1801  01B0  29AF               	goto	u4917
  1802  01B1  0BA1               	decfsz	(??_main^(0+128)+1),f
  1803  01B2  29AF               	goto	u4917
  1804                           
  1805                           ;mainMaster.c: 187:             UART_Write(temp[3]);
  1806  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  1807  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  1808  01B5  083E               	movf	_temp+3,w
  1809  01B6  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1810                           
  1811                           ;mainMaster.c: 188:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1812  01BB  3003               	movlw	3
  1813  01BC  1683               	bsf	3,5	;RP0=1, select bank1
  1814  01BD  1303               	bcf	3,6	;RP1=0, select bank1
  1815  01BE  00A1               	movwf	(??_main^(0+128)+1)
  1816  01BF  3097               	movlw	151
  1817  01C0  00A0               	movwf	??_main^(0+128)
  1818  01C1                     u4927:	
  1819  01C1  0BA0               	decfsz	??_main^(0+128),f
  1820  01C2  29C1               	goto	u4927
  1821  01C3  0BA1               	decfsz	(??_main^(0+128)+1),f
  1822  01C4  29C1               	goto	u4927
  1823                           
  1824                           ;mainMaster.c: 189:             UART_Write(temp[4]);
  1825  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  1826  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  1827  01C7  083F               	movf	_temp+4,w
  1828  01C8  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1829                           
  1830                           ;mainMaster.c: 190:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1831  01CD  3003               	movlw	3
  1832  01CE  1683               	bsf	3,5	;RP0=1, select bank1
  1833  01CF  1303               	bcf	3,6	;RP1=0, select bank1
  1834  01D0  00A1               	movwf	(??_main^(0+128)+1)
  1835  01D1  3097               	movlw	151
  1836  01D2  00A0               	movwf	??_main^(0+128)
  1837  01D3                     u4937:	
  1838  01D3  0BA0               	decfsz	??_main^(0+128),f
  1839  01D4  29D3               	goto	u4937
  1840  01D5  0BA1               	decfsz	(??_main^(0+128)+1),f
  1841  01D6  29D3               	goto	u4937
  1842                           
  1843                           ;mainMaster.c: 191:             UART_Write(door);
  1844  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  1845  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  1846  01D9  083A               	movf	_door,w
  1847  01DA  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1848                           
  1849                           ;mainMaster.c: 192:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1850  01DF  3003               	movlw	3
  1851  01E0  1683               	bsf	3,5	;RP0=1, select bank1
  1852  01E1  1303               	bcf	3,6	;RP1=0, select bank1
  1853  01E2  00A1               	movwf	(??_main^(0+128)+1)
  1854  01E3  3097               	movlw	151
  1855  01E4  00A0               	movwf	??_main^(0+128)
  1856  01E5                     u4947:	
  1857  01E5  0BA0               	decfsz	??_main^(0+128),f
  1858  01E6  29E5               	goto	u4947
  1859  01E7  0BA1               	decfsz	(??_main^(0+128)+1),f
  1860  01E8  29E5               	goto	u4947
  1861                           
  1862                           ;mainMaster.c: 193:             UART_Write(alarm);
  1863  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  1864  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  1865  01EB  082F               	movf	_alarm,w
  1866  01EC  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1867                           
  1868                           ;mainMaster.c: 194:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1869  01F1  3003               	movlw	3
  1870  01F2  1683               	bsf	3,5	;RP0=1, select bank1
  1871  01F3  1303               	bcf	3,6	;RP1=0, select bank1
  1872  01F4  00A1               	movwf	(??_main^(0+128)+1)
  1873  01F5  3097               	movlw	151
  1874  01F6  00A0               	movwf	??_main^(0+128)
  1875  01F7                     u4957:	
  1876  01F7  0BA0               	decfsz	??_main^(0+128),f
  1877  01F8  29F7               	goto	u4957
  1878  01F9  0BA1               	decfsz	(??_main^(0+128)+1),f
  1879  01FA  29F7               	goto	u4957
  1880                           
  1881                           ;mainMaster.c: 195:             UART_Write(bank);
  1882  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  1883  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  1884  01FD  082E               	movf	_bank,w
  1885  01FE  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1886                           
  1887                           ;mainMaster.c: 196:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1888  0203  3003               	movlw	3
  1889  0204  1683               	bsf	3,5	;RP0=1, select bank1
  1890  0205  1303               	bcf	3,6	;RP1=0, select bank1
  1891  0206  00A1               	movwf	(??_main^(0+128)+1)
  1892  0207  3097               	movlw	151
  1893  0208  00A0               	movwf	??_main^(0+128)
  1894  0209                     u4967:	
  1895  0209  0BA0               	decfsz	??_main^(0+128),f
  1896  020A  2A09               	goto	u4967
  1897  020B  0BA1               	decfsz	(??_main^(0+128)+1),f
  1898  020C  2A09               	goto	u4967
  1899                           
  1900                           ;mainMaster.c: 197:             UART_Write(seguridad);
  1901  020D  1283               	bcf	3,5	;RP0=0, select bank0
  1902  020E  1303               	bcf	3,6	;RP1=0, select bank0
  1903  020F  0829               	movf	_seguridad,w
  1904  0210  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1905                           
  1906                           ;mainMaster.c: 198:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1907  0215  3003               	movlw	3
  1908  0216  1683               	bsf	3,5	;RP0=1, select bank1
  1909  0217  1303               	bcf	3,6	;RP1=0, select bank1
  1910  0218  00A1               	movwf	(??_main^(0+128)+1)
  1911  0219  3097               	movlw	151
  1912  021A  00A0               	movwf	??_main^(0+128)
  1913  021B                     u4977:	
  1914  021B  0BA0               	decfsz	??_main^(0+128),f
  1915  021C  2A1B               	goto	u4977
  1916  021D  0BA1               	decfsz	(??_main^(0+128)+1),f
  1917  021E  2A1B               	goto	u4977
  1918                           
  1919                           ;mainMaster.c: 199:             UART_Write('A');
  1920  021F  3041               	movlw	65
  1921  0220  160A  118A  26C0  120A  118A  	fcall	_UART_Write
  1922                           
  1923                           ;mainMaster.c: 200:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1924  0225  3003               	movlw	3
  1925  0226  1683               	bsf	3,5	;RP0=1, select bank1
  1926  0227  1303               	bcf	3,6	;RP1=0, select bank1
  1927  0228  00A1               	movwf	(??_main^(0+128)+1)
  1928  0229  3097               	movlw	151
  1929  022A  00A0               	movwf	??_main^(0+128)
  1930  022B                     u4987:	
  1931  022B  0BA0               	decfsz	??_main^(0+128),f
  1932  022C  2A2B               	goto	u4987
  1933  022D  0BA1               	decfsz	(??_main^(0+128)+1),f
  1934  022E  2A2B               	goto	u4987
  1935  022F                     l4107:	
  1936                           
  1937                           ;mainMaster.c: 203:         RCSTAbits.SPEN = 0;
  1938  022F  1283               	bcf	3,5	;RP0=0, select bank0
  1939  0230  1303               	bcf	3,6	;RP1=0, select bank0
  1940  0231  1398               	bcf	24,7	;volatile
  1941                           
  1942                           ;mainMaster.c: 204:         SSPCONbits.SSPEN = 1;
  1943  0232  1694               	bsf	20,5	;volatile
  1944                           
  1945                           ;mainMaster.c: 206:         if (door == 1){
  1946  0233  033A               	decf	_door,w
  1947  0234  1D03               	btfss	3,2
  1948  0235  2A38               	goto	l4115
  1949                           
  1950                           ;mainMaster.c: 207:             val = 8;
  1951  0236  3008               	movlw	8
  1952  0237  2A3C               	goto	L1
  1953  0238                     l4115:	
  1954                           ;mainMaster.c: 208:         } else if (door == 0){
  1955                           
  1956  0238  083A               	movf	_door,w
  1957  0239  1D03               	btfss	3,2
  1958  023A  2A75               	goto	l4137
  1959                           
  1960                           ;mainMaster.c: 209:             val = 16;
  1961  023B  3010               	movlw	16
  1962  023C                     L1:	
  1963  023C  1683               	bsf	3,5	;RP0=1, select bank1
  1964  023D  1303               	bcf	3,6	;RP1=0, select bank1
  1965  023E  00A0               	movwf	??_main^(0+128)
  1966  023F  0820               	movf	??_main^(0+128),w
  1967  0240  1283               	bcf	3,5	;RP0=0, select bank0
  1968  0241  1303               	bcf	3,6	;RP1=0, select bank0
  1969  0242  00AC               	movwf	_val
  1970  0243  2A75               	goto	l4137
  1971  0244                     l4119:	
  1972                           
  1973                           ;mainMaster.c: 214:                 day2 = "LUNES    ";
  1974  0244  3079               	movlw	low (STR_2| (0+32768))
  1975  0245  1283               	bcf	3,5	;RP0=0, select bank0
  1976  0246  1303               	bcf	3,6	;RP1=0, select bank0
  1977  0247  00A5               	movwf	_day2
  1978  0248  3087               	movlw	high (STR_2| (0+32768))
  1979  0249  2A73               	goto	L8
  1980  024A                     l4121:	
  1981                           ;mainMaster.c: 215:                 break;
  1982                           
  1983                           
  1984                           ;mainMaster.c: 217:                 day2 = "MARTES   ";
  1985  024A  308D               	movlw	low (STR_3| (0+32768))
  1986  024B  1283               	bcf	3,5	;RP0=0, select bank0
  1987  024C  1303               	bcf	3,6	;RP1=0, select bank0
  1988  024D  00A5               	movwf	_day2
  1989  024E  3087               	movlw	high (STR_3| (0+32768))
  1990  024F  2A73               	goto	L8
  1991  0250                     l4123:	
  1992                           ;mainMaster.c: 218:                 break;
  1993                           
  1994                           
  1995                           ;mainMaster.c: 220:                 day2 = "MIERCOLES";
  1996  0250  30BF               	movlw	low (STR_4| (0+32768))
  1997  0251  1283               	bcf	3,5	;RP0=0, select bank0
  1998  0252  1303               	bcf	3,6	;RP1=0, select bank0
  1999  0253  00A5               	movwf	_day2
  2000  0254  3087               	movlw	high (STR_4| (0+32768))
  2001  0255  2A73               	goto	L8
  2002  0256                     l4125:	
  2003                           ;mainMaster.c: 221:                 break;
  2004                           
  2005                           
  2006                           ;mainMaster.c: 223:                 day2 = "JUEVES   ";
  2007  0256  3097               	movlw	low (STR_5| (0+32768))
  2008  0257  1283               	bcf	3,5	;RP0=0, select bank0
  2009  0258  1303               	bcf	3,6	;RP1=0, select bank0
  2010  0259  00A5               	movwf	_day2
  2011  025A  3087               	movlw	high (STR_5| (0+32768))
  2012  025B  2A73               	goto	L8
  2013  025C                     l4127:	
  2014                           ;mainMaster.c: 224:                 break;
  2015                           
  2016                           
  2017                           ;mainMaster.c: 226:                 day2 = "VIERNES  ";
  2018  025C  30AB               	movlw	low (STR_6| (0+32768))
  2019  025D  1283               	bcf	3,5	;RP0=0, select bank0
  2020  025E  1303               	bcf	3,6	;RP1=0, select bank0
  2021  025F  00A5               	movwf	_day2
  2022  0260  3087               	movlw	high (STR_6| (0+32768))
  2023  0261  2A73               	goto	L8
  2024  0262                     l4129:	
  2025                           ;mainMaster.c: 227:                 break;
  2026                           
  2027                           
  2028                           ;mainMaster.c: 229:                 day2 = "SABADO   ";
  2029  0262  3083               	movlw	low (STR_7| (0+32768))
  2030  0263  1283               	bcf	3,5	;RP0=0, select bank0
  2031  0264  1303               	bcf	3,6	;RP1=0, select bank0
  2032  0265  00A5               	movwf	_day2
  2033  0266  3087               	movlw	high (STR_7| (0+32768))
  2034  0267  2A73               	goto	L8
  2035  0268                     l4131:	
  2036                           ;mainMaster.c: 230:                 break;
  2037                           
  2038                           
  2039                           ;mainMaster.c: 232:                 day2 = "DOMINGO  ";
  2040  0268  30A1               	movlw	low (STR_8| (0+32768))
  2041  0269  1283               	bcf	3,5	;RP0=0, select bank0
  2042  026A  1303               	bcf	3,6	;RP1=0, select bank0
  2043  026B  00A5               	movwf	_day2
  2044  026C  3087               	movlw	high (STR_8| (0+32768))
  2045  026D  2A73               	goto	L8
  2046  026E                     l4133:	
  2047                           ;mainMaster.c: 233:                 break;
  2048                           
  2049                           
  2050                           ;mainMaster.c: 235:                 day2 = "         ";
  2051  026E  303E               	movlw	low ((STR_29+3)| (0+32768))
  2052  026F  1283               	bcf	3,5	;RP0=0, select bank0
  2053  0270  1303               	bcf	3,6	;RP1=0, select bank0
  2054  0271  00A5               	movwf	_day2
  2055  0272  3087               	movlw	high ((STR_29+3)| (0+32768))
  2056  0273                     L8:	
  2057  0273  00A6               	movwf	_day2+1
  2058                           
  2059                           ;mainMaster.c: 236:                 break;
  2060  0274  2A96               	goto	l4139
  2061  0275                     l4137:	
  2062  0275  0879               	movf	_day1,w
  2063  0276  1683               	bsf	3,5	;RP0=1, select bank1
  2064  0277  1303               	bcf	3,6	;RP1=0, select bank1
  2065  0278  00A0               	movwf	??_main^(0+128)
  2066  0279  01A1               	clrf	(??_main^(0+128)+1)
  2067                           
  2068                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2069                           ; Switch size 1, requested type "simple"
  2070                           ; Number of cases is 1, Range of values is 0 to 0
  2071                           ; switch strategies available:
  2072                           ; Name         Instructions Cycles
  2073                           ; simple_byte            4     3 (average)
  2074                           ; direct_byte           11     8 (fixed)
  2075                           ; jumptable            260     6 (fixed)
  2076                           ;	Chosen strategy is simple_byte
  2077  027A  0821               	movf	(??_main+1)^(0+128),w
  2078  027B  3A00               	xorlw	0	; case 0
  2079  027C  1903               	skipnz
  2080  027D  2A7F               	goto	l4491
  2081  027E  2A6E               	goto	l4133
  2082  027F                     l4491:	
  2083                           
  2084                           ; Switch size 1, requested type "simple"
  2085                           ; Number of cases is 7, Range of values is 1 to 7
  2086                           ; switch strategies available:
  2087                           ; Name         Instructions Cycles
  2088                           ; simple_byte           22    12 (average)
  2089                           ; direct_byte           32    11 (fixed)
  2090                           ; jumptable            263     9 (fixed)
  2091                           ;	Chosen strategy is simple_byte
  2092  027F  0820               	movf	??_main^(0+128),w
  2093  0280  3A01               	xorlw	1	; case 1
  2094  0281  1903               	skipnz
  2095  0282  2A44               	goto	l4119
  2096  0283  3A03               	xorlw	3	; case 2
  2097  0284  1903               	skipnz
  2098  0285  2A4A               	goto	l4121
  2099  0286  3A01               	xorlw	1	; case 3
  2100  0287  1903               	skipnz
  2101  0288  2A50               	goto	l4123
  2102  0289  3A07               	xorlw	7	; case 4
  2103  028A  1903               	skipnz
  2104  028B  2A56               	goto	l4125
  2105  028C  3A01               	xorlw	1	; case 5
  2106  028D  1903               	skipnz
  2107  028E  2A5C               	goto	l4127
  2108  028F  3A03               	xorlw	3	; case 6
  2109  0290  1903               	skipnz
  2110  0291  2A62               	goto	l4129
  2111  0292  3A01               	xorlw	1	; case 7
  2112  0293  1903               	skipnz
  2113  0294  2A68               	goto	l4131
  2114  0295  2A6E               	goto	l4133
  2115  0296                     l4139:	
  2116                           
  2117                           ;mainMaster.c: 240:         if (strcmp(temp,"23.50") > 0){
  2118  0296  3016               	movlw	low (STR_10| (0+32768))
  2119  0297  00F3               	movwf	strcmp@s2
  2120  0298  3088               	movlw	high (STR_10| (0+32768))
  2121  0299  00F4               	movwf	strcmp@s2+1
  2122  029A  303B               	movlw	(low (_temp| 0))& (0+255)
  2123  029B  120A  158A  208E  120A  118A  	fcall	_strcmp
  2124  02A0  0874               	movf	?_strcmp+1,w
  2125  02A1  3A80               	xorlw	128
  2126  02A2  00FF               	movwf	127
  2127  02A3  3080               	movlw	128
  2128  02A4  027F               	subwf	127,w
  2129  02A5  1D03               	skipz
  2130  02A6  2AA9               	goto	u4305
  2131  02A7  3001               	movlw	1
  2132  02A8  0273               	subwf	?_strcmp,w
  2133  02A9                     u4305:	
  2134  02A9  1C03               	skipc
  2135  02AA  2AAF               	goto	l360
  2136                           
  2137                           ;mainMaster.c: 241:             PORTAbits.RA0 = 1;
  2138  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  2139  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  2140  02AD  1405               	bsf	5,0	;volatile
  2141                           
  2142                           ;mainMaster.c: 242:         } else {
  2143  02AE  2AB2               	goto	l4143
  2144  02AF                     l360:	
  2145                           
  2146                           ;mainMaster.c: 243:             PORTAbits.RA0 = 0;
  2147  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  2148  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  2149  02B1  1005               	bcf	5,0	;volatile
  2150  02B2                     l4143:	
  2151                           
  2152                           ;mainMaster.c: 246:         if ((strcmp(time, "22:00") == 0) & ((day1 != 6) | (day1 != 7
      +                          ))){
  2153  02B2  3010               	movlw	low (STR_11| (0+32768))
  2154  02B3  00F3               	movwf	strcmp@s2
  2155  02B4  3088               	movlw	high (STR_11| (0+32768))
  2156  02B5  00F4               	movwf	strcmp@s2+1
  2157  02B6  3041               	movlw	(low (_time| 0))& (0+255)
  2158  02B7  120A  158A  208E  120A  118A  	fcall	_strcmp
  2159  02BC  0873               	movf	?_strcmp,w
  2160  02BD  0474               	iorwf	?_strcmp+1,w
  2161  02BE  1D03               	btfss	3,2
  2162  02BF  2AC8               	goto	l4151
  2163  02C0  3006               	movlw	6
  2164  02C1  0679               	xorwf	_day1,w
  2165  02C2  1D03               	btfss	3,2
  2166  02C3  2ADE               	goto	l4149
  2167  02C4  3007               	movlw	7
  2168  02C5  0679               	xorwf	_day1,w
  2169  02C6  1D03               	btfss	3,2
  2170  02C7  2ADE               	goto	l4149
  2171  02C8                     l4151:	
  2172                           ;mainMaster.c: 248:         } else if ((strcmp(time, "21:00") == 0) & ((day1 == 6) | (da
      +                          y1 == 7))){
  2173                           
  2174  02C8  300A               	movlw	low (STR_12| (0+32768))
  2175  02C9  00F3               	movwf	strcmp@s2
  2176  02CA  3088               	movlw	high (STR_12| (0+32768))
  2177  02CB  00F4               	movwf	strcmp@s2+1
  2178  02CC  3041               	movlw	(low (_time| 0))& (0+255)
  2179  02CD  120A  158A  208E  120A  118A  	fcall	_strcmp
  2180  02D2  0873               	movf	?_strcmp,w
  2181  02D3  0474               	iorwf	?_strcmp+1,w
  2182  02D4  1D03               	btfss	3,2
  2183  02D5  2AE3               	goto	l4159
  2184  02D6  3006               	movlw	6
  2185  02D7  0679               	xorwf	_day1,w
  2186  02D8  1903               	btfsc	3,2
  2187  02D9  2ADE               	goto	l4149
  2188  02DA  3007               	movlw	7
  2189  02DB  0679               	xorwf	_day1,w
  2190  02DC  1D03               	btfss	3,2
  2191  02DD  2AE3               	goto	l4159
  2192  02DE                     l4149:	
  2193                           
  2194                           ;mainMaster.c: 247:             close_door();
  2195  02DE  160A  118A  271F  120A  118A  	fcall	_close_door
  2196  02E3                     l4159:	
  2197                           
  2198                           ;mainMaster.c: 253:         if(PORTCbits.RC0 == 1){
  2199  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  2200  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  2201  02E5  1C07               	btfss	7,0	;volatile
  2202  02E6  2B10               	goto	l4177
  2203                           
  2204                           ;mainMaster.c: 254:             if (change == 0){
  2205  02E7  0834               	movf	_change,w
  2206  02E8  1D03               	btfss	3,2
  2207  02E9  2B11               	goto	l4179
  2208                           
  2209                           ;mainMaster.c: 255:                 state++;
  2210  02EA  3001               	movlw	1
  2211  02EB  1683               	bsf	3,5	;RP0=1, select bank1
  2212  02EC  1303               	bcf	3,6	;RP1=0, select bank1
  2213  02ED  00A0               	movwf	??_main^(0+128)
  2214  02EE  0820               	movf	??_main^(0+128),w
  2215  02EF  07FA               	addwf	_state,f
  2216                           
  2217                           ;mainMaster.c: 256:                 if (state == 4){
  2218  02F0  3004               	movlw	4
  2219  02F1  067A               	xorwf	_state,w
  2220  02F2  1903               	btfsc	3,2
  2221                           
  2222                           ;mainMaster.c: 257:                     k = 0;
  2223  02F3  01F8               	clrf	_k
  2224                           
  2225                           ;mainMaster.c: 259:                 Lcd_Clear();
  2226  02F4  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  2227                           
  2228                           ;mainMaster.c: 260:                 if (state > 4){
  2229  02F9  3005               	movlw	5
  2230  02FA  027A               	subwf	_state,w
  2231  02FB  1803               	btfsc	3,0
  2232                           
  2233                           ;mainMaster.c: 261:                     state = 0;
  2234  02FC  01FA               	clrf	_state
  2235                           
  2236                           ;mainMaster.c: 263:                 j = 0;
  2237                           
  2238                           ;mainMaster.c: 262:                 }
  2239  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  2240  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  2241  02FF  01B5               	clrf	_j
  2242  0300                     l4175:	
  2243                           ;mainMaster.c: 264:                 while(j < 50){
  2244                           
  2245                           
  2246                           ;mainMaster.c: 264:                 while(j < 50){
  2247  0300  3032               	movlw	50
  2248  0301  0235               	subwf	_j,w
  2249  0302  1803               	btfsc	3,0
  2250  0303  2B0D               	goto	l375
  2251                           
  2252                           ;mainMaster.c: 265:                     j++;
  2253  0304  3001               	movlw	1
  2254  0305  1683               	bsf	3,5	;RP0=1, select bank1
  2255  0306  1303               	bcf	3,6	;RP1=0, select bank1
  2256  0307  00A0               	movwf	??_main^(0+128)
  2257  0308  0820               	movf	??_main^(0+128),w
  2258  0309  1283               	bcf	3,5	;RP0=0, select bank0
  2259  030A  1303               	bcf	3,6	;RP1=0, select bank0
  2260  030B  07B5               	addwf	_j,f
  2261  030C  2B00               	goto	l4175
  2262  030D                     l375:	
  2263                           
  2264                           ;mainMaster.c: 268:                 change = 1;
  2265  030D  01B4               	clrf	_change
  2266  030E  0AB4               	incf	_change,f
  2267  030F  2B11               	goto	l4179
  2268  0310                     l4177:	
  2269                           
  2270                           ;mainMaster.c: 271:             change =0;
  2271  0310  01B4               	clrf	_change
  2272  0311                     l4179:	
  2273                           
  2274                           ;mainMaster.c: 274:         if (state == 0){
  2275  0311  087A               	movf	_state,w
  2276  0312  1D03               	btfss	3,2
  2277  0313  2B5E               	goto	l4191
  2278                           
  2279                           ;mainMaster.c: 276:             Lcd_Set_Cursor(1,1);
  2280  0314  01F7               	clrf	Lcd_Set_Cursor@b
  2281  0315  0AF7               	incf	Lcd_Set_Cursor@b,f
  2282  0316  3001               	movlw	1
  2283  0317  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2284                           
  2285                           ;mainMaster.c: 277:             Lcd_Write_String(time);
  2286  031C  3041               	movlw	(low (_time| 0))& (0+255)
  2287  031D  1283               	bcf	3,5	;RP0=0, select bank0
  2288  031E  1303               	bcf	3,6	;RP1=0, select bank0
  2289  031F  00C7               	movwf	Lcd_Write_String@a
  2290  0320  3000               	movlw	0
  2291  0321  00C8               	movwf	Lcd_Write_String@a+1
  2292  0322  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2293                           
  2294                           ;mainMaster.c: 279:             Lcd_Set_Cursor(1,7);
  2295  0327  3007               	movlw	7
  2296  0328  1683               	bsf	3,5	;RP0=1, select bank1
  2297  0329  1303               	bcf	3,6	;RP1=0, select bank1
  2298  032A  00A0               	movwf	??_main^(0+128)
  2299  032B  0820               	movf	??_main^(0+128),w
  2300  032C  00F7               	movwf	Lcd_Set_Cursor@b
  2301  032D  3001               	movlw	1
  2302  032E  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2303                           
  2304                           ;mainMaster.c: 280:             Lcd_Write_String(day2);
  2305  0333  1283               	bcf	3,5	;RP0=0, select bank0
  2306  0334  1303               	bcf	3,6	;RP1=0, select bank0
  2307  0335  0825               	movf	_day2,w
  2308  0336  00C7               	movwf	Lcd_Write_String@a
  2309  0337  0826               	movf	_day2+1,w
  2310  0338  00C8               	movwf	Lcd_Write_String@a+1
  2311  0339  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2312                           
  2313                           ;mainMaster.c: 282:             Lcd_Set_Cursor(2,1);
  2314  033E  01F7               	clrf	Lcd_Set_Cursor@b
  2315  033F  0AF7               	incf	Lcd_Set_Cursor@b,f
  2316  0340  3002               	movlw	2
  2317  0341  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2318                           
  2319                           ;mainMaster.c: 283:             Lcd_Write_String(temp);
  2320  0346  303B               	movlw	(low (_temp| 0))& (0+255)
  2321  0347  1283               	bcf	3,5	;RP0=0, select bank0
  2322  0348  1303               	bcf	3,6	;RP1=0, select bank0
  2323  0349  00C7               	movwf	Lcd_Write_String@a
  2324  034A  3000               	movlw	0
  2325  034B  00C8               	movwf	Lcd_Write_String@a+1
  2326  034C  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2327                           
  2328                           ;mainMaster.c: 284:             Lcd_Write_Char(223);
  2329  0351  30DF               	movlw	223
  2330  0352  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  2331                           
  2332                           ;mainMaster.c: 285:             Lcd_Write_Char('C');
  2333  0357  3043               	movlw	67
  2334  0358  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  2335                           
  2336                           ;mainMaster.c: 287:         } else if (state == 1){
  2337  035D  28AF               	goto	l3999
  2338  035E                     l4191:	
  2339  035E  037A               	decf	_state,w
  2340  035F  1D03               	btfss	3,2
  2341  0360  2BBB               	goto	l4217
  2342                           
  2343                           ;mainMaster.c: 289:             Lcd_Set_Cursor(1,1);
  2344  0361  01F7               	clrf	Lcd_Set_Cursor@b
  2345  0362  0AF7               	incf	Lcd_Set_Cursor@b,f
  2346  0363  3001               	movlw	1
  2347  0364  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2348                           
  2349                           ;mainMaster.c: 290:             if (door == 1){
  2350  0369  1283               	bcf	3,5	;RP0=0, select bank0
  2351  036A  1303               	bcf	3,6	;RP1=0, select bank0
  2352  036B  033A               	decf	_door,w
  2353  036C  1D03               	btfss	3,2
  2354  036D  2B72               	goto	l4199
  2355                           
  2356                           ;mainMaster.c: 291:                 Lcd_Write_String("DOOR OPEN  ");
  2357  036E  3055               	movlw	low (STR_13| (0+32768))
  2358  036F  00C7               	movwf	Lcd_Write_String@a
  2359  0370  3087               	movlw	high (STR_13| (0+32768))
  2360  0371  2B75               	goto	L9
  2361  0372                     l4199:	
  2362                           ;mainMaster.c: 292:             } else {
  2363                           
  2364                           
  2365                           ;mainMaster.c: 293:                 Lcd_Write_String("DOOR CLOSED");
  2366  0372  3061               	movlw	low (STR_14| (0+32768))
  2367  0373  00C7               	movwf	Lcd_Write_String@a
  2368  0374  3087               	movlw	high (STR_14| (0+32768))
  2369  0375                     L9:	
  2370  0375  00C8               	movwf	Lcd_Write_String@a+1
  2371  0376  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2372                           
  2373                           ;mainMaster.c: 296:             Lcd_Set_Cursor(2,1);
  2374  037B  01F7               	clrf	Lcd_Set_Cursor@b
  2375  037C  0AF7               	incf	Lcd_Set_Cursor@b,f
  2376  037D  3002               	movlw	2
  2377  037E  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2378                           
  2379                           ;mainMaster.c: 297:             if (trip == 1){
  2380  0383  1283               	bcf	3,5	;RP0=0, select bank0
  2381  0384  1303               	bcf	3,6	;RP1=0, select bank0
  2382  0385  0339               	decf	_trip,w
  2383  0386  1D03               	btfss	3,2
  2384  0387  2B8C               	goto	l4207
  2385                           
  2386                           ;mainMaster.c: 298:                 Lcd_Write_String("TRIP ON ");
  2387  0388  30D2               	movlw	low (STR_15| (0+32768))
  2388  0389  00C7               	movwf	Lcd_Write_String@a
  2389  038A  3087               	movlw	high (STR_15| (0+32768))
  2390  038B  2B8F               	goto	L10
  2391  038C                     l4207:	
  2392                           ;mainMaster.c: 299:             } else {
  2393                           
  2394                           
  2395                           ;mainMaster.c: 300:                 Lcd_Write_String("TRIP OFF");
  2396  038C  30E4               	movlw	low (STR_16| (0+32768))
  2397  038D  00C7               	movwf	Lcd_Write_String@a
  2398  038E  3087               	movlw	high (STR_16| (0+32768))
  2399  038F                     L10:	
  2400  038F  00C8               	movwf	Lcd_Write_String@a+1
  2401  0390  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2402                           
  2403                           ;mainMaster.c: 303:             Lcd_Set_Cursor(2,9);
  2404  0395  3009               	movlw	9
  2405  0396  1683               	bsf	3,5	;RP0=1, select bank1
  2406  0397  1303               	bcf	3,6	;RP1=0, select bank1
  2407  0398  00A0               	movwf	??_main^(0+128)
  2408  0399  0820               	movf	??_main^(0+128),w
  2409  039A  00F7               	movwf	Lcd_Set_Cursor@b
  2410  039B  3002               	movlw	2
  2411  039C  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2412                           
  2413                           ;mainMaster.c: 304:             if (bank == 3){
  2414  03A1  3003               	movlw	3
  2415  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  2416  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  2417  03A4  062E               	xorwf	_bank,w
  2418  03A5  1D03               	btfss	3,2
  2419  03A6  2BB1               	goto	l4215
  2420                           
  2421                           ;mainMaster.c: 305:                 Lcd_Write_String("BANK ON ");
  2422  03A7  30C9               	movlw	low (STR_17| (0+32768))
  2423  03A8  00C7               	movwf	Lcd_Write_String@a
  2424  03A9  3087               	movlw	high (STR_17| (0+32768))
  2425  03AA  00C8               	movwf	Lcd_Write_String@a+1
  2426  03AB  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2427                           
  2428                           ;mainMaster.c: 306:             } else {
  2429  03B0  28AF               	goto	l3999
  2430  03B1                     l4215:	
  2431                           
  2432                           ;mainMaster.c: 307:                 Lcd_Write_String("BANK OFF");
  2433  03B1  30DB               	movlw	low (STR_18| (0+32768))
  2434  03B2  00C7               	movwf	Lcd_Write_String@a
  2435  03B3  3087               	movlw	high (STR_18| (0+32768))
  2436  03B4  00C8               	movwf	Lcd_Write_String@a+1
  2437  03B5  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2438  03BA  28AF               	goto	l3999
  2439  03BB                     l4217:	
  2440  03BB  3002               	movlw	2
  2441  03BC  067A               	xorwf	_state,w
  2442  03BD  1D03               	btfss	3,2
  2443  03BE  2BFA               	goto	l4235
  2444                           
  2445                           ;mainMaster.c: 312:             Lcd_Set_Cursor(1,1);
  2446  03BF  01F7               	clrf	Lcd_Set_Cursor@b
  2447  03C0  0AF7               	incf	Lcd_Set_Cursor@b,f
  2448  03C1  3001               	movlw	1
  2449  03C2  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2450                           
  2451                           ;mainMaster.c: 313:             if (PIR == 1){
  2452  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  2453  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  2454  03C9  0338               	decf	_PIR,w
  2455  03CA  1D03               	btfss	3,2
  2456  03CB  2BD0               	goto	l4225
  2457                           
  2458                           ;mainMaster.c: 314:                 Lcd_Write_String("PIR ON ");
  2459  03CC  30ED               	movlw	low (STR_19| (0+32768))
  2460  03CD  00C7               	movwf	Lcd_Write_String@a
  2461  03CE  3087               	movlw	high (STR_19| (0+32768))
  2462  03CF  2BD3               	goto	L11
  2463  03D0                     l4225:	
  2464                           ;mainMaster.c: 315:             } else {
  2465                           
  2466                           
  2467                           ;mainMaster.c: 316:                 Lcd_Write_String("PIR OFF");
  2468  03D0  30F5               	movlw	low (STR_20| (0+32768))
  2469  03D1  00C7               	movwf	Lcd_Write_String@a
  2470  03D2  3087               	movlw	high (STR_20| (0+32768))
  2471  03D3                     L11:	
  2472  03D3  00C8               	movwf	Lcd_Write_String@a+1
  2473  03D4  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2474                           
  2475                           ;mainMaster.c: 319:             Lcd_Set_Cursor(2,1);
  2476  03D9  01F7               	clrf	Lcd_Set_Cursor@b
  2477  03DA  0AF7               	incf	Lcd_Set_Cursor@b,f
  2478  03DB  3002               	movlw	2
  2479  03DC  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2480                           
  2481                           ;mainMaster.c: 320:             if (IR == 1){
  2482  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  2483  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  2484  03E3  0337               	decf	_IR,w
  2485  03E4  1D03               	btfss	3,2
  2486  03E5  2BF0               	goto	l4233
  2487                           
  2488                           ;mainMaster.c: 321:                 Lcd_Write_String("IR ON ");
  2489  03E6  30EE               	movlw	low ((STR_19+1)| (0+32768))
  2490  03E7  00C7               	movwf	Lcd_Write_String@a
  2491  03E8  3087               	movlw	high ((STR_19+1)| (0+32768))
  2492  03E9  00C8               	movwf	Lcd_Write_String@a+1
  2493  03EA  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2494                           
  2495                           ;mainMaster.c: 322:             } else {
  2496  03EF  28AF               	goto	l3999
  2497  03F0                     l4233:	
  2498                           
  2499                           ;mainMaster.c: 323:                 Lcd_Write_String("IR OFF");
  2500  03F0  30F6               	movlw	low ((STR_20+1)| (0+32768))
  2501  03F1  00C7               	movwf	Lcd_Write_String@a
  2502  03F2  3087               	movlw	high ((STR_20+1)| (0+32768))
  2503  03F3  00C8               	movwf	Lcd_Write_String@a+1
  2504  03F4  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2505                           
  2506                           ;mainMaster.c: 325:         } else if (state == 3){
  2507                           
  2508                           ;mainMaster.c: 324:             }
  2509  03F9  28AF               	goto	l3999
  2510  03FA                     l4235:	
  2511  03FA  3003               	movlw	3
  2512  03FB  067A               	xorwf	_state,w
  2513  03FC  1D03               	btfss	3,2
  2514  03FD  2D50               	goto	l4287
  2515                           
  2516                           ;mainMaster.c: 326:             Lcd_Set_Cursor(1,1);
  2517  03FE  01F7               	clrf	Lcd_Set_Cursor@b
  2518  03FF  0AF7               	incf	Lcd_Set_Cursor@b,f
  2519  0400  3001               	movlw	1
  2520  0401  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2521                           
  2522                           ;mainMaster.c: 327:             Lcd_Write_String("TIME: ");
  2523  0406  30FD               	movlw	low (STR_23| (0+32768))
  2524  0407  1283               	bcf	3,5	;RP0=0, select bank0
  2525  0408  1303               	bcf	3,6	;RP1=0, select bank0
  2526  0409  00C7               	movwf	Lcd_Write_String@a
  2527  040A  3087               	movlw	high (STR_23| (0+32768))
  2528  040B  00C8               	movwf	Lcd_Write_String@a+1
  2529  040C  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2530                           
  2531                           ;mainMaster.c: 328:             Lcd_Write_String(time);
  2532  0411  3041               	movlw	(low (_time| 0))& (0+255)
  2533  0412  1283               	bcf	3,5	;RP0=0, select bank0
  2534  0413  1303               	bcf	3,6	;RP1=0, select bank0
  2535  0414  00C7               	movwf	Lcd_Write_String@a
  2536  0415  3000               	movlw	0
  2537  0416  00C8               	movwf	Lcd_Write_String@a+1
  2538  0417  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2539                           
  2540                           ;mainMaster.c: 330:             Lcd_Set_Cursor(2,1);
  2541  041C  01F7               	clrf	Lcd_Set_Cursor@b
  2542  041D  0AF7               	incf	Lcd_Set_Cursor@b,f
  2543  041E  3002               	movlw	2
  2544  041F  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2545                           
  2546                           ;mainMaster.c: 331:             Lcd_Write_String("DAY: ");
  2547  0424  3004               	movlw	low (STR_24| (0+32768))
  2548  0425  1283               	bcf	3,5	;RP0=0, select bank0
  2549  0426  1303               	bcf	3,6	;RP1=0, select bank0
  2550  0427  00C7               	movwf	Lcd_Write_String@a
  2551  0428  3088               	movlw	high (STR_24| (0+32768))
  2552  0429  00C8               	movwf	Lcd_Write_String@a+1
  2553  042A  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2554                           
  2555                           ;mainMaster.c: 332:             Lcd_Write_String(day2);
  2556  042F  1283               	bcf	3,5	;RP0=0, select bank0
  2557  0430  1303               	bcf	3,6	;RP1=0, select bank0
  2558  0431  0825               	movf	_day2,w
  2559  0432  00C7               	movwf	Lcd_Write_String@a
  2560  0433  0826               	movf	_day2+1,w
  2561  0434  00C8               	movwf	Lcd_Write_String@a+1
  2562  0435  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2563                           
  2564                           ;mainMaster.c: 334:             newhour = (time[0] - '0') * 10 + (time[1] - '0');
  2565  043A  300A               	movlw	10
  2566  043B  1683               	bsf	3,5	;RP0=1, select bank1
  2567  043C  1303               	bcf	3,6	;RP1=0, select bank1
  2568  043D  00A0               	movwf	??_main^(0+128)
  2569  043E  0820               	movf	??_main^(0+128),w
  2570  043F  00F3               	movwf	___bmul@multiplicand
  2571  0440  1283               	bcf	3,5	;RP0=0, select bank0
  2572  0441  1303               	bcf	3,6	;RP1=0, select bank0
  2573  0442  0841               	movf	_time,w
  2574  0443  120A  158A  202B  120A  118A  	fcall	___bmul
  2575  0448  1283               	bcf	3,5	;RP0=0, select bank0
  2576  0449  1303               	bcf	3,6	;RP1=0, select bank0
  2577  044A  0742               	addwf	_time+1,w
  2578  044B  3EF0               	addlw	240
  2579  044C  1683               	bsf	3,5	;RP0=1, select bank1
  2580  044D  1303               	bcf	3,6	;RP1=0, select bank1
  2581  044E  00A1               	movwf	(??_main+1)^(0+128)
  2582  044F  0821               	movf	(??_main+1)^(0+128),w
  2583  0450  1283               	bcf	3,5	;RP0=0, select bank0
  2584  0451  1303               	bcf	3,6	;RP1=0, select bank0
  2585  0452  00A8               	movwf	_newhour
  2586                           
  2587                           ;mainMaster.c: 335:             newmin = (time[3] - '0') * 10 + (time[4] - '0');
  2588  0453  300A               	movlw	10
  2589  0454  1683               	bsf	3,5	;RP0=1, select bank1
  2590  0455  1303               	bcf	3,6	;RP1=0, select bank1
  2591  0456  00A0               	movwf	??_main^(0+128)
  2592  0457  0820               	movf	??_main^(0+128),w
  2593  0458  00F3               	movwf	___bmul@multiplicand
  2594  0459  1283               	bcf	3,5	;RP0=0, select bank0
  2595  045A  1303               	bcf	3,6	;RP1=0, select bank0
  2596  045B  0844               	movf	_time+3,w
  2597  045C  120A  158A  202B  120A  118A  	fcall	___bmul
  2598  0461  1283               	bcf	3,5	;RP0=0, select bank0
  2599  0462  1303               	bcf	3,6	;RP1=0, select bank0
  2600  0463  0745               	addwf	_time+4,w
  2601  0464  3EF0               	addlw	240
  2602  0465  1683               	bsf	3,5	;RP0=1, select bank1
  2603  0466  1303               	bcf	3,6	;RP1=0, select bank1
  2604  0467  00A1               	movwf	(??_main+1)^(0+128)
  2605  0468  0821               	movf	(??_main+1)^(0+128),w
  2606  0469  1283               	bcf	3,5	;RP0=0, select bank0
  2607  046A  1303               	bcf	3,6	;RP1=0, select bank0
  2608  046B  00A7               	movwf	_newmin
  2609                           
  2610                           ;mainMaster.c: 337:             if (PORTDbits.RD4 == 1){
  2611  046C  1E08               	btfss	8,4	;volatile
  2612  046D  2C7C               	goto	l394
  2613                           
  2614                           ;mainMaster.c: 338:                 newhour++;
  2615  046E  3001               	movlw	1
  2616  046F  1683               	bsf	3,5	;RP0=1, select bank1
  2617  0470  1303               	bcf	3,6	;RP1=0, select bank1
  2618  0471  00A0               	movwf	??_main^(0+128)
  2619  0472  0820               	movf	??_main^(0+128),w
  2620  0473  1283               	bcf	3,5	;RP0=0, select bank0
  2621  0474  1303               	bcf	3,6	;RP1=0, select bank0
  2622  0475  07A8               	addwf	_newhour,f
  2623                           
  2624                           ;mainMaster.c: 339:                 if (newhour > 23){
  2625  0476  3018               	movlw	24
  2626  0477  0228               	subwf	_newhour,w
  2627  0478  1C03               	skipc
  2628  0479  2CBA               	goto	l4255
  2629                           
  2630                           ;mainMaster.c: 340:                     newhour = 0;
  2631  047A  01A8               	clrf	_newhour
  2632                           
  2633                           ;mainMaster.c: 343:             } else if (PORTDbits.RD3 == 1){
  2634  047B  2CBA               	goto	l4255
  2635  047C                     l394:	
  2636  047C  1D88               	btfss	8,3	;volatile
  2637  047D  2C8C               	goto	l397
  2638                           
  2639                           ;mainMaster.c: 344:                 newhour--;
  2640  047E  3001               	movlw	1
  2641  047F  02A8               	subwf	_newhour,f
  2642                           
  2643                           ;mainMaster.c: 345:                 if (newhour == 255){
  2644  0480  0A28               	incf	_newhour,w
  2645  0481  1D03               	btfss	3,2
  2646  0482  2CBA               	goto	l4255
  2647                           
  2648                           ;mainMaster.c: 346:                     newhour = 23;
  2649  0483  3017               	movlw	23
  2650  0484  1683               	bsf	3,5	;RP0=1, select bank1
  2651  0485  1303               	bcf	3,6	;RP1=0, select bank1
  2652  0486  00A0               	movwf	??_main^(0+128)
  2653  0487  0820               	movf	??_main^(0+128),w
  2654  0488  1283               	bcf	3,5	;RP0=0, select bank0
  2655  0489  1303               	bcf	3,6	;RP1=0, select bank0
  2656  048A  00A8               	movwf	_newhour
  2657  048B  2CBA               	goto	l4255
  2658  048C                     l397:	
  2659  048C  1D08               	btfss	8,2	;volatile
  2660  048D  2C9C               	goto	l400
  2661                           
  2662                           ;mainMaster.c: 350:                 newmin++;
  2663  048E  3001               	movlw	1
  2664  048F  1683               	bsf	3,5	;RP0=1, select bank1
  2665  0490  1303               	bcf	3,6	;RP1=0, select bank1
  2666  0491  00A0               	movwf	??_main^(0+128)
  2667  0492  0820               	movf	??_main^(0+128),w
  2668  0493  1283               	bcf	3,5	;RP0=0, select bank0
  2669  0494  1303               	bcf	3,6	;RP1=0, select bank0
  2670  0495  07A7               	addwf	_newmin,f
  2671                           
  2672                           ;mainMaster.c: 351:                 if (newmin > 59){
  2673  0496  303C               	movlw	60
  2674  0497  0227               	subwf	_newmin,w
  2675  0498  1C03               	skipc
  2676  0499  2CBA               	goto	l4255
  2677                           
  2678                           ;mainMaster.c: 352:                     newmin = 0;
  2679  049A  01A7               	clrf	_newmin
  2680  049B  2CBA               	goto	l4255
  2681  049C                     l400:	
  2682  049C  1C88               	btfss	8,1	;volatile
  2683  049D  2CAC               	goto	l403
  2684                           
  2685                           ;mainMaster.c: 356:                 newmin--;
  2686  049E  3001               	movlw	1
  2687  049F  02A7               	subwf	_newmin,f
  2688                           
  2689                           ;mainMaster.c: 357:                 if (newmin == 255){
  2690  04A0  0A27               	incf	_newmin,w
  2691  04A1  1D03               	btfss	3,2
  2692  04A2  2CBA               	goto	l4255
  2693                           
  2694                           ;mainMaster.c: 358:                     newmin = 59;
  2695  04A3  303B               	movlw	59
  2696  04A4  1683               	bsf	3,5	;RP0=1, select bank1
  2697  04A5  1303               	bcf	3,6	;RP1=0, select bank1
  2698  04A6  00A0               	movwf	??_main^(0+128)
  2699  04A7  0820               	movf	??_main^(0+128),w
  2700  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  2701  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  2702  04AA  00A7               	movwf	_newmin
  2703  04AB  2CBA               	goto	l4255
  2704  04AC                     l403:	
  2705  04AC  1C08               	btfss	8,0	;volatile
  2706  04AD  2CC9               	goto	l4281
  2707                           
  2708                           ;mainMaster.c: 362:                 day1++;
  2709  04AE  3001               	movlw	1
  2710  04AF  1683               	bsf	3,5	;RP0=1, select bank1
  2711  04B0  1303               	bcf	3,6	;RP1=0, select bank1
  2712  04B1  00A0               	movwf	??_main^(0+128)
  2713  04B2  0820               	movf	??_main^(0+128),w
  2714  04B3  07F9               	addwf	_day1,f
  2715                           
  2716                           ;mainMaster.c: 363:                 if (day1 > 7){
  2717  04B4  3008               	movlw	8
  2718  04B5  0279               	subwf	_day1,w
  2719  04B6  1C03               	skipc
  2720  04B7  2CBA               	goto	l4255
  2721                           
  2722                           ;mainMaster.c: 364:                     day1 = 1;
  2723  04B8  01F9               	clrf	_day1
  2724  04B9  0AF9               	incf	_day1,f
  2725  04BA                     l4255:	
  2726                           
  2727                           ;mainMaster.c: 342:                 _delay((unsigned long)((100)*(8000000/4000.0)));
  2728  04BA  3002               	movlw	2
  2729  04BB  1683               	bsf	3,5	;RP0=1, select bank1
  2730  04BC  1303               	bcf	3,6	;RP1=0, select bank1
  2731  04BD  00A2               	movwf	(??_main^(0+128)+2)
  2732  04BE  3004               	movlw	4
  2733  04BF  00A1               	movwf	(??_main^(0+128)+1)
  2734  04C0  30B9               	movlw	185
  2735  04C1  00A0               	movwf	??_main^(0+128)
  2736  04C2                     u4997:	
  2737  04C2  0BA0               	decfsz	??_main^(0+128),f
  2738  04C3  2CC2               	goto	u4997
  2739  04C4  0BA1               	decfsz	(??_main^(0+128)+1),f
  2740  04C5  2CC2               	goto	u4997
  2741  04C6  0BA2               	decfsz	(??_main^(0+128)+2),f
  2742  04C7  2CC2               	goto	u4997
  2743  04C8  2CC9               	nop2
  2744  04C9                     l4281:	
  2745                           
  2746                           ;mainMaster.c: 369:             hour = ((newhour / 10) << 4) + (newhour % 10);
  2747  04C9  300A               	movlw	10
  2748  04CA  00F3               	movwf	___awdiv@divisor
  2749  04CB  3000               	movlw	0
  2750  04CC  00F4               	movwf	___awdiv@divisor+1
  2751  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  2752  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  2753  04CF  0828               	movf	_newhour,w
  2754  04D0  1683               	bsf	3,5	;RP0=1, select bank1
  2755  04D1  1303               	bcf	3,6	;RP1=0, select bank1
  2756  04D2  00A0               	movwf	??_main^(0+128)
  2757  04D3  01A1               	clrf	(??_main^(0+128)+1)
  2758  04D4  0820               	movf	??_main^(0+128),w
  2759  04D5  00F5               	movwf	___awdiv@dividend
  2760  04D6  0821               	movf	(??_main+1)^(0+128),w
  2761  04D7  00F6               	movwf	___awdiv@dividend+1
  2762  04D8  120A  158A  2307  120A  118A  	fcall	___awdiv
  2763  04DD  0873               	movf	?___awdiv,w
  2764  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  2765  04DF  1303               	bcf	3,6	;RP1=0, select bank1
  2766  04E0  00A2               	movwf	(??_main+2)^(0+128)
  2767  04E1  3004               	movlw	4
  2768  04E2                     u4615:	
  2769  04E2  1003               	clrc
  2770  04E3  0DA2               	rlf	(??_main+2)^(0+128),f
  2771  04E4  3EFF               	addlw	-1
  2772  04E5  1D03               	skipz
  2773  04E6  2CE2               	goto	u4615
  2774  04E7  300A               	movlw	10
  2775  04E8  00F3               	movwf	___awmod@divisor
  2776  04E9  3000               	movlw	0
  2777  04EA  00F4               	movwf	___awmod@divisor+1
  2778  04EB  1283               	bcf	3,5	;RP0=0, select bank0
  2779  04EC  1303               	bcf	3,6	;RP1=0, select bank0
  2780  04ED  0828               	movf	_newhour,w
  2781  04EE  1683               	bsf	3,5	;RP0=1, select bank1
  2782  04EF  1303               	bcf	3,6	;RP1=0, select bank1
  2783  04F0  00A3               	movwf	(??_main+3)^(0+128)
  2784  04F1  01A4               	clrf	((??_main+3)^(0+128)+1)
  2785  04F2  0823               	movf	(??_main+3)^(0+128),w
  2786  04F3  00F5               	movwf	___awmod@dividend
  2787  04F4  0824               	movf	(??_main+4)^(0+128),w
  2788  04F5  00F6               	movwf	___awmod@dividend+1
  2789  04F6  120A  118A  26B3  120A  118A  	fcall	___awmod
  2790  04FB  0873               	movf	?___awmod,w
  2791  04FC  1683               	bsf	3,5	;RP0=1, select bank1
  2792  04FD  1303               	bcf	3,6	;RP1=0, select bank1
  2793  04FE  0722               	addwf	(??_main+2)^(0+128),w
  2794  04FF  00A5               	movwf	(??_main+5)^(0+128)
  2795  0500  0825               	movf	(??_main+5)^(0+128),w
  2796  0501  1283               	bcf	3,5	;RP0=0, select bank0
  2797  0502  1303               	bcf	3,6	;RP1=0, select bank0
  2798  0503  00AB               	movwf	_hour
  2799                           
  2800                           ;mainMaster.c: 370:             min = ((newmin / 10) << 4) + (newmin % 10);
  2801  0504  300A               	movlw	10
  2802  0505  00F3               	movwf	___awdiv@divisor
  2803  0506  3000               	movlw	0
  2804  0507  00F4               	movwf	___awdiv@divisor+1
  2805  0508  0827               	movf	_newmin,w
  2806  0509  1683               	bsf	3,5	;RP0=1, select bank1
  2807  050A  1303               	bcf	3,6	;RP1=0, select bank1
  2808  050B  00A0               	movwf	??_main^(0+128)
  2809  050C  01A1               	clrf	(??_main^(0+128)+1)
  2810  050D  0820               	movf	??_main^(0+128),w
  2811  050E  00F5               	movwf	___awdiv@dividend
  2812  050F  0821               	movf	(??_main+1)^(0+128),w
  2813  0510  00F6               	movwf	___awdiv@dividend+1
  2814  0511  120A  158A  2307  120A  118A  	fcall	___awdiv
  2815  0516  0873               	movf	?___awdiv,w
  2816  0517  1683               	bsf	3,5	;RP0=1, select bank1
  2817  0518  1303               	bcf	3,6	;RP1=0, select bank1
  2818  0519  00A2               	movwf	(??_main+2)^(0+128)
  2819  051A  3004               	movlw	4
  2820  051B                     u4625:	
  2821  051B  1003               	clrc
  2822  051C  0DA2               	rlf	(??_main+2)^(0+128),f
  2823  051D  3EFF               	addlw	-1
  2824  051E  1D03               	skipz
  2825  051F  2D1B               	goto	u4625
  2826  0520  300A               	movlw	10
  2827  0521  00F3               	movwf	___awmod@divisor
  2828  0522  3000               	movlw	0
  2829  0523  00F4               	movwf	___awmod@divisor+1
  2830  0524  1283               	bcf	3,5	;RP0=0, select bank0
  2831  0525  1303               	bcf	3,6	;RP1=0, select bank0
  2832  0526  0827               	movf	_newmin,w
  2833  0527  1683               	bsf	3,5	;RP0=1, select bank1
  2834  0528  1303               	bcf	3,6	;RP1=0, select bank1
  2835  0529  00A3               	movwf	(??_main+3)^(0+128)
  2836  052A  01A4               	clrf	((??_main+3)^(0+128)+1)
  2837  052B  0823               	movf	(??_main+3)^(0+128),w
  2838  052C  00F5               	movwf	___awmod@dividend
  2839  052D  0824               	movf	(??_main+4)^(0+128),w
  2840  052E  00F6               	movwf	___awmod@dividend+1
  2841  052F  120A  118A  26B3  120A  118A  	fcall	___awmod
  2842  0534  0873               	movf	?___awmod,w
  2843  0535  1683               	bsf	3,5	;RP0=1, select bank1
  2844  0536  1303               	bcf	3,6	;RP1=0, select bank1
  2845  0537  0722               	addwf	(??_main+2)^(0+128),w
  2846  0538  00A5               	movwf	(??_main+5)^(0+128)
  2847  0539  0825               	movf	(??_main+5)^(0+128),w
  2848  053A  1283               	bcf	3,5	;RP0=0, select bank0
  2849  053B  1303               	bcf	3,6	;RP1=0, select bank0
  2850  053C  00AA               	movwf	_min
  2851                           
  2852                           ;mainMaster.c: 371:             write_RTC(hour, min, day1);
  2853  053D  082A               	movf	_min,w
  2854  053E  1683               	bsf	3,5	;RP0=1, select bank1
  2855  053F  1303               	bcf	3,6	;RP1=0, select bank1
  2856  0540  00A0               	movwf	??_main^(0+128)
  2857  0541  0820               	movf	??_main^(0+128),w
  2858  0542  00F5               	movwf	write_RTC@minutes
  2859  0543  0879               	movf	_day1,w
  2860  0544  00A1               	movwf	(??_main+1)^(0+128)
  2861  0545  0821               	movf	(??_main+1)^(0+128),w
  2862  0546  00F6               	movwf	write_RTC@day
  2863  0547  1283               	bcf	3,5	;RP0=0, select bank0
  2864  0548  1303               	bcf	3,6	;RP1=0, select bank0
  2865  0549  082B               	movf	_hour,w
  2866  054A  120A  158A  221C  120A  118A  	fcall	_write_RTC
  2867                           
  2868                           ;mainMaster.c: 372:         } else if (state == 4){
  2869  054F  28AF               	goto	l3999
  2870  0550                     l4287:	
  2871  0550  3004               	movlw	4
  2872  0551  067A               	xorwf	_state,w
  2873  0552  1D03               	btfss	3,2
  2874  0553  28AF               	goto	l3999
  2875                           
  2876                           ;mainMaster.c: 373:             Lcd_Set_Cursor(1,1);
  2877  0554  01F7               	clrf	Lcd_Set_Cursor@b
  2878  0555  0AF7               	incf	Lcd_Set_Cursor@b,f
  2879  0556  3001               	movlw	1
  2880  0557  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2881                           
  2882                           ;mainMaster.c: 374:             Lcd_Write_String("PASSWORD:");
  2883  055C  30B5               	movlw	low (STR_25| (0+32768))
  2884  055D  1283               	bcf	3,5	;RP0=0, select bank0
  2885  055E  1303               	bcf	3,6	;RP1=0, select bank0
  2886  055F  00C7               	movwf	Lcd_Write_String@a
  2887  0560  3087               	movlw	high (STR_25| (0+32768))
  2888  0561  00C8               	movwf	Lcd_Write_String@a+1
  2889  0562  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  2890                           
  2891                           ;mainMaster.c: 375:             Lcd_Set_Cursor(2,k + 1);
  2892  0567  0878               	movf	_k,w
  2893  0568  3E01               	addlw	1
  2894  0569  1683               	bsf	3,5	;RP0=1, select bank1
  2895  056A  1303               	bcf	3,6	;RP1=0, select bank1
  2896  056B  00A0               	movwf	??_main^(0+128)
  2897  056C  0820               	movf	??_main^(0+128),w
  2898  056D  00F7               	movwf	Lcd_Set_Cursor@b
  2899  056E  3002               	movlw	2
  2900  056F  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  2901                           
  2902                           ;mainMaster.c: 377:             if (k < 5) {
  2903  0574  3005               	movlw	5
  2904  0575  0278               	subwf	_k,w
  2905  0576  1803               	skipnc
  2906  0577  2E2D               	goto	l4363
  2907                           
  2908                           ;mainMaster.c: 378:                 if (PORTDbits.RD0 == 1){
  2909  0578  1283               	bcf	3,5	;RP0=0, select bank0
  2910  0579  1303               	bcf	3,6	;RP1=0, select bank0
  2911  057A  1C08               	btfss	8,0	;volatile
  2912  057B  2D95               	goto	l411
  2913                           
  2914                           ;mainMaster.c: 379:                     if (change4 == 0){
  2915  057C  0830               	movf	_change4,w
  2916  057D  1D03               	btfss	3,2
  2917  057E  2E2D               	goto	l4363
  2918                           
  2919                           ;mainMaster.c: 380:                         passwordu[k] = 0;
  2920  057F  0878               	movf	_k,w
  2921  0580  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  2922  0581  0084               	movwf	4
  2923  0582  1383               	bcf	3,7	;select IRP bank0
  2924  0583  0180               	clrf	0
  2925                           
  2926                           ;mainMaster.c: 381:                         k++;
  2927  0584  3001               	movlw	1
  2928  0585  1683               	bsf	3,5	;RP0=1, select bank1
  2929  0586  1303               	bcf	3,6	;RP1=0, select bank1
  2930  0587  00A0               	movwf	??_main^(0+128)
  2931  0588  0820               	movf	??_main^(0+128),w
  2932  0589  07F8               	addwf	_k,f
  2933                           
  2934                           ;mainMaster.c: 382:                         change4 = 1;
  2935  058A  1283               	bcf	3,5	;RP0=0, select bank0
  2936  058B  1303               	bcf	3,6	;RP1=0, select bank0
  2937  058C  01B0               	clrf	_change4
  2938  058D  0AB0               	incf	_change4,f
  2939                           
  2940                           ;mainMaster.c: 383:                         Lcd_Write_Char('*');
  2941  058E  302A               	movlw	42
  2942  058F  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  2943  0594  2E2D               	goto	l4363
  2944  0595                     l411:	
  2945  0595  1C88               	btfss	8,1	;volatile
  2946  0596  2DB1               	goto	l414
  2947                           
  2948                           ;mainMaster.c: 386:                     if (change4 == 0){
  2949  0597  0830               	movf	_change4,w
  2950  0598  1D03               	btfss	3,2
  2951  0599  2E2D               	goto	l4363
  2952                           
  2953                           ;mainMaster.c: 387:                         passwordu[k] = 1;
  2954  059A  0878               	movf	_k,w
  2955  059B  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  2956  059C  0084               	movwf	4
  2957  059D  1383               	bcf	3,7	;select IRP bank0
  2958  059E  0180               	clrf	0
  2959  059F  0A80               	incf	0,f
  2960                           
  2961                           ;mainMaster.c: 388:                         k++;
  2962  05A0  3001               	movlw	1
  2963  05A1  1683               	bsf	3,5	;RP0=1, select bank1
  2964  05A2  1303               	bcf	3,6	;RP1=0, select bank1
  2965  05A3  00A0               	movwf	??_main^(0+128)
  2966  05A4  0820               	movf	??_main^(0+128),w
  2967  05A5  07F8               	addwf	_k,f
  2968                           
  2969                           ;mainMaster.c: 389:                         change4 = 1;
  2970  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  2971  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  2972  05A8  01B0               	clrf	_change4
  2973  05A9  0AB0               	incf	_change4,f
  2974                           
  2975                           ;mainMaster.c: 390:                         Lcd_Write_Char('*');
  2976  05AA  302A               	movlw	42
  2977  05AB  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  2978  05B0  2E2D               	goto	l4363
  2979  05B1                     l414:	
  2980  05B1  1D08               	btfss	8,2	;volatile
  2981  05B2  2DCF               	goto	l417
  2982                           
  2983                           ;mainMaster.c: 393:                     if (change4 == 0){
  2984  05B3  0830               	movf	_change4,w
  2985  05B4  1D03               	btfss	3,2
  2986  05B5  2E2D               	goto	l4363
  2987                           
  2988                           ;mainMaster.c: 394:                         passwordu[k] = 2;
  2989  05B6  3002               	movlw	2
  2990  05B7  1683               	bsf	3,5	;RP0=1, select bank1
  2991  05B8  1303               	bcf	3,6	;RP1=0, select bank1
  2992  05B9  00A0               	movwf	??_main^(0+128)
  2993  05BA  0878               	movf	_k,w
  2994  05BB  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  2995  05BC  0084               	movwf	4
  2996  05BD  0820               	movf	??_main^(0+128),w
  2997  05BE  1383               	bcf	3,7	;select IRP bank0
  2998  05BF  0080               	movwf	0
  2999                           
  3000                           ;mainMaster.c: 395:                         k++;
  3001  05C0  3001               	movlw	1
  3002  05C1  00A0               	movwf	??_main^(0+128)
  3003  05C2  0820               	movf	??_main^(0+128),w
  3004  05C3  07F8               	addwf	_k,f
  3005                           
  3006                           ;mainMaster.c: 396:                         change4 = 1;
  3007  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  3008  05C5  1303               	bcf	3,6	;RP1=0, select bank0
  3009  05C6  01B0               	clrf	_change4
  3010  05C7  0AB0               	incf	_change4,f
  3011                           
  3012                           ;mainMaster.c: 397:                         Lcd_Write_Char('*');
  3013  05C8  302A               	movlw	42
  3014  05C9  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  3015  05CE  2E2D               	goto	l4363
  3016  05CF                     l417:	
  3017  05CF  1D88               	btfss	8,3	;volatile
  3018  05D0  2DED               	goto	l420
  3019                           
  3020                           ;mainMaster.c: 400:                     if (change4 == 0){
  3021  05D1  0830               	movf	_change4,w
  3022  05D2  1D03               	btfss	3,2
  3023  05D3  2E2D               	goto	l4363
  3024                           
  3025                           ;mainMaster.c: 401:                         passwordu[k] = 3;
  3026  05D4  3003               	movlw	3
  3027  05D5  1683               	bsf	3,5	;RP0=1, select bank1
  3028  05D6  1303               	bcf	3,6	;RP1=0, select bank1
  3029  05D7  00A0               	movwf	??_main^(0+128)
  3030  05D8  0878               	movf	_k,w
  3031  05D9  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3032  05DA  0084               	movwf	4
  3033  05DB  0820               	movf	??_main^(0+128),w
  3034  05DC  1383               	bcf	3,7	;select IRP bank0
  3035  05DD  0080               	movwf	0
  3036                           
  3037                           ;mainMaster.c: 402:                         k++;
  3038  05DE  3001               	movlw	1
  3039  05DF  00A0               	movwf	??_main^(0+128)
  3040  05E0  0820               	movf	??_main^(0+128),w
  3041  05E1  07F8               	addwf	_k,f
  3042                           
  3043                           ;mainMaster.c: 403:                         change4 = 1;
  3044  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  3045  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  3046  05E4  01B0               	clrf	_change4
  3047  05E5  0AB0               	incf	_change4,f
  3048                           
  3049                           ;mainMaster.c: 404:                         Lcd_Write_Char('*');
  3050  05E6  302A               	movlw	42
  3051  05E7  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  3052  05EC  2E2D               	goto	l4363
  3053  05ED                     l420:	
  3054  05ED  1E08               	btfss	8,4	;volatile
  3055  05EE  2E0B               	goto	l423
  3056                           
  3057                           ;mainMaster.c: 407:                     if (change4 == 0){
  3058  05EF  0830               	movf	_change4,w
  3059  05F0  1D03               	btfss	3,2
  3060  05F1  2E2D               	goto	l4363
  3061                           
  3062                           ;mainMaster.c: 408:                         passwordu[k] = 4;
  3063  05F2  3004               	movlw	4
  3064  05F3  1683               	bsf	3,5	;RP0=1, select bank1
  3065  05F4  1303               	bcf	3,6	;RP1=0, select bank1
  3066  05F5  00A0               	movwf	??_main^(0+128)
  3067  05F6  0878               	movf	_k,w
  3068  05F7  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3069  05F8  0084               	movwf	4
  3070  05F9  0820               	movf	??_main^(0+128),w
  3071  05FA  1383               	bcf	3,7	;select IRP bank0
  3072  05FB  0080               	movwf	0
  3073                           
  3074                           ;mainMaster.c: 409:                         k++;
  3075  05FC  3001               	movlw	1
  3076  05FD  00A0               	movwf	??_main^(0+128)
  3077  05FE  0820               	movf	??_main^(0+128),w
  3078  05FF  07F8               	addwf	_k,f
  3079                           
  3080                           ;mainMaster.c: 410:                         change4 = 1;
  3081  0600  1283               	bcf	3,5	;RP0=0, select bank0
  3082  0601  1303               	bcf	3,6	;RP1=0, select bank0
  3083  0602  01B0               	clrf	_change4
  3084  0603  0AB0               	incf	_change4,f
  3085                           
  3086                           ;mainMaster.c: 411:                         Lcd_Write_Char('*');
  3087  0604  302A               	movlw	42
  3088  0605  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  3089  060A  2E2D               	goto	l4363
  3090  060B                     l423:	
  3091  060B  1E88               	btfss	8,5	;volatile
  3092  060C  2E29               	goto	l4359
  3093                           
  3094                           ;mainMaster.c: 414:                     if (change4 == 0){
  3095  060D  0830               	movf	_change4,w
  3096  060E  1D03               	btfss	3,2
  3097  060F  2E2D               	goto	l4363
  3098                           
  3099                           ;mainMaster.c: 415:                         passwordu[k] = 5;
  3100  0610  3005               	movlw	5
  3101  0611  1683               	bsf	3,5	;RP0=1, select bank1
  3102  0612  1303               	bcf	3,6	;RP1=0, select bank1
  3103  0613  00A0               	movwf	??_main^(0+128)
  3104  0614  0878               	movf	_k,w
  3105  0615  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3106  0616  0084               	movwf	4
  3107  0617  0820               	movf	??_main^(0+128),w
  3108  0618  1383               	bcf	3,7	;select IRP bank0
  3109  0619  0080               	movwf	0
  3110                           
  3111                           ;mainMaster.c: 416:                         k++;
  3112  061A  3001               	movlw	1
  3113  061B  00A0               	movwf	??_main^(0+128)
  3114  061C  0820               	movf	??_main^(0+128),w
  3115  061D  07F8               	addwf	_k,f
  3116                           
  3117                           ;mainMaster.c: 417:                         change4 = 1;
  3118  061E  1283               	bcf	3,5	;RP0=0, select bank0
  3119  061F  1303               	bcf	3,6	;RP1=0, select bank0
  3120  0620  01B0               	clrf	_change4
  3121  0621  0AB0               	incf	_change4,f
  3122                           
  3123                           ;mainMaster.c: 418:                         Lcd_Write_Char('*');
  3124  0622  302A               	movlw	42
  3125  0623  120A  158A  212A  120A  118A  	fcall	_Lcd_Write_Char
  3126  0628  2E2D               	goto	l4363
  3127  0629                     l4359:	
  3128  0629  0808               	movf	8,w	;volatile
  3129  062A  1D03               	btfss	3,2
  3130  062B  2E2D               	goto	l4363
  3131                           
  3132                           ;mainMaster.c: 421:                         change4 = 0;
  3133  062C  01B0               	clrf	_change4
  3134  062D                     l4363:	
  3135                           
  3136                           ;mainMaster.c: 425:             if (PORTEbits.RE0 == 1){
  3137  062D  1283               	bcf	3,5	;RP0=0, select bank0
  3138  062E  1303               	bcf	3,6	;RP1=0, select bank0
  3139  062F  1C09               	btfss	9,0	;volatile
  3140  0630  2E9C               	goto	l430
  3141                           
  3142                           ;mainMaster.c: 426:                     if (passwordu[0] == password[0] & passwordu[1] =
      +                          = password[1] & passwordu[2] == password[2] & passwordu[3] == password[3] & passwordu[4]
      +                           == password[4]){
  3143  0631  0820               	movf	_passwordu,w
  3144  0632  0668               	xorwf	_password,w
  3145  0633  1D03               	skipz
  3146  0634  2E88               	goto	l4399
  3147  0635  0821               	movf	_passwordu+1,w
  3148  0636  0669               	xorwf	_password+1,w
  3149  0637  1D03               	skipz
  3150  0638  2E88               	goto	l4399
  3151  0639  0822               	movf	_passwordu+2,w
  3152  063A  066A               	xorwf	_password+2,w
  3153  063B  1D03               	skipz
  3154  063C  2E88               	goto	l4399
  3155  063D  0823               	movf	_passwordu+3,w
  3156  063E  066B               	xorwf	_password+3,w
  3157  063F  1D03               	skipz
  3158  0640  2E88               	goto	l4399
  3159  0641  0824               	movf	_passwordu+4,w
  3160  0642  066C               	xorwf	_password+4,w
  3161  0643  1D03               	skipz
  3162  0644  2E88               	goto	l4399
  3163                           
  3164                           ;mainMaster.c: 427:                         if (seguridad == 0){
  3165  0645  0829               	movf	_seguridad,w
  3166  0646  1D03               	btfss	3,2
  3167  0647  2E73               	goto	l4389
  3168                           
  3169                           ;mainMaster.c: 428:                             seguridad = 1;
  3170  0648  01A9               	clrf	_seguridad
  3171  0649  0AA9               	incf	_seguridad,f
  3172                           
  3173                           ;mainMaster.c: 429:                             k = 0;
  3174  064A  01F8               	clrf	_k
  3175                           
  3176                           ;mainMaster.c: 430:                             Lcd_Clear();
  3177  064B  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  3178                           
  3179                           ;mainMaster.c: 431:                             Lcd_Set_Cursor(1,1);
  3180  0650  01F7               	clrf	Lcd_Set_Cursor@b
  3181  0651  0AF7               	incf	Lcd_Set_Cursor@b,f
  3182  0652  3001               	movlw	1
  3183  0653  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3184                           
  3185                           ;mainMaster.c: 432:                             Lcd_Write_String("Security ON");
  3186  0658  306D               	movlw	low (STR_26| (0+32768))
  3187  0659  1283               	bcf	3,5	;RP0=0, select bank0
  3188  065A  1303               	bcf	3,6	;RP1=0, select bank0
  3189  065B  00C7               	movwf	Lcd_Write_String@a
  3190  065C  3087               	movlw	high (STR_26| (0+32768))
  3191  065D                     L12:	
  3192  065D  00C8               	movwf	Lcd_Write_String@a+1
  3193  065E  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  3194                           
  3195                           ;mainMaster.c: 433:                             _delay((unsigned long)((2000)*(8000000/4
      +                          000.0)));
  3196  0663  3015               	movlw	21
  3197  0664  1683               	bsf	3,5	;RP0=1, select bank1
  3198  0665  1303               	bcf	3,6	;RP1=0, select bank1
  3199  0666  00A2               	movwf	(??_main^(0+128)+2)
  3200  0667  304B               	movlw	75
  3201  0668  00A1               	movwf	(??_main^(0+128)+1)
  3202  0669  30BD               	movlw	189
  3203  066A  00A0               	movwf	??_main^(0+128)
  3204  066B                     u5007:	
  3205  066B  0BA0               	decfsz	??_main^(0+128),f
  3206  066C  2E6B               	goto	u5007
  3207  066D  0BA1               	decfsz	(??_main^(0+128)+1),f
  3208  066E  2E6B               	goto	u5007
  3209  066F  0BA2               	decfsz	(??_main^(0+128)+2),f
  3210  0670  2E6B               	goto	u5007
  3211  0671  2E72               	nop2
  3212                           
  3213                           ;mainMaster.c: 434:                         } else {
  3214  0672  28AF               	goto	l3999
  3215  0673                     l4389:	
  3216                           
  3217                           ;mainMaster.c: 435:                             seguridad = 0;
  3218  0673  01A9               	clrf	_seguridad
  3219                           
  3220                           ;mainMaster.c: 436:                             k = 0;
  3221  0674  01F8               	clrf	_k
  3222                           
  3223                           ;mainMaster.c: 437:                             Lcd_Clear();
  3224  0675  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  3225                           
  3226                           ;mainMaster.c: 438:                             Lcd_Set_Cursor(1,1);
  3227  067A  01F7               	clrf	Lcd_Set_Cursor@b
  3228  067B  0AF7               	incf	Lcd_Set_Cursor@b,f
  3229  067C  3001               	movlw	1
  3230  067D  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3231                           
  3232                           ;mainMaster.c: 439:                             Lcd_Write_String("Security OFF");
  3233  0682  3048               	movlw	low (STR_27| (0+32768))
  3234  0683  1283               	bcf	3,5	;RP0=0, select bank0
  3235  0684  1303               	bcf	3,6	;RP1=0, select bank0
  3236  0685  00C7               	movwf	Lcd_Write_String@a
  3237  0686  3087               	movlw	high (STR_27| (0+32768))
  3238  0687  2E5D               	goto	L12
  3239  0688                     l4399:	
  3240                           
  3241                           ;mainMaster.c: 443:                         Lcd_Clear();
  3242  0688  160A  118A  26CA  120A  118A  	fcall	_Lcd_Clear
  3243                           
  3244                           ;mainMaster.c: 444:                         k = 0;
  3245  068D  01F8               	clrf	_k
  3246                           
  3247                           ;mainMaster.c: 445:                         Lcd_Set_Cursor(1,1);
  3248  068E  01F7               	clrf	Lcd_Set_Cursor@b
  3249  068F  0AF7               	incf	Lcd_Set_Cursor@b,f
  3250  0690  3001               	movlw	1
  3251  0691  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3252                           
  3253                           ;mainMaster.c: 446:                         Lcd_Write_String("WRONG");
  3254  0696  301C               	movlw	low (STR_28| (0+32768))
  3255  0697  1283               	bcf	3,5	;RP0=0, select bank0
  3256  0698  1303               	bcf	3,6	;RP1=0, select bank0
  3257  0699  00C7               	movwf	Lcd_Write_String@a
  3258  069A  3088               	movlw	high (STR_28| (0+32768))
  3259  069B  2E5D               	goto	L12
  3260  069C                     l430:	
  3261  069C  1C89               	btfss	9,1	;volatile
  3262  069D  28AF               	goto	l3999
  3263                           
  3264                           ;mainMaster.c: 450:                 Lcd_Set_Cursor(2,1);
  3265  069E  01F7               	clrf	Lcd_Set_Cursor@b
  3266  069F  0AF7               	incf	Lcd_Set_Cursor@b,f
  3267  06A0  3002               	movlw	2
  3268  06A1  120A  158A  2262  120A  118A  	fcall	_Lcd_Set_Cursor
  3269                           
  3270                           ;mainMaster.c: 451:                 Lcd_Write_String("            ");
  3271  06A6  303B               	movlw	low (STR_29| (0+32768))
  3272  06A7  1283               	bcf	3,5	;RP0=0, select bank0
  3273  06A8  1303               	bcf	3,6	;RP1=0, select bank0
  3274  06A9  00C7               	movwf	Lcd_Write_String@a
  3275  06AA  3087               	movlw	high (STR_29| (0+32768))
  3276  06AB  00C8               	movwf	Lcd_Write_String@a+1
  3277  06AC  120A  158A  21DB  120A  118A  	fcall	_Lcd_Write_String
  3278                           
  3279                           ;mainMaster.c: 452:                 k = 0;
  3280  06B1  01F8               	clrf	_k
  3281  06B2  28AF               	goto	l3999
  3282  06B3                     __end_of_main:	
  3283                           
  3284                           	psect	text1
  3285  0A1C                     __ptext1:	
  3286 ;; *************** function _write_RTC *****************
  3287 ;; Defined at:
  3288 ;;		line 494 in file "mainMaster.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  hour            1    wreg     unsigned char 
  3291 ;;  minutes         1    5[COMMON] unsigned char 
  3292 ;;  day             1    6[COMMON] unsigned char 
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;  hour            1    7[COMMON] unsigned char 
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  1    wreg      void 
  3297 ;; Registers used:
  3298 ;;		wreg, status,2, status,0, pclath, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3304 ;;      Params:         2       0       0       0       0
  3305 ;;      Locals:         1       0       0       0       0
  3306 ;;      Temps:          0       2       0       0       0
  3307 ;;      Totals:         3       2       0       0       0
  3308 ;;Total ram usage:        5 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    3
  3311 ;; This function calls:
  3312 ;;		_I2C_Master_Start
  3313 ;;		_I2C_Master_Stop
  3314 ;;		_I2C_Master_Write
  3315 ;; This function is called by:
  3316 ;;		_main
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           
  3321                           ;psect for function _write_RTC
  3322  0A1C                     _write_RTC:	
  3323                           
  3324                           ;incstack = 0
  3325                           ; Regs used in _write_RTC: [wreg+status,2+status,0+pclath+cstack]
  3326                           ;write_RTC@hour stored from wreg
  3327  0A1C  00F7               	movwf	write_RTC@hour
  3328                           
  3329                           ;mainMaster.c: 496:     I2C_Master_Start();
  3330  0A1D  160A  118A  2692  120A  158A  	fcall	_I2C_Master_Start
  3331                           
  3332                           ;mainMaster.c: 497:     I2C_Master_Write(0xD0);
  3333  0A22  30D0               	movlw	208
  3334  0A23  00F3               	movwf	I2C_Master_Write@d
  3335  0A24  3000               	movlw	0
  3336  0A25  00F4               	movwf	I2C_Master_Write@d+1
  3337  0A26  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  3338                           
  3339                           ;mainMaster.c: 498:     I2C_Master_Write(0x01);
  3340  0A2B  3001               	movlw	1
  3341  0A2C  00F3               	movwf	I2C_Master_Write@d
  3342  0A2D  3000               	movlw	0
  3343  0A2E  00F4               	movwf	I2C_Master_Write@d+1
  3344  0A2F  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  3345                           
  3346                           ;mainMaster.c: 499:     I2C_Master_Write(minutes);
  3347  0A34  0875               	movf	write_RTC@minutes,w
  3348  0A35  1283               	bcf	3,5	;RP0=0, select bank0
  3349  0A36  1303               	bcf	3,6	;RP1=0, select bank0
  3350  0A37  00C7               	movwf	??_write_RTC
  3351  0A38  01C8               	clrf	??_write_RTC+1
  3352  0A39  0847               	movf	??_write_RTC,w
  3353  0A3A  00F3               	movwf	I2C_Master_Write@d
  3354  0A3B  0848               	movf	??_write_RTC+1,w
  3355  0A3C  00F4               	movwf	I2C_Master_Write@d+1
  3356  0A3D  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  3357                           
  3358                           ;mainMaster.c: 500:     I2C_Master_Write(hour);
  3359  0A42  0877               	movf	write_RTC@hour,w
  3360  0A43  1283               	bcf	3,5	;RP0=0, select bank0
  3361  0A44  1303               	bcf	3,6	;RP1=0, select bank0
  3362  0A45  00C7               	movwf	??_write_RTC
  3363  0A46  01C8               	clrf	??_write_RTC+1
  3364  0A47  0847               	movf	??_write_RTC,w
  3365  0A48  00F3               	movwf	I2C_Master_Write@d
  3366  0A49  0848               	movf	??_write_RTC+1,w
  3367  0A4A  00F4               	movwf	I2C_Master_Write@d+1
  3368  0A4B  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  3369                           
  3370                           ;mainMaster.c: 501:     I2C_Master_Write(day);
  3371  0A50  0876               	movf	write_RTC@day,w
  3372  0A51  1283               	bcf	3,5	;RP0=0, select bank0
  3373  0A52  1303               	bcf	3,6	;RP1=0, select bank0
  3374  0A53  00C7               	movwf	??_write_RTC
  3375  0A54  01C8               	clrf	??_write_RTC+1
  3376  0A55  0847               	movf	??_write_RTC,w
  3377  0A56  00F3               	movwf	I2C_Master_Write@d
  3378  0A57  0848               	movf	??_write_RTC+1,w
  3379  0A58  00F4               	movwf	I2C_Master_Write@d+1
  3380  0A59  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  3381                           
  3382                           ;mainMaster.c: 502:     I2C_Master_Stop();
  3383  0A5E  160A  118A  2699   	fcall	_I2C_Master_Stop
  3384  0A61  0008               	return
  3385  0A62                     __end_of_write_RTC:	
  3386                           
  3387                           	psect	text2
  3388  088E                     __ptext2:	
  3389 ;; *************** function _strcmp *****************
  3390 ;; Defined at:
  3391 ;;		line 33 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  s1              1    wreg     PTR const unsigned char 
  3394 ;;		 -> time(6), temp(6), 
  3395 ;;  s2              2    3[COMMON] PTR const unsigned char 
  3396 ;;		 -> STR_12(6), STR_11(6), STR_10(6), 
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;  s1              1    1[BANK0 ] PTR const unsigned char 
  3399 ;;		 -> time(6), temp(6), 
  3400 ;;  r               1    0[BANK0 ] char 
  3401 ;; Return value:  Size  Location     Type
  3402 ;;                  2    3[COMMON] int 
  3403 ;; Registers used:
  3404 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3405 ;; Tracked objects:
  3406 ;;		On entry : 0/0
  3407 ;;		On exit  : 0/0
  3408 ;;		Unchanged: 0/0
  3409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3410 ;;      Params:         2       0       0       0       0
  3411 ;;      Locals:         0       2       0       0       0
  3412 ;;      Temps:          3       0       0       0       0
  3413 ;;      Totals:         5       2       0       0       0
  3414 ;;Total ram usage:        7 bytes
  3415 ;; Hardware stack levels used:    2
  3416 ;; Hardware stack levels required when called:    1
  3417 ;; This function calls:
  3418 ;;		Nothing
  3419 ;; This function is called by:
  3420 ;;		_main
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           
  3425                           ;psect for function _strcmp
  3426  088E                     _strcmp:	
  3427                           
  3428                           ;incstack = 0
  3429                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3430                           ;strcmp@s1 stored from wreg
  3431  088E  1283               	bcf	3,5	;RP0=0, select bank0
  3432  088F  1303               	bcf	3,6	;RP1=0, select bank0
  3433  0890  00C8               	movwf	strcmp@s1
  3434  0891  28A1               	goto	l3905
  3435  0892                     l3907:	
  3436  0892  0848               	movf	strcmp@s1,w
  3437  0893  0084               	movwf	4
  3438  0894  0800               	movf	0,w
  3439  0895  1903               	btfsc	3,2
  3440  0896  28B8               	goto	l3909
  3441  0897  3001               	movlw	1
  3442  0898  00F5               	movwf	??_strcmp
  3443  0899  0875               	movf	??_strcmp,w
  3444  089A  07C8               	addwf	strcmp@s1,f
  3445  089B  3001               	movlw	1
  3446  089C  07F3               	addwf	strcmp@s2,f
  3447  089D  1803               	skipnc
  3448  089E  0AF4               	incf	strcmp@s2+1,f
  3449  089F  3000               	movlw	0
  3450  08A0  07F4               	addwf	strcmp@s2+1,f
  3451  08A1                     l3905:	
  3452  08A1  0874               	movf	strcmp@s2+1,w
  3453  08A2  00FF               	movwf	127
  3454  08A3  0873               	movf	strcmp@s2,w
  3455  08A4  0084               	movwf	4
  3456  08A5  120A  118A  2700  120A  158A  	fcall	stringtab
  3457  08AA  00F5               	movwf	??_strcmp
  3458  08AB  0848               	movf	strcmp@s1,w
  3459  08AC  0084               	movwf	4
  3460  08AD  1383               	bcf	3,7	;select IRP bank0
  3461  08AE  0800               	movf	0,w
  3462  08AF  00F6               	movwf	??_strcmp+1
  3463  08B0  0875               	movf	??_strcmp,w
  3464  08B1  0276               	subwf	??_strcmp+1,w
  3465  08B2  00F7               	movwf	??_strcmp+2
  3466  08B3  0877               	movf	??_strcmp+2,w
  3467  08B4  00C7               	movwf	strcmp@r
  3468  08B5  0847               	movf	strcmp@r,w
  3469  08B6  1903               	btfsc	3,2
  3470  08B7  2892               	goto	l3907
  3471  08B8                     l3909:	
  3472  08B8  0847               	movf	strcmp@r,w
  3473  08B9  00F3               	movwf	?_strcmp
  3474  08BA  01F4               	clrf	?_strcmp+1
  3475  08BB  1BF3               	btfsc	?_strcmp,7
  3476  08BC  03F4               	decf	?_strcmp+1,f
  3477  08BD  0008               	return
  3478  08BE                     __end_of_strcmp:	
  3479                           
  3480                           	psect	text3
  3481  0B62                     __ptext3:	
  3482 ;; *************** function _setup *****************
  3483 ;; Defined at:
  3484 ;;		line 458 in file "mainMaster.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;		None
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;		None
  3489 ;; Return value:  Size  Location     Type
  3490 ;;                  1    wreg      void 
  3491 ;; Registers used:
  3492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3498 ;;      Params:         0       0       0       0       0
  3499 ;;      Locals:         0       0       0       0       0
  3500 ;;      Temps:          0       0       0       0       0
  3501 ;;      Totals:         0       0       0       0       0
  3502 ;;Total ram usage:        0 bytes
  3503 ;; Hardware stack levels used:    1
  3504 ;; Hardware stack levels required when called:    4
  3505 ;; This function calls:
  3506 ;;		_I2C_Master_Init
  3507 ;;		_Lcd_Init
  3508 ;;		_UART_Init
  3509 ;;		_initOscilador
  3510 ;; This function is called by:
  3511 ;;		_main
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           
  3516                           ;psect for function _setup
  3517  0B62                     _setup:	
  3518                           
  3519                           ;mainMaster.c: 459:     initOscilador(7);
  3520                           
  3521                           ;incstack = 0
  3522                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3523  0B62  3007               	movlw	7
  3524  0B63  120A  158A  22B2  120A  158A  	fcall	_initOscilador
  3525                           
  3526                           ;mainMaster.c: 460:     ANSELH = 0;
  3527  0B68  1683               	bsf	3,5	;RP0=1, select bank3
  3528  0B69  1703               	bsf	3,6	;RP1=1, select bank3
  3529  0B6A  0189               	clrf	9	;volatile
  3530                           
  3531                           ;mainMaster.c: 461:     ANSEL = 0;
  3532  0B6B  0188               	clrf	8	;volatile
  3533                           
  3534                           ;mainMaster.c: 462:     TRISB = 0;
  3535  0B6C  1683               	bsf	3,5	;RP0=1, select bank1
  3536  0B6D  1303               	bcf	3,6	;RP1=0, select bank1
  3537  0B6E  0186               	clrf	6	;volatile
  3538                           
  3539                           ;mainMaster.c: 463:     TRISA = 0;
  3540  0B6F  0185               	clrf	5	;volatile
  3541                           
  3542                           ;mainMaster.c: 464:     TRISD = 0xFF;
  3543  0B70  30FF               	movlw	255
  3544  0B71  0088               	movwf	8	;volatile
  3545                           
  3546                           ;mainMaster.c: 465:     PORTB = 0;
  3547  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  3548  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  3549  0B74  0186               	clrf	6	;volatile
  3550                           
  3551                           ;mainMaster.c: 466:     PORTA = 0;
  3552  0B75  0185               	clrf	5	;volatile
  3553                           
  3554                           ;mainMaster.c: 467:     TRISC = 0x01;
  3555  0B76  3001               	movlw	1
  3556  0B77  1683               	bsf	3,5	;RP0=1, select bank1
  3557  0B78  1303               	bcf	3,6	;RP1=0, select bank1
  3558  0B79  0087               	movwf	7	;volatile
  3559                           
  3560                           ;mainMaster.c: 468:     PORTC = 0;
  3561  0B7A  1283               	bcf	3,5	;RP0=0, select bank0
  3562  0B7B  1303               	bcf	3,6	;RP1=0, select bank0
  3563  0B7C  0187               	clrf	7	;volatile
  3564                           
  3565                           ;mainMaster.c: 469:     PORTE = 0;
  3566  0B7D  0189               	clrf	9	;volatile
  3567                           
  3568                           ;mainMaster.c: 470:     TRISE = 0xFF;
  3569  0B7E  30FF               	movlw	255
  3570  0B7F  1683               	bsf	3,5	;RP0=1, select bank1
  3571  0B80  1303               	bcf	3,6	;RP1=0, select bank1
  3572  0B81  0089               	movwf	9	;volatile
  3573                           
  3574                           ;mainMaster.c: 471:     i = 0;
  3575  0B82  1283               	bcf	3,5	;RP0=0, select bank0
  3576  0B83  1303               	bcf	3,6	;RP1=0, select bank0
  3577  0B84  01B6               	clrf	_i
  3578                           
  3579                           ;mainMaster.c: 472:     door = 0;
  3580  0B85  01BA               	clrf	_door
  3581                           
  3582                           ;mainMaster.c: 473:     trip = 0;
  3583  0B86  01B9               	clrf	_trip
  3584                           
  3585                           ;mainMaster.c: 474:     alarm = 0;
  3586  0B87  01AF               	clrf	_alarm
  3587                           
  3588                           ;mainMaster.c: 475:     change2 = 0;
  3589  0B88  01B2               	clrf	_change2
  3590                           
  3591                           ;mainMaster.c: 476:     change3 = 0;
  3592  0B89  01B1               	clrf	_change3
  3593                           
  3594                           ;mainMaster.c: 477:     IR = 0;
  3595  0B8A  01B7               	clrf	_IR
  3596                           
  3597                           ;mainMaster.c: 478:     PIR = 0;
  3598  0B8B  01B8               	clrf	_PIR
  3599                           
  3600                           ;mainMaster.c: 479:     OPTION_REGbits.T0CS = 0;
  3601  0B8C  1683               	bsf	3,5	;RP0=1, select bank1
  3602  0B8D  1303               	bcf	3,6	;RP1=0, select bank1
  3603  0B8E  1281               	bcf	1,5	;volatile
  3604                           
  3605                           ;mainMaster.c: 480:     OPTION_REGbits.T0SE = 0;
  3606  0B8F  1201               	bcf	1,4	;volatile
  3607                           
  3608                           ;mainMaster.c: 481:     OPTION_REGbits.PSA = 1;
  3609  0B90  1581               	bsf	1,3	;volatile
  3610                           
  3611                           ;mainMaster.c: 482:     OPTION_REGbits.PS2 = 0;
  3612  0B91  1101               	bcf	1,2	;volatile
  3613                           
  3614                           ;mainMaster.c: 483:     OPTION_REGbits.PS1 = 0;
  3615  0B92  1081               	bcf	1,1	;volatile
  3616                           
  3617                           ;mainMaster.c: 484:     OPTION_REGbits.PS0 = 0;
  3618  0B93  1001               	bcf	1,0	;volatile
  3619                           
  3620                           ;mainMaster.c: 485:     TMR0 = 56;
  3621  0B94  3038               	movlw	56
  3622  0B95  1283               	bcf	3,5	;RP0=0, select bank0
  3623  0B96  1303               	bcf	3,6	;RP1=0, select bank0
  3624  0B97  0081               	movwf	1	;volatile
  3625                           
  3626                           ;mainMaster.c: 486:     INTCONbits.T0IF = 0;
  3627  0B98  110B               	bcf	11,2	;volatile
  3628                           
  3629                           ;mainMaster.c: 487:     INTCONbits.T0IE = 1;
  3630  0B99  168B               	bsf	11,5	;volatile
  3631                           
  3632                           ;mainMaster.c: 488:     INTCONbits.GIE = 1;
  3633  0B9A  178B               	bsf	11,7	;volatile
  3634                           
  3635                           ;mainMaster.c: 489:     Lcd_Init();
  3636  0B9B  120A  158A  241D  120A  158A  	fcall	_Lcd_Init
  3637                           
  3638                           ;mainMaster.c: 490:     UART_Init(9600);
  3639  0BA0  3000               	movlw	0
  3640  0BA1  1283               	bcf	3,5	;RP0=0, select bank0
  3641  0BA2  1303               	bcf	3,6	;RP1=0, select bank0
  3642  0BA3  00D8               	movwf	UART_Init@baudrate+3
  3643  0BA4  3000               	movlw	0
  3644  0BA5  00D7               	movwf	UART_Init@baudrate+2
  3645  0BA6  3025               	movlw	37
  3646  0BA7  00D6               	movwf	UART_Init@baudrate+1
  3647  0BA8  3080               	movlw	128
  3648  0BA9  00D5               	movwf	UART_Init@baudrate
  3649  0BAA  120A  158A  263A  120A  158A  	fcall	_UART_Init
  3650                           
  3651                           ;mainMaster.c: 491:     I2C_Master_Init(100000);
  3652  0BAF  3000               	movlw	0
  3653  0BB0  1283               	bcf	3,5	;RP0=0, select bank0
  3654  0BB1  1303               	bcf	3,6	;RP1=0, select bank0
  3655  0BB2  00D7               	movwf	I2C_Master_Init@c+3
  3656  0BB3  3001               	movlw	1
  3657  0BB4  00D6               	movwf	I2C_Master_Init@c+2
  3658  0BB5  3086               	movlw	134
  3659  0BB6  00D5               	movwf	I2C_Master_Init@c+1
  3660  0BB7  30A0               	movlw	160
  3661  0BB8  00D4               	movwf	I2C_Master_Init@c
  3662  0BB9  120A  158A  20F2   	fcall	_I2C_Master_Init
  3663  0BBC  0008               	return
  3664  0BBD                     __end_of_setup:	
  3665                           
  3666                           	psect	text4
  3667  0AB2                     __ptext4:	
  3668 ;; *************** function _initOscilador *****************
  3669 ;; Defined at:
  3670 ;;		line 11 in file "./Oscilador.h"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;  option          1    wreg     unsigned char 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;  option          1    5[COMMON] unsigned char 
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  1    wreg      void 
  3677 ;; Registers used:
  3678 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3684 ;;      Params:         0       0       0       0       0
  3685 ;;      Locals:         1       0       0       0       0
  3686 ;;      Temps:          2       0       0       0       0
  3687 ;;      Totals:         3       0       0       0       0
  3688 ;;Total ram usage:        3 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    1
  3691 ;; This function calls:
  3692 ;;		Nothing
  3693 ;; This function is called by:
  3694 ;;		_setup
  3695 ;; This function uses a non-reentrant model
  3696 ;;
  3697                           
  3698                           
  3699                           ;psect for function _initOscilador
  3700  0AB2                     _initOscilador:	
  3701                           
  3702                           ;incstack = 0
  3703                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  3704                           ;initOscilador@option stored from wreg
  3705  0AB2  00F5               	movwf	initOscilador@option
  3706                           
  3707                           ;./Oscilador.h: 13: 
  3708  0AB3  2AE3               	goto	l2555
  3709  0AB4                     l2535:	
  3710                           
  3711                           ;./Oscilador.h: 16:         case 3:
  3712  0AB4  308F               	movlw	-113
  3713  0AB5  1683               	bsf	3,5	;RP0=1, select bank1
  3714  0AB6  1303               	bcf	3,6	;RP1=0, select bank1
  3715  0AB7  058F               	andwf	15,f	;volatile
  3716                           
  3717                           ;./Oscilador.h: 17: 
  3718  0AB8  2B05               	goto	l203
  3719  0AB9                     l2537:	
  3720                           
  3721                           ;./Oscilador.h: 20:         case 4:
  3722  0AB9  1683               	bsf	3,5	;RP0=1, select bank1
  3723  0ABA  1303               	bcf	3,6	;RP1=0, select bank1
  3724  0ABB  080F               	movf	15,w	;volatile
  3725  0ABC  398F               	andlw	-113
  3726  0ABD  3810               	iorlw	16
  3727  0ABE  2ADC               	goto	L17
  3728  0ABF                     l2539:	
  3729                           ;./Oscilador.h: 21: 
  3730                           
  3731                           
  3732                           ;./Oscilador.h: 24:         case 5:
  3733  0ABF  1683               	bsf	3,5	;RP0=1, select bank1
  3734  0AC0  1303               	bcf	3,6	;RP1=0, select bank1
  3735  0AC1  080F               	movf	15,w	;volatile
  3736  0AC2  398F               	andlw	-113
  3737  0AC3  3820               	iorlw	32
  3738  0AC4  2ADC               	goto	L17
  3739  0AC5                     l2541:	
  3740                           ;./Oscilador.h: 25: 
  3741                           
  3742                           
  3743                           ;./Oscilador.h: 28:         case 6:
  3744  0AC5  1683               	bsf	3,5	;RP0=1, select bank1
  3745  0AC6  1303               	bcf	3,6	;RP1=0, select bank1
  3746  0AC7  080F               	movf	15,w	;volatile
  3747  0AC8  398F               	andlw	-113
  3748  0AC9  3830               	iorlw	48
  3749  0ACA  2ADC               	goto	L17
  3750  0ACB                     l2543:	
  3751                           ;./Oscilador.h: 29: 
  3752                           
  3753                           
  3754                           ;./Oscilador.h: 32:         case 7:
  3755  0ACB  1683               	bsf	3,5	;RP0=1, select bank1
  3756  0ACC  1303               	bcf	3,6	;RP1=0, select bank1
  3757  0ACD  080F               	movf	15,w	;volatile
  3758  0ACE  398F               	andlw	-113
  3759  0ACF  3840               	iorlw	64
  3760  0AD0  2ADC               	goto	L17
  3761  0AD1                     l2545:	
  3762                           ;./Oscilador.h: 33: 
  3763                           
  3764                           
  3765                           ;./Oscilador.h: 36:         default:
  3766  0AD1  1683               	bsf	3,5	;RP0=1, select bank1
  3767  0AD2  1303               	bcf	3,6	;RP1=0, select bank1
  3768  0AD3  080F               	movf	15,w	;volatile
  3769  0AD4  398F               	andlw	-113
  3770  0AD5  3850               	iorlw	80
  3771  0AD6  2ADC               	goto	L17
  3772  0AD7                     l2547:	
  3773                           ;./Oscilador.h: 37: 
  3774                           
  3775                           
  3776                           ;./Oscilador.h: 40:     }
  3777  0AD7  1683               	bsf	3,5	;RP0=1, select bank1
  3778  0AD8  1303               	bcf	3,6	;RP1=0, select bank1
  3779  0AD9  080F               	movf	15,w	;volatile
  3780  0ADA  398F               	andlw	-113
  3781  0ADB  3860               	iorlw	96
  3782  0ADC                     L17:	
  3783  0ADC  008F               	movwf	15	;volatile
  3784                           
  3785                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  3786  0ADD  2B05               	goto	l203
  3787  0ADE                     l2549:	
  3788  0ADE                     l2551:	
  3789  0ADE  3070               	movlw	112
  3790  0ADF  1683               	bsf	3,5	;RP0=1, select bank1
  3791  0AE0  1303               	bcf	3,6	;RP1=0, select bank1
  3792  0AE1  048F               	iorwf	15,f	;volatile
  3793  0AE2  2B05               	goto	l203
  3794  0AE3                     l2555:	
  3795  0AE3  0875               	movf	initOscilador@option,w
  3796  0AE4  00F3               	movwf	??_initOscilador
  3797  0AE5  01F4               	clrf	??_initOscilador+1
  3798                           
  3799                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3800                           ; Switch size 1, requested type "simple"
  3801                           ; Number of cases is 1, Range of values is 0 to 0
  3802                           ; switch strategies available:
  3803                           ; Name         Instructions Cycles
  3804                           ; simple_byte            4     3 (average)
  3805                           ; direct_byte           11     8 (fixed)
  3806                           ; jumptable            260     6 (fixed)
  3807                           ;	Chosen strategy is simple_byte
  3808  0AE6  0874               	movf	??_initOscilador+1,w
  3809  0AE7  3A00               	xorlw	0	; case 0
  3810  0AE8  1903               	skipnz
  3811  0AE9  2AEB               	goto	l4493
  3812  0AEA  2ADE               	goto	l2551
  3813  0AEB                     l4493:	
  3814                           
  3815                           ; Switch size 1, requested type "simple"
  3816                           ; Number of cases is 8, Range of values is 0 to 7
  3817                           ; switch strategies available:
  3818                           ; Name         Instructions Cycles
  3819                           ; simple_byte           25    13 (average)
  3820                           ; direct_byte           32     8 (fixed)
  3821                           ; jumptable            260     6 (fixed)
  3822                           ;	Chosen strategy is simple_byte
  3823  0AEB  0873               	movf	??_initOscilador,w
  3824  0AEC  3A00               	xorlw	0	; case 0
  3825  0AED  1903               	skipnz
  3826  0AEE  2AB4               	goto	l2535
  3827  0AEF  3A01               	xorlw	1	; case 1
  3828  0AF0  1903               	skipnz
  3829  0AF1  2AB9               	goto	l2537
  3830  0AF2  3A03               	xorlw	3	; case 2
  3831  0AF3  1903               	skipnz
  3832  0AF4  2ABF               	goto	l2539
  3833  0AF5  3A01               	xorlw	1	; case 3
  3834  0AF6  1903               	skipnz
  3835  0AF7  2AC5               	goto	l2541
  3836  0AF8  3A07               	xorlw	7	; case 4
  3837  0AF9  1903               	skipnz
  3838  0AFA  2ACB               	goto	l2543
  3839  0AFB  3A01               	xorlw	1	; case 5
  3840  0AFC  1903               	skipnz
  3841  0AFD  2AD1               	goto	l2545
  3842  0AFE  3A03               	xorlw	3	; case 6
  3843  0AFF  1903               	skipnz
  3844  0B00  2AD7               	goto	l2547
  3845  0B01  3A01               	xorlw	1	; case 7
  3846  0B02  1903               	skipnz
  3847  0B03  2ADE               	goto	l2549
  3848  0B04  2ADE               	goto	l2551
  3849  0B05                     l203:	
  3850  0B05  140F               	bsf	15,0	;volatile
  3851  0B06  0008               	return
  3852  0B07                     __end_of_initOscilador:	
  3853                           
  3854                           	psect	text5
  3855  0E3A                     __ptext5:	
  3856 ;; *************** function _UART_Init *****************
  3857 ;; Defined at:
  3858 ;;		line 8 in file "./UART.h"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;  baudrate        4   14[BANK0 ] const long 
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  x               2    4[COMMON] unsigned int 
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  1    wreg      unsigned char 
  3865 ;; Registers used:
  3866 ;;		wreg, status,2, status,0, pclath, cstack
  3867 ;; Tracked objects:
  3868 ;;		On entry : 0/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3872 ;;      Params:         0       4       0       0       0
  3873 ;;      Locals:         2       0       0       0       0
  3874 ;;      Temps:          0      12       0       0       0
  3875 ;;      Totals:         2      16       0       0       0
  3876 ;;Total ram usage:       18 bytes
  3877 ;; Hardware stack levels used:    1
  3878 ;; Hardware stack levels required when called:    2
  3879 ;; This function calls:
  3880 ;;		___aldiv
  3881 ;; This function is called by:
  3882 ;;		_setup
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886                           
  3887                           ;psect for function _UART_Init
  3888  0E3A                     _UART_Init:	
  3889                           
  3890                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
  3891                           
  3892                           ;incstack = 0
  3893                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  3894  0E3A  1283               	bcf	3,5	;RP0=0, select bank0
  3895  0E3B  1303               	bcf	3,6	;RP1=0, select bank0
  3896  0E3C  0855               	movf	UART_Init@baudrate,w
  3897  0E3D  00D9               	movwf	??_UART_Init
  3898  0E3E  0856               	movf	UART_Init@baudrate+1,w
  3899  0E3F  00DA               	movwf	??_UART_Init+1
  3900  0E40  0857               	movf	UART_Init@baudrate+2,w
  3901  0E41  00DB               	movwf	??_UART_Init+2
  3902  0E42  0858               	movf	UART_Init@baudrate+3,w
  3903  0E43  00DC               	movwf	??_UART_Init+3
  3904  0E44  3006               	movlw	6
  3905  0E45                     u3735:	
  3906  0E45  1003               	clrc
  3907  0E46  0DD9               	rlf	??_UART_Init,f
  3908  0E47  0DDA               	rlf	??_UART_Init+1,f
  3909  0E48  0DDB               	rlf	??_UART_Init+2,f
  3910  0E49  0DDC               	rlf	??_UART_Init+3,f
  3911  0E4A  3EFF               	addlw	-1
  3912  0E4B  1D03               	skipz
  3913  0E4C  2E45               	goto	u3735
  3914  0E4D  085C               	movf	??_UART_Init+3,w
  3915  0E4E  00CA               	movwf	___aldiv@divisor+3
  3916  0E4F  085B               	movf	??_UART_Init+2,w
  3917  0E50  00C9               	movwf	___aldiv@divisor+2
  3918  0E51  085A               	movf	??_UART_Init+1,w
  3919  0E52  00C8               	movwf	___aldiv@divisor+1
  3920  0E53  0859               	movf	??_UART_Init,w
  3921  0E54  00C7               	movwf	___aldiv@divisor
  3922  0E55  0855               	movf	UART_Init@baudrate,w
  3923  0E56  00DD               	movwf	??_UART_Init+4
  3924  0E57  0856               	movf	UART_Init@baudrate+1,w
  3925  0E58  00DE               	movwf	??_UART_Init+5
  3926  0E59  0857               	movf	UART_Init@baudrate+2,w
  3927  0E5A  00DF               	movwf	??_UART_Init+6
  3928  0E5B  0858               	movf	UART_Init@baudrate+3,w
  3929  0E5C  00E0               	movwf	??_UART_Init+7
  3930  0E5D  3006               	movlw	6
  3931  0E5E                     u3745:	
  3932  0E5E  1003               	clrc
  3933  0E5F  0DDD               	rlf	??_UART_Init+4,f
  3934  0E60  0DDE               	rlf	??_UART_Init+5,f
  3935  0E61  0DDF               	rlf	??_UART_Init+6,f
  3936  0E62  0DE0               	rlf	??_UART_Init+7,f
  3937  0E63  3EFF               	addlw	-1
  3938  0E64  1D03               	skipz
  3939  0E65  2E5E               	goto	u3745
  3940  0E66  3000               	movlw	0
  3941  0E67  00E1               	movwf	??_UART_Init+8
  3942  0E68  3012               	movlw	18
  3943  0E69  00E2               	movwf	??_UART_Init+9
  3944  0E6A  307A               	movlw	122
  3945  0E6B  00E3               	movwf	??_UART_Init+10
  3946  0E6C  3000               	movlw	0
  3947  0E6D  00E4               	movwf	??_UART_Init+11
  3948  0E6E  085D               	movf	??_UART_Init+4,w
  3949  0E6F  02E1               	subwf	??_UART_Init+8,f
  3950  0E70  085E               	movf	??_UART_Init+5,w
  3951  0E71  1C03               	skipc
  3952  0E72  0F5E               	incfsz	??_UART_Init+5,w
  3953  0E73  2E75               	goto	u3751
  3954  0E74  2E76               	goto	u3752
  3955  0E75                     u3751:	
  3956  0E75  02E2               	subwf	??_UART_Init+9,f
  3957  0E76                     u3752:	
  3958  0E76  085F               	movf	??_UART_Init+6,w
  3959  0E77  1C03               	skipc
  3960  0E78  0F5F               	incfsz	??_UART_Init+6,w
  3961  0E79  2E7B               	goto	u3753
  3962  0E7A  2E7C               	goto	u3754
  3963  0E7B                     u3753:	
  3964  0E7B  02E3               	subwf	??_UART_Init+10,f
  3965  0E7C                     u3754:	
  3966  0E7C  0860               	movf	??_UART_Init+7,w
  3967  0E7D  1C03               	skipc
  3968  0E7E  0F60               	incfsz	??_UART_Init+7,w
  3969  0E7F  2E81               	goto	u3755
  3970  0E80  2E82               	goto	u3756
  3971  0E81                     u3755:	
  3972  0E81  02E4               	subwf	??_UART_Init+11,f
  3973  0E82                     u3756:	
  3974  0E82  0864               	movf	??_UART_Init+11,w
  3975  0E83  00CE               	movwf	___aldiv@dividend+3
  3976  0E84  0863               	movf	??_UART_Init+10,w
  3977  0E85  00CD               	movwf	___aldiv@dividend+2
  3978  0E86  0862               	movf	??_UART_Init+9,w
  3979  0E87  00CC               	movwf	___aldiv@dividend+1
  3980  0E88  0861               	movf	??_UART_Init+8,w
  3981  0E89  00CB               	movwf	___aldiv@dividend
  3982  0E8A  120A  158A  2506  120A  158A  	fcall	___aldiv
  3983  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  3984  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  3985  0E91  0848               	movf	?___aldiv+1,w
  3986  0E92  00F5               	movwf	UART_Init@x+1
  3987  0E93  0847               	movf	?___aldiv,w
  3988  0E94  00F4               	movwf	UART_Init@x
  3989                           
  3990                           ;./UART.h: 12:  if(x>255)
  3991  0E95  3001               	movlw	1
  3992  0E96  0275               	subwf	UART_Init@x+1,w
  3993  0E97  3000               	movlw	0
  3994  0E98  1903               	skipnz
  3995  0E99  0274               	subwf	UART_Init@x,w
  3996  0E9A  1C03               	skipc
  3997  0E9B  2EF8               	goto	l3661
  3998                           
  3999                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  4000  0E9C  0855               	movf	UART_Init@baudrate,w
  4001  0E9D  00D9               	movwf	??_UART_Init
  4002  0E9E  0856               	movf	UART_Init@baudrate+1,w
  4003  0E9F  00DA               	movwf	??_UART_Init+1
  4004  0EA0  0857               	movf	UART_Init@baudrate+2,w
  4005  0EA1  00DB               	movwf	??_UART_Init+2
  4006  0EA2  0858               	movf	UART_Init@baudrate+3,w
  4007  0EA3  00DC               	movwf	??_UART_Init+3
  4008  0EA4  3004               	movlw	4
  4009  0EA5                     u3775:	
  4010  0EA5  1003               	clrc
  4011  0EA6  0DD9               	rlf	??_UART_Init,f
  4012  0EA7  0DDA               	rlf	??_UART_Init+1,f
  4013  0EA8  0DDB               	rlf	??_UART_Init+2,f
  4014  0EA9  0DDC               	rlf	??_UART_Init+3,f
  4015  0EAA  3EFF               	addlw	-1
  4016  0EAB  1D03               	skipz
  4017  0EAC  2EA5               	goto	u3775
  4018  0EAD  085C               	movf	??_UART_Init+3,w
  4019  0EAE  00CA               	movwf	___aldiv@divisor+3
  4020  0EAF  085B               	movf	??_UART_Init+2,w
  4021  0EB0  00C9               	movwf	___aldiv@divisor+2
  4022  0EB1  085A               	movf	??_UART_Init+1,w
  4023  0EB2  00C8               	movwf	___aldiv@divisor+1
  4024  0EB3  0859               	movf	??_UART_Init,w
  4025  0EB4  00C7               	movwf	___aldiv@divisor
  4026  0EB5  0855               	movf	UART_Init@baudrate,w
  4027  0EB6  00DD               	movwf	??_UART_Init+4
  4028  0EB7  0856               	movf	UART_Init@baudrate+1,w
  4029  0EB8  00DE               	movwf	??_UART_Init+5
  4030  0EB9  0857               	movf	UART_Init@baudrate+2,w
  4031  0EBA  00DF               	movwf	??_UART_Init+6
  4032  0EBB  0858               	movf	UART_Init@baudrate+3,w
  4033  0EBC  00E0               	movwf	??_UART_Init+7
  4034  0EBD  3004               	movlw	4
  4035  0EBE                     u3785:	
  4036  0EBE  1003               	clrc
  4037  0EBF  0DDD               	rlf	??_UART_Init+4,f
  4038  0EC0  0DDE               	rlf	??_UART_Init+5,f
  4039  0EC1  0DDF               	rlf	??_UART_Init+6,f
  4040  0EC2  0DE0               	rlf	??_UART_Init+7,f
  4041  0EC3  3EFF               	addlw	-1
  4042  0EC4  1D03               	skipz
  4043  0EC5  2EBE               	goto	u3785
  4044  0EC6  3000               	movlw	0
  4045  0EC7  00E1               	movwf	??_UART_Init+8
  4046  0EC8  3012               	movlw	18
  4047  0EC9  00E2               	movwf	??_UART_Init+9
  4048  0ECA  307A               	movlw	122
  4049  0ECB  00E3               	movwf	??_UART_Init+10
  4050  0ECC  3000               	movlw	0
  4051  0ECD  00E4               	movwf	??_UART_Init+11
  4052  0ECE  085D               	movf	??_UART_Init+4,w
  4053  0ECF  02E1               	subwf	??_UART_Init+8,f
  4054  0ED0  085E               	movf	??_UART_Init+5,w
  4055  0ED1  1C03               	skipc
  4056  0ED2  0F5E               	incfsz	??_UART_Init+5,w
  4057  0ED3  2ED5               	goto	u3791
  4058  0ED4  2ED6               	goto	u3792
  4059  0ED5                     u3791:	
  4060  0ED5  02E2               	subwf	??_UART_Init+9,f
  4061  0ED6                     u3792:	
  4062  0ED6  085F               	movf	??_UART_Init+6,w
  4063  0ED7  1C03               	skipc
  4064  0ED8  0F5F               	incfsz	??_UART_Init+6,w
  4065  0ED9  2EDB               	goto	u3793
  4066  0EDA  2EDC               	goto	u3794
  4067  0EDB                     u3793:	
  4068  0EDB  02E3               	subwf	??_UART_Init+10,f
  4069  0EDC                     u3794:	
  4070  0EDC  0860               	movf	??_UART_Init+7,w
  4071  0EDD  1C03               	skipc
  4072  0EDE  0F60               	incfsz	??_UART_Init+7,w
  4073  0EDF  2EE1               	goto	u3795
  4074  0EE0  2EE2               	goto	u3796
  4075  0EE1                     u3795:	
  4076  0EE1  02E4               	subwf	??_UART_Init+11,f
  4077  0EE2                     u3796:	
  4078  0EE2  0864               	movf	??_UART_Init+11,w
  4079  0EE3  00CE               	movwf	___aldiv@dividend+3
  4080  0EE4  0863               	movf	??_UART_Init+10,w
  4081  0EE5  00CD               	movwf	___aldiv@dividend+2
  4082  0EE6  0862               	movf	??_UART_Init+9,w
  4083  0EE7  00CC               	movwf	___aldiv@dividend+1
  4084  0EE8  0861               	movf	??_UART_Init+8,w
  4085  0EE9  00CB               	movwf	___aldiv@dividend
  4086  0EEA  120A  158A  2506  120A  158A  	fcall	___aldiv
  4087  0EEF  1283               	bcf	3,5	;RP0=0, select bank0
  4088  0EF0  1303               	bcf	3,6	;RP1=0, select bank0
  4089  0EF1  0848               	movf	?___aldiv+1,w
  4090  0EF2  00F5               	movwf	UART_Init@x+1
  4091  0EF3  0847               	movf	?___aldiv,w
  4092  0EF4  00F4               	movwf	UART_Init@x
  4093                           
  4094                           ;./UART.h: 15:   BRGH = 1;
  4095  0EF5  1683               	bsf	3,5	;RP0=1, select bank1
  4096  0EF6  1303               	bcf	3,6	;RP1=0, select bank1
  4097  0EF7  1518               	bsf	24,2	;volatile
  4098  0EF8                     l3661:	
  4099                           
  4100                           ;./UART.h: 17:  if(x<256)
  4101  0EF8  3001               	movlw	1
  4102  0EF9  0275               	subwf	UART_Init@x+1,w
  4103  0EFA  3000               	movlw	0
  4104  0EFB  1903               	skipnz
  4105  0EFC  0274               	subwf	UART_Init@x,w
  4106  0EFD  1803               	skipnc
  4107  0EFE  0008               	return
  4108                           
  4109                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  4110  0EFF  0874               	movf	UART_Init@x,w
  4111  0F00  1683               	bsf	3,5	;RP0=1, select bank1
  4112  0F01  1303               	bcf	3,6	;RP1=0, select bank1
  4113  0F02  0099               	movwf	25	;volatile
  4114                           
  4115                           ;./UART.h: 20:    SYNC = 0;
  4116  0F03  1218               	bcf	24,4	;volatile
  4117                           
  4118                           ;./UART.h: 21:    SPEN = 1;
  4119  0F04  1283               	bcf	3,5	;RP0=0, select bank0
  4120  0F05  1303               	bcf	3,6	;RP1=0, select bank0
  4121  0F06  1798               	bsf	24,7	;volatile
  4122                           
  4123                           ;./UART.h: 22:           TRISC7 = 1;
  4124  0F07  1683               	bsf	3,5	;RP0=1, select bank1
  4125  0F08  1303               	bcf	3,6	;RP1=0, select bank1
  4126  0F09  1787               	bsf	7,7	;volatile
  4127                           
  4128                           ;./UART.h: 23:           TRISC6 = 1;
  4129  0F0A  1707               	bsf	7,6	;volatile
  4130                           
  4131                           ;./UART.h: 24:           CREN = 1;
  4132  0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  4133  0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  4134  0F0D  1618               	bsf	24,4	;volatile
  4135                           
  4136                           ;./UART.h: 25:           TXEN = 1;
  4137  0F0E  1683               	bsf	3,5	;RP0=1, select bank1
  4138  0F0F  1303               	bcf	3,6	;RP1=0, select bank1
  4139  0F10  1698               	bsf	24,5	;volatile
  4140  0F11  0008               	return
  4141  0F12                     __end_of_UART_Init:	
  4142                           
  4143                           	psect	text6
  4144  0D06                     __ptext6:	
  4145 ;; *************** function ___aldiv *****************
  4146 ;; Defined at:
  4147 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;  divisor         4    0[BANK0 ] long 
  4150 ;;  dividend        4    4[BANK0 ] long 
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;  quotient        4   10[BANK0 ] long 
  4153 ;;  sign            1    9[BANK0 ] unsigned char 
  4154 ;;  counter         1    8[BANK0 ] unsigned char 
  4155 ;; Return value:  Size  Location     Type
  4156 ;;                  4    0[BANK0 ] long 
  4157 ;; Registers used:
  4158 ;;		wreg, status,2, status,0
  4159 ;; Tracked objects:
  4160 ;;		On entry : 0/0
  4161 ;;		On exit  : 0/0
  4162 ;;		Unchanged: 0/0
  4163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4164 ;;      Params:         0       8       0       0       0
  4165 ;;      Locals:         0       6       0       0       0
  4166 ;;      Temps:          1       0       0       0       0
  4167 ;;      Totals:         1      14       0       0       0
  4168 ;;Total ram usage:       15 bytes
  4169 ;; Hardware stack levels used:    1
  4170 ;; Hardware stack levels required when called:    1
  4171 ;; This function calls:
  4172 ;;		Nothing
  4173 ;; This function is called by:
  4174 ;;		_UART_Init
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           
  4179                           ;psect for function ___aldiv
  4180  0D06                     ___aldiv:	
  4181                           
  4182                           ;incstack = 0
  4183                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4184  0D06  1283               	bcf	3,5	;RP0=0, select bank0
  4185  0D07  1303               	bcf	3,6	;RP1=0, select bank0
  4186  0D08  01D0               	clrf	___aldiv@sign
  4187  0D09  1FCA               	btfss	___aldiv@divisor+3,7
  4188  0D0A  2D18               	goto	l653
  4189  0D0B  09C7               	comf	___aldiv@divisor,f
  4190  0D0C  09C8               	comf	___aldiv@divisor+1,f
  4191  0D0D  09C9               	comf	___aldiv@divisor+2,f
  4192  0D0E  09CA               	comf	___aldiv@divisor+3,f
  4193  0D0F  0AC7               	incf	___aldiv@divisor,f
  4194  0D10  1903               	skipnz
  4195  0D11  0AC8               	incf	___aldiv@divisor+1,f
  4196  0D12  1903               	skipnz
  4197  0D13  0AC9               	incf	___aldiv@divisor+2,f
  4198  0D14  1903               	skipnz
  4199  0D15  0ACA               	incf	___aldiv@divisor+3,f
  4200  0D16  01D0               	clrf	___aldiv@sign
  4201  0D17  0AD0               	incf	___aldiv@sign,f
  4202  0D18                     l653:	
  4203  0D18  1FCE               	btfss	___aldiv@dividend+3,7
  4204  0D19  2D29               	goto	l3543
  4205  0D1A  09CB               	comf	___aldiv@dividend,f
  4206  0D1B  09CC               	comf	___aldiv@dividend+1,f
  4207  0D1C  09CD               	comf	___aldiv@dividend+2,f
  4208  0D1D  09CE               	comf	___aldiv@dividend+3,f
  4209  0D1E  0ACB               	incf	___aldiv@dividend,f
  4210  0D1F  1903               	skipnz
  4211  0D20  0ACC               	incf	___aldiv@dividend+1,f
  4212  0D21  1903               	skipnz
  4213  0D22  0ACD               	incf	___aldiv@dividend+2,f
  4214  0D23  1903               	skipnz
  4215  0D24  0ACE               	incf	___aldiv@dividend+3,f
  4216  0D25  3001               	movlw	1
  4217  0D26  00F3               	movwf	??___aldiv
  4218  0D27  0873               	movf	??___aldiv,w
  4219  0D28  06D0               	xorwf	___aldiv@sign,f
  4220  0D29                     l3543:	
  4221  0D29  3000               	movlw	0
  4222  0D2A  00D4               	movwf	___aldiv@quotient+3
  4223  0D2B  3000               	movlw	0
  4224  0D2C  00D3               	movwf	___aldiv@quotient+2
  4225  0D2D  3000               	movlw	0
  4226  0D2E  00D2               	movwf	___aldiv@quotient+1
  4227  0D2F  3000               	movlw	0
  4228  0D30  00D1               	movwf	___aldiv@quotient
  4229  0D31  084A               	movf	___aldiv@divisor+3,w
  4230  0D32  0449               	iorwf	___aldiv@divisor+2,w
  4231  0D33  0448               	iorwf	___aldiv@divisor+1,w
  4232  0D34  0447               	iorwf	___aldiv@divisor,w
  4233  0D35  1903               	skipnz
  4234  0D36  2D7E               	goto	l3565
  4235  0D37  01CF               	clrf	___aldiv@counter
  4236  0D38  0ACF               	incf	___aldiv@counter,f
  4237  0D39                     l3551:	
  4238  0D39  1BCA               	btfsc	___aldiv@divisor+3,7
  4239  0D3A  2D49               	goto	l3553
  4240  0D3B  3001               	movlw	1
  4241  0D3C  00F3               	movwf	??___aldiv
  4242  0D3D                     u3575:	
  4243  0D3D  1003               	clrc
  4244  0D3E  0DC7               	rlf	___aldiv@divisor,f
  4245  0D3F  0DC8               	rlf	___aldiv@divisor+1,f
  4246  0D40  0DC9               	rlf	___aldiv@divisor+2,f
  4247  0D41  0DCA               	rlf	___aldiv@divisor+3,f
  4248  0D42  0BF3               	decfsz	??___aldiv,f
  4249  0D43  2D3D               	goto	u3575
  4250  0D44  3001               	movlw	1
  4251  0D45  00F3               	movwf	??___aldiv
  4252  0D46  0873               	movf	??___aldiv,w
  4253  0D47  07CF               	addwf	___aldiv@counter,f
  4254  0D48  2D39               	goto	l3551
  4255  0D49                     l3553:	
  4256  0D49  3001               	movlw	1
  4257  0D4A  00F3               	movwf	??___aldiv
  4258  0D4B                     u3595:	
  4259  0D4B  1003               	clrc
  4260  0D4C  0DD1               	rlf	___aldiv@quotient,f
  4261  0D4D  0DD2               	rlf	___aldiv@quotient+1,f
  4262  0D4E  0DD3               	rlf	___aldiv@quotient+2,f
  4263  0D4F  0DD4               	rlf	___aldiv@quotient+3,f
  4264  0D50  0BF3               	decfsz	??___aldiv,f
  4265  0D51  2D4B               	goto	u3595
  4266  0D52  084A               	movf	___aldiv@divisor+3,w
  4267  0D53  024E               	subwf	___aldiv@dividend+3,w
  4268  0D54  1D03               	skipz
  4269  0D55  2D60               	goto	u3605
  4270  0D56  0849               	movf	___aldiv@divisor+2,w
  4271  0D57  024D               	subwf	___aldiv@dividend+2,w
  4272  0D58  1D03               	skipz
  4273  0D59  2D60               	goto	u3605
  4274  0D5A  0848               	movf	___aldiv@divisor+1,w
  4275  0D5B  024C               	subwf	___aldiv@dividend+1,w
  4276  0D5C  1D03               	skipz
  4277  0D5D  2D60               	goto	u3605
  4278  0D5E  0847               	movf	___aldiv@divisor,w
  4279  0D5F  024B               	subwf	___aldiv@dividend,w
  4280  0D60                     u3605:	
  4281  0D60  1C03               	skipc
  4282  0D61  2D71               	goto	l3561
  4283  0D62  0847               	movf	___aldiv@divisor,w
  4284  0D63  02CB               	subwf	___aldiv@dividend,f
  4285  0D64  0848               	movf	___aldiv@divisor+1,w
  4286  0D65  1C03               	skipc
  4287  0D66  0F48               	incfsz	___aldiv@divisor+1,w
  4288  0D67  02CC               	subwf	___aldiv@dividend+1,f
  4289  0D68  0849               	movf	___aldiv@divisor+2,w
  4290  0D69  1C03               	skipc
  4291  0D6A  0F49               	incfsz	___aldiv@divisor+2,w
  4292  0D6B  02CD               	subwf	___aldiv@dividend+2,f
  4293  0D6C  084A               	movf	___aldiv@divisor+3,w
  4294  0D6D  1C03               	skipc
  4295  0D6E  0F4A               	incfsz	___aldiv@divisor+3,w
  4296  0D6F  02CE               	subwf	___aldiv@dividend+3,f
  4297  0D70  1451               	bsf	___aldiv@quotient,0
  4298  0D71                     l3561:	
  4299  0D71  3001               	movlw	1
  4300  0D72                     u3615:	
  4301  0D72  1003               	clrc
  4302  0D73  0CCA               	rrf	___aldiv@divisor+3,f
  4303  0D74  0CC9               	rrf	___aldiv@divisor+2,f
  4304  0D75  0CC8               	rrf	___aldiv@divisor+1,f
  4305  0D76  0CC7               	rrf	___aldiv@divisor,f
  4306  0D77  3EFF               	addlw	-1
  4307  0D78  1D03               	skipz
  4308  0D79  2D72               	goto	u3615
  4309  0D7A  3001               	movlw	1
  4310  0D7B  02CF               	subwf	___aldiv@counter,f
  4311  0D7C  1D03               	btfss	3,2
  4312  0D7D  2D49               	goto	l3553
  4313  0D7E                     l3565:	
  4314  0D7E  0850               	movf	___aldiv@sign,w
  4315  0D7F  1903               	btfsc	3,2
  4316  0D80  2D8C               	goto	l3569
  4317  0D81  09D1               	comf	___aldiv@quotient,f
  4318  0D82  09D2               	comf	___aldiv@quotient+1,f
  4319  0D83  09D3               	comf	___aldiv@quotient+2,f
  4320  0D84  09D4               	comf	___aldiv@quotient+3,f
  4321  0D85  0AD1               	incf	___aldiv@quotient,f
  4322  0D86  1903               	skipnz
  4323  0D87  0AD2               	incf	___aldiv@quotient+1,f
  4324  0D88  1903               	skipnz
  4325  0D89  0AD3               	incf	___aldiv@quotient+2,f
  4326  0D8A  1903               	skipnz
  4327  0D8B  0AD4               	incf	___aldiv@quotient+3,f
  4328  0D8C                     l3569:	
  4329  0D8C  0854               	movf	___aldiv@quotient+3,w
  4330  0D8D  00CA               	movwf	?___aldiv+3
  4331  0D8E  0853               	movf	___aldiv@quotient+2,w
  4332  0D8F  00C9               	movwf	?___aldiv+2
  4333  0D90  0852               	movf	___aldiv@quotient+1,w
  4334  0D91  00C8               	movwf	?___aldiv+1
  4335  0D92  0851               	movf	___aldiv@quotient,w
  4336  0D93  00C7               	movwf	?___aldiv
  4337  0D94  0008               	return
  4338  0D95                     __end_of___aldiv:	
  4339                           
  4340                           	psect	text7
  4341  0C1D                     __ptext7:	
  4342 ;; *************** function _Lcd_Init *****************
  4343 ;; Defined at:
  4344 ;;		line 65 in file "./LCD4bits.h"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;		None
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;		None
  4349 ;; Return value:  Size  Location     Type
  4350 ;;                  1    wreg      void 
  4351 ;; Registers used:
  4352 ;;		wreg, status,2, status,0, pclath, cstack
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/0
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4358 ;;      Params:         0       0       0       0       0
  4359 ;;      Locals:         0       0       0       0       0
  4360 ;;      Temps:          0       2       0       0       0
  4361 ;;      Totals:         0       2       0       0       0
  4362 ;;Total ram usage:        2 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; Hardware stack levels required when called:    3
  4365 ;; This function calls:
  4366 ;;		_Lcd_Cmd
  4367 ;;		_Lcd_Port
  4368 ;; This function is called by:
  4369 ;;		_setup
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           
  4374                           ;psect for function _Lcd_Init
  4375  0C1D                     _Lcd_Init:	
  4376                           
  4377                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  4378                           
  4379                           ;incstack = 0
  4380                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  4381  0C1D  3000               	movlw	0
  4382  0C1E  160A  118A  26EB  120A  158A  	fcall	_Lcd_Port
  4383                           
  4384                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  4385  0C23  3034               	movlw	52
  4386  0C24  1283               	bcf	3,5	;RP0=0, select bank0
  4387  0C25  1303               	bcf	3,6	;RP1=0, select bank0
  4388  0C26  00C8               	movwf	??_Lcd_Init+1
  4389  0C27  30F1               	movlw	241
  4390  0C28  00C7               	movwf	??_Lcd_Init
  4391  0C29                     u5017:	
  4392  0C29  0BC7               	decfsz	??_Lcd_Init,f
  4393  0C2A  2C29               	goto	u5017
  4394  0C2B  0BC8               	decfsz	??_Lcd_Init+1,f
  4395  0C2C  2C29               	goto	u5017
  4396                           
  4397                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  4398  0C2D  3003               	movlw	3
  4399  0C2E  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4400                           
  4401                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  4402  0C33  300D               	movlw	13
  4403  0C34  1283               	bcf	3,5	;RP0=0, select bank0
  4404  0C35  1303               	bcf	3,6	;RP1=0, select bank0
  4405  0C36  00C8               	movwf	??_Lcd_Init+1
  4406  0C37  30FB               	movlw	251
  4407  0C38  00C7               	movwf	??_Lcd_Init
  4408  0C39                     u5027:	
  4409  0C39  0BC7               	decfsz	??_Lcd_Init,f
  4410  0C3A  2C39               	goto	u5027
  4411  0C3B  0BC8               	decfsz	??_Lcd_Init+1,f
  4412  0C3C  2C39               	goto	u5027
  4413                           
  4414                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  4415  0C3D  3003               	movlw	3
  4416  0C3E  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4417                           
  4418                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  4419  0C43  301D               	movlw	29
  4420  0C44  1283               	bcf	3,5	;RP0=0, select bank0
  4421  0C45  1303               	bcf	3,6	;RP1=0, select bank0
  4422  0C46  00C8               	movwf	??_Lcd_Init+1
  4423  0C47  3090               	movlw	144
  4424  0C48  00C7               	movwf	??_Lcd_Init
  4425  0C49                     u5037:	
  4426  0C49  0BC7               	decfsz	??_Lcd_Init,f
  4427  0C4A  2C49               	goto	u5037
  4428  0C4B  0BC8               	decfsz	??_Lcd_Init+1,f
  4429  0C4C  2C49               	goto	u5037
  4430  0C4D  0000               	nop
  4431                           
  4432                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  4433  0C4E  3003               	movlw	3
  4434  0C4F  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4435                           
  4436                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  4437  0C54  3002               	movlw	2
  4438  0C55  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4439                           
  4440                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  4441  0C5A  3002               	movlw	2
  4442  0C5B  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4443                           
  4444                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  4445  0C60  3008               	movlw	8
  4446  0C61  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4447                           
  4448                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  4449  0C66  3000               	movlw	0
  4450  0C67  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4451                           
  4452                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  4453  0C6C  300C               	movlw	12
  4454  0C6D  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4455                           
  4456                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  4457  0C72  3000               	movlw	0
  4458  0C73  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  4459                           
  4460                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  4461  0C78  3006               	movlw	6
  4462  0C79  160A  118A  2705   	fcall	_Lcd_Cmd
  4463  0C7C  0008               	return
  4464  0C7D                     __end_of_Lcd_Init:	
  4465                           
  4466                           	psect	text8
  4467  08F2                     __ptext8:	
  4468 ;; *************** function _I2C_Master_Init *****************
  4469 ;; Defined at:
  4470 ;;		line 16 in file "./I2C.h"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;  c               4   13[BANK0 ] const unsigned long 
  4473 ;; Auto vars:     Size  Location     Type
  4474 ;;		None
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  1    wreg      void 
  4477 ;; Registers used:
  4478 ;;		wreg, status,2, status,0, pclath, cstack
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4484 ;;      Params:         0       4       0       0       0
  4485 ;;      Locals:         0       0       0       0       0
  4486 ;;      Temps:          4       0       0       0       0
  4487 ;;      Totals:         4       4       0       0       0
  4488 ;;Total ram usage:        8 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    2
  4491 ;; This function calls:
  4492 ;;		___lldiv
  4493 ;; This function is called by:
  4494 ;;		_setup
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           
  4499                           ;psect for function _I2C_Master_Init
  4500  08F2                     _I2C_Master_Init:	
  4501                           
  4502                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  4503                           
  4504                           ;incstack = 0
  4505                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  4506  08F2  3028               	movlw	40
  4507  08F3  1283               	bcf	3,5	;RP0=0, select bank0
  4508  08F4  1303               	bcf	3,6	;RP1=0, select bank0
  4509  08F5  0094               	movwf	20	;volatile
  4510                           
  4511                           ;./I2C.h: 19:     SSPCON2 = 0;
  4512  08F6  1683               	bsf	3,5	;RP0=1, select bank1
  4513  08F7  1303               	bcf	3,6	;RP1=0, select bank1
  4514  08F8  0191               	clrf	17	;volatile
  4515                           
  4516                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  4517  08F9  1283               	bcf	3,5	;RP0=0, select bank0
  4518  08FA  1303               	bcf	3,6	;RP1=0, select bank0
  4519  08FB  0854               	movf	I2C_Master_Init@c,w
  4520  08FC  00F4               	movwf	??_I2C_Master_Init
  4521  08FD  0855               	movf	I2C_Master_Init@c+1,w
  4522  08FE  00F5               	movwf	??_I2C_Master_Init+1
  4523  08FF  0856               	movf	I2C_Master_Init@c+2,w
  4524  0900  00F6               	movwf	??_I2C_Master_Init+2
  4525  0901  0857               	movf	I2C_Master_Init@c+3,w
  4526  0902  00F7               	movwf	??_I2C_Master_Init+3
  4527  0903  3002               	movlw	2
  4528  0904                     u3715:	
  4529  0904  1003               	clrc
  4530  0905  0DF4               	rlf	??_I2C_Master_Init,f
  4531  0906  0DF5               	rlf	??_I2C_Master_Init+1,f
  4532  0907  0DF6               	rlf	??_I2C_Master_Init+2,f
  4533  0908  0DF7               	rlf	??_I2C_Master_Init+3,f
  4534  0909  3EFF               	addlw	-1
  4535  090A  1D03               	skipz
  4536  090B  2904               	goto	u3715
  4537  090C  0877               	movf	??_I2C_Master_Init+3,w
  4538  090D  00CA               	movwf	___lldiv@divisor+3
  4539  090E  0876               	movf	??_I2C_Master_Init+2,w
  4540  090F  00C9               	movwf	___lldiv@divisor+2
  4541  0910  0875               	movf	??_I2C_Master_Init+1,w
  4542  0911  00C8               	movwf	___lldiv@divisor+1
  4543  0912  0874               	movf	??_I2C_Master_Init,w
  4544  0913  00C7               	movwf	___lldiv@divisor
  4545  0914  3000               	movlw	0
  4546  0915  00CE               	movwf	___lldiv@dividend+3
  4547  0916  307A               	movlw	122
  4548  0917  00CD               	movwf	___lldiv@dividend+2
  4549  0918  3012               	movlw	18
  4550  0919  00CC               	movwf	___lldiv@dividend+1
  4551  091A  3000               	movlw	0
  4552  091B  00CB               	movwf	___lldiv@dividend
  4553  091C  120A  158A  23BD   	fcall	___lldiv
  4554  091F  1283               	bcf	3,5	;RP0=0, select bank0
  4555  0920  1303               	bcf	3,6	;RP1=0, select bank0
  4556  0921  0847               	movf	?___lldiv,w
  4557  0922  3EFF               	addlw	255
  4558  0923  1683               	bsf	3,5	;RP0=1, select bank1
  4559  0924  1303               	bcf	3,6	;RP1=0, select bank1
  4560  0925  0093               	movwf	19	;volatile
  4561                           
  4562                           ;./I2C.h: 21:     SSPSTAT = 0;
  4563  0926  0194               	clrf	20	;volatile
  4564                           
  4565                           ;./I2C.h: 22:     TRISCbits.TRISC3 = 1;
  4566  0927  1587               	bsf	7,3	;volatile
  4567                           
  4568                           ;./I2C.h: 23:     TRISCbits.TRISC4 = 1;
  4569  0928  1607               	bsf	7,4	;volatile
  4570  0929  0008               	return
  4571  092A                     __end_of_I2C_Master_Init:	
  4572                           
  4573                           	psect	text9
  4574  0BBD                     __ptext9:	
  4575 ;; *************** function ___lldiv *****************
  4576 ;; Defined at:
  4577 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;  divisor         4    0[BANK0 ] unsigned long 
  4580 ;;  dividend        4    4[BANK0 ] unsigned long 
  4581 ;; Auto vars:     Size  Location     Type
  4582 ;;  quotient        4    8[BANK0 ] unsigned long 
  4583 ;;  counter         1   12[BANK0 ] unsigned char 
  4584 ;; Return value:  Size  Location     Type
  4585 ;;                  4    0[BANK0 ] unsigned long 
  4586 ;; Registers used:
  4587 ;;		wreg, status,2, status,0
  4588 ;; Tracked objects:
  4589 ;;		On entry : 0/0
  4590 ;;		On exit  : 0/0
  4591 ;;		Unchanged: 0/0
  4592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4593 ;;      Params:         0       8       0       0       0
  4594 ;;      Locals:         0       5       0       0       0
  4595 ;;      Temps:          1       0       0       0       0
  4596 ;;      Totals:         1      13       0       0       0
  4597 ;;Total ram usage:       14 bytes
  4598 ;; Hardware stack levels used:    1
  4599 ;; Hardware stack levels required when called:    1
  4600 ;; This function calls:
  4601 ;;		Nothing
  4602 ;; This function is called by:
  4603 ;;		_I2C_Master_Init
  4604 ;; This function uses a non-reentrant model
  4605 ;;
  4606                           
  4607                           
  4608                           ;psect for function ___lldiv
  4609  0BBD                     ___lldiv:	
  4610                           
  4611                           ;incstack = 0
  4612                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4613  0BBD  3000               	movlw	0
  4614  0BBE  1283               	bcf	3,5	;RP0=0, select bank0
  4615  0BBF  1303               	bcf	3,6	;RP1=0, select bank0
  4616  0BC0  00D2               	movwf	___lldiv@quotient+3
  4617  0BC1  3000               	movlw	0
  4618  0BC2  00D1               	movwf	___lldiv@quotient+2
  4619  0BC3  3000               	movlw	0
  4620  0BC4  00D0               	movwf	___lldiv@quotient+1
  4621  0BC5  3000               	movlw	0
  4622  0BC6  00CF               	movwf	___lldiv@quotient
  4623  0BC7  084A               	movf	___lldiv@divisor+3,w
  4624  0BC8  0449               	iorwf	___lldiv@divisor+2,w
  4625  0BC9  0448               	iorwf	___lldiv@divisor+1,w
  4626  0BCA  0447               	iorwf	___lldiv@divisor,w
  4627  0BCB  1903               	skipnz
  4628  0BCC  2C14               	goto	l3529
  4629  0BCD  01D3               	clrf	___lldiv@counter
  4630  0BCE  0AD3               	incf	___lldiv@counter,f
  4631  0BCF                     l3515:	
  4632  0BCF  1BCA               	btfsc	___lldiv@divisor+3,7
  4633  0BD0  2BDF               	goto	l3517
  4634  0BD1  3001               	movlw	1
  4635  0BD2  00F3               	movwf	??___lldiv
  4636  0BD3                     u3485:	
  4637  0BD3  1003               	clrc
  4638  0BD4  0DC7               	rlf	___lldiv@divisor,f
  4639  0BD5  0DC8               	rlf	___lldiv@divisor+1,f
  4640  0BD6  0DC9               	rlf	___lldiv@divisor+2,f
  4641  0BD7  0DCA               	rlf	___lldiv@divisor+3,f
  4642  0BD8  0BF3               	decfsz	??___lldiv,f
  4643  0BD9  2BD3               	goto	u3485
  4644  0BDA  3001               	movlw	1
  4645  0BDB  00F3               	movwf	??___lldiv
  4646  0BDC  0873               	movf	??___lldiv,w
  4647  0BDD  07D3               	addwf	___lldiv@counter,f
  4648  0BDE  2BCF               	goto	l3515
  4649  0BDF                     l3517:	
  4650  0BDF  3001               	movlw	1
  4651  0BE0  00F3               	movwf	??___lldiv
  4652  0BE1                     u3505:	
  4653  0BE1  1003               	clrc
  4654  0BE2  0DCF               	rlf	___lldiv@quotient,f
  4655  0BE3  0DD0               	rlf	___lldiv@quotient+1,f
  4656  0BE4  0DD1               	rlf	___lldiv@quotient+2,f
  4657  0BE5  0DD2               	rlf	___lldiv@quotient+3,f
  4658  0BE6  0BF3               	decfsz	??___lldiv,f
  4659  0BE7  2BE1               	goto	u3505
  4660  0BE8  084A               	movf	___lldiv@divisor+3,w
  4661  0BE9  024E               	subwf	___lldiv@dividend+3,w
  4662  0BEA  1D03               	skipz
  4663  0BEB  2BF6               	goto	u3515
  4664  0BEC  0849               	movf	___lldiv@divisor+2,w
  4665  0BED  024D               	subwf	___lldiv@dividend+2,w
  4666  0BEE  1D03               	skipz
  4667  0BEF  2BF6               	goto	u3515
  4668  0BF0  0848               	movf	___lldiv@divisor+1,w
  4669  0BF1  024C               	subwf	___lldiv@dividend+1,w
  4670  0BF2  1D03               	skipz
  4671  0BF3  2BF6               	goto	u3515
  4672  0BF4  0847               	movf	___lldiv@divisor,w
  4673  0BF5  024B               	subwf	___lldiv@dividend,w
  4674  0BF6                     u3515:	
  4675  0BF6  1C03               	skipc
  4676  0BF7  2C07               	goto	l3525
  4677  0BF8  0847               	movf	___lldiv@divisor,w
  4678  0BF9  02CB               	subwf	___lldiv@dividend,f
  4679  0BFA  0848               	movf	___lldiv@divisor+1,w
  4680  0BFB  1C03               	skipc
  4681  0BFC  0F48               	incfsz	___lldiv@divisor+1,w
  4682  0BFD  02CC               	subwf	___lldiv@dividend+1,f
  4683  0BFE  0849               	movf	___lldiv@divisor+2,w
  4684  0BFF  1C03               	skipc
  4685  0C00  0F49               	incfsz	___lldiv@divisor+2,w
  4686  0C01  02CD               	subwf	___lldiv@dividend+2,f
  4687  0C02  084A               	movf	___lldiv@divisor+3,w
  4688  0C03  1C03               	skipc
  4689  0C04  0F4A               	incfsz	___lldiv@divisor+3,w
  4690  0C05  02CE               	subwf	___lldiv@dividend+3,f
  4691  0C06  144F               	bsf	___lldiv@quotient,0
  4692  0C07                     l3525:	
  4693  0C07  3001               	movlw	1
  4694  0C08                     u3525:	
  4695  0C08  1003               	clrc
  4696  0C09  0CCA               	rrf	___lldiv@divisor+3,f
  4697  0C0A  0CC9               	rrf	___lldiv@divisor+2,f
  4698  0C0B  0CC8               	rrf	___lldiv@divisor+1,f
  4699  0C0C  0CC7               	rrf	___lldiv@divisor,f
  4700  0C0D  3EFF               	addlw	-1
  4701  0C0E  1D03               	skipz
  4702  0C0F  2C08               	goto	u3525
  4703  0C10  3001               	movlw	1
  4704  0C11  02D3               	subwf	___lldiv@counter,f
  4705  0C12  1D03               	btfss	3,2
  4706  0C13  2BDF               	goto	l3517
  4707  0C14                     l3529:	
  4708  0C14  0852               	movf	___lldiv@quotient+3,w
  4709  0C15  00CA               	movwf	?___lldiv+3
  4710  0C16  0851               	movf	___lldiv@quotient+2,w
  4711  0C17  00C9               	movwf	?___lldiv+2
  4712  0C18  0850               	movf	___lldiv@quotient+1,w
  4713  0C19  00C8               	movwf	?___lldiv+1
  4714  0C1A  084F               	movf	___lldiv@quotient,w
  4715  0C1B  00C7               	movwf	?___lldiv
  4716  0C1C  0008               	return
  4717  0C1D                     __end_of___lldiv:	
  4718                           
  4719                           	psect	text10
  4720  173A                     __ptext10:	
  4721 ;; *************** function _open_door *****************
  4722 ;; Defined at:
  4723 ;;		line 616 in file "mainMaster.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;		None
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  1    wreg      void 
  4730 ;; Registers used:
  4731 ;;		wreg, status,2, status,0, pclath, cstack
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4737 ;;      Params:         0       0       0       0       0
  4738 ;;      Locals:         0       0       0       0       0
  4739 ;;      Temps:          0       0       0       0       0
  4740 ;;      Totals:         0       0       0       0       0
  4741 ;;Total ram usage:        0 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    3
  4744 ;; This function calls:
  4745 ;;		_I2C_Master_Start
  4746 ;;		_I2C_Master_Stop
  4747 ;;		_I2C_Master_Write
  4748 ;; This function is called by:
  4749 ;;		_main
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           
  4754                           ;psect for function _open_door
  4755  173A                     _open_door:	
  4756                           
  4757                           ;mainMaster.c: 618:     I2C_Master_Start();
  4758                           
  4759                           ;incstack = 0
  4760                           ; Regs used in _open_door: [wreg+status,2+status,0+pclath+cstack]
  4761  173A  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  4762                           
  4763                           ;mainMaster.c: 619:     I2C_Master_Write(0x20);
  4764  173F  3020               	movlw	32
  4765  1740  00F3               	movwf	I2C_Master_Write@d
  4766  1741  3000               	movlw	0
  4767  1742  00F4               	movwf	I2C_Master_Write@d+1
  4768  1743  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  4769                           
  4770                           ;mainMaster.c: 620:     I2C_Master_Write(0xFF);
  4771  1748  30FF               	movlw	255
  4772  1749  00F3               	movwf	I2C_Master_Write@d
  4773  174A  3000               	movlw	0
  4774  174B  00F4               	movwf	I2C_Master_Write@d+1
  4775  174C  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  4776                           
  4777                           ;mainMaster.c: 621:     I2C_Master_Stop();
  4778  1751  160A  118A  2699   	fcall	_I2C_Master_Stop
  4779  1754  0008               	return
  4780  1755                     __end_of_open_door:	
  4781                           
  4782                           	psect	text11
  4783  17DD                     __ptext11:	
  4784 ;; *************** function _get_tripwire *****************
  4785 ;; Defined at:
  4786 ;;		line 580 in file "mainMaster.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;		None
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;  trip            1    2[BANK0 ] unsigned char 
  4791 ;; Return value:  Size  Location     Type
  4792 ;;                  1    wreg      unsigned char 
  4793 ;; Registers used:
  4794 ;;		wreg, status,2, status,0, pclath, cstack
  4795 ;; Tracked objects:
  4796 ;;		On entry : 0/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4800 ;;      Params:         0       0       0       0       0
  4801 ;;      Locals:         0       1       0       0       0
  4802 ;;      Temps:          1       0       0       0       0
  4803 ;;      Totals:         1       1       0       0       0
  4804 ;;Total ram usage:        2 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; Hardware stack levels required when called:    3
  4807 ;; This function calls:
  4808 ;;		_I2C_Master_Read
  4809 ;;		_I2C_Master_Start
  4810 ;;		_I2C_Master_Stop
  4811 ;;		_I2C_Master_Write
  4812 ;; This function is called by:
  4813 ;;		_main
  4814 ;; This function uses a non-reentrant model
  4815 ;;
  4816                           
  4817                           
  4818                           ;psect for function _get_tripwire
  4819  17DD                     _get_tripwire:	
  4820                           
  4821                           ;mainMaster.c: 582:     char trip;;mainMaster.c: 584:     I2C_Master_Start();
  4822                           
  4823                           ;incstack = 0
  4824                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  4825  17DD  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  4826                           
  4827                           ;mainMaster.c: 585:     I2C_Master_Write(0x21);
  4828  17E2  3021               	movlw	33
  4829  17E3  00F3               	movwf	I2C_Master_Write@d
  4830  17E4  3000               	movlw	0
  4831  17E5  00F4               	movwf	I2C_Master_Write@d+1
  4832  17E6  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  4833                           
  4834                           ;mainMaster.c: 586:     trip = I2C_Master_Read(0);
  4835  17EB  3000               	movlw	0
  4836  17EC  00F3               	movwf	I2C_Master_Read@a
  4837  17ED  00F4               	movwf	I2C_Master_Read@a+1
  4838  17EE  120A  158A  2060  160A  118A  	fcall	_I2C_Master_Read
  4839  17F3  0873               	movf	?_I2C_Master_Read,w
  4840  17F4  00F7               	movwf	??_get_tripwire
  4841  17F5  0877               	movf	??_get_tripwire,w
  4842  17F6  1283               	bcf	3,5	;RP0=0, select bank0
  4843  17F7  1303               	bcf	3,6	;RP1=0, select bank0
  4844  17F8  00C9               	movwf	get_tripwire@trip
  4845                           
  4846                           ;mainMaster.c: 587:     I2C_Master_Stop();
  4847  17F9  160A  118A  2699   	fcall	_I2C_Master_Stop
  4848                           
  4849                           ;mainMaster.c: 589:     return (trip);
  4850  17FC  1283               	bcf	3,5	;RP0=0, select bank0
  4851  17FD  1303               	bcf	3,6	;RP1=0, select bank0
  4852  17FE  0849               	movf	get_tripwire@trip,w
  4853  17FF  0008               	return
  4854  1800                     __end_of_get_tripwire:	
  4855                           
  4856                           	psect	text12
  4857  0C7D                     __ptext12:	
  4858 ;; *************** function _get_time *****************
  4859 ;; Defined at:
  4860 ;;		line 505 in file "mainMaster.c"
  4861 ;; Parameters:    Size  Location     Type
  4862 ;;  time_string     1    wreg     PTR unsigned char 
  4863 ;;		 -> time(6), 
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;  time_string     1    6[BANK0 ] PTR unsigned char 
  4866 ;;		 -> time(6), 
  4867 ;;  min             1    5[BANK0 ] unsigned char 
  4868 ;;  hour            1    4[BANK0 ] unsigned char 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  1    wreg      void 
  4871 ;; Registers used:
  4872 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4878 ;;      Params:         0       0       0       0       0
  4879 ;;      Locals:         0       3       0       0       0
  4880 ;;      Temps:          0       2       0       0       0
  4881 ;;      Totals:         0       5       0       0       0
  4882 ;;Total ram usage:        5 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    3
  4885 ;; This function calls:
  4886 ;;		_I2C_Master_Read
  4887 ;;		_I2C_Master_RepeatedStart
  4888 ;;		_I2C_Master_Start
  4889 ;;		_I2C_Master_Stop
  4890 ;;		_I2C_Master_Write
  4891 ;; This function is called by:
  4892 ;;		_main
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           
  4897                           ;psect for function _get_time
  4898  0C7D                     _get_time:	
  4899                           
  4900                           ;incstack = 0
  4901                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4902                           ;get_time@time_string stored from wreg
  4903  0C7D  1283               	bcf	3,5	;RP0=0, select bank0
  4904  0C7E  1303               	bcf	3,6	;RP1=0, select bank0
  4905  0C7F  00CD               	movwf	get_time@time_string
  4906                           
  4907                           ;mainMaster.c: 507:     char hour, min;;mainMaster.c: 509:     I2C_Master_Start();
  4908  0C80  160A  118A  2692  120A  158A  	fcall	_I2C_Master_Start
  4909                           
  4910                           ;mainMaster.c: 510:     I2C_Master_Write(0xD0);
  4911  0C85  30D0               	movlw	208
  4912  0C86  00F3               	movwf	I2C_Master_Write@d
  4913  0C87  3000               	movlw	0
  4914  0C88  00F4               	movwf	I2C_Master_Write@d+1
  4915  0C89  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  4916                           
  4917                           ;mainMaster.c: 511:     I2C_Master_Write(0x01);
  4918  0C8E  3001               	movlw	1
  4919  0C8F  00F3               	movwf	I2C_Master_Write@d
  4920  0C90  3000               	movlw	0
  4921  0C91  00F4               	movwf	I2C_Master_Write@d+1
  4922  0C92  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  4923                           
  4924                           ;mainMaster.c: 512:     I2C_Master_RepeatedStart();
  4925  0C97  160A  118A  26A0  120A  158A  	fcall	_I2C_Master_RepeatedStart
  4926                           
  4927                           ;mainMaster.c: 513:     I2C_Master_Write(0xD1);
  4928  0C9C  30D1               	movlw	209
  4929  0C9D  00F3               	movwf	I2C_Master_Write@d
  4930  0C9E  3000               	movlw	0
  4931  0C9F  00F4               	movwf	I2C_Master_Write@d+1
  4932  0CA0  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  4933                           
  4934                           ;mainMaster.c: 514:     min = I2C_Master_Read(1);
  4935  0CA5  3001               	movlw	1
  4936  0CA6  00F3               	movwf	I2C_Master_Read@a
  4937  0CA7  3000               	movlw	0
  4938  0CA8  00F4               	movwf	I2C_Master_Read@a+1
  4939  0CA9  120A  158A  2060  120A  158A  	fcall	_I2C_Master_Read
  4940  0CAE  0873               	movf	?_I2C_Master_Read,w
  4941  0CAF  1283               	bcf	3,5	;RP0=0, select bank0
  4942  0CB0  1303               	bcf	3,6	;RP1=0, select bank0
  4943  0CB1  00C9               	movwf	??_get_time
  4944  0CB2  0849               	movf	??_get_time,w
  4945  0CB3  00CC               	movwf	get_time@min
  4946                           
  4947                           ;mainMaster.c: 515:     hour = I2C_Master_Read(0);
  4948  0CB4  3000               	movlw	0
  4949  0CB5  00F3               	movwf	I2C_Master_Read@a
  4950  0CB6  00F4               	movwf	I2C_Master_Read@a+1
  4951  0CB7  120A  158A  2060  120A  158A  	fcall	_I2C_Master_Read
  4952  0CBC  0873               	movf	?_I2C_Master_Read,w
  4953  0CBD  1283               	bcf	3,5	;RP0=0, select bank0
  4954  0CBE  1303               	bcf	3,6	;RP1=0, select bank0
  4955  0CBF  00C9               	movwf	??_get_time
  4956  0CC0  0849               	movf	??_get_time,w
  4957  0CC1  00CB               	movwf	get_time@hour
  4958                           
  4959                           ;mainMaster.c: 516:     I2C_Master_Stop();
  4960  0CC2  160A  118A  2699  120A  158A  	fcall	_I2C_Master_Stop
  4961                           
  4962                           ;mainMaster.c: 518:     time_string[0] = (hour >> 4) + '0';
  4963  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  4964  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  4965  0CC9  084B               	movf	get_time@hour,w
  4966  0CCA  00C9               	movwf	??_get_time
  4967  0CCB  3004               	movlw	4
  4968  0CCC                     u3975:	
  4969  0CCC  1003               	clrc
  4970  0CCD  0CC9               	rrf	??_get_time,f
  4971  0CCE  3EFF               	addlw	-1
  4972  0CCF  1D03               	skipz
  4973  0CD0  2CCC               	goto	u3975
  4974  0CD1  0849               	movf	??_get_time,w
  4975  0CD2  3E30               	addlw	48
  4976  0CD3  00CA               	movwf	??_get_time+1
  4977  0CD4  084D               	movf	get_time@time_string,w
  4978  0CD5  0084               	movwf	4
  4979  0CD6  084A               	movf	??_get_time+1,w
  4980  0CD7  1383               	bcf	3,7	;select IRP bank0
  4981  0CD8  0080               	movwf	0
  4982                           
  4983                           ;mainMaster.c: 519:     time_string[1] = (hour & 0x0F) + '0';
  4984  0CD9  084B               	movf	get_time@hour,w
  4985  0CDA  390F               	andlw	15
  4986  0CDB  3E30               	addlw	48
  4987  0CDC  00C9               	movwf	??_get_time
  4988  0CDD  0A4D               	incf	get_time@time_string,w
  4989  0CDE  0084               	movwf	4
  4990  0CDF  0849               	movf	??_get_time,w
  4991  0CE0  0080               	movwf	0
  4992                           
  4993                           ;mainMaster.c: 520:     time_string[2] = ':';
  4994  0CE1  303A               	movlw	58
  4995  0CE2  00C9               	movwf	??_get_time
  4996  0CE3  084D               	movf	get_time@time_string,w
  4997  0CE4  3E02               	addlw	2
  4998  0CE5  0084               	movwf	4
  4999  0CE6  0849               	movf	??_get_time,w
  5000  0CE7  0080               	movwf	0
  5001                           
  5002                           ;mainMaster.c: 521:     time_string[3] = (min >> 4) + '0';
  5003  0CE8  084C               	movf	get_time@min,w
  5004  0CE9  00C9               	movwf	??_get_time
  5005  0CEA  3004               	movlw	4
  5006  0CEB                     u3985:	
  5007  0CEB  1003               	clrc
  5008  0CEC  0CC9               	rrf	??_get_time,f
  5009  0CED  3EFF               	addlw	-1
  5010  0CEE  1D03               	skipz
  5011  0CEF  2CEB               	goto	u3985
  5012  0CF0  0849               	movf	??_get_time,w
  5013  0CF1  3E30               	addlw	48
  5014  0CF2  00CA               	movwf	??_get_time+1
  5015  0CF3  084D               	movf	get_time@time_string,w
  5016  0CF4  3E03               	addlw	3
  5017  0CF5  0084               	movwf	4
  5018  0CF6  084A               	movf	??_get_time+1,w
  5019  0CF7  0080               	movwf	0
  5020                           
  5021                           ;mainMaster.c: 522:     time_string[4] = (min & 0x0F) + '0';
  5022  0CF8  084C               	movf	get_time@min,w
  5023  0CF9  390F               	andlw	15
  5024  0CFA  3E30               	addlw	48
  5025  0CFB  00C9               	movwf	??_get_time
  5026  0CFC  084D               	movf	get_time@time_string,w
  5027  0CFD  3E04               	addlw	4
  5028  0CFE  0084               	movwf	4
  5029  0CFF  0849               	movf	??_get_time,w
  5030  0D00  0080               	movwf	0
  5031                           
  5032                           ;mainMaster.c: 523:     time_string[5] = '\0';
  5033  0D01  084D               	movf	get_time@time_string,w
  5034  0D02  3E05               	addlw	5
  5035  0D03  0084               	movwf	4
  5036  0D04  0180               	clrf	0
  5037  0D05  0008               	return
  5038  0D06                     __end_of_get_time:	
  5039                           
  5040                           	psect	text13
  5041  0D95                     __ptext13:	
  5042 ;; *************** function _get_temp *****************
  5043 ;; Defined at:
  5044 ;;		line 541 in file "mainMaster.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;  temp_string     1    wreg     PTR unsigned char 
  5047 ;;		 -> temp(6), 
  5048 ;; Auto vars:     Size  Location     Type
  5049 ;;  temp_string     1   31[BANK0 ] PTR unsigned char 
  5050 ;;		 -> temp(6), 
  5051 ;;  decimal         3   27[BANK0 ] unsigned char [3]
  5052 ;;  tempLSB         1   32[BANK0 ] unsigned char 
  5053 ;;  tempMSB         1   30[BANK0 ] unsigned char 
  5054 ;; Return value:  Size  Location     Type
  5055 ;;                  1    wreg      void 
  5056 ;; Registers used:
  5057 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5058 ;; Tracked objects:
  5059 ;;		On entry : 0/0
  5060 ;;		On exit  : 0/0
  5061 ;;		Unchanged: 0/0
  5062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5063 ;;      Params:         0       0       0       0       0
  5064 ;;      Locals:         0       6       0       0       0
  5065 ;;      Temps:          0       3       0       0       0
  5066 ;;      Totals:         0       9       0       0       0
  5067 ;;Total ram usage:        9 bytes
  5068 ;; Hardware stack levels used:    1
  5069 ;; Hardware stack levels required when called:    3
  5070 ;; This function calls:
  5071 ;;		_I2C_Master_Read
  5072 ;;		_I2C_Master_RepeatedStart
  5073 ;;		_I2C_Master_Start
  5074 ;;		_I2C_Master_Stop
  5075 ;;		_I2C_Master_Write
  5076 ;;		___bmul
  5077 ;;		_sprintf
  5078 ;;		_strcat
  5079 ;; This function is called by:
  5080 ;;		_main
  5081 ;; This function uses a non-reentrant model
  5082 ;;
  5083                           
  5084                           
  5085                           ;psect for function _get_temp
  5086  0D95                     _get_temp:	
  5087                           
  5088                           ;incstack = 0
  5089                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5090                           ;get_temp@temp_string stored from wreg
  5091  0D95  1283               	bcf	3,5	;RP0=0, select bank0
  5092  0D96  1303               	bcf	3,6	;RP1=0, select bank0
  5093  0D97  00E6               	movwf	get_temp@temp_string
  5094                           
  5095                           ;mainMaster.c: 543:     char tempLSB, tempMSB;;mainMaster.c: 544:     char decimal[3];;m
      +                          ainMaster.c: 546:     I2C_Master_Start();
  5096  0D98  160A  118A  2692  120A  158A  	fcall	_I2C_Master_Start
  5097                           
  5098                           ;mainMaster.c: 547:     I2C_Master_Write(0xD0);
  5099  0D9D  30D0               	movlw	208
  5100  0D9E  00F3               	movwf	I2C_Master_Write@d
  5101  0D9F  3000               	movlw	0
  5102  0DA0  00F4               	movwf	I2C_Master_Write@d+1
  5103  0DA1  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  5104                           
  5105                           ;mainMaster.c: 548:     I2C_Master_Write(0x11);
  5106  0DA6  3011               	movlw	17
  5107  0DA7  00F3               	movwf	I2C_Master_Write@d
  5108  0DA8  3000               	movlw	0
  5109  0DA9  00F4               	movwf	I2C_Master_Write@d+1
  5110  0DAA  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  5111                           
  5112                           ;mainMaster.c: 549:     I2C_Master_RepeatedStart();
  5113  0DAF  160A  118A  26A0  120A  158A  	fcall	_I2C_Master_RepeatedStart
  5114                           
  5115                           ;mainMaster.c: 550:     I2C_Master_Write(0xD1);
  5116  0DB4  30D1               	movlw	209
  5117  0DB5  00F3               	movwf	I2C_Master_Write@d
  5118  0DB6  3000               	movlw	0
  5119  0DB7  00F4               	movwf	I2C_Master_Write@d+1
  5120  0DB8  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  5121                           
  5122                           ;mainMaster.c: 551:     tempMSB = I2C_Master_Read(1);
  5123  0DBD  3001               	movlw	1
  5124  0DBE  00F3               	movwf	I2C_Master_Read@a
  5125  0DBF  3000               	movlw	0
  5126  0DC0  00F4               	movwf	I2C_Master_Read@a+1
  5127  0DC1  120A  158A  2060  120A  158A  	fcall	_I2C_Master_Read
  5128  0DC6  0873               	movf	?_I2C_Master_Read,w
  5129  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  5130  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  5131  0DC9  00DF               	movwf	??_get_temp
  5132  0DCA  085F               	movf	??_get_temp,w
  5133  0DCB  00E5               	movwf	get_temp@tempMSB
  5134                           
  5135                           ;mainMaster.c: 552:     tempLSB = I2C_Master_Read(0);
  5136  0DCC  3000               	movlw	0
  5137  0DCD  00F3               	movwf	I2C_Master_Read@a
  5138  0DCE  00F4               	movwf	I2C_Master_Read@a+1
  5139  0DCF  120A  158A  2060  120A  158A  	fcall	_I2C_Master_Read
  5140  0DD4  0873               	movf	?_I2C_Master_Read,w
  5141  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  5142  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  5143  0DD7  00DF               	movwf	??_get_temp
  5144  0DD8  085F               	movf	??_get_temp,w
  5145  0DD9  00E7               	movwf	get_temp@tempLSB
  5146                           
  5147                           ;mainMaster.c: 553:     I2C_Master_Stop();
  5148  0DDA  160A  118A  2699  120A  158A  	fcall	_I2C_Master_Stop
  5149                           
  5150                           ;mainMaster.c: 555:     tempMSB = tempMSB - 4;
  5151  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  5152  0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  5153  0DE1  0865               	movf	get_temp@tempMSB,w
  5154  0DE2  3EFC               	addlw	252
  5155  0DE3  00DF               	movwf	??_get_temp
  5156  0DE4  085F               	movf	??_get_temp,w
  5157  0DE5  00E5               	movwf	get_temp@tempMSB
  5158                           
  5159                           ;mainMaster.c: 556:     tempLSB = (tempLSB >> 6) * 25;
  5160  0DE6  3019               	movlw	25
  5161  0DE7  00DF               	movwf	??_get_temp
  5162  0DE8  085F               	movf	??_get_temp,w
  5163  0DE9  00F3               	movwf	___bmul@multiplicand
  5164  0DEA  0867               	movf	get_temp@tempLSB,w
  5165  0DEB  00E0               	movwf	??_get_temp+1
  5166  0DEC  3006               	movlw	6
  5167  0DED                     u3955:	
  5168  0DED  1003               	clrc
  5169  0DEE  0CE0               	rrf	??_get_temp+1,f
  5170  0DEF  3EFF               	addlw	-1
  5171  0DF0  1D03               	skipz
  5172  0DF1  2DED               	goto	u3955
  5173  0DF2  0860               	movf	??_get_temp+1,w
  5174  0DF3  120A  158A  202B  120A  158A  	fcall	___bmul
  5175  0DF8  1283               	bcf	3,5	;RP0=0, select bank0
  5176  0DF9  1303               	bcf	3,6	;RP1=0, select bank0
  5177  0DFA  00E1               	movwf	??_get_temp+2
  5178  0DFB  0861               	movf	??_get_temp+2,w
  5179  0DFC  00E7               	movwf	get_temp@tempLSB
  5180                           
  5181                           ;mainMaster.c: 557:     sprintf(temp_string, "%d", tempMSB);
  5182  0DFD  3028               	movlw	low ((STR_32+1)| (0+32768))
  5183  0DFE  00D0               	movwf	sprintf@f
  5184  0DFF  3088               	movlw	high ((STR_32+1)| (0+32768))
  5185  0E00  00D1               	movwf	sprintf@f+1
  5186  0E01  0865               	movf	get_temp@tempMSB,w
  5187  0E02  00DF               	movwf	??_get_temp
  5188  0E03  01E0               	clrf	??_get_temp+1
  5189  0E04  085F               	movf	??_get_temp,w
  5190  0E05  00D2               	movwf	?_sprintf+2
  5191  0E06  0860               	movf	??_get_temp+1,w
  5192  0E07  00D3               	movwf	?_sprintf+3
  5193  0E08  0866               	movf	get_temp@temp_string,w
  5194  0E09  120A  158A  2712  120A  158A  	fcall	_sprintf
  5195                           
  5196                           ;mainMaster.c: 558:     if (tempLSB == 0){
  5197  0E0E  1283               	bcf	3,5	;RP0=0, select bank0
  5198  0E0F  1303               	bcf	3,6	;RP1=0, select bank0
  5199  0E10  0867               	movf	get_temp@tempLSB,w
  5200  0E11  1D03               	btfss	3,2
  5201  0E12  2E17               	goto	l3847
  5202                           
  5203                           ;mainMaster.c: 559:         sprintf(decimal, ".%d0", tempLSB);
  5204  0E13  3022               	movlw	low (STR_31| (0+32768))
  5205  0E14  00D0               	movwf	sprintf@f
  5206  0E15  3088               	movlw	high (STR_31| (0+32768))
  5207  0E16  2E1A               	goto	L18
  5208  0E17                     l3847:	
  5209                           ;mainMaster.c: 560:     } else {
  5210                           
  5211                           
  5212                           ;mainMaster.c: 561:         sprintf(decimal, ".%d", tempLSB);
  5213  0E17  3027               	movlw	low (STR_32| (0+32768))
  5214  0E18  00D0               	movwf	sprintf@f
  5215  0E19  3088               	movlw	high (STR_32| (0+32768))
  5216  0E1A                     L18:	
  5217  0E1A  00D1               	movwf	sprintf@f+1
  5218  0E1B  0867               	movf	get_temp@tempLSB,w
  5219  0E1C  00DF               	movwf	??_get_temp
  5220  0E1D  01E0               	clrf	??_get_temp+1
  5221  0E1E  085F               	movf	??_get_temp,w
  5222  0E1F  00D2               	movwf	?_sprintf+2
  5223  0E20  0860               	movf	??_get_temp+1,w
  5224  0E21  00D3               	movwf	?_sprintf+3
  5225  0E22  3062               	movlw	(low (get_temp@decimal| 0))& (0+255)
  5226  0E23  120A  158A  2712  120A  158A  	fcall	_sprintf
  5227                           
  5228                           ;mainMaster.c: 563:     strcat(temp_string, decimal);
  5229  0E28  3062               	movlw	(low (get_temp@decimal| 0))& (0+255)
  5230  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  5231  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  5232  0E2B  00DF               	movwf	??_get_temp
  5233  0E2C  085F               	movf	??_get_temp,w
  5234  0E2D  00F3               	movwf	strcat@from
  5235  0E2E  0866               	movf	get_temp@temp_string,w
  5236  0E2F  120A  158A  203C   	fcall	_strcat
  5237                           
  5238                           ;mainMaster.c: 564:     temp_string[5] = '\0';
  5239  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  5240  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  5241  0E34  0866               	movf	get_temp@temp_string,w
  5242  0E35  3E05               	addlw	5
  5243  0E36  0084               	movwf	4
  5244  0E37  1383               	bcf	3,7	;select IRP bank0
  5245  0E38  0180               	clrf	0
  5246  0E39  0008               	return
  5247  0E3A                     __end_of_get_temp:	
  5248                           
  5249                           	psect	text14
  5250  083C                     __ptext14:	
  5251 ;; *************** function _strcat *****************
  5252 ;; Defined at:
  5253 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  5254 ;; Parameters:    Size  Location     Type
  5255 ;;  to              1    wreg     PTR unsigned char 
  5256 ;;		 -> temp(6), 
  5257 ;;  from            1    3[COMMON] PTR const unsigned char 
  5258 ;;		 -> get_temp@decimal(3), 
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;  to              1    5[COMMON] PTR unsigned char 
  5261 ;;		 -> temp(6), 
  5262 ;;  cp              1    6[COMMON] PTR unsigned char 
  5263 ;;		 -> temp(6), 
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  1    wreg      PTR unsigned char 
  5266 ;; Registers used:
  5267 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5273 ;;      Params:         1       0       0       0       0
  5274 ;;      Locals:         2       0       0       0       0
  5275 ;;      Temps:          1       0       0       0       0
  5276 ;;      Totals:         4       0       0       0       0
  5277 ;;Total ram usage:        4 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; Hardware stack levels required when called:    1
  5280 ;; This function calls:
  5281 ;;		Nothing
  5282 ;; This function is called by:
  5283 ;;		_get_temp
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           
  5288                           ;psect for function _strcat
  5289  083C                     _strcat:	
  5290                           
  5291                           ;incstack = 0
  5292                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  5293                           ;strcat@to stored from wreg
  5294  083C  00F5               	movwf	strcat@to
  5295  083D  0875               	movf	strcat@to,w
  5296  083E  00F4               	movwf	??_strcat
  5297  083F  0874               	movf	??_strcat,w
  5298  0840  00F6               	movwf	strcat@cp
  5299  0841                     l2653:	
  5300  0841  0876               	movf	strcat@cp,w
  5301  0842  0084               	movwf	4
  5302  0843  1383               	bcf	3,7	;select IRP bank0
  5303  0844  0800               	movf	0,w
  5304  0845  1903               	btfsc	3,2
  5305  0846  2854               	goto	l2657
  5306  0847  3001               	movlw	1
  5307  0848  00F4               	movwf	??_strcat
  5308  0849  0874               	movf	??_strcat,w
  5309  084A  07F6               	addwf	strcat@cp,f
  5310  084B  2841               	goto	l2653
  5311  084C                     l2655:	
  5312  084C  3001               	movlw	1
  5313  084D  00F4               	movwf	??_strcat
  5314  084E  0874               	movf	??_strcat,w
  5315  084F  07F6               	addwf	strcat@cp,f
  5316  0850  3001               	movlw	1
  5317  0851  00F4               	movwf	??_strcat
  5318  0852  0874               	movf	??_strcat,w
  5319  0853  07F3               	addwf	strcat@from,f
  5320  0854                     l2657:	
  5321  0854  0873               	movf	strcat@from,w
  5322  0855  0084               	movwf	4
  5323  0856  0800               	movf	0,w
  5324  0857  00F4               	movwf	??_strcat
  5325  0858  0876               	movf	strcat@cp,w
  5326  0859  0084               	movwf	4
  5327  085A  0874               	movf	??_strcat,w
  5328  085B  0080               	movwf	0
  5329  085C  0800               	movf	0,w
  5330  085D  1903               	btfsc	3,2
  5331  085E  0008               	return
  5332  085F  284C               	goto	l2655
  5333  0860                     __end_of_strcat:	
  5334                           
  5335                           	psect	text15
  5336  0F12                     __ptext15:	
  5337 ;; *************** function _sprintf *****************
  5338 ;; Defined at:
  5339 ;;		line 500 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  5340 ;; Parameters:    Size  Location     Type
  5341 ;;  sp              1    wreg     PTR unsigned char 
  5342 ;;		 -> get_temp@decimal(3), temp(6), 
  5343 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  5344 ;;		 -> STR_32(4), STR_31(5), STR_30(3), 
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;  sp              1   22[BANK0 ] PTR unsigned char 
  5347 ;;		 -> get_temp@decimal(3), temp(6), 
  5348 ;;  tmpval          4    0        struct .
  5349 ;;  val             2   20[BANK0 ] unsigned int 
  5350 ;;  cp              2    0        PTR const unsigned char 
  5351 ;;  len             2    0        unsigned int 
  5352 ;;  c               1   23[BANK0 ] unsigned char 
  5353 ;;  prec            1   19[BANK0 ] char 
  5354 ;;  flag            1   18[BANK0 ] unsigned char 
  5355 ;;  ap              1   17[BANK0 ] PTR void [1]
  5356 ;;		 -> ?_sprintf(2), 
  5357 ;; Return value:  Size  Location     Type
  5358 ;;                  2    9[BANK0 ] int 
  5359 ;; Registers used:
  5360 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : 0/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5366 ;;      Params:         0       4       0       0       0
  5367 ;;      Locals:         0       7       0       0       0
  5368 ;;      Temps:          0       4       0       0       0
  5369 ;;      Totals:         0      15       0       0       0
  5370 ;;Total ram usage:       15 bytes
  5371 ;; Hardware stack levels used:    1
  5372 ;; Hardware stack levels required when called:    2
  5373 ;; This function calls:
  5374 ;;		___lwdiv
  5375 ;;		___lwmod
  5376 ;; This function is called by:
  5377 ;;		_get_temp
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           
  5382                           ;psect for function _sprintf
  5383  0F12                     _sprintf:	
  5384                           
  5385                           ;incstack = 0
  5386                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5387                           ;sprintf@sp stored from wreg
  5388  0F12  1283               	bcf	3,5	;RP0=0, select bank0
  5389  0F13  1303               	bcf	3,6	;RP1=0, select bank0
  5390  0F14  00DD               	movwf	sprintf@sp
  5391                           
  5392                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;D:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  5393  0F15  3052               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5394  0F16  00D4               	movwf	??_sprintf
  5395  0F17  0854               	movf	??_sprintf,w
  5396  0F18  00D8               	movwf	sprintf@ap
  5397  0F19                     l3731:	
  5398                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5399                           
  5400                           
  5401                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5402  0F19  0851               	movf	sprintf@f+1,w
  5403  0F1A  00D5               	movwf	??_sprintf+1
  5404  0F1B  0850               	movf	sprintf@f,w
  5405  0F1C  00D4               	movwf	??_sprintf
  5406  0F1D  0AD0               	incf	sprintf@f,f
  5407  0F1E  1903               	skipnz
  5408  0F1F  0AD1               	incf	sprintf@f+1,f
  5409  0F20  0855               	movf	??_sprintf+1,w
  5410  0F21  00FF               	movwf	127
  5411  0F22  0854               	movf	??_sprintf,w
  5412  0F23  0084               	movwf	4
  5413  0F24  120A  118A  2700  120A  158A  	fcall	stringtab
  5414  0F29  00D6               	movwf	??_sprintf+2
  5415  0F2A  0856               	movf	??_sprintf+2,w
  5416  0F2B  00DE               	movwf	sprintf@c
  5417  0F2C  085E               	movf	sprintf@c,w
  5418  0F2D  1903               	btfsc	3,2
  5419  0F2E  2FFB               	goto	l3733
  5420                           
  5421                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  5422  0F2F  3025               	movlw	37
  5423  0F30  065E               	xorwf	sprintf@c,w
  5424  0F31  1903               	btfsc	3,2
  5425  0F32  2F3F               	goto	l3687
  5426                           
  5427                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;D:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  5428  0F33  085E               	movf	sprintf@c,w
  5429  0F34  00D4               	movwf	??_sprintf
  5430  0F35  085D               	movf	sprintf@sp,w
  5431  0F36  0084               	movwf	4
  5432  0F37  0854               	movf	??_sprintf,w
  5433  0F38  1383               	bcf	3,7	;select IRP bank0
  5434  0F39  0080               	movwf	0
  5435  0F3A  3001               	movlw	1
  5436  0F3B  00D4               	movwf	??_sprintf
  5437  0F3C  0854               	movf	??_sprintf,w
  5438  0F3D  07DD               	addwf	sprintf@sp,f
  5439                           
  5440                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  5441  0F3E  2F19               	goto	l3731
  5442  0F3F                     l3687:	
  5443                           
  5444                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  5445  0F3F  01D9               	clrf	sprintf@flag
  5446                           
  5447                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  5448  0F40  0851               	movf	sprintf@f+1,w
  5449  0F41  00D5               	movwf	??_sprintf+1
  5450  0F42  0850               	movf	sprintf@f,w
  5451  0F43  00D4               	movwf	??_sprintf
  5452  0F44  0AD0               	incf	sprintf@f,f
  5453  0F45  1903               	skipnz
  5454  0F46  0AD1               	incf	sprintf@f+1,f
  5455  0F47  0855               	movf	??_sprintf+1,w
  5456  0F48  00FF               	movwf	127
  5457  0F49  0854               	movf	??_sprintf,w
  5458  0F4A  0084               	movwf	4
  5459  0F4B  120A  118A  2700  120A  158A  	fcall	stringtab
  5460  0F50  00DE               	movwf	sprintf@c
  5461  0F51  00D6               	movwf	??_sprintf+2
  5462  0F52  01D7               	clrf	??_sprintf+3
  5463                           
  5464                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5465                           ; Switch size 1, requested type "simple"
  5466                           ; Number of cases is 1, Range of values is 0 to 0
  5467                           ; switch strategies available:
  5468                           ; Name         Instructions Cycles
  5469                           ; simple_byte            4     3 (average)
  5470                           ; direct_byte           11     8 (fixed)
  5471                           ; jumptable            260     6 (fixed)
  5472                           ;	Chosen strategy is simple_byte
  5473  0F53  0857               	movf	??_sprintf+3,w
  5474  0F54  3A00               	xorlw	0	; case 0
  5475  0F55  1903               	skipnz
  5476  0F56  2F58               	goto	l4495
  5477  0F57  2F19               	goto	l3731
  5478  0F58                     l4495:	
  5479                           
  5480                           ; Switch size 1, requested type "simple"
  5481                           ; Number of cases is 3, Range of values is 0 to 105
  5482                           ; switch strategies available:
  5483                           ; Name         Instructions Cycles
  5484                           ; simple_byte           10     6 (average)
  5485                           ; jumptable            260     6 (fixed)
  5486                           ;	Chosen strategy is simple_byte
  5487  0F58  0856               	movf	??_sprintf+2,w
  5488  0F59  3A00               	xorlw	0	; case 0
  5489  0F5A  1903               	skipnz
  5490  0F5B  2FFB               	goto	l3733
  5491  0F5C  3A64               	xorlw	100	; case 100
  5492  0F5D  1903               	skipnz
  5493  0F5E  2F63               	goto	l3693
  5494  0F5F  3A0D               	xorlw	13	; case 105
  5495  0F60  1903               	skipnz
  5496  0F61  2F63               	goto	l3693
  5497  0F62  2F19               	goto	l3731
  5498  0F63                     l3693:	
  5499                           
  5500                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5501  0F63  0858               	movf	sprintf@ap,w
  5502  0F64  0084               	movwf	4
  5503  0F65  1383               	bcf	3,7	;select IRP bank0
  5504  0F66  0800               	movf	0,w
  5505  0F67  00DB               	movwf	sprintf@val
  5506  0F68  0A84               	incf	4,f
  5507  0F69  0800               	movf	0,w
  5508  0F6A  00DC               	movwf	sprintf@val+1
  5509  0F6B  3002               	movlw	2
  5510  0F6C  00D4               	movwf	??_sprintf
  5511  0F6D  0854               	movf	??_sprintf,w
  5512  0F6E  07D8               	addwf	sprintf@ap,f
  5513                           
  5514                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  5515  0F6F  1FDC               	btfss	sprintf@val+1,7
  5516  0F70  2F7A               	goto	l3703
  5517                           
  5518                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  5519  0F71  3003               	movlw	3
  5520  0F72  00D4               	movwf	??_sprintf
  5521  0F73  0854               	movf	??_sprintf,w
  5522  0F74  04D9               	iorwf	sprintf@flag,f
  5523                           
  5524                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  5525  0F75  09DB               	comf	sprintf@val,f
  5526  0F76  09DC               	comf	sprintf@val+1,f
  5527  0F77  0ADB               	incf	sprintf@val,f
  5528  0F78  1903               	skipnz
  5529  0F79  0ADC               	incf	sprintf@val+1,f
  5530  0F7A                     l3703:	
  5531                           
  5532                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5533  0F7A  01DE               	clrf	sprintf@c
  5534  0F7B  0ADE               	incf	sprintf@c,f
  5535  0F7C                     l3709:	
  5536                           
  5537                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  5538  0F7C  085E               	movf	sprintf@c,w
  5539  0F7D  00D4               	movwf	??_sprintf
  5540  0F7E  0754               	addwf	??_sprintf,w
  5541  0F7F  3E12               	addlw	low (_dpowers| (0+32768))
  5542  0F80  0084               	movwf	4
  5543  0F81  3087               	movlw	high (_dpowers| (0+32768))
  5544  0F82  1803               	skipnc
  5545  0F83  3E01               	addlw	1
  5546  0F84  00FF               	movwf	127
  5547  0F85  120A  118A  2700  120A  158A  	fcall	stringtab
  5548  0F8A  00D5               	movwf	??_sprintf+1
  5549  0F8B  120A  118A  2700  120A  158A  	fcall	stringtab
  5550  0F90  00D6               	movwf	??_sprintf+2
  5551  0F91  0856               	movf	??_sprintf+2,w
  5552  0F92  025C               	subwf	sprintf@val+1,w
  5553  0F93  1D03               	skipz
  5554  0F94  2F97               	goto	u3835
  5555  0F95  0855               	movf	??_sprintf+1,w
  5556  0F96  025B               	subwf	sprintf@val,w
  5557  0F97                     u3835:	
  5558  0F97  1C03               	btfss	3,0
  5559  0F98  2FA1               	goto	l3715
  5560  0F99  3001               	movlw	1
  5561  0F9A  00D4               	movwf	??_sprintf
  5562  0F9B  0854               	movf	??_sprintf,w
  5563  0F9C  07DE               	addwf	sprintf@c,f
  5564  0F9D  3005               	movlw	5
  5565  0F9E  065E               	xorwf	sprintf@c,w
  5566  0F9F  1D03               	btfss	3,2
  5567  0FA0  2F7C               	goto	l3709
  5568  0FA1                     l3715:	
  5569                           
  5570                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  5571  0FA1  0859               	movf	sprintf@flag,w
  5572  0FA2  3903               	andlw	3
  5573  0FA3  1903               	btfsc	3,2
  5574  0FA4  2FB0               	goto	l3721
  5575                           
  5576                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  5577  0FA5  302D               	movlw	45
  5578  0FA6  00D4               	movwf	??_sprintf
  5579  0FA7  085D               	movf	sprintf@sp,w
  5580  0FA8  0084               	movwf	4
  5581  0FA9  0854               	movf	??_sprintf,w
  5582  0FAA  1383               	bcf	3,7	;select IRP bank0
  5583  0FAB  0080               	movwf	0
  5584  0FAC  3001               	movlw	1
  5585  0FAD  00D4               	movwf	??_sprintf
  5586  0FAE  0854               	movf	??_sprintf,w
  5587  0FAF  07DD               	addwf	sprintf@sp,f
  5588  0FB0                     l3721:	
  5589                           
  5590                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  5591  0FB0  085E               	movf	sprintf@c,w
  5592  0FB1  00D4               	movwf	??_sprintf
  5593  0FB2  0854               	movf	??_sprintf,w
  5594  0FB3  00DA               	movwf	sprintf@prec
  5595  0FB4                     l3729:	
  5596                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5597                           
  5598                           
  5599                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5600  0FB4  30FF               	movlw	255
  5601  0FB5  00D4               	movwf	??_sprintf
  5602  0FB6  0854               	movf	??_sprintf,w
  5603  0FB7  07DA               	addwf	sprintf@prec,f
  5604  0FB8  0A5A               	incf	sprintf@prec,w
  5605  0FB9  1903               	btfsc	3,2
  5606  0FBA  2F19               	goto	l3731
  5607                           
  5608                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  5609  0FBB  300A               	movlw	10
  5610  0FBC  00CA               	movwf	___lwmod@divisor
  5611  0FBD  3000               	movlw	0
  5612  0FBE  00CB               	movwf	___lwmod@divisor+1
  5613  0FBF  085A               	movf	sprintf@prec,w
  5614  0FC0  00D4               	movwf	??_sprintf
  5615  0FC1  0754               	addwf	??_sprintf,w
  5616  0FC2  3E12               	addlw	low (_dpowers| (0+32768))
  5617  0FC3  0084               	movwf	4
  5618  0FC4  3087               	movlw	high (_dpowers| (0+32768))
  5619  0FC5  1803               	skipnc
  5620  0FC6  3E01               	addlw	1
  5621  0FC7  00FF               	movwf	127
  5622  0FC8  120A  118A  2700  120A  158A  	fcall	stringtab
  5623  0FCD  00F3               	movwf	___lwdiv@divisor
  5624  0FCE  120A  118A  2700  120A  158A  	fcall	stringtab
  5625  0FD3  00F4               	movwf	___lwdiv@divisor+1
  5626  0FD4  085C               	movf	sprintf@val+1,w
  5627  0FD5  00F6               	movwf	___lwdiv@dividend+1
  5628  0FD6  085B               	movf	sprintf@val,w
  5629  0FD7  00F5               	movwf	___lwdiv@dividend
  5630  0FD8  120A  158A  219D  120A  158A  	fcall	___lwdiv
  5631  0FDD  0874               	movf	?___lwdiv+1,w
  5632  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  5633  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  5634  0FE0  00CD               	movwf	___lwmod@dividend+1
  5635  0FE1  0873               	movf	?___lwdiv,w
  5636  0FE2  00CC               	movwf	___lwmod@dividend
  5637  0FE3  120A  158A  20BE  120A  158A  	fcall	___lwmod
  5638  0FE8  1283               	bcf	3,5	;RP0=0, select bank0
  5639  0FE9  1303               	bcf	3,6	;RP1=0, select bank0
  5640  0FEA  084A               	movf	?___lwmod,w
  5641  0FEB  3E30               	addlw	48
  5642  0FEC  00D5               	movwf	??_sprintf+1
  5643  0FED  0855               	movf	??_sprintf+1,w
  5644  0FEE  00DE               	movwf	sprintf@c
  5645                           
  5646                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  5647  0FEF  085E               	movf	sprintf@c,w
  5648  0FF0  00D4               	movwf	??_sprintf
  5649  0FF1  085D               	movf	sprintf@sp,w
  5650  0FF2  0084               	movwf	4
  5651  0FF3  0854               	movf	??_sprintf,w
  5652  0FF4  1383               	bcf	3,7	;select IRP bank0
  5653  0FF5  0080               	movwf	0
  5654  0FF6  3001               	movlw	1
  5655  0FF7  00D4               	movwf	??_sprintf
  5656  0FF8  0854               	movf	??_sprintf,w
  5657  0FF9  07DD               	addwf	sprintf@sp,f
  5658  0FFA  2FB4               	goto	l3729
  5659  0FFB                     l3733:	
  5660                           
  5661                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  5662  0FFB  085D               	movf	sprintf@sp,w
  5663  0FFC  0084               	movwf	4
  5664  0FFD  1383               	bcf	3,7	;select IRP bank0
  5665  0FFE  0180               	clrf	0
  5666  0FFF  0008               	return
  5667  1000                     __end_of_sprintf:	
  5668                           
  5669                           	psect	text16
  5670  08BE                     __ptext16:	
  5671 ;; *************** function ___lwmod *****************
  5672 ;; Defined at:
  5673 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  5674 ;; Parameters:    Size  Location     Type
  5675 ;;  divisor         2    3[BANK0 ] unsigned int 
  5676 ;;  dividend        2    5[BANK0 ] unsigned int 
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;  counter         1    8[BANK0 ] unsigned char 
  5679 ;; Return value:  Size  Location     Type
  5680 ;;                  2    3[BANK0 ] unsigned int 
  5681 ;; Registers used:
  5682 ;;		wreg, status,2, status,0
  5683 ;; Tracked objects:
  5684 ;;		On entry : 0/0
  5685 ;;		On exit  : 0/0
  5686 ;;		Unchanged: 0/0
  5687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5688 ;;      Params:         0       4       0       0       0
  5689 ;;      Locals:         0       1       0       0       0
  5690 ;;      Temps:          0       1       0       0       0
  5691 ;;      Totals:         0       6       0       0       0
  5692 ;;Total ram usage:        6 bytes
  5693 ;; Hardware stack levels used:    1
  5694 ;; Hardware stack levels required when called:    1
  5695 ;; This function calls:
  5696 ;;		Nothing
  5697 ;; This function is called by:
  5698 ;;		_sprintf
  5699 ;; This function uses a non-reentrant model
  5700 ;;
  5701                           
  5702                           
  5703                           ;psect for function ___lwmod
  5704  08BE                     ___lwmod:	
  5705                           
  5706                           ;incstack = 0
  5707                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5708  08BE  1283               	bcf	3,5	;RP0=0, select bank0
  5709  08BF  1303               	bcf	3,6	;RP1=0, select bank0
  5710  08C0  084A               	movf	___lwmod@divisor,w
  5711  08C1  044B               	iorwf	___lwmod@divisor+1,w
  5712  08C2  1903               	btfsc	3,2
  5713  08C3  28ED               	goto	l2455
  5714  08C4  01CF               	clrf	___lwmod@counter
  5715  08C5  0ACF               	incf	___lwmod@counter,f
  5716  08C6                     l2445:	
  5717  08C6  1BCB               	btfsc	___lwmod@divisor+1,7
  5718  08C7  28D4               	goto	l2447
  5719  08C8  3001               	movlw	1
  5720  08C9                     u2055:	
  5721  08C9  1003               	clrc
  5722  08CA  0DCA               	rlf	___lwmod@divisor,f
  5723  08CB  0DCB               	rlf	___lwmod@divisor+1,f
  5724  08CC  3EFF               	addlw	-1
  5725  08CD  1D03               	skipz
  5726  08CE  28C9               	goto	u2055
  5727  08CF  3001               	movlw	1
  5728  08D0  00CE               	movwf	??___lwmod
  5729  08D1  084E               	movf	??___lwmod,w
  5730  08D2  07CF               	addwf	___lwmod@counter,f
  5731  08D3  28C6               	goto	l2445
  5732  08D4                     l2447:	
  5733  08D4  084B               	movf	___lwmod@divisor+1,w
  5734  08D5  024D               	subwf	___lwmod@dividend+1,w
  5735  08D6  1D03               	skipz
  5736  08D7  28DA               	goto	u2075
  5737  08D8  084A               	movf	___lwmod@divisor,w
  5738  08D9  024C               	subwf	___lwmod@dividend,w
  5739  08DA                     u2075:	
  5740  08DA  1C03               	skipc
  5741  08DB  28E2               	goto	l2451
  5742  08DC  084A               	movf	___lwmod@divisor,w
  5743  08DD  02CC               	subwf	___lwmod@dividend,f
  5744  08DE  084B               	movf	___lwmod@divisor+1,w
  5745  08DF  1C03               	skipc
  5746  08E0  03CD               	decf	___lwmod@dividend+1,f
  5747  08E1  02CD               	subwf	___lwmod@dividend+1,f
  5748  08E2                     l2451:	
  5749  08E2  3001               	movlw	1
  5750  08E3                     u2085:	
  5751  08E3  1003               	clrc
  5752  08E4  0CCB               	rrf	___lwmod@divisor+1,f
  5753  08E5  0CCA               	rrf	___lwmod@divisor,f
  5754  08E6  3EFF               	addlw	-1
  5755  08E7  1D03               	skipz
  5756  08E8  28E3               	goto	u2085
  5757  08E9  3001               	movlw	1
  5758  08EA  02CF               	subwf	___lwmod@counter,f
  5759  08EB  1D03               	btfss	3,2
  5760  08EC  28D4               	goto	l2447
  5761  08ED                     l2455:	
  5762  08ED  084D               	movf	___lwmod@dividend+1,w
  5763  08EE  00CB               	movwf	?___lwmod+1
  5764  08EF  084C               	movf	___lwmod@dividend,w
  5765  08F0  00CA               	movwf	?___lwmod
  5766  08F1  0008               	return
  5767  08F2                     __end_of___lwmod:	
  5768                           
  5769                           	psect	text17
  5770  099D                     __ptext17:	
  5771 ;; *************** function ___lwdiv *****************
  5772 ;; Defined at:
  5773 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;  divisor         2    3[COMMON] unsigned int 
  5776 ;;  dividend        2    5[COMMON] unsigned int 
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;  quotient        2    1[BANK0 ] unsigned int 
  5779 ;;  counter         1    0[BANK0 ] unsigned char 
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  2    3[COMMON] unsigned int 
  5782 ;; Registers used:
  5783 ;;		wreg, status,2, status,0
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5789 ;;      Params:         4       0       0       0       0
  5790 ;;      Locals:         0       3       0       0       0
  5791 ;;      Temps:          1       0       0       0       0
  5792 ;;      Totals:         5       3       0       0       0
  5793 ;;Total ram usage:        8 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    1
  5796 ;; This function calls:
  5797 ;;		Nothing
  5798 ;; This function is called by:
  5799 ;;		_sprintf
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           
  5804                           ;psect for function ___lwdiv
  5805  099D                     ___lwdiv:	
  5806                           
  5807                           ;incstack = 0
  5808                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5809  099D  1283               	bcf	3,5	;RP0=0, select bank0
  5810  099E  1303               	bcf	3,6	;RP1=0, select bank0
  5811  099F  01C8               	clrf	___lwdiv@quotient
  5812  09A0  01C9               	clrf	___lwdiv@quotient+1
  5813  09A1  0873               	movf	___lwdiv@divisor,w
  5814  09A2  0474               	iorwf	___lwdiv@divisor+1,w
  5815  09A3  1903               	btfsc	3,2
  5816  09A4  29D6               	goto	l3595
  5817  09A5  01C7               	clrf	___lwdiv@counter
  5818  09A6  0AC7               	incf	___lwdiv@counter,f
  5819  09A7                     l3583:	
  5820  09A7  1BF4               	btfsc	___lwdiv@divisor+1,7
  5821  09A8  29B5               	goto	l3585
  5822  09A9  3001               	movlw	1
  5823  09AA                     u3655:	
  5824  09AA  1003               	clrc
  5825  09AB  0DF3               	rlf	___lwdiv@divisor,f
  5826  09AC  0DF4               	rlf	___lwdiv@divisor+1,f
  5827  09AD  3EFF               	addlw	-1
  5828  09AE  1D03               	skipz
  5829  09AF  29AA               	goto	u3655
  5830  09B0  3001               	movlw	1
  5831  09B1  00F7               	movwf	??___lwdiv
  5832  09B2  0877               	movf	??___lwdiv,w
  5833  09B3  07C7               	addwf	___lwdiv@counter,f
  5834  09B4  29A7               	goto	l3583
  5835  09B5                     l3585:	
  5836  09B5  3001               	movlw	1
  5837  09B6                     u3675:	
  5838  09B6  1003               	clrc
  5839  09B7  0DC8               	rlf	___lwdiv@quotient,f
  5840  09B8  0DC9               	rlf	___lwdiv@quotient+1,f
  5841  09B9  3EFF               	addlw	-1
  5842  09BA  1D03               	skipz
  5843  09BB  29B6               	goto	u3675
  5844  09BC  0874               	movf	___lwdiv@divisor+1,w
  5845  09BD  0276               	subwf	___lwdiv@dividend+1,w
  5846  09BE  1D03               	skipz
  5847  09BF  29C2               	goto	u3685
  5848  09C0  0873               	movf	___lwdiv@divisor,w
  5849  09C1  0275               	subwf	___lwdiv@dividend,w
  5850  09C2                     u3685:	
  5851  09C2  1C03               	skipc
  5852  09C3  29CB               	goto	l3591
  5853  09C4  0873               	movf	___lwdiv@divisor,w
  5854  09C5  02F5               	subwf	___lwdiv@dividend,f
  5855  09C6  0874               	movf	___lwdiv@divisor+1,w
  5856  09C7  1C03               	skipc
  5857  09C8  03F6               	decf	___lwdiv@dividend+1,f
  5858  09C9  02F6               	subwf	___lwdiv@dividend+1,f
  5859  09CA  1448               	bsf	___lwdiv@quotient,0
  5860  09CB                     l3591:	
  5861  09CB  3001               	movlw	1
  5862  09CC                     u3695:	
  5863  09CC  1003               	clrc
  5864  09CD  0CF4               	rrf	___lwdiv@divisor+1,f
  5865  09CE  0CF3               	rrf	___lwdiv@divisor,f
  5866  09CF  3EFF               	addlw	-1
  5867  09D0  1D03               	skipz
  5868  09D1  29CC               	goto	u3695
  5869  09D2  3001               	movlw	1
  5870  09D3  02C7               	subwf	___lwdiv@counter,f
  5871  09D4  1D03               	btfss	3,2
  5872  09D5  29B5               	goto	l3585
  5873  09D6                     l3595:	
  5874  09D6  0849               	movf	___lwdiv@quotient+1,w
  5875  09D7  00F4               	movwf	?___lwdiv+1
  5876  09D8  0848               	movf	___lwdiv@quotient,w
  5877  09D9  00F3               	movwf	?___lwdiv
  5878  09DA  0008               	return
  5879  09DB                     __end_of___lwdiv:	
  5880                           
  5881                           	psect	text18
  5882  082B                     __ptext18:	
  5883 ;; *************** function ___bmul *****************
  5884 ;; Defined at:
  5885 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;  multiplier      1    wreg     unsigned char 
  5888 ;;  multiplicand    1    3[COMMON] unsigned char 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  multiplier      1    6[COMMON] unsigned char 
  5891 ;;  product         1    5[COMMON] unsigned char 
  5892 ;; Return value:  Size  Location     Type
  5893 ;;                  1    wreg      unsigned char 
  5894 ;; Registers used:
  5895 ;;		wreg, status,2, status,0
  5896 ;; Tracked objects:
  5897 ;;		On entry : 0/0
  5898 ;;		On exit  : 0/0
  5899 ;;		Unchanged: 0/0
  5900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5901 ;;      Params:         1       0       0       0       0
  5902 ;;      Locals:         2       0       0       0       0
  5903 ;;      Temps:          1       0       0       0       0
  5904 ;;      Totals:         4       0       0       0       0
  5905 ;;Total ram usage:        4 bytes
  5906 ;; Hardware stack levels used:    1
  5907 ;; Hardware stack levels required when called:    1
  5908 ;; This function calls:
  5909 ;;		Nothing
  5910 ;; This function is called by:
  5911 ;;		_main
  5912 ;;		_get_temp
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           
  5917                           ;psect for function ___bmul
  5918  082B                     ___bmul:	
  5919                           
  5920                           ;incstack = 0
  5921                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5922                           ;___bmul@multiplier stored from wreg
  5923  082B  00F6               	movwf	___bmul@multiplier
  5924  082C  01F5               	clrf	___bmul@product
  5925  082D                     l2661:	
  5926  082D  1C76               	btfss	___bmul@multiplier,0
  5927  082E  2833               	goto	l2665
  5928  082F  0873               	movf	___bmul@multiplicand,w
  5929  0830  00F4               	movwf	??___bmul
  5930  0831  0874               	movf	??___bmul,w
  5931  0832  07F5               	addwf	___bmul@product,f
  5932  0833                     l2665:	
  5933  0833  1003               	clrc
  5934  0834  0DF3               	rlf	___bmul@multiplicand,f
  5935  0835  1003               	clrc
  5936  0836  0CF6               	rrf	___bmul@multiplier,f
  5937  0837  0876               	movf	___bmul@multiplier,w
  5938  0838  1D03               	btfss	3,2
  5939  0839  282D               	goto	l2661
  5940  083A  0875               	movf	___bmul@product,w
  5941  083B  0008               	return
  5942  083C                     __end_of___bmul:	
  5943                           
  5944                           	psect	text19
  5945  17BA                     __ptext19:	
  5946 ;; *************** function _get_hall *****************
  5947 ;; Defined at:
  5948 ;;		line 568 in file "mainMaster.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;		None
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;  key             1    2[BANK0 ] unsigned char 
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  1    wreg      unsigned char 
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, status,0, pclath, cstack
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5962 ;;      Params:         0       0       0       0       0
  5963 ;;      Locals:         0       1       0       0       0
  5964 ;;      Temps:          1       0       0       0       0
  5965 ;;      Totals:         1       1       0       0       0
  5966 ;;Total ram usage:        2 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:    3
  5969 ;; This function calls:
  5970 ;;		_I2C_Master_Read
  5971 ;;		_I2C_Master_Start
  5972 ;;		_I2C_Master_Stop
  5973 ;;		_I2C_Master_Write
  5974 ;; This function is called by:
  5975 ;;		_main
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           
  5980                           ;psect for function _get_hall
  5981  17BA                     _get_hall:	
  5982                           
  5983                           ;mainMaster.c: 570:     char key;;mainMaster.c: 572:     I2C_Master_Start();
  5984                           
  5985                           ;incstack = 0
  5986                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  5987  17BA  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  5988                           
  5989                           ;mainMaster.c: 573:     I2C_Master_Write(0x11);
  5990  17BF  3011               	movlw	17
  5991  17C0  00F3               	movwf	I2C_Master_Write@d
  5992  17C1  3000               	movlw	0
  5993  17C2  00F4               	movwf	I2C_Master_Write@d+1
  5994  17C3  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  5995                           
  5996                           ;mainMaster.c: 574:     key = I2C_Master_Read(0);
  5997  17C8  3000               	movlw	0
  5998  17C9  00F3               	movwf	I2C_Master_Read@a
  5999  17CA  00F4               	movwf	I2C_Master_Read@a+1
  6000  17CB  120A  158A  2060  160A  118A  	fcall	_I2C_Master_Read
  6001  17D0  0873               	movf	?_I2C_Master_Read,w
  6002  17D1  00F7               	movwf	??_get_hall
  6003  17D2  0877               	movf	??_get_hall,w
  6004  17D3  1283               	bcf	3,5	;RP0=0, select bank0
  6005  17D4  1303               	bcf	3,6	;RP1=0, select bank0
  6006  17D5  00C9               	movwf	get_hall@key
  6007                           
  6008                           ;mainMaster.c: 575:     I2C_Master_Stop();
  6009  17D6  160A  118A  2699   	fcall	_I2C_Master_Stop
  6010                           
  6011                           ;mainMaster.c: 577:     return (key);
  6012  17D9  1283               	bcf	3,5	;RP0=0, select bank0
  6013  17DA  1303               	bcf	3,6	;RP1=0, select bank0
  6014  17DB  0849               	movf	get_hall@key,w
  6015  17DC  0008               	return
  6016  17DD                     __end_of_get_hall:	
  6017                           
  6018                           	psect	text20
  6019  0963                     __ptext20:	
  6020 ;; *************** function _get_day *****************
  6021 ;; Defined at:
  6022 ;;		line 526 in file "mainMaster.c"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;		None
  6025 ;; Auto vars:     Size  Location     Type
  6026 ;;  d               1    2[BANK0 ] unsigned char 
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  1    wreg      unsigned char 
  6029 ;; Registers used:
  6030 ;;		wreg, status,2, status,0, pclath, cstack
  6031 ;; Tracked objects:
  6032 ;;		On entry : 0/0
  6033 ;;		On exit  : 0/0
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6036 ;;      Params:         0       0       0       0       0
  6037 ;;      Locals:         0       1       0       0       0
  6038 ;;      Temps:          1       0       0       0       0
  6039 ;;      Totals:         1       1       0       0       0
  6040 ;;Total ram usage:        2 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; Hardware stack levels required when called:    3
  6043 ;; This function calls:
  6044 ;;		_I2C_Master_Read
  6045 ;;		_I2C_Master_RepeatedStart
  6046 ;;		_I2C_Master_Start
  6047 ;;		_I2C_Master_Stop
  6048 ;;		_I2C_Master_Write
  6049 ;; This function is called by:
  6050 ;;		_main
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           
  6055                           ;psect for function _get_day
  6056  0963                     _get_day:	
  6057                           
  6058                           ;mainMaster.c: 528:     char d;;mainMaster.c: 530:     I2C_Master_Start();
  6059                           
  6060                           ;incstack = 0
  6061                           ; Regs used in _get_day: [wreg+status,2+status,0+pclath+cstack]
  6062  0963  160A  118A  2692  120A  158A  	fcall	_I2C_Master_Start
  6063                           
  6064                           ;mainMaster.c: 531:     I2C_Master_Write(0xD0);
  6065  0968  30D0               	movlw	208
  6066  0969  00F3               	movwf	I2C_Master_Write@d
  6067  096A  3000               	movlw	0
  6068  096B  00F4               	movwf	I2C_Master_Write@d+1
  6069  096C  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  6070                           
  6071                           ;mainMaster.c: 532:     I2C_Master_Write(0x03);
  6072  0971  3003               	movlw	3
  6073  0972  00F3               	movwf	I2C_Master_Write@d
  6074  0973  3000               	movlw	0
  6075  0974  00F4               	movwf	I2C_Master_Write@d+1
  6076  0975  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  6077                           
  6078                           ;mainMaster.c: 533:     I2C_Master_RepeatedStart();
  6079  097A  160A  118A  26A0  120A  158A  	fcall	_I2C_Master_RepeatedStart
  6080                           
  6081                           ;mainMaster.c: 534:     I2C_Master_Write(0xD1);
  6082  097F  30D1               	movlw	209
  6083  0980  00F3               	movwf	I2C_Master_Write@d
  6084  0981  3000               	movlw	0
  6085  0982  00F4               	movwf	I2C_Master_Write@d+1
  6086  0983  160A  118A  26A7  120A  158A  	fcall	_I2C_Master_Write
  6087                           
  6088                           ;mainMaster.c: 535:     d = I2C_Master_Read(0);
  6089  0988  3000               	movlw	0
  6090  0989  00F3               	movwf	I2C_Master_Read@a
  6091  098A  00F4               	movwf	I2C_Master_Read@a+1
  6092  098B  120A  158A  2060  120A  158A  	fcall	_I2C_Master_Read
  6093  0990  0873               	movf	?_I2C_Master_Read,w
  6094  0991  00F7               	movwf	??_get_day
  6095  0992  0877               	movf	??_get_day,w
  6096  0993  1283               	bcf	3,5	;RP0=0, select bank0
  6097  0994  1303               	bcf	3,6	;RP1=0, select bank0
  6098  0995  00C9               	movwf	get_day@d
  6099                           
  6100                           ;mainMaster.c: 536:     I2C_Master_Stop();
  6101  0996  160A  118A  2699   	fcall	_I2C_Master_Stop
  6102                           
  6103                           ;mainMaster.c: 538:     return d;
  6104  0999  1283               	bcf	3,5	;RP0=0, select bank0
  6105  099A  1303               	bcf	3,6	;RP1=0, select bank0
  6106  099B  0849               	movf	get_day@d,w
  6107  099C  0008               	return
  6108  099D                     __end_of_get_day:	
  6109                           
  6110                           	psect	text21
  6111  16A0                     __ptext21:	
  6112 ;; *************** function _I2C_Master_RepeatedStart *****************
  6113 ;; Defined at:
  6114 ;;		line 47 in file "./I2C.h"
  6115 ;; Parameters:    Size  Location     Type
  6116 ;;		None
  6117 ;; Auto vars:     Size  Location     Type
  6118 ;;		None
  6119 ;; Return value:  Size  Location     Type
  6120 ;;                  1    wreg      void 
  6121 ;; Registers used:
  6122 ;;		wreg, status,2, status,0, pclath, cstack
  6123 ;; Tracked objects:
  6124 ;;		On entry : 0/0
  6125 ;;		On exit  : 0/0
  6126 ;;		Unchanged: 0/0
  6127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6128 ;;      Params:         0       0       0       0       0
  6129 ;;      Locals:         0       0       0       0       0
  6130 ;;      Temps:          0       0       0       0       0
  6131 ;;      Totals:         0       0       0       0       0
  6132 ;;Total ram usage:        0 bytes
  6133 ;; Hardware stack levels used:    1
  6134 ;; Hardware stack levels required when called:    2
  6135 ;; This function calls:
  6136 ;;		_I2C_Master_Wait
  6137 ;; This function is called by:
  6138 ;;		_get_time
  6139 ;;		_get_day
  6140 ;;		_get_temp
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           
  6145                           ;psect for function _I2C_Master_RepeatedStart
  6146  16A0                     _I2C_Master_RepeatedStart:	
  6147                           
  6148                           ;./I2C.h: 49:     I2C_Master_Wait();
  6149                           
  6150                           ;incstack = 0
  6151                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  6152  16A0  160A  118A  26B7   	fcall	_I2C_Master_Wait
  6153                           
  6154                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  6155  16A3  1683               	bsf	3,5	;RP0=1, select bank1
  6156  16A4  1303               	bcf	3,6	;RP1=0, select bank1
  6157  16A5  1491               	bsf	17,1	;volatile
  6158  16A6  0008               	return
  6159  16A7                     __end_of_I2C_Master_RepeatedStart:	
  6160                           
  6161                           	psect	text22
  6162  1797                     __ptext22:	
  6163 ;; *************** function _get_PIR *****************
  6164 ;; Defined at:
  6165 ;;		line 592 in file "mainMaster.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;		None
  6168 ;; Auto vars:     Size  Location     Type
  6169 ;;  PIR             1    2[BANK0 ] unsigned char 
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  1    wreg      unsigned char 
  6172 ;; Registers used:
  6173 ;;		wreg, status,2, status,0, pclath, cstack
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6179 ;;      Params:         0       0       0       0       0
  6180 ;;      Locals:         0       1       0       0       0
  6181 ;;      Temps:          1       0       0       0       0
  6182 ;;      Totals:         1       1       0       0       0
  6183 ;;Total ram usage:        2 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:    3
  6186 ;; This function calls:
  6187 ;;		_I2C_Master_Read
  6188 ;;		_I2C_Master_Start
  6189 ;;		_I2C_Master_Stop
  6190 ;;		_I2C_Master_Write
  6191 ;; This function is called by:
  6192 ;;		_main
  6193 ;; This function uses a non-reentrant model
  6194 ;;
  6195                           
  6196                           
  6197                           ;psect for function _get_PIR
  6198  1797                     _get_PIR:	
  6199                           
  6200                           ;mainMaster.c: 594:     char PIR;;mainMaster.c: 596:     I2C_Master_Start();
  6201                           
  6202                           ;incstack = 0
  6203                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  6204  1797  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  6205                           
  6206                           ;mainMaster.c: 597:     I2C_Master_Write(0x41);
  6207  179C  3041               	movlw	65
  6208  179D  00F3               	movwf	I2C_Master_Write@d
  6209  179E  3000               	movlw	0
  6210  179F  00F4               	movwf	I2C_Master_Write@d+1
  6211  17A0  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  6212                           
  6213                           ;mainMaster.c: 598:     PIR = I2C_Master_Read(0);
  6214  17A5  3000               	movlw	0
  6215  17A6  00F3               	movwf	I2C_Master_Read@a
  6216  17A7  00F4               	movwf	I2C_Master_Read@a+1
  6217  17A8  120A  158A  2060  160A  118A  	fcall	_I2C_Master_Read
  6218  17AD  0873               	movf	?_I2C_Master_Read,w
  6219  17AE  00F7               	movwf	??_get_PIR
  6220  17AF  0877               	movf	??_get_PIR,w
  6221  17B0  1283               	bcf	3,5	;RP0=0, select bank0
  6222  17B1  1303               	bcf	3,6	;RP1=0, select bank0
  6223  17B2  00C9               	movwf	get_PIR@PIR
  6224                           
  6225                           ;mainMaster.c: 599:     I2C_Master_Stop();
  6226  17B3  160A  118A  2699   	fcall	_I2C_Master_Stop
  6227                           
  6228                           ;mainMaster.c: 601:     return (PIR);
  6229  17B6  1283               	bcf	3,5	;RP0=0, select bank0
  6230  17B7  1303               	bcf	3,6	;RP1=0, select bank0
  6231  17B8  0849               	movf	get_PIR@PIR,w
  6232  17B9  0008               	return
  6233  17BA                     __end_of_get_PIR:	
  6234                           
  6235                           	psect	text23
  6236  1774                     __ptext23:	
  6237 ;; *************** function _get_IR *****************
  6238 ;; Defined at:
  6239 ;;		line 604 in file "mainMaster.c"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;		None
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;  IR              1    2[BANK0 ] unsigned char 
  6244 ;; Return value:  Size  Location     Type
  6245 ;;                  1    wreg      unsigned char 
  6246 ;; Registers used:
  6247 ;;		wreg, status,2, status,0, pclath, cstack
  6248 ;; Tracked objects:
  6249 ;;		On entry : 0/0
  6250 ;;		On exit  : 0/0
  6251 ;;		Unchanged: 0/0
  6252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6253 ;;      Params:         0       0       0       0       0
  6254 ;;      Locals:         0       1       0       0       0
  6255 ;;      Temps:          1       0       0       0       0
  6256 ;;      Totals:         1       1       0       0       0
  6257 ;;Total ram usage:        2 bytes
  6258 ;; Hardware stack levels used:    1
  6259 ;; Hardware stack levels required when called:    3
  6260 ;; This function calls:
  6261 ;;		_I2C_Master_Read
  6262 ;;		_I2C_Master_Start
  6263 ;;		_I2C_Master_Stop
  6264 ;;		_I2C_Master_Write
  6265 ;; This function is called by:
  6266 ;;		_main
  6267 ;; This function uses a non-reentrant model
  6268 ;;
  6269                           
  6270                           
  6271                           ;psect for function _get_IR
  6272  1774                     _get_IR:	
  6273                           
  6274                           ;mainMaster.c: 606:     char IR;;mainMaster.c: 608:     I2C_Master_Start();
  6275                           
  6276                           ;incstack = 0
  6277                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  6278  1774  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  6279                           
  6280                           ;mainMaster.c: 609:     I2C_Master_Write(0x31);
  6281  1779  3031               	movlw	49
  6282  177A  00F3               	movwf	I2C_Master_Write@d
  6283  177B  3000               	movlw	0
  6284  177C  00F4               	movwf	I2C_Master_Write@d+1
  6285  177D  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  6286                           
  6287                           ;mainMaster.c: 610:     IR = I2C_Master_Read(0);
  6288  1782  3000               	movlw	0
  6289  1783  00F3               	movwf	I2C_Master_Read@a
  6290  1784  00F4               	movwf	I2C_Master_Read@a+1
  6291  1785  120A  158A  2060  160A  118A  	fcall	_I2C_Master_Read
  6292  178A  0873               	movf	?_I2C_Master_Read,w
  6293  178B  00F7               	movwf	??_get_IR
  6294  178C  0877               	movf	??_get_IR,w
  6295  178D  1283               	bcf	3,5	;RP0=0, select bank0
  6296  178E  1303               	bcf	3,6	;RP1=0, select bank0
  6297  178F  00C9               	movwf	get_IR@IR
  6298                           
  6299                           ;mainMaster.c: 611:     I2C_Master_Stop();
  6300  1790  160A  118A  2699   	fcall	_I2C_Master_Stop
  6301                           
  6302                           ;mainMaster.c: 613:     return (IR);
  6303  1793  1283               	bcf	3,5	;RP0=0, select bank0
  6304  1794  1303               	bcf	3,6	;RP1=0, select bank0
  6305  1795  0849               	movf	get_IR@IR,w
  6306  1796  0008               	return
  6307  1797                     __end_of_get_IR:	
  6308                           
  6309                           	psect	text24
  6310  0860                     __ptext24:	
  6311 ;; *************** function _I2C_Master_Read *****************
  6312 ;; Defined at:
  6313 ;;		line 74 in file "./I2C.h"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;  a               2    3[COMMON] unsigned short 
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;  temp            2    0[BANK0 ] unsigned short 
  6318 ;; Return value:  Size  Location     Type
  6319 ;;                  2    3[COMMON] unsigned short 
  6320 ;; Registers used:
  6321 ;;		wreg, status,2, status,0, pclath, cstack
  6322 ;; Tracked objects:
  6323 ;;		On entry : 0/0
  6324 ;;		On exit  : 0/0
  6325 ;;		Unchanged: 0/0
  6326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6327 ;;      Params:         2       0       0       0       0
  6328 ;;      Locals:         0       2       0       0       0
  6329 ;;      Temps:          2       0       0       0       0
  6330 ;;      Totals:         4       2       0       0       0
  6331 ;;Total ram usage:        6 bytes
  6332 ;; Hardware stack levels used:    1
  6333 ;; Hardware stack levels required when called:    2
  6334 ;; This function calls:
  6335 ;;		_I2C_Master_Wait
  6336 ;; This function is called by:
  6337 ;;		_get_time
  6338 ;;		_get_day
  6339 ;;		_get_temp
  6340 ;;		_get_hall
  6341 ;;		_get_tripwire
  6342 ;;		_get_PIR
  6343 ;;		_get_IR
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           
  6348                           ;psect for function _I2C_Master_Read
  6349  0860                     _I2C_Master_Read:	
  6350                           
  6351                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  6352                           
  6353                           ;incstack = 0
  6354                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  6355  0860  160A  118A  26B7  120A  158A  	fcall	_I2C_Master_Wait
  6356                           
  6357                           ;./I2C.h: 78:     RCEN = 1;
  6358  0865  1683               	bsf	3,5	;RP0=1, select bank1
  6359  0866  1303               	bcf	3,6	;RP1=0, select bank1
  6360  0867  1591               	bsf	17,3	;volatile
  6361                           
  6362                           ;./I2C.h: 79:     I2C_Master_Wait();
  6363  0868  160A  118A  26B7  120A  158A  	fcall	_I2C_Master_Wait
  6364                           
  6365                           ;./I2C.h: 80:     temp = SSPBUF;
  6366  086D  1283               	bcf	3,5	;RP0=0, select bank0
  6367  086E  1303               	bcf	3,6	;RP1=0, select bank0
  6368  086F  0813               	movf	19,w	;volatile
  6369  0870  00F5               	movwf	??_I2C_Master_Read
  6370  0871  01F6               	clrf	??_I2C_Master_Read+1
  6371  0872  0875               	movf	??_I2C_Master_Read,w
  6372  0873  00C7               	movwf	I2C_Master_Read@temp
  6373  0874  0876               	movf	??_I2C_Master_Read+1,w
  6374  0875  00C8               	movwf	I2C_Master_Read@temp+1
  6375                           
  6376                           ;./I2C.h: 81:     I2C_Master_Wait();
  6377  0876  160A  118A  26B7  120A  158A  	fcall	_I2C_Master_Wait
  6378                           
  6379                           ;./I2C.h: 83:     if(a == 1){
  6380  087B  0373               	decf	I2C_Master_Read@a,w
  6381  087C  0474               	iorwf	I2C_Master_Read@a+1,w
  6382  087D  1D03               	btfss	3,2
  6383  087E  2883               	goto	l152
  6384                           
  6385                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  6386  087F  1683               	bsf	3,5	;RP0=1, select bank1
  6387  0880  1303               	bcf	3,6	;RP1=0, select bank1
  6388  0881  1291               	bcf	17,5	;volatile
  6389                           
  6390                           ;./I2C.h: 85:     }else{
  6391  0882  2886               	goto	l153
  6392  0883                     l152:	
  6393                           
  6394                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  6395  0883  1683               	bsf	3,5	;RP0=1, select bank1
  6396  0884  1303               	bcf	3,6	;RP1=0, select bank1
  6397  0885  1691               	bsf	17,5	;volatile
  6398  0886                     l153:	
  6399                           ;./I2C.h: 87:     }
  6400                           
  6401                           
  6402                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  6403  0886  1611               	bsf	17,4	;volatile
  6404                           
  6405                           ;./I2C.h: 89:     return temp;
  6406  0887  1283               	bcf	3,5	;RP0=0, select bank0
  6407  0888  1303               	bcf	3,6	;RP1=0, select bank0
  6408  0889  0848               	movf	I2C_Master_Read@temp+1,w
  6409  088A  00F4               	movwf	?_I2C_Master_Read+1
  6410  088B  0847               	movf	I2C_Master_Read@temp,w
  6411  088C  00F3               	movwf	?_I2C_Master_Read
  6412  088D  0008               	return
  6413  088E                     __end_of_I2C_Master_Read:	
  6414                           
  6415                           	psect	text25
  6416  171F                     __ptext25:	
  6417 ;; *************** function _close_door *****************
  6418 ;; Defined at:
  6419 ;;		line 625 in file "mainMaster.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;		None
  6422 ;; Auto vars:     Size  Location     Type
  6423 ;;		None
  6424 ;; Return value:  Size  Location     Type
  6425 ;;                  1    wreg      void 
  6426 ;; Registers used:
  6427 ;;		wreg, status,2, status,0, pclath, cstack
  6428 ;; Tracked objects:
  6429 ;;		On entry : 0/0
  6430 ;;		On exit  : 0/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6433 ;;      Params:         0       0       0       0       0
  6434 ;;      Locals:         0       0       0       0       0
  6435 ;;      Temps:          0       0       0       0       0
  6436 ;;      Totals:         0       0       0       0       0
  6437 ;;Total ram usage:        0 bytes
  6438 ;; Hardware stack levels used:    1
  6439 ;; Hardware stack levels required when called:    3
  6440 ;; This function calls:
  6441 ;;		_I2C_Master_Start
  6442 ;;		_I2C_Master_Stop
  6443 ;;		_I2C_Master_Write
  6444 ;; This function is called by:
  6445 ;;		_main
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           
  6450                           ;psect for function _close_door
  6451  171F                     _close_door:	
  6452                           
  6453                           ;mainMaster.c: 627:     I2C_Master_Start();
  6454                           
  6455                           ;incstack = 0
  6456                           ; Regs used in _close_door: [wreg+status,2+status,0+pclath+cstack]
  6457  171F  160A  118A  2692  160A  118A  	fcall	_I2C_Master_Start
  6458                           
  6459                           ;mainMaster.c: 628:     I2C_Master_Write(0x20);
  6460  1724  3020               	movlw	32
  6461  1725  00F3               	movwf	I2C_Master_Write@d
  6462  1726  3000               	movlw	0
  6463  1727  00F4               	movwf	I2C_Master_Write@d+1
  6464  1728  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  6465                           
  6466                           ;mainMaster.c: 629:     I2C_Master_Write(0xF0);
  6467  172D  30F0               	movlw	240
  6468  172E  00F3               	movwf	I2C_Master_Write@d
  6469  172F  3000               	movlw	0
  6470  1730  00F4               	movwf	I2C_Master_Write@d+1
  6471  1731  160A  118A  26A7  160A  118A  	fcall	_I2C_Master_Write
  6472                           
  6473                           ;mainMaster.c: 630:     I2C_Master_Stop();
  6474  1736  160A  118A  2699   	fcall	_I2C_Master_Stop
  6475  1739  0008               	return
  6476  173A                     __end_of_close_door:	
  6477                           
  6478                           	psect	text26
  6479  16A7                     __ptext26:	
  6480 ;; *************** function _I2C_Master_Write *****************
  6481 ;; Defined at:
  6482 ;;		line 65 in file "./I2C.h"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;  d               2    3[COMMON] unsigned int 
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;		None
  6487 ;; Return value:  Size  Location     Type
  6488 ;;                  1    wreg      void 
  6489 ;; Registers used:
  6490 ;;		wreg, status,2, status,0, pclath, cstack
  6491 ;; Tracked objects:
  6492 ;;		On entry : 0/0
  6493 ;;		On exit  : 0/0
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6496 ;;      Params:         2       0       0       0       0
  6497 ;;      Locals:         0       0       0       0       0
  6498 ;;      Temps:          0       0       0       0       0
  6499 ;;      Totals:         2       0       0       0       0
  6500 ;;Total ram usage:        2 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; Hardware stack levels required when called:    2
  6503 ;; This function calls:
  6504 ;;		_I2C_Master_Wait
  6505 ;; This function is called by:
  6506 ;;		_write_RTC
  6507 ;;		_get_time
  6508 ;;		_get_day
  6509 ;;		_get_temp
  6510 ;;		_get_hall
  6511 ;;		_get_tripwire
  6512 ;;		_get_PIR
  6513 ;;		_get_IR
  6514 ;;		_open_door
  6515 ;;		_close_door
  6516 ;; This function uses a non-reentrant model
  6517 ;;
  6518                           
  6519                           
  6520                           ;psect for function _I2C_Master_Write
  6521  16A7                     _I2C_Master_Write:	
  6522                           
  6523                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  6524                           
  6525                           ;incstack = 0
  6526                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  6527  16A7  160A  118A  26B7   	fcall	_I2C_Master_Wait
  6528                           
  6529                           ;./I2C.h: 68:     SSPBUF = d;
  6530  16AA  0873               	movf	I2C_Master_Write@d,w
  6531  16AB  1283               	bcf	3,5	;RP0=0, select bank0
  6532  16AC  1303               	bcf	3,6	;RP1=0, select bank0
  6533  16AD  0093               	movwf	19	;volatile
  6534  16AE  0008               	return
  6535  16AF                     __end_of_I2C_Master_Write:	
  6536                           
  6537                           	psect	text27
  6538  1699                     __ptext27:	
  6539 ;; *************** function _I2C_Master_Stop *****************
  6540 ;; Defined at:
  6541 ;;		line 55 in file "./I2C.h"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;		None
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;		None
  6546 ;; Return value:  Size  Location     Type
  6547 ;;                  1    wreg      void 
  6548 ;; Registers used:
  6549 ;;		wreg, status,2, status,0, pclath, cstack
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6555 ;;      Params:         0       0       0       0       0
  6556 ;;      Locals:         0       0       0       0       0
  6557 ;;      Temps:          0       0       0       0       0
  6558 ;;      Totals:         0       0       0       0       0
  6559 ;;Total ram usage:        0 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    2
  6562 ;; This function calls:
  6563 ;;		_I2C_Master_Wait
  6564 ;; This function is called by:
  6565 ;;		_write_RTC
  6566 ;;		_get_time
  6567 ;;		_get_day
  6568 ;;		_get_temp
  6569 ;;		_get_hall
  6570 ;;		_get_tripwire
  6571 ;;		_get_PIR
  6572 ;;		_get_IR
  6573 ;;		_open_door
  6574 ;;		_close_door
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578                           
  6579                           ;psect for function _I2C_Master_Stop
  6580  1699                     _I2C_Master_Stop:	
  6581                           
  6582                           ;./I2C.h: 57:     I2C_Master_Wait();
  6583                           
  6584                           ;incstack = 0
  6585                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  6586  1699  160A  118A  26B7   	fcall	_I2C_Master_Wait
  6587                           
  6588                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  6589  169C  1683               	bsf	3,5	;RP0=1, select bank1
  6590  169D  1303               	bcf	3,6	;RP1=0, select bank1
  6591  169E  1511               	bsf	17,2	;volatile
  6592  169F  0008               	return
  6593  16A0                     __end_of_I2C_Master_Stop:	
  6594                           
  6595                           	psect	text28
  6596  1692                     __ptext28:	
  6597 ;; *************** function _I2C_Master_Start *****************
  6598 ;; Defined at:
  6599 ;;		line 39 in file "./I2C.h"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;		None
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;		None
  6604 ;; Return value:  Size  Location     Type
  6605 ;;                  1    wreg      void 
  6606 ;; Registers used:
  6607 ;;		wreg, status,2, status,0, pclath, cstack
  6608 ;; Tracked objects:
  6609 ;;		On entry : 0/0
  6610 ;;		On exit  : 0/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6613 ;;      Params:         0       0       0       0       0
  6614 ;;      Locals:         0       0       0       0       0
  6615 ;;      Temps:          0       0       0       0       0
  6616 ;;      Totals:         0       0       0       0       0
  6617 ;;Total ram usage:        0 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    2
  6620 ;; This function calls:
  6621 ;;		_I2C_Master_Wait
  6622 ;; This function is called by:
  6623 ;;		_write_RTC
  6624 ;;		_get_time
  6625 ;;		_get_day
  6626 ;;		_get_temp
  6627 ;;		_get_hall
  6628 ;;		_get_tripwire
  6629 ;;		_get_PIR
  6630 ;;		_get_IR
  6631 ;;		_open_door
  6632 ;;		_close_door
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           
  6637                           ;psect for function _I2C_Master_Start
  6638  1692                     _I2C_Master_Start:	
  6639                           
  6640                           ;./I2C.h: 41:     I2C_Master_Wait();
  6641                           
  6642                           ;incstack = 0
  6643                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  6644  1692  160A  118A  26B7   	fcall	_I2C_Master_Wait
  6645                           
  6646                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  6647  1695  1683               	bsf	3,5	;RP0=1, select bank1
  6648  1696  1303               	bcf	3,6	;RP1=0, select bank1
  6649  1697  1411               	bsf	17,0	;volatile
  6650  1698  0008               	return
  6651  1699                     __end_of_I2C_Master_Start:	
  6652                           
  6653                           	psect	text29
  6654  16B7                     __ptext29:	
  6655 ;; *************** function _I2C_Master_Wait *****************
  6656 ;; Defined at:
  6657 ;;		line 32 in file "./I2C.h"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;		None
  6660 ;; Auto vars:     Size  Location     Type
  6661 ;;		None
  6662 ;; Return value:  Size  Location     Type
  6663 ;;                  1    wreg      void 
  6664 ;; Registers used:
  6665 ;;		wreg, status,2
  6666 ;; Tracked objects:
  6667 ;;		On entry : 0/0
  6668 ;;		On exit  : 0/0
  6669 ;;		Unchanged: 0/0
  6670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6671 ;;      Params:         0       0       0       0       0
  6672 ;;      Locals:         0       0       0       0       0
  6673 ;;      Temps:          0       0       0       0       0
  6674 ;;      Totals:         0       0       0       0       0
  6675 ;;Total ram usage:        0 bytes
  6676 ;; Hardware stack levels used:    1
  6677 ;; Hardware stack levels required when called:    1
  6678 ;; This function calls:
  6679 ;;		Nothing
  6680 ;; This function is called by:
  6681 ;;		_I2C_Master_Start
  6682 ;;		_I2C_Master_RepeatedStart
  6683 ;;		_I2C_Master_Stop
  6684 ;;		_I2C_Master_Write
  6685 ;;		_I2C_Master_Read
  6686 ;; This function uses a non-reentrant model
  6687 ;;
  6688                           
  6689                           
  6690                           ;psect for function _I2C_Master_Wait
  6691  16B7                     _I2C_Master_Wait:	
  6692  16B7                     l134:	
  6693                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  6694                           
  6695                           ;incstack = 0
  6696                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  6697                           
  6698  16B7  1683               	bsf	3,5	;RP0=1, select bank1
  6699  16B8  1303               	bcf	3,6	;RP1=0, select bank1
  6700  16B9  1914               	btfsc	20,2	;volatile
  6701  16BA  2EB7               	goto	l134
  6702  16BB  0811               	movf	17,w	;volatile
  6703  16BC  391F               	andlw	31
  6704  16BD  1903               	btfsc	3,2
  6705  16BE  0008               	return
  6706  16BF  2EB7               	goto	l134
  6707  16C0                     __end_of_I2C_Master_Wait:	
  6708                           
  6709                           	psect	text30
  6710  06B3                     __ptext30:	
  6711 ;; *************** function ___awmod *****************
  6712 ;; Defined at:
  6713 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;  divisor         2    3[COMMON] int 
  6716 ;;  dividend        2    5[COMMON] int 
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;  sign            1    1[BANK0 ] unsigned char 
  6719 ;;  counter         1    0[BANK0 ] unsigned char 
  6720 ;; Return value:  Size  Location     Type
  6721 ;;                  2    3[COMMON] int 
  6722 ;; Registers used:
  6723 ;;		wreg, status,2, status,0
  6724 ;; Tracked objects:
  6725 ;;		On entry : 0/0
  6726 ;;		On exit  : 0/0
  6727 ;;		Unchanged: 0/0
  6728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6729 ;;      Params:         4       0       0       0       0
  6730 ;;      Locals:         0       2       0       0       0
  6731 ;;      Temps:          1       0       0       0       0
  6732 ;;      Totals:         5       2       0       0       0
  6733 ;;Total ram usage:        7 bytes
  6734 ;; Hardware stack levels used:    1
  6735 ;; Hardware stack levels required when called:    1
  6736 ;; This function calls:
  6737 ;;		Nothing
  6738 ;; This function is called by:
  6739 ;;		_main
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           
  6744                           ;psect for function ___awmod
  6745  06B3                     ___awmod:	
  6746                           
  6747                           ;incstack = 0
  6748                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6749  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  6750  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  6751  06B5  01C8               	clrf	___awmod@sign
  6752  06B6  1FF6               	btfss	___awmod@dividend+1,7
  6753  06B7  2EBF               	goto	l3923
  6754  06B8  09F5               	comf	___awmod@dividend,f
  6755  06B9  09F6               	comf	___awmod@dividend+1,f
  6756  06BA  0AF5               	incf	___awmod@dividend,f
  6757  06BB  1903               	skipnz
  6758  06BC  0AF6               	incf	___awmod@dividend+1,f
  6759  06BD  01C8               	clrf	___awmod@sign
  6760  06BE  0AC8               	incf	___awmod@sign,f
  6761  06BF                     l3923:	
  6762  06BF  1FF4               	btfss	___awmod@divisor+1,7
  6763  06C0  2EC6               	goto	l3927
  6764  06C1  09F3               	comf	___awmod@divisor,f
  6765  06C2  09F4               	comf	___awmod@divisor+1,f
  6766  06C3  0AF3               	incf	___awmod@divisor,f
  6767  06C4  1903               	skipnz
  6768  06C5  0AF4               	incf	___awmod@divisor+1,f
  6769  06C6                     l3927:	
  6770  06C6  0873               	movf	___awmod@divisor,w
  6771  06C7  0474               	iorwf	___awmod@divisor+1,w
  6772  06C8  1903               	btfsc	3,2
  6773  06C9  2EF3               	goto	l3945
  6774  06CA  01C7               	clrf	___awmod@counter
  6775  06CB  0AC7               	incf	___awmod@counter,f
  6776  06CC                     l3935:	
  6777  06CC  1BF4               	btfsc	___awmod@divisor+1,7
  6778  06CD  2EDA               	goto	l3937
  6779  06CE  3001               	movlw	1
  6780  06CF                     u4045:	
  6781  06CF  1003               	clrc
  6782  06D0  0DF3               	rlf	___awmod@divisor,f
  6783  06D1  0DF4               	rlf	___awmod@divisor+1,f
  6784  06D2  3EFF               	addlw	-1
  6785  06D3  1D03               	skipz
  6786  06D4  2ECF               	goto	u4045
  6787  06D5  3001               	movlw	1
  6788  06D6  00F7               	movwf	??___awmod
  6789  06D7  0877               	movf	??___awmod,w
  6790  06D8  07C7               	addwf	___awmod@counter,f
  6791  06D9  2ECC               	goto	l3935
  6792  06DA                     l3937:	
  6793  06DA  0874               	movf	___awmod@divisor+1,w
  6794  06DB  0276               	subwf	___awmod@dividend+1,w
  6795  06DC  1D03               	skipz
  6796  06DD  2EE0               	goto	u4065
  6797  06DE  0873               	movf	___awmod@divisor,w
  6798  06DF  0275               	subwf	___awmod@dividend,w
  6799  06E0                     u4065:	
  6800  06E0  1C03               	skipc
  6801  06E1  2EE8               	goto	l3941
  6802  06E2  0873               	movf	___awmod@divisor,w
  6803  06E3  02F5               	subwf	___awmod@dividend,f
  6804  06E4  0874               	movf	___awmod@divisor+1,w
  6805  06E5  1C03               	skipc
  6806  06E6  03F6               	decf	___awmod@dividend+1,f
  6807  06E7  02F6               	subwf	___awmod@dividend+1,f
  6808  06E8                     l3941:	
  6809  06E8  3001               	movlw	1
  6810  06E9                     u4075:	
  6811  06E9  1003               	clrc
  6812  06EA  0CF4               	rrf	___awmod@divisor+1,f
  6813  06EB  0CF3               	rrf	___awmod@divisor,f
  6814  06EC  3EFF               	addlw	-1
  6815  06ED  1D03               	skipz
  6816  06EE  2EE9               	goto	u4075
  6817  06EF  3001               	movlw	1
  6818  06F0  02C7               	subwf	___awmod@counter,f
  6819  06F1  1D03               	btfss	3,2
  6820  06F2  2EDA               	goto	l3937
  6821  06F3                     l3945:	
  6822  06F3  0848               	movf	___awmod@sign,w
  6823  06F4  1903               	btfsc	3,2
  6824  06F5  2EFB               	goto	l3949
  6825  06F6  09F5               	comf	___awmod@dividend,f
  6826  06F7  09F6               	comf	___awmod@dividend+1,f
  6827  06F8  0AF5               	incf	___awmod@dividend,f
  6828  06F9  1903               	skipnz
  6829  06FA  0AF6               	incf	___awmod@dividend+1,f
  6830  06FB                     l3949:	
  6831  06FB  0876               	movf	___awmod@dividend+1,w
  6832  06FC  00F4               	movwf	?___awmod+1
  6833  06FD  0875               	movf	___awmod@dividend,w
  6834  06FE  00F3               	movwf	?___awmod
  6835  06FF  0008               	return
  6836  0700                     __end_of___awmod:	
  6837                           
  6838                           	psect	text31
  6839  0B07                     __ptext31:	
  6840 ;; *************** function ___awdiv *****************
  6841 ;; Defined at:
  6842 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;  divisor         2    3[COMMON] int 
  6845 ;;  dividend        2    5[COMMON] int 
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;  quotient        2    2[BANK0 ] int 
  6848 ;;  sign            1    1[BANK0 ] unsigned char 
  6849 ;;  counter         1    0[BANK0 ] unsigned char 
  6850 ;; Return value:  Size  Location     Type
  6851 ;;                  2    3[COMMON] int 
  6852 ;; Registers used:
  6853 ;;		wreg, status,2, status,0
  6854 ;; Tracked objects:
  6855 ;;		On entry : 0/0
  6856 ;;		On exit  : 0/0
  6857 ;;		Unchanged: 0/0
  6858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6859 ;;      Params:         4       0       0       0       0
  6860 ;;      Locals:         0       4       0       0       0
  6861 ;;      Temps:          1       0       0       0       0
  6862 ;;      Totals:         5       4       0       0       0
  6863 ;;Total ram usage:        9 bytes
  6864 ;; Hardware stack levels used:    1
  6865 ;; Hardware stack levels required when called:    1
  6866 ;; This function calls:
  6867 ;;		Nothing
  6868 ;; This function is called by:
  6869 ;;		_main
  6870 ;; This function uses a non-reentrant model
  6871 ;;
  6872                           
  6873                           
  6874                           ;psect for function ___awdiv
  6875  0B07                     ___awdiv:	
  6876                           
  6877                           ;incstack = 0
  6878                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6879  0B07  1283               	bcf	3,5	;RP0=0, select bank0
  6880  0B08  1303               	bcf	3,6	;RP1=0, select bank0
  6881  0B09  01C8               	clrf	___awdiv@sign
  6882  0B0A  1FF4               	btfss	___awdiv@divisor+1,7
  6883  0B0B  2B13               	goto	l2869
  6884  0B0C  09F3               	comf	___awdiv@divisor,f
  6885  0B0D  09F4               	comf	___awdiv@divisor+1,f
  6886  0B0E  0AF3               	incf	___awdiv@divisor,f
  6887  0B0F  1903               	skipnz
  6888  0B10  0AF4               	incf	___awdiv@divisor+1,f
  6889  0B11  01C8               	clrf	___awdiv@sign
  6890  0B12  0AC8               	incf	___awdiv@sign,f
  6891  0B13                     l2869:	
  6892  0B13  1FF6               	btfss	___awdiv@dividend+1,7
  6893  0B14  2B1E               	goto	l2875
  6894  0B15  09F5               	comf	___awdiv@dividend,f
  6895  0B16  09F6               	comf	___awdiv@dividend+1,f
  6896  0B17  0AF5               	incf	___awdiv@dividend,f
  6897  0B18  1903               	skipnz
  6898  0B19  0AF6               	incf	___awdiv@dividend+1,f
  6899  0B1A  3001               	movlw	1
  6900  0B1B  00F7               	movwf	??___awdiv
  6901  0B1C  0877               	movf	??___awdiv,w
  6902  0B1D  06C8               	xorwf	___awdiv@sign,f
  6903  0B1E                     l2875:	
  6904  0B1E  01C9               	clrf	___awdiv@quotient
  6905  0B1F  01CA               	clrf	___awdiv@quotient+1
  6906  0B20  0873               	movf	___awdiv@divisor,w
  6907  0B21  0474               	iorwf	___awdiv@divisor+1,w
  6908  0B22  1903               	btfsc	3,2
  6909  0B23  2B55               	goto	l2897
  6910  0B24  01C7               	clrf	___awdiv@counter
  6911  0B25  0AC7               	incf	___awdiv@counter,f
  6912  0B26                     l2885:	
  6913  0B26  1BF4               	btfsc	___awdiv@divisor+1,7
  6914  0B27  2B34               	goto	l2887
  6915  0B28  3001               	movlw	1
  6916  0B29                     u2495:	
  6917  0B29  1003               	clrc
  6918  0B2A  0DF3               	rlf	___awdiv@divisor,f
  6919  0B2B  0DF4               	rlf	___awdiv@divisor+1,f
  6920  0B2C  3EFF               	addlw	-1
  6921  0B2D  1D03               	skipz
  6922  0B2E  2B29               	goto	u2495
  6923  0B2F  3001               	movlw	1
  6924  0B30  00F7               	movwf	??___awdiv
  6925  0B31  0877               	movf	??___awdiv,w
  6926  0B32  07C7               	addwf	___awdiv@counter,f
  6927  0B33  2B26               	goto	l2885
  6928  0B34                     l2887:	
  6929  0B34  3001               	movlw	1
  6930  0B35                     u2515:	
  6931  0B35  1003               	clrc
  6932  0B36  0DC9               	rlf	___awdiv@quotient,f
  6933  0B37  0DCA               	rlf	___awdiv@quotient+1,f
  6934  0B38  3EFF               	addlw	-1
  6935  0B39  1D03               	skipz
  6936  0B3A  2B35               	goto	u2515
  6937  0B3B  0874               	movf	___awdiv@divisor+1,w
  6938  0B3C  0276               	subwf	___awdiv@dividend+1,w
  6939  0B3D  1D03               	skipz
  6940  0B3E  2B41               	goto	u2525
  6941  0B3F  0873               	movf	___awdiv@divisor,w
  6942  0B40  0275               	subwf	___awdiv@dividend,w
  6943  0B41                     u2525:	
  6944  0B41  1C03               	skipc
  6945  0B42  2B4A               	goto	l2893
  6946  0B43  0873               	movf	___awdiv@divisor,w
  6947  0B44  02F5               	subwf	___awdiv@dividend,f
  6948  0B45  0874               	movf	___awdiv@divisor+1,w
  6949  0B46  1C03               	skipc
  6950  0B47  03F6               	decf	___awdiv@dividend+1,f
  6951  0B48  02F6               	subwf	___awdiv@dividend+1,f
  6952  0B49  1449               	bsf	___awdiv@quotient,0
  6953  0B4A                     l2893:	
  6954  0B4A  3001               	movlw	1
  6955  0B4B                     u2535:	
  6956  0B4B  1003               	clrc
  6957  0B4C  0CF4               	rrf	___awdiv@divisor+1,f
  6958  0B4D  0CF3               	rrf	___awdiv@divisor,f
  6959  0B4E  3EFF               	addlw	-1
  6960  0B4F  1D03               	skipz
  6961  0B50  2B4B               	goto	u2535
  6962  0B51  3001               	movlw	1
  6963  0B52  02C7               	subwf	___awdiv@counter,f
  6964  0B53  1D03               	btfss	3,2
  6965  0B54  2B34               	goto	l2887
  6966  0B55                     l2897:	
  6967  0B55  0848               	movf	___awdiv@sign,w
  6968  0B56  1903               	btfsc	3,2
  6969  0B57  2B5D               	goto	l2901
  6970  0B58  09C9               	comf	___awdiv@quotient,f
  6971  0B59  09CA               	comf	___awdiv@quotient+1,f
  6972  0B5A  0AC9               	incf	___awdiv@quotient,f
  6973  0B5B  1903               	skipnz
  6974  0B5C  0ACA               	incf	___awdiv@quotient+1,f
  6975  0B5D                     l2901:	
  6976  0B5D  084A               	movf	___awdiv@quotient+1,w
  6977  0B5E  00F4               	movwf	?___awdiv+1
  6978  0B5F  0849               	movf	___awdiv@quotient,w
  6979  0B60  00F3               	movwf	?___awdiv
  6980  0B61  0008               	return
  6981  0B62                     __end_of___awdiv:	
  6982                           
  6983                           	psect	text32
  6984  16C0                     __ptext32:	
  6985 ;; *************** function _UART_Write *****************
  6986 ;; Defined at:
  6987 ;;		line 54 in file "./UART.h"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;  data            1    wreg     unsigned char 
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;  data            1    3[COMMON] unsigned char 
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  1    wreg      void 
  6994 ;; Registers used:
  6995 ;;		wreg
  6996 ;; Tracked objects:
  6997 ;;		On entry : 0/0
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7001 ;;      Params:         0       0       0       0       0
  7002 ;;      Locals:         1       0       0       0       0
  7003 ;;      Temps:          0       0       0       0       0
  7004 ;;      Totals:         1       0       0       0       0
  7005 ;;Total ram usage:        1 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    1
  7008 ;; This function calls:
  7009 ;;		Nothing
  7010 ;; This function is called by:
  7011 ;;		_main
  7012 ;;		_UART_Write_Text
  7013 ;; This function uses a non-reentrant model
  7014 ;;
  7015                           
  7016                           
  7017                           ;psect for function _UART_Write
  7018  16C0                     _UART_Write:	
  7019                           
  7020                           ;incstack = 0
  7021                           ; Regs used in _UART_Write: [wreg]
  7022                           ;UART_Write@data stored from wreg
  7023  16C0  00F3               	movwf	UART_Write@data
  7024  16C1                     l238:	
  7025                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(!TRMT);
  7026                           
  7027  16C1  1683               	bsf	3,5	;RP0=1, select bank1
  7028  16C2  1303               	bcf	3,6	;RP1=0, select bank1
  7029  16C3  1C98               	btfss	24,1	;volatile
  7030  16C4  2EC1               	goto	l238
  7031                           
  7032                           ;./UART.h: 57:   TXREG = data;
  7033  16C5  0873               	movf	UART_Write@data,w
  7034  16C6  1283               	bcf	3,5	;RP0=0, select bank0
  7035  16C7  1303               	bcf	3,6	;RP1=0, select bank0
  7036  16C8  0099               	movwf	25	;volatile
  7037  16C9  0008               	return
  7038  16CA                     __end_of_UART_Write:	
  7039                           
  7040                           	psect	text33
  7041  168C                     __ptext33:	
  7042 ;; *************** function _UART_TX_Empty *****************
  7043 ;; Defined at:
  7044 ;;		line 31 in file "./UART.h"
  7045 ;; Parameters:    Size  Location     Type
  7046 ;;		None
  7047 ;; Auto vars:     Size  Location     Type
  7048 ;;		None
  7049 ;; Return value:  Size  Location     Type
  7050 ;;                  1    wreg      unsigned char 
  7051 ;; Registers used:
  7052 ;;		wreg
  7053 ;; Tracked objects:
  7054 ;;		On entry : 0/0
  7055 ;;		On exit  : 0/0
  7056 ;;		Unchanged: 0/0
  7057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7058 ;;      Params:         0       0       0       0       0
  7059 ;;      Locals:         0       0       0       0       0
  7060 ;;      Temps:          0       0       0       0       0
  7061 ;;      Totals:         0       0       0       0       0
  7062 ;;Total ram usage:        0 bytes
  7063 ;; Hardware stack levels used:    1
  7064 ;; Hardware stack levels required when called:    1
  7065 ;; This function calls:
  7066 ;;		Nothing
  7067 ;; This function is called by:
  7068 ;;		_main
  7069 ;; This function uses a non-reentrant model
  7070 ;;
  7071                           
  7072                           
  7073                           ;psect for function _UART_TX_Empty
  7074  168C                     _UART_TX_Empty:	
  7075                           
  7076                           ;./UART.h: 33:   return TRMT;
  7077                           
  7078                           ;incstack = 0
  7079                           ; Regs used in _UART_TX_Empty: [wreg]
  7080  168C  3000               	movlw	0
  7081  168D  1683               	bsf	3,5	;RP0=1, select bank1
  7082  168E  1303               	bcf	3,6	;RP1=0, select bank1
  7083  168F  1898               	btfsc	24,1	;volatile
  7084  1690  3001               	movlw	1
  7085  1691  0008               	return
  7086  1692                     __end_of_UART_TX_Empty:	
  7087                           
  7088                           	psect	text34
  7089  09DB                     __ptext34:	
  7090 ;; *************** function _Lcd_Write_String *****************
  7091 ;; Defined at:
  7092 ;;		line 100 in file "./LCD4bits.h"
  7093 ;; Parameters:    Size  Location     Type
  7094 ;;  a               2    0[BANK0 ] PTR unsigned char 
  7095 ;;		 -> NULL(0), STR_29(13), STR_28(6), STR_27(13), 
  7096 ;;		 -> STR_26(12), STR_25(10), STR_24(6), STR_23(7), 
  7097 ;;		 -> STR_22(7), STR_21(7), STR_20(8), STR_19(8), 
  7098 ;;		 -> STR_18(9), STR_17(9), STR_16(9), STR_15(9), 
  7099 ;;		 -> STR_14(12), STR_13(12), STR_9(10), STR_8(10), 
  7100 ;;		 -> STR_7(10), STR_6(10), STR_5(10), STR_4(10), 
  7101 ;;		 -> STR_3(10), STR_2(10), time(6), temp(6), 
  7102 ;;		 -> STR_1(31), 
  7103 ;; Auto vars:     Size  Location     Type
  7104 ;;  i               2    5[BANK0 ] int 
  7105 ;; Return value:  Size  Location     Type
  7106 ;;                  1    wreg      void 
  7107 ;; Registers used:
  7108 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7109 ;; Tracked objects:
  7110 ;;		On entry : 0/0
  7111 ;;		On exit  : 0/0
  7112 ;;		Unchanged: 0/0
  7113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7114 ;;      Params:         0       2       0       0       0
  7115 ;;      Locals:         0       2       0       0       0
  7116 ;;      Temps:          0       3       0       0       0
  7117 ;;      Totals:         0       7       0       0       0
  7118 ;;Total ram usage:        7 bytes
  7119 ;; Hardware stack levels used:    1
  7120 ;; Hardware stack levels required when called:    3
  7121 ;; This function calls:
  7122 ;;		_Lcd_Write_Char
  7123 ;; This function is called by:
  7124 ;;		_main
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           
  7129                           ;psect for function _Lcd_Write_String
  7130  09DB                     _Lcd_Write_String:	
  7131                           
  7132                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  7133                           
  7134                           ;incstack = 0
  7135                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7136  09DB  1283               	bcf	3,5	;RP0=0, select bank0
  7137  09DC  1303               	bcf	3,6	;RP1=0, select bank0
  7138  09DD  01CC               	clrf	Lcd_Write_String@i
  7139  09DE  01CD               	clrf	Lcd_Write_String@i+1
  7140  09DF                     l3767:	
  7141  09DF  084C               	movf	Lcd_Write_String@i,w
  7142  09E0  0747               	addwf	Lcd_Write_String@a,w
  7143  09E1  00CA               	movwf	??_Lcd_Write_String+1
  7144  09E2  0848               	movf	Lcd_Write_String@a+1,w
  7145  09E3  00C9               	movwf	??_Lcd_Write_String
  7146  09E4  1803               	skipnc
  7147  09E5  0AC9               	incf	??_Lcd_Write_String,f
  7148  09E6  1BCC               	btfsc	Lcd_Write_String@i,7
  7149  09E7  03C9               	decf	??_Lcd_Write_String,f
  7150  09E8  1283               	bcf	3,5	;RP0=0, select bank0
  7151  09E9  1303               	bcf	3,6	;RP1=0, select bank0
  7152  09EA  0849               	movf	??_Lcd_Write_String,w
  7153  09EB  00CB               	movwf	??_Lcd_Write_String+2
  7154  09EC  084B               	movf	??_Lcd_Write_String+2,w
  7155  09ED  00FF               	movwf	127
  7156  09EE  084A               	movf	??_Lcd_Write_String+1,w
  7157  09EF  0084               	movwf	4
  7158  09F0  120A  118A  2700  120A  158A  	fcall	stringtab
  7159  09F5  3A00               	xorlw	0
  7160  09F6  1903               	btfsc	3,2
  7161  09F7  0008               	return
  7162                           
  7163                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  7164  09F8  084C               	movf	Lcd_Write_String@i,w
  7165  09F9  0747               	addwf	Lcd_Write_String@a,w
  7166  09FA  00CA               	movwf	??_Lcd_Write_String+1
  7167  09FB  0848               	movf	Lcd_Write_String@a+1,w
  7168  09FC  00C9               	movwf	??_Lcd_Write_String
  7169  09FD  1803               	skipnc
  7170  09FE  0AC9               	incf	??_Lcd_Write_String,f
  7171  09FF  1BCC               	btfsc	Lcd_Write_String@i,7
  7172  0A00  03C9               	decf	??_Lcd_Write_String,f
  7173  0A01  1283               	bcf	3,5	;RP0=0, select bank0
  7174  0A02  1303               	bcf	3,6	;RP1=0, select bank0
  7175  0A03  0849               	movf	??_Lcd_Write_String,w
  7176  0A04  00CB               	movwf	??_Lcd_Write_String+2
  7177  0A05  084B               	movf	??_Lcd_Write_String+2,w
  7178  0A06  00FF               	movwf	127
  7179  0A07  084A               	movf	??_Lcd_Write_String+1,w
  7180  0A08  0084               	movwf	4
  7181  0A09  120A  118A  2700  120A  158A  	fcall	stringtab
  7182  0A0E  120A  158A  212A  120A  158A  	fcall	_Lcd_Write_Char
  7183  0A13  3001               	movlw	1
  7184  0A14  1283               	bcf	3,5	;RP0=0, select bank0
  7185  0A15  1303               	bcf	3,6	;RP1=0, select bank0
  7186  0A16  07CC               	addwf	Lcd_Write_String@i,f
  7187  0A17  1803               	skipnc
  7188  0A18  0ACD               	incf	Lcd_Write_String@i+1,f
  7189  0A19  3000               	movlw	0
  7190  0A1A  07CD               	addwf	Lcd_Write_String@i+1,f
  7191  0A1B  29DF               	goto	l3767
  7192  0A1C                     __end_of_Lcd_Write_String:	
  7193                           
  7194                           	psect	text35
  7195  092A                     __ptext35:	
  7196 ;; *************** function _Lcd_Write_Char *****************
  7197 ;; Defined at:
  7198 ;;		line 84 in file "./LCD4bits.h"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  a               1    wreg     unsigned char 
  7201 ;; Auto vars:     Size  Location     Type
  7202 ;;  a               1    7[COMMON] unsigned char 
  7203 ;;  y               1    6[COMMON] unsigned char 
  7204 ;;  temp            1    5[COMMON] unsigned char 
  7205 ;; Return value:  Size  Location     Type
  7206 ;;                  1    wreg      void 
  7207 ;; Registers used:
  7208 ;;		wreg, status,2, status,0, pclath, cstack
  7209 ;; Tracked objects:
  7210 ;;		On entry : 0/0
  7211 ;;		On exit  : 0/0
  7212 ;;		Unchanged: 0/0
  7213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7214 ;;      Params:         0       0       0       0       0
  7215 ;;      Locals:         3       0       0       0       0
  7216 ;;      Temps:          1       0       0       0       0
  7217 ;;      Totals:         4       0       0       0       0
  7218 ;;Total ram usage:        4 bytes
  7219 ;; Hardware stack levels used:    1
  7220 ;; Hardware stack levels required when called:    2
  7221 ;; This function calls:
  7222 ;;		_Lcd_Port
  7223 ;; This function is called by:
  7224 ;;		_Lcd_Write_String
  7225 ;;		_main
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           
  7230                           ;psect for function _Lcd_Write_Char
  7231  092A                     _Lcd_Write_Char:	
  7232                           
  7233                           ;incstack = 0
  7234                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  7235                           ;Lcd_Write_Char@a stored from wreg
  7236  092A  00F7               	movwf	Lcd_Write_Char@a
  7237                           
  7238                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  7239  092B  0877               	movf	Lcd_Write_Char@a,w
  7240  092C  390F               	andlw	15
  7241  092D  00F4               	movwf	??_Lcd_Write_Char
  7242  092E  0874               	movf	??_Lcd_Write_Char,w
  7243  092F  00F5               	movwf	Lcd_Write_Char@temp
  7244                           
  7245                           ;./LCD4bits.h: 88:    y = a&0xF0;
  7246  0930  0877               	movf	Lcd_Write_Char@a,w
  7247  0931  39F0               	andlw	240
  7248  0932  00F4               	movwf	??_Lcd_Write_Char
  7249  0933  0874               	movf	??_Lcd_Write_Char,w
  7250  0934  00F6               	movwf	Lcd_Write_Char@y
  7251                           
  7252                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  7253  0935  1283               	bcf	3,5	;RP0=0, select bank0
  7254  0936  1303               	bcf	3,6	;RP1=0, select bank0
  7255  0937  1606               	bsf	6,4	;volatile
  7256                           
  7257                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  7258  0938  0876               	movf	Lcd_Write_Char@y,w
  7259  0939  00F4               	movwf	??_Lcd_Write_Char
  7260  093A  3004               	movlw	4
  7261  093B                     u2125:	
  7262  093B  1003               	clrc
  7263  093C  0CF4               	rrf	??_Lcd_Write_Char,f
  7264  093D  3EFF               	addlw	-1
  7265  093E  1D03               	skipz
  7266  093F  293B               	goto	u2125
  7267  0940  0874               	movf	??_Lcd_Write_Char,w
  7268  0941  160A  118A  26EB  120A  158A  	fcall	_Lcd_Port
  7269                           
  7270                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  7271  0946  1283               	bcf	3,5	;RP0=0, select bank0
  7272  0947  1303               	bcf	3,6	;RP1=0, select bank0
  7273  0948  1686               	bsf	6,5	;volatile
  7274                           
  7275                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  7276  0949  301A               	movlw	26
  7277  094A  00F4               	movwf	??_Lcd_Write_Char
  7278  094B                     u5047:	
  7279  094B  0BF4               	decfsz	??_Lcd_Write_Char,f
  7280  094C  294B               	goto	u5047
  7281  094D  0000               	nop
  7282                           
  7283                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  7284  094E  1283               	bcf	3,5	;RP0=0, select bank0
  7285  094F  1303               	bcf	3,6	;RP1=0, select bank0
  7286  0950  1286               	bcf	6,5	;volatile
  7287                           
  7288                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  7289  0951  0875               	movf	Lcd_Write_Char@temp,w
  7290  0952  160A  118A  26EB  120A  158A  	fcall	_Lcd_Port
  7291                           
  7292                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  7293  0957  1283               	bcf	3,5	;RP0=0, select bank0
  7294  0958  1303               	bcf	3,6	;RP1=0, select bank0
  7295  0959  1686               	bsf	6,5	;volatile
  7296                           
  7297                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  7298  095A  301A               	movlw	26
  7299  095B  00F4               	movwf	??_Lcd_Write_Char
  7300  095C                     u5057:	
  7301  095C  0BF4               	decfsz	??_Lcd_Write_Char,f
  7302  095D  295C               	goto	u5057
  7303  095E  0000               	nop
  7304                           
  7305                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  7306  095F  1283               	bcf	3,5	;RP0=0, select bank0
  7307  0960  1303               	bcf	3,6	;RP1=0, select bank0
  7308  0961  1286               	bcf	6,5	;volatile
  7309  0962  0008               	return
  7310  0963                     __end_of_Lcd_Write_Char:	
  7311                           
  7312                           	psect	text36
  7313  16E0                     __ptext36:	
  7314 ;; *************** function _Lcd_Shift_Right *****************
  7315 ;; Defined at:
  7316 ;;		line 107 in file "./LCD4bits.h"
  7317 ;; Parameters:    Size  Location     Type
  7318 ;;		None
  7319 ;; Auto vars:     Size  Location     Type
  7320 ;;		None
  7321 ;; Return value:  Size  Location     Type
  7322 ;;                  1    wreg      void 
  7323 ;; Registers used:
  7324 ;;		wreg, status,2, status,0, pclath, cstack
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : 0/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7330 ;;      Params:         0       0       0       0       0
  7331 ;;      Locals:         0       0       0       0       0
  7332 ;;      Temps:          0       0       0       0       0
  7333 ;;      Totals:         0       0       0       0       0
  7334 ;;Total ram usage:        0 bytes
  7335 ;; Hardware stack levels used:    1
  7336 ;; Hardware stack levels required when called:    3
  7337 ;; This function calls:
  7338 ;;		_Lcd_Cmd
  7339 ;; This function is called by:
  7340 ;;		_main
  7341 ;; This function uses a non-reentrant model
  7342 ;;
  7343                           
  7344                           
  7345                           ;psect for function _Lcd_Shift_Right
  7346  16E0                     _Lcd_Shift_Right:	
  7347                           
  7348                           ;./LCD4bits.h: 109:  Lcd_Cmd(0x01);
  7349                           
  7350                           ;incstack = 0
  7351                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
  7352  16E0  3001               	movlw	1
  7353  16E1  160A  118A  2705  160A  118A  	fcall	_Lcd_Cmd
  7354                           
  7355                           ;./LCD4bits.h: 110:  Lcd_Cmd(0x0C);
  7356  16E6  300C               	movlw	12
  7357  16E7  160A  118A  2705   	fcall	_Lcd_Cmd
  7358  16EA  0008               	return
  7359  16EB                     __end_of_Lcd_Shift_Right:	
  7360                           
  7361                           	psect	text37
  7362  16D5                     __ptext37:	
  7363 ;; *************** function _Lcd_Shift_Left *****************
  7364 ;; Defined at:
  7365 ;;		line 113 in file "./LCD4bits.h"
  7366 ;; Parameters:    Size  Location     Type
  7367 ;;		None
  7368 ;; Auto vars:     Size  Location     Type
  7369 ;;		None
  7370 ;; Return value:  Size  Location     Type
  7371 ;;                  1    wreg      void 
  7372 ;; Registers used:
  7373 ;;		wreg, status,2, status,0, pclath, cstack
  7374 ;; Tracked objects:
  7375 ;;		On entry : 0/0
  7376 ;;		On exit  : 0/0
  7377 ;;		Unchanged: 0/0
  7378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7379 ;;      Params:         0       0       0       0       0
  7380 ;;      Locals:         0       0       0       0       0
  7381 ;;      Temps:          0       0       0       0       0
  7382 ;;      Totals:         0       0       0       0       0
  7383 ;;Total ram usage:        0 bytes
  7384 ;; Hardware stack levels used:    1
  7385 ;; Hardware stack levels required when called:    3
  7386 ;; This function calls:
  7387 ;;		_Lcd_Cmd
  7388 ;; This function is called by:
  7389 ;;		_main
  7390 ;; This function uses a non-reentrant model
  7391 ;;
  7392                           
  7393                           
  7394                           ;psect for function _Lcd_Shift_Left
  7395  16D5                     _Lcd_Shift_Left:	
  7396                           
  7397                           ;./LCD4bits.h: 115:  Lcd_Cmd(0x01);
  7398                           
  7399                           ;incstack = 0
  7400                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  7401  16D5  3001               	movlw	1
  7402  16D6  160A  118A  2705  160A  118A  	fcall	_Lcd_Cmd
  7403                           
  7404                           ;./LCD4bits.h: 116:  Lcd_Cmd(0x08);
  7405  16DB  3008               	movlw	8
  7406  16DC  160A  118A  2705   	fcall	_Lcd_Cmd
  7407  16DF  0008               	return
  7408  16E0                     __end_of_Lcd_Shift_Left:	
  7409                           
  7410                           	psect	text38
  7411  0A62                     __ptext38:	
  7412 ;; *************** function _Lcd_Set_Cursor *****************
  7413 ;; Defined at:
  7414 ;;		line 44 in file "./LCD4bits.h"
  7415 ;; Parameters:    Size  Location     Type
  7416 ;;  a               1    wreg     unsigned char 
  7417 ;;  b               1    7[COMMON] unsigned char 
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;  a               1    2[BANK0 ] unsigned char 
  7420 ;;  temp            1    5[BANK0 ] unsigned char 
  7421 ;;  y               1    4[BANK0 ] unsigned char 
  7422 ;;  z               1    3[BANK0 ] unsigned char 
  7423 ;; Return value:  Size  Location     Type
  7424 ;;                  1    wreg      void 
  7425 ;; Registers used:
  7426 ;;		wreg, status,2, status,0, pclath, cstack
  7427 ;; Tracked objects:
  7428 ;;		On entry : 0/0
  7429 ;;		On exit  : 0/0
  7430 ;;		Unchanged: 0/0
  7431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7432 ;;      Params:         1       0       0       0       0
  7433 ;;      Locals:         0       4       0       0       0
  7434 ;;      Temps:          0       2       0       0       0
  7435 ;;      Totals:         1       6       0       0       0
  7436 ;;Total ram usage:        7 bytes
  7437 ;; Hardware stack levels used:    1
  7438 ;; Hardware stack levels required when called:    3
  7439 ;; This function calls:
  7440 ;;		_Lcd_Cmd
  7441 ;; This function is called by:
  7442 ;;		_main
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           
  7447                           ;psect for function _Lcd_Set_Cursor
  7448  0A62                     _Lcd_Set_Cursor:	
  7449                           
  7450                           ;incstack = 0
  7451                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  7452                           ;Lcd_Set_Cursor@a stored from wreg
  7453  0A62  1283               	bcf	3,5	;RP0=0, select bank0
  7454  0A63  1303               	bcf	3,6	;RP1=0, select bank0
  7455  0A64  00C9               	movwf	Lcd_Set_Cursor@a
  7456                           
  7457                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  7458  0A65  0349               	decf	Lcd_Set_Cursor@a,w
  7459  0A66  1D03               	btfss	3,2
  7460  0A67  2A8B               	goto	l3751
  7461                           
  7462                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  7463  0A68  0877               	movf	Lcd_Set_Cursor@b,w
  7464  0A69  3E7F               	addlw	127
  7465  0A6A  00C7               	movwf	??_Lcd_Set_Cursor
  7466  0A6B  0847               	movf	??_Lcd_Set_Cursor,w
  7467  0A6C  00CC               	movwf	Lcd_Set_Cursor@temp
  7468                           
  7469                           ;./LCD4bits.h: 50:   z = temp>>4;
  7470  0A6D  084C               	movf	Lcd_Set_Cursor@temp,w
  7471  0A6E  00C7               	movwf	??_Lcd_Set_Cursor
  7472  0A6F  3004               	movlw	4
  7473  0A70                     u3895:	
  7474  0A70  1003               	clrc
  7475  0A71  0CC7               	rrf	??_Lcd_Set_Cursor,f
  7476  0A72  3EFF               	addlw	-1
  7477  0A73  1D03               	skipz
  7478  0A74  2A70               	goto	u3895
  7479  0A75  0847               	movf	??_Lcd_Set_Cursor,w
  7480  0A76  00C8               	movwf	??_Lcd_Set_Cursor+1
  7481  0A77  0848               	movf	??_Lcd_Set_Cursor+1,w
  7482  0A78  00CA               	movwf	Lcd_Set_Cursor@z
  7483                           
  7484                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  7485  0A79  084C               	movf	Lcd_Set_Cursor@temp,w
  7486  0A7A  390F               	andlw	15
  7487  0A7B  00C7               	movwf	??_Lcd_Set_Cursor
  7488  0A7C  0847               	movf	??_Lcd_Set_Cursor,w
  7489  0A7D  00CB               	movwf	Lcd_Set_Cursor@y
  7490                           
  7491                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  7492  0A7E  084A               	movf	Lcd_Set_Cursor@z,w
  7493  0A7F  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  7494                           
  7495                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  7496  0A84  1283               	bcf	3,5	;RP0=0, select bank0
  7497  0A85  1303               	bcf	3,6	;RP1=0, select bank0
  7498  0A86  084B               	movf	Lcd_Set_Cursor@y,w
  7499  0A87  160A  118A  2705   	fcall	_Lcd_Cmd
  7500                           
  7501                           ;./LCD4bits.h: 54:  }
  7502  0A8A  0008               	return
  7503  0A8B                     l3751:	
  7504  0A8B  3002               	movlw	2
  7505  0A8C  0649               	xorwf	Lcd_Set_Cursor@a,w
  7506  0A8D  1D03               	btfss	3,2
  7507  0A8E  0008               	return
  7508                           
  7509                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  7510  0A8F  0877               	movf	Lcd_Set_Cursor@b,w
  7511  0A90  3EBF               	addlw	191
  7512  0A91  00C7               	movwf	??_Lcd_Set_Cursor
  7513  0A92  0847               	movf	??_Lcd_Set_Cursor,w
  7514  0A93  00CC               	movwf	Lcd_Set_Cursor@temp
  7515                           
  7516                           ;./LCD4bits.h: 58:   z = temp>>4;
  7517  0A94  084C               	movf	Lcd_Set_Cursor@temp,w
  7518  0A95  00C7               	movwf	??_Lcd_Set_Cursor
  7519  0A96  3004               	movlw	4
  7520  0A97                     u3915:	
  7521  0A97  1003               	clrc
  7522  0A98  0CC7               	rrf	??_Lcd_Set_Cursor,f
  7523  0A99  3EFF               	addlw	-1
  7524  0A9A  1D03               	skipz
  7525  0A9B  2A97               	goto	u3915
  7526  0A9C  0847               	movf	??_Lcd_Set_Cursor,w
  7527  0A9D  00C8               	movwf	??_Lcd_Set_Cursor+1
  7528  0A9E  0848               	movf	??_Lcd_Set_Cursor+1,w
  7529  0A9F  00CA               	movwf	Lcd_Set_Cursor@z
  7530                           
  7531                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  7532  0AA0  084C               	movf	Lcd_Set_Cursor@temp,w
  7533  0AA1  390F               	andlw	15
  7534  0AA2  00C7               	movwf	??_Lcd_Set_Cursor
  7535  0AA3  0847               	movf	??_Lcd_Set_Cursor,w
  7536  0AA4  00CB               	movwf	Lcd_Set_Cursor@y
  7537                           
  7538                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  7539  0AA5  084A               	movf	Lcd_Set_Cursor@z,w
  7540  0AA6  160A  118A  2705  120A  158A  	fcall	_Lcd_Cmd
  7541                           
  7542                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  7543  0AAB  1283               	bcf	3,5	;RP0=0, select bank0
  7544  0AAC  1303               	bcf	3,6	;RP1=0, select bank0
  7545  0AAD  084B               	movf	Lcd_Set_Cursor@y,w
  7546  0AAE  160A  118A  2705   	fcall	_Lcd_Cmd
  7547  0AB1  0008               	return
  7548  0AB2                     __end_of_Lcd_Set_Cursor:	
  7549                           
  7550                           	psect	text39
  7551  16CA                     __ptext39:	
  7552 ;; *************** function _Lcd_Clear *****************
  7553 ;; Defined at:
  7554 ;;		line 38 in file "./LCD4bits.h"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;		None
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;		None
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  1    wreg      void 
  7561 ;; Registers used:
  7562 ;;		wreg, status,2, status,0, pclath, cstack
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7568 ;;      Params:         0       0       0       0       0
  7569 ;;      Locals:         0       0       0       0       0
  7570 ;;      Temps:          0       0       0       0       0
  7571 ;;      Totals:         0       0       0       0       0
  7572 ;;Total ram usage:        0 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    3
  7575 ;; This function calls:
  7576 ;;		_Lcd_Cmd
  7577 ;; This function is called by:
  7578 ;;		_main
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           
  7583                           ;psect for function _Lcd_Clear
  7584  16CA                     _Lcd_Clear:	
  7585                           
  7586                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  7587                           
  7588                           ;incstack = 0
  7589                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  7590  16CA  3000               	movlw	0
  7591  16CB  160A  118A  2705  160A  118A  	fcall	_Lcd_Cmd
  7592                           
  7593                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  7594  16D0  3001               	movlw	1
  7595  16D1  160A  118A  2705   	fcall	_Lcd_Cmd
  7596  16D4  0008               	return
  7597  16D5                     __end_of_Lcd_Clear:	
  7598                           
  7599                           	psect	text40
  7600  1705                     __ptext40:	
  7601 ;; *************** function _Lcd_Cmd *****************
  7602 ;; Defined at:
  7603 ;;		line 29 in file "./LCD4bits.h"
  7604 ;; Parameters:    Size  Location     Type
  7605 ;;  a               1    wreg     unsigned char 
  7606 ;; Auto vars:     Size  Location     Type
  7607 ;;  a               1    6[COMMON] unsigned char 
  7608 ;; Return value:  Size  Location     Type
  7609 ;;                  1    wreg      void 
  7610 ;; Registers used:
  7611 ;;		wreg, status,2, status,0, pclath, cstack
  7612 ;; Tracked objects:
  7613 ;;		On entry : 0/0
  7614 ;;		On exit  : 0/0
  7615 ;;		Unchanged: 0/0
  7616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7617 ;;      Params:         0       0       0       0       0
  7618 ;;      Locals:         1       0       0       0       0
  7619 ;;      Temps:          2       0       0       0       0
  7620 ;;      Totals:         3       0       0       0       0
  7621 ;;Total ram usage:        3 bytes
  7622 ;; Hardware stack levels used:    1
  7623 ;; Hardware stack levels required when called:    2
  7624 ;; This function calls:
  7625 ;;		_Lcd_Port
  7626 ;; This function is called by:
  7627 ;;		_Lcd_Clear
  7628 ;;		_Lcd_Set_Cursor
  7629 ;;		_Lcd_Init
  7630 ;;		_Lcd_Shift_Right
  7631 ;;		_Lcd_Shift_Left
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           
  7636                           ;psect for function _Lcd_Cmd
  7637  1705                     _Lcd_Cmd:	
  7638                           
  7639                           ;incstack = 0
  7640                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  7641                           ;Lcd_Cmd@a stored from wreg
  7642  1705  00F6               	movwf	Lcd_Cmd@a
  7643                           
  7644                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  7645  1706  1283               	bcf	3,5	;RP0=0, select bank0
  7646  1707  1303               	bcf	3,6	;RP1=0, select bank0
  7647  1708  1206               	bcf	6,4	;volatile
  7648                           
  7649                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  7650  1709  0876               	movf	Lcd_Cmd@a,w
  7651  170A  160A  118A  26EB  160A  118A  	fcall	_Lcd_Port
  7652                           
  7653                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  7654  170F  1283               	bcf	3,5	;RP0=0, select bank0
  7655  1710  1303               	bcf	3,6	;RP1=0, select bank0
  7656  1711  1686               	bsf	6,5	;volatile
  7657                           
  7658                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  7659  1712  300B               	movlw	11
  7660  1713  00F5               	movwf	??_Lcd_Cmd+1
  7661  1714  3062               	movlw	98
  7662  1715  00F4               	movwf	??_Lcd_Cmd
  7663  1716                     u5067:	
  7664  1716  0BF4               	decfsz	??_Lcd_Cmd,f
  7665  1717  2F16               	goto	u5067
  7666  1718  0BF5               	decfsz	??_Lcd_Cmd+1,f
  7667  1719  2F16               	goto	u5067
  7668  171A  0000               	nop
  7669                           
  7670                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  7671  171B  1283               	bcf	3,5	;RP0=0, select bank0
  7672  171C  1303               	bcf	3,6	;RP1=0, select bank0
  7673  171D  1286               	bcf	6,5	;volatile
  7674  171E  0008               	return
  7675  171F                     __end_of_Lcd_Cmd:	
  7676                           
  7677                           	psect	text41
  7678  16EB                     __ptext41:	
  7679 ;; *************** function _Lcd_Port *****************
  7680 ;; Defined at:
  7681 ;;		line 7 in file "./LCD4bits.h"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;  a               1    wreg     unsigned char 
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;  a               1    3[COMMON] unsigned char 
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  1    wreg      void 
  7688 ;; Registers used:
  7689 ;;		wreg
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7695 ;;      Params:         0       0       0       0       0
  7696 ;;      Locals:         1       0       0       0       0
  7697 ;;      Temps:          0       0       0       0       0
  7698 ;;      Totals:         1       0       0       0       0
  7699 ;;Total ram usage:        1 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; Hardware stack levels required when called:    1
  7702 ;; This function calls:
  7703 ;;		Nothing
  7704 ;; This function is called by:
  7705 ;;		_Lcd_Cmd
  7706 ;;		_Lcd_Init
  7707 ;;		_Lcd_Write_Char
  7708 ;; This function uses a non-reentrant model
  7709 ;;
  7710                           
  7711                           
  7712                           ;psect for function _Lcd_Port
  7713  16EB                     _Lcd_Port:	
  7714                           
  7715                           ;incstack = 0
  7716                           ; Regs used in _Lcd_Port: [wreg]
  7717                           ;Lcd_Port@a stored from wreg
  7718  16EB  00F3               	movwf	Lcd_Port@a
  7719                           
  7720                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  7721  16EC  1C73               	btfss	Lcd_Port@a,0
  7722  16ED  2EF2               	goto	l160
  7723                           
  7724                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  7725  16EE  1283               	bcf	3,5	;RP0=0, select bank0
  7726  16EF  1303               	bcf	3,6	;RP1=0, select bank0
  7727  16F0  1406               	bsf	6,0	;volatile
  7728  16F1  2EF5               	goto	l161
  7729  16F2                     l160:	
  7730                           ;./LCD4bits.h: 11:  else
  7731                           
  7732                           
  7733                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  7734  16F2  1283               	bcf	3,5	;RP0=0, select bank0
  7735  16F3  1303               	bcf	3,6	;RP1=0, select bank0
  7736  16F4  1006               	bcf	6,0	;volatile
  7737  16F5                     l161:	
  7738                           
  7739                           ;./LCD4bits.h: 14:  if(a & 2)
  7740  16F5  1CF3               	btfss	Lcd_Port@a,1
  7741  16F6  2EF9               	goto	l162
  7742                           
  7743                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  7744  16F7  1486               	bsf	6,1	;volatile
  7745  16F8  2EFA               	goto	l163
  7746  16F9                     l162:	
  7747                           ;./LCD4bits.h: 16:  else
  7748                           
  7749                           
  7750                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  7751  16F9  1086               	bcf	6,1	;volatile
  7752  16FA                     l163:	
  7753                           
  7754                           ;./LCD4bits.h: 19:  if(a & 4)
  7755  16FA  1D73               	btfss	Lcd_Port@a,2
  7756  16FB  2EFE               	goto	l164
  7757                           
  7758                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  7759  16FC  1506               	bsf	6,2	;volatile
  7760  16FD  2EFF               	goto	l165
  7761  16FE                     l164:	
  7762                           ;./LCD4bits.h: 21:  else
  7763                           
  7764                           
  7765                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  7766  16FE  1106               	bcf	6,2	;volatile
  7767  16FF                     l165:	
  7768                           
  7769                           ;./LCD4bits.h: 24:  if(a & 8)
  7770  16FF  1DF3               	btfss	Lcd_Port@a,3
  7771  1700  2F03               	goto	l166
  7772                           
  7773                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  7774  1701  1586               	bsf	6,3	;volatile
  7775  1702  0008               	return
  7776  1703                     l166:	
  7777                           ;./LCD4bits.h: 26:  else
  7778                           
  7779                           
  7780                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  7781  1703  1186               	bcf	6,3	;volatile
  7782  1704  0008               	return
  7783  1705                     __end_of_Lcd_Port:	
  7784                           
  7785                           	psect	text42
  7786  1755                     __ptext42:	
  7787 ;; *************** function _manual_pwm *****************
  7788 ;; Defined at:
  7789 ;;		line 58 in file "mainMaster.c"
  7790 ;; Parameters:    Size  Location     Type
  7791 ;;		None
  7792 ;; Auto vars:     Size  Location     Type
  7793 ;;		None
  7794 ;; Return value:  Size  Location     Type
  7795 ;;                  1    wreg      void 
  7796 ;; Registers used:
  7797 ;;		wreg, status,2, status,0
  7798 ;; Tracked objects:
  7799 ;;		On entry : 0/0
  7800 ;;		On exit  : 0/0
  7801 ;;		Unchanged: 0/0
  7802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7803 ;;      Params:         0       0       0       0       0
  7804 ;;      Locals:         0       0       0       0       0
  7805 ;;      Temps:          3       0       0       0       0
  7806 ;;      Totals:         3       0       0       0       0
  7807 ;;Total ram usage:        3 bytes
  7808 ;; Hardware stack levels used:    1
  7809 ;; This function calls:
  7810 ;;		Nothing
  7811 ;; This function is called by:
  7812 ;;		Interrupt level 1
  7813 ;; This function uses a non-reentrant model
  7814 ;;
  7815                           
  7816                           
  7817                           ;psect for function _manual_pwm
  7818  1755                     _manual_pwm:	
  7819                           
  7820                           ;mainMaster.c: 59:     if (INTCONbits.T0IF == 1){
  7821  1755  1D0B               	btfss	11,2	;volatile
  7822  1756  2F6D               	goto	i1l313
  7823                           
  7824                           ;mainMaster.c: 61:         cont++;
  7825  1757  3001               	movlw	1
  7826  1758  00F0               	movwf	??_manual_pwm
  7827  1759  0870               	movf	??_manual_pwm,w
  7828  175A  1283               	bcf	3,5	;RP0=0, select bank0
  7829  175B  1303               	bcf	3,6	;RP1=0, select bank0
  7830  175C  07AD               	addwf	_cont,f
  7831                           
  7832                           ;mainMaster.c: 62:             if(cont < 200){
  7833  175D  30C8               	movlw	200
  7834  175E  022D               	subwf	_cont,w
  7835  175F  1803               	skipnc
  7836  1760  2F69               	goto	i1l2961
  7837                           
  7838                           ;mainMaster.c: 63:                 if(cont < val){
  7839  1761  082C               	movf	_val,w
  7840  1762  022D               	subwf	_cont,w
  7841  1763  1803               	skipnc
  7842  1764  2F67               	goto	i1l310
  7843                           
  7844                           ;mainMaster.c: 64:                     PORTAbits.RA1 = 1;
  7845  1765  1485               	bsf	5,1	;volatile
  7846                           
  7847                           ;mainMaster.c: 65:                 }else{
  7848  1766  2F6A               	goto	i1l2963
  7849  1767                     i1l310:	
  7850                           
  7851                           ;mainMaster.c: 66:                     PORTAbits.RA1 = 0;
  7852  1767  1085               	bcf	5,1	;volatile
  7853  1768  2F6A               	goto	i1l2963
  7854  1769                     i1l2961:	
  7855                           
  7856                           ;mainMaster.c: 69:                 cont = 0;
  7857  1769  01AD               	clrf	_cont
  7858  176A                     i1l2963:	
  7859                           
  7860                           ;mainMaster.c: 71:             TMR0 = 56;
  7861  176A  3038               	movlw	56
  7862  176B  0081               	movwf	1	;volatile
  7863                           
  7864                           ;mainMaster.c: 72:             INTCONbits.T0IF = 0;
  7865  176C  110B               	bcf	11,2	;volatile
  7866  176D                     i1l313:	
  7867  176D  0872               	movf	??_manual_pwm+2,w
  7868  176E  008A               	movwf	10
  7869  176F  0E71               	swapf	(??_manual_pwm+1)^(0+4294967168),w
  7870  1770  0083               	movwf	3
  7871  1771  0EFE               	swapf	126,f
  7872  1772  0E7E               	swapf	126,w
  7873  1773  0009               	retfie
  7874  1774                     __end_of_manual_pwm:	
  7875  007E                     btemp	set	126	;btemp
  7876  007E                     wtemp0	set	126
  7877                           
  7878                           	psect	intentry
  7879  0004                     __pintentry:	
  7880                           ;incstack = 0
  7881                           ; Regs used in _manual_pwm: [wreg+status,2+status,0]
  7882                           
  7883  0004                     interrupt_function:	
  7884  007E                     saved_w	set	btemp
  7885  0004  00FE               	movwf	btemp
  7886  0005  0E03               	swapf	3,w
  7887  0006  00F1               	movwf	??_manual_pwm+1
  7888  0007  080A               	movf	10,w
  7889  0008  00F2               	movwf	??_manual_pwm+2
  7890  0009  160A  118A  2F55   	ljmp	_manual_pwm


Data Sizes:
    Strings     271
    Constant    10
    Data        5
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     33      77
    BANK1            80      6       6
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_12(CODE[6]), STR_11(CODE[6]), STR_10(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), temp(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_32(CODE[4]), STR_31(CODE[5]), STR_30(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), temp(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_temp@temp_string	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_time@time_string	PTR unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), 

    day2	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), STR_9(CODE[10]), STR_8(CODE[10]), STR_7(CODE[10]), 
		 -> STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), 
		 -> STR_2(CODE[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), STR_29(CODE[13]), STR_28(CODE[6]), STR_27(CODE[13]), 
		 -> STR_26(CODE[12]), STR_25(CODE[10]), STR_24(CODE[6]), STR_23(CODE[7]), 
		 -> STR_22(CODE[7]), STR_21(CODE[7]), STR_20(CODE[8]), STR_19(CODE[8]), 
		 -> STR_18(CODE[9]), STR_17(CODE[9]), STR_16(CODE[9]), STR_15(CODE[9]), 
		 -> STR_14(CODE[12]), STR_13(CODE[12]), STR_9(CODE[10]), STR_8(CODE[10]), 
		 -> STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), 
		 -> STR_3(CODE[10]), STR_2(CODE[10]), time(BANK0[6]), temp(BANK0[6]), 
		 -> STR_1(CODE[31]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_Char
    _main->___awdiv
    _main->___awmod
    _main->_get_IR
    _main->_get_PIR
    _main->_get_day
    _main->_get_hall
    _main->_get_tripwire
    _main->_strcmp
    _main->_write_RTC
    _write_RTC->_I2C_Master_Write
    _setup->_I2C_Master_Init
    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _open_door->_I2C_Master_Write
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _close_door->_I2C_Master_Write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _manual_pwm in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_UART_Init
    _UART_Init->___aldiv
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _get_temp->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read

Critical Paths under _manual_pwm in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _manual_pwm in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _manual_pwm in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _manual_pwm in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   38856
                                              0 BANK1      6     6      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                     _Lcd_Write_Char
                   _Lcd_Write_String
                      _UART_TX_Empty
                         _UART_Write
                            ___awdiv
                            ___awmod
                             ___bmul
                         _close_door
                             _get_IR
                            _get_PIR
                            _get_day
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                          _open_door
                              _setup
                             _strcmp
                          _write_RTC
 ---------------------------------------------------------------------------------
 (1) _write_RTC                                            5     3      2    2284
                                              5 COMMON     3     1      2
                                              0 BANK0      2     2      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     511
                                              3 COMMON     5     3      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1880
                    _I2C_Master_Init
                           _Lcd_Init
                          _UART_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4    1118
                                              4 COMMON     2     2      0
                                             14 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     805
                                              3 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              0 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     542
                                              4 COMMON     4     4      0
                                             13 BANK0      4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     421
                                              3 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _open_door                                            0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                             5     5      0    3238
                                              2 BANK0      5     5      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             9     9      0    5666
                                             24 BANK0      9     9      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    19      4    1806
                                              9 BANK0     15    11      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     320
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     875
                                              3 COMMON     4     2      2
                                              0 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _close_door                                           0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2011
                                              3 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     793
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     604
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Empty                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    2378
                                              0 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              4 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    2030
                                              7 COMMON     1     0      1
                                              0 BANK0      6     6      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              4 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _manual_pwm                                           3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_TX_Empty
   _UART_Write
   ___awdiv
   ___awmod
   ___bmul
   _close_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_day
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _open_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
     _initOscilador
   _strcmp
   _write_RTC
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _manual_pwm (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      6       6       7        7.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     21      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5E      12        0.0%
ABS                  0      0      5E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Mar 09 22:02:09 2019

                                _i 0036                                  _j 0035  
                                _k 0078                                  pc 0002  
                   ___bmul@product 0075                        __CFG_CP$OFF 0000  
                      get_hall@key 0049                                 _IR 0037  
                     ___awdiv@sign 0048                                 fsr 0004  
                              l203 0B05                                l134 16B7  
                              l160 16F2                                l152 0883  
                              l400 049C                                l161 16F5  
                              l153 0886                                l162 16F9  
                              l163 16FA                                l411 0595  
                              l403 04AC                                l323 013E  
                              l164 16FE                                l420 05ED  
                              l165 16FF                                l166 1703  
                              l238 16C1                                l430 069C  
                              l414 05B1                                l423 060B  
                              l360 02AF                                l328 011F  
                              l417 05CF                                l337 0150  
                              l338 0161                                l375 030D  
                              l394 047C                                l653 0D18  
                              l397 048C                                _GIE 005F  
                     __CFG_CPD$OFF 0000                                _PIR 0038  
                    ?_get_tripwire 0070                                _min 002A  
                              _val 002C                                fsr0 0004  
                              indf 0000                       ___awmod@sign 0048  
                     __CFG_LVP$OFF 0000                               l4121 024A  
                             l2451 08E2                               l4131 0268  
                             l4123 0250                               l4115 0238  
                             l4107 022F                               l4027 0112  
                             l4043 0140                               l2445 08C6  
                             l2541 0AC5                               l4133 026E  
                             l4125 0256                               l4029 0122  
                             l2447 08D4                               l2455 08ED  
                             l2551 0ADE                               l2543 0ACB  
                             l2535 0AB4                               l4215 03B1  
                             l4207 038C                               l4151 02C8  
                             l4143 02B2                               l4127 025C  
                             l4119 0244                               l4071 0172  
                             l4039 0131                               l2545 0AD1  
                             l2537 0AB9                               l4233 03F0  
                             l4225 03D0                               l4217 03BB  
                             l4129 0262                               l4137 0275  
                             l4073 0173                               l3515 0BCF  
                             l2547 0AD7                               l2539 0ABF  
                             l2555 0AE3                               l4235 03FA  
                             l4139 0296                               l4067 016E  
                             l4059 0163                               l2901 0B5D  
                             l2661 082D                               l2653 0841  
                             l3525 0C07                               l3517 0BDF  
                             l2549 0ADE                               l4149 02DE  
                             l4069 016F                               l3703 0F7A  
                             l2655 084C                               l3551 0D39  
                             l3543 0D29                               l4255 04BA  
                             l4191 035E                               l4175 0300  
                             l4159 02E3                               l2665 0833  
                             l3721 0FB0                               l2657 0854  
                             l3529 0C14                               l3561 0D71  
                             l3553 0D49                               l4281 04C9  
                             l4177 0310                               l3715 0FA1  
                             l3731 0F19                               l4363 062D  
                             l4179 0311                               l3709 0F7C  
                             l3733 0FFB                               l3565 0D7E  
                             l3661 0EF8                               l3751 0A8B  
                             l3591 09CB                               l3583 09A7  
                             l4359 0629                               l4287 0550  
                             l4199 0372                               l3585 09B5  
                             l3729 0FB4                               l3569 0D8C  
                             l3905 08A1                               l2875 0B1E  
                             l3923 06BF                               l3595 09D6  
                             l3907 0892                               l4491 027F  
                             l2893 0B4A                               l2885 0B26  
                             l2869 0B13                               l3941 06E8  
                             l3693 0F63                               l4493 0AEB  
                             l3909 08B8                               l4389 0673  
                             l3767 09DF                               l2887 0B34  
                             l3935 06CC                               l3927 06C6  
                             l4495 0F58                               l3687 0F3F  
                             l3847 0E17                               l4399 0688  
                             l2897 0B55                               l3937 06DA  
                             l3945 06F3                               l3949 06FB  
                             l3973 0061                               l3987 007F  
                             l3999 00AF                               STR_1 071C  
                             STR_2 0779                        get_time@min 004C  
                             STR_3 078D                               STR_4 07BF  
                             STR_5 0797                               STR_6 07AB  
                             STR_7 0783                               STR_8 07A1  
                             STR_9 073E                               _BRGH 04C2  
                             _CREN 00C4                               u2125 093B  
                             u2055 08C9                               u2075 08DA  
                             u2085 08E3                               u2515 0B35  
                             u2525 0B41                               u4045 06CF  
                             u2535 0B4B                               u5007 066B  
                             u4065 06E0                               u3505 0BE1  
                             u5017 0C29                               u4305 02A9  
                             u4075 06E9                               u3515 0BF6  
                             u5027 0C39                               u3525 0C08  
                             u5037 0C49                               u3605 0D60  
                             u5047 094B                               u2495 0B29  
                             u3615 0D72                               u5057 095C  
                             u5067 1716                               u3715 0904  
                             _PEIE 005E                               u3485 0BD3  
                             u3655 09AA                               u3575 0D3D  
                             u3751 0E75                               u3735 0E45  
                             u4615 04E2                               u3752 0E76  
                             u3753 0E7B                               u3745 0E5E  
                             u4625 051B                               u3754 0E7C  
                             u3915 0A97                               u3675 09B6  
                             u3835 0F97                               u3595 0D4B  
                             u3755 0E81                               u3756 0E82  
                             _RCEN 048B                               _RCIF 0065  
                             u3685 09C2                               u3695 09CC  
                             u3791 0ED5                               u3775 0EA5  
                             u3792 0ED6                               u3793 0EDB  
                             u3785 0EBE                               u3794 0EDC  
                             u3955 0DED                               u3795 0EE1  
                             u4907 019D                               u3796 0EE2  
                             u4917 01AF                               u3895 0A70  
                             u3975 0CCC                               u4927 01C1  
                             u3985 0CEB                               u4937 01D3  
                             u4947 01E5                               u4867 006E  
                             u4957 01F7                               u4877 008C  
                             u4967 0209                               u4887 00A4  
                             u4977 021B                               u4897 018B  
                             u4987 022B                               u4997 04C2  
                             _TMR0 0001                               _SPEN 00C7  
                             _TRMT 04C1                               _TXEN 04C5  
                             _SYNC 04C4                       __CFG_WRT$OFF 0000  
                             _day1 0079                               _day2 0025  
                             _bank 002E                  ?_Lcd_Write_String 0047  
 __end_of_I2C_Master_RepeatedStart 16A7                               _cont 002D  
                             _door 003A                               _main 003B  
                             _hour 002B                               _temp 003B  
                             _time 0041                               _trip 0039  
                             btemp 007E                               start 000C  
               ??_Lcd_Write_String 0049                      __CFG_IESO$OFF 0000  
                  __end_of_Lcd_Cmd 171F                  ___bmul@multiplier 0076  
                    __CFG_MCLRE$ON 0000                get_temp@temp_string 0066  
                 ?_I2C_Master_Init 0054                   ?_I2C_Master_Read 0073  
                 ?_I2C_Master_Wait 0070                   ?_I2C_Master_Stop 0070  
                  __end_of___aldiv 0D95                              ?_main 0070  
                  __end_of___awdiv 0B62                              STR_10 0816  
                            STR_11 0810                              STR_12 080A  
                            STR_20 07F5                              STR_21 07EE  
                            STR_13 0755                              STR_22 07F6  
                            STR_30 0828                              STR_14 0761  
                            STR_31 0822                              STR_23 07FD  
                            STR_15 07D2                              STR_32 0827  
                            STR_24 0804                              STR_16 07E4  
                            STR_17 07C9                              STR_25 07B5  
                    __CFG_WDTE$OFF 0000                              STR_18 07DB  
                            STR_26 076D                              STR_19 07ED  
                            STR_27 0748                              STR_28 081C  
                  __end_of___awmod 0700                              STR_29 073B  
                     get_time@hour 004B                              _ANSEL 0188  
                  __end_of___lldiv 0C1D                     ??_get_tripwire 0077  
                  ___awdiv@divisor 0073                    __end_of___lwdiv 09DB  
                            i1l310 1767                              i1l313 176D  
                  __end_of___lwmod 08F2                    ___awdiv@counter 0047  
                            _RCREG 001A                              _SPBRG 0099  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                              _PORTD 0008  
                            _PORTE 0009            __size_of_Lcd_Set_Cursor 0050  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087                              _TRISD 0088  
                            _SSPIE 0463                              _TRISE 0089  
                            _SSPIF 0063                              _TXREG 0019  
                  __end_of_get_PIR 17BA                     __CFG_FCMEN$OFF 0000  
                  __end_of_get_day 099D                        ?_UART_Write 0070  
               __size_of_UART_Init 00D8                              _alarm 002F  
          __size_of_Lcd_Shift_Left 000B                    __end_of_dpowers 071C  
                            _setup 0B62                              _state 007A  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 1000                   __end_of_Lcd_Init 0C7D  
                 __end_of_Lcd_Port 1705                    __initialization 000F  
                     __end_of_main 06B3             __size_of_initOscilador 0055  
                           ??_main 00A0                 __size_of_Lcd_Clear 000B  
                ?_I2C_Master_Start 0070                  ?_I2C_Master_Write 0073  
               ??_I2C_Master_Start 0073                 ??_I2C_Master_Write 0075  
                 ___awdiv@dividend 0075                             ?_setup 0070  
                           _ANSELH 0189                             i1l2961 1769  
                           i1l2963 176A                          ??_Lcd_Cmd 0074  
          __size_of_Lcd_Write_Char 0039                             _SSPADD 0093  
                           _TRISC3 043B                             _TRISC4 043C  
                           _TRISC6 043E                             _TRISC7 043F  
                           _SSPCON 0014                             _SSPBUF 0013  
                   __CFG_PWRTE$OFF 0000           _I2C_Master_RepeatedStart 16A0  
                 __end_of_get_hall 17DD                  __end_of_UART_Init 0F12  
                 __end_of_get_temp 0E3A                   __end_of_get_time 0D06  
                           ___bmul 082B                __size_of_UART_Write 000A  
                        ??___aldiv 0073                          ??___awdiv 0077  
                        ??___awmod 0077                             _change 0034  
                        ??___lldiv 0073                             _get_IR 1774  
                        ??___lwdiv 0077                          ??___lwmod 004E  
         __size_of_Lcd_Shift_Right 000B                   ___awdiv@quotient 0049  
                           _newmin 0027                    ___awmod@divisor 0073  
                        ??_get_PIR 0077                    ___awmod@counter 0047  
            __end_of_UART_TX_Empty 1692                          ??_get_day 0077  
                           _strcat 083C                             _strcmp 088E  
                           saved_w 007E                          ??_sprintf 0054  
                  Lcd_Set_Cursor@a 0049                    Lcd_Set_Cursor@b 0077  
                  Lcd_Set_Cursor@y 004B                    Lcd_Set_Cursor@z 004A  
          __end_of__initialization 0037                      _initOscilador 0AB2  
                __end_of_Lcd_Clear 16D5               __end_of_get_tripwire 1800  
              ___bmul@multiplicand 0073                     __pcstackCOMMON 0070  
                     __pidataBANK0 1687                      __end_of_setup 0BBD  
                   _Lcd_Set_Cursor 0A62                     _OPTION_REGbits 0081  
                   _Lcd_Shift_Left 16D5                          ?_Lcd_Init 0070  
                        ?_Lcd_Port 0070                            ??_setup 0078  
                       __pbssBANK0 0020                     ?_initOscilador 0070  
                       __pmaintext 003B                            ?___bmul 0073  
                          ?_get_IR 0070                         __pintentry 0004  
               __size_of_open_door 001B          __size_of_Lcd_Write_String 0041  
           __end_of_Lcd_Set_Cursor 0AB2                            ?_strcat 0073  
                          ?_strcmp 0073             __end_of_Lcd_Shift_Left 16E0  
                ??_Lcd_Shift_Right 0077                         _close_door 171F  
                     ??_UART_Write 0073                         ??_Lcd_Init 0047  
                       ??_Lcd_Port 0073                            _SSPCON2 0091  
                        ?_get_hall 0070                            _SSPSTAT 0094  
                        ?_get_temp 0070                          ?_get_time 0070  
                       __stringtab 0700                initOscilador@option 0075  
                   _Lcd_Write_Char 092A                            _Lcd_Cmd 1705  
               __size_of_write_RTC 0046                         _manual_pwm 1755  
                          ___aldiv 0D06                    __size_of___bmul 0011  
                          ___awdiv 0B07                            ___awmod 06B3  
                          ___lldiv 0BBD                 __end_of_UART_Write 16CA  
                          ___lwdiv 099D                            ___lwmod 08BE  
                  __size_of_get_IR 0023                            _change1 0033  
                          _change2 0032                            _change3 0031  
                          _change4 0030                    ?_Lcd_Set_Cursor 0077  
                          _get_PIR 1797                            __ptext1 0A1C  
                          __ptext2 088E                            __ptext3 0B62  
                          __ptext4 0AB2                            __ptext5 0E3A  
                          __ptext6 0D06                            __ptext7 0C1D  
                          __ptext8 08F2                            __ptext9 0BBD  
                          _get_day 0963                get_time@time_string 004D  
                  __size_of_strcat 0024                    __size_of_strcmp 0030  
                          _dpowers 0712                    ?_Lcd_Shift_Left 0070  
                 ___awmod@dividend 0075                   ___aldiv@dividend 004B  
                          _newhour 0028           __size_of_I2C_Master_Init 0038  
         __size_of_I2C_Master_Read 002E           __size_of_I2C_Master_Wait 0009  
         __size_of_I2C_Master_Stop 0007                    ??_initOscilador 0073  
                       ??_get_hall 0077                            _sprintf 0F12  
                          clrloop0 16B0             __end_of_Lcd_Write_Char 0963  
                       ??_get_temp 005F                         ??_get_time 0049  
             end_of_initialization 0037              __size_of_get_tripwire 0023  
       ??_I2C_Master_RepeatedStart 0073                  __end_of_open_door 1755  
                       get_PIR@PIR 0049          __size_of_I2C_Master_Start 0007  
        __size_of_I2C_Master_Write 0008                    ___lldiv@divisor 0047  
                  ___lldiv@counter 0053                          _RCSTAbits 0018  
                 ___aldiv@quotient 0051                   I2C_Master_Init@c 0054  
                 I2C_Master_Read@a 0073                          Lcd_Port@a 0073  
                     write_RTC@day 0076                       __pstringtext 0700  
                          strcmp@r 0047                          _UART_Init 0E3A  
                        _PORTAbits 0005                          _PORTBbits 0006  
                        _PORTCbits 0007                          _PORTDbits 0008  
                        _PORTEbits 0009                     UART_Write@data 0073  
                __end_of_write_RTC 0A62                       _get_tripwire 17DD  
                      ?_close_door 0070                          _TRISCbits 0087  
                  ?_Lcd_Write_Char 0070                  Lcd_Write_String@a 0047  
                Lcd_Write_String@i 004C                          _Lcd_Clear 16CA  
                      ?_manual_pwm 0070                     __end_of___bmul 083C  
                 _Lcd_Write_String 09DB                         ?_UART_Init 0055  
                   __end_of_get_IR 1797                     __end_of_strcat 0860  
                   __end_of_strcmp 08BE                start_initialization 000F  
                __size_of_Lcd_Init 0060                  __size_of_Lcd_Port 001A  
                ??_I2C_Master_Init 0074                  ??_I2C_Master_Read 0075  
                ??_I2C_Master_Wait 0073                  ??_I2C_Master_Stop 0073  
           __size_of_UART_TX_Empty 0006           __CFG_FOSC$INTRC_NOCLKOUT 0000  
                       ?_Lcd_Clear 0070                           ??___bmul 0074  
              __size_of_close_door 001B                    _Lcd_Shift_Right 16E0  
                         ??_get_IR 0077                        __pdataBANK0 0068  
                  Lcd_Write_Char@a 0077                    Lcd_Write_Char@y 0076  
                         ??_strcat 0074                           ??_strcmp 0075  
                 write_RTC@minutes 0075                        __pbssCOMMON 0078  
                        ___latbits 0002                      __pcstackBANK0 0047  
                    __pcstackBANK1 00A0                __size_of_manual_pwm 001F  
                __size_of_get_hall 0023                           ?_Lcd_Cmd 0070  
                __size_of_get_temp 00A5                  __size_of_get_time 0089  
                      sprintf@flag 0059                        sprintf@prec 005A  
                 _I2C_Master_Start 1692                   _I2C_Master_Write 16A7  
                 ___lwdiv@dividend 0075                   ??_Lcd_Set_Cursor 0047  
                  get_temp@decimal 0062                           ?___aldiv 0047  
                         ?___awdiv 0073                           ?___awmod 0073  
                         ?___lldiv 0047                           ?___lwdiv 0073  
                         ?___lwmod 004A                   ??_Lcd_Shift_Left 0077  
                      ??_UART_Init 0059                           ?_get_PIR 0070  
                         ?_get_day 0070                    get_temp@tempLSB 0067  
                  get_temp@tempMSB 0065                      _UART_TX_Empty 168C  
                 ___lwdiv@quotient 0048                           ?_sprintf 0050  
                       UART_Init@x 0074                     __size_of_setup 005B  
                  ___aldiv@divisor 0047                  interrupt_function 0004  
                  ___aldiv@counter 004F            __end_of_Lcd_Shift_Right 16EB  
                        clear_ram0 16AF                          _passwordu 0020  
                        _open_door 173A                           Lcd_Cmd@a 0076  
                        _seguridad 0029                        ??_Lcd_Clear 0077  
                UART_Init@baudrate 0055                        __stringbase 0712  
                   ?_UART_TX_Empty 0070                   ??_Lcd_Write_Char 0074  
                     ??_close_door 0075                           _Lcd_Init 0C1D  
                         _Lcd_Port 16EB                          _write_RTC 0A1C  
              I2C_Master_Read@temp 0047              __end_of_initOscilador 0B07  
         __end_of_Lcd_Write_String 0A1C                   __size_of_Lcd_Cmd 001A  
                       ?_open_door 0070                       ??_manual_pwm 0070  
               __end_of_close_door 173A                   __size_of___aldiv 008F  
__size_of_I2C_Master_RepeatedStart 0007                   __size_of___awdiv 005B  
                 __size_of___awmod 004D          ?_I2C_Master_RepeatedStart 0070  
                 __size_of___lldiv 0060                   __size_of___lwdiv 003E  
                 __size_of___lwmod 0034                 __end_of__stringtab 0712  
                 __size_of_get_PIR 0023                   __size_of_get_day 003A  
                       sprintf@val 005B                    _I2C_Master_Init 08F2  
                  _I2C_Master_Read 0860                    _I2C_Master_Wait 16B7  
                       strcat@from 0073                    _I2C_Master_Stop 1699  
                  ___lwdiv@divisor 0073                    ___lwdiv@counter 0047  
                         __ptext10 173A                           __ptext11 17DD  
                         __ptext20 0963                           __ptext12 0C7D  
                         __ptext21 16A0                           __ptext13 0D95  
                         __ptext30 06B3                           __ptext22 1797  
                         __ptext14 083C                           __ptext31 0B07  
                         __ptext23 1774                           __ptext15 0F12  
                         __ptext40 1705                           __ptext32 16C0  
                         __ptext24 0860                           __ptext16 08BE  
                         __ptext41 16EB                           __ptext33 168C  
                         __ptext25 171F                           __ptext17 099D  
                         __ptext42 1755                           __ptext34 09DB  
                         __ptext26 16A7                           __ptext18 082B  
                         __ptext35 092A                           __ptext27 1699  
                         __ptext19 17BA                           __ptext36 16E0  
                         __ptext28 1692                           __ptext37 16D5  
                         __ptext29 16B7                           __ptext38 0A62  
                         __ptext39 16CA                         ?_write_RTC 0075  
                __CFG_BOR4V$BOR40V 0000                           _get_hall 17BA  
                         _get_temp 0D95                           _get_time 0C7D  
                 __size_of_sprintf 00EE                 __end_of_manual_pwm 1774  
                    __size_of_main 0678                   ?_Lcd_Shift_Right 0070  
                         get_IR@IR 0049                           _password 0068  
                         get_day@d 0049                    ??_UART_TX_Empty 0073  
         __end_of_I2C_Master_Start 1699           __end_of_I2C_Master_Write 16AF  
                       _INTCONbits 000B                 Lcd_Write_Char@temp 0075  
                         intlevel1 0000                          sprintf@ap 0058  
                        sprintf@sp 005D                   ___lwmod@dividend 004C  
                 ___lldiv@dividend 004B                        ??_open_door 0075  
                        stringcode 070A                         _OSCCONbits 008F  
          __end_of_I2C_Master_Init 092A            __end_of_I2C_Master_Read 088E  
          __end_of_I2C_Master_Wait 16C0            __end_of_I2C_Master_Stop 16A0  
               Lcd_Set_Cursor@temp 004C                      write_RTC@hour 0077  
                         sprintf@c 005E                           sprintf@f 0050  
                         strcat@cp 0076                           strcat@to 0075  
                         strcmp@s1 0048                           strcmp@s2 0073  
                 ___lldiv@quotient 004F                  I2C_Master_Write@d 0073  
                  ___lwmod@divisor 004A                    ___lwmod@counter 004F  
                 get_tripwire@trip 0049                           stringtab 0700  
                     ___aldiv@sign 0050                         _UART_Write 16C0  
                      _SSPCON2bits 0091                        ??_write_RTC 0047  
                       _SSPCONbits 0014  

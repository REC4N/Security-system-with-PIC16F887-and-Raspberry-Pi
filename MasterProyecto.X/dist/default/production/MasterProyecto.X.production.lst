

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Mar 08 00:21:12 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	psect	text29,local,class=CODE,merge=1,delta=2
    41                           	psect	text30,local,class=CODE,merge=1,delta=2
    42                           	psect	text31,local,class=CODE,merge=1,delta=2
    43                           	psect	text32,local,class=CODE,merge=1,delta=2
    44                           	psect	text33,local,class=CODE,merge=1,delta=2
    45                           	psect	text34,local,class=CODE,merge=1,delta=2
    46                           	psect	text35,local,class=CODE,merge=1,delta=2
    47                           	psect	text36,local,class=CODE,merge=1,delta=2
    48                           	psect	text37,local,class=CODE,merge=1,delta=2
    49                           	psect	intentry,global,class=CODE,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     
    52                           ; Version 2.05
    53                           ; Generated 20/12/2018 GMT
    54                           ; 
    55                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC16F887 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     	;# 
    87  0001                     	;# 
    88  0002                     	;# 
    89  0003                     	;# 
    90  0004                     	;# 
    91  0005                     	;# 
    92  0006                     	;# 
    93  0007                     	;# 
    94  0008                     	;# 
    95  0009                     	;# 
    96  000A                     	;# 
    97  000B                     	;# 
    98  000C                     	;# 
    99  000D                     	;# 
   100  000E                     	;# 
   101  000E                     	;# 
   102  000F                     	;# 
   103  0010                     	;# 
   104  0011                     	;# 
   105  0012                     	;# 
   106  0013                     	;# 
   107  0014                     	;# 
   108  0015                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0017                     	;# 
   112  0018                     	;# 
   113  0019                     	;# 
   114  001A                     	;# 
   115  001B                     	;# 
   116  001B                     	;# 
   117  001C                     	;# 
   118  001D                     	;# 
   119  001E                     	;# 
   120  001F                     	;# 
   121  0081                     	;# 
   122  0085                     	;# 
   123  0086                     	;# 
   124  0087                     	;# 
   125  0088                     	;# 
   126  0089                     	;# 
   127  008C                     	;# 
   128  008D                     	;# 
   129  008E                     	;# 
   130  008F                     	;# 
   131  0090                     	;# 
   132  0091                     	;# 
   133  0092                     	;# 
   134  0093                     	;# 
   135  0093                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0095                     	;# 
   139  0096                     	;# 
   140  0097                     	;# 
   141  0098                     	;# 
   142  0099                     	;# 
   143  009A                     	;# 
   144  009B                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009E                     	;# 
   148  009F                     	;# 
   149  0105                     	;# 
   150  0107                     	;# 
   151  0108                     	;# 
   152  0109                     	;# 
   153  010C                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010F                     	;# 
   158  0185                     	;# 
   159  0187                     	;# 
   160  0188                     	;# 
   161  0189                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  000E                     	;# 
   180  000F                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0013                     	;# 
   185  0014                     	;# 
   186  0015                     	;# 
   187  0015                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  001D                     	;# 
   197  001E                     	;# 
   198  001F                     	;# 
   199  0081                     	;# 
   200  0085                     	;# 
   201  0086                     	;# 
   202  0087                     	;# 
   203  0088                     	;# 
   204  0089                     	;# 
   205  008C                     	;# 
   206  008D                     	;# 
   207  008E                     	;# 
   208  008F                     	;# 
   209  0090                     	;# 
   210  0091                     	;# 
   211  0092                     	;# 
   212  0093                     	;# 
   213  0093                     	;# 
   214  0093                     	;# 
   215  0094                     	;# 
   216  0095                     	;# 
   217  0096                     	;# 
   218  0097                     	;# 
   219  0098                     	;# 
   220  0099                     	;# 
   221  009A                     	;# 
   222  009B                     	;# 
   223  009C                     	;# 
   224  009D                     	;# 
   225  009E                     	;# 
   226  009F                     	;# 
   227  0105                     	;# 
   228  0107                     	;# 
   229  0108                     	;# 
   230  0109                     	;# 
   231  010C                     	;# 
   232  010C                     	;# 
   233  010D                     	;# 
   234  010E                     	;# 
   235  010F                     	;# 
   236  0185                     	;# 
   237  0187                     	;# 
   238  0188                     	;# 
   239  0189                     	;# 
   240  018C                     	;# 
   241  018D                     	;# 
   242                           
   243                           	psect	strings
   244  0500                     __pstrings:	
   245  0500                     stringtab:	
   246  0500                     __stringtab:	
   247                           
   248                           ;	String table - string pointers are 1 byte each
   249  0500  1BFF               	btfsc	btemp+1,7
   250  0501  2D0A               	ljmp	stringcode
   251  0502  1383               	bcf	3,7
   252  0503  187F               	btfsc	btemp+1,0
   253  0504  1783               	bsf	3,7
   254  0505  0800               	movf	0,w
   255  0506  0A84               	incf	4,f
   256  0507  1903               	skipnz
   257  0508  0AFF               	incf	btemp+1,f
   258  0509  0008               	return
   259  050A                     stringcode:	
   260  050A                     stringdir:	
   261  050A  3005               	movlw	high stringdir
   262  050B  008A               	movwf	10
   263  050C  0804               	movf	4,w
   264  050D  0A84               	incf	4,f
   265  050E  0782               	addwf	2,f
   266  050F                     __stringbase:	
   267  050F  3400               	retlw	0
   268  0510                     __end_of__stringtab:	
   269  0510                     _dpowers:	
   270  0510  3401               	retlw	1
   271  0511  3400               	retlw	0
   272  0512  340A               	retlw	10
   273  0513  3400               	retlw	0
   274  0514  3464               	retlw	100
   275  0515  3400               	retlw	0
   276  0516  34E8               	retlw	232
   277  0517  3403               	retlw	3
   278  0518  3410               	retlw	16
   279  0519  3427               	retlw	39
   280  051A                     __end_of_dpowers:	
   281  0007                     _PORTC	set	7
   282  0005                     _PORTA	set	5
   283  0006                     _PORTB	set	6
   284  0007                     _PORTCbits	set	7
   285  0008                     _PORTDbits	set	8
   286  0014                     _SSPCONbits	set	20
   287  0018                     _RCSTAbits	set	24
   288  0001                     _TMR0	set	1
   289  0005                     _PORTAbits	set	5
   290  000B                     _INTCONbits	set	11
   291  0019                     _TXREG	set	25
   292  001A                     _RCREG	set	26
   293  0006                     _PORTBbits	set	6
   294  0013                     _SSPBUF	set	19
   295  0014                     _SSPCON	set	20
   296  0065                     _RCIF	set	101
   297  00C4                     _CREN	set	196
   298  00C7                     _SPEN	set	199
   299  0063                     _SSPIF	set	99
   300  005E                     _PEIE	set	94
   301  005F                     _GIE	set	95
   302  0081                     _OPTION_REGbits	set	129
   303  0087                     _TRISC	set	135
   304  0088                     _TRISD	set	136
   305  0085                     _TRISA	set	133
   306  0086                     _TRISB	set	134
   307  0099                     _SPBRG	set	153
   308  008F                     _OSCCONbits	set	143
   309  0091                     _SSPCON2bits	set	145
   310  0087                     _TRISCbits	set	135
   311  0094                     _SSPSTAT	set	148
   312  0093                     _SSPADD	set	147
   313  0091                     _SSPCON2	set	145
   314  04C1                     _TRMT	set	1217
   315  04C5                     _TXEN	set	1221
   316  043E                     _TRISC6	set	1086
   317  043F                     _TRISC7	set	1087
   318  04C4                     _SYNC	set	1220
   319  04C2                     _BRGH	set	1218
   320  0463                     _SSPIE	set	1123
   321  043C                     _TRISC4	set	1084
   322  043B                     _TRISC3	set	1083
   323  048B                     _RCEN	set	1163
   324  0188                     _ANSEL	set	392
   325  0189                     _ANSELH	set	393
   326  051A                     STR_10:	
   327  051A  3444               	retlw	68	;'D'
   328  051B  346F               	retlw	111	;'o'
   329  051C  346F               	retlw	111	;'o'
   330  051D  3472               	retlw	114	;'r'
   331  051E  3420               	retlw	32	;' '
   332  051F  344F               	retlw	79	;'O'
   333  0520  3450               	retlw	80	;'P'
   334  0521  3445               	retlw	69	;'E'
   335  0522  344E               	retlw	78	;'N'
   336  0523  3420               	retlw	32	;' '
   337  0524  3420               	retlw	32	;' '
   338  0525  3400               	retlw	0
   339  0526                     STR_11:	
   340  0526  3444               	retlw	68	;'D'
   341  0527  346F               	retlw	111	;'o'
   342  0528  346F               	retlw	111	;'o'
   343  0529  3472               	retlw	114	;'r'
   344  052A  3420               	retlw	32	;' '
   345  052B  3443               	retlw	67	;'C'
   346  052C  344C               	retlw	76	;'L'
   347  052D  344F               	retlw	79	;'O'
   348  052E  3453               	retlw	83	;'S'
   349  052F  3445               	retlw	69	;'E'
   350  0530  3444               	retlw	68	;'D'
   351  0531  3400               	retlw	0
   352  0532                     STR_8:	
   353  0532  3420               	retlw	32	;' '
   354  0533  3420               	retlw	32	;' '
   355  0534  3420               	retlw	32	;' '
   356  0535  3420               	retlw	32	;' '
   357  0536  3420               	retlw	32	;' '
   358  0537  3420               	retlw	32	;' '
   359  0538  3420               	retlw	32	;' '
   360  0539  3420               	retlw	32	;' '
   361  053A  3420               	retlw	32	;' '
   362  053B  3400               	retlw	0
   363  053C                     STR_1:	
   364  053C  344C               	retlw	76	;'L'
   365  053D  3455               	retlw	85	;'U'
   366  053E  344E               	retlw	78	;'N'
   367  053F  3445               	retlw	69	;'E'
   368  0540  3453               	retlw	83	;'S'
   369  0541  3420               	retlw	32	;' '
   370  0542  3420               	retlw	32	;' '
   371  0543  3420               	retlw	32	;' '
   372  0544  3420               	retlw	32	;' '
   373  0545  3400               	retlw	0
   374  0546                     STR_6:	
   375  0546  3453               	retlw	83	;'S'
   376  0547  3441               	retlw	65	;'A'
   377  0548  3442               	retlw	66	;'B'
   378  0549  3441               	retlw	65	;'A'
   379  054A  3444               	retlw	68	;'D'
   380  054B  344F               	retlw	79	;'O'
   381  054C  3420               	retlw	32	;' '
   382  054D  3420               	retlw	32	;' '
   383  054E  3420               	retlw	32	;' '
   384  054F  3400               	retlw	0
   385  0550                     STR_2:	
   386  0550  344D               	retlw	77	;'M'
   387  0551  3441               	retlw	65	;'A'
   388  0552  3452               	retlw	82	;'R'
   389  0553  3454               	retlw	84	;'T'
   390  0554  3445               	retlw	69	;'E'
   391  0555  3453               	retlw	83	;'S'
   392  0556  3420               	retlw	32	;' '
   393  0557  3420               	retlw	32	;' '
   394  0558  3420               	retlw	32	;' '
   395  0559  3400               	retlw	0
   396  055A                     STR_4:	
   397  055A  344A               	retlw	74	;'J'
   398  055B  3455               	retlw	85	;'U'
   399  055C  3445               	retlw	69	;'E'
   400  055D  3456               	retlw	86	;'V'
   401  055E  3445               	retlw	69	;'E'
   402  055F  3453               	retlw	83	;'S'
   403  0560  3420               	retlw	32	;' '
   404  0561  3420               	retlw	32	;' '
   405  0562  3420               	retlw	32	;' '
   406  0563  3400               	retlw	0
   407  0564                     STR_7:	
   408  0564  3444               	retlw	68	;'D'
   409  0565  344F               	retlw	79	;'O'
   410  0566  344D               	retlw	77	;'M'
   411  0567  3449               	retlw	73	;'I'
   412  0568  344E               	retlw	78	;'N'
   413  0569  3447               	retlw	71	;'G'
   414  056A  344F               	retlw	79	;'O'
   415  056B  3420               	retlw	32	;' '
   416  056C  3420               	retlw	32	;' '
   417  056D  3400               	retlw	0
   418  056E                     STR_5:	
   419  056E  3456               	retlw	86	;'V'
   420  056F  3449               	retlw	73	;'I'
   421  0570  3445               	retlw	69	;'E'
   422  0571  3452               	retlw	82	;'R'
   423  0572  344E               	retlw	78	;'N'
   424  0573  3445               	retlw	69	;'E'
   425  0574  3453               	retlw	83	;'S'
   426  0575  3420               	retlw	32	;' '
   427  0576  3420               	retlw	32	;' '
   428  0577  3400               	retlw	0
   429  0578                     STR_3:	
   430  0578  344D               	retlw	77	;'M'
   431  0579  3449               	retlw	73	;'I'
   432  057A  3445               	retlw	69	;'E'
   433  057B  3452               	retlw	82	;'R'
   434  057C  3443               	retlw	67	;'C'
   435  057D  344F               	retlw	79	;'O'
   436  057E  344C               	retlw	76	;'L'
   437  057F  3445               	retlw	69	;'E'
   438  0580  3453               	retlw	83	;'S'
   439  0581  3400               	retlw	0
   440  0582                     STR_12:	
   441  0582  3454               	retlw	84	;'T'
   442  0583  3472               	retlw	114	;'r'
   443  0584  3469               	retlw	105	;'i'
   444  0585  3470               	retlw	112	;'p'
   445  0586  3420               	retlw	32	;' '
   446  0587  344F               	retlw	79	;'O'
   447  0588  344E               	retlw	78	;'N'
   448  0589  3420               	retlw	32	;' '
   449  058A  3400               	retlw	0
   450  058B                     STR_13:	
   451  058B  3454               	retlw	84	;'T'
   452  058C  3472               	retlw	114	;'r'
   453  058D  3469               	retlw	105	;'i'
   454  058E  3470               	retlw	112	;'p'
   455  058F  3420               	retlw	32	;' '
   456  0590  344F               	retlw	79	;'O'
   457  0591  3446               	retlw	70	;'F'
   458  0592  3446               	retlw	70	;'F'
   459  0593  3400               	retlw	0
   460  0594                     STR_14:	
   461  0594  3450               	retlw	80	;'P'
   462  0595  3449               	retlw	73	;'I'
   463  0596  3452               	retlw	82	;'R'
   464  0597  3420               	retlw	32	;' '
   465  0598  344F               	retlw	79	;'O'
   466  0599  344E               	retlw	78	;'N'
   467  059A  3420               	retlw	32	;' '
   468  059B  3400               	retlw	0
   469  059C                     STR_15:	
   470  059C  3450               	retlw	80	;'P'
   471  059D  3449               	retlw	73	;'I'
   472  059E  3452               	retlw	82	;'R'
   473  059F  3420               	retlw	32	;' '
   474  05A0  344F               	retlw	79	;'O'
   475  05A1  3446               	retlw	70	;'F'
   476  05A2  3446               	retlw	70	;'F'
   477  05A3  3400               	retlw	0
   478  05A4                     STR_9:	
   479  05A4  3432               	retlw	50	;'2'
   480  05A5  3433               	retlw	51	;'3'
   481  05A6  342E               	retlw	46	;'.'
   482  05A7  3435               	retlw	53	;'5'
   483  05A8  3430               	retlw	48	;'0'
   484  05A9  3400               	retlw	0
   485  05AA                     STR_19:	
   486  05AA  342E               	retlw	46	;'.'
   487  05AB  3425               	retlw	37	;'%'
   488  05AC  3464               	retlw	100	;'d'
   489  05AD  3430               	retlw	48	;'0'
   490  05AE  3400               	retlw	0
   491  05AF                     STR_20:	
   492  05AF  342E               	retlw	46	;'.'
   493  05B0  3425               	retlw	37	;'%'
   494  05B1  3464               	retlw	100	;'d'
   495  05B2  3400               	retlw	0
   496  0595                     
   497                           ; #config settings
   498  0000                     
   499                           	psect	cinit
   500  000F                     start_initialization:	
   501  000F                     __initialization:	
   502                           
   503                           ; Clear objects allocated to COMMON
   504  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   505  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   506  0011  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   507                           
   508                           ; Clear objects allocated to BANK0
   509  0012  1383               	bcf	3,7	;select IRP bank0
   510  0013  3041               	movlw	low __pbssBANK0
   511  0014  0084               	movwf	4
   512  0015  305B               	movlw	low (__pbssBANK0+26)
   513  0016  120A  158A  2400   	fcall	clear_ram0
   514  0019                     end_of_initialization:	
   515                           ;End of C runtime variable initialization code
   516                           
   517  0019                     __end_of__initialization:	
   518  0019  0183               	clrf	3
   519  001A  120A  118A  281D   	ljmp	_main	;jump to C main() function
   520                           
   521                           	psect	bssCOMMON
   522  0078                     __pbssCOMMON:	
   523  0078                     _state:	
   524  0078                     	ds	1
   525  0079                     _trip:	
   526  0079                     	ds	1
   527  007A                     _door:	
   528  007A                     	ds	1
   529                           
   530                           	psect	bssBANK0
   531  0041                     __pbssBANK0:	
   532  0041                     _val:	
   533  0041                     	ds	1
   534  0042                     _cont:	
   535  0042                     	ds	1
   536  0043                     _bank:	
   537  0043                     	ds	1
   538  0044                     _alarm:	
   539  0044                     	ds	1
   540  0045                     _change3:	
   541  0045                     	ds	1
   542  0046                     _change2:	
   543  0046                     	ds	1
   544  0047                     _change1:	
   545  0047                     	ds	1
   546  0048                     _change:	
   547  0048                     	ds	1
   548  0049                     _j:	
   549  0049                     	ds	1
   550  004A                     _i:	
   551  004A                     	ds	1
   552  004B                     _day1:	
   553  004B                     	ds	1
   554  004C                     _IR:	
   555  004C                     	ds	1
   556  004D                     _PIR:	
   557  004D                     	ds	1
   558  004E                     _day2:	
   559  004E                     	ds	1
   560  004F                     _temp:	
   561  004F                     	ds	6
   562  0055                     _time:	
   563  0055                     	ds	6
   564                           
   565                           	psect	clrtext
   566  0C00                     clear_ram0:	
   567                           ;	Called with FSR containing the base address, and
   568                           ;	W with the last address+1
   569                           
   570  0C00  0064               	clrwdt	;clear the watchdog before getting into this loop
   571  0C01                     clrloop0:	
   572  0C01  0180               	clrf	0	;clear RAM location pointed to by FSR
   573  0C02  0A84               	incf	4,f	;increment pointer
   574  0C03  0604               	xorwf	4,w	;XOR with final address
   575  0C04  1903               	btfsc	3,2	;have we reached the end yet?
   576  0C05  3400               	retlw	0	;all done for this memory range, return
   577  0C06  0604               	xorwf	4,w	;XOR again to restore value
   578  0C07  2C01               	goto	clrloop0	;do the next byte
   579                           
   580                           	psect	cstackCOMMON
   581  0070                     __pcstackCOMMON:	
   582  0070                     ?_setup:	
   583  0070                     ?_get_temp:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0070                     ?_get_hall:	
   587                           ; 1 bytes @ 0x0
   588                           
   589  0070                     ?_get_tripwire:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0070                     ?_get_PIR:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0070                     ?_get_IR:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ?_get_time:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0070                     ?_get_day:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0070                     ?_open_door:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0070                     ?_close_door:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0070                     ?_I2C_Master_Wait:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ?_I2C_Master_Start:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     ?_I2C_Master_RepeatedStart:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0070                     ?_I2C_Master_Stop:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0070                     ?_Lcd_Port:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0070                     ?_Lcd_Cmd:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0070                     ?_Lcd_Clear:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0070                     ?_Lcd_Init:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0070                     ?_Lcd_Write_Char:	
   635                           ; 1 bytes @ 0x0
   636                           
   637  0070                     ?_initOscilador:	
   638                           ; 1 bytes @ 0x0
   639                           
   640  0070                     ?_UART_TX_Empty:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0070                     ?_UART_Write:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0070                     ?_manual_pwm:	
   647                           ; 1 bytes @ 0x0
   648                           
   649  0070                     ??_manual_pwm:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0070                     ?_main:	
   653                           ; 1 bytes @ 0x0
   654                           
   655                           
   656                           ; 1 bytes @ 0x0
   657  0070                     	ds	3
   658  0073                     ?_strcat:	
   659  0073                     ??_I2C_Master_Wait:	
   660                           ; 1 bytes @ 0x3
   661                           
   662  0073                     ??_I2C_Master_Start:	
   663                           ; 1 bytes @ 0x3
   664                           
   665  0073                     ??_I2C_Master_RepeatedStart:	
   666                           ; 1 bytes @ 0x3
   667                           
   668  0073                     ??_I2C_Master_Stop:	
   669                           ; 1 bytes @ 0x3
   670                           
   671  0073                     ?_I2C_Master_Write:	
   672                           ; 1 bytes @ 0x3
   673                           
   674  0073                     ??_Lcd_Port:	
   675                           ; 1 bytes @ 0x3
   676                           
   677  0073                     ??_initOscilador:	
   678                           ; 1 bytes @ 0x3
   679                           
   680  0073                     ??_UART_TX_Empty:	
   681                           ; 1 bytes @ 0x3
   682                           
   683  0073                     ??_UART_Write:	
   684                           ; 1 bytes @ 0x3
   685                           
   686  0073                     ?___bmul:	
   687                           ; 1 bytes @ 0x3
   688                           
   689  0073                     ??___lldiv:	
   690                           ; 1 bytes @ 0x3
   691                           
   692  0073                     ??___aldiv:	
   693                           ; 1 bytes @ 0x3
   694                           
   695  0073                     ?_strcmp:	
   696                           ; 1 bytes @ 0x3
   697                           
   698  0073                     ?_I2C_Master_Read:	
   699                           ; 2 bytes @ 0x3
   700                           
   701  0073                     ?___lwdiv:	
   702                           ; 2 bytes @ 0x3
   703                           
   704  0073                     Lcd_Port@a:	
   705                           ; 2 bytes @ 0x3
   706                           
   707  0073                     UART_Write@data:	
   708                           ; 1 bytes @ 0x3
   709                           
   710  0073                     ___bmul@multiplicand:	
   711                           ; 1 bytes @ 0x3
   712                           
   713  0073                     strcat@from:	
   714                           ; 1 bytes @ 0x3
   715                           
   716  0073                     strcmp@s2:	
   717                           ; 1 bytes @ 0x3
   718                           
   719  0073                     I2C_Master_Write@d:	
   720                           ; 1 bytes @ 0x3
   721                           
   722  0073                     I2C_Master_Read@a:	
   723                           ; 2 bytes @ 0x3
   724                           
   725  0073                     ___lwdiv@divisor:	
   726                           ; 2 bytes @ 0x3
   727                           
   728                           
   729                           ; 2 bytes @ 0x3
   730  0073                     	ds	1
   731  0074                     ??_strcat:	
   732  0074                     ??_I2C_Master_Init:	
   733                           ; 1 bytes @ 0x4
   734                           
   735  0074                     ??_Lcd_Cmd:	
   736                           ; 1 bytes @ 0x4
   737                           
   738  0074                     ??_Lcd_Write_Char:	
   739                           ; 1 bytes @ 0x4
   740                           
   741  0074                     ??___bmul:	
   742                           ; 1 bytes @ 0x4
   743                           
   744  0074                     UART_Init@x:	
   745                           ; 1 bytes @ 0x4
   746                           
   747                           
   748                           ; 2 bytes @ 0x4
   749  0074                     	ds	1
   750  0075                     ??_open_door:	
   751  0075                     ??_close_door:	
   752                           ; 1 bytes @ 0x5
   753                           
   754  0075                     ??_strcmp:	
   755                           ; 1 bytes @ 0x5
   756                           
   757  0075                     ??_I2C_Master_Write:	
   758                           ; 1 bytes @ 0x5
   759                           
   760  0075                     ??_I2C_Master_Read:	
   761                           ; 1 bytes @ 0x5
   762                           
   763  0075                     Lcd_Write_Char@temp:	
   764                           ; 1 bytes @ 0x5
   765                           
   766  0075                     initOscilador@option:	
   767                           ; 1 bytes @ 0x5
   768                           
   769  0075                     ___bmul@product:	
   770                           ; 1 bytes @ 0x5
   771                           
   772  0075                     strcat@to:	
   773                           ; 1 bytes @ 0x5
   774                           
   775  0075                     ___lwdiv@dividend:	
   776                           ; 1 bytes @ 0x5
   777                           
   778                           
   779                           ; 2 bytes @ 0x5
   780  0075                     	ds	1
   781  0076                     Lcd_Cmd@a:	
   782  0076                     Lcd_Write_Char@y:	
   783                           ; 1 bytes @ 0x6
   784                           
   785  0076                     ___bmul@multiplier:	
   786                           ; 1 bytes @ 0x6
   787                           
   788  0076                     strcat@cp:	
   789                           ; 1 bytes @ 0x6
   790                           
   791                           
   792                           ; 1 bytes @ 0x6
   793  0076                     	ds	1
   794  0077                     ??_get_hall:	
   795  0077                     ??_get_tripwire:	
   796                           ; 1 bytes @ 0x7
   797                           
   798  0077                     ??_get_PIR:	
   799                           ; 1 bytes @ 0x7
   800                           
   801  0077                     ??_get_IR:	
   802                           ; 1 bytes @ 0x7
   803                           
   804  0077                     ??_get_day:	
   805                           ; 1 bytes @ 0x7
   806                           
   807  0077                     ??_Lcd_Clear:	
   808                           ; 1 bytes @ 0x7
   809                           
   810  0077                     ?_Lcd_Set_Cursor:	
   811                           ; 1 bytes @ 0x7
   812                           
   813  0077                     ??___lwdiv:	
   814                           ; 1 bytes @ 0x7
   815                           
   816  0077                     Lcd_Set_Cursor@b:	
   817                           ; 1 bytes @ 0x7
   818                           
   819  0077                     Lcd_Write_Char@a:	
   820                           ; 1 bytes @ 0x7
   821                           
   822                           
   823                           ; 1 bytes @ 0x7
   824  0077                     	ds	1
   825  0078                     ??_setup:	
   826                           
   827                           	psect	cstackBANK0
   828  0020                     __pcstackBANK0:	
   829                           ; 1 bytes @ 0x8
   830                           
   831  0020                     ??_Lcd_Set_Cursor:	
   832  0020                     ??_Lcd_Init:	
   833                           ; 1 bytes @ 0x0
   834                           
   835  0020                     ?_Lcd_Write_String:	
   836                           ; 1 bytes @ 0x0
   837                           
   838  0020                     ?___lldiv:	
   839                           ; 1 bytes @ 0x0
   840                           
   841  0020                     ?___aldiv:	
   842                           ; 4 bytes @ 0x0
   843                           
   844  0020                     ___lwdiv@counter:	
   845                           ; 4 bytes @ 0x0
   846                           
   847  0020                     strcmp@r:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0020                     I2C_Master_Read@temp:	
   851                           ; 1 bytes @ 0x0
   852                           
   853  0020                     Lcd_Write_String@a:	
   854                           ; 2 bytes @ 0x0
   855                           
   856  0020                     ___lldiv@divisor:	
   857                           ; 2 bytes @ 0x0
   858                           
   859  0020                     ___aldiv@divisor:	
   860                           ; 4 bytes @ 0x0
   861                           
   862                           
   863                           ; 4 bytes @ 0x0
   864  0020                     	ds	1
   865  0021                     strcmp@s1:	
   866  0021                     ___lwdiv@quotient:	
   867                           ; 1 bytes @ 0x1
   868                           
   869                           
   870                           ; 2 bytes @ 0x1
   871  0021                     	ds	1
   872  0022                     ??_get_time:	
   873  0022                     ??_Lcd_Write_String:	
   874                           ; 1 bytes @ 0x2
   875                           
   876  0022                     Lcd_Set_Cursor@a:	
   877                           ; 1 bytes @ 0x2
   878                           
   879  0022                     get_day@d:	
   880                           ; 1 bytes @ 0x2
   881                           
   882  0022                     get_hall@key:	
   883                           ; 1 bytes @ 0x2
   884                           
   885  0022                     get_tripwire@trip:	
   886                           ; 1 bytes @ 0x2
   887                           
   888  0022                     get_PIR@PIR:	
   889                           ; 1 bytes @ 0x2
   890                           
   891  0022                     get_IR@IR:	
   892                           ; 1 bytes @ 0x2
   893                           
   894                           
   895                           ; 1 bytes @ 0x2
   896  0022                     	ds	1
   897  0023                     ?___lwmod:	
   898  0023                     Lcd_Set_Cursor@z:	
   899                           ; 2 bytes @ 0x3
   900                           
   901  0023                     ___lwmod@divisor:	
   902                           ; 1 bytes @ 0x3
   903                           
   904                           
   905                           ; 2 bytes @ 0x3
   906  0023                     	ds	1
   907  0024                     Lcd_Set_Cursor@y:	
   908  0024                     get_time@hour:	
   909                           ; 1 bytes @ 0x4
   910                           
   911  0024                     ___lldiv@dividend:	
   912                           ; 1 bytes @ 0x4
   913                           
   914  0024                     ___aldiv@dividend:	
   915                           ; 4 bytes @ 0x4
   916                           
   917                           
   918                           ; 4 bytes @ 0x4
   919  0024                     	ds	1
   920  0025                     Lcd_Set_Cursor@temp:	
   921  0025                     get_time@min:	
   922                           ; 1 bytes @ 0x5
   923                           
   924  0025                     Lcd_Write_String@i:	
   925                           ; 1 bytes @ 0x5
   926                           
   927  0025                     ___lwmod@dividend:	
   928                           ; 2 bytes @ 0x5
   929                           
   930                           
   931                           ; 2 bytes @ 0x5
   932  0025                     	ds	1
   933  0026                     get_time@time_string:	
   934                           
   935                           ; 1 bytes @ 0x6
   936  0026                     	ds	1
   937  0027                     ??___lwmod:	
   938                           
   939                           ; 1 bytes @ 0x7
   940  0027                     	ds	1
   941  0028                     ___aldiv@counter:	
   942  0028                     ___lwmod@counter:	
   943                           ; 1 bytes @ 0x8
   944                           
   945  0028                     ___lldiv@quotient:	
   946                           ; 1 bytes @ 0x8
   947                           
   948                           
   949                           ; 4 bytes @ 0x8
   950  0028                     	ds	1
   951  0029                     ?_sprintf:	
   952  0029                     sprintf@f:	
   953                           ; 2 bytes @ 0x9
   954                           
   955  0029                     ___aldiv@sign:	
   956                           ; 1 bytes @ 0x9
   957                           
   958                           
   959                           ; 1 bytes @ 0x9
   960  0029                     	ds	1
   961  002A                     ___aldiv@quotient:	
   962                           
   963                           ; 4 bytes @ 0xA
   964  002A                     	ds	2
   965  002C                     ??_sprintf:	
   966  002C                     ___lldiv@counter:	
   967                           ; 1 bytes @ 0xC
   968                           
   969                           
   970                           ; 1 bytes @ 0xC
   971  002C                     	ds	1
   972  002D                     ?_I2C_Master_Init:	
   973  002D                     I2C_Master_Init@c:	
   974                           ; 1 bytes @ 0xD
   975                           
   976                           
   977                           ; 4 bytes @ 0xD
   978  002D                     	ds	1
   979  002E                     ?_UART_Init:	
   980  002E                     UART_Init@baudrate:	
   981                           ; 1 bytes @ 0xE
   982                           
   983                           
   984                           ; 4 bytes @ 0xE
   985  002E                     	ds	1
   986  002F                     sprintf@ap:	
   987                           
   988                           ; 1 bytes @ 0xF
   989  002F                     	ds	1
   990  0030                     sprintf@flag:	
   991                           
   992                           ; 1 bytes @ 0x10
   993  0030                     	ds	1
   994  0031                     sprintf@prec:	
   995                           
   996                           ; 1 bytes @ 0x11
   997  0031                     	ds	1
   998  0032                     ??_UART_Init:	
   999  0032                     sprintf@val:	
  1000                           ; 1 bytes @ 0x12
  1001                           
  1002                           
  1003                           ; 2 bytes @ 0x12
  1004  0032                     	ds	2
  1005  0034                     sprintf@sp:	
  1006                           
  1007                           ; 1 bytes @ 0x14
  1008  0034                     	ds	1
  1009  0035                     sprintf@c:	
  1010                           
  1011                           ; 1 bytes @ 0x15
  1012  0035                     	ds	1
  1013  0036                     ??_get_temp:	
  1014                           
  1015                           ; 1 bytes @ 0x16
  1016  0036                     	ds	3
  1017  0039                     get_temp@decimal:	
  1018                           
  1019                           ; 3 bytes @ 0x19
  1020  0039                     	ds	3
  1021  003C                     get_temp@tempMSB:	
  1022                           
  1023                           ; 1 bytes @ 0x1C
  1024  003C                     	ds	1
  1025  003D                     get_temp@temp_string:	
  1026                           
  1027                           ; 1 bytes @ 0x1D
  1028  003D                     	ds	1
  1029  003E                     get_temp@tempLSB:	
  1030                           
  1031                           ; 1 bytes @ 0x1E
  1032  003E                     	ds	1
  1033  003F                     ??_main:	
  1034                           
  1035                           ; 1 bytes @ 0x1F
  1036  003F                     	ds	2
  1037                           
  1038                           	psect	maintext
  1039  001D                     __pmaintext:	
  1040 ;;
  1041 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1042 ;;
  1043 ;; *************** function _main *****************
  1044 ;; Defined at:
  1045 ;;		line 75 in file "mainMaster.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;		None
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;		None
  1050 ;; Return value:  Size  Location     Type
  1051 ;;                  1    wreg      void 
  1052 ;; Registers used:
  1053 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1054 ;; Tracked objects:
  1055 ;;		On entry : B00/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1059 ;;      Params:         0       0       0       0       0
  1060 ;;      Locals:         0       0       0       0       0
  1061 ;;      Temps:          0       2       0       0       0
  1062 ;;      Totals:         0       2       0       0       0
  1063 ;;Total ram usage:        2 bytes
  1064 ;; Hardware stack levels required when called:    5
  1065 ;; This function calls:
  1066 ;;		_Lcd_Clear
  1067 ;;		_Lcd_Set_Cursor
  1068 ;;		_Lcd_Write_Char
  1069 ;;		_Lcd_Write_String
  1070 ;;		_UART_TX_Empty
  1071 ;;		_UART_Write
  1072 ;;		_close_door
  1073 ;;		_get_IR
  1074 ;;		_get_PIR
  1075 ;;		_get_day
  1076 ;;		_get_hall
  1077 ;;		_get_temp
  1078 ;;		_get_time
  1079 ;;		_get_tripwire
  1080 ;;		_open_door
  1081 ;;		_setup
  1082 ;;		_strcmp
  1083 ;; This function is called by:
  1084 ;;		Startup code after reset
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           
  1089                           ;psect for function _main
  1090  001D                     _main:	
  1091                           
  1092                           ;mainMaster.c: 76:     setup();
  1093                           
  1094                           ;incstack = 0
  1095                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1096  001D  120A  158A  26FA  120A  118A  	fcall	_setup
  1097                           
  1098                           ;mainMaster.c: 77:     state = 0;
  1099  0022  01F8               	clrf	_state
  1100                           
  1101                           ;mainMaster.c: 78:     Lcd_Clear();
  1102  0023  120A  158A  241B  120A  118A  	fcall	_Lcd_Clear
  1103                           
  1104                           ;mainMaster.c: 79:     PORTAbits.RA7 = 0;
  1105  0028  1283               	bcf	3,5	;RP0=0, select bank0
  1106  0029  1303               	bcf	3,6	;RP1=0, select bank0
  1107  002A  1385               	bcf	5,7	;volatile
  1108  002B                     l3109:	
  1109                           
  1110                           ;mainMaster.c: 84:         RCSTAbits.SPEN = 0;
  1111  002B  1283               	bcf	3,5	;RP0=0, select bank0
  1112  002C  1303               	bcf	3,6	;RP1=0, select bank0
  1113  002D  1398               	bcf	24,7	;volatile
  1114                           
  1115                           ;mainMaster.c: 85:         SSPCONbits.SSPEN = 1;
  1116  002E  1694               	bsf	20,5	;volatile
  1117                           
  1118                           ;mainMaster.c: 87:         get_temp(temp);
  1119  002F  304F               	movlw	(low (_temp| 0))& (0+255)
  1120  0030  120A  118A  25B3  120A  118A  	fcall	_get_temp
  1121                           
  1122                           ;mainMaster.c: 88:         door = get_hall();
  1123  0035  120A  158A  2506  120A  118A  	fcall	_get_hall
  1124  003A  1283               	bcf	3,5	;RP0=0, select bank0
  1125  003B  1303               	bcf	3,6	;RP1=0, select bank0
  1126  003C  00BF               	movwf	??_main
  1127  003D  083F               	movf	??_main,w
  1128  003E  00FA               	movwf	_door
  1129                           
  1130                           ;mainMaster.c: 89:         trip = get_tripwire();
  1131  003F  120A  158A  2529  120A  118A  	fcall	_get_tripwire
  1132  0044  1283               	bcf	3,5	;RP0=0, select bank0
  1133  0045  1303               	bcf	3,6	;RP1=0, select bank0
  1134  0046  00BF               	movwf	??_main
  1135  0047  083F               	movf	??_main,w
  1136  0048  00F9               	movwf	_trip
  1137                           
  1138                           ;mainMaster.c: 90:         PIR = get_PIR();
  1139  0049  120A  158A  24E3  120A  118A  	fcall	_get_PIR
  1140  004E  1283               	bcf	3,5	;RP0=0, select bank0
  1141  004F  1303               	bcf	3,6	;RP1=0, select bank0
  1142  0050  00BF               	movwf	??_main
  1143  0051  083F               	movf	??_main,w
  1144  0052  00CD               	movwf	_PIR
  1145                           
  1146                           ;mainMaster.c: 91:         IR = get_IR();
  1147  0053  120A  158A  24C0  120A  118A  	fcall	_get_IR
  1148  0058  1283               	bcf	3,5	;RP0=0, select bank0
  1149  0059  1303               	bcf	3,6	;RP1=0, select bank0
  1150  005A  00BF               	movwf	??_main
  1151  005B  083F               	movf	??_main,w
  1152  005C  00CC               	movwf	_IR
  1153                           
  1154                           ;mainMaster.c: 92:         get_time(time);
  1155  005D  3055               	movlw	(low (_time| 0))& (0+255)
  1156  005E  120A  118A  26E5  120A  118A  	fcall	_get_time
  1157                           
  1158                           ;mainMaster.c: 93:         day1 = get_day();
  1159  0063  120A  158A  2641  120A  118A  	fcall	_get_day
  1160  0068  1283               	bcf	3,5	;RP0=0, select bank0
  1161  0069  1303               	bcf	3,6	;RP1=0, select bank0
  1162  006A  00BF               	movwf	??_main
  1163  006B  083F               	movf	??_main,w
  1164  006C  00CB               	movwf	_day1
  1165                           
  1166                           ;mainMaster.c: 95:         if(PORTDbits.RD0 == 1){
  1167  006D  1C08               	btfss	8,0	;volatile
  1168  006E  28A3               	goto	l291
  1169                           
  1170                           ;mainMaster.c: 96:             if (bank == 1){
  1171  006F  0343               	decf	_bank,w
  1172  0070  1D03               	btfss	3,2
  1173  0071  288B               	goto	l3145
  1174                           
  1175                           ;mainMaster.c: 97:                 if (change1 == 0){
  1176  0072  0847               	movf	_change1,w
  1177  0073  1D03               	btfss	3,2
  1178  0074  28A5               	goto	l3163
  1179                           
  1180                           ;mainMaster.c: 98:                     bank = 0;
  1181  0075  01C3               	clrf	_bank
  1182                           
  1183                           ;mainMaster.c: 99:                     alarm = 0;
  1184  0076  01C4               	clrf	_alarm
  1185                           
  1186                           ;mainMaster.c: 100:                     open_door();
  1187  0077  120A  158A  2486  120A  118A  	fcall	_open_door
  1188  007C                     l3139:	
  1189                           ;mainMaster.c: 102:                     while(j < 50){
  1190                           
  1191                           
  1192                           ;mainMaster.c: 102:                     while(j < 50){
  1193  007C  3032               	movlw	50
  1194  007D  1283               	bcf	3,5	;RP0=0, select bank0
  1195  007E  1303               	bcf	3,6	;RP1=0, select bank0
  1196  007F  0249               	subwf	_j,w
  1197  0080  1803               	btfsc	3,0
  1198  0081  2887               	goto	l3141
  1199                           
  1200                           ;mainMaster.c: 103:                         j++;
  1201  0082  3001               	movlw	1
  1202  0083  00BF               	movwf	??_main
  1203  0084  083F               	movf	??_main,w
  1204  0085  07C9               	addwf	_j,f
  1205  0086  287C               	goto	l3139
  1206  0087                     l3141:	
  1207                           
  1208                           ;mainMaster.c: 105:                     j = 0;
  1209  0087  01C9               	clrf	_j
  1210                           
  1211                           ;mainMaster.c: 106:                     change1 = 1;
  1212  0088  01C7               	clrf	_change1
  1213  0089  0AC7               	incf	_change1,f
  1214  008A  28A5               	goto	l3163
  1215  008B                     l3145:	
  1216  008B  0843               	movf	_bank,w
  1217  008C  1D03               	btfss	3,2
  1218  008D  28A5               	goto	l3163
  1219                           
  1220                           ;mainMaster.c: 109:                 if (change1 == 0){
  1221  008E  0847               	movf	_change1,w
  1222  008F  1D03               	btfss	3,2
  1223  0090  28A5               	goto	l3163
  1224                           
  1225                           ;mainMaster.c: 110:                     bank = 1;
  1226  0091  01C3               	clrf	_bank
  1227  0092  0AC3               	incf	_bank,f
  1228                           
  1229                           ;mainMaster.c: 112:                     close_door();
  1230  0093  120A  158A  246B  120A  118A  	fcall	_close_door
  1231  0098                     l3155:	
  1232                           ;mainMaster.c: 114:                     while(j < 50){
  1233                           
  1234                           
  1235                           ;mainMaster.c: 114:                     while(j < 50){
  1236  0098  3032               	movlw	50
  1237  0099  1283               	bcf	3,5	;RP0=0, select bank0
  1238  009A  1303               	bcf	3,6	;RP1=0, select bank0
  1239  009B  0249               	subwf	_j,w
  1240  009C  1803               	btfsc	3,0
  1241  009D  2887               	goto	l3141
  1242                           
  1243                           ;mainMaster.c: 115:                         j++;
  1244  009E  3001               	movlw	1
  1245  009F  00BF               	movwf	??_main
  1246  00A0  083F               	movf	??_main,w
  1247  00A1  07C9               	addwf	_j,f
  1248  00A2  2898               	goto	l3155
  1249  00A3                     l291:	
  1250                           ;mainMaster.c: 121:         } else if(PORTDbits.RD0 == 0){
  1251                           
  1252  00A3  1C08               	btfss	8,0	;volatile
  1253                           
  1254                           ;mainMaster.c: 122:             change1 = 0;
  1255  00A4  01C7               	clrf	_change1
  1256  00A5                     l3163:	
  1257                           
  1258                           ;mainMaster.c: 143:         alarm = trip | PIR | IR;
  1259  00A5  0879               	movf	_trip,w
  1260  00A6  044D               	iorwf	_PIR,w
  1261  00A7  044C               	iorwf	_IR,w
  1262  00A8  00BF               	movwf	??_main
  1263  00A9  083F               	movf	??_main,w
  1264  00AA  00C4               	movwf	_alarm
  1265                           
  1266                           ;mainMaster.c: 162:         SSPCONbits.SSPEN = 0;
  1267  00AB  1294               	bcf	20,5	;volatile
  1268                           
  1269                           ;mainMaster.c: 163:         RCSTAbits.SPEN = 1;
  1270  00AC  1798               	bsf	24,7	;volatile
  1271                           
  1272                           ;mainMaster.c: 165:         if (UART_TX_Empty()){
  1273  00AD  120A  158A  23DD  120A  118A  	fcall	_UART_TX_Empty
  1274  00B2  3A00               	xorlw	0
  1275  00B3  1903               	skipnz
  1276  00B4  29B3               	goto	l3211
  1277                           
  1278                           ;mainMaster.c: 166:             UART_Write(temp[0]);
  1279  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  1280  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  1281  00B7  084F               	movf	_temp,w
  1282  00B8  120A  158A  2411  120A  118A  	fcall	_UART_Write
  1283                           
  1284                           ;mainMaster.c: 167:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1285  00BD  3003               	movlw	3
  1286  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  1287  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  1288  00C0  00C0               	movwf	??_main+1
  1289  00C1  3097               	movlw	151
  1290  00C2  00BF               	movwf	??_main
  1291  00C3                     u2807:	
  1292  00C3  0BBF               	decfsz	??_main,f
  1293  00C4  28C3               	goto	u2807
  1294  00C5  0BC0               	decfsz	??_main+1,f
  1295  00C6  28C3               	goto	u2807
  1296                           
  1297                           ;mainMaster.c: 168:             UART_Write(temp[1]);
  1298  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1299  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1300  00C9  0850               	movf	_temp+1,w
  1301  00CA  120A  158A  2411  120A  118A  	fcall	_UART_Write
  1302                           
  1303                           ;mainMaster.c: 169:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1304  00CF  3003               	movlw	3
  1305  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  1306  00D1  1303               	bcf	3,6	;RP1=0, select bank0
  1307  00D2  00C0               	movwf	??_main+1
  1308  00D3  3097               	movlw	151
  1309  00D4  00BF               	movwf	??_main
  1310  00D5                     u2817:	
  1311  00D5  0BBF               	decfsz	??_main,f
  1312  00D6  28D5               	goto	u2817
  1313  00D7  0BC0               	decfsz	??_main+1,f
  1314  00D8  28D5               	goto	u2817
  1315                           
  1316                           ;mainMaster.c: 170:             UART_Write(temp[2]);
  1317  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  1318  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  1319  00DB  0851               	movf	_temp+2,w
  1320  00DC  120A  158A  2411  120A  118A  	fcall	_UART_Write
  1321                           
  1322                           ;mainMaster.c: 171:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1323  00E1  3003               	movlw	3
  1324  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1325  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1326  00E4  00C0               	movwf	??_main+1
  1327  00E5  3097               	movlw	151
  1328  00E6  00BF               	movwf	??_main
  1329  00E7                     u2827:	
  1330  00E7  0BBF               	decfsz	??_main,f
  1331  00E8  28E7               	goto	u2827
  1332  00E9  0BC0               	decfsz	??_main+1,f
  1333  00EA  28E7               	goto	u2827
  1334                           
  1335                           ;mainMaster.c: 172:             UART_Write(temp[3]);
  1336  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  1337  00EC  1303               	bcf	3,6	;RP1=0, select bank0
  1338  00ED  0852               	movf	_temp+3,w
  1339  00EE  120A  158A  2411  120A  118A  	fcall	_UART_Write
  1340                           
  1341                           ;mainMaster.c: 173:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1342  00F3  3003               	movlw	3
  1343  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1344  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  1345  00F6  00C0               	movwf	??_main+1
  1346  00F7  3097               	movlw	151
  1347  00F8  00BF               	movwf	??_main
  1348  00F9                     u2837:	
  1349  00F9  0BBF               	decfsz	??_main,f
  1350  00FA  28F9               	goto	u2837
  1351  00FB  0BC0               	decfsz	??_main+1,f
  1352  00FC  28F9               	goto	u2837
  1353                           
  1354                           ;mainMaster.c: 174:             UART_Write(temp[4]);
  1355  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  1356  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  1357  00FF  0853               	movf	_temp+4,w
  1358  0100  120A  158A  2411  120A  118A  	fcall	_UART_Write
  1359                           
  1360                           ;mainMaster.c: 175:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1361  0105  3003               	movlw	3
  1362  0106  1283               	bcf	3,5	;RP0=0, select bank0
  1363  0107  1303               	bcf	3,6	;RP1=0, select bank0
  1364  0108  00C0               	movwf	??_main+1
  1365  0109  3097               	movlw	151
  1366  010A  00BF               	movwf	??_main
  1367  010B                     u2847:	
  1368  010B  0BBF               	decfsz	??_main,f
  1369  010C  290B               	goto	u2847
  1370  010D  0BC0               	decfsz	??_main+1,f
  1371  010E  290B               	goto	u2847
  1372                           
  1373                           ;mainMaster.c: 176:             UART_Write(time[0]);
  1374  010F  1283               	bcf	3,5	;RP0=0, select bank0
  1375  0110  1303               	bcf	3,6	;RP1=0, select bank0
  1376  0111  0855               	movf	_time,w
  1377  0112  120A  158A  2411  120A  118A  	fcall	_UART_Write
  1378                           
  1379                           ;mainMaster.c: 177:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1380  0117  3003               	movlw	3
  1381  0118  1283               	bcf	3,5	;RP0=0, select bank0
  1382  0119  1303               	bcf	3,6	;RP1=0, select bank0
  1383  011A  00C0               	movwf	??_main+1
  1384  011B  3097               	movlw	151
  1385  011C  00BF               	movwf	??_main
  1386  011D                     u2857:	
  1387  011D  0BBF               	decfsz	??_main,f
  1388  011E  291D               	goto	u2857
  1389  011F  0BC0               	decfsz	??_main+1,f
  1390  0120  291D               	goto	u2857
  1391                           
  1392                           ;mainMaster.c: 178:             UART_Write(time[1]);
  1393  0121  1283               	bcf	3,5	;RP0=0, select bank0
  1394  0122  1303               	bcf	3,6	;RP1=0, select bank0
  1395  0123  0856               	movf	_time+1,w
  1396  0124  120A  158A  2411  120A  118A  	fcall	_UART_Write
  1397                           
  1398                           ;mainMaster.c: 179:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1399  0129  3003               	movlw	3
  1400  012A  1283               	bcf	3,5	;RP0=0, select bank0
  1401  012B  1303               	bcf	3,6	;RP1=0, select bank0
  1402  012C  00C0               	movwf	??_main+1
  1403  012D  3097               	movlw	151
  1404  012E  00BF               	movwf	??_main
  1405  012F                     u2867:	
  1406  012F  0BBF               	decfsz	??_main,f
  1407  0130  292F               	goto	u2867
  1408  0131  0BC0               	decfsz	??_main+1,f
  1409  0132  292F               	goto	u2867
  1410                           
  1411                           ;mainMaster.c: 180:             UART_Write(time[2]);
  1412  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1413  0134  1303               	bcf	3,6	;RP1=0, select bank0
  1414  0135  0857               	movf	_time+2,w
  1415  0136  120A  158A  2411  120A  118A  	fcall	_UART_Write
  1416                           
  1417                           ;mainMaster.c: 181:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1418  013B  3003               	movlw	3
  1419  013C  1283               	bcf	3,5	;RP0=0, select bank0
  1420  013D  1303               	bcf	3,6	;RP1=0, select bank0
  1421  013E  00C0               	movwf	??_main+1
  1422  013F  3097               	movlw	151
  1423  0140  00BF               	movwf	??_main
  1424  0141                     u2877:	
  1425  0141  0BBF               	decfsz	??_main,f
  1426  0142  2941               	goto	u2877
  1427  0143  0BC0               	decfsz	??_main+1,f
  1428  0144  2941               	goto	u2877
  1429                           
  1430                           ;mainMaster.c: 182:             UART_Write(time[3]);
  1431  0145  1283               	bcf	3,5	;RP0=0, select bank0
  1432  0146  1303               	bcf	3,6	;RP1=0, select bank0
  1433  0147  0858               	movf	_time+3,w
  1434  0148  120A  158A  2411  120A  118A  	fcall	_UART_Write
  1435                           
  1436                           ;mainMaster.c: 183:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1437  014D  3003               	movlw	3
  1438  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1439  014F  1303               	bcf	3,6	;RP1=0, select bank0
  1440  0150  00C0               	movwf	??_main+1
  1441  0151  3097               	movlw	151
  1442  0152  00BF               	movwf	??_main
  1443  0153                     u2887:	
  1444  0153  0BBF               	decfsz	??_main,f
  1445  0154  2953               	goto	u2887
  1446  0155  0BC0               	decfsz	??_main+1,f
  1447  0156  2953               	goto	u2887
  1448                           
  1449                           ;mainMaster.c: 184:             UART_Write(time[4]);
  1450  0157  1283               	bcf	3,5	;RP0=0, select bank0
  1451  0158  1303               	bcf	3,6	;RP1=0, select bank0
  1452  0159  0859               	movf	_time+4,w
  1453  015A  120A  158A  2411  120A  118A  	fcall	_UART_Write
  1454                           
  1455                           ;mainMaster.c: 185:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1456  015F  3003               	movlw	3
  1457  0160  1283               	bcf	3,5	;RP0=0, select bank0
  1458  0161  1303               	bcf	3,6	;RP1=0, select bank0
  1459  0162  00C0               	movwf	??_main+1
  1460  0163  3097               	movlw	151
  1461  0164  00BF               	movwf	??_main
  1462  0165                     u2897:	
  1463  0165  0BBF               	decfsz	??_main,f
  1464  0166  2965               	goto	u2897
  1465  0167  0BC0               	decfsz	??_main+1,f
  1466  0168  2965               	goto	u2897
  1467                           
  1468                           ;mainMaster.c: 186:             UART_Write(door);
  1469  0169  087A               	movf	_door,w
  1470  016A  120A  158A  2411  120A  118A  	fcall	_UART_Write
  1471                           
  1472                           ;mainMaster.c: 187:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1473  016F  3003               	movlw	3
  1474  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1475  0171  1303               	bcf	3,6	;RP1=0, select bank0
  1476  0172  00C0               	movwf	??_main+1
  1477  0173  3097               	movlw	151
  1478  0174  00BF               	movwf	??_main
  1479  0175                     u2907:	
  1480  0175  0BBF               	decfsz	??_main,f
  1481  0176  2975               	goto	u2907
  1482  0177  0BC0               	decfsz	??_main+1,f
  1483  0178  2975               	goto	u2907
  1484                           
  1485                           ;mainMaster.c: 188:             UART_Write(trip);
  1486  0179  0879               	movf	_trip,w
  1487  017A  120A  158A  2411  120A  118A  	fcall	_UART_Write
  1488                           
  1489                           ;mainMaster.c: 189:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1490  017F  3003               	movlw	3
  1491  0180  1283               	bcf	3,5	;RP0=0, select bank0
  1492  0181  1303               	bcf	3,6	;RP1=0, select bank0
  1493  0182  00C0               	movwf	??_main+1
  1494  0183  3097               	movlw	151
  1495  0184  00BF               	movwf	??_main
  1496  0185                     u2917:	
  1497  0185  0BBF               	decfsz	??_main,f
  1498  0186  2985               	goto	u2917
  1499  0187  0BC0               	decfsz	??_main+1,f
  1500  0188  2985               	goto	u2917
  1501                           
  1502                           ;mainMaster.c: 190:             UART_Write(PIR);
  1503  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1504  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1505  018B  084D               	movf	_PIR,w
  1506  018C  120A  158A  2411  120A  118A  	fcall	_UART_Write
  1507                           
  1508                           ;mainMaster.c: 191:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1509  0191  3003               	movlw	3
  1510  0192  1283               	bcf	3,5	;RP0=0, select bank0
  1511  0193  1303               	bcf	3,6	;RP1=0, select bank0
  1512  0194  00C0               	movwf	??_main+1
  1513  0195  3097               	movlw	151
  1514  0196  00BF               	movwf	??_main
  1515  0197                     u2927:	
  1516  0197  0BBF               	decfsz	??_main,f
  1517  0198  2997               	goto	u2927
  1518  0199  0BC0               	decfsz	??_main+1,f
  1519  019A  2997               	goto	u2927
  1520                           
  1521                           ;mainMaster.c: 192:             UART_Write(IR);
  1522  019B  1283               	bcf	3,5	;RP0=0, select bank0
  1523  019C  1303               	bcf	3,6	;RP1=0, select bank0
  1524  019D  084C               	movf	_IR,w
  1525  019E  120A  158A  2411  120A  118A  	fcall	_UART_Write
  1526                           
  1527                           ;mainMaster.c: 193:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1528  01A3  3003               	movlw	3
  1529  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  1530  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  1531  01A6  00C0               	movwf	??_main+1
  1532  01A7  3097               	movlw	151
  1533  01A8  00BF               	movwf	??_main
  1534  01A9                     u2937:	
  1535  01A9  0BBF               	decfsz	??_main,f
  1536  01AA  29A9               	goto	u2937
  1537  01AB  0BC0               	decfsz	??_main+1,f
  1538  01AC  29A9               	goto	u2937
  1539                           
  1540                           ;mainMaster.c: 194:             UART_Write('A');
  1541  01AD  3041               	movlw	65
  1542  01AE  120A  158A  2411  120A  118A  	fcall	_UART_Write
  1543  01B3                     l3211:	
  1544                           
  1545                           ;mainMaster.c: 197:         if (door == 1){
  1546  01B3  037A               	decf	_door,w
  1547  01B4  1D03               	btfss	3,2
  1548  01B5  29B8               	goto	l3215
  1549                           
  1550                           ;mainMaster.c: 198:             val = 8;
  1551  01B6  3008               	movlw	8
  1552  01B7  29BC               	goto	L1
  1553  01B8                     l3215:	
  1554                           ;mainMaster.c: 199:         } else if (door == 0){
  1555                           
  1556  01B8  087A               	movf	_door,w
  1557  01B9  1D03               	btfss	3,2
  1558  01BA  29D5               	goto	l3237
  1559                           
  1560                           ;mainMaster.c: 200:             val = 17;
  1561  01BB  3011               	movlw	17
  1562  01BC                     L1:	
  1563  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  1564  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  1565  01BE  00BF               	movwf	??_main
  1566  01BF  083F               	movf	??_main,w
  1567  01C0  00C1               	movwf	_val
  1568  01C1  29D5               	goto	l3237
  1569  01C2                     l3219:	
  1570                           
  1571                           ;mainMaster.c: 205:                 day2 = "LUNES    ";
  1572  01C2  302D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1573  01C3  29D1               	goto	L8
  1574  01C4                     l3221:	
  1575                           ;mainMaster.c: 206:                 break;
  1576                           
  1577                           
  1578                           ;mainMaster.c: 208:                 day2 = "MARTES   ";
  1579  01C4  3041               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1580  01C5  29D1               	goto	L8
  1581  01C6                     l3223:	
  1582                           ;mainMaster.c: 209:                 break;
  1583                           
  1584                           
  1585                           ;mainMaster.c: 211:                 day2 = "MIERCOLES";
  1586  01C6  3069               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1587  01C7  29D1               	goto	L8
  1588  01C8                     l3225:	
  1589                           ;mainMaster.c: 212:                 break;
  1590                           
  1591                           
  1592                           ;mainMaster.c: 214:                 day2 = "JUEVES   ";
  1593  01C8  304B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1594  01C9  29D1               	goto	L8
  1595  01CA                     l3227:	
  1596                           ;mainMaster.c: 215:                 break;
  1597                           
  1598                           
  1599                           ;mainMaster.c: 217:                 day2 = "VIERNES  ";
  1600  01CA  305F               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1601  01CB  29D1               	goto	L8
  1602  01CC                     l3229:	
  1603                           ;mainMaster.c: 218:                 break;
  1604                           
  1605                           
  1606                           ;mainMaster.c: 220:                 day2 = "SABADO   ";
  1607  01CC  3037               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1608  01CD  29D1               	goto	L8
  1609  01CE                     l3231:	
  1610                           ;mainMaster.c: 221:                 break;
  1611                           
  1612                           
  1613                           ;mainMaster.c: 223:                 day2 = "DOMINGO  ";
  1614  01CE  3055               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1615  01CF  29D1               	goto	L8
  1616  01D0                     l3233:	
  1617                           ;mainMaster.c: 224:                 break;
  1618                           
  1619                           
  1620                           ;mainMaster.c: 226:                 day2 = "         ";
  1621  01D0  3023               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1622  01D1                     L8:	
  1623  01D1  00BF               	movwf	??_main
  1624  01D2  083F               	movf	??_main,w
  1625  01D3  00CE               	movwf	_day2
  1626                           
  1627                           ;mainMaster.c: 227:                 break;
  1628  01D4  29F6               	goto	l3239
  1629  01D5                     l3237:	
  1630  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  1631  01D6  1303               	bcf	3,6	;RP1=0, select bank0
  1632  01D7  084B               	movf	_day1,w
  1633  01D8  00BF               	movwf	??_main
  1634  01D9  01C0               	clrf	??_main+1
  1635                           
  1636                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1637                           ; Switch size 1, requested type "simple"
  1638                           ; Number of cases is 1, Range of values is 0 to 0
  1639                           ; switch strategies available:
  1640                           ; Name         Instructions Cycles
  1641                           ; simple_byte            4     3 (average)
  1642                           ; direct_byte           11     8 (fixed)
  1643                           ; jumptable            260     6 (fixed)
  1644                           ;	Chosen strategy is simple_byte
  1645  01DA  0840               	movf	??_main+1,w
  1646  01DB  3A00               	xorlw	0	; case 0
  1647  01DC  1903               	skipnz
  1648  01DD  29DF               	goto	l3377
  1649  01DE  29D0               	goto	l3233
  1650  01DF                     l3377:	
  1651                           
  1652                           ; Switch size 1, requested type "simple"
  1653                           ; Number of cases is 7, Range of values is 1 to 7
  1654                           ; switch strategies available:
  1655                           ; Name         Instructions Cycles
  1656                           ; simple_byte           22    12 (average)
  1657                           ; direct_byte           32    11 (fixed)
  1658                           ; jumptable            263     9 (fixed)
  1659                           ;	Chosen strategy is simple_byte
  1660  01DF  083F               	movf	??_main,w
  1661  01E0  3A01               	xorlw	1	; case 1
  1662  01E1  1903               	skipnz
  1663  01E2  29C2               	goto	l3219
  1664  01E3  3A03               	xorlw	3	; case 2
  1665  01E4  1903               	skipnz
  1666  01E5  29C4               	goto	l3221
  1667  01E6  3A01               	xorlw	1	; case 3
  1668  01E7  1903               	skipnz
  1669  01E8  29C6               	goto	l3223
  1670  01E9  3A07               	xorlw	7	; case 4
  1671  01EA  1903               	skipnz
  1672  01EB  29C8               	goto	l3225
  1673  01EC  3A01               	xorlw	1	; case 5
  1674  01ED  1903               	skipnz
  1675  01EE  29CA               	goto	l3227
  1676  01EF  3A03               	xorlw	3	; case 6
  1677  01F0  1903               	skipnz
  1678  01F1  29CC               	goto	l3229
  1679  01F2  3A01               	xorlw	1	; case 7
  1680  01F3  1903               	skipnz
  1681  01F4  29CE               	goto	l3231
  1682  01F5  29D0               	goto	l3233
  1683  01F6                     l3239:	
  1684                           
  1685                           ;mainMaster.c: 231:         if (strcmp(temp,"23.50") > 0){
  1686  01F6  3095               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1687  01F7  00BF               	movwf	??_main
  1688  01F8  083F               	movf	??_main,w
  1689  01F9  00F3               	movwf	strcmp@s2
  1690  01FA  304F               	movlw	(low (_temp| 0))& (0+255)
  1691  01FB  120A  158A  2570  120A  118A  	fcall	_strcmp
  1692  0200  0874               	movf	?_strcmp+1,w
  1693  0201  3A80               	xorlw	128
  1694  0202  00FF               	movwf	127
  1695  0203  3080               	movlw	128
  1696  0204  027F               	subwf	127,w
  1697  0205  1D03               	skipz
  1698  0206  2A09               	goto	u2685
  1699  0207  3001               	movlw	1
  1700  0208  0273               	subwf	?_strcmp,w
  1701  0209                     u2685:	
  1702  0209  1C03               	skipc
  1703  020A  2A0F               	goto	l319
  1704                           
  1705                           ;mainMaster.c: 232:             PORTAbits.RA0 = 1;
  1706  020B  1283               	bcf	3,5	;RP0=0, select bank0
  1707  020C  1303               	bcf	3,6	;RP1=0, select bank0
  1708  020D  1405               	bsf	5,0	;volatile
  1709                           
  1710                           ;mainMaster.c: 233:         } else {
  1711  020E  2A12               	goto	l320
  1712  020F                     l319:	
  1713                           
  1714                           ;mainMaster.c: 234:             PORTAbits.RA0 = 0;
  1715  020F  1283               	bcf	3,5	;RP0=0, select bank0
  1716  0210  1303               	bcf	3,6	;RP1=0, select bank0
  1717  0211  1005               	bcf	5,0	;volatile
  1718  0212                     l320:	
  1719                           ;mainMaster.c: 235:         }
  1720                           
  1721                           
  1722                           ;mainMaster.c: 238:         if(PORTCbits.RC0 == 1){
  1723  0212  1C07               	btfss	7,0	;volatile
  1724  0213  2A33               	goto	l3261
  1725                           
  1726                           ;mainMaster.c: 239:             if (change == 0){
  1727  0214  0848               	movf	_change,w
  1728  0215  1D03               	btfss	3,2
  1729  0216  2A34               	goto	l3263
  1730                           
  1731                           ;mainMaster.c: 240:                 state++;
  1732  0217  3001               	movlw	1
  1733  0218  00BF               	movwf	??_main
  1734  0219  083F               	movf	??_main,w
  1735  021A  07F8               	addwf	_state,f
  1736                           
  1737                           ;mainMaster.c: 241:                 Lcd_Clear();
  1738  021B  120A  158A  241B  120A  118A  	fcall	_Lcd_Clear
  1739                           
  1740                           ;mainMaster.c: 242:                 if (state > 2){
  1741  0220  3003               	movlw	3
  1742  0221  0278               	subwf	_state,w
  1743  0222  1803               	btfsc	3,0
  1744                           
  1745                           ;mainMaster.c: 243:                     state = 0;
  1746  0223  01F8               	clrf	_state
  1747  0224                     l3255:	
  1748                           
  1749                           ;mainMaster.c: 245:                 while(j < 50){
  1750  0224  3032               	movlw	50
  1751  0225  1283               	bcf	3,5	;RP0=0, select bank0
  1752  0226  1303               	bcf	3,6	;RP1=0, select bank0
  1753  0227  0249               	subwf	_j,w
  1754  0228  1803               	btfsc	3,0
  1755  0229  2A2F               	goto	l3257
  1756                           
  1757                           ;mainMaster.c: 246:                     j++;
  1758  022A  3001               	movlw	1
  1759  022B  00BF               	movwf	??_main
  1760  022C  083F               	movf	??_main,w
  1761  022D  07C9               	addwf	_j,f
  1762  022E  2A24               	goto	l3255
  1763  022F                     l3257:	
  1764                           
  1765                           ;mainMaster.c: 248:                 j = 0;
  1766  022F  01C9               	clrf	_j
  1767                           
  1768                           ;mainMaster.c: 249:                 change = 1;
  1769  0230  01C8               	clrf	_change
  1770  0231  0AC8               	incf	_change,f
  1771  0232  2A34               	goto	l3263
  1772  0233                     l3261:	
  1773                           
  1774                           ;mainMaster.c: 252:             change =0;
  1775  0233  01C8               	clrf	_change
  1776  0234                     l3263:	
  1777                           
  1778                           ;mainMaster.c: 255:         if (state == 0){
  1779  0234  0878               	movf	_state,w
  1780  0235  1D03               	btfss	3,2
  1781  0236  2A83               	goto	l3275
  1782                           
  1783                           ;mainMaster.c: 257:             Lcd_Set_Cursor(1,1);
  1784  0237  01F7               	clrf	Lcd_Set_Cursor@b
  1785  0238  0AF7               	incf	Lcd_Set_Cursor@b,f
  1786  0239  3001               	movlw	1
  1787  023A  120A  118A  24B0  120A  118A  	fcall	_Lcd_Set_Cursor
  1788                           
  1789                           ;mainMaster.c: 258:             Lcd_Write_String(time);
  1790  023F  3055               	movlw	(low (_time| 0))& (0+255)
  1791  0240  1283               	bcf	3,5	;RP0=0, select bank0
  1792  0241  1303               	bcf	3,6	;RP1=0, select bank0
  1793  0242  00A0               	movwf	Lcd_Write_String@a
  1794  0243  3000               	movlw	0
  1795  0244  00A1               	movwf	Lcd_Write_String@a+1
  1796  0245  120A  158A  26B9  120A  118A  	fcall	_Lcd_Write_String
  1797                           
  1798                           ;mainMaster.c: 260:             Lcd_Set_Cursor(1,7);
  1799  024A  3007               	movlw	7
  1800  024B  1283               	bcf	3,5	;RP0=0, select bank0
  1801  024C  1303               	bcf	3,6	;RP1=0, select bank0
  1802  024D  00BF               	movwf	??_main
  1803  024E  083F               	movf	??_main,w
  1804  024F  00F7               	movwf	Lcd_Set_Cursor@b
  1805  0250  3001               	movlw	1
  1806  0251  120A  118A  24B0  120A  118A  	fcall	_Lcd_Set_Cursor
  1807                           
  1808                           ;mainMaster.c: 261:             Lcd_Write_String(day2);
  1809  0256  1283               	bcf	3,5	;RP0=0, select bank0
  1810  0257  1303               	bcf	3,6	;RP1=0, select bank0
  1811  0258  084E               	movf	_day2,w
  1812  0259  00A0               	movwf	Lcd_Write_String@a
  1813  025A  3000               	movlw	0
  1814  025B  1D03               	btfss	3,2
  1815  025C  3080               	movlw	128
  1816  025D  00A1               	movwf	Lcd_Write_String@a+1
  1817  025E  120A  158A  26B9  120A  118A  	fcall	_Lcd_Write_String
  1818                           
  1819                           ;mainMaster.c: 263:             Lcd_Set_Cursor(2,1);
  1820  0263  01F7               	clrf	Lcd_Set_Cursor@b
  1821  0264  0AF7               	incf	Lcd_Set_Cursor@b,f
  1822  0265  3002               	movlw	2
  1823  0266  120A  118A  24B0  120A  118A  	fcall	_Lcd_Set_Cursor
  1824                           
  1825                           ;mainMaster.c: 264:             Lcd_Write_String(temp);
  1826  026B  304F               	movlw	(low (_temp| 0))& (0+255)
  1827  026C  1283               	bcf	3,5	;RP0=0, select bank0
  1828  026D  1303               	bcf	3,6	;RP1=0, select bank0
  1829  026E  00A0               	movwf	Lcd_Write_String@a
  1830  026F  3000               	movlw	0
  1831  0270  00A1               	movwf	Lcd_Write_String@a+1
  1832  0271  120A  158A  26B9  120A  118A  	fcall	_Lcd_Write_String
  1833                           
  1834                           ;mainMaster.c: 265:             Lcd_Write_Char(223);
  1835  0276  30DF               	movlw	223
  1836  0277  120A  158A  2608  120A  118A  	fcall	_Lcd_Write_Char
  1837                           
  1838                           ;mainMaster.c: 266:             Lcd_Write_Char('C');
  1839  027C  3043               	movlw	67
  1840  027D  120A  158A  2608  120A  118A  	fcall	_Lcd_Write_Char
  1841                           
  1842                           ;mainMaster.c: 268:         } else if (state == 1){
  1843  0282  282B               	goto	l3109
  1844  0283                     l3275:	
  1845  0283  0378               	decf	_state,w
  1846  0284  1D03               	btfss	3,2
  1847  0285  2AC1               	goto	l3293
  1848                           
  1849                           ;mainMaster.c: 270:             Lcd_Set_Cursor(1,1);
  1850  0286  01F7               	clrf	Lcd_Set_Cursor@b
  1851  0287  0AF7               	incf	Lcd_Set_Cursor@b,f
  1852  0288  3001               	movlw	1
  1853  0289  120A  118A  24B0  120A  118A  	fcall	_Lcd_Set_Cursor
  1854                           
  1855                           ;mainMaster.c: 271:             if (door == 1){
  1856  028E  037A               	decf	_door,w
  1857  028F  1D03               	btfss	3,2
  1858  0290  2A93               	goto	l3283
  1859                           
  1860                           ;mainMaster.c: 272:                 Lcd_Write_String("Door OPEN  ");
  1861  0291  300B               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1862  0292  2A94               	goto	L9
  1863  0293                     l3283:	
  1864                           ;mainMaster.c: 273:             } else {
  1865                           
  1866                           
  1867                           ;mainMaster.c: 274:                 Lcd_Write_String("Door CLOSED");
  1868  0293  3017               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1869  0294                     L9:	
  1870  0294  1283               	bcf	3,5	;RP0=0, select bank0
  1871  0295  1303               	bcf	3,6	;RP1=0, select bank0
  1872  0296  00A0               	movwf	Lcd_Write_String@a
  1873  0297  3080               	movlw	128
  1874  0298  00A1               	movwf	Lcd_Write_String@a+1
  1875  0299  120A  158A  26B9  120A  118A  	fcall	_Lcd_Write_String
  1876                           
  1877                           ;mainMaster.c: 277:             Lcd_Set_Cursor(2,1);
  1878  029E  01F7               	clrf	Lcd_Set_Cursor@b
  1879  029F  0AF7               	incf	Lcd_Set_Cursor@b,f
  1880  02A0  3002               	movlw	2
  1881  02A1  120A  118A  24B0  120A  118A  	fcall	_Lcd_Set_Cursor
  1882                           
  1883                           ;mainMaster.c: 278:             if (trip == 1){
  1884  02A6  0379               	decf	_trip,w
  1885  02A7  1D03               	btfss	3,2
  1886  02A8  2AB5               	goto	l3291
  1887                           
  1888                           ;mainMaster.c: 279:                 Lcd_Write_String("Trip ON ");
  1889  02A9  3073               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1890  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  1891  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  1892  02AC  00A0               	movwf	Lcd_Write_String@a
  1893  02AD  3080               	movlw	128
  1894  02AE  00A1               	movwf	Lcd_Write_String@a+1
  1895  02AF  120A  158A  26B9  120A  118A  	fcall	_Lcd_Write_String
  1896                           
  1897                           ;mainMaster.c: 280:             } else {
  1898  02B4  282B               	goto	l3109
  1899  02B5                     l3291:	
  1900                           
  1901                           ;mainMaster.c: 281:                 Lcd_Write_String("Trip OFF");
  1902  02B5  307C               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1903  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  1904  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  1905  02B8  00A0               	movwf	Lcd_Write_String@a
  1906  02B9  3080               	movlw	128
  1907  02BA  00A1               	movwf	Lcd_Write_String@a+1
  1908  02BB  120A  158A  26B9  120A  118A  	fcall	_Lcd_Write_String
  1909  02C0  282B               	goto	l3109
  1910  02C1                     l3293:	
  1911  02C1  3002               	movlw	2
  1912  02C2  0678               	xorwf	_state,w
  1913  02C3  1D03               	btfss	3,2
  1914  02C4  282B               	goto	l3109
  1915                           
  1916                           ;mainMaster.c: 286:             Lcd_Set_Cursor(1,1);
  1917  02C5  01F7               	clrf	Lcd_Set_Cursor@b
  1918  02C6  0AF7               	incf	Lcd_Set_Cursor@b,f
  1919  02C7  3001               	movlw	1
  1920  02C8  120A  118A  24B0  120A  118A  	fcall	_Lcd_Set_Cursor
  1921                           
  1922                           ;mainMaster.c: 287:             if (PIR == 1){
  1923  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  1924  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  1925  02CF  034D               	decf	_PIR,w
  1926  02D0  1D03               	btfss	3,2
  1927  02D1  2AD4               	goto	l3301
  1928                           
  1929                           ;mainMaster.c: 288:                 Lcd_Write_String("PIR ON ");
  1930  02D2  3085               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  1931  02D3  2AD5               	goto	L10
  1932  02D4                     l3301:	
  1933                           ;mainMaster.c: 289:             } else {
  1934                           
  1935                           
  1936                           ;mainMaster.c: 290:                 Lcd_Write_String("PIR OFF");
  1937  02D4  308D               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1938  02D5                     L10:	
  1939  02D5  00A0               	movwf	Lcd_Write_String@a
  1940  02D6  3080               	movlw	128
  1941  02D7  00A1               	movwf	Lcd_Write_String@a+1
  1942  02D8  120A  158A  26B9  120A  118A  	fcall	_Lcd_Write_String
  1943                           
  1944                           ;mainMaster.c: 293:             Lcd_Set_Cursor(2,1);
  1945  02DD  01F7               	clrf	Lcd_Set_Cursor@b
  1946  02DE  0AF7               	incf	Lcd_Set_Cursor@b,f
  1947  02DF  3002               	movlw	2
  1948  02E0  120A  118A  24B0  120A  118A  	fcall	_Lcd_Set_Cursor
  1949                           
  1950                           ;mainMaster.c: 294:             if (IR == 1){
  1951  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  1952  02E6  1303               	bcf	3,6	;RP1=0, select bank0
  1953  02E7  034C               	decf	_IR,w
  1954  02E8  1D03               	btfss	3,2
  1955  02E9  2AF4               	goto	l3309
  1956                           
  1957                           ;mainMaster.c: 295:                 Lcd_Write_String("IR ON ");
  1958  02EA  3086               	movlw	(low (((STR_14+1)-__stringbase)| (0+32768)))& (0+255)
  1959  02EB  00A0               	movwf	Lcd_Write_String@a
  1960  02EC  3080               	movlw	128
  1961  02ED  00A1               	movwf	Lcd_Write_String@a+1
  1962  02EE  120A  158A  26B9  120A  118A  	fcall	_Lcd_Write_String
  1963                           
  1964                           ;mainMaster.c: 296:             } else {
  1965  02F3  282B               	goto	l3109
  1966  02F4                     l3309:	
  1967                           
  1968                           ;mainMaster.c: 297:                 Lcd_Write_String("IR OFF");
  1969  02F4  308E               	movlw	(low (((STR_15+1)-__stringbase)| (0+32768)))& (0+255)
  1970  02F5  00A0               	movwf	Lcd_Write_String@a
  1971  02F6  3080               	movlw	128
  1972  02F7  00A1               	movwf	Lcd_Write_String@a+1
  1973  02F8  120A  158A  26B9  120A  118A  	fcall	_Lcd_Write_String
  1974  02FD  282B               	goto	l3109
  1975  02FE                     __end_of_main:	
  1976                           
  1977                           	psect	text1
  1978  0D70                     __ptext1:	
  1979 ;; *************** function _strcmp *****************
  1980 ;; Defined at:
  1981 ;;		line 33 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;  s1              1    wreg     PTR const unsigned char 
  1984 ;;		 -> temp(6), 
  1985 ;;  s2              1    3[COMMON] PTR const unsigned char 
  1986 ;;		 -> STR_9(6), 
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;  s1              1    1[BANK0 ] PTR const unsigned char 
  1989 ;;		 -> temp(6), 
  1990 ;;  r               1    0[BANK0 ] char 
  1991 ;; Return value:  Size  Location     Type
  1992 ;;                  2    3[COMMON] int 
  1993 ;; Registers used:
  1994 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1995 ;; Tracked objects:
  1996 ;;		On entry : 0/0
  1997 ;;		On exit  : 0/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2000 ;;      Params:         2       0       0       0       0
  2001 ;;      Locals:         0       2       0       0       0
  2002 ;;      Temps:          3       0       0       0       0
  2003 ;;      Totals:         5       2       0       0       0
  2004 ;;Total ram usage:        7 bytes
  2005 ;; Hardware stack levels used:    2
  2006 ;; Hardware stack levels required when called:    1
  2007 ;; This function calls:
  2008 ;;		Nothing
  2009 ;; This function is called by:
  2010 ;;		_main
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           
  2015                           ;psect for function _strcmp
  2016  0D70                     _strcmp:	
  2017                           
  2018                           ;incstack = 0
  2019                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  2020                           ;strcmp@s1 stored from wreg
  2021  0D70  1283               	bcf	3,5	;RP0=0, select bank0
  2022  0D71  1303               	bcf	3,6	;RP1=0, select bank0
  2023  0D72  00A1               	movwf	strcmp@s1
  2024  0D73  2D81               	goto	l3093
  2025  0D74                     l3095:	
  2026  0D74  0821               	movf	strcmp@s1,w
  2027  0D75  0084               	movwf	4
  2028  0D76  0800               	movf	0,w
  2029  0D77  1903               	btfsc	3,2
  2030  0D78  2D96               	goto	l3097
  2031  0D79  3001               	movlw	1
  2032  0D7A  00F5               	movwf	??_strcmp
  2033  0D7B  0875               	movf	??_strcmp,w
  2034  0D7C  07A1               	addwf	strcmp@s1,f
  2035  0D7D  3001               	movlw	1
  2036  0D7E  00F5               	movwf	??_strcmp
  2037  0D7F  0875               	movf	??_strcmp,w
  2038  0D80  07F3               	addwf	strcmp@s2,f
  2039  0D81                     l3093:	
  2040  0D81  0873               	movf	strcmp@s2,w
  2041  0D82  0084               	movwf	4
  2042  0D83  120A  118A  250A  120A  158A  	fcall	stringdir
  2043  0D88  00F5               	movwf	??_strcmp
  2044  0D89  0821               	movf	strcmp@s1,w
  2045  0D8A  0084               	movwf	4
  2046  0D8B  1383               	bcf	3,7	;select IRP bank0
  2047  0D8C  0800               	movf	0,w
  2048  0D8D  00F6               	movwf	??_strcmp+1
  2049  0D8E  0875               	movf	??_strcmp,w
  2050  0D8F  0276               	subwf	??_strcmp+1,w
  2051  0D90  00F7               	movwf	??_strcmp+2
  2052  0D91  0877               	movf	??_strcmp+2,w
  2053  0D92  00A0               	movwf	strcmp@r
  2054  0D93  0820               	movf	strcmp@r,w
  2055  0D94  1903               	btfsc	3,2
  2056  0D95  2D74               	goto	l3095
  2057  0D96                     l3097:	
  2058  0D96  0820               	movf	strcmp@r,w
  2059  0D97  00F3               	movwf	?_strcmp
  2060  0D98  01F4               	clrf	?_strcmp+1
  2061  0D99  1BF3               	btfsc	?_strcmp,7
  2062  0D9A  03F4               	decf	?_strcmp+1,f
  2063  0D9B  0008               	return
  2064  0D9C                     __end_of_strcmp:	
  2065                           
  2066                           	psect	text2
  2067  0EFA                     __ptext2:	
  2068 ;; *************** function _setup *****************
  2069 ;; Defined at:
  2070 ;;		line 303 in file "mainMaster.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;		None
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      void 
  2077 ;; Registers used:
  2078 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2084 ;;      Params:         0       0       0       0       0
  2085 ;;      Locals:         0       0       0       0       0
  2086 ;;      Temps:          0       0       0       0       0
  2087 ;;      Totals:         0       0       0       0       0
  2088 ;;Total ram usage:        0 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:    4
  2091 ;; This function calls:
  2092 ;;		_I2C_Master_Init
  2093 ;;		_Lcd_Init
  2094 ;;		_UART_Init
  2095 ;;		_initOscilador
  2096 ;; This function is called by:
  2097 ;;		_main
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           
  2102                           ;psect for function _setup
  2103  0EFA                     _setup:	
  2104                           
  2105                           ;mainMaster.c: 304:     initOscilador(7);
  2106                           
  2107                           ;incstack = 0
  2108                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2109  0EFA  3007               	movlw	7
  2110  0EFB  120A  158A  274B  120A  158A  	fcall	_initOscilador
  2111                           
  2112                           ;mainMaster.c: 305:     ANSELH = 0;
  2113  0F00  1683               	bsf	3,5	;RP0=1, select bank3
  2114  0F01  1703               	bsf	3,6	;RP1=1, select bank3
  2115  0F02  0189               	clrf	9	;volatile
  2116                           
  2117                           ;mainMaster.c: 306:     ANSEL = 0;
  2118  0F03  0188               	clrf	8	;volatile
  2119                           
  2120                           ;mainMaster.c: 307:     TRISB = 0;
  2121  0F04  1683               	bsf	3,5	;RP0=1, select bank1
  2122  0F05  1303               	bcf	3,6	;RP1=0, select bank1
  2123  0F06  0186               	clrf	6	;volatile
  2124                           
  2125                           ;mainMaster.c: 308:     TRISA = 0;
  2126  0F07  0185               	clrf	5	;volatile
  2127                           
  2128                           ;mainMaster.c: 309:     TRISD = 15;
  2129  0F08  300F               	movlw	15
  2130  0F09  0088               	movwf	8	;volatile
  2131                           
  2132                           ;mainMaster.c: 310:     PORTB = 0;
  2133  0F0A  1283               	bcf	3,5	;RP0=0, select bank0
  2134  0F0B  1303               	bcf	3,6	;RP1=0, select bank0
  2135  0F0C  0186               	clrf	6	;volatile
  2136                           
  2137                           ;mainMaster.c: 311:     PORTA = 0;
  2138  0F0D  0185               	clrf	5	;volatile
  2139                           
  2140                           ;mainMaster.c: 312:     TRISC = 0x01;
  2141  0F0E  3001               	movlw	1
  2142  0F0F  1683               	bsf	3,5	;RP0=1, select bank1
  2143  0F10  1303               	bcf	3,6	;RP1=0, select bank1
  2144  0F11  0087               	movwf	7	;volatile
  2145                           
  2146                           ;mainMaster.c: 313:     PORTC = 0;
  2147  0F12  1283               	bcf	3,5	;RP0=0, select bank0
  2148  0F13  1303               	bcf	3,6	;RP1=0, select bank0
  2149  0F14  0187               	clrf	7	;volatile
  2150                           
  2151                           ;mainMaster.c: 314:     i = 0;
  2152  0F15  01CA               	clrf	_i
  2153                           
  2154                           ;mainMaster.c: 315:     door = 0;
  2155  0F16  01FA               	clrf	_door
  2156                           
  2157                           ;mainMaster.c: 316:     trip = 0;
  2158  0F17  01F9               	clrf	_trip
  2159                           
  2160                           ;mainMaster.c: 317:     IR = 0;
  2161  0F18  01CC               	clrf	_IR
  2162                           
  2163                           ;mainMaster.c: 318:     PIR = 0;
  2164  0F19  01CD               	clrf	_PIR
  2165                           
  2166                           ;mainMaster.c: 319:     OPTION_REGbits.T0CS = 0;
  2167  0F1A  1683               	bsf	3,5	;RP0=1, select bank1
  2168  0F1B  1303               	bcf	3,6	;RP1=0, select bank1
  2169  0F1C  1281               	bcf	1,5	;volatile
  2170                           
  2171                           ;mainMaster.c: 320:     OPTION_REGbits.T0SE = 0;
  2172  0F1D  1201               	bcf	1,4	;volatile
  2173                           
  2174                           ;mainMaster.c: 321:     OPTION_REGbits.PSA = 1;
  2175  0F1E  1581               	bsf	1,3	;volatile
  2176                           
  2177                           ;mainMaster.c: 322:     OPTION_REGbits.PS2 = 0;
  2178  0F1F  1101               	bcf	1,2	;volatile
  2179                           
  2180                           ;mainMaster.c: 323:     OPTION_REGbits.PS1 = 0;
  2181  0F20  1081               	bcf	1,1	;volatile
  2182                           
  2183                           ;mainMaster.c: 324:     OPTION_REGbits.PS0 = 0;
  2184  0F21  1001               	bcf	1,0	;volatile
  2185                           
  2186                           ;mainMaster.c: 325:     TMR0 = 56;
  2187  0F22  3038               	movlw	56
  2188  0F23  1283               	bcf	3,5	;RP0=0, select bank0
  2189  0F24  1303               	bcf	3,6	;RP1=0, select bank0
  2190  0F25  0081               	movwf	1	;volatile
  2191                           
  2192                           ;mainMaster.c: 326:     INTCONbits.T0IF = 0;
  2193  0F26  110B               	bcf	11,2	;volatile
  2194                           
  2195                           ;mainMaster.c: 327:     INTCONbits.T0IE = 1;
  2196  0F27  168B               	bsf	11,5	;volatile
  2197                           
  2198                           ;mainMaster.c: 328:     INTCONbits.GIE = 1;
  2199  0F28  178B               	bsf	11,7	;volatile
  2200                           
  2201                           ;mainMaster.c: 329:     Lcd_Init();
  2202  0F29  120A  118A  276E  120A  158A  	fcall	_Lcd_Init
  2203                           
  2204                           ;mainMaster.c: 330:     UART_Init(9600);
  2205  0F2E  3000               	movlw	0
  2206  0F2F  1283               	bcf	3,5	;RP0=0, select bank0
  2207  0F30  1303               	bcf	3,6	;RP1=0, select bank0
  2208  0F31  00B1               	movwf	UART_Init@baudrate+3
  2209  0F32  3000               	movlw	0
  2210  0F33  00B0               	movwf	UART_Init@baudrate+2
  2211  0F34  3025               	movlw	37
  2212  0F35  00AF               	movwf	UART_Init@baudrate+1
  2213  0F36  3080               	movlw	128
  2214  0F37  00AE               	movwf	UART_Init@baudrate
  2215  0F38  120A  118A  23D8  120A  158A  	fcall	_UART_Init
  2216                           
  2217                           ;mainMaster.c: 331:     I2C_Master_Init(100000);
  2218  0F3D  3000               	movlw	0
  2219  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  2220  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  2221  0F40  00B0               	movwf	I2C_Master_Init@c+3
  2222  0F41  3001               	movlw	1
  2223  0F42  00AF               	movwf	I2C_Master_Init@c+2
  2224  0F43  3086               	movlw	134
  2225  0F44  00AE               	movwf	I2C_Master_Init@c+1
  2226  0F45  30A0               	movlw	160
  2227  0F46  00AD               	movwf	I2C_Master_Init@c
  2228  0F47  120A  158A  25D0   	fcall	_I2C_Master_Init
  2229  0F4A  0008               	return
  2230  0F4B                     __end_of_setup:	
  2231                           
  2232                           	psect	text3
  2233  0F4B                     __ptext3:	
  2234 ;; *************** function _initOscilador *****************
  2235 ;; Defined at:
  2236 ;;		line 11 in file "./Oscilador.h"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;  option          1    wreg     unsigned char 
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;  option          1    5[COMMON] unsigned char 
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  1    wreg      void 
  2243 ;; Registers used:
  2244 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2250 ;;      Params:         0       0       0       0       0
  2251 ;;      Locals:         1       0       0       0       0
  2252 ;;      Temps:          2       0       0       0       0
  2253 ;;      Totals:         3       0       0       0       0
  2254 ;;Total ram usage:        3 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    1
  2257 ;; This function calls:
  2258 ;;		Nothing
  2259 ;; This function is called by:
  2260 ;;		_setup
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           
  2265                           ;psect for function _initOscilador
  2266  0F4B                     _initOscilador:	
  2267                           
  2268                           ;incstack = 0
  2269                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  2270                           ;initOscilador@option stored from wreg
  2271  0F4B  00F5               	movwf	initOscilador@option
  2272                           
  2273                           ;./Oscilador.h: 13: 
  2274  0F4C  2F7C               	goto	l2105
  2275  0F4D                     l2085:	
  2276                           
  2277                           ;./Oscilador.h: 16:         case 3:
  2278  0F4D  308F               	movlw	-113
  2279  0F4E  1683               	bsf	3,5	;RP0=1, select bank1
  2280  0F4F  1303               	bcf	3,6	;RP1=0, select bank1
  2281  0F50  058F               	andwf	15,f	;volatile
  2282                           
  2283                           ;./Oscilador.h: 17: 
  2284  0F51  2F9E               	goto	l193
  2285  0F52                     l2087:	
  2286                           
  2287                           ;./Oscilador.h: 20:         case 4:
  2288  0F52  1683               	bsf	3,5	;RP0=1, select bank1
  2289  0F53  1303               	bcf	3,6	;RP1=0, select bank1
  2290  0F54  080F               	movf	15,w	;volatile
  2291  0F55  398F               	andlw	-113
  2292  0F56  3810               	iorlw	16
  2293  0F57  2F75               	goto	L15
  2294  0F58                     l2089:	
  2295                           ;./Oscilador.h: 21: 
  2296                           
  2297                           
  2298                           ;./Oscilador.h: 24:         case 5:
  2299  0F58  1683               	bsf	3,5	;RP0=1, select bank1
  2300  0F59  1303               	bcf	3,6	;RP1=0, select bank1
  2301  0F5A  080F               	movf	15,w	;volatile
  2302  0F5B  398F               	andlw	-113
  2303  0F5C  3820               	iorlw	32
  2304  0F5D  2F75               	goto	L15
  2305  0F5E                     l2091:	
  2306                           ;./Oscilador.h: 25: 
  2307                           
  2308                           
  2309                           ;./Oscilador.h: 28:         case 6:
  2310  0F5E  1683               	bsf	3,5	;RP0=1, select bank1
  2311  0F5F  1303               	bcf	3,6	;RP1=0, select bank1
  2312  0F60  080F               	movf	15,w	;volatile
  2313  0F61  398F               	andlw	-113
  2314  0F62  3830               	iorlw	48
  2315  0F63  2F75               	goto	L15
  2316  0F64                     l2093:	
  2317                           ;./Oscilador.h: 29: 
  2318                           
  2319                           
  2320                           ;./Oscilador.h: 32:         case 7:
  2321  0F64  1683               	bsf	3,5	;RP0=1, select bank1
  2322  0F65  1303               	bcf	3,6	;RP1=0, select bank1
  2323  0F66  080F               	movf	15,w	;volatile
  2324  0F67  398F               	andlw	-113
  2325  0F68  3840               	iorlw	64
  2326  0F69  2F75               	goto	L15
  2327  0F6A                     l2095:	
  2328                           ;./Oscilador.h: 33: 
  2329                           
  2330                           
  2331                           ;./Oscilador.h: 36:         default:
  2332  0F6A  1683               	bsf	3,5	;RP0=1, select bank1
  2333  0F6B  1303               	bcf	3,6	;RP1=0, select bank1
  2334  0F6C  080F               	movf	15,w	;volatile
  2335  0F6D  398F               	andlw	-113
  2336  0F6E  3850               	iorlw	80
  2337  0F6F  2F75               	goto	L15
  2338  0F70                     l2097:	
  2339                           ;./Oscilador.h: 37: 
  2340                           
  2341                           
  2342                           ;./Oscilador.h: 40:     }
  2343  0F70  1683               	bsf	3,5	;RP0=1, select bank1
  2344  0F71  1303               	bcf	3,6	;RP1=0, select bank1
  2345  0F72  080F               	movf	15,w	;volatile
  2346  0F73  398F               	andlw	-113
  2347  0F74  3860               	iorlw	96
  2348  0F75                     L15:	
  2349  0F75  008F               	movwf	15	;volatile
  2350                           
  2351                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  2352  0F76  2F9E               	goto	l193
  2353  0F77                     l2099:	
  2354  0F77                     l2101:	
  2355  0F77  3070               	movlw	112
  2356  0F78  1683               	bsf	3,5	;RP0=1, select bank1
  2357  0F79  1303               	bcf	3,6	;RP1=0, select bank1
  2358  0F7A  048F               	iorwf	15,f	;volatile
  2359  0F7B  2F9E               	goto	l193
  2360  0F7C                     l2105:	
  2361  0F7C  0875               	movf	initOscilador@option,w
  2362  0F7D  00F3               	movwf	??_initOscilador
  2363  0F7E  01F4               	clrf	??_initOscilador+1
  2364                           
  2365                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2366                           ; Switch size 1, requested type "simple"
  2367                           ; Number of cases is 1, Range of values is 0 to 0
  2368                           ; switch strategies available:
  2369                           ; Name         Instructions Cycles
  2370                           ; simple_byte            4     3 (average)
  2371                           ; direct_byte           11     8 (fixed)
  2372                           ; jumptable            260     6 (fixed)
  2373                           ;	Chosen strategy is simple_byte
  2374  0F7F  0874               	movf	??_initOscilador+1,w
  2375  0F80  3A00               	xorlw	0	; case 0
  2376  0F81  1903               	skipnz
  2377  0F82  2F84               	goto	l3379
  2378  0F83  2F77               	goto	l2101
  2379  0F84                     l3379:	
  2380                           
  2381                           ; Switch size 1, requested type "simple"
  2382                           ; Number of cases is 8, Range of values is 0 to 7
  2383                           ; switch strategies available:
  2384                           ; Name         Instructions Cycles
  2385                           ; simple_byte           25    13 (average)
  2386                           ; direct_byte           32     8 (fixed)
  2387                           ; jumptable            260     6 (fixed)
  2388                           ;	Chosen strategy is simple_byte
  2389  0F84  0873               	movf	??_initOscilador,w
  2390  0F85  3A00               	xorlw	0	; case 0
  2391  0F86  1903               	skipnz
  2392  0F87  2F4D               	goto	l2085
  2393  0F88  3A01               	xorlw	1	; case 1
  2394  0F89  1903               	skipnz
  2395  0F8A  2F52               	goto	l2087
  2396  0F8B  3A03               	xorlw	3	; case 2
  2397  0F8C  1903               	skipnz
  2398  0F8D  2F58               	goto	l2089
  2399  0F8E  3A01               	xorlw	1	; case 3
  2400  0F8F  1903               	skipnz
  2401  0F90  2F5E               	goto	l2091
  2402  0F91  3A07               	xorlw	7	; case 4
  2403  0F92  1903               	skipnz
  2404  0F93  2F64               	goto	l2093
  2405  0F94  3A01               	xorlw	1	; case 5
  2406  0F95  1903               	skipnz
  2407  0F96  2F6A               	goto	l2095
  2408  0F97  3A03               	xorlw	3	; case 6
  2409  0F98  1903               	skipnz
  2410  0F99  2F70               	goto	l2097
  2411  0F9A  3A01               	xorlw	1	; case 7
  2412  0F9B  1903               	skipnz
  2413  0F9C  2F77               	goto	l2099
  2414  0F9D  2F77               	goto	l2101
  2415  0F9E                     l193:	
  2416  0F9E  140F               	bsf	15,0	;volatile
  2417  0F9F  0008               	return
  2418  0FA0                     __end_of_initOscilador:	
  2419                           
  2420                           	psect	text4
  2421  03D8                     __ptext4:	
  2422 ;; *************** function _UART_Init *****************
  2423 ;; Defined at:
  2424 ;;		line 8 in file "./UART.h"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;  baudrate        4   14[BANK0 ] const long 
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;  x               2    4[COMMON] unsigned int 
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  1    wreg      unsigned char 
  2431 ;; Registers used:
  2432 ;;		wreg, status,2, status,0, pclath, cstack
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2438 ;;      Params:         0       4       0       0       0
  2439 ;;      Locals:         2       0       0       0       0
  2440 ;;      Temps:          0      12       0       0       0
  2441 ;;      Totals:         2      16       0       0       0
  2442 ;;Total ram usage:       18 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; Hardware stack levels required when called:    2
  2445 ;; This function calls:
  2446 ;;		___aldiv
  2447 ;; This function is called by:
  2448 ;;		_setup
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           
  2453                           ;psect for function _UART_Init
  2454  03D8                     _UART_Init:	
  2455                           
  2456                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
  2457                           
  2458                           ;incstack = 0
  2459                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  2460  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  2461  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  2462  03DA  082E               	movf	UART_Init@baudrate,w
  2463  03DB  00B2               	movwf	??_UART_Init
  2464  03DC  082F               	movf	UART_Init@baudrate+1,w
  2465  03DD  00B3               	movwf	??_UART_Init+1
  2466  03DE  0830               	movf	UART_Init@baudrate+2,w
  2467  03DF  00B4               	movwf	??_UART_Init+2
  2468  03E0  0831               	movf	UART_Init@baudrate+3,w
  2469  03E1  00B5               	movwf	??_UART_Init+3
  2470  03E2  3006               	movlw	6
  2471  03E3                     u2295:	
  2472  03E3  1003               	clrc
  2473  03E4  0DB2               	rlf	??_UART_Init,f
  2474  03E5  0DB3               	rlf	??_UART_Init+1,f
  2475  03E6  0DB4               	rlf	??_UART_Init+2,f
  2476  03E7  0DB5               	rlf	??_UART_Init+3,f
  2477  03E8  3EFF               	addlw	-1
  2478  03E9  1D03               	skipz
  2479  03EA  2BE3               	goto	u2295
  2480  03EB  0835               	movf	??_UART_Init+3,w
  2481  03EC  00A3               	movwf	___aldiv@divisor+3
  2482  03ED  0834               	movf	??_UART_Init+2,w
  2483  03EE  00A2               	movwf	___aldiv@divisor+2
  2484  03EF  0833               	movf	??_UART_Init+1,w
  2485  03F0  00A1               	movwf	___aldiv@divisor+1
  2486  03F1  0832               	movf	??_UART_Init,w
  2487  03F2  00A0               	movwf	___aldiv@divisor
  2488  03F3  082E               	movf	UART_Init@baudrate,w
  2489  03F4  00B6               	movwf	??_UART_Init+4
  2490  03F5  082F               	movf	UART_Init@baudrate+1,w
  2491  03F6  00B7               	movwf	??_UART_Init+5
  2492  03F7  0830               	movf	UART_Init@baudrate+2,w
  2493  03F8  00B8               	movwf	??_UART_Init+6
  2494  03F9  0831               	movf	UART_Init@baudrate+3,w
  2495  03FA  00B9               	movwf	??_UART_Init+7
  2496  03FB  3006               	movlw	6
  2497  03FC                     u2305:	
  2498  03FC  1003               	clrc
  2499  03FD  0DB6               	rlf	??_UART_Init+4,f
  2500  03FE  0DB7               	rlf	??_UART_Init+5,f
  2501  03FF  0DB8               	rlf	??_UART_Init+6,f
  2502  0400  0DB9               	rlf	??_UART_Init+7,f
  2503  0401  3EFF               	addlw	-1
  2504  0402  1D03               	skipz
  2505  0403  2BFC               	goto	u2305
  2506  0404  3000               	movlw	0
  2507  0405  00BA               	movwf	??_UART_Init+8
  2508  0406  3012               	movlw	18
  2509  0407  00BB               	movwf	??_UART_Init+9
  2510  0408  307A               	movlw	122
  2511  0409  00BC               	movwf	??_UART_Init+10
  2512  040A  3000               	movlw	0
  2513  040B  00BD               	movwf	??_UART_Init+11
  2514  040C  0836               	movf	??_UART_Init+4,w
  2515  040D  02BA               	subwf	??_UART_Init+8,f
  2516  040E  0837               	movf	??_UART_Init+5,w
  2517  040F  1C03               	skipc
  2518  0410  0F37               	incfsz	??_UART_Init+5,w
  2519  0411  2C13               	goto	u2311
  2520  0412  2C14               	goto	u2312
  2521  0413                     u2311:	
  2522  0413  02BB               	subwf	??_UART_Init+9,f
  2523  0414                     u2312:	
  2524  0414  0838               	movf	??_UART_Init+6,w
  2525  0415  1C03               	skipc
  2526  0416  0F38               	incfsz	??_UART_Init+6,w
  2527  0417  2C19               	goto	u2313
  2528  0418  2C1A               	goto	u2314
  2529  0419                     u2313:	
  2530  0419  02BC               	subwf	??_UART_Init+10,f
  2531  041A                     u2314:	
  2532  041A  0839               	movf	??_UART_Init+7,w
  2533  041B  1C03               	skipc
  2534  041C  0F39               	incfsz	??_UART_Init+7,w
  2535  041D  2C1F               	goto	u2315
  2536  041E  2C20               	goto	u2316
  2537  041F                     u2315:	
  2538  041F  02BD               	subwf	??_UART_Init+11,f
  2539  0420                     u2316:	
  2540  0420  083D               	movf	??_UART_Init+11,w
  2541  0421  00A7               	movwf	___aldiv@dividend+3
  2542  0422  083C               	movf	??_UART_Init+10,w
  2543  0423  00A6               	movwf	___aldiv@dividend+2
  2544  0424  083B               	movf	??_UART_Init+9,w
  2545  0425  00A5               	movwf	___aldiv@dividend+1
  2546  0426  083A               	movf	??_UART_Init+8,w
  2547  0427  00A4               	movwf	___aldiv@dividend
  2548  0428  120A  118A  2656  120A  118A  	fcall	___aldiv
  2549  042D  1283               	bcf	3,5	;RP0=0, select bank0
  2550  042E  1303               	bcf	3,6	;RP1=0, select bank0
  2551  042F  0821               	movf	?___aldiv+1,w
  2552  0430  00F5               	movwf	UART_Init@x+1
  2553  0431  0820               	movf	?___aldiv,w
  2554  0432  00F4               	movwf	UART_Init@x
  2555                           
  2556                           ;./UART.h: 12:  if(x>255)
  2557  0433  3001               	movlw	1
  2558  0434  0275               	subwf	UART_Init@x+1,w
  2559  0435  3000               	movlw	0
  2560  0436  1903               	skipnz
  2561  0437  0274               	subwf	UART_Init@x,w
  2562  0438  1C03               	skipc
  2563  0439  2C96               	goto	l2857
  2564                           
  2565                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  2566  043A  082E               	movf	UART_Init@baudrate,w
  2567  043B  00B2               	movwf	??_UART_Init
  2568  043C  082F               	movf	UART_Init@baudrate+1,w
  2569  043D  00B3               	movwf	??_UART_Init+1
  2570  043E  0830               	movf	UART_Init@baudrate+2,w
  2571  043F  00B4               	movwf	??_UART_Init+2
  2572  0440  0831               	movf	UART_Init@baudrate+3,w
  2573  0441  00B5               	movwf	??_UART_Init+3
  2574  0442  3004               	movlw	4
  2575  0443                     u2335:	
  2576  0443  1003               	clrc
  2577  0444  0DB2               	rlf	??_UART_Init,f
  2578  0445  0DB3               	rlf	??_UART_Init+1,f
  2579  0446  0DB4               	rlf	??_UART_Init+2,f
  2580  0447  0DB5               	rlf	??_UART_Init+3,f
  2581  0448  3EFF               	addlw	-1
  2582  0449  1D03               	skipz
  2583  044A  2C43               	goto	u2335
  2584  044B  0835               	movf	??_UART_Init+3,w
  2585  044C  00A3               	movwf	___aldiv@divisor+3
  2586  044D  0834               	movf	??_UART_Init+2,w
  2587  044E  00A2               	movwf	___aldiv@divisor+2
  2588  044F  0833               	movf	??_UART_Init+1,w
  2589  0450  00A1               	movwf	___aldiv@divisor+1
  2590  0451  0832               	movf	??_UART_Init,w
  2591  0452  00A0               	movwf	___aldiv@divisor
  2592  0453  082E               	movf	UART_Init@baudrate,w
  2593  0454  00B6               	movwf	??_UART_Init+4
  2594  0455  082F               	movf	UART_Init@baudrate+1,w
  2595  0456  00B7               	movwf	??_UART_Init+5
  2596  0457  0830               	movf	UART_Init@baudrate+2,w
  2597  0458  00B8               	movwf	??_UART_Init+6
  2598  0459  0831               	movf	UART_Init@baudrate+3,w
  2599  045A  00B9               	movwf	??_UART_Init+7
  2600  045B  3004               	movlw	4
  2601  045C                     u2345:	
  2602  045C  1003               	clrc
  2603  045D  0DB6               	rlf	??_UART_Init+4,f
  2604  045E  0DB7               	rlf	??_UART_Init+5,f
  2605  045F  0DB8               	rlf	??_UART_Init+6,f
  2606  0460  0DB9               	rlf	??_UART_Init+7,f
  2607  0461  3EFF               	addlw	-1
  2608  0462  1D03               	skipz
  2609  0463  2C5C               	goto	u2345
  2610  0464  3000               	movlw	0
  2611  0465  00BA               	movwf	??_UART_Init+8
  2612  0466  3012               	movlw	18
  2613  0467  00BB               	movwf	??_UART_Init+9
  2614  0468  307A               	movlw	122
  2615  0469  00BC               	movwf	??_UART_Init+10
  2616  046A  3000               	movlw	0
  2617  046B  00BD               	movwf	??_UART_Init+11
  2618  046C  0836               	movf	??_UART_Init+4,w
  2619  046D  02BA               	subwf	??_UART_Init+8,f
  2620  046E  0837               	movf	??_UART_Init+5,w
  2621  046F  1C03               	skipc
  2622  0470  0F37               	incfsz	??_UART_Init+5,w
  2623  0471  2C73               	goto	u2351
  2624  0472  2C74               	goto	u2352
  2625  0473                     u2351:	
  2626  0473  02BB               	subwf	??_UART_Init+9,f
  2627  0474                     u2352:	
  2628  0474  0838               	movf	??_UART_Init+6,w
  2629  0475  1C03               	skipc
  2630  0476  0F38               	incfsz	??_UART_Init+6,w
  2631  0477  2C79               	goto	u2353
  2632  0478  2C7A               	goto	u2354
  2633  0479                     u2353:	
  2634  0479  02BC               	subwf	??_UART_Init+10,f
  2635  047A                     u2354:	
  2636  047A  0839               	movf	??_UART_Init+7,w
  2637  047B  1C03               	skipc
  2638  047C  0F39               	incfsz	??_UART_Init+7,w
  2639  047D  2C7F               	goto	u2355
  2640  047E  2C80               	goto	u2356
  2641  047F                     u2355:	
  2642  047F  02BD               	subwf	??_UART_Init+11,f
  2643  0480                     u2356:	
  2644  0480  083D               	movf	??_UART_Init+11,w
  2645  0481  00A7               	movwf	___aldiv@dividend+3
  2646  0482  083C               	movf	??_UART_Init+10,w
  2647  0483  00A6               	movwf	___aldiv@dividend+2
  2648  0484  083B               	movf	??_UART_Init+9,w
  2649  0485  00A5               	movwf	___aldiv@dividend+1
  2650  0486  083A               	movf	??_UART_Init+8,w
  2651  0487  00A4               	movwf	___aldiv@dividend
  2652  0488  120A  118A  2656  120A  118A  	fcall	___aldiv
  2653  048D  1283               	bcf	3,5	;RP0=0, select bank0
  2654  048E  1303               	bcf	3,6	;RP1=0, select bank0
  2655  048F  0821               	movf	?___aldiv+1,w
  2656  0490  00F5               	movwf	UART_Init@x+1
  2657  0491  0820               	movf	?___aldiv,w
  2658  0492  00F4               	movwf	UART_Init@x
  2659                           
  2660                           ;./UART.h: 15:   BRGH = 1;
  2661  0493  1683               	bsf	3,5	;RP0=1, select bank1
  2662  0494  1303               	bcf	3,6	;RP1=0, select bank1
  2663  0495  1518               	bsf	24,2	;volatile
  2664  0496                     l2857:	
  2665                           
  2666                           ;./UART.h: 17:  if(x<256)
  2667  0496  3001               	movlw	1
  2668  0497  0275               	subwf	UART_Init@x+1,w
  2669  0498  3000               	movlw	0
  2670  0499  1903               	skipnz
  2671  049A  0274               	subwf	UART_Init@x,w
  2672  049B  1803               	skipnc
  2673  049C  0008               	return
  2674                           
  2675                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  2676  049D  0874               	movf	UART_Init@x,w
  2677  049E  1683               	bsf	3,5	;RP0=1, select bank1
  2678  049F  1303               	bcf	3,6	;RP1=0, select bank1
  2679  04A0  0099               	movwf	25	;volatile
  2680                           
  2681                           ;./UART.h: 20:    SYNC = 0;
  2682  04A1  1218               	bcf	24,4	;volatile
  2683                           
  2684                           ;./UART.h: 21:    SPEN = 1;
  2685  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  2686  04A3  1303               	bcf	3,6	;RP1=0, select bank0
  2687  04A4  1798               	bsf	24,7	;volatile
  2688                           
  2689                           ;./UART.h: 22:           TRISC7 = 1;
  2690  04A5  1683               	bsf	3,5	;RP0=1, select bank1
  2691  04A6  1303               	bcf	3,6	;RP1=0, select bank1
  2692  04A7  1787               	bsf	7,7	;volatile
  2693                           
  2694                           ;./UART.h: 23:           TRISC6 = 1;
  2695  04A8  1707               	bsf	7,6	;volatile
  2696                           
  2697                           ;./UART.h: 24:           CREN = 1;
  2698  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  2699  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  2700  04AB  1618               	bsf	24,4	;volatile
  2701                           
  2702                           ;./UART.h: 25:           TXEN = 1;
  2703  04AC  1683               	bsf	3,5	;RP0=1, select bank1
  2704  04AD  1303               	bcf	3,6	;RP1=0, select bank1
  2705  04AE  1698               	bsf	24,5	;volatile
  2706  04AF  0008               	return
  2707  04B0                     __end_of_UART_Init:	
  2708                           
  2709                           	psect	text5
  2710  0656                     __ptext5:	
  2711 ;; *************** function ___aldiv *****************
  2712 ;; Defined at:
  2713 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;  divisor         4    0[BANK0 ] long 
  2716 ;;  dividend        4    4[BANK0 ] long 
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;  quotient        4   10[BANK0 ] long 
  2719 ;;  sign            1    9[BANK0 ] unsigned char 
  2720 ;;  counter         1    8[BANK0 ] unsigned char 
  2721 ;; Return value:  Size  Location     Type
  2722 ;;                  4    0[BANK0 ] long 
  2723 ;; Registers used:
  2724 ;;		wreg, status,2, status,0
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2730 ;;      Params:         0       8       0       0       0
  2731 ;;      Locals:         0       6       0       0       0
  2732 ;;      Temps:          1       0       0       0       0
  2733 ;;      Totals:         1      14       0       0       0
  2734 ;;Total ram usage:       15 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; Hardware stack levels required when called:    1
  2737 ;; This function calls:
  2738 ;;		Nothing
  2739 ;; This function is called by:
  2740 ;;		_UART_Init
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           
  2745                           ;psect for function ___aldiv
  2746  0656                     ___aldiv:	
  2747                           
  2748                           ;incstack = 0
  2749                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2750  0656  1283               	bcf	3,5	;RP0=0, select bank0
  2751  0657  1303               	bcf	3,6	;RP1=0, select bank0
  2752  0658  01A9               	clrf	___aldiv@sign
  2753  0659  1FA3               	btfss	___aldiv@divisor+3,7
  2754  065A  2E68               	goto	l557
  2755  065B  09A0               	comf	___aldiv@divisor,f
  2756  065C  09A1               	comf	___aldiv@divisor+1,f
  2757  065D  09A2               	comf	___aldiv@divisor+2,f
  2758  065E  09A3               	comf	___aldiv@divisor+3,f
  2759  065F  0AA0               	incf	___aldiv@divisor,f
  2760  0660  1903               	skipnz
  2761  0661  0AA1               	incf	___aldiv@divisor+1,f
  2762  0662  1903               	skipnz
  2763  0663  0AA2               	incf	___aldiv@divisor+2,f
  2764  0664  1903               	skipnz
  2765  0665  0AA3               	incf	___aldiv@divisor+3,f
  2766  0666  01A9               	clrf	___aldiv@sign
  2767  0667  0AA9               	incf	___aldiv@sign,f
  2768  0668                     l557:	
  2769  0668  1FA7               	btfss	___aldiv@dividend+3,7
  2770  0669  2E79               	goto	l2739
  2771  066A  09A4               	comf	___aldiv@dividend,f
  2772  066B  09A5               	comf	___aldiv@dividend+1,f
  2773  066C  09A6               	comf	___aldiv@dividend+2,f
  2774  066D  09A7               	comf	___aldiv@dividend+3,f
  2775  066E  0AA4               	incf	___aldiv@dividend,f
  2776  066F  1903               	skipnz
  2777  0670  0AA5               	incf	___aldiv@dividend+1,f
  2778  0671  1903               	skipnz
  2779  0672  0AA6               	incf	___aldiv@dividend+2,f
  2780  0673  1903               	skipnz
  2781  0674  0AA7               	incf	___aldiv@dividend+3,f
  2782  0675  3001               	movlw	1
  2783  0676  00F3               	movwf	??___aldiv
  2784  0677  0873               	movf	??___aldiv,w
  2785  0678  06A9               	xorwf	___aldiv@sign,f
  2786  0679                     l2739:	
  2787  0679  3000               	movlw	0
  2788  067A  00AD               	movwf	___aldiv@quotient+3
  2789  067B  3000               	movlw	0
  2790  067C  00AC               	movwf	___aldiv@quotient+2
  2791  067D  3000               	movlw	0
  2792  067E  00AB               	movwf	___aldiv@quotient+1
  2793  067F  3000               	movlw	0
  2794  0680  00AA               	movwf	___aldiv@quotient
  2795  0681  0823               	movf	___aldiv@divisor+3,w
  2796  0682  0422               	iorwf	___aldiv@divisor+2,w
  2797  0683  0421               	iorwf	___aldiv@divisor+1,w
  2798  0684  0420               	iorwf	___aldiv@divisor,w
  2799  0685  1903               	skipnz
  2800  0686  2ECE               	goto	l2761
  2801  0687  01A8               	clrf	___aldiv@counter
  2802  0688  0AA8               	incf	___aldiv@counter,f
  2803  0689                     l2747:	
  2804  0689  1BA3               	btfsc	___aldiv@divisor+3,7
  2805  068A  2E99               	goto	l2749
  2806  068B  3001               	movlw	1
  2807  068C  00F3               	movwf	??___aldiv
  2808  068D                     u2135:	
  2809  068D  1003               	clrc
  2810  068E  0DA0               	rlf	___aldiv@divisor,f
  2811  068F  0DA1               	rlf	___aldiv@divisor+1,f
  2812  0690  0DA2               	rlf	___aldiv@divisor+2,f
  2813  0691  0DA3               	rlf	___aldiv@divisor+3,f
  2814  0692  0BF3               	decfsz	??___aldiv,f
  2815  0693  2E8D               	goto	u2135
  2816  0694  3001               	movlw	1
  2817  0695  00F3               	movwf	??___aldiv
  2818  0696  0873               	movf	??___aldiv,w
  2819  0697  07A8               	addwf	___aldiv@counter,f
  2820  0698  2E89               	goto	l2747
  2821  0699                     l2749:	
  2822  0699  3001               	movlw	1
  2823  069A  00F3               	movwf	??___aldiv
  2824  069B                     u2155:	
  2825  069B  1003               	clrc
  2826  069C  0DAA               	rlf	___aldiv@quotient,f
  2827  069D  0DAB               	rlf	___aldiv@quotient+1,f
  2828  069E  0DAC               	rlf	___aldiv@quotient+2,f
  2829  069F  0DAD               	rlf	___aldiv@quotient+3,f
  2830  06A0  0BF3               	decfsz	??___aldiv,f
  2831  06A1  2E9B               	goto	u2155
  2832  06A2  0823               	movf	___aldiv@divisor+3,w
  2833  06A3  0227               	subwf	___aldiv@dividend+3,w
  2834  06A4  1D03               	skipz
  2835  06A5  2EB0               	goto	u2165
  2836  06A6  0822               	movf	___aldiv@divisor+2,w
  2837  06A7  0226               	subwf	___aldiv@dividend+2,w
  2838  06A8  1D03               	skipz
  2839  06A9  2EB0               	goto	u2165
  2840  06AA  0821               	movf	___aldiv@divisor+1,w
  2841  06AB  0225               	subwf	___aldiv@dividend+1,w
  2842  06AC  1D03               	skipz
  2843  06AD  2EB0               	goto	u2165
  2844  06AE  0820               	movf	___aldiv@divisor,w
  2845  06AF  0224               	subwf	___aldiv@dividend,w
  2846  06B0                     u2165:	
  2847  06B0  1C03               	skipc
  2848  06B1  2EC1               	goto	l2757
  2849  06B2  0820               	movf	___aldiv@divisor,w
  2850  06B3  02A4               	subwf	___aldiv@dividend,f
  2851  06B4  0821               	movf	___aldiv@divisor+1,w
  2852  06B5  1C03               	skipc
  2853  06B6  0F21               	incfsz	___aldiv@divisor+1,w
  2854  06B7  02A5               	subwf	___aldiv@dividend+1,f
  2855  06B8  0822               	movf	___aldiv@divisor+2,w
  2856  06B9  1C03               	skipc
  2857  06BA  0F22               	incfsz	___aldiv@divisor+2,w
  2858  06BB  02A6               	subwf	___aldiv@dividend+2,f
  2859  06BC  0823               	movf	___aldiv@divisor+3,w
  2860  06BD  1C03               	skipc
  2861  06BE  0F23               	incfsz	___aldiv@divisor+3,w
  2862  06BF  02A7               	subwf	___aldiv@dividend+3,f
  2863  06C0  142A               	bsf	___aldiv@quotient,0
  2864  06C1                     l2757:	
  2865  06C1  3001               	movlw	1
  2866  06C2                     u2175:	
  2867  06C2  1003               	clrc
  2868  06C3  0CA3               	rrf	___aldiv@divisor+3,f
  2869  06C4  0CA2               	rrf	___aldiv@divisor+2,f
  2870  06C5  0CA1               	rrf	___aldiv@divisor+1,f
  2871  06C6  0CA0               	rrf	___aldiv@divisor,f
  2872  06C7  3EFF               	addlw	-1
  2873  06C8  1D03               	skipz
  2874  06C9  2EC2               	goto	u2175
  2875  06CA  3001               	movlw	1
  2876  06CB  02A8               	subwf	___aldiv@counter,f
  2877  06CC  1D03               	btfss	3,2
  2878  06CD  2E99               	goto	l2749
  2879  06CE                     l2761:	
  2880  06CE  0829               	movf	___aldiv@sign,w
  2881  06CF  1903               	btfsc	3,2
  2882  06D0  2EDC               	goto	l2765
  2883  06D1  09AA               	comf	___aldiv@quotient,f
  2884  06D2  09AB               	comf	___aldiv@quotient+1,f
  2885  06D3  09AC               	comf	___aldiv@quotient+2,f
  2886  06D4  09AD               	comf	___aldiv@quotient+3,f
  2887  06D5  0AAA               	incf	___aldiv@quotient,f
  2888  06D6  1903               	skipnz
  2889  06D7  0AAB               	incf	___aldiv@quotient+1,f
  2890  06D8  1903               	skipnz
  2891  06D9  0AAC               	incf	___aldiv@quotient+2,f
  2892  06DA  1903               	skipnz
  2893  06DB  0AAD               	incf	___aldiv@quotient+3,f
  2894  06DC                     l2765:	
  2895  06DC  082D               	movf	___aldiv@quotient+3,w
  2896  06DD  00A3               	movwf	?___aldiv+3
  2897  06DE  082C               	movf	___aldiv@quotient+2,w
  2898  06DF  00A2               	movwf	?___aldiv+2
  2899  06E0  082B               	movf	___aldiv@quotient+1,w
  2900  06E1  00A1               	movwf	?___aldiv+1
  2901  06E2  082A               	movf	___aldiv@quotient,w
  2902  06E3  00A0               	movwf	?___aldiv
  2903  06E4  0008               	return
  2904  06E5                     __end_of___aldiv:	
  2905                           
  2906                           	psect	text6
  2907  076E                     __ptext6:	
  2908 ;; *************** function _Lcd_Init *****************
  2909 ;; Defined at:
  2910 ;;		line 65 in file "./LCD4bits.h"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;		None
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;		None
  2915 ;; Return value:  Size  Location     Type
  2916 ;;                  1    wreg      void 
  2917 ;; Registers used:
  2918 ;;		wreg, status,2, status,0, pclath, cstack
  2919 ;; Tracked objects:
  2920 ;;		On entry : 0/0
  2921 ;;		On exit  : 0/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2924 ;;      Params:         0       0       0       0       0
  2925 ;;      Locals:         0       0       0       0       0
  2926 ;;      Temps:          0       2       0       0       0
  2927 ;;      Totals:         0       2       0       0       0
  2928 ;;Total ram usage:        2 bytes
  2929 ;; Hardware stack levels used:    1
  2930 ;; Hardware stack levels required when called:    3
  2931 ;; This function calls:
  2932 ;;		_Lcd_Cmd
  2933 ;;		_Lcd_Port
  2934 ;; This function is called by:
  2935 ;;		_setup
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           
  2940                           ;psect for function _Lcd_Init
  2941  076E                     _Lcd_Init:	
  2942                           
  2943                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  2944                           
  2945                           ;incstack = 0
  2946                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2947  076E  3000               	movlw	0
  2948  076F  120A  158A  2437  120A  118A  	fcall	_Lcd_Port
  2949                           
  2950                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  2951  0774  3034               	movlw	52
  2952  0775  1283               	bcf	3,5	;RP0=0, select bank0
  2953  0776  1303               	bcf	3,6	;RP1=0, select bank0
  2954  0777  00A1               	movwf	??_Lcd_Init+1
  2955  0778  30F1               	movlw	241
  2956  0779  00A0               	movwf	??_Lcd_Init
  2957  077A                     u2947:	
  2958  077A  0BA0               	decfsz	??_Lcd_Init,f
  2959  077B  2F7A               	goto	u2947
  2960  077C  0BA1               	decfsz	??_Lcd_Init+1,f
  2961  077D  2F7A               	goto	u2947
  2962                           
  2963                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  2964  077E  3003               	movlw	3
  2965  077F  120A  158A  2451  120A  118A  	fcall	_Lcd_Cmd
  2966                           
  2967                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2968  0784  300D               	movlw	13
  2969  0785  1283               	bcf	3,5	;RP0=0, select bank0
  2970  0786  1303               	bcf	3,6	;RP1=0, select bank0
  2971  0787  00A1               	movwf	??_Lcd_Init+1
  2972  0788  30FB               	movlw	251
  2973  0789  00A0               	movwf	??_Lcd_Init
  2974  078A                     u2957:	
  2975  078A  0BA0               	decfsz	??_Lcd_Init,f
  2976  078B  2F8A               	goto	u2957
  2977  078C  0BA1               	decfsz	??_Lcd_Init+1,f
  2978  078D  2F8A               	goto	u2957
  2979                           
  2980                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  2981  078E  3003               	movlw	3
  2982  078F  120A  158A  2451  120A  118A  	fcall	_Lcd_Cmd
  2983                           
  2984                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  2985  0794  301D               	movlw	29
  2986  0795  1283               	bcf	3,5	;RP0=0, select bank0
  2987  0796  1303               	bcf	3,6	;RP1=0, select bank0
  2988  0797  00A1               	movwf	??_Lcd_Init+1
  2989  0798  3090               	movlw	144
  2990  0799  00A0               	movwf	??_Lcd_Init
  2991  079A                     u2967:	
  2992  079A  0BA0               	decfsz	??_Lcd_Init,f
  2993  079B  2F9A               	goto	u2967
  2994  079C  0BA1               	decfsz	??_Lcd_Init+1,f
  2995  079D  2F9A               	goto	u2967
  2996  079E  0000               	nop
  2997                           
  2998                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  2999  079F  3003               	movlw	3
  3000  07A0  120A  158A  2451  120A  118A  	fcall	_Lcd_Cmd
  3001                           
  3002                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  3003  07A5  3002               	movlw	2
  3004  07A6  120A  158A  2451  120A  118A  	fcall	_Lcd_Cmd
  3005                           
  3006                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  3007  07AB  3002               	movlw	2
  3008  07AC  120A  158A  2451  120A  118A  	fcall	_Lcd_Cmd
  3009                           
  3010                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  3011  07B1  3008               	movlw	8
  3012  07B2  120A  158A  2451  120A  118A  	fcall	_Lcd_Cmd
  3013                           
  3014                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  3015  07B7  3000               	movlw	0
  3016  07B8  120A  158A  2451  120A  118A  	fcall	_Lcd_Cmd
  3017                           
  3018                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  3019  07BD  300C               	movlw	12
  3020  07BE  120A  158A  2451  120A  118A  	fcall	_Lcd_Cmd
  3021                           
  3022                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  3023  07C3  3000               	movlw	0
  3024  07C4  120A  158A  2451  120A  118A  	fcall	_Lcd_Cmd
  3025                           
  3026                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  3027  07C9  3006               	movlw	6
  3028  07CA  120A  158A  2451   	fcall	_Lcd_Cmd
  3029  07CD  0008               	return
  3030  07CE                     __end_of_Lcd_Init:	
  3031                           
  3032                           	psect	text7
  3033  0DD0                     __ptext7:	
  3034 ;; *************** function _I2C_Master_Init *****************
  3035 ;; Defined at:
  3036 ;;		line 16 in file "./I2C.h"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;  c               4   13[BANK0 ] const unsigned long 
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;		None
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		wreg, status,2, status,0, pclath, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3050 ;;      Params:         0       4       0       0       0
  3051 ;;      Locals:         0       0       0       0       0
  3052 ;;      Temps:          4       0       0       0       0
  3053 ;;      Totals:         4       4       0       0       0
  3054 ;;Total ram usage:        8 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    2
  3057 ;; This function calls:
  3058 ;;		___lldiv
  3059 ;; This function is called by:
  3060 ;;		_setup
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           
  3065                           ;psect for function _I2C_Master_Init
  3066  0DD0                     _I2C_Master_Init:	
  3067                           
  3068                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  3069                           
  3070                           ;incstack = 0
  3071                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  3072  0DD0  3028               	movlw	40
  3073  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  3074  0DD2  1303               	bcf	3,6	;RP1=0, select bank0
  3075  0DD3  0094               	movwf	20	;volatile
  3076                           
  3077                           ;./I2C.h: 19:     SSPCON2 = 0;
  3078  0DD4  1683               	bsf	3,5	;RP0=1, select bank1
  3079  0DD5  1303               	bcf	3,6	;RP1=0, select bank1
  3080  0DD6  0191               	clrf	17	;volatile
  3081                           
  3082                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  3083  0DD7  1283               	bcf	3,5	;RP0=0, select bank0
  3084  0DD8  1303               	bcf	3,6	;RP1=0, select bank0
  3085  0DD9  082D               	movf	I2C_Master_Init@c,w
  3086  0DDA  00F4               	movwf	??_I2C_Master_Init
  3087  0DDB  082E               	movf	I2C_Master_Init@c+1,w
  3088  0DDC  00F5               	movwf	??_I2C_Master_Init+1
  3089  0DDD  082F               	movf	I2C_Master_Init@c+2,w
  3090  0DDE  00F6               	movwf	??_I2C_Master_Init+2
  3091  0DDF  0830               	movf	I2C_Master_Init@c+3,w
  3092  0DE0  00F7               	movwf	??_I2C_Master_Init+3
  3093  0DE1  3002               	movlw	2
  3094  0DE2                     u2275:	
  3095  0DE2  1003               	clrc
  3096  0DE3  0DF4               	rlf	??_I2C_Master_Init,f
  3097  0DE4  0DF5               	rlf	??_I2C_Master_Init+1,f
  3098  0DE5  0DF6               	rlf	??_I2C_Master_Init+2,f
  3099  0DE6  0DF7               	rlf	??_I2C_Master_Init+3,f
  3100  0DE7  3EFF               	addlw	-1
  3101  0DE8  1D03               	skipz
  3102  0DE9  2DE2               	goto	u2275
  3103  0DEA  0877               	movf	??_I2C_Master_Init+3,w
  3104  0DEB  00A3               	movwf	___lldiv@divisor+3
  3105  0DEC  0876               	movf	??_I2C_Master_Init+2,w
  3106  0DED  00A2               	movwf	___lldiv@divisor+2
  3107  0DEE  0875               	movf	??_I2C_Master_Init+1,w
  3108  0DEF  00A1               	movwf	___lldiv@divisor+1
  3109  0DF0  0874               	movf	??_I2C_Master_Init,w
  3110  0DF1  00A0               	movwf	___lldiv@divisor
  3111  0DF2  3000               	movlw	0
  3112  0DF3  00A7               	movwf	___lldiv@dividend+3
  3113  0DF4  307A               	movlw	122
  3114  0DF5  00A6               	movwf	___lldiv@dividend+2
  3115  0DF6  3012               	movlw	18
  3116  0DF7  00A5               	movwf	___lldiv@dividend+1
  3117  0DF8  3000               	movlw	0
  3118  0DF9  00A4               	movwf	___lldiv@dividend
  3119  0DFA  120A  158A  27A0   	fcall	___lldiv
  3120  0DFD  1283               	bcf	3,5	;RP0=0, select bank0
  3121  0DFE  1303               	bcf	3,6	;RP1=0, select bank0
  3122  0DFF  0820               	movf	?___lldiv,w
  3123  0E00  3EFF               	addlw	255
  3124  0E01  1683               	bsf	3,5	;RP0=1, select bank1
  3125  0E02  1303               	bcf	3,6	;RP1=0, select bank1
  3126  0E03  0093               	movwf	19	;volatile
  3127                           
  3128                           ;./I2C.h: 21:     SSPSTAT = 0;
  3129  0E04  0194               	clrf	20	;volatile
  3130                           
  3131                           ;./I2C.h: 22:     TRISCbits.TRISC3 = 1;
  3132  0E05  1587               	bsf	7,3	;volatile
  3133                           
  3134                           ;./I2C.h: 23:     TRISCbits.TRISC4 = 1;
  3135  0E06  1607               	bsf	7,4	;volatile
  3136  0E07  0008               	return
  3137  0E08                     __end_of_I2C_Master_Init:	
  3138                           
  3139                           	psect	text8
  3140  0FA0                     __ptext8:	
  3141 ;; *************** function ___lldiv *****************
  3142 ;; Defined at:
  3143 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;  divisor         4    0[BANK0 ] unsigned long 
  3146 ;;  dividend        4    4[BANK0 ] unsigned long 
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;  quotient        4    8[BANK0 ] unsigned long 
  3149 ;;  counter         1   12[BANK0 ] unsigned char 
  3150 ;; Return value:  Size  Location     Type
  3151 ;;                  4    0[BANK0 ] unsigned long 
  3152 ;; Registers used:
  3153 ;;		wreg, status,2, status,0
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 0/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3159 ;;      Params:         0       8       0       0       0
  3160 ;;      Locals:         0       5       0       0       0
  3161 ;;      Temps:          1       0       0       0       0
  3162 ;;      Totals:         1      13       0       0       0
  3163 ;;Total ram usage:       14 bytes
  3164 ;; Hardware stack levels used:    1
  3165 ;; Hardware stack levels required when called:    1
  3166 ;; This function calls:
  3167 ;;		Nothing
  3168 ;; This function is called by:
  3169 ;;		_I2C_Master_Init
  3170 ;; This function uses a non-reentrant model
  3171 ;;
  3172                           
  3173                           
  3174                           ;psect for function ___lldiv
  3175  0FA0                     ___lldiv:	
  3176                           
  3177                           ;incstack = 0
  3178                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3179  0FA0  3000               	movlw	0
  3180  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  3181  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  3182  0FA3  00AB               	movwf	___lldiv@quotient+3
  3183  0FA4  3000               	movlw	0
  3184  0FA5  00AA               	movwf	___lldiv@quotient+2
  3185  0FA6  3000               	movlw	0
  3186  0FA7  00A9               	movwf	___lldiv@quotient+1
  3187  0FA8  3000               	movlw	0
  3188  0FA9  00A8               	movwf	___lldiv@quotient
  3189  0FAA  0823               	movf	___lldiv@divisor+3,w
  3190  0FAB  0422               	iorwf	___lldiv@divisor+2,w
  3191  0FAC  0421               	iorwf	___lldiv@divisor+1,w
  3192  0FAD  0420               	iorwf	___lldiv@divisor,w
  3193  0FAE  1903               	skipnz
  3194  0FAF  2FF7               	goto	l2725
  3195  0FB0  01AC               	clrf	___lldiv@counter
  3196  0FB1  0AAC               	incf	___lldiv@counter,f
  3197  0FB2                     l2711:	
  3198  0FB2  1BA3               	btfsc	___lldiv@divisor+3,7
  3199  0FB3  2FC2               	goto	l2713
  3200  0FB4  3001               	movlw	1
  3201  0FB5  00F3               	movwf	??___lldiv
  3202  0FB6                     u2045:	
  3203  0FB6  1003               	clrc
  3204  0FB7  0DA0               	rlf	___lldiv@divisor,f
  3205  0FB8  0DA1               	rlf	___lldiv@divisor+1,f
  3206  0FB9  0DA2               	rlf	___lldiv@divisor+2,f
  3207  0FBA  0DA3               	rlf	___lldiv@divisor+3,f
  3208  0FBB  0BF3               	decfsz	??___lldiv,f
  3209  0FBC  2FB6               	goto	u2045
  3210  0FBD  3001               	movlw	1
  3211  0FBE  00F3               	movwf	??___lldiv
  3212  0FBF  0873               	movf	??___lldiv,w
  3213  0FC0  07AC               	addwf	___lldiv@counter,f
  3214  0FC1  2FB2               	goto	l2711
  3215  0FC2                     l2713:	
  3216  0FC2  3001               	movlw	1
  3217  0FC3  00F3               	movwf	??___lldiv
  3218  0FC4                     u2065:	
  3219  0FC4  1003               	clrc
  3220  0FC5  0DA8               	rlf	___lldiv@quotient,f
  3221  0FC6  0DA9               	rlf	___lldiv@quotient+1,f
  3222  0FC7  0DAA               	rlf	___lldiv@quotient+2,f
  3223  0FC8  0DAB               	rlf	___lldiv@quotient+3,f
  3224  0FC9  0BF3               	decfsz	??___lldiv,f
  3225  0FCA  2FC4               	goto	u2065
  3226  0FCB  0823               	movf	___lldiv@divisor+3,w
  3227  0FCC  0227               	subwf	___lldiv@dividend+3,w
  3228  0FCD  1D03               	skipz
  3229  0FCE  2FD9               	goto	u2075
  3230  0FCF  0822               	movf	___lldiv@divisor+2,w
  3231  0FD0  0226               	subwf	___lldiv@dividend+2,w
  3232  0FD1  1D03               	skipz
  3233  0FD2  2FD9               	goto	u2075
  3234  0FD3  0821               	movf	___lldiv@divisor+1,w
  3235  0FD4  0225               	subwf	___lldiv@dividend+1,w
  3236  0FD5  1D03               	skipz
  3237  0FD6  2FD9               	goto	u2075
  3238  0FD7  0820               	movf	___lldiv@divisor,w
  3239  0FD8  0224               	subwf	___lldiv@dividend,w
  3240  0FD9                     u2075:	
  3241  0FD9  1C03               	skipc
  3242  0FDA  2FEA               	goto	l2721
  3243  0FDB  0820               	movf	___lldiv@divisor,w
  3244  0FDC  02A4               	subwf	___lldiv@dividend,f
  3245  0FDD  0821               	movf	___lldiv@divisor+1,w
  3246  0FDE  1C03               	skipc
  3247  0FDF  0F21               	incfsz	___lldiv@divisor+1,w
  3248  0FE0  02A5               	subwf	___lldiv@dividend+1,f
  3249  0FE1  0822               	movf	___lldiv@divisor+2,w
  3250  0FE2  1C03               	skipc
  3251  0FE3  0F22               	incfsz	___lldiv@divisor+2,w
  3252  0FE4  02A6               	subwf	___lldiv@dividend+2,f
  3253  0FE5  0823               	movf	___lldiv@divisor+3,w
  3254  0FE6  1C03               	skipc
  3255  0FE7  0F23               	incfsz	___lldiv@divisor+3,w
  3256  0FE8  02A7               	subwf	___lldiv@dividend+3,f
  3257  0FE9  1428               	bsf	___lldiv@quotient,0
  3258  0FEA                     l2721:	
  3259  0FEA  3001               	movlw	1
  3260  0FEB                     u2085:	
  3261  0FEB  1003               	clrc
  3262  0FEC  0CA3               	rrf	___lldiv@divisor+3,f
  3263  0FED  0CA2               	rrf	___lldiv@divisor+2,f
  3264  0FEE  0CA1               	rrf	___lldiv@divisor+1,f
  3265  0FEF  0CA0               	rrf	___lldiv@divisor,f
  3266  0FF0  3EFF               	addlw	-1
  3267  0FF1  1D03               	skipz
  3268  0FF2  2FEB               	goto	u2085
  3269  0FF3  3001               	movlw	1
  3270  0FF4  02AC               	subwf	___lldiv@counter,f
  3271  0FF5  1D03               	btfss	3,2
  3272  0FF6  2FC2               	goto	l2713
  3273  0FF7                     l2725:	
  3274  0FF7  082B               	movf	___lldiv@quotient+3,w
  3275  0FF8  00A3               	movwf	?___lldiv+3
  3276  0FF9  082A               	movf	___lldiv@quotient+2,w
  3277  0FFA  00A2               	movwf	?___lldiv+2
  3278  0FFB  0829               	movf	___lldiv@quotient+1,w
  3279  0FFC  00A1               	movwf	?___lldiv+1
  3280  0FFD  0828               	movf	___lldiv@quotient,w
  3281  0FFE  00A0               	movwf	?___lldiv
  3282  0FFF  0008               	return
  3283  1000                     __end_of___lldiv:	
  3284                           
  3285                           	psect	text9
  3286  0C86                     __ptext9:	
  3287 ;; *************** function _open_door *****************
  3288 ;; Defined at:
  3289 ;;		line 457 in file "mainMaster.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;		None
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;		None
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      void 
  3296 ;; Registers used:
  3297 ;;		wreg, status,2, status,0, pclath, cstack
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3303 ;;      Params:         0       0       0       0       0
  3304 ;;      Locals:         0       0       0       0       0
  3305 ;;      Temps:          0       0       0       0       0
  3306 ;;      Totals:         0       0       0       0       0
  3307 ;;Total ram usage:        0 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    3
  3310 ;; This function calls:
  3311 ;;		_I2C_Master_Start
  3312 ;;		_I2C_Master_Stop
  3313 ;;		_I2C_Master_Write
  3314 ;; This function is called by:
  3315 ;;		_main
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           
  3320                           ;psect for function _open_door
  3321  0C86                     _open_door:	
  3322                           
  3323                           ;mainMaster.c: 459:     I2C_Master_Start();
  3324                           
  3325                           ;incstack = 0
  3326                           ; Regs used in _open_door: [wreg+status,2+status,0+pclath+cstack]
  3327  0C86  120A  158A  23E3  120A  158A  	fcall	_I2C_Master_Start
  3328                           
  3329                           ;mainMaster.c: 460:     I2C_Master_Write(0x20);
  3330  0C8B  3020               	movlw	32
  3331  0C8C  00F3               	movwf	I2C_Master_Write@d
  3332  0C8D  3000               	movlw	0
  3333  0C8E  00F4               	movwf	I2C_Master_Write@d+1
  3334  0C8F  120A  158A  23F8  120A  158A  	fcall	_I2C_Master_Write
  3335                           
  3336                           ;mainMaster.c: 461:     I2C_Master_Write(0xFF);
  3337  0C94  30FF               	movlw	255
  3338  0C95  00F3               	movwf	I2C_Master_Write@d
  3339  0C96  3000               	movlw	0
  3340  0C97  00F4               	movwf	I2C_Master_Write@d+1
  3341  0C98  120A  158A  23F8  120A  158A  	fcall	_I2C_Master_Write
  3342                           
  3343                           ;mainMaster.c: 462:     I2C_Master_Stop();
  3344  0C9D  120A  158A  23EA   	fcall	_I2C_Master_Stop
  3345  0CA0  0008               	return
  3346  0CA1                     __end_of_open_door:	
  3347                           
  3348                           	psect	text10
  3349  0D29                     __ptext10:	
  3350 ;; *************** function _get_tripwire *****************
  3351 ;; Defined at:
  3352 ;;		line 421 in file "mainMaster.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;		None
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;  trip            1    2[BANK0 ] unsigned char 
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  1    wreg      unsigned char 
  3359 ;; Registers used:
  3360 ;;		wreg, status,2, status,0, pclath, cstack
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3366 ;;      Params:         0       0       0       0       0
  3367 ;;      Locals:         0       1       0       0       0
  3368 ;;      Temps:          1       0       0       0       0
  3369 ;;      Totals:         1       1       0       0       0
  3370 ;;Total ram usage:        2 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:    3
  3373 ;; This function calls:
  3374 ;;		_I2C_Master_Read
  3375 ;;		_I2C_Master_Start
  3376 ;;		_I2C_Master_Stop
  3377 ;;		_I2C_Master_Write
  3378 ;; This function is called by:
  3379 ;;		_main
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           
  3384                           ;psect for function _get_tripwire
  3385  0D29                     _get_tripwire:	
  3386                           
  3387                           ;mainMaster.c: 423:     char trip;;mainMaster.c: 425:     I2C_Master_Start();
  3388                           
  3389                           ;incstack = 0
  3390                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  3391  0D29  120A  158A  23E3  120A  158A  	fcall	_I2C_Master_Start
  3392                           
  3393                           ;mainMaster.c: 426:     I2C_Master_Write(0x21);
  3394  0D2E  3021               	movlw	33
  3395  0D2F  00F3               	movwf	I2C_Master_Write@d
  3396  0D30  3000               	movlw	0
  3397  0D31  00F4               	movwf	I2C_Master_Write@d+1
  3398  0D32  120A  158A  23F8  120A  158A  	fcall	_I2C_Master_Write
  3399                           
  3400                           ;mainMaster.c: 427:     trip = I2C_Master_Read(0);
  3401  0D37  3000               	movlw	0
  3402  0D38  00F3               	movwf	I2C_Master_Read@a
  3403  0D39  00F4               	movwf	I2C_Master_Read@a+1
  3404  0D3A  120A  118A  27CE  120A  158A  	fcall	_I2C_Master_Read
  3405  0D3F  0873               	movf	?_I2C_Master_Read,w
  3406  0D40  00F7               	movwf	??_get_tripwire
  3407  0D41  0877               	movf	??_get_tripwire,w
  3408  0D42  1283               	bcf	3,5	;RP0=0, select bank0
  3409  0D43  1303               	bcf	3,6	;RP1=0, select bank0
  3410  0D44  00A2               	movwf	get_tripwire@trip
  3411                           
  3412                           ;mainMaster.c: 428:     I2C_Master_Stop();
  3413  0D45  120A  158A  23EA   	fcall	_I2C_Master_Stop
  3414                           
  3415                           ;mainMaster.c: 430:     return (trip);
  3416  0D48  1283               	bcf	3,5	;RP0=0, select bank0
  3417  0D49  1303               	bcf	3,6	;RP1=0, select bank0
  3418  0D4A  0822               	movf	get_tripwire@trip,w
  3419  0D4B  0008               	return
  3420  0D4C                     __end_of_get_tripwire:	
  3421                           
  3422                           	psect	text11
  3423  06E5                     __ptext11:	
  3424 ;; *************** function _get_time *****************
  3425 ;; Defined at:
  3426 ;;		line 346 in file "mainMaster.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;  time_string     1    wreg     PTR unsigned char 
  3429 ;;		 -> time(6), 
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;  time_string     1    6[BANK0 ] PTR unsigned char 
  3432 ;;		 -> time(6), 
  3433 ;;  min             1    5[BANK0 ] unsigned char 
  3434 ;;  hour            1    4[BANK0 ] unsigned char 
  3435 ;; Return value:  Size  Location     Type
  3436 ;;                  1    wreg      void 
  3437 ;; Registers used:
  3438 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3444 ;;      Params:         0       0       0       0       0
  3445 ;;      Locals:         0       3       0       0       0
  3446 ;;      Temps:          0       2       0       0       0
  3447 ;;      Totals:         0       5       0       0       0
  3448 ;;Total ram usage:        5 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; Hardware stack levels required when called:    3
  3451 ;; This function calls:
  3452 ;;		_I2C_Master_Read
  3453 ;;		_I2C_Master_RepeatedStart
  3454 ;;		_I2C_Master_Start
  3455 ;;		_I2C_Master_Stop
  3456 ;;		_I2C_Master_Write
  3457 ;; This function is called by:
  3458 ;;		_main
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           
  3463                           ;psect for function _get_time
  3464  06E5                     _get_time:	
  3465                           
  3466                           ;incstack = 0
  3467                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3468                           ;get_time@time_string stored from wreg
  3469  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  3470  06E6  1303               	bcf	3,6	;RP1=0, select bank0
  3471  06E7  00A6               	movwf	get_time@time_string
  3472                           
  3473                           ;mainMaster.c: 348:     char hour, min;;mainMaster.c: 350:     I2C_Master_Start();
  3474  06E8  120A  158A  23E3  120A  118A  	fcall	_I2C_Master_Start
  3475                           
  3476                           ;mainMaster.c: 351:     I2C_Master_Write(0xD0);
  3477  06ED  30D0               	movlw	208
  3478  06EE  00F3               	movwf	I2C_Master_Write@d
  3479  06EF  3000               	movlw	0
  3480  06F0  00F4               	movwf	I2C_Master_Write@d+1
  3481  06F1  120A  158A  23F8  120A  118A  	fcall	_I2C_Master_Write
  3482                           
  3483                           ;mainMaster.c: 352:     I2C_Master_Write(0x01);
  3484  06F6  3001               	movlw	1
  3485  06F7  00F3               	movwf	I2C_Master_Write@d
  3486  06F8  3000               	movlw	0
  3487  06F9  00F4               	movwf	I2C_Master_Write@d+1
  3488  06FA  120A  158A  23F8  120A  118A  	fcall	_I2C_Master_Write
  3489                           
  3490                           ;mainMaster.c: 353:     I2C_Master_RepeatedStart();
  3491  06FF  120A  158A  23F1  120A  118A  	fcall	_I2C_Master_RepeatedStart
  3492                           
  3493                           ;mainMaster.c: 354:     I2C_Master_Write(0xD1);
  3494  0704  30D1               	movlw	209
  3495  0705  00F3               	movwf	I2C_Master_Write@d
  3496  0706  3000               	movlw	0
  3497  0707  00F4               	movwf	I2C_Master_Write@d+1
  3498  0708  120A  158A  23F8  120A  118A  	fcall	_I2C_Master_Write
  3499                           
  3500                           ;mainMaster.c: 355:     min = I2C_Master_Read(1);
  3501  070D  3001               	movlw	1
  3502  070E  00F3               	movwf	I2C_Master_Read@a
  3503  070F  3000               	movlw	0
  3504  0710  00F4               	movwf	I2C_Master_Read@a+1
  3505  0711  120A  118A  27CE  120A  118A  	fcall	_I2C_Master_Read
  3506  0716  0873               	movf	?_I2C_Master_Read,w
  3507  0717  1283               	bcf	3,5	;RP0=0, select bank0
  3508  0718  1303               	bcf	3,6	;RP1=0, select bank0
  3509  0719  00A2               	movwf	??_get_time
  3510  071A  0822               	movf	??_get_time,w
  3511  071B  00A5               	movwf	get_time@min
  3512                           
  3513                           ;mainMaster.c: 356:     hour = I2C_Master_Read(0);
  3514  071C  3000               	movlw	0
  3515  071D  00F3               	movwf	I2C_Master_Read@a
  3516  071E  00F4               	movwf	I2C_Master_Read@a+1
  3517  071F  120A  118A  27CE  120A  118A  	fcall	_I2C_Master_Read
  3518  0724  0873               	movf	?_I2C_Master_Read,w
  3519  0725  1283               	bcf	3,5	;RP0=0, select bank0
  3520  0726  1303               	bcf	3,6	;RP1=0, select bank0
  3521  0727  00A2               	movwf	??_get_time
  3522  0728  0822               	movf	??_get_time,w
  3523  0729  00A4               	movwf	get_time@hour
  3524                           
  3525                           ;mainMaster.c: 357:     I2C_Master_Stop();
  3526  072A  120A  158A  23EA  120A  118A  	fcall	_I2C_Master_Stop
  3527                           
  3528                           ;mainMaster.c: 359:     time_string[0] = (hour >> 4) + '0';
  3529  072F  1283               	bcf	3,5	;RP0=0, select bank0
  3530  0730  1303               	bcf	3,6	;RP1=0, select bank0
  3531  0731  0824               	movf	get_time@hour,w
  3532  0732  00A2               	movwf	??_get_time
  3533  0733  3004               	movlw	4
  3534  0734                     u2535:	
  3535  0734  1003               	clrc
  3536  0735  0CA2               	rrf	??_get_time,f
  3537  0736  3EFF               	addlw	-1
  3538  0737  1D03               	skipz
  3539  0738  2F34               	goto	u2535
  3540  0739  0822               	movf	??_get_time,w
  3541  073A  3E30               	addlw	48
  3542  073B  00A3               	movwf	??_get_time+1
  3543  073C  0826               	movf	get_time@time_string,w
  3544  073D  0084               	movwf	4
  3545  073E  0823               	movf	??_get_time+1,w
  3546  073F  1383               	bcf	3,7	;select IRP bank0
  3547  0740  0080               	movwf	0
  3548                           
  3549                           ;mainMaster.c: 360:     time_string[1] = (hour & 0x0F) + '0';
  3550  0741  0824               	movf	get_time@hour,w
  3551  0742  390F               	andlw	15
  3552  0743  3E30               	addlw	48
  3553  0744  00A2               	movwf	??_get_time
  3554  0745  0A26               	incf	get_time@time_string,w
  3555  0746  0084               	movwf	4
  3556  0747  0822               	movf	??_get_time,w
  3557  0748  0080               	movwf	0
  3558                           
  3559                           ;mainMaster.c: 361:     time_string[2] = ':';
  3560  0749  303A               	movlw	58
  3561  074A  00A2               	movwf	??_get_time
  3562  074B  0826               	movf	get_time@time_string,w
  3563  074C  3E02               	addlw	2
  3564  074D  0084               	movwf	4
  3565  074E  0822               	movf	??_get_time,w
  3566  074F  0080               	movwf	0
  3567                           
  3568                           ;mainMaster.c: 362:     time_string[3] = (min >> 4) + '0';
  3569  0750  0825               	movf	get_time@min,w
  3570  0751  00A2               	movwf	??_get_time
  3571  0752  3004               	movlw	4
  3572  0753                     u2545:	
  3573  0753  1003               	clrc
  3574  0754  0CA2               	rrf	??_get_time,f
  3575  0755  3EFF               	addlw	-1
  3576  0756  1D03               	skipz
  3577  0757  2F53               	goto	u2545
  3578  0758  0822               	movf	??_get_time,w
  3579  0759  3E30               	addlw	48
  3580  075A  00A3               	movwf	??_get_time+1
  3581  075B  0826               	movf	get_time@time_string,w
  3582  075C  3E03               	addlw	3
  3583  075D  0084               	movwf	4
  3584  075E  0823               	movf	??_get_time+1,w
  3585  075F  0080               	movwf	0
  3586                           
  3587                           ;mainMaster.c: 363:     time_string[4] = (min & 0x0F) + '0';
  3588  0760  0825               	movf	get_time@min,w
  3589  0761  390F               	andlw	15
  3590  0762  3E30               	addlw	48
  3591  0763  00A2               	movwf	??_get_time
  3592  0764  0826               	movf	get_time@time_string,w
  3593  0765  3E04               	addlw	4
  3594  0766  0084               	movwf	4
  3595  0767  0822               	movf	??_get_time,w
  3596  0768  0080               	movwf	0
  3597                           
  3598                           ;mainMaster.c: 364:     time_string[5] = '\0';
  3599  0769  0826               	movf	get_time@time_string,w
  3600  076A  3E05               	addlw	5
  3601  076B  0084               	movwf	4
  3602  076C  0180               	clrf	0
  3603  076D  0008               	return
  3604  076E                     __end_of_get_time:	
  3605                           
  3606                           	psect	text12
  3607  05B3                     __ptext12:	
  3608 ;; *************** function _get_temp *****************
  3609 ;; Defined at:
  3610 ;;		line 382 in file "mainMaster.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  temp_string     1    wreg     PTR unsigned char 
  3613 ;;		 -> temp(6), 
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;  temp_string     1   29[BANK0 ] PTR unsigned char 
  3616 ;;		 -> temp(6), 
  3617 ;;  decimal         3   25[BANK0 ] unsigned char [3]
  3618 ;;  tempLSB         1   30[BANK0 ] unsigned char 
  3619 ;;  tempMSB         1   28[BANK0 ] unsigned char 
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  1    wreg      void 
  3622 ;; Registers used:
  3623 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3629 ;;      Params:         0       0       0       0       0
  3630 ;;      Locals:         0       6       0       0       0
  3631 ;;      Temps:          0       3       0       0       0
  3632 ;;      Totals:         0       9       0       0       0
  3633 ;;Total ram usage:        9 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    3
  3636 ;; This function calls:
  3637 ;;		_I2C_Master_Read
  3638 ;;		_I2C_Master_RepeatedStart
  3639 ;;		_I2C_Master_Start
  3640 ;;		_I2C_Master_Stop
  3641 ;;		_I2C_Master_Write
  3642 ;;		___bmul
  3643 ;;		_sprintf
  3644 ;;		_strcat
  3645 ;; This function is called by:
  3646 ;;		_main
  3647 ;; This function uses a non-reentrant model
  3648 ;;
  3649                           
  3650                           
  3651                           ;psect for function _get_temp
  3652  05B3                     _get_temp:	
  3653                           
  3654                           ;incstack = 0
  3655                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3656                           ;get_temp@temp_string stored from wreg
  3657  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  3658  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  3659  05B5  00BD               	movwf	get_temp@temp_string
  3660                           
  3661                           ;mainMaster.c: 384:     char tempLSB, tempMSB;;mainMaster.c: 385:     char decimal[3];;m
      +                          ainMaster.c: 387:     I2C_Master_Start();
  3662  05B6  120A  158A  23E3  120A  118A  	fcall	_I2C_Master_Start
  3663                           
  3664                           ;mainMaster.c: 388:     I2C_Master_Write(0xD0);
  3665  05BB  30D0               	movlw	208
  3666  05BC  00F3               	movwf	I2C_Master_Write@d
  3667  05BD  3000               	movlw	0
  3668  05BE  00F4               	movwf	I2C_Master_Write@d+1
  3669  05BF  120A  158A  23F8  120A  118A  	fcall	_I2C_Master_Write
  3670                           
  3671                           ;mainMaster.c: 389:     I2C_Master_Write(0x11);
  3672  05C4  3011               	movlw	17
  3673  05C5  00F3               	movwf	I2C_Master_Write@d
  3674  05C6  3000               	movlw	0
  3675  05C7  00F4               	movwf	I2C_Master_Write@d+1
  3676  05C8  120A  158A  23F8  120A  118A  	fcall	_I2C_Master_Write
  3677                           
  3678                           ;mainMaster.c: 390:     I2C_Master_RepeatedStart();
  3679  05CD  120A  158A  23F1  120A  118A  	fcall	_I2C_Master_RepeatedStart
  3680                           
  3681                           ;mainMaster.c: 391:     I2C_Master_Write(0xD1);
  3682  05D2  30D1               	movlw	209
  3683  05D3  00F3               	movwf	I2C_Master_Write@d
  3684  05D4  3000               	movlw	0
  3685  05D5  00F4               	movwf	I2C_Master_Write@d+1
  3686  05D6  120A  158A  23F8  120A  118A  	fcall	_I2C_Master_Write
  3687                           
  3688                           ;mainMaster.c: 392:     tempMSB = I2C_Master_Read(1);
  3689  05DB  3001               	movlw	1
  3690  05DC  00F3               	movwf	I2C_Master_Read@a
  3691  05DD  3000               	movlw	0
  3692  05DE  00F4               	movwf	I2C_Master_Read@a+1
  3693  05DF  120A  118A  27CE  120A  118A  	fcall	_I2C_Master_Read
  3694  05E4  0873               	movf	?_I2C_Master_Read,w
  3695  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  3696  05E6  1303               	bcf	3,6	;RP1=0, select bank0
  3697  05E7  00B6               	movwf	??_get_temp
  3698  05E8  0836               	movf	??_get_temp,w
  3699  05E9  00BC               	movwf	get_temp@tempMSB
  3700                           
  3701                           ;mainMaster.c: 393:     tempLSB = I2C_Master_Read(0);
  3702  05EA  3000               	movlw	0
  3703  05EB  00F3               	movwf	I2C_Master_Read@a
  3704  05EC  00F4               	movwf	I2C_Master_Read@a+1
  3705  05ED  120A  118A  27CE  120A  118A  	fcall	_I2C_Master_Read
  3706  05F2  0873               	movf	?_I2C_Master_Read,w
  3707  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  3708  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  3709  05F5  00B6               	movwf	??_get_temp
  3710  05F6  0836               	movf	??_get_temp,w
  3711  05F7  00BE               	movwf	get_temp@tempLSB
  3712                           
  3713                           ;mainMaster.c: 394:     I2C_Master_Stop();
  3714  05F8  120A  158A  23EA  120A  118A  	fcall	_I2C_Master_Stop
  3715                           
  3716                           ;mainMaster.c: 396:     tempMSB = tempMSB - 4;
  3717  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  3718  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  3719  05FF  083C               	movf	get_temp@tempMSB,w
  3720  0600  3EFC               	addlw	252
  3721  0601  00B6               	movwf	??_get_temp
  3722  0602  0836               	movf	??_get_temp,w
  3723  0603  00BC               	movwf	get_temp@tempMSB
  3724                           
  3725                           ;mainMaster.c: 397:     tempLSB = (tempLSB >> 6) * 25;
  3726  0604  3019               	movlw	25
  3727  0605  00B6               	movwf	??_get_temp
  3728  0606  0836               	movf	??_get_temp,w
  3729  0607  00F3               	movwf	___bmul@multiplicand
  3730  0608  083E               	movf	get_temp@tempLSB,w
  3731  0609  00B7               	movwf	??_get_temp+1
  3732  060A  3006               	movlw	6
  3733  060B                     u2515:	
  3734  060B  1003               	clrc
  3735  060C  0CB7               	rrf	??_get_temp+1,f
  3736  060D  3EFF               	addlw	-1
  3737  060E  1D03               	skipz
  3738  060F  2E0B               	goto	u2515
  3739  0610  0837               	movf	??_get_temp+1,w
  3740  0611  120A  158A  2426  120A  118A  	fcall	___bmul
  3741  0616  1283               	bcf	3,5	;RP0=0, select bank0
  3742  0617  1303               	bcf	3,6	;RP1=0, select bank0
  3743  0618  00B8               	movwf	??_get_temp+2
  3744  0619  0838               	movf	??_get_temp+2,w
  3745  061A  00BE               	movwf	get_temp@tempLSB
  3746                           
  3747                           ;mainMaster.c: 398:     sprintf(temp_string, "%d", tempMSB);
  3748  061B  30A1               	movlw	(low (((STR_20+1)-__stringbase)| (0+32768)))& (0+255)
  3749  061C  00B6               	movwf	??_get_temp
  3750  061D  0836               	movf	??_get_temp,w
  3751  061E  00A9               	movwf	sprintf@f
  3752  061F  083C               	movf	get_temp@tempMSB,w
  3753  0620  00B7               	movwf	??_get_temp+1
  3754  0621  01B8               	clrf	??_get_temp+2
  3755  0622  0837               	movf	??_get_temp+1,w
  3756  0623  00AA               	movwf	?_sprintf+1
  3757  0624  0838               	movf	??_get_temp+2,w
  3758  0625  00AB               	movwf	?_sprintf+2
  3759  0626  083D               	movf	get_temp@temp_string,w
  3760  0627  120A  118A  22FE  120A  118A  	fcall	_sprintf
  3761                           
  3762                           ;mainMaster.c: 399:     if (tempLSB == 0){
  3763  062C  1283               	bcf	3,5	;RP0=0, select bank0
  3764  062D  1303               	bcf	3,6	;RP1=0, select bank0
  3765  062E  083E               	movf	get_temp@tempLSB,w
  3766  062F  1D03               	btfss	3,2
  3767  0630  2E33               	goto	l3033
  3768                           
  3769                           ;mainMaster.c: 400:         sprintf(decimal, ".%d0", tempLSB);
  3770  0631  309B               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  3771  0632  2E34               	goto	L16
  3772  0633                     l3033:	
  3773                           ;mainMaster.c: 401:     } else {
  3774                           
  3775                           
  3776                           ;mainMaster.c: 402:         sprintf(decimal, ".%d", tempLSB);
  3777  0633  30A0               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  3778  0634                     L16:	
  3779  0634  00B6               	movwf	??_get_temp
  3780  0635  0836               	movf	??_get_temp,w
  3781  0636  00A9               	movwf	sprintf@f
  3782  0637  083E               	movf	get_temp@tempLSB,w
  3783  0638  00B7               	movwf	??_get_temp+1
  3784  0639  01B8               	clrf	??_get_temp+2
  3785  063A  0837               	movf	??_get_temp+1,w
  3786  063B  00AA               	movwf	?_sprintf+1
  3787  063C  0838               	movf	??_get_temp+2,w
  3788  063D  00AB               	movwf	?_sprintf+2
  3789  063E  3039               	movlw	(low (get_temp@decimal| 0))& (0+255)
  3790  063F  120A  118A  22FE  120A  118A  	fcall	_sprintf
  3791                           
  3792                           ;mainMaster.c: 404:     strcat(temp_string, decimal);
  3793  0644  3039               	movlw	(low (get_temp@decimal| 0))& (0+255)
  3794  0645  1283               	bcf	3,5	;RP0=0, select bank0
  3795  0646  1303               	bcf	3,6	;RP1=0, select bank0
  3796  0647  00B6               	movwf	??_get_temp
  3797  0648  0836               	movf	??_get_temp,w
  3798  0649  00F3               	movwf	strcat@from
  3799  064A  083D               	movf	get_temp@temp_string,w
  3800  064B  120A  158A  254C   	fcall	_strcat
  3801                           
  3802                           ;mainMaster.c: 405:     temp_string[5] = '\0';
  3803  064E  1283               	bcf	3,5	;RP0=0, select bank0
  3804  064F  1303               	bcf	3,6	;RP1=0, select bank0
  3805  0650  083D               	movf	get_temp@temp_string,w
  3806  0651  3E05               	addlw	5
  3807  0652  0084               	movwf	4
  3808  0653  1383               	bcf	3,7	;select IRP bank0
  3809  0654  0180               	clrf	0
  3810  0655  0008               	return
  3811  0656                     __end_of_get_temp:	
  3812                           
  3813                           	psect	text13
  3814  0D4C                     __ptext13:	
  3815 ;; *************** function _strcat *****************
  3816 ;; Defined at:
  3817 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;  to              1    wreg     PTR unsigned char 
  3820 ;;		 -> temp(6), 
  3821 ;;  from            1    3[COMMON] PTR const unsigned char 
  3822 ;;		 -> get_temp@decimal(3), 
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;  to              1    5[COMMON] PTR unsigned char 
  3825 ;;		 -> temp(6), 
  3826 ;;  cp              1    6[COMMON] PTR unsigned char 
  3827 ;;		 -> temp(6), 
  3828 ;; Return value:  Size  Location     Type
  3829 ;;                  1    wreg      PTR unsigned char 
  3830 ;; Registers used:
  3831 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3832 ;; Tracked objects:
  3833 ;;		On entry : 0/0
  3834 ;;		On exit  : 0/0
  3835 ;;		Unchanged: 0/0
  3836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3837 ;;      Params:         1       0       0       0       0
  3838 ;;      Locals:         2       0       0       0       0
  3839 ;;      Temps:          1       0       0       0       0
  3840 ;;      Totals:         4       0       0       0       0
  3841 ;;Total ram usage:        4 bytes
  3842 ;; Hardware stack levels used:    1
  3843 ;; Hardware stack levels required when called:    1
  3844 ;; This function calls:
  3845 ;;		Nothing
  3846 ;; This function is called by:
  3847 ;;		_get_temp
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           
  3852                           ;psect for function _strcat
  3853  0D4C                     _strcat:	
  3854                           
  3855                           ;incstack = 0
  3856                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  3857                           ;strcat@to stored from wreg
  3858  0D4C  00F5               	movwf	strcat@to
  3859  0D4D  0875               	movf	strcat@to,w
  3860  0D4E  00F4               	movwf	??_strcat
  3861  0D4F  0874               	movf	??_strcat,w
  3862  0D50  00F6               	movwf	strcat@cp
  3863  0D51                     l2203:	
  3864  0D51  0876               	movf	strcat@cp,w
  3865  0D52  0084               	movwf	4
  3866  0D53  1383               	bcf	3,7	;select IRP bank0
  3867  0D54  0800               	movf	0,w
  3868  0D55  1903               	btfsc	3,2
  3869  0D56  2D64               	goto	l2207
  3870  0D57  3001               	movlw	1
  3871  0D58  00F4               	movwf	??_strcat
  3872  0D59  0874               	movf	??_strcat,w
  3873  0D5A  07F6               	addwf	strcat@cp,f
  3874  0D5B  2D51               	goto	l2203
  3875  0D5C                     l2205:	
  3876  0D5C  3001               	movlw	1
  3877  0D5D  00F4               	movwf	??_strcat
  3878  0D5E  0874               	movf	??_strcat,w
  3879  0D5F  07F6               	addwf	strcat@cp,f
  3880  0D60  3001               	movlw	1
  3881  0D61  00F4               	movwf	??_strcat
  3882  0D62  0874               	movf	??_strcat,w
  3883  0D63  07F3               	addwf	strcat@from,f
  3884  0D64                     l2207:	
  3885  0D64  0873               	movf	strcat@from,w
  3886  0D65  0084               	movwf	4
  3887  0D66  0800               	movf	0,w
  3888  0D67  00F4               	movwf	??_strcat
  3889  0D68  0876               	movf	strcat@cp,w
  3890  0D69  0084               	movwf	4
  3891  0D6A  0874               	movf	??_strcat,w
  3892  0D6B  0080               	movwf	0
  3893  0D6C  0800               	movf	0,w
  3894  0D6D  1903               	btfsc	3,2
  3895  0D6E  0008               	return
  3896  0D6F  2D5C               	goto	l2205
  3897  0D70                     __end_of_strcat:	
  3898                           
  3899                           	psect	text14
  3900  02FE                     __ptext14:	
  3901 ;; *************** function _sprintf *****************
  3902 ;; Defined at:
  3903 ;;		line 500 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  3904 ;; Parameters:    Size  Location     Type
  3905 ;;  sp              1    wreg     PTR unsigned char 
  3906 ;;		 -> get_temp@decimal(3), temp(6), 
  3907 ;;  f               1    9[BANK0 ] PTR const unsigned char 
  3908 ;;		 -> STR_20(4), STR_19(5), STR_18(3), 
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;  sp              1   20[BANK0 ] PTR unsigned char 
  3911 ;;		 -> get_temp@decimal(3), temp(6), 
  3912 ;;  tmpval          4    0        struct .
  3913 ;;  val             2   18[BANK0 ] unsigned int 
  3914 ;;  cp              2    0        PTR const unsigned char 
  3915 ;;  len             2    0        unsigned int 
  3916 ;;  c               1   21[BANK0 ] unsigned char 
  3917 ;;  prec            1   17[BANK0 ] char 
  3918 ;;  flag            1   16[BANK0 ] unsigned char 
  3919 ;;  ap              1   15[BANK0 ] PTR void [1]
  3920 ;;		 -> ?_sprintf(2), 
  3921 ;; Return value:  Size  Location     Type
  3922 ;;                  2    9[BANK0 ] int 
  3923 ;; Registers used:
  3924 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3925 ;; Tracked objects:
  3926 ;;		On entry : 0/0
  3927 ;;		On exit  : 0/0
  3928 ;;		Unchanged: 0/0
  3929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3930 ;;      Params:         0       3       0       0       0
  3931 ;;      Locals:         0       7       0       0       0
  3932 ;;      Temps:          0       3       0       0       0
  3933 ;;      Totals:         0      13       0       0       0
  3934 ;;Total ram usage:       13 bytes
  3935 ;; Hardware stack levels used:    1
  3936 ;; Hardware stack levels required when called:    2
  3937 ;; This function calls:
  3938 ;;		___lwdiv
  3939 ;;		___lwmod
  3940 ;; This function is called by:
  3941 ;;		_get_temp
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           
  3946                           ;psect for function _sprintf
  3947  02FE                     _sprintf:	
  3948                           
  3949                           ;incstack = 0
  3950                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3951                           ;sprintf@sp stored from wreg
  3952  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  3953  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  3954  0300  00B4               	movwf	sprintf@sp
  3955                           
  3956                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;D:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  3957  0301  302A               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  3958  0302  00AC               	movwf	??_sprintf
  3959  0303  082C               	movf	??_sprintf,w
  3960  0304  00AF               	movwf	sprintf@ap
  3961  0305                     l2927:	
  3962                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  3963                           
  3964                           
  3965                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  3966  0305  3001               	movlw	1
  3967  0306  07A9               	addwf	sprintf@f,f
  3968  0307  30FF               	movlw	-1
  3969  0308  0729               	addwf	sprintf@f,w
  3970  0309  0084               	movwf	4
  3971  030A  120A  118A  250A  120A  118A  	fcall	stringdir
  3972  030F  00AC               	movwf	??_sprintf
  3973  0310  082C               	movf	??_sprintf,w
  3974  0311  00B5               	movwf	sprintf@c
  3975  0312  0835               	movf	sprintf@c,w
  3976  0313  1903               	btfsc	3,2
  3977  0314  2BD3               	goto	l2929
  3978                           
  3979                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  3980  0315  3025               	movlw	37
  3981  0316  0635               	xorwf	sprintf@c,w
  3982  0317  1903               	btfsc	3,2
  3983  0318  2B25               	goto	l2883
  3984                           
  3985                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;D:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  3986  0319  0835               	movf	sprintf@c,w
  3987  031A  00AC               	movwf	??_sprintf
  3988  031B  0834               	movf	sprintf@sp,w
  3989  031C  0084               	movwf	4
  3990  031D  082C               	movf	??_sprintf,w
  3991  031E  1383               	bcf	3,7	;select IRP bank0
  3992  031F  0080               	movwf	0
  3993  0320  3001               	movlw	1
  3994  0321  00AC               	movwf	??_sprintf
  3995  0322  082C               	movf	??_sprintf,w
  3996  0323  07B4               	addwf	sprintf@sp,f
  3997                           
  3998                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  3999  0324  2B05               	goto	l2927
  4000  0325                     l2883:	
  4001                           
  4002                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  4003  0325  01B0               	clrf	sprintf@flag
  4004                           
  4005                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  4006  0326  3001               	movlw	1
  4007  0327  07A9               	addwf	sprintf@f,f
  4008  0328  30FF               	movlw	-1
  4009  0329  0729               	addwf	sprintf@f,w
  4010  032A  0084               	movwf	4
  4011  032B  120A  118A  250A  120A  118A  	fcall	stringdir
  4012  0330  00B5               	movwf	sprintf@c
  4013  0331  00AC               	movwf	??_sprintf
  4014  0332  01AD               	clrf	??_sprintf+1
  4015                           
  4016                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4017                           ; Switch size 1, requested type "simple"
  4018                           ; Number of cases is 1, Range of values is 0 to 0
  4019                           ; switch strategies available:
  4020                           ; Name         Instructions Cycles
  4021                           ; simple_byte            4     3 (average)
  4022                           ; direct_byte           11     8 (fixed)
  4023                           ; jumptable            260     6 (fixed)
  4024                           ;	Chosen strategy is simple_byte
  4025  0333  082D               	movf	??_sprintf+1,w
  4026  0334  3A00               	xorlw	0	; case 0
  4027  0335  1903               	skipnz
  4028  0336  2B38               	goto	l3381
  4029  0337  2B05               	goto	l2927
  4030  0338                     l3381:	
  4031                           
  4032                           ; Switch size 1, requested type "simple"
  4033                           ; Number of cases is 3, Range of values is 0 to 105
  4034                           ; switch strategies available:
  4035                           ; Name         Instructions Cycles
  4036                           ; simple_byte           10     6 (average)
  4037                           ; jumptable            260     6 (fixed)
  4038                           ;	Chosen strategy is simple_byte
  4039  0338  082C               	movf	??_sprintf,w
  4040  0339  3A00               	xorlw	0	; case 0
  4041  033A  1903               	skipnz
  4042  033B  2BD3               	goto	l2929
  4043  033C  3A64               	xorlw	100	; case 100
  4044  033D  1903               	skipnz
  4045  033E  2B43               	goto	l2889
  4046  033F  3A0D               	xorlw	13	; case 105
  4047  0340  1903               	skipnz
  4048  0341  2B43               	goto	l2889
  4049  0342  2B05               	goto	l2927
  4050  0343                     l2889:	
  4051                           
  4052                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4053  0343  082F               	movf	sprintf@ap,w
  4054  0344  0084               	movwf	4
  4055  0345  1383               	bcf	3,7	;select IRP bank0
  4056  0346  0800               	movf	0,w
  4057  0347  00B2               	movwf	sprintf@val
  4058  0348  0A84               	incf	4,f
  4059  0349  0800               	movf	0,w
  4060  034A  00B3               	movwf	sprintf@val+1
  4061  034B  3002               	movlw	2
  4062  034C  00AC               	movwf	??_sprintf
  4063  034D  082C               	movf	??_sprintf,w
  4064  034E  07AF               	addwf	sprintf@ap,f
  4065                           
  4066                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  4067  034F  1FB3               	btfss	sprintf@val+1,7
  4068  0350  2B5A               	goto	l2899
  4069                           
  4070                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  4071  0351  3003               	movlw	3
  4072  0352  00AC               	movwf	??_sprintf
  4073  0353  082C               	movf	??_sprintf,w
  4074  0354  04B0               	iorwf	sprintf@flag,f
  4075                           
  4076                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  4077  0355  09B2               	comf	sprintf@val,f
  4078  0356  09B3               	comf	sprintf@val+1,f
  4079  0357  0AB2               	incf	sprintf@val,f
  4080  0358  1903               	skipnz
  4081  0359  0AB3               	incf	sprintf@val+1,f
  4082  035A                     l2899:	
  4083                           
  4084                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4085  035A  01B5               	clrf	sprintf@c
  4086  035B  0AB5               	incf	sprintf@c,f
  4087  035C                     l2905:	
  4088                           
  4089                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  4090  035C  0835               	movf	sprintf@c,w
  4091  035D  00AC               	movwf	??_sprintf
  4092  035E  072C               	addwf	??_sprintf,w
  4093  035F  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4094  0360  0084               	movwf	4
  4095  0361  120A  118A  250A  120A  118A  	fcall	stringdir
  4096  0366  00AD               	movwf	??_sprintf+1
  4097  0367  120A  118A  250A  120A  118A  	fcall	stringdir
  4098  036C  00AE               	movwf	??_sprintf+2
  4099  036D  082E               	movf	??_sprintf+2,w
  4100  036E  0233               	subwf	sprintf@val+1,w
  4101  036F  1D03               	skipz
  4102  0370  2B73               	goto	u2395
  4103  0371  082D               	movf	??_sprintf+1,w
  4104  0372  0232               	subwf	sprintf@val,w
  4105  0373                     u2395:	
  4106  0373  1C03               	btfss	3,0
  4107  0374  2B7D               	goto	l2911
  4108  0375  3001               	movlw	1
  4109  0376  00AC               	movwf	??_sprintf
  4110  0377  082C               	movf	??_sprintf,w
  4111  0378  07B5               	addwf	sprintf@c,f
  4112  0379  3005               	movlw	5
  4113  037A  0635               	xorwf	sprintf@c,w
  4114  037B  1D03               	btfss	3,2
  4115  037C  2B5C               	goto	l2905
  4116  037D                     l2911:	
  4117                           
  4118                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  4119  037D  0830               	movf	sprintf@flag,w
  4120  037E  3903               	andlw	3
  4121  037F  1903               	btfsc	3,2
  4122  0380  2B8C               	goto	l2917
  4123                           
  4124                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  4125  0381  302D               	movlw	45
  4126  0382  00AC               	movwf	??_sprintf
  4127  0383  0834               	movf	sprintf@sp,w
  4128  0384  0084               	movwf	4
  4129  0385  082C               	movf	??_sprintf,w
  4130  0386  1383               	bcf	3,7	;select IRP bank0
  4131  0387  0080               	movwf	0
  4132  0388  3001               	movlw	1
  4133  0389  00AC               	movwf	??_sprintf
  4134  038A  082C               	movf	??_sprintf,w
  4135  038B  07B4               	addwf	sprintf@sp,f
  4136  038C                     l2917:	
  4137                           
  4138                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };D
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  4139  038C  0835               	movf	sprintf@c,w
  4140  038D  00AC               	movwf	??_sprintf
  4141  038E  082C               	movf	??_sprintf,w
  4142  038F  00B1               	movwf	sprintf@prec
  4143  0390                     l2925:	
  4144                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  4145                           
  4146                           
  4147                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  4148  0390  30FF               	movlw	255
  4149  0391  00AC               	movwf	??_sprintf
  4150  0392  082C               	movf	??_sprintf,w
  4151  0393  07B1               	addwf	sprintf@prec,f
  4152  0394  0A31               	incf	sprintf@prec,w
  4153  0395  1903               	btfsc	3,2
  4154  0396  2B05               	goto	l2927
  4155                           
  4156                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  4157  0397  300A               	movlw	10
  4158  0398  00A3               	movwf	___lwmod@divisor
  4159  0399  3000               	movlw	0
  4160  039A  00A4               	movwf	___lwmod@divisor+1
  4161  039B  0831               	movf	sprintf@prec,w
  4162  039C  00AC               	movwf	??_sprintf
  4163  039D  072C               	addwf	??_sprintf,w
  4164  039E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4165  039F  0084               	movwf	4
  4166  03A0  120A  118A  250A  120A  118A  	fcall	stringdir
  4167  03A5  00F3               	movwf	___lwdiv@divisor
  4168  03A6  120A  118A  250A  120A  118A  	fcall	stringdir
  4169  03AB  00F4               	movwf	___lwdiv@divisor+1
  4170  03AC  0833               	movf	sprintf@val+1,w
  4171  03AD  00F6               	movwf	___lwdiv@dividend+1
  4172  03AE  0832               	movf	sprintf@val,w
  4173  03AF  00F5               	movwf	___lwdiv@dividend
  4174  03B0  120A  158A  267B  120A  118A  	fcall	___lwdiv
  4175  03B5  0874               	movf	?___lwdiv+1,w
  4176  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  4177  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  4178  03B8  00A6               	movwf	___lwmod@dividend+1
  4179  03B9  0873               	movf	?___lwdiv,w
  4180  03BA  00A5               	movwf	___lwmod@dividend
  4181  03BB  120A  158A  259C  120A  118A  	fcall	___lwmod
  4182  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  4183  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  4184  03C2  0823               	movf	?___lwmod,w
  4185  03C3  3E30               	addlw	48
  4186  03C4  00AD               	movwf	??_sprintf+1
  4187  03C5  082D               	movf	??_sprintf+1,w
  4188  03C6  00B5               	movwf	sprintf@c
  4189                           
  4190                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  4191  03C7  0835               	movf	sprintf@c,w
  4192  03C8  00AC               	movwf	??_sprintf
  4193  03C9  0834               	movf	sprintf@sp,w
  4194  03CA  0084               	movwf	4
  4195  03CB  082C               	movf	??_sprintf,w
  4196  03CC  1383               	bcf	3,7	;select IRP bank0
  4197  03CD  0080               	movwf	0
  4198  03CE  3001               	movlw	1
  4199  03CF  00AC               	movwf	??_sprintf
  4200  03D0  082C               	movf	??_sprintf,w
  4201  03D1  07B4               	addwf	sprintf@sp,f
  4202  03D2  2B90               	goto	l2925
  4203  03D3                     l2929:	
  4204                           
  4205                           ;D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  4206  03D3  0834               	movf	sprintf@sp,w
  4207  03D4  0084               	movwf	4
  4208  03D5  1383               	bcf	3,7	;select IRP bank0
  4209  03D6  0180               	clrf	0
  4210  03D7  0008               	return
  4211  03D8                     __end_of_sprintf:	
  4212                           
  4213                           	psect	text15
  4214  0D9C                     __ptext15:	
  4215 ;; *************** function ___lwmod *****************
  4216 ;; Defined at:
  4217 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;  divisor         2    3[BANK0 ] unsigned int 
  4220 ;;  dividend        2    5[BANK0 ] unsigned int 
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;  counter         1    8[BANK0 ] unsigned char 
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  2    3[BANK0 ] unsigned int 
  4225 ;; Registers used:
  4226 ;;		wreg, status,2, status,0
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4232 ;;      Params:         0       4       0       0       0
  4233 ;;      Locals:         0       1       0       0       0
  4234 ;;      Temps:          0       1       0       0       0
  4235 ;;      Totals:         0       6       0       0       0
  4236 ;;Total ram usage:        6 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:    1
  4239 ;; This function calls:
  4240 ;;		Nothing
  4241 ;; This function is called by:
  4242 ;;		_sprintf
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           
  4247                           ;psect for function ___lwmod
  4248  0D9C                     ___lwmod:	
  4249                           
  4250                           ;incstack = 0
  4251                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4252  0D9C  1283               	bcf	3,5	;RP0=0, select bank0
  4253  0D9D  1303               	bcf	3,6	;RP1=0, select bank0
  4254  0D9E  0823               	movf	___lwmod@divisor,w
  4255  0D9F  0424               	iorwf	___lwmod@divisor+1,w
  4256  0DA0  1903               	btfsc	3,2
  4257  0DA1  2DCB               	goto	l2005
  4258  0DA2  01A8               	clrf	___lwmod@counter
  4259  0DA3  0AA8               	incf	___lwmod@counter,f
  4260  0DA4                     l1995:	
  4261  0DA4  1BA4               	btfsc	___lwmod@divisor+1,7
  4262  0DA5  2DB2               	goto	l1997
  4263  0DA6  3001               	movlw	1
  4264  0DA7                     u1335:	
  4265  0DA7  1003               	clrc
  4266  0DA8  0DA3               	rlf	___lwmod@divisor,f
  4267  0DA9  0DA4               	rlf	___lwmod@divisor+1,f
  4268  0DAA  3EFF               	addlw	-1
  4269  0DAB  1D03               	skipz
  4270  0DAC  2DA7               	goto	u1335
  4271  0DAD  3001               	movlw	1
  4272  0DAE  00A7               	movwf	??___lwmod
  4273  0DAF  0827               	movf	??___lwmod,w
  4274  0DB0  07A8               	addwf	___lwmod@counter,f
  4275  0DB1  2DA4               	goto	l1995
  4276  0DB2                     l1997:	
  4277  0DB2  0824               	movf	___lwmod@divisor+1,w
  4278  0DB3  0226               	subwf	___lwmod@dividend+1,w
  4279  0DB4  1D03               	skipz
  4280  0DB5  2DB8               	goto	u1355
  4281  0DB6  0823               	movf	___lwmod@divisor,w
  4282  0DB7  0225               	subwf	___lwmod@dividend,w
  4283  0DB8                     u1355:	
  4284  0DB8  1C03               	skipc
  4285  0DB9  2DC0               	goto	l2001
  4286  0DBA  0823               	movf	___lwmod@divisor,w
  4287  0DBB  02A5               	subwf	___lwmod@dividend,f
  4288  0DBC  0824               	movf	___lwmod@divisor+1,w
  4289  0DBD  1C03               	skipc
  4290  0DBE  03A6               	decf	___lwmod@dividend+1,f
  4291  0DBF  02A6               	subwf	___lwmod@dividend+1,f
  4292  0DC0                     l2001:	
  4293  0DC0  3001               	movlw	1
  4294  0DC1                     u1365:	
  4295  0DC1  1003               	clrc
  4296  0DC2  0CA4               	rrf	___lwmod@divisor+1,f
  4297  0DC3  0CA3               	rrf	___lwmod@divisor,f
  4298  0DC4  3EFF               	addlw	-1
  4299  0DC5  1D03               	skipz
  4300  0DC6  2DC1               	goto	u1365
  4301  0DC7  3001               	movlw	1
  4302  0DC8  02A8               	subwf	___lwmod@counter,f
  4303  0DC9  1D03               	btfss	3,2
  4304  0DCA  2DB2               	goto	l1997
  4305  0DCB                     l2005:	
  4306  0DCB  0826               	movf	___lwmod@dividend+1,w
  4307  0DCC  00A4               	movwf	?___lwmod+1
  4308  0DCD  0825               	movf	___lwmod@dividend,w
  4309  0DCE  00A3               	movwf	?___lwmod
  4310  0DCF  0008               	return
  4311  0DD0                     __end_of___lwmod:	
  4312                           
  4313                           	psect	text16
  4314  0E7B                     __ptext16:	
  4315 ;; *************** function ___lwdiv *****************
  4316 ;; Defined at:
  4317 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;  divisor         2    3[COMMON] unsigned int 
  4320 ;;  dividend        2    5[COMMON] unsigned int 
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;  quotient        2    1[BANK0 ] unsigned int 
  4323 ;;  counter         1    0[BANK0 ] unsigned char 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  2    3[COMMON] unsigned int 
  4326 ;; Registers used:
  4327 ;;		wreg, status,2, status,0
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4333 ;;      Params:         4       0       0       0       0
  4334 ;;      Locals:         0       3       0       0       0
  4335 ;;      Temps:          1       0       0       0       0
  4336 ;;      Totals:         5       3       0       0       0
  4337 ;;Total ram usage:        8 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    1
  4340 ;; This function calls:
  4341 ;;		Nothing
  4342 ;; This function is called by:
  4343 ;;		_sprintf
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           
  4348                           ;psect for function ___lwdiv
  4349  0E7B                     ___lwdiv:	
  4350                           
  4351                           ;incstack = 0
  4352                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4353  0E7B  1283               	bcf	3,5	;RP0=0, select bank0
  4354  0E7C  1303               	bcf	3,6	;RP1=0, select bank0
  4355  0E7D  01A1               	clrf	___lwdiv@quotient
  4356  0E7E  01A2               	clrf	___lwdiv@quotient+1
  4357  0E7F  0873               	movf	___lwdiv@divisor,w
  4358  0E80  0474               	iorwf	___lwdiv@divisor+1,w
  4359  0E81  1903               	btfsc	3,2
  4360  0E82  2EB4               	goto	l2791
  4361  0E83  01A0               	clrf	___lwdiv@counter
  4362  0E84  0AA0               	incf	___lwdiv@counter,f
  4363  0E85                     l2779:	
  4364  0E85  1BF4               	btfsc	___lwdiv@divisor+1,7
  4365  0E86  2E93               	goto	l2781
  4366  0E87  3001               	movlw	1
  4367  0E88                     u2215:	
  4368  0E88  1003               	clrc
  4369  0E89  0DF3               	rlf	___lwdiv@divisor,f
  4370  0E8A  0DF4               	rlf	___lwdiv@divisor+1,f
  4371  0E8B  3EFF               	addlw	-1
  4372  0E8C  1D03               	skipz
  4373  0E8D  2E88               	goto	u2215
  4374  0E8E  3001               	movlw	1
  4375  0E8F  00F7               	movwf	??___lwdiv
  4376  0E90  0877               	movf	??___lwdiv,w
  4377  0E91  07A0               	addwf	___lwdiv@counter,f
  4378  0E92  2E85               	goto	l2779
  4379  0E93                     l2781:	
  4380  0E93  3001               	movlw	1
  4381  0E94                     u2235:	
  4382  0E94  1003               	clrc
  4383  0E95  0DA1               	rlf	___lwdiv@quotient,f
  4384  0E96  0DA2               	rlf	___lwdiv@quotient+1,f
  4385  0E97  3EFF               	addlw	-1
  4386  0E98  1D03               	skipz
  4387  0E99  2E94               	goto	u2235
  4388  0E9A  0874               	movf	___lwdiv@divisor+1,w
  4389  0E9B  0276               	subwf	___lwdiv@dividend+1,w
  4390  0E9C  1D03               	skipz
  4391  0E9D  2EA0               	goto	u2245
  4392  0E9E  0873               	movf	___lwdiv@divisor,w
  4393  0E9F  0275               	subwf	___lwdiv@dividend,w
  4394  0EA0                     u2245:	
  4395  0EA0  1C03               	skipc
  4396  0EA1  2EA9               	goto	l2787
  4397  0EA2  0873               	movf	___lwdiv@divisor,w
  4398  0EA3  02F5               	subwf	___lwdiv@dividend,f
  4399  0EA4  0874               	movf	___lwdiv@divisor+1,w
  4400  0EA5  1C03               	skipc
  4401  0EA6  03F6               	decf	___lwdiv@dividend+1,f
  4402  0EA7  02F6               	subwf	___lwdiv@dividend+1,f
  4403  0EA8  1421               	bsf	___lwdiv@quotient,0
  4404  0EA9                     l2787:	
  4405  0EA9  3001               	movlw	1
  4406  0EAA                     u2255:	
  4407  0EAA  1003               	clrc
  4408  0EAB  0CF4               	rrf	___lwdiv@divisor+1,f
  4409  0EAC  0CF3               	rrf	___lwdiv@divisor,f
  4410  0EAD  3EFF               	addlw	-1
  4411  0EAE  1D03               	skipz
  4412  0EAF  2EAA               	goto	u2255
  4413  0EB0  3001               	movlw	1
  4414  0EB1  02A0               	subwf	___lwdiv@counter,f
  4415  0EB2  1D03               	btfss	3,2
  4416  0EB3  2E93               	goto	l2781
  4417  0EB4                     l2791:	
  4418  0EB4  0822               	movf	___lwdiv@quotient+1,w
  4419  0EB5  00F4               	movwf	?___lwdiv+1
  4420  0EB6  0821               	movf	___lwdiv@quotient,w
  4421  0EB7  00F3               	movwf	?___lwdiv
  4422  0EB8  0008               	return
  4423  0EB9                     __end_of___lwdiv:	
  4424                           
  4425                           	psect	text17
  4426  0C26                     __ptext17:	
  4427 ;; *************** function ___bmul *****************
  4428 ;; Defined at:
  4429 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;  multiplier      1    wreg     unsigned char 
  4432 ;;  multiplicand    1    3[COMMON] unsigned char 
  4433 ;; Auto vars:     Size  Location     Type
  4434 ;;  multiplier      1    6[COMMON] unsigned char 
  4435 ;;  product         1    5[COMMON] unsigned char 
  4436 ;; Return value:  Size  Location     Type
  4437 ;;                  1    wreg      unsigned char 
  4438 ;; Registers used:
  4439 ;;		wreg, status,2, status,0
  4440 ;; Tracked objects:
  4441 ;;		On entry : 0/0
  4442 ;;		On exit  : 0/0
  4443 ;;		Unchanged: 0/0
  4444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4445 ;;      Params:         1       0       0       0       0
  4446 ;;      Locals:         2       0       0       0       0
  4447 ;;      Temps:          1       0       0       0       0
  4448 ;;      Totals:         4       0       0       0       0
  4449 ;;Total ram usage:        4 bytes
  4450 ;; Hardware stack levels used:    1
  4451 ;; Hardware stack levels required when called:    1
  4452 ;; This function calls:
  4453 ;;		Nothing
  4454 ;; This function is called by:
  4455 ;;		_get_temp
  4456 ;; This function uses a non-reentrant model
  4457 ;;
  4458                           
  4459                           
  4460                           ;psect for function ___bmul
  4461  0C26                     ___bmul:	
  4462                           
  4463                           ;incstack = 0
  4464                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4465                           ;___bmul@multiplier stored from wreg
  4466  0C26  00F6               	movwf	___bmul@multiplier
  4467  0C27  01F5               	clrf	___bmul@product
  4468  0C28                     l2211:	
  4469  0C28  1C76               	btfss	___bmul@multiplier,0
  4470  0C29  2C2E               	goto	l2215
  4471  0C2A  0873               	movf	___bmul@multiplicand,w
  4472  0C2B  00F4               	movwf	??___bmul
  4473  0C2C  0874               	movf	??___bmul,w
  4474  0C2D  07F5               	addwf	___bmul@product,f
  4475  0C2E                     l2215:	
  4476  0C2E  1003               	clrc
  4477  0C2F  0DF3               	rlf	___bmul@multiplicand,f
  4478  0C30  1003               	clrc
  4479  0C31  0CF6               	rrf	___bmul@multiplier,f
  4480  0C32  0876               	movf	___bmul@multiplier,w
  4481  0C33  1D03               	btfss	3,2
  4482  0C34  2C28               	goto	l2211
  4483  0C35  0875               	movf	___bmul@product,w
  4484  0C36  0008               	return
  4485  0C37                     __end_of___bmul:	
  4486                           
  4487                           	psect	text18
  4488  0D06                     __ptext18:	
  4489 ;; *************** function _get_hall *****************
  4490 ;; Defined at:
  4491 ;;		line 409 in file "mainMaster.c"
  4492 ;; Parameters:    Size  Location     Type
  4493 ;;		None
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;  key             1    2[BANK0 ] unsigned char 
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  1    wreg      unsigned char 
  4498 ;; Registers used:
  4499 ;;		wreg, status,2, status,0, pclath, cstack
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4505 ;;      Params:         0       0       0       0       0
  4506 ;;      Locals:         0       1       0       0       0
  4507 ;;      Temps:          1       0       0       0       0
  4508 ;;      Totals:         1       1       0       0       0
  4509 ;;Total ram usage:        2 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    3
  4512 ;; This function calls:
  4513 ;;		_I2C_Master_Read
  4514 ;;		_I2C_Master_Start
  4515 ;;		_I2C_Master_Stop
  4516 ;;		_I2C_Master_Write
  4517 ;; This function is called by:
  4518 ;;		_main
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           
  4523                           ;psect for function _get_hall
  4524  0D06                     _get_hall:	
  4525                           
  4526                           ;mainMaster.c: 411:     char key;;mainMaster.c: 413:     I2C_Master_Start();
  4527                           
  4528                           ;incstack = 0
  4529                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  4530  0D06  120A  158A  23E3  120A  158A  	fcall	_I2C_Master_Start
  4531                           
  4532                           ;mainMaster.c: 414:     I2C_Master_Write(0x11);
  4533  0D0B  3011               	movlw	17
  4534  0D0C  00F3               	movwf	I2C_Master_Write@d
  4535  0D0D  3000               	movlw	0
  4536  0D0E  00F4               	movwf	I2C_Master_Write@d+1
  4537  0D0F  120A  158A  23F8  120A  158A  	fcall	_I2C_Master_Write
  4538                           
  4539                           ;mainMaster.c: 415:     key = I2C_Master_Read(0);
  4540  0D14  3000               	movlw	0
  4541  0D15  00F3               	movwf	I2C_Master_Read@a
  4542  0D16  00F4               	movwf	I2C_Master_Read@a+1
  4543  0D17  120A  118A  27CE  120A  158A  	fcall	_I2C_Master_Read
  4544  0D1C  0873               	movf	?_I2C_Master_Read,w
  4545  0D1D  00F7               	movwf	??_get_hall
  4546  0D1E  0877               	movf	??_get_hall,w
  4547  0D1F  1283               	bcf	3,5	;RP0=0, select bank0
  4548  0D20  1303               	bcf	3,6	;RP1=0, select bank0
  4549  0D21  00A2               	movwf	get_hall@key
  4550                           
  4551                           ;mainMaster.c: 416:     I2C_Master_Stop();
  4552  0D22  120A  158A  23EA   	fcall	_I2C_Master_Stop
  4553                           
  4554                           ;mainMaster.c: 418:     return (key);
  4555  0D25  1283               	bcf	3,5	;RP0=0, select bank0
  4556  0D26  1303               	bcf	3,6	;RP1=0, select bank0
  4557  0D27  0822               	movf	get_hall@key,w
  4558  0D28  0008               	return
  4559  0D29                     __end_of_get_hall:	
  4560                           
  4561                           	psect	text19
  4562  0E41                     __ptext19:	
  4563 ;; *************** function _get_day *****************
  4564 ;; Defined at:
  4565 ;;		line 367 in file "mainMaster.c"
  4566 ;; Parameters:    Size  Location     Type
  4567 ;;		None
  4568 ;; Auto vars:     Size  Location     Type
  4569 ;;  d               1    2[BANK0 ] unsigned char 
  4570 ;; Return value:  Size  Location     Type
  4571 ;;                  1    wreg      unsigned char 
  4572 ;; Registers used:
  4573 ;;		wreg, status,2, status,0, pclath, cstack
  4574 ;; Tracked objects:
  4575 ;;		On entry : 0/0
  4576 ;;		On exit  : 0/0
  4577 ;;		Unchanged: 0/0
  4578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4579 ;;      Params:         0       0       0       0       0
  4580 ;;      Locals:         0       1       0       0       0
  4581 ;;      Temps:          1       0       0       0       0
  4582 ;;      Totals:         1       1       0       0       0
  4583 ;;Total ram usage:        2 bytes
  4584 ;; Hardware stack levels used:    1
  4585 ;; Hardware stack levels required when called:    3
  4586 ;; This function calls:
  4587 ;;		_I2C_Master_Read
  4588 ;;		_I2C_Master_RepeatedStart
  4589 ;;		_I2C_Master_Start
  4590 ;;		_I2C_Master_Stop
  4591 ;;		_I2C_Master_Write
  4592 ;; This function is called by:
  4593 ;;		_main
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           
  4598                           ;psect for function _get_day
  4599  0E41                     _get_day:	
  4600                           
  4601                           ;mainMaster.c: 369:     char d;;mainMaster.c: 371:     I2C_Master_Start();
  4602                           
  4603                           ;incstack = 0
  4604                           ; Regs used in _get_day: [wreg+status,2+status,0+pclath+cstack]
  4605  0E41  120A  158A  23E3  120A  158A  	fcall	_I2C_Master_Start
  4606                           
  4607                           ;mainMaster.c: 372:     I2C_Master_Write(0xD0);
  4608  0E46  30D0               	movlw	208
  4609  0E47  00F3               	movwf	I2C_Master_Write@d
  4610  0E48  3000               	movlw	0
  4611  0E49  00F4               	movwf	I2C_Master_Write@d+1
  4612  0E4A  120A  158A  23F8  120A  158A  	fcall	_I2C_Master_Write
  4613                           
  4614                           ;mainMaster.c: 373:     I2C_Master_Write(0x03);
  4615  0E4F  3003               	movlw	3
  4616  0E50  00F3               	movwf	I2C_Master_Write@d
  4617  0E51  3000               	movlw	0
  4618  0E52  00F4               	movwf	I2C_Master_Write@d+1
  4619  0E53  120A  158A  23F8  120A  158A  	fcall	_I2C_Master_Write
  4620                           
  4621                           ;mainMaster.c: 374:     I2C_Master_RepeatedStart();
  4622  0E58  120A  158A  23F1  120A  158A  	fcall	_I2C_Master_RepeatedStart
  4623                           
  4624                           ;mainMaster.c: 375:     I2C_Master_Write(0xD1);
  4625  0E5D  30D1               	movlw	209
  4626  0E5E  00F3               	movwf	I2C_Master_Write@d
  4627  0E5F  3000               	movlw	0
  4628  0E60  00F4               	movwf	I2C_Master_Write@d+1
  4629  0E61  120A  158A  23F8  120A  158A  	fcall	_I2C_Master_Write
  4630                           
  4631                           ;mainMaster.c: 376:     d = I2C_Master_Read(0);
  4632  0E66  3000               	movlw	0
  4633  0E67  00F3               	movwf	I2C_Master_Read@a
  4634  0E68  00F4               	movwf	I2C_Master_Read@a+1
  4635  0E69  120A  118A  27CE  120A  158A  	fcall	_I2C_Master_Read
  4636  0E6E  0873               	movf	?_I2C_Master_Read,w
  4637  0E6F  00F7               	movwf	??_get_day
  4638  0E70  0877               	movf	??_get_day,w
  4639  0E71  1283               	bcf	3,5	;RP0=0, select bank0
  4640  0E72  1303               	bcf	3,6	;RP1=0, select bank0
  4641  0E73  00A2               	movwf	get_day@d
  4642                           
  4643                           ;mainMaster.c: 377:     I2C_Master_Stop();
  4644  0E74  120A  158A  23EA   	fcall	_I2C_Master_Stop
  4645                           
  4646                           ;mainMaster.c: 379:     return d;
  4647  0E77  1283               	bcf	3,5	;RP0=0, select bank0
  4648  0E78  1303               	bcf	3,6	;RP1=0, select bank0
  4649  0E79  0822               	movf	get_day@d,w
  4650  0E7A  0008               	return
  4651  0E7B                     __end_of_get_day:	
  4652                           
  4653                           	psect	text20
  4654  0BF1                     __ptext20:	
  4655 ;; *************** function _I2C_Master_RepeatedStart *****************
  4656 ;; Defined at:
  4657 ;;		line 47 in file "./I2C.h"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;		None
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;		None
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  1    wreg      void 
  4664 ;; Registers used:
  4665 ;;		wreg, status,2, status,0, pclath, cstack
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4671 ;;      Params:         0       0       0       0       0
  4672 ;;      Locals:         0       0       0       0       0
  4673 ;;      Temps:          0       0       0       0       0
  4674 ;;      Totals:         0       0       0       0       0
  4675 ;;Total ram usage:        0 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; Hardware stack levels required when called:    2
  4678 ;; This function calls:
  4679 ;;		_I2C_Master_Wait
  4680 ;; This function is called by:
  4681 ;;		_get_time
  4682 ;;		_get_day
  4683 ;;		_get_temp
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           
  4688                           ;psect for function _I2C_Master_RepeatedStart
  4689  0BF1                     _I2C_Master_RepeatedStart:	
  4690                           
  4691                           ;./I2C.h: 49:     I2C_Master_Wait();
  4692                           
  4693                           ;incstack = 0
  4694                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  4695  0BF1  120A  158A  2408   	fcall	_I2C_Master_Wait
  4696                           
  4697                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  4698  0BF4  1683               	bsf	3,5	;RP0=1, select bank1
  4699  0BF5  1303               	bcf	3,6	;RP1=0, select bank1
  4700  0BF6  1491               	bsf	17,1	;volatile
  4701  0BF7  0008               	return
  4702  0BF8                     __end_of_I2C_Master_RepeatedStart:	
  4703                           
  4704                           	psect	text21
  4705  0CE3                     __ptext21:	
  4706 ;; *************** function _get_PIR *****************
  4707 ;; Defined at:
  4708 ;;		line 433 in file "mainMaster.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;		None
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  PIR             1    2[BANK0 ] unsigned char 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      unsigned char 
  4715 ;; Registers used:
  4716 ;;		wreg, status,2, status,0, pclath, cstack
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4722 ;;      Params:         0       0       0       0       0
  4723 ;;      Locals:         0       1       0       0       0
  4724 ;;      Temps:          1       0       0       0       0
  4725 ;;      Totals:         1       1       0       0       0
  4726 ;;Total ram usage:        2 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    3
  4729 ;; This function calls:
  4730 ;;		_I2C_Master_Read
  4731 ;;		_I2C_Master_Start
  4732 ;;		_I2C_Master_Stop
  4733 ;;		_I2C_Master_Write
  4734 ;; This function is called by:
  4735 ;;		_main
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           
  4740                           ;psect for function _get_PIR
  4741  0CE3                     _get_PIR:	
  4742                           
  4743                           ;mainMaster.c: 435:     char PIR;;mainMaster.c: 437:     I2C_Master_Start();
  4744                           
  4745                           ;incstack = 0
  4746                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  4747  0CE3  120A  158A  23E3  120A  158A  	fcall	_I2C_Master_Start
  4748                           
  4749                           ;mainMaster.c: 438:     I2C_Master_Write(0x41);
  4750  0CE8  3041               	movlw	65
  4751  0CE9  00F3               	movwf	I2C_Master_Write@d
  4752  0CEA  3000               	movlw	0
  4753  0CEB  00F4               	movwf	I2C_Master_Write@d+1
  4754  0CEC  120A  158A  23F8  120A  158A  	fcall	_I2C_Master_Write
  4755                           
  4756                           ;mainMaster.c: 439:     PIR = I2C_Master_Read(0);
  4757  0CF1  3000               	movlw	0
  4758  0CF2  00F3               	movwf	I2C_Master_Read@a
  4759  0CF3  00F4               	movwf	I2C_Master_Read@a+1
  4760  0CF4  120A  118A  27CE  120A  158A  	fcall	_I2C_Master_Read
  4761  0CF9  0873               	movf	?_I2C_Master_Read,w
  4762  0CFA  00F7               	movwf	??_get_PIR
  4763  0CFB  0877               	movf	??_get_PIR,w
  4764  0CFC  1283               	bcf	3,5	;RP0=0, select bank0
  4765  0CFD  1303               	bcf	3,6	;RP1=0, select bank0
  4766  0CFE  00A2               	movwf	get_PIR@PIR
  4767                           
  4768                           ;mainMaster.c: 440:     I2C_Master_Stop();
  4769  0CFF  120A  158A  23EA   	fcall	_I2C_Master_Stop
  4770                           
  4771                           ;mainMaster.c: 442:     return (PIR);
  4772  0D02  1283               	bcf	3,5	;RP0=0, select bank0
  4773  0D03  1303               	bcf	3,6	;RP1=0, select bank0
  4774  0D04  0822               	movf	get_PIR@PIR,w
  4775  0D05  0008               	return
  4776  0D06                     __end_of_get_PIR:	
  4777                           
  4778                           	psect	text22
  4779  0CC0                     __ptext22:	
  4780 ;; *************** function _get_IR *****************
  4781 ;; Defined at:
  4782 ;;		line 445 in file "mainMaster.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;		None
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;  IR              1    2[BANK0 ] unsigned char 
  4787 ;; Return value:  Size  Location     Type
  4788 ;;                  1    wreg      unsigned char 
  4789 ;; Registers used:
  4790 ;;		wreg, status,2, status,0, pclath, cstack
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4796 ;;      Params:         0       0       0       0       0
  4797 ;;      Locals:         0       1       0       0       0
  4798 ;;      Temps:          1       0       0       0       0
  4799 ;;      Totals:         1       1       0       0       0
  4800 ;;Total ram usage:        2 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; Hardware stack levels required when called:    3
  4803 ;; This function calls:
  4804 ;;		_I2C_Master_Read
  4805 ;;		_I2C_Master_Start
  4806 ;;		_I2C_Master_Stop
  4807 ;;		_I2C_Master_Write
  4808 ;; This function is called by:
  4809 ;;		_main
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           
  4814                           ;psect for function _get_IR
  4815  0CC0                     _get_IR:	
  4816                           
  4817                           ;mainMaster.c: 447:     char IR;;mainMaster.c: 449:     I2C_Master_Start();
  4818                           
  4819                           ;incstack = 0
  4820                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  4821  0CC0  120A  158A  23E3  120A  158A  	fcall	_I2C_Master_Start
  4822                           
  4823                           ;mainMaster.c: 450:     I2C_Master_Write(0x31);
  4824  0CC5  3031               	movlw	49
  4825  0CC6  00F3               	movwf	I2C_Master_Write@d
  4826  0CC7  3000               	movlw	0
  4827  0CC8  00F4               	movwf	I2C_Master_Write@d+1
  4828  0CC9  120A  158A  23F8  120A  158A  	fcall	_I2C_Master_Write
  4829                           
  4830                           ;mainMaster.c: 451:     IR = I2C_Master_Read(0);
  4831  0CCE  3000               	movlw	0
  4832  0CCF  00F3               	movwf	I2C_Master_Read@a
  4833  0CD0  00F4               	movwf	I2C_Master_Read@a+1
  4834  0CD1  120A  118A  27CE  120A  158A  	fcall	_I2C_Master_Read
  4835  0CD6  0873               	movf	?_I2C_Master_Read,w
  4836  0CD7  00F7               	movwf	??_get_IR
  4837  0CD8  0877               	movf	??_get_IR,w
  4838  0CD9  1283               	bcf	3,5	;RP0=0, select bank0
  4839  0CDA  1303               	bcf	3,6	;RP1=0, select bank0
  4840  0CDB  00A2               	movwf	get_IR@IR
  4841                           
  4842                           ;mainMaster.c: 452:     I2C_Master_Stop();
  4843  0CDC  120A  158A  23EA   	fcall	_I2C_Master_Stop
  4844                           
  4845                           ;mainMaster.c: 454:     return (IR);
  4846  0CDF  1283               	bcf	3,5	;RP0=0, select bank0
  4847  0CE0  1303               	bcf	3,6	;RP1=0, select bank0
  4848  0CE1  0822               	movf	get_IR@IR,w
  4849  0CE2  0008               	return
  4850  0CE3                     __end_of_get_IR:	
  4851                           
  4852                           	psect	text23
  4853  07CE                     __ptext23:	
  4854 ;; *************** function _I2C_Master_Read *****************
  4855 ;; Defined at:
  4856 ;;		line 74 in file "./I2C.h"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;  a               2    3[COMMON] unsigned short 
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;  temp            2    0[BANK0 ] unsigned short 
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  2    3[COMMON] unsigned short 
  4863 ;; Registers used:
  4864 ;;		wreg, status,2, status,0, pclath, cstack
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 0/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4870 ;;      Params:         2       0       0       0       0
  4871 ;;      Locals:         0       2       0       0       0
  4872 ;;      Temps:          2       0       0       0       0
  4873 ;;      Totals:         4       2       0       0       0
  4874 ;;Total ram usage:        6 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; Hardware stack levels required when called:    2
  4877 ;; This function calls:
  4878 ;;		_I2C_Master_Wait
  4879 ;; This function is called by:
  4880 ;;		_get_time
  4881 ;;		_get_day
  4882 ;;		_get_temp
  4883 ;;		_get_hall
  4884 ;;		_get_tripwire
  4885 ;;		_get_PIR
  4886 ;;		_get_IR
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           
  4891                           ;psect for function _I2C_Master_Read
  4892  07CE                     _I2C_Master_Read:	
  4893                           
  4894                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  4895                           
  4896                           ;incstack = 0
  4897                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  4898  07CE  120A  158A  2408  120A  118A  	fcall	_I2C_Master_Wait
  4899                           
  4900                           ;./I2C.h: 78:     RCEN = 1;
  4901  07D3  1683               	bsf	3,5	;RP0=1, select bank1
  4902  07D4  1303               	bcf	3,6	;RP1=0, select bank1
  4903  07D5  1591               	bsf	17,3	;volatile
  4904                           
  4905                           ;./I2C.h: 79:     I2C_Master_Wait();
  4906  07D6  120A  158A  2408  120A  118A  	fcall	_I2C_Master_Wait
  4907                           
  4908                           ;./I2C.h: 80:     temp = SSPBUF;
  4909  07DB  1283               	bcf	3,5	;RP0=0, select bank0
  4910  07DC  1303               	bcf	3,6	;RP1=0, select bank0
  4911  07DD  0813               	movf	19,w	;volatile
  4912  07DE  00F5               	movwf	??_I2C_Master_Read
  4913  07DF  01F6               	clrf	??_I2C_Master_Read+1
  4914  07E0  0875               	movf	??_I2C_Master_Read,w
  4915  07E1  00A0               	movwf	I2C_Master_Read@temp
  4916  07E2  0876               	movf	??_I2C_Master_Read+1,w
  4917  07E3  00A1               	movwf	I2C_Master_Read@temp+1
  4918                           
  4919                           ;./I2C.h: 81:     I2C_Master_Wait();
  4920  07E4  120A  158A  2408  120A  118A  	fcall	_I2C_Master_Wait
  4921                           
  4922                           ;./I2C.h: 83:     if(a == 1){
  4923  07E9  0373               	decf	I2C_Master_Read@a,w
  4924  07EA  0474               	iorwf	I2C_Master_Read@a+1,w
  4925  07EB  1D03               	btfss	3,2
  4926  07EC  2FF1               	goto	l142
  4927                           
  4928                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  4929  07ED  1683               	bsf	3,5	;RP0=1, select bank1
  4930  07EE  1303               	bcf	3,6	;RP1=0, select bank1
  4931  07EF  1291               	bcf	17,5	;volatile
  4932                           
  4933                           ;./I2C.h: 85:     }else{
  4934  07F0  2FF4               	goto	l143
  4935  07F1                     l142:	
  4936                           
  4937                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  4938  07F1  1683               	bsf	3,5	;RP0=1, select bank1
  4939  07F2  1303               	bcf	3,6	;RP1=0, select bank1
  4940  07F3  1691               	bsf	17,5	;volatile
  4941  07F4                     l143:	
  4942                           ;./I2C.h: 87:     }
  4943                           
  4944                           
  4945                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  4946  07F4  1611               	bsf	17,4	;volatile
  4947                           
  4948                           ;./I2C.h: 89:     return temp;
  4949  07F5  1283               	bcf	3,5	;RP0=0, select bank0
  4950  07F6  1303               	bcf	3,6	;RP1=0, select bank0
  4951  07F7  0821               	movf	I2C_Master_Read@temp+1,w
  4952  07F8  00F4               	movwf	?_I2C_Master_Read+1
  4953  07F9  0820               	movf	I2C_Master_Read@temp,w
  4954  07FA  00F3               	movwf	?_I2C_Master_Read
  4955  07FB  0008               	return
  4956  07FC                     __end_of_I2C_Master_Read:	
  4957                           
  4958                           	psect	text24
  4959  0C6B                     __ptext24:	
  4960 ;; *************** function _close_door *****************
  4961 ;; Defined at:
  4962 ;;		line 466 in file "mainMaster.c"
  4963 ;; Parameters:    Size  Location     Type
  4964 ;;		None
  4965 ;; Auto vars:     Size  Location     Type
  4966 ;;		None
  4967 ;; Return value:  Size  Location     Type
  4968 ;;                  1    wreg      void 
  4969 ;; Registers used:
  4970 ;;		wreg, status,2, status,0, pclath, cstack
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4976 ;;      Params:         0       0       0       0       0
  4977 ;;      Locals:         0       0       0       0       0
  4978 ;;      Temps:          0       0       0       0       0
  4979 ;;      Totals:         0       0       0       0       0
  4980 ;;Total ram usage:        0 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; Hardware stack levels required when called:    3
  4983 ;; This function calls:
  4984 ;;		_I2C_Master_Start
  4985 ;;		_I2C_Master_Stop
  4986 ;;		_I2C_Master_Write
  4987 ;; This function is called by:
  4988 ;;		_main
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           
  4993                           ;psect for function _close_door
  4994  0C6B                     _close_door:	
  4995                           
  4996                           ;mainMaster.c: 468:     I2C_Master_Start();
  4997                           
  4998                           ;incstack = 0
  4999                           ; Regs used in _close_door: [wreg+status,2+status,0+pclath+cstack]
  5000  0C6B  120A  158A  23E3  120A  158A  	fcall	_I2C_Master_Start
  5001                           
  5002                           ;mainMaster.c: 469:     I2C_Master_Write(0x20);
  5003  0C70  3020               	movlw	32
  5004  0C71  00F3               	movwf	I2C_Master_Write@d
  5005  0C72  3000               	movlw	0
  5006  0C73  00F4               	movwf	I2C_Master_Write@d+1
  5007  0C74  120A  158A  23F8  120A  158A  	fcall	_I2C_Master_Write
  5008                           
  5009                           ;mainMaster.c: 470:     I2C_Master_Write(0xF0);
  5010  0C79  30F0               	movlw	240
  5011  0C7A  00F3               	movwf	I2C_Master_Write@d
  5012  0C7B  3000               	movlw	0
  5013  0C7C  00F4               	movwf	I2C_Master_Write@d+1
  5014  0C7D  120A  158A  23F8  120A  158A  	fcall	_I2C_Master_Write
  5015                           
  5016                           ;mainMaster.c: 471:     I2C_Master_Stop();
  5017  0C82  120A  158A  23EA   	fcall	_I2C_Master_Stop
  5018  0C85  0008               	return
  5019  0C86                     __end_of_close_door:	
  5020                           
  5021                           	psect	text25
  5022  0BF8                     __ptext25:	
  5023 ;; *************** function _I2C_Master_Write *****************
  5024 ;; Defined at:
  5025 ;;		line 65 in file "./I2C.h"
  5026 ;; Parameters:    Size  Location     Type
  5027 ;;  d               2    3[COMMON] unsigned int 
  5028 ;; Auto vars:     Size  Location     Type
  5029 ;;		None
  5030 ;; Return value:  Size  Location     Type
  5031 ;;                  1    wreg      void 
  5032 ;; Registers used:
  5033 ;;		wreg, status,2, status,0, pclath, cstack
  5034 ;; Tracked objects:
  5035 ;;		On entry : 0/0
  5036 ;;		On exit  : 0/0
  5037 ;;		Unchanged: 0/0
  5038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5039 ;;      Params:         2       0       0       0       0
  5040 ;;      Locals:         0       0       0       0       0
  5041 ;;      Temps:          0       0       0       0       0
  5042 ;;      Totals:         2       0       0       0       0
  5043 ;;Total ram usage:        2 bytes
  5044 ;; Hardware stack levels used:    1
  5045 ;; Hardware stack levels required when called:    2
  5046 ;; This function calls:
  5047 ;;		_I2C_Master_Wait
  5048 ;; This function is called by:
  5049 ;;		_get_time
  5050 ;;		_get_day
  5051 ;;		_get_temp
  5052 ;;		_get_hall
  5053 ;;		_get_tripwire
  5054 ;;		_get_PIR
  5055 ;;		_get_IR
  5056 ;;		_open_door
  5057 ;;		_close_door
  5058 ;;		_write_RTC
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           
  5063                           ;psect for function _I2C_Master_Write
  5064  0BF8                     _I2C_Master_Write:	
  5065                           
  5066                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  5067                           
  5068                           ;incstack = 0
  5069                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5070  0BF8  120A  158A  2408   	fcall	_I2C_Master_Wait
  5071                           
  5072                           ;./I2C.h: 68:     SSPBUF = d;
  5073  0BFB  0873               	movf	I2C_Master_Write@d,w
  5074  0BFC  1283               	bcf	3,5	;RP0=0, select bank0
  5075  0BFD  1303               	bcf	3,6	;RP1=0, select bank0
  5076  0BFE  0093               	movwf	19	;volatile
  5077  0BFF  0008               	return
  5078  0C00                     __end_of_I2C_Master_Write:	
  5079                           
  5080                           	psect	text26
  5081  0BEA                     __ptext26:	
  5082 ;; *************** function _I2C_Master_Stop *****************
  5083 ;; Defined at:
  5084 ;;		line 55 in file "./I2C.h"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;		None
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;		None
  5089 ;; Return value:  Size  Location     Type
  5090 ;;                  1    wreg      void 
  5091 ;; Registers used:
  5092 ;;		wreg, status,2, status,0, pclath, cstack
  5093 ;; Tracked objects:
  5094 ;;		On entry : 0/0
  5095 ;;		On exit  : 0/0
  5096 ;;		Unchanged: 0/0
  5097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5098 ;;      Params:         0       0       0       0       0
  5099 ;;      Locals:         0       0       0       0       0
  5100 ;;      Temps:          0       0       0       0       0
  5101 ;;      Totals:         0       0       0       0       0
  5102 ;;Total ram usage:        0 bytes
  5103 ;; Hardware stack levels used:    1
  5104 ;; Hardware stack levels required when called:    2
  5105 ;; This function calls:
  5106 ;;		_I2C_Master_Wait
  5107 ;; This function is called by:
  5108 ;;		_get_time
  5109 ;;		_get_day
  5110 ;;		_get_temp
  5111 ;;		_get_hall
  5112 ;;		_get_tripwire
  5113 ;;		_get_PIR
  5114 ;;		_get_IR
  5115 ;;		_open_door
  5116 ;;		_close_door
  5117 ;;		_write_RTC
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           
  5122                           ;psect for function _I2C_Master_Stop
  5123  0BEA                     _I2C_Master_Stop:	
  5124                           
  5125                           ;./I2C.h: 57:     I2C_Master_Wait();
  5126                           
  5127                           ;incstack = 0
  5128                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5129  0BEA  120A  158A  2408   	fcall	_I2C_Master_Wait
  5130                           
  5131                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  5132  0BED  1683               	bsf	3,5	;RP0=1, select bank1
  5133  0BEE  1303               	bcf	3,6	;RP1=0, select bank1
  5134  0BEF  1511               	bsf	17,2	;volatile
  5135  0BF0  0008               	return
  5136  0BF1                     __end_of_I2C_Master_Stop:	
  5137                           
  5138                           	psect	text27
  5139  0BE3                     __ptext27:	
  5140 ;; *************** function _I2C_Master_Start *****************
  5141 ;; Defined at:
  5142 ;;		line 39 in file "./I2C.h"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;		None
  5145 ;; Auto vars:     Size  Location     Type
  5146 ;;		None
  5147 ;; Return value:  Size  Location     Type
  5148 ;;                  1    wreg      void 
  5149 ;; Registers used:
  5150 ;;		wreg, status,2, status,0, pclath, cstack
  5151 ;; Tracked objects:
  5152 ;;		On entry : 0/0
  5153 ;;		On exit  : 0/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5156 ;;      Params:         0       0       0       0       0
  5157 ;;      Locals:         0       0       0       0       0
  5158 ;;      Temps:          0       0       0       0       0
  5159 ;;      Totals:         0       0       0       0       0
  5160 ;;Total ram usage:        0 bytes
  5161 ;; Hardware stack levels used:    1
  5162 ;; Hardware stack levels required when called:    2
  5163 ;; This function calls:
  5164 ;;		_I2C_Master_Wait
  5165 ;; This function is called by:
  5166 ;;		_get_time
  5167 ;;		_get_day
  5168 ;;		_get_temp
  5169 ;;		_get_hall
  5170 ;;		_get_tripwire
  5171 ;;		_get_PIR
  5172 ;;		_get_IR
  5173 ;;		_open_door
  5174 ;;		_close_door
  5175 ;;		_write_RTC
  5176 ;; This function uses a non-reentrant model
  5177 ;;
  5178                           
  5179                           
  5180                           ;psect for function _I2C_Master_Start
  5181  0BE3                     _I2C_Master_Start:	
  5182                           
  5183                           ;./I2C.h: 41:     I2C_Master_Wait();
  5184                           
  5185                           ;incstack = 0
  5186                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5187  0BE3  120A  158A  2408   	fcall	_I2C_Master_Wait
  5188                           
  5189                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  5190  0BE6  1683               	bsf	3,5	;RP0=1, select bank1
  5191  0BE7  1303               	bcf	3,6	;RP1=0, select bank1
  5192  0BE8  1411               	bsf	17,0	;volatile
  5193  0BE9  0008               	return
  5194  0BEA                     __end_of_I2C_Master_Start:	
  5195                           
  5196                           	psect	text28
  5197  0C08                     __ptext28:	
  5198 ;; *************** function _I2C_Master_Wait *****************
  5199 ;; Defined at:
  5200 ;;		line 32 in file "./I2C.h"
  5201 ;; Parameters:    Size  Location     Type
  5202 ;;		None
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;		None
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  1    wreg      void 
  5207 ;; Registers used:
  5208 ;;		wreg, status,2
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5214 ;;      Params:         0       0       0       0       0
  5215 ;;      Locals:         0       0       0       0       0
  5216 ;;      Temps:          0       0       0       0       0
  5217 ;;      Totals:         0       0       0       0       0
  5218 ;;Total ram usage:        0 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; Hardware stack levels required when called:    1
  5221 ;; This function calls:
  5222 ;;		Nothing
  5223 ;; This function is called by:
  5224 ;;		_I2C_Master_Start
  5225 ;;		_I2C_Master_RepeatedStart
  5226 ;;		_I2C_Master_Stop
  5227 ;;		_I2C_Master_Write
  5228 ;;		_I2C_Master_Read
  5229 ;; This function uses a non-reentrant model
  5230 ;;
  5231                           
  5232                           
  5233                           ;psect for function _I2C_Master_Wait
  5234  0C08                     _I2C_Master_Wait:	
  5235  0C08                     l124:	
  5236                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5237                           
  5238                           ;incstack = 0
  5239                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5240                           
  5241  0C08  1683               	bsf	3,5	;RP0=1, select bank1
  5242  0C09  1303               	bcf	3,6	;RP1=0, select bank1
  5243  0C0A  1914               	btfsc	20,2	;volatile
  5244  0C0B  2C08               	goto	l124
  5245  0C0C  0811               	movf	17,w	;volatile
  5246  0C0D  391F               	andlw	31
  5247  0C0E  1903               	btfsc	3,2
  5248  0C0F  0008               	return
  5249  0C10  2C08               	goto	l124
  5250  0C11                     __end_of_I2C_Master_Wait:	
  5251                           
  5252                           	psect	text29
  5253  0C11                     __ptext29:	
  5254 ;; *************** function _UART_Write *****************
  5255 ;; Defined at:
  5256 ;;		line 54 in file "./UART.h"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;  data            1    wreg     unsigned char 
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;  data            1    3[COMMON] unsigned char 
  5261 ;; Return value:  Size  Location     Type
  5262 ;;                  1    wreg      void 
  5263 ;; Registers used:
  5264 ;;		wreg
  5265 ;; Tracked objects:
  5266 ;;		On entry : 0/0
  5267 ;;		On exit  : 0/0
  5268 ;;		Unchanged: 0/0
  5269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5270 ;;      Params:         0       0       0       0       0
  5271 ;;      Locals:         1       0       0       0       0
  5272 ;;      Temps:          0       0       0       0       0
  5273 ;;      Totals:         1       0       0       0       0
  5274 ;;Total ram usage:        1 bytes
  5275 ;; Hardware stack levels used:    1
  5276 ;; Hardware stack levels required when called:    1
  5277 ;; This function calls:
  5278 ;;		Nothing
  5279 ;; This function is called by:
  5280 ;;		_main
  5281 ;;		_UART_Write_Text
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           
  5286                           ;psect for function _UART_Write
  5287  0C11                     _UART_Write:	
  5288                           
  5289                           ;incstack = 0
  5290                           ; Regs used in _UART_Write: [wreg]
  5291                           ;UART_Write@data stored from wreg
  5292  0C11  00F3               	movwf	UART_Write@data
  5293  0C12                     l228:	
  5294                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(!TRMT);
  5295                           
  5296  0C12  1683               	bsf	3,5	;RP0=1, select bank1
  5297  0C13  1303               	bcf	3,6	;RP1=0, select bank1
  5298  0C14  1C98               	btfss	24,1	;volatile
  5299  0C15  2C12               	goto	l228
  5300                           
  5301                           ;./UART.h: 57:   TXREG = data;
  5302  0C16  0873               	movf	UART_Write@data,w
  5303  0C17  1283               	bcf	3,5	;RP0=0, select bank0
  5304  0C18  1303               	bcf	3,6	;RP1=0, select bank0
  5305  0C19  0099               	movwf	25	;volatile
  5306  0C1A  0008               	return
  5307  0C1B                     __end_of_UART_Write:	
  5308                           
  5309                           	psect	text30
  5310  0BDD                     __ptext30:	
  5311 ;; *************** function _UART_TX_Empty *****************
  5312 ;; Defined at:
  5313 ;;		line 31 in file "./UART.h"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;		None
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;		None
  5318 ;; Return value:  Size  Location     Type
  5319 ;;                  1    wreg      unsigned char 
  5320 ;; Registers used:
  5321 ;;		wreg
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5327 ;;      Params:         0       0       0       0       0
  5328 ;;      Locals:         0       0       0       0       0
  5329 ;;      Temps:          0       0       0       0       0
  5330 ;;      Totals:         0       0       0       0       0
  5331 ;;Total ram usage:        0 bytes
  5332 ;; Hardware stack levels used:    1
  5333 ;; Hardware stack levels required when called:    1
  5334 ;; This function calls:
  5335 ;;		Nothing
  5336 ;; This function is called by:
  5337 ;;		_main
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           
  5342                           ;psect for function _UART_TX_Empty
  5343  0BDD                     _UART_TX_Empty:	
  5344                           
  5345                           ;./UART.h: 33:   return TRMT;
  5346                           
  5347                           ;incstack = 0
  5348                           ; Regs used in _UART_TX_Empty: [wreg]
  5349  0BDD  3000               	movlw	0
  5350  0BDE  1683               	bsf	3,5	;RP0=1, select bank1
  5351  0BDF  1303               	bcf	3,6	;RP1=0, select bank1
  5352  0BE0  1898               	btfsc	24,1	;volatile
  5353  0BE1  3001               	movlw	1
  5354  0BE2  0008               	return
  5355  0BE3                     __end_of_UART_TX_Empty:	
  5356                           
  5357                           	psect	text31
  5358  0EB9                     __ptext31:	
  5359 ;; *************** function _Lcd_Write_String *****************
  5360 ;; Defined at:
  5361 ;;		line 100 in file "./LCD4bits.h"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  a               2    0[BANK0 ] PTR unsigned char 
  5364 ;;		 -> NULL(0), STR_17(7), STR_16(7), STR_15(8), 
  5365 ;;		 -> STR_14(8), STR_13(9), STR_12(9), STR_11(12), 
  5366 ;;		 -> STR_10(12), STR_8(10), STR_7(10), STR_6(10), 
  5367 ;;		 -> STR_5(10), STR_4(10), STR_3(10), STR_2(10), 
  5368 ;;		 -> STR_1(10), time(6), temp(6), 
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;  i               2    5[BANK0 ] int 
  5371 ;; Return value:  Size  Location     Type
  5372 ;;                  1    wreg      void 
  5373 ;; Registers used:
  5374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5375 ;; Tracked objects:
  5376 ;;		On entry : 0/0
  5377 ;;		On exit  : 0/0
  5378 ;;		Unchanged: 0/0
  5379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5380 ;;      Params:         0       2       0       0       0
  5381 ;;      Locals:         0       2       0       0       0
  5382 ;;      Temps:          0       3       0       0       0
  5383 ;;      Totals:         0       7       0       0       0
  5384 ;;Total ram usage:        7 bytes
  5385 ;; Hardware stack levels used:    1
  5386 ;; Hardware stack levels required when called:    3
  5387 ;; This function calls:
  5388 ;;		_Lcd_Write_Char
  5389 ;; This function is called by:
  5390 ;;		_main
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           
  5395                           ;psect for function _Lcd_Write_String
  5396  0EB9                     _Lcd_Write_String:	
  5397                           
  5398                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  5399                           
  5400                           ;incstack = 0
  5401                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5402  0EB9  1283               	bcf	3,5	;RP0=0, select bank0
  5403  0EBA  1303               	bcf	3,6	;RP1=0, select bank0
  5404  0EBB  01A5               	clrf	Lcd_Write_String@i
  5405  0EBC  01A6               	clrf	Lcd_Write_String@i+1
  5406  0EBD                     l2963:	
  5407  0EBD  0825               	movf	Lcd_Write_String@i,w
  5408  0EBE  0720               	addwf	Lcd_Write_String@a,w
  5409  0EBF  00A3               	movwf	??_Lcd_Write_String+1
  5410  0EC0  0821               	movf	Lcd_Write_String@a+1,w
  5411  0EC1  00A2               	movwf	??_Lcd_Write_String
  5412  0EC2  1803               	skipnc
  5413  0EC3  0AA2               	incf	??_Lcd_Write_String,f
  5414  0EC4  1BA5               	btfsc	Lcd_Write_String@i,7
  5415  0EC5  03A2               	decf	??_Lcd_Write_String,f
  5416  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  5417  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  5418  0EC8  0822               	movf	??_Lcd_Write_String,w
  5419  0EC9  00A4               	movwf	??_Lcd_Write_String+2
  5420  0ECA  0824               	movf	??_Lcd_Write_String+2,w
  5421  0ECB  00FF               	movwf	127
  5422  0ECC  0823               	movf	??_Lcd_Write_String+1,w
  5423  0ECD  0084               	movwf	4
  5424  0ECE  120A  118A  2500  120A  158A  	fcall	stringtab
  5425  0ED3  3A00               	xorlw	0
  5426  0ED4  1903               	btfsc	3,2
  5427  0ED5  0008               	return
  5428                           
  5429                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  5430  0ED6  0825               	movf	Lcd_Write_String@i,w
  5431  0ED7  0720               	addwf	Lcd_Write_String@a,w
  5432  0ED8  00A3               	movwf	??_Lcd_Write_String+1
  5433  0ED9  0821               	movf	Lcd_Write_String@a+1,w
  5434  0EDA  00A2               	movwf	??_Lcd_Write_String
  5435  0EDB  1803               	skipnc
  5436  0EDC  0AA2               	incf	??_Lcd_Write_String,f
  5437  0EDD  1BA5               	btfsc	Lcd_Write_String@i,7
  5438  0EDE  03A2               	decf	??_Lcd_Write_String,f
  5439  0EDF  1283               	bcf	3,5	;RP0=0, select bank0
  5440  0EE0  1303               	bcf	3,6	;RP1=0, select bank0
  5441  0EE1  0822               	movf	??_Lcd_Write_String,w
  5442  0EE2  00A4               	movwf	??_Lcd_Write_String+2
  5443  0EE3  0824               	movf	??_Lcd_Write_String+2,w
  5444  0EE4  00FF               	movwf	127
  5445  0EE5  0823               	movf	??_Lcd_Write_String+1,w
  5446  0EE6  0084               	movwf	4
  5447  0EE7  120A  118A  2500  120A  158A  	fcall	stringtab
  5448  0EEC  120A  158A  2608  120A  158A  	fcall	_Lcd_Write_Char
  5449  0EF1  3001               	movlw	1
  5450  0EF2  1283               	bcf	3,5	;RP0=0, select bank0
  5451  0EF3  1303               	bcf	3,6	;RP1=0, select bank0
  5452  0EF4  07A5               	addwf	Lcd_Write_String@i,f
  5453  0EF5  1803               	skipnc
  5454  0EF6  0AA6               	incf	Lcd_Write_String@i+1,f
  5455  0EF7  3000               	movlw	0
  5456  0EF8  07A6               	addwf	Lcd_Write_String@i+1,f
  5457  0EF9  2EBD               	goto	l2963
  5458  0EFA                     __end_of_Lcd_Write_String:	
  5459                           
  5460                           	psect	text32
  5461  0E08                     __ptext32:	
  5462 ;; *************** function _Lcd_Write_Char *****************
  5463 ;; Defined at:
  5464 ;;		line 84 in file "./LCD4bits.h"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;  a               1    wreg     unsigned char 
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  a               1    7[COMMON] unsigned char 
  5469 ;;  y               1    6[COMMON] unsigned char 
  5470 ;;  temp            1    5[COMMON] unsigned char 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg, status,2, status,0, pclath, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5480 ;;      Params:         0       0       0       0       0
  5481 ;;      Locals:         3       0       0       0       0
  5482 ;;      Temps:          1       0       0       0       0
  5483 ;;      Totals:         4       0       0       0       0
  5484 ;;Total ram usage:        4 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    2
  5487 ;; This function calls:
  5488 ;;		_Lcd_Port
  5489 ;; This function is called by:
  5490 ;;		_Lcd_Write_String
  5491 ;;		_main
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           
  5496                           ;psect for function _Lcd_Write_Char
  5497  0E08                     _Lcd_Write_Char:	
  5498                           
  5499                           ;incstack = 0
  5500                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  5501                           ;Lcd_Write_Char@a stored from wreg
  5502  0E08  00F7               	movwf	Lcd_Write_Char@a
  5503                           
  5504                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  5505  0E09  0877               	movf	Lcd_Write_Char@a,w
  5506  0E0A  390F               	andlw	15
  5507  0E0B  00F4               	movwf	??_Lcd_Write_Char
  5508  0E0C  0874               	movf	??_Lcd_Write_Char,w
  5509  0E0D  00F5               	movwf	Lcd_Write_Char@temp
  5510                           
  5511                           ;./LCD4bits.h: 88:    y = a&0xF0;
  5512  0E0E  0877               	movf	Lcd_Write_Char@a,w
  5513  0E0F  39F0               	andlw	240
  5514  0E10  00F4               	movwf	??_Lcd_Write_Char
  5515  0E11  0874               	movf	??_Lcd_Write_Char,w
  5516  0E12  00F6               	movwf	Lcd_Write_Char@y
  5517                           
  5518                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  5519  0E13  1283               	bcf	3,5	;RP0=0, select bank0
  5520  0E14  1303               	bcf	3,6	;RP1=0, select bank0
  5521  0E15  1606               	bsf	6,4	;volatile
  5522                           
  5523                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  5524  0E16  0876               	movf	Lcd_Write_Char@y,w
  5525  0E17  00F4               	movwf	??_Lcd_Write_Char
  5526  0E18  3004               	movlw	4
  5527  0E19                     u1405:	
  5528  0E19  1003               	clrc
  5529  0E1A  0CF4               	rrf	??_Lcd_Write_Char,f
  5530  0E1B  3EFF               	addlw	-1
  5531  0E1C  1D03               	skipz
  5532  0E1D  2E19               	goto	u1405
  5533  0E1E  0874               	movf	??_Lcd_Write_Char,w
  5534  0E1F  120A  158A  2437  120A  158A  	fcall	_Lcd_Port
  5535                           
  5536                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  5537  0E24  1283               	bcf	3,5	;RP0=0, select bank0
  5538  0E25  1303               	bcf	3,6	;RP1=0, select bank0
  5539  0E26  1686               	bsf	6,5	;volatile
  5540                           
  5541                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  5542  0E27  301A               	movlw	26
  5543  0E28  00F4               	movwf	??_Lcd_Write_Char
  5544  0E29                     u2977:	
  5545  0E29  0BF4               	decfsz	??_Lcd_Write_Char,f
  5546  0E2A  2E29               	goto	u2977
  5547  0E2B  0000               	nop
  5548                           
  5549                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  5550  0E2C  1283               	bcf	3,5	;RP0=0, select bank0
  5551  0E2D  1303               	bcf	3,6	;RP1=0, select bank0
  5552  0E2E  1286               	bcf	6,5	;volatile
  5553                           
  5554                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  5555  0E2F  0875               	movf	Lcd_Write_Char@temp,w
  5556  0E30  120A  158A  2437  120A  158A  	fcall	_Lcd_Port
  5557                           
  5558                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  5559  0E35  1283               	bcf	3,5	;RP0=0, select bank0
  5560  0E36  1303               	bcf	3,6	;RP1=0, select bank0
  5561  0E37  1686               	bsf	6,5	;volatile
  5562                           
  5563                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  5564  0E38  301A               	movlw	26
  5565  0E39  00F4               	movwf	??_Lcd_Write_Char
  5566  0E3A                     u2987:	
  5567  0E3A  0BF4               	decfsz	??_Lcd_Write_Char,f
  5568  0E3B  2E3A               	goto	u2987
  5569  0E3C  0000               	nop
  5570                           
  5571                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  5572  0E3D  1283               	bcf	3,5	;RP0=0, select bank0
  5573  0E3E  1303               	bcf	3,6	;RP1=0, select bank0
  5574  0E3F  1286               	bcf	6,5	;volatile
  5575  0E40  0008               	return
  5576  0E41                     __end_of_Lcd_Write_Char:	
  5577                           
  5578                           	psect	text33
  5579  04B0                     __ptext33:	
  5580 ;; *************** function _Lcd_Set_Cursor *****************
  5581 ;; Defined at:
  5582 ;;		line 44 in file "./LCD4bits.h"
  5583 ;; Parameters:    Size  Location     Type
  5584 ;;  a               1    wreg     unsigned char 
  5585 ;;  b               1    7[COMMON] unsigned char 
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;  a               1    2[BANK0 ] unsigned char 
  5588 ;;  temp            1    5[BANK0 ] unsigned char 
  5589 ;;  y               1    4[BANK0 ] unsigned char 
  5590 ;;  z               1    3[BANK0 ] unsigned char 
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  1    wreg      void 
  5593 ;; Registers used:
  5594 ;;		wreg, status,2, status,0, pclath, cstack
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5600 ;;      Params:         1       0       0       0       0
  5601 ;;      Locals:         0       4       0       0       0
  5602 ;;      Temps:          0       2       0       0       0
  5603 ;;      Totals:         1       6       0       0       0
  5604 ;;Total ram usage:        7 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:    3
  5607 ;; This function calls:
  5608 ;;		_Lcd_Cmd
  5609 ;; This function is called by:
  5610 ;;		_main
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           
  5615                           ;psect for function _Lcd_Set_Cursor
  5616  04B0                     _Lcd_Set_Cursor:	
  5617                           
  5618                           ;incstack = 0
  5619                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  5620                           ;Lcd_Set_Cursor@a stored from wreg
  5621  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  5622  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  5623  04B2  00A2               	movwf	Lcd_Set_Cursor@a
  5624                           
  5625                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  5626  04B3  0322               	decf	Lcd_Set_Cursor@a,w
  5627  04B4  1D03               	btfss	3,2
  5628  04B5  2CD9               	goto	l2947
  5629                           
  5630                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  5631  04B6  0877               	movf	Lcd_Set_Cursor@b,w
  5632  04B7  3E7F               	addlw	127
  5633  04B8  00A0               	movwf	??_Lcd_Set_Cursor
  5634  04B9  0820               	movf	??_Lcd_Set_Cursor,w
  5635  04BA  00A5               	movwf	Lcd_Set_Cursor@temp
  5636                           
  5637                           ;./LCD4bits.h: 50:   z = temp>>4;
  5638  04BB  0825               	movf	Lcd_Set_Cursor@temp,w
  5639  04BC  00A0               	movwf	??_Lcd_Set_Cursor
  5640  04BD  3004               	movlw	4
  5641  04BE                     u2455:	
  5642  04BE  1003               	clrc
  5643  04BF  0CA0               	rrf	??_Lcd_Set_Cursor,f
  5644  04C0  3EFF               	addlw	-1
  5645  04C1  1D03               	skipz
  5646  04C2  2CBE               	goto	u2455
  5647  04C3  0820               	movf	??_Lcd_Set_Cursor,w
  5648  04C4  00A1               	movwf	??_Lcd_Set_Cursor+1
  5649  04C5  0821               	movf	??_Lcd_Set_Cursor+1,w
  5650  04C6  00A3               	movwf	Lcd_Set_Cursor@z
  5651                           
  5652                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  5653  04C7  0825               	movf	Lcd_Set_Cursor@temp,w
  5654  04C8  390F               	andlw	15
  5655  04C9  00A0               	movwf	??_Lcd_Set_Cursor
  5656  04CA  0820               	movf	??_Lcd_Set_Cursor,w
  5657  04CB  00A4               	movwf	Lcd_Set_Cursor@y
  5658                           
  5659                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  5660  04CC  0823               	movf	Lcd_Set_Cursor@z,w
  5661  04CD  120A  158A  2451  120A  118A  	fcall	_Lcd_Cmd
  5662                           
  5663                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  5664  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  5665  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  5666  04D4  0824               	movf	Lcd_Set_Cursor@y,w
  5667  04D5  120A  158A  2451   	fcall	_Lcd_Cmd
  5668                           
  5669                           ;./LCD4bits.h: 54:  }
  5670  04D8  0008               	return
  5671  04D9                     l2947:	
  5672  04D9  3002               	movlw	2
  5673  04DA  0622               	xorwf	Lcd_Set_Cursor@a,w
  5674  04DB  1D03               	btfss	3,2
  5675  04DC  0008               	return
  5676                           
  5677                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  5678  04DD  0877               	movf	Lcd_Set_Cursor@b,w
  5679  04DE  3EBF               	addlw	191
  5680  04DF  00A0               	movwf	??_Lcd_Set_Cursor
  5681  04E0  0820               	movf	??_Lcd_Set_Cursor,w
  5682  04E1  00A5               	movwf	Lcd_Set_Cursor@temp
  5683                           
  5684                           ;./LCD4bits.h: 58:   z = temp>>4;
  5685  04E2  0825               	movf	Lcd_Set_Cursor@temp,w
  5686  04E3  00A0               	movwf	??_Lcd_Set_Cursor
  5687  04E4  3004               	movlw	4
  5688  04E5                     u2475:	
  5689  04E5  1003               	clrc
  5690  04E6  0CA0               	rrf	??_Lcd_Set_Cursor,f
  5691  04E7  3EFF               	addlw	-1
  5692  04E8  1D03               	skipz
  5693  04E9  2CE5               	goto	u2475
  5694  04EA  0820               	movf	??_Lcd_Set_Cursor,w
  5695  04EB  00A1               	movwf	??_Lcd_Set_Cursor+1
  5696  04EC  0821               	movf	??_Lcd_Set_Cursor+1,w
  5697  04ED  00A3               	movwf	Lcd_Set_Cursor@z
  5698                           
  5699                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  5700  04EE  0825               	movf	Lcd_Set_Cursor@temp,w
  5701  04EF  390F               	andlw	15
  5702  04F0  00A0               	movwf	??_Lcd_Set_Cursor
  5703  04F1  0820               	movf	??_Lcd_Set_Cursor,w
  5704  04F2  00A4               	movwf	Lcd_Set_Cursor@y
  5705                           
  5706                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  5707  04F3  0823               	movf	Lcd_Set_Cursor@z,w
  5708  04F4  120A  158A  2451  120A  118A  	fcall	_Lcd_Cmd
  5709                           
  5710                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  5711  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  5712  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  5713  04FB  0824               	movf	Lcd_Set_Cursor@y,w
  5714  04FC  120A  158A  2451   	fcall	_Lcd_Cmd
  5715  04FF  0008               	return
  5716  0500                     __end_of_Lcd_Set_Cursor:	
  5717                           
  5718                           	psect	text34
  5719  0C1B                     __ptext34:	
  5720 ;; *************** function _Lcd_Clear *****************
  5721 ;; Defined at:
  5722 ;;		line 38 in file "./LCD4bits.h"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;		None
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;		None
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  1    wreg      void 
  5729 ;; Registers used:
  5730 ;;		wreg, status,2, status,0, pclath, cstack
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5736 ;;      Params:         0       0       0       0       0
  5737 ;;      Locals:         0       0       0       0       0
  5738 ;;      Temps:          0       0       0       0       0
  5739 ;;      Totals:         0       0       0       0       0
  5740 ;;Total ram usage:        0 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    3
  5743 ;; This function calls:
  5744 ;;		_Lcd_Cmd
  5745 ;; This function is called by:
  5746 ;;		_main
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           
  5751                           ;psect for function _Lcd_Clear
  5752  0C1B                     _Lcd_Clear:	
  5753                           
  5754                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  5755                           
  5756                           ;incstack = 0
  5757                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  5758  0C1B  3000               	movlw	0
  5759  0C1C  120A  158A  2451  120A  158A  	fcall	_Lcd_Cmd
  5760                           
  5761                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  5762  0C21  3001               	movlw	1
  5763  0C22  120A  158A  2451   	fcall	_Lcd_Cmd
  5764  0C25  0008               	return
  5765  0C26                     __end_of_Lcd_Clear:	
  5766                           
  5767                           	psect	text35
  5768  0C51                     __ptext35:	
  5769 ;; *************** function _Lcd_Cmd *****************
  5770 ;; Defined at:
  5771 ;;		line 29 in file "./LCD4bits.h"
  5772 ;; Parameters:    Size  Location     Type
  5773 ;;  a               1    wreg     unsigned char 
  5774 ;; Auto vars:     Size  Location     Type
  5775 ;;  a               1    6[COMMON] unsigned char 
  5776 ;; Return value:  Size  Location     Type
  5777 ;;                  1    wreg      void 
  5778 ;; Registers used:
  5779 ;;		wreg, status,2, status,0, pclath, cstack
  5780 ;; Tracked objects:
  5781 ;;		On entry : 0/0
  5782 ;;		On exit  : 0/0
  5783 ;;		Unchanged: 0/0
  5784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5785 ;;      Params:         0       0       0       0       0
  5786 ;;      Locals:         1       0       0       0       0
  5787 ;;      Temps:          2       0       0       0       0
  5788 ;;      Totals:         3       0       0       0       0
  5789 ;;Total ram usage:        3 bytes
  5790 ;; Hardware stack levels used:    1
  5791 ;; Hardware stack levels required when called:    2
  5792 ;; This function calls:
  5793 ;;		_Lcd_Port
  5794 ;; This function is called by:
  5795 ;;		_Lcd_Clear
  5796 ;;		_Lcd_Set_Cursor
  5797 ;;		_Lcd_Init
  5798 ;;		_Lcd_Shift_Right
  5799 ;;		_Lcd_Shift_Left
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           
  5804                           ;psect for function _Lcd_Cmd
  5805  0C51                     _Lcd_Cmd:	
  5806                           
  5807                           ;incstack = 0
  5808                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  5809                           ;Lcd_Cmd@a stored from wreg
  5810  0C51  00F6               	movwf	Lcd_Cmd@a
  5811                           
  5812                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  5813  0C52  1283               	bcf	3,5	;RP0=0, select bank0
  5814  0C53  1303               	bcf	3,6	;RP1=0, select bank0
  5815  0C54  1206               	bcf	6,4	;volatile
  5816                           
  5817                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  5818  0C55  0876               	movf	Lcd_Cmd@a,w
  5819  0C56  120A  158A  2437  120A  158A  	fcall	_Lcd_Port
  5820                           
  5821                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  5822  0C5B  1283               	bcf	3,5	;RP0=0, select bank0
  5823  0C5C  1303               	bcf	3,6	;RP1=0, select bank0
  5824  0C5D  1686               	bsf	6,5	;volatile
  5825                           
  5826                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  5827  0C5E  300B               	movlw	11
  5828  0C5F  00F5               	movwf	??_Lcd_Cmd+1
  5829  0C60  3062               	movlw	98
  5830  0C61  00F4               	movwf	??_Lcd_Cmd
  5831  0C62                     u2997:	
  5832  0C62  0BF4               	decfsz	??_Lcd_Cmd,f
  5833  0C63  2C62               	goto	u2997
  5834  0C64  0BF5               	decfsz	??_Lcd_Cmd+1,f
  5835  0C65  2C62               	goto	u2997
  5836  0C66  0000               	nop
  5837                           
  5838                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  5839  0C67  1283               	bcf	3,5	;RP0=0, select bank0
  5840  0C68  1303               	bcf	3,6	;RP1=0, select bank0
  5841  0C69  1286               	bcf	6,5	;volatile
  5842  0C6A  0008               	return
  5843  0C6B                     __end_of_Lcd_Cmd:	
  5844                           
  5845                           	psect	text36
  5846  0C37                     __ptext36:	
  5847 ;; *************** function _Lcd_Port *****************
  5848 ;; Defined at:
  5849 ;;		line 7 in file "./LCD4bits.h"
  5850 ;; Parameters:    Size  Location     Type
  5851 ;;  a               1    wreg     unsigned char 
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;  a               1    3[COMMON] unsigned char 
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  1    wreg      void 
  5856 ;; Registers used:
  5857 ;;		wreg
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5863 ;;      Params:         0       0       0       0       0
  5864 ;;      Locals:         1       0       0       0       0
  5865 ;;      Temps:          0       0       0       0       0
  5866 ;;      Totals:         1       0       0       0       0
  5867 ;;Total ram usage:        1 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; Hardware stack levels required when called:    1
  5870 ;; This function calls:
  5871 ;;		Nothing
  5872 ;; This function is called by:
  5873 ;;		_Lcd_Cmd
  5874 ;;		_Lcd_Init
  5875 ;;		_Lcd_Write_Char
  5876 ;; This function uses a non-reentrant model
  5877 ;;
  5878                           
  5879                           
  5880                           ;psect for function _Lcd_Port
  5881  0C37                     _Lcd_Port:	
  5882                           
  5883                           ;incstack = 0
  5884                           ; Regs used in _Lcd_Port: [wreg]
  5885                           ;Lcd_Port@a stored from wreg
  5886  0C37  00F3               	movwf	Lcd_Port@a
  5887                           
  5888                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  5889  0C38  1C73               	btfss	Lcd_Port@a,0
  5890  0C39  2C3E               	goto	l150
  5891                           
  5892                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  5893  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  5894  0C3B  1303               	bcf	3,6	;RP1=0, select bank0
  5895  0C3C  1406               	bsf	6,0	;volatile
  5896  0C3D  2C41               	goto	l151
  5897  0C3E                     l150:	
  5898                           ;./LCD4bits.h: 11:  else
  5899                           
  5900                           
  5901                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  5902  0C3E  1283               	bcf	3,5	;RP0=0, select bank0
  5903  0C3F  1303               	bcf	3,6	;RP1=0, select bank0
  5904  0C40  1006               	bcf	6,0	;volatile
  5905  0C41                     l151:	
  5906                           
  5907                           ;./LCD4bits.h: 14:  if(a & 2)
  5908  0C41  1CF3               	btfss	Lcd_Port@a,1
  5909  0C42  2C45               	goto	l152
  5910                           
  5911                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  5912  0C43  1486               	bsf	6,1	;volatile
  5913  0C44  2C46               	goto	l153
  5914  0C45                     l152:	
  5915                           ;./LCD4bits.h: 16:  else
  5916                           
  5917                           
  5918                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  5919  0C45  1086               	bcf	6,1	;volatile
  5920  0C46                     l153:	
  5921                           
  5922                           ;./LCD4bits.h: 19:  if(a & 4)
  5923  0C46  1D73               	btfss	Lcd_Port@a,2
  5924  0C47  2C4A               	goto	l154
  5925                           
  5926                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  5927  0C48  1506               	bsf	6,2	;volatile
  5928  0C49  2C4B               	goto	l155
  5929  0C4A                     l154:	
  5930                           ;./LCD4bits.h: 21:  else
  5931                           
  5932                           
  5933                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  5934  0C4A  1106               	bcf	6,2	;volatile
  5935  0C4B                     l155:	
  5936                           
  5937                           ;./LCD4bits.h: 24:  if(a & 8)
  5938  0C4B  1DF3               	btfss	Lcd_Port@a,3
  5939  0C4C  2C4F               	goto	l156
  5940                           
  5941                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  5942  0C4D  1586               	bsf	6,3	;volatile
  5943  0C4E  0008               	return
  5944  0C4F                     l156:	
  5945                           ;./LCD4bits.h: 26:  else
  5946                           
  5947                           
  5948                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  5949  0C4F  1186               	bcf	6,3	;volatile
  5950  0C50  0008               	return
  5951  0C51                     __end_of_Lcd_Port:	
  5952                           
  5953                           	psect	text37
  5954  0CA1                     __ptext37:	
  5955 ;; *************** function _manual_pwm *****************
  5956 ;; Defined at:
  5957 ;;		line 56 in file "mainMaster.c"
  5958 ;; Parameters:    Size  Location     Type
  5959 ;;		None
  5960 ;; Auto vars:     Size  Location     Type
  5961 ;;		None
  5962 ;; Return value:  Size  Location     Type
  5963 ;;                  1    wreg      void 
  5964 ;; Registers used:
  5965 ;;		wreg, status,2, status,0
  5966 ;; Tracked objects:
  5967 ;;		On entry : 0/0
  5968 ;;		On exit  : 0/0
  5969 ;;		Unchanged: 0/0
  5970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5971 ;;      Params:         0       0       0       0       0
  5972 ;;      Locals:         0       0       0       0       0
  5973 ;;      Temps:          3       0       0       0       0
  5974 ;;      Totals:         3       0       0       0       0
  5975 ;;Total ram usage:        3 bytes
  5976 ;; Hardware stack levels used:    1
  5977 ;; This function calls:
  5978 ;;		Nothing
  5979 ;; This function is called by:
  5980 ;;		Interrupt level 1
  5981 ;; This function uses a non-reentrant model
  5982 ;;
  5983                           
  5984                           
  5985                           ;psect for function _manual_pwm
  5986  0CA1                     _manual_pwm:	
  5987                           
  5988                           ;mainMaster.c: 57:     if (INTCONbits.T0IF == 1){
  5989  0CA1  1D0B               	btfss	11,2	;volatile
  5990  0CA2  2CB9               	goto	i1l285
  5991                           
  5992                           ;mainMaster.c: 59:         cont++;
  5993  0CA3  3001               	movlw	1
  5994  0CA4  00F0               	movwf	??_manual_pwm
  5995  0CA5  0870               	movf	??_manual_pwm,w
  5996  0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  5997  0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  5998  0CA8  07C2               	addwf	_cont,f
  5999                           
  6000                           ;mainMaster.c: 60:             if(cont < 200){
  6001  0CA9  30C8               	movlw	200
  6002  0CAA  0242               	subwf	_cont,w
  6003  0CAB  1803               	skipnc
  6004  0CAC  2CB5               	goto	i1l2419
  6005                           
  6006                           ;mainMaster.c: 61:                 if(cont < val){
  6007  0CAD  0841               	movf	_val,w
  6008  0CAE  0242               	subwf	_cont,w
  6009  0CAF  1803               	skipnc
  6010  0CB0  2CB3               	goto	i1l282
  6011                           
  6012                           ;mainMaster.c: 62:                     PORTAbits.RA1 = 1;
  6013  0CB1  1485               	bsf	5,1	;volatile
  6014                           
  6015                           ;mainMaster.c: 63:                 }else{
  6016  0CB2  2CB6               	goto	i1l2421
  6017  0CB3                     i1l282:	
  6018                           
  6019                           ;mainMaster.c: 64:                     PORTAbits.RA1 = 0;
  6020  0CB3  1085               	bcf	5,1	;volatile
  6021  0CB4  2CB6               	goto	i1l2421
  6022  0CB5                     i1l2419:	
  6023                           
  6024                           ;mainMaster.c: 67:                 cont = 0;
  6025  0CB5  01C2               	clrf	_cont
  6026  0CB6                     i1l2421:	
  6027                           
  6028                           ;mainMaster.c: 69:             TMR0 = 56;
  6029  0CB6  3038               	movlw	56
  6030  0CB7  0081               	movwf	1	;volatile
  6031                           
  6032                           ;mainMaster.c: 70:             INTCONbits.T0IF = 0;
  6033  0CB8  110B               	bcf	11,2	;volatile
  6034  0CB9                     i1l285:	
  6035  0CB9  0872               	movf	??_manual_pwm+2,w
  6036  0CBA  008A               	movwf	10
  6037  0CBB  0E71               	swapf	(??_manual_pwm+1)^(0+4294967168),w
  6038  0CBC  0083               	movwf	3
  6039  0CBD  0EFE               	swapf	126,f
  6040  0CBE  0E7E               	swapf	126,w
  6041  0CBF  0009               	retfie
  6042  0CC0                     __end_of_manual_pwm:	
  6043  007E                     btemp	set	126	;btemp
  6044  007E                     wtemp0	set	126
  6045                           
  6046                           	psect	intentry
  6047  0004                     __pintentry:	
  6048                           ;incstack = 0
  6049                           ; Regs used in _manual_pwm: [wreg+status,2+status,0]
  6050                           
  6051  0004                     interrupt_function:	
  6052  007E                     saved_w	set	btemp
  6053  0004  00FE               	movwf	btemp
  6054  0005  0E03               	swapf	3,w
  6055  0006  00F1               	movwf	??_manual_pwm+1
  6056  0007  080A               	movf	10,w
  6057  0008  00F2               	movwf	??_manual_pwm+2
  6058  0009  120A  158A  2CA1   	ljmp	_manual_pwm


Data Sizes:
    Strings     153
    Constant    10
    Data        0
    BSS         29
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     33      59
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_9(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_20(CODE[4]), STR_19(CODE[5]), STR_18(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), temp(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_temp@temp_string	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_time@time_string	PTR unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), 

    day2	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[10]), 
		 -> STR_1(CODE[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 12
		 -> NULL(NULL[0]), STR_17(CODE[7]), STR_16(CODE[7]), STR_15(CODE[8]), 
		 -> STR_14(CODE[8]), STR_13(CODE[9]), STR_12(CODE[9]), STR_11(CODE[12]), 
		 -> STR_10(CODE[12]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[10]), 
		 -> STR_1(CODE[10]), time(BANK0[6]), temp(BANK0[6]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_Char
    _main->_get_IR
    _main->_get_PIR
    _main->_get_day
    _main->_get_hall
    _main->_get_tripwire
    _main->_strcmp
    _setup->_I2C_Master_Init
    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _open_door->_I2C_Master_Write
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _close_door->_I2C_Master_Write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _manual_pwm in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_UART_Init
    _UART_Init->___aldiv
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _get_temp->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read

Critical Paths under _manual_pwm in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _manual_pwm in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _manual_pwm in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _manual_pwm in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   33061
                                             31 BANK0      2     2      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                      _UART_TX_Empty
                         _UART_Write
                         _close_door
                             _get_IR
                            _get_PIR
                            _get_day
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                          _open_door
                              _setup
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     259
                                              3 COMMON     5     3      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1880
                    _I2C_Master_Init
                           _Lcd_Init
                          _UART_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4    1118
                                              4 COMMON     2     2      0
                                             14 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     805
                                              3 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              0 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     542
                                              4 COMMON     4     4      0
                                             13 BANK0      4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     421
                                              3 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _open_door                                            0     0      0    2101
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    3010
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                             5     5      0    3328
                                              2 BANK0      5     5      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             9     9      0    5604
                                             22 BANK0      9     9      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1806
                                              9 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     168
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    3010
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     2      0    3010
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    3010
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    3010
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     875
                                              3 COMMON     4     2      2
                                              0 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _close_door                                           0     0      0    2101
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2101
                                              3 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Empty                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1298
                                              0 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              4 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1130
                                              7 COMMON     1     0      1
                                              0 BANK0      6     6      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              4 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _manual_pwm                                           3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_TX_Empty
   _UART_Write
   _close_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_day
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _open_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
     _initOscilador
   _strcmp

 _manual_pwm (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      46       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     21      3B       5       73.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      46      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Mar 08 00:21:12 2019

                                _i 004A                                  _j 0049  
                                pc 0002                     ___bmul@product 0075  
                      __CFG_CP$OFF 0000                        get_hall@key 0022  
                               _IR 004C                                 fsr 0004  
                              l124 0C08                                l150 0C3E  
                              l142 07F1                                l151 0C41  
                              l143 07F4                                l152 0C45  
                              l320 0212                                l153 0C46  
                              l154 0C4A                                l155 0C4B  
                              l156 0C4F                                l228 0C12  
                              l319 020F                                l193 0F9E  
                              l291 00A3                                l557 0668  
                              _GIE 005F                       __CFG_CPD$OFF 0000  
                              _PIR 004D                      ?_get_tripwire 0070  
                              _val 0041                                fsr0 0004  
                              indf 0000                       __CFG_LVP$OFF 0000  
                             l2001 0DC0                               l2005 0DCB  
                             l2101 0F77                               l2105 0F7C  
                             l2211 0C28                               l2203 0D51  
                             l2205 0D5C                               l2215 0C2E  
                             l2207 0D64                               l3033 0633  
                             l2091 0F5E                               l3211 01B3  
                             l2093 0F64                               l2085 0F4D  
                             l3301 02D4                               l3221 01C4  
                             l3141 0087                               l3109 002B  
                             l2095 0F6A                               l2087 0F52  
                             l3231 01CE                               l3223 01C6  
                             l3215 01B8                               l2097 0F70  
                             l2089 0F58                               l3233 01D0  
                             l3225 01C8                               l3145 008B  
                             l2099 0F77                               l3227 01CA  
                             l3219 01C2                               l3155 0098  
                             l3139 007C                               l3163 00A5  
                             l3093 0D81                               l3309 02F4  
                             l3261 0233                               l3229 01CC  
                             l3237 01D5                               l2711 0FB2  
                             l3095 0D74                               l3255 0224  
                             l3263 0234                               l3239 01F6  
                             l2721 0FEA                               l2713 0FC2  
                             l3097 0D96                               l3257 022F  
                             l3291 02B5                               l3283 0293  
                             l3275 0283                               l3381 0338  
                             l2725 0FF7                               l3293 02C1  
                             l2911 037D                               l2905 035C  
                             l2761 06CE                               l3377 01DF  
                             l2747 0689                               l2739 0679  
                             l3379 0F84                               l2781 0E93  
                             l2925 0390                               l2917 038C  
                             l2765 06DC                               l2757 06C1  
                             l2749 0699                               l2791 0EB4  
                             l2927 0305                               l2929 03D3  
                             l2857 0496                               l2947 04D9  
                             l2963 0EBD                               l2787 0EA9  
                             l2779 0E85                               l1995 0DA4  
                             l2883 0325                               l1997 0DB2  
                             l2889 0343                               l2899 035A  
                             STR_1 053C                               STR_2 0550  
                      get_time@min 0025                               STR_3 0578  
                             STR_4 055A                               STR_5 056E  
                             STR_6 0546                               STR_7 0564  
                             STR_8 0532                               STR_9 05A4  
                             _BRGH 04C2                               _CREN 00C4  
                             u1405 0E19                               u2045 0FB6  
                             u2215 0E88                               u1335 0DA7  
                             u2135 068D                               u2311 0413  
                             u2312 0414                               u2065 0FC4  
                             u2313 0419                               u2305 03FC  
                             u2314 041A                               u2235 0E94  
                             u1355 0DB8                               u2075 0FD9  
                             u2155 069B                               u2315 041F  
                             u2316 0420                               u2245 0EA0  
                             u1365 0DC1                               u2085 0FEB  
                             u2165 06B0                               u2255 0EAA  
                             u2175 06C2                               u2351 0473  
                             u2335 0443                               u2352 0474  
                             u2353 0479                               u2345 045C  
                             u2354 047A                               u2515 060B  
                             u2275 0DE2                               u2355 047F  
                             u2356 0480                               u2455 04BE  
                             u2535 0734                               u2295 03E3  
                             u2545 0753                               u2475 04E5  
                             u2395 0373                               u2807 00C3  
                             u2817 00D5                               u2907 0175  
                             u2827 00E7                               _PEIE 005E  
                             u2685 0209                               u2917 0185  
                             u2837 00F9                               u2927 0197  
                             u2847 010B                               u2937 01A9  
                             u2857 011D                               u2947 077A  
                             u2867 012F                               _RCEN 048B  
                             _RCIF 0065                               u2957 078A  
                             u2877 0141                               u2967 079A  
                             u2887 0153                               u2977 0E29  
                             u2897 0165                               u2987 0E3A  
                             u2997 0C62                               _TMR0 0001  
                             _SPEN 00C7                               _TRMT 04C1  
                             _TXEN 04C5                               _SYNC 04C4  
                     __CFG_WRT$OFF 0000                               _day1 004B  
                             _day2 004E                               _bank 0043  
                ?_Lcd_Write_String 0020   __end_of_I2C_Master_RepeatedStart 0BF8  
                             _cont 0042                               _door 007A  
                             _main 001D                               _temp 004F  
                             _time 0055                               _trip 0079  
                             btemp 007E                               start 000C  
               ??_Lcd_Write_String 0022                      __CFG_IESO$OFF 0000  
                  __end_of_Lcd_Cmd 0C6B                  ___bmul@multiplier 0076  
                    __CFG_MCLRE$ON 0000                get_temp@temp_string 003D  
                 ?_I2C_Master_Init 002D                   ?_I2C_Master_Read 0073  
                 ?_I2C_Master_Wait 0070                   ?_I2C_Master_Stop 0070  
                  __end_of___aldiv 06E5                              ?_main 0070  
                            STR_10 051A                              STR_11 0526  
                            STR_20 05AF                              STR_12 0582  
                            STR_13 058B                              STR_14 0594  
                            STR_15 059C                              STR_16 0595  
                            STR_17 059D                      __CFG_WDTE$OFF 0000  
                            STR_18 05B0                              STR_19 05AA  
                     get_time@hour 0024                              _ANSEL 0188  
                  __end_of___lldiv 1000                     ??_get_tripwire 0077  
                  __end_of___lwdiv 0EB9                    __end_of___lwmod 0DD0  
                            i1l282 0CB3                              i1l285 0CB9  
                            _RCREG 001A                              _SPBRG 0099  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007            __size_of_Lcd_Set_Cursor 0050  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087                              _TRISD 0088  
                            _SSPIE 0463                              _SSPIF 0063  
                            _TXREG 0019                    __end_of_get_PIR 0D06  
                   __CFG_FCMEN$OFF 0000                    __end_of_get_day 0E7B  
                      ?_UART_Write 0070                 __size_of_UART_Init 00D8  
                            _alarm 0044                    __end_of_dpowers 051A  
                            _setup 0EFA                              _state 0078  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 03D8                   __end_of_Lcd_Init 07CE  
                 __end_of_Lcd_Port 0C51                    __initialization 000F  
                     __end_of_main 02FE             __size_of_initOscilador 0055  
                           ??_main 003F                 __size_of_Lcd_Clear 000B  
                ?_I2C_Master_Start 0070                  ?_I2C_Master_Write 0073  
               ??_I2C_Master_Start 0073                 ??_I2C_Master_Write 0075  
                           ?_setup 0070                             _ANSELH 0189  
                           i1l2421 0CB6                             i1l2419 0CB5  
                        ??_Lcd_Cmd 0074            __size_of_Lcd_Write_Char 0039  
                           _SSPADD 0093                             _TRISC3 043B  
                           _TRISC4 043C                             _TRISC6 043E  
                           _TRISC7 043F                             _SSPCON 0014  
                           _SSPBUF 0013                     __CFG_PWRTE$OFF 0000  
         _I2C_Master_RepeatedStart 0BF1                   __end_of_get_hall 0D29  
                __end_of_UART_Init 04B0                   __end_of_get_temp 0656  
                 __end_of_get_time 076E                             ___bmul 0C26  
              __size_of_UART_Write 000A                          ??___aldiv 0073  
                           _change 0048                          ??___lldiv 0073  
                           _get_IR 0CC0                          ??___lwdiv 0077  
                        ??___lwmod 0027                          ??_get_PIR 0077  
            __end_of_UART_TX_Empty 0BE3                          ??_get_day 0077  
                           _strcat 0D4C                             _strcmp 0D70  
                           saved_w 007E                          ??_sprintf 002C  
                  Lcd_Set_Cursor@a 0022                    Lcd_Set_Cursor@b 0077  
                  Lcd_Set_Cursor@y 0024                    Lcd_Set_Cursor@z 0023  
          __end_of__initialization 0019                      _initOscilador 0F4B  
                __end_of_Lcd_Clear 0C26               __end_of_get_tripwire 0D4C  
              ___bmul@multiplicand 0073                     __pcstackCOMMON 0070  
                    __end_of_setup 0F4B                     _Lcd_Set_Cursor 04B0  
                   _OPTION_REGbits 0081                          ?_Lcd_Init 0070  
                        ?_Lcd_Port 0070                            ??_setup 0078  
                       __pbssBANK0 0041                     ?_initOscilador 0070  
                       __pmaintext 001D                            ?___bmul 0073  
                          ?_get_IR 0070                         __pintentry 0004  
               __size_of_open_door 001B          __size_of_Lcd_Write_String 0041  
           __end_of_Lcd_Set_Cursor 0500                            ?_strcat 0073  
                          ?_strcmp 0073                         _close_door 0C6B  
                     ??_UART_Write 0073                         ??_Lcd_Init 0020  
                       ??_Lcd_Port 0073                            _SSPCON2 0091  
                        ?_get_hall 0070                            _SSPSTAT 0094  
                        ?_get_temp 0070                          ?_get_time 0070  
                       __stringtab 0500                initOscilador@option 0075  
                   _Lcd_Write_Char 0E08                            _Lcd_Cmd 0C51  
                       _manual_pwm 0CA1                            ___aldiv 0656  
                  __size_of___bmul 0011                            ___lldiv 0FA0  
               __end_of_UART_Write 0C1B                            ___lwdiv 0E7B  
                          ___lwmod 0D9C                    __size_of_get_IR 0023  
                          _change1 0047                            _change2 0046  
                          _change3 0045                    ?_Lcd_Set_Cursor 0077  
                          _get_PIR 0CE3                            __ptext1 0D70  
                          __ptext2 0EFA                            __ptext3 0F4B  
                          __ptext4 03D8                            __ptext5 0656  
                          __ptext6 076E                            __ptext7 0DD0  
                          __ptext8 0FA0                            __ptext9 0C86  
                          _get_day 0E41                get_time@time_string 0026  
                  __size_of_strcat 0024                    __size_of_strcmp 002C  
                          _dpowers 0510                   ___aldiv@dividend 0024  
         __size_of_I2C_Master_Init 0038           __size_of_I2C_Master_Read 002E  
         __size_of_I2C_Master_Wait 0009           __size_of_I2C_Master_Stop 0007  
                  ??_initOscilador 0073                         ??_get_hall 0077  
                          _sprintf 02FE                            clrloop0 0C01  
           __end_of_Lcd_Write_Char 0E41                         ??_get_temp 0036  
                       ??_get_time 0022               end_of_initialization 0019  
            __size_of_get_tripwire 0023         ??_I2C_Master_RepeatedStart 0073  
                __end_of_open_door 0CA1                         get_PIR@PIR 0022  
        __size_of_I2C_Master_Start 0007          __size_of_I2C_Master_Write 0008  
                  ___lldiv@divisor 0020                    ___lldiv@counter 002C  
                        _RCSTAbits 0018                   ___aldiv@quotient 002A  
                 I2C_Master_Init@c 002D                   I2C_Master_Read@a 0073  
                        Lcd_Port@a 0073                            strcmp@r 0020  
                        _UART_Init 03D8                          _PORTAbits 0005  
                        _PORTBbits 0006                          _PORTCbits 0007  
                        _PORTDbits 0008                     UART_Write@data 0073  
                     _get_tripwire 0D29                        ?_close_door 0070  
                        _TRISCbits 0087                    ?_Lcd_Write_Char 0070  
                Lcd_Write_String@a 0020                  Lcd_Write_String@i 0025  
                        _Lcd_Clear 0C1B                        ?_manual_pwm 0070  
                   __end_of___bmul 0C37                   _Lcd_Write_String 0EB9  
                       ?_UART_Init 002E                     __end_of_get_IR 0CE3  
                   __end_of_strcat 0D70                     __end_of_strcmp 0D9C  
              start_initialization 000F                  __size_of_Lcd_Init 0060  
                __size_of_Lcd_Port 001A                  ??_I2C_Master_Init 0074  
                ??_I2C_Master_Read 0075                  ??_I2C_Master_Wait 0073  
                ??_I2C_Master_Stop 0073             __size_of_UART_TX_Empty 0006  
         __CFG_FOSC$INTRC_NOCLKOUT 0000                         ?_Lcd_Clear 0070  
                         ??___bmul 0074                __size_of_close_door 001B  
                         ??_get_IR 0077                    Lcd_Write_Char@a 0077  
                  Lcd_Write_Char@y 0076                           ??_strcat 0074  
                         ??_strcmp 0075                        __pbssCOMMON 0078  
                        ___latbits 0002                      __pcstackBANK0 0020  
              __size_of_manual_pwm 001F                  __size_of_get_hall 0023  
                         ?_Lcd_Cmd 0070                  __size_of_get_temp 00A3  
                __size_of_get_time 0089                        sprintf@flag 0030  
                      sprintf@prec 0031                   _I2C_Master_Start 0BE3  
                 _I2C_Master_Write 0BF8                   ___lwdiv@dividend 0075  
                 ??_Lcd_Set_Cursor 0020                    get_temp@decimal 0039  
                         ?___aldiv 0020                           ?___lldiv 0020  
                         ?___lwdiv 0073                           ?___lwmod 0023  
                      ??_UART_Init 0032                           ?_get_PIR 0070  
                        __pstrings 0500                           ?_get_day 0070  
                  get_temp@tempLSB 003E                    get_temp@tempMSB 003C  
                    _UART_TX_Empty 0BDD                   ___lwdiv@quotient 0021  
                         ?_sprintf 0029                         UART_Init@x 0074  
                   __size_of_setup 0051                    ___aldiv@divisor 0020  
                interrupt_function 0004                    ___aldiv@counter 0028  
                        clear_ram0 0C00                          _open_door 0C86  
                         Lcd_Cmd@a 0076                        ??_Lcd_Clear 0077  
                UART_Init@baudrate 002E                        __stringbase 050F  
                   ?_UART_TX_Empty 0070                   ??_Lcd_Write_Char 0074  
                     ??_close_door 0075                           _Lcd_Init 076E  
                         _Lcd_Port 0C37                I2C_Master_Read@temp 0020  
            __end_of_initOscilador 0FA0           __end_of_Lcd_Write_String 0EFA  
                 __size_of_Lcd_Cmd 001A                         ?_open_door 0070  
                     ??_manual_pwm 0070                 __end_of_close_door 0C86  
                 __size_of___aldiv 008F  __size_of_I2C_Master_RepeatedStart 0007  
        ?_I2C_Master_RepeatedStart 0070                   __size_of___lldiv 0060  
                 __size_of___lwdiv 003E                   __size_of___lwmod 0034  
               __end_of__stringtab 0510                   __size_of_get_PIR 0023  
                 __size_of_get_day 003A                         sprintf@val 0032  
                  _I2C_Master_Init 0DD0                    _I2C_Master_Read 07CE  
                  _I2C_Master_Wait 0C08                         strcat@from 0073  
                  _I2C_Master_Stop 0BEA                    ___lwdiv@divisor 0073  
                  ___lwdiv@counter 0020                           __ptext10 0D29  
                         __ptext11 06E5                           __ptext20 0BF1  
                         __ptext12 05B3                           __ptext21 0CE3  
                         __ptext13 0D4C                           __ptext30 0BDD  
                         __ptext22 0CC0                           __ptext14 02FE  
                         __ptext31 0EB9                           __ptext23 07CE  
                         __ptext15 0D9C                           __ptext32 0E08  
                         __ptext24 0C6B                           __ptext16 0E7B  
                         __ptext33 04B0                           __ptext25 0BF8  
                         __ptext17 0C26                           __ptext34 0C1B  
                         __ptext26 0BEA                           __ptext18 0D06  
                         __ptext35 0C51                           __ptext27 0BE3  
                         __ptext19 0E41                           __ptext36 0C37  
                         __ptext28 0C08                           __ptext37 0CA1  
                         __ptext29 0C11                  __CFG_BOR4V$BOR40V 0000  
                         _get_hall 0D06                           _get_temp 05B3  
                         _get_time 06E5                   __size_of_sprintf 00DA  
               __end_of_manual_pwm 0CC0                      __size_of_main 02E1  
                         get_IR@IR 0022                           get_day@d 0022  
                  ??_UART_TX_Empty 0073           __end_of_I2C_Master_Start 0BEA  
         __end_of_I2C_Master_Write 0C00                         _INTCONbits 000B  
               Lcd_Write_Char@temp 0075                           intlevel1 0000  
                        sprintf@ap 002F                          sprintf@sp 0034  
                 ___lwmod@dividend 0025                   ___lldiv@dividend 0024  
                      ??_open_door 0075                          stringcode 050A  
                       _OSCCONbits 008F            __end_of_I2C_Master_Init 0E08  
          __end_of_I2C_Master_Read 07FC            __end_of_I2C_Master_Wait 0C11  
          __end_of_I2C_Master_Stop 0BF1                 Lcd_Set_Cursor@temp 0025  
                         sprintf@c 0035                           sprintf@f 0029  
                         strcat@cp 0076                           strcat@to 0075  
                         strcmp@s1 0021                           strcmp@s2 0073  
                 ___lldiv@quotient 0028                  I2C_Master_Write@d 0073  
                  ___lwmod@divisor 0023                    ___lwmod@counter 0028  
                         stringdir 050A                   get_tripwire@trip 0022  
                         stringtab 0500                       ___aldiv@sign 0029  
                       _UART_Write 0C11                        _SSPCON2bits 0091  
                       _SSPCONbits 0014  

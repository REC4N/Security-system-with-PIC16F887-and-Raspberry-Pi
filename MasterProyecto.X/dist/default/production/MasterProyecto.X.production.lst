

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Mar 09 23:35:16 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	intentry,global,class=CODE,delta=2
    58                           	dabs	1,0x7E,2
    59  0000                     
    60                           ; Version 2.05
    61                           ; Generated 20/12/2018 GMT
    62                           ; 
    63                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC16F887 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000D                     	;# 
   108  000E                     	;# 
   109  000E                     	;# 
   110  000F                     	;# 
   111  0010                     	;# 
   112  0011                     	;# 
   113  0012                     	;# 
   114  0013                     	;# 
   115  0014                     	;# 
   116  0015                     	;# 
   117  0015                     	;# 
   118  0016                     	;# 
   119  0017                     	;# 
   120  0018                     	;# 
   121  0019                     	;# 
   122  001A                     	;# 
   123  001B                     	;# 
   124  001B                     	;# 
   125  001C                     	;# 
   126  001D                     	;# 
   127  001E                     	;# 
   128  001F                     	;# 
   129  0081                     	;# 
   130  0085                     	;# 
   131  0086                     	;# 
   132  0087                     	;# 
   133  0088                     	;# 
   134  0089                     	;# 
   135  008C                     	;# 
   136  008D                     	;# 
   137  008E                     	;# 
   138  008F                     	;# 
   139  0090                     	;# 
   140  0091                     	;# 
   141  0092                     	;# 
   142  0093                     	;# 
   143  0093                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0097                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009A                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  0105                     	;# 
   158  0107                     	;# 
   159  0108                     	;# 
   160  0109                     	;# 
   161  010C                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  0185                     	;# 
   167  0187                     	;# 
   168  0188                     	;# 
   169  0189                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  0007                     	;# 
   180  0008                     	;# 
   181  0009                     	;# 
   182  000A                     	;# 
   183  000B                     	;# 
   184  000C                     	;# 
   185  000D                     	;# 
   186  000E                     	;# 
   187  000E                     	;# 
   188  000F                     	;# 
   189  0010                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0015                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0017                     	;# 
   198  0018                     	;# 
   199  0019                     	;# 
   200  001A                     	;# 
   201  001B                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  001D                     	;# 
   205  001E                     	;# 
   206  001F                     	;# 
   207  0081                     	;# 
   208  0085                     	;# 
   209  0086                     	;# 
   210  0087                     	;# 
   211  0088                     	;# 
   212  0089                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  008F                     	;# 
   217  0090                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0093                     	;# 
   222  0093                     	;# 
   223  0094                     	;# 
   224  0095                     	;# 
   225  0096                     	;# 
   226  0097                     	;# 
   227  0098                     	;# 
   228  0099                     	;# 
   229  009A                     	;# 
   230  009B                     	;# 
   231  009C                     	;# 
   232  009D                     	;# 
   233  009E                     	;# 
   234  009F                     	;# 
   235  0105                     	;# 
   236  0107                     	;# 
   237  0108                     	;# 
   238  0109                     	;# 
   239  010C                     	;# 
   240  010C                     	;# 
   241  010D                     	;# 
   242  010E                     	;# 
   243  010F                     	;# 
   244  0185                     	;# 
   245  0187                     	;# 
   246  0188                     	;# 
   247  0189                     	;# 
   248  018C                     	;# 
   249  018D                     	;# 
   250                           
   251                           	psect	idataBANK0
   252  15FB                     __pidataBANK0:	
   253                           
   254                           ;initializer for _password
   255  15FB  3401               	retlw	1
   256  15FC  3405               	retlw	5
   257  15FD  3401               	retlw	1
   258  15FE  3400               	retlw	0
   259  15FF  3403               	retlw	3
   260                           
   261                           	psect	stringtext
   262  0800                     __pstringtext:	
   263  0800                     stringtab:	
   264  0800                     __stringtab:	
   265                           
   266                           ;	String table - string pointers are 2 bytes each
   267  0800  1BFF               	btfsc	btemp+1,7
   268  0801  280A               	ljmp	stringcode
   269  0802  1383               	bcf	3,7
   270  0803  187F               	btfsc	btemp+1,0
   271  0804  1783               	bsf	3,7
   272  0805  0800               	movf	0,w
   273  0806  0A84               	incf	4,f
   274  0807  1903               	skipnz
   275  0808  0AFF               	incf	btemp+1,f
   276  0809  0008               	return
   277  080A                     stringcode:	
   278  080A  087F               	movf	btemp+1,w
   279  080B  397F               	andlw	127
   280  080C  008A               	movwf	10
   281  080D  0804               	movf	4,w
   282  080E  0A84               	incf	4,f
   283  080F  1903               	skipnz
   284  0810  0AFF               	incf	btemp+1,f
   285  0811  0082               	movwf	2
   286  0812                     __stringbase:	
   287  0812                     __end_of__stringtab:	
   288  0812                     _dpowers:	
   289  0812  3401               	retlw	1
   290  0813  3400               	retlw	0
   291  0814  340A               	retlw	10
   292  0815  3400               	retlw	0
   293  0816  3464               	retlw	100
   294  0817  3400               	retlw	0
   295  0818  34E8               	retlw	232
   296  0819  3403               	retlw	3
   297  081A  3410               	retlw	16
   298  081B  3427               	retlw	39
   299  081C                     __end_of_dpowers:	
   300  0009                     _PORTE	set	9
   301  0007                     _PORTC	set	7
   302  0005                     _PORTA	set	5
   303  0006                     _PORTB	set	6
   304  0009                     _PORTEbits	set	9
   305  0008                     _PORTD	set	8
   306  0007                     _PORTCbits	set	7
   307  0018                     _RCSTAbits	set	24
   308  0014                     _SSPCONbits	set	20
   309  0008                     _PORTDbits	set	8
   310  0001                     _TMR0	set	1
   311  0005                     _PORTAbits	set	5
   312  000B                     _INTCONbits	set	11
   313  0019                     _TXREG	set	25
   314  001A                     _RCREG	set	26
   315  0006                     _PORTBbits	set	6
   316  0013                     _SSPBUF	set	19
   317  0014                     _SSPCON	set	20
   318  0065                     _RCIF	set	101
   319  00C4                     _CREN	set	196
   320  00C7                     _SPEN	set	199
   321  0063                     _SSPIF	set	99
   322  005E                     _PEIE	set	94
   323  005F                     _GIE	set	95
   324  0081                     _OPTION_REGbits	set	129
   325  0089                     _TRISE	set	137
   326  0087                     _TRISC	set	135
   327  0088                     _TRISD	set	136
   328  0085                     _TRISA	set	133
   329  0086                     _TRISB	set	134
   330  0099                     _SPBRG	set	153
   331  008F                     _OSCCONbits	set	143
   332  0091                     _SSPCON2bits	set	145
   333  0087                     _TRISCbits	set	135
   334  0094                     _SSPSTAT	set	148
   335  0093                     _SSPADD	set	147
   336  0091                     _SSPCON2	set	145
   337  04C1                     _TRMT	set	1217
   338  04C5                     _TXEN	set	1221
   339  043E                     _TRISC6	set	1086
   340  043F                     _TRISC7	set	1087
   341  04C4                     _SYNC	set	1220
   342  04C2                     _BRGH	set	1218
   343  0463                     _SSPIE	set	1123
   344  043C                     _TRISC4	set	1084
   345  043B                     _TRISC3	set	1083
   346  048B                     _RCEN	set	1163
   347  0188                     _ANSEL	set	392
   348  0189                     _ANSELH	set	393
   349  081C                     STR_1:	
   350  081C  3449               	retlw	73	;'I'
   351  081D  346E               	retlw	110	;'n'
   352  081E  3469               	retlw	105	;'i'
   353  081F  3463               	retlw	99	;'c'
   354  0820  3469               	retlw	105	;'i'
   355  0821  3461               	retlw	97	;'a'
   356  0822  346E               	retlw	110	;'n'
   357  0823  3464               	retlw	100	;'d'
   358  0824  346F               	retlw	111	;'o'
   359  0825  3420               	retlw	32	;' '
   360  0826  3453               	retlw	83	;'S'
   361  0827  3469               	retlw	105	;'i'
   362  0828  3473               	retlw	115	;'s'
   363  0829  3474               	retlw	116	;'t'
   364  082A  3465               	retlw	101	;'e'
   365  082B  346D               	retlw	109	;'m'
   366  082C  3461               	retlw	97	;'a'
   367  082D  3420               	retlw	32	;' '
   368  082E  3464               	retlw	100	;'d'
   369  082F  3465               	retlw	101	;'e'
   370  0830  3420               	retlw	32	;' '
   371  0831  3453               	retlw	83	;'S'
   372  0832  3465               	retlw	101	;'e'
   373  0833  3467               	retlw	103	;'g'
   374  0834  3475               	retlw	117	;'u'
   375  0835  3472               	retlw	114	;'r'
   376  0836  3469               	retlw	105	;'i'
   377  0837  3464               	retlw	100	;'d'
   378  0838  3461               	retlw	97	;'a'
   379  0839  3464               	retlw	100	;'d'
   380  083A  3400               	retlw	0
   381  083B                     STR_25:	
   382  083B  3450               	retlw	80	;'P'
   383  083C  3441               	retlw	65	;'A'
   384  083D  3453               	retlw	83	;'S'
   385  083E  3453               	retlw	83	;'S'
   386  083F  3457               	retlw	87	;'W'
   387  0840  344F               	retlw	79	;'O'
   388  0841  3452               	retlw	82	;'R'
   389  0842  3444               	retlw	68	;'D'
   390  0843  343A               	retlw	58	;':'
   391  0844  3420               	retlw	32	;' '
   392  0845  3420               	retlw	32	;' '
   393  0846  3420               	retlw	32	;' '
   394  0847  3420               	retlw	32	;' '
   395  0848  3420               	retlw	32	;' '
   396  0849  3420               	retlw	32	;' '
   397  084A  3420               	retlw	32	;' '
   398  084B  3400               	retlw	0
   399  084C                     STR_29:	
   400  084C  3420               	retlw	32	;' '
   401  084D  3420               	retlw	32	;' '
   402  084E  3420               	retlw	32	;' '
   403  084F  3420               	retlw	32	;' '
   404  0850  3420               	retlw	32	;' '
   405  0851  3420               	retlw	32	;' '
   406  0852  3420               	retlw	32	;' '
   407  0853  3420               	retlw	32	;' '
   408  0854  3420               	retlw	32	;' '
   409  0855  3420               	retlw	32	;' '
   410  0856  3420               	retlw	32	;' '
   411  0857  3420               	retlw	32	;' '
   412  0858  3400               	retlw	0
   413  0859                     STR_33:	
   414  0859  3453               	retlw	83	;'S'
   415  085A  3445               	retlw	69	;'E'
   416  085B  3443               	retlw	67	;'C'
   417  085C  3455               	retlw	85	;'U'
   418  085D  3452               	retlw	82	;'R'
   419  085E  3449               	retlw	73	;'I'
   420  085F  3454               	retlw	84	;'T'
   421  0860  3459               	retlw	89	;'Y'
   422  0861  3420               	retlw	32	;' '
   423  0862  344F               	retlw	79	;'O'
   424  0863  3446               	retlw	70	;'F'
   425  0864  3446               	retlw	70	;'F'
   426  0865  3400               	retlw	0
   427  0866                     STR_27:	
   428  0866  3453               	retlw	83	;'S'
   429  0867  3465               	retlw	101	;'e'
   430  0868  3463               	retlw	99	;'c'
   431  0869  3475               	retlw	117	;'u'
   432  086A  3472               	retlw	114	;'r'
   433  086B  3469               	retlw	105	;'i'
   434  086C  3474               	retlw	116	;'t'
   435  086D  3479               	retlw	121	;'y'
   436  086E  3420               	retlw	32	;' '
   437  086F  344F               	retlw	79	;'O'
   438  0870  3446               	retlw	70	;'F'
   439  0871  3446               	retlw	70	;'F'
   440  0872  3400               	retlw	0
   441  0873                     STR_30:	
   442  0873  3442               	retlw	66	;'B'
   443  0874  3441               	retlw	65	;'A'
   444  0875  344E               	retlw	78	;'N'
   445  0876  344B               	retlw	75	;'K'
   446  0877  3420               	retlw	32	;' '
   447  0878  344F               	retlw	79	;'O'
   448  0879  3450               	retlw	80	;'P'
   449  087A  3445               	retlw	69	;'E'
   450  087B  344E               	retlw	78	;'N'
   451  087C  3445               	retlw	69	;'E'
   452  087D  3444               	retlw	68	;'D'
   453  087E  3400               	retlw	0
   454  087F                     STR_15:	
   455  087F  3444               	retlw	68	;'D'
   456  0880  344F               	retlw	79	;'O'
   457  0881  344F               	retlw	79	;'O'
   458  0882  3452               	retlw	82	;'R'
   459  0883  3420               	retlw	32	;' '
   460  0884  344F               	retlw	79	;'O'
   461  0885  3450               	retlw	80	;'P'
   462  0886  3445               	retlw	69	;'E'
   463  0887  344E               	retlw	78	;'N'
   464  0888  3445               	retlw	69	;'E'
   465  0889  3444               	retlw	68	;'D'
   466  088A  3400               	retlw	0
   467  088B                     STR_31:	
   468  088B  3442               	retlw	66	;'B'
   469  088C  3441               	retlw	65	;'A'
   470  088D  344E               	retlw	78	;'N'
   471  088E  344B               	retlw	75	;'K'
   472  088F  3420               	retlw	32	;' '
   473  0890  3443               	retlw	67	;'C'
   474  0891  344C               	retlw	76	;'L'
   475  0892  344F               	retlw	79	;'O'
   476  0893  3453               	retlw	83	;'S'
   477  0894  3445               	retlw	69	;'E'
   478  0895  3444               	retlw	68	;'D'
   479  0896  3400               	retlw	0
   480  0897                     STR_16:	
   481  0897  3444               	retlw	68	;'D'
   482  0898  344F               	retlw	79	;'O'
   483  0899  344F               	retlw	79	;'O'
   484  089A  3452               	retlw	82	;'R'
   485  089B  3420               	retlw	32	;' '
   486  089C  3443               	retlw	67	;'C'
   487  089D  344C               	retlw	76	;'L'
   488  089E  344F               	retlw	79	;'O'
   489  089F  3453               	retlw	83	;'S'
   490  08A0  3445               	retlw	69	;'E'
   491  08A1  3444               	retlw	68	;'D'
   492  08A2  3400               	retlw	0
   493  08A3                     STR_32:	
   494  08A3  3453               	retlw	83	;'S'
   495  08A4  3445               	retlw	69	;'E'
   496  08A5  3443               	retlw	67	;'C'
   497  08A6  3455               	retlw	85	;'U'
   498  08A7  3452               	retlw	82	;'R'
   499  08A8  3449               	retlw	73	;'I'
   500  08A9  3454               	retlw	84	;'T'
   501  08AA  3459               	retlw	89	;'Y'
   502  08AB  3420               	retlw	32	;' '
   503  08AC  344F               	retlw	79	;'O'
   504  08AD  344E               	retlw	78	;'N'
   505  08AE  3400               	retlw	0
   506  08AF                     STR_26:	
   507  08AF  3453               	retlw	83	;'S'
   508  08B0  3465               	retlw	101	;'e'
   509  08B1  3463               	retlw	99	;'c'
   510  08B2  3475               	retlw	117	;'u'
   511  08B3  3472               	retlw	114	;'r'
   512  08B4  3469               	retlw	105	;'i'
   513  08B5  3474               	retlw	116	;'t'
   514  08B6  3479               	retlw	121	;'y'
   515  08B7  3420               	retlw	32	;' '
   516  08B8  344F               	retlw	79	;'O'
   517  08B9  344E               	retlw	78	;'N'
   518  08BA  3400               	retlw	0
   519  08BB                     STR_3:	
   520  08BB  3475               	retlw	117	;'u'
   521  08BC  346E               	retlw	110	;'n'
   522  08BD  3420               	retlw	32	;' '
   523  08BE  344D               	retlw	77	;'M'
   524  08BF  346F               	retlw	111	;'o'
   525  08C0  346D               	retlw	109	;'m'
   526  08C1  3465               	retlw	101	;'e'
   527  08C2  346E               	retlw	110	;'n'
   528  08C3  3474               	retlw	116	;'t'
   529  08C4  346F               	retlw	111	;'o'
   530  08C5  3400               	retlw	0
   531  08C6                     STR_4:	
   532  08C6  344C               	retlw	76	;'L'
   533  08C7  3455               	retlw	85	;'U'
   534  08C8  344E               	retlw	78	;'N'
   535  08C9  3445               	retlw	69	;'E'
   536  08CA  3453               	retlw	83	;'S'
   537  08CB  3420               	retlw	32	;' '
   538  08CC  3420               	retlw	32	;' '
   539  08CD  3420               	retlw	32	;' '
   540  08CE  3420               	retlw	32	;' '
   541  08CF  3400               	retlw	0
   542  08D0                     STR_9:	
   543  08D0  3453               	retlw	83	;'S'
   544  08D1  3441               	retlw	65	;'A'
   545  08D2  3442               	retlw	66	;'B'
   546  08D3  3441               	retlw	65	;'A'
   547  08D4  3444               	retlw	68	;'D'
   548  08D5  344F               	retlw	79	;'O'
   549  08D6  3420               	retlw	32	;' '
   550  08D7  3420               	retlw	32	;' '
   551  08D8  3420               	retlw	32	;' '
   552  08D9  3400               	retlw	0
   553  08DA                     STR_5:	
   554  08DA  344D               	retlw	77	;'M'
   555  08DB  3441               	retlw	65	;'A'
   556  08DC  3452               	retlw	82	;'R'
   557  08DD  3454               	retlw	84	;'T'
   558  08DE  3445               	retlw	69	;'E'
   559  08DF  3453               	retlw	83	;'S'
   560  08E0  3420               	retlw	32	;' '
   561  08E1  3420               	retlw	32	;' '
   562  08E2  3420               	retlw	32	;' '
   563  08E3  3400               	retlw	0
   564  08E4                     STR_7:	
   565  08E4  344A               	retlw	74	;'J'
   566  08E5  3455               	retlw	85	;'U'
   567  08E6  3445               	retlw	69	;'E'
   568  08E7  3456               	retlw	86	;'V'
   569  08E8  3445               	retlw	69	;'E'
   570  08E9  3453               	retlw	83	;'S'
   571  08EA  3420               	retlw	32	;' '
   572  08EB  3420               	retlw	32	;' '
   573  08EC  3420               	retlw	32	;' '
   574  08ED  3400               	retlw	0
   575  08EE                     STR_10:	
   576  08EE  3444               	retlw	68	;'D'
   577  08EF  344F               	retlw	79	;'O'
   578  08F0  344D               	retlw	77	;'M'
   579  08F1  3449               	retlw	73	;'I'
   580  08F2  344E               	retlw	78	;'N'
   581  08F3  3447               	retlw	71	;'G'
   582  08F4  344F               	retlw	79	;'O'
   583  08F5  3420               	retlw	32	;' '
   584  08F6  3420               	retlw	32	;' '
   585  08F7  3400               	retlw	0
   586  08F8                     STR_8:	
   587  08F8  3456               	retlw	86	;'V'
   588  08F9  3449               	retlw	73	;'I'
   589  08FA  3445               	retlw	69	;'E'
   590  08FB  3452               	retlw	82	;'R'
   591  08FC  344E               	retlw	78	;'N'
   592  08FD  3445               	retlw	69	;'E'
   593  08FE  3453               	retlw	83	;'S'
   594  08FF  3420               	retlw	32	;' '
   595  0900  3420               	retlw	32	;' '
   596  0901  3400               	retlw	0
   597  0902                     STR_6:	
   598  0902  344D               	retlw	77	;'M'
   599  0903  3449               	retlw	73	;'I'
   600  0904  3445               	retlw	69	;'E'
   601  0905  3452               	retlw	82	;'R'
   602  0906  3443               	retlw	67	;'C'
   603  0907  344F               	retlw	79	;'O'
   604  0908  344C               	retlw	76	;'L'
   605  0909  3445               	retlw	69	;'E'
   606  090A  3453               	retlw	83	;'S'
   607  090B  3400               	retlw	0
   608  090C                     STR_17:	
   609  090C  3454               	retlw	84	;'T'
   610  090D  3452               	retlw	82	;'R'
   611  090E  3449               	retlw	73	;'I'
   612  090F  3450               	retlw	80	;'P'
   613  0910  3420               	retlw	32	;' '
   614  0911  344F               	retlw	79	;'O'
   615  0912  344E               	retlw	78	;'N'
   616  0913  3420               	retlw	32	;' '
   617  0914  3400               	retlw	0
   618  0915                     STR_18:	
   619  0915  3454               	retlw	84	;'T'
   620  0916  3452               	retlw	82	;'R'
   621  0917  3449               	retlw	73	;'I'
   622  0918  3450               	retlw	80	;'P'
   623  0919  3420               	retlw	32	;' '
   624  091A  344F               	retlw	79	;'O'
   625  091B  3446               	retlw	70	;'F'
   626  091C  3446               	retlw	70	;'F'
   627  091D  3400               	retlw	0
   628  091E                     STR_19:	
   629  091E  3450               	retlw	80	;'P'
   630  091F  3449               	retlw	73	;'I'
   631  0920  3452               	retlw	82	;'R'
   632  0921  3420               	retlw	32	;' '
   633  0922  344F               	retlw	79	;'O'
   634  0923  344E               	retlw	78	;'N'
   635  0924  3420               	retlw	32	;' '
   636  0925  3400               	retlw	0
   637  0926                     STR_20:	
   638  0926  3450               	retlw	80	;'P'
   639  0927  3449               	retlw	73	;'I'
   640  0928  3452               	retlw	82	;'R'
   641  0929  3420               	retlw	32	;' '
   642  092A  344F               	retlw	79	;'O'
   643  092B  3446               	retlw	70	;'F'
   644  092C  3446               	retlw	70	;'F'
   645  092D  3400               	retlw	0
   646  092E                     STR_23:	
   647  092E  3454               	retlw	84	;'T'
   648  092F  3449               	retlw	73	;'I'
   649  0930  344D               	retlw	77	;'M'
   650  0931  3445               	retlw	69	;'E'
   651  0932  343A               	retlw	58	;':'
   652  0933  3420               	retlw	32	;' '
   653  0934  3400               	retlw	0
   654  0935                     STR_2:	
   655  0935  3445               	retlw	69	;'E'
   656  0936  3473               	retlw	115	;'s'
   657  0937  3470               	retlw	112	;'p'
   658  0938  3465               	retlw	101	;'e'
   659  0939  3472               	retlw	114	;'r'
   660  093A  3465               	retlw	101	;'e'
   661  093B  3400               	retlw	0
   662  093C                     STR_24:	
   663  093C  3444               	retlw	68	;'D'
   664  093D  3441               	retlw	65	;'A'
   665  093E  3459               	retlw	89	;'Y'
   666  093F  343A               	retlw	58	;':'
   667  0940  3420               	retlw	32	;' '
   668  0941  3400               	retlw	0
   669  0942                     STR_14:	
   670  0942  3432               	retlw	50	;'2'
   671  0943  3431               	retlw	49	;'1'
   672  0944  343A               	retlw	58	;':'
   673  0945  3430               	retlw	48	;'0'
   674  0946  3430               	retlw	48	;'0'
   675  0947  3400               	retlw	0
   676  0948                     STR_13:	
   677  0948  3432               	retlw	50	;'2'
   678  0949  3432               	retlw	50	;'2'
   679  094A  343A               	retlw	58	;':'
   680  094B  3430               	retlw	48	;'0'
   681  094C  3430               	retlw	48	;'0'
   682  094D  3400               	retlw	0
   683  094E                     STR_12:	
   684  094E  3432               	retlw	50	;'2'
   685  094F  3433               	retlw	51	;'3'
   686  0950  342E               	retlw	46	;'.'
   687  0951  3435               	retlw	53	;'5'
   688  0952  3430               	retlw	48	;'0'
   689  0953  3400               	retlw	0
   690  0954                     STR_28:	
   691  0954  3457               	retlw	87	;'W'
   692  0955  3452               	retlw	82	;'R'
   693  0956  344F               	retlw	79	;'O'
   694  0957  344E               	retlw	78	;'N'
   695  0958  3447               	retlw	71	;'G'
   696  0959  3400               	retlw	0
   697  095A                     STR_35:	
   698  095A  342E               	retlw	46	;'.'
   699  095B  3425               	retlw	37	;'%'
   700  095C  3464               	retlw	100	;'d'
   701  095D  3430               	retlw	48	;'0'
   702  095E  3400               	retlw	0
   703  095F                     STR_36:	
   704  095F  342E               	retlw	46	;'.'
   705  0960  3425               	retlw	37	;'%'
   706  0961  3464               	retlw	100	;'d'
   707  0962  3400               	retlw	0
   708  084F                     
   709                           ; #config settings
   710  0000                     
   711                           	psect	cinit
   712  000F                     start_initialization:	
   713  000F                     __initialization:	
   714                           
   715                           ; Initialize objects allocated to BANK0
   716  000F  160A  118A  25FB  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   717  0014  00E8               	movwf	__pdataBANK0& (0+127)
   718  0015  160A  118A  25FC  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   719  001A  00E9               	movwf	(__pdataBANK0+1)& (0+127)
   720  001B  160A  118A  25FD  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   721  0020  00EA               	movwf	(__pdataBANK0+2)& (0+127)
   722  0021  160A  118A  25FE  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   723  0026  00EB               	movwf	(__pdataBANK0+3)& (0+127)
   724  0027  160A  118A  25FF  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   725  002C  00EC               	movwf	(__pdataBANK0+4)& (0+127)
   726                           
   727                           ; Clear objects allocated to BANK0
   728  002D  1383               	bcf	3,7	;select IRP bank0
   729  002E  3020               	movlw	low __pbssBANK0
   730  002F  0084               	movwf	4
   731  0030  3047               	movlw	low (__pbssBANK0+39)
   732  0031  160A  118A  2623   	fcall	clear_ram0
   733                           
   734                           ; Clear objects allocated to COMMON
   735  0034  01F8               	clrf	__pbssCOMMON& (0+127)
   736  0035  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   737  0036  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   738  0037                     end_of_initialization:	
   739                           ;End of C runtime variable initialization code
   740                           
   741  0037                     __end_of__initialization:	
   742  0037  0183               	clrf	3
   743  0038  120A  118A  283B   	ljmp	_main	;jump to C main() function
   744                           
   745                           	psect	bssCOMMON
   746  0078                     __pbssCOMMON:	
   747  0078                     _k:	
   748  0078                     	ds	1
   749  0079                     _day1:	
   750  0079                     	ds	1
   751  007A                     _state:	
   752  007A                     	ds	1
   753                           
   754                           	psect	bssBANK0
   755  0020                     __pbssBANK0:	
   756  0020                     _passwordu:	
   757  0020                     	ds	5
   758  0025                     _day2:	
   759  0025                     	ds	2
   760  0027                     _newmin:	
   761  0027                     	ds	1
   762  0028                     _newhour:	
   763  0028                     	ds	1
   764  0029                     _seguridad:	
   765  0029                     	ds	1
   766  002A                     _min:	
   767  002A                     	ds	1
   768  002B                     _hour:	
   769  002B                     	ds	1
   770  002C                     _val:	
   771  002C                     	ds	1
   772  002D                     _cont:	
   773  002D                     	ds	1
   774  002E                     _bank:	
   775  002E                     	ds	1
   776  002F                     _alarm:	
   777  002F                     	ds	1
   778  0030                     _change4:	
   779  0030                     	ds	1
   780  0031                     _change3:	
   781  0031                     	ds	1
   782  0032                     _change2:	
   783  0032                     	ds	1
   784  0033                     _change1:	
   785  0033                     	ds	1
   786  0034                     _change:	
   787  0034                     	ds	1
   788  0035                     _j:	
   789  0035                     	ds	1
   790  0036                     _i:	
   791  0036                     	ds	1
   792  0037                     _IR:	
   793  0037                     	ds	1
   794  0038                     _PIR:	
   795  0038                     	ds	1
   796  0039                     _trip:	
   797  0039                     	ds	1
   798  003A                     _door:	
   799  003A                     	ds	1
   800  003B                     _temp:	
   801  003B                     	ds	6
   802  0041                     _time:	
   803  0041                     	ds	6
   804                           
   805                           	psect	dataBANK0
   806  0068                     __pdataBANK0:	
   807  0068                     _password:	
   808  0068                     	ds	5
   809                           
   810                           	psect	clrtext
   811  1623                     clear_ram0:	
   812                           ;	Called with FSR containing the base address, and
   813                           ;	W with the last address+1
   814                           
   815  1623  0064               	clrwdt	;clear the watchdog before getting into this loop
   816  1624                     clrloop0:	
   817  1624  0180               	clrf	0	;clear RAM location pointed to by FSR
   818  1625  0A84               	incf	4,f	;increment pointer
   819  1626  0604               	xorwf	4,w	;XOR with final address
   820  1627  1903               	btfsc	3,2	;have we reached the end yet?
   821  1628  3400               	retlw	0	;all done for this memory range, return
   822  1629  0604               	xorwf	4,w	;XOR again to restore value
   823  162A  2E24               	goto	clrloop0	;do the next byte
   824                           
   825                           	psect	cstackBANK1
   826  00A0                     __pcstackBANK1:	
   827  00A0                     ??_main:	
   828                           
   829                           ; 1 bytes @ 0x0
   830  00A0                     	ds	6
   831                           
   832                           	psect	cstackCOMMON
   833  0070                     __pcstackCOMMON:	
   834  0070                     ?_setup:	
   835  0070                     ?_get_temp:	
   836                           ; 1 bytes @ 0x0
   837                           
   838  0070                     ?_get_hall:	
   839                           ; 1 bytes @ 0x0
   840                           
   841  0070                     ?_get_tripwire:	
   842                           ; 1 bytes @ 0x0
   843                           
   844  0070                     ?_get_PIR:	
   845                           ; 1 bytes @ 0x0
   846                           
   847  0070                     ?_get_IR:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0070                     ?_get_time:	
   851                           ; 1 bytes @ 0x0
   852                           
   853  0070                     ?_get_day:	
   854                           ; 1 bytes @ 0x0
   855                           
   856  0070                     ?_open_door:	
   857                           ; 1 bytes @ 0x0
   858                           
   859  0070                     ?_close_door:	
   860                           ; 1 bytes @ 0x0
   861                           
   862  0070                     ?_I2C_Master_Wait:	
   863                           ; 1 bytes @ 0x0
   864                           
   865  0070                     ?_I2C_Master_Start:	
   866                           ; 1 bytes @ 0x0
   867                           
   868  0070                     ?_I2C_Master_RepeatedStart:	
   869                           ; 1 bytes @ 0x0
   870                           
   871  0070                     ?_I2C_Master_Stop:	
   872                           ; 1 bytes @ 0x0
   873                           
   874  0070                     ?_Lcd_Port:	
   875                           ; 1 bytes @ 0x0
   876                           
   877  0070                     ?_Lcd_Cmd:	
   878                           ; 1 bytes @ 0x0
   879                           
   880  0070                     ?_Lcd_Clear:	
   881                           ; 1 bytes @ 0x0
   882                           
   883  0070                     ?_Lcd_Init:	
   884                           ; 1 bytes @ 0x0
   885                           
   886  0070                     ?_Lcd_Write_Char:	
   887                           ; 1 bytes @ 0x0
   888                           
   889  0070                     ?_Lcd_Shift_Right:	
   890                           ; 1 bytes @ 0x0
   891                           
   892  0070                     ?_Lcd_Shift_Left:	
   893                           ; 1 bytes @ 0x0
   894                           
   895  0070                     ?_initOscilador:	
   896                           ; 1 bytes @ 0x0
   897                           
   898  0070                     ?_UART_TX_Empty:	
   899                           ; 1 bytes @ 0x0
   900                           
   901  0070                     ?_UART_Write:	
   902                           ; 1 bytes @ 0x0
   903                           
   904  0070                     ?_manual_pwm:	
   905                           ; 1 bytes @ 0x0
   906                           
   907  0070                     ??_manual_pwm:	
   908                           ; 1 bytes @ 0x0
   909                           
   910  0070                     ?_main:	
   911                           ; 1 bytes @ 0x0
   912                           
   913                           
   914                           ; 1 bytes @ 0x0
   915  0070                     	ds	3
   916  0073                     ?_strcat:	
   917  0073                     ??_I2C_Master_Wait:	
   918                           ; 1 bytes @ 0x3
   919                           
   920  0073                     ??_I2C_Master_Start:	
   921                           ; 1 bytes @ 0x3
   922                           
   923  0073                     ??_I2C_Master_RepeatedStart:	
   924                           ; 1 bytes @ 0x3
   925                           
   926  0073                     ??_I2C_Master_Stop:	
   927                           ; 1 bytes @ 0x3
   928                           
   929  0073                     ?_I2C_Master_Write:	
   930                           ; 1 bytes @ 0x3
   931                           
   932  0073                     ??_Lcd_Port:	
   933                           ; 1 bytes @ 0x3
   934                           
   935  0073                     ??_initOscilador:	
   936                           ; 1 bytes @ 0x3
   937                           
   938  0073                     ??_UART_TX_Empty:	
   939                           ; 1 bytes @ 0x3
   940                           
   941  0073                     ??_UART_Write:	
   942                           ; 1 bytes @ 0x3
   943                           
   944  0073                     ?___bmul:	
   945                           ; 1 bytes @ 0x3
   946                           
   947  0073                     ??___lldiv:	
   948                           ; 1 bytes @ 0x3
   949                           
   950  0073                     ??___aldiv:	
   951                           ; 1 bytes @ 0x3
   952                           
   953  0073                     ?_strcmp:	
   954                           ; 1 bytes @ 0x3
   955                           
   956  0073                     ?_I2C_Master_Read:	
   957                           ; 2 bytes @ 0x3
   958                           
   959  0073                     ?___awdiv:	
   960                           ; 2 bytes @ 0x3
   961                           
   962  0073                     ?___awmod:	
   963                           ; 2 bytes @ 0x3
   964                           
   965  0073                     ?___lwdiv:	
   966                           ; 2 bytes @ 0x3
   967                           
   968  0073                     Lcd_Port@a:	
   969                           ; 2 bytes @ 0x3
   970                           
   971  0073                     UART_Write@data:	
   972                           ; 1 bytes @ 0x3
   973                           
   974  0073                     ___bmul@multiplicand:	
   975                           ; 1 bytes @ 0x3
   976                           
   977  0073                     strcat@from:	
   978                           ; 1 bytes @ 0x3
   979                           
   980  0073                     I2C_Master_Write@d:	
   981                           ; 1 bytes @ 0x3
   982                           
   983  0073                     I2C_Master_Read@a:	
   984                           ; 2 bytes @ 0x3
   985                           
   986  0073                     ___awdiv@divisor:	
   987                           ; 2 bytes @ 0x3
   988                           
   989  0073                     ___awmod@divisor:	
   990                           ; 2 bytes @ 0x3
   991                           
   992  0073                     ___lwdiv@divisor:	
   993                           ; 2 bytes @ 0x3
   994                           
   995  0073                     strcmp@s2:	
   996                           ; 2 bytes @ 0x3
   997                           
   998                           
   999                           ; 2 bytes @ 0x3
  1000  0073                     	ds	1
  1001  0074                     ??_strcat:	
  1002  0074                     ??_I2C_Master_Init:	
  1003                           ; 1 bytes @ 0x4
  1004                           
  1005  0074                     ??_Lcd_Cmd:	
  1006                           ; 1 bytes @ 0x4
  1007                           
  1008  0074                     ??_Lcd_Write_Char:	
  1009                           ; 1 bytes @ 0x4
  1010                           
  1011  0074                     ??___bmul:	
  1012                           ; 1 bytes @ 0x4
  1013                           
  1014  0074                     UART_Init@x:	
  1015                           ; 1 bytes @ 0x4
  1016                           
  1017                           
  1018                           ; 2 bytes @ 0x4
  1019  0074                     	ds	1
  1020  0075                     ??_open_door:	
  1021  0075                     ??_close_door:	
  1022                           ; 1 bytes @ 0x5
  1023                           
  1024  0075                     ??_strcmp:	
  1025                           ; 1 bytes @ 0x5
  1026                           
  1027  0075                     ?_write_RTC:	
  1028                           ; 1 bytes @ 0x5
  1029                           
  1030  0075                     ??_I2C_Master_Write:	
  1031                           ; 1 bytes @ 0x5
  1032                           
  1033  0075                     ??_I2C_Master_Read:	
  1034                           ; 1 bytes @ 0x5
  1035                           
  1036  0075                     Lcd_Write_Char@temp:	
  1037                           ; 1 bytes @ 0x5
  1038                           
  1039  0075                     initOscilador@option:	
  1040                           ; 1 bytes @ 0x5
  1041                           
  1042  0075                     write_RTC@minutes:	
  1043                           ; 1 bytes @ 0x5
  1044                           
  1045  0075                     ___bmul@product:	
  1046                           ; 1 bytes @ 0x5
  1047                           
  1048  0075                     strcat@to:	
  1049                           ; 1 bytes @ 0x5
  1050                           
  1051  0075                     ___awdiv@dividend:	
  1052                           ; 1 bytes @ 0x5
  1053                           
  1054  0075                     ___awmod@dividend:	
  1055                           ; 2 bytes @ 0x5
  1056                           
  1057  0075                     ___lwdiv@dividend:	
  1058                           ; 2 bytes @ 0x5
  1059                           
  1060                           
  1061                           ; 2 bytes @ 0x5
  1062  0075                     	ds	1
  1063  0076                     Lcd_Cmd@a:	
  1064  0076                     Lcd_Write_Char@y:	
  1065                           ; 1 bytes @ 0x6
  1066                           
  1067  0076                     write_RTC@day:	
  1068                           ; 1 bytes @ 0x6
  1069                           
  1070  0076                     ___bmul@multiplier:	
  1071                           ; 1 bytes @ 0x6
  1072                           
  1073  0076                     strcat@cp:	
  1074                           ; 1 bytes @ 0x6
  1075                           
  1076                           
  1077                           ; 1 bytes @ 0x6
  1078  0076                     	ds	1
  1079  0077                     ??_get_hall:	
  1080  0077                     ??_get_tripwire:	
  1081                           ; 1 bytes @ 0x7
  1082                           
  1083  0077                     ??_get_PIR:	
  1084                           ; 1 bytes @ 0x7
  1085                           
  1086  0077                     ??_get_IR:	
  1087                           ; 1 bytes @ 0x7
  1088                           
  1089  0077                     ??_get_day:	
  1090                           ; 1 bytes @ 0x7
  1091                           
  1092  0077                     ??_Lcd_Clear:	
  1093                           ; 1 bytes @ 0x7
  1094                           
  1095  0077                     ?_Lcd_Set_Cursor:	
  1096                           ; 1 bytes @ 0x7
  1097                           
  1098  0077                     ??_Lcd_Shift_Right:	
  1099                           ; 1 bytes @ 0x7
  1100                           
  1101  0077                     ??_Lcd_Shift_Left:	
  1102                           ; 1 bytes @ 0x7
  1103                           
  1104  0077                     ??___awdiv:	
  1105                           ; 1 bytes @ 0x7
  1106                           
  1107  0077                     ??___awmod:	
  1108                           ; 1 bytes @ 0x7
  1109                           
  1110  0077                     ??___lwdiv:	
  1111                           ; 1 bytes @ 0x7
  1112                           
  1113  0077                     Lcd_Set_Cursor@b:	
  1114                           ; 1 bytes @ 0x7
  1115                           
  1116  0077                     Lcd_Write_Char@a:	
  1117                           ; 1 bytes @ 0x7
  1118                           
  1119  0077                     write_RTC@hour:	
  1120                           ; 1 bytes @ 0x7
  1121                           
  1122                           
  1123                           ; 1 bytes @ 0x7
  1124  0077                     	ds	1
  1125  0078                     ??_setup:	
  1126                           
  1127                           	psect	cstackBANK0
  1128  0047                     __pcstackBANK0:	
  1129                           ; 1 bytes @ 0x8
  1130                           
  1131  0047                     ??_write_RTC:	
  1132  0047                     ??_Lcd_Set_Cursor:	
  1133                           ; 1 bytes @ 0x0
  1134                           
  1135  0047                     ??_Lcd_Init:	
  1136                           ; 1 bytes @ 0x0
  1137                           
  1138  0047                     ?_Lcd_Write_String:	
  1139                           ; 1 bytes @ 0x0
  1140                           
  1141  0047                     ?___lldiv:	
  1142                           ; 1 bytes @ 0x0
  1143                           
  1144  0047                     ?___aldiv:	
  1145                           ; 4 bytes @ 0x0
  1146                           
  1147  0047                     ___awdiv@counter:	
  1148                           ; 4 bytes @ 0x0
  1149                           
  1150  0047                     ___awmod@counter:	
  1151                           ; 1 bytes @ 0x0
  1152                           
  1153  0047                     ___lwdiv@counter:	
  1154                           ; 1 bytes @ 0x0
  1155                           
  1156  0047                     strcmp@r:	
  1157                           ; 1 bytes @ 0x0
  1158                           
  1159  0047                     I2C_Master_Read@temp:	
  1160                           ; 1 bytes @ 0x0
  1161                           
  1162  0047                     Lcd_Write_String@a:	
  1163                           ; 2 bytes @ 0x0
  1164                           
  1165  0047                     ___lldiv@divisor:	
  1166                           ; 2 bytes @ 0x0
  1167                           
  1168  0047                     ___aldiv@divisor:	
  1169                           ; 4 bytes @ 0x0
  1170                           
  1171                           
  1172                           ; 4 bytes @ 0x0
  1173  0047                     	ds	1
  1174  0048                     ___awdiv@sign:	
  1175  0048                     ___awmod@sign:	
  1176                           ; 1 bytes @ 0x1
  1177                           
  1178  0048                     strcmp@s1:	
  1179                           ; 1 bytes @ 0x1
  1180                           
  1181  0048                     ___lwdiv@quotient:	
  1182                           ; 1 bytes @ 0x1
  1183                           
  1184                           
  1185                           ; 2 bytes @ 0x1
  1186  0048                     	ds	1
  1187  0049                     ??_get_time:	
  1188  0049                     ??_Lcd_Write_String:	
  1189                           ; 1 bytes @ 0x2
  1190                           
  1191  0049                     Lcd_Set_Cursor@a:	
  1192                           ; 1 bytes @ 0x2
  1193                           
  1194  0049                     get_day@d:	
  1195                           ; 1 bytes @ 0x2
  1196                           
  1197  0049                     get_hall@key:	
  1198                           ; 1 bytes @ 0x2
  1199                           
  1200  0049                     get_tripwire@trip:	
  1201                           ; 1 bytes @ 0x2
  1202                           
  1203  0049                     get_PIR@PIR:	
  1204                           ; 1 bytes @ 0x2
  1205                           
  1206  0049                     get_IR@IR:	
  1207                           ; 1 bytes @ 0x2
  1208                           
  1209  0049                     ___awdiv@quotient:	
  1210                           ; 1 bytes @ 0x2
  1211                           
  1212                           
  1213                           ; 2 bytes @ 0x2
  1214  0049                     	ds	1
  1215  004A                     ?___lwmod:	
  1216  004A                     Lcd_Set_Cursor@z:	
  1217                           ; 2 bytes @ 0x3
  1218                           
  1219  004A                     ___lwmod@divisor:	
  1220                           ; 1 bytes @ 0x3
  1221                           
  1222                           
  1223                           ; 2 bytes @ 0x3
  1224  004A                     	ds	1
  1225  004B                     Lcd_Set_Cursor@y:	
  1226  004B                     get_time@hour:	
  1227                           ; 1 bytes @ 0x4
  1228                           
  1229  004B                     ___lldiv@dividend:	
  1230                           ; 1 bytes @ 0x4
  1231                           
  1232  004B                     ___aldiv@dividend:	
  1233                           ; 4 bytes @ 0x4
  1234                           
  1235                           
  1236                           ; 4 bytes @ 0x4
  1237  004B                     	ds	1
  1238  004C                     Lcd_Set_Cursor@temp:	
  1239  004C                     get_time@min:	
  1240                           ; 1 bytes @ 0x5
  1241                           
  1242  004C                     Lcd_Write_String@i:	
  1243                           ; 1 bytes @ 0x5
  1244                           
  1245  004C                     ___lwmod@dividend:	
  1246                           ; 2 bytes @ 0x5
  1247                           
  1248                           
  1249                           ; 2 bytes @ 0x5
  1250  004C                     	ds	1
  1251  004D                     get_time@time_string:	
  1252                           
  1253                           ; 1 bytes @ 0x6
  1254  004D                     	ds	1
  1255  004E                     ??___lwmod:	
  1256                           
  1257                           ; 1 bytes @ 0x7
  1258  004E                     	ds	1
  1259  004F                     ___aldiv@counter:	
  1260  004F                     ___lwmod@counter:	
  1261                           ; 1 bytes @ 0x8
  1262                           
  1263  004F                     ___lldiv@quotient:	
  1264                           ; 1 bytes @ 0x8
  1265                           
  1266                           
  1267                           ; 4 bytes @ 0x8
  1268  004F                     	ds	1
  1269  0050                     ?_sprintf:	
  1270  0050                     ___aldiv@sign:	
  1271                           ; 2 bytes @ 0x9
  1272                           
  1273  0050                     sprintf@f:	
  1274                           ; 1 bytes @ 0x9
  1275                           
  1276                           
  1277                           ; 2 bytes @ 0x9
  1278  0050                     	ds	1
  1279  0051                     ___aldiv@quotient:	
  1280                           
  1281                           ; 4 bytes @ 0xA
  1282  0051                     	ds	2
  1283  0053                     ___lldiv@counter:	
  1284                           
  1285                           ; 1 bytes @ 0xC
  1286  0053                     	ds	1
  1287  0054                     ??_sprintf:	
  1288  0054                     ?_I2C_Master_Init:	
  1289                           ; 1 bytes @ 0xD
  1290                           
  1291  0054                     I2C_Master_Init@c:	
  1292                           ; 1 bytes @ 0xD
  1293                           
  1294                           
  1295                           ; 4 bytes @ 0xD
  1296  0054                     	ds	1
  1297  0055                     ?_UART_Init:	
  1298  0055                     UART_Init@baudrate:	
  1299                           ; 1 bytes @ 0xE
  1300                           
  1301                           
  1302                           ; 4 bytes @ 0xE
  1303  0055                     	ds	3
  1304  0058                     sprintf@ap:	
  1305                           
  1306                           ; 1 bytes @ 0x11
  1307  0058                     	ds	1
  1308  0059                     ??_UART_Init:	
  1309  0059                     sprintf@flag:	
  1310                           ; 1 bytes @ 0x12
  1311                           
  1312                           
  1313                           ; 1 bytes @ 0x12
  1314  0059                     	ds	1
  1315  005A                     sprintf@prec:	
  1316                           
  1317                           ; 1 bytes @ 0x13
  1318  005A                     	ds	1
  1319  005B                     sprintf@val:	
  1320                           
  1321                           ; 2 bytes @ 0x14
  1322  005B                     	ds	2
  1323  005D                     sprintf@sp:	
  1324                           
  1325                           ; 1 bytes @ 0x16
  1326  005D                     	ds	1
  1327  005E                     sprintf@c:	
  1328                           
  1329                           ; 1 bytes @ 0x17
  1330  005E                     	ds	1
  1331  005F                     ??_get_temp:	
  1332                           
  1333                           ; 1 bytes @ 0x18
  1334  005F                     	ds	3
  1335  0062                     get_temp@decimal:	
  1336                           
  1337                           ; 3 bytes @ 0x1B
  1338  0062                     	ds	3
  1339  0065                     get_temp@tempMSB:	
  1340                           
  1341                           ; 1 bytes @ 0x1E
  1342  0065                     	ds	1
  1343  0066                     get_temp@temp_string:	
  1344                           
  1345                           ; 1 bytes @ 0x1F
  1346  0066                     	ds	1
  1347  0067                     get_temp@tempLSB:	
  1348                           
  1349                           ; 1 bytes @ 0x20
  1350  0067                     	ds	1
  1351                           
  1352                           	psect	maintext
  1353  003B                     __pmaintext:	
  1354 ;;
  1355 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1356 ;;
  1357 ;; *************** function _main *****************
  1358 ;; Defined at:
  1359 ;;		line 77 in file "mainMaster.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;		None
  1362 ;; Auto vars:     Size  Location     Type
  1363 ;;		None
  1364 ;; Return value:  Size  Location     Type
  1365 ;;                  1    wreg      void 
  1366 ;; Registers used:
  1367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1368 ;; Tracked objects:
  1369 ;;		On entry : B00/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1373 ;;      Params:         0       0       0       0       0
  1374 ;;      Locals:         0       0       0       0       0
  1375 ;;      Temps:          0       0       6       0       0
  1376 ;;      Totals:         0       0       6       0       0
  1377 ;;Total ram usage:        6 bytes
  1378 ;; Hardware stack levels required when called:    5
  1379 ;; This function calls:
  1380 ;;		_Lcd_Clear
  1381 ;;		_Lcd_Set_Cursor
  1382 ;;		_Lcd_Shift_Left
  1383 ;;		_Lcd_Shift_Right
  1384 ;;		_Lcd_Write_Char
  1385 ;;		_Lcd_Write_String
  1386 ;;		_UART_TX_Empty
  1387 ;;		_UART_Write
  1388 ;;		___awdiv
  1389 ;;		___awmod
  1390 ;;		___bmul
  1391 ;;		_close_door
  1392 ;;		_get_IR
  1393 ;;		_get_PIR
  1394 ;;		_get_day
  1395 ;;		_get_hall
  1396 ;;		_get_temp
  1397 ;;		_get_time
  1398 ;;		_get_tripwire
  1399 ;;		_open_door
  1400 ;;		_setup
  1401 ;;		_strcmp
  1402 ;;		_write_RTC
  1403 ;; This function is called by:
  1404 ;;		Startup code after reset
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           
  1409                           ;psect for function _main
  1410  003B                     _main:	
  1411                           
  1412                           ;mainMaster.c: 78:     setup();
  1413                           
  1414                           ;incstack = 0
  1415                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1416  003B  120A  158A  2450  120A  118A  	fcall	_setup
  1417                           
  1418                           ;mainMaster.c: 79:     state = 0;
  1419  0040  01FA               	clrf	_state
  1420                           
  1421                           ;mainMaster.c: 80:     seguridad = 1;
  1422  0041  1283               	bcf	3,5	;RP0=0, select bank0
  1423  0042  1303               	bcf	3,6	;RP1=0, select bank0
  1424  0043  01A9               	clrf	_seguridad
  1425  0044  0AA9               	incf	_seguridad,f
  1426                           
  1427                           ;mainMaster.c: 81:     Lcd_Clear();
  1428  0045  160A  118A  263E  120A  118A  	fcall	_Lcd_Clear
  1429                           
  1430                           ;mainMaster.c: 82:     PORTAbits.RA7 = 0;
  1431  004A  1283               	bcf	3,5	;RP0=0, select bank0
  1432  004B  1303               	bcf	3,6	;RP1=0, select bank0
  1433  004C  1385               	bcf	5,7	;volatile
  1434                           
  1435                           ;mainMaster.c: 83:     Lcd_Set_Cursor(1,1);
  1436  004D  01F7               	clrf	Lcd_Set_Cursor@b
  1437  004E  0AF7               	incf	Lcd_Set_Cursor@b,f
  1438  004F  3001               	movlw	1
  1439  0050  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  1440                           
  1441                           ;mainMaster.c: 84:     Lcd_Write_String("Iniciando Sistema de Seguridad");
  1442  0055  301C               	movlw	low (STR_1| (0+32768))
  1443  0056  1283               	bcf	3,5	;RP0=0, select bank0
  1444  0057  1303               	bcf	3,6	;RP1=0, select bank0
  1445  0058  00C7               	movwf	Lcd_Write_String@a
  1446  0059  3088               	movlw	high (STR_1| (0+32768))
  1447  005A  00C8               	movwf	Lcd_Write_String@a+1
  1448  005B  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  1449                           
  1450                           ;mainMaster.c: 85:     for (k = 0; k < 16; k++){
  1451  0060  01F8               	clrf	_k
  1452  0061                     l4014:	
  1453                           
  1454                           ;mainMaster.c: 86:         Lcd_Shift_Left();
  1455  0061  160A  118A  2649  120A  118A  	fcall	_Lcd_Shift_Left
  1456                           
  1457                           ;mainMaster.c: 87:         _delay((unsigned long)((300)*(8000000/4000.0)));
  1458  0066  3004               	movlw	4
  1459  0067  1683               	bsf	3,5	;RP0=1, select bank1
  1460  0068  1303               	bcf	3,6	;RP1=0, select bank1
  1461  0069  00A2               	movwf	(??_main^(0+128)+2)
  1462  006A  300C               	movlw	12
  1463  006B  00A1               	movwf	(??_main^(0+128)+1)
  1464  006C  3033               	movlw	51
  1465  006D  00A0               	movwf	??_main^(0+128)
  1466  006E                     u4957:	
  1467  006E  0BA0               	decfsz	??_main^(0+128),f
  1468  006F  286E               	goto	u4957
  1469  0070  0BA1               	decfsz	(??_main^(0+128)+1),f
  1470  0071  286E               	goto	u4957
  1471  0072  0BA2               	decfsz	(??_main^(0+128)+2),f
  1472  0073  286E               	goto	u4957
  1473                           
  1474                           ;mainMaster.c: 88:     }
  1475  0074  3001               	movlw	1
  1476  0075  1683               	bsf	3,5	;RP0=1, select bank1
  1477  0076  1303               	bcf	3,6	;RP1=0, select bank1
  1478  0077  00A0               	movwf	??_main^(0+128)
  1479  0078  0820               	movf	??_main^(0+128),w
  1480  0079  07F8               	addwf	_k,f
  1481  007A  3010               	movlw	16
  1482  007B  0278               	subwf	_k,w
  1483  007C  1C03               	skipc
  1484  007D  2861               	goto	l4014
  1485                           
  1486                           ;mainMaster.c: 89:     for (k = 0; k < 16; k++){
  1487  007E  01F8               	clrf	_k
  1488  007F                     l4028:	
  1489                           
  1490                           ;mainMaster.c: 90:         Lcd_Shift_Right();
  1491  007F  120A  118A  27F2  120A  118A  	fcall	_Lcd_Shift_Right
  1492                           
  1493                           ;mainMaster.c: 91:         _delay((unsigned long)((300)*(8000000/4000.0)));
  1494  0084  3004               	movlw	4
  1495  0085  1683               	bsf	3,5	;RP0=1, select bank1
  1496  0086  1303               	bcf	3,6	;RP1=0, select bank1
  1497  0087  00A2               	movwf	(??_main^(0+128)+2)
  1498  0088  300C               	movlw	12
  1499  0089  00A1               	movwf	(??_main^(0+128)+1)
  1500  008A  3033               	movlw	51
  1501  008B  00A0               	movwf	??_main^(0+128)
  1502  008C                     u4967:	
  1503  008C  0BA0               	decfsz	??_main^(0+128),f
  1504  008D  288C               	goto	u4967
  1505  008E  0BA1               	decfsz	(??_main^(0+128)+1),f
  1506  008F  288C               	goto	u4967
  1507  0090  0BA2               	decfsz	(??_main^(0+128)+2),f
  1508  0091  288C               	goto	u4967
  1509                           
  1510                           ;mainMaster.c: 92:     }
  1511  0092  3001               	movlw	1
  1512  0093  1683               	bsf	3,5	;RP0=1, select bank1
  1513  0094  1303               	bcf	3,6	;RP1=0, select bank1
  1514  0095  00A0               	movwf	??_main^(0+128)
  1515  0096  0820               	movf	??_main^(0+128),w
  1516  0097  07F8               	addwf	_k,f
  1517  0098  3010               	movlw	16
  1518  0099  0278               	subwf	_k,w
  1519  009A  1C03               	skipc
  1520  009B  287F               	goto	l4028
  1521                           
  1522                           ;mainMaster.c: 93:     Lcd_Clear();
  1523  009C  160A  118A  263E  120A  118A  	fcall	_Lcd_Clear
  1524                           
  1525                           ;mainMaster.c: 94:     Lcd_Set_Cursor(1,1);
  1526  00A1  01F7               	clrf	Lcd_Set_Cursor@b
  1527  00A2  0AF7               	incf	Lcd_Set_Cursor@b,f
  1528  00A3  3001               	movlw	1
  1529  00A4  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  1530                           
  1531                           ;mainMaster.c: 95:     Lcd_Write_String("Espere");
  1532  00A9  3035               	movlw	low (STR_2| (0+32768))
  1533  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  1534  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  1535  00AC  00C7               	movwf	Lcd_Write_String@a
  1536  00AD  3089               	movlw	high (STR_2| (0+32768))
  1537  00AE  00C8               	movwf	Lcd_Write_String@a+1
  1538  00AF  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  1539                           
  1540                           ;mainMaster.c: 96:     Lcd_Set_Cursor(2,1);
  1541  00B4  01F7               	clrf	Lcd_Set_Cursor@b
  1542  00B5  0AF7               	incf	Lcd_Set_Cursor@b,f
  1543  00B6  3002               	movlw	2
  1544  00B7  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  1545                           
  1546                           ;mainMaster.c: 97:     Lcd_Write_String("un Momento");
  1547  00BC  30BB               	movlw	low (STR_3| (0+32768))
  1548  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  1549  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  1550  00BF  00C7               	movwf	Lcd_Write_String@a
  1551  00C0  3088               	movlw	high (STR_3| (0+32768))
  1552  00C1  00C8               	movwf	Lcd_Write_String@a+1
  1553  00C2  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  1554                           
  1555                           ;mainMaster.c: 98:     _delay((unsigned long)((4000)*(8000000/4000.0)));
  1556  00C7  3029               	movlw	41
  1557  00C8  1683               	bsf	3,5	;RP0=1, select bank1
  1558  00C9  1303               	bcf	3,6	;RP1=0, select bank1
  1559  00CA  00A2               	movwf	(??_main^(0+128)+2)
  1560  00CB  3096               	movlw	150
  1561  00CC  00A1               	movwf	(??_main^(0+128)+1)
  1562  00CD  307E               	movlw	126
  1563  00CE  00A0               	movwf	??_main^(0+128)
  1564  00CF                     u4977:	
  1565  00CF  0BA0               	decfsz	??_main^(0+128),f
  1566  00D0  28CF               	goto	u4977
  1567  00D1  0BA1               	decfsz	(??_main^(0+128)+1),f
  1568  00D2  28CF               	goto	u4977
  1569  00D3  0BA2               	decfsz	(??_main^(0+128)+2),f
  1570  00D4  28CF               	goto	u4977
  1571  00D5  0000               	nop
  1572                           
  1573                           ;mainMaster.c: 99:     Lcd_Clear();
  1574  00D6  160A  118A  263E  120A  118A  	fcall	_Lcd_Clear
  1575  00DB                     l4046:	
  1576                           
  1577                           ;mainMaster.c: 104:         get_temp(temp);
  1578  00DB  303B               	movlw	(low (_temp| 0))& (0+255)
  1579  00DC  120A  158A  2683  120A  118A  	fcall	_get_temp
  1580                           
  1581                           ;mainMaster.c: 105:         door = get_hall();
  1582  00E1  160A  118A  2734  120A  118A  	fcall	_get_hall
  1583  00E6  1683               	bsf	3,5	;RP0=1, select bank1
  1584  00E7  1303               	bcf	3,6	;RP1=0, select bank1
  1585  00E8  00A0               	movwf	??_main^(0+128)
  1586  00E9  0820               	movf	??_main^(0+128),w
  1587  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  1588  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  1589  00EC  00BA               	movwf	_door
  1590                           
  1591                           ;mainMaster.c: 106:         trip = get_tripwire();
  1592  00ED  160A  118A  2757  120A  118A  	fcall	_get_tripwire
  1593  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  1594  00F3  1303               	bcf	3,6	;RP1=0, select bank1
  1595  00F4  00A0               	movwf	??_main^(0+128)
  1596  00F5  0820               	movf	??_main^(0+128),w
  1597  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  1598  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  1599  00F8  00B9               	movwf	_trip
  1600                           
  1601                           ;mainMaster.c: 108:         PIR = get_PIR();
  1602  00F9  160A  118A  2711  120A  118A  	fcall	_get_PIR
  1603  00FE  1683               	bsf	3,5	;RP0=1, select bank1
  1604  00FF  1303               	bcf	3,6	;RP1=0, select bank1
  1605  0100  00A0               	movwf	??_main^(0+128)
  1606  0101  0820               	movf	??_main^(0+128),w
  1607  0102  1283               	bcf	3,5	;RP0=0, select bank0
  1608  0103  1303               	bcf	3,6	;RP1=0, select bank0
  1609  0104  00B8               	movwf	_PIR
  1610                           
  1611                           ;mainMaster.c: 109:         IR = get_IR();
  1612  0105  160A  118A  26EE  120A  118A  	fcall	_get_IR
  1613  010A  1683               	bsf	3,5	;RP0=1, select bank1
  1614  010B  1303               	bcf	3,6	;RP1=0, select bank1
  1615  010C  00A0               	movwf	??_main^(0+128)
  1616  010D  0820               	movf	??_main^(0+128),w
  1617  010E  1283               	bcf	3,5	;RP0=0, select bank0
  1618  010F  1303               	bcf	3,6	;RP1=0, select bank0
  1619  0110  00B7               	movwf	_IR
  1620                           
  1621                           ;mainMaster.c: 110:         get_time(time);
  1622  0111  3041               	movlw	(low (_time| 0))& (0+255)
  1623  0112  120A  158A  256B  120A  118A  	fcall	_get_time
  1624                           
  1625                           ;mainMaster.c: 111:         day1 = get_day();
  1626  0117  120A  158A  2204  120A  118A  	fcall	_get_day
  1627  011C  1683               	bsf	3,5	;RP0=1, select bank1
  1628  011D  1303               	bcf	3,6	;RP1=0, select bank1
  1629  011E  00A0               	movwf	??_main^(0+128)
  1630  011F  0820               	movf	??_main^(0+128),w
  1631  0120  00F9               	movwf	_day1
  1632                           
  1633                           ;mainMaster.c: 112:         bank = get_tripwire();
  1634  0121  160A  118A  2757  120A  118A  	fcall	_get_tripwire
  1635  0126  1683               	bsf	3,5	;RP0=1, select bank1
  1636  0127  1303               	bcf	3,6	;RP1=0, select bank1
  1637  0128  00A0               	movwf	??_main^(0+128)
  1638  0129  0820               	movf	??_main^(0+128),w
  1639  012A  1283               	bcf	3,5	;RP0=0, select bank0
  1640  012B  1303               	bcf	3,6	;RP1=0, select bank0
  1641  012C  00AE               	movwf	_bank
  1642                           
  1643                           ;mainMaster.c: 115:         if(PORTDbits.RD7 == 1){
  1644  012D  1F88               	btfss	8,7	;volatile
  1645  012E  296A               	goto	l323
  1646                           
  1647                           ;mainMaster.c: 116:             if (bank == 2){
  1648  012F  3002               	movlw	2
  1649  0130  062E               	xorwf	_bank,w
  1650  0131  1D03               	btfss	3,2
  1651  0132  294E               	goto	l4076
  1652                           
  1653                           ;mainMaster.c: 117:                 if (change1 == 0){
  1654  0133  0833               	movf	_change1,w
  1655  0134  1D03               	btfss	3,2
  1656  0135  296C               	goto	l4090
  1657                           
  1658                           ;mainMaster.c: 120:                     open_door();
  1659  0136  160A  118A  26B4  120A  118A  	fcall	_open_door
  1660                           
  1661                           ;mainMaster.c: 121:                     j = 0;
  1662  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1663  013C  1303               	bcf	3,6	;RP1=0, select bank0
  1664  013D  01B5               	clrf	_j
  1665  013E                     l4074:	
  1666                           ;mainMaster.c: 122:                     while(j < 50){
  1667                           
  1668                           
  1669                           ;mainMaster.c: 122:                     while(j < 50){
  1670  013E  3032               	movlw	50
  1671  013F  0235               	subwf	_j,w
  1672  0140  1803               	btfsc	3,0
  1673  0141  294B               	goto	l328
  1674                           
  1675                           ;mainMaster.c: 123:                         j++;
  1676  0142  3001               	movlw	1
  1677  0143  1683               	bsf	3,5	;RP0=1, select bank1
  1678  0144  1303               	bcf	3,6	;RP1=0, select bank1
  1679  0145  00A0               	movwf	??_main^(0+128)
  1680  0146  0820               	movf	??_main^(0+128),w
  1681  0147  1283               	bcf	3,5	;RP0=0, select bank0
  1682  0148  1303               	bcf	3,6	;RP1=0, select bank0
  1683  0149  07B5               	addwf	_j,f
  1684  014A  293E               	goto	l4074
  1685  014B                     l328:	
  1686                           
  1687                           ;mainMaster.c: 126:                     change1 = 1;
  1688  014B  01B3               	clrf	_change1
  1689  014C  0AB3               	incf	_change1,f
  1690  014D  296C               	goto	l4090
  1691  014E                     l4076:	
  1692  014E  3003               	movlw	3
  1693  014F  062E               	xorwf	_bank,w
  1694  0150  1D03               	btfss	3,2
  1695  0151  296C               	goto	l4090
  1696                           
  1697                           ;mainMaster.c: 129:                 if (change1 == 0){
  1698  0152  0833               	movf	_change1,w
  1699  0153  1D03               	btfss	3,2
  1700  0154  296C               	goto	l4090
  1701                           
  1702                           ;mainMaster.c: 132:                     close_door();
  1703  0155  160A  118A  2699  120A  118A  	fcall	_close_door
  1704                           
  1705                           ;mainMaster.c: 133:                     j = 0;
  1706  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1707  015B  1303               	bcf	3,6	;RP1=0, select bank0
  1708  015C  01B5               	clrf	_j
  1709  015D                     l4086:	
  1710                           ;mainMaster.c: 134:                     while(j < 50){
  1711                           
  1712                           
  1713                           ;mainMaster.c: 134:                     while(j < 50){
  1714  015D  3032               	movlw	50
  1715  015E  0235               	subwf	_j,w
  1716  015F  1803               	btfsc	3,0
  1717  0160  294B               	goto	l328
  1718                           
  1719                           ;mainMaster.c: 135:                         j++;
  1720  0161  3001               	movlw	1
  1721  0162  1683               	bsf	3,5	;RP0=1, select bank1
  1722  0163  1303               	bcf	3,6	;RP1=0, select bank1
  1723  0164  00A0               	movwf	??_main^(0+128)
  1724  0165  0820               	movf	??_main^(0+128),w
  1725  0166  1283               	bcf	3,5	;RP0=0, select bank0
  1726  0167  1303               	bcf	3,6	;RP1=0, select bank0
  1727  0168  07B5               	addwf	_j,f
  1728  0169  295D               	goto	l4086
  1729  016A                     l323:	
  1730                           ;mainMaster.c: 141:         } else if(PORTDbits.RD7 == 0){
  1731                           
  1732  016A  1F88               	btfss	8,7	;volatile
  1733                           
  1734                           ;mainMaster.c: 142:             change1 = 0;
  1735  016B  01B3               	clrf	_change1
  1736  016C                     l4090:	
  1737                           
  1738                           ;mainMaster.c: 145:         if (alarm == 0 & seguridad == 1){
  1739  016C  082F               	movf	_alarm,w
  1740  016D  1D03               	btfss	3,2
  1741  016E  297C               	goto	l337
  1742  016F  0329               	decf	_seguridad,w
  1743  0170  1D03               	btfss	3,2
  1744  0171  297C               	goto	l337
  1745                           
  1746                           ;mainMaster.c: 146:             alarm = trip | PIR | IR;
  1747  0172  0839               	movf	_trip,w
  1748  0173  0438               	iorwf	_PIR,w
  1749  0174  0437               	iorwf	_IR,w
  1750  0175  1683               	bsf	3,5	;RP0=1, select bank1
  1751  0176  1303               	bcf	3,6	;RP1=0, select bank1
  1752  0177  00A0               	movwf	??_main^(0+128)
  1753  0178  0820               	movf	??_main^(0+128),w
  1754  0179  1283               	bcf	3,5	;RP0=0, select bank0
  1755  017A  1303               	bcf	3,6	;RP1=0, select bank0
  1756  017B  00AF               	movwf	_alarm
  1757  017C                     l337:	
  1758                           ;mainMaster.c: 147:         }
  1759                           
  1760                           
  1761                           ;mainMaster.c: 151:         if (alarm == 1){
  1762  017C  032F               	decf	_alarm,w
  1763  017D  1D03               	btfss	3,2
  1764  017E  298D               	goto	l338
  1765                           
  1766                           ;mainMaster.c: 153:             if (change2 == 0){
  1767  017F  0832               	movf	_change2,w
  1768  0180  1D03               	btfss	3,2
  1769  0181  298F               	goto	l4106
  1770                           
  1771                           ;mainMaster.c: 154:                 change2 = 1;
  1772  0182  01B2               	clrf	_change2
  1773  0183  0AB2               	incf	_change2,f
  1774                           
  1775                           ;mainMaster.c: 155:                 close_door();
  1776  0184  160A  118A  2699  120A  118A  	fcall	_close_door
  1777                           
  1778                           ;mainMaster.c: 156:                 PORTAbits.RA6 = 1;
  1779  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1780  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1781  018B  1705               	bsf	5,6	;volatile
  1782  018C  298F               	goto	l4106
  1783  018D                     l338:	
  1784                           ;mainMaster.c: 160:         else {
  1785                           
  1786                           
  1787                           ;mainMaster.c: 161:             PORTAbits.RA6 = 0;
  1788  018D  1305               	bcf	5,6	;volatile
  1789                           
  1790                           ;mainMaster.c: 162:             change2 = 0;
  1791  018E  01B2               	clrf	_change2
  1792  018F                     l4106:	
  1793                           
  1794                           ;mainMaster.c: 165:         if (seguridad == 1){
  1795  018F  0329               	decf	_seguridad,w
  1796  0190  1D03               	btfss	3,2
  1797  0191  29A2               	goto	l4122
  1798                           
  1799                           ;mainMaster.c: 166:             if (PORTDbits.RD6 == 1){
  1800  0192  1F08               	btfss	8,6	;volatile
  1801  0193  29A1               	goto	l4120
  1802                           
  1803                           ;mainMaster.c: 167:                 if (change3 == 0){
  1804  0194  0831               	movf	_change3,w
  1805  0195  1D03               	btfss	3,2
  1806  0196  29A2               	goto	l4122
  1807                           
  1808                           ;mainMaster.c: 168:                     if (alarm == 0){
  1809  0197  082F               	movf	_alarm,w
  1810  0198  1D03               	btfss	3,2
  1811  0199  299D               	goto	l4116
  1812                           
  1813                           ;mainMaster.c: 169:                         alarm = 1;
  1814  019A  01AF               	clrf	_alarm
  1815  019B  0AAF               	incf	_alarm,f
  1816                           
  1817                           ;mainMaster.c: 170:                     }else {
  1818  019C  299E               	goto	l4118
  1819  019D                     l4116:	
  1820                           
  1821                           ;mainMaster.c: 171:                         alarm = 0;
  1822  019D  01AF               	clrf	_alarm
  1823  019E                     l4118:	
  1824                           
  1825                           ;mainMaster.c: 173:                     change3 = 1;
  1826  019E  01B1               	clrf	_change3
  1827  019F  0AB1               	incf	_change3,f
  1828  01A0  29A2               	goto	l4122
  1829  01A1                     l4120:	
  1830                           
  1831                           ;mainMaster.c: 178:                 change3 = 0;
  1832  01A1  01B1               	clrf	_change3
  1833  01A2                     l4122:	
  1834                           
  1835                           ;mainMaster.c: 182:         SSPCONbits.SSPEN = 0;
  1836  01A2  1294               	bcf	20,5	;volatile
  1837                           
  1838                           ;mainMaster.c: 183:         RCSTAbits.SPEN = 1;
  1839  01A3  1798               	bsf	24,7	;volatile
  1840                           
  1841                           ;mainMaster.c: 185:         if (UART_TX_Empty()){
  1842  01A4  160A  118A  2600  120A  118A  	fcall	_UART_TX_Empty
  1843  01A9  3A00               	xorlw	0
  1844  01AA  1903               	skipnz
  1845  01AB  2A5E               	goto	l4156
  1846                           
  1847                           ;mainMaster.c: 186:             UART_Write(temp[0]);
  1848  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1849  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  1850  01AE  083B               	movf	_temp,w
  1851  01AF  160A  118A  2634  120A  118A  	fcall	_UART_Write
  1852                           
  1853                           ;mainMaster.c: 187:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1854  01B4  3003               	movlw	3
  1855  01B5  1683               	bsf	3,5	;RP0=1, select bank1
  1856  01B6  1303               	bcf	3,6	;RP1=0, select bank1
  1857  01B7  00A1               	movwf	(??_main^(0+128)+1)
  1858  01B8  3097               	movlw	151
  1859  01B9  00A0               	movwf	??_main^(0+128)
  1860  01BA                     u4987:	
  1861  01BA  0BA0               	decfsz	??_main^(0+128),f
  1862  01BB  29BA               	goto	u4987
  1863  01BC  0BA1               	decfsz	(??_main^(0+128)+1),f
  1864  01BD  29BA               	goto	u4987
  1865                           
  1866                           ;mainMaster.c: 188:             UART_Write(temp[1]);
  1867  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  1868  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  1869  01C0  083C               	movf	_temp+1,w
  1870  01C1  160A  118A  2634  120A  118A  	fcall	_UART_Write
  1871                           
  1872                           ;mainMaster.c: 189:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1873  01C6  3003               	movlw	3
  1874  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  1875  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  1876  01C9  00A1               	movwf	(??_main^(0+128)+1)
  1877  01CA  3097               	movlw	151
  1878  01CB  00A0               	movwf	??_main^(0+128)
  1879  01CC                     u4997:	
  1880  01CC  0BA0               	decfsz	??_main^(0+128),f
  1881  01CD  29CC               	goto	u4997
  1882  01CE  0BA1               	decfsz	(??_main^(0+128)+1),f
  1883  01CF  29CC               	goto	u4997
  1884                           
  1885                           ;mainMaster.c: 190:             UART_Write(temp[2]);
  1886  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1887  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  1888  01D2  083D               	movf	_temp+2,w
  1889  01D3  160A  118A  2634  120A  118A  	fcall	_UART_Write
  1890                           
  1891                           ;mainMaster.c: 191:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1892  01D8  3003               	movlw	3
  1893  01D9  1683               	bsf	3,5	;RP0=1, select bank1
  1894  01DA  1303               	bcf	3,6	;RP1=0, select bank1
  1895  01DB  00A1               	movwf	(??_main^(0+128)+1)
  1896  01DC  3097               	movlw	151
  1897  01DD  00A0               	movwf	??_main^(0+128)
  1898  01DE                     u5007:	
  1899  01DE  0BA0               	decfsz	??_main^(0+128),f
  1900  01DF  29DE               	goto	u5007
  1901  01E0  0BA1               	decfsz	(??_main^(0+128)+1),f
  1902  01E1  29DE               	goto	u5007
  1903                           
  1904                           ;mainMaster.c: 192:             UART_Write(temp[3]);
  1905  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  1906  01E3  1303               	bcf	3,6	;RP1=0, select bank0
  1907  01E4  083E               	movf	_temp+3,w
  1908  01E5  160A  118A  2634  120A  118A  	fcall	_UART_Write
  1909                           
  1910                           ;mainMaster.c: 193:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1911  01EA  3003               	movlw	3
  1912  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  1913  01EC  1303               	bcf	3,6	;RP1=0, select bank1
  1914  01ED  00A1               	movwf	(??_main^(0+128)+1)
  1915  01EE  3097               	movlw	151
  1916  01EF  00A0               	movwf	??_main^(0+128)
  1917  01F0                     u5017:	
  1918  01F0  0BA0               	decfsz	??_main^(0+128),f
  1919  01F1  29F0               	goto	u5017
  1920  01F2  0BA1               	decfsz	(??_main^(0+128)+1),f
  1921  01F3  29F0               	goto	u5017
  1922                           
  1923                           ;mainMaster.c: 194:             UART_Write(temp[4]);
  1924  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  1925  01F5  1303               	bcf	3,6	;RP1=0, select bank0
  1926  01F6  083F               	movf	_temp+4,w
  1927  01F7  160A  118A  2634  120A  118A  	fcall	_UART_Write
  1928                           
  1929                           ;mainMaster.c: 195:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1930  01FC  3003               	movlw	3
  1931  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  1932  01FE  1303               	bcf	3,6	;RP1=0, select bank1
  1933  01FF  00A1               	movwf	(??_main^(0+128)+1)
  1934  0200  3097               	movlw	151
  1935  0201  00A0               	movwf	??_main^(0+128)
  1936  0202                     u5027:	
  1937  0202  0BA0               	decfsz	??_main^(0+128),f
  1938  0203  2A02               	goto	u5027
  1939  0204  0BA1               	decfsz	(??_main^(0+128)+1),f
  1940  0205  2A02               	goto	u5027
  1941                           
  1942                           ;mainMaster.c: 196:             UART_Write(door);
  1943  0206  1283               	bcf	3,5	;RP0=0, select bank0
  1944  0207  1303               	bcf	3,6	;RP1=0, select bank0
  1945  0208  083A               	movf	_door,w
  1946  0209  160A  118A  2634  120A  118A  	fcall	_UART_Write
  1947                           
  1948                           ;mainMaster.c: 197:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1949  020E  3003               	movlw	3
  1950  020F  1683               	bsf	3,5	;RP0=1, select bank1
  1951  0210  1303               	bcf	3,6	;RP1=0, select bank1
  1952  0211  00A1               	movwf	(??_main^(0+128)+1)
  1953  0212  3097               	movlw	151
  1954  0213  00A0               	movwf	??_main^(0+128)
  1955  0214                     u5037:	
  1956  0214  0BA0               	decfsz	??_main^(0+128),f
  1957  0215  2A14               	goto	u5037
  1958  0216  0BA1               	decfsz	(??_main^(0+128)+1),f
  1959  0217  2A14               	goto	u5037
  1960                           
  1961                           ;mainMaster.c: 198:             UART_Write(alarm);
  1962  0218  1283               	bcf	3,5	;RP0=0, select bank0
  1963  0219  1303               	bcf	3,6	;RP1=0, select bank0
  1964  021A  082F               	movf	_alarm,w
  1965  021B  160A  118A  2634  120A  118A  	fcall	_UART_Write
  1966                           
  1967                           ;mainMaster.c: 199:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1968  0220  3003               	movlw	3
  1969  0221  1683               	bsf	3,5	;RP0=1, select bank1
  1970  0222  1303               	bcf	3,6	;RP1=0, select bank1
  1971  0223  00A1               	movwf	(??_main^(0+128)+1)
  1972  0224  3097               	movlw	151
  1973  0225  00A0               	movwf	??_main^(0+128)
  1974  0226                     u5047:	
  1975  0226  0BA0               	decfsz	??_main^(0+128),f
  1976  0227  2A26               	goto	u5047
  1977  0228  0BA1               	decfsz	(??_main^(0+128)+1),f
  1978  0229  2A26               	goto	u5047
  1979                           
  1980                           ;mainMaster.c: 200:             UART_Write(bank);
  1981  022A  1283               	bcf	3,5	;RP0=0, select bank0
  1982  022B  1303               	bcf	3,6	;RP1=0, select bank0
  1983  022C  082E               	movf	_bank,w
  1984  022D  160A  118A  2634  120A  118A  	fcall	_UART_Write
  1985                           
  1986                           ;mainMaster.c: 201:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1987  0232  3003               	movlw	3
  1988  0233  1683               	bsf	3,5	;RP0=1, select bank1
  1989  0234  1303               	bcf	3,6	;RP1=0, select bank1
  1990  0235  00A1               	movwf	(??_main^(0+128)+1)
  1991  0236  3097               	movlw	151
  1992  0237  00A0               	movwf	??_main^(0+128)
  1993  0238                     u5057:	
  1994  0238  0BA0               	decfsz	??_main^(0+128),f
  1995  0239  2A38               	goto	u5057
  1996  023A  0BA1               	decfsz	(??_main^(0+128)+1),f
  1997  023B  2A38               	goto	u5057
  1998                           
  1999                           ;mainMaster.c: 202:             UART_Write(seguridad);
  2000  023C  1283               	bcf	3,5	;RP0=0, select bank0
  2001  023D  1303               	bcf	3,6	;RP1=0, select bank0
  2002  023E  0829               	movf	_seguridad,w
  2003  023F  160A  118A  2634  120A  118A  	fcall	_UART_Write
  2004                           
  2005                           ;mainMaster.c: 203:             _delay((unsigned long)((1)*(8000000/4000.0)));
  2006  0244  3003               	movlw	3
  2007  0245  1683               	bsf	3,5	;RP0=1, select bank1
  2008  0246  1303               	bcf	3,6	;RP1=0, select bank1
  2009  0247  00A1               	movwf	(??_main^(0+128)+1)
  2010  0248  3097               	movlw	151
  2011  0249  00A0               	movwf	??_main^(0+128)
  2012  024A                     u5067:	
  2013  024A  0BA0               	decfsz	??_main^(0+128),f
  2014  024B  2A4A               	goto	u5067
  2015  024C  0BA1               	decfsz	(??_main^(0+128)+1),f
  2016  024D  2A4A               	goto	u5067
  2017                           
  2018                           ;mainMaster.c: 204:             UART_Write('A');
  2019  024E  3041               	movlw	65
  2020  024F  160A  118A  2634  120A  118A  	fcall	_UART_Write
  2021                           
  2022                           ;mainMaster.c: 205:             _delay((unsigned long)((1)*(8000000/4000.0)));
  2023  0254  3003               	movlw	3
  2024  0255  1683               	bsf	3,5	;RP0=1, select bank1
  2025  0256  1303               	bcf	3,6	;RP1=0, select bank1
  2026  0257  00A1               	movwf	(??_main^(0+128)+1)
  2027  0258  3097               	movlw	151
  2028  0259  00A0               	movwf	??_main^(0+128)
  2029  025A                     u5077:	
  2030  025A  0BA0               	decfsz	??_main^(0+128),f
  2031  025B  2A5A               	goto	u5077
  2032  025C  0BA1               	decfsz	(??_main^(0+128)+1),f
  2033  025D  2A5A               	goto	u5077
  2034  025E                     l4156:	
  2035                           
  2036                           ;mainMaster.c: 208:         RCSTAbits.SPEN = 0;
  2037  025E  1283               	bcf	3,5	;RP0=0, select bank0
  2038  025F  1303               	bcf	3,6	;RP1=0, select bank0
  2039  0260  1398               	bcf	24,7	;volatile
  2040                           
  2041                           ;mainMaster.c: 209:         SSPCONbits.SSPEN = 1;
  2042  0261  1694               	bsf	20,5	;volatile
  2043                           
  2044                           ;mainMaster.c: 211:         if (door == 1){
  2045  0262  033A               	decf	_door,w
  2046  0263  1D03               	btfss	3,2
  2047  0264  2A67               	goto	l4164
  2048                           
  2049                           ;mainMaster.c: 212:             val = 8;
  2050  0265  3008               	movlw	8
  2051  0266  2A6B               	goto	L1
  2052  0267                     l4164:	
  2053                           ;mainMaster.c: 213:         } else if (door == 0){
  2054                           
  2055  0267  083A               	movf	_door,w
  2056  0268  1D03               	btfss	3,2
  2057  0269  2AA4               	goto	l4186
  2058                           
  2059                           ;mainMaster.c: 214:             val = 16;
  2060  026A  3010               	movlw	16
  2061  026B                     L1:	
  2062  026B  1683               	bsf	3,5	;RP0=1, select bank1
  2063  026C  1303               	bcf	3,6	;RP1=0, select bank1
  2064  026D  00A0               	movwf	??_main^(0+128)
  2065  026E  0820               	movf	??_main^(0+128),w
  2066  026F  1283               	bcf	3,5	;RP0=0, select bank0
  2067  0270  1303               	bcf	3,6	;RP1=0, select bank0
  2068  0271  00AC               	movwf	_val
  2069  0272  2AA4               	goto	l4186
  2070  0273                     l4168:	
  2071                           
  2072                           ;mainMaster.c: 219:                 day2 = "LUNES    ";
  2073  0273  30C6               	movlw	low (STR_4| (0+32768))
  2074  0274  1283               	bcf	3,5	;RP0=0, select bank0
  2075  0275  1303               	bcf	3,6	;RP1=0, select bank0
  2076  0276  00A5               	movwf	_day2
  2077  0277  3088               	movlw	high (STR_4| (0+32768))
  2078  0278  2AA2               	goto	L8
  2079  0279                     l4170:	
  2080                           ;mainMaster.c: 220:                 break;
  2081                           
  2082                           
  2083                           ;mainMaster.c: 222:                 day2 = "MARTES   ";
  2084  0279  30DA               	movlw	low (STR_5| (0+32768))
  2085  027A  1283               	bcf	3,5	;RP0=0, select bank0
  2086  027B  1303               	bcf	3,6	;RP1=0, select bank0
  2087  027C  00A5               	movwf	_day2
  2088  027D  3088               	movlw	high (STR_5| (0+32768))
  2089  027E  2AA2               	goto	L8
  2090  027F                     l4172:	
  2091                           ;mainMaster.c: 223:                 break;
  2092                           
  2093                           
  2094                           ;mainMaster.c: 225:                 day2 = "MIERCOLES";
  2095  027F  3002               	movlw	low (STR_6| (0+32768))
  2096  0280  1283               	bcf	3,5	;RP0=0, select bank0
  2097  0281  1303               	bcf	3,6	;RP1=0, select bank0
  2098  0282  00A5               	movwf	_day2
  2099  0283  3089               	movlw	high (STR_6| (0+32768))
  2100  0284  2AA2               	goto	L8
  2101  0285                     l4174:	
  2102                           ;mainMaster.c: 226:                 break;
  2103                           
  2104                           
  2105                           ;mainMaster.c: 228:                 day2 = "JUEVES   ";
  2106  0285  30E4               	movlw	low (STR_7| (0+32768))
  2107  0286  1283               	bcf	3,5	;RP0=0, select bank0
  2108  0287  1303               	bcf	3,6	;RP1=0, select bank0
  2109  0288  00A5               	movwf	_day2
  2110  0289  3088               	movlw	high (STR_7| (0+32768))
  2111  028A  2AA2               	goto	L8
  2112  028B                     l4176:	
  2113                           ;mainMaster.c: 229:                 break;
  2114                           
  2115                           
  2116                           ;mainMaster.c: 231:                 day2 = "VIERNES  ";
  2117  028B  30F8               	movlw	low (STR_8| (0+32768))
  2118  028C  1283               	bcf	3,5	;RP0=0, select bank0
  2119  028D  1303               	bcf	3,6	;RP1=0, select bank0
  2120  028E  00A5               	movwf	_day2
  2121  028F  3088               	movlw	high (STR_8| (0+32768))
  2122  0290  2AA2               	goto	L8
  2123  0291                     l4178:	
  2124                           ;mainMaster.c: 232:                 break;
  2125                           
  2126                           
  2127                           ;mainMaster.c: 234:                 day2 = "SABADO   ";
  2128  0291  30D0               	movlw	low (STR_9| (0+32768))
  2129  0292  1283               	bcf	3,5	;RP0=0, select bank0
  2130  0293  1303               	bcf	3,6	;RP1=0, select bank0
  2131  0294  00A5               	movwf	_day2
  2132  0295  3088               	movlw	high (STR_9| (0+32768))
  2133  0296  2AA2               	goto	L8
  2134  0297                     l4180:	
  2135                           ;mainMaster.c: 235:                 break;
  2136                           
  2137                           
  2138                           ;mainMaster.c: 237:                 day2 = "DOMINGO  ";
  2139  0297  30EE               	movlw	low (STR_10| (0+32768))
  2140  0298  1283               	bcf	3,5	;RP0=0, select bank0
  2141  0299  1303               	bcf	3,6	;RP1=0, select bank0
  2142  029A  00A5               	movwf	_day2
  2143  029B  3088               	movlw	high (STR_10| (0+32768))
  2144  029C  2AA2               	goto	L8
  2145  029D                     l4182:	
  2146                           ;mainMaster.c: 238:                 break;
  2147                           
  2148                           
  2149                           ;mainMaster.c: 240:                 day2 = "         ";
  2150  029D  304F               	movlw	low ((STR_29+3)| (0+32768))
  2151  029E  1283               	bcf	3,5	;RP0=0, select bank0
  2152  029F  1303               	bcf	3,6	;RP1=0, select bank0
  2153  02A0  00A5               	movwf	_day2
  2154  02A1  3088               	movlw	high ((STR_29+3)| (0+32768))
  2155  02A2                     L8:	
  2156  02A2  00A6               	movwf	_day2+1
  2157                           
  2158                           ;mainMaster.c: 241:                 break;
  2159  02A3  2AC5               	goto	l4188
  2160  02A4                     l4186:	
  2161  02A4  0879               	movf	_day1,w
  2162  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  2163  02A6  1303               	bcf	3,6	;RP1=0, select bank1
  2164  02A7  00A0               	movwf	??_main^(0+128)
  2165  02A8  01A1               	clrf	(??_main^(0+128)+1)
  2166                           
  2167                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2168                           ; Switch size 1, requested type "simple"
  2169                           ; Number of cases is 1, Range of values is 0 to 0
  2170                           ; switch strategies available:
  2171                           ; Name         Instructions Cycles
  2172                           ; simple_byte            4     3 (average)
  2173                           ; direct_byte           11     8 (fixed)
  2174                           ; jumptable            260     6 (fixed)
  2175                           ;	Chosen strategy is simple_byte
  2176  02A9  0821               	movf	(??_main+1)^(0+128),w
  2177  02AA  3A00               	xorlw	0	; case 0
  2178  02AB  1903               	skipnz
  2179  02AC  2AAE               	goto	l4550
  2180  02AD  2A9D               	goto	l4182
  2181  02AE                     l4550:	
  2182                           
  2183                           ; Switch size 1, requested type "simple"
  2184                           ; Number of cases is 7, Range of values is 1 to 7
  2185                           ; switch strategies available:
  2186                           ; Name         Instructions Cycles
  2187                           ; simple_byte           22    12 (average)
  2188                           ; direct_byte           32    11 (fixed)
  2189                           ; jumptable            263     9 (fixed)
  2190                           ;	Chosen strategy is simple_byte
  2191  02AE  0820               	movf	??_main^(0+128),w
  2192  02AF  3A01               	xorlw	1	; case 1
  2193  02B0  1903               	skipnz
  2194  02B1  2A73               	goto	l4168
  2195  02B2  3A03               	xorlw	3	; case 2
  2196  02B3  1903               	skipnz
  2197  02B4  2A79               	goto	l4170
  2198  02B5  3A01               	xorlw	1	; case 3
  2199  02B6  1903               	skipnz
  2200  02B7  2A7F               	goto	l4172
  2201  02B8  3A07               	xorlw	7	; case 4
  2202  02B9  1903               	skipnz
  2203  02BA  2A85               	goto	l4174
  2204  02BB  3A01               	xorlw	1	; case 5
  2205  02BC  1903               	skipnz
  2206  02BD  2A8B               	goto	l4176
  2207  02BE  3A03               	xorlw	3	; case 6
  2208  02BF  1903               	skipnz
  2209  02C0  2A91               	goto	l4178
  2210  02C1  3A01               	xorlw	1	; case 7
  2211  02C2  1903               	skipnz
  2212  02C3  2A97               	goto	l4180
  2213  02C4  2A9D               	goto	l4182
  2214  02C5                     l4188:	
  2215                           
  2216                           ;mainMaster.c: 245:         if (strcmp(temp,"23.50") > 0){
  2217  02C5  304E               	movlw	low (STR_12| (0+32768))
  2218  02C6  00F3               	movwf	strcmp@s2
  2219  02C7  3089               	movlw	high (STR_12| (0+32768))
  2220  02C8  00F4               	movwf	strcmp@s2+1
  2221  02C9  303B               	movlw	(low (_temp| 0))& (0+255)
  2222  02CA  120A  158A  2163  120A  118A  	fcall	_strcmp
  2223  02CF  0874               	movf	?_strcmp+1,w
  2224  02D0  3A80               	xorlw	128
  2225  02D1  00FF               	movwf	127
  2226  02D2  3080               	movlw	128
  2227  02D3  027F               	subwf	127,w
  2228  02D4  1D03               	skipz
  2229  02D5  2AD8               	goto	u4375
  2230  02D6  3001               	movlw	1
  2231  02D7  0273               	subwf	?_strcmp,w
  2232  02D8                     u4375:	
  2233  02D8  1C03               	skipc
  2234  02D9  2ADE               	goto	l361
  2235                           
  2236                           ;mainMaster.c: 246:             PORTAbits.RA0 = 1;
  2237  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  2238  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  2239  02DC  1405               	bsf	5,0	;volatile
  2240                           
  2241                           ;mainMaster.c: 247:         } else {
  2242  02DD  2AE1               	goto	l4192
  2243  02DE                     l361:	
  2244                           
  2245                           ;mainMaster.c: 248:             PORTAbits.RA0 = 0;
  2246  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  2247  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  2248  02E0  1005               	bcf	5,0	;volatile
  2249  02E1                     l4192:	
  2250                           
  2251                           ;mainMaster.c: 251:         if ((strcmp(time, "22:00") == 0) & ((day1 != 6) | (day1 != 7
      +                          ))){
  2252  02E1  3048               	movlw	low (STR_13| (0+32768))
  2253  02E2  00F3               	movwf	strcmp@s2
  2254  02E3  3089               	movlw	high (STR_13| (0+32768))
  2255  02E4  00F4               	movwf	strcmp@s2+1
  2256  02E5  3041               	movlw	(low (_time| 0))& (0+255)
  2257  02E6  120A  158A  2163  120A  118A  	fcall	_strcmp
  2258  02EB  0873               	movf	?_strcmp,w
  2259  02EC  0474               	iorwf	?_strcmp+1,w
  2260  02ED  1D03               	btfss	3,2
  2261  02EE  2AF7               	goto	l4200
  2262  02EF  3006               	movlw	6
  2263  02F0  0679               	xorwf	_day1,w
  2264  02F1  1D03               	btfss	3,2
  2265  02F2  2B0D               	goto	l4198
  2266  02F3  3007               	movlw	7
  2267  02F4  0679               	xorwf	_day1,w
  2268  02F5  1D03               	btfss	3,2
  2269  02F6  2B0D               	goto	l4198
  2270  02F7                     l4200:	
  2271                           ;mainMaster.c: 253:         } else if ((strcmp(time, "21:00") == 0) & ((day1 == 6) | (da
      +                          y1 == 7))){
  2272                           
  2273  02F7  3042               	movlw	low (STR_14| (0+32768))
  2274  02F8  00F3               	movwf	strcmp@s2
  2275  02F9  3089               	movlw	high (STR_14| (0+32768))
  2276  02FA  00F4               	movwf	strcmp@s2+1
  2277  02FB  3041               	movlw	(low (_time| 0))& (0+255)
  2278  02FC  120A  158A  2163  120A  118A  	fcall	_strcmp
  2279  0301  0873               	movf	?_strcmp,w
  2280  0302  0474               	iorwf	?_strcmp+1,w
  2281  0303  1D03               	btfss	3,2
  2282  0304  2B12               	goto	l4208
  2283  0305  3006               	movlw	6
  2284  0306  0679               	xorwf	_day1,w
  2285  0307  1903               	btfsc	3,2
  2286  0308  2B0D               	goto	l4198
  2287  0309  3007               	movlw	7
  2288  030A  0679               	xorwf	_day1,w
  2289  030B  1D03               	btfss	3,2
  2290  030C  2B12               	goto	l4208
  2291  030D                     l4198:	
  2292                           
  2293                           ;mainMaster.c: 252:             close_door();
  2294  030D  160A  118A  2699  120A  118A  	fcall	_close_door
  2295  0312                     l4208:	
  2296                           
  2297                           ;mainMaster.c: 258:         if(PORTCbits.RC0 == 1){
  2298  0312  1283               	bcf	3,5	;RP0=0, select bank0
  2299  0313  1303               	bcf	3,6	;RP1=0, select bank0
  2300  0314  1C07               	btfss	7,0	;volatile
  2301  0315  2B3F               	goto	l4226
  2302                           
  2303                           ;mainMaster.c: 259:             if (change == 0){
  2304  0316  0834               	movf	_change,w
  2305  0317  1D03               	btfss	3,2
  2306  0318  2B40               	goto	l4228
  2307                           
  2308                           ;mainMaster.c: 260:                 state++;
  2309  0319  3001               	movlw	1
  2310  031A  1683               	bsf	3,5	;RP0=1, select bank1
  2311  031B  1303               	bcf	3,6	;RP1=0, select bank1
  2312  031C  00A0               	movwf	??_main^(0+128)
  2313  031D  0820               	movf	??_main^(0+128),w
  2314  031E  07FA               	addwf	_state,f
  2315                           
  2316                           ;mainMaster.c: 261:                 if (state == 4){
  2317  031F  3004               	movlw	4
  2318  0320  067A               	xorwf	_state,w
  2319  0321  1903               	btfsc	3,2
  2320                           
  2321                           ;mainMaster.c: 262:                     k = 0;
  2322  0322  01F8               	clrf	_k
  2323                           
  2324                           ;mainMaster.c: 264:                 Lcd_Clear();
  2325  0323  160A  118A  263E  120A  118A  	fcall	_Lcd_Clear
  2326                           
  2327                           ;mainMaster.c: 265:                 if (state > 5){
  2328  0328  3006               	movlw	6
  2329  0329  027A               	subwf	_state,w
  2330  032A  1803               	btfsc	3,0
  2331                           
  2332                           ;mainMaster.c: 266:                     state = 0;
  2333  032B  01FA               	clrf	_state
  2334                           
  2335                           ;mainMaster.c: 268:                 j = 0;
  2336                           
  2337                           ;mainMaster.c: 267:                 }
  2338  032C  1283               	bcf	3,5	;RP0=0, select bank0
  2339  032D  1303               	bcf	3,6	;RP1=0, select bank0
  2340  032E  01B5               	clrf	_j
  2341  032F                     l4224:	
  2342                           ;mainMaster.c: 269:                 while(j < 50){
  2343                           
  2344                           
  2345                           ;mainMaster.c: 269:                 while(j < 50){
  2346  032F  3032               	movlw	50
  2347  0330  0235               	subwf	_j,w
  2348  0331  1803               	btfsc	3,0
  2349  0332  2B3C               	goto	l376
  2350                           
  2351                           ;mainMaster.c: 270:                     j++;
  2352  0333  3001               	movlw	1
  2353  0334  1683               	bsf	3,5	;RP0=1, select bank1
  2354  0335  1303               	bcf	3,6	;RP1=0, select bank1
  2355  0336  00A0               	movwf	??_main^(0+128)
  2356  0337  0820               	movf	??_main^(0+128),w
  2357  0338  1283               	bcf	3,5	;RP0=0, select bank0
  2358  0339  1303               	bcf	3,6	;RP1=0, select bank0
  2359  033A  07B5               	addwf	_j,f
  2360  033B  2B2F               	goto	l4224
  2361  033C                     l376:	
  2362                           
  2363                           ;mainMaster.c: 273:                 change = 1;
  2364  033C  01B4               	clrf	_change
  2365  033D  0AB4               	incf	_change,f
  2366  033E  2B40               	goto	l4228
  2367  033F                     l4226:	
  2368                           
  2369                           ;mainMaster.c: 276:             change =0;
  2370  033F  01B4               	clrf	_change
  2371  0340                     l4228:	
  2372                           
  2373                           ;mainMaster.c: 279:         if (state == 0){
  2374  0340  087A               	movf	_state,w
  2375  0341  1D03               	btfss	3,2
  2376  0342  2B8D               	goto	l4240
  2377                           
  2378                           ;mainMaster.c: 281:             Lcd_Set_Cursor(1,1);
  2379  0343  01F7               	clrf	Lcd_Set_Cursor@b
  2380  0344  0AF7               	incf	Lcd_Set_Cursor@b,f
  2381  0345  3001               	movlw	1
  2382  0346  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  2383                           
  2384                           ;mainMaster.c: 282:             Lcd_Write_String(time);
  2385  034B  3041               	movlw	(low (_time| 0))& (0+255)
  2386  034C  1283               	bcf	3,5	;RP0=0, select bank0
  2387  034D  1303               	bcf	3,6	;RP1=0, select bank0
  2388  034E  00C7               	movwf	Lcd_Write_String@a
  2389  034F  3000               	movlw	0
  2390  0350  00C8               	movwf	Lcd_Write_String@a+1
  2391  0351  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  2392                           
  2393                           ;mainMaster.c: 284:             Lcd_Set_Cursor(1,7);
  2394  0356  3007               	movlw	7
  2395  0357  1683               	bsf	3,5	;RP0=1, select bank1
  2396  0358  1303               	bcf	3,6	;RP1=0, select bank1
  2397  0359  00A0               	movwf	??_main^(0+128)
  2398  035A  0820               	movf	??_main^(0+128),w
  2399  035B  00F7               	movwf	Lcd_Set_Cursor@b
  2400  035C  3001               	movlw	1
  2401  035D  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  2402                           
  2403                           ;mainMaster.c: 285:             Lcd_Write_String(day2);
  2404  0362  1283               	bcf	3,5	;RP0=0, select bank0
  2405  0363  1303               	bcf	3,6	;RP1=0, select bank0
  2406  0364  0825               	movf	_day2,w
  2407  0365  00C7               	movwf	Lcd_Write_String@a
  2408  0366  0826               	movf	_day2+1,w
  2409  0367  00C8               	movwf	Lcd_Write_String@a+1
  2410  0368  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  2411                           
  2412                           ;mainMaster.c: 287:             Lcd_Set_Cursor(2,1);
  2413  036D  01F7               	clrf	Lcd_Set_Cursor@b
  2414  036E  0AF7               	incf	Lcd_Set_Cursor@b,f
  2415  036F  3002               	movlw	2
  2416  0370  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  2417                           
  2418                           ;mainMaster.c: 288:             Lcd_Write_String(temp);
  2419  0375  303B               	movlw	(low (_temp| 0))& (0+255)
  2420  0376  1283               	bcf	3,5	;RP0=0, select bank0
  2421  0377  1303               	bcf	3,6	;RP1=0, select bank0
  2422  0378  00C7               	movwf	Lcd_Write_String@a
  2423  0379  3000               	movlw	0
  2424  037A  00C8               	movwf	Lcd_Write_String@a+1
  2425  037B  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  2426                           
  2427                           ;mainMaster.c: 289:             Lcd_Write_Char(223);
  2428  0380  30DF               	movlw	223
  2429  0381  120A  158A  21CB  120A  118A  	fcall	_Lcd_Write_Char
  2430                           
  2431                           ;mainMaster.c: 290:             Lcd_Write_Char('C');
  2432  0386  3043               	movlw	67
  2433  0387  120A  158A  21CB  120A  118A  	fcall	_Lcd_Write_Char
  2434                           
  2435                           ;mainMaster.c: 292:         } else if (state == 1){
  2436  038C  28DB               	goto	l4046
  2437  038D                     l4240:	
  2438  038D  037A               	decf	_state,w
  2439  038E  1D03               	btfss	3,2
  2440  038F  2BCB               	goto	l4258
  2441                           
  2442                           ;mainMaster.c: 294:             Lcd_Set_Cursor(1,1);
  2443  0390  01F7               	clrf	Lcd_Set_Cursor@b
  2444  0391  0AF7               	incf	Lcd_Set_Cursor@b,f
  2445  0392  3001               	movlw	1
  2446  0393  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  2447                           
  2448                           ;mainMaster.c: 295:             if (door == 1){
  2449  0398  1283               	bcf	3,5	;RP0=0, select bank0
  2450  0399  1303               	bcf	3,6	;RP1=0, select bank0
  2451  039A  033A               	decf	_door,w
  2452  039B  1D03               	btfss	3,2
  2453  039C  2BA1               	goto	l4248
  2454                           
  2455                           ;mainMaster.c: 296:                 Lcd_Write_String("DOOR OPENED");
  2456  039D  307F               	movlw	low (STR_15| (0+32768))
  2457  039E  00C7               	movwf	Lcd_Write_String@a
  2458  039F  3088               	movlw	high (STR_15| (0+32768))
  2459  03A0  2BA4               	goto	L9
  2460  03A1                     l4248:	
  2461                           ;mainMaster.c: 297:             } else {
  2462                           
  2463                           
  2464                           ;mainMaster.c: 298:                 Lcd_Write_String("DOOR CLOSED");
  2465  03A1  3097               	movlw	low (STR_16| (0+32768))
  2466  03A2  00C7               	movwf	Lcd_Write_String@a
  2467  03A3  3088               	movlw	high (STR_16| (0+32768))
  2468  03A4                     L9:	
  2469  03A4  00C8               	movwf	Lcd_Write_String@a+1
  2470  03A5  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  2471                           
  2472                           ;mainMaster.c: 301:             Lcd_Set_Cursor(2,1);
  2473  03AA  01F7               	clrf	Lcd_Set_Cursor@b
  2474  03AB  0AF7               	incf	Lcd_Set_Cursor@b,f
  2475  03AC  3002               	movlw	2
  2476  03AD  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  2477                           
  2478                           ;mainMaster.c: 302:             if (trip == 1){
  2479  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  2480  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  2481  03B4  0339               	decf	_trip,w
  2482  03B5  1D03               	btfss	3,2
  2483  03B6  2BC1               	goto	l4256
  2484                           
  2485                           ;mainMaster.c: 303:                 Lcd_Write_String("TRIP ON ");
  2486  03B7  300C               	movlw	low (STR_17| (0+32768))
  2487  03B8  00C7               	movwf	Lcd_Write_String@a
  2488  03B9  3089               	movlw	high (STR_17| (0+32768))
  2489  03BA  00C8               	movwf	Lcd_Write_String@a+1
  2490  03BB  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  2491                           
  2492                           ;mainMaster.c: 304:             } else {
  2493  03C0  28DB               	goto	l4046
  2494  03C1                     l4256:	
  2495                           
  2496                           ;mainMaster.c: 305:                 Lcd_Write_String("TRIP OFF");
  2497  03C1  3015               	movlw	low (STR_18| (0+32768))
  2498  03C2  00C7               	movwf	Lcd_Write_String@a
  2499  03C3  3089               	movlw	high (STR_18| (0+32768))
  2500  03C4  00C8               	movwf	Lcd_Write_String@a+1
  2501  03C5  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  2502  03CA  28DB               	goto	l4046
  2503  03CB                     l4258:	
  2504  03CB  3002               	movlw	2
  2505  03CC  067A               	xorwf	_state,w
  2506  03CD  1D03               	btfss	3,2
  2507  03CE  2C0A               	goto	l4276
  2508                           
  2509                           ;mainMaster.c: 310:             Lcd_Set_Cursor(1,1);
  2510  03CF  01F7               	clrf	Lcd_Set_Cursor@b
  2511  03D0  0AF7               	incf	Lcd_Set_Cursor@b,f
  2512  03D1  3001               	movlw	1
  2513  03D2  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  2514                           
  2515                           ;mainMaster.c: 311:             if (PIR == 1){
  2516  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  2517  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  2518  03D9  0338               	decf	_PIR,w
  2519  03DA  1D03               	btfss	3,2
  2520  03DB  2BE0               	goto	l4266
  2521                           
  2522                           ;mainMaster.c: 312:                 Lcd_Write_String("PIR ON ");
  2523  03DC  301E               	movlw	low (STR_19| (0+32768))
  2524  03DD  00C7               	movwf	Lcd_Write_String@a
  2525  03DE  3089               	movlw	high (STR_19| (0+32768))
  2526  03DF  2BE3               	goto	L10
  2527  03E0                     l4266:	
  2528                           ;mainMaster.c: 313:             } else {
  2529                           
  2530                           
  2531                           ;mainMaster.c: 314:                 Lcd_Write_String("PIR OFF");
  2532  03E0  3026               	movlw	low (STR_20| (0+32768))
  2533  03E1  00C7               	movwf	Lcd_Write_String@a
  2534  03E2  3089               	movlw	high (STR_20| (0+32768))
  2535  03E3                     L10:	
  2536  03E3  00C8               	movwf	Lcd_Write_String@a+1
  2537  03E4  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  2538                           
  2539                           ;mainMaster.c: 317:             Lcd_Set_Cursor(2,1);
  2540  03E9  01F7               	clrf	Lcd_Set_Cursor@b
  2541  03EA  0AF7               	incf	Lcd_Set_Cursor@b,f
  2542  03EB  3002               	movlw	2
  2543  03EC  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  2544                           
  2545                           ;mainMaster.c: 318:             if (IR == 1){
  2546  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  2547  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  2548  03F3  0337               	decf	_IR,w
  2549  03F4  1D03               	btfss	3,2
  2550  03F5  2C00               	goto	l4274
  2551                           
  2552                           ;mainMaster.c: 319:                 Lcd_Write_String("IR ON ");
  2553  03F6  301F               	movlw	low ((STR_19+1)| (0+32768))
  2554  03F7  00C7               	movwf	Lcd_Write_String@a
  2555  03F8  3089               	movlw	high ((STR_19+1)| (0+32768))
  2556  03F9  00C8               	movwf	Lcd_Write_String@a+1
  2557  03FA  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  2558                           
  2559                           ;mainMaster.c: 320:             } else {
  2560  03FF  28DB               	goto	l4046
  2561  0400                     l4274:	
  2562                           
  2563                           ;mainMaster.c: 321:                 Lcd_Write_String("IR OFF");
  2564  0400  3027               	movlw	low ((STR_20+1)| (0+32768))
  2565  0401  00C7               	movwf	Lcd_Write_String@a
  2566  0402  3089               	movlw	high ((STR_20+1)| (0+32768))
  2567  0403  00C8               	movwf	Lcd_Write_String@a+1
  2568  0404  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  2569                           
  2570                           ;mainMaster.c: 323:         } else if (state == 3){
  2571                           
  2572                           ;mainMaster.c: 322:             }
  2573  0409  28DB               	goto	l4046
  2574  040A                     l4276:	
  2575  040A  3003               	movlw	3
  2576  040B  067A               	xorwf	_state,w
  2577  040C  1D03               	btfss	3,2
  2578  040D  2D60               	goto	l4328
  2579                           
  2580                           ;mainMaster.c: 324:             Lcd_Set_Cursor(1,1);
  2581  040E  01F7               	clrf	Lcd_Set_Cursor@b
  2582  040F  0AF7               	incf	Lcd_Set_Cursor@b,f
  2583  0410  3001               	movlw	1
  2584  0411  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  2585                           
  2586                           ;mainMaster.c: 325:             Lcd_Write_String("TIME: ");
  2587  0416  302E               	movlw	low (STR_23| (0+32768))
  2588  0417  1283               	bcf	3,5	;RP0=0, select bank0
  2589  0418  1303               	bcf	3,6	;RP1=0, select bank0
  2590  0419  00C7               	movwf	Lcd_Write_String@a
  2591  041A  3089               	movlw	high (STR_23| (0+32768))
  2592  041B  00C8               	movwf	Lcd_Write_String@a+1
  2593  041C  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  2594                           
  2595                           ;mainMaster.c: 326:             Lcd_Write_String(time);
  2596  0421  3041               	movlw	(low (_time| 0))& (0+255)
  2597  0422  1283               	bcf	3,5	;RP0=0, select bank0
  2598  0423  1303               	bcf	3,6	;RP1=0, select bank0
  2599  0424  00C7               	movwf	Lcd_Write_String@a
  2600  0425  3000               	movlw	0
  2601  0426  00C8               	movwf	Lcd_Write_String@a+1
  2602  0427  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  2603                           
  2604                           ;mainMaster.c: 328:             Lcd_Set_Cursor(2,1);
  2605  042C  01F7               	clrf	Lcd_Set_Cursor@b
  2606  042D  0AF7               	incf	Lcd_Set_Cursor@b,f
  2607  042E  3002               	movlw	2
  2608  042F  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  2609                           
  2610                           ;mainMaster.c: 329:             Lcd_Write_String("DAY: ");
  2611  0434  303C               	movlw	low (STR_24| (0+32768))
  2612  0435  1283               	bcf	3,5	;RP0=0, select bank0
  2613  0436  1303               	bcf	3,6	;RP1=0, select bank0
  2614  0437  00C7               	movwf	Lcd_Write_String@a
  2615  0438  3089               	movlw	high (STR_24| (0+32768))
  2616  0439  00C8               	movwf	Lcd_Write_String@a+1
  2617  043A  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  2618                           
  2619                           ;mainMaster.c: 330:             Lcd_Write_String(day2);
  2620  043F  1283               	bcf	3,5	;RP0=0, select bank0
  2621  0440  1303               	bcf	3,6	;RP1=0, select bank0
  2622  0441  0825               	movf	_day2,w
  2623  0442  00C7               	movwf	Lcd_Write_String@a
  2624  0443  0826               	movf	_day2+1,w
  2625  0444  00C8               	movwf	Lcd_Write_String@a+1
  2626  0445  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  2627                           
  2628                           ;mainMaster.c: 332:             newhour = (time[0] - '0') * 10 + (time[1] - '0');
  2629  044A  300A               	movlw	10
  2630  044B  1683               	bsf	3,5	;RP0=1, select bank1
  2631  044C  1303               	bcf	3,6	;RP1=0, select bank1
  2632  044D  00A0               	movwf	??_main^(0+128)
  2633  044E  0820               	movf	??_main^(0+128),w
  2634  044F  00F3               	movwf	___bmul@multiplicand
  2635  0450  1283               	bcf	3,5	;RP0=0, select bank0
  2636  0451  1303               	bcf	3,6	;RP1=0, select bank0
  2637  0452  0841               	movf	_time,w
  2638  0453  160A  118A  2654  120A  118A  	fcall	___bmul
  2639  0458  1283               	bcf	3,5	;RP0=0, select bank0
  2640  0459  1303               	bcf	3,6	;RP1=0, select bank0
  2641  045A  0742               	addwf	_time+1,w
  2642  045B  3EF0               	addlw	240
  2643  045C  1683               	bsf	3,5	;RP0=1, select bank1
  2644  045D  1303               	bcf	3,6	;RP1=0, select bank1
  2645  045E  00A1               	movwf	(??_main+1)^(0+128)
  2646  045F  0821               	movf	(??_main+1)^(0+128),w
  2647  0460  1283               	bcf	3,5	;RP0=0, select bank0
  2648  0461  1303               	bcf	3,6	;RP1=0, select bank0
  2649  0462  00A8               	movwf	_newhour
  2650                           
  2651                           ;mainMaster.c: 333:             newmin = (time[3] - '0') * 10 + (time[4] - '0');
  2652  0463  300A               	movlw	10
  2653  0464  1683               	bsf	3,5	;RP0=1, select bank1
  2654  0465  1303               	bcf	3,6	;RP1=0, select bank1
  2655  0466  00A0               	movwf	??_main^(0+128)
  2656  0467  0820               	movf	??_main^(0+128),w
  2657  0468  00F3               	movwf	___bmul@multiplicand
  2658  0469  1283               	bcf	3,5	;RP0=0, select bank0
  2659  046A  1303               	bcf	3,6	;RP1=0, select bank0
  2660  046B  0844               	movf	_time+3,w
  2661  046C  160A  118A  2654  120A  118A  	fcall	___bmul
  2662  0471  1283               	bcf	3,5	;RP0=0, select bank0
  2663  0472  1303               	bcf	3,6	;RP1=0, select bank0
  2664  0473  0745               	addwf	_time+4,w
  2665  0474  3EF0               	addlw	240
  2666  0475  1683               	bsf	3,5	;RP0=1, select bank1
  2667  0476  1303               	bcf	3,6	;RP1=0, select bank1
  2668  0477  00A1               	movwf	(??_main+1)^(0+128)
  2669  0478  0821               	movf	(??_main+1)^(0+128),w
  2670  0479  1283               	bcf	3,5	;RP0=0, select bank0
  2671  047A  1303               	bcf	3,6	;RP1=0, select bank0
  2672  047B  00A7               	movwf	_newmin
  2673                           
  2674                           ;mainMaster.c: 335:             if (PORTDbits.RD4 == 1){
  2675  047C  1E08               	btfss	8,4	;volatile
  2676  047D  2C8C               	goto	l393
  2677                           
  2678                           ;mainMaster.c: 336:                 newhour++;
  2679  047E  3001               	movlw	1
  2680  047F  1683               	bsf	3,5	;RP0=1, select bank1
  2681  0480  1303               	bcf	3,6	;RP1=0, select bank1
  2682  0481  00A0               	movwf	??_main^(0+128)
  2683  0482  0820               	movf	??_main^(0+128),w
  2684  0483  1283               	bcf	3,5	;RP0=0, select bank0
  2685  0484  1303               	bcf	3,6	;RP1=0, select bank0
  2686  0485  07A8               	addwf	_newhour,f
  2687                           
  2688                           ;mainMaster.c: 337:                 if (newhour > 23){
  2689  0486  3018               	movlw	24
  2690  0487  0228               	subwf	_newhour,w
  2691  0488  1C03               	skipc
  2692  0489  2CCA               	goto	l4296
  2693                           
  2694                           ;mainMaster.c: 338:                     newhour = 0;
  2695  048A  01A8               	clrf	_newhour
  2696                           
  2697                           ;mainMaster.c: 341:             } else if (PORTDbits.RD3 == 1){
  2698  048B  2CCA               	goto	l4296
  2699  048C                     l393:	
  2700  048C  1D88               	btfss	8,3	;volatile
  2701  048D  2C9C               	goto	l396
  2702                           
  2703                           ;mainMaster.c: 342:                 newhour--;
  2704  048E  3001               	movlw	1
  2705  048F  02A8               	subwf	_newhour,f
  2706                           
  2707                           ;mainMaster.c: 343:                 if (newhour == 255){
  2708  0490  0A28               	incf	_newhour,w
  2709  0491  1D03               	btfss	3,2
  2710  0492  2CCA               	goto	l4296
  2711                           
  2712                           ;mainMaster.c: 344:                     newhour = 23;
  2713  0493  3017               	movlw	23
  2714  0494  1683               	bsf	3,5	;RP0=1, select bank1
  2715  0495  1303               	bcf	3,6	;RP1=0, select bank1
  2716  0496  00A0               	movwf	??_main^(0+128)
  2717  0497  0820               	movf	??_main^(0+128),w
  2718  0498  1283               	bcf	3,5	;RP0=0, select bank0
  2719  0499  1303               	bcf	3,6	;RP1=0, select bank0
  2720  049A  00A8               	movwf	_newhour
  2721  049B  2CCA               	goto	l4296
  2722  049C                     l396:	
  2723  049C  1D08               	btfss	8,2	;volatile
  2724  049D  2CAC               	goto	l399
  2725                           
  2726                           ;mainMaster.c: 348:                 newmin++;
  2727  049E  3001               	movlw	1
  2728  049F  1683               	bsf	3,5	;RP0=1, select bank1
  2729  04A0  1303               	bcf	3,6	;RP1=0, select bank1
  2730  04A1  00A0               	movwf	??_main^(0+128)
  2731  04A2  0820               	movf	??_main^(0+128),w
  2732  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  2733  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  2734  04A5  07A7               	addwf	_newmin,f
  2735                           
  2736                           ;mainMaster.c: 349:                 if (newmin > 59){
  2737  04A6  303C               	movlw	60
  2738  04A7  0227               	subwf	_newmin,w
  2739  04A8  1C03               	skipc
  2740  04A9  2CCA               	goto	l4296
  2741                           
  2742                           ;mainMaster.c: 350:                     newmin = 0;
  2743  04AA  01A7               	clrf	_newmin
  2744  04AB  2CCA               	goto	l4296
  2745  04AC                     l399:	
  2746  04AC  1C88               	btfss	8,1	;volatile
  2747  04AD  2CBC               	goto	l402
  2748                           
  2749                           ;mainMaster.c: 354:                 newmin--;
  2750  04AE  3001               	movlw	1
  2751  04AF  02A7               	subwf	_newmin,f
  2752                           
  2753                           ;mainMaster.c: 355:                 if (newmin == 255){
  2754  04B0  0A27               	incf	_newmin,w
  2755  04B1  1D03               	btfss	3,2
  2756  04B2  2CCA               	goto	l4296
  2757                           
  2758                           ;mainMaster.c: 356:                     newmin = 59;
  2759  04B3  303B               	movlw	59
  2760  04B4  1683               	bsf	3,5	;RP0=1, select bank1
  2761  04B5  1303               	bcf	3,6	;RP1=0, select bank1
  2762  04B6  00A0               	movwf	??_main^(0+128)
  2763  04B7  0820               	movf	??_main^(0+128),w
  2764  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  2765  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  2766  04BA  00A7               	movwf	_newmin
  2767  04BB  2CCA               	goto	l4296
  2768  04BC                     l402:	
  2769  04BC  1C08               	btfss	8,0	;volatile
  2770  04BD  2CD9               	goto	l4322
  2771                           
  2772                           ;mainMaster.c: 360:                 day1++;
  2773  04BE  3001               	movlw	1
  2774  04BF  1683               	bsf	3,5	;RP0=1, select bank1
  2775  04C0  1303               	bcf	3,6	;RP1=0, select bank1
  2776  04C1  00A0               	movwf	??_main^(0+128)
  2777  04C2  0820               	movf	??_main^(0+128),w
  2778  04C3  07F9               	addwf	_day1,f
  2779                           
  2780                           ;mainMaster.c: 361:                 if (day1 > 7){
  2781  04C4  3008               	movlw	8
  2782  04C5  0279               	subwf	_day1,w
  2783  04C6  1C03               	skipc
  2784  04C7  2CCA               	goto	l4296
  2785                           
  2786                           ;mainMaster.c: 362:                     day1 = 1;
  2787  04C8  01F9               	clrf	_day1
  2788  04C9  0AF9               	incf	_day1,f
  2789  04CA                     l4296:	
  2790                           
  2791                           ;mainMaster.c: 340:                 _delay((unsigned long)((100)*(8000000/4000.0)));
  2792  04CA  3002               	movlw	2
  2793  04CB  1683               	bsf	3,5	;RP0=1, select bank1
  2794  04CC  1303               	bcf	3,6	;RP1=0, select bank1
  2795  04CD  00A2               	movwf	(??_main^(0+128)+2)
  2796  04CE  3004               	movlw	4
  2797  04CF  00A1               	movwf	(??_main^(0+128)+1)
  2798  04D0  30B9               	movlw	185
  2799  04D1  00A0               	movwf	??_main^(0+128)
  2800  04D2                     u5087:	
  2801  04D2  0BA0               	decfsz	??_main^(0+128),f
  2802  04D3  2CD2               	goto	u5087
  2803  04D4  0BA1               	decfsz	(??_main^(0+128)+1),f
  2804  04D5  2CD2               	goto	u5087
  2805  04D6  0BA2               	decfsz	(??_main^(0+128)+2),f
  2806  04D7  2CD2               	goto	u5087
  2807  04D8  2CD9               	nop2
  2808  04D9                     l4322:	
  2809                           
  2810                           ;mainMaster.c: 367:             hour = ((newhour / 10) << 4) + (newhour % 10);
  2811  04D9  300A               	movlw	10
  2812  04DA  00F3               	movwf	___awdiv@divisor
  2813  04DB  3000               	movlw	0
  2814  04DC  00F4               	movwf	___awdiv@divisor+1
  2815  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  2816  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  2817  04DF  0828               	movf	_newhour,w
  2818  04E0  1683               	bsf	3,5	;RP0=1, select bank1
  2819  04E1  1303               	bcf	3,6	;RP1=0, select bank1
  2820  04E2  00A0               	movwf	??_main^(0+128)
  2821  04E3  01A1               	clrf	(??_main^(0+128)+1)
  2822  04E4  0820               	movf	??_main^(0+128),w
  2823  04E5  00F5               	movwf	___awdiv@dividend
  2824  04E6  0821               	movf	(??_main+1)^(0+128),w
  2825  04E7  00F6               	movwf	___awdiv@dividend+1
  2826  04E8  120A  158A  23F5  120A  118A  	fcall	___awdiv
  2827  04ED  0873               	movf	?___awdiv,w
  2828  04EE  1683               	bsf	3,5	;RP0=1, select bank1
  2829  04EF  1303               	bcf	3,6	;RP1=0, select bank1
  2830  04F0  00A2               	movwf	(??_main+2)^(0+128)
  2831  04F1  3004               	movlw	4
  2832  04F2                     u4675:	
  2833  04F2  1003               	clrc
  2834  04F3  0DA2               	rlf	(??_main+2)^(0+128),f
  2835  04F4  3EFF               	addlw	-1
  2836  04F5  1D03               	skipz
  2837  04F6  2CF2               	goto	u4675
  2838  04F7  300A               	movlw	10
  2839  04F8  00F3               	movwf	___awmod@divisor
  2840  04F9  3000               	movlw	0
  2841  04FA  00F4               	movwf	___awmod@divisor+1
  2842  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  2843  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  2844  04FD  0828               	movf	_newhour,w
  2845  04FE  1683               	bsf	3,5	;RP0=1, select bank1
  2846  04FF  1303               	bcf	3,6	;RP1=0, select bank1
  2847  0500  00A3               	movwf	(??_main+3)^(0+128)
  2848  0501  01A4               	clrf	((??_main+3)^(0+128)+1)
  2849  0502  0823               	movf	(??_main+3)^(0+128),w
  2850  0503  00F5               	movwf	___awmod@dividend
  2851  0504  0824               	movf	(??_main+4)^(0+128),w
  2852  0505  00F6               	movwf	___awmod@dividend+1
  2853  0506  120A  158A  2303  120A  118A  	fcall	___awmod
  2854  050B  0873               	movf	?___awmod,w
  2855  050C  1683               	bsf	3,5	;RP0=1, select bank1
  2856  050D  1303               	bcf	3,6	;RP1=0, select bank1
  2857  050E  0722               	addwf	(??_main+2)^(0+128),w
  2858  050F  00A5               	movwf	(??_main+5)^(0+128)
  2859  0510  0825               	movf	(??_main+5)^(0+128),w
  2860  0511  1283               	bcf	3,5	;RP0=0, select bank0
  2861  0512  1303               	bcf	3,6	;RP1=0, select bank0
  2862  0513  00AB               	movwf	_hour
  2863                           
  2864                           ;mainMaster.c: 368:             min = ((newmin / 10) << 4) + (newmin % 10);
  2865  0514  300A               	movlw	10
  2866  0515  00F3               	movwf	___awdiv@divisor
  2867  0516  3000               	movlw	0
  2868  0517  00F4               	movwf	___awdiv@divisor+1
  2869  0518  0827               	movf	_newmin,w
  2870  0519  1683               	bsf	3,5	;RP0=1, select bank1
  2871  051A  1303               	bcf	3,6	;RP1=0, select bank1
  2872  051B  00A0               	movwf	??_main^(0+128)
  2873  051C  01A1               	clrf	(??_main^(0+128)+1)
  2874  051D  0820               	movf	??_main^(0+128),w
  2875  051E  00F5               	movwf	___awdiv@dividend
  2876  051F  0821               	movf	(??_main+1)^(0+128),w
  2877  0520  00F6               	movwf	___awdiv@dividend+1
  2878  0521  120A  158A  23F5  120A  118A  	fcall	___awdiv
  2879  0526  0873               	movf	?___awdiv,w
  2880  0527  1683               	bsf	3,5	;RP0=1, select bank1
  2881  0528  1303               	bcf	3,6	;RP1=0, select bank1
  2882  0529  00A2               	movwf	(??_main+2)^(0+128)
  2883  052A  3004               	movlw	4
  2884  052B                     u4685:	
  2885  052B  1003               	clrc
  2886  052C  0DA2               	rlf	(??_main+2)^(0+128),f
  2887  052D  3EFF               	addlw	-1
  2888  052E  1D03               	skipz
  2889  052F  2D2B               	goto	u4685
  2890  0530  300A               	movlw	10
  2891  0531  00F3               	movwf	___awmod@divisor
  2892  0532  3000               	movlw	0
  2893  0533  00F4               	movwf	___awmod@divisor+1
  2894  0534  1283               	bcf	3,5	;RP0=0, select bank0
  2895  0535  1303               	bcf	3,6	;RP1=0, select bank0
  2896  0536  0827               	movf	_newmin,w
  2897  0537  1683               	bsf	3,5	;RP0=1, select bank1
  2898  0538  1303               	bcf	3,6	;RP1=0, select bank1
  2899  0539  00A3               	movwf	(??_main+3)^(0+128)
  2900  053A  01A4               	clrf	((??_main+3)^(0+128)+1)
  2901  053B  0823               	movf	(??_main+3)^(0+128),w
  2902  053C  00F5               	movwf	___awmod@dividend
  2903  053D  0824               	movf	(??_main+4)^(0+128),w
  2904  053E  00F6               	movwf	___awmod@dividend+1
  2905  053F  120A  158A  2303  120A  118A  	fcall	___awmod
  2906  0544  0873               	movf	?___awmod,w
  2907  0545  1683               	bsf	3,5	;RP0=1, select bank1
  2908  0546  1303               	bcf	3,6	;RP1=0, select bank1
  2909  0547  0722               	addwf	(??_main+2)^(0+128),w
  2910  0548  00A5               	movwf	(??_main+5)^(0+128)
  2911  0549  0825               	movf	(??_main+5)^(0+128),w
  2912  054A  1283               	bcf	3,5	;RP0=0, select bank0
  2913  054B  1303               	bcf	3,6	;RP1=0, select bank0
  2914  054C  00AA               	movwf	_min
  2915                           
  2916                           ;mainMaster.c: 369:             write_RTC(hour, min, day1);
  2917  054D  082A               	movf	_min,w
  2918  054E  1683               	bsf	3,5	;RP0=1, select bank1
  2919  054F  1303               	bcf	3,6	;RP1=0, select bank1
  2920  0550  00A0               	movwf	??_main^(0+128)
  2921  0551  0820               	movf	??_main^(0+128),w
  2922  0552  00F5               	movwf	write_RTC@minutes
  2923  0553  0879               	movf	_day1,w
  2924  0554  00A1               	movwf	(??_main+1)^(0+128)
  2925  0555  0821               	movf	(??_main+1)^(0+128),w
  2926  0556  00F6               	movwf	write_RTC@day
  2927  0557  1283               	bcf	3,5	;RP0=0, select bank0
  2928  0558  1303               	bcf	3,6	;RP1=0, select bank0
  2929  0559  082B               	movf	_hour,w
  2930  055A  120A  158A  22BD  120A  118A  	fcall	_write_RTC
  2931                           
  2932                           ;mainMaster.c: 370:         } else if (state == 4){
  2933  055F  28DB               	goto	l4046
  2934  0560                     l4328:	
  2935  0560  3004               	movlw	4
  2936  0561  067A               	xorwf	_state,w
  2937  0562  1D03               	btfss	3,2
  2938  0563  2EC4               	goto	l4456
  2939                           
  2940                           ;mainMaster.c: 371:             Lcd_Set_Cursor(1,1);
  2941  0564  01F7               	clrf	Lcd_Set_Cursor@b
  2942  0565  0AF7               	incf	Lcd_Set_Cursor@b,f
  2943  0566  3001               	movlw	1
  2944  0567  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  2945                           
  2946                           ;mainMaster.c: 372:             Lcd_Write_String("PASSWORD:       ");
  2947  056C  303B               	movlw	low (STR_25| (0+32768))
  2948  056D  1283               	bcf	3,5	;RP0=0, select bank0
  2949  056E  1303               	bcf	3,6	;RP1=0, select bank0
  2950  056F  00C7               	movwf	Lcd_Write_String@a
  2951  0570  3088               	movlw	high (STR_25| (0+32768))
  2952  0571  00C8               	movwf	Lcd_Write_String@a+1
  2953  0572  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  2954                           
  2955                           ;mainMaster.c: 373:             Lcd_Set_Cursor(2,k + 1);
  2956  0577  0878               	movf	_k,w
  2957  0578  3E01               	addlw	1
  2958  0579  1683               	bsf	3,5	;RP0=1, select bank1
  2959  057A  1303               	bcf	3,6	;RP1=0, select bank1
  2960  057B  00A0               	movwf	??_main^(0+128)
  2961  057C  0820               	movf	??_main^(0+128),w
  2962  057D  00F7               	movwf	Lcd_Set_Cursor@b
  2963  057E  3002               	movlw	2
  2964  057F  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  2965                           
  2966                           ;mainMaster.c: 375:             if (k < 5) {
  2967  0584  3005               	movlw	5
  2968  0585  0278               	subwf	_k,w
  2969  0586  1803               	skipnc
  2970  0587  2E3D               	goto	l4404
  2971                           
  2972                           ;mainMaster.c: 376:                 if (PORTDbits.RD0 == 1){
  2973  0588  1283               	bcf	3,5	;RP0=0, select bank0
  2974  0589  1303               	bcf	3,6	;RP1=0, select bank0
  2975  058A  1C08               	btfss	8,0	;volatile
  2976  058B  2DA5               	goto	l410
  2977                           
  2978                           ;mainMaster.c: 377:                     if (change4 == 0){
  2979  058C  0830               	movf	_change4,w
  2980  058D  1D03               	btfss	3,2
  2981  058E  2E3D               	goto	l4404
  2982                           
  2983                           ;mainMaster.c: 378:                         passwordu[k] = 0;
  2984  058F  0878               	movf	_k,w
  2985  0590  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  2986  0591  0084               	movwf	4
  2987  0592  1383               	bcf	3,7	;select IRP bank0
  2988  0593  0180               	clrf	0
  2989                           
  2990                           ;mainMaster.c: 379:                         k++;
  2991  0594  3001               	movlw	1
  2992  0595  1683               	bsf	3,5	;RP0=1, select bank1
  2993  0596  1303               	bcf	3,6	;RP1=0, select bank1
  2994  0597  00A0               	movwf	??_main^(0+128)
  2995  0598  0820               	movf	??_main^(0+128),w
  2996  0599  07F8               	addwf	_k,f
  2997                           
  2998                           ;mainMaster.c: 380:                         change4 = 1;
  2999  059A  1283               	bcf	3,5	;RP0=0, select bank0
  3000  059B  1303               	bcf	3,6	;RP1=0, select bank0
  3001  059C  01B0               	clrf	_change4
  3002  059D  0AB0               	incf	_change4,f
  3003                           
  3004                           ;mainMaster.c: 381:                         Lcd_Write_Char('*');
  3005  059E  302A               	movlw	42
  3006  059F  120A  158A  21CB  120A  118A  	fcall	_Lcd_Write_Char
  3007  05A4  2E3D               	goto	l4404
  3008  05A5                     l410:	
  3009  05A5  1C88               	btfss	8,1	;volatile
  3010  05A6  2DC1               	goto	l413
  3011                           
  3012                           ;mainMaster.c: 384:                     if (change4 == 0){
  3013  05A7  0830               	movf	_change4,w
  3014  05A8  1D03               	btfss	3,2
  3015  05A9  2E3D               	goto	l4404
  3016                           
  3017                           ;mainMaster.c: 385:                         passwordu[k] = 1;
  3018  05AA  0878               	movf	_k,w
  3019  05AB  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3020  05AC  0084               	movwf	4
  3021  05AD  1383               	bcf	3,7	;select IRP bank0
  3022  05AE  0180               	clrf	0
  3023  05AF  0A80               	incf	0,f
  3024                           
  3025                           ;mainMaster.c: 386:                         k++;
  3026  05B0  3001               	movlw	1
  3027  05B1  1683               	bsf	3,5	;RP0=1, select bank1
  3028  05B2  1303               	bcf	3,6	;RP1=0, select bank1
  3029  05B3  00A0               	movwf	??_main^(0+128)
  3030  05B4  0820               	movf	??_main^(0+128),w
  3031  05B5  07F8               	addwf	_k,f
  3032                           
  3033                           ;mainMaster.c: 387:                         change4 = 1;
  3034  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  3035  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  3036  05B8  01B0               	clrf	_change4
  3037  05B9  0AB0               	incf	_change4,f
  3038                           
  3039                           ;mainMaster.c: 388:                         Lcd_Write_Char('*');
  3040  05BA  302A               	movlw	42
  3041  05BB  120A  158A  21CB  120A  118A  	fcall	_Lcd_Write_Char
  3042  05C0  2E3D               	goto	l4404
  3043  05C1                     l413:	
  3044  05C1  1D08               	btfss	8,2	;volatile
  3045  05C2  2DDF               	goto	l416
  3046                           
  3047                           ;mainMaster.c: 391:                     if (change4 == 0){
  3048  05C3  0830               	movf	_change4,w
  3049  05C4  1D03               	btfss	3,2
  3050  05C5  2E3D               	goto	l4404
  3051                           
  3052                           ;mainMaster.c: 392:                         passwordu[k] = 2;
  3053  05C6  3002               	movlw	2
  3054  05C7  1683               	bsf	3,5	;RP0=1, select bank1
  3055  05C8  1303               	bcf	3,6	;RP1=0, select bank1
  3056  05C9  00A0               	movwf	??_main^(0+128)
  3057  05CA  0878               	movf	_k,w
  3058  05CB  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3059  05CC  0084               	movwf	4
  3060  05CD  0820               	movf	??_main^(0+128),w
  3061  05CE  1383               	bcf	3,7	;select IRP bank0
  3062  05CF  0080               	movwf	0
  3063                           
  3064                           ;mainMaster.c: 393:                         k++;
  3065  05D0  3001               	movlw	1
  3066  05D1  00A0               	movwf	??_main^(0+128)
  3067  05D2  0820               	movf	??_main^(0+128),w
  3068  05D3  07F8               	addwf	_k,f
  3069                           
  3070                           ;mainMaster.c: 394:                         change4 = 1;
  3071  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  3072  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  3073  05D6  01B0               	clrf	_change4
  3074  05D7  0AB0               	incf	_change4,f
  3075                           
  3076                           ;mainMaster.c: 395:                         Lcd_Write_Char('*');
  3077  05D8  302A               	movlw	42
  3078  05D9  120A  158A  21CB  120A  118A  	fcall	_Lcd_Write_Char
  3079  05DE  2E3D               	goto	l4404
  3080  05DF                     l416:	
  3081  05DF  1D88               	btfss	8,3	;volatile
  3082  05E0  2DFD               	goto	l419
  3083                           
  3084                           ;mainMaster.c: 398:                     if (change4 == 0){
  3085  05E1  0830               	movf	_change4,w
  3086  05E2  1D03               	btfss	3,2
  3087  05E3  2E3D               	goto	l4404
  3088                           
  3089                           ;mainMaster.c: 399:                         passwordu[k] = 3;
  3090  05E4  3003               	movlw	3
  3091  05E5  1683               	bsf	3,5	;RP0=1, select bank1
  3092  05E6  1303               	bcf	3,6	;RP1=0, select bank1
  3093  05E7  00A0               	movwf	??_main^(0+128)
  3094  05E8  0878               	movf	_k,w
  3095  05E9  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3096  05EA  0084               	movwf	4
  3097  05EB  0820               	movf	??_main^(0+128),w
  3098  05EC  1383               	bcf	3,7	;select IRP bank0
  3099  05ED  0080               	movwf	0
  3100                           
  3101                           ;mainMaster.c: 400:                         k++;
  3102  05EE  3001               	movlw	1
  3103  05EF  00A0               	movwf	??_main^(0+128)
  3104  05F0  0820               	movf	??_main^(0+128),w
  3105  05F1  07F8               	addwf	_k,f
  3106                           
  3107                           ;mainMaster.c: 401:                         change4 = 1;
  3108  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  3109  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  3110  05F4  01B0               	clrf	_change4
  3111  05F5  0AB0               	incf	_change4,f
  3112                           
  3113                           ;mainMaster.c: 402:                         Lcd_Write_Char('*');
  3114  05F6  302A               	movlw	42
  3115  05F7  120A  158A  21CB  120A  118A  	fcall	_Lcd_Write_Char
  3116  05FC  2E3D               	goto	l4404
  3117  05FD                     l419:	
  3118  05FD  1E08               	btfss	8,4	;volatile
  3119  05FE  2E1B               	goto	l422
  3120                           
  3121                           ;mainMaster.c: 405:                     if (change4 == 0){
  3122  05FF  0830               	movf	_change4,w
  3123  0600  1D03               	btfss	3,2
  3124  0601  2E3D               	goto	l4404
  3125                           
  3126                           ;mainMaster.c: 406:                         passwordu[k] = 4;
  3127  0602  3004               	movlw	4
  3128  0603  1683               	bsf	3,5	;RP0=1, select bank1
  3129  0604  1303               	bcf	3,6	;RP1=0, select bank1
  3130  0605  00A0               	movwf	??_main^(0+128)
  3131  0606  0878               	movf	_k,w
  3132  0607  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3133  0608  0084               	movwf	4
  3134  0609  0820               	movf	??_main^(0+128),w
  3135  060A  1383               	bcf	3,7	;select IRP bank0
  3136  060B  0080               	movwf	0
  3137                           
  3138                           ;mainMaster.c: 407:                         k++;
  3139  060C  3001               	movlw	1
  3140  060D  00A0               	movwf	??_main^(0+128)
  3141  060E  0820               	movf	??_main^(0+128),w
  3142  060F  07F8               	addwf	_k,f
  3143                           
  3144                           ;mainMaster.c: 408:                         change4 = 1;
  3145  0610  1283               	bcf	3,5	;RP0=0, select bank0
  3146  0611  1303               	bcf	3,6	;RP1=0, select bank0
  3147  0612  01B0               	clrf	_change4
  3148  0613  0AB0               	incf	_change4,f
  3149                           
  3150                           ;mainMaster.c: 409:                         Lcd_Write_Char('*');
  3151  0614  302A               	movlw	42
  3152  0615  120A  158A  21CB  120A  118A  	fcall	_Lcd_Write_Char
  3153  061A  2E3D               	goto	l4404
  3154  061B                     l422:	
  3155  061B  1E88               	btfss	8,5	;volatile
  3156  061C  2E39               	goto	l4400
  3157                           
  3158                           ;mainMaster.c: 412:                     if (change4 == 0){
  3159  061D  0830               	movf	_change4,w
  3160  061E  1D03               	btfss	3,2
  3161  061F  2E3D               	goto	l4404
  3162                           
  3163                           ;mainMaster.c: 413:                         passwordu[k] = 5;
  3164  0620  3005               	movlw	5
  3165  0621  1683               	bsf	3,5	;RP0=1, select bank1
  3166  0622  1303               	bcf	3,6	;RP1=0, select bank1
  3167  0623  00A0               	movwf	??_main^(0+128)
  3168  0624  0878               	movf	_k,w
  3169  0625  3E20               	addlw	(low (_passwordu| 0))& (0+255)
  3170  0626  0084               	movwf	4
  3171  0627  0820               	movf	??_main^(0+128),w
  3172  0628  1383               	bcf	3,7	;select IRP bank0
  3173  0629  0080               	movwf	0
  3174                           
  3175                           ;mainMaster.c: 414:                         k++;
  3176  062A  3001               	movlw	1
  3177  062B  00A0               	movwf	??_main^(0+128)
  3178  062C  0820               	movf	??_main^(0+128),w
  3179  062D  07F8               	addwf	_k,f
  3180                           
  3181                           ;mainMaster.c: 415:                         change4 = 1;
  3182  062E  1283               	bcf	3,5	;RP0=0, select bank0
  3183  062F  1303               	bcf	3,6	;RP1=0, select bank0
  3184  0630  01B0               	clrf	_change4
  3185  0631  0AB0               	incf	_change4,f
  3186                           
  3187                           ;mainMaster.c: 416:                         Lcd_Write_Char('*');
  3188  0632  302A               	movlw	42
  3189  0633  120A  158A  21CB  120A  118A  	fcall	_Lcd_Write_Char
  3190  0638  2E3D               	goto	l4404
  3191  0639                     l4400:	
  3192  0639  0808               	movf	8,w	;volatile
  3193  063A  1D03               	btfss	3,2
  3194  063B  2E3D               	goto	l4404
  3195                           
  3196                           ;mainMaster.c: 419:                         change4 = 0;
  3197  063C  01B0               	clrf	_change4
  3198  063D                     l4404:	
  3199                           
  3200                           ;mainMaster.c: 423:             if (PORTEbits.RE0 == 1){
  3201  063D  1283               	bcf	3,5	;RP0=0, select bank0
  3202  063E  1303               	bcf	3,6	;RP1=0, select bank0
  3203  063F  1C09               	btfss	9,0	;volatile
  3204  0640  2EAD               	goto	l429
  3205                           
  3206                           ;mainMaster.c: 424:                     if (passwordu[0] == password[0] & passwordu[1] =
      +                          = password[1] & passwordu[2] == password[2] & passwordu[3] == password[3] & passwordu[4]
      +                           == password[4]){
  3207  0641  0820               	movf	_passwordu,w
  3208  0642  0668               	xorwf	_password,w
  3209  0643  1D03               	skipz
  3210  0644  2E99               	goto	l4440
  3211  0645  0821               	movf	_passwordu+1,w
  3212  0646  0669               	xorwf	_password+1,w
  3213  0647  1D03               	skipz
  3214  0648  2E99               	goto	l4440
  3215  0649  0822               	movf	_passwordu+2,w
  3216  064A  066A               	xorwf	_password+2,w
  3217  064B  1D03               	skipz
  3218  064C  2E99               	goto	l4440
  3219  064D  0823               	movf	_passwordu+3,w
  3220  064E  066B               	xorwf	_password+3,w
  3221  064F  1D03               	skipz
  3222  0650  2E99               	goto	l4440
  3223  0651  0824               	movf	_passwordu+4,w
  3224  0652  066C               	xorwf	_password+4,w
  3225  0653  1D03               	skipz
  3226  0654  2E99               	goto	l4440
  3227                           
  3228                           ;mainMaster.c: 425:                         if (seguridad == 0){
  3229  0655  0829               	movf	_seguridad,w
  3230  0656  1D03               	btfss	3,2
  3231  0657  2E83               	goto	l4430
  3232                           
  3233                           ;mainMaster.c: 426:                             seguridad = 1;
  3234  0658  01A9               	clrf	_seguridad
  3235  0659  0AA9               	incf	_seguridad,f
  3236                           
  3237                           ;mainMaster.c: 427:                             k = 0;
  3238  065A  01F8               	clrf	_k
  3239                           
  3240                           ;mainMaster.c: 428:                             Lcd_Clear();
  3241  065B  160A  118A  263E  120A  118A  	fcall	_Lcd_Clear
  3242                           
  3243                           ;mainMaster.c: 429:                             Lcd_Set_Cursor(1,1);
  3244  0660  01F7               	clrf	Lcd_Set_Cursor@b
  3245  0661  0AF7               	incf	Lcd_Set_Cursor@b,f
  3246  0662  3001               	movlw	1
  3247  0663  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  3248                           
  3249                           ;mainMaster.c: 430:                             Lcd_Write_String("Security ON");
  3250  0668  30AF               	movlw	low (STR_26| (0+32768))
  3251  0669  1283               	bcf	3,5	;RP0=0, select bank0
  3252  066A  1303               	bcf	3,6	;RP1=0, select bank0
  3253  066B  00C7               	movwf	Lcd_Write_String@a
  3254  066C  3088               	movlw	high (STR_26| (0+32768))
  3255  066D                     L11:	
  3256  066D  00C8               	movwf	Lcd_Write_String@a+1
  3257  066E  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  3258                           
  3259                           ;mainMaster.c: 431:                             _delay((unsigned long)((2000)*(8000000/4
      +                          000.0)));
  3260  0673  3015               	movlw	21
  3261  0674  1683               	bsf	3,5	;RP0=1, select bank1
  3262  0675  1303               	bcf	3,6	;RP1=0, select bank1
  3263  0676  00A2               	movwf	(??_main^(0+128)+2)
  3264  0677  304B               	movlw	75
  3265  0678  00A1               	movwf	(??_main^(0+128)+1)
  3266  0679  30BD               	movlw	189
  3267  067A  00A0               	movwf	??_main^(0+128)
  3268  067B                     u5097:	
  3269  067B  0BA0               	decfsz	??_main^(0+128),f
  3270  067C  2E7B               	goto	u5097
  3271  067D  0BA1               	decfsz	(??_main^(0+128)+1),f
  3272  067E  2E7B               	goto	u5097
  3273  067F  0BA2               	decfsz	(??_main^(0+128)+2),f
  3274  0680  2E7B               	goto	u5097
  3275  0681  2E82               	nop2
  3276                           
  3277                           ;mainMaster.c: 432:                         } else {
  3278  0682  28DB               	goto	l4046
  3279  0683                     l4430:	
  3280                           
  3281                           ;mainMaster.c: 433:                             seguridad = 0;
  3282  0683  01A9               	clrf	_seguridad
  3283                           
  3284                           ;mainMaster.c: 434:                             k = 0;
  3285  0684  01F8               	clrf	_k
  3286                           
  3287                           ;mainMaster.c: 435:                             alarm = 0;
  3288  0685  01AF               	clrf	_alarm
  3289                           
  3290                           ;mainMaster.c: 436:                             Lcd_Clear();
  3291  0686  160A  118A  263E  120A  118A  	fcall	_Lcd_Clear
  3292                           
  3293                           ;mainMaster.c: 437:                             Lcd_Set_Cursor(1,1);
  3294  068B  01F7               	clrf	Lcd_Set_Cursor@b
  3295  068C  0AF7               	incf	Lcd_Set_Cursor@b,f
  3296  068D  3001               	movlw	1
  3297  068E  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  3298                           
  3299                           ;mainMaster.c: 438:                             Lcd_Write_String("Security OFF");
  3300  0693  3066               	movlw	low (STR_27| (0+32768))
  3301  0694  1283               	bcf	3,5	;RP0=0, select bank0
  3302  0695  1303               	bcf	3,6	;RP1=0, select bank0
  3303  0696  00C7               	movwf	Lcd_Write_String@a
  3304  0697  3088               	movlw	high (STR_27| (0+32768))
  3305  0698  2E6D               	goto	L11
  3306  0699                     l4440:	
  3307                           
  3308                           ;mainMaster.c: 442:                         Lcd_Clear();
  3309  0699  160A  118A  263E  120A  118A  	fcall	_Lcd_Clear
  3310                           
  3311                           ;mainMaster.c: 443:                         k = 0;
  3312  069E  01F8               	clrf	_k
  3313                           
  3314                           ;mainMaster.c: 444:                         Lcd_Set_Cursor(1,1);
  3315  069F  01F7               	clrf	Lcd_Set_Cursor@b
  3316  06A0  0AF7               	incf	Lcd_Set_Cursor@b,f
  3317  06A1  3001               	movlw	1
  3318  06A2  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  3319                           
  3320                           ;mainMaster.c: 445:                         Lcd_Write_String("WRONG");
  3321  06A7  3054               	movlw	low (STR_28| (0+32768))
  3322  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  3323  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  3324  06AA  00C7               	movwf	Lcd_Write_String@a
  3325  06AB  3089               	movlw	high (STR_28| (0+32768))
  3326  06AC  2E6D               	goto	L11
  3327  06AD                     l429:	
  3328  06AD  1C89               	btfss	9,1	;volatile
  3329  06AE  28DB               	goto	l4046
  3330                           
  3331                           ;mainMaster.c: 449:                 Lcd_Set_Cursor(2,1);
  3332  06AF  01F7               	clrf	Lcd_Set_Cursor@b
  3333  06B0  0AF7               	incf	Lcd_Set_Cursor@b,f
  3334  06B1  3002               	movlw	2
  3335  06B2  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  3336                           
  3337                           ;mainMaster.c: 450:                 Lcd_Write_String("            ");
  3338  06B7  304C               	movlw	low (STR_29| (0+32768))
  3339  06B8  1283               	bcf	3,5	;RP0=0, select bank0
  3340  06B9  1303               	bcf	3,6	;RP1=0, select bank0
  3341  06BA  00C7               	movwf	Lcd_Write_String@a
  3342  06BB  3088               	movlw	high (STR_29| (0+32768))
  3343  06BC  00C8               	movwf	Lcd_Write_String@a+1
  3344  06BD  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  3345                           
  3346                           ;mainMaster.c: 451:                 k = 0;
  3347  06C2  01F8               	clrf	_k
  3348  06C3  28DB               	goto	l4046
  3349  06C4                     l4456:	
  3350  06C4  3005               	movlw	5
  3351  06C5  067A               	xorwf	_state,w
  3352  06C6  1D03               	btfss	3,2
  3353  06C7  28DB               	goto	l4046
  3354                           
  3355                           ;mainMaster.c: 454:             Lcd_Set_Cursor(1,1);
  3356  06C8  01F7               	clrf	Lcd_Set_Cursor@b
  3357  06C9  0AF7               	incf	Lcd_Set_Cursor@b,f
  3358  06CA  3001               	movlw	1
  3359  06CB  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  3360                           
  3361                           ;mainMaster.c: 455:             if (bank == 3){
  3362  06D0  3003               	movlw	3
  3363  06D1  1283               	bcf	3,5	;RP0=0, select bank0
  3364  06D2  1303               	bcf	3,6	;RP1=0, select bank0
  3365  06D3  062E               	xorwf	_bank,w
  3366  06D4  1D03               	btfss	3,2
  3367  06D5  2EDA               	goto	l4464
  3368                           
  3369                           ;mainMaster.c: 456:                 Lcd_Write_String("BANK OPENED");
  3370  06D6  3073               	movlw	low (STR_30| (0+32768))
  3371  06D7  00C7               	movwf	Lcd_Write_String@a
  3372  06D8  3088               	movlw	high (STR_30| (0+32768))
  3373  06D9  2EDD               	goto	L12
  3374  06DA                     l4464:	
  3375                           ;mainMaster.c: 457:             } else {
  3376                           
  3377                           
  3378                           ;mainMaster.c: 458:                 Lcd_Write_String("BANK CLOSED");
  3379  06DA  308B               	movlw	low (STR_31| (0+32768))
  3380  06DB  00C7               	movwf	Lcd_Write_String@a
  3381  06DC  3088               	movlw	high (STR_31| (0+32768))
  3382  06DD                     L12:	
  3383  06DD  00C8               	movwf	Lcd_Write_String@a+1
  3384  06DE  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  3385                           
  3386                           ;mainMaster.c: 461:             Lcd_Set_Cursor(2,1);
  3387  06E3  01F7               	clrf	Lcd_Set_Cursor@b
  3388  06E4  0AF7               	incf	Lcd_Set_Cursor@b,f
  3389  06E5  3002               	movlw	2
  3390  06E6  120A  158A  2350  120A  118A  	fcall	_Lcd_Set_Cursor
  3391                           
  3392                           ;mainMaster.c: 462:             if (seguridad == 1){
  3393  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  3394  06EC  1303               	bcf	3,6	;RP1=0, select bank0
  3395  06ED  0329               	decf	_seguridad,w
  3396  06EE  1D03               	btfss	3,2
  3397  06EF  2EFA               	goto	l4472
  3398                           
  3399                           ;mainMaster.c: 463:                 Lcd_Write_String("SECURITY ON");
  3400  06F0  30A3               	movlw	low (STR_32| (0+32768))
  3401  06F1  00C7               	movwf	Lcd_Write_String@a
  3402  06F2  3088               	movlw	high (STR_32| (0+32768))
  3403  06F3  00C8               	movwf	Lcd_Write_String@a+1
  3404  06F4  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  3405                           
  3406                           ;mainMaster.c: 464:             } else {
  3407  06F9  28DB               	goto	l4046
  3408  06FA                     l4472:	
  3409                           
  3410                           ;mainMaster.c: 465:                 Lcd_Write_String("SECURITY OFF");
  3411  06FA  3059               	movlw	low (STR_33| (0+32768))
  3412  06FB  00C7               	movwf	Lcd_Write_String@a
  3413  06FC  3088               	movlw	high (STR_33| (0+32768))
  3414  06FD  00C8               	movwf	Lcd_Write_String@a+1
  3415  06FE  120A  158A  227C  120A  118A  	fcall	_Lcd_Write_String
  3416  0703  28DB               	goto	l4046
  3417  0704                     __end_of_main:	
  3418                           
  3419                           	psect	text1
  3420  0ABD                     __ptext1:	
  3421 ;; *************** function _write_RTC *****************
  3422 ;; Defined at:
  3423 ;;		line 507 in file "mainMaster.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;  hour            1    wreg     unsigned char 
  3426 ;;  minutes         1    5[COMMON] unsigned char 
  3427 ;;  day             1    6[COMMON] unsigned char 
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;  hour            1    7[COMMON] unsigned char 
  3430 ;; Return value:  Size  Location     Type
  3431 ;;                  1    wreg      void 
  3432 ;; Registers used:
  3433 ;;		wreg, status,2, status,0, pclath, cstack
  3434 ;; Tracked objects:
  3435 ;;		On entry : 0/0
  3436 ;;		On exit  : 0/0
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3439 ;;      Params:         2       0       0       0       0
  3440 ;;      Locals:         1       0       0       0       0
  3441 ;;      Temps:          0       2       0       0       0
  3442 ;;      Totals:         3       2       0       0       0
  3443 ;;Total ram usage:        5 bytes
  3444 ;; Hardware stack levels used:    1
  3445 ;; Hardware stack levels required when called:    3
  3446 ;; This function calls:
  3447 ;;		_I2C_Master_Start
  3448 ;;		_I2C_Master_Stop
  3449 ;;		_I2C_Master_Write
  3450 ;; This function is called by:
  3451 ;;		_main
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           
  3456                           ;psect for function _write_RTC
  3457  0ABD                     _write_RTC:	
  3458                           
  3459                           ;incstack = 0
  3460                           ; Regs used in _write_RTC: [wreg+status,2+status,0+pclath+cstack]
  3461                           ;write_RTC@hour stored from wreg
  3462  0ABD  00F7               	movwf	write_RTC@hour
  3463                           
  3464                           ;mainMaster.c: 509:     I2C_Master_Start();
  3465  0ABE  160A  118A  2606  120A  158A  	fcall	_I2C_Master_Start
  3466                           
  3467                           ;mainMaster.c: 510:     I2C_Master_Write(0xD0);
  3468  0AC3  30D0               	movlw	208
  3469  0AC4  00F3               	movwf	I2C_Master_Write@d
  3470  0AC5  3000               	movlw	0
  3471  0AC6  00F4               	movwf	I2C_Master_Write@d+1
  3472  0AC7  160A  118A  261B  120A  158A  	fcall	_I2C_Master_Write
  3473                           
  3474                           ;mainMaster.c: 511:     I2C_Master_Write(0x01);
  3475  0ACC  3001               	movlw	1
  3476  0ACD  00F3               	movwf	I2C_Master_Write@d
  3477  0ACE  3000               	movlw	0
  3478  0ACF  00F4               	movwf	I2C_Master_Write@d+1
  3479  0AD0  160A  118A  261B  120A  158A  	fcall	_I2C_Master_Write
  3480                           
  3481                           ;mainMaster.c: 512:     I2C_Master_Write(minutes);
  3482  0AD5  0875               	movf	write_RTC@minutes,w
  3483  0AD6  1283               	bcf	3,5	;RP0=0, select bank0
  3484  0AD7  1303               	bcf	3,6	;RP1=0, select bank0
  3485  0AD8  00C7               	movwf	??_write_RTC
  3486  0AD9  01C8               	clrf	??_write_RTC+1
  3487  0ADA  0847               	movf	??_write_RTC,w
  3488  0ADB  00F3               	movwf	I2C_Master_Write@d
  3489  0ADC  0848               	movf	??_write_RTC+1,w
  3490  0ADD  00F4               	movwf	I2C_Master_Write@d+1
  3491  0ADE  160A  118A  261B  120A  158A  	fcall	_I2C_Master_Write
  3492                           
  3493                           ;mainMaster.c: 513:     I2C_Master_Write(hour);
  3494  0AE3  0877               	movf	write_RTC@hour,w
  3495  0AE4  1283               	bcf	3,5	;RP0=0, select bank0
  3496  0AE5  1303               	bcf	3,6	;RP1=0, select bank0
  3497  0AE6  00C7               	movwf	??_write_RTC
  3498  0AE7  01C8               	clrf	??_write_RTC+1
  3499  0AE8  0847               	movf	??_write_RTC,w
  3500  0AE9  00F3               	movwf	I2C_Master_Write@d
  3501  0AEA  0848               	movf	??_write_RTC+1,w
  3502  0AEB  00F4               	movwf	I2C_Master_Write@d+1
  3503  0AEC  160A  118A  261B  120A  158A  	fcall	_I2C_Master_Write
  3504                           
  3505                           ;mainMaster.c: 514:     I2C_Master_Write(day);
  3506  0AF1  0876               	movf	write_RTC@day,w
  3507  0AF2  1283               	bcf	3,5	;RP0=0, select bank0
  3508  0AF3  1303               	bcf	3,6	;RP1=0, select bank0
  3509  0AF4  00C7               	movwf	??_write_RTC
  3510  0AF5  01C8               	clrf	??_write_RTC+1
  3511  0AF6  0847               	movf	??_write_RTC,w
  3512  0AF7  00F3               	movwf	I2C_Master_Write@d
  3513  0AF8  0848               	movf	??_write_RTC+1,w
  3514  0AF9  00F4               	movwf	I2C_Master_Write@d+1
  3515  0AFA  160A  118A  261B  120A  158A  	fcall	_I2C_Master_Write
  3516                           
  3517                           ;mainMaster.c: 515:     I2C_Master_Stop();
  3518  0AFF  160A  118A  260D   	fcall	_I2C_Master_Stop
  3519  0B02  0008               	return
  3520  0B03                     __end_of_write_RTC:	
  3521                           
  3522                           	psect	text2
  3523  0963                     __ptext2:	
  3524 ;; *************** function _strcmp *****************
  3525 ;; Defined at:
  3526 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcmp.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;  s1              1    wreg     PTR const unsigned char 
  3529 ;;		 -> time(6), temp(6), 
  3530 ;;  s2              2    3[COMMON] PTR const unsigned char 
  3531 ;;		 -> STR_14(6), STR_13(6), STR_12(6), 
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;  s1              1    1[BANK0 ] PTR const unsigned char 
  3534 ;;		 -> time(6), temp(6), 
  3535 ;;  r               1    0[BANK0 ] char 
  3536 ;; Return value:  Size  Location     Type
  3537 ;;                  2    3[COMMON] int 
  3538 ;; Registers used:
  3539 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3540 ;; Tracked objects:
  3541 ;;		On entry : 0/0
  3542 ;;		On exit  : 0/0
  3543 ;;		Unchanged: 0/0
  3544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3545 ;;      Params:         2       0       0       0       0
  3546 ;;      Locals:         0       2       0       0       0
  3547 ;;      Temps:          3       0       0       0       0
  3548 ;;      Totals:         5       2       0       0       0
  3549 ;;Total ram usage:        7 bytes
  3550 ;; Hardware stack levels used:    2
  3551 ;; Hardware stack levels required when called:    1
  3552 ;; This function calls:
  3553 ;;		Nothing
  3554 ;; This function is called by:
  3555 ;;		_main
  3556 ;; This function uses a non-reentrant model
  3557 ;;
  3558                           
  3559                           
  3560                           ;psect for function _strcmp
  3561  0963                     _strcmp:	
  3562                           
  3563                           ;incstack = 0
  3564                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3565                           ;strcmp@s1 stored from wreg
  3566  0963  1283               	bcf	3,5	;RP0=0, select bank0
  3567  0964  1303               	bcf	3,6	;RP1=0, select bank0
  3568  0965  00C8               	movwf	strcmp@s1
  3569  0966  2976               	goto	l3946
  3570  0967                     l3948:	
  3571  0967  0848               	movf	strcmp@s1,w
  3572  0968  0084               	movwf	4
  3573  0969  0800               	movf	0,w
  3574  096A  1903               	btfsc	3,2
  3575  096B  298D               	goto	l3950
  3576  096C  3001               	movlw	1
  3577  096D  00F5               	movwf	??_strcmp
  3578  096E  0875               	movf	??_strcmp,w
  3579  096F  07C8               	addwf	strcmp@s1,f
  3580  0970  3001               	movlw	1
  3581  0971  07F3               	addwf	strcmp@s2,f
  3582  0972  1803               	skipnc
  3583  0973  0AF4               	incf	strcmp@s2+1,f
  3584  0974  3000               	movlw	0
  3585  0975  07F4               	addwf	strcmp@s2+1,f
  3586  0976                     l3946:	
  3587  0976  0874               	movf	strcmp@s2+1,w
  3588  0977  00FF               	movwf	127
  3589  0978  0873               	movf	strcmp@s2,w
  3590  0979  0084               	movwf	4
  3591  097A  120A  158A  2000  120A  158A  	fcall	stringtab
  3592  097F  00F5               	movwf	??_strcmp
  3593  0980  0848               	movf	strcmp@s1,w
  3594  0981  0084               	movwf	4
  3595  0982  1383               	bcf	3,7	;select IRP bank0
  3596  0983  0800               	movf	0,w
  3597  0984  00F6               	movwf	??_strcmp+1
  3598  0985  0875               	movf	??_strcmp,w
  3599  0986  0276               	subwf	??_strcmp+1,w
  3600  0987  00F7               	movwf	??_strcmp+2
  3601  0988  0877               	movf	??_strcmp+2,w
  3602  0989  00C7               	movwf	strcmp@r
  3603  098A  0847               	movf	strcmp@r,w
  3604  098B  1903               	btfsc	3,2
  3605  098C  2967               	goto	l3948
  3606  098D                     l3950:	
  3607  098D  0847               	movf	strcmp@r,w
  3608  098E  00F3               	movwf	?_strcmp
  3609  098F  01F4               	clrf	?_strcmp+1
  3610  0990  1BF3               	btfsc	?_strcmp,7
  3611  0991  03F4               	decf	?_strcmp+1,f
  3612  0992  0008               	return
  3613  0993                     __end_of_strcmp:	
  3614                           
  3615                           	psect	text3
  3616  0C50                     __ptext3:	
  3617 ;; *************** function _setup *****************
  3618 ;; Defined at:
  3619 ;;		line 471 in file "mainMaster.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;		None
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;		None
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  1    wreg      void 
  3626 ;; Registers used:
  3627 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3633 ;;      Params:         0       0       0       0       0
  3634 ;;      Locals:         0       0       0       0       0
  3635 ;;      Temps:          0       0       0       0       0
  3636 ;;      Totals:         0       0       0       0       0
  3637 ;;Total ram usage:        0 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    4
  3640 ;; This function calls:
  3641 ;;		_I2C_Master_Init
  3642 ;;		_Lcd_Init
  3643 ;;		_UART_Init
  3644 ;;		_initOscilador
  3645 ;; This function is called by:
  3646 ;;		_main
  3647 ;; This function uses a non-reentrant model
  3648 ;;
  3649                           
  3650                           
  3651                           ;psect for function _setup
  3652  0C50                     _setup:	
  3653                           
  3654                           ;mainMaster.c: 472:     initOscilador(7);
  3655                           
  3656                           ;incstack = 0
  3657                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3658  0C50  3007               	movlw	7
  3659  0C51  120A  158A  23A0  120A  158A  	fcall	_initOscilador
  3660                           
  3661                           ;mainMaster.c: 473:     ANSELH = 0;
  3662  0C56  1683               	bsf	3,5	;RP0=1, select bank3
  3663  0C57  1703               	bsf	3,6	;RP1=1, select bank3
  3664  0C58  0189               	clrf	9	;volatile
  3665                           
  3666                           ;mainMaster.c: 474:     ANSEL = 0;
  3667  0C59  0188               	clrf	8	;volatile
  3668                           
  3669                           ;mainMaster.c: 475:     TRISB = 0;
  3670  0C5A  1683               	bsf	3,5	;RP0=1, select bank1
  3671  0C5B  1303               	bcf	3,6	;RP1=0, select bank1
  3672  0C5C  0186               	clrf	6	;volatile
  3673                           
  3674                           ;mainMaster.c: 476:     TRISA = 0;
  3675  0C5D  0185               	clrf	5	;volatile
  3676                           
  3677                           ;mainMaster.c: 477:     TRISD = 0xFF;
  3678  0C5E  30FF               	movlw	255
  3679  0C5F  0088               	movwf	8	;volatile
  3680                           
  3681                           ;mainMaster.c: 478:     PORTB = 0;
  3682  0C60  1283               	bcf	3,5	;RP0=0, select bank0
  3683  0C61  1303               	bcf	3,6	;RP1=0, select bank0
  3684  0C62  0186               	clrf	6	;volatile
  3685                           
  3686                           ;mainMaster.c: 479:     PORTA = 0;
  3687  0C63  0185               	clrf	5	;volatile
  3688                           
  3689                           ;mainMaster.c: 480:     TRISC = 0x01;
  3690  0C64  3001               	movlw	1
  3691  0C65  1683               	bsf	3,5	;RP0=1, select bank1
  3692  0C66  1303               	bcf	3,6	;RP1=0, select bank1
  3693  0C67  0087               	movwf	7	;volatile
  3694                           
  3695                           ;mainMaster.c: 481:     PORTC = 0;
  3696  0C68  1283               	bcf	3,5	;RP0=0, select bank0
  3697  0C69  1303               	bcf	3,6	;RP1=0, select bank0
  3698  0C6A  0187               	clrf	7	;volatile
  3699                           
  3700                           ;mainMaster.c: 482:     PORTE = 0;
  3701  0C6B  0189               	clrf	9	;volatile
  3702                           
  3703                           ;mainMaster.c: 483:     TRISE = 0xFF;
  3704  0C6C  30FF               	movlw	255
  3705  0C6D  1683               	bsf	3,5	;RP0=1, select bank1
  3706  0C6E  1303               	bcf	3,6	;RP1=0, select bank1
  3707  0C6F  0089               	movwf	9	;volatile
  3708                           
  3709                           ;mainMaster.c: 484:     i = 0;
  3710  0C70  1283               	bcf	3,5	;RP0=0, select bank0
  3711  0C71  1303               	bcf	3,6	;RP1=0, select bank0
  3712  0C72  01B6               	clrf	_i
  3713                           
  3714                           ;mainMaster.c: 485:     door = 0;
  3715  0C73  01BA               	clrf	_door
  3716                           
  3717                           ;mainMaster.c: 486:     trip = 0;
  3718  0C74  01B9               	clrf	_trip
  3719                           
  3720                           ;mainMaster.c: 487:     alarm = 0;
  3721  0C75  01AF               	clrf	_alarm
  3722                           
  3723                           ;mainMaster.c: 488:     change2 = 0;
  3724  0C76  01B2               	clrf	_change2
  3725                           
  3726                           ;mainMaster.c: 489:     change3 = 0;
  3727  0C77  01B1               	clrf	_change3
  3728                           
  3729                           ;mainMaster.c: 490:     IR = 0;
  3730  0C78  01B7               	clrf	_IR
  3731                           
  3732                           ;mainMaster.c: 491:     PIR = 0;
  3733  0C79  01B8               	clrf	_PIR
  3734                           
  3735                           ;mainMaster.c: 492:     OPTION_REGbits.T0CS = 0;
  3736  0C7A  1683               	bsf	3,5	;RP0=1, select bank1
  3737  0C7B  1303               	bcf	3,6	;RP1=0, select bank1
  3738  0C7C  1281               	bcf	1,5	;volatile
  3739                           
  3740                           ;mainMaster.c: 493:     OPTION_REGbits.T0SE = 0;
  3741  0C7D  1201               	bcf	1,4	;volatile
  3742                           
  3743                           ;mainMaster.c: 494:     OPTION_REGbits.PSA = 1;
  3744  0C7E  1581               	bsf	1,3	;volatile
  3745                           
  3746                           ;mainMaster.c: 495:     OPTION_REGbits.PS2 = 0;
  3747  0C7F  1101               	bcf	1,2	;volatile
  3748                           
  3749                           ;mainMaster.c: 496:     OPTION_REGbits.PS1 = 0;
  3750  0C80  1081               	bcf	1,1	;volatile
  3751                           
  3752                           ;mainMaster.c: 497:     OPTION_REGbits.PS0 = 0;
  3753  0C81  1001               	bcf	1,0	;volatile
  3754                           
  3755                           ;mainMaster.c: 498:     TMR0 = 56;
  3756  0C82  3038               	movlw	56
  3757  0C83  1283               	bcf	3,5	;RP0=0, select bank0
  3758  0C84  1303               	bcf	3,6	;RP1=0, select bank0
  3759  0C85  0081               	movwf	1	;volatile
  3760                           
  3761                           ;mainMaster.c: 499:     INTCONbits.T0IF = 0;
  3762  0C86  110B               	bcf	11,2	;volatile
  3763                           
  3764                           ;mainMaster.c: 500:     INTCONbits.T0IE = 1;
  3765  0C87  168B               	bsf	11,5	;volatile
  3766                           
  3767                           ;mainMaster.c: 501:     INTCONbits.GIE = 1;
  3768  0C88  178B               	bsf	11,7	;volatile
  3769                           
  3770                           ;mainMaster.c: 502:     Lcd_Init();
  3771  0C89  120A  158A  250B  120A  158A  	fcall	_Lcd_Init
  3772                           
  3773                           ;mainMaster.c: 503:     UART_Init(9600);
  3774  0C8E  3000               	movlw	0
  3775  0C8F  1283               	bcf	3,5	;RP0=0, select bank0
  3776  0C90  1303               	bcf	3,6	;RP1=0, select bank0
  3777  0C91  00D8               	movwf	UART_Init@baudrate+3
  3778  0C92  3000               	movlw	0
  3779  0C93  00D7               	movwf	UART_Init@baudrate+2
  3780  0C94  3025               	movlw	37
  3781  0C95  00D6               	movwf	UART_Init@baudrate+1
  3782  0C96  3080               	movlw	128
  3783  0C97  00D5               	movwf	UART_Init@baudrate
  3784  0C98  120A  158A  2728  120A  158A  	fcall	_UART_Init
  3785                           
  3786                           ;mainMaster.c: 504:     I2C_Master_Init(100000);
  3787  0C9D  3000               	movlw	0
  3788  0C9E  1283               	bcf	3,5	;RP0=0, select bank0
  3789  0C9F  1303               	bcf	3,6	;RP1=0, select bank0
  3790  0CA0  00D7               	movwf	I2C_Master_Init@c+3
  3791  0CA1  3001               	movlw	1
  3792  0CA2  00D6               	movwf	I2C_Master_Init@c+2
  3793  0CA3  3086               	movlw	134
  3794  0CA4  00D5               	movwf	I2C_Master_Init@c+1
  3795  0CA5  30A0               	movlw	160
  3796  0CA6  00D4               	movwf	I2C_Master_Init@c
  3797  0CA7  120A  158A  2193   	fcall	_I2C_Master_Init
  3798  0CAA  0008               	return
  3799  0CAB                     __end_of_setup:	
  3800                           
  3801                           	psect	text4
  3802  0BA0                     __ptext4:	
  3803 ;; *************** function _initOscilador *****************
  3804 ;; Defined at:
  3805 ;;		line 11 in file "./Oscilador.h"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;  option          1    wreg     unsigned char 
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;  option          1    5[COMMON] unsigned char 
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  1    wreg      void 
  3812 ;; Registers used:
  3813 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3819 ;;      Params:         0       0       0       0       0
  3820 ;;      Locals:         1       0       0       0       0
  3821 ;;      Temps:          2       0       0       0       0
  3822 ;;      Totals:         3       0       0       0       0
  3823 ;;Total ram usage:        3 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    1
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_setup
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           
  3834                           ;psect for function _initOscilador
  3835  0BA0                     _initOscilador:	
  3836                           
  3837                           ;incstack = 0
  3838                           ; Regs used in _initOscilador: [wreg-fsr0h+status,2+status,0]
  3839                           ;initOscilador@option stored from wreg
  3840  0BA0  00F5               	movwf	initOscilador@option
  3841                           
  3842                           ;./Oscilador.h: 13: 
  3843  0BA1  2BD1               	goto	l2578
  3844  0BA2                     l2558:	
  3845                           
  3846                           ;./Oscilador.h: 16:         case 3:
  3847  0BA2  308F               	movlw	-113
  3848  0BA3  1683               	bsf	3,5	;RP0=1, select bank1
  3849  0BA4  1303               	bcf	3,6	;RP1=0, select bank1
  3850  0BA5  058F               	andwf	15,f	;volatile
  3851                           
  3852                           ;./Oscilador.h: 17: 
  3853  0BA6  2BF3               	goto	l203
  3854  0BA7                     l2560:	
  3855                           
  3856                           ;./Oscilador.h: 20:         case 4:
  3857  0BA7  1683               	bsf	3,5	;RP0=1, select bank1
  3858  0BA8  1303               	bcf	3,6	;RP1=0, select bank1
  3859  0BA9  080F               	movf	15,w	;volatile
  3860  0BAA  398F               	andlw	-113
  3861  0BAB  3810               	iorlw	16
  3862  0BAC  2BCA               	goto	L17
  3863  0BAD                     l2562:	
  3864                           ;./Oscilador.h: 21: 
  3865                           
  3866                           
  3867                           ;./Oscilador.h: 24:         case 5:
  3868  0BAD  1683               	bsf	3,5	;RP0=1, select bank1
  3869  0BAE  1303               	bcf	3,6	;RP1=0, select bank1
  3870  0BAF  080F               	movf	15,w	;volatile
  3871  0BB0  398F               	andlw	-113
  3872  0BB1  3820               	iorlw	32
  3873  0BB2  2BCA               	goto	L17
  3874  0BB3                     l2564:	
  3875                           ;./Oscilador.h: 25: 
  3876                           
  3877                           
  3878                           ;./Oscilador.h: 28:         case 6:
  3879  0BB3  1683               	bsf	3,5	;RP0=1, select bank1
  3880  0BB4  1303               	bcf	3,6	;RP1=0, select bank1
  3881  0BB5  080F               	movf	15,w	;volatile
  3882  0BB6  398F               	andlw	-113
  3883  0BB7  3830               	iorlw	48
  3884  0BB8  2BCA               	goto	L17
  3885  0BB9                     l2566:	
  3886                           ;./Oscilador.h: 29: 
  3887                           
  3888                           
  3889                           ;./Oscilador.h: 32:         case 7:
  3890  0BB9  1683               	bsf	3,5	;RP0=1, select bank1
  3891  0BBA  1303               	bcf	3,6	;RP1=0, select bank1
  3892  0BBB  080F               	movf	15,w	;volatile
  3893  0BBC  398F               	andlw	-113
  3894  0BBD  3840               	iorlw	64
  3895  0BBE  2BCA               	goto	L17
  3896  0BBF                     l2568:	
  3897                           ;./Oscilador.h: 33: 
  3898                           
  3899                           
  3900                           ;./Oscilador.h: 36:         default:
  3901  0BBF  1683               	bsf	3,5	;RP0=1, select bank1
  3902  0BC0  1303               	bcf	3,6	;RP1=0, select bank1
  3903  0BC1  080F               	movf	15,w	;volatile
  3904  0BC2  398F               	andlw	-113
  3905  0BC3  3850               	iorlw	80
  3906  0BC4  2BCA               	goto	L17
  3907  0BC5                     l2570:	
  3908                           ;./Oscilador.h: 37: 
  3909                           
  3910                           
  3911                           ;./Oscilador.h: 40:     }
  3912  0BC5  1683               	bsf	3,5	;RP0=1, select bank1
  3913  0BC6  1303               	bcf	3,6	;RP1=0, select bank1
  3914  0BC7  080F               	movf	15,w	;volatile
  3915  0BC8  398F               	andlw	-113
  3916  0BC9  3860               	iorlw	96
  3917  0BCA                     L17:	
  3918  0BCA  008F               	movwf	15	;volatile
  3919                           
  3920                           ;./Oscilador.h: 41:     OSCCONbits.SCS = 1;
  3921  0BCB  2BF3               	goto	l203
  3922  0BCC                     l2572:	
  3923  0BCC                     l2574:	
  3924  0BCC  3070               	movlw	112
  3925  0BCD  1683               	bsf	3,5	;RP0=1, select bank1
  3926  0BCE  1303               	bcf	3,6	;RP1=0, select bank1
  3927  0BCF  048F               	iorwf	15,f	;volatile
  3928  0BD0  2BF3               	goto	l203
  3929  0BD1                     l2578:	
  3930  0BD1  0875               	movf	initOscilador@option,w
  3931  0BD2  00F3               	movwf	??_initOscilador
  3932  0BD3  01F4               	clrf	??_initOscilador+1
  3933                           
  3934                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3935                           ; Switch size 1, requested type "simple"
  3936                           ; Number of cases is 1, Range of values is 0 to 0
  3937                           ; switch strategies available:
  3938                           ; Name         Instructions Cycles
  3939                           ; simple_byte            4     3 (average)
  3940                           ; direct_byte           11     8 (fixed)
  3941                           ; jumptable            260     6 (fixed)
  3942                           ;	Chosen strategy is simple_byte
  3943  0BD4  0874               	movf	??_initOscilador+1,w
  3944  0BD5  3A00               	xorlw	0	; case 0
  3945  0BD6  1903               	skipnz
  3946  0BD7  2BD9               	goto	l4552
  3947  0BD8  2BCC               	goto	l2574
  3948  0BD9                     l4552:	
  3949                           
  3950                           ; Switch size 1, requested type "simple"
  3951                           ; Number of cases is 8, Range of values is 0 to 7
  3952                           ; switch strategies available:
  3953                           ; Name         Instructions Cycles
  3954                           ; simple_byte           25    13 (average)
  3955                           ; direct_byte           32     8 (fixed)
  3956                           ; jumptable            260     6 (fixed)
  3957                           ;	Chosen strategy is simple_byte
  3958  0BD9  0873               	movf	??_initOscilador,w
  3959  0BDA  3A00               	xorlw	0	; case 0
  3960  0BDB  1903               	skipnz
  3961  0BDC  2BA2               	goto	l2558
  3962  0BDD  3A01               	xorlw	1	; case 1
  3963  0BDE  1903               	skipnz
  3964  0BDF  2BA7               	goto	l2560
  3965  0BE0  3A03               	xorlw	3	; case 2
  3966  0BE1  1903               	skipnz
  3967  0BE2  2BAD               	goto	l2562
  3968  0BE3  3A01               	xorlw	1	; case 3
  3969  0BE4  1903               	skipnz
  3970  0BE5  2BB3               	goto	l2564
  3971  0BE6  3A07               	xorlw	7	; case 4
  3972  0BE7  1903               	skipnz
  3973  0BE8  2BB9               	goto	l2566
  3974  0BE9  3A01               	xorlw	1	; case 5
  3975  0BEA  1903               	skipnz
  3976  0BEB  2BBF               	goto	l2568
  3977  0BEC  3A03               	xorlw	3	; case 6
  3978  0BED  1903               	skipnz
  3979  0BEE  2BC5               	goto	l2570
  3980  0BEF  3A01               	xorlw	1	; case 7
  3981  0BF0  1903               	skipnz
  3982  0BF1  2BCC               	goto	l2572
  3983  0BF2  2BCC               	goto	l2574
  3984  0BF3                     l203:	
  3985  0BF3  140F               	bsf	15,0	;volatile
  3986  0BF4  0008               	return
  3987  0BF5                     __end_of_initOscilador:	
  3988                           
  3989                           	psect	text5
  3990  0F28                     __ptext5:	
  3991 ;; *************** function _UART_Init *****************
  3992 ;; Defined at:
  3993 ;;		line 8 in file "./UART.h"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;  baudrate        4   14[BANK0 ] const long 
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;  x               2    4[COMMON] unsigned int 
  3998 ;; Return value:  Size  Location     Type
  3999 ;;                  1    wreg      unsigned char 
  4000 ;; Registers used:
  4001 ;;		wreg, status,2, status,0, pclath, cstack
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4007 ;;      Params:         0       4       0       0       0
  4008 ;;      Locals:         2       0       0       0       0
  4009 ;;      Temps:          0      12       0       0       0
  4010 ;;      Totals:         2      16       0       0       0
  4011 ;;Total ram usage:       18 bytes
  4012 ;; Hardware stack levels used:    1
  4013 ;; Hardware stack levels required when called:    2
  4014 ;; This function calls:
  4015 ;;		___aldiv
  4016 ;; This function is called by:
  4017 ;;		_setup
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020                           
  4021                           
  4022                           ;psect for function _UART_Init
  4023  0F28                     _UART_Init:	
  4024                           
  4025                           ;./UART.h: 8: char UART_Init(const long int baudrate);./UART.h: 9: {;./UART.h: 10:  unsi
      +                          gned int x;;./UART.h: 11:  x = (8000000 - baudrate*64)/(baudrate*64);
  4026                           
  4027                           ;incstack = 0
  4028                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  4029  0F28  1283               	bcf	3,5	;RP0=0, select bank0
  4030  0F29  1303               	bcf	3,6	;RP1=0, select bank0
  4031  0F2A  0855               	movf	UART_Init@baudrate,w
  4032  0F2B  00D9               	movwf	??_UART_Init
  4033  0F2C  0856               	movf	UART_Init@baudrate+1,w
  4034  0F2D  00DA               	movwf	??_UART_Init+1
  4035  0F2E  0857               	movf	UART_Init@baudrate+2,w
  4036  0F2F  00DB               	movwf	??_UART_Init+2
  4037  0F30  0858               	movf	UART_Init@baudrate+3,w
  4038  0F31  00DC               	movwf	??_UART_Init+3
  4039  0F32  3006               	movlw	6
  4040  0F33                     u3795:	
  4041  0F33  1003               	clrc
  4042  0F34  0DD9               	rlf	??_UART_Init,f
  4043  0F35  0DDA               	rlf	??_UART_Init+1,f
  4044  0F36  0DDB               	rlf	??_UART_Init+2,f
  4045  0F37  0DDC               	rlf	??_UART_Init+3,f
  4046  0F38  3EFF               	addlw	-1
  4047  0F39  1D03               	skipz
  4048  0F3A  2F33               	goto	u3795
  4049  0F3B  085C               	movf	??_UART_Init+3,w
  4050  0F3C  00CA               	movwf	___aldiv@divisor+3
  4051  0F3D  085B               	movf	??_UART_Init+2,w
  4052  0F3E  00C9               	movwf	___aldiv@divisor+2
  4053  0F3F  085A               	movf	??_UART_Init+1,w
  4054  0F40  00C8               	movwf	___aldiv@divisor+1
  4055  0F41  0859               	movf	??_UART_Init,w
  4056  0F42  00C7               	movwf	___aldiv@divisor
  4057  0F43  0855               	movf	UART_Init@baudrate,w
  4058  0F44  00DD               	movwf	??_UART_Init+4
  4059  0F45  0856               	movf	UART_Init@baudrate+1,w
  4060  0F46  00DE               	movwf	??_UART_Init+5
  4061  0F47  0857               	movf	UART_Init@baudrate+2,w
  4062  0F48  00DF               	movwf	??_UART_Init+6
  4063  0F49  0858               	movf	UART_Init@baudrate+3,w
  4064  0F4A  00E0               	movwf	??_UART_Init+7
  4065  0F4B  3006               	movlw	6
  4066  0F4C                     u3805:	
  4067  0F4C  1003               	clrc
  4068  0F4D  0DDD               	rlf	??_UART_Init+4,f
  4069  0F4E  0DDE               	rlf	??_UART_Init+5,f
  4070  0F4F  0DDF               	rlf	??_UART_Init+6,f
  4071  0F50  0DE0               	rlf	??_UART_Init+7,f
  4072  0F51  3EFF               	addlw	-1
  4073  0F52  1D03               	skipz
  4074  0F53  2F4C               	goto	u3805
  4075  0F54  3000               	movlw	0
  4076  0F55  00E1               	movwf	??_UART_Init+8
  4077  0F56  3012               	movlw	18
  4078  0F57  00E2               	movwf	??_UART_Init+9
  4079  0F58  307A               	movlw	122
  4080  0F59  00E3               	movwf	??_UART_Init+10
  4081  0F5A  3000               	movlw	0
  4082  0F5B  00E4               	movwf	??_UART_Init+11
  4083  0F5C  085D               	movf	??_UART_Init+4,w
  4084  0F5D  02E1               	subwf	??_UART_Init+8,f
  4085  0F5E  085E               	movf	??_UART_Init+5,w
  4086  0F5F  1C03               	skipc
  4087  0F60  0F5E               	incfsz	??_UART_Init+5,w
  4088  0F61  2F63               	goto	u3811
  4089  0F62  2F64               	goto	u3812
  4090  0F63                     u3811:	
  4091  0F63  02E2               	subwf	??_UART_Init+9,f
  4092  0F64                     u3812:	
  4093  0F64  085F               	movf	??_UART_Init+6,w
  4094  0F65  1C03               	skipc
  4095  0F66  0F5F               	incfsz	??_UART_Init+6,w
  4096  0F67  2F69               	goto	u3813
  4097  0F68  2F6A               	goto	u3814
  4098  0F69                     u3813:	
  4099  0F69  02E3               	subwf	??_UART_Init+10,f
  4100  0F6A                     u3814:	
  4101  0F6A  0860               	movf	??_UART_Init+7,w
  4102  0F6B  1C03               	skipc
  4103  0F6C  0F60               	incfsz	??_UART_Init+7,w
  4104  0F6D  2F6F               	goto	u3815
  4105  0F6E  2F70               	goto	u3816
  4106  0F6F                     u3815:	
  4107  0F6F  02E4               	subwf	??_UART_Init+11,f
  4108  0F70                     u3816:	
  4109  0F70  0864               	movf	??_UART_Init+11,w
  4110  0F71  00CE               	movwf	___aldiv@dividend+3
  4111  0F72  0863               	movf	??_UART_Init+10,w
  4112  0F73  00CD               	movwf	___aldiv@dividend+2
  4113  0F74  0862               	movf	??_UART_Init+9,w
  4114  0F75  00CC               	movwf	___aldiv@dividend+1
  4115  0F76  0861               	movf	??_UART_Init+8,w
  4116  0F77  00CB               	movwf	___aldiv@dividend
  4117  0F78  120A  158A  25F4  120A  158A  	fcall	___aldiv
  4118  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
  4119  0F7E  1303               	bcf	3,6	;RP1=0, select bank0
  4120  0F7F  0848               	movf	?___aldiv+1,w
  4121  0F80  00F5               	movwf	UART_Init@x+1
  4122  0F81  0847               	movf	?___aldiv,w
  4123  0F82  00F4               	movwf	UART_Init@x
  4124                           
  4125                           ;./UART.h: 12:  if(x>255)
  4126  0F83  3001               	movlw	1
  4127  0F84  0275               	subwf	UART_Init@x+1,w
  4128  0F85  3000               	movlw	0
  4129  0F86  1903               	skipnz
  4130  0F87  0274               	subwf	UART_Init@x,w
  4131  0F88  1C03               	skipc
  4132  0F89  2FE6               	goto	l3702
  4133                           
  4134                           ;./UART.h: 13:  {;./UART.h: 14:   x = (8000000 - baudrate*16)/(baudrate*16);
  4135  0F8A  0855               	movf	UART_Init@baudrate,w
  4136  0F8B  00D9               	movwf	??_UART_Init
  4137  0F8C  0856               	movf	UART_Init@baudrate+1,w
  4138  0F8D  00DA               	movwf	??_UART_Init+1
  4139  0F8E  0857               	movf	UART_Init@baudrate+2,w
  4140  0F8F  00DB               	movwf	??_UART_Init+2
  4141  0F90  0858               	movf	UART_Init@baudrate+3,w
  4142  0F91  00DC               	movwf	??_UART_Init+3
  4143  0F92  3004               	movlw	4
  4144  0F93                     u3835:	
  4145  0F93  1003               	clrc
  4146  0F94  0DD9               	rlf	??_UART_Init,f
  4147  0F95  0DDA               	rlf	??_UART_Init+1,f
  4148  0F96  0DDB               	rlf	??_UART_Init+2,f
  4149  0F97  0DDC               	rlf	??_UART_Init+3,f
  4150  0F98  3EFF               	addlw	-1
  4151  0F99  1D03               	skipz
  4152  0F9A  2F93               	goto	u3835
  4153  0F9B  085C               	movf	??_UART_Init+3,w
  4154  0F9C  00CA               	movwf	___aldiv@divisor+3
  4155  0F9D  085B               	movf	??_UART_Init+2,w
  4156  0F9E  00C9               	movwf	___aldiv@divisor+2
  4157  0F9F  085A               	movf	??_UART_Init+1,w
  4158  0FA0  00C8               	movwf	___aldiv@divisor+1
  4159  0FA1  0859               	movf	??_UART_Init,w
  4160  0FA2  00C7               	movwf	___aldiv@divisor
  4161  0FA3  0855               	movf	UART_Init@baudrate,w
  4162  0FA4  00DD               	movwf	??_UART_Init+4
  4163  0FA5  0856               	movf	UART_Init@baudrate+1,w
  4164  0FA6  00DE               	movwf	??_UART_Init+5
  4165  0FA7  0857               	movf	UART_Init@baudrate+2,w
  4166  0FA8  00DF               	movwf	??_UART_Init+6
  4167  0FA9  0858               	movf	UART_Init@baudrate+3,w
  4168  0FAA  00E0               	movwf	??_UART_Init+7
  4169  0FAB  3004               	movlw	4
  4170  0FAC                     u3845:	
  4171  0FAC  1003               	clrc
  4172  0FAD  0DDD               	rlf	??_UART_Init+4,f
  4173  0FAE  0DDE               	rlf	??_UART_Init+5,f
  4174  0FAF  0DDF               	rlf	??_UART_Init+6,f
  4175  0FB0  0DE0               	rlf	??_UART_Init+7,f
  4176  0FB1  3EFF               	addlw	-1
  4177  0FB2  1D03               	skipz
  4178  0FB3  2FAC               	goto	u3845
  4179  0FB4  3000               	movlw	0
  4180  0FB5  00E1               	movwf	??_UART_Init+8
  4181  0FB6  3012               	movlw	18
  4182  0FB7  00E2               	movwf	??_UART_Init+9
  4183  0FB8  307A               	movlw	122
  4184  0FB9  00E3               	movwf	??_UART_Init+10
  4185  0FBA  3000               	movlw	0
  4186  0FBB  00E4               	movwf	??_UART_Init+11
  4187  0FBC  085D               	movf	??_UART_Init+4,w
  4188  0FBD  02E1               	subwf	??_UART_Init+8,f
  4189  0FBE  085E               	movf	??_UART_Init+5,w
  4190  0FBF  1C03               	skipc
  4191  0FC0  0F5E               	incfsz	??_UART_Init+5,w
  4192  0FC1  2FC3               	goto	u3851
  4193  0FC2  2FC4               	goto	u3852
  4194  0FC3                     u3851:	
  4195  0FC3  02E2               	subwf	??_UART_Init+9,f
  4196  0FC4                     u3852:	
  4197  0FC4  085F               	movf	??_UART_Init+6,w
  4198  0FC5  1C03               	skipc
  4199  0FC6  0F5F               	incfsz	??_UART_Init+6,w
  4200  0FC7  2FC9               	goto	u3853
  4201  0FC8  2FCA               	goto	u3854
  4202  0FC9                     u3853:	
  4203  0FC9  02E3               	subwf	??_UART_Init+10,f
  4204  0FCA                     u3854:	
  4205  0FCA  0860               	movf	??_UART_Init+7,w
  4206  0FCB  1C03               	skipc
  4207  0FCC  0F60               	incfsz	??_UART_Init+7,w
  4208  0FCD  2FCF               	goto	u3855
  4209  0FCE  2FD0               	goto	u3856
  4210  0FCF                     u3855:	
  4211  0FCF  02E4               	subwf	??_UART_Init+11,f
  4212  0FD0                     u3856:	
  4213  0FD0  0864               	movf	??_UART_Init+11,w
  4214  0FD1  00CE               	movwf	___aldiv@dividend+3
  4215  0FD2  0863               	movf	??_UART_Init+10,w
  4216  0FD3  00CD               	movwf	___aldiv@dividend+2
  4217  0FD4  0862               	movf	??_UART_Init+9,w
  4218  0FD5  00CC               	movwf	___aldiv@dividend+1
  4219  0FD6  0861               	movf	??_UART_Init+8,w
  4220  0FD7  00CB               	movwf	___aldiv@dividend
  4221  0FD8  120A  158A  25F4  120A  158A  	fcall	___aldiv
  4222  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  4223  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  4224  0FDF  0848               	movf	?___aldiv+1,w
  4225  0FE0  00F5               	movwf	UART_Init@x+1
  4226  0FE1  0847               	movf	?___aldiv,w
  4227  0FE2  00F4               	movwf	UART_Init@x
  4228                           
  4229                           ;./UART.h: 15:   BRGH = 1;
  4230  0FE3  1683               	bsf	3,5	;RP0=1, select bank1
  4231  0FE4  1303               	bcf	3,6	;RP1=0, select bank1
  4232  0FE5  1518               	bsf	24,2	;volatile
  4233  0FE6                     l3702:	
  4234                           
  4235                           ;./UART.h: 17:  if(x<256)
  4236  0FE6  3001               	movlw	1
  4237  0FE7  0275               	subwf	UART_Init@x+1,w
  4238  0FE8  3000               	movlw	0
  4239  0FE9  1903               	skipnz
  4240  0FEA  0274               	subwf	UART_Init@x,w
  4241  0FEB  1803               	skipnc
  4242  0FEC  0008               	return
  4243                           
  4244                           ;./UART.h: 18:  {;./UART.h: 19:    SPBRG = x;
  4245  0FED  0874               	movf	UART_Init@x,w
  4246  0FEE  1683               	bsf	3,5	;RP0=1, select bank1
  4247  0FEF  1303               	bcf	3,6	;RP1=0, select bank1
  4248  0FF0  0099               	movwf	25	;volatile
  4249                           
  4250                           ;./UART.h: 20:    SYNC = 0;
  4251  0FF1  1218               	bcf	24,4	;volatile
  4252                           
  4253                           ;./UART.h: 21:    SPEN = 1;
  4254  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  4255  0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  4256  0FF4  1798               	bsf	24,7	;volatile
  4257                           
  4258                           ;./UART.h: 22:           TRISC7 = 1;
  4259  0FF5  1683               	bsf	3,5	;RP0=1, select bank1
  4260  0FF6  1303               	bcf	3,6	;RP1=0, select bank1
  4261  0FF7  1787               	bsf	7,7	;volatile
  4262                           
  4263                           ;./UART.h: 23:           TRISC6 = 1;
  4264  0FF8  1707               	bsf	7,6	;volatile
  4265                           
  4266                           ;./UART.h: 24:           CREN = 1;
  4267  0FF9  1283               	bcf	3,5	;RP0=0, select bank0
  4268  0FFA  1303               	bcf	3,6	;RP1=0, select bank0
  4269  0FFB  1618               	bsf	24,4	;volatile
  4270                           
  4271                           ;./UART.h: 25:           TXEN = 1;
  4272  0FFC  1683               	bsf	3,5	;RP0=1, select bank1
  4273  0FFD  1303               	bcf	3,6	;RP1=0, select bank1
  4274  0FFE  1698               	bsf	24,5	;volatile
  4275  0FFF  0008               	return
  4276  1000                     __end_of_UART_Init:	
  4277                           
  4278                           	psect	text6
  4279  0DF4                     __ptext6:	
  4280 ;; *************** function ___aldiv *****************
  4281 ;; Defined at:
  4282 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  4283 ;; Parameters:    Size  Location     Type
  4284 ;;  divisor         4    0[BANK0 ] long 
  4285 ;;  dividend        4    4[BANK0 ] long 
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;  quotient        4   10[BANK0 ] long 
  4288 ;;  sign            1    9[BANK0 ] unsigned char 
  4289 ;;  counter         1    8[BANK0 ] unsigned char 
  4290 ;; Return value:  Size  Location     Type
  4291 ;;                  4    0[BANK0 ] long 
  4292 ;; Registers used:
  4293 ;;		wreg, status,2, status,0
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4299 ;;      Params:         0       8       0       0       0
  4300 ;;      Locals:         0       6       0       0       0
  4301 ;;      Temps:          1       0       0       0       0
  4302 ;;      Totals:         1      14       0       0       0
  4303 ;;Total ram usage:       15 bytes
  4304 ;; Hardware stack levels used:    1
  4305 ;; Hardware stack levels required when called:    1
  4306 ;; This function calls:
  4307 ;;		Nothing
  4308 ;; This function is called by:
  4309 ;;		_UART_Init
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           
  4314                           ;psect for function ___aldiv
  4315  0DF4                     ___aldiv:	
  4316                           
  4317                           ;incstack = 0
  4318                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4319  0DF4  1283               	bcf	3,5	;RP0=0, select bank0
  4320  0DF5  1303               	bcf	3,6	;RP1=0, select bank0
  4321  0DF6  01D0               	clrf	___aldiv@sign
  4322  0DF7  1FCA               	btfss	___aldiv@divisor+3,7
  4323  0DF8  2E06               	goto	l658
  4324  0DF9  09C7               	comf	___aldiv@divisor,f
  4325  0DFA  09C8               	comf	___aldiv@divisor+1,f
  4326  0DFB  09C9               	comf	___aldiv@divisor+2,f
  4327  0DFC  09CA               	comf	___aldiv@divisor+3,f
  4328  0DFD  0AC7               	incf	___aldiv@divisor,f
  4329  0DFE  1903               	skipnz
  4330  0DFF  0AC8               	incf	___aldiv@divisor+1,f
  4331  0E00  1903               	skipnz
  4332  0E01  0AC9               	incf	___aldiv@divisor+2,f
  4333  0E02  1903               	skipnz
  4334  0E03  0ACA               	incf	___aldiv@divisor+3,f
  4335  0E04  01D0               	clrf	___aldiv@sign
  4336  0E05  0AD0               	incf	___aldiv@sign,f
  4337  0E06                     l658:	
  4338  0E06  1FCE               	btfss	___aldiv@dividend+3,7
  4339  0E07  2E17               	goto	l3584
  4340  0E08  09CB               	comf	___aldiv@dividend,f
  4341  0E09  09CC               	comf	___aldiv@dividend+1,f
  4342  0E0A  09CD               	comf	___aldiv@dividend+2,f
  4343  0E0B  09CE               	comf	___aldiv@dividend+3,f
  4344  0E0C  0ACB               	incf	___aldiv@dividend,f
  4345  0E0D  1903               	skipnz
  4346  0E0E  0ACC               	incf	___aldiv@dividend+1,f
  4347  0E0F  1903               	skipnz
  4348  0E10  0ACD               	incf	___aldiv@dividend+2,f
  4349  0E11  1903               	skipnz
  4350  0E12  0ACE               	incf	___aldiv@dividend+3,f
  4351  0E13  3001               	movlw	1
  4352  0E14  00F3               	movwf	??___aldiv
  4353  0E15  0873               	movf	??___aldiv,w
  4354  0E16  06D0               	xorwf	___aldiv@sign,f
  4355  0E17                     l3584:	
  4356  0E17  3000               	movlw	0
  4357  0E18  00D4               	movwf	___aldiv@quotient+3
  4358  0E19  3000               	movlw	0
  4359  0E1A  00D3               	movwf	___aldiv@quotient+2
  4360  0E1B  3000               	movlw	0
  4361  0E1C  00D2               	movwf	___aldiv@quotient+1
  4362  0E1D  3000               	movlw	0
  4363  0E1E  00D1               	movwf	___aldiv@quotient
  4364  0E1F  084A               	movf	___aldiv@divisor+3,w
  4365  0E20  0449               	iorwf	___aldiv@divisor+2,w
  4366  0E21  0448               	iorwf	___aldiv@divisor+1,w
  4367  0E22  0447               	iorwf	___aldiv@divisor,w
  4368  0E23  1903               	skipnz
  4369  0E24  2E6C               	goto	l3606
  4370  0E25  01CF               	clrf	___aldiv@counter
  4371  0E26  0ACF               	incf	___aldiv@counter,f
  4372  0E27                     l3592:	
  4373  0E27  1BCA               	btfsc	___aldiv@divisor+3,7
  4374  0E28  2E37               	goto	l3594
  4375  0E29  3001               	movlw	1
  4376  0E2A  00F3               	movwf	??___aldiv
  4377  0E2B                     u3635:	
  4378  0E2B  1003               	clrc
  4379  0E2C  0DC7               	rlf	___aldiv@divisor,f
  4380  0E2D  0DC8               	rlf	___aldiv@divisor+1,f
  4381  0E2E  0DC9               	rlf	___aldiv@divisor+2,f
  4382  0E2F  0DCA               	rlf	___aldiv@divisor+3,f
  4383  0E30  0BF3               	decfsz	??___aldiv,f
  4384  0E31  2E2B               	goto	u3635
  4385  0E32  3001               	movlw	1
  4386  0E33  00F3               	movwf	??___aldiv
  4387  0E34  0873               	movf	??___aldiv,w
  4388  0E35  07CF               	addwf	___aldiv@counter,f
  4389  0E36  2E27               	goto	l3592
  4390  0E37                     l3594:	
  4391  0E37  3001               	movlw	1
  4392  0E38  00F3               	movwf	??___aldiv
  4393  0E39                     u3655:	
  4394  0E39  1003               	clrc
  4395  0E3A  0DD1               	rlf	___aldiv@quotient,f
  4396  0E3B  0DD2               	rlf	___aldiv@quotient+1,f
  4397  0E3C  0DD3               	rlf	___aldiv@quotient+2,f
  4398  0E3D  0DD4               	rlf	___aldiv@quotient+3,f
  4399  0E3E  0BF3               	decfsz	??___aldiv,f
  4400  0E3F  2E39               	goto	u3655
  4401  0E40  084A               	movf	___aldiv@divisor+3,w
  4402  0E41  024E               	subwf	___aldiv@dividend+3,w
  4403  0E42  1D03               	skipz
  4404  0E43  2E4E               	goto	u3665
  4405  0E44  0849               	movf	___aldiv@divisor+2,w
  4406  0E45  024D               	subwf	___aldiv@dividend+2,w
  4407  0E46  1D03               	skipz
  4408  0E47  2E4E               	goto	u3665
  4409  0E48  0848               	movf	___aldiv@divisor+1,w
  4410  0E49  024C               	subwf	___aldiv@dividend+1,w
  4411  0E4A  1D03               	skipz
  4412  0E4B  2E4E               	goto	u3665
  4413  0E4C  0847               	movf	___aldiv@divisor,w
  4414  0E4D  024B               	subwf	___aldiv@dividend,w
  4415  0E4E                     u3665:	
  4416  0E4E  1C03               	skipc
  4417  0E4F  2E5F               	goto	l3602
  4418  0E50  0847               	movf	___aldiv@divisor,w
  4419  0E51  02CB               	subwf	___aldiv@dividend,f
  4420  0E52  0848               	movf	___aldiv@divisor+1,w
  4421  0E53  1C03               	skipc
  4422  0E54  0F48               	incfsz	___aldiv@divisor+1,w
  4423  0E55  02CC               	subwf	___aldiv@dividend+1,f
  4424  0E56  0849               	movf	___aldiv@divisor+2,w
  4425  0E57  1C03               	skipc
  4426  0E58  0F49               	incfsz	___aldiv@divisor+2,w
  4427  0E59  02CD               	subwf	___aldiv@dividend+2,f
  4428  0E5A  084A               	movf	___aldiv@divisor+3,w
  4429  0E5B  1C03               	skipc
  4430  0E5C  0F4A               	incfsz	___aldiv@divisor+3,w
  4431  0E5D  02CE               	subwf	___aldiv@dividend+3,f
  4432  0E5E  1451               	bsf	___aldiv@quotient,0
  4433  0E5F                     l3602:	
  4434  0E5F  3001               	movlw	1
  4435  0E60                     u3675:	
  4436  0E60  1003               	clrc
  4437  0E61  0CCA               	rrf	___aldiv@divisor+3,f
  4438  0E62  0CC9               	rrf	___aldiv@divisor+2,f
  4439  0E63  0CC8               	rrf	___aldiv@divisor+1,f
  4440  0E64  0CC7               	rrf	___aldiv@divisor,f
  4441  0E65  3EFF               	addlw	-1
  4442  0E66  1D03               	skipz
  4443  0E67  2E60               	goto	u3675
  4444  0E68  3001               	movlw	1
  4445  0E69  02CF               	subwf	___aldiv@counter,f
  4446  0E6A  1D03               	btfss	3,2
  4447  0E6B  2E37               	goto	l3594
  4448  0E6C                     l3606:	
  4449  0E6C  0850               	movf	___aldiv@sign,w
  4450  0E6D  1903               	btfsc	3,2
  4451  0E6E  2E7A               	goto	l3610
  4452  0E6F  09D1               	comf	___aldiv@quotient,f
  4453  0E70  09D2               	comf	___aldiv@quotient+1,f
  4454  0E71  09D3               	comf	___aldiv@quotient+2,f
  4455  0E72  09D4               	comf	___aldiv@quotient+3,f
  4456  0E73  0AD1               	incf	___aldiv@quotient,f
  4457  0E74  1903               	skipnz
  4458  0E75  0AD2               	incf	___aldiv@quotient+1,f
  4459  0E76  1903               	skipnz
  4460  0E77  0AD3               	incf	___aldiv@quotient+2,f
  4461  0E78  1903               	skipnz
  4462  0E79  0AD4               	incf	___aldiv@quotient+3,f
  4463  0E7A                     l3610:	
  4464  0E7A  0854               	movf	___aldiv@quotient+3,w
  4465  0E7B  00CA               	movwf	?___aldiv+3
  4466  0E7C  0853               	movf	___aldiv@quotient+2,w
  4467  0E7D  00C9               	movwf	?___aldiv+2
  4468  0E7E  0852               	movf	___aldiv@quotient+1,w
  4469  0E7F  00C8               	movwf	?___aldiv+1
  4470  0E80  0851               	movf	___aldiv@quotient,w
  4471  0E81  00C7               	movwf	?___aldiv
  4472  0E82  0008               	return
  4473  0E83                     __end_of___aldiv:	
  4474                           
  4475                           	psect	text7
  4476  0D0B                     __ptext7:	
  4477 ;; *************** function _Lcd_Init *****************
  4478 ;; Defined at:
  4479 ;;		line 65 in file "./LCD4bits.h"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;		None
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;		None
  4484 ;; Return value:  Size  Location     Type
  4485 ;;                  1    wreg      void 
  4486 ;; Registers used:
  4487 ;;		wreg, status,2, status,0, pclath, cstack
  4488 ;; Tracked objects:
  4489 ;;		On entry : 0/0
  4490 ;;		On exit  : 0/0
  4491 ;;		Unchanged: 0/0
  4492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4493 ;;      Params:         0       0       0       0       0
  4494 ;;      Locals:         0       0       0       0       0
  4495 ;;      Temps:          0       2       0       0       0
  4496 ;;      Totals:         0       2       0       0       0
  4497 ;;Total ram usage:        2 bytes
  4498 ;; Hardware stack levels used:    1
  4499 ;; Hardware stack levels required when called:    3
  4500 ;; This function calls:
  4501 ;;		_Lcd_Cmd
  4502 ;;		_Lcd_Port
  4503 ;; This function is called by:
  4504 ;;		_setup
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           
  4509                           ;psect for function _Lcd_Init
  4510  0D0B                     _Lcd_Init:	
  4511                           
  4512                           ;./LCD4bits.h: 67:   Lcd_Port(0x00);
  4513                           
  4514                           ;incstack = 0
  4515                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  4516  0D0B  3000               	movlw	0
  4517  0D0C  160A  118A  2665  120A  158A  	fcall	_Lcd_Port
  4518                           
  4519                           ;./LCD4bits.h: 68:    _delay((unsigned long)((20)*(8000000/4000.0)));
  4520  0D11  3034               	movlw	52
  4521  0D12  1283               	bcf	3,5	;RP0=0, select bank0
  4522  0D13  1303               	bcf	3,6	;RP1=0, select bank0
  4523  0D14  00C8               	movwf	??_Lcd_Init+1
  4524  0D15  30F1               	movlw	241
  4525  0D16  00C7               	movwf	??_Lcd_Init
  4526  0D17                     u5107:	
  4527  0D17  0BC7               	decfsz	??_Lcd_Init,f
  4528  0D18  2D17               	goto	u5107
  4529  0D19  0BC8               	decfsz	??_Lcd_Init+1,f
  4530  0D1A  2D17               	goto	u5107
  4531                           
  4532                           ;./LCD4bits.h: 69:   Lcd_Cmd(0x03);
  4533  0D1B  3003               	movlw	3
  4534  0D1C  160A  118A  267F  120A  158A  	fcall	_Lcd_Cmd
  4535                           
  4536                           ;./LCD4bits.h: 70:  _delay((unsigned long)((5)*(8000000/4000.0)));
  4537  0D21  300D               	movlw	13
  4538  0D22  1283               	bcf	3,5	;RP0=0, select bank0
  4539  0D23  1303               	bcf	3,6	;RP1=0, select bank0
  4540  0D24  00C8               	movwf	??_Lcd_Init+1
  4541  0D25  30FB               	movlw	251
  4542  0D26  00C7               	movwf	??_Lcd_Init
  4543  0D27                     u5117:	
  4544  0D27  0BC7               	decfsz	??_Lcd_Init,f
  4545  0D28  2D27               	goto	u5117
  4546  0D29  0BC8               	decfsz	??_Lcd_Init+1,f
  4547  0D2A  2D27               	goto	u5117
  4548                           
  4549                           ;./LCD4bits.h: 71:   Lcd_Cmd(0x03);
  4550  0D2B  3003               	movlw	3
  4551  0D2C  160A  118A  267F  120A  158A  	fcall	_Lcd_Cmd
  4552                           
  4553                           ;./LCD4bits.h: 72:  _delay((unsigned long)((11)*(8000000/4000.0)));
  4554  0D31  301D               	movlw	29
  4555  0D32  1283               	bcf	3,5	;RP0=0, select bank0
  4556  0D33  1303               	bcf	3,6	;RP1=0, select bank0
  4557  0D34  00C8               	movwf	??_Lcd_Init+1
  4558  0D35  3090               	movlw	144
  4559  0D36  00C7               	movwf	??_Lcd_Init
  4560  0D37                     u5127:	
  4561  0D37  0BC7               	decfsz	??_Lcd_Init,f
  4562  0D38  2D37               	goto	u5127
  4563  0D39  0BC8               	decfsz	??_Lcd_Init+1,f
  4564  0D3A  2D37               	goto	u5127
  4565  0D3B  0000               	nop
  4566                           
  4567                           ;./LCD4bits.h: 73:   Lcd_Cmd(0x03);
  4568  0D3C  3003               	movlw	3
  4569  0D3D  160A  118A  267F  120A  158A  	fcall	_Lcd_Cmd
  4570                           
  4571                           ;./LCD4bits.h: 75:   Lcd_Cmd(0x02);
  4572  0D42  3002               	movlw	2
  4573  0D43  160A  118A  267F  120A  158A  	fcall	_Lcd_Cmd
  4574                           
  4575                           ;./LCD4bits.h: 76:   Lcd_Cmd(0x02);
  4576  0D48  3002               	movlw	2
  4577  0D49  160A  118A  267F  120A  158A  	fcall	_Lcd_Cmd
  4578                           
  4579                           ;./LCD4bits.h: 77:   Lcd_Cmd(0x08);
  4580  0D4E  3008               	movlw	8
  4581  0D4F  160A  118A  267F  120A  158A  	fcall	_Lcd_Cmd
  4582                           
  4583                           ;./LCD4bits.h: 78:   Lcd_Cmd(0x00);
  4584  0D54  3000               	movlw	0
  4585  0D55  160A  118A  267F  120A  158A  	fcall	_Lcd_Cmd
  4586                           
  4587                           ;./LCD4bits.h: 79:   Lcd_Cmd(0x0C);
  4588  0D5A  300C               	movlw	12
  4589  0D5B  160A  118A  267F  120A  158A  	fcall	_Lcd_Cmd
  4590                           
  4591                           ;./LCD4bits.h: 80:   Lcd_Cmd(0x00);
  4592  0D60  3000               	movlw	0
  4593  0D61  160A  118A  267F  120A  158A  	fcall	_Lcd_Cmd
  4594                           
  4595                           ;./LCD4bits.h: 81:   Lcd_Cmd(0x06);
  4596  0D66  3006               	movlw	6
  4597  0D67  160A  118A  267F   	fcall	_Lcd_Cmd
  4598  0D6A  0008               	return
  4599  0D6B                     __end_of_Lcd_Init:	
  4600                           
  4601                           	psect	text8
  4602  0993                     __ptext8:	
  4603 ;; *************** function _I2C_Master_Init *****************
  4604 ;; Defined at:
  4605 ;;		line 16 in file "./I2C.h"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;  c               4   13[BANK0 ] const unsigned long 
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;		None
  4610 ;; Return value:  Size  Location     Type
  4611 ;;                  1    wreg      void 
  4612 ;; Registers used:
  4613 ;;		wreg, status,2, status,0, pclath, cstack
  4614 ;; Tracked objects:
  4615 ;;		On entry : 0/0
  4616 ;;		On exit  : 0/0
  4617 ;;		Unchanged: 0/0
  4618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4619 ;;      Params:         0       4       0       0       0
  4620 ;;      Locals:         0       0       0       0       0
  4621 ;;      Temps:          4       0       0       0       0
  4622 ;;      Totals:         4       4       0       0       0
  4623 ;;Total ram usage:        8 bytes
  4624 ;; Hardware stack levels used:    1
  4625 ;; Hardware stack levels required when called:    2
  4626 ;; This function calls:
  4627 ;;		___lldiv
  4628 ;; This function is called by:
  4629 ;;		_setup
  4630 ;; This function uses a non-reentrant model
  4631 ;;
  4632                           
  4633                           
  4634                           ;psect for function _I2C_Master_Init
  4635  0993                     _I2C_Master_Init:	
  4636                           
  4637                           ;./I2C.h: 16: void I2C_Master_Init(const unsigned long c);./I2C.h: 17: {;./I2C.h: 18:   
      +                            SSPCON = 0b00101000;
  4638                           
  4639                           ;incstack = 0
  4640                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  4641  0993  3028               	movlw	40
  4642  0994  1283               	bcf	3,5	;RP0=0, select bank0
  4643  0995  1303               	bcf	3,6	;RP1=0, select bank0
  4644  0996  0094               	movwf	20	;volatile
  4645                           
  4646                           ;./I2C.h: 19:     SSPCON2 = 0;
  4647  0997  1683               	bsf	3,5	;RP0=1, select bank1
  4648  0998  1303               	bcf	3,6	;RP1=0, select bank1
  4649  0999  0191               	clrf	17	;volatile
  4650                           
  4651                           ;./I2C.h: 20:     SSPADD = (8000000/(4*c))-1;
  4652  099A  1283               	bcf	3,5	;RP0=0, select bank0
  4653  099B  1303               	bcf	3,6	;RP1=0, select bank0
  4654  099C  0854               	movf	I2C_Master_Init@c,w
  4655  099D  00F4               	movwf	??_I2C_Master_Init
  4656  099E  0855               	movf	I2C_Master_Init@c+1,w
  4657  099F  00F5               	movwf	??_I2C_Master_Init+1
  4658  09A0  0856               	movf	I2C_Master_Init@c+2,w
  4659  09A1  00F6               	movwf	??_I2C_Master_Init+2
  4660  09A2  0857               	movf	I2C_Master_Init@c+3,w
  4661  09A3  00F7               	movwf	??_I2C_Master_Init+3
  4662  09A4  3002               	movlw	2
  4663  09A5                     u3775:	
  4664  09A5  1003               	clrc
  4665  09A6  0DF4               	rlf	??_I2C_Master_Init,f
  4666  09A7  0DF5               	rlf	??_I2C_Master_Init+1,f
  4667  09A8  0DF6               	rlf	??_I2C_Master_Init+2,f
  4668  09A9  0DF7               	rlf	??_I2C_Master_Init+3,f
  4669  09AA  3EFF               	addlw	-1
  4670  09AB  1D03               	skipz
  4671  09AC  29A5               	goto	u3775
  4672  09AD  0877               	movf	??_I2C_Master_Init+3,w
  4673  09AE  00CA               	movwf	___lldiv@divisor+3
  4674  09AF  0876               	movf	??_I2C_Master_Init+2,w
  4675  09B0  00C9               	movwf	___lldiv@divisor+2
  4676  09B1  0875               	movf	??_I2C_Master_Init+1,w
  4677  09B2  00C8               	movwf	___lldiv@divisor+1
  4678  09B3  0874               	movf	??_I2C_Master_Init,w
  4679  09B4  00C7               	movwf	___lldiv@divisor
  4680  09B5  3000               	movlw	0
  4681  09B6  00CE               	movwf	___lldiv@dividend+3
  4682  09B7  307A               	movlw	122
  4683  09B8  00CD               	movwf	___lldiv@dividend+2
  4684  09B9  3012               	movlw	18
  4685  09BA  00CC               	movwf	___lldiv@dividend+1
  4686  09BB  3000               	movlw	0
  4687  09BC  00CB               	movwf	___lldiv@dividend
  4688  09BD  120A  158A  24AB   	fcall	___lldiv
  4689  09C0  1283               	bcf	3,5	;RP0=0, select bank0
  4690  09C1  1303               	bcf	3,6	;RP1=0, select bank0
  4691  09C2  0847               	movf	?___lldiv,w
  4692  09C3  3EFF               	addlw	255
  4693  09C4  1683               	bsf	3,5	;RP0=1, select bank1
  4694  09C5  1303               	bcf	3,6	;RP1=0, select bank1
  4695  09C6  0093               	movwf	19	;volatile
  4696                           
  4697                           ;./I2C.h: 21:     SSPSTAT = 0;
  4698  09C7  0194               	clrf	20	;volatile
  4699                           
  4700                           ;./I2C.h: 22:     TRISCbits.TRISC3 = 1;
  4701  09C8  1587               	bsf	7,3	;volatile
  4702                           
  4703                           ;./I2C.h: 23:     TRISCbits.TRISC4 = 1;
  4704  09C9  1607               	bsf	7,4	;volatile
  4705  09CA  0008               	return
  4706  09CB                     __end_of_I2C_Master_Init:	
  4707                           
  4708                           	psect	text9
  4709  0CAB                     __ptext9:	
  4710 ;; *************** function ___lldiv *****************
  4711 ;; Defined at:
  4712 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;  divisor         4    0[BANK0 ] unsigned long 
  4715 ;;  dividend        4    4[BANK0 ] unsigned long 
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;  quotient        4    8[BANK0 ] unsigned long 
  4718 ;;  counter         1   12[BANK0 ] unsigned char 
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  4    0[BANK0 ] unsigned long 
  4721 ;; Registers used:
  4722 ;;		wreg, status,2, status,0
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4728 ;;      Params:         0       8       0       0       0
  4729 ;;      Locals:         0       5       0       0       0
  4730 ;;      Temps:          1       0       0       0       0
  4731 ;;      Totals:         1      13       0       0       0
  4732 ;;Total ram usage:       14 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:    1
  4735 ;; This function calls:
  4736 ;;		Nothing
  4737 ;; This function is called by:
  4738 ;;		_I2C_Master_Init
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           
  4743                           ;psect for function ___lldiv
  4744  0CAB                     ___lldiv:	
  4745                           
  4746                           ;incstack = 0
  4747                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4748  0CAB  3000               	movlw	0
  4749  0CAC  1283               	bcf	3,5	;RP0=0, select bank0
  4750  0CAD  1303               	bcf	3,6	;RP1=0, select bank0
  4751  0CAE  00D2               	movwf	___lldiv@quotient+3
  4752  0CAF  3000               	movlw	0
  4753  0CB0  00D1               	movwf	___lldiv@quotient+2
  4754  0CB1  3000               	movlw	0
  4755  0CB2  00D0               	movwf	___lldiv@quotient+1
  4756  0CB3  3000               	movlw	0
  4757  0CB4  00CF               	movwf	___lldiv@quotient
  4758  0CB5  084A               	movf	___lldiv@divisor+3,w
  4759  0CB6  0449               	iorwf	___lldiv@divisor+2,w
  4760  0CB7  0448               	iorwf	___lldiv@divisor+1,w
  4761  0CB8  0447               	iorwf	___lldiv@divisor,w
  4762  0CB9  1903               	skipnz
  4763  0CBA  2D02               	goto	l3570
  4764  0CBB  01D3               	clrf	___lldiv@counter
  4765  0CBC  0AD3               	incf	___lldiv@counter,f
  4766  0CBD                     l3556:	
  4767  0CBD  1BCA               	btfsc	___lldiv@divisor+3,7
  4768  0CBE  2CCD               	goto	l3558
  4769  0CBF  3001               	movlw	1
  4770  0CC0  00F3               	movwf	??___lldiv
  4771  0CC1                     u3545:	
  4772  0CC1  1003               	clrc
  4773  0CC2  0DC7               	rlf	___lldiv@divisor,f
  4774  0CC3  0DC8               	rlf	___lldiv@divisor+1,f
  4775  0CC4  0DC9               	rlf	___lldiv@divisor+2,f
  4776  0CC5  0DCA               	rlf	___lldiv@divisor+3,f
  4777  0CC6  0BF3               	decfsz	??___lldiv,f
  4778  0CC7  2CC1               	goto	u3545
  4779  0CC8  3001               	movlw	1
  4780  0CC9  00F3               	movwf	??___lldiv
  4781  0CCA  0873               	movf	??___lldiv,w
  4782  0CCB  07D3               	addwf	___lldiv@counter,f
  4783  0CCC  2CBD               	goto	l3556
  4784  0CCD                     l3558:	
  4785  0CCD  3001               	movlw	1
  4786  0CCE  00F3               	movwf	??___lldiv
  4787  0CCF                     u3565:	
  4788  0CCF  1003               	clrc
  4789  0CD0  0DCF               	rlf	___lldiv@quotient,f
  4790  0CD1  0DD0               	rlf	___lldiv@quotient+1,f
  4791  0CD2  0DD1               	rlf	___lldiv@quotient+2,f
  4792  0CD3  0DD2               	rlf	___lldiv@quotient+3,f
  4793  0CD4  0BF3               	decfsz	??___lldiv,f
  4794  0CD5  2CCF               	goto	u3565
  4795  0CD6  084A               	movf	___lldiv@divisor+3,w
  4796  0CD7  024E               	subwf	___lldiv@dividend+3,w
  4797  0CD8  1D03               	skipz
  4798  0CD9  2CE4               	goto	u3575
  4799  0CDA  0849               	movf	___lldiv@divisor+2,w
  4800  0CDB  024D               	subwf	___lldiv@dividend+2,w
  4801  0CDC  1D03               	skipz
  4802  0CDD  2CE4               	goto	u3575
  4803  0CDE  0848               	movf	___lldiv@divisor+1,w
  4804  0CDF  024C               	subwf	___lldiv@dividend+1,w
  4805  0CE0  1D03               	skipz
  4806  0CE1  2CE4               	goto	u3575
  4807  0CE2  0847               	movf	___lldiv@divisor,w
  4808  0CE3  024B               	subwf	___lldiv@dividend,w
  4809  0CE4                     u3575:	
  4810  0CE4  1C03               	skipc
  4811  0CE5  2CF5               	goto	l3566
  4812  0CE6  0847               	movf	___lldiv@divisor,w
  4813  0CE7  02CB               	subwf	___lldiv@dividend,f
  4814  0CE8  0848               	movf	___lldiv@divisor+1,w
  4815  0CE9  1C03               	skipc
  4816  0CEA  0F48               	incfsz	___lldiv@divisor+1,w
  4817  0CEB  02CC               	subwf	___lldiv@dividend+1,f
  4818  0CEC  0849               	movf	___lldiv@divisor+2,w
  4819  0CED  1C03               	skipc
  4820  0CEE  0F49               	incfsz	___lldiv@divisor+2,w
  4821  0CEF  02CD               	subwf	___lldiv@dividend+2,f
  4822  0CF0  084A               	movf	___lldiv@divisor+3,w
  4823  0CF1  1C03               	skipc
  4824  0CF2  0F4A               	incfsz	___lldiv@divisor+3,w
  4825  0CF3  02CE               	subwf	___lldiv@dividend+3,f
  4826  0CF4  144F               	bsf	___lldiv@quotient,0
  4827  0CF5                     l3566:	
  4828  0CF5  3001               	movlw	1
  4829  0CF6                     u3585:	
  4830  0CF6  1003               	clrc
  4831  0CF7  0CCA               	rrf	___lldiv@divisor+3,f
  4832  0CF8  0CC9               	rrf	___lldiv@divisor+2,f
  4833  0CF9  0CC8               	rrf	___lldiv@divisor+1,f
  4834  0CFA  0CC7               	rrf	___lldiv@divisor,f
  4835  0CFB  3EFF               	addlw	-1
  4836  0CFC  1D03               	skipz
  4837  0CFD  2CF6               	goto	u3585
  4838  0CFE  3001               	movlw	1
  4839  0CFF  02D3               	subwf	___lldiv@counter,f
  4840  0D00  1D03               	btfss	3,2
  4841  0D01  2CCD               	goto	l3558
  4842  0D02                     l3570:	
  4843  0D02  0852               	movf	___lldiv@quotient+3,w
  4844  0D03  00CA               	movwf	?___lldiv+3
  4845  0D04  0851               	movf	___lldiv@quotient+2,w
  4846  0D05  00C9               	movwf	?___lldiv+2
  4847  0D06  0850               	movf	___lldiv@quotient+1,w
  4848  0D07  00C8               	movwf	?___lldiv+1
  4849  0D08  084F               	movf	___lldiv@quotient,w
  4850  0D09  00C7               	movwf	?___lldiv
  4851  0D0A  0008               	return
  4852  0D0B                     __end_of___lldiv:	
  4853                           
  4854                           	psect	text10
  4855  16B4                     __ptext10:	
  4856 ;; *************** function _open_door *****************
  4857 ;; Defined at:
  4858 ;;		line 629 in file "mainMaster.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;		None
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;		None
  4863 ;; Return value:  Size  Location     Type
  4864 ;;                  1    wreg      void 
  4865 ;; Registers used:
  4866 ;;		wreg, status,2, status,0, pclath, cstack
  4867 ;; Tracked objects:
  4868 ;;		On entry : 0/0
  4869 ;;		On exit  : 0/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4872 ;;      Params:         0       0       0       0       0
  4873 ;;      Locals:         0       0       0       0       0
  4874 ;;      Temps:          0       0       0       0       0
  4875 ;;      Totals:         0       0       0       0       0
  4876 ;;Total ram usage:        0 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; Hardware stack levels required when called:    3
  4879 ;; This function calls:
  4880 ;;		_I2C_Master_Start
  4881 ;;		_I2C_Master_Stop
  4882 ;;		_I2C_Master_Write
  4883 ;; This function is called by:
  4884 ;;		_main
  4885 ;; This function uses a non-reentrant model
  4886 ;;
  4887                           
  4888                           
  4889                           ;psect for function _open_door
  4890  16B4                     _open_door:	
  4891                           
  4892                           ;mainMaster.c: 631:     I2C_Master_Start();
  4893                           
  4894                           ;incstack = 0
  4895                           ; Regs used in _open_door: [wreg+status,2+status,0+pclath+cstack]
  4896  16B4  160A  118A  2606  160A  118A  	fcall	_I2C_Master_Start
  4897                           
  4898                           ;mainMaster.c: 632:     I2C_Master_Write(0x20);
  4899  16B9  3020               	movlw	32
  4900  16BA  00F3               	movwf	I2C_Master_Write@d
  4901  16BB  3000               	movlw	0
  4902  16BC  00F4               	movwf	I2C_Master_Write@d+1
  4903  16BD  160A  118A  261B  160A  118A  	fcall	_I2C_Master_Write
  4904                           
  4905                           ;mainMaster.c: 633:     I2C_Master_Write(0xFF);
  4906  16C2  30FF               	movlw	255
  4907  16C3  00F3               	movwf	I2C_Master_Write@d
  4908  16C4  3000               	movlw	0
  4909  16C5  00F4               	movwf	I2C_Master_Write@d+1
  4910  16C6  160A  118A  261B  160A  118A  	fcall	_I2C_Master_Write
  4911                           
  4912                           ;mainMaster.c: 634:     I2C_Master_Stop();
  4913  16CB  160A  118A  260D   	fcall	_I2C_Master_Stop
  4914  16CE  0008               	return
  4915  16CF                     __end_of_open_door:	
  4916                           
  4917                           	psect	text11
  4918  1757                     __ptext11:	
  4919 ;; *************** function _get_tripwire *****************
  4920 ;; Defined at:
  4921 ;;		line 593 in file "mainMaster.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;		None
  4924 ;; Auto vars:     Size  Location     Type
  4925 ;;  trip            1    2[BANK0 ] unsigned char 
  4926 ;; Return value:  Size  Location     Type
  4927 ;;                  1    wreg      unsigned char 
  4928 ;; Registers used:
  4929 ;;		wreg, status,2, status,0, pclath, cstack
  4930 ;; Tracked objects:
  4931 ;;		On entry : 0/0
  4932 ;;		On exit  : 0/0
  4933 ;;		Unchanged: 0/0
  4934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4935 ;;      Params:         0       0       0       0       0
  4936 ;;      Locals:         0       1       0       0       0
  4937 ;;      Temps:          1       0       0       0       0
  4938 ;;      Totals:         1       1       0       0       0
  4939 ;;Total ram usage:        2 bytes
  4940 ;; Hardware stack levels used:    1
  4941 ;; Hardware stack levels required when called:    3
  4942 ;; This function calls:
  4943 ;;		_I2C_Master_Read
  4944 ;;		_I2C_Master_Start
  4945 ;;		_I2C_Master_Stop
  4946 ;;		_I2C_Master_Write
  4947 ;; This function is called by:
  4948 ;;		_main
  4949 ;; This function uses a non-reentrant model
  4950 ;;
  4951                           
  4952                           
  4953                           ;psect for function _get_tripwire
  4954  1757                     _get_tripwire:	
  4955                           
  4956                           ;mainMaster.c: 595:     char trip;;mainMaster.c: 597:     I2C_Master_Start();
  4957                           
  4958                           ;incstack = 0
  4959                           ; Regs used in _get_tripwire: [wreg+status,2+status,0+pclath+cstack]
  4960  1757  160A  118A  2606  160A  118A  	fcall	_I2C_Master_Start
  4961                           
  4962                           ;mainMaster.c: 598:     I2C_Master_Write(0x21);
  4963  175C  3021               	movlw	33
  4964  175D  00F3               	movwf	I2C_Master_Write@d
  4965  175E  3000               	movlw	0
  4966  175F  00F4               	movwf	I2C_Master_Write@d+1
  4967  1760  160A  118A  261B  160A  118A  	fcall	_I2C_Master_Write
  4968                           
  4969                           ;mainMaster.c: 599:     trip = I2C_Master_Read(0);
  4970  1765  3000               	movlw	0
  4971  1766  00F3               	movwf	I2C_Master_Read@a
  4972  1767  00F4               	movwf	I2C_Master_Read@a+1
  4973  1768  160A  118A  279E  160A  118A  	fcall	_I2C_Master_Read
  4974  176D  0873               	movf	?_I2C_Master_Read,w
  4975  176E  00F7               	movwf	??_get_tripwire
  4976  176F  0877               	movf	??_get_tripwire,w
  4977  1770  1283               	bcf	3,5	;RP0=0, select bank0
  4978  1771  1303               	bcf	3,6	;RP1=0, select bank0
  4979  1772  00C9               	movwf	get_tripwire@trip
  4980                           
  4981                           ;mainMaster.c: 600:     I2C_Master_Stop();
  4982  1773  160A  118A  260D   	fcall	_I2C_Master_Stop
  4983                           
  4984                           ;mainMaster.c: 602:     return (trip);
  4985  1776  1283               	bcf	3,5	;RP0=0, select bank0
  4986  1777  1303               	bcf	3,6	;RP1=0, select bank0
  4987  1778  0849               	movf	get_tripwire@trip,w
  4988  1779  0008               	return
  4989  177A                     __end_of_get_tripwire:	
  4990                           
  4991                           	psect	text12
  4992  0D6B                     __ptext12:	
  4993 ;; *************** function _get_time *****************
  4994 ;; Defined at:
  4995 ;;		line 518 in file "mainMaster.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;  time_string     1    wreg     PTR unsigned char 
  4998 ;;		 -> time(6), 
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;  time_string     1    6[BANK0 ] PTR unsigned char 
  5001 ;;		 -> time(6), 
  5002 ;;  min             1    5[BANK0 ] unsigned char 
  5003 ;;  hour            1    4[BANK0 ] unsigned char 
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      void 
  5006 ;; Registers used:
  5007 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5013 ;;      Params:         0       0       0       0       0
  5014 ;;      Locals:         0       3       0       0       0
  5015 ;;      Temps:          0       2       0       0       0
  5016 ;;      Totals:         0       5       0       0       0
  5017 ;;Total ram usage:        5 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    3
  5020 ;; This function calls:
  5021 ;;		_I2C_Master_Read
  5022 ;;		_I2C_Master_RepeatedStart
  5023 ;;		_I2C_Master_Start
  5024 ;;		_I2C_Master_Stop
  5025 ;;		_I2C_Master_Write
  5026 ;; This function is called by:
  5027 ;;		_main
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031                           
  5032                           ;psect for function _get_time
  5033  0D6B                     _get_time:	
  5034                           
  5035                           ;incstack = 0
  5036                           ; Regs used in _get_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5037                           ;get_time@time_string stored from wreg
  5038  0D6B  1283               	bcf	3,5	;RP0=0, select bank0
  5039  0D6C  1303               	bcf	3,6	;RP1=0, select bank0
  5040  0D6D  00CD               	movwf	get_time@time_string
  5041                           
  5042                           ;mainMaster.c: 520:     char hour, min;;mainMaster.c: 522:     I2C_Master_Start();
  5043  0D6E  160A  118A  2606  120A  158A  	fcall	_I2C_Master_Start
  5044                           
  5045                           ;mainMaster.c: 523:     I2C_Master_Write(0xD0);
  5046  0D73  30D0               	movlw	208
  5047  0D74  00F3               	movwf	I2C_Master_Write@d
  5048  0D75  3000               	movlw	0
  5049  0D76  00F4               	movwf	I2C_Master_Write@d+1
  5050  0D77  160A  118A  261B  120A  158A  	fcall	_I2C_Master_Write
  5051                           
  5052                           ;mainMaster.c: 524:     I2C_Master_Write(0x01);
  5053  0D7C  3001               	movlw	1
  5054  0D7D  00F3               	movwf	I2C_Master_Write@d
  5055  0D7E  3000               	movlw	0
  5056  0D7F  00F4               	movwf	I2C_Master_Write@d+1
  5057  0D80  160A  118A  261B  120A  158A  	fcall	_I2C_Master_Write
  5058                           
  5059                           ;mainMaster.c: 525:     I2C_Master_RepeatedStart();
  5060  0D85  160A  118A  2614  120A  158A  	fcall	_I2C_Master_RepeatedStart
  5061                           
  5062                           ;mainMaster.c: 526:     I2C_Master_Write(0xD1);
  5063  0D8A  30D1               	movlw	209
  5064  0D8B  00F3               	movwf	I2C_Master_Write@d
  5065  0D8C  3000               	movlw	0
  5066  0D8D  00F4               	movwf	I2C_Master_Write@d+1
  5067  0D8E  160A  118A  261B  120A  158A  	fcall	_I2C_Master_Write
  5068                           
  5069                           ;mainMaster.c: 527:     min = I2C_Master_Read(1);
  5070  0D93  3001               	movlw	1
  5071  0D94  00F3               	movwf	I2C_Master_Read@a
  5072  0D95  3000               	movlw	0
  5073  0D96  00F4               	movwf	I2C_Master_Read@a+1
  5074  0D97  160A  118A  279E  120A  158A  	fcall	_I2C_Master_Read
  5075  0D9C  0873               	movf	?_I2C_Master_Read,w
  5076  0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  5077  0D9E  1303               	bcf	3,6	;RP1=0, select bank0
  5078  0D9F  00C9               	movwf	??_get_time
  5079  0DA0  0849               	movf	??_get_time,w
  5080  0DA1  00CC               	movwf	get_time@min
  5081                           
  5082                           ;mainMaster.c: 528:     hour = I2C_Master_Read(0);
  5083  0DA2  3000               	movlw	0
  5084  0DA3  00F3               	movwf	I2C_Master_Read@a
  5085  0DA4  00F4               	movwf	I2C_Master_Read@a+1
  5086  0DA5  160A  118A  279E  120A  158A  	fcall	_I2C_Master_Read
  5087  0DAA  0873               	movf	?_I2C_Master_Read,w
  5088  0DAB  1283               	bcf	3,5	;RP0=0, select bank0
  5089  0DAC  1303               	bcf	3,6	;RP1=0, select bank0
  5090  0DAD  00C9               	movwf	??_get_time
  5091  0DAE  0849               	movf	??_get_time,w
  5092  0DAF  00CB               	movwf	get_time@hour
  5093                           
  5094                           ;mainMaster.c: 529:     I2C_Master_Stop();
  5095  0DB0  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Stop
  5096                           
  5097                           ;mainMaster.c: 531:     time_string[0] = (hour >> 4) + '0';
  5098  0DB5  1283               	bcf	3,5	;RP0=0, select bank0
  5099  0DB6  1303               	bcf	3,6	;RP1=0, select bank0
  5100  0DB7  084B               	movf	get_time@hour,w
  5101  0DB8  00C9               	movwf	??_get_time
  5102  0DB9  3004               	movlw	4
  5103  0DBA                     u4035:	
  5104  0DBA  1003               	clrc
  5105  0DBB  0CC9               	rrf	??_get_time,f
  5106  0DBC  3EFF               	addlw	-1
  5107  0DBD  1D03               	skipz
  5108  0DBE  2DBA               	goto	u4035
  5109  0DBF  0849               	movf	??_get_time,w
  5110  0DC0  3E30               	addlw	48
  5111  0DC1  00CA               	movwf	??_get_time+1
  5112  0DC2  084D               	movf	get_time@time_string,w
  5113  0DC3  0084               	movwf	4
  5114  0DC4  084A               	movf	??_get_time+1,w
  5115  0DC5  1383               	bcf	3,7	;select IRP bank0
  5116  0DC6  0080               	movwf	0
  5117                           
  5118                           ;mainMaster.c: 532:     time_string[1] = (hour & 0x0F) + '0';
  5119  0DC7  084B               	movf	get_time@hour,w
  5120  0DC8  390F               	andlw	15
  5121  0DC9  3E30               	addlw	48
  5122  0DCA  00C9               	movwf	??_get_time
  5123  0DCB  0A4D               	incf	get_time@time_string,w
  5124  0DCC  0084               	movwf	4
  5125  0DCD  0849               	movf	??_get_time,w
  5126  0DCE  0080               	movwf	0
  5127                           
  5128                           ;mainMaster.c: 533:     time_string[2] = ':';
  5129  0DCF  303A               	movlw	58
  5130  0DD0  00C9               	movwf	??_get_time
  5131  0DD1  084D               	movf	get_time@time_string,w
  5132  0DD2  3E02               	addlw	2
  5133  0DD3  0084               	movwf	4
  5134  0DD4  0849               	movf	??_get_time,w
  5135  0DD5  0080               	movwf	0
  5136                           
  5137                           ;mainMaster.c: 534:     time_string[3] = (min >> 4) + '0';
  5138  0DD6  084C               	movf	get_time@min,w
  5139  0DD7  00C9               	movwf	??_get_time
  5140  0DD8  3004               	movlw	4
  5141  0DD9                     u4045:	
  5142  0DD9  1003               	clrc
  5143  0DDA  0CC9               	rrf	??_get_time,f
  5144  0DDB  3EFF               	addlw	-1
  5145  0DDC  1D03               	skipz
  5146  0DDD  2DD9               	goto	u4045
  5147  0DDE  0849               	movf	??_get_time,w
  5148  0DDF  3E30               	addlw	48
  5149  0DE0  00CA               	movwf	??_get_time+1
  5150  0DE1  084D               	movf	get_time@time_string,w
  5151  0DE2  3E03               	addlw	3
  5152  0DE3  0084               	movwf	4
  5153  0DE4  084A               	movf	??_get_time+1,w
  5154  0DE5  0080               	movwf	0
  5155                           
  5156                           ;mainMaster.c: 535:     time_string[4] = (min & 0x0F) + '0';
  5157  0DE6  084C               	movf	get_time@min,w
  5158  0DE7  390F               	andlw	15
  5159  0DE8  3E30               	addlw	48
  5160  0DE9  00C9               	movwf	??_get_time
  5161  0DEA  084D               	movf	get_time@time_string,w
  5162  0DEB  3E04               	addlw	4
  5163  0DEC  0084               	movwf	4
  5164  0DED  0849               	movf	??_get_time,w
  5165  0DEE  0080               	movwf	0
  5166                           
  5167                           ;mainMaster.c: 536:     time_string[5] = '\0';
  5168  0DEF  084D               	movf	get_time@time_string,w
  5169  0DF0  3E05               	addlw	5
  5170  0DF1  0084               	movwf	4
  5171  0DF2  0180               	clrf	0
  5172  0DF3  0008               	return
  5173  0DF4                     __end_of_get_time:	
  5174                           
  5175                           	psect	text13
  5176  0E83                     __ptext13:	
  5177 ;; *************** function _get_temp *****************
  5178 ;; Defined at:
  5179 ;;		line 554 in file "mainMaster.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;  temp_string     1    wreg     PTR unsigned char 
  5182 ;;		 -> temp(6), 
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;  temp_string     1   31[BANK0 ] PTR unsigned char 
  5185 ;;		 -> temp(6), 
  5186 ;;  decimal         3   27[BANK0 ] unsigned char [3]
  5187 ;;  tempLSB         1   32[BANK0 ] unsigned char 
  5188 ;;  tempMSB         1   30[BANK0 ] unsigned char 
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  1    wreg      void 
  5191 ;; Registers used:
  5192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5193 ;; Tracked objects:
  5194 ;;		On entry : 0/0
  5195 ;;		On exit  : 0/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5198 ;;      Params:         0       0       0       0       0
  5199 ;;      Locals:         0       6       0       0       0
  5200 ;;      Temps:          0       3       0       0       0
  5201 ;;      Totals:         0       9       0       0       0
  5202 ;;Total ram usage:        9 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; Hardware stack levels required when called:    3
  5205 ;; This function calls:
  5206 ;;		_I2C_Master_Read
  5207 ;;		_I2C_Master_RepeatedStart
  5208 ;;		_I2C_Master_Start
  5209 ;;		_I2C_Master_Stop
  5210 ;;		_I2C_Master_Write
  5211 ;;		___bmul
  5212 ;;		_sprintf
  5213 ;;		_strcat
  5214 ;; This function is called by:
  5215 ;;		_main
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           
  5220                           ;psect for function _get_temp
  5221  0E83                     _get_temp:	
  5222                           
  5223                           ;incstack = 0
  5224                           ; Regs used in _get_temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5225                           ;get_temp@temp_string stored from wreg
  5226  0E83  1283               	bcf	3,5	;RP0=0, select bank0
  5227  0E84  1303               	bcf	3,6	;RP1=0, select bank0
  5228  0E85  00E6               	movwf	get_temp@temp_string
  5229                           
  5230                           ;mainMaster.c: 556:     char tempLSB, tempMSB;;mainMaster.c: 557:     char decimal[3];;m
      +                          ainMaster.c: 559:     I2C_Master_Start();
  5231  0E86  160A  118A  2606  120A  158A  	fcall	_I2C_Master_Start
  5232                           
  5233                           ;mainMaster.c: 560:     I2C_Master_Write(0xD0);
  5234  0E8B  30D0               	movlw	208
  5235  0E8C  00F3               	movwf	I2C_Master_Write@d
  5236  0E8D  3000               	movlw	0
  5237  0E8E  00F4               	movwf	I2C_Master_Write@d+1
  5238  0E8F  160A  118A  261B  120A  158A  	fcall	_I2C_Master_Write
  5239                           
  5240                           ;mainMaster.c: 561:     I2C_Master_Write(0x11);
  5241  0E94  3011               	movlw	17
  5242  0E95  00F3               	movwf	I2C_Master_Write@d
  5243  0E96  3000               	movlw	0
  5244  0E97  00F4               	movwf	I2C_Master_Write@d+1
  5245  0E98  160A  118A  261B  120A  158A  	fcall	_I2C_Master_Write
  5246                           
  5247                           ;mainMaster.c: 562:     I2C_Master_RepeatedStart();
  5248  0E9D  160A  118A  2614  120A  158A  	fcall	_I2C_Master_RepeatedStart
  5249                           
  5250                           ;mainMaster.c: 563:     I2C_Master_Write(0xD1);
  5251  0EA2  30D1               	movlw	209
  5252  0EA3  00F3               	movwf	I2C_Master_Write@d
  5253  0EA4  3000               	movlw	0
  5254  0EA5  00F4               	movwf	I2C_Master_Write@d+1
  5255  0EA6  160A  118A  261B  120A  158A  	fcall	_I2C_Master_Write
  5256                           
  5257                           ;mainMaster.c: 564:     tempMSB = I2C_Master_Read(1);
  5258  0EAB  3001               	movlw	1
  5259  0EAC  00F3               	movwf	I2C_Master_Read@a
  5260  0EAD  3000               	movlw	0
  5261  0EAE  00F4               	movwf	I2C_Master_Read@a+1
  5262  0EAF  160A  118A  279E  120A  158A  	fcall	_I2C_Master_Read
  5263  0EB4  0873               	movf	?_I2C_Master_Read,w
  5264  0EB5  1283               	bcf	3,5	;RP0=0, select bank0
  5265  0EB6  1303               	bcf	3,6	;RP1=0, select bank0
  5266  0EB7  00DF               	movwf	??_get_temp
  5267  0EB8  085F               	movf	??_get_temp,w
  5268  0EB9  00E5               	movwf	get_temp@tempMSB
  5269                           
  5270                           ;mainMaster.c: 565:     tempLSB = I2C_Master_Read(0);
  5271  0EBA  3000               	movlw	0
  5272  0EBB  00F3               	movwf	I2C_Master_Read@a
  5273  0EBC  00F4               	movwf	I2C_Master_Read@a+1
  5274  0EBD  160A  118A  279E  120A  158A  	fcall	_I2C_Master_Read
  5275  0EC2  0873               	movf	?_I2C_Master_Read,w
  5276  0EC3  1283               	bcf	3,5	;RP0=0, select bank0
  5277  0EC4  1303               	bcf	3,6	;RP1=0, select bank0
  5278  0EC5  00DF               	movwf	??_get_temp
  5279  0EC6  085F               	movf	??_get_temp,w
  5280  0EC7  00E7               	movwf	get_temp@tempLSB
  5281                           
  5282                           ;mainMaster.c: 566:     I2C_Master_Stop();
  5283  0EC8  160A  118A  260D  120A  158A  	fcall	_I2C_Master_Stop
  5284                           
  5285                           ;mainMaster.c: 568:     tempMSB = tempMSB - 4;
  5286  0ECD  1283               	bcf	3,5	;RP0=0, select bank0
  5287  0ECE  1303               	bcf	3,6	;RP1=0, select bank0
  5288  0ECF  0865               	movf	get_temp@tempMSB,w
  5289  0ED0  3EFC               	addlw	252
  5290  0ED1  00DF               	movwf	??_get_temp
  5291  0ED2  085F               	movf	??_get_temp,w
  5292  0ED3  00E5               	movwf	get_temp@tempMSB
  5293                           
  5294                           ;mainMaster.c: 569:     tempLSB = (tempLSB >> 6) * 25;
  5295  0ED4  3019               	movlw	25
  5296  0ED5  00DF               	movwf	??_get_temp
  5297  0ED6  085F               	movf	??_get_temp,w
  5298  0ED7  00F3               	movwf	___bmul@multiplicand
  5299  0ED8  0867               	movf	get_temp@tempLSB,w
  5300  0ED9  00E0               	movwf	??_get_temp+1
  5301  0EDA  3006               	movlw	6
  5302  0EDB                     u4015:	
  5303  0EDB  1003               	clrc
  5304  0EDC  0CE0               	rrf	??_get_temp+1,f
  5305  0EDD  3EFF               	addlw	-1
  5306  0EDE  1D03               	skipz
  5307  0EDF  2EDB               	goto	u4015
  5308  0EE0  0860               	movf	??_get_temp+1,w
  5309  0EE1  160A  118A  2654  120A  158A  	fcall	___bmul
  5310  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  5311  0EE7  1303               	bcf	3,6	;RP1=0, select bank0
  5312  0EE8  00E1               	movwf	??_get_temp+2
  5313  0EE9  0861               	movf	??_get_temp+2,w
  5314  0EEA  00E7               	movwf	get_temp@tempLSB
  5315                           
  5316                           ;mainMaster.c: 570:     sprintf(temp_string, "%d", tempMSB);
  5317  0EEB  3060               	movlw	low ((STR_36+1)| (0+32768))
  5318  0EEC  00D0               	movwf	sprintf@f
  5319  0EED  3089               	movlw	high ((STR_36+1)| (0+32768))
  5320  0EEE  00D1               	movwf	sprintf@f+1
  5321  0EEF  0865               	movf	get_temp@tempMSB,w
  5322  0EF0  00DF               	movwf	??_get_temp
  5323  0EF1  01E0               	clrf	??_get_temp+1
  5324  0EF2  085F               	movf	??_get_temp,w
  5325  0EF3  00D2               	movwf	?_sprintf+2
  5326  0EF4  0860               	movf	??_get_temp+1,w
  5327  0EF5  00D3               	movwf	?_sprintf+3
  5328  0EF6  0866               	movf	get_temp@temp_string,w
  5329  0EF7  120A  118A  2704  120A  158A  	fcall	_sprintf
  5330                           
  5331                           ;mainMaster.c: 571:     if (tempLSB == 0){
  5332  0EFC  1283               	bcf	3,5	;RP0=0, select bank0
  5333  0EFD  1303               	bcf	3,6	;RP1=0, select bank0
  5334  0EFE  0867               	movf	get_temp@tempLSB,w
  5335  0EFF  1D03               	btfss	3,2
  5336  0F00  2F05               	goto	l3888
  5337                           
  5338                           ;mainMaster.c: 572:         sprintf(decimal, ".%d0", tempLSB);
  5339  0F01  305A               	movlw	low (STR_35| (0+32768))
  5340  0F02  00D0               	movwf	sprintf@f
  5341  0F03  3089               	movlw	high (STR_35| (0+32768))
  5342  0F04  2F08               	goto	L18
  5343  0F05                     l3888:	
  5344                           ;mainMaster.c: 573:     } else {
  5345                           
  5346                           
  5347                           ;mainMaster.c: 574:         sprintf(decimal, ".%d", tempLSB);
  5348  0F05  305F               	movlw	low (STR_36| (0+32768))
  5349  0F06  00D0               	movwf	sprintf@f
  5350  0F07  3089               	movlw	high (STR_36| (0+32768))
  5351  0F08                     L18:	
  5352  0F08  00D1               	movwf	sprintf@f+1
  5353  0F09  0867               	movf	get_temp@tempLSB,w
  5354  0F0A  00DF               	movwf	??_get_temp
  5355  0F0B  01E0               	clrf	??_get_temp+1
  5356  0F0C  085F               	movf	??_get_temp,w
  5357  0F0D  00D2               	movwf	?_sprintf+2
  5358  0F0E  0860               	movf	??_get_temp+1,w
  5359  0F0F  00D3               	movwf	?_sprintf+3
  5360  0F10  3062               	movlw	(low (get_temp@decimal| 0))& (0+255)
  5361  0F11  120A  118A  2704  120A  158A  	fcall	_sprintf
  5362                           
  5363                           ;mainMaster.c: 576:     strcat(temp_string, decimal);
  5364  0F16  3062               	movlw	(low (get_temp@decimal| 0))& (0+255)
  5365  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  5366  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  5367  0F19  00DF               	movwf	??_get_temp
  5368  0F1A  085F               	movf	??_get_temp,w
  5369  0F1B  00F3               	movwf	strcat@from
  5370  0F1C  0866               	movf	get_temp@temp_string,w
  5371  0F1D  160A  118A  277A   	fcall	_strcat
  5372                           
  5373                           ;mainMaster.c: 577:     temp_string[5] = '\0';
  5374  0F20  1283               	bcf	3,5	;RP0=0, select bank0
  5375  0F21  1303               	bcf	3,6	;RP1=0, select bank0
  5376  0F22  0866               	movf	get_temp@temp_string,w
  5377  0F23  3E05               	addlw	5
  5378  0F24  0084               	movwf	4
  5379  0F25  1383               	bcf	3,7	;select IRP bank0
  5380  0F26  0180               	clrf	0
  5381  0F27  0008               	return
  5382  0F28                     __end_of_get_temp:	
  5383                           
  5384                           	psect	text14
  5385  177A                     __ptext14:	
  5386 ;; *************** function _strcat *****************
  5387 ;; Defined at:
  5388 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strcat.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;  to              1    wreg     PTR unsigned char 
  5391 ;;		 -> temp(6), 
  5392 ;;  from            1    3[COMMON] PTR const unsigned char 
  5393 ;;		 -> get_temp@decimal(3), 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  to              1    5[COMMON] PTR unsigned char 
  5396 ;;		 -> temp(6), 
  5397 ;;  cp              1    6[COMMON] PTR unsigned char 
  5398 ;;		 -> temp(6), 
  5399 ;; Return value:  Size  Location     Type
  5400 ;;                  1    wreg      PTR unsigned char 
  5401 ;; Registers used:
  5402 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5408 ;;      Params:         1       0       0       0       0
  5409 ;;      Locals:         2       0       0       0       0
  5410 ;;      Temps:          1       0       0       0       0
  5411 ;;      Totals:         4       0       0       0       0
  5412 ;;Total ram usage:        4 bytes
  5413 ;; Hardware stack levels used:    1
  5414 ;; Hardware stack levels required when called:    1
  5415 ;; This function calls:
  5416 ;;		Nothing
  5417 ;; This function is called by:
  5418 ;;		_get_temp
  5419 ;; This function uses a non-reentrant model
  5420 ;;
  5421                           
  5422                           
  5423                           ;psect for function _strcat
  5424  177A                     _strcat:	
  5425                           
  5426                           ;incstack = 0
  5427                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0]
  5428                           ;strcat@to stored from wreg
  5429  177A  00F5               	movwf	strcat@to
  5430  177B  0875               	movf	strcat@to,w
  5431  177C  00F4               	movwf	??_strcat
  5432  177D  0874               	movf	??_strcat,w
  5433  177E  00F6               	movwf	strcat@cp
  5434  177F                     l2676:	
  5435  177F  0876               	movf	strcat@cp,w
  5436  1780  0084               	movwf	4
  5437  1781  1383               	bcf	3,7	;select IRP bank0
  5438  1782  0800               	movf	0,w
  5439  1783  1903               	btfsc	3,2
  5440  1784  2F92               	goto	l2680
  5441  1785  3001               	movlw	1
  5442  1786  00F4               	movwf	??_strcat
  5443  1787  0874               	movf	??_strcat,w
  5444  1788  07F6               	addwf	strcat@cp,f
  5445  1789  2F7F               	goto	l2676
  5446  178A                     l2678:	
  5447  178A  3001               	movlw	1
  5448  178B  00F4               	movwf	??_strcat
  5449  178C  0874               	movf	??_strcat,w
  5450  178D  07F6               	addwf	strcat@cp,f
  5451  178E  3001               	movlw	1
  5452  178F  00F4               	movwf	??_strcat
  5453  1790  0874               	movf	??_strcat,w
  5454  1791  07F3               	addwf	strcat@from,f
  5455  1792                     l2680:	
  5456  1792  0873               	movf	strcat@from,w
  5457  1793  0084               	movwf	4
  5458  1794  0800               	movf	0,w
  5459  1795  00F4               	movwf	??_strcat
  5460  1796  0876               	movf	strcat@cp,w
  5461  1797  0084               	movwf	4
  5462  1798  0874               	movf	??_strcat,w
  5463  1799  0080               	movwf	0
  5464  179A  0800               	movf	0,w
  5465  179B  1903               	btfsc	3,2
  5466  179C  0008               	return
  5467  179D  2F8A               	goto	l2678
  5468  179E                     __end_of_strcat:	
  5469                           
  5470                           	psect	text15
  5471  0704                     __ptext15:	
  5472 ;; *************** function _sprintf *****************
  5473 ;; Defined at:
  5474 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  5475 ;; Parameters:    Size  Location     Type
  5476 ;;  sp              1    wreg     PTR unsigned char 
  5477 ;;		 -> get_temp@decimal(3), temp(6), 
  5478 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  5479 ;;		 -> STR_36(4), STR_35(5), STR_34(3), 
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;  sp              1   22[BANK0 ] PTR unsigned char 
  5482 ;;		 -> get_temp@decimal(3), temp(6), 
  5483 ;;  tmpval          4    0        struct .
  5484 ;;  val             2   20[BANK0 ] unsigned int 
  5485 ;;  cp              2    0        PTR const unsigned char 
  5486 ;;  len             2    0        unsigned int 
  5487 ;;  c               1   23[BANK0 ] unsigned char 
  5488 ;;  prec            1   19[BANK0 ] char 
  5489 ;;  flag            1   18[BANK0 ] unsigned char 
  5490 ;;  ap              1   17[BANK0 ] PTR void [1]
  5491 ;;		 -> ?_sprintf(2), 
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  2    9[BANK0 ] int 
  5494 ;; Registers used:
  5495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5501 ;;      Params:         0       4       0       0       0
  5502 ;;      Locals:         0       7       0       0       0
  5503 ;;      Temps:          0       4       0       0       0
  5504 ;;      Totals:         0      15       0       0       0
  5505 ;;Total ram usage:       15 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; Hardware stack levels required when called:    2
  5508 ;; This function calls:
  5509 ;;		___lwdiv
  5510 ;;		___lwmod
  5511 ;; This function is called by:
  5512 ;;		_get_temp
  5513 ;; This function uses a non-reentrant model
  5514 ;;
  5515                           
  5516                           
  5517                           ;psect for function _sprintf
  5518  0704                     _sprintf:	
  5519                           
  5520                           ;incstack = 0
  5521                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5522                           ;sprintf@sp stored from wreg
  5523  0704  1283               	bcf	3,5	;RP0=0, select bank0
  5524  0705  1303               	bcf	3,6	;RP1=0, select bank0
  5525  0706  00DD               	movwf	sprintf@sp
  5526                           
  5527                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  5528  0707  3052               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5529  0708  00D4               	movwf	??_sprintf
  5530  0709  0854               	movf	??_sprintf,w
  5531  070A  00D8               	movwf	sprintf@ap
  5532  070B                     l3772:	
  5533                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5534                           
  5535                           
  5536                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5537  070B  0851               	movf	sprintf@f+1,w
  5538  070C  00D5               	movwf	??_sprintf+1
  5539  070D  0850               	movf	sprintf@f,w
  5540  070E  00D4               	movwf	??_sprintf
  5541  070F  0AD0               	incf	sprintf@f,f
  5542  0710  1903               	skipnz
  5543  0711  0AD1               	incf	sprintf@f+1,f
  5544  0712  0855               	movf	??_sprintf+1,w
  5545  0713  00FF               	movwf	127
  5546  0714  0854               	movf	??_sprintf,w
  5547  0715  0084               	movwf	4
  5548  0716  120A  158A  2000  120A  118A  	fcall	stringtab
  5549  071B  00D6               	movwf	??_sprintf+2
  5550  071C  0856               	movf	??_sprintf+2,w
  5551  071D  00DE               	movwf	sprintf@c
  5552  071E  085E               	movf	sprintf@c,w
  5553  071F  1903               	btfsc	3,2
  5554  0720  2FED               	goto	l3774
  5555                           
  5556                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  5557  0721  3025               	movlw	37
  5558  0722  065E               	xorwf	sprintf@c,w
  5559  0723  1903               	btfsc	3,2
  5560  0724  2F31               	goto	l3728
  5561                           
  5562                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  5563  0725  085E               	movf	sprintf@c,w
  5564  0726  00D4               	movwf	??_sprintf
  5565  0727  085D               	movf	sprintf@sp,w
  5566  0728  0084               	movwf	4
  5567  0729  0854               	movf	??_sprintf,w
  5568  072A  1383               	bcf	3,7	;select IRP bank0
  5569  072B  0080               	movwf	0
  5570  072C  3001               	movlw	1
  5571  072D  00D4               	movwf	??_sprintf
  5572  072E  0854               	movf	??_sprintf,w
  5573  072F  07DD               	addwf	sprintf@sp,f
  5574                           
  5575                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  5576  0730  2F0B               	goto	l3772
  5577  0731                     l3728:	
  5578                           
  5579                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  5580  0731  01D9               	clrf	sprintf@flag
  5581                           
  5582                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  5583  0732  0851               	movf	sprintf@f+1,w
  5584  0733  00D5               	movwf	??_sprintf+1
  5585  0734  0850               	movf	sprintf@f,w
  5586  0735  00D4               	movwf	??_sprintf
  5587  0736  0AD0               	incf	sprintf@f,f
  5588  0737  1903               	skipnz
  5589  0738  0AD1               	incf	sprintf@f+1,f
  5590  0739  0855               	movf	??_sprintf+1,w
  5591  073A  00FF               	movwf	127
  5592  073B  0854               	movf	??_sprintf,w
  5593  073C  0084               	movwf	4
  5594  073D  120A  158A  2000  120A  118A  	fcall	stringtab
  5595  0742  00DE               	movwf	sprintf@c
  5596  0743  00D6               	movwf	??_sprintf+2
  5597  0744  01D7               	clrf	??_sprintf+3
  5598                           
  5599                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5600                           ; Switch size 1, requested type "simple"
  5601                           ; Number of cases is 1, Range of values is 0 to 0
  5602                           ; switch strategies available:
  5603                           ; Name         Instructions Cycles
  5604                           ; simple_byte            4     3 (average)
  5605                           ; direct_byte           11     8 (fixed)
  5606                           ; jumptable            260     6 (fixed)
  5607                           ;	Chosen strategy is simple_byte
  5608  0745  0857               	movf	??_sprintf+3,w
  5609  0746  3A00               	xorlw	0	; case 0
  5610  0747  1903               	skipnz
  5611  0748  2F4A               	goto	l4554
  5612  0749  2F0B               	goto	l3772
  5613  074A                     l4554:	
  5614                           
  5615                           ; Switch size 1, requested type "simple"
  5616                           ; Number of cases is 3, Range of values is 0 to 105
  5617                           ; switch strategies available:
  5618                           ; Name         Instructions Cycles
  5619                           ; simple_byte           10     6 (average)
  5620                           ; jumptable            260     6 (fixed)
  5621                           ;	Chosen strategy is simple_byte
  5622  074A  0856               	movf	??_sprintf+2,w
  5623  074B  3A00               	xorlw	0	; case 0
  5624  074C  1903               	skipnz
  5625  074D  2FED               	goto	l3774
  5626  074E  3A64               	xorlw	100	; case 100
  5627  074F  1903               	skipnz
  5628  0750  2F55               	goto	l3734
  5629  0751  3A0D               	xorlw	13	; case 105
  5630  0752  1903               	skipnz
  5631  0753  2F55               	goto	l3734
  5632  0754  2F0B               	goto	l3772
  5633  0755                     l3734:	
  5634                           
  5635                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5636  0755  0858               	movf	sprintf@ap,w
  5637  0756  0084               	movwf	4
  5638  0757  1383               	bcf	3,7	;select IRP bank0
  5639  0758  0800               	movf	0,w
  5640  0759  00DB               	movwf	sprintf@val
  5641  075A  0A84               	incf	4,f
  5642  075B  0800               	movf	0,w
  5643  075C  00DC               	movwf	sprintf@val+1
  5644  075D  3002               	movlw	2
  5645  075E  00D4               	movwf	??_sprintf
  5646  075F  0854               	movf	??_sprintf,w
  5647  0760  07D8               	addwf	sprintf@ap,f
  5648                           
  5649                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  5650  0761  1FDC               	btfss	sprintf@val+1,7
  5651  0762  2F6C               	goto	l3744
  5652                           
  5653                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  5654  0763  3003               	movlw	3
  5655  0764  00D4               	movwf	??_sprintf
  5656  0765  0854               	movf	??_sprintf,w
  5657  0766  04D9               	iorwf	sprintf@flag,f
  5658                           
  5659                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  5660  0767  09DB               	comf	sprintf@val,f
  5661  0768  09DC               	comf	sprintf@val+1,f
  5662  0769  0ADB               	incf	sprintf@val,f
  5663  076A  1903               	skipnz
  5664  076B  0ADC               	incf	sprintf@val+1,f
  5665  076C                     l3744:	
  5666                           
  5667                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5668  076C  01DE               	clrf	sprintf@c
  5669  076D  0ADE               	incf	sprintf@c,f
  5670  076E                     l3750:	
  5671                           
  5672                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  5673  076E  085E               	movf	sprintf@c,w
  5674  076F  00D4               	movwf	??_sprintf
  5675  0770  0754               	addwf	??_sprintf,w
  5676  0771  3E12               	addlw	low (_dpowers| (0+32768))
  5677  0772  0084               	movwf	4
  5678  0773  3088               	movlw	high (_dpowers| (0+32768))
  5679  0774  1803               	skipnc
  5680  0775  3E01               	addlw	1
  5681  0776  00FF               	movwf	127
  5682  0777  120A  158A  2000  120A  118A  	fcall	stringtab
  5683  077C  00D5               	movwf	??_sprintf+1
  5684  077D  120A  158A  2000  120A  118A  	fcall	stringtab
  5685  0782  00D6               	movwf	??_sprintf+2
  5686  0783  0856               	movf	??_sprintf+2,w
  5687  0784  025C               	subwf	sprintf@val+1,w
  5688  0785  1D03               	skipz
  5689  0786  2F89               	goto	u3895
  5690  0787  0855               	movf	??_sprintf+1,w
  5691  0788  025B               	subwf	sprintf@val,w
  5692  0789                     u3895:	
  5693  0789  1C03               	btfss	3,0
  5694  078A  2F93               	goto	l3756
  5695  078B  3001               	movlw	1
  5696  078C  00D4               	movwf	??_sprintf
  5697  078D  0854               	movf	??_sprintf,w
  5698  078E  07DE               	addwf	sprintf@c,f
  5699  078F  3005               	movlw	5
  5700  0790  065E               	xorwf	sprintf@c,w
  5701  0791  1D03               	btfss	3,2
  5702  0792  2F6E               	goto	l3750
  5703  0793                     l3756:	
  5704                           
  5705                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  5706  0793  0859               	movf	sprintf@flag,w
  5707  0794  3903               	andlw	3
  5708  0795  1903               	btfsc	3,2
  5709  0796  2FA2               	goto	l3762
  5710                           
  5711                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  5712  0797  302D               	movlw	45
  5713  0798  00D4               	movwf	??_sprintf
  5714  0799  085D               	movf	sprintf@sp,w
  5715  079A  0084               	movwf	4
  5716  079B  0854               	movf	??_sprintf,w
  5717  079C  1383               	bcf	3,7	;select IRP bank0
  5718  079D  0080               	movwf	0
  5719  079E  3001               	movlw	1
  5720  079F  00D4               	movwf	??_sprintf
  5721  07A0  0854               	movf	??_sprintf,w
  5722  07A1  07DD               	addwf	sprintf@sp,f
  5723  07A2                     l3762:	
  5724                           
  5725                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  5726  07A2  085E               	movf	sprintf@c,w
  5727  07A3  00D4               	movwf	??_sprintf
  5728  07A4  0854               	movf	??_sprintf,w
  5729  07A5  00DA               	movwf	sprintf@prec
  5730  07A6                     l3770:	
  5731                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5732                           
  5733                           
  5734                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5735  07A6  30FF               	movlw	255
  5736  07A7  00D4               	movwf	??_sprintf
  5737  07A8  0854               	movf	??_sprintf,w
  5738  07A9  07DA               	addwf	sprintf@prec,f
  5739  07AA  0A5A               	incf	sprintf@prec,w
  5740  07AB  1903               	btfsc	3,2
  5741  07AC  2F0B               	goto	l3772
  5742                           
  5743                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  5744  07AD  300A               	movlw	10
  5745  07AE  00CA               	movwf	___lwmod@divisor
  5746  07AF  3000               	movlw	0
  5747  07B0  00CB               	movwf	___lwmod@divisor+1
  5748  07B1  085A               	movf	sprintf@prec,w
  5749  07B2  00D4               	movwf	??_sprintf
  5750  07B3  0754               	addwf	??_sprintf,w
  5751  07B4  3E12               	addlw	low (_dpowers| (0+32768))
  5752  07B5  0084               	movwf	4
  5753  07B6  3088               	movlw	high (_dpowers| (0+32768))
  5754  07B7  1803               	skipnc
  5755  07B8  3E01               	addlw	1
  5756  07B9  00FF               	movwf	127
  5757  07BA  120A  158A  2000  120A  118A  	fcall	stringtab
  5758  07BF  00F3               	movwf	___lwdiv@divisor
  5759  07C0  120A  158A  2000  120A  118A  	fcall	stringtab
  5760  07C5  00F4               	movwf	___lwdiv@divisor+1
  5761  07C6  085C               	movf	sprintf@val+1,w
  5762  07C7  00F6               	movwf	___lwdiv@dividend+1
  5763  07C8  085B               	movf	sprintf@val,w
  5764  07C9  00F5               	movwf	___lwdiv@dividend
  5765  07CA  120A  158A  223E  120A  118A  	fcall	___lwdiv
  5766  07CF  0874               	movf	?___lwdiv+1,w
  5767  07D0  1283               	bcf	3,5	;RP0=0, select bank0
  5768  07D1  1303               	bcf	3,6	;RP1=0, select bank0
  5769  07D2  00CD               	movwf	___lwmod@dividend+1
  5770  07D3  0873               	movf	?___lwdiv,w
  5771  07D4  00CC               	movwf	___lwmod@dividend
  5772  07D5  160A  118A  27CC  120A  118A  	fcall	___lwmod
  5773  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  5774  07DB  1303               	bcf	3,6	;RP1=0, select bank0
  5775  07DC  084A               	movf	?___lwmod,w
  5776  07DD  3E30               	addlw	48
  5777  07DE  00D5               	movwf	??_sprintf+1
  5778  07DF  0855               	movf	??_sprintf+1,w
  5779  07E0  00DE               	movwf	sprintf@c
  5780                           
  5781                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  5782  07E1  085E               	movf	sprintf@c,w
  5783  07E2  00D4               	movwf	??_sprintf
  5784  07E3  085D               	movf	sprintf@sp,w
  5785  07E4  0084               	movwf	4
  5786  07E5  0854               	movf	??_sprintf,w
  5787  07E6  1383               	bcf	3,7	;select IRP bank0
  5788  07E7  0080               	movwf	0
  5789  07E8  3001               	movlw	1
  5790  07E9  00D4               	movwf	??_sprintf
  5791  07EA  0854               	movf	??_sprintf,w
  5792  07EB  07DD               	addwf	sprintf@sp,f
  5793  07EC  2FA6               	goto	l3770
  5794  07ED                     l3774:	
  5795                           
  5796                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  5797  07ED  085D               	movf	sprintf@sp,w
  5798  07EE  0084               	movwf	4
  5799  07EF  1383               	bcf	3,7	;select IRP bank0
  5800  07F0  0180               	clrf	0
  5801  07F1  0008               	return
  5802  07F2                     __end_of_sprintf:	
  5803                           
  5804                           	psect	text16
  5805  17CC                     __ptext16:	
  5806 ;; *************** function ___lwmod *****************
  5807 ;; Defined at:
  5808 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;  divisor         2    3[BANK0 ] unsigned int 
  5811 ;;  dividend        2    5[BANK0 ] unsigned int 
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;  counter         1    8[BANK0 ] unsigned char 
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  2    3[BANK0 ] unsigned int 
  5816 ;; Registers used:
  5817 ;;		wreg, status,2, status,0
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5823 ;;      Params:         0       4       0       0       0
  5824 ;;      Locals:         0       1       0       0       0
  5825 ;;      Temps:          0       1       0       0       0
  5826 ;;      Totals:         0       6       0       0       0
  5827 ;;Total ram usage:        6 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    1
  5830 ;; This function calls:
  5831 ;;		Nothing
  5832 ;; This function is called by:
  5833 ;;		_sprintf
  5834 ;; This function uses a non-reentrant model
  5835 ;;
  5836                           
  5837                           
  5838                           ;psect for function ___lwmod
  5839  17CC                     ___lwmod:	
  5840                           
  5841                           ;incstack = 0
  5842                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5843  17CC  1283               	bcf	3,5	;RP0=0, select bank0
  5844  17CD  1303               	bcf	3,6	;RP1=0, select bank0
  5845  17CE  084A               	movf	___lwmod@divisor,w
  5846  17CF  044B               	iorwf	___lwmod@divisor+1,w
  5847  17D0  1903               	btfsc	3,2
  5848  17D1  2FFB               	goto	l2478
  5849  17D2  01CF               	clrf	___lwmod@counter
  5850  17D3  0ACF               	incf	___lwmod@counter,f
  5851  17D4                     l2468:	
  5852  17D4  1BCB               	btfsc	___lwmod@divisor+1,7
  5853  17D5  2FE2               	goto	l2470
  5854  17D6  3001               	movlw	1
  5855  17D7                     u2085:	
  5856  17D7  1003               	clrc
  5857  17D8  0DCA               	rlf	___lwmod@divisor,f
  5858  17D9  0DCB               	rlf	___lwmod@divisor+1,f
  5859  17DA  3EFF               	addlw	-1
  5860  17DB  1D03               	skipz
  5861  17DC  2FD7               	goto	u2085
  5862  17DD  3001               	movlw	1
  5863  17DE  00CE               	movwf	??___lwmod
  5864  17DF  084E               	movf	??___lwmod,w
  5865  17E0  07CF               	addwf	___lwmod@counter,f
  5866  17E1  2FD4               	goto	l2468
  5867  17E2                     l2470:	
  5868  17E2  084B               	movf	___lwmod@divisor+1,w
  5869  17E3  024D               	subwf	___lwmod@dividend+1,w
  5870  17E4  1D03               	skipz
  5871  17E5  2FE8               	goto	u2105
  5872  17E6  084A               	movf	___lwmod@divisor,w
  5873  17E7  024C               	subwf	___lwmod@dividend,w
  5874  17E8                     u2105:	
  5875  17E8  1C03               	skipc
  5876  17E9  2FF0               	goto	l2474
  5877  17EA  084A               	movf	___lwmod@divisor,w
  5878  17EB  02CC               	subwf	___lwmod@dividend,f
  5879  17EC  084B               	movf	___lwmod@divisor+1,w
  5880  17ED  1C03               	skipc
  5881  17EE  03CD               	decf	___lwmod@dividend+1,f
  5882  17EF  02CD               	subwf	___lwmod@dividend+1,f
  5883  17F0                     l2474:	
  5884  17F0  3001               	movlw	1
  5885  17F1                     u2115:	
  5886  17F1  1003               	clrc
  5887  17F2  0CCB               	rrf	___lwmod@divisor+1,f
  5888  17F3  0CCA               	rrf	___lwmod@divisor,f
  5889  17F4  3EFF               	addlw	-1
  5890  17F5  1D03               	skipz
  5891  17F6  2FF1               	goto	u2115
  5892  17F7  3001               	movlw	1
  5893  17F8  02CF               	subwf	___lwmod@counter,f
  5894  17F9  1D03               	btfss	3,2
  5895  17FA  2FE2               	goto	l2470
  5896  17FB                     l2478:	
  5897  17FB  084D               	movf	___lwmod@dividend+1,w
  5898  17FC  00CB               	movwf	?___lwmod+1
  5899  17FD  084C               	movf	___lwmod@dividend,w
  5900  17FE  00CA               	movwf	?___lwmod
  5901  17FF  0008               	return
  5902  1800                     __end_of___lwmod:	
  5903                           
  5904                           	psect	text17
  5905  0A3E                     __ptext17:	
  5906 ;; *************** function ___lwdiv *****************
  5907 ;; Defined at:
  5908 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;  divisor         2    3[COMMON] unsigned int 
  5911 ;;  dividend        2    5[COMMON] unsigned int 
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;  quotient        2    1[BANK0 ] unsigned int 
  5914 ;;  counter         1    0[BANK0 ] unsigned char 
  5915 ;; Return value:  Size  Location     Type
  5916 ;;                  2    3[COMMON] unsigned int 
  5917 ;; Registers used:
  5918 ;;		wreg, status,2, status,0
  5919 ;; Tracked objects:
  5920 ;;		On entry : 0/0
  5921 ;;		On exit  : 0/0
  5922 ;;		Unchanged: 0/0
  5923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5924 ;;      Params:         4       0       0       0       0
  5925 ;;      Locals:         0       3       0       0       0
  5926 ;;      Temps:          1       0       0       0       0
  5927 ;;      Totals:         5       3       0       0       0
  5928 ;;Total ram usage:        8 bytes
  5929 ;; Hardware stack levels used:    1
  5930 ;; Hardware stack levels required when called:    1
  5931 ;; This function calls:
  5932 ;;		Nothing
  5933 ;; This function is called by:
  5934 ;;		_sprintf
  5935 ;; This function uses a non-reentrant model
  5936 ;;
  5937                           
  5938                           
  5939                           ;psect for function ___lwdiv
  5940  0A3E                     ___lwdiv:	
  5941                           
  5942                           ;incstack = 0
  5943                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5944  0A3E  1283               	bcf	3,5	;RP0=0, select bank0
  5945  0A3F  1303               	bcf	3,6	;RP1=0, select bank0
  5946  0A40  01C8               	clrf	___lwdiv@quotient
  5947  0A41  01C9               	clrf	___lwdiv@quotient+1
  5948  0A42  0873               	movf	___lwdiv@divisor,w
  5949  0A43  0474               	iorwf	___lwdiv@divisor+1,w
  5950  0A44  1903               	btfsc	3,2
  5951  0A45  2A77               	goto	l3636
  5952  0A46  01C7               	clrf	___lwdiv@counter
  5953  0A47  0AC7               	incf	___lwdiv@counter,f
  5954  0A48                     l3624:	
  5955  0A48  1BF4               	btfsc	___lwdiv@divisor+1,7
  5956  0A49  2A56               	goto	l3626
  5957  0A4A  3001               	movlw	1
  5958  0A4B                     u3715:	
  5959  0A4B  1003               	clrc
  5960  0A4C  0DF3               	rlf	___lwdiv@divisor,f
  5961  0A4D  0DF4               	rlf	___lwdiv@divisor+1,f
  5962  0A4E  3EFF               	addlw	-1
  5963  0A4F  1D03               	skipz
  5964  0A50  2A4B               	goto	u3715
  5965  0A51  3001               	movlw	1
  5966  0A52  00F7               	movwf	??___lwdiv
  5967  0A53  0877               	movf	??___lwdiv,w
  5968  0A54  07C7               	addwf	___lwdiv@counter,f
  5969  0A55  2A48               	goto	l3624
  5970  0A56                     l3626:	
  5971  0A56  3001               	movlw	1
  5972  0A57                     u3735:	
  5973  0A57  1003               	clrc
  5974  0A58  0DC8               	rlf	___lwdiv@quotient,f
  5975  0A59  0DC9               	rlf	___lwdiv@quotient+1,f
  5976  0A5A  3EFF               	addlw	-1
  5977  0A5B  1D03               	skipz
  5978  0A5C  2A57               	goto	u3735
  5979  0A5D  0874               	movf	___lwdiv@divisor+1,w
  5980  0A5E  0276               	subwf	___lwdiv@dividend+1,w
  5981  0A5F  1D03               	skipz
  5982  0A60  2A63               	goto	u3745
  5983  0A61  0873               	movf	___lwdiv@divisor,w
  5984  0A62  0275               	subwf	___lwdiv@dividend,w
  5985  0A63                     u3745:	
  5986  0A63  1C03               	skipc
  5987  0A64  2A6C               	goto	l3632
  5988  0A65  0873               	movf	___lwdiv@divisor,w
  5989  0A66  02F5               	subwf	___lwdiv@dividend,f
  5990  0A67  0874               	movf	___lwdiv@divisor+1,w
  5991  0A68  1C03               	skipc
  5992  0A69  03F6               	decf	___lwdiv@dividend+1,f
  5993  0A6A  02F6               	subwf	___lwdiv@dividend+1,f
  5994  0A6B  1448               	bsf	___lwdiv@quotient,0
  5995  0A6C                     l3632:	
  5996  0A6C  3001               	movlw	1
  5997  0A6D                     u3755:	
  5998  0A6D  1003               	clrc
  5999  0A6E  0CF4               	rrf	___lwdiv@divisor+1,f
  6000  0A6F  0CF3               	rrf	___lwdiv@divisor,f
  6001  0A70  3EFF               	addlw	-1
  6002  0A71  1D03               	skipz
  6003  0A72  2A6D               	goto	u3755
  6004  0A73  3001               	movlw	1
  6005  0A74  02C7               	subwf	___lwdiv@counter,f
  6006  0A75  1D03               	btfss	3,2
  6007  0A76  2A56               	goto	l3626
  6008  0A77                     l3636:	
  6009  0A77  0849               	movf	___lwdiv@quotient+1,w
  6010  0A78  00F4               	movwf	?___lwdiv+1
  6011  0A79  0848               	movf	___lwdiv@quotient,w
  6012  0A7A  00F3               	movwf	?___lwdiv
  6013  0A7B  0008               	return
  6014  0A7C                     __end_of___lwdiv:	
  6015                           
  6016                           	psect	text18
  6017  1654                     __ptext18:	
  6018 ;; *************** function ___bmul *****************
  6019 ;; Defined at:
  6020 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;  multiplier      1    wreg     unsigned char 
  6023 ;;  multiplicand    1    3[COMMON] unsigned char 
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;  multiplier      1    6[COMMON] unsigned char 
  6026 ;;  product         1    5[COMMON] unsigned char 
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  1    wreg      unsigned char 
  6029 ;; Registers used:
  6030 ;;		wreg, status,2, status,0
  6031 ;; Tracked objects:
  6032 ;;		On entry : 0/0
  6033 ;;		On exit  : 0/0
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6036 ;;      Params:         1       0       0       0       0
  6037 ;;      Locals:         2       0       0       0       0
  6038 ;;      Temps:          1       0       0       0       0
  6039 ;;      Totals:         4       0       0       0       0
  6040 ;;Total ram usage:        4 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; Hardware stack levels required when called:    1
  6043 ;; This function calls:
  6044 ;;		Nothing
  6045 ;; This function is called by:
  6046 ;;		_main
  6047 ;;		_get_temp
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051                           
  6052                           ;psect for function ___bmul
  6053  1654                     ___bmul:	
  6054                           
  6055                           ;incstack = 0
  6056                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6057                           ;___bmul@multiplier stored from wreg
  6058  1654  00F6               	movwf	___bmul@multiplier
  6059  1655  01F5               	clrf	___bmul@product
  6060  1656                     l2684:	
  6061  1656  1C76               	btfss	___bmul@multiplier,0
  6062  1657  2E5C               	goto	l2688
  6063  1658  0873               	movf	___bmul@multiplicand,w
  6064  1659  00F4               	movwf	??___bmul
  6065  165A  0874               	movf	??___bmul,w
  6066  165B  07F5               	addwf	___bmul@product,f
  6067  165C                     l2688:	
  6068  165C  1003               	clrc
  6069  165D  0DF3               	rlf	___bmul@multiplicand,f
  6070  165E  1003               	clrc
  6071  165F  0CF6               	rrf	___bmul@multiplier,f
  6072  1660  0876               	movf	___bmul@multiplier,w
  6073  1661  1D03               	btfss	3,2
  6074  1662  2E56               	goto	l2684
  6075  1663  0875               	movf	___bmul@product,w
  6076  1664  0008               	return
  6077  1665                     __end_of___bmul:	
  6078                           
  6079                           	psect	text19
  6080  1734                     __ptext19:	
  6081 ;; *************** function _get_hall *****************
  6082 ;; Defined at:
  6083 ;;		line 581 in file "mainMaster.c"
  6084 ;; Parameters:    Size  Location     Type
  6085 ;;		None
  6086 ;; Auto vars:     Size  Location     Type
  6087 ;;  key             1    2[BANK0 ] unsigned char 
  6088 ;; Return value:  Size  Location     Type
  6089 ;;                  1    wreg      unsigned char 
  6090 ;; Registers used:
  6091 ;;		wreg, status,2, status,0, pclath, cstack
  6092 ;; Tracked objects:
  6093 ;;		On entry : 0/0
  6094 ;;		On exit  : 0/0
  6095 ;;		Unchanged: 0/0
  6096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6097 ;;      Params:         0       0       0       0       0
  6098 ;;      Locals:         0       1       0       0       0
  6099 ;;      Temps:          1       0       0       0       0
  6100 ;;      Totals:         1       1       0       0       0
  6101 ;;Total ram usage:        2 bytes
  6102 ;; Hardware stack levels used:    1
  6103 ;; Hardware stack levels required when called:    3
  6104 ;; This function calls:
  6105 ;;		_I2C_Master_Read
  6106 ;;		_I2C_Master_Start
  6107 ;;		_I2C_Master_Stop
  6108 ;;		_I2C_Master_Write
  6109 ;; This function is called by:
  6110 ;;		_main
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114                           
  6115                           ;psect for function _get_hall
  6116  1734                     _get_hall:	
  6117                           
  6118                           ;mainMaster.c: 583:     char key;;mainMaster.c: 585:     I2C_Master_Start();
  6119                           
  6120                           ;incstack = 0
  6121                           ; Regs used in _get_hall: [wreg+status,2+status,0+pclath+cstack]
  6122  1734  160A  118A  2606  160A  118A  	fcall	_I2C_Master_Start
  6123                           
  6124                           ;mainMaster.c: 586:     I2C_Master_Write(0x11);
  6125  1739  3011               	movlw	17
  6126  173A  00F3               	movwf	I2C_Master_Write@d
  6127  173B  3000               	movlw	0
  6128  173C  00F4               	movwf	I2C_Master_Write@d+1
  6129  173D  160A  118A  261B  160A  118A  	fcall	_I2C_Master_Write
  6130                           
  6131                           ;mainMaster.c: 587:     key = I2C_Master_Read(0);
  6132  1742  3000               	movlw	0
  6133  1743  00F3               	movwf	I2C_Master_Read@a
  6134  1744  00F4               	movwf	I2C_Master_Read@a+1
  6135  1745  160A  118A  279E  160A  118A  	fcall	_I2C_Master_Read
  6136  174A  0873               	movf	?_I2C_Master_Read,w
  6137  174B  00F7               	movwf	??_get_hall
  6138  174C  0877               	movf	??_get_hall,w
  6139  174D  1283               	bcf	3,5	;RP0=0, select bank0
  6140  174E  1303               	bcf	3,6	;RP1=0, select bank0
  6141  174F  00C9               	movwf	get_hall@key
  6142                           
  6143                           ;mainMaster.c: 588:     I2C_Master_Stop();
  6144  1750  160A  118A  260D   	fcall	_I2C_Master_Stop
  6145                           
  6146                           ;mainMaster.c: 590:     return (key);
  6147  1753  1283               	bcf	3,5	;RP0=0, select bank0
  6148  1754  1303               	bcf	3,6	;RP1=0, select bank0
  6149  1755  0849               	movf	get_hall@key,w
  6150  1756  0008               	return
  6151  1757                     __end_of_get_hall:	
  6152                           
  6153                           	psect	text20
  6154  0A04                     __ptext20:	
  6155 ;; *************** function _get_day *****************
  6156 ;; Defined at:
  6157 ;;		line 539 in file "mainMaster.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;		None
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;  d               1    2[BANK0 ] unsigned char 
  6162 ;; Return value:  Size  Location     Type
  6163 ;;                  1    wreg      unsigned char 
  6164 ;; Registers used:
  6165 ;;		wreg, status,2, status,0, pclath, cstack
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6171 ;;      Params:         0       0       0       0       0
  6172 ;;      Locals:         0       1       0       0       0
  6173 ;;      Temps:          1       0       0       0       0
  6174 ;;      Totals:         1       1       0       0       0
  6175 ;;Total ram usage:        2 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; Hardware stack levels required when called:    3
  6178 ;; This function calls:
  6179 ;;		_I2C_Master_Read
  6180 ;;		_I2C_Master_RepeatedStart
  6181 ;;		_I2C_Master_Start
  6182 ;;		_I2C_Master_Stop
  6183 ;;		_I2C_Master_Write
  6184 ;; This function is called by:
  6185 ;;		_main
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           
  6190                           ;psect for function _get_day
  6191  0A04                     _get_day:	
  6192                           
  6193                           ;mainMaster.c: 541:     char d;;mainMaster.c: 543:     I2C_Master_Start();
  6194                           
  6195                           ;incstack = 0
  6196                           ; Regs used in _get_day: [wreg+status,2+status,0+pclath+cstack]
  6197  0A04  160A  118A  2606  120A  158A  	fcall	_I2C_Master_Start
  6198                           
  6199                           ;mainMaster.c: 544:     I2C_Master_Write(0xD0);
  6200  0A09  30D0               	movlw	208
  6201  0A0A  00F3               	movwf	I2C_Master_Write@d
  6202  0A0B  3000               	movlw	0
  6203  0A0C  00F4               	movwf	I2C_Master_Write@d+1
  6204  0A0D  160A  118A  261B  120A  158A  	fcall	_I2C_Master_Write
  6205                           
  6206                           ;mainMaster.c: 545:     I2C_Master_Write(0x03);
  6207  0A12  3003               	movlw	3
  6208  0A13  00F3               	movwf	I2C_Master_Write@d
  6209  0A14  3000               	movlw	0
  6210  0A15  00F4               	movwf	I2C_Master_Write@d+1
  6211  0A16  160A  118A  261B  120A  158A  	fcall	_I2C_Master_Write
  6212                           
  6213                           ;mainMaster.c: 546:     I2C_Master_RepeatedStart();
  6214  0A1B  160A  118A  2614  120A  158A  	fcall	_I2C_Master_RepeatedStart
  6215                           
  6216                           ;mainMaster.c: 547:     I2C_Master_Write(0xD1);
  6217  0A20  30D1               	movlw	209
  6218  0A21  00F3               	movwf	I2C_Master_Write@d
  6219  0A22  3000               	movlw	0
  6220  0A23  00F4               	movwf	I2C_Master_Write@d+1
  6221  0A24  160A  118A  261B  120A  158A  	fcall	_I2C_Master_Write
  6222                           
  6223                           ;mainMaster.c: 548:     d = I2C_Master_Read(0);
  6224  0A29  3000               	movlw	0
  6225  0A2A  00F3               	movwf	I2C_Master_Read@a
  6226  0A2B  00F4               	movwf	I2C_Master_Read@a+1
  6227  0A2C  160A  118A  279E  120A  158A  	fcall	_I2C_Master_Read
  6228  0A31  0873               	movf	?_I2C_Master_Read,w
  6229  0A32  00F7               	movwf	??_get_day
  6230  0A33  0877               	movf	??_get_day,w
  6231  0A34  1283               	bcf	3,5	;RP0=0, select bank0
  6232  0A35  1303               	bcf	3,6	;RP1=0, select bank0
  6233  0A36  00C9               	movwf	get_day@d
  6234                           
  6235                           ;mainMaster.c: 549:     I2C_Master_Stop();
  6236  0A37  160A  118A  260D   	fcall	_I2C_Master_Stop
  6237                           
  6238                           ;mainMaster.c: 551:     return d;
  6239  0A3A  1283               	bcf	3,5	;RP0=0, select bank0
  6240  0A3B  1303               	bcf	3,6	;RP1=0, select bank0
  6241  0A3C  0849               	movf	get_day@d,w
  6242  0A3D  0008               	return
  6243  0A3E                     __end_of_get_day:	
  6244                           
  6245                           	psect	text21
  6246  1614                     __ptext21:	
  6247 ;; *************** function _I2C_Master_RepeatedStart *****************
  6248 ;; Defined at:
  6249 ;;		line 47 in file "./I2C.h"
  6250 ;; Parameters:    Size  Location     Type
  6251 ;;		None
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;		None
  6254 ;; Return value:  Size  Location     Type
  6255 ;;                  1    wreg      void 
  6256 ;; Registers used:
  6257 ;;		wreg, status,2, status,0, pclath, cstack
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6263 ;;      Params:         0       0       0       0       0
  6264 ;;      Locals:         0       0       0       0       0
  6265 ;;      Temps:          0       0       0       0       0
  6266 ;;      Totals:         0       0       0       0       0
  6267 ;;Total ram usage:        0 bytes
  6268 ;; Hardware stack levels used:    1
  6269 ;; Hardware stack levels required when called:    2
  6270 ;; This function calls:
  6271 ;;		_I2C_Master_Wait
  6272 ;; This function is called by:
  6273 ;;		_get_time
  6274 ;;		_get_day
  6275 ;;		_get_temp
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           
  6280                           ;psect for function _I2C_Master_RepeatedStart
  6281  1614                     _I2C_Master_RepeatedStart:	
  6282                           
  6283                           ;./I2C.h: 49:     I2C_Master_Wait();
  6284                           
  6285                           ;incstack = 0
  6286                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  6287  1614  160A  118A  262B   	fcall	_I2C_Master_Wait
  6288                           
  6289                           ;./I2C.h: 50:     SSPCON2bits.RSEN = 1;
  6290  1617  1683               	bsf	3,5	;RP0=1, select bank1
  6291  1618  1303               	bcf	3,6	;RP1=0, select bank1
  6292  1619  1491               	bsf	17,1	;volatile
  6293  161A  0008               	return
  6294  161B                     __end_of_I2C_Master_RepeatedStart:	
  6295                           
  6296                           	psect	text22
  6297  1711                     __ptext22:	
  6298 ;; *************** function _get_PIR *****************
  6299 ;; Defined at:
  6300 ;;		line 605 in file "mainMaster.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;		None
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  PIR             1    2[BANK0 ] unsigned char 
  6305 ;; Return value:  Size  Location     Type
  6306 ;;                  1    wreg      unsigned char 
  6307 ;; Registers used:
  6308 ;;		wreg, status,2, status,0, pclath, cstack
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6314 ;;      Params:         0       0       0       0       0
  6315 ;;      Locals:         0       1       0       0       0
  6316 ;;      Temps:          1       0       0       0       0
  6317 ;;      Totals:         1       1       0       0       0
  6318 ;;Total ram usage:        2 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    3
  6321 ;; This function calls:
  6322 ;;		_I2C_Master_Read
  6323 ;;		_I2C_Master_Start
  6324 ;;		_I2C_Master_Stop
  6325 ;;		_I2C_Master_Write
  6326 ;; This function is called by:
  6327 ;;		_main
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           
  6332                           ;psect for function _get_PIR
  6333  1711                     _get_PIR:	
  6334                           
  6335                           ;mainMaster.c: 607:     char PIR;;mainMaster.c: 609:     I2C_Master_Start();
  6336                           
  6337                           ;incstack = 0
  6338                           ; Regs used in _get_PIR: [wreg+status,2+status,0+pclath+cstack]
  6339  1711  160A  118A  2606  160A  118A  	fcall	_I2C_Master_Start
  6340                           
  6341                           ;mainMaster.c: 610:     I2C_Master_Write(0x41);
  6342  1716  3041               	movlw	65
  6343  1717  00F3               	movwf	I2C_Master_Write@d
  6344  1718  3000               	movlw	0
  6345  1719  00F4               	movwf	I2C_Master_Write@d+1
  6346  171A  160A  118A  261B  160A  118A  	fcall	_I2C_Master_Write
  6347                           
  6348                           ;mainMaster.c: 611:     PIR = I2C_Master_Read(0);
  6349  171F  3000               	movlw	0
  6350  1720  00F3               	movwf	I2C_Master_Read@a
  6351  1721  00F4               	movwf	I2C_Master_Read@a+1
  6352  1722  160A  118A  279E  160A  118A  	fcall	_I2C_Master_Read
  6353  1727  0873               	movf	?_I2C_Master_Read,w
  6354  1728  00F7               	movwf	??_get_PIR
  6355  1729  0877               	movf	??_get_PIR,w
  6356  172A  1283               	bcf	3,5	;RP0=0, select bank0
  6357  172B  1303               	bcf	3,6	;RP1=0, select bank0
  6358  172C  00C9               	movwf	get_PIR@PIR
  6359                           
  6360                           ;mainMaster.c: 612:     I2C_Master_Stop();
  6361  172D  160A  118A  260D   	fcall	_I2C_Master_Stop
  6362                           
  6363                           ;mainMaster.c: 614:     return (PIR);
  6364  1730  1283               	bcf	3,5	;RP0=0, select bank0
  6365  1731  1303               	bcf	3,6	;RP1=0, select bank0
  6366  1732  0849               	movf	get_PIR@PIR,w
  6367  1733  0008               	return
  6368  1734                     __end_of_get_PIR:	
  6369                           
  6370                           	psect	text23
  6371  16EE                     __ptext23:	
  6372 ;; *************** function _get_IR *****************
  6373 ;; Defined at:
  6374 ;;		line 617 in file "mainMaster.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;		None
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;  IR              1    2[BANK0 ] unsigned char 
  6379 ;; Return value:  Size  Location     Type
  6380 ;;                  1    wreg      unsigned char 
  6381 ;; Registers used:
  6382 ;;		wreg, status,2, status,0, pclath, cstack
  6383 ;; Tracked objects:
  6384 ;;		On entry : 0/0
  6385 ;;		On exit  : 0/0
  6386 ;;		Unchanged: 0/0
  6387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6388 ;;      Params:         0       0       0       0       0
  6389 ;;      Locals:         0       1       0       0       0
  6390 ;;      Temps:          1       0       0       0       0
  6391 ;;      Totals:         1       1       0       0       0
  6392 ;;Total ram usage:        2 bytes
  6393 ;; Hardware stack levels used:    1
  6394 ;; Hardware stack levels required when called:    3
  6395 ;; This function calls:
  6396 ;;		_I2C_Master_Read
  6397 ;;		_I2C_Master_Start
  6398 ;;		_I2C_Master_Stop
  6399 ;;		_I2C_Master_Write
  6400 ;; This function is called by:
  6401 ;;		_main
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           
  6406                           ;psect for function _get_IR
  6407  16EE                     _get_IR:	
  6408                           
  6409                           ;mainMaster.c: 619:     char IR;;mainMaster.c: 621:     I2C_Master_Start();
  6410                           
  6411                           ;incstack = 0
  6412                           ; Regs used in _get_IR: [wreg+status,2+status,0+pclath+cstack]
  6413  16EE  160A  118A  2606  160A  118A  	fcall	_I2C_Master_Start
  6414                           
  6415                           ;mainMaster.c: 622:     I2C_Master_Write(0x31);
  6416  16F3  3031               	movlw	49
  6417  16F4  00F3               	movwf	I2C_Master_Write@d
  6418  16F5  3000               	movlw	0
  6419  16F6  00F4               	movwf	I2C_Master_Write@d+1
  6420  16F7  160A  118A  261B  160A  118A  	fcall	_I2C_Master_Write
  6421                           
  6422                           ;mainMaster.c: 623:     IR = I2C_Master_Read(0);
  6423  16FC  3000               	movlw	0
  6424  16FD  00F3               	movwf	I2C_Master_Read@a
  6425  16FE  00F4               	movwf	I2C_Master_Read@a+1
  6426  16FF  160A  118A  279E  160A  118A  	fcall	_I2C_Master_Read
  6427  1704  0873               	movf	?_I2C_Master_Read,w
  6428  1705  00F7               	movwf	??_get_IR
  6429  1706  0877               	movf	??_get_IR,w
  6430  1707  1283               	bcf	3,5	;RP0=0, select bank0
  6431  1708  1303               	bcf	3,6	;RP1=0, select bank0
  6432  1709  00C9               	movwf	get_IR@IR
  6433                           
  6434                           ;mainMaster.c: 624:     I2C_Master_Stop();
  6435  170A  160A  118A  260D   	fcall	_I2C_Master_Stop
  6436                           
  6437                           ;mainMaster.c: 626:     return (IR);
  6438  170D  1283               	bcf	3,5	;RP0=0, select bank0
  6439  170E  1303               	bcf	3,6	;RP1=0, select bank0
  6440  170F  0849               	movf	get_IR@IR,w
  6441  1710  0008               	return
  6442  1711                     __end_of_get_IR:	
  6443                           
  6444                           	psect	text24
  6445  179E                     __ptext24:	
  6446 ;; *************** function _I2C_Master_Read *****************
  6447 ;; Defined at:
  6448 ;;		line 74 in file "./I2C.h"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;  a               2    3[COMMON] unsigned short 
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;  temp            2    0[BANK0 ] unsigned short 
  6453 ;; Return value:  Size  Location     Type
  6454 ;;                  2    3[COMMON] unsigned short 
  6455 ;; Registers used:
  6456 ;;		wreg, status,2, status,0, pclath, cstack
  6457 ;; Tracked objects:
  6458 ;;		On entry : 0/0
  6459 ;;		On exit  : 0/0
  6460 ;;		Unchanged: 0/0
  6461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6462 ;;      Params:         2       0       0       0       0
  6463 ;;      Locals:         0       2       0       0       0
  6464 ;;      Temps:          2       0       0       0       0
  6465 ;;      Totals:         4       2       0       0       0
  6466 ;;Total ram usage:        6 bytes
  6467 ;; Hardware stack levels used:    1
  6468 ;; Hardware stack levels required when called:    2
  6469 ;; This function calls:
  6470 ;;		_I2C_Master_Wait
  6471 ;; This function is called by:
  6472 ;;		_get_time
  6473 ;;		_get_day
  6474 ;;		_get_temp
  6475 ;;		_get_hall
  6476 ;;		_get_tripwire
  6477 ;;		_get_PIR
  6478 ;;		_get_IR
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           
  6483                           ;psect for function _I2C_Master_Read
  6484  179E                     _I2C_Master_Read:	
  6485                           
  6486                           ;./I2C.h: 74: unsigned short I2C_Master_Read(unsigned short a);./I2C.h: 75: {;./I2C.h: 7
      +                          6:     unsigned short temp;;./I2C.h: 77:     I2C_Master_Wait();
  6487                           
  6488                           ;incstack = 0
  6489                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  6490  179E  160A  118A  262B  160A  118A  	fcall	_I2C_Master_Wait
  6491                           
  6492                           ;./I2C.h: 78:     RCEN = 1;
  6493  17A3  1683               	bsf	3,5	;RP0=1, select bank1
  6494  17A4  1303               	bcf	3,6	;RP1=0, select bank1
  6495  17A5  1591               	bsf	17,3	;volatile
  6496                           
  6497                           ;./I2C.h: 79:     I2C_Master_Wait();
  6498  17A6  160A  118A  262B  160A  118A  	fcall	_I2C_Master_Wait
  6499                           
  6500                           ;./I2C.h: 80:     temp = SSPBUF;
  6501  17AB  1283               	bcf	3,5	;RP0=0, select bank0
  6502  17AC  1303               	bcf	3,6	;RP1=0, select bank0
  6503  17AD  0813               	movf	19,w	;volatile
  6504  17AE  00F5               	movwf	??_I2C_Master_Read
  6505  17AF  01F6               	clrf	??_I2C_Master_Read+1
  6506  17B0  0875               	movf	??_I2C_Master_Read,w
  6507  17B1  00C7               	movwf	I2C_Master_Read@temp
  6508  17B2  0876               	movf	??_I2C_Master_Read+1,w
  6509  17B3  00C8               	movwf	I2C_Master_Read@temp+1
  6510                           
  6511                           ;./I2C.h: 81:     I2C_Master_Wait();
  6512  17B4  160A  118A  262B  160A  118A  	fcall	_I2C_Master_Wait
  6513                           
  6514                           ;./I2C.h: 83:     if(a == 1){
  6515  17B9  0373               	decf	I2C_Master_Read@a,w
  6516  17BA  0474               	iorwf	I2C_Master_Read@a+1,w
  6517  17BB  1D03               	btfss	3,2
  6518  17BC  2FC1               	goto	l152
  6519                           
  6520                           ;./I2C.h: 84:         SSPCON2bits.ACKDT = 0;
  6521  17BD  1683               	bsf	3,5	;RP0=1, select bank1
  6522  17BE  1303               	bcf	3,6	;RP1=0, select bank1
  6523  17BF  1291               	bcf	17,5	;volatile
  6524                           
  6525                           ;./I2C.h: 85:     }else{
  6526  17C0  2FC4               	goto	l153
  6527  17C1                     l152:	
  6528                           
  6529                           ;./I2C.h: 86:         SSPCON2bits.ACKDT = 1;
  6530  17C1  1683               	bsf	3,5	;RP0=1, select bank1
  6531  17C2  1303               	bcf	3,6	;RP1=0, select bank1
  6532  17C3  1691               	bsf	17,5	;volatile
  6533  17C4                     l153:	
  6534                           ;./I2C.h: 87:     }
  6535                           
  6536                           
  6537                           ;./I2C.h: 88:     SSPCON2bits.ACKEN = 1;
  6538  17C4  1611               	bsf	17,4	;volatile
  6539                           
  6540                           ;./I2C.h: 89:     return temp;
  6541  17C5  1283               	bcf	3,5	;RP0=0, select bank0
  6542  17C6  1303               	bcf	3,6	;RP1=0, select bank0
  6543  17C7  0848               	movf	I2C_Master_Read@temp+1,w
  6544  17C8  00F4               	movwf	?_I2C_Master_Read+1
  6545  17C9  0847               	movf	I2C_Master_Read@temp,w
  6546  17CA  00F3               	movwf	?_I2C_Master_Read
  6547  17CB  0008               	return
  6548  17CC                     __end_of_I2C_Master_Read:	
  6549                           
  6550                           	psect	text25
  6551  1699                     __ptext25:	
  6552 ;; *************** function _close_door *****************
  6553 ;; Defined at:
  6554 ;;		line 638 in file "mainMaster.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;		None
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;		None
  6559 ;; Return value:  Size  Location     Type
  6560 ;;                  1    wreg      void 
  6561 ;; Registers used:
  6562 ;;		wreg, status,2, status,0, pclath, cstack
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6568 ;;      Params:         0       0       0       0       0
  6569 ;;      Locals:         0       0       0       0       0
  6570 ;;      Temps:          0       0       0       0       0
  6571 ;;      Totals:         0       0       0       0       0
  6572 ;;Total ram usage:        0 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    3
  6575 ;; This function calls:
  6576 ;;		_I2C_Master_Start
  6577 ;;		_I2C_Master_Stop
  6578 ;;		_I2C_Master_Write
  6579 ;; This function is called by:
  6580 ;;		_main
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583                           
  6584                           
  6585                           ;psect for function _close_door
  6586  1699                     _close_door:	
  6587                           
  6588                           ;mainMaster.c: 640:     I2C_Master_Start();
  6589                           
  6590                           ;incstack = 0
  6591                           ; Regs used in _close_door: [wreg+status,2+status,0+pclath+cstack]
  6592  1699  160A  118A  2606  160A  118A  	fcall	_I2C_Master_Start
  6593                           
  6594                           ;mainMaster.c: 641:     I2C_Master_Write(0x20);
  6595  169E  3020               	movlw	32
  6596  169F  00F3               	movwf	I2C_Master_Write@d
  6597  16A0  3000               	movlw	0
  6598  16A1  00F4               	movwf	I2C_Master_Write@d+1
  6599  16A2  160A  118A  261B  160A  118A  	fcall	_I2C_Master_Write
  6600                           
  6601                           ;mainMaster.c: 642:     I2C_Master_Write(0xF0);
  6602  16A7  30F0               	movlw	240
  6603  16A8  00F3               	movwf	I2C_Master_Write@d
  6604  16A9  3000               	movlw	0
  6605  16AA  00F4               	movwf	I2C_Master_Write@d+1
  6606  16AB  160A  118A  261B  160A  118A  	fcall	_I2C_Master_Write
  6607                           
  6608                           ;mainMaster.c: 643:     I2C_Master_Stop();
  6609  16B0  160A  118A  260D   	fcall	_I2C_Master_Stop
  6610  16B3  0008               	return
  6611  16B4                     __end_of_close_door:	
  6612                           
  6613                           	psect	text26
  6614  161B                     __ptext26:	
  6615 ;; *************** function _I2C_Master_Write *****************
  6616 ;; Defined at:
  6617 ;;		line 65 in file "./I2C.h"
  6618 ;; Parameters:    Size  Location     Type
  6619 ;;  d               2    3[COMMON] unsigned int 
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;		None
  6622 ;; Return value:  Size  Location     Type
  6623 ;;                  1    wreg      void 
  6624 ;; Registers used:
  6625 ;;		wreg, status,2, status,0, pclath, cstack
  6626 ;; Tracked objects:
  6627 ;;		On entry : 0/0
  6628 ;;		On exit  : 0/0
  6629 ;;		Unchanged: 0/0
  6630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6631 ;;      Params:         2       0       0       0       0
  6632 ;;      Locals:         0       0       0       0       0
  6633 ;;      Temps:          0       0       0       0       0
  6634 ;;      Totals:         2       0       0       0       0
  6635 ;;Total ram usage:        2 bytes
  6636 ;; Hardware stack levels used:    1
  6637 ;; Hardware stack levels required when called:    2
  6638 ;; This function calls:
  6639 ;;		_I2C_Master_Wait
  6640 ;; This function is called by:
  6641 ;;		_write_RTC
  6642 ;;		_get_time
  6643 ;;		_get_day
  6644 ;;		_get_temp
  6645 ;;		_get_hall
  6646 ;;		_get_tripwire
  6647 ;;		_get_PIR
  6648 ;;		_get_IR
  6649 ;;		_open_door
  6650 ;;		_close_door
  6651 ;; This function uses a non-reentrant model
  6652 ;;
  6653                           
  6654                           
  6655                           ;psect for function _I2C_Master_Write
  6656  161B                     _I2C_Master_Write:	
  6657                           
  6658                           ;./I2C.h: 65: void I2C_Master_Write(unsigned d);./I2C.h: 66: {;./I2C.h: 67:     I2C_Mast
      +                          er_Wait();
  6659                           
  6660                           ;incstack = 0
  6661                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  6662  161B  160A  118A  262B   	fcall	_I2C_Master_Wait
  6663                           
  6664                           ;./I2C.h: 68:     SSPBUF = d;
  6665  161E  0873               	movf	I2C_Master_Write@d,w
  6666  161F  1283               	bcf	3,5	;RP0=0, select bank0
  6667  1620  1303               	bcf	3,6	;RP1=0, select bank0
  6668  1621  0093               	movwf	19	;volatile
  6669  1622  0008               	return
  6670  1623                     __end_of_I2C_Master_Write:	
  6671                           
  6672                           	psect	text27
  6673  160D                     __ptext27:	
  6674 ;; *************** function _I2C_Master_Stop *****************
  6675 ;; Defined at:
  6676 ;;		line 55 in file "./I2C.h"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;		None
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;		None
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  1    wreg      void 
  6683 ;; Registers used:
  6684 ;;		wreg, status,2, status,0, pclath, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6690 ;;      Params:         0       0       0       0       0
  6691 ;;      Locals:         0       0       0       0       0
  6692 ;;      Temps:          0       0       0       0       0
  6693 ;;      Totals:         0       0       0       0       0
  6694 ;;Total ram usage:        0 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    2
  6697 ;; This function calls:
  6698 ;;		_I2C_Master_Wait
  6699 ;; This function is called by:
  6700 ;;		_write_RTC
  6701 ;;		_get_time
  6702 ;;		_get_day
  6703 ;;		_get_temp
  6704 ;;		_get_hall
  6705 ;;		_get_tripwire
  6706 ;;		_get_PIR
  6707 ;;		_get_IR
  6708 ;;		_open_door
  6709 ;;		_close_door
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           
  6714                           ;psect for function _I2C_Master_Stop
  6715  160D                     _I2C_Master_Stop:	
  6716                           
  6717                           ;./I2C.h: 57:     I2C_Master_Wait();
  6718                           
  6719                           ;incstack = 0
  6720                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  6721  160D  160A  118A  262B   	fcall	_I2C_Master_Wait
  6722                           
  6723                           ;./I2C.h: 58:     SSPCON2bits.PEN = 1;
  6724  1610  1683               	bsf	3,5	;RP0=1, select bank1
  6725  1611  1303               	bcf	3,6	;RP1=0, select bank1
  6726  1612  1511               	bsf	17,2	;volatile
  6727  1613  0008               	return
  6728  1614                     __end_of_I2C_Master_Stop:	
  6729                           
  6730                           	psect	text28
  6731  1606                     __ptext28:	
  6732 ;; *************** function _I2C_Master_Start *****************
  6733 ;; Defined at:
  6734 ;;		line 39 in file "./I2C.h"
  6735 ;; Parameters:    Size  Location     Type
  6736 ;;		None
  6737 ;; Auto vars:     Size  Location     Type
  6738 ;;		None
  6739 ;; Return value:  Size  Location     Type
  6740 ;;                  1    wreg      void 
  6741 ;; Registers used:
  6742 ;;		wreg, status,2, status,0, pclath, cstack
  6743 ;; Tracked objects:
  6744 ;;		On entry : 0/0
  6745 ;;		On exit  : 0/0
  6746 ;;		Unchanged: 0/0
  6747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6748 ;;      Params:         0       0       0       0       0
  6749 ;;      Locals:         0       0       0       0       0
  6750 ;;      Temps:          0       0       0       0       0
  6751 ;;      Totals:         0       0       0       0       0
  6752 ;;Total ram usage:        0 bytes
  6753 ;; Hardware stack levels used:    1
  6754 ;; Hardware stack levels required when called:    2
  6755 ;; This function calls:
  6756 ;;		_I2C_Master_Wait
  6757 ;; This function is called by:
  6758 ;;		_write_RTC
  6759 ;;		_get_time
  6760 ;;		_get_day
  6761 ;;		_get_temp
  6762 ;;		_get_hall
  6763 ;;		_get_tripwire
  6764 ;;		_get_PIR
  6765 ;;		_get_IR
  6766 ;;		_open_door
  6767 ;;		_close_door
  6768 ;; This function uses a non-reentrant model
  6769 ;;
  6770                           
  6771                           
  6772                           ;psect for function _I2C_Master_Start
  6773  1606                     _I2C_Master_Start:	
  6774                           
  6775                           ;./I2C.h: 41:     I2C_Master_Wait();
  6776                           
  6777                           ;incstack = 0
  6778                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  6779  1606  160A  118A  262B   	fcall	_I2C_Master_Wait
  6780                           
  6781                           ;./I2C.h: 42:     SSPCON2bits.SEN = 1;
  6782  1609  1683               	bsf	3,5	;RP0=1, select bank1
  6783  160A  1303               	bcf	3,6	;RP1=0, select bank1
  6784  160B  1411               	bsf	17,0	;volatile
  6785  160C  0008               	return
  6786  160D                     __end_of_I2C_Master_Start:	
  6787                           
  6788                           	psect	text29
  6789  162B                     __ptext29:	
  6790 ;; *************** function _I2C_Master_Wait *****************
  6791 ;; Defined at:
  6792 ;;		line 32 in file "./I2C.h"
  6793 ;; Parameters:    Size  Location     Type
  6794 ;;		None
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;		None
  6797 ;; Return value:  Size  Location     Type
  6798 ;;                  1    wreg      void 
  6799 ;; Registers used:
  6800 ;;		wreg, status,2
  6801 ;; Tracked objects:
  6802 ;;		On entry : 0/0
  6803 ;;		On exit  : 0/0
  6804 ;;		Unchanged: 0/0
  6805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6806 ;;      Params:         0       0       0       0       0
  6807 ;;      Locals:         0       0       0       0       0
  6808 ;;      Temps:          0       0       0       0       0
  6809 ;;      Totals:         0       0       0       0       0
  6810 ;;Total ram usage:        0 bytes
  6811 ;; Hardware stack levels used:    1
  6812 ;; Hardware stack levels required when called:    1
  6813 ;; This function calls:
  6814 ;;		Nothing
  6815 ;; This function is called by:
  6816 ;;		_I2C_Master_Start
  6817 ;;		_I2C_Master_RepeatedStart
  6818 ;;		_I2C_Master_Stop
  6819 ;;		_I2C_Master_Write
  6820 ;;		_I2C_Master_Read
  6821 ;; This function uses a non-reentrant model
  6822 ;;
  6823                           
  6824                           
  6825                           ;psect for function _I2C_Master_Wait
  6826  162B                     _I2C_Master_Wait:	
  6827  162B                     l134:	
  6828                           ;./I2C.h: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  6829                           
  6830                           ;incstack = 0
  6831                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  6832                           
  6833  162B  1683               	bsf	3,5	;RP0=1, select bank1
  6834  162C  1303               	bcf	3,6	;RP1=0, select bank1
  6835  162D  1914               	btfsc	20,2	;volatile
  6836  162E  2E2B               	goto	l134
  6837  162F  0811               	movf	17,w	;volatile
  6838  1630  391F               	andlw	31
  6839  1631  1903               	btfsc	3,2
  6840  1632  0008               	return
  6841  1633  2E2B               	goto	l134
  6842  1634                     __end_of_I2C_Master_Wait:	
  6843                           
  6844                           	psect	text30
  6845  0B03                     __ptext30:	
  6846 ;; *************** function ___awmod *****************
  6847 ;; Defined at:
  6848 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  6849 ;; Parameters:    Size  Location     Type
  6850 ;;  divisor         2    3[COMMON] int 
  6851 ;;  dividend        2    5[COMMON] int 
  6852 ;; Auto vars:     Size  Location     Type
  6853 ;;  sign            1    1[BANK0 ] unsigned char 
  6854 ;;  counter         1    0[BANK0 ] unsigned char 
  6855 ;; Return value:  Size  Location     Type
  6856 ;;                  2    3[COMMON] int 
  6857 ;; Registers used:
  6858 ;;		wreg, status,2, status,0
  6859 ;; Tracked objects:
  6860 ;;		On entry : 0/0
  6861 ;;		On exit  : 0/0
  6862 ;;		Unchanged: 0/0
  6863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6864 ;;      Params:         4       0       0       0       0
  6865 ;;      Locals:         0       2       0       0       0
  6866 ;;      Temps:          1       0       0       0       0
  6867 ;;      Totals:         5       2       0       0       0
  6868 ;;Total ram usage:        7 bytes
  6869 ;; Hardware stack levels used:    1
  6870 ;; Hardware stack levels required when called:    1
  6871 ;; This function calls:
  6872 ;;		Nothing
  6873 ;; This function is called by:
  6874 ;;		_main
  6875 ;; This function uses a non-reentrant model
  6876 ;;
  6877                           
  6878                           
  6879                           ;psect for function ___awmod
  6880  0B03                     ___awmod:	
  6881                           
  6882                           ;incstack = 0
  6883                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6884  0B03  1283               	bcf	3,5	;RP0=0, select bank0
  6885  0B04  1303               	bcf	3,6	;RP1=0, select bank0
  6886  0B05  01C8               	clrf	___awmod@sign
  6887  0B06  1FF6               	btfss	___awmod@dividend+1,7
  6888  0B07  2B0F               	goto	l3964
  6889  0B08  09F5               	comf	___awmod@dividend,f
  6890  0B09  09F6               	comf	___awmod@dividend+1,f
  6891  0B0A  0AF5               	incf	___awmod@dividend,f
  6892  0B0B  1903               	skipnz
  6893  0B0C  0AF6               	incf	___awmod@dividend+1,f
  6894  0B0D  01C8               	clrf	___awmod@sign
  6895  0B0E  0AC8               	incf	___awmod@sign,f
  6896  0B0F                     l3964:	
  6897  0B0F  1FF4               	btfss	___awmod@divisor+1,7
  6898  0B10  2B16               	goto	l3968
  6899  0B11  09F3               	comf	___awmod@divisor,f
  6900  0B12  09F4               	comf	___awmod@divisor+1,f
  6901  0B13  0AF3               	incf	___awmod@divisor,f
  6902  0B14  1903               	skipnz
  6903  0B15  0AF4               	incf	___awmod@divisor+1,f
  6904  0B16                     l3968:	
  6905  0B16  0873               	movf	___awmod@divisor,w
  6906  0B17  0474               	iorwf	___awmod@divisor+1,w
  6907  0B18  1903               	btfsc	3,2
  6908  0B19  2B43               	goto	l3986
  6909  0B1A  01C7               	clrf	___awmod@counter
  6910  0B1B  0AC7               	incf	___awmod@counter,f
  6911  0B1C                     l3976:	
  6912  0B1C  1BF4               	btfsc	___awmod@divisor+1,7
  6913  0B1D  2B2A               	goto	l3978
  6914  0B1E  3001               	movlw	1
  6915  0B1F                     u4105:	
  6916  0B1F  1003               	clrc
  6917  0B20  0DF3               	rlf	___awmod@divisor,f
  6918  0B21  0DF4               	rlf	___awmod@divisor+1,f
  6919  0B22  3EFF               	addlw	-1
  6920  0B23  1D03               	skipz
  6921  0B24  2B1F               	goto	u4105
  6922  0B25  3001               	movlw	1
  6923  0B26  00F7               	movwf	??___awmod
  6924  0B27  0877               	movf	??___awmod,w
  6925  0B28  07C7               	addwf	___awmod@counter,f
  6926  0B29  2B1C               	goto	l3976
  6927  0B2A                     l3978:	
  6928  0B2A  0874               	movf	___awmod@divisor+1,w
  6929  0B2B  0276               	subwf	___awmod@dividend+1,w
  6930  0B2C  1D03               	skipz
  6931  0B2D  2B30               	goto	u4125
  6932  0B2E  0873               	movf	___awmod@divisor,w
  6933  0B2F  0275               	subwf	___awmod@dividend,w
  6934  0B30                     u4125:	
  6935  0B30  1C03               	skipc
  6936  0B31  2B38               	goto	l3982
  6937  0B32  0873               	movf	___awmod@divisor,w
  6938  0B33  02F5               	subwf	___awmod@dividend,f
  6939  0B34  0874               	movf	___awmod@divisor+1,w
  6940  0B35  1C03               	skipc
  6941  0B36  03F6               	decf	___awmod@dividend+1,f
  6942  0B37  02F6               	subwf	___awmod@dividend+1,f
  6943  0B38                     l3982:	
  6944  0B38  3001               	movlw	1
  6945  0B39                     u4135:	
  6946  0B39  1003               	clrc
  6947  0B3A  0CF4               	rrf	___awmod@divisor+1,f
  6948  0B3B  0CF3               	rrf	___awmod@divisor,f
  6949  0B3C  3EFF               	addlw	-1
  6950  0B3D  1D03               	skipz
  6951  0B3E  2B39               	goto	u4135
  6952  0B3F  3001               	movlw	1
  6953  0B40  02C7               	subwf	___awmod@counter,f
  6954  0B41  1D03               	btfss	3,2
  6955  0B42  2B2A               	goto	l3978
  6956  0B43                     l3986:	
  6957  0B43  0848               	movf	___awmod@sign,w
  6958  0B44  1903               	btfsc	3,2
  6959  0B45  2B4B               	goto	l3990
  6960  0B46  09F5               	comf	___awmod@dividend,f
  6961  0B47  09F6               	comf	___awmod@dividend+1,f
  6962  0B48  0AF5               	incf	___awmod@dividend,f
  6963  0B49  1903               	skipnz
  6964  0B4A  0AF6               	incf	___awmod@dividend+1,f
  6965  0B4B                     l3990:	
  6966  0B4B  0876               	movf	___awmod@dividend+1,w
  6967  0B4C  00F4               	movwf	?___awmod+1
  6968  0B4D  0875               	movf	___awmod@dividend,w
  6969  0B4E  00F3               	movwf	?___awmod
  6970  0B4F  0008               	return
  6971  0B50                     __end_of___awmod:	
  6972                           
  6973                           	psect	text31
  6974  0BF5                     __ptext31:	
  6975 ;; *************** function ___awdiv *****************
  6976 ;; Defined at:
  6977 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  6978 ;; Parameters:    Size  Location     Type
  6979 ;;  divisor         2    3[COMMON] int 
  6980 ;;  dividend        2    5[COMMON] int 
  6981 ;; Auto vars:     Size  Location     Type
  6982 ;;  quotient        2    2[BANK0 ] int 
  6983 ;;  sign            1    1[BANK0 ] unsigned char 
  6984 ;;  counter         1    0[BANK0 ] unsigned char 
  6985 ;; Return value:  Size  Location     Type
  6986 ;;                  2    3[COMMON] int 
  6987 ;; Registers used:
  6988 ;;		wreg, status,2, status,0
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6994 ;;      Params:         4       0       0       0       0
  6995 ;;      Locals:         0       4       0       0       0
  6996 ;;      Temps:          1       0       0       0       0
  6997 ;;      Totals:         5       4       0       0       0
  6998 ;;Total ram usage:        9 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    1
  7001 ;; This function calls:
  7002 ;;		Nothing
  7003 ;; This function is called by:
  7004 ;;		_main
  7005 ;; This function uses a non-reentrant model
  7006 ;;
  7007                           
  7008                           
  7009                           ;psect for function ___awdiv
  7010  0BF5                     ___awdiv:	
  7011                           
  7012                           ;incstack = 0
  7013                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7014  0BF5  1283               	bcf	3,5	;RP0=0, select bank0
  7015  0BF6  1303               	bcf	3,6	;RP1=0, select bank0
  7016  0BF7  01C8               	clrf	___awdiv@sign
  7017  0BF8  1FF4               	btfss	___awdiv@divisor+1,7
  7018  0BF9  2C01               	goto	l2892
  7019  0BFA  09F3               	comf	___awdiv@divisor,f
  7020  0BFB  09F4               	comf	___awdiv@divisor+1,f
  7021  0BFC  0AF3               	incf	___awdiv@divisor,f
  7022  0BFD  1903               	skipnz
  7023  0BFE  0AF4               	incf	___awdiv@divisor+1,f
  7024  0BFF  01C8               	clrf	___awdiv@sign
  7025  0C00  0AC8               	incf	___awdiv@sign,f
  7026  0C01                     l2892:	
  7027  0C01  1FF6               	btfss	___awdiv@dividend+1,7
  7028  0C02  2C0C               	goto	l2898
  7029  0C03  09F5               	comf	___awdiv@dividend,f
  7030  0C04  09F6               	comf	___awdiv@dividend+1,f
  7031  0C05  0AF5               	incf	___awdiv@dividend,f
  7032  0C06  1903               	skipnz
  7033  0C07  0AF6               	incf	___awdiv@dividend+1,f
  7034  0C08  3001               	movlw	1
  7035  0C09  00F7               	movwf	??___awdiv
  7036  0C0A  0877               	movf	??___awdiv,w
  7037  0C0B  06C8               	xorwf	___awdiv@sign,f
  7038  0C0C                     l2898:	
  7039  0C0C  01C9               	clrf	___awdiv@quotient
  7040  0C0D  01CA               	clrf	___awdiv@quotient+1
  7041  0C0E  0873               	movf	___awdiv@divisor,w
  7042  0C0F  0474               	iorwf	___awdiv@divisor+1,w
  7043  0C10  1903               	btfsc	3,2
  7044  0C11  2C43               	goto	l2920
  7045  0C12  01C7               	clrf	___awdiv@counter
  7046  0C13  0AC7               	incf	___awdiv@counter,f
  7047  0C14                     l2908:	
  7048  0C14  1BF4               	btfsc	___awdiv@divisor+1,7
  7049  0C15  2C22               	goto	l2910
  7050  0C16  3001               	movlw	1
  7051  0C17                     u2525:	
  7052  0C17  1003               	clrc
  7053  0C18  0DF3               	rlf	___awdiv@divisor,f
  7054  0C19  0DF4               	rlf	___awdiv@divisor+1,f
  7055  0C1A  3EFF               	addlw	-1
  7056  0C1B  1D03               	skipz
  7057  0C1C  2C17               	goto	u2525
  7058  0C1D  3001               	movlw	1
  7059  0C1E  00F7               	movwf	??___awdiv
  7060  0C1F  0877               	movf	??___awdiv,w
  7061  0C20  07C7               	addwf	___awdiv@counter,f
  7062  0C21  2C14               	goto	l2908
  7063  0C22                     l2910:	
  7064  0C22  3001               	movlw	1
  7065  0C23                     u2545:	
  7066  0C23  1003               	clrc
  7067  0C24  0DC9               	rlf	___awdiv@quotient,f
  7068  0C25  0DCA               	rlf	___awdiv@quotient+1,f
  7069  0C26  3EFF               	addlw	-1
  7070  0C27  1D03               	skipz
  7071  0C28  2C23               	goto	u2545
  7072  0C29  0874               	movf	___awdiv@divisor+1,w
  7073  0C2A  0276               	subwf	___awdiv@dividend+1,w
  7074  0C2B  1D03               	skipz
  7075  0C2C  2C2F               	goto	u2555
  7076  0C2D  0873               	movf	___awdiv@divisor,w
  7077  0C2E  0275               	subwf	___awdiv@dividend,w
  7078  0C2F                     u2555:	
  7079  0C2F  1C03               	skipc
  7080  0C30  2C38               	goto	l2916
  7081  0C31  0873               	movf	___awdiv@divisor,w
  7082  0C32  02F5               	subwf	___awdiv@dividend,f
  7083  0C33  0874               	movf	___awdiv@divisor+1,w
  7084  0C34  1C03               	skipc
  7085  0C35  03F6               	decf	___awdiv@dividend+1,f
  7086  0C36  02F6               	subwf	___awdiv@dividend+1,f
  7087  0C37  1449               	bsf	___awdiv@quotient,0
  7088  0C38                     l2916:	
  7089  0C38  3001               	movlw	1
  7090  0C39                     u2565:	
  7091  0C39  1003               	clrc
  7092  0C3A  0CF4               	rrf	___awdiv@divisor+1,f
  7093  0C3B  0CF3               	rrf	___awdiv@divisor,f
  7094  0C3C  3EFF               	addlw	-1
  7095  0C3D  1D03               	skipz
  7096  0C3E  2C39               	goto	u2565
  7097  0C3F  3001               	movlw	1
  7098  0C40  02C7               	subwf	___awdiv@counter,f
  7099  0C41  1D03               	btfss	3,2
  7100  0C42  2C22               	goto	l2910
  7101  0C43                     l2920:	
  7102  0C43  0848               	movf	___awdiv@sign,w
  7103  0C44  1903               	btfsc	3,2
  7104  0C45  2C4B               	goto	l2924
  7105  0C46  09C9               	comf	___awdiv@quotient,f
  7106  0C47  09CA               	comf	___awdiv@quotient+1,f
  7107  0C48  0AC9               	incf	___awdiv@quotient,f
  7108  0C49  1903               	skipnz
  7109  0C4A  0ACA               	incf	___awdiv@quotient+1,f
  7110  0C4B                     l2924:	
  7111  0C4B  084A               	movf	___awdiv@quotient+1,w
  7112  0C4C  00F4               	movwf	?___awdiv+1
  7113  0C4D  0849               	movf	___awdiv@quotient,w
  7114  0C4E  00F3               	movwf	?___awdiv
  7115  0C4F  0008               	return
  7116  0C50                     __end_of___awdiv:	
  7117                           
  7118                           	psect	text32
  7119  1634                     __ptext32:	
  7120 ;; *************** function _UART_Write *****************
  7121 ;; Defined at:
  7122 ;;		line 54 in file "./UART.h"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;  data            1    wreg     unsigned char 
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;  data            1    3[COMMON] unsigned char 
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  1    wreg      void 
  7129 ;; Registers used:
  7130 ;;		wreg
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7136 ;;      Params:         0       0       0       0       0
  7137 ;;      Locals:         1       0       0       0       0
  7138 ;;      Temps:          0       0       0       0       0
  7139 ;;      Totals:         1       0       0       0       0
  7140 ;;Total ram usage:        1 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    1
  7143 ;; This function calls:
  7144 ;;		Nothing
  7145 ;; This function is called by:
  7146 ;;		_main
  7147 ;;		_UART_Write_Text
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           
  7152                           ;psect for function _UART_Write
  7153  1634                     _UART_Write:	
  7154                           
  7155                           ;incstack = 0
  7156                           ; Regs used in _UART_Write: [wreg]
  7157                           ;UART_Write@data stored from wreg
  7158  1634  00F3               	movwf	UART_Write@data
  7159  1635                     l238:	
  7160                           ;./UART.h: 54: void UART_Write(char data);./UART.h: 55: {;./UART.h: 56:   while(!TRMT);
  7161                           
  7162  1635  1683               	bsf	3,5	;RP0=1, select bank1
  7163  1636  1303               	bcf	3,6	;RP1=0, select bank1
  7164  1637  1C98               	btfss	24,1	;volatile
  7165  1638  2E35               	goto	l238
  7166                           
  7167                           ;./UART.h: 57:   TXREG = data;
  7168  1639  0873               	movf	UART_Write@data,w
  7169  163A  1283               	bcf	3,5	;RP0=0, select bank0
  7170  163B  1303               	bcf	3,6	;RP1=0, select bank0
  7171  163C  0099               	movwf	25	;volatile
  7172  163D  0008               	return
  7173  163E                     __end_of_UART_Write:	
  7174                           
  7175                           	psect	text33
  7176  1600                     __ptext33:	
  7177 ;; *************** function _UART_TX_Empty *****************
  7178 ;; Defined at:
  7179 ;;		line 31 in file "./UART.h"
  7180 ;; Parameters:    Size  Location     Type
  7181 ;;		None
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;		None
  7184 ;; Return value:  Size  Location     Type
  7185 ;;                  1    wreg      unsigned char 
  7186 ;; Registers used:
  7187 ;;		wreg
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7193 ;;      Params:         0       0       0       0       0
  7194 ;;      Locals:         0       0       0       0       0
  7195 ;;      Temps:          0       0       0       0       0
  7196 ;;      Totals:         0       0       0       0       0
  7197 ;;Total ram usage:        0 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    1
  7200 ;; This function calls:
  7201 ;;		Nothing
  7202 ;; This function is called by:
  7203 ;;		_main
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           
  7208                           ;psect for function _UART_TX_Empty
  7209  1600                     _UART_TX_Empty:	
  7210                           
  7211                           ;./UART.h: 33:   return TRMT;
  7212                           
  7213                           ;incstack = 0
  7214                           ; Regs used in _UART_TX_Empty: [wreg]
  7215  1600  3000               	movlw	0
  7216  1601  1683               	bsf	3,5	;RP0=1, select bank1
  7217  1602  1303               	bcf	3,6	;RP1=0, select bank1
  7218  1603  1898               	btfsc	24,1	;volatile
  7219  1604  3001               	movlw	1
  7220  1605  0008               	return
  7221  1606                     __end_of_UART_TX_Empty:	
  7222                           
  7223                           	psect	text34
  7224  0A7C                     __ptext34:	
  7225 ;; *************** function _Lcd_Write_String *****************
  7226 ;; Defined at:
  7227 ;;		line 100 in file "./LCD4bits.h"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;  a               2    0[BANK0 ] PTR unsigned char 
  7230 ;;		 -> NULL(0), STR_33(13), STR_32(12), STR_31(12), 
  7231 ;;		 -> STR_30(12), STR_29(13), STR_28(6), STR_27(13), 
  7232 ;;		 -> STR_26(12), STR_25(17), STR_24(6), STR_23(7), 
  7233 ;;		 -> STR_22(7), STR_21(7), STR_20(8), STR_19(8), 
  7234 ;;		 -> STR_18(9), STR_17(9), STR_16(12), STR_15(12), 
  7235 ;;		 -> STR_11(10), STR_10(10), STR_9(10), STR_8(10), 
  7236 ;;		 -> STR_7(10), STR_6(10), STR_5(10), STR_4(10), 
  7237 ;;		 -> time(6), temp(6), STR_3(11), STR_2(7), 
  7238 ;;		 -> STR_1(31), 
  7239 ;; Auto vars:     Size  Location     Type
  7240 ;;  i               2    5[BANK0 ] int 
  7241 ;; Return value:  Size  Location     Type
  7242 ;;                  1    wreg      void 
  7243 ;; Registers used:
  7244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7245 ;; Tracked objects:
  7246 ;;		On entry : 0/0
  7247 ;;		On exit  : 0/0
  7248 ;;		Unchanged: 0/0
  7249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7250 ;;      Params:         0       2       0       0       0
  7251 ;;      Locals:         0       2       0       0       0
  7252 ;;      Temps:          0       3       0       0       0
  7253 ;;      Totals:         0       7       0       0       0
  7254 ;;Total ram usage:        7 bytes
  7255 ;; Hardware stack levels used:    1
  7256 ;; Hardware stack levels required when called:    3
  7257 ;; This function calls:
  7258 ;;		_Lcd_Write_Char
  7259 ;; This function is called by:
  7260 ;;		_main
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264                           
  7265                           ;psect for function _Lcd_Write_String
  7266  0A7C                     _Lcd_Write_String:	
  7267                           
  7268                           ;./LCD4bits.h: 100: void Lcd_Write_String(char *a);./LCD4bits.h: 101: {;./LCD4bits.h: 10
      +                          2:  int i;;./LCD4bits.h: 103:  for(i=0;a[i]!='\0';i++)
  7269                           
  7270                           ;incstack = 0
  7271                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7272  0A7C  1283               	bcf	3,5	;RP0=0, select bank0
  7273  0A7D  1303               	bcf	3,6	;RP1=0, select bank0
  7274  0A7E  01CC               	clrf	Lcd_Write_String@i
  7275  0A7F  01CD               	clrf	Lcd_Write_String@i+1
  7276  0A80                     l3808:	
  7277  0A80  084C               	movf	Lcd_Write_String@i,w
  7278  0A81  0747               	addwf	Lcd_Write_String@a,w
  7279  0A82  00CA               	movwf	??_Lcd_Write_String+1
  7280  0A83  0848               	movf	Lcd_Write_String@a+1,w
  7281  0A84  00C9               	movwf	??_Lcd_Write_String
  7282  0A85  1803               	skipnc
  7283  0A86  0AC9               	incf	??_Lcd_Write_String,f
  7284  0A87  1BCC               	btfsc	Lcd_Write_String@i,7
  7285  0A88  03C9               	decf	??_Lcd_Write_String,f
  7286  0A89  1283               	bcf	3,5	;RP0=0, select bank0
  7287  0A8A  1303               	bcf	3,6	;RP1=0, select bank0
  7288  0A8B  0849               	movf	??_Lcd_Write_String,w
  7289  0A8C  00CB               	movwf	??_Lcd_Write_String+2
  7290  0A8D  084B               	movf	??_Lcd_Write_String+2,w
  7291  0A8E  00FF               	movwf	127
  7292  0A8F  084A               	movf	??_Lcd_Write_String+1,w
  7293  0A90  0084               	movwf	4
  7294  0A91  120A  158A  2000  120A  158A  	fcall	stringtab
  7295  0A96  3A00               	xorlw	0
  7296  0A97  1903               	btfsc	3,2
  7297  0A98  0008               	return
  7298                           
  7299                           ;./LCD4bits.h: 104:     Lcd_Write_Char(a[i]);
  7300  0A99  084C               	movf	Lcd_Write_String@i,w
  7301  0A9A  0747               	addwf	Lcd_Write_String@a,w
  7302  0A9B  00CA               	movwf	??_Lcd_Write_String+1
  7303  0A9C  0848               	movf	Lcd_Write_String@a+1,w
  7304  0A9D  00C9               	movwf	??_Lcd_Write_String
  7305  0A9E  1803               	skipnc
  7306  0A9F  0AC9               	incf	??_Lcd_Write_String,f
  7307  0AA0  1BCC               	btfsc	Lcd_Write_String@i,7
  7308  0AA1  03C9               	decf	??_Lcd_Write_String,f
  7309  0AA2  1283               	bcf	3,5	;RP0=0, select bank0
  7310  0AA3  1303               	bcf	3,6	;RP1=0, select bank0
  7311  0AA4  0849               	movf	??_Lcd_Write_String,w
  7312  0AA5  00CB               	movwf	??_Lcd_Write_String+2
  7313  0AA6  084B               	movf	??_Lcd_Write_String+2,w
  7314  0AA7  00FF               	movwf	127
  7315  0AA8  084A               	movf	??_Lcd_Write_String+1,w
  7316  0AA9  0084               	movwf	4
  7317  0AAA  120A  158A  2000  120A  158A  	fcall	stringtab
  7318  0AAF  120A  158A  21CB  120A  158A  	fcall	_Lcd_Write_Char
  7319  0AB4  3001               	movlw	1
  7320  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  7321  0AB6  1303               	bcf	3,6	;RP1=0, select bank0
  7322  0AB7  07CC               	addwf	Lcd_Write_String@i,f
  7323  0AB8  1803               	skipnc
  7324  0AB9  0ACD               	incf	Lcd_Write_String@i+1,f
  7325  0ABA  3000               	movlw	0
  7326  0ABB  07CD               	addwf	Lcd_Write_String@i+1,f
  7327  0ABC  2A80               	goto	l3808
  7328  0ABD                     __end_of_Lcd_Write_String:	
  7329                           
  7330                           	psect	text35
  7331  09CB                     __ptext35:	
  7332 ;; *************** function _Lcd_Write_Char *****************
  7333 ;; Defined at:
  7334 ;;		line 84 in file "./LCD4bits.h"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;  a               1    wreg     unsigned char 
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;  a               1    7[COMMON] unsigned char 
  7339 ;;  y               1    6[COMMON] unsigned char 
  7340 ;;  temp            1    5[COMMON] unsigned char 
  7341 ;; Return value:  Size  Location     Type
  7342 ;;                  1    wreg      void 
  7343 ;; Registers used:
  7344 ;;		wreg, status,2, status,0, pclath, cstack
  7345 ;; Tracked objects:
  7346 ;;		On entry : 0/0
  7347 ;;		On exit  : 0/0
  7348 ;;		Unchanged: 0/0
  7349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7350 ;;      Params:         0       0       0       0       0
  7351 ;;      Locals:         3       0       0       0       0
  7352 ;;      Temps:          1       0       0       0       0
  7353 ;;      Totals:         4       0       0       0       0
  7354 ;;Total ram usage:        4 bytes
  7355 ;; Hardware stack levels used:    1
  7356 ;; Hardware stack levels required when called:    2
  7357 ;; This function calls:
  7358 ;;		_Lcd_Port
  7359 ;; This function is called by:
  7360 ;;		_Lcd_Write_String
  7361 ;;		_main
  7362 ;; This function uses a non-reentrant model
  7363 ;;
  7364                           
  7365                           
  7366                           ;psect for function _Lcd_Write_Char
  7367  09CB                     _Lcd_Write_Char:	
  7368                           
  7369                           ;incstack = 0
  7370                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  7371                           ;Lcd_Write_Char@a stored from wreg
  7372  09CB  00F7               	movwf	Lcd_Write_Char@a
  7373                           
  7374                           ;./LCD4bits.h: 84: void Lcd_Write_Char(char a);./LCD4bits.h: 85: {;./LCD4bits.h: 86:    
      +                          char temp,y;;./LCD4bits.h: 87:    temp = a&0x0F;
  7375  09CC  0877               	movf	Lcd_Write_Char@a,w
  7376  09CD  390F               	andlw	15
  7377  09CE  00F4               	movwf	??_Lcd_Write_Char
  7378  09CF  0874               	movf	??_Lcd_Write_Char,w
  7379  09D0  00F5               	movwf	Lcd_Write_Char@temp
  7380                           
  7381                           ;./LCD4bits.h: 88:    y = a&0xF0;
  7382  09D1  0877               	movf	Lcd_Write_Char@a,w
  7383  09D2  39F0               	andlw	240
  7384  09D3  00F4               	movwf	??_Lcd_Write_Char
  7385  09D4  0874               	movf	??_Lcd_Write_Char,w
  7386  09D5  00F6               	movwf	Lcd_Write_Char@y
  7387                           
  7388                           ;./LCD4bits.h: 89:    PORTBbits.RB4 = 1;
  7389  09D6  1283               	bcf	3,5	;RP0=0, select bank0
  7390  09D7  1303               	bcf	3,6	;RP1=0, select bank0
  7391  09D8  1606               	bsf	6,4	;volatile
  7392                           
  7393                           ;./LCD4bits.h: 90:    Lcd_Port(y>>4);
  7394  09D9  0876               	movf	Lcd_Write_Char@y,w
  7395  09DA  00F4               	movwf	??_Lcd_Write_Char
  7396  09DB  3004               	movlw	4
  7397  09DC                     u2155:	
  7398  09DC  1003               	clrc
  7399  09DD  0CF4               	rrf	??_Lcd_Write_Char,f
  7400  09DE  3EFF               	addlw	-1
  7401  09DF  1D03               	skipz
  7402  09E0  29DC               	goto	u2155
  7403  09E1  0874               	movf	??_Lcd_Write_Char,w
  7404  09E2  160A  118A  2665  120A  158A  	fcall	_Lcd_Port
  7405                           
  7406                           ;./LCD4bits.h: 91:    PORTBbits.RB5 = 1;
  7407  09E7  1283               	bcf	3,5	;RP0=0, select bank0
  7408  09E8  1303               	bcf	3,6	;RP1=0, select bank0
  7409  09E9  1686               	bsf	6,5	;volatile
  7410                           
  7411                           ;./LCD4bits.h: 92:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  7412  09EA  301A               	movlw	26
  7413  09EB  00F4               	movwf	??_Lcd_Write_Char
  7414  09EC                     u5137:	
  7415  09EC  0BF4               	decfsz	??_Lcd_Write_Char,f
  7416  09ED  29EC               	goto	u5137
  7417  09EE  0000               	nop
  7418                           
  7419                           ;./LCD4bits.h: 93:    PORTBbits.RB5 = 0;
  7420  09EF  1283               	bcf	3,5	;RP0=0, select bank0
  7421  09F0  1303               	bcf	3,6	;RP1=0, select bank0
  7422  09F1  1286               	bcf	6,5	;volatile
  7423                           
  7424                           ;./LCD4bits.h: 94:    Lcd_Port(temp);
  7425  09F2  0875               	movf	Lcd_Write_Char@temp,w
  7426  09F3  160A  118A  2665  120A  158A  	fcall	_Lcd_Port
  7427                           
  7428                           ;./LCD4bits.h: 95:    PORTBbits.RB5 = 1;
  7429  09F8  1283               	bcf	3,5	;RP0=0, select bank0
  7430  09F9  1303               	bcf	3,6	;RP1=0, select bank0
  7431  09FA  1686               	bsf	6,5	;volatile
  7432                           
  7433                           ;./LCD4bits.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  7434  09FB  301A               	movlw	26
  7435  09FC  00F4               	movwf	??_Lcd_Write_Char
  7436  09FD                     u5147:	
  7437  09FD  0BF4               	decfsz	??_Lcd_Write_Char,f
  7438  09FE  29FD               	goto	u5147
  7439  09FF  0000               	nop
  7440                           
  7441                           ;./LCD4bits.h: 97:    PORTBbits.RB5 = 0;
  7442  0A00  1283               	bcf	3,5	;RP0=0, select bank0
  7443  0A01  1303               	bcf	3,6	;RP1=0, select bank0
  7444  0A02  1286               	bcf	6,5	;volatile
  7445  0A03  0008               	return
  7446  0A04                     __end_of_Lcd_Write_Char:	
  7447                           
  7448                           	psect	text36
  7449  07F2                     __ptext36:	
  7450 ;; *************** function _Lcd_Shift_Right *****************
  7451 ;; Defined at:
  7452 ;;		line 107 in file "./LCD4bits.h"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;		None
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;		None
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  1    wreg      void 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2, status,0, pclath, cstack
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7466 ;;      Params:         0       0       0       0       0
  7467 ;;      Locals:         0       0       0       0       0
  7468 ;;      Temps:          0       0       0       0       0
  7469 ;;      Totals:         0       0       0       0       0
  7470 ;;Total ram usage:        0 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; Hardware stack levels required when called:    3
  7473 ;; This function calls:
  7474 ;;		_Lcd_Cmd
  7475 ;; This function is called by:
  7476 ;;		_main
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           
  7481                           ;psect for function _Lcd_Shift_Right
  7482  07F2                     _Lcd_Shift_Right:	
  7483                           
  7484                           ;./LCD4bits.h: 109:  Lcd_Cmd(0x01);
  7485                           
  7486                           ;incstack = 0
  7487                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
  7488  07F2  3001               	movlw	1
  7489  07F3  160A  118A  267F  120A  118A  	fcall	_Lcd_Cmd
  7490                           
  7491                           ;./LCD4bits.h: 110:  Lcd_Cmd(0x0C);
  7492  07F8  300C               	movlw	12
  7493  07F9  160A  118A  267F   	fcall	_Lcd_Cmd
  7494  07FC  0008               	return
  7495  07FD                     __end_of_Lcd_Shift_Right:	
  7496                           
  7497                           	psect	text37
  7498  1649                     __ptext37:	
  7499 ;; *************** function _Lcd_Shift_Left *****************
  7500 ;; Defined at:
  7501 ;;		line 113 in file "./LCD4bits.h"
  7502 ;; Parameters:    Size  Location     Type
  7503 ;;		None
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;		None
  7506 ;; Return value:  Size  Location     Type
  7507 ;;                  1    wreg      void 
  7508 ;; Registers used:
  7509 ;;		wreg, status,2, status,0, pclath, cstack
  7510 ;; Tracked objects:
  7511 ;;		On entry : 0/0
  7512 ;;		On exit  : 0/0
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7515 ;;      Params:         0       0       0       0       0
  7516 ;;      Locals:         0       0       0       0       0
  7517 ;;      Temps:          0       0       0       0       0
  7518 ;;      Totals:         0       0       0       0       0
  7519 ;;Total ram usage:        0 bytes
  7520 ;; Hardware stack levels used:    1
  7521 ;; Hardware stack levels required when called:    3
  7522 ;; This function calls:
  7523 ;;		_Lcd_Cmd
  7524 ;; This function is called by:
  7525 ;;		_main
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           
  7530                           ;psect for function _Lcd_Shift_Left
  7531  1649                     _Lcd_Shift_Left:	
  7532                           
  7533                           ;./LCD4bits.h: 115:  Lcd_Cmd(0x01);
  7534                           
  7535                           ;incstack = 0
  7536                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  7537  1649  3001               	movlw	1
  7538  164A  160A  118A  267F  160A  118A  	fcall	_Lcd_Cmd
  7539                           
  7540                           ;./LCD4bits.h: 116:  Lcd_Cmd(0x08);
  7541  164F  3008               	movlw	8
  7542  1650  160A  118A  267F   	fcall	_Lcd_Cmd
  7543  1653  0008               	return
  7544  1654                     __end_of_Lcd_Shift_Left:	
  7545                           
  7546                           	psect	text38
  7547  0B50                     __ptext38:	
  7548 ;; *************** function _Lcd_Set_Cursor *****************
  7549 ;; Defined at:
  7550 ;;		line 44 in file "./LCD4bits.h"
  7551 ;; Parameters:    Size  Location     Type
  7552 ;;  a               1    wreg     unsigned char 
  7553 ;;  b               1    7[COMMON] unsigned char 
  7554 ;; Auto vars:     Size  Location     Type
  7555 ;;  a               1    2[BANK0 ] unsigned char 
  7556 ;;  temp            1    5[BANK0 ] unsigned char 
  7557 ;;  y               1    4[BANK0 ] unsigned char 
  7558 ;;  z               1    3[BANK0 ] unsigned char 
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  1    wreg      void 
  7561 ;; Registers used:
  7562 ;;		wreg, status,2, status,0, pclath, cstack
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7568 ;;      Params:         1       0       0       0       0
  7569 ;;      Locals:         0       4       0       0       0
  7570 ;;      Temps:          0       2       0       0       0
  7571 ;;      Totals:         1       6       0       0       0
  7572 ;;Total ram usage:        7 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    3
  7575 ;; This function calls:
  7576 ;;		_Lcd_Cmd
  7577 ;; This function is called by:
  7578 ;;		_main
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           
  7583                           ;psect for function _Lcd_Set_Cursor
  7584  0B50                     _Lcd_Set_Cursor:	
  7585                           
  7586                           ;incstack = 0
  7587                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  7588                           ;Lcd_Set_Cursor@a stored from wreg
  7589  0B50  1283               	bcf	3,5	;RP0=0, select bank0
  7590  0B51  1303               	bcf	3,6	;RP1=0, select bank0
  7591  0B52  00C9               	movwf	Lcd_Set_Cursor@a
  7592                           
  7593                           ;./LCD4bits.h: 44: void Lcd_Set_Cursor(char a, char b);./LCD4bits.h: 45: {;./LCD4bits.h:
      +                           46:  char temp,z,y;;./LCD4bits.h: 47:  if(a == 1)
  7594  0B53  0349               	decf	Lcd_Set_Cursor@a,w
  7595  0B54  1D03               	btfss	3,2
  7596  0B55  2B79               	goto	l3792
  7597                           
  7598                           ;./LCD4bits.h: 48:  {;./LCD4bits.h: 49:    temp = 0x80 + b - 1;
  7599  0B56  0877               	movf	Lcd_Set_Cursor@b,w
  7600  0B57  3E7F               	addlw	127
  7601  0B58  00C7               	movwf	??_Lcd_Set_Cursor
  7602  0B59  0847               	movf	??_Lcd_Set_Cursor,w
  7603  0B5A  00CC               	movwf	Lcd_Set_Cursor@temp
  7604                           
  7605                           ;./LCD4bits.h: 50:   z = temp>>4;
  7606  0B5B  084C               	movf	Lcd_Set_Cursor@temp,w
  7607  0B5C  00C7               	movwf	??_Lcd_Set_Cursor
  7608  0B5D  3004               	movlw	4
  7609  0B5E                     u3955:	
  7610  0B5E  1003               	clrc
  7611  0B5F  0CC7               	rrf	??_Lcd_Set_Cursor,f
  7612  0B60  3EFF               	addlw	-1
  7613  0B61  1D03               	skipz
  7614  0B62  2B5E               	goto	u3955
  7615  0B63  0847               	movf	??_Lcd_Set_Cursor,w
  7616  0B64  00C8               	movwf	??_Lcd_Set_Cursor+1
  7617  0B65  0848               	movf	??_Lcd_Set_Cursor+1,w
  7618  0B66  00CA               	movwf	Lcd_Set_Cursor@z
  7619                           
  7620                           ;./LCD4bits.h: 51:   y = temp & 0x0F;
  7621  0B67  084C               	movf	Lcd_Set_Cursor@temp,w
  7622  0B68  390F               	andlw	15
  7623  0B69  00C7               	movwf	??_Lcd_Set_Cursor
  7624  0B6A  0847               	movf	??_Lcd_Set_Cursor,w
  7625  0B6B  00CB               	movwf	Lcd_Set_Cursor@y
  7626                           
  7627                           ;./LCD4bits.h: 52:   Lcd_Cmd(z);
  7628  0B6C  084A               	movf	Lcd_Set_Cursor@z,w
  7629  0B6D  160A  118A  267F  120A  158A  	fcall	_Lcd_Cmd
  7630                           
  7631                           ;./LCD4bits.h: 53:   Lcd_Cmd(y);
  7632  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  7633  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  7634  0B74  084B               	movf	Lcd_Set_Cursor@y,w
  7635  0B75  160A  118A  267F   	fcall	_Lcd_Cmd
  7636                           
  7637                           ;./LCD4bits.h: 54:  }
  7638  0B78  0008               	return
  7639  0B79                     l3792:	
  7640  0B79  3002               	movlw	2
  7641  0B7A  0649               	xorwf	Lcd_Set_Cursor@a,w
  7642  0B7B  1D03               	btfss	3,2
  7643  0B7C  0008               	return
  7644                           
  7645                           ;./LCD4bits.h: 56:  {;./LCD4bits.h: 57:   temp = 0xC0 + b - 1;
  7646  0B7D  0877               	movf	Lcd_Set_Cursor@b,w
  7647  0B7E  3EBF               	addlw	191
  7648  0B7F  00C7               	movwf	??_Lcd_Set_Cursor
  7649  0B80  0847               	movf	??_Lcd_Set_Cursor,w
  7650  0B81  00CC               	movwf	Lcd_Set_Cursor@temp
  7651                           
  7652                           ;./LCD4bits.h: 58:   z = temp>>4;
  7653  0B82  084C               	movf	Lcd_Set_Cursor@temp,w
  7654  0B83  00C7               	movwf	??_Lcd_Set_Cursor
  7655  0B84  3004               	movlw	4
  7656  0B85                     u3975:	
  7657  0B85  1003               	clrc
  7658  0B86  0CC7               	rrf	??_Lcd_Set_Cursor,f
  7659  0B87  3EFF               	addlw	-1
  7660  0B88  1D03               	skipz
  7661  0B89  2B85               	goto	u3975
  7662  0B8A  0847               	movf	??_Lcd_Set_Cursor,w
  7663  0B8B  00C8               	movwf	??_Lcd_Set_Cursor+1
  7664  0B8C  0848               	movf	??_Lcd_Set_Cursor+1,w
  7665  0B8D  00CA               	movwf	Lcd_Set_Cursor@z
  7666                           
  7667                           ;./LCD4bits.h: 59:   y = temp & 0x0F;
  7668  0B8E  084C               	movf	Lcd_Set_Cursor@temp,w
  7669  0B8F  390F               	andlw	15
  7670  0B90  00C7               	movwf	??_Lcd_Set_Cursor
  7671  0B91  0847               	movf	??_Lcd_Set_Cursor,w
  7672  0B92  00CB               	movwf	Lcd_Set_Cursor@y
  7673                           
  7674                           ;./LCD4bits.h: 60:   Lcd_Cmd(z);
  7675  0B93  084A               	movf	Lcd_Set_Cursor@z,w
  7676  0B94  160A  118A  267F  120A  158A  	fcall	_Lcd_Cmd
  7677                           
  7678                           ;./LCD4bits.h: 61:   Lcd_Cmd(y);
  7679  0B99  1283               	bcf	3,5	;RP0=0, select bank0
  7680  0B9A  1303               	bcf	3,6	;RP1=0, select bank0
  7681  0B9B  084B               	movf	Lcd_Set_Cursor@y,w
  7682  0B9C  160A  118A  267F   	fcall	_Lcd_Cmd
  7683  0B9F  0008               	return
  7684  0BA0                     __end_of_Lcd_Set_Cursor:	
  7685                           
  7686                           	psect	text39
  7687  163E                     __ptext39:	
  7688 ;; *************** function _Lcd_Clear *****************
  7689 ;; Defined at:
  7690 ;;		line 38 in file "./LCD4bits.h"
  7691 ;; Parameters:    Size  Location     Type
  7692 ;;		None
  7693 ;; Auto vars:     Size  Location     Type
  7694 ;;		None
  7695 ;; Return value:  Size  Location     Type
  7696 ;;                  1    wreg      void 
  7697 ;; Registers used:
  7698 ;;		wreg, status,2, status,0, pclath, cstack
  7699 ;; Tracked objects:
  7700 ;;		On entry : 0/0
  7701 ;;		On exit  : 0/0
  7702 ;;		Unchanged: 0/0
  7703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7704 ;;      Params:         0       0       0       0       0
  7705 ;;      Locals:         0       0       0       0       0
  7706 ;;      Temps:          0       0       0       0       0
  7707 ;;      Totals:         0       0       0       0       0
  7708 ;;Total ram usage:        0 bytes
  7709 ;; Hardware stack levels used:    1
  7710 ;; Hardware stack levels required when called:    3
  7711 ;; This function calls:
  7712 ;;		_Lcd_Cmd
  7713 ;; This function is called by:
  7714 ;;		_main
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           
  7719                           ;psect for function _Lcd_Clear
  7720  163E                     _Lcd_Clear:	
  7721                           
  7722                           ;./LCD4bits.h: 40:  Lcd_Cmd(0);
  7723                           
  7724                           ;incstack = 0
  7725                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  7726  163E  3000               	movlw	0
  7727  163F  160A  118A  267F  160A  118A  	fcall	_Lcd_Cmd
  7728                           
  7729                           ;./LCD4bits.h: 41:  Lcd_Cmd(1);
  7730  1644  3001               	movlw	1
  7731  1645  160A  118A  267F   	fcall	_Lcd_Cmd
  7732  1648  0008               	return
  7733  1649                     __end_of_Lcd_Clear:	
  7734                           
  7735                           	psect	text40
  7736  167F                     __ptext40:	
  7737 ;; *************** function _Lcd_Cmd *****************
  7738 ;; Defined at:
  7739 ;;		line 29 in file "./LCD4bits.h"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;  a               1    wreg     unsigned char 
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;  a               1    6[COMMON] unsigned char 
  7744 ;; Return value:  Size  Location     Type
  7745 ;;                  1    wreg      void 
  7746 ;; Registers used:
  7747 ;;		wreg, status,2, status,0, pclath, cstack
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7753 ;;      Params:         0       0       0       0       0
  7754 ;;      Locals:         1       0       0       0       0
  7755 ;;      Temps:          2       0       0       0       0
  7756 ;;      Totals:         3       0       0       0       0
  7757 ;;Total ram usage:        3 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:    2
  7760 ;; This function calls:
  7761 ;;		_Lcd_Port
  7762 ;; This function is called by:
  7763 ;;		_Lcd_Clear
  7764 ;;		_Lcd_Set_Cursor
  7765 ;;		_Lcd_Init
  7766 ;;		_Lcd_Shift_Right
  7767 ;;		_Lcd_Shift_Left
  7768 ;; This function uses a non-reentrant model
  7769 ;;
  7770                           
  7771                           
  7772                           ;psect for function _Lcd_Cmd
  7773  167F                     _Lcd_Cmd:	
  7774                           
  7775                           ;incstack = 0
  7776                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  7777                           ;Lcd_Cmd@a stored from wreg
  7778  167F  00F6               	movwf	Lcd_Cmd@a
  7779                           
  7780                           ;./LCD4bits.h: 29: void Lcd_Cmd(char a);./LCD4bits.h: 30: {;./LCD4bits.h: 31:  PORTBbits
      +                          .RB4 = 0;
  7781  1680  1283               	bcf	3,5	;RP0=0, select bank0
  7782  1681  1303               	bcf	3,6	;RP1=0, select bank0
  7783  1682  1206               	bcf	6,4	;volatile
  7784                           
  7785                           ;./LCD4bits.h: 32:  Lcd_Port(a);
  7786  1683  0876               	movf	Lcd_Cmd@a,w
  7787  1684  160A  118A  2665  160A  118A  	fcall	_Lcd_Port
  7788                           
  7789                           ;./LCD4bits.h: 33:  PORTBbits.RB5 = 1;
  7790  1689  1283               	bcf	3,5	;RP0=0, select bank0
  7791  168A  1303               	bcf	3,6	;RP1=0, select bank0
  7792  168B  1686               	bsf	6,5	;volatile
  7793                           
  7794                           ;./LCD4bits.h: 34:         _delay((unsigned long)((4)*(8000000/4000.0)));
  7795  168C  300B               	movlw	11
  7796  168D  00F5               	movwf	??_Lcd_Cmd+1
  7797  168E  3062               	movlw	98
  7798  168F  00F4               	movwf	??_Lcd_Cmd
  7799  1690                     u5157:	
  7800  1690  0BF4               	decfsz	??_Lcd_Cmd,f
  7801  1691  2E90               	goto	u5157
  7802  1692  0BF5               	decfsz	??_Lcd_Cmd+1,f
  7803  1693  2E90               	goto	u5157
  7804  1694  0000               	nop
  7805                           
  7806                           ;./LCD4bits.h: 35:         PORTBbits.RB5 = 0;
  7807  1695  1283               	bcf	3,5	;RP0=0, select bank0
  7808  1696  1303               	bcf	3,6	;RP1=0, select bank0
  7809  1697  1286               	bcf	6,5	;volatile
  7810  1698  0008               	return
  7811  1699                     __end_of_Lcd_Cmd:	
  7812                           
  7813                           	psect	text41
  7814  1665                     __ptext41:	
  7815 ;; *************** function _Lcd_Port *****************
  7816 ;; Defined at:
  7817 ;;		line 7 in file "./LCD4bits.h"
  7818 ;; Parameters:    Size  Location     Type
  7819 ;;  a               1    wreg     unsigned char 
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;  a               1    3[COMMON] unsigned char 
  7822 ;; Return value:  Size  Location     Type
  7823 ;;                  1    wreg      void 
  7824 ;; Registers used:
  7825 ;;		wreg
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7831 ;;      Params:         0       0       0       0       0
  7832 ;;      Locals:         1       0       0       0       0
  7833 ;;      Temps:          0       0       0       0       0
  7834 ;;      Totals:         1       0       0       0       0
  7835 ;;Total ram usage:        1 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; Hardware stack levels required when called:    1
  7838 ;; This function calls:
  7839 ;;		Nothing
  7840 ;; This function is called by:
  7841 ;;		_Lcd_Cmd
  7842 ;;		_Lcd_Init
  7843 ;;		_Lcd_Write_Char
  7844 ;; This function uses a non-reentrant model
  7845 ;;
  7846                           
  7847                           
  7848                           ;psect for function _Lcd_Port
  7849  1665                     _Lcd_Port:	
  7850                           
  7851                           ;incstack = 0
  7852                           ; Regs used in _Lcd_Port: [wreg]
  7853                           ;Lcd_Port@a stored from wreg
  7854  1665  00F3               	movwf	Lcd_Port@a
  7855                           
  7856                           ;./LCD4bits.h: 7: void Lcd_Port(char a);./LCD4bits.h: 8: {;./LCD4bits.h: 9:  if(a & 1)
  7857  1666  1C73               	btfss	Lcd_Port@a,0
  7858  1667  2E6C               	goto	l160
  7859                           
  7860                           ;./LCD4bits.h: 10:   PORTBbits.RB0 = 1;
  7861  1668  1283               	bcf	3,5	;RP0=0, select bank0
  7862  1669  1303               	bcf	3,6	;RP1=0, select bank0
  7863  166A  1406               	bsf	6,0	;volatile
  7864  166B  2E6F               	goto	l161
  7865  166C                     l160:	
  7866                           ;./LCD4bits.h: 11:  else
  7867                           
  7868                           
  7869                           ;./LCD4bits.h: 12:   PORTBbits.RB0 = 0;
  7870  166C  1283               	bcf	3,5	;RP0=0, select bank0
  7871  166D  1303               	bcf	3,6	;RP1=0, select bank0
  7872  166E  1006               	bcf	6,0	;volatile
  7873  166F                     l161:	
  7874                           
  7875                           ;./LCD4bits.h: 14:  if(a & 2)
  7876  166F  1CF3               	btfss	Lcd_Port@a,1
  7877  1670  2E73               	goto	l162
  7878                           
  7879                           ;./LCD4bits.h: 15:   PORTBbits.RB1 = 1;
  7880  1671  1486               	bsf	6,1	;volatile
  7881  1672  2E74               	goto	l163
  7882  1673                     l162:	
  7883                           ;./LCD4bits.h: 16:  else
  7884                           
  7885                           
  7886                           ;./LCD4bits.h: 17:   PORTBbits.RB1 = 0;
  7887  1673  1086               	bcf	6,1	;volatile
  7888  1674                     l163:	
  7889                           
  7890                           ;./LCD4bits.h: 19:  if(a & 4)
  7891  1674  1D73               	btfss	Lcd_Port@a,2
  7892  1675  2E78               	goto	l164
  7893                           
  7894                           ;./LCD4bits.h: 20:   PORTBbits.RB2 = 1;
  7895  1676  1506               	bsf	6,2	;volatile
  7896  1677  2E79               	goto	l165
  7897  1678                     l164:	
  7898                           ;./LCD4bits.h: 21:  else
  7899                           
  7900                           
  7901                           ;./LCD4bits.h: 22:   PORTBbits.RB2 = 0;
  7902  1678  1106               	bcf	6,2	;volatile
  7903  1679                     l165:	
  7904                           
  7905                           ;./LCD4bits.h: 24:  if(a & 8)
  7906  1679  1DF3               	btfss	Lcd_Port@a,3
  7907  167A  2E7D               	goto	l166
  7908                           
  7909                           ;./LCD4bits.h: 25:   PORTBbits.RB3 = 1;
  7910  167B  1586               	bsf	6,3	;volatile
  7911  167C  0008               	return
  7912  167D                     l166:	
  7913                           ;./LCD4bits.h: 26:  else
  7914                           
  7915                           
  7916                           ;./LCD4bits.h: 27:   PORTBbits.RB3 = 0;
  7917  167D  1186               	bcf	6,3	;volatile
  7918  167E  0008               	return
  7919  167F                     __end_of_Lcd_Port:	
  7920                           
  7921                           	psect	text42
  7922  16CF                     __ptext42:	
  7923 ;; *************** function _manual_pwm *****************
  7924 ;; Defined at:
  7925 ;;		line 58 in file "mainMaster.c"
  7926 ;; Parameters:    Size  Location     Type
  7927 ;;		None
  7928 ;; Auto vars:     Size  Location     Type
  7929 ;;		None
  7930 ;; Return value:  Size  Location     Type
  7931 ;;                  1    wreg      void 
  7932 ;; Registers used:
  7933 ;;		wreg, status,2, status,0
  7934 ;; Tracked objects:
  7935 ;;		On entry : 0/0
  7936 ;;		On exit  : 0/0
  7937 ;;		Unchanged: 0/0
  7938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7939 ;;      Params:         0       0       0       0       0
  7940 ;;      Locals:         0       0       0       0       0
  7941 ;;      Temps:          3       0       0       0       0
  7942 ;;      Totals:         3       0       0       0       0
  7943 ;;Total ram usage:        3 bytes
  7944 ;; Hardware stack levels used:    1
  7945 ;; This function calls:
  7946 ;;		Nothing
  7947 ;; This function is called by:
  7948 ;;		Interrupt level 1
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           
  7953                           ;psect for function _manual_pwm
  7954  16CF                     _manual_pwm:	
  7955                           
  7956                           ;mainMaster.c: 59:     if (INTCONbits.T0IF == 1){
  7957  16CF  1D0B               	btfss	11,2	;volatile
  7958  16D0  2EE7               	goto	i1l313
  7959                           
  7960                           ;mainMaster.c: 61:         cont++;
  7961  16D1  3001               	movlw	1
  7962  16D2  00F0               	movwf	??_manual_pwm
  7963  16D3  0870               	movf	??_manual_pwm,w
  7964  16D4  1283               	bcf	3,5	;RP0=0, select bank0
  7965  16D5  1303               	bcf	3,6	;RP1=0, select bank0
  7966  16D6  07AD               	addwf	_cont,f
  7967                           
  7968                           ;mainMaster.c: 62:             if(cont < 200){
  7969  16D7  30C8               	movlw	200
  7970  16D8  022D               	subwf	_cont,w
  7971  16D9  1803               	skipnc
  7972  16DA  2EE3               	goto	i1l2984
  7973                           
  7974                           ;mainMaster.c: 63:                 if(cont < val){
  7975  16DB  082C               	movf	_val,w
  7976  16DC  022D               	subwf	_cont,w
  7977  16DD  1803               	skipnc
  7978  16DE  2EE1               	goto	i1l310
  7979                           
  7980                           ;mainMaster.c: 64:                     PORTAbits.RA1 = 1;
  7981  16DF  1485               	bsf	5,1	;volatile
  7982                           
  7983                           ;mainMaster.c: 65:                 }else{
  7984  16E0  2EE4               	goto	i1l2986
  7985  16E1                     i1l310:	
  7986                           
  7987                           ;mainMaster.c: 66:                     PORTAbits.RA1 = 0;
  7988  16E1  1085               	bcf	5,1	;volatile
  7989  16E2  2EE4               	goto	i1l2986
  7990  16E3                     i1l2984:	
  7991                           
  7992                           ;mainMaster.c: 69:                 cont = 0;
  7993  16E3  01AD               	clrf	_cont
  7994  16E4                     i1l2986:	
  7995                           
  7996                           ;mainMaster.c: 71:             TMR0 = 56;
  7997  16E4  3038               	movlw	56
  7998  16E5  0081               	movwf	1	;volatile
  7999                           
  8000                           ;mainMaster.c: 72:             INTCONbits.T0IF = 0;
  8001  16E6  110B               	bcf	11,2	;volatile
  8002  16E7                     i1l313:	
  8003  16E7  0872               	movf	??_manual_pwm+2,w
  8004  16E8  008A               	movwf	10
  8005  16E9  0E71               	swapf	(??_manual_pwm+1)^(0+4294967168),w
  8006  16EA  0083               	movwf	3
  8007  16EB  0EFE               	swapf	126,f
  8008  16EC  0E7E               	swapf	126,w
  8009  16ED  0009               	retfie
  8010  16EE                     __end_of_manual_pwm:	
  8011  007E                     btemp	set	126	;btemp
  8012  007E                     wtemp0	set	126
  8013                           
  8014                           	psect	intentry
  8015  0004                     __pintentry:	
  8016                           ;incstack = 0
  8017                           ; Regs used in _manual_pwm: [wreg+status,2+status,0]
  8018                           
  8019  0004                     interrupt_function:	
  8020  007E                     saved_w	set	btemp
  8021  0004  00FE               	movwf	btemp
  8022  0005  0E03               	swapf	3,w
  8023  0006  00F1               	movwf	??_manual_pwm+1
  8024  0007  080A               	movf	10,w
  8025  0008  00F2               	movwf	??_manual_pwm+2
  8026  0009  160A  118A  2ECF   	ljmp	_manual_pwm


Data Sizes:
    Strings     327
    Constant    10
    Data        5
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     33      77
    BANK1            80      6       6
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), temp(BANK0[6]), 

    strcat@from	PTR const unsigned char  size(1) Largest target is 3
		 -> get_temp@decimal(BANK0[3]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_36(CODE[4]), STR_35(CODE[5]), STR_34(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> get_temp@decimal(BANK0[3]), temp(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_temp@temp_string	PTR unsigned char  size(1) Largest target is 6
		 -> temp(BANK0[6]), 

    get_time@time_string	PTR unsigned char  size(1) Largest target is 6
		 -> time(BANK0[6]), 

    day2	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), STR_11(CODE[10]), STR_10(CODE[10]), STR_9(CODE[10]), 
		 -> STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), STR_33(CODE[13]), STR_32(CODE[12]), STR_31(CODE[12]), 
		 -> STR_30(CODE[12]), STR_29(CODE[13]), STR_28(CODE[6]), STR_27(CODE[13]), 
		 -> STR_26(CODE[12]), STR_25(CODE[17]), STR_24(CODE[6]), STR_23(CODE[7]), 
		 -> STR_22(CODE[7]), STR_21(CODE[7]), STR_20(CODE[8]), STR_19(CODE[8]), 
		 -> STR_18(CODE[9]), STR_17(CODE[9]), STR_16(CODE[12]), STR_15(CODE[12]), 
		 -> STR_11(CODE[10]), STR_10(CODE[10]), STR_9(CODE[10]), STR_8(CODE[10]), 
		 -> STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), 
		 -> time(BANK0[6]), temp(BANK0[6]), STR_3(CODE[11]), STR_2(CODE[7]), 
		 -> STR_1(CODE[31]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_Char
    _main->___awdiv
    _main->___awmod
    _main->_get_IR
    _main->_get_PIR
    _main->_get_day
    _main->_get_hall
    _main->_get_tripwire
    _main->_strcmp
    _main->_write_RTC
    _write_RTC->_I2C_Master_Write
    _setup->_I2C_Master_Init
    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _open_door->_I2C_Master_Write
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read
    _close_door->_I2C_Master_Write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _manual_pwm in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_get_temp
    _setup->_UART_Init
    _UART_Init->___aldiv
    _I2C_Master_Init->___lldiv
    _get_tripwire->_I2C_Master_Read
    _get_time->_I2C_Master_Read
    _get_temp->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_hall->_I2C_Master_Read
    _get_day->_I2C_Master_Read
    _get_PIR->_I2C_Master_Read
    _get_IR->_I2C_Master_Read

Critical Paths under _manual_pwm in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _manual_pwm in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _manual_pwm in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _manual_pwm in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   39486
                                              0 BANK1      6     6      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                     _Lcd_Write_Char
                   _Lcd_Write_String
                      _UART_TX_Empty
                         _UART_Write
                            ___awdiv
                            ___awmod
                             ___bmul
                         _close_door
                             _get_IR
                            _get_PIR
                            _get_day
                           _get_hall
                           _get_temp
                           _get_time
                       _get_tripwire
                          _open_door
                              _setup
                             _strcmp
                          _write_RTC
 ---------------------------------------------------------------------------------
 (1) _write_RTC                                            5     3      2    2284
                                              5 COMMON     3     1      2
                                              0 BANK0      2     2      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               7     5      2     511
                                              3 COMMON     5     3      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1880
                    _I2C_Master_Init
                           _Lcd_Init
                          _UART_Init
                      _initOscilador
 ---------------------------------------------------------------------------------
 (2) _initOscilador                                        3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4    1118
                                              4 COMMON     2     2      0
                                             14 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     805
                                              3 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              0 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     542
                                              4 COMMON     4     4      0
                                             13 BANK0      4     0      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     421
                                              3 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _open_door                                            0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_tripwire                                         2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_time                                             5     5      0    3238
                                              2 BANK0      5     5      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             9     9      0    5666
                                             24 BANK0      9     9      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     3      1     207
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    19      4    1806
                                              9 BANK0     15    11      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     320
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _get_hall                                             2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _get_PIR                                              2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _get_IR                                               2     2      0    2920
                                              7 COMMON     1     1      0
                                              2 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     875
                                              3 COMMON     4     2      2
                                              0 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _close_door                                           0     0      0    2011
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    2011
                                              3 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     793
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     604
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Empty                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    2738
                                              0 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              4 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    2300
                                              7 COMMON     1     0      1
                                              0 BANK0      6     6      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              4 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _manual_pwm                                           3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_TX_Empty
   _UART_Write
   ___awdiv
   ___awmod
   ___bmul
   _close_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_IR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_PIR
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_day
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_hall
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___bmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _strcat
   _get_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _get_tripwire
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _open_door
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _setup
     _I2C_Master_Init
       ___lldiv
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
     _initOscilador
   _strcmp
   _write_RTC
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _manual_pwm (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      6       6       7        7.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     21      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5E      12        0.0%
ABS                  0      0      5E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Mar 09 23:35:16 2019

                                _i 0036                                  _j 0035  
                                _k 0078                                  pc 0002  
                   ___bmul@product 0075                        __CFG_CP$OFF 0000  
                      get_hall@key 0049                                 _IR 0037  
                     ___awdiv@sign 0048                                 fsr 0004  
                              l203 0BF3                                l134 162B  
                              l160 166C                                l152 17C1  
                              l161 166F                                l153 17C4  
                              l162 1673                                l410 05A5  
                              l402 04BC                                l163 1674  
                              l323 016A                                l164 1678  
                              l165 1679                                l413 05C1  
                              l166 167D                                l238 1635  
                              l422 061B                                l416 05DF  
                              l328 014B                                l361 02DE  
                              l337 017C                                l338 018D  
                              l419 05FD                                l429 06AD  
                              l376 033C                                l393 048C  
                              l396 049C                                l399 04AC  
                              l658 0E06                                _GIE 005F  
                     __CFG_CPD$OFF 0000                                _PIR 0038  
                    ?_get_tripwire 0070                                _min 002A  
                              _val 002C                                fsr0 0004  
                              indf 0000                       ___awmod@sign 0048  
                     __CFG_LVP$OFF 0000                               l4014 0061  
                             l4200 02F7                               l4120 01A1  
                             l4122 01A2                               l4106 018F  
                             l4116 019D                               l4028 007F  
                             l2470 17E2                               l4118 019E  
                             l4046 00DB                               l2560 0BA7  
                             l4400 0639                               l4240 038D  
                             l4224 032F                               l4208 0312  
                             l2474 17F0                               l3610 0E7A  
                             l3602 0E5F                               l2570 0BC5  
                             l2562 0BAD                               l4322 04D9  
                             l4226 033F                               l4170 0279  
                             l4074 013E                               l4090 016C  
                             l2468 17D4                               l2572 0BCC  
                             l2564 0BB3                               l4404 063D  
                             l4228 0340                               l4180 0297  
                             l4172 027F                               l4164 0267  
                             l4156 025E                               l4076 014E  
                             l2910 0C22                               l2478 17FB  
                             l3606 0E6C                               l3702 0FE6  
                             l2574 0BCC                               l2566 0BB9  
                             l2558 0BA2                               l4430 0683  
                             l4182 029D                               l4174 0285  
                             l4086 015D                               l2920 0C43  
                             l3632 0A6C                               l3624 0A48  
                             l2680 1792                               l2568 0BBF  
                             l4440 0699                               l4328 0560  
                             l4256 03C1                               l4248 03A1  
                             l4192 02E1                               l4176 028B  
                             l4168 0273                               l3626 0A56  
                             l3570 0D02                               l2578 0BD1  
                             l4274 0400                               l4266 03E0  
                             l4258 03CB                               l4178 0291  
                             l4186 02A4                               l2924 0C4B  
                             l2916 0C38                               l2908 0C14  
                             l2684 1656                               l3636 0A77  
                             l2676 177F                               l3556 0CBD  
                             l4276 040A                               l4188 02C5  
                             l3750 076E                               l3734 0755  
                             l2678 178A                               l3566 0CF5  
                             l3558 0CCD                               l4198 030D  
                             l4550 02AE                               l3808 0A80  
                             l2688 165C                               l3744 076C  
                             l3728 0731                               l3592 0E27  
                             l3584 0E17                               l4552 0BD9  
                             l4472 06FA                               l4464 06DA  
                             l4456 06C4                               l4296 04CA  
                             l3770 07A6                               l3762 07A2  
                             l4554 074A                               l3594 0E37  
                             l2892 0C01                               l3756 0793  
                             l3772 070B                               l3774 07ED  
                             l3950 098D                               l3792 0B79  
                             l2898 0C0C                               l3946 0976  
                             l3964 0B0F                               l3948 0967  
                             l3990 0B4B                               l3982 0B38  
                             l3976 0B1C                               l3968 0B16  
                             l3888 0F05                               l3978 0B2A  
                             l3986 0B43                               STR_1 081C  
                             STR_2 0935                        get_time@min 004C  
                             STR_3 08BB                               STR_4 08C6  
                             STR_5 08DA                               STR_6 0902  
                             STR_7 08E4                               STR_8 08F8  
                             STR_9 08D0                               _BRGH 04C2  
                             _CREN 00C4                               u2105 17E8  
                             u2115 17F1                               u2155 09DC  
                             u2085 17D7                               u4015 0EDB  
                             u4105 0B1F                               u4035 0DBA  
                             u2525 0C17                               u4125 0B30  
                             u4045 0DD9                               u4135 0B39  
                             u5007 01DE                               u2545 0C23  
                             u5017 01F0                               u2555 0C2F  
                             u5107 0D17                               u5027 0202  
                             u2565 0C39                               u5117 0D27  
                             u5037 0214                               u5127 0D37  
                             u5047 0226                               u5137 09EC  
                             u3545 0CC1                               u5057 0238  
                             u5147 09FD                               u3715 0A4B  
                             u3635 0E2B                               u3811 0F63  
                             u5067 024A                               _PEIE 005E  
                             u3812 0F64                               u5157 1690  
                             u3565 0CCF                               u3813 0F69  
                             u3805 0F4C                               u5077 025A  
                             u3814 0F6A                               u3735 0A57  
                             u3575 0CE4                               u3655 0E39  
                             u3815 0F6F                               u5087 04D2  
                             u4375 02D8                               u3816 0F70  
                             u3745 0A63                               u3585 0CF6  
                             u3665 0E4E                               u5097 067B  
                             u3755 0A6D                               u3675 0E60  
                             u3851 0FC3                               u3835 0F93  
                             u3852 0FC4                               _RCEN 048B  
                             _RCIF 0065                               u3853 0FC9  
                             u3845 0FAC                               u3854 0FCA  
                             u3775 09A5                               u3855 0FCF  
                             u3856 0FD0                               u3955 0B5E  
                             u3795 0F33                               u4675 04F2  
                             u4685 052B                               u3975 0B85  
                             u3895 0789                               u4957 006E  
                             u4967 008C                               u4977 00CF  
                             u4987 01BA                               u4997 01CC  
                             _TMR0 0001                               _SPEN 00C7  
                             _TRMT 04C1                               _TXEN 04C5  
                             _SYNC 04C4                       __CFG_WRT$OFF 0000  
                             _day1 0079                               _day2 0025  
                             _bank 002E                  ?_Lcd_Write_String 0047  
 __end_of_I2C_Master_RepeatedStart 161B                               _cont 002D  
                             _door 003A                               _main 003B  
                             _hour 002B                               _temp 003B  
                             _time 0041                               _trip 0039  
                             btemp 007E                               start 000C  
               ??_Lcd_Write_String 0049                      __CFG_IESO$OFF 0000  
                  __end_of_Lcd_Cmd 1699                  ___bmul@multiplier 0076  
                    __CFG_MCLRE$ON 0000                get_temp@temp_string 0066  
                 ?_I2C_Master_Init 0054                   ?_I2C_Master_Read 0073  
                 ?_I2C_Master_Wait 0070                   ?_I2C_Master_Stop 0070  
                  __end_of___aldiv 0E83                              ?_main 0070  
                  __end_of___awdiv 0C50                              STR_10 08EE  
                            STR_11 084F                              STR_12 094E  
                            STR_20 0926                              STR_21 091F  
                            STR_13 0948                              STR_22 0927  
                            STR_14 0942                              STR_30 0873  
                            STR_23 092E                              STR_31 088B  
                            STR_15 087F                              STR_24 093C  
                            STR_32 08A3                              STR_16 0897  
                            STR_17 090C                              STR_33 0859  
                            STR_25 083B                      __CFG_WDTE$OFF 0000  
                            STR_34 0960                              STR_18 0915  
                            STR_26 08AF                              STR_35 095A  
                            STR_19 091E                              STR_27 0866  
                            STR_36 095F                              STR_28 0954  
                  __end_of___awmod 0B50                              STR_29 084C  
                     get_time@hour 004B                              _ANSEL 0188  
                  __end_of___lldiv 0D0B                     ??_get_tripwire 0077  
                  ___awdiv@divisor 0073                    __end_of___lwdiv 0A7C  
                            i1l310 16E1                              i1l313 16E7  
                  __end_of___lwmod 1800                    ___awdiv@counter 0047  
                            _RCREG 001A                              _SPBRG 0099  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                              _PORTD 0008  
                            _PORTE 0009            __size_of_Lcd_Set_Cursor 0050  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087                              _TRISD 0088  
                            _SSPIE 0463                              _TRISE 0089  
                            _SSPIF 0063                              _TXREG 0019  
                  __end_of_get_PIR 1734                     __CFG_FCMEN$OFF 0000  
                  __end_of_get_day 0A3E                        ?_UART_Write 0070  
               __size_of_UART_Init 00D8                              _alarm 002F  
          __size_of_Lcd_Shift_Left 000B                    __end_of_dpowers 081C  
                            _setup 0C50                              _state 007A  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 07F2                   __end_of_Lcd_Init 0D6B  
                 __end_of_Lcd_Port 167F                    __initialization 000F  
                     __end_of_main 0704             __size_of_initOscilador 0055  
                           ??_main 00A0                 __size_of_Lcd_Clear 000B  
                ?_I2C_Master_Start 0070                  ?_I2C_Master_Write 0073  
               ??_I2C_Master_Start 0073                 ??_I2C_Master_Write 0075  
                 ___awdiv@dividend 0075                             ?_setup 0070  
                           _ANSELH 0189                             i1l2984 16E3  
                           i1l2986 16E4                          ??_Lcd_Cmd 0074  
          __size_of_Lcd_Write_Char 0039                             _SSPADD 0093  
                           _TRISC3 043B                             _TRISC4 043C  
                           _TRISC6 043E                             _TRISC7 043F  
                           _SSPCON 0014                             _SSPBUF 0013  
                   __CFG_PWRTE$OFF 0000           _I2C_Master_RepeatedStart 1614  
                 __end_of_get_hall 1757                  __end_of_UART_Init 1000  
                 __end_of_get_temp 0F28                   __end_of_get_time 0DF4  
                           ___bmul 1654                __size_of_UART_Write 000A  
                        ??___aldiv 0073                          ??___awdiv 0077  
                        ??___awmod 0077                             _change 0034  
                        ??___lldiv 0073                             _get_IR 16EE  
                        ??___lwdiv 0077                          ??___lwmod 004E  
         __size_of_Lcd_Shift_Right 000B                   ___awdiv@quotient 0049  
                           _newmin 0027                    ___awmod@divisor 0073  
                        ??_get_PIR 0077                    ___awmod@counter 0047  
            __end_of_UART_TX_Empty 1606                          ??_get_day 0077  
                           _strcat 177A                             _strcmp 0963  
                           saved_w 007E                          ??_sprintf 0054  
                  Lcd_Set_Cursor@a 0049                    Lcd_Set_Cursor@b 0077  
                  Lcd_Set_Cursor@y 004B                    Lcd_Set_Cursor@z 004A  
          __end_of__initialization 0037                      _initOscilador 0BA0  
                __end_of_Lcd_Clear 1649               __end_of_get_tripwire 177A  
              ___bmul@multiplicand 0073                     __pcstackCOMMON 0070  
                     __pidataBANK0 15FB                      __end_of_setup 0CAB  
                   _Lcd_Set_Cursor 0B50                     _OPTION_REGbits 0081  
                   _Lcd_Shift_Left 1649                          ?_Lcd_Init 0070  
                        ?_Lcd_Port 0070                            ??_setup 0078  
                       __pbssBANK0 0020                     ?_initOscilador 0070  
                       __pmaintext 003B                            ?___bmul 0073  
                          ?_get_IR 0070                         __pintentry 0004  
               __size_of_open_door 001B          __size_of_Lcd_Write_String 0041  
           __end_of_Lcd_Set_Cursor 0BA0                            ?_strcat 0073  
                          ?_strcmp 0073             __end_of_Lcd_Shift_Left 1654  
                ??_Lcd_Shift_Right 0077                         _close_door 1699  
                     ??_UART_Write 0073                         ??_Lcd_Init 0047  
                       ??_Lcd_Port 0073                            _SSPCON2 0091  
                        ?_get_hall 0070                            _SSPSTAT 0094  
                        ?_get_temp 0070                          ?_get_time 0070  
                       __stringtab 0800                initOscilador@option 0075  
                   _Lcd_Write_Char 09CB                            _Lcd_Cmd 167F  
               __size_of_write_RTC 0046                         _manual_pwm 16CF  
                          ___aldiv 0DF4                    __size_of___bmul 0011  
                          ___awdiv 0BF5                            ___awmod 0B03  
                          ___lldiv 0CAB                 __end_of_UART_Write 163E  
                          ___lwdiv 0A3E                            ___lwmod 17CC  
                  __size_of_get_IR 0023                            _change1 0033  
                          _change2 0032                            _change3 0031  
                          _change4 0030                    ?_Lcd_Set_Cursor 0077  
                          _get_PIR 1711                            __ptext1 0ABD  
                          __ptext2 0963                            __ptext3 0C50  
                          __ptext4 0BA0                            __ptext5 0F28  
                          __ptext6 0DF4                            __ptext7 0D0B  
                          __ptext8 0993                            __ptext9 0CAB  
                          _get_day 0A04                get_time@time_string 004D  
                  __size_of_strcat 0024                    __size_of_strcmp 0030  
                          _dpowers 0812                    ?_Lcd_Shift_Left 0070  
                 ___awmod@dividend 0075                   ___aldiv@dividend 004B  
                          _newhour 0028           __size_of_I2C_Master_Init 0038  
         __size_of_I2C_Master_Read 002E           __size_of_I2C_Master_Wait 0009  
         __size_of_I2C_Master_Stop 0007                    ??_initOscilador 0073  
                       ??_get_hall 0077                            _sprintf 0704  
                          clrloop0 1624             __end_of_Lcd_Write_Char 0A04  
                       ??_get_temp 005F                         ??_get_time 0049  
             end_of_initialization 0037              __size_of_get_tripwire 0023  
       ??_I2C_Master_RepeatedStart 0073                  __end_of_open_door 16CF  
                       get_PIR@PIR 0049          __size_of_I2C_Master_Start 0007  
        __size_of_I2C_Master_Write 0008                    ___lldiv@divisor 0047  
                  ___lldiv@counter 0053                          _RCSTAbits 0018  
                 ___aldiv@quotient 0051                   I2C_Master_Init@c 0054  
                 I2C_Master_Read@a 0073                          Lcd_Port@a 0073  
                     write_RTC@day 0076                       __pstringtext 0800  
                          strcmp@r 0047                          _UART_Init 0F28  
                        _PORTAbits 0005                          _PORTBbits 0006  
                        _PORTCbits 0007                          _PORTDbits 0008  
                        _PORTEbits 0009                     UART_Write@data 0073  
                __end_of_write_RTC 0B03                       _get_tripwire 1757  
                      ?_close_door 0070                          _TRISCbits 0087  
                  ?_Lcd_Write_Char 0070                  Lcd_Write_String@a 0047  
                Lcd_Write_String@i 004C                          _Lcd_Clear 163E  
                      ?_manual_pwm 0070                     __end_of___bmul 1665  
                 _Lcd_Write_String 0A7C                         ?_UART_Init 0055  
                   __end_of_get_IR 1711                     __end_of_strcat 179E  
                   __end_of_strcmp 0993                start_initialization 000F  
                __size_of_Lcd_Init 0060                  __size_of_Lcd_Port 001A  
                ??_I2C_Master_Init 0074                  ??_I2C_Master_Read 0075  
                ??_I2C_Master_Wait 0073                  ??_I2C_Master_Stop 0073  
           __size_of_UART_TX_Empty 0006           __CFG_FOSC$INTRC_NOCLKOUT 0000  
                       ?_Lcd_Clear 0070                           ??___bmul 0074  
              __size_of_close_door 001B                    _Lcd_Shift_Right 07F2  
                         ??_get_IR 0077                        __pdataBANK0 0068  
                  Lcd_Write_Char@a 0077                    Lcd_Write_Char@y 0076  
                         ??_strcat 0074                           ??_strcmp 0075  
                 write_RTC@minutes 0075                        __pbssCOMMON 0078  
                        ___latbits 0002                      __pcstackBANK0 0047  
                    __pcstackBANK1 00A0                __size_of_manual_pwm 001F  
                __size_of_get_hall 0023                           ?_Lcd_Cmd 0070  
                __size_of_get_temp 00A5                  __size_of_get_time 0089  
                      sprintf@flag 0059                        sprintf@prec 005A  
                 _I2C_Master_Start 1606                   _I2C_Master_Write 161B  
                 ___lwdiv@dividend 0075                   ??_Lcd_Set_Cursor 0047  
                  get_temp@decimal 0062                           ?___aldiv 0047  
                         ?___awdiv 0073                           ?___awmod 0073  
                         ?___lldiv 0047                           ?___lwdiv 0073  
                         ?___lwmod 004A                   ??_Lcd_Shift_Left 0077  
                      ??_UART_Init 0059                           ?_get_PIR 0070  
                         ?_get_day 0070                    get_temp@tempLSB 0067  
                  get_temp@tempMSB 0065                      _UART_TX_Empty 1600  
                 ___lwdiv@quotient 0048                           ?_sprintf 0050  
                       UART_Init@x 0074                     __size_of_setup 005B  
                  ___aldiv@divisor 0047                  interrupt_function 0004  
                  ___aldiv@counter 004F            __end_of_Lcd_Shift_Right 07FD  
                        clear_ram0 1623                          _passwordu 0020  
                        _open_door 16B4                           Lcd_Cmd@a 0076  
                        _seguridad 0029                        ??_Lcd_Clear 0077  
                UART_Init@baudrate 0055                        __stringbase 0812  
                   ?_UART_TX_Empty 0070                   ??_Lcd_Write_Char 0074  
                     ??_close_door 0075                           _Lcd_Init 0D0B  
                         _Lcd_Port 1665                          _write_RTC 0ABD  
              I2C_Master_Read@temp 0047              __end_of_initOscilador 0BF5  
         __end_of_Lcd_Write_String 0ABD                   __size_of_Lcd_Cmd 001A  
                       ?_open_door 0070                       ??_manual_pwm 0070  
               __end_of_close_door 16B4                   __size_of___aldiv 008F  
__size_of_I2C_Master_RepeatedStart 0007                   __size_of___awdiv 005B  
                 __size_of___awmod 004D          ?_I2C_Master_RepeatedStart 0070  
                 __size_of___lldiv 0060                   __size_of___lwdiv 003E  
                 __size_of___lwmod 0034                 __end_of__stringtab 0812  
                 __size_of_get_PIR 0023                   __size_of_get_day 003A  
                       sprintf@val 005B                    _I2C_Master_Init 0993  
                  _I2C_Master_Read 179E                    _I2C_Master_Wait 162B  
                       strcat@from 0073                    _I2C_Master_Stop 160D  
                  ___lwdiv@divisor 0073                    ___lwdiv@counter 0047  
                         __ptext10 16B4                           __ptext11 1757  
                         __ptext20 0A04                           __ptext12 0D6B  
                         __ptext21 1614                           __ptext13 0E83  
                         __ptext30 0B03                           __ptext22 1711  
                         __ptext14 177A                           __ptext31 0BF5  
                         __ptext23 16EE                           __ptext15 0704  
                         __ptext40 167F                           __ptext32 1634  
                         __ptext24 179E                           __ptext16 17CC  
                         __ptext41 1665                           __ptext33 1600  
                         __ptext25 1699                           __ptext17 0A3E  
                         __ptext42 16CF                           __ptext34 0A7C  
                         __ptext26 161B                           __ptext18 1654  
                         __ptext35 09CB                           __ptext27 160D  
                         __ptext19 1734                           __ptext36 07F2  
                         __ptext28 1606                           __ptext37 1649  
                         __ptext29 162B                           __ptext38 0B50  
                         __ptext39 163E                         ?_write_RTC 0075  
                __CFG_BOR4V$BOR40V 0000                           _get_hall 1734  
                         _get_temp 0E83                           _get_time 0D6B  
                 __size_of_sprintf 00EE                 __end_of_manual_pwm 16EE  
                    __size_of_main 06C9                   ?_Lcd_Shift_Right 0070  
                         get_IR@IR 0049                           _password 0068  
                         get_day@d 0049                    ??_UART_TX_Empty 0073  
         __end_of_I2C_Master_Start 160D           __end_of_I2C_Master_Write 1623  
                       _INTCONbits 000B                 Lcd_Write_Char@temp 0075  
                         intlevel1 0000                          sprintf@ap 0058  
                        sprintf@sp 005D                   ___lwmod@dividend 004C  
                 ___lldiv@dividend 004B                        ??_open_door 0075  
                        stringcode 080A                         _OSCCONbits 008F  
          __end_of_I2C_Master_Init 09CB            __end_of_I2C_Master_Read 17CC  
          __end_of_I2C_Master_Wait 1634            __end_of_I2C_Master_Stop 1614  
               Lcd_Set_Cursor@temp 004C                      write_RTC@hour 0077  
                         sprintf@c 005E                           sprintf@f 0050  
                         strcat@cp 0076                           strcat@to 0075  
                         strcmp@s1 0048                           strcmp@s2 0073  
                 ___lldiv@quotient 004F                  I2C_Master_Write@d 0073  
                  ___lwmod@divisor 004A                    ___lwmod@counter 004F  
                 get_tripwire@trip 0049                           stringtab 0800  
                     ___aldiv@sign 0050                         _UART_Write 1634  
                      _SSPCON2bits 0091                        ??_write_RTC 0047  
                       _SSPCONbits 0014  
